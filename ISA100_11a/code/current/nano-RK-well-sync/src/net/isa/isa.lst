   1               		.file	"isa.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 162               	.global	config_child_list
 164               	config_child_list:
 165               		.stabd	46,0,0
   1:../../../src/net/isa/isa.c **** /******************************************************************************
   2:../../../src/net/isa/isa.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/net/isa/isa.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/net/isa/isa.c **** *  All rights reserved.
   5:../../../src/net/isa/isa.c **** *
   6:../../../src/net/isa/isa.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/net/isa/isa.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/net/isa/isa.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/net/isa/isa.c **** *
  10:../../../src/net/isa/isa.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/net/isa/isa.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/net/isa/isa.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/net/isa/isa.c **** *
  14:../../../src/net/isa/isa.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/net/isa/isa.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/net/isa/isa.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/net/isa/isa.c **** *  GNU General Public License for more details.
  18:../../../src/net/isa/isa.c **** *
  19:../../../src/net/isa/isa.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/net/isa/isa.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/net/isa/isa.c **** *
  22:../../../src/net/isa/isa.c **** *  Contributing Authors (specific to this file):
  23:../../../src/net/isa/isa.c **** *  Anthony Rowe
  24:../../../src/net/isa/isa.c **** *******************************************************************************/
  25:../../../src/net/isa/isa.c **** 
  26:../../../src/net/isa/isa.c **** //#include <rtl_debug.h>
  27:../../../src/net/isa/isa.c **** #include <include.h>
  28:../../../src/net/isa/isa.c **** #include <ulib.h>
  29:../../../src/net/isa/isa.c **** #include <avr/sleep.h>
  30:../../../src/net/isa/isa.c **** #include <avr/wdt.h>
  31:../../../src/net/isa/isa.c **** #include <avr/eeprom.h>
  32:../../../src/net/isa/isa.c **** #include <stdio.h>
  33:../../../src/net/isa/isa.c **** #include <avr/interrupt.h>
  34:../../../src/net/isa/isa.c **** #include <nrk.h>
  35:../../../src/net/isa/isa.c **** #include <nrk_events.h>
  36:../../../src/net/isa/isa.c **** #include <nrk_timer.h>
  37:../../../src/net/isa/isa.c **** #include <nrk_error.h>
  38:../../../src/net/isa/isa.c **** //#include <rtl_defs.h>
  39:../../../src/net/isa/isa.c **** #include <stdlib.h>
  40:../../../src/net/isa/isa.c **** //#include <isa_scheduler.h>
  41:../../../src/net/isa/isa.c **** //#include <dlmo.h>
  42:../../../src/net/isa/isa.c **** #include <isa.h>
  43:../../../src/net/isa/isa.c **** #include <isa_defs.h>
  44:../../../src/net/isa/isa.c **** #include <isa_error.h>
  45:../../../src/net/isa/isa.c **** #include <dmo.h>
  46:../../../src/net/isa/isa.c **** 
  47:../../../src/net/isa/isa.c **** 
  48:../../../src/net/isa/isa.c **** #define CHANNEL_HOPPING 
  49:../../../src/net/isa/isa.c **** //#define CORRECTION
  50:../../../src/net/isa/isa.c **** //#define INIT_SYNC
  51:../../../src/net/isa/isa.c **** #define LED_SLOT_DEBUG
  52:../../../src/net/isa/isa.c **** //#define HIGH_TIMER_DEBUG
  53:../../../src/net/isa/isa.c **** #define TX_RX_DEBUG
  54:../../../src/net/isa/isa.c **** #define ACK_DEBUG
  55:../../../src/net/isa/isa.c **** #define RX_DEBUG
  56:../../../src/net/isa/isa.c **** #define TX_DEBUG
  57:../../../src/net/isa/isa.c **** //#define JOIN_PROCESS
  58:../../../src/net/isa/isa.c **** 
  59:../../../src/net/isa/isa.c **** #ifdef JOIN_PROCESS
  60:../../../src/net/isa/isa.c ****  uint8_t join_pkt_buf[RF_MAX_PAYLOAD_SIZE];
  61:../../../src/net/isa/isa.c **** #endif
  62:../../../src/net/isa/isa.c **** /* Device management object*/
  63:../../../src/net/isa/isa.c ****  DMO dmo;
  64:../../../src/net/isa/isa.c **** 
  65:../../../src/net/isa/isa.c **** /* slot related declaration */
  66:../../../src/net/isa/isa.c **** volatile uint16_t global_slot;
  67:../../../src/net/isa/isa.c **** volatile uint16_t current_global_slot;
  68:../../../src/net/isa/isa.c **** volatile uint16_t global_cycle;
  69:../../../src/net/isa/isa.c **** uint16_t last_sync_slot;
  70:../../../src/net/isa/isa.c **** 
  71:../../../src/net/isa/isa.c **** /* channel hopping related declaration */
  72:../../../src/net/isa/isa.c **** uint8_t slottedPattern[16];
  73:../../../src/net/isa/isa.c **** uint8_t slowPattern[3];
  74:../../../src/net/isa/isa.c **** uint8_t currentChannel;
  75:../../../src/net/isa/isa.c **** uint8_t channelIndex;
  76:../../../src/net/isa/isa.c **** uint8_t slowIndex;
  77:../../../src/net/isa/isa.c **** 
  78:../../../src/net/isa/isa.c **** /*used for calculating offset*/
  79:../../../src/net/isa/isa.c **** uint16_t slot_start_time;
  80:../../../src/net/isa/isa.c **** uint16_t tx_start_time; // actual transmission starting time
  81:../../../src/net/isa/isa.c **** uint16_t rx_start_time; 
  82:../../../src/net/isa/isa.c **** uint16_t offsetY;
  83:../../../src/net/isa/isa.c **** uint16_t offsetX;
  84:../../../src/net/isa/isa.c **** 
  85:../../../src/net/isa/isa.c **** 
  86:../../../src/net/isa/isa.c **** /* SYNC related declaration */
  87:../../../src/net/isa/isa.c **** uint8_t _isa_sync_ok;
  88:../../../src/net/isa/isa.c **** uint8_t AFTER_FIRST_SYNC;
  89:../../../src/net/isa/isa.c **** uint16_t EXPIRATION = 200;// each slot lasts for 10ms, so 100 slots last for 1s
  90:../../../src/net/isa/isa.c **** uint16_t slot_expired;
  91:../../../src/net/isa/isa.c **** uint8_t previous_tx_slot;
  92:../../../src/net/isa/isa.c **** 
  93:../../../src/net/isa/isa.c **** /* signal related declaration */
  94:../../../src/net/isa/isa.c **** int8_t isa_tx_done_signal;
  95:../../../src/net/isa/isa.c **** int8_t isa_rx_pkt_signal;
  96:../../../src/net/isa/isa.c **** 
  97:../../../src/net/isa/isa.c **** /* header type */
  98:../../../src/net/isa/isa.c **** 
  99:../../../src/net/isa/isa.c **** //uint8_t DMXHR[4]; //Data link layer media access control extension sub header, mainly used for se
 100:../../../src/net/isa/isa.c **** uint8_t DAUX[29]; //Data link layer auxiliary sub-header, currently used for join process
 101:../../../src/net/isa/isa.c **** //uint8_t DROUT[3]; //Routing sub-header, compressed variant
 102:../../../src/net/isa/isa.c **** //uint8_t DADDR[5]; //Addressing sub-header
 103:../../../src/net/isa/isa.c **** uint8_t DHR;   // ACK's data link layer header
 104:../../../src/net/isa/isa.c **** 
 105:../../../src/net/isa/isa.c **** /* Test variable */
 106:../../../src/net/isa/isa.c **** uint8_t tmp_curSec;
 107:../../../src/net/isa/isa.c **** uint8_t tmp_offsetSec;
 108:../../../src/net/isa/isa.c **** int16_t tmp_offsetNanoSec;
 109:../../../src/net/isa/isa.c **** uint16_t tmp_count=0;
 110:../../../src/net/isa/isa.c **** uint16_t DHDRcount = 0;
 111:../../../src/net/isa/isa.c **** uint16_t txCount = 0;		//Holds the number of packets transmitted successfully
 112:../../../src/net/isa/isa.c **** uint16_t rxCount = 0;		// Holds the number of packets received successfully
 113:../../../src/net/isa/isa.c **** uint16_t packetsLost = 0; //Holds packets lost (receive  + ACK )
 114:../../../src/net/isa/isa.c **** 
 115:../../../src/net/isa/isa.c **** uint8_t check = 0;
 116:../../../src/net/isa/isa.c **** 
 117:../../../src/net/isa/isa.c **** 
 118:../../../src/net/isa/isa.c **** void config_child_list (uint8_t node_id)
 119:../../../src/net/isa/isa.c **** {
 167               	.LM0:
 168               	.LFBB1:
 169               	/* prologue: frame size=0 */
 170               	/* prologue end (size=0) */
 120:../../../src/net/isa/isa.c ****     child_list |= ((uint32_t) 1) << node_id;
 172               	.LM1:
 173 0000 21E0      		ldi r18,lo8(1)
 174 0002 30E0      		ldi r19,hi8(1)
 175 0004 40E0      		ldi r20,hlo8(1)
 176 0006 50E0      		ldi r21,hhi8(1)
 177 0008 00C0      		rjmp 2f
 178 000a 220F      	1:	lsl r18
 179 000c 331F      		rol r19
 180 000e 441F      		rol r20
 181 0010 551F      		rol r21
 182 0012 8A95      	2:	dec r24
 183 0014 02F4      		brpl 1b
 184 0016 8091 0000 		lds r24,child_list
 185 001a 9091 0000 		lds r25,(child_list)+1
 186 001e A091 0000 		lds r26,(child_list)+2
 187 0022 B091 0000 		lds r27,(child_list)+3
 188 0026 822B      		or r24,r18
 189 0028 932B      		or r25,r19
 190 002a A42B      		or r26,r20
 191 002c B52B      		or r27,r21
 192 002e 8093 0000 		sts child_list,r24
 193 0032 9093 0000 		sts (child_list)+1,r25
 194 0036 A093 0000 		sts (child_list)+2,r26
 195 003a B093 0000 		sts (child_list)+3,r27
 196               	/* epilogue: frame size=0 */
 197 003e 0895      		ret
 198               	/* epilogue end (size=1) */
 199               	/* function config_child_list size 33 (32) */
 201               	.Lscope1:
 203               		.stabd	78,0,0
 205               	.global	isa_get_channel
 207               	isa_get_channel:
 208               		.stabd	46,0,0
 121:../../../src/net/isa/isa.c **** }
 122:../../../src/net/isa/isa.c **** 
 123:../../../src/net/isa/isa.c **** /**
 124:../../../src/net/isa/isa.c ****  * isa_set_channel()
 125:../../../src/net/isa/isa.c ****  *
 126:../../../src/net/isa/isa.c ****  * This function set channel and is used for channel hopping.
 127:../../../src/net/isa/isa.c ****  *
 128:../../../src/net/isa/isa.c ****  */
 129:../../../src/net/isa/isa.c **** void isa_set_channel (uint8_t chan)
 130:../../../src/net/isa/isa.c **** {
 131:../../../src/net/isa/isa.c ****     isa_param.channel = chan;
 132:../../../src/net/isa/isa.c ****     rf_set_channel (chan);
 133:../../../src/net/isa/isa.c **** }
 134:../../../src/net/isa/isa.c **** 
 135:../../../src/net/isa/isa.c **** uint8_t isa_get_channel()
 136:../../../src/net/isa/isa.c **** {
 210               	.LM2:
 211               	.LFBB2:
 212               	/* prologue: frame size=0 */
 213               	/* prologue end (size=0) */
 214 0040 8091 0000 		lds r24,isa_param+2
 137:../../../src/net/isa/isa.c ****     return isa_param.channel;
 138:../../../src/net/isa/isa.c **** }
 216               	.LM3:
 217 0044 9927      		clr r25
 218               	/* epilogue: frame size=0 */
 219 0046 0895      		ret
 220               	/* epilogue end (size=1) */
 221               	/* function isa_get_channel size 4 (3) */
 223               	.Lscope2:
 225               		.stabd	78,0,0
 228               	.global	isa_set_channel_pattern
 230               	isa_set_channel_pattern:
 231               		.stabd	46,0,0
 139:../../../src/net/isa/isa.c **** 
 140:../../../src/net/isa/isa.c **** void isa_set_channel_pattern(uint8_t pattern)
 141:../../../src/net/isa/isa.c **** {
 233               	.LM4:
 234               	.LFBB3:
 235               	/* prologue: frame size=0 */
 236               	/* prologue end (size=0) */
 142:../../../src/net/isa/isa.c ****     switch (pattern)
 238               	.LM5:
 239 0048 8130      		cpi r24,lo8(1)
 240 004a 01F0      		breq .L7
 242               	.LM6:
 243 004c 8330      		cpi r24,lo8(3)
 244 004e 01F4      		brne .L9
 245 0050 00C0      		rjmp .L8
 246               	.L7:
 143:../../../src/net/isa/isa.c ****     {
 144:../../../src/net/isa/isa.c **** 	case 1:
 145:../../../src/net/isa/isa.c **** 	    slottedPattern[0] = 19;
 248               	.LM7:
 249 0052 83E1      		ldi r24,lo8(19)
 250 0054 8093 0000 		sts slottedPattern,r24
 146:../../../src/net/isa/isa.c **** 	    slottedPattern[1] = 12;
 252               	.LM8:
 253 0058 8CE0      		ldi r24,lo8(12)
 254 005a 8093 0000 		sts slottedPattern+1,r24
 147:../../../src/net/isa/isa.c **** 	    slottedPattern[2] = 20;
 256               	.LM9:
 257 005e 84E1      		ldi r24,lo8(20)
 258 0060 8093 0000 		sts slottedPattern+2,r24
 148:../../../src/net/isa/isa.c **** 	    slottedPattern[3] = 24;
 260               	.LM10:
 261 0064 88E1      		ldi r24,lo8(24)
 262 0066 8093 0000 		sts slottedPattern+3,r24
 149:../../../src/net/isa/isa.c **** 	    slottedPattern[4] = 16;
 264               	.LM11:
 265 006a 80E1      		ldi r24,lo8(16)
 266 006c 8093 0000 		sts slottedPattern+4,r24
 150:../../../src/net/isa/isa.c **** 	    slottedPattern[5] = 23;
 268               	.LM12:
 269 0070 87E1      		ldi r24,lo8(23)
 270 0072 8093 0000 		sts slottedPattern+5,r24
 151:../../../src/net/isa/isa.c **** 	    slottedPattern[6] = 18;
 272               	.LM13:
 273 0076 82E1      		ldi r24,lo8(18)
 274 0078 8093 0000 		sts slottedPattern+6,r24
 152:../../../src/net/isa/isa.c **** 	    slottedPattern[7] = 25;
 276               	.LM14:
 277 007c 89E1      		ldi r24,lo8(25)
 278 007e 8093 0000 		sts slottedPattern+7,r24
 153:../../../src/net/isa/isa.c **** 	    slottedPattern[8] = 14;
 280               	.LM15:
 281 0082 8EE0      		ldi r24,lo8(14)
 282 0084 8093 0000 		sts slottedPattern+8,r24
 154:../../../src/net/isa/isa.c **** 	    slottedPattern[9] = 21;
 284               	.LM16:
 285 0088 85E1      		ldi r24,lo8(21)
 286 008a 8093 0000 		sts slottedPattern+9,r24
 155:../../../src/net/isa/isa.c **** 	    slottedPattern[10] = 11;
 288               	.LM17:
 289 008e 8BE0      		ldi r24,lo8(11)
 290 0090 8093 0000 		sts slottedPattern+10,r24
 156:../../../src/net/isa/isa.c **** 	    slottedPattern[11] = 15;
 292               	.LM18:
 293 0094 8FE0      		ldi r24,lo8(15)
 294 0096 8093 0000 		sts slottedPattern+11,r24
 157:../../../src/net/isa/isa.c **** 	    slottedPattern[12] = 22;
 296               	.LM19:
 297 009a 86E1      		ldi r24,lo8(22)
 298 009c 8093 0000 		sts slottedPattern+12,r24
 158:../../../src/net/isa/isa.c **** 	    slottedPattern[13] = 17;
 300               	.LM20:
 301 00a0 81E1      		ldi r24,lo8(17)
 302 00a2 8093 0000 		sts slottedPattern+13,r24
 159:../../../src/net/isa/isa.c **** 	    slottedPattern[14] = 13;
 304               	.LM21:
 305 00a6 8DE0      		ldi r24,lo8(13)
 306 00a8 8093 0000 		sts slottedPattern+14,r24
 160:../../../src/net/isa/isa.c **** 	    slottedPattern[15] = 26;
 308               	.LM22:
 309 00ac 8AE1      		ldi r24,lo8(26)
 310 00ae 8093 0000 		sts slottedPattern+15,r24
 311 00b2 0895      		ret
 312               	.L8:
 161:../../../src/net/isa/isa.c **** 	    break;
 162:../../../src/net/isa/isa.c **** 	case 3:
 163:../../../src/net/isa/isa.c **** 	    slowPattern[0]=15;
 314               	.LM23:
 315 00b4 8FE0      		ldi r24,lo8(15)
 316 00b6 8093 0000 		sts slowPattern,r24
 164:../../../src/net/isa/isa.c **** 	    slowPattern[1]=20;
 318               	.LM24:
 319 00ba 84E1      		ldi r24,lo8(20)
 320 00bc 8093 0000 		sts slowPattern+1,r24
 165:../../../src/net/isa/isa.c **** 	    slowPattern[2]=25;
 322               	.LM25:
 323 00c0 89E1      		ldi r24,lo8(25)
 324 00c2 8093 0000 		sts slowPattern+2,r24
 325               	.L9:
 326 00c6 0895      		ret
 327               	/* epilogue: frame size=0 */
 328               	/* epilogue: noreturn */
 329               	/* epilogue end (size=0) */
 330               	/* function isa_set_channel_pattern size 64 (64) */
 332               	.Lscope3:
 334               		.stabd	78,0,0
 336               	.global	isa_ready
 338               	isa_ready:
 339               		.stabd	46,0,0
 166:../../../src/net/isa/isa.c **** 	    break;
 167:../../../src/net/isa/isa.c **** 	default:
 168:../../../src/net/isa/isa.c **** 	    break;
 169:../../../src/net/isa/isa.c ****     }
 170:../../../src/net/isa/isa.c **** }
 171:../../../src/net/isa/isa.c **** 
 172:../../../src/net/isa/isa.c **** int8_t isa_ready()
 173:../../../src/net/isa/isa.c **** {
 341               	.LM26:
 342               	.LFBB4:
 343               	/* prologue: frame size=0 */
 344               	/* prologue end (size=0) */
 174:../../../src/net/isa/isa.c ****     if (_isa_ready ==  1)
 346               	.LM27:
 347 00c8 8091 0000 		lds r24,_isa_ready
 348 00cc 8130      		cpi r24,lo8(1)
 349 00ce 01F4      		brne .L11
 351               	.LM28:
 352 00d0 81E0      		ldi r24,lo8(1)
 353 00d2 90E0      		ldi r25,hi8(1)
 354 00d4 0895      		ret
 355               	.L11:
 356 00d6 8FEF      		ldi r24,lo8(-1)
 357 00d8 9FEF      		ldi r25,hi8(-1)
 175:../../../src/net/isa/isa.c ****         return NRK_OK;
 176:../../../src/net/isa/isa.c ****     else
 177:../../../src/net/isa/isa.c ****         return NRK_ERROR;
 178:../../../src/net/isa/isa.c **** }
 359               	.LM29:
 360 00da 0895      		ret
 361               	/* epilogue: frame size=0 */
 362               	/* epilogue: noreturn */
 363               	/* epilogue end (size=0) */
 364               	/* function isa_ready size 10 (10) */
 366               	.Lscope4:
 368               		.stabd	78,0,0
 372               	.global	isa_rx_pkt_set_buffer
 374               	isa_rx_pkt_set_buffer:
 375               		.stabd	46,0,0
 179:../../../src/net/isa/isa.c **** 
 180:../../../src/net/isa/isa.c **** int8_t isa_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
 181:../../../src/net/isa/isa.c **** {
 377               	.LM30:
 378               	.LFBB5:
 379               	/* prologue: frame size=0 */
 380               	/* prologue end (size=0) */
 182:../../../src/net/isa/isa.c **** 
 183:../../../src/net/isa/isa.c ****     if(size==0 || buf==NULL) return NRK_ERROR;
 382               	.LM31:
 383 00dc 6623      		tst r22
 384 00de 01F0      		breq .L16
 386               	.LM32:
 387 00e0 0097      		sbiw r24,0
 388 00e2 01F0      		breq .L16
 184:../../../src/net/isa/isa.c ****     isa_rfRxInfo.pPayload = buf;
 390               	.LM33:
 391 00e4 9093 0000 		sts (isa_rfRxInfo+5)+1,r25
 392 00e8 8093 0000 		sts isa_rfRxInfo+5,r24
 185:../../../src/net/isa/isa.c ****     isa_rfRxInfo.max_length = size;
 394               	.LM34:
 395 00ec 6093 0000 		sts isa_rfRxInfo+4,r22
 396 00f0 81E0      		ldi r24,lo8(1)
 397 00f2 90E0      		ldi r25,hi8(1)
 398 00f4 0895      		ret
 399               	.L16:
 186:../../../src/net/isa/isa.c **** 
 187:../../../src/net/isa/isa.c **** return NRK_OK;
 401               	.LM35:
 402 00f6 8FEF      		ldi r24,lo8(-1)
 403 00f8 9FEF      		ldi r25,hi8(-1)
 188:../../../src/net/isa/isa.c **** }
 405               	.LM36:
 406 00fa 0895      		ret
 407               	/* epilogue: frame size=0 */
 408               	/* epilogue: noreturn */
 409               	/* epilogue end (size=0) */
 410               	/* function isa_rx_pkt_set_buffer size 16 (16) */
 412               	.Lscope5:
 414               		.stabd	78,0,0
 416               	.global	isa_start
 418               	isa_start:
 419               		.stabd	46,0,0
 189:../../../src/net/isa/isa.c **** 
 190:../../../src/net/isa/isa.c **** int8_t isa_wait_until_rx_pkt()
 191:../../../src/net/isa/isa.c **** {
 192:../../../src/net/isa/isa.c ****     nrk_signal_register(isa_rx_pkt_signal);
 193:../../../src/net/isa/isa.c ****     if (isa_rx_pkt_check() != 0)
 194:../../../src/net/isa/isa.c ****         return NRK_OK;
 195:../../../src/net/isa/isa.c ****     nrk_event_wait (SIG(isa_rx_pkt_signal));
 196:../../../src/net/isa/isa.c ****     return NRK_OK;
 197:../../../src/net/isa/isa.c **** }
 198:../../../src/net/isa/isa.c **** 
 199:../../../src/net/isa/isa.c **** int8_t isa_wait_until_rx_or_tx ()
 200:../../../src/net/isa/isa.c **** {
 201:../../../src/net/isa/isa.c ****     nrk_signal_register(isa_rx_pkt_signal);
 202:../../../src/net/isa/isa.c ****     nrk_signal_register(isa_tx_done_signal);
 203:../../../src/net/isa/isa.c ****     nrk_event_wait (SIG(isa_rx_pkt_signal) | SIG(isa_tx_done_signal));
 204:../../../src/net/isa/isa.c ****     return NRK_OK;
 205:../../../src/net/isa/isa.c **** }
 206:../../../src/net/isa/isa.c **** 
 207:../../../src/net/isa/isa.c **** /**
 208:../../../src/net/isa/isa.c ****  * isa_init()
 209:../../../src/net/isa/isa.c ****  *
 210:../../../src/net/isa/isa.c ****  * This function sets up the low level link layer parameters.
 211:../../../src/net/isa/isa.c ****  * This starts the main timer routine that will then automatically
 212:../../../src/net/isa/isa.c ****  * trigger whenever a packet might be sent or received.
 213:../../../src/net/isa/isa.c ****  * This should be called before ANY scheduling information is set
 214:../../../src/net/isa/isa.c ****  * since it will clear some default values.
 215:../../../src/net/isa/isa.c ****  *
 216:../../../src/net/isa/isa.c ****  */
 217:../../../src/net/isa/isa.c **** uint8_t isa_init (isa_node_mode_t mode, uint8_t id, uint8_t src_id)
 218:../../../src/net/isa/isa.c **** {
 219:../../../src/net/isa/isa.c ****     uint8_t i;
 220:../../../src/net/isa/isa.c **** 
 221:../../../src/net/isa/isa.c ****     /* Generate signals */
 222:../../../src/net/isa/isa.c ****     isa_rx_pkt_signal=nrk_signal_create();
 223:../../../src/net/isa/isa.c ****     if(isa_rx_pkt_signal==NRK_ERROR){
 224:../../../src/net/isa/isa.c **** 	nrk_kprintf(PSTR("ISA ERROR: creating rx signal failed\r\n"));
 225:../../../src/net/isa/isa.c **** 	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
 226:../../../src/net/isa/isa.c **** 	return NRK_ERROR;
 227:../../../src/net/isa/isa.c ****     }
 228:../../../src/net/isa/isa.c ****     isa_tx_done_signal=nrk_signal_create();
 229:../../../src/net/isa/isa.c ****     if(isa_tx_done_signal==NRK_ERROR){
 230:../../../src/net/isa/isa.c **** 	nrk_kprintf(PSTR("ISA ERROR: creating tx signal failed\r\n"));
 231:../../../src/net/isa/isa.c **** 	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
 232:../../../src/net/isa/isa.c **** 	return NRK_ERROR;
 233:../../../src/net/isa/isa.c ****     }
 234:../../../src/net/isa/isa.c **** 
 235:../../../src/net/isa/isa.c ****     // No buffer to start with
 236:../../../src/net/isa/isa.c ****     isa_rfRxInfo.pPayload = NULL;
 237:../../../src/net/isa/isa.c ****     isa_rfRxInfo.max_length = 0;
 238:../../../src/net/isa/isa.c **** 
 239:../../../src/net/isa/isa.c ****     /*FIXME Actually we dont need to always run the high speed timer */
 240:../../../src/net/isa/isa.c ****     _nrk_high_speed_timer_start();  
 241:../../../src/net/isa/isa.c **** 
 242:../../../src/net/isa/isa.c ****     /* clear everything out */
 243:../../../src/net/isa/isa.c ****     global_cycle = 0;
 244:../../../src/net/isa/isa.c ****     global_slot = MAX_ISA_GLOBAL_SLOTS;
 245:../../../src/net/isa/isa.c ****     _isa_sync_ok = 0;
 246:../../../src/net/isa/isa.c ****     _isa_join_ok = 0;
 247:../../../src/net/isa/isa.c ****     slot_expired = 0;
 248:../../../src/net/isa/isa.c ****     isa_node_mode = mode;
 249:../../../src/net/isa/isa.c ****     isa_id = id;//change
 250:../../../src/net/isa/isa.c ****     dmo.dlAddress = id;
 251:../../../src/net/isa/isa.c ****     isa_clk_src_id=src_id; //change
 252:../../../src/net/isa/isa.c ****     isa_rx_data_ready = 0;
 253:../../../src/net/isa/isa.c **** 
 254:../../../src/net/isa/isa.c ****     isa_param.mobile_sync_timeout = 100;
 255:../../../src/net/isa/isa.c ****     isa_param.rx_timeout = 8000;   // 8000 *.125us = 1ms
 256:../../../src/net/isa/isa.c ****     isa_param.tx_guard_time = TX_GUARD_TIME;
 257:../../../src/net/isa/isa.c ****     isa_param.channel = 15;
 258:../../../src/net/isa/isa.c ****     isa_param.mac_addr = 0x1981;
 259:../../../src/net/isa/isa.c **** /*
 260:../../../src/net/isa/isa.c **** for (i = 0; i < ISA_SLOTS_PER_FRAME; i++) {
 261:../../../src/net/isa/isa.c ****         isa_sched[i] = 0;
 262:../../../src/net/isa/isa.c ****     }
 263:../../../src/net/isa/isa.c ****     isa_tdma_rx_mask = 0;
 264:../../../src/net/isa/isa.c ****     isa_tdma_tx_mask = 0;
 265:../../../src/net/isa/isa.c **** */
 266:../../../src/net/isa/isa.c ****     /* Setup the cc2420 chip */
 267:../../../src/net/isa/isa.c ****     rf_init (&isa_rfRxInfo, isa_param.channel, 0x2421, isa_param.mac_addr);
 268:../../../src/net/isa/isa.c **** 
 269:../../../src/net/isa/isa.c ****     AFTER_FIRST_SYNC = 1;
 270:../../../src/net/isa/isa.c **** 
 271:../../../src/net/isa/isa.c ****     /* Setup fisrt hopping channel */
 272:../../../src/net/isa/isa.c ****     #ifdef CHANNEL_HOPPING
 273:../../../src/net/isa/isa.c **** 	slowIndex=0; 
 274:../../../src/net/isa/isa.c **** 	if(id!=0){
 275:../../../src/net/isa/isa.c **** 	    channelIndex = src_id;
 276:../../../src/net/isa/isa.c **** 	    currentChannel = slottedPattern[channelIndex];   
 277:../../../src/net/isa/isa.c **** 	}else{
 278:../../../src/net/isa/isa.c **** 	    channelIndex = 0;
 279:../../../src/net/isa/isa.c **** 	    currentChannel = slottedPattern[channelIndex];
 280:../../../src/net/isa/isa.c **** 	}
 281:../../../src/net/isa/isa.c **** 	isa_set_channel(currentChannel);
 282:../../../src/net/isa/isa.c ****     #endif
 283:../../../src/net/isa/isa.c **** 
 284:../../../src/net/isa/isa.c ****     #ifdef JOIN_PROCESS
 285:../../../src/net/isa/isa.c **** 	if(mode==ISA_GATEWAY){
 286:../../../src/net/isa/isa.c **** 	   for(i=22;i<=24;i++){
 287:../../../src/net/isa/isa.c **** 		isa_tx_info[i].pPayload = join_pkt_buf;
 288:../../../src/net/isa/isa.c ****     		isa_tx_info[i].length = PKT_DATA_START+1;    // pass le pointer
 289:../../../src/net/isa/isa.c ****     		isa_tx_info[i].DHDR = configDHDR();
 290:../../../src/net/isa/isa.c ****     		isa_tx_data_ready |= ((uint32_t) 1 << i);        // set the flag
 291:../../../src/net/isa/isa.c **** 	   }
 292:../../../src/net/isa/isa.c ****         }
 293:../../../src/net/isa/isa.c ****     #endif
 294:../../../src/net/isa/isa.c **** 
 295:../../../src/net/isa/isa.c ****     resync_times=0;
 296:../../../src/net/isa/isa.c **** 
 297:../../../src/net/isa/isa.c ****     dlmoInit();	//Initialize the  dlmo data structure
 298:../../../src/net/isa/isa.c ****     return NRK_OK;
 299:../../../src/net/isa/isa.c **** }
 300:../../../src/net/isa/isa.c **** 
 301:../../../src/net/isa/isa.c **** void isa_start ()
 302:../../../src/net/isa/isa.c **** {
 421               	.LM37:
 422               	.LFBB6:
 423               	/* prologue: frame size=0 */
 424               	/* prologue end (size=0) */
 303:../../../src/net/isa/isa.c ****     //_isa_clear_sched_cache ();
 304:../../../src/net/isa/isa.c ****     _isa_ready = 2;
 426               	.LM38:
 427 00fc 82E0      		ldi r24,lo8(2)
 428 00fe 8093 0000 		sts _isa_ready,r24
 429               	/* epilogue: frame size=0 */
 430 0102 0895      		ret
 431               	/* epilogue end (size=1) */
 432               	/* function isa_start size 4 (3) */
 434               	.Lscope6:
 436               		.stabd	78,0,0
 439               	.global	configDHDR
 441               	configDHDR:
 442               		.stabd	46,0,0
 305:../../../src/net/isa/isa.c **** }
 306:../../../src/net/isa/isa.c **** 
 307:../../../src/net/isa/isa.c **** /**
 308:../../../src/net/isa/isa.c ****  * configDHDR()
 309:../../../src/net/isa/isa.c ****  *
 310:../../../src/net/isa/isa.c ****  * Gateway could config the DHDR by informing the nodes.
 311:../../../src/net/isa/isa.c ****  * DHDR contains control information that should be loaded
 312:../../../src/net/isa/isa.c ****  * into the PDU header.
 313:../../../src/net/isa/isa.c ****  *
 314:../../../src/net/isa/isa.c ****  */
 315:../../../src/net/isa/isa.c **** int8_t configDHDR(DLMO_LINK * link)
 316:../../../src/net/isa/isa.c **** {
 444               	.LM39:
 445               	.LFBB7:
 446               	/* prologue: frame size=0 */
 447 0104 CF93      		push r28
 448 0106 DF93      		push r29
 449               	/* prologue end (size=2) */
 317:../../../src/net/isa/isa.c **** 
 318:../../../src/net/isa/isa.c **** 	//lookup neighbor information to deciede whether to request clock
 319:../../../src/net/isa/isa.c ****     int8_t DHDR = 1;
 320:../../../src/net/isa/isa.c ****     if(1){//request ACK - always for multicast device
 321:../../../src/net/isa/isa.c **** 	DHDR |= 1<<7;
 322:../../../src/net/isa/isa.c ****     }
 323:../../../src/net/isa/isa.c ****     if(1){//request signal quality in ACK
 324:../../../src/net/isa/isa.c **** 	DHDR |= 1<<6;
 325:../../../src/net/isa/isa.c ****     }
 326:../../../src/net/isa/isa.c ****     if(1){//request EUI
 327:../../../src/net/isa/isa.c **** 	DHDR |= 1<<5;
 328:../../../src/net/isa/isa.c ****     }
 329:../../../src/net/isa/isa.c ****     if(0){//include DAUX
 330:../../../src/net/isa/isa.c **** 	DHDR |= 1<<4;
 331:../../../src/net/isa/isa.c ****     }
 332:../../../src/net/isa/isa.c ****     if(0){//include slow hopping offset
 333:../../../src/net/isa/isa.c **** 	DHDR |= 1<<3;
 334:../../../src/net/isa/isa.c ****     }
 335:../../../src/net/isa/isa.c ****     if(ISAMASK(link->neighbor->typeInfo, CLOCK_PREFERRED) == CLOCK_PREFERRED){//is clock recipient
 451               	.LM40:
 452 0108 EC01      		movw r28,r24
 453 010a E885      		ldd r30,Y+8
 454 010c F985      		ldd r31,Y+9
 455 010e 8585      		ldd r24,Z+13
 456 0110 87FF      		sbrs r24,7
 457 0112 00C0      		rjmp .L24
 459               	.LM41:
 460 0114 85EE      		ldi r24,lo8(-27)
 461 0116 00C0      		rjmp .L26
 462               	.L24:
 463 0118 81EE      		ldi r24,lo8(-31)
 464               	.L26:
 336:../../../src/net/isa/isa.c **** 	DHDR |= 1<<2;
 337:../../../src/net/isa/isa.c **** 	//printf ("Asking for time correction");
 338:../../../src/net/isa/isa.c ****     }
 339:../../../src/net/isa/isa.c ****     return DHDR;
 340:../../../src/net/isa/isa.c **** }
 466               	.LM42:
 467 011a 9927      		clr r25
 468 011c 87FD      		sbrc r24,7
 469 011e 9095      		com r25
 470               	/* epilogue: frame size=0 */
 471 0120 DF91      		pop r29
 472 0122 CF91      		pop r28
 473 0124 0895      		ret
 474               	/* epilogue end (size=3) */
 475               	/* function configDHDR size 17 (12) */
 480               	.Lscope7:
 482               		.stabd	78,0,0
 485               	.global	configDHR
 487               	configDHR:
 488               		.stabd	46,0,0
 341:../../../src/net/isa/isa.c **** 
 342:../../../src/net/isa/isa.c **** /**
 343:../../../src/net/isa/isa.c ****  * configDHR()
 344:../../../src/net/isa/isa.c ****  *
 345:../../../src/net/isa/isa.c ****  * Gateway could config the DHR by informing the nodes.
 346:../../../src/net/isa/isa.c ****  * DHR contains control information that should be loaded
 347:../../../src/net/isa/isa.c ****  * into the ACK reply header.
 348:../../../src/net/isa/isa.c ****  *
 349:../../../src/net/isa/isa.c ****  */
 350:../../../src/net/isa/isa.c **** int8_t configDHR(uint8_t clockCorrection)
 351:../../../src/net/isa/isa.c **** {
 490               	.LM43:
 491               	.LFBB8:
 492               	/* prologue: frame size=0 */
 493               	/* prologue end (size=0) */
 352:../../../src/net/isa/isa.c ****     int8_t DHR = 3;
 353:../../../src/net/isa/isa.c ****     if(clockCorrection){//include clock correction change
 495               	.LM44:
 496 0126 8823      		tst r24
 497 0128 01F0      		breq .L29
 499               	.LM45:
 500 012a 83E8      		ldi r24,lo8(-125)
 501 012c 00C0      		rjmp .L31
 502               	.L29:
 503 012e 83E0      		ldi r24,lo8(3)
 504               	.L31:
 354:../../../src/net/isa/isa.c **** 	DHR |= 1<<7;
 355:../../../src/net/isa/isa.c ****     }
 356:../../../src/net/isa/isa.c ****     if(0){//including slow-hopping timeslot offset
 357:../../../src/net/isa/isa.c **** 	DHR |= 1<<6;
 358:../../../src/net/isa/isa.c ****     }
 359:../../../src/net/isa/isa.c ****     if(0){//request EUI
 360:../../../src/net/isa/isa.c **** 	DHR |= 1<<5;
 361:../../../src/net/isa/isa.c ****     }
 362:../../../src/net/isa/isa.c ****     if(0){//include DAUX
 363:../../../src/net/isa/isa.c **** 	DHR |= 1<<4;
 364:../../../src/net/isa/isa.c ****     }
 365:../../../src/net/isa/isa.c ****     if(0){//include slow hopping offset
 366:../../../src/net/isa/isa.c **** 	DHR |= 1<<3;
 367:../../../src/net/isa/isa.c ****     }
 368:../../../src/net/isa/isa.c ****    
 369:../../../src/net/isa/isa.c ****     return DHR;
 370:../../../src/net/isa/isa.c **** }
 506               	.LM46:
 507 0130 9927      		clr r25
 508 0132 87FD      		sbrc r24,7
 509 0134 9095      		com r25
 510               	/* epilogue: frame size=0 */
 511 0136 0895      		ret
 512               	/* epilogue end (size=1) */
 513               	/* function configDHR size 9 (8) */
 518               	.Lscope8:
 520               		.stabd	78,0,0
 533               	.global	configAdvDAUX
 535               	configAdvDAUX:
 536               		.stabd	46,0,0
 371:../../../src/net/isa/isa.c **** 
 372:../../../src/net/isa/isa.c **** /**
 373:../../../src/net/isa/isa.c ****  * configAdvDAUX()
 374:../../../src/net/isa/isa.c ****  *
 375:../../../src/net/isa/isa.c ****  * Gateway could config the DAUX 
 376:../../../src/net/isa/isa.c ****  * DAUX contains superframe and join information 
 377:../../../src/net/isa/isa.c ****  *
 378:../../../src/net/isa/isa.c ****  */
 379:../../../src/net/isa/isa.c **** void configAdvDAUX(uint8_t chPattern, uint8_t chIndex, uint8_t sp_period, uint8_t tx_slot1, uint8_t
 380:../../../src/net/isa/isa.c **** {	
 538               	.LM47:
 539               	.LFBB9:
 540               	/* prologue: frame size=0 */
 541 0138 8F92      		push r8
 542 013a AF92      		push r10
 543 013c CF92      		push r12
 544 013e EF92      		push r14
 545 0140 0F93      		push r16
 546 0142 CF93      		push r28
 547 0144 DF93      		push r29
 548 0146 CDB7      		in r28,__SP_L__
 549 0148 DEB7      		in r29,__SP_H__
 550               	/* prologue end (size=9) */
 381:../../../src/net/isa/isa.c ****     /*ADVERTISEMENT SELECTION*/
 382:../../../src/net/isa/isa.c ****     DAUX[0]=0; // Advertisement selection, 0 indicates advertisement DAUX
 552               	.LM48:
 553 014a 1092 0000 		sts DAUX,__zero_reg__
 383:../../../src/net/isa/isa.c ****     
 384:../../../src/net/isa/isa.c ****     /*TIME SYNCHRONIZATION*/
 385:../../../src/net/isa/isa.c ****     /* 1-6 bytes are reserved for time synchronization */ 
 386:../../../src/net/isa/isa.c ****   
 387:../../../src/net/isa/isa.c ****     /*SUPERFRAME INFORMATION*/
 388:../../../src/net/isa/isa.c ****     DAUX[7]=10; // timeslot duration, currently not used.
 555               	.LM49:
 556 014e 9AE0      		ldi r25,lo8(10)
 557 0150 9093 0000 		sts DAUX+7,r25
 389:../../../src/net/isa/isa.c ****     DAUX[8]=0; // reserved for long timeslot duration
 559               	.LM50:
 560 0154 1092 0000 		sts DAUX+8,__zero_reg__
 390:../../../src/net/isa/isa.c ****     DAUX[9]=chPattern; // channel pattern selection
 562               	.LM51:
 563 0158 8093 0000 		sts DAUX+9,r24
 391:../../../src/net/isa/isa.c ****     DAUX[10]=chIndex; // channel index selection
 565               	.LM52:
 566 015c 6093 0000 		sts DAUX+10,r22
 392:../../../src/net/isa/isa.c ****     DAUX[11]=sp_period; // superframe period
 568               	.LM53:
 569 0160 4093 0000 		sts DAUX+11,r20
 393:../../../src/net/isa/isa.c ****     DAUX[12]=0; // reserved for long period situation  
 571               	.LM54:
 572 0164 1092 0000 		sts DAUX+12,__zero_reg__
 394:../../../src/net/isa/isa.c ****     /* 13 reserved for superframe cycle starting point
 395:../../../src/net/isa/isa.c ****        14 reserved of the length of slow hopping period
 396:../../../src/net/isa/isa.c ****        15 and 16 reserved for channel hopping channel map for spectrum management
 397:../../../src/net/isa/isa.c ****     */
 398:../../../src/net/isa/isa.c **** 
 399:../../../src/net/isa/isa.c ****     /*JOIN INFORMATION*/
 400:../../../src/net/isa/isa.c ****     /* 17 reserved for Join backoff and timeout
 401:../../../src/net/isa/isa.c ****        18 reserved for Indicates fields that are transmitted
 402:../../../src/net/isa/isa.c ****     */
 403:../../../src/net/isa/isa.c ****     DAUX[19]=tx_slot1;  //TX slot 1
 574               	.LM55:
 575 0168 2093 0000 		sts DAUX+19,r18
 404:../../../src/net/isa/isa.c ****     DAUX[20]=tx_slot2;  //TX slot 2
 577               	.LM56:
 578 016c 0093 0000 		sts DAUX+20,r16
 405:../../../src/net/isa/isa.c ****     DAUX[21]=tx_slot3;  //TX slot 3
 580               	.LM57:
 581 0170 E092 0000 		sts DAUX+21,r14
 406:../../../src/net/isa/isa.c ****     DAUX[22]=tx_slot4;  //TX slot 4
 583               	.LM58:
 584 0174 C092 0000 		sts DAUX+22,r12
 407:../../../src/net/isa/isa.c ****     DAUX[23]=rx_slot1;  //RX slot 1
 586               	.LM59:
 587 0178 A092 0000 		sts DAUX+23,r10
 408:../../../src/net/isa/isa.c ****     DAUX[24]=rx_slot2;  //RX slot 2
 589               	.LM60:
 590 017c 8092 0000 		sts DAUX+24,r8
 409:../../../src/net/isa/isa.c ****     DAUX[25]=rx_slot3;  //RX slot 3
 592               	.LM61:
 593 0180 8A85      		ldd r24,Y+10
 594 0182 8093 0000 		sts DAUX+25,r24
 410:../../../src/net/isa/isa.c ****     DAUX[26]=rx_slot4;  //RX slot 4
 596               	.LM62:
 597 0186 8B85      		ldd r24,Y+11
 598 0188 8093 0000 		sts DAUX+26,r24
 599               	/* epilogue: frame size=0 */
 600 018c DF91      		pop r29
 601 018e CF91      		pop r28
 602 0190 0F91      		pop r16
 603 0192 EF90      		pop r14
 604 0194 CF90      		pop r12
 605 0196 AF90      		pop r10
 606 0198 8F90      		pop r8
 607 019a 0895      		ret
 608               	/* epilogue end (size=8) */
 609               	/* function configAdvDAUX size 50 (33) */
 613               	.Lscope9:
 615               		.stabd	78,0,0
 617               	.global	isa_rx_pkt_check
 619               	isa_rx_pkt_check:
 620               		.stabd	46,0,0
 411:../../../src/net/isa/isa.c **** 
 412:../../../src/net/isa/isa.c ****     /*INTEGRETY CHECK*/
 413:../../../src/net/isa/isa.c ****     /* 27 and 28 are reserved for Integrety check*/
 414:../../../src/net/isa/isa.c **** }
 415:../../../src/net/isa/isa.c **** 
 416:../../../src/net/isa/isa.c **** /**
 417:../../../src/net/isa/isa.c ****  * isa_check_rx_status()
 418:../../../src/net/isa/isa.c ****  *
 419:../../../src/net/isa/isa.c ****  * This function returns if there is a packet in the link layer
 420:../../../src/net/isa/isa.c ****  * rx buffer.  Once a packet has been received, it should be quickly
 421:../../../src/net/isa/isa.c ****  * processed or moved and then rtl_release_rx_packet() should be called. 
 422:../../../src/net/isa/isa.c ****  * rtl_release_rx_packet() then resets the value of rtl_check_rx_status()
 423:../../../src/net/isa/isa.c ****  *
 424:../../../src/net/isa/isa.c ****  * Returns: 1 if a new packet was received, 0 otherwise
 425:../../../src/net/isa/isa.c ****  */
 426:../../../src/net/isa/isa.c **** int8_t isa_rx_pkt_check()
 427:../../../src/net/isa/isa.c **** {
 622               	.LM63:
 623               	.LFBB10:
 624               	/* prologue: frame size=0 */
 625               	/* prologue end (size=0) */
 626 019c 8091 0000 		lds r24,isa_rx_data_ready
 428:../../../src/net/isa/isa.c ****     return isa_rx_data_ready;
 429:../../../src/net/isa/isa.c **** }
 628               	.LM64:
 629 01a0 9927      		clr r25
 630 01a2 87FD      		sbrc r24,7
 631 01a4 9095      		com r25
 632               	/* epilogue: frame size=0 */
 633 01a6 0895      		ret
 634               	/* epilogue end (size=1) */
 635               	/* function isa_rx_pkt_check size 6 (5) */
 637               	.Lscope10:
 639               		.stabd	78,0,0
 641               	.global	isa_rx_pkt_release
 643               	isa_rx_pkt_release:
 644               		.stabd	46,0,0
 430:../../../src/net/isa/isa.c **** 
 431:../../../src/net/isa/isa.c **** /**
 432:../../../src/net/isa/isa.c ****  * isa_rx_pkt_get()
 433:../../../src/net/isa/isa.c ****  *
 434:../../../src/net/isa/isa.c ****  * This function returns the rx buffer point. It should be called
 435:../../../src/net/isa/isa.c ****  * once a packet is received and must be followed by isa_release_rx_packet().
 436:../../../src/net/isa/isa.c ****  * isa_release_rx_packet() then resets the value of isa_check_rx_status().
 437:../../../src/net/isa/isa.c ****  * 
 438:../../../src/net/isa/isa.c ****  * Returns: rx buffer point
 439:../../../src/net/isa/isa.c ****  */
 440:../../../src/net/isa/isa.c **** uint8_t* isa_rx_pkt_get (uint8_t *len, int8_t *rssi)
 441:../../../src/net/isa/isa.c **** {
 442:../../../src/net/isa/isa.c ****     if(isa_rx_pkt_check()==0){
 443:../../../src/net/isa/isa.c **** 	*len=0;
 444:../../../src/net/isa/isa.c **** 	*rssi=0;
 445:../../../src/net/isa/isa.c **** 	return NULL;
 446:../../../src/net/isa/isa.c ****     }
 447:../../../src/net/isa/isa.c ****     *len=isa_rfRxInfo.length;
 448:../../../src/net/isa/isa.c ****     *rssi=isa_rfRxInfo.rssi;
 449:../../../src/net/isa/isa.c **** 
 450:../../../src/net/isa/isa.c **** 
 451:../../../src/net/isa/isa.c ****     return isa_rfRxInfo.pPayload;
 452:../../../src/net/isa/isa.c **** }
 453:../../../src/net/isa/isa.c **** 
 454:../../../src/net/isa/isa.c **** /**
 455:../../../src/net/isa/isa.c ****  * _isa_rx()
 456:../../../src/net/isa/isa.c ****  *
 457:../../../src/net/isa/isa.c ****  * This is the low level RX packet function.  It will read in
 458:../../../src/net/isa/isa.c ****  * a packet and buffer it in the link layer's single RX buffer.
 459:../../../src/net/isa/isa.c ****  * This buffer can be checked with rtl_check_rx_status() and 
 460:../../../src/net/isa/isa.c ****  * released with rtl_release_rx_packet().  If the buffer has not
 461:../../../src/net/isa/isa.c ****  * been released and a new packet arrives, the packet will be lost.
 462:../../../src/net/isa/isa.c ****  * This function is only called from the timer interrupt routine.
 463:../../../src/net/isa/isa.c ****  *
 464:../../../src/net/isa/isa.c ****  * Arguments: slot is the current slot that is actively in RX mode.
 465:../../../src/net/isa/isa.c ****  */
 466:../../../src/net/isa/isa.c **** 
 467:../../../src/net/isa/isa.c **** void _isa_rx (DLMO_LINK * link, uint8_t slot)
 468:../../../src/net/isa/isa.c **** {
 469:../../../src/net/isa/isa.c **** 	uint8_t DHDR;  // Data link layer header sub-header, currently used as ACK control
 470:../../../src/net/isa/isa.c **** //putchar('R');
 471:../../../src/net/isa/isa.c ****     uint8_t n;
 472:../../../src/net/isa/isa.c ****     uint32_t node_mask;
 473:../../../src/net/isa/isa.c ****     uint16_t destAddr;
 474:../../../src/net/isa/isa.c ****     volatile uint8_t timeout;
 475:../../../src/net/isa/isa.c **** 
 476:../../../src/net/isa/isa.c ****     #ifdef LED_DEBUG
 477:../../../src/net/isa/isa.c **** 	nrk_led_set(1);
 478:../../../src/net/isa/isa.c ****     #endif
 479:../../../src/net/isa/isa.c ****     rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel 
 480:../../../src/net/isa/isa.c ****     rf_polling_rx_on ();
 481:../../../src/net/isa/isa.c ****     nrk_gpio_set(NRK_DEBUG_2);
 482:../../../src/net/isa/isa.c ****     // Timing for waiting for sfd
 483:../../../src/net/isa/isa.c ****     timeout = _nrk_os_timer_get();
 484:../../../src/net/isa/isa.c ****     timeout+=4;  // 4ms
 485:../../../src/net/isa/isa.c ****     n = 0;
 486:../../../src/net/isa/isa.c ****     //nrk_gpio_set(NRK_DEBUG_3);
 487:../../../src/net/isa/isa.c ****     while ((n = rf_rx_check_sfd()) == 0) {
 488:../../../src/net/isa/isa.c ****         if (_nrk_os_timer_get() > timeout) {
 489:../../../src/net/isa/isa.c **** 	    //spend too much time on waiting for a pkt's arrival
 490:../../../src/net/isa/isa.c ****         	nrk_gpio_clr(NRK_DEBUG_2);
 491:../../../src/net/isa/isa.c **** 
 492:../../../src/net/isa/isa.c **** 	    rf_rx_off ();
 493:../../../src/net/isa/isa.c **** 	    #ifdef LED_DEBUG
 494:../../../src/net/isa/isa.c **** 		nrk_led_clr(1);
 495:../../../src/net/isa/isa.c **** 	    #endif
 496:../../../src/net/isa/isa.c **** 	    #ifdef RX_DEBUG
 497:../../../src/net/isa/isa.c **** 	//	 nrk_gpio_set(NRK_DEBUG_2);
 498:../../../src/net/isa/isa.c **** 	//	nrk_gpio_clr(NRK_DEBUG_2);
 499:../../../src/net/isa/isa.c **** 	//	putchar('v');
 500:../../../src/net/isa/isa.c **** 		//printf("%d", slot);
 501:../../../src/net/isa/isa.c **** 		//printf("sfd times out.\n\r");
 502:../../../src/net/isa/isa.c **** 	    #endif
 503:../../../src/net/isa/isa.c **** 		packetsLost++;
 504:../../../src/net/isa/isa.c **** 		return;
 505:../../../src/net/isa/isa.c ****         }
 506:../../../src/net/isa/isa.c ****     }
 507:../../../src/net/isa/isa.c **** //printf("%d\n\r",_nrk_high_speed_timer_get());
 508:../../../src/net/isa/isa.c ****     // sfd received, start receiving packet and record start time
 509:../../../src/net/isa/isa.c ****     rx_start_time = _nrk_high_speed_timer_get();
 510:../../../src/net/isa/isa.c ****     nrk_gpio_set(NRK_DEBUG_1);
 511:../../../src/net/isa/isa.c ****    	nrk_gpio_clr(NRK_DEBUG_1);
 512:../../../src/net/isa/isa.c ****     // Timing for waiting for finishing packet receiving
 513:../../../src/net/isa/isa.c ****     timeout = _nrk_os_timer_get(); 
 514:../../../src/net/isa/isa.c ****     timeout += 5;               // 5ms
 515:../../../src/net/isa/isa.c ****     if (n != 0) {
 516:../../../src/net/isa/isa.c ****         n = 0;
 517:../../../src/net/isa/isa.c ****        // printf("Packet on its way\n\r");
 518:../../../src/net/isa/isa.c ****         while ((n = rf_polling_rx_packet (false,128)) == 0) {
 519:../../../src/net/isa/isa.c **** 	    //printf("%d\n\r",_nrk_os_timer_get());
 520:../../../src/net/isa/isa.c ****             if (_nrk_os_timer_get () > timeout) {
 521:../../../src/net/isa/isa.c **** 		#ifdef RX_DEBUG
 522:../../../src/net/isa/isa.c **** 		    printf("packet is too long, times out.\n\r");
 523:../../../src/net/isa/isa.c **** 		#endif
 524:../../../src/net/isa/isa.c **** 		    packetsLost++;
 525:../../../src/net/isa/isa.c **** 		    // spend too much time on receiving pkt.
 526:../../../src/net/isa/isa.c ****                 return;          // huge timeout as fail safe
 527:../../../src/net/isa/isa.c ****             }
 528:../../../src/net/isa/isa.c ****         }
 529:../../../src/net/isa/isa.c ****     }
 530:../../../src/net/isa/isa.c ****     nrk_gpio_clr(NRK_DEBUG_2);
 531:../../../src/net/isa/isa.c ****    // printf("%d", currentChannel);
 532:../../../src/net/isa/isa.c ****     rf_rx_off ();
 533:../../../src/net/isa/isa.c **** 
 534:../../../src/net/isa/isa.c ****     if  (n !=1){	//size of packet must have been wrong
 535:../../../src/net/isa/isa.c **** 	putchar('b');
 536:../../../src/net/isa/isa.c **** 	packetsLost++;
 537:../../../src/net/isa/isa.c **** }
 538:../../../src/net/isa/isa.c **** 
 539:../../../src/net/isa/isa.c ****     if (n == 1) {// successfully received packet
 540:../../../src/net/isa/isa.c ****     	rxCount++;
 541:../../../src/net/isa/isa.c ****     	nrk_led_toggle(BLUE_LED);
 542:../../../src/net/isa/isa.c ****     	//If I am the destination
 543:../../../src/net/isa/isa.c ****     	destAddr = isa_rfRxInfo.pPayload[DEST_INDEX];
 544:../../../src/net/isa/isa.c ****     	//putchar ('r');
 545:../../../src/net/isa/isa.c **** 	//potential problem: if repeater or recipient receives noise, the DHDR would be changed. And it is
 546:../../../src/net/isa/isa.c **** 	//if(isa_node_mode != ISA_GATEWAY)
 547:../../../src/net/isa/isa.c **** 	    DHDR = isa_rfRxInfo.pPayload[DHDR_INDEX];
 548:../../../src/net/isa/isa.c **** 	#ifdef RX_DEBUG
 549:../../../src/net/isa/isa.c **** 	   // printf("Repeater slot = %d, local slot is %d.\n\r", isa_rfRxInfo.pPayload[SLOT_INDEX],global
 550:../../../src/net/isa/isa.c **** 	#endif RX_DEBUG	
 551:../../../src/net/isa/isa.c **** 	nrk_event_signal(isa_rx_pkt_signal);	
 552:../../../src/net/isa/isa.c **** 
 553:../../../src/net/isa/isa.c **** 	node_mask = ((uint32_t) 1) << isa_rfRxInfo.pPayload[SRC_INDEX];
 554:../../../src/net/isa/isa.c **** 	
 555:../../../src/net/isa/isa.c **** 	if(DHDR & (1<<7)){
 556:../../../src/net/isa/isa.c **** 		txCount++;
 557:../../../src/net/isa/isa.c **** 	    // Transmit ACK packet
 558:../../../src/net/isa/isa.c **** 	    DHR = configDHR(DHDR & (1<<2));
 559:../../../src/net/isa/isa.c **** 	  //  printf("%d", DHR);
 560:../../../src/net/isa/isa.c **** 	    isa_ack_buf[DHR_INDEX]= DHR;
 561:../../../src/net/isa/isa.c **** 	    #ifdef ACK_DEBUG
 562:../../../src/net/isa/isa.c **** 		//printf("DHDR is %x.\n\r",DHDR);
 563:../../../src/net/isa/isa.c **** 	    #endif
 564:../../../src/net/isa/isa.c **** 	    isa_ack_tx.pPayload = isa_ack_buf;
 565:../../../src/net/isa/isa.c **** 	    if (DHDR & (1<<2)) { //reply ACK with time offsetX
 566:../../../src/net/isa/isa.c **** 	    	//    	putchar ('K');
 567:../../../src/net/isa/isa.c **** 	    		offsetX = rx_start_time - slot_start_time;
 568:../../../src/net/isa/isa.c **** 	    		//printf("slot_start_time is %d,rx_start_time is %d.\n\r",slot_start_time,rx_start_time);
 569:../../../src/net/isa/isa.c **** 	    		uint8_t temp1,temp2;
 570:../../../src/net/isa/isa.c **** 	    		temp1 = (offsetX & 0xFF00)>>8;
 571:../../../src/net/isa/isa.c **** 	    		isa_ack_buf[OFFSET_HIGH]=temp1;
 572:../../../src/net/isa/isa.c **** 	    		temp2 = (offsetX & 0x00FF);
 573:../../../src/net/isa/isa.c **** 	     		isa_ack_buf[OFFSET_LOW]=temp2;
 574:../../../src/net/isa/isa.c **** 	    		#ifdef ACK_DEBUG
 575:../../../src/net/isa/isa.c **** 	    		  //  printf("offsetX is %d\n\r", offsetX);
 576:../../../src/net/isa/isa.c **** 	    		#endif
 577:../../../src/net/isa/isa.c **** 	    		//isa_ack_tx.length = PKT_DATA_START + 1;
 578:../../../src/net/isa/isa.c **** 	    		isa_ack_tx.length = 4;
 579:../../../src/net/isa/isa.c **** 	    	    }
 580:../../../src/net/isa/isa.c **** 
 581:../../../src/net/isa/isa.c **** 	    else
 582:../../../src/net/isa/isa.c **** 	    { // recipient , only reply explicit ACK
 583:../../../src/net/isa/isa.c **** 	        //isa_ack_tx.length = PKT_DATA_START-1;
 584:../../../src/net/isa/isa.c **** 		isa_ack_tx.length = 2;
 585:../../../src/net/isa/isa.c **** 		//putchar ('C');
 586:../../../src/net/isa/isa.c **** 		//putchar('\n');
 587:../../../src/net/isa/isa.c ****             }
 588:../../../src/net/isa/isa.c **** 	   nrk_gpio_set(NRK_DEBUG_2);
 589:../../../src/net/isa/isa.c **** 	    rf_tx_tdma_packet (&isa_ack_tx,slot_start_time,isa_param.tx_guard_time,&tx_start_time);	
 590:../../../src/net/isa/isa.c **** 	    nrk_gpio_clr(NRK_DEBUG_2);
 591:../../../src/net/isa/isa.c **** 
 592:../../../src/net/isa/isa.c **** 	}	
 593:../../../src/net/isa/isa.c **** 
 594:../../../src/net/isa/isa.c **** 	if (destAddr == dmo.dlAddress) {
 595:../../../src/net/isa/isa.c **** 		dd_data_indication(isa_rfRxInfo.pPayload[SRC_INDEX] , destAddr,0,0, 0, 0, isa_rfRxInfo.pPayload);
 596:../../../src/net/isa/isa.c **** 	}
 597:../../../src/net/isa/isa.c **** 	else{
 598:../../../src/net/isa/isa.c **** 		//if the dest address is not mine, then add into the queue to forward provided we have a link to 
 599:../../../src/net/isa/isa.c **** 		// this part should change later on, we should check the dest then lookup the next hop or neighbo
 600:../../../src/net/isa/isa.c **** 		if (isTransmitLinkPresent(destAddr)){
 601:../../../src/net/isa/isa.c **** 			//if yes, then place the message on the Queue again
 602:../../../src/net/isa/isa.c **** 			enQueue (destAddr, 0, 10, isa_rfRxInfo.pPayload, NULL);
 603:../../../src/net/isa/isa.c **** 			// printf("packet forwarded to %d", destAddr);
 604:../../../src/net/isa/isa.c **** 				  isa_rx_pkt_release();
 605:../../../src/net/isa/isa.c **** 		}
 606:../../../src/net/isa/isa.c **** 		else{
 607:../../../src/net/isa/isa.c **** 			printf("Dont know what to do with this packet for %d- releasing", destAddr);
 608:../../../src/net/isa/isa.c **** 			isa_rx_pkt_release();
 609:../../../src/net/isa/isa.c **** 		}
 610:../../../src/net/isa/isa.c **** 	}
 611:../../../src/net/isa/isa.c **** 
 612:../../../src/net/isa/isa.c **** 
 613:../../../src/net/isa/isa.c **** //nrk_gpio_clr(NRK_DEBUG_3);
 614:../../../src/net/isa/isa.c ****     }        
 615:../../../src/net/isa/isa.c ****     #ifdef LED_DEBUG
 616:../../../src/net/isa/isa.c **** 	nrk_led_clr (1);
 617:../../../src/net/isa/isa.c ****     #endif
 618:../../../src/net/isa/isa.c **** }
 619:../../../src/net/isa/isa.c **** 
 620:../../../src/net/isa/isa.c **** /**
 621:../../../src/net/isa/isa.c ****  * isa_release_rx_packet()
 622:../../../src/net/isa/isa.c ****  *
 623:../../../src/net/isa/isa.c ****  * This function releases the link layer's hold on the rx buffer.
 624:../../../src/net/isa/isa.c ****  * This must be called after a packet is received before a new
 625:../../../src/net/isa/isa.c ****  * packet can be buffered!  This should ideally be done by the
 626:../../../src/net/isa/isa.c ****  * network layer.
 627:../../../src/net/isa/isa.c ****  *
 628:../../../src/net/isa/isa.c ****  */
 629:../../../src/net/isa/isa.c **** 
 630:../../../src/net/isa/isa.c **** void isa_rx_pkt_release()
 631:../../../src/net/isa/isa.c **** {
 646               	.LM65:
 647               	.LFBB11:
 648               	/* prologue: frame size=0 */
 649               	/* prologue end (size=0) */
 632:../../../src/net/isa/isa.c ****     isa_rx_data_ready = 0;
 651               	.LM66:
 652 01a8 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 653 01ac 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 654 01b0 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 655 01b4 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 656               	/* epilogue: frame size=0 */
 657 01b8 0895      		ret
 658               	/* epilogue end (size=1) */
 659               	/* function isa_rx_pkt_release size 9 (8) */
 661               	.Lscope11:
 663               		.stabd	78,0,0
 665               	.global	isa_join_ready
 667               	isa_join_ready:
 668               		.stabd	46,0,0
 633:../../../src/net/isa/isa.c **** }
 634:../../../src/net/isa/isa.c **** 
 635:../../../src/net/isa/isa.c **** /**
 636:../../../src/net/isa/isa.c ****  * rtl_tx_packet()
 637:../../../src/net/isa/isa.c ****  *
 638:../../../src/net/isa/isa.c ****  * This function associates a slot with a particular packet that needs
 639:../../../src/net/isa/isa.c ****  * to be sent. 
 640:../../../src/net/isa/isa.c ****  * 
 641:../../../src/net/isa/isa.c ****  * Arguments: RF_TX_INFO *tx is a pointer to a transmit structure, this structure
 642:../../../src/net/isa/isa.c ****  *            must have a valid pPayload pointer to the real packet.
 643:../../../src/net/isa/isa.c ****  *            uint8_t slot is the value of the tx slot (starting from 0)
 644:../../../src/net/isa/isa.c ****  *
 645:../../../src/net/isa/isa.c ****  * Return:  currently always returns 1
 646:../../../src/net/isa/isa.c ****  */
 647:../../../src/net/isa/isa.c **** /*
 648:../../../src/net/isa/isa.c **** int8_t isa_tx_pkt (uint8_t *tx_buf, uint8_t len, uint8_t DHDR, uint8_t slot)
 649:../../../src/net/isa/isa.c **** {
 650:../../../src/net/isa/isa.c ****     isa_tx_info[slot].pPayload = tx_buf; 
 651:../../../src/net/isa/isa.c ****     isa_tx_info[slot].length = len;    // pass le pointer
 652:../../../src/net/isa/isa.c ****     isa_tx_info[slot].DHDR = DHDR;
 653:../../../src/net/isa/isa.c **** 
 654:../../../src/net/isa/isa.c ****     isa_tx_data_ready |= ((uint32_t) 1 << slot);        // set the flag
 655:../../../src/net/isa/isa.c ****     return 1;
 656:../../../src/net/isa/isa.c **** }
 657:../../../src/net/isa/isa.c **** */
 658:../../../src/net/isa/isa.c **** 
 659:../../../src/net/isa/isa.c **** /**
 660:../../../src/net/isa/isa.c ****  * isa_tx_pkt_check()
 661:../../../src/net/isa/isa.c ****  *
 662:../../../src/net/isa/isa.c ****  * This function allows an upper layer to check if a TX packet
 663:../../../src/net/isa/isa.c ****  * has been sent.  For instance, you would first send a packet 
 664:../../../src/net/isa/isa.c ****  * and then you could sleep or do more work, and eventually check
 665:../../../src/net/isa/isa.c ****  * done = isa_tx_pkt_check(8);
 666:../../../src/net/isa/isa.c ****  * to see if the packet had been sent by the interrupt routine.
 667:../../../src/net/isa/isa.c ****  *
 668:../../../src/net/isa/isa.c ****  * Returns: 1 if the packet was sent, 0 otherwise
 669:../../../src/net/isa/isa.c ****  */
 670:../../../src/net/isa/isa.c **** /*
 671:../../../src/net/isa/isa.c **** int8_t isa_tx_pkt_check(uint8_t slot)
 672:../../../src/net/isa/isa.c **** {
 673:../../../src/net/isa/isa.c ****     if ((isa_tx_data_ready & ((uint32_t) 1 << slot)) != 0)
 674:../../../src/net/isa/isa.c ****         return 1;
 675:../../../src/net/isa/isa.c ****     return 0;
 676:../../../src/net/isa/isa.c **** }
 677:../../../src/net/isa/isa.c **** */
 678:../../../src/net/isa/isa.c **** /**
 679:../../../src/net/isa/isa.c ****  * _isa_tx()
 680:../../../src/net/isa/isa.c ****  *
 681:../../../src/net/isa/isa.c ****  * This function is the low level TX function.
 682:../../../src/net/isa/isa.c ****  * It is only called from the timer interrupt and fetches any
 683:../../../src/net/isa/isa.c ****  * packets that were set for a particular slot by rtl_tx_packet().
 684:../../../src/net/isa/isa.c ****  *
 685:../../../src/net/isa/isa.c ****  * Arguments: slot is the active slot set by the interrupt timer.
 686:../../../src/net/isa/isa.c ****  */
 687:../../../src/net/isa/isa.c **** void _isa_tx (DLMO_LINK * link, uint16_t slot)
 688:../../../src/net/isa/isa.c **** {
 689:../../../src/net/isa/isa.c **** 	uint8_t DHDR;  // Data link layer header sub-header, currently used as ACK control
 690:../../../src/net/isa/isa.c **** 	uint8_t c;
 691:../../../src/net/isa/isa.c ****     uint8_t n;
 692:../../../src/net/isa/isa.c ****     uint8_t i;
 693:../../../src/net/isa/isa.c ****     int8_t tmp;
 694:../../../src/net/isa/isa.c ****     volatile uint8_t timeout;
 695:../../../src/net/isa/isa.c ****   volatile  uint8_t offsetSec, curSec;
 696:../../../src/net/isa/isa.c ****  volatile   uint16_t offsetNanoSec;
 697:../../../src/net/isa/isa.c ****    volatile int16_t time_correction, time_correction1;
 698:../../../src/net/isa/isa.c ****     uint8_t tmp_nrk_prev_timer_val;
 699:../../../src/net/isa/isa.c ****     ISA_QUEUE *transmitEntry;
 700:../../../src/net/isa/isa.c ****     // load header
 701:../../../src/net/isa/isa.c ****     isa_rfTxInfo.cca = true;
 702:../../../src/net/isa/isa.c **** 
 703:../../../src/net/isa/isa.c ****     if (check==5) nrk_terminate_task();
 704:../../../src/net/isa/isa.c ****     //find if there is anything in the Queue to be transmitted
 705:../../../src/net/isa/isa.c ****     transmitEntry = getHighPriorityEntry(link->neighbor->index)	;//This holds the neighbor id
 706:../../../src/net/isa/isa.c ****     if (transmitEntry == NULL){
 707:../../../src/net/isa/isa.c ****     	//printf("Nothing in the queue to transmit on slot %d ", slot);
 708:../../../src/net/isa/isa.c ****     	return;
 709:../../../src/net/isa/isa.c ****     }
 710:../../../src/net/isa/isa.c ****     previous_tx_slot = slot;
 711:../../../src/net/isa/isa.c ****     isa_rfTxInfo.pPayload= transmitEntry->tx_buf;
 712:../../../src/net/isa/isa.c ****     #ifdef TX_DEBUG
 713:../../../src/net/isa/isa.c **** 	//printf("TX Payload is: %s.\n\r", isa_rfTxInfo.pPayload);
 714:../../../src/net/isa/isa.c ****     #endif
 715:../../../src/net/isa/isa.c ****     isa_rfTxInfo.length=transmitEntry->length;
 716:../../../src/net/isa/isa.c ****     DHDR = configDHDR(link);
 717:../../../src/net/isa/isa.c ****     isa_rfTxInfo.pPayload[DHDR_INDEX] = DHDR;
 718:../../../src/net/isa/isa.c ****     isa_rfTxInfo.pPayload[SLOT_INDEX] = (global_slot & 0xFF); 
 719:../../../src/net/isa/isa.c ****     isa_rfTxInfo.pPayload[SRC_INDEX] = isa_id;//change
 720:../../../src/net/isa/isa.c ****     #ifdef JOIN_PROCESS
 721:../../../src/net/isa/isa.c ****     if(slot>=22 && isa_node_mode == ISA_GATEWAY){
 722:../../../src/net/isa/isa.c **** 	for(i=0;i<29;i++){
 723:../../../src/net/isa/isa.c **** 	 isa_rfTxInfo.pPayload[DAUX_INDEX+i]=DAUX[i];
 724:../../../src/net/isa/isa.c **** 	 //printf("DAUX[%d]=%d\r\n",i,isa_rfTxInfo.pPayload[DAUX_INDEX+i]);
 725:../../../src/net/isa/isa.c ****         }
 726:../../../src/net/isa/isa.c ****     } 
 727:../../../src/net/isa/isa.c ****     #endif
 728:../../../src/net/isa/isa.c ****     // FIXME a small bug. should not happen and should be fixed in _isa_init_sync()
 729:../../../src/net/isa/isa.c ****     //if(AFTER_FIRST_SYNC == 1){    
 730:../../../src/net/isa/isa.c **** 	_nrk_high_speed_timer_reset();
 731:../../../src/net/isa/isa.c **** 	nrk_high_speed_timer_wait(0,WAIT_TIME_BEFORE_TX);
 732:../../../src/net/isa/isa.c **** 	//AFTER_FIRST_SYNC = 0;
 733:../../../src/net/isa/isa.c ****     //}
 734:../../../src/net/isa/isa.c **** 	    #ifdef TX_RX_DEBUG
 735:../../../src/net/isa/isa.c **** 		nrk_gpio_set(NRK_DEBUG_1);
 736:../../../src/net/isa/isa.c ****    		//printf("T\r\n");
 737:../../../src/net/isa/isa.c **** 	    #endif
 738:../../../src/net/isa/isa.c ****     if(rf_tx_tdma_packet (&isa_rfTxInfo,slot_start_time,isa_param.tx_guard_time,&tx_start_time))
 739:../../../src/net/isa/isa.c ****     {	transmitEntry->transmitPending = false;
 740:../../../src/net/isa/isa.c ****     	txCount++;
 741:../../../src/net/isa/isa.c ****     	nrk_gpio_clr(NRK_DEBUG_1);
 742:../../../src/net/isa/isa.c ****     	nrk_led_toggle(RED_LED);
 743:../../../src/net/isa/isa.c ****     //	putchar ('t');
 744:../../../src/net/isa/isa.c ****     		//("rx_start_time is %d.\n\r",_nrk_high_speed_timer_get());
 745:../../../src/net/isa/isa.c **** 	offsetY = tx_start_time - slot_start_time;
 746:../../../src/net/isa/isa.c **** //	printf("%d.\n\r",offsetY);
 747:../../../src/net/isa/isa.c **** 	#ifdef HIGH_TIMER_DEBUG
 748:../../../src/net/isa/isa.c **** 	    //printf("In isa.c _isa_tx(): offsetY is %d, tx_start_time is %d\n\r",offsetY,tx_start_time);
 749:../../../src/net/isa/isa.c **** 	#endif
 750:../../../src/net/isa/isa.c ****     }
 751:../../../src/net/isa/isa.c ****     nrk_event_signal (isa_tx_done_signal);
 752:../../../src/net/isa/isa.c ****     // ACK required
 753:../../../src/net/isa/isa.c ****     if(DHDR & (1<<7)) {  //&& isa_node_mode!=ISA_GATEWAY){ //Azriel
 754:../../../src/net/isa/isa.c **** 
 755:../../../src/net/isa/isa.c ****     	//putchar('b');
 756:../../../src/net/isa/isa.c ****     	rf_polling_rx_on ();
 757:../../../src/net/isa/isa.c ****     	nrk_gpio_set(NRK_DEBUG_1);
 758:../../../src/net/isa/isa.c **** 	_nrk_high_speed_timer_reset();
 759:../../../src/net/isa/isa.c **** 	nrk_high_speed_timer_wait(0,CPU_PROCESS_TIME);
 760:../../../src/net/isa/isa.c **** //nrk_gpio_set(NRK_DEBUG_1);
 761:../../../src/net/isa/isa.c **** 	// Timing for waiting for receiving ACK
 762:../../../src/net/isa/isa.c **** 	timeout = _nrk_os_timer_get();
 763:../../../src/net/isa/isa.c **** 	timeout+=2;  // 2ms
 764:../../../src/net/isa/isa.c **** 	n = 0;
 765:../../../src/net/isa/isa.c **** 	while ((n = rf_rx_check_sfd()) == 0) {
 766:../../../src/net/isa/isa.c **** 	    if (_nrk_os_timer_get() > timeout) {
 767:../../../src/net/isa/isa.c **** 		tmp = slot - previous_tx_slot;
 768:../../../src/net/isa/isa.c **** 		if(slot == previous_tx_slot)
 769:../../../src/net/isa/isa.c **** 		    slot_expired += 25;
 770:../../../src/net/isa/isa.c **** 		else{
 771:../../../src/net/isa/isa.c **** 		    tmp = slot - previous_tx_slot;
 772:../../../src/net/isa/isa.c **** 		    if(tmp>0)
 773:../../../src/net/isa/isa.c **** 			slot_expired += tmp;
 774:../../../src/net/isa/isa.c **** 		    else
 775:../../../src/net/isa/isa.c **** 			slot_expired += 25+tmp;
 776:../../../src/net/isa/isa.c **** 		}
 777:../../../src/net/isa/isa.c **** 		//printf("%d,%d,%d,%d,%d\n\r",slot_expired,tmp_curSec,tmp_offsetSec,tmp_offsetNanoSec,++tmp_count
 778:../../../src/net/isa/isa.c **** 		//printf("%d,%d\n\r",slot_expired,isa_param.channel);
 779:../../../src/net/isa/isa.c **** 		//printf("%d,%d,%d\n\r",slot_expired,slot,previous_tx_slot);
 780:../../../src/net/isa/isa.c **** 	    //spend too much time on waiting for a pkt's arrival
 781:../../../src/net/isa/isa.c **** 		rf_rx_off ();
 782:../../../src/net/isa/isa.c **** 		nrk_gpio_clr(NRK_DEBUG_1);
 783:../../../src/net/isa/isa.c **** 		#ifdef LED_DEBUG
 784:../../../src/net/isa/isa.c **** 		    nrk_led_clr(1);
 785:../../../src/net/isa/isa.c **** 		#endif
 786:../../../src/net/isa/isa.c **** 		#ifdef RX_DEBUG
 787:../../../src/net/isa/isa.c **** 	//	 putchar('s');
 788:../../../src/net/isa/isa.c **** 		// printf("%d", slot);
 789:../../../src/net/isa/isa.c **** 
 790:../../../src/net/isa/isa.c **** 		 //   printf("sfd times out.\n\r");
 791:../../../src/net/isa/isa.c **** 		    #endif
 792:../../../src/net/isa/isa.c **** 		//nrk_gpio_clr(NRK_DEBUG_1);
 793:../../../src/net/isa/isa.c **** 		 packetsLost++;
 794:../../../src/net/isa/isa.c **** 		 if (transmitEntry-> slot_callback == NULL )  isaFreePacket(transmitEntry);
 795:../../../src/net/isa/isa.c **** 		 else transmitEntry-> slot_callback(transmitEntry, FAILURE);
 796:../../../src/net/isa/isa.c **** 		 return;
 797:../../../src/net/isa/isa.c **** 	    }
 798:../../../src/net/isa/isa.c **** 	}
 799:../../../src/net/isa/isa.c **** 	//nrk_gpio_clr(NRK_DEBUG_1);
 800:../../../src/net/isa/isa.c **** 	timeout = _nrk_os_timer_get(); 
 801:../../../src/net/isa/isa.c **** 	timeout += 2;               // 5ms
 802:../../../src/net/isa/isa.c **** 	if (n != 0) {
 803:../../../src/net/isa/isa.c **** 	    n = 0;
 804:../../../src/net/isa/isa.c **** 	    //printf("Packet on its way\n\r");
 805:../../../src/net/isa/isa.c **** 	    if ( BITGET(DHDR,2)) c = 4 ;
 806:../../../src/net/isa/isa.c **** 	    else c = 2;
 807:../../../src/net/isa/isa.c **** 	    while ((n = rf_polling_rx_packet (true, c)) == 0)		 {	//changed to 2 by Azriel for gateway
 808:../../../src/net/isa/isa.c **** 		if (_nrk_os_timer_get () > timeout) {
 809:../../../src/net/isa/isa.c **** 		#ifdef RX_DEBUG
 810:../../../src/net/isa/isa.c **** 		    printf("packet is too long, times out.\n\r");
 811:../../../src/net/isa/isa.c **** 		#endif	
 812:../../../src/net/isa/isa.c **** 		    packetsLost++;
 813:../../../src/net/isa/isa.c **** 		    tmp_curSec = _nrk_os_timer_get();
 814:../../../src/net/isa/isa.c **** 		    if (transmitEntry-> slot_callback == NULL )  isaFreePacket(transmitEntry);
 815:../../../src/net/isa/isa.c **** 		    else transmitEntry-> slot_callback(transmitEntry, FAILURE);
 816:../../../src/net/isa/isa.c **** 		    // spend too much time on receiving pkt.
 817:../../../src/net/isa/isa.c ****                     return;          // huge timeout as fail safe
 818:../../../src/net/isa/isa.c **** 		}
 819:../../../src/net/isa/isa.c **** 
 820:../../../src/net/isa/isa.c **** 		//if(n==-6)		
 821:../../../src/net/isa/isa.c **** 		  //  printf("%d\n\r",_nrk_os_timer_get());	
 822:../../../src/net/isa/isa.c **** 	    }
 823:../../../src/net/isa/isa.c **** 	}
 824:../../../src/net/isa/isa.c **** 
 825:../../../src/net/isa/isa.c **** 	if  (n !=1){	//size of packet must have been wrong
 826:../../../src/net/isa/isa.c **** 		putchar('f');
 827:../../../src/net/isa/isa.c **** 		packetsLost++;
 828:../../../src/net/isa/isa.c **** 	}
 829:../../../src/net/isa/isa.c **** 	rf_rx_off ();
 830:../../../src/net/isa/isa.c **** 	if (n==1)
 831:../../../src/net/isa/isa.c **** 	nrk_gpio_clr(NRK_DEBUG_1);
 832:../../../src/net/isa/isa.c **** 	if (n == 1) {// successfully received ACK
 833:../../../src/net/isa/isa.c **** 	   rxCount++;
 834:../../../src/net/isa/isa.c **** 		slot_expired = 0;
 835:../../../src/net/isa/isa.c **** 	    //isa_rx_data_ready = 1;
 836:../../../src/net/isa/isa.c **** 	    DHR = isa_rfRxInfo.pPayload[DHR_INDEX];
 837:../../../src/net/isa/isa.c **** 	    #ifdef ACK_DEBUG
 838:../../../src/net/isa/isa.c **** 
 839:../../../src/net/isa/isa.c **** 	    #endif ACK_DEBUG
 840:../../../src/net/isa/isa.c **** 	    if((DHDR & (1<<7))) {  //  &&isa_node_mode!=ISA_GATEWAY){
 841:../../../src/net/isa/isa.c **** #ifdef TIME
 842:../../../src/net/isa/isa.c **** 		if(DHR & (1<<7)){
 843:../../../src/net/isa/isa.c **** 			offsetX = ((0x0000|isa_rfRxInfo.pPayload[OFFSET_HIGH])<<8)&0xff00 + 0x0000|isa_rfRxInfo.pPayload
 844:../../../src/net/isa/isa.c **** 		    #ifdef ACK_DEBUG
 845:../../../src/net/isa/isa.c **** 		//	printf("offset X is %d.\n\r", offsetX);
 846:../../../src/net/isa/isa.c **** 		//	printf("offset Y is %d.\n\r", offsetY);
 847:../../../src/net/isa/isa.c **** 		    nrk_led_toggle(ORANGE_LED);
 848:../../../src/net/isa/isa.c **** 	//	    putchar('a');
 849:../../../src/net/isa/isa.c **** 		    #endif ACK_DEBUG
 850:../../../src/net/isa/isa.c **** 
 851:../../../src/net/isa/isa.c **** //printf("%d,%d\n\r",offsetX,offsetY);
 852:../../../src/net/isa/isa.c **** 		    time_correction = offsetX - offsetY;
 853:../../../src/net/isa/isa.c **** 		    #ifdef HIGH_TIMER_DEBUG
 854:../../../src/net/isa/isa.c **** 			printf("time correction is %d.\n\r", time_correction);
 855:../../../src/net/isa/isa.c **** 		    #endif
 856:../../../src/net/isa/isa.c **** 		    printf("time correction is %d.\n\r", time_correction);
 857:../../../src/net/isa/isa.c **** 		    // SYNC as a by-product of communication.
 858:../../../src/net/isa/isa.c **** 		    //tmp_nrk_prev_timer_val = _nrk_prev_timer_val;
 859:../../../src/net/isa/isa.c **** //printf("%d\n\r",time_correction);
 860:../../../src/net/isa/isa.c **** //printf("%d\n\r",HIGH_TIMER_TICKES_PER_MILISEC-time_correction%HIGH_TIMER_TICKES_PER_MILISEC);
 861:../../../src/net/isa/isa.c **** 		    timeout=50;
 862:../../../src/net/isa/isa.c **** 		    curSec = _nrk_os_timer_get();
 863:../../../src/net/isa/isa.c **** 		    nrk_gpio_set(NRK_DEBUG_2);
 864:../../../src/net/isa/isa.c **** 		    if(time_correction >= 0&&curSec<7){
 865:../../../src/net/isa/isa.c **** 			tmp_curSec = curSec;
 866:../../../src/net/isa/isa.c **** 			/*do{
 867:../../../src/net/isa/isa.c **** 			    curSec = _nrk_os_timer_get();
 868:../../../src/net/isa/isa.c **** 			}while(curSec<=7);*/
 869:../../../src/net/isa/isa.c **** 			_nrk_os_timer_stop();
 870:../../../src/net/isa/isa.c **** 
 871:../../../src/net/isa/isa.c **** 			//_nrk_os_timer_reset();
 872:../../../src/net/isa/isa.c **** 
 873:../../../src/net/isa/isa.c **** 			//Basically speed up by offsetSec ticks of OS timer - offsetNanoSeconds
 874:../../../src/net/isa/isa.c **** 			offsetSec = time_correction/HIGH_TIMER_TICKES_PER_MILISEC+1; //This should be called offSetMilli
 875:../../../src/net/isa/isa.c **** 			tmp_offsetSec = offsetSec;
 876:../../../src/net/isa/isa.c **** 			offsetNanoSec = HIGH_TIMER_TICKES_PER_MILISEC-time_correction%HIGH_TIMER_TICKES_PER_MILISEC;	//T
 877:../../../src/net/isa/isa.c **** 			tmp_offsetNanoSec = offsetNanoSec;																//This is the high speed timer ticks that we s
 878:../../../src/net/isa/isa.c **** //printf("%d,%d\n\r",curSec,offsetSec);
 879:../../../src/net/isa/isa.c **** 			    //if(curSec+offsetSec>=10)
 880:../../../src/net/isa/isa.c **** 			    	//printf("%d,%d\n\r",curSec,offsetSec);
 881:../../../src/net/isa/isa.c **** 			/*if(curSec+offsetSec>=9){
 882:../../../src/net/isa/isa.c **** 			    _nrk_set_next_wakeup(curSec+offsetSec+2);
 883:../../../src/net/isa/isa.c **** 			    if(curSec+offsetSec>=10)
 884:../../../src/net/isa/isa.c **** 			    	printf("%d,%d\n\r",curSec,offsetSec);
 885:../../../src/net/isa/isa.c **** 			}
 886:../../../src/net/isa/isa.c **** 			else
 887:../../../src/net/isa/isa.c **** 			    _nrk_set_next_wakeup(10);*/
 888:../../../src/net/isa/isa.c **** 			_nrk_high_speed_timer_reset();
 889:../../../src/net/isa/isa.c **** 			nrk_spin_wait_us(50);
 890:../../../src/net/isa/isa.c **** 			//printf("%d,%d,%d\n\r",curSec,offsetSec,offsetNanoSec);
 891:../../../src/net/isa/isa.c **** 		//	nrk_gpio_set(NRK_DEBUG_2);
 892:../../../src/net/isa/isa.c **** 			do{}while(_nrk_high_speed_timer_get()<offsetNanoSec);	//Why not use high_speed_timer_wait here??
 893:../../../src/net/isa/isa.c **** 		//	nrk_gpio_clr(NRK_DEBUG_2);
 894:../../../src/net/isa/isa.c **** 			//nrk_high_speed_timer_wait(0,offsetNanoSec);
 895:../../../src/net/isa/isa.c **** 			//nrk_high_speed_timer_wait(0,4912);
 896:../../../src/net/isa/isa.c **** 
 897:../../../src/net/isa/isa.c **** 			_nrk_os_timer_set(curSec+offsetSec);
 898:../../../src/net/isa/isa.c **** 			nrk_spin_wait_us(100);
 899:../../../src/net/isa/isa.c **** 			#ifdef CORRECTION
 900:../../../src/net/isa/isa.c **** 			    nrk_gpio_set(NRK_DEBUG_1);
 901:../../../src/net/isa/isa.c **** 			    nrk_gpio_clr(NRK_DEBUG_1);
 902:../../../src/net/isa/isa.c **** 			#endif
 903:../../../src/net/isa/isa.c **** //printf("p\n\r");	
 904:../../../src/net/isa/isa.c **** 			_nrk_os_timer_start();
 905:../../../src/net/isa/isa.c **** 		    }else if(-time_correction>8000&&curSec<7){
 906:../../../src/net/isa/isa.c **** 		    	putchar('!');
 907:../../../src/net/isa/isa.c **** 			_nrk_os_timer_stop();
 908:../../../src/net/isa/isa.c **** 			//_nrk_os_timer_reset();
 909:../../../src/net/isa/isa.c **** 			_nrk_high_speed_timer_reset();
 910:../../../src/net/isa/isa.c **** 			do{
 911:../../../src/net/isa/isa.c **** 			    NOP();
 912:../../../src/net/isa/isa.c **** 			    NOP();
 913:../../../src/net/isa/isa.c **** 			    NOP();
 914:../../../src/net/isa/isa.c **** 			    NOP();
 915:../../../src/net/isa/isa.c **** 			}while(timeout--);
 916:../../../src/net/isa/isa.c **** 			//_nrk_set_next_wakeup(10);
 917:../../../src/net/isa/isa.c **** 			#ifdef CORRECTION
 918:../../../src/net/isa/isa.c **** 			nrk_gpio_set(NRK_DEBUG_2);
 919:../../../src/net/isa/isa.c **** 			//nrk_high_speed_timer_wait(0,22800); // for test
 920:../../../src/net/isa/isa.c **** 			nrk_gpio_clr(NRK_DEBUG_2);
 921:../../../src/net/isa/isa.c **** 			#endif
 922:../../../src/net/isa/isa.c **** 			//printf("%d\n\r",-time_correction);
 923:../../../src/net/isa/isa.c **** 			nrk_high_speed_timer_wait(0,-time_correction);
 924:../../../src/net/isa/isa.c **** 			_nrk_os_timer_set(curSec);
 925:../../../src/net/isa/isa.c **** 			timeout = 100;
 926:../../../src/net/isa/isa.c **** 			do{
 927:../../../src/net/isa/isa.c **** 			    NOP();
 928:../../../src/net/isa/isa.c **** 			    NOP();
 929:../../../src/net/isa/isa.c **** 			    NOP();
 930:../../../src/net/isa/isa.c **** 			    NOP();
 931:../../../src/net/isa/isa.c **** 			}while(timeout--);
 932:../../../src/net/isa/isa.c **** 			_nrk_os_timer_start();
 933:../../../src/net/isa/isa.c **** 		    }
 934:../../../src/net/isa/isa.c **** 		    //_nrk_prev_timer_val=tmp_nrk_prev_timer_val;
 935:../../../src/net/isa/isa.c **** //nrk_cur_task_TCB->next_wakeup = 10;
 936:../../../src/net/isa/isa.c **** 		    _nrk_high_speed_timer_reset();
 937:../../../src/net/isa/isa.c **** 		    nrk_spin_wait_us(50);
 938:../../../src/net/isa/isa.c **** 		    nrk_gpio_clr(NRK_DEBUG_2);
 939:../../../src/net/isa/isa.c **** 		}
 940:../../../src/net/isa/isa.c **** #endif
 941:../../../src/net/isa/isa.c **** 
 942:../../../src/net/isa/isa.c **** 	//	************************* Trying time correction
 943:../../../src/net/isa/isa.c **** 		if(DHR & (1<<7)){
 944:../../../src/net/isa/isa.c **** 
 945:../../../src/net/isa/isa.c **** 			offsetX = ((0x0000|isa_rfRxInfo.pPayload[OFFSET_HIGH])<<8)&0xff00 + 0x0000|isa_rfRxInfo.pPayload
 946:../../../src/net/isa/isa.c **** 				    #ifdef ACK_DEBUG
 947:../../../src/net/isa/isa.c **** 				    nrk_led_toggle(ORANGE_LED);
 948:../../../src/net/isa/isa.c **** 				//    putchar('a');
 949:../../../src/net/isa/isa.c **** 				    #endif ACK_DEBUG
 950:../../../src/net/isa/isa.c **** 				//	check++;
 951:../../../src/net/isa/isa.c **** 
 952:../../../src/net/isa/isa.c **** 				    time_correction = offsetX - offsetY - 1400;
 953:../../../src/net/isa/isa.c **** 				    //-1400 is the error in reading used for calculating the offset
 954:../../../src/net/isa/isa.c **** 				    #ifdef HIGH_TIMER_DEBUG
 955:../../../src/net/isa/isa.c **** 					printf("time correction is %d.\n\r", time_correction);
 956:../../../src/net/isa/isa.c **** 				    #endif
 957:../../../src/net/isa/isa.c **** 				//	printf("%d.\n\r", time_correction);
 958:../../../src/net/isa/isa.c **** 				    timeout=50;
 959:../../../src/net/isa/isa.c **** 
 960:../../../src/net/isa/isa.c **** 				    if(time_correction >= 0){
 961:../../../src/net/isa/isa.c **** 
 962:../../../src/net/isa/isa.c **** 				    	 curSec = _nrk_os_timer_get();
 963:../../../src/net/isa/isa.c **** 				    	offsetSec = (time_correction/7325)+2;
 964:../../../src/net/isa/isa.c **** 						offsetNanoSec = 7325-(time_correction%7325);	//This should not be called nanoseconds because 
 965:../../../src/net/isa/isa.c **** 						_nrk_os_timer_stop();
 966:../../../src/net/isa/isa.c **** 						nrk_gpio_set(NRK_DEBUG_1);
 967:../../../src/net/isa/isa.c **** 						_nrk_high_speed_timer_reset();
 968:../../../src/net/isa/isa.c **** 						nrk_high_speed_timer_wait(0,offsetNanoSec);
 969:../../../src/net/isa/isa.c **** 						_nrk_os_timer_set(curSec+offsetSec);
 970:../../../src/net/isa/isa.c **** 						nrk_gpio_clr(NRK_DEBUG_1);
 971:../../../src/net/isa/isa.c **** 						_nrk_os_timer_start();
 972:../../../src/net/isa/isa.c **** 					//	_nrk_set_next_wakeup(10);
 973:../../../src/net/isa/isa.c **** 						nrk_spin_wait_us(50);
 974:../../../src/net/isa/isa.c **** 
 975:../../../src/net/isa/isa.c **** 				    	/*
 976:../../../src/net/isa/isa.c **** 				    	nrk_gpio_set(NRK_DEBUG_1);
 977:../../../src/net/isa/isa.c **** 				    	_nrk_high_speed_timer_reset();
 978:../../../src/net/isa/isa.c **** 				    	nrk_high_speed_timer_wait(0,7325);
 979:../../../src/net/isa/isa.c **** 				       	nrk_gpio_clr(NRK_DEBUG_1);
 980:../../../src/net/isa/isa.c **** */
 981:../../../src/net/isa/isa.c **** 
 982:../../../src/net/isa/isa.c **** 				//    	nrk_gpio_set(NRK_DEBUG_1);
 983:../../../src/net/isa/isa.c **** 				//    	nrk_gpio_clr(NRK_DEBUG_1);
 984:../../../src/net/isa/isa.c **** 
 985:../../../src/net/isa/isa.c **** 				    /*
 986:../../../src/net/isa/isa.c **** 				    	tmp_curSec = curSec;
 987:../../../src/net/isa/isa.c **** 
 988:../../../src/net/isa/isa.c **** 					_nrk_os_timer_stop();
 989:../../../src/net/isa/isa.c **** 					time_correction1 = time_correction + 5000;
 990:../../../src/net/isa/isa.c **** 
 991:../../../src/net/isa/isa.c **** 					offsetSec = time_correction1/HIGH_TIMER_TICKES_PER_MILISEC+1; //This should be called offSetMi
 992:../../../src/net/isa/isa.c **** 					tmp_offsetSec = offsetSec;
 993:../../../src/net/isa/isa.c **** 					offsetNanoSec = HIGH_TIMER_TICKES_PER_MILISEC-time_correction1%HIGH_TIMER_TICKES_PER_MILISEC;	
 994:../../../src/net/isa/isa.c **** 					tmp_offsetNanoSec = offsetNanoSec;																//This is the high speed timer ticks that we
 995:../../../src/net/isa/isa.c **** 					_nrk_high_speed_timer_reset();
 996:../../../src/net/isa/isa.c **** 					nrk_spin_wait_us(50);
 997:../../../src/net/isa/isa.c **** 
 998:../../../src/net/isa/isa.c **** 					nrk_high_speed_timer_wait(0,offsetNanoSec);
 999:../../../src/net/isa/isa.c **** 					//nrk_high_speed_timer_wait(0,4912);
1000:../../../src/net/isa/isa.c **** 
1001:../../../src/net/isa/isa.c **** 					_nrk_os_timer_set(curSec+offsetSec);
1002:../../../src/net/isa/isa.c **** 					nrk_spin_wait_us(100);
1003:../../../src/net/isa/isa.c **** 					#ifdef CORRECTION
1004:../../../src/net/isa/isa.c **** 					    nrk_gpio_set(NRK_DEBUG_1);
1005:../../../src/net/isa/isa.c **** 					    nrk_gpio_clr(NRK_DEBUG_1);
1006:../../../src/net/isa/isa.c **** 					#endif
1007:../../../src/net/isa/isa.c **** 		//printf("p\n\r");
1008:../../../src/net/isa/isa.c **** 					_nrk_os_timer_start();
1009:../../../src/net/isa/isa.c **** 
1010:../../../src/net/isa/isa.c **** 					 printf ("%d",  offsetSec);
1011:../../../src/net/isa/isa.c **** 						 putchar ('\n');
1012:../../../src/net/isa/isa.c **** 						 		putchar('\r');
1013:../../../src/net/isa/isa.c **** 				*/
1014:../../../src/net/isa/isa.c **** 				    }else if(time_correction<0){
1015:../../../src/net/isa/isa.c **** 				    //	putchar('!');
1016:../../../src/net/isa/isa.c **** 				  //  	nrk_gpio_set(NRK_DEBUG_2);
1017:../../../src/net/isa/isa.c **** 				   // 	 nrk_gpio_clr(NRK_DEBUG_2);
1018:../../../src/net/isa/isa.c **** 
1019:../../../src/net/isa/isa.c **** 
1020:../../../src/net/isa/isa.c **** 				    	 _nrk_os_timer_stop();
1021:../../../src/net/isa/isa.c **** 
1022:../../../src/net/isa/isa.c **** 
1023:../../../src/net/isa/isa.c **** 
1024:../../../src/net/isa/isa.c **** 					//_nrk_set_next_wakeup(10);
1025:../../../src/net/isa/isa.c **** 					#ifdef CORRECTION
1026:../../../src/net/isa/isa.c **** 					nrk_gpio_set(NRK_DEBUG_2);
1027:../../../src/net/isa/isa.c **** 					//nrk_high_speed_timer_wait(0,22800); // for test
1028:../../../src/net/isa/isa.c **** 					nrk_gpio_clr(NRK_DEBUG_2);
1029:../../../src/net/isa/isa.c **** 					#endif
1030:../../../src/net/isa/isa.c **** 					//printf("%d\n\r",-time_correction);
1031:../../../src/net/isa/isa.c **** 					//nrk_high_speed_timer_wait(0,-time_correction + 2910);
1032:../../../src/net/isa/isa.c **** 
1033:../../../src/net/isa/isa.c **** 
1034:../../../src/net/isa/isa.c **** 
1035:../../../src/net/isa/isa.c **** 					//_nrk_os_timer_set(curSec);
1036:../../../src/net/isa/isa.c **** 					_nrk_high_speed_timer_reset();
1037:../../../src/net/isa/isa.c **** 					nrk_high_speed_timer_wait(0,-time_correction);
1038:../../../src/net/isa/isa.c **** 
1039:../../../src/net/isa/isa.c **** 					_nrk_os_timer_start();
1040:../../../src/net/isa/isa.c **** 
1041:../../../src/net/isa/isa.c **** 
1042:../../../src/net/isa/isa.c **** 				    }
1043:../../../src/net/isa/isa.c **** 				    //_nrk_prev_timer_val=tmp_nrk_prev_timer_val;
1044:../../../src/net/isa/isa.c **** 		//nrk_cur_task_TCB->next_wakeup = 10;
1045:../../../src/net/isa/isa.c **** 			//	    _nrk_high_speed_timer_reset();
1046:../../../src/net/isa/isa.c **** 			//	    nrk_spin_wait_us(50);
1047:../../../src/net/isa/isa.c **** 
1048:../../../src/net/isa/isa.c **** 				}
1049:../../../src/net/isa/isa.c **** 
1050:../../../src/net/isa/isa.c **** 
1051:../../../src/net/isa/isa.c **** 
1052:../../../src/net/isa/isa.c **** 		printf ("%d %d %d",time_correction, offsetSec, offsetNanoSec);
1053:../../../src/net/isa/isa.c **** 		putchar ('\n');
1054:../../../src/net/isa/isa.c **** 		putchar('\r');
1055:../../../src/net/isa/isa.c **** 
1056:../../../src/net/isa/isa.c **** 		//****************************************************
1057:../../../src/net/isa/isa.c **** 
1058:../../../src/net/isa/isa.c **** 	    }
1059:../../../src/net/isa/isa.c ****         }
1060:../../../src/net/isa/isa.c **** 
1061:../../../src/net/isa/isa.c ****     }//wait for ACK 
1062:../../../src/net/isa/isa.c ****     //printf("Pointer %p", transmitEntry->slot_callback);
1063:../../../src/net/isa/isa.c ****     if (transmitEntry-> slot_callback == NULL )  isaFreePacket(transmitEntry);
1064:../../../src/net/isa/isa.c ****     else transmitEntry-> slot_callback(transmitEntry, SUCCESS);
1065:../../../src/net/isa/isa.c ****    // nrk_terminate_task();
1066:../../../src/net/isa/isa.c **** }
1067:../../../src/net/isa/isa.c **** 
1068:../../../src/net/isa/isa.c **** /*
1069:../../../src/net/isa/isa.c **** uint8_t _isa_join_process ()
1070:../../../src/net/isa/isa.c **** {
1071:../../../src/net/isa/isa.c ****     int8_t n;
1072:../../../src/net/isa/isa.c ****     uint16_t timeout;
1073:../../../src/net/isa/isa.c ****     uint16_t timer;
1074:../../../src/net/isa/isa.c ****     uint8_t tdma_start_tick;
1075:../../../src/net/isa/isa.c ****     uint8_t battery_save_cnt;
1076:../../../src/net/isa/isa.c ****     uint8_t last_nrk_tick;
1077:../../../src/net/isa/isa.c ****     uint8_t i;
1078:../../../src/net/isa/isa.c **** 
1079:../../../src/net/isa/isa.c ****     timer=0;
1080:../../../src/net/isa/isa.c ****     battery_save_cnt=0;
1081:../../../src/net/isa/isa.c **** 
1082:../../../src/net/isa/isa.c ****     while(1)
1083:../../../src/net/isa/isa.c ****     {
1084:../../../src/net/isa/isa.c **** 	
1085:../../../src/net/isa/isa.c **** 	rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel 
1086:../../../src/net/isa/isa.c **** 	rf_polling_rx_on ();
1087:../../../src/net/isa/isa.c **** 	n = 0;
1088:../../../src/net/isa/isa.c **** 	_isa_sync_ok = 0;
1089:../../../src/net/isa/isa.c **** 	last_nrk_tick=0;  // should be 0 going in
1090:../../../src/net/isa/isa.c **** 	//_nrk_prev_timer_val=250;
1091:../../../src/net/isa/isa.c **** 	//_nrk_set_next_wakeup(250);
1092:../../../src/net/isa/isa.c **** 	//_nrk_os_timer_set(0);
1093:../../../src/net/isa/isa.c **** 	//timeout=200;
1094:../../../src/net/isa/isa.c **** 	while ((n = rf_rx_check_sfd()) == 0) {
1095:../../../src/net/isa/isa.c **** 	    // every OS tick 
1096:../../../src/net/isa/isa.c **** 	    if(last_nrk_tick!=_nrk_os_timer_get()) {
1097:../../../src/net/isa/isa.c **** 		last_nrk_tick=_nrk_os_timer_get();
1098:../../../src/net/isa/isa.c **** 		timer++;
1099:../../../src/net/isa/isa.c **** 		if(timer>ISA_TOKEN_TIMEOUT){
1100:../../../src/net/isa/isa.c **** 		    timer=0;
1101:../../../src/net/isa/isa.c **** 		    break;
1102:../../../src/net/isa/isa.c **** 		}
1103:../../../src/net/isa/isa.c **** 	    }
1104:../../../src/net/isa/isa.c **** 	}
1105:../../../src/net/isa/isa.c **** 	//_nrk_high_speed_timer_reset();
1106:../../../src/net/isa/isa.c **** 
1107:../../../src/net/isa/isa.c **** 	tdma_start_tick=_nrk_os_timer_get();
1108:../../../src/net/isa/isa.c **** 	timeout = tdma_start_tick+4;
1109:../../../src/net/isa/isa.c **** 	// an interrupt could happen in here and mess things up
1110:../../../src/net/isa/isa.c **** 	if (n != 0) {
1111:../../../src/net/isa/isa.c **** 	    n = 0;
1112:../../../src/net/isa/isa.c **** 	// Packet on its way
1113:../../../src/net/isa/isa.c **** 	    while ((n = rf_polling_rx_packet (false,128)) == 0) {
1114:../../../src/net/isa/isa.c **** 		if (_nrk_os_timer_get () > timeout)
1115:../../../src/net/isa/isa.c **** 		{
1116:../../../src/net/isa/isa.c **** 		    //nrk_kprintf( PSTR("Pkt timed out\r\n") );
1117:../../../src/net/isa/isa.c **** 		    break;          // huge timeout as failsafe
1118:../../../src/net/isa/isa.c **** 		}
1119:../../../src/net/isa/isa.c **** 	    }
1120:../../../src/net/isa/isa.c **** 	}
1121:../../../src/net/isa/isa.c **** 	rf_rx_off (); 
1122:../../../src/net/isa/isa.c **** 	if (n == 1){ //&& isa_rfRxInfo.length>0) {
1123:../../../src/net/isa/isa.c **** 	   // if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id){//change
1124:../../../src/net/isa/isa.c **** 		// CRC and checksum passed
1125:../../../src/net/isa/isa.c **** 		if(isa_rfRxInfo.pPayload[DAUX_INDEX+7]==10){ // DAUX packet
1126:../../../src/net/isa/isa.c **** 			isa_rx_data_ready = 1;	
1127:../../../src/net/isa/isa.c **** 			//global_slot = (volatile)isa_rfRxInfo.pPayload[SLOT_INDEX];
1128:../../../src/net/isa/isa.c **** 
1129:../../../src/net/isa/isa.c **** 			isa_set_channel_pattern(isa_rfRxInfo.pPayload[DAUX_INDEX+9]); //set channel hopping pattern
1130:../../../src/net/isa/isa.c **** 			channelIndex=isa_rfRxInfo.pPayload[DAUX_INDEX+10];
1131:../../../src/net/isa/isa.c **** 			currentChannel = slottedPattern[channelIndex];
1132:../../../src/net/isa/isa.c **** 			isa_set_channel(currentChannel);
1133:../../../src/net/isa/isa.c **** 			for(i=0;i<4;i++){  // set tx slots
1134:../../../src/net/isa/isa.c **** 			    if(isa_rfRxInfo.pPayload[DAUX_INDEX+19+i]==0)
1135:../../../src/net/isa/isa.c **** 				break;
1136:../../../src/net/isa/isa.c **** 			    else{
1137:../../../src/net/isa/isa.c **** 				isa_tdma_tx_mask |= ((uint32_t) 1) << isa_rfRxInfo.pPayload[DAUX_INDEX+19+i];
1138:../../../src/net/isa/isa.c **** 				isa_sched[isa_rfRxInfo.pPayload[DAUX_INDEX+19+i]] = 1;
1139:../../../src/net/isa/isa.c **** 				tx_slot_from_join[i]=isa_rfRxInfo.pPayload[DAUX_INDEX+19+i];
1140:../../../src/net/isa/isa.c **** 			//	printf("TX:%d\r\n",tx_slot_from_join[i]);
1141:../../../src/net/isa/isa.c ****                             }
1142:../../../src/net/isa/isa.c **** 			}			
1143:../../../src/net/isa/isa.c **** 			
1144:../../../src/net/isa/isa.c **** 			for(i=0;i<4;i++){  // set rx slots
1145:../../../src/net/isa/isa.c **** 			    if(isa_rfRxInfo.pPayload[DAUX_INDEX+23+i]==0)
1146:../../../src/net/isa/isa.c **** 				break;
1147:../../../src/net/isa/isa.c **** 			    else{
1148:../../../src/net/isa/isa.c **** 				isa_tdma_rx_mask |= ((uint32_t) 1) << isa_rfRxInfo.pPayload[DAUX_INDEX+23+i];
1149:../../../src/net/isa/isa.c **** 				isa_sched[isa_rfRxInfo.pPayload[DAUX_INDEX+23+i]] = 1;
1150:../../../src/net/isa/isa.c **** 			    }
1151:../../../src/net/isa/isa.c **** 			}
1152:../../../src/net/isa/isa.c **** 			nrk_event_signal(SIG(isa_rx_pkt_signal));
1153:../../../src/net/isa/isa.c **** 		break;
1154:../../../src/net/isa/isa.c ****  		}
1155:../../../src/net/isa/isa.c **** 	   // }
1156:../../../src/net/isa/isa.c **** 	}
1157:../../../src/net/isa/isa.c ****     }
1158:../../../src/net/isa/isa.c **** 
1159:../../../src/net/isa/isa.c **** 
1160:../../../src/net/isa/isa.c **** 
1161:../../../src/net/isa/isa.c ****     _isa_join_ok=1;
1162:../../../src/net/isa/isa.c ****     isa_rx_pkt_release();
1163:../../../src/net/isa/isa.c ****     return _isa_join_ok;
1164:../../../src/net/isa/isa.c **** }
1165:../../../src/net/isa/isa.c **** */
1166:../../../src/net/isa/isa.c **** 
1167:../../../src/net/isa/isa.c **** 
1168:../../../src/net/isa/isa.c **** int8_t isa_join_ready()
1169:../../../src/net/isa/isa.c **** {
 670               	.LM67:
 671               	.LFBB12:
 672               	/* prologue: frame size=0 */
 673               	/* prologue end (size=0) */
1170:../../../src/net/isa/isa.c ****     if (_isa_join_ok ==  1)
 675               	.LM68:
 676 01ba 8091 0000 		lds r24,_isa_join_ok
 677 01be 8130      		cpi r24,lo8(1)
 678 01c0 01F4      		brne .L40
 680               	.LM69:
 681 01c2 81E0      		ldi r24,lo8(1)
 682 01c4 90E0      		ldi r25,hi8(1)
 683 01c6 0895      		ret
 684               	.L40:
 685 01c8 8FEF      		ldi r24,lo8(-1)
 686 01ca 9FEF      		ldi r25,hi8(-1)
1171:../../../src/net/isa/isa.c ****         return NRK_OK;
1172:../../../src/net/isa/isa.c ****     else
1173:../../../src/net/isa/isa.c ****         return NRK_ERROR;
1174:../../../src/net/isa/isa.c **** }
 688               	.LM70:
 689 01cc 0895      		ret
 690               	/* epilogue: frame size=0 */
 691               	/* epilogue: noreturn */
 692               	/* epilogue end (size=0) */
 693               	/* function isa_join_ready size 10 (10) */
 695               	.Lscope12:
 697               		.stabd	78,0,0
 699               	.global	isa_task_config
 701               	isa_task_config:
 702               		.stabd	46,0,0
1175:../../../src/net/isa/isa.c **** 
1176:../../../src/net/isa/isa.c **** 
1177:../../../src/net/isa/isa.c **** /** FIXME this is only a temporary function need to be more specified
1178:../../../src/net/isa/isa.c ****  * _isa_init_sync()
1179:../../../src/net/isa/isa.c ****  *
1180:../../../src/net/isa/isa.c ****  * This function is used for join process.
1181:../../../src/net/isa/isa.c ****  * A node that wants to join the network would keep listening first
1182:../../../src/net/isa/isa.c ****  * and set up first sync.
1183:../../../src/net/isa/isa.c ****  * 
1184:../../../src/net/isa/isa.c ****  * Return: _isa_sync_ok.
1185:../../../src/net/isa/isa.c ****  */
1186:../../../src/net/isa/isa.c **** uint8_t _isa_init_sync ()
1187:../../../src/net/isa/isa.c **** {
1188:../../../src/net/isa/isa.c ****     int8_t n;
1189:../../../src/net/isa/isa.c ****     uint16_t timeout;
1190:../../../src/net/isa/isa.c ****     uint16_t timer;
1191:../../../src/net/isa/isa.c ****     uint8_t tdma_start_tick;
1192:../../../src/net/isa/isa.c ****     uint8_t battery_save_cnt;
1193:../../../src/net/isa/isa.c ****     uint8_t last_nrk_tick;
1194:../../../src/net/isa/isa.c ****     uint8_t tmp_nrk_prev_timer_val;
1195:../../../src/net/isa/isa.c ****     //volatile uint16_t sfd_start_time;
1196:../../../src/net/isa/isa.c **** 
1197:../../../src/net/isa/isa.c **** 	//printf("%d,%d\n\r",isa_param.channel,global_slot);
1198:../../../src/net/isa/isa.c ****   //  DISABLE_GLOBAL_INT ();
1199:../../../src/net/isa/isa.c ****     timer=0;
1200:../../../src/net/isa/isa.c ****     battery_save_cnt=0;
1201:../../../src/net/isa/isa.c **** 
1202:../../../src/net/isa/isa.c **** 
1203:../../../src/net/isa/isa.c ****     while(1)
1204:../../../src/net/isa/isa.c ****     {
1205:../../../src/net/isa/isa.c **** 
1206:../../../src/net/isa/isa.c ****     	//printf("Init sync \r\n");
1207:../../../src/net/isa/isa.c **** 	isa_rfRxInfo.pPayload[DHDR_INDEX]=1;			//configDHDR(0); This will have to change
1208:../../../src/net/isa/isa.c **** 	//isa_rfRxInfo.pPayload[SLOT_INDEX]=global_slot;
1209:../../../src/net/isa/isa.c **** 	
1210:../../../src/net/isa/isa.c **** 	#ifdef LED_DEBUG
1211:../../../src/net/isa/isa.c **** 	    nrk_led_set(1);
1212:../../../src/net/isa/isa.c **** 	#endif
1213:../../../src/net/isa/isa.c **** 	rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel 
1214:../../../src/net/isa/isa.c **** 	rf_polling_rx_on ();
1215:../../../src/net/isa/isa.c **** 	n = 0;
1216:../../../src/net/isa/isa.c **** 	_isa_sync_ok = 0;
1217:../../../src/net/isa/isa.c **** 	last_nrk_tick=0;  // should be 0 going in
1218:../../../src/net/isa/isa.c **** 	//_nrk_prev_timer_val=250;
1219:../../../src/net/isa/isa.c **** 	_nrk_set_next_wakeup(250);
1220:../../../src/net/isa/isa.c **** 	_nrk_os_timer_set(0);
1221:../../../src/net/isa/isa.c **** 	//timeout=200;
1222:../../../src/net/isa/isa.c **** 	while ((n = rf_rx_check_sfd()) == 0) {
1223:../../../src/net/isa/isa.c **** 
1224:../../../src/net/isa/isa.c **** 	    // every OS tick 
1225:../../../src/net/isa/isa.c **** 	    if(last_nrk_tick!=_nrk_os_timer_get()) {
1226:../../../src/net/isa/isa.c **** 		last_nrk_tick=_nrk_os_timer_get();
1227:../../../src/net/isa/isa.c **** 		timer++;
1228:../../../src/net/isa/isa.c **** 		if(timer>ISA_TOKEN_TIMEOUT){
1229:../../../src/net/isa/isa.c **** 		    timer=0;
1230:../../../src/net/isa/isa.c **** 		    break;
1231:../../../src/net/isa/isa.c **** 		}
1232:../../../src/net/isa/isa.c **** 	    }
1233:../../../src/net/isa/isa.c **** 
1234:../../../src/net/isa/isa.c **** 	}
1235:../../../src/net/isa/isa.c **** 	//printf("3 \n");
1236:../../../src/net/isa/isa.c **** 	_nrk_high_speed_timer_reset();
1237:../../../src/net/isa/isa.c **** 	// capture SFD transition with high speed timer
1238:../../../src/net/isa/isa.c **** 	//sfd_start_time=_nrk_high_speed_timer_get();
1239:../../../src/net/isa/isa.c **** 	tdma_start_tick=_nrk_os_timer_get();
1240:../../../src/net/isa/isa.c **** 
1241:../../../src/net/isa/isa.c **** 	timeout = tdma_start_tick+4;
1242:../../../src/net/isa/isa.c **** 	// an interrupt could happen in here and mess things up
1243:../../../src/net/isa/isa.c **** 	if (n != 0) {
1244:../../../src/net/isa/isa.c **** 	    n = 0;
1245:../../../src/net/isa/isa.c **** 	// Packet on its way
1246:../../../src/net/isa/isa.c **** 	    while ((n = rf_polling_rx_packet (false,128)) == 0) {
1247:../../../src/net/isa/isa.c **** 	  //  	printf("4 \n");
1248:../../../src/net/isa/isa.c **** 		if (_nrk_os_timer_get () > timeout)
1249:../../../src/net/isa/isa.c **** 		{
1250:../../../src/net/isa/isa.c **** 		    //nrk_kprintf( PSTR("Pkt timed out\r\n") );
1251:../../../src/net/isa/isa.c **** 		    break;          // huge timeout as failsafe
1252:../../../src/net/isa/isa.c **** 		}
1253:../../../src/net/isa/isa.c **** 	    }
1254:../../../src/net/isa/isa.c **** 	}
1255:../../../src/net/isa/isa.c **** 	rf_rx_off (); 
1256:../../../src/net/isa/isa.c **** 	//printf("5 \n");
1257:../../../src/net/isa/isa.c **** 	if (n == 1 /*&& isa_rfRxInfo.length>0*/) {
1258:../../../src/net/isa/isa.c **** 	    if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id){//change
1259:../../../src/net/isa/isa.c **** 		// CRC and checksum passed
1260:../../../src/net/isa/isa.c **** 		isa_rx_data_ready = 1;
1261:../../../src/net/isa/isa.c **** 		//rtl_rx_slot = 0;
1262:../../../src/net/isa/isa.c **** 		//DHDR = (volatile)isa_rfRxInfo.pPayload[DHDR_INDEX];		
1263:../../../src/net/isa/isa.c **** 		global_slot += (volatile)isa_rfRxInfo.pPayload[SLOT_INDEX];
1264:../../../src/net/isa/isa.c **** 
1265:../../../src/net/isa/isa.c **** 		nrk_led_toggle(GREEN_LED);
1266:../../../src/net/isa/isa.c **** 		putchar ('i');
1267:../../../src/net/isa/isa.c **** 
1268:../../../src/net/isa/isa.c **** 	//	nrk_event_signal(SIG(isa_rx_pkt_signal));
1269:../../../src/net/isa/isa.c **** 		break;
1270:../../../src/net/isa/isa.c **** 		//
1271:../../../src/net/isa/isa.c **** 	    }
1272:../../../src/net/isa/isa.c **** 	}
1273:../../../src/net/isa/isa.c ****     }
1274:../../../src/net/isa/isa.c **** 
1275:../../../src/net/isa/isa.c **** 
1276:../../../src/net/isa/isa.c **** #ifdef LED_DEBUG
1277:../../../src/net/isa/isa.c ****     nrk_led_clr(1);
1278:../../../src/net/isa/isa.c **** #endif
1279:../../../src/net/isa/isa.c ****      //printf("os_timer=%d\r\n",_nrk_os_itimer_get());
1280:../../../src/net/isa/isa.c ****      #ifdef INIT_SYNC
1281:../../../src/net/isa/isa.c **** 	nrk_gpio_set(NRK_DEBUG_1);
1282:../../../src/net/isa/isa.c ****      #endif
1283:../../../src/net/isa/isa.c ****     _isa_sync_ok = 1;
1284:../../../src/net/isa/isa.c ****     isa_rx_pkt_release();
1285:../../../src/net/isa/isa.c ****     tmp_nrk_prev_timer_val=_nrk_prev_timer_val;
1286:../../../src/net/isa/isa.c ****     _nrk_os_timer_stop();
1287:../../../src/net/isa/isa.c ****     _nrk_os_timer_reset();
1288:../../../src/net/isa/isa.c ****     /*
1289:../../../src/net/isa/isa.c ****      * If I dont do this reset, then the next wakeup is not predictable! Why??
1290:../../../src/net/isa/isa.c ****      */
1291:../../../src/net/isa/isa.c ****     _nrk_set_next_wakeup(10);
1292:../../../src/net/isa/isa.c ****     _nrk_os_timer_set(7);
1293:../../../src/net/isa/isa.c ****     nrk_high_speed_timer_wait(0,SFD_TO_NEXT_SLOT_TIME);
1294:../../../src/net/isa/isa.c ****     //_nrk_os_timer_reset();
1295:../../../src/net/isa/isa.c ****     _nrk_os_timer_start();
1296:../../../src/net/isa/isa.c ****     //_nrk_prev_timer_val=9;
1297:../../../src/net/isa/isa.c ****     //printf("%d\n\r", _nrk_os_timer_get());
1298:../../../src/net/isa/isa.c **** nrk_cur_task_TCB->next_wakeup = 10;
1299:../../../src/net/isa/isa.c **** 
1300:../../../src/net/isa/isa.c ****     //printf("%d\n\r",_nrk_prev_timer_val);
1301:../../../src/net/isa/isa.c ****    // _nrk_high_speed_timer_reset();
1302:../../../src/net/isa/isa.c ****    // slot_start_time=_nrk_high_speed_timer_get();
1303:../../../src/net/isa/isa.c ****     #ifdef INIT_SYNC
1304:../../../src/net/isa/isa.c **** 	nrk_gpio_clr(NRK_DEBUG_1);
1305:../../../src/net/isa/isa.c ****      #endif
1306:../../../src/net/isa/isa.c **** 
1307:../../../src/net/isa/isa.c **** 	return _isa_sync_ok;
1308:../../../src/net/isa/isa.c **** 
1309:../../../src/net/isa/isa.c **** }
1310:../../../src/net/isa/isa.c **** 
1311:../../../src/net/isa/isa.c **** 
1312:../../../src/net/isa/isa.c **** void isa_nw_task ()
1313:../../../src/net/isa/isa.c **** {
1314:../../../src/net/isa/isa.c ****     uint8_t slot;
1315:../../../src/net/isa/isa.c ****     uint32_t slot_mask;
1316:../../../src/net/isa/isa.c ****     uint16_t next_slot_offset = 0; 
1317:../../../src/net/isa/isa.c ****     uint8_t FIRST = 1;
1318:../../../src/net/isa/isa.c ****     DLMO_LINK * link;
1319:../../../src/net/isa/isa.c **** 
1320:../../../src/net/isa/isa.c ****     _isa_ready = 0;
1321:../../../src/net/isa/isa.c ****     
1322:../../../src/net/isa/isa.c ****     // wait for isa ready 
1323:../../../src/net/isa/isa.c ****     do {
1324:../../../src/net/isa/isa.c ****         nrk_wait_until_next_period ();
1325:../../../src/net/isa/isa.c ****     }while (_isa_ready == 0);
1326:../../../src/net/isa/isa.c **** 
1327:../../../src/net/isa/isa.c ****     _isa_ready = 1;
1328:../../../src/net/isa/isa.c ****     //nrk_gpio_clr(NRK_DEBUG_0);
1329:../../../src/net/isa/isa.c ****     //nrk_time_get (&last_slot_time);// dont know if it is useful
1330:../../../src/net/isa/isa.c ****     while (1) {
1331:../../../src/net/isa/isa.c **** 
1332:../../../src/net/isa/isa.c ****     	//putchar('n');
1333:../../../src/net/isa/isa.c ****     	_nrk_high_speed_timer_reset();
1334:../../../src/net/isa/isa.c ****     	 slot_start_time = _nrk_high_speed_timer_get();
1335:../../../src/net/isa/isa.c ****     	nrk_gpio_set(NRK_DEBUG_1);
1336:../../../src/net/isa/isa.c **** 	nrk_gpio_clr(NRK_DEBUG_1);
1337:../../../src/net/isa/isa.c **** 
1338:../../../src/net/isa/isa.c **** 	// reset high speed timer and then record the timer value used for calculating offsets
1339:../../../src/net/isa/isa.c **** 
1340:../../../src/net/isa/isa.c **** 	//nrk_time_get (&last_slot_time);// dont know if it is useful
1341:../../../src/net/isa/isa.c ****      //   last_slot = global_slot; //global_slot has been initialized to MAX_ISA_GLOBAL_SLOTS in is
1342:../../../src/net/isa/isa.c ****       //  if (last_slot > MAX_ISA_GLOBAL_SLOTS)
1343:../../../src/net/isa/isa.c ****         //    last_slot -= (MAX_ISA_GLOBAL_SLOTS+1);
1344:../../../src/net/isa/isa.c **** 
1345:../../../src/net/isa/isa.c **** 	current_global_slot = global_slot;
1346:../../../src/net/isa/isa.c **** 	/* global_slot should be wrapped */
1347:../../../src/net/isa/isa.c ****         if (global_slot > MAX_ISA_GLOBAL_SLOTS) {
1348:../../../src/net/isa/isa.c ****             global_slot -= MAX_ISA_GLOBAL_SLOTS;
1349:../../../src/net/isa/isa.c ****             global_cycle++;
1350:../../../src/net/isa/isa.c ****         }
1351:../../../src/net/isa/isa.c **** 
1352:../../../src/net/isa/isa.c **** 	slot = global_slot % ISA_SLOTS_PER_FRAME;
1353:../../../src/net/isa/isa.c ****         slot_mask = ((uint32_t) 1) << slot;
1354:../../../src/net/isa/isa.c **** 	if(_isa_sync_ok == 1){
1355:../../../src/net/isa/isa.c **** 	    #ifdef CHANNEL_HOPPING
1356:../../../src/net/isa/isa.c **** 		channelIndex += next_slot_offset;
1357:../../../src/net/isa/isa.c **** 		currentChannel = slottedPattern[(channelIndex)&0x0F];
1358:../../../src/net/isa/isa.c **** 		isa_set_channel(currentChannel);
1359:../../../src/net/isa/isa.c **** 
1360:../../../src/net/isa/isa.c **** 		/*
1361:../../../src/net/isa/isa.c **** 		if(slot>=22 && isa_node_mode == ISA_GATEWAY){
1362:../../../src/net/isa/isa.c **** 		   slowIndex = slowIndex % 3;
1363:../../../src/net/isa/isa.c **** 		   currentChannel = slowPattern[slowIndex];
1364:../../../src/net/isa/isa.c **** 		   isa_set_channel(currentChannel);
1365:../../../src/net/isa/isa.c **** 		   if(slot>=24)
1366:../../../src/net/isa/isa.c **** 		      slowIndex++;
1367:../../../src/net/isa/isa.c **** 		}
1368:../../../src/net/isa/isa.c **** 
1369:../../../src/net/isa/isa.c **** 		*/
1370:../../../src/net/isa/isa.c **** 	    //printf("CH:%d SL: %d\r\n",currentChannel,slot);
1371:../../../src/net/isa/isa.c **** 	    #endif
1372:../../../src/net/isa/isa.c **** 	    //printf("%d,%d\n\r",currentChannel,(channelIndex)&0x0F);
1373:../../../src/net/isa/isa.c **** 	    //printf("isa_rx_data_ready:%d\r\n",isa_rx_data_ready);
1374:../../../src/net/isa/isa.c **** 	    // if TX slot mask and tx ready, send a packet
1375:../../../src/net/isa/isa.c **** 	    #ifdef JOIN_PROCESS
1376:../../../src/net/isa/isa.c **** 		if(slot>=22 && isa_node_mode == ISA_GATEWAY)
1377:../../../src/net/isa/isa.c **** 		   isa_tx_data_ready |= ((uint32_t) 1 << slot);
1378:../../../src/net/isa/isa.c **** 	    #endif
1379:../../../src/net/isa/isa.c **** 	    #ifdef TX_RX_DEBUG
1380:../../../src/net/isa/isa.c **** 		//printf("R\r\n");
1381:../../../src/net/isa/isa.c **** 	//	nrk_gpio_set(NRK_DEBUG_0);
1382:../../../src/net/isa/isa.c **** 
1383:../../../src/net/isa/isa.c **** 	    #endif
1384:../../../src/net/isa/isa.c ****             	/*
1385:../../../src/net/isa/isa.c ****             	 * who is the neighbor that this slot is configured for?
1386:../../../src/net/isa/isa.c ****             	 */
1387:../../../src/net/isa/isa.c **** 		link = findLink(slot);
1388:../../../src/net/isa/isa.c ****             	if(link != NULL){
1389:../../../src/net/isa/isa.c ****             		//what type of link is this
1390:../../../src/net/isa/isa.c ****             		if (link->linkType == RX){
1391:../../../src/net/isa/isa.c ****             			_isa_rx (link, slot);
1392:../../../src/net/isa/isa.c ****             		}
1393:../../../src/net/isa/isa.c ****             		else if (link->linkType == TX_NO_ADV){
1394:../../../src/net/isa/isa.c ****             			_isa_tx(link , slot);
1395:../../../src/net/isa/isa.c ****             		}
1396:../../../src/net/isa/isa.c ****             		//find the highest priority entry in the queue (if any)
1397:../../../src/net/isa/isa.c ****             		//if (transmitEntry = hightestPriorityEntry(neighbor) != NULL){
1398:../../../src/net/isa/isa.c ****             		//	_isa_tx(transmitEntry, link);
1399:../../../src/net/isa/isa.c ****             	//	}
1400:../../../src/net/isa/isa.c ****             	}
1401:../../../src/net/isa/isa.c **** 
1402:../../../src/net/isa/isa.c **** 
1403:../../../src/net/isa/isa.c **** 		//printf("isa tx slot %d.\n\r",slot);
1404:../../../src/net/isa/isa.c **** 	//	printf("TX %d,%d,%d\n\r",currentChannel,(channelIndex)&0x0F,slot);
1405:../../../src/net/isa/isa.c **** 		//printf("tx\n\r");
1406:../../../src/net/isa/isa.c **** 	//	_isa_tx (slot);
1407:../../../src/net/isa/isa.c **** 	//	previous_tx_slot = slot;
1408:../../../src/net/isa/isa.c **** 		#ifdef HIGH_TIMER_DEBUG
1409:../../../src/net/isa/isa.c **** 	    	    //printf("TX later, high speed timer value is %d.\n\r", _nrk_high_speed_timer_get());
1410:../../../src/net/isa/isa.c **** 		#endif		
1411:../../../src/net/isa/isa.c **** 
1412:../../../src/net/isa/isa.c **** 
1413:../../../src/net/isa/isa.c **** 	} else	{
1414:../../../src/net/isa/isa.c **** 
1415:../../../src/net/isa/isa.c **** 	    ///do joining or sync request here
1416:../../../src/net/isa/isa.c **** 	//    DHDR = configDHDR(0);
1417:../../../src/net/isa/isa.c **** 	    if(isa_node_mode != ISA_GATEWAY){//change
1418:../../../src/net/isa/isa.c **** 		#ifdef JOIN_PROCESS
1419:../../../src/net/isa/isa.c **** 		if(!_isa_join_ok){
1420:../../../src/net/isa/isa.c **** 		    _isa_join_process();
1421:../../../src/net/isa/isa.c **** 		}
1422:../../../src/net/isa/isa.c **** 		#endif
1423:../../../src/net/isa/isa.c **** 		DHDRcount = 0;	//make send request for time correction
1424:../../../src/net/isa/isa.c **** 		_isa_sync_ok = _isa_init_sync();
1425:../../../src/net/isa/isa.c **** 
1426:../../../src/net/isa/isa.c **** 		//printf("waiting for sync...isa_sync_ok is %d.\n\r",_isa_sync_ok);
1427:../../../src/net/isa/isa.c **** 	    }else if (isa_node_mode == ISA_GATEWAY){
1428:../../../src/net/isa/isa.c **** 		_isa_sync_ok = 1;
1429:../../../src/net/isa/isa.c **** 	    }	
1430:../../../src/net/isa/isa.c **** 	}
1431:../../../src/net/isa/isa.c **** 	
1432:../../../src/net/isa/isa.c **** 	//nrk_gpio_clr(NRK_DEBUG_2);
1433:../../../src/net/isa/isa.c **** 	//printf("next_slot_offset %d\n\r",next_slot_offset);
1434:../../../src/net/isa/isa.c **** 	// To make sure that initial sync is correct
1435:../../../src/net/isa/isa.c ****         /*if(FIRST){
1436:../../../src/net/isa/isa.c **** 		//printf("%d\n\r",_nrk_os_timer_get ());
1437:../../../src/net/isa/isa.c **** 		next_slot_offset = 1;
1438:../../../src/net/isa/isa.c **** 		FIRST = 0;
1439:../../../src/net/isa/isa.c **** 	}*/
1440:../../../src/net/isa/isa.c **** 	if(slot_expired >= EXPIRATION && isa_node_mode != ISA_GATEWAY){
1441:../../../src/net/isa/isa.c **** 	    //printf("re-sync\n\r");
1442:../../../src/net/isa/isa.c **** 	    _isa_sync_ok = 0;
1443:../../../src/net/isa/isa.c **** 	    slot_expired = 0;    
1444:../../../src/net/isa/isa.c **** 	    global_slot = 0;
1445:../../../src/net/isa/isa.c **** 	    next_slot_offset = 0;
1446:../../../src/net/isa/isa.c **** 	    resync_times++;
1447:../../../src/net/isa/isa.c **** 	    if(isa_id!=0){
1448:../../../src/net/isa/isa.c **** 	        channelIndex = isa_clk_src_id;
1449:../../../src/net/isa/isa.c **** 	        currentChannel = slottedPattern[channelIndex];    
1450:../../../src/net/isa/isa.c **** 	    }else{
1451:../../../src/net/isa/isa.c **** 	        channelIndex = 0;
1452:../../../src/net/isa/isa.c **** 	        currentChannel = slottedPattern[channelIndex];
1453:../../../src/net/isa/isa.c **** 	    }
1454:../../../src/net/isa/isa.c **** 	    isa_set_channel(currentChannel);
1455:../../../src/net/isa/isa.c **** 
1456:../../../src/net/isa/isa.c **** 
1457:../../../src/net/isa/isa.c **** 	}else{
1458:../../../src/net/isa/isa.c **** 	    //printf("global_slot is %d. global cycle is %d.\n\r",global_slot,global_cycle);
1459:../../../src/net/isa/isa.c **** 	    next_slot_offset = isa_get_slots_until_next_wakeup (global_slot);
1460:../../../src/net/isa/isa.c **** 	  //  printf("NOS:%d\n\r",next_slot_offset);
1461:../../../src/net/isa/isa.c **** 	    //printf("%d,%d,%d,%d\n\r",_nrk_os_timer_get (),_nrk_get_next_wakeup (),global_slot,next_slot_
1462:../../../src/net/isa/isa.c **** 	    global_slot += next_slot_offset;
1463:../../../src/net/isa/isa.c ****             //nrk_clr_led (1);
1464:../../../src/net/isa/isa.c **** 	    #ifdef LED_SLOT_DEBUG
1465:../../../src/net/isa/isa.c **** 	    nrk_led_clr(0);
1466:../../../src/net/isa/isa.c **** 	    #endif
1467:../../../src/net/isa/isa.c **** 
1468:../../../src/net/isa/isa.c **** 	    offsetY = 0;
1469:../../../src/net/isa/isa.c **** 	  //  printf("%d\n\r",next_slot_offset);
1470:../../../src/net/isa/isa.c **** 		//nrk_gpio_set(NRK_DEBUG_2);
1471:../../../src/net/isa/isa.c **** 
1472:../../../src/net/isa/isa.c **** 	    if (txCount % 1000 == 0){
1473:../../../src/net/isa/isa.c **** 	     	  	printf ("PL:%d\r\n",packetsLost);
1474:../../../src/net/isa/isa.c **** 	     	  	  }
1475:../../../src/net/isa/isa.c **** 
1476:../../../src/net/isa/isa.c ****             nrk_wait_until_next_n_periods (next_slot_offset);
1477:../../../src/net/isa/isa.c ****            // nrk_gpio_clr(NRK_DEBUG_2);
1478:../../../src/net/isa/isa.c ****             #ifdef LED_SLOT_DEBUG
1479:../../../src/net/isa/isa.c **** 	    nrk_led_set(0);
1480:../../../src/net/isa/isa.c **** 	    #endif
1481:../../../src/net/isa/isa.c **** 	//}
1482:../../../src/net/isa/isa.c ****         //nrk_set_led (1);
1483:../../../src/net/isa/isa.c ****         // Set last_slot_time to the time of the start of the slot
1484:../../../src/net/isa/isa.c **** 	}
1485:../../../src/net/isa/isa.c ****     }
1486:../../../src/net/isa/isa.c **** }
1487:../../../src/net/isa/isa.c **** 
1488:../../../src/net/isa/isa.c **** void isa_task_config ()
1489:../../../src/net/isa/isa.c **** {
 704               	.LM71:
 705               	.LFBB13:
 706               	/* prologue: frame size=0 */
 707 01ce 0F93      		push r16
 708 01d0 1F93      		push r17
 709               	/* prologue end (size=2) */
1490:../../../src/net/isa/isa.c ****     isa_task.task = isa_nw_task;
 711               	.LM72:
 712 01d2 80E0      		ldi r24,lo8(pm(isa_nw_task))
 713 01d4 90E0      		ldi r25,hi8(pm(isa_nw_task))
 714 01d6 9093 0000 		sts (isa_task+5)+1,r25
 715 01da 8093 0000 		sts isa_task+5,r24
1491:../../../src/net/isa/isa.c ****     nrk_task_set_stk( &isa_task, isa_task_stack, ISA_STACK_SIZE);
 717               	.LM73:
 718 01de 00E0      		ldi r16,lo8(isa_task)
 719 01e0 10E0      		ldi r17,hi8(isa_task)
 720 01e2 40E8      		ldi r20,lo8(128)
 721 01e4 50E0      		ldi r21,hi8(128)
 722 01e6 60E0      		ldi r22,lo8(isa_task_stack)
 723 01e8 70E0      		ldi r23,hi8(isa_task_stack)
 724 01ea C801      		movw r24,r16
 725 01ec 0E94 0000 		call nrk_task_set_stk
1492:../../../src/net/isa/isa.c ****     isa_task.prio = 20;
 727               	.LM74:
 728 01f0 84E1      		ldi r24,lo8(20)
 729 01f2 8093 0000 		sts isa_task+8,r24
1493:../../../src/net/isa/isa.c ****     isa_task.FirstActivation = TRUE;
 731               	.LM75:
 732 01f6 81E0      		ldi r24,lo8(1)
 733 01f8 8093 0000 		sts isa_task+7,r24
1494:../../../src/net/isa/isa.c ****     isa_task.Type = BASIC_TASK;
 735               	.LM76:
 736 01fc 8093 0000 		sts isa_task+9,r24
1495:../../../src/net/isa/isa.c ****     isa_task.SchType = PREEMPTIVE;
 738               	.LM77:
 739 0200 8093 0000 		sts isa_task+10,r24
1496:../../../src/net/isa/isa.c ****     isa_task.period.secs = 0;
 741               	.LM78:
 742 0204 1092 0000 		sts isa_task+11,__zero_reg__
 743 0208 1092 0000 		sts (isa_task+11)+1,__zero_reg__
 744 020c 1092 0000 		sts (isa_task+11)+2,__zero_reg__
 745 0210 1092 0000 		sts (isa_task+11)+3,__zero_reg__
1497:../../../src/net/isa/isa.c ****     isa_task.period.nano_secs = 10*NANOS_PER_MS;
 747               	.LM79:
 748 0214 80E8      		ldi r24,lo8(10000000)
 749 0216 96E9      		ldi r25,hi8(10000000)
 750 0218 A8E9      		ldi r26,hlo8(10000000)
 751 021a B0E0      		ldi r27,hhi8(10000000)
 752 021c 8093 0000 		sts isa_task+15,r24
 753 0220 9093 0000 		sts (isa_task+15)+1,r25
 754 0224 A093 0000 		sts (isa_task+15)+2,r26
 755 0228 B093 0000 		sts (isa_task+15)+3,r27
1498:../../../src/net/isa/isa.c ****     isa_task.cpu_reserve.secs = 0;      
 757               	.LM80:
 758 022c 1092 0000 		sts isa_task+19,__zero_reg__
 759 0230 1092 0000 		sts (isa_task+19)+1,__zero_reg__
 760 0234 1092 0000 		sts (isa_task+19)+2,__zero_reg__
 761 0238 1092 0000 		sts (isa_task+19)+3,__zero_reg__
1499:../../../src/net/isa/isa.c ****     isa_task.cpu_reserve.nano_secs = 0;
 763               	.LM81:
 764 023c 1092 0000 		sts isa_task+23,__zero_reg__
 765 0240 1092 0000 		sts (isa_task+23)+1,__zero_reg__
 766 0244 1092 0000 		sts (isa_task+23)+2,__zero_reg__
 767 0248 1092 0000 		sts (isa_task+23)+3,__zero_reg__
1500:../../../src/net/isa/isa.c ****     isa_task.offset.secs = 0;
 769               	.LM82:
 770 024c 1092 0000 		sts isa_task+27,__zero_reg__
 771 0250 1092 0000 		sts (isa_task+27)+1,__zero_reg__
 772 0254 1092 0000 		sts (isa_task+27)+2,__zero_reg__
 773 0258 1092 0000 		sts (isa_task+27)+3,__zero_reg__
1501:../../../src/net/isa/isa.c ****     isa_task.offset.nano_secs = 0;
 775               	.LM83:
 776 025c 1092 0000 		sts isa_task+31,__zero_reg__
 777 0260 1092 0000 		sts (isa_task+31)+1,__zero_reg__
 778 0264 1092 0000 		sts (isa_task+31)+2,__zero_reg__
 779 0268 1092 0000 		sts (isa_task+31)+3,__zero_reg__
1502:../../../src/net/isa/isa.c ****     nrk_activate_task (&isa_task);
 781               	.LM84:
 782 026c C801      		movw r24,r16
 783 026e 0E94 0000 		call nrk_activate_task
 784               	/* epilogue: frame size=0 */
 785 0272 1F91      		pop r17
 786 0274 0F91      		pop r16
 787 0276 0895      		ret
 788               	/* epilogue end (size=3) */
 789               	/* function isa_task_config size 85 (80) */
 791               	.Lscope13:
 793               		.stabd	78,0,0
 795               	.global	_isa_init_sync
 797               	_isa_init_sync:
 798               		.stabd	46,0,0
 800               	.LM85:
 801               	.LFBB14:
 802               	/* prologue: frame size=0 */
 803 0278 CF92      		push r12
 804 027a DF92      		push r13
 805 027c EF92      		push r14
 806 027e FF92      		push r15
 807 0280 0F93      		push r16
 808 0282 1F93      		push r17
 809 0284 CF93      		push r28
 810 0286 DF93      		push r29
 811               	/* prologue end (size=8) */
 812 0288 EE24      		clr r14
 813 028a FF24      		clr r15
 814 028c 80E0      		ldi r24,lo8(isa_rfRxInfo)
 815 028e C82E      		mov r12,r24
 816 0290 80E0      		ldi r24,hi8(isa_rfRxInfo)
 817 0292 D82E      		mov r13,r24
 818               	.L66:
 820               	.LM86:
 821 0294 E091 0000 		lds r30,isa_rfRxInfo+5
 822 0298 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 823 029c 81E0      		ldi r24,lo8(1)
 824 029e 8083      		st Z,r24
 826               	.LM87:
 827 02a0 6091 0000 		lds r22,isa_param+2
 828 02a4 C601      		movw r24,r12
 829 02a6 0E94 0000 		call rf_set_rx
 831               	.LM88:
 832 02aa 0E94 0000 		call rf_polling_rx_on
 834               	.LM89:
 835 02ae 1092 0000 		sts _isa_sync_ok,__zero_reg__
 837               	.LM90:
 838 02b2 8AEF      		ldi r24,lo8(-6)
 839 02b4 0E94 0000 		call _nrk_set_next_wakeup
 841               	.LM91:
 842 02b8 80E0      		ldi r24,lo8(0)
 843 02ba 0E94 0000 		call _nrk_os_timer_set
 844 02be 00E0      		ldi r16,lo8(0)
 845 02c0 00C0      		rjmp .L67
 846               	.L49:
 848               	.LM92:
 849 02c2 0E94 0000 		call _nrk_os_timer_get
 850 02c6 0817      		cp r16,r24
 851 02c8 01F0      		breq .L67
 853               	.LM93:
 854 02ca 0E94 0000 		call _nrk_os_timer_get
 855 02ce 082F      		mov r16,r24
 857               	.LM94:
 858 02d0 0894      		sec
 859 02d2 E11C      		adc r14,__zero_reg__
 860 02d4 F11C      		adc r15,__zero_reg__
 862               	.LM95:
 863 02d6 81E1      		ldi r24,lo8(10001)
 864 02d8 E816      		cp r14,r24
 865 02da 87E2      		ldi r24,hi8(10001)
 866 02dc F806      		cpc r15,r24
 867 02de 00F0      		brlo .L67
 868 02e0 EE24      		clr r14
 869 02e2 FF24      		clr r15
 870 02e4 00C0      		rjmp .L52
 871               	.L67:
 873               	.LM96:
 874 02e6 0E94 0000 		call rf_rx_check_sfd
 875 02ea 182F      		mov r17,r24
 876 02ec 8823      		tst r24
 877 02ee 01F0      		breq .L49
 878               	.L52:
 880               	.LM97:
 881 02f0 0E94 0000 		call _nrk_high_speed_timer_reset
 883               	.LM98:
 884 02f4 0E94 0000 		call _nrk_os_timer_get
 886               	.LM99:
 887 02f8 C82F      		mov r28,r24
 888 02fa DD27      		clr r29
 889 02fc 2496      		adiw r28,4
 891               	.LM100:
 892 02fe 1123      		tst r17
 893 0300 01F0      		breq .L54
 894 0302 00C0      		rjmp .L63
 895               	.L55:
 897               	.LM101:
 898 0304 0E94 0000 		call _nrk_os_timer_get
 899 0308 9927      		clr r25
 900 030a C817      		cp r28,r24
 901 030c D907      		cpc r29,r25
 902 030e 00F0      		brlo .L54
 903               	.L63:
 905               	.LM102:
 906 0310 60E8      		ldi r22,lo8(-128)
 907 0312 80E0      		ldi r24,lo8(0)
 908 0314 0E94 0000 		call rf_polling_rx_packet
 909 0318 182F      		mov r17,r24
 910 031a 8823      		tst r24
 911 031c 01F0      		breq .L55
 912               	.L54:
 914               	.LM103:
 915 031e 0E94 0000 		call rf_rx_off
 917               	.LM104:
 918 0322 1130      		cpi r17,lo8(1)
 919 0324 01F0      		breq .+2
 920 0326 00C0      		rjmp .L66
 922               	.LM105:
 923 0328 E091 0000 		lds r30,isa_rfRxInfo+5
 924 032c F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 925 0330 9281      		ldd r25,Z+2
 926 0332 8091 0000 		lds r24,isa_clk_src_id
 927 0336 9817      		cp r25,r24
 928 0338 01F0      		breq .+2
 929 033a 00C0      		rjmp .L66
 931               	.LM106:
 932 033c 81E0      		ldi r24,lo8(1)
 933 033e 90E0      		ldi r25,hi8(1)
 934 0340 A0E0      		ldi r26,hlo8(1)
 935 0342 B0E0      		ldi r27,hhi8(1)
 936 0344 8093 0000 		sts isa_rx_data_ready,r24
 937 0348 9093 0000 		sts (isa_rx_data_ready)+1,r25
 938 034c A093 0000 		sts (isa_rx_data_ready)+2,r26
 939 0350 B093 0000 		sts (isa_rx_data_ready)+3,r27
 941               	.LM107:
 942 0354 8091 0000 		lds r24,global_slot
 943 0358 9091 0000 		lds r25,(global_slot)+1
 944 035c 2181      		ldd r18,Z+1
 945 035e 820F      		add r24,r18
 946 0360 911D      		adc r25,__zero_reg__
 947 0362 9093 0000 		sts (global_slot)+1,r25
 948 0366 8093 0000 		sts global_slot,r24
 950               	.LM108:
 951 036a 82E0      		ldi r24,lo8(2)
 952 036c 90E0      		ldi r25,hi8(2)
 953 036e 0E94 0000 		call nrk_led_toggle
 955               	.LM109:
 956 0372 6091 0000 		lds r22,__iob+2
 957 0376 7091 0000 		lds r23,(__iob+2)+1
 958 037a 89E6      		ldi r24,lo8(105)
 959 037c 90E0      		ldi r25,hi8(105)
 960 037e 0E94 0000 		call fputc
 962               	.LM110:
 963 0382 1093 0000 		sts _isa_sync_ok,r17
 964               	.LBB11:
 965               	.LBB12:
 967               	.LM111:
 968 0386 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 969 038a 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 970 038e 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 971 0392 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 972               	.LBE12:
 973               	.LBE11:
 975               	.LM112:
 976 0396 0E94 0000 		call _nrk_os_timer_stop
 978               	.LM113:
 979 039a 0E94 0000 		call _nrk_os_timer_reset
 981               	.LM114:
 982 039e 8AE0      		ldi r24,lo8(10)
 983 03a0 0E94 0000 		call _nrk_set_next_wakeup
 985               	.LM115:
 986 03a4 87E0      		ldi r24,lo8(7)
 987 03a6 0E94 0000 		call _nrk_os_timer_set
 989               	.LM116:
 990 03aa 61E1      		ldi r22,lo8(-32751)
 991 03ac 70E8      		ldi r23,hi8(-32751)
 992 03ae 80E0      		ldi r24,lo8(0)
 993 03b0 90E0      		ldi r25,hi8(0)
 994 03b2 0E94 0000 		call nrk_high_speed_timer_wait
 996               	.LM117:
 997 03b6 0E94 0000 		call _nrk_os_timer_start
 999               	.LM118:
 1000 03ba E091 0000 		lds r30,nrk_cur_task_TCB
 1001 03be F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1002 03c2 8AE0      		ldi r24,lo8(10)
 1003 03c4 90E0      		ldi r25,hi8(10)
 1004 03c6 968B      		std Z+22,r25
 1005 03c8 858B      		std Z+21,r24
 1006 03ca 8091 0000 		lds r24,_isa_sync_ok
 1008               	.LM119:
 1009 03ce 9927      		clr r25
 1010               	/* epilogue: frame size=0 */
 1011 03d0 DF91      		pop r29
 1012 03d2 CF91      		pop r28
 1013 03d4 1F91      		pop r17
 1014 03d6 0F91      		pop r16
 1015 03d8 FF90      		pop r15
 1016 03da EF90      		pop r14
 1017 03dc DF90      		pop r13
 1018 03de CF90      		pop r12
 1019 03e0 0895      		ret
 1020               	/* epilogue end (size=9) */
 1021               	/* function _isa_init_sync size 181 (164) */
 1029               	.Lscope14:
 1031               		.stabd	78,0,0
 1032               		.data
 1033               	.LC0:
 1034 0000 7061 636B 		.string	"packet is too long, times out.\n\r"
 1034      6574 2069 
 1034      7320 746F 
 1034      6F20 6C6F 
 1034      6E67 2C20 
 1035               	.LC1:
 1036 0021 2564 2025 		.string	"%d %d %d"
 1036      6420 2564 
 1036      00
 1037               		.text
 1041               	.global	_isa_tx
 1043               	_isa_tx:
 1044               		.stabd	46,0,0
 1046               	.LM120:
 1047               	.LFBB15:
 1048               	/* prologue: frame size=7 */
 1049 03e2 BF92      		push r11
 1050 03e4 CF92      		push r12
 1051 03e6 DF92      		push r13
 1052 03e8 EF92      		push r14
 1053 03ea FF92      		push r15
 1054 03ec 0F93      		push r16
 1055 03ee 1F93      		push r17
 1056 03f0 CF93      		push r28
 1057 03f2 DF93      		push r29
 1058 03f4 CDB7      		in r28,__SP_L__
 1059 03f6 DEB7      		in r29,__SP_H__
 1060 03f8 2797      		sbiw r28,7
 1061 03fa 0FB6      		in __tmp_reg__,__SREG__
 1062 03fc F894      		cli
 1063 03fe DEBF      		out __SP_H__,r29
 1064 0400 0FBE      		out __SREG__,__tmp_reg__
 1065 0402 CDBF      		out __SP_L__,r28
 1066               	/* prologue end (size=17) */
 1067 0404 7C01      		movw r14,r24
 1068 0406 6B01      		movw r12,r22
 1070               	.LM121:
 1071 0408 81E0      		ldi r24,lo8(1)
 1072 040a 8093 0000 		sts isa_rfTxInfo+5,r24
 1074               	.LM122:
 1075 040e 8091 0000 		lds r24,check
 1076 0412 8530      		cpi r24,lo8(5)
 1077 0414 01F4      		brne .L69
 1079               	.LM123:
 1080 0416 0E94 0000 		call nrk_terminate_task
 1081               	.L69:
 1083               	.LM124:
 1084 041a F701      		movw r30,r14
 1085 041c A085      		ldd r26,Z+8
 1086 041e B185      		ldd r27,Z+9
 1087 0420 FD01      		movw r30,r26
 1088 0422 8181      		ldd r24,Z+1
 1089 0424 9281      		ldd r25,Z+2
 1090 0426 0E94 0000 		call getHighPriorityEntry
 1091 042a 8C01      		movw r16,r24
 1093               	.LM125:
 1094 042c 892B      		or r24,r25
 1095 042e 01F4      		brne .+2
 1096 0430 00C0      		rjmp .L106
 1098               	.LM126:
 1099 0432 BC2C      		mov r11,r12
 1100 0434 C092 0000 		sts previous_tx_slot,r12
 1102               	.LM127:
 1103 0438 0F5F      		subi r16,lo8(-(1))
 1104 043a 1F4F      		sbci r17,hi8(-(1))
 1105 043c 1093 0000 		sts (isa_rfTxInfo+3)+1,r17
 1106 0440 0093 0000 		sts isa_rfTxInfo+3,r16
 1108               	.LM128:
 1109 0444 D801      		movw r26,r16
 1110 0446 8E91      		ld r24,-X
 1111 0448 8D01      		movw r16,r26
 1112 044a 8093 0000 		sts isa_rfTxInfo+2,r24
 1114               	.LM129:
 1115 044e C701      		movw r24,r14
 1116 0450 0E94 0000 		call configDHDR
 1117 0454 F82E      		mov r15,r24
 1119               	.LM130:
 1120 0456 E091 0000 		lds r30,isa_rfTxInfo+3
 1121 045a F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1122 045e 8083      		st Z,r24
 1124               	.LM131:
 1125 0460 E091 0000 		lds r30,isa_rfTxInfo+3
 1126 0464 F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1127 0468 8091 0000 		lds r24,global_slot
 1128 046c 9091 0000 		lds r25,(global_slot)+1
 1129 0470 8183      		std Z+1,r24
 1131               	.LM132:
 1132 0472 E091 0000 		lds r30,isa_rfTxInfo+3
 1133 0476 F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1134 047a 8091 0000 		lds r24,isa_id
 1135 047e 8283      		std Z+2,r24
 1137               	.LM133:
 1138 0480 0E94 0000 		call _nrk_high_speed_timer_reset
 1140               	.LM134:
 1141 0484 60E8      		ldi r22,lo8(9600)
 1142 0486 75E2      		ldi r23,hi8(9600)
 1143 0488 80E0      		ldi r24,lo8(0)
 1144 048a 90E0      		ldi r25,hi8(0)
 1145 048c 0E94 0000 		call nrk_high_speed_timer_wait
 1147               	.LM135:
 1148 0490 E090 0000 		lds r14,NRK_DEBUG_1
 1149 0494 8E2D      		mov r24,r14
 1150 0496 0E94 0000 		call nrk_gpio_set
 1152               	.LM136:
 1153 049a 4091 0000 		lds r20,isa_param+4
 1154 049e 5091 0000 		lds r21,(isa_param+4)+1
 1155 04a2 6091 0000 		lds r22,slot_start_time
 1156 04a6 7091 0000 		lds r23,(slot_start_time)+1
 1157 04aa 20E0      		ldi r18,lo8(tx_start_time)
 1158 04ac 30E0      		ldi r19,hi8(tx_start_time)
 1159 04ae 80E0      		ldi r24,lo8(isa_rfTxInfo)
 1160 04b0 90E0      		ldi r25,hi8(isa_rfTxInfo)
 1161 04b2 0E94 0000 		call rf_tx_tdma_packet
 1162 04b6 8823      		tst r24
 1163 04b8 01F0      		breq .L73
 1165               	.LM137:
 1166 04ba 0B58      		subi r16,lo8(-(117))
 1167 04bc 1F4F      		sbci r17,hi8(-(117))
 1168 04be F801      		movw r30,r16
 1169 04c0 1082      		st Z,__zero_reg__
 1170 04c2 0557      		subi r16,lo8(-(-117))
 1171 04c4 1040      		sbci r17,hi8(-(-117))
 1173               	.LM138:
 1174 04c6 8091 0000 		lds r24,txCount
 1175 04ca 9091 0000 		lds r25,(txCount)+1
 1176 04ce 0196      		adiw r24,1
 1177 04d0 9093 0000 		sts (txCount)+1,r25
 1178 04d4 8093 0000 		sts txCount,r24
 1180               	.LM139:
 1181 04d8 8E2D      		mov r24,r14
 1182 04da 0E94 0000 		call nrk_gpio_clr
 1184               	.LM140:
 1185 04de 83E0      		ldi r24,lo8(3)
 1186 04e0 90E0      		ldi r25,hi8(3)
 1187 04e2 0E94 0000 		call nrk_led_toggle
 1189               	.LM141:
 1190 04e6 8091 0000 		lds r24,tx_start_time
 1191 04ea 9091 0000 		lds r25,(tx_start_time)+1
 1192 04ee 2091 0000 		lds r18,slot_start_time
 1193 04f2 3091 0000 		lds r19,(slot_start_time)+1
 1194 04f6 821B      		sub r24,r18
 1195 04f8 930B      		sbc r25,r19
 1196 04fa 9093 0000 		sts (offsetY)+1,r25
 1197 04fe 8093 0000 		sts offsetY,r24
 1198               	.L73:
 1200               	.LM142:
 1201 0502 8091 0000 		lds r24,isa_tx_done_signal
 1202 0506 0E94 0000 		call nrk_event_signal
 1204               	.LM143:
 1205 050a F7FE      		sbrs r15,7
 1206 050c 00C0      		rjmp .L75
 1208               	.LM144:
 1209 050e 0E94 0000 		call rf_polling_rx_on
 1211               	.LM145:
 1212 0512 8E2D      		mov r24,r14
 1213 0514 0E94 0000 		call nrk_gpio_set
 1215               	.LM146:
 1216 0518 0E94 0000 		call _nrk_high_speed_timer_reset
 1218               	.LM147:
 1219 051c 60E0      		ldi r22,lo8(4096)
 1220 051e 70E1      		ldi r23,hi8(4096)
 1221 0520 80E0      		ldi r24,lo8(0)
 1222 0522 90E0      		ldi r25,hi8(0)
 1223 0524 0E94 0000 		call nrk_high_speed_timer_wait
 1225               	.LM148:
 1226 0528 0E94 0000 		call _nrk_os_timer_get
 1227 052c 8983      		std Y+1,r24
 1229               	.LM149:
 1230 052e 8981      		ldd r24,Y+1
 1231 0530 8E5F      		subi r24,lo8(-(2))
 1232 0532 8983      		std Y+1,r24
 1233 0534 00C0      		rjmp .L77
 1234               	.L78:
 1236               	.LM150:
 1237 0536 0E94 0000 		call _nrk_os_timer_get
 1238 053a 9981      		ldd r25,Y+1
 1239 053c 9817      		cp r25,r24
 1240 053e 00F4      		brsh .L77
 1242               	.LM151:
 1243 0540 2091 0000 		lds r18,previous_tx_slot
 1245               	.LM152:
 1246 0544 822F      		mov r24,r18
 1247 0546 9927      		clr r25
 1248 0548 C816      		cp r12,r24
 1249 054a D906      		cpc r13,r25
 1250 054c 01F4      		brne .L80
 1252               	.LM153:
 1253 054e 8091 0000 		lds r24,slot_expired
 1254 0552 9091 0000 		lds r25,(slot_expired)+1
 1255 0556 4996      		adiw r24,25
 1256 0558 9093 0000 		sts (slot_expired)+1,r25
 1257 055c 8093 0000 		sts slot_expired,r24
 1258 0560 00C0      		rjmp .L82
 1259               	.L80:
 1261               	.LM154:
 1262 0562 8B2D      		mov r24,r11
 1263 0564 821B      		sub r24,r18
 1264 0566 2091 0000 		lds r18,slot_expired
 1265 056a 3091 0000 		lds r19,(slot_expired)+1
 1266 056e 482F      		mov r20,r24
 1267 0570 5527      		clr r21
 1268 0572 47FD      		sbrc r20,7
 1269 0574 5095      		com r21
 1271               	.LM155:
 1272 0576 1816      		cp __zero_reg__,r24
 1273 0578 04F0      		brlt .L112
 1275               	.LM156:
 1276 057a 275E      		subi r18,lo8(-(25))
 1277 057c 3F4F      		sbci r19,hi8(-(25))
 1278               	.L112:
 1279 057e 240F      		add r18,r20
 1280 0580 351F      		adc r19,r21
 1281 0582 3093 0000 		sts (slot_expired)+1,r19
 1282 0586 2093 0000 		sts slot_expired,r18
 1283               	.L82:
 1285               	.LM157:
 1286 058a 0E94 0000 		call rf_rx_off
 1288               	.LM158:
 1289 058e 8E2D      		mov r24,r14
 1290 0590 0E94 0000 		call nrk_gpio_clr
 1292               	.LM159:
 1293 0594 8091 0000 		lds r24,packetsLost
 1294 0598 9091 0000 		lds r25,(packetsLost)+1
 1295 059c 0196      		adiw r24,1
 1296 059e 9093 0000 		sts (packetsLost)+1,r25
 1297 05a2 8093 0000 		sts packetsLost,r24
 1299               	.LM160:
 1300 05a6 0958      		subi r16,lo8(-(119))
 1301 05a8 1F4F      		sbci r17,hi8(-(119))
 1302 05aa D801      		movw r26,r16
 1303 05ac ED91      		ld r30,X+
 1304 05ae FC91      		ld r31,X
 1305 05b0 0757      		subi r16,lo8(-(-119))
 1306 05b2 1040      		sbci r17,hi8(-(-119))
 1307 05b4 00C0      		rjmp .L117
 1308               	.L77:
 1310               	.LM161:
 1311 05b6 0E94 0000 		call rf_rx_check_sfd
 1312 05ba 8823      		tst r24
 1313 05bc 01F4      		brne .+2
 1314 05be 00C0      		rjmp .L78
 1316               	.LM162:
 1317 05c0 0E94 0000 		call _nrk_os_timer_get
 1318 05c4 8983      		std Y+1,r24
 1320               	.LM163:
 1321 05c6 8981      		ldd r24,Y+1
 1322 05c8 8E5F      		subi r24,lo8(-(2))
 1323 05ca 8983      		std Y+1,r24
 1325               	.LM164:
 1326 05cc F2FE      		sbrs r15,2
 1327 05ce 00C0      		rjmp .L88
 1328 05d0 44E0      		ldi r20,lo8(4)
 1329 05d2 D42E      		mov r13,r20
 1330 05d4 00C0      		rjmp .L107
 1331               	.L91:
 1333               	.LM165:
 1334 05d6 0E94 0000 		call _nrk_os_timer_get
 1335 05da 9981      		ldd r25,Y+1
 1336 05dc 9817      		cp r25,r24
 1337 05de 00F4      		brsh .L107
 1339               	.LM166:
 1340 05e0 80E0      		ldi r24,lo8(.LC0)
 1341 05e2 90E0      		ldi r25,hi8(.LC0)
 1342 05e4 9F93      		push r25
 1343 05e6 8F93      		push r24
 1344 05e8 0E94 0000 		call printf
 1346               	.LM167:
 1347 05ec 8091 0000 		lds r24,packetsLost
 1348 05f0 9091 0000 		lds r25,(packetsLost)+1
 1349 05f4 0196      		adiw r24,1
 1350 05f6 9093 0000 		sts (packetsLost)+1,r25
 1351 05fa 8093 0000 		sts packetsLost,r24
 1353               	.LM168:
 1354 05fe 0E94 0000 		call _nrk_os_timer_get
 1355 0602 8093 0000 		sts tmp_curSec,r24
 1357               	.LM169:
 1358 0606 0958      		subi r16,lo8(-(119))
 1359 0608 1F4F      		sbci r17,hi8(-(119))
 1360 060a D801      		movw r26,r16
 1361 060c ED91      		ld r30,X+
 1362 060e FC91      		ld r31,X
 1363 0610 0757      		subi r16,lo8(-(-119))
 1364 0612 1040      		sbci r17,hi8(-(-119))
 1365 0614 0F90      		pop __tmp_reg__
 1366 0616 0F90      		pop __tmp_reg__
 1367               	.L117:
 1368 0618 3097      		sbiw r30,0
 1369 061a 01F4      		brne .+2
 1370 061c 00C0      		rjmp .L114
 1372               	.LM170:
 1373 061e 60E0      		ldi r22,lo8(0)
 1374 0620 00C0      		rjmp .L113
 1375               	.L88:
 1376 0622 32E0      		ldi r19,lo8(2)
 1377 0624 D32E      		mov r13,r19
 1378               	.L107:
 1380               	.LM171:
 1381 0626 6D2D      		mov r22,r13
 1382 0628 81E0      		ldi r24,lo8(1)
 1383 062a 0E94 0000 		call rf_polling_rx_packet
 1384 062e F82E      		mov r15,r24
 1385 0630 8823      		tst r24
 1386 0632 01F0      		breq .L91
 1388               	.LM172:
 1389 0634 B1E0      		ldi r27,lo8(1)
 1390 0636 8B17      		cp r24,r27
 1391 0638 01F0      		breq .L96
 1393               	.LM173:
 1394 063a 6091 0000 		lds r22,__iob+2
 1395 063e 7091 0000 		lds r23,(__iob+2)+1
 1396 0642 86E6      		ldi r24,lo8(102)
 1397 0644 90E0      		ldi r25,hi8(102)
 1398 0646 0E94 0000 		call fputc
 1400               	.LM174:
 1401 064a 8091 0000 		lds r24,packetsLost
 1402 064e 9091 0000 		lds r25,(packetsLost)+1
 1403 0652 0196      		adiw r24,1
 1404 0654 9093 0000 		sts (packetsLost)+1,r25
 1405 0658 8093 0000 		sts packetsLost,r24
 1406               	.L96:
 1408               	.LM175:
 1409 065c 0E94 0000 		call rf_rx_off
 1411               	.LM176:
 1412 0660 E1E0      		ldi r30,lo8(1)
 1413 0662 FE16      		cp r15,r30
 1414 0664 01F0      		breq .+2
 1415 0666 00C0      		rjmp .L75
 1417               	.LM177:
 1418 0668 8E2D      		mov r24,r14
 1419 066a 0E94 0000 		call nrk_gpio_clr
 1421               	.LM178:
 1422 066e 8091 0000 		lds r24,rxCount
 1423 0672 9091 0000 		lds r25,(rxCount)+1
 1424 0676 0196      		adiw r24,1
 1425 0678 9093 0000 		sts (rxCount)+1,r25
 1426 067c 8093 0000 		sts rxCount,r24
 1428               	.LM179:
 1429 0680 1092 0000 		sts (slot_expired)+1,__zero_reg__
 1430 0684 1092 0000 		sts slot_expired,__zero_reg__
 1432               	.LM180:
 1433 0688 E091 0000 		lds r30,isa_rfRxInfo+5
 1434 068c F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 1435 0690 8081      		ld r24,Z
 1436 0692 8093 0000 		sts DHR,r24
 1438               	.LM181:
 1439 0696 87FF      		sbrs r24,7
 1440 0698 00C0      		rjmp .L99
 1442               	.LM182:
 1443 069a 8181      		ldd r24,Z+1
 1444 069c 9927      		clr r25
 1445 069e 982F      		mov r25,r24
 1446 06a0 8827      		clr r24
 1447 06a2 2281      		ldd r18,Z+2
 1448 06a4 3327      		clr r19
 1449 06a6 822B      		or r24,r18
 1450 06a8 932B      		or r25,r19
 1451 06aa 9093 0000 		sts (offsetX)+1,r25
 1452 06ae 8093 0000 		sts offsetX,r24
 1454               	.LM183:
 1455 06b2 80E0      		ldi r24,lo8(0)
 1456 06b4 90E0      		ldi r25,hi8(0)
 1457 06b6 0E94 0000 		call nrk_led_toggle
 1459               	.LM184:
 1460 06ba 8091 0000 		lds r24,offsetX
 1461 06be 9091 0000 		lds r25,(offsetX)+1
 1462 06c2 2091 0000 		lds r18,offsetY
 1463 06c6 3091 0000 		lds r19,(offsetY)+1
 1464 06ca 821B      		sub r24,r18
 1465 06cc 930B      		sbc r25,r19
 1466 06ce 8857      		subi r24,lo8(-(-1400))
 1467 06d0 9540      		sbci r25,hi8(-(-1400))
 1468 06d2 9F83      		std Y+7,r25
 1469 06d4 8E83      		std Y+6,r24
 1471               	.LM185:
 1472 06d6 82E3      		ldi r24,lo8(50)
 1473 06d8 8983      		std Y+1,r24
 1475               	.LM186:
 1476 06da 8E81      		ldd r24,Y+6
 1477 06dc 9F81      		ldd r25,Y+7
 1478 06de 97FD      		sbrc r25,7
 1479 06e0 00C0      		rjmp .L101
 1481               	.LM187:
 1482 06e2 0E94 0000 		call _nrk_os_timer_get
 1483 06e6 8B83      		std Y+3,r24
 1485               	.LM188:
 1486 06e8 8E81      		ldd r24,Y+6
 1487 06ea 9F81      		ldd r25,Y+7
 1488 06ec 2DE9      		ldi r18,lo8(7325)
 1489 06ee 3CE1      		ldi r19,hi8(7325)
 1490 06f0 6DE9      		ldi r22,lo8(7325)
 1491 06f2 7CE1      		ldi r23,hi8(7325)
 1492 06f4 0E94 0000 		call __divmodhi4
 1493 06f8 6E5F      		subi r22,lo8(-(2))
 1494 06fa 6A83      		std Y+2,r22
 1496               	.LM189:
 1497 06fc 8E81      		ldd r24,Y+6
 1498 06fe 9F81      		ldd r25,Y+7
 1499 0700 6DE9      		ldi r22,lo8(7325)
 1500 0702 7CE1      		ldi r23,hi8(7325)
 1501 0704 0E94 0000 		call __divmodhi4
 1502 0708 281B      		sub r18,r24
 1503 070a 390B      		sbc r19,r25
 1504 070c 3D83      		std Y+5,r19
 1505 070e 2C83      		std Y+4,r18
 1507               	.LM190:
 1508 0710 0E94 0000 		call _nrk_os_timer_stop
 1510               	.LM191:
 1511 0714 8E2D      		mov r24,r14
 1512 0716 0E94 0000 		call nrk_gpio_set
 1514               	.LM192:
 1515 071a 0E94 0000 		call _nrk_high_speed_timer_reset
 1517               	.LM193:
 1518 071e 6C81      		ldd r22,Y+4
 1519 0720 7D81      		ldd r23,Y+5
 1520 0722 80E0      		ldi r24,lo8(0)
 1521 0724 90E0      		ldi r25,hi8(0)
 1522 0726 0E94 0000 		call nrk_high_speed_timer_wait
 1524               	.LM194:
 1525 072a 9B81      		ldd r25,Y+3
 1526 072c 8A81      		ldd r24,Y+2
 1527 072e 890F      		add r24,r25
 1528 0730 0E94 0000 		call _nrk_os_timer_set
 1530               	.LM195:
 1531 0734 8E2D      		mov r24,r14
 1532 0736 0E94 0000 		call nrk_gpio_clr
 1534               	.LM196:
 1535 073a 0E94 0000 		call _nrk_os_timer_start
 1537               	.LM197:
 1538 073e 82E3      		ldi r24,lo8(50)
 1539 0740 90E0      		ldi r25,hi8(50)
 1540 0742 0E94 0000 		call nrk_spin_wait_us
 1541 0746 00C0      		rjmp .L99
 1542               	.L101:
 1544               	.LM198:
 1545 0748 8E81      		ldd r24,Y+6
 1546 074a 9F81      		ldd r25,Y+7
 1547 074c 97FF      		sbrs r25,7
 1548 074e 00C0      		rjmp .L99
 1550               	.LM199:
 1551 0750 0E94 0000 		call _nrk_os_timer_stop
 1553               	.LM200:
 1554 0754 0E94 0000 		call _nrk_high_speed_timer_reset
 1556               	.LM201:
 1557 0758 6E81      		ldd r22,Y+6
 1558 075a 7F81      		ldd r23,Y+7
 1559 075c 7095      		com r23
 1560 075e 6195      		neg r22
 1561 0760 7F4F      		sbci r23,lo8(-1)
 1562 0762 80E0      		ldi r24,lo8(0)
 1563 0764 90E0      		ldi r25,hi8(0)
 1564 0766 0E94 0000 		call nrk_high_speed_timer_wait
 1566               	.LM202:
 1567 076a 0E94 0000 		call _nrk_os_timer_start
 1568               	.L99:
 1570               	.LM203:
 1571 076e 4C81      		ldd r20,Y+4
 1572 0770 5D81      		ldd r21,Y+5
 1573 0772 8A81      		ldd r24,Y+2
 1574 0774 9927      		clr r25
 1575 0776 2E81      		ldd r18,Y+6
 1576 0778 3F81      		ldd r19,Y+7
 1577 077a 5F93      		push r21
 1578 077c 4F93      		push r20
 1579 077e 9F93      		push r25
 1580 0780 8F93      		push r24
 1581 0782 3F93      		push r19
 1582 0784 2F93      		push r18
 1583 0786 80E0      		ldi r24,lo8(.LC1)
 1584 0788 90E0      		ldi r25,hi8(.LC1)
 1585 078a 9F93      		push r25
 1586 078c 8F93      		push r24
 1587 078e 0E94 0000 		call printf
 1589               	.LM204:
 1590 0792 6091 0000 		lds r22,__iob+2
 1591 0796 7091 0000 		lds r23,(__iob+2)+1
 1592 079a 8AE0      		ldi r24,lo8(10)
 1593 079c 90E0      		ldi r25,hi8(10)
 1594 079e 0E94 0000 		call fputc
 1596               	.LM205:
 1597 07a2 6091 0000 		lds r22,__iob+2
 1598 07a6 7091 0000 		lds r23,(__iob+2)+1
 1599 07aa 8DE0      		ldi r24,lo8(13)
 1600 07ac 90E0      		ldi r25,hi8(13)
 1601 07ae 0E94 0000 		call fputc
 1602 07b2 8DB7      		in r24,__SP_L__
 1603 07b4 9EB7      		in r25,__SP_H__
 1604 07b6 0896      		adiw r24,8
 1605 07b8 0FB6      		in __tmp_reg__,__SREG__
 1606 07ba F894      		cli
 1607 07bc 9EBF      		out __SP_H__,r25
 1608 07be 0FBE      		out __SREG__,__tmp_reg__
 1609 07c0 8DBF      		out __SP_L__,r24
 1610               	.L75:
 1612               	.LM206:
 1613 07c2 0958      		subi r16,lo8(-(119))
 1614 07c4 1F4F      		sbci r17,hi8(-(119))
 1615 07c6 D801      		movw r26,r16
 1616 07c8 ED91      		ld r30,X+
 1617 07ca FC91      		ld r31,X
 1618 07cc 0757      		subi r16,lo8(-(-119))
 1619 07ce 1040      		sbci r17,hi8(-(-119))
 1620 07d0 3097      		sbiw r30,0
 1621 07d2 01F4      		brne .L104
 1622               	.L114:
 1623 07d4 C801      		movw r24,r16
 1624 07d6 0E94 0000 		call isaFreePacket
 1625 07da 00C0      		rjmp .L106
 1626               	.L104:
 1628               	.LM207:
 1629 07dc 61E0      		ldi r22,lo8(1)
 1630               	.L113:
 1631 07de C801      		movw r24,r16
 1632 07e0 0995      		icall
 1633               	.L106:
 1634               	/* epilogue: frame size=7 */
 1635 07e2 2796      		adiw r28,7
 1636 07e4 0FB6      		in __tmp_reg__,__SREG__
 1637 07e6 F894      		cli
 1638 07e8 DEBF      		out __SP_H__,r29
 1639 07ea 0FBE      		out __SREG__,__tmp_reg__
 1640 07ec CDBF      		out __SP_L__,r28
 1641 07ee DF91      		pop r29
 1642 07f0 CF91      		pop r28
 1643 07f2 1F91      		pop r17
 1644 07f4 0F91      		pop r16
 1645 07f6 FF90      		pop r15
 1646 07f8 EF90      		pop r14
 1647 07fa DF90      		pop r13
 1648 07fc CF90      		pop r12
 1649 07fe BF90      		pop r11
 1650 0800 0895      		ret
 1651               	/* epilogue end (size=16) */
 1652               	/* function _isa_tx size 529 (496) */
 1665               	.Lscope15:
 1667               		.stabd	78,0,0
 1668               		.data
 1669               	.LC2:
 1670 002a 446F 6E74 		.string	"Dont know what to do with this packet for %d- releasing"
 1670      206B 6E6F 
 1670      7720 7768 
 1670      6174 2074 
 1670      6F20 646F 
 1671               		.text
 1675               	.global	_isa_rx
 1677               	_isa_rx:
 1678               		.stabd	46,0,0
 1680               	.LM208:
 1681               	.LFBB16:
 1682               	/* prologue: frame size=1 */
 1683 0802 AF92      		push r10
 1684 0804 BF92      		push r11
 1685 0806 CF92      		push r12
 1686 0808 DF92      		push r13
 1687 080a EF92      		push r14
 1688 080c 0F93      		push r16
 1689 080e 1F93      		push r17
 1690 0810 CF93      		push r28
 1691 0812 DF93      		push r29
 1692 0814 CDB7      		in r28,__SP_L__
 1693 0816 DEB7      		in r29,__SP_H__
 1694 0818 2197      		sbiw r28,1
 1695 081a 0FB6      		in __tmp_reg__,__SREG__
 1696 081c F894      		cli
 1697 081e DEBF      		out __SP_H__,r29
 1698 0820 0FBE      		out __SREG__,__tmp_reg__
 1699 0822 CDBF      		out __SP_L__,r28
 1700               	/* prologue end (size=17) */
 1702               	.LM209:
 1703 0824 6091 0000 		lds r22,isa_param+2
 1704 0828 80E0      		ldi r24,lo8(isa_rfRxInfo)
 1705 082a 90E0      		ldi r25,hi8(isa_rfRxInfo)
 1706 082c 0E94 0000 		call rf_set_rx
 1708               	.LM210:
 1709 0830 0E94 0000 		call rf_polling_rx_on
 1711               	.LM211:
 1712 0834 0091 0000 		lds r16,NRK_DEBUG_2
 1713 0838 802F      		mov r24,r16
 1714 083a 0E94 0000 		call nrk_gpio_set
 1716               	.LM212:
 1717 083e 0E94 0000 		call _nrk_os_timer_get
 1718 0842 8983      		std Y+1,r24
 1720               	.LM213:
 1721 0844 8981      		ldd r24,Y+1
 1722 0846 8C5F      		subi r24,lo8(-(4))
 1723 0848 8983      		std Y+1,r24
 1724 084a 00C0      		rjmp .L119
 1725               	.L120:
 1727               	.LM214:
 1728 084c 0E94 0000 		call _nrk_os_timer_get
 1729 0850 9981      		ldd r25,Y+1
 1730 0852 9817      		cp r25,r24
 1731 0854 00F4      		brsh .L119
 1733               	.LM215:
 1734 0856 802F      		mov r24,r16
 1735 0858 0E94 0000 		call nrk_gpio_clr
 1737               	.LM216:
 1738 085c 0E94 0000 		call rf_rx_off
 1739 0860 00C0      		rjmp .L148
 1740               	.L119:
 1742               	.LM217:
 1743 0862 0E94 0000 		call rf_rx_check_sfd
 1744 0866 8823      		tst r24
 1745 0868 01F0      		breq .L120
 1747               	.LM218:
 1748 086a 0E94 0000 		call _nrk_high_speed_timer_get
 1749 086e 9093 0000 		sts (rx_start_time)+1,r25
 1750 0872 8093 0000 		sts rx_start_time,r24
 1752               	.LM219:
 1753 0876 1091 0000 		lds r17,NRK_DEBUG_1
 1754 087a 812F      		mov r24,r17
 1755 087c 0E94 0000 		call nrk_gpio_set
 1757               	.LM220:
 1758 0880 812F      		mov r24,r17
 1759 0882 0E94 0000 		call nrk_gpio_clr
 1761               	.LM221:
 1762 0886 0E94 0000 		call _nrk_os_timer_get
 1763 088a 8983      		std Y+1,r24
 1765               	.LM222:
 1766 088c 8981      		ldd r24,Y+1
 1767 088e 8B5F      		subi r24,lo8(-(5))
 1768 0890 8983      		std Y+1,r24
 1769 0892 00C0      		rjmp .L124
 1770               	.L125:
 1772               	.LM223:
 1773 0894 0E94 0000 		call _nrk_os_timer_get
 1774 0898 9981      		ldd r25,Y+1
 1775 089a 9817      		cp r25,r24
 1776 089c 00F4      		brsh .L124
 1778               	.LM224:
 1779 089e 80E0      		ldi r24,lo8(.LC0)
 1780 08a0 90E0      		ldi r25,hi8(.LC0)
 1781 08a2 9F93      		push r25
 1782 08a4 8F93      		push r24
 1783 08a6 0E94 0000 		call printf
 1785               	.LM225:
 1786 08aa 8091 0000 		lds r24,packetsLost
 1787 08ae 9091 0000 		lds r25,(packetsLost)+1
 1788 08b2 0196      		adiw r24,1
 1789 08b4 9093 0000 		sts (packetsLost)+1,r25
 1790 08b8 8093 0000 		sts packetsLost,r24
 1792               	.LM226:
 1793 08bc 0F90      		pop __tmp_reg__
 1794 08be 0F90      		pop __tmp_reg__
 1795 08c0 00C0      		rjmp .L142
 1796               	.L124:
 1798               	.LM227:
 1799 08c2 60E8      		ldi r22,lo8(-128)
 1800 08c4 80E0      		ldi r24,lo8(0)
 1801 08c6 0E94 0000 		call rf_polling_rx_packet
 1802 08ca 182F      		mov r17,r24
 1803 08cc 8823      		tst r24
 1804 08ce 01F0      		breq .L125
 1806               	.LM228:
 1807 08d0 802F      		mov r24,r16
 1808 08d2 0E94 0000 		call nrk_gpio_clr
 1810               	.LM229:
 1811 08d6 0E94 0000 		call rf_rx_off
 1813               	.LM230:
 1814 08da 1130      		cpi r17,lo8(1)
 1815 08dc 01F4      		brne .+2
 1816 08de 00C0      		rjmp .L128
 1818               	.LM231:
 1819 08e0 6091 0000 		lds r22,__iob+2
 1820 08e4 7091 0000 		lds r23,(__iob+2)+1
 1821 08e8 82E6      		ldi r24,lo8(98)
 1822 08ea 90E0      		ldi r25,hi8(98)
 1823 08ec 0E94 0000 		call fputc
 1824               	.L148:
 1826               	.LM232:
 1827 08f0 8091 0000 		lds r24,packetsLost
 1828 08f4 9091 0000 		lds r25,(packetsLost)+1
 1829 08f8 0196      		adiw r24,1
 1830 08fa 9093 0000 		sts (packetsLost)+1,r25
 1831 08fe 8093 0000 		sts packetsLost,r24
 1832 0902 00C0      		rjmp .L142
 1833               	.L130:
 1835               	.LM233:
 1836 0904 8091 0000 		lds r24,txCount
 1837 0908 9091 0000 		lds r25,(txCount)+1
 1838 090c 0196      		adiw r24,1
 1839 090e 9093 0000 		sts (txCount)+1,r25
 1840 0912 8093 0000 		sts txCount,r24
 1841               	.LBB13:
 1842               	.LBB14:
 1844               	.LM234:
 1845 0916 12FF      		sbrs r17,2
 1846 0918 00C0      		rjmp .L131
 1847 091a 83E8      		ldi r24,lo8(-125)
 1848 091c 00C0      		rjmp .L133
 1849               	.L131:
 1850 091e 83E0      		ldi r24,lo8(3)
 1851               	.L133:
 1852               	.LBE14:
 1853               	.LBE13:
 1855               	.LM235:
 1856 0920 8093 0000 		sts DHR,r24
 1858               	.LM236:
 1859 0924 8093 0000 		sts isa_ack_buf,r24
 1861               	.LM237:
 1862 0928 80E0      		ldi r24,lo8(isa_ack_buf)
 1863 092a 90E0      		ldi r25,hi8(isa_ack_buf)
 1864 092c 9093 0000 		sts (isa_ack_tx+3)+1,r25
 1865 0930 8093 0000 		sts isa_ack_tx+3,r24
 1867               	.LM238:
 1868 0934 12FF      		sbrs r17,2
 1869 0936 00C0      		rjmp .L134
 1870               	.LBB15:
 1872               	.LM239:
 1873 0938 8091 0000 		lds r24,rx_start_time
 1874 093c 9091 0000 		lds r25,(rx_start_time)+1
 1875 0940 2091 0000 		lds r18,slot_start_time
 1876 0944 3091 0000 		lds r19,(slot_start_time)+1
 1877 0948 821B      		sub r24,r18
 1878 094a 930B      		sbc r25,r19
 1879 094c 9093 0000 		sts (offsetX)+1,r25
 1880 0950 8093 0000 		sts offsetX,r24
 1882               	.LM240:
 1883 0954 292F      		mov r18,r25
 1884 0956 3327      		clr r19
 1885 0958 2093 0000 		sts isa_ack_buf+1,r18
 1887               	.LM241:
 1888 095c 8093 0000 		sts isa_ack_buf+2,r24
 1890               	.LM242:
 1891 0960 84E0      		ldi r24,lo8(4)
 1892 0962 00C0      		rjmp .L147
 1893               	.L134:
 1894               	.LBE15:
 1896               	.LM243:
 1897 0964 82E0      		ldi r24,lo8(2)
 1898               	.L147:
 1899 0966 8093 0000 		sts isa_ack_tx+2,r24
 1901               	.LM244:
 1902 096a 802F      		mov r24,r16
 1903 096c 0E94 0000 		call nrk_gpio_set
 1905               	.LM245:
 1906 0970 4091 0000 		lds r20,isa_param+4
 1907 0974 5091 0000 		lds r21,(isa_param+4)+1
 1908 0978 6091 0000 		lds r22,slot_start_time
 1909 097c 7091 0000 		lds r23,(slot_start_time)+1
 1910 0980 20E0      		ldi r18,lo8(tx_start_time)
 1911 0982 30E0      		ldi r19,hi8(tx_start_time)
 1912 0984 80E0      		ldi r24,lo8(isa_ack_tx)
 1913 0986 90E0      		ldi r25,hi8(isa_ack_tx)
 1914 0988 0E94 0000 		call rf_tx_tdma_packet
 1916               	.LM246:
 1917 098c 802F      		mov r24,r16
 1918 098e 0E94 0000 		call nrk_gpio_clr
 1919               	.L137:
 1921               	.LM247:
 1922 0992 8091 0000 		lds r24,dmo
 1923 0996 9091 0000 		lds r25,(dmo)+1
 1924 099a A816      		cp r10,r24
 1925 099c B906      		cpc r11,r25
 1926 099e 01F4      		brne .L138
 1928               	.LM248:
 1929 09a0 E091 0000 		lds r30,isa_rfRxInfo+5
 1930 09a4 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 1931 09a8 8281      		ldd r24,Z+2
 1932 09aa 6F01      		movw r12,r30
 1933 09ac EE24      		clr r14
 1934 09ae 00E0      		ldi r16,lo8(0)
 1935 09b0 20E0      		ldi r18,lo8(0)
 1936 09b2 40E0      		ldi r20,lo8(0)
 1937 09b4 B501      		movw r22,r10
 1938 09b6 9927      		clr r25
 1939 09b8 0E94 0000 		call dd_data_indication
 1940 09bc 00C0      		rjmp .L142
 1941               	.L138:
 1943               	.LM249:
 1944 09be C501      		movw r24,r10
 1945 09c0 0E94 0000 		call isTransmitLinkPresent
 1946 09c4 8823      		tst r24
 1947 09c6 01F0      		breq .L140
 1949               	.LM250:
 1950 09c8 2091 0000 		lds r18,isa_rfRxInfo+5
 1951 09cc 3091 0000 		lds r19,(isa_rfRxInfo+5)+1
 1952 09d0 00E0      		ldi r16,lo8(0)
 1953 09d2 10E0      		ldi r17,hi8(0)
 1954 09d4 4AE0      		ldi r20,lo8(10)
 1955 09d6 50E0      		ldi r21,hi8(10)
 1956 09d8 60E0      		ldi r22,lo8(0)
 1957 09da 70E0      		ldi r23,hi8(0)
 1958 09dc C501      		movw r24,r10
 1959 09de 0E94 0000 		call enQueue
 1960               	.LBB16:
 1961               	.LBB17:
 1963               	.LM251:
 1964 09e2 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 1965 09e6 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 1966 09ea 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 1967 09ee 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 1968 09f2 00C0      		rjmp .L142
 1969               	.L140:
 1970               	.LBE17:
 1971               	.LBE16:
 1973               	.LM252:
 1974 09f4 BF92      		push r11
 1975 09f6 AF92      		push r10
 1976 09f8 80E0      		ldi r24,lo8(.LC2)
 1977 09fa 90E0      		ldi r25,hi8(.LC2)
 1978 09fc 9F93      		push r25
 1979 09fe 8F93      		push r24
 1980 0a00 0E94 0000 		call printf
 1981               	.LBB18:
 1982               	.LBB19:
 1984               	.LM253:
 1985 0a04 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 1986 0a08 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 1987 0a0c 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 1988 0a10 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 1989 0a14 0F90      		pop __tmp_reg__
 1990 0a16 0F90      		pop __tmp_reg__
 1991 0a18 0F90      		pop __tmp_reg__
 1992 0a1a 0F90      		pop __tmp_reg__
 1993 0a1c 00C0      		rjmp .L142
 1994               	.L128:
 1995               	.LBE19:
 1996               	.LBE18:
 1998               	.LM254:
 1999 0a1e 8091 0000 		lds r24,rxCount
 2000 0a22 9091 0000 		lds r25,(rxCount)+1
 2001 0a26 0196      		adiw r24,1
 2002 0a28 9093 0000 		sts (rxCount)+1,r25
 2003 0a2c 8093 0000 		sts rxCount,r24
 2005               	.LM255:
 2006 0a30 81E0      		ldi r24,lo8(1)
 2007 0a32 90E0      		ldi r25,hi8(1)
 2008 0a34 0E94 0000 		call nrk_led_toggle
 2010               	.LM256:
 2011 0a38 E091 0000 		lds r30,isa_rfRxInfo+5
 2012 0a3c F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 2013 0a40 8381      		ldd r24,Z+3
 2014 0a42 A82E      		mov r10,r24
 2015 0a44 BB24      		clr r11
 2017               	.LM257:
 2018 0a46 1081      		ld r17,Z
 2020               	.LM258:
 2021 0a48 8091 0000 		lds r24,isa_rx_pkt_signal
 2022 0a4c 0E94 0000 		call nrk_event_signal
 2024               	.LM259:
 2025 0a50 1123      		tst r17
 2026 0a52 04F0      		brlt .+2
 2027 0a54 00C0      		rjmp .L137
 2028 0a56 00C0      		rjmp .L130
 2029               	.L142:
 2030               	/* epilogue: frame size=1 */
 2031 0a58 2196      		adiw r28,1
 2032 0a5a 0FB6      		in __tmp_reg__,__SREG__
 2033 0a5c F894      		cli
 2034 0a5e DEBF      		out __SP_H__,r29
 2035 0a60 0FBE      		out __SREG__,__tmp_reg__
 2036 0a62 CDBF      		out __SP_L__,r28
 2037 0a64 DF91      		pop r29
 2038 0a66 CF91      		pop r28
 2039 0a68 1F91      		pop r17
 2040 0a6a 0F91      		pop r16
 2041 0a6c EF90      		pop r14
 2042 0a6e DF90      		pop r13
 2043 0a70 CF90      		pop r12
 2044 0a72 BF90      		pop r11
 2045 0a74 AF90      		pop r10
 2046 0a76 0895      		ret
 2047               	/* epilogue end (size=16) */
 2048               	/* function _isa_rx size 316 (283) */
 2059               	.Lscope16:
 2061               		.stabd	78,0,0
 2063               	.global	isa_wait_until_rx_or_tx
 2065               	isa_wait_until_rx_or_tx:
 2066               		.stabd	46,0,0
 2068               	.LM260:
 2069               	.LFBB17:
 2070               	/* prologue: frame size=0 */
 2071               	/* prologue end (size=0) */
 2073               	.LM261:
 2074 0a78 8091 0000 		lds r24,isa_rx_pkt_signal
 2075 0a7c 0E94 0000 		call nrk_signal_register
 2077               	.LM262:
 2078 0a80 8091 0000 		lds r24,isa_tx_done_signal
 2079 0a84 0E94 0000 		call nrk_signal_register
 2081               	.LM263:
 2082 0a88 21E0      		ldi r18,lo8(1)
 2083 0a8a 30E0      		ldi r19,hi8(1)
 2084 0a8c 40E0      		ldi r20,hlo8(1)
 2085 0a8e 50E0      		ldi r21,hhi8(1)
 2086 0a90 CA01      		movw r24,r20
 2087 0a92 B901      		movw r22,r18
 2088 0a94 0090 0000 		lds r0,isa_tx_done_signal
 2089 0a98 00C0      		rjmp 2f
 2090 0a9a 660F      	1:	lsl r22
 2091 0a9c 771F      		rol r23
 2092 0a9e 881F      		rol r24
 2093 0aa0 991F      		rol r25
 2094 0aa2 0A94      	2:	dec r0
 2095 0aa4 02F4      		brpl 1b
 2096 0aa6 0090 0000 		lds r0,isa_rx_pkt_signal
 2097 0aaa 00C0      		rjmp 2f
 2098 0aac 220F      	1:	lsl r18
 2099 0aae 331F      		rol r19
 2100 0ab0 441F      		rol r20
 2101 0ab2 551F      		rol r21
 2102 0ab4 0A94      	2:	dec r0
 2103 0ab6 02F4      		brpl 1b
 2104 0ab8 622B      		or r22,r18
 2105 0aba 732B      		or r23,r19
 2106 0abc 842B      		or r24,r20
 2107 0abe 952B      		or r25,r21
 2108 0ac0 0E94 0000 		call nrk_event_wait
 2110               	.LM264:
 2111 0ac4 81E0      		ldi r24,lo8(1)
 2112 0ac6 90E0      		ldi r25,hi8(1)
 2113               	/* epilogue: frame size=0 */
 2114 0ac8 0895      		ret
 2115               	/* epilogue end (size=1) */
 2116               	/* function isa_wait_until_rx_or_tx size 41 (40) */
 2118               	.Lscope17:
 2120               		.stabd	78,0,0
 2123               	.global	isa_set_channel
 2125               	isa_set_channel:
 2126               		.stabd	46,0,0
 2128               	.LM265:
 2129               	.LFBB18:
 2130               	/* prologue: frame size=0 */
 2131               	/* prologue end (size=0) */
 2133               	.LM266:
 2134 0aca 8093 0000 		sts isa_param+2,r24
 2136               	.LM267:
 2137 0ace 0E94 0000 		call rf_set_channel
 2138               	/* epilogue: frame size=0 */
 2139 0ad2 0895      		ret
 2140               	/* epilogue end (size=1) */
 2141               	/* function isa_set_channel size 5 (4) */
 2143               	.Lscope18:
 2145               		.stabd	78,0,0
 2146               		.data
 2147               	.LC3:
 2148 0062 504C 3A25 		.string	"PL:%d\r\n"
 2148      640D 0A00 
 2149               		.text
 2151               	.global	isa_nw_task
 2153               	isa_nw_task:
 2154               		.stabd	46,0,0
 2156               	.LM268:
 2157               	.LFBB19:
 2158               	/* prologue: frame size=0 */
 2159 0ad4 CF92      		push r12
 2160 0ad6 DF92      		push r13
 2161 0ad8 EF92      		push r14
 2162 0ada FF92      		push r15
 2163 0adc 0F93      		push r16
 2164 0ade 1F93      		push r17
 2165 0ae0 CF93      		push r28
 2166 0ae2 DF93      		push r29
 2167               	/* prologue end (size=8) */
 2169               	.LM269:
 2170 0ae4 1092 0000 		sts _isa_ready,__zero_reg__
 2171               	.L154:
 2173               	.LM270:
 2174 0ae8 0E94 0000 		call nrk_wait_until_next_period
 2176               	.LM271:
 2177 0aec 8091 0000 		lds r24,_isa_ready
 2178 0af0 8823      		tst r24
 2179 0af2 01F0      		breq .L154
 2181               	.LM272:
 2182 0af4 81E0      		ldi r24,lo8(1)
 2183 0af6 8093 0000 		sts _isa_ready,r24
 2185               	.LM273:
 2186 0afa E090 0000 		lds r14,NRK_DEBUG_1
 2187 0afe 00E0      		ldi r16,lo8(0)
 2188 0b00 10E0      		ldi r17,hi8(0)
 2190               	.LM274:
 2191 0b02 60E0      		ldi r22,lo8(.LC3)
 2192 0b04 C62E      		mov r12,r22
 2193 0b06 60E0      		ldi r22,hi8(.LC3)
 2194 0b08 D62E      		mov r13,r22
 2195               	.L184:
 2197               	.LM275:
 2198 0b0a 0E94 0000 		call _nrk_high_speed_timer_reset
 2200               	.LM276:
 2201 0b0e 0E94 0000 		call _nrk_high_speed_timer_get
 2202 0b12 9093 0000 		sts (slot_start_time)+1,r25
 2203 0b16 8093 0000 		sts slot_start_time,r24
 2205               	.LM277:
 2206 0b1a 8E2D      		mov r24,r14
 2207 0b1c 0E94 0000 		call nrk_gpio_set
 2209               	.LM278:
 2210 0b20 8E2D      		mov r24,r14
 2211 0b22 0E94 0000 		call nrk_gpio_clr
 2213               	.LM279:
 2214 0b26 8091 0000 		lds r24,global_slot
 2215 0b2a 9091 0000 		lds r25,(global_slot)+1
 2216 0b2e 9093 0000 		sts (current_global_slot)+1,r25
 2217 0b32 8093 0000 		sts current_global_slot,r24
 2219               	.LM280:
 2220 0b36 8091 0000 		lds r24,global_slot
 2221 0b3a 9091 0000 		lds r25,(global_slot)+1
 2222 0b3e 8536      		cpi r24,101
 2223 0b40 9105      		cpc r25,__zero_reg__
 2224 0b42 00F0      		brlo .L157
 2226               	.LM281:
 2227 0b44 8091 0000 		lds r24,global_slot
 2228 0b48 9091 0000 		lds r25,(global_slot)+1
 2229 0b4c 8456      		subi r24,lo8(-(-100))
 2230 0b4e 9040      		sbci r25,hi8(-(-100))
 2231 0b50 9093 0000 		sts (global_slot)+1,r25
 2232 0b54 8093 0000 		sts global_slot,r24
 2234               	.LM282:
 2235 0b58 8091 0000 		lds r24,global_cycle
 2236 0b5c 9091 0000 		lds r25,(global_cycle)+1
 2237 0b60 0196      		adiw r24,1
 2238 0b62 9093 0000 		sts (global_cycle)+1,r25
 2239 0b66 8093 0000 		sts global_cycle,r24
 2240               	.L157:
 2242               	.LM283:
 2243 0b6a 2091 0000 		lds r18,global_slot
 2244 0b6e 3091 0000 		lds r19,(global_slot)+1
 2246               	.LM284:
 2247 0b72 8091 0000 		lds r24,_isa_sync_ok
 2248 0b76 8130      		cpi r24,lo8(1)
 2249 0b78 01F4      		brne .L159
 2251               	.LM285:
 2252 0b7a C901      		movw r24,r18
 2253 0b7c 69E1      		ldi r22,lo8(25)
 2254 0b7e 70E0      		ldi r23,hi8(25)
 2255 0b80 0E94 0000 		call __udivmodhi4
 2256 0b84 EC01      		movw r28,r24
 2258               	.LM286:
 2259 0b86 E091 0000 		lds r30,channelIndex
 2260 0b8a E00F      		add r30,r16
 2261 0b8c E093 0000 		sts channelIndex,r30
 2263               	.LM287:
 2264 0b90 FF27      		clr r31
 2265 0b92 EF70      		andi r30,lo8(15)
 2266 0b94 F070      		andi r31,hi8(15)
 2267 0b96 E050      		subi r30,lo8(-(slottedPattern))
 2268 0b98 F040      		sbci r31,hi8(-(slottedPattern))
 2269 0b9a 8081      		ld r24,Z
 2270 0b9c 8093 0000 		sts currentChannel,r24
 2272               	.LM288:
 2273 0ba0 0E94 0000 		call isa_set_channel
 2275               	.LM289:
 2276 0ba4 8C2F      		mov r24,r28
 2277 0ba6 0E94 0000 		call findLink
 2278 0baa FC01      		movw r30,r24
 2280               	.LM290:
 2281 0bac 892B      		or r24,r25
 2282 0bae 01F0      		breq .L161
 2284               	.LM291:
 2285 0bb0 8481      		ldd r24,Z+4
 2286 0bb2 8830      		cpi r24,lo8(8)
 2287 0bb4 01F4      		brne .L163
 2289               	.LM292:
 2290 0bb6 6C2F      		mov r22,r28
 2291 0bb8 CF01      		movw r24,r30
 2292 0bba 0E94 0000 		call _isa_rx
 2293 0bbe 00C0      		rjmp .L161
 2294               	.L163:
 2296               	.LM293:
 2297 0bc0 8130      		cpi r24,lo8(1)
 2298 0bc2 01F4      		brne .L161
 2300               	.LM294:
 2301 0bc4 6C2F      		mov r22,r28
 2302 0bc6 7727      		clr r23
 2303 0bc8 CF01      		movw r24,r30
 2304 0bca 0E94 0000 		call _isa_tx
 2305 0bce 00C0      		rjmp .L161
 2306               	.L159:
 2308               	.LM295:
 2309 0bd0 8091 0000 		lds r24,isa_node_mode
 2310 0bd4 8230      		cpi r24,lo8(2)
 2311 0bd6 01F0      		breq .L166
 2313               	.LM296:
 2314 0bd8 1092 0000 		sts (DHDRcount)+1,__zero_reg__
 2315 0bdc 1092 0000 		sts DHDRcount,__zero_reg__
 2317               	.LM297:
 2318 0be0 0E94 0000 		call _isa_init_sync
 2319 0be4 00C0      		rjmp .L182
 2320               	.L166:
 2322               	.LM298:
 2323 0be6 81E0      		ldi r24,lo8(1)
 2324               	.L182:
 2325 0be8 8093 0000 		sts _isa_sync_ok,r24
 2326               	.L161:
 2328               	.LM299:
 2329 0bec 2091 0000 		lds r18,slot_expired
 2330 0bf0 3091 0000 		lds r19,(slot_expired)+1
 2331 0bf4 8091 0000 		lds r24,EXPIRATION
 2332 0bf8 9091 0000 		lds r25,(EXPIRATION)+1
 2333 0bfc 2817      		cp r18,r24
 2334 0bfe 3907      		cpc r19,r25
 2335 0c00 00F0      		brlo .L168
 2336 0c02 8091 0000 		lds r24,isa_node_mode
 2337 0c06 8230      		cpi r24,lo8(2)
 2338 0c08 01F0      		breq .L168
 2340               	.LM300:
 2341 0c0a 1092 0000 		sts _isa_sync_ok,__zero_reg__
 2343               	.LM301:
 2344 0c0e 1092 0000 		sts (slot_expired)+1,__zero_reg__
 2345 0c12 1092 0000 		sts slot_expired,__zero_reg__
 2347               	.LM302:
 2348 0c16 1092 0000 		sts (global_slot)+1,__zero_reg__
 2349 0c1a 1092 0000 		sts global_slot,__zero_reg__
 2351               	.LM303:
 2352 0c1e 8091 0000 		lds r24,resync_times
 2353 0c22 9091 0000 		lds r25,(resync_times)+1
 2354 0c26 0196      		adiw r24,1
 2355 0c28 9093 0000 		sts (resync_times)+1,r25
 2356 0c2c 8093 0000 		sts resync_times,r24
 2358               	.LM304:
 2359 0c30 8091 0000 		lds r24,isa_id
 2360 0c34 8823      		tst r24
 2361 0c36 01F0      		breq .L171
 2363               	.LM305:
 2364 0c38 E091 0000 		lds r30,isa_clk_src_id
 2365 0c3c E093 0000 		sts channelIndex,r30
 2367               	.LM306:
 2368 0c40 FF27      		clr r31
 2369 0c42 E050      		subi r30,lo8(-(slottedPattern))
 2370 0c44 F040      		sbci r31,hi8(-(slottedPattern))
 2371 0c46 8081      		ld r24,Z
 2372 0c48 00C0      		rjmp .L183
 2373               	.L171:
 2375               	.LM307:
 2376 0c4a 1092 0000 		sts channelIndex,__zero_reg__
 2378               	.LM308:
 2379 0c4e 8091 0000 		lds r24,slottedPattern
 2380               	.L183:
 2381 0c52 8093 0000 		sts currentChannel,r24
 2383               	.LM309:
 2384 0c56 8091 0000 		lds r24,currentChannel
 2385 0c5a 0E94 0000 		call isa_set_channel
 2386 0c5e 00E0      		ldi r16,lo8(0)
 2387 0c60 10E0      		ldi r17,hi8(0)
 2388 0c62 00C0      		rjmp .L184
 2389               	.L168:
 2391               	.LM310:
 2392 0c64 8091 0000 		lds r24,global_slot
 2393 0c68 9091 0000 		lds r25,(global_slot)+1
 2394 0c6c 0E94 0000 		call isa_get_slots_until_next_wakeup
 2395 0c70 8C01      		movw r16,r24
 2397               	.LM311:
 2398 0c72 8091 0000 		lds r24,global_slot
 2399 0c76 9091 0000 		lds r25,(global_slot)+1
 2400 0c7a 800F      		add r24,r16
 2401 0c7c 911F      		adc r25,r17
 2402 0c7e 9093 0000 		sts (global_slot)+1,r25
 2403 0c82 8093 0000 		sts global_slot,r24
 2405               	.LM312:
 2406 0c86 80E0      		ldi r24,lo8(0)
 2407 0c88 90E0      		ldi r25,hi8(0)
 2408 0c8a 0E94 0000 		call nrk_led_clr
 2410               	.LM313:
 2411 0c8e 1092 0000 		sts (offsetY)+1,__zero_reg__
 2412 0c92 1092 0000 		sts offsetY,__zero_reg__
 2414               	.LM314:
 2415 0c96 8091 0000 		lds r24,txCount
 2416 0c9a 9091 0000 		lds r25,(txCount)+1
 2417 0c9e 68EE      		ldi r22,lo8(1000)
 2418 0ca0 73E0      		ldi r23,hi8(1000)
 2419 0ca2 0E94 0000 		call __udivmodhi4
 2420 0ca6 892B      		or r24,r25
 2421 0ca8 01F4      		brne .L174
 2423               	.LM315:
 2424 0caa 8091 0000 		lds r24,packetsLost
 2425 0cae 9091 0000 		lds r25,(packetsLost)+1
 2426 0cb2 9F93      		push r25
 2427 0cb4 8F93      		push r24
 2428 0cb6 DF92      		push r13
 2429 0cb8 CF92      		push r12
 2430 0cba 0E94 0000 		call printf
 2431 0cbe 0F90      		pop __tmp_reg__
 2432 0cc0 0F90      		pop __tmp_reg__
 2433 0cc2 0F90      		pop __tmp_reg__
 2434 0cc4 0F90      		pop __tmp_reg__
 2435               	.L174:
 2437               	.LM316:
 2438 0cc6 C801      		movw r24,r16
 2439 0cc8 0E94 0000 		call nrk_wait_until_next_n_periods
 2441               	.LM317:
 2442 0ccc 80E0      		ldi r24,lo8(0)
 2443 0cce 90E0      		ldi r25,hi8(0)
 2444 0cd0 0E94 0000 		call nrk_led_set
 2445 0cd4 00C0      		rjmp .L184
 2446               	/* epilogue: frame size=0 */
 2447               	/* epilogue: noreturn */
 2448               	/* epilogue end (size=0) */
 2449               	/* function isa_nw_task size 257 (249) */
 2456               	.Lscope19:
 2458               		.stabd	78,0,0
 2463               	.global	isa_init
 2465               	isa_init:
 2466               		.stabd	46,0,0
 2468               	.LM318:
 2469               	.LFBB20:
 2470               	/* prologue: frame size=0 */
 2471 0cd6 FF92      		push r15
 2472 0cd8 0F93      		push r16
 2473 0cda 1F93      		push r17
 2474               	/* prologue end (size=3) */
 2475 0cdc F82E      		mov r15,r24
 2476 0cde 162F      		mov r17,r22
 2477 0ce0 042F      		mov r16,r20
 2479               	.LM319:
 2480 0ce2 0E94 0000 		call nrk_signal_create
 2481 0ce6 8093 0000 		sts isa_rx_pkt_signal,r24
 2483               	.LM320:
 2484 0cea 8F3F      		cpi r24,lo8(-1)
 2485 0cec 01F4      		brne .L186
 2487               	.LM321:
 2488 0cee 80E0      		ldi r24,lo8(__c.2741)
 2489 0cf0 90E0      		ldi r25,hi8(__c.2741)
 2490 0cf2 00C0      		rjmp .L196
 2491               	.L186:
 2493               	.LM322:
 2494 0cf4 0E94 0000 		call nrk_signal_create
 2495 0cf8 8093 0000 		sts isa_tx_done_signal,r24
 2497               	.LM323:
 2498 0cfc 8F3F      		cpi r24,lo8(-1)
 2499 0cfe 01F4      		brne .L189
 2501               	.LM324:
 2502 0d00 80E0      		ldi r24,lo8(__c.2743)
 2503 0d02 90E0      		ldi r25,hi8(__c.2743)
 2504               	.L196:
 2505 0d04 0E94 0000 		call nrk_kprintf
 2507               	.LM325:
 2508 0d08 E091 0000 		lds r30,nrk_cur_task_TCB
 2509 0d0c F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 2510 0d10 6085      		ldd r22,Z+8
 2511 0d12 8EE0      		ldi r24,lo8(14)
 2512 0d14 0E94 0000 		call nrk_kernel_error_add
 2513 0d18 8FEF      		ldi r24,lo8(255)
 2514 0d1a 90E0      		ldi r25,hi8(255)
 2515 0d1c 00C0      		rjmp .L188
 2516               	.L189:
 2518               	.LM326:
 2519 0d1e 1092 0000 		sts (isa_rfRxInfo+5)+1,__zero_reg__
 2520 0d22 1092 0000 		sts isa_rfRxInfo+5,__zero_reg__
 2522               	.LM327:
 2523 0d26 1092 0000 		sts isa_rfRxInfo+4,__zero_reg__
 2525               	.LM328:
 2526 0d2a 0E94 0000 		call _nrk_high_speed_timer_start
 2528               	.LM329:
 2529 0d2e 1092 0000 		sts (global_cycle)+1,__zero_reg__
 2530 0d32 1092 0000 		sts global_cycle,__zero_reg__
 2532               	.LM330:
 2533 0d36 84E6      		ldi r24,lo8(100)
 2534 0d38 90E0      		ldi r25,hi8(100)
 2535 0d3a 9093 0000 		sts (global_slot)+1,r25
 2536 0d3e 8093 0000 		sts global_slot,r24
 2538               	.LM331:
 2539 0d42 1092 0000 		sts _isa_sync_ok,__zero_reg__
 2541               	.LM332:
 2542 0d46 1092 0000 		sts _isa_join_ok,__zero_reg__
 2544               	.LM333:
 2545 0d4a 1092 0000 		sts (slot_expired)+1,__zero_reg__
 2546 0d4e 1092 0000 		sts slot_expired,__zero_reg__
 2548               	.LM334:
 2549 0d52 F092 0000 		sts isa_node_mode,r15
 2551               	.LM335:
 2552 0d56 1093 0000 		sts isa_id,r17
 2554               	.LM336:
 2555 0d5a 812F      		mov r24,r17
 2556 0d5c 9927      		clr r25
 2557 0d5e 9093 0000 		sts (dmo)+1,r25
 2558 0d62 8093 0000 		sts dmo,r24
 2560               	.LM337:
 2561 0d66 0093 0000 		sts isa_clk_src_id,r16
 2563               	.LM338:
 2564 0d6a 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 2565 0d6e 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 2566 0d72 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 2567 0d76 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 2569               	.LM339:
 2570 0d7a 84E6      		ldi r24,lo8(100)
 2571 0d7c 8093 0000 		sts isa_param+8,r24
 2573               	.LM340:
 2574 0d80 80E4      		ldi r24,lo8(8000)
 2575 0d82 9FE1      		ldi r25,hi8(8000)
 2576 0d84 9093 0000 		sts (isa_param+6)+1,r25
 2577 0d88 8093 0000 		sts isa_param+6,r24
 2579               	.LM341:
 2580 0d8c 80EA      		ldi r24,lo8(4000)
 2581 0d8e 9FE0      		ldi r25,hi8(4000)
 2582 0d90 9093 0000 		sts (isa_param+4)+1,r25
 2583 0d94 8093 0000 		sts isa_param+4,r24
 2585               	.LM342:
 2586 0d98 8FE0      		ldi r24,lo8(15)
 2587 0d9a 8093 0000 		sts isa_param+2,r24
 2589               	.LM343:
 2590 0d9e 81E8      		ldi r24,lo8(6529)
 2591 0da0 99E1      		ldi r25,hi8(6529)
 2592 0da2 9093 0000 		sts (isa_param)+1,r25
 2593 0da6 8093 0000 		sts isa_param,r24
 2595               	.LM344:
 2596 0daa 21E8      		ldi r18,lo8(6529)
 2597 0dac 39E1      		ldi r19,hi8(6529)
 2598 0dae 41E2      		ldi r20,lo8(9249)
 2599 0db0 54E2      		ldi r21,hi8(9249)
 2600 0db2 6FE0      		ldi r22,lo8(15)
 2601 0db4 80E0      		ldi r24,lo8(isa_rfRxInfo)
 2602 0db6 90E0      		ldi r25,hi8(isa_rfRxInfo)
 2603 0db8 0E94 0000 		call rf_init
 2605               	.LM345:
 2606 0dbc 81E0      		ldi r24,lo8(1)
 2607 0dbe 8093 0000 		sts AFTER_FIRST_SYNC,r24
 2609               	.LM346:
 2610 0dc2 1092 0000 		sts slowIndex,__zero_reg__
 2612               	.LM347:
 2613 0dc6 1123      		tst r17
 2614 0dc8 01F0      		breq .L191
 2616               	.LM348:
 2617 0dca 0093 0000 		sts channelIndex,r16
 2619               	.LM349:
 2620 0dce E02F      		mov r30,r16
 2621 0dd0 FF27      		clr r31
 2622 0dd2 E050      		subi r30,lo8(-(slottedPattern))
 2623 0dd4 F040      		sbci r31,hi8(-(slottedPattern))
 2624 0dd6 8081      		ld r24,Z
 2625 0dd8 00C0      		rjmp .L195
 2626               	.L191:
 2628               	.LM350:
 2629 0dda 1092 0000 		sts channelIndex,__zero_reg__
 2631               	.LM351:
 2632 0dde 8091 0000 		lds r24,slottedPattern
 2633               	.L195:
 2634 0de2 8093 0000 		sts currentChannel,r24
 2636               	.LM352:
 2637 0de6 8091 0000 		lds r24,currentChannel
 2638 0dea 0E94 0000 		call isa_set_channel
 2640               	.LM353:
 2641 0dee 1092 0000 		sts (resync_times)+1,__zero_reg__
 2642 0df2 1092 0000 		sts resync_times,__zero_reg__
 2644               	.LM354:
 2645 0df6 0E94 0000 		call dlmoInit
 2646 0dfa 81E0      		ldi r24,lo8(1)
 2647 0dfc 90E0      		ldi r25,hi8(1)
 2648               	.L188:
 2649               	/* epilogue: frame size=0 */
 2650 0dfe 1F91      		pop r17
 2651 0e00 0F91      		pop r16
 2652 0e02 FF90      		pop r15
 2653 0e04 0895      		ret
 2654               	/* epilogue end (size=4) */
 2655               	/* function isa_init size 152 (145) */
 2657               	.Lscope20:
 2659               		.stabd	78,0,0
 2661               	.global	isa_wait_until_rx_pkt
 2663               	isa_wait_until_rx_pkt:
 2664               		.stabd	46,0,0
 2666               	.LM355:
 2667               	.LFBB21:
 2668               	/* prologue: frame size=0 */
 2669               	/* prologue end (size=0) */
 2671               	.LM356:
 2672 0e06 8091 0000 		lds r24,isa_rx_pkt_signal
 2673 0e0a 0E94 0000 		call nrk_signal_register
 2675               	.LM357:
 2676 0e0e 8091 0000 		lds r24,isa_rx_data_ready
 2677 0e12 8823      		tst r24
 2678 0e14 01F4      		brne .L198
 2680               	.LM358:
 2681 0e16 61E0      		ldi r22,lo8(1)
 2682 0e18 70E0      		ldi r23,hi8(1)
 2683 0e1a 80E0      		ldi r24,hlo8(1)
 2684 0e1c 90E0      		ldi r25,hhi8(1)
 2685 0e1e 0090 0000 		lds r0,isa_rx_pkt_signal
 2686 0e22 00C0      		rjmp 2f
 2687 0e24 660F      	1:	lsl r22
 2688 0e26 771F      		rol r23
 2689 0e28 881F      		rol r24
 2690 0e2a 991F      		rol r25
 2691 0e2c 0A94      	2:	dec r0
 2692 0e2e 02F4      		brpl 1b
 2693 0e30 0E94 0000 		call nrk_event_wait
 2694               	.L198:
 2696               	.LM359:
 2697 0e34 81E0      		ldi r24,lo8(1)
 2698 0e36 90E0      		ldi r25,hi8(1)
 2699               	/* epilogue: frame size=0 */
 2700 0e38 0895      		ret
 2701               	/* epilogue end (size=1) */
 2702               	/* function isa_wait_until_rx_pkt size 26 (25) */
 2704               	.Lscope21:
 2706               		.stabd	78,0,0
 2710               	.global	isa_rx_pkt_get
 2712               	isa_rx_pkt_get:
 2713               		.stabd	46,0,0
 2715               	.LM360:
 2716               	.LFBB22:
 2717               	/* prologue: frame size=0 */
 2718               	/* prologue end (size=0) */
 2719 0e3a FC01      		movw r30,r24
 2720 0e3c DB01      		movw r26,r22
 2722               	.LM361:
 2723 0e3e 8091 0000 		lds r24,isa_rx_data_ready
 2724 0e42 8823      		tst r24
 2725 0e44 01F4      		brne .L202
 2727               	.LM362:
 2728 0e46 1082      		st Z,__zero_reg__
 2730               	.LM363:
 2731 0e48 1C92      		st X,__zero_reg__
 2732 0e4a 80E0      		ldi r24,lo8(0)
 2733 0e4c 90E0      		ldi r25,hi8(0)
 2734 0e4e 0895      		ret
 2735               	.L202:
 2737               	.LM364:
 2738 0e50 8091 0000 		lds r24,isa_rfRxInfo+3
 2739 0e54 8083      		st Z,r24
 2741               	.LM365:
 2742 0e56 8091 0000 		lds r24,isa_rfRxInfo+8
 2743 0e5a 8C93      		st X,r24
 2745               	.LM366:
 2746 0e5c 8091 0000 		lds r24,isa_rfRxInfo+5
 2747 0e60 9091 0000 		lds r25,(isa_rfRxInfo+5)+1
 2749               	.LM367:
 2750 0e64 0895      		ret
 2751               	/* epilogue: frame size=0 */
 2752               	/* epilogue: noreturn */
 2753               	/* epilogue end (size=0) */
 2754               	/* function isa_rx_pkt_get size 22 (22) */
 2756               	.Lscope22:
 2758               		.stabd	78,0,0
 2759               	.global	EXPIRATION
 2760               		.data
 2763               	EXPIRATION:
 2764 006a C800      		.word	200
 2765               	.global	tmp_count
 2766               	.global	tmp_count
 2767               		.section .bss
 2770               	tmp_count:
 2771 0000 0000      		.skip 2,0
 2772               	.global	DHDRcount
 2773               	.global	DHDRcount
 2776               	DHDRcount:
 2777 0002 0000      		.skip 2,0
 2778               	.global	txCount
 2779               	.global	txCount
 2782               	txCount:
 2783 0004 0000      		.skip 2,0
 2784               	.global	rxCount
 2785               	.global	rxCount
 2788               	rxCount:
 2789 0006 0000      		.skip 2,0
 2790               	.global	packetsLost
 2791               	.global	packetsLost
 2794               	packetsLost:
 2795 0008 0000      		.skip 2,0
 2796               	.global	check
 2797               	.global	check
 2800               	check:
 2801 000a 00        		.skip 1,0
 2802               		.section	.progmem.data,"a",@progbits
 2805               	__c.2743:
 2806 0000 4953 4120 		.string	"ISA ERROR: creating tx signal failed\r\n"
 2806      4552 524F 
 2806      523A 2063 
 2806      7265 6174 
 2806      696E 6720 
 2809               	__c.2741:
 2810 0027 4953 4120 		.string	"ISA ERROR: creating rx signal failed\r\n"
 2810      4552 524F 
 2810      523A 2063 
 2810      7265 6174 
 2810      696E 6720 
 2811               		.comm _nrk_signal_list,4,1
 2812               		.comm nrk_idle_task_stk,128,1
 2813               		.comm nrk_kernel_stk_ptr,2,1
 2814               		.comm _nrk_prev_timer_val,1,1
 2815               		.comm _nrk_time_trigger,1,1
 2816               		.comm app_timer0_callback,2,1
 2817               		.comm app_timer0_prescale,1,1
 2818               		.comm error_task,1,1
 2819               		.comm error_num,1,1
 2820               		.comm isa_id,1,1
 2821               		.comm isa_clk_src_id,1,1
 2822               		.comm tx_slot_from_join,4,1
 2823               		.comm isa_rx_data_ready,4,1
 2824               		.comm child_list,4,1
 2825               		.comm DHDR,1,1
 2826               		.comm last_slot,2,1
 2827               		.comm resync_times,2,1
 2828               		.comm isa_param,9,1
 2829               		.comm isa_node_mode,1,1
 2830               		.comm isa_task,35,1
 2831               		.comm isa_task_stack,128,1
 2832               		.comm isa_rfRxInfo,9,1
 2833               		.comm isa_ack_tx,7,1
 2834               		.comm isa_ack_buf,4,1
 2835               		.comm isa_rfTxInfo,7,1
 2836               		.comm _isa_ready,1,1
 2837               		.comm _isa_join_ok,1,1
 2838               		.comm dmo,2,1
 2839               		.comm global_slot,2,1
 2840               		.comm current_global_slot,2,1
 2841               		.comm global_cycle,2,1
 2842               		.comm last_sync_slot,2,1
 2843               		.comm slottedPattern,16,1
 2844               		.comm slowPattern,3,1
 2845               		.comm currentChannel,1,1
 2846               		.comm channelIndex,1,1
 2847               		.comm slowIndex,1,1
 2848               		.comm slot_start_time,2,1
 2849               		.comm tx_start_time,2,1
 2850               		.comm rx_start_time,2,1
 2851               		.comm offsetY,2,1
 2852               		.comm offsetX,2,1
 2853               		.comm _isa_sync_ok,1,1
 2854               		.comm AFTER_FIRST_SYNC,1,1
 2855               		.comm slot_expired,2,1
 2856               		.comm previous_tx_slot,1,1
 2857               		.comm isa_tx_done_signal,1,1
 2858               		.comm isa_rx_pkt_signal,1,1
 2859               		.comm DAUX,29,1
 2860               		.comm DHR,1,1
 2861               		.comm tmp_curSec,1,1
 2862               		.comm tmp_offsetSec,1,1
 2863               		.comm tmp_offsetNanoSec,2,1
 2926               		.text
 2928               	.Letext0:
 2929               	/* File "../../../src/net/isa/isa.c": code 1846 = 0x0736 (1712), prologues  66, epilogues  68 */
DEFINED SYMBOLS
                            *ABS*:00000000 isa.c
     /tmp/cczCJohC.s:2      *ABS*:0000003f __SREG__
     /tmp/cczCJohC.s:3      *ABS*:0000003e __SP_H__
     /tmp/cczCJohC.s:4      *ABS*:0000003d __SP_L__
     /tmp/cczCJohC.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cczCJohC.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cczCJohC.s:164    .text:00000000 config_child_list
                            *COM*:00000004 child_list
     /tmp/cczCJohC.s:207    .text:00000040 isa_get_channel
                            *COM*:00000009 isa_param
     /tmp/cczCJohC.s:230    .text:00000048 isa_set_channel_pattern
                            *COM*:00000010 slottedPattern
                            *COM*:00000003 slowPattern
     /tmp/cczCJohC.s:338    .text:000000c8 isa_ready
                            *COM*:00000001 _isa_ready
     /tmp/cczCJohC.s:374    .text:000000dc isa_rx_pkt_set_buffer
                            *COM*:00000009 isa_rfRxInfo
     /tmp/cczCJohC.s:418    .text:000000fc isa_start
     /tmp/cczCJohC.s:441    .text:00000104 configDHDR
     /tmp/cczCJohC.s:487    .text:00000126 configDHR
     /tmp/cczCJohC.s:535    .text:00000138 configAdvDAUX
                            *COM*:0000001d DAUX
     /tmp/cczCJohC.s:619    .text:0000019c isa_rx_pkt_check
                            *COM*:00000004 isa_rx_data_ready
     /tmp/cczCJohC.s:643    .text:000001a8 isa_rx_pkt_release
     /tmp/cczCJohC.s:667    .text:000001ba isa_join_ready
                            *COM*:00000001 _isa_join_ok
     /tmp/cczCJohC.s:701    .text:000001ce isa_task_config
     /tmp/cczCJohC.s:2153   .text:00000ad4 isa_nw_task
                            *COM*:00000023 isa_task
                            *COM*:00000080 isa_task_stack
     /tmp/cczCJohC.s:797    .text:00000278 _isa_init_sync
                            *COM*:00000001 _isa_sync_ok
                            *COM*:00000001 isa_clk_src_id
                            *COM*:00000002 global_slot
     /tmp/cczCJohC.s:1043   .text:000003e2 _isa_tx
                            *COM*:00000007 isa_rfTxInfo
     /tmp/cczCJohC.s:2800   .bss:0000000a check
                            *COM*:00000001 previous_tx_slot
                            *COM*:00000001 isa_id
                            *COM*:00000002 slot_start_time
                            *COM*:00000002 tx_start_time
     /tmp/cczCJohC.s:2782   .bss:00000004 txCount
                            *COM*:00000002 offsetY
                            *COM*:00000001 isa_tx_done_signal
                            *COM*:00000002 slot_expired
     /tmp/cczCJohC.s:2794   .bss:00000008 packetsLost
                            *COM*:00000001 tmp_curSec
     /tmp/cczCJohC.s:2788   .bss:00000006 rxCount
                            *COM*:00000001 DHR
                            *COM*:00000002 offsetX
     /tmp/cczCJohC.s:1677   .text:00000802 _isa_rx
                            *COM*:00000002 rx_start_time
                            *COM*:00000004 isa_ack_buf
                            *COM*:00000007 isa_ack_tx
                            *COM*:00000002 dmo
                            *COM*:00000001 isa_rx_pkt_signal
     /tmp/cczCJohC.s:2065   .text:00000a78 isa_wait_until_rx_or_tx
     /tmp/cczCJohC.s:2125   .text:00000aca isa_set_channel
                            *COM*:00000002 current_global_slot
                            *COM*:00000002 global_cycle
                            *COM*:00000001 channelIndex
                            *COM*:00000001 currentChannel
                            *COM*:00000001 isa_node_mode
     /tmp/cczCJohC.s:2776   .bss:00000002 DHDRcount
     /tmp/cczCJohC.s:2763   .data:0000006a EXPIRATION
                            *COM*:00000002 resync_times
     /tmp/cczCJohC.s:2465   .text:00000cd6 isa_init
     /tmp/cczCJohC.s:2809   .progmem.data:00000027 __c.2741
     /tmp/cczCJohC.s:2805   .progmem.data:00000000 __c.2743
                            *COM*:00000001 AFTER_FIRST_SYNC
                            *COM*:00000001 slowIndex
     /tmp/cczCJohC.s:2663   .text:00000e06 isa_wait_until_rx_pkt
     /tmp/cczCJohC.s:2712   .text:00000e3a isa_rx_pkt_get
     /tmp/cczCJohC.s:2770   .bss:00000000 tmp_count
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000004 tx_slot_from_join
                            *COM*:00000001 DHDR
                            *COM*:00000002 last_slot
                            *COM*:00000002 last_sync_slot
                            *COM*:00000001 tmp_offsetSec
                            *COM*:00000002 tmp_offsetNanoSec

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
nrk_task_set_stk
nrk_activate_task
rf_set_rx
rf_polling_rx_on
_nrk_set_next_wakeup
_nrk_os_timer_set
_nrk_os_timer_get
rf_rx_check_sfd
_nrk_high_speed_timer_reset
rf_polling_rx_packet
rf_rx_off
nrk_led_toggle
__iob
fputc
_nrk_os_timer_stop
_nrk_os_timer_reset
nrk_high_speed_timer_wait
_nrk_os_timer_start
nrk_cur_task_TCB
nrk_terminate_task
getHighPriorityEntry
NRK_DEBUG_1
nrk_gpio_set
rf_tx_tdma_packet
nrk_gpio_clr
nrk_event_signal
printf
__divmodhi4
nrk_spin_wait_us
isaFreePacket
NRK_DEBUG_2
_nrk_high_speed_timer_get
dd_data_indication
isTransmitLinkPresent
enQueue
nrk_signal_register
nrk_event_wait
rf_set_channel
nrk_wait_until_next_period
__udivmodhi4
findLink
isa_get_slots_until_next_wakeup
nrk_led_clr
nrk_wait_until_next_n_periods
nrk_led_set
nrk_signal_create
nrk_kprintf
nrk_kernel_error_add
_nrk_high_speed_timer_start
rf_init
dlmoInit
