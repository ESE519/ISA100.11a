   1               		.file	"isa.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 183               	.global	config_child_list
 185               	config_child_list:
 186               		.stabd	46,0,0
   1:../../../src/net/isa/isa.c **** /******************************************************************************
   2:../../../src/net/isa/isa.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/net/isa/isa.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/net/isa/isa.c **** *  All rights reserved.
   5:../../../src/net/isa/isa.c **** *
   6:../../../src/net/isa/isa.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/net/isa/isa.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/net/isa/isa.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/net/isa/isa.c **** *
  10:../../../src/net/isa/isa.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/net/isa/isa.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/net/isa/isa.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/net/isa/isa.c **** *
  14:../../../src/net/isa/isa.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/net/isa/isa.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/net/isa/isa.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/net/isa/isa.c **** *  GNU General Public License for more details.
  18:../../../src/net/isa/isa.c **** *
  19:../../../src/net/isa/isa.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/net/isa/isa.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/net/isa/isa.c **** *
  22:../../../src/net/isa/isa.c **** *  Contributing Authors (specific to this file):
  23:../../../src/net/isa/isa.c **** *  Anthony Rowe
  24:../../../src/net/isa/isa.c **** *******************************************************************************/
  25:../../../src/net/isa/isa.c **** 
  26:../../../src/net/isa/isa.c **** //#include <rtl_debug.h>
  27:../../../src/net/isa/isa.c **** #include <include.h>
  28:../../../src/net/isa/isa.c **** #include <ulib.h>
  29:../../../src/net/isa/isa.c **** #include <avr/sleep.h>
  30:../../../src/net/isa/isa.c **** #include <avr/wdt.h>
  31:../../../src/net/isa/isa.c **** #include <avr/eeprom.h>
  32:../../../src/net/isa/isa.c **** #include <stdio.h>
  33:../../../src/net/isa/isa.c **** #include <avr/interrupt.h>
  34:../../../src/net/isa/isa.c **** #include <nrk.h>
  35:../../../src/net/isa/isa.c **** #include <nrk_events.h>
  36:../../../src/net/isa/isa.c **** #include <nrk_timer.h>
  37:../../../src/net/isa/isa.c **** #include <nrk_error.h>
  38:../../../src/net/isa/isa.c **** //#include <rtl_defs.h>
  39:../../../src/net/isa/isa.c **** #include <stdlib.h>
  40:../../../src/net/isa/isa.c **** //#include <isa_scheduler.h>
  41:../../../src/net/isa/isa.c **** #include <isa.h>
  42:../../../src/net/isa/isa.c **** #include <isa_defs.h>
  43:../../../src/net/isa/isa.c **** #include <isa_error.h>
  44:../../../src/net/isa/isa.c **** #include <nrk_cfg.h>
  45:../../../src/net/isa/isa.c **** #include <spi_matrix.h>
  46:../../../src/net/isa/isa.c **** 
  47:../../../src/net/isa/isa.c **** 
  48:../../../src/net/isa/isa.c **** #define CHANNEL_HOPPING
  49:../../../src/net/isa/isa.c **** //#define CORRECTION
  50:../../../src/net/isa/isa.c **** //#define INIT_SYNC
  51:../../../src/net/isa/isa.c **** #define LED_SLOT_DEBUG
  52:../../../src/net/isa/isa.c **** //#define HIGH_TIMER_DEBUG
  53:../../../src/net/isa/isa.c **** #define TX_RX_DEBUG
  54:../../../src/net/isa/isa.c **** #define ACK_DEBUG
  55:../../../src/net/isa/isa.c **** #define RX_DEBUG
  56:../../../src/net/isa/isa.c **** #define TX_DEBUG
  57:../../../src/net/isa/isa.c **** //#define JOIN_PROCESS
  58:../../../src/net/isa/isa.c **** 
  59:../../../src/net/isa/isa.c **** #ifdef JOIN_PROCESS
  60:../../../src/net/isa/isa.c ****  uint8_t join_pkt_buf[RF_MAX_PAYLOAD_SIZE];
  61:../../../src/net/isa/isa.c **** #endif
  62:../../../src/net/isa/isa.c **** 
  63:../../../src/net/isa/isa.c **** 
  64:../../../src/net/isa/isa.c **** /* slot related declaration */
  65:../../../src/net/isa/isa.c **** volatile uint16_t global_slot;
  66:../../../src/net/isa/isa.c **** volatile uint16_t current_global_slot;
  67:../../../src/net/isa/isa.c **** volatile uint16_t global_cycle;
  68:../../../src/net/isa/isa.c **** uint16_t last_sync_slot;
  69:../../../src/net/isa/isa.c **** 
  70:../../../src/net/isa/isa.c **** /* channel hopping related declaration */
  71:../../../src/net/isa/isa.c **** uint8_t slottedPattern[16];
  72:../../../src/net/isa/isa.c **** uint8_t slowPattern[3];
  73:../../../src/net/isa/isa.c **** uint8_t currentChannel;
  74:../../../src/net/isa/isa.c **** uint8_t channelIndex =0;;
  75:../../../src/net/isa/isa.c **** uint8_t slowIndex;
  76:../../../src/net/isa/isa.c **** 
  77:../../../src/net/isa/isa.c **** /*used for calculating offset*/
  78:../../../src/net/isa/isa.c **** uint16_t slot_start_time;        //        holds the time value in terms of HIGH_SPEED_TIMER_TICKS.
  79:../../../src/net/isa/isa.c ****                                                         //        Generally very close t 0 since th
  80:../../../src/net/isa/isa.c **** 
  81:../../../src/net/isa/isa.c **** uint16_t tx_start_time;         // actual transmission starting time in terms of HIGH_SPEED_TIMER_T
  82:../../../src/net/isa/isa.c **** 
  83:../../../src/net/isa/isa.c **** uint16_t rx_start_time;                // actual transmission recieval time in terms of HIGH_SPEED_
  84:../../../src/net/isa/isa.c **** 
  85:../../../src/net/isa/isa.c **** uint16_t offsetY;                        // tx_start_time - slot_start time (Used for time correcti
  86:../../../src/net/isa/isa.c **** 
  87:../../../src/net/isa/isa.c **** uint16_t offsetX;                        // rx_start_time - slot_start_time (Used for time correcti
  88:../../../src/net/isa/isa.c **** 
  89:../../../src/net/isa/isa.c **** 
  90:../../../src/net/isa/isa.c **** /* SYNC related declaration */
  91:../../../src/net/isa/isa.c **** uint8_t _isa_sync_ok;
  92:../../../src/net/isa/isa.c **** uint8_t AFTER_FIRST_SYNC;
  93:../../../src/net/isa/isa.c **** uint16_t EXPIRATION = 200;// each slot lasts for 10ms, so 100 slots last for 1s
  94:../../../src/net/isa/isa.c **** uint16_t slot_expired;
  95:../../../src/net/isa/isa.c **** uint8_t previous_tx_slot;
  96:../../../src/net/isa/isa.c **** 
  97:../../../src/net/isa/isa.c **** /* signal related declaration */
  98:../../../src/net/isa/isa.c **** int8_t isa_tx_done_signal;
  99:../../../src/net/isa/isa.c **** int8_t isa_rx_pkt_signal;
 100:../../../src/net/isa/isa.c **** 
 101:../../../src/net/isa/isa.c **** uint8_t adv_buf[RF_MAX_PAYLOAD_SIZE];
 102:../../../src/net/isa/isa.c **** 
 103:../../../src/net/isa/isa.c **** /* header type */
 104:../../../src/net/isa/isa.c **** 
 105:../../../src/net/isa/isa.c **** //uint8_t DMXHR[4]; //Data link layer media access control extension sub header, mainly used for se
 106:../../../src/net/isa/isa.c **** uint8_t DAUX[29]; //Data link layer auxiliary sub-header, currently used for join process
 107:../../../src/net/isa/isa.c **** //uint8_t DROUT[3]; //Routing sub-header, compressed variant
 108:../../../src/net/isa/isa.c **** //uint8_t DADDR[5]; //Addressing sub-header
 109:../../../src/net/isa/isa.c **** uint8_t DHR;   // ACK's data link layer header
 110:../../../src/net/isa/isa.c **** 
 111:../../../src/net/isa/isa.c **** /* Test variable */
 112:../../../src/net/isa/isa.c **** uint8_t tmp_curSec;
 113:../../../src/net/isa/isa.c **** uint8_t tmp_offsetSec;
 114:../../../src/net/isa/isa.c **** int16_t tmp_offsetNanoSec;
 115:../../../src/net/isa/isa.c **** uint16_t tmp_count=0;
 116:../../../src/net/isa/isa.c **** uint16_t DHDRcount = 0;
 117:../../../src/net/isa/isa.c **** uint16_t txCount = 0;                //Holds the number of packets transmitted successfully
 118:../../../src/net/isa/isa.c **** uint16_t rxCount = 0;                // Holds the number of packets received successfully
 119:../../../src/net/isa/isa.c **** uint16_t packetsLost = 0; //Holds packets lost (receive  + ACK )
 120:../../../src/net/isa/isa.c **** 
 121:../../../src/net/isa/isa.c **** uint8_t check = 0;
 122:../../../src/net/isa/isa.c **** //Control + F Vignesh for all inclusions For advertisements
 123:../../../src/net/isa/isa.c **** 
 124:../../../src/net/isa/isa.c **** uint16_t adjacencyMatrix[DLMO_NEIGHBOR_MAX_COUNT];
 125:../../../src/net/isa/isa.c **** 
 126:../../../src/net/isa/isa.c **** 
 127:../../../src/net/isa/isa.c **** void config_child_list (uint8_t node_id)
 128:../../../src/net/isa/isa.c **** {
 188               	.LM0:
 189               	.LFBB1:
 190               	/* prologue: frame size=0 */
 191               	/* prologue end (size=0) */
 129:../../../src/net/isa/isa.c ****     child_list |= ((uint32_t) 1) << node_id;
 193               	.LM1:
 194 0000 21E0      		ldi r18,lo8(1)
 195 0002 30E0      		ldi r19,hi8(1)
 196 0004 40E0      		ldi r20,hlo8(1)
 197 0006 50E0      		ldi r21,hhi8(1)
 198 0008 00C0      		rjmp 2f
 199 000a 220F      	1:	lsl r18
 200 000c 331F      		rol r19
 201 000e 441F      		rol r20
 202 0010 551F      		rol r21
 203 0012 8A95      	2:	dec r24
 204 0014 02F4      		brpl 1b
 205 0016 8091 0000 		lds r24,child_list
 206 001a 9091 0000 		lds r25,(child_list)+1
 207 001e A091 0000 		lds r26,(child_list)+2
 208 0022 B091 0000 		lds r27,(child_list)+3
 209 0026 822B      		or r24,r18
 210 0028 932B      		or r25,r19
 211 002a A42B      		or r26,r20
 212 002c B52B      		or r27,r21
 213 002e 8093 0000 		sts child_list,r24
 214 0032 9093 0000 		sts (child_list)+1,r25
 215 0036 A093 0000 		sts (child_list)+2,r26
 216 003a B093 0000 		sts (child_list)+3,r27
 217               	/* epilogue: frame size=0 */
 218 003e 0895      		ret
 219               	/* epilogue end (size=1) */
 220               	/* function config_child_list size 33 (32) */
 222               	.Lscope1:
 224               		.stabd	78,0,0
 226               	.global	isa_get_channel
 228               	isa_get_channel:
 229               		.stabd	46,0,0
 130:../../../src/net/isa/isa.c **** }
 131:../../../src/net/isa/isa.c **** 
 132:../../../src/net/isa/isa.c **** /**
 133:../../../src/net/isa/isa.c ****  * isa_set_channel()
 134:../../../src/net/isa/isa.c ****  *
 135:../../../src/net/isa/isa.c ****  * This function set channel and is used for channel hopping.
 136:../../../src/net/isa/isa.c ****  *
 137:../../../src/net/isa/isa.c ****  */
 138:../../../src/net/isa/isa.c **** void isa_set_channel (uint8_t chan)
 139:../../../src/net/isa/isa.c **** {
 140:../../../src/net/isa/isa.c ****     isa_param.channel = chan;
 141:../../../src/net/isa/isa.c ****     rf_set_channel (chan);
 142:../../../src/net/isa/isa.c **** }
 143:../../../src/net/isa/isa.c **** 
 144:../../../src/net/isa/isa.c **** 
 145:../../../src/net/isa/isa.c **** 
 146:../../../src/net/isa/isa.c **** 
 147:../../../src/net/isa/isa.c **** /*------------------------------------------------- isa_get_channel() -----
 148:../../../src/net/isa/isa.c ****          |  Function isa_get_channel()
 149:../../../src/net/isa/isa.c ****          |
 150:../../../src/net/isa/isa.c ****          |  Purpose:  Returns the current channel that the radio is set to operate
 151:../../../src/net/isa/isa.c ****          |      on. This will return the channel that was last set using isa_set_channel()
 152:../../../src/net/isa/isa.c ****          |
 153:../../../src/net/isa/isa.c ****          |  Parameters:
 154:../../../src/net/isa/isa.c ****          |      NONE
 155:../../../src/net/isa/isa.c ****          |
 156:../../../src/net/isa/isa.c ****          |  Returns:  uint8_t channel value
 157:../../../src/net/isa/isa.c ****          *-------------------------------------------------------------------*/
 158:../../../src/net/isa/isa.c **** uint8_t isa_get_channel()
 159:../../../src/net/isa/isa.c **** {
 231               	.LM2:
 232               	.LFBB2:
 233               	/* prologue: frame size=0 */
 234               	/* prologue end (size=0) */
 235 0040 8091 0000 		lds r24,isa_param+2
 160:../../../src/net/isa/isa.c ****     return isa_param.channel;
 161:../../../src/net/isa/isa.c **** }
 237               	.LM3:
 238 0044 9927      		clr r25
 239               	/* epilogue: frame size=0 */
 240 0046 0895      		ret
 241               	/* epilogue end (size=1) */
 242               	/* function isa_get_channel size 4 (3) */
 244               	.Lscope2:
 246               		.stabd	78,0,0
 249               	.global	isa_set_channel_pattern
 251               	isa_set_channel_pattern:
 252               		.stabd	46,0,0
 162:../../../src/net/isa/isa.c **** 
 163:../../../src/net/isa/isa.c **** void isa_set_channel_pattern(uint8_t pattern)
 164:../../../src/net/isa/isa.c **** {
 254               	.LM4:
 255               	.LFBB3:
 256               	/* prologue: frame size=0 */
 257               	/* prologue end (size=0) */
 165:../../../src/net/isa/isa.c ****     switch (pattern)
 259               	.LM5:
 260 0048 8130      		cpi r24,lo8(1)
 261 004a 01F0      		breq .L7
 263               	.LM6:
 264 004c 8330      		cpi r24,lo8(3)
 265 004e 01F4      		brne .L9
 266 0050 00C0      		rjmp .L8
 267               	.L7:
 166:../../../src/net/isa/isa.c ****     {
 167:../../../src/net/isa/isa.c ****         case 1:
 168:../../../src/net/isa/isa.c ****             slottedPattern[0] = 19;
 269               	.LM7:
 270 0052 83E1      		ldi r24,lo8(19)
 271 0054 8093 0000 		sts slottedPattern,r24
 169:../../../src/net/isa/isa.c ****             slottedPattern[1] = 12;
 273               	.LM8:
 274 0058 8CE0      		ldi r24,lo8(12)
 275 005a 8093 0000 		sts slottedPattern+1,r24
 170:../../../src/net/isa/isa.c ****             slottedPattern[2] = 20;
 277               	.LM9:
 278 005e 84E1      		ldi r24,lo8(20)
 279 0060 8093 0000 		sts slottedPattern+2,r24
 171:../../../src/net/isa/isa.c ****             slottedPattern[3] = 24;
 281               	.LM10:
 282 0064 88E1      		ldi r24,lo8(24)
 283 0066 8093 0000 		sts slottedPattern+3,r24
 172:../../../src/net/isa/isa.c ****             slottedPattern[4] = 16;
 285               	.LM11:
 286 006a 80E1      		ldi r24,lo8(16)
 287 006c 8093 0000 		sts slottedPattern+4,r24
 173:../../../src/net/isa/isa.c ****             slottedPattern[5] = 23;
 289               	.LM12:
 290 0070 87E1      		ldi r24,lo8(23)
 291 0072 8093 0000 		sts slottedPattern+5,r24
 174:../../../src/net/isa/isa.c ****             slottedPattern[6] = 18;
 293               	.LM13:
 294 0076 82E1      		ldi r24,lo8(18)
 295 0078 8093 0000 		sts slottedPattern+6,r24
 175:../../../src/net/isa/isa.c ****             slottedPattern[7] = 25;
 297               	.LM14:
 298 007c 89E1      		ldi r24,lo8(25)
 299 007e 8093 0000 		sts slottedPattern+7,r24
 176:../../../src/net/isa/isa.c ****             slottedPattern[8] = 14;
 301               	.LM15:
 302 0082 8EE0      		ldi r24,lo8(14)
 303 0084 8093 0000 		sts slottedPattern+8,r24
 177:../../../src/net/isa/isa.c ****             slottedPattern[9] = 21;
 305               	.LM16:
 306 0088 85E1      		ldi r24,lo8(21)
 307 008a 8093 0000 		sts slottedPattern+9,r24
 178:../../../src/net/isa/isa.c ****             slottedPattern[10] = 11;
 309               	.LM17:
 310 008e 8BE0      		ldi r24,lo8(11)
 311 0090 8093 0000 		sts slottedPattern+10,r24
 179:../../../src/net/isa/isa.c ****             slottedPattern[11] = 15;
 313               	.LM18:
 314 0094 8FE0      		ldi r24,lo8(15)
 315 0096 8093 0000 		sts slottedPattern+11,r24
 180:../../../src/net/isa/isa.c ****             slottedPattern[12] = 22;
 317               	.LM19:
 318 009a 86E1      		ldi r24,lo8(22)
 319 009c 8093 0000 		sts slottedPattern+12,r24
 181:../../../src/net/isa/isa.c ****             slottedPattern[13] = 17;
 321               	.LM20:
 322 00a0 81E1      		ldi r24,lo8(17)
 323 00a2 8093 0000 		sts slottedPattern+13,r24
 182:../../../src/net/isa/isa.c ****             slottedPattern[14] = 13;
 325               	.LM21:
 326 00a6 8DE0      		ldi r24,lo8(13)
 327 00a8 8093 0000 		sts slottedPattern+14,r24
 183:../../../src/net/isa/isa.c ****             slottedPattern[15] = 26;
 329               	.LM22:
 330 00ac 8AE1      		ldi r24,lo8(26)
 331 00ae 8093 0000 		sts slottedPattern+15,r24
 332 00b2 0895      		ret
 333               	.L8:
 184:../../../src/net/isa/isa.c ****             break;
 185:../../../src/net/isa/isa.c ****         case 3:
 186:../../../src/net/isa/isa.c ****             slowPattern[0]=15;
 335               	.LM23:
 336 00b4 8FE0      		ldi r24,lo8(15)
 337 00b6 8093 0000 		sts slowPattern,r24
 187:../../../src/net/isa/isa.c ****             slowPattern[1]=20;
 339               	.LM24:
 340 00ba 84E1      		ldi r24,lo8(20)
 341 00bc 8093 0000 		sts slowPattern+1,r24
 188:../../../src/net/isa/isa.c ****             slowPattern[2]=25;
 343               	.LM25:
 344 00c0 89E1      		ldi r24,lo8(25)
 345 00c2 8093 0000 		sts slowPattern+2,r24
 346               	.L9:
 347 00c6 0895      		ret
 348               	/* epilogue: frame size=0 */
 349               	/* epilogue: noreturn */
 350               	/* epilogue end (size=0) */
 351               	/* function isa_set_channel_pattern size 64 (64) */
 353               	.Lscope3:
 355               		.stabd	78,0,0
 357               	.global	isa_ready
 359               	isa_ready:
 360               		.stabd	46,0,0
 189:../../../src/net/isa/isa.c ****             break;
 190:../../../src/net/isa/isa.c ****         default:
 191:../../../src/net/isa/isa.c ****             break;
 192:../../../src/net/isa/isa.c ****     }
 193:../../../src/net/isa/isa.c **** }
 194:../../../src/net/isa/isa.c **** 
 195:../../../src/net/isa/isa.c **** int8_t isa_ready()
 196:../../../src/net/isa/isa.c **** {
 362               	.LM26:
 363               	.LFBB4:
 364               	/* prologue: frame size=0 */
 365               	/* prologue end (size=0) */
 197:../../../src/net/isa/isa.c ****     if (_isa_ready ==  1)
 367               	.LM27:
 368 00c8 8091 0000 		lds r24,_isa_ready
 369 00cc 8130      		cpi r24,lo8(1)
 370 00ce 01F4      		brne .L11
 372               	.LM28:
 373 00d0 81E0      		ldi r24,lo8(1)
 374 00d2 90E0      		ldi r25,hi8(1)
 375 00d4 0895      		ret
 376               	.L11:
 377 00d6 8FEF      		ldi r24,lo8(-1)
 378 00d8 9FEF      		ldi r25,hi8(-1)
 198:../../../src/net/isa/isa.c ****         return NRK_OK;
 199:../../../src/net/isa/isa.c ****     else
 200:../../../src/net/isa/isa.c ****         return NRK_ERROR;
 201:../../../src/net/isa/isa.c **** }
 380               	.LM29:
 381 00da 0895      		ret
 382               	/* epilogue: frame size=0 */
 383               	/* epilogue: noreturn */
 384               	/* epilogue end (size=0) */
 385               	/* function isa_ready size 10 (10) */
 387               	.Lscope4:
 389               		.stabd	78,0,0
 393               	.global	isa_rx_pkt_set_buffer
 395               	isa_rx_pkt_set_buffer:
 396               		.stabd	46,0,0
 202:../../../src/net/isa/isa.c **** 
 203:../../../src/net/isa/isa.c **** int8_t isa_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
 204:../../../src/net/isa/isa.c **** {
 398               	.LM30:
 399               	.LFBB5:
 400               	/* prologue: frame size=0 */
 401               	/* prologue end (size=0) */
 205:../../../src/net/isa/isa.c **** 
 206:../../../src/net/isa/isa.c ****     if(size==0 || buf==NULL) return NRK_ERROR;
 403               	.LM31:
 404 00dc 6623      		tst r22
 405 00de 01F0      		breq .L16
 407               	.LM32:
 408 00e0 0097      		sbiw r24,0
 409 00e2 01F0      		breq .L16
 207:../../../src/net/isa/isa.c ****     isa_rfRxInfo.pPayload = buf;
 411               	.LM33:
 412 00e4 9093 0000 		sts (isa_rfRxInfo+5)+1,r25
 413 00e8 8093 0000 		sts isa_rfRxInfo+5,r24
 208:../../../src/net/isa/isa.c ****     isa_rfRxInfo.max_length = size;
 415               	.LM34:
 416 00ec 6093 0000 		sts isa_rfRxInfo+4,r22
 417 00f0 81E0      		ldi r24,lo8(1)
 418 00f2 90E0      		ldi r25,hi8(1)
 419 00f4 0895      		ret
 420               	.L16:
 209:../../../src/net/isa/isa.c **** 
 210:../../../src/net/isa/isa.c **** return NRK_OK;
 422               	.LM35:
 423 00f6 8FEF      		ldi r24,lo8(-1)
 424 00f8 9FEF      		ldi r25,hi8(-1)
 211:../../../src/net/isa/isa.c **** }
 426               	.LM36:
 427 00fa 0895      		ret
 428               	/* epilogue: frame size=0 */
 429               	/* epilogue: noreturn */
 430               	/* epilogue end (size=0) */
 431               	/* function isa_rx_pkt_set_buffer size 16 (16) */
 433               	.Lscope5:
 435               		.stabd	78,0,0
 437               	.global	isa_start
 439               	isa_start:
 440               		.stabd	46,0,0
 212:../../../src/net/isa/isa.c **** 
 213:../../../src/net/isa/isa.c **** int8_t isa_wait_until_rx_pkt()
 214:../../../src/net/isa/isa.c **** {
 215:../../../src/net/isa/isa.c ****     nrk_signal_register(isa_rx_pkt_signal);
 216:../../../src/net/isa/isa.c ****     if (isa_rx_pkt_check() != 0)
 217:../../../src/net/isa/isa.c ****         return NRK_OK;
 218:../../../src/net/isa/isa.c ****     nrk_event_wait (SIG(isa_rx_pkt_signal));
 219:../../../src/net/isa/isa.c ****     return NRK_OK;
 220:../../../src/net/isa/isa.c **** }
 221:../../../src/net/isa/isa.c **** 
 222:../../../src/net/isa/isa.c **** int8_t isa_wait_until_rx_or_tx ()
 223:../../../src/net/isa/isa.c **** {
 224:../../../src/net/isa/isa.c ****     nrk_signal_register(isa_rx_pkt_signal);
 225:../../../src/net/isa/isa.c ****     nrk_signal_register(isa_tx_done_signal);
 226:../../../src/net/isa/isa.c ****     nrk_event_wait (SIG(isa_rx_pkt_signal) | SIG(isa_tx_done_signal));
 227:../../../src/net/isa/isa.c ****     return NRK_OK;
 228:../../../src/net/isa/isa.c **** }
 229:../../../src/net/isa/isa.c **** 
 230:../../../src/net/isa/isa.c **** /**
 231:../../../src/net/isa/isa.c ****  * isa_init()
 232:../../../src/net/isa/isa.c ****  *
 233:../../../src/net/isa/isa.c ****  * This function sets up the low level link layer parameters.
 234:../../../src/net/isa/isa.c ****  * This starts the main timer routine that will then automatically
 235:../../../src/net/isa/isa.c ****  * trigger whenever a packet might be sent or received.
 236:../../../src/net/isa/isa.c ****  * This should be called before ANY scheduling information is set
 237:../../../src/net/isa/isa.c ****  * since it will clear some default values.
 238:../../../src/net/isa/isa.c ****  *
 239:../../../src/net/isa/isa.c ****  */
 240:../../../src/net/isa/isa.c **** uint8_t isa_init (isa_node_mode_t mode, uint8_t id, uint8_t src_id)
 241:../../../src/net/isa/isa.c **** {
 242:../../../src/net/isa/isa.c ****     uint8_t i;
 243:../../../src/net/isa/isa.c **** 
 244:../../../src/net/isa/isa.c ****     /* Generate signals */
 245:../../../src/net/isa/isa.c ****     isa_rx_pkt_signal=nrk_signal_create();
 246:../../../src/net/isa/isa.c ****     if(isa_rx_pkt_signal==NRK_ERROR){
 247:../../../src/net/isa/isa.c ****         nrk_kprintf(PSTR("ISA ERROR: creating rx signal failed\r\n"));
 248:../../../src/net/isa/isa.c ****         nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
 249:../../../src/net/isa/isa.c ****         return NRK_ERROR;
 250:../../../src/net/isa/isa.c ****     }
 251:../../../src/net/isa/isa.c ****     isa_tx_done_signal=nrk_signal_create();
 252:../../../src/net/isa/isa.c ****     if(isa_tx_done_signal==NRK_ERROR){
 253:../../../src/net/isa/isa.c ****         nrk_kprintf(PSTR("ISA ERROR: creating tx signal failed\r\n"));
 254:../../../src/net/isa/isa.c ****         nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
 255:../../../src/net/isa/isa.c ****         return NRK_ERROR;
 256:../../../src/net/isa/isa.c ****     }
 257:../../../src/net/isa/isa.c **** 
 258:../../../src/net/isa/isa.c ****     // No buffer to start with
 259:../../../src/net/isa/isa.c ****     isa_rfRxInfo.pPayload = NULL;
 260:../../../src/net/isa/isa.c ****     isa_rfRxInfo.max_length = 0;
 261:../../../src/net/isa/isa.c **** 
 262:../../../src/net/isa/isa.c ****     /*FIXME Actually we dont need to always run the high speed timer */
 263:../../../src/net/isa/isa.c ****     _nrk_high_speed_timer_start();
 264:../../../src/net/isa/isa.c **** 
 265:../../../src/net/isa/isa.c ****     /* clear everything out */
 266:../../../src/net/isa/isa.c ****     global_cycle = 0;
 267:../../../src/net/isa/isa.c ****     global_slot = MAX_ISA_GLOBAL_SLOTS;
 268:../../../src/net/isa/isa.c ****     _isa_sync_ok = 0;
 269:../../../src/net/isa/isa.c ****     _isa_join_ok = 0;
 270:../../../src/net/isa/isa.c ****     slot_expired = 0;
 271:../../../src/net/isa/isa.c ****     isa_node_mode = mode;
 272:../../../src/net/isa/isa.c ****     isa_id = id;//change
 273:../../../src/net/isa/isa.c ****     dmo.dlAddress = id;
 274:../../../src/net/isa/isa.c ****     isa_clk_src_id=src_id; //change
 275:../../../src/net/isa/isa.c ****     isa_rx_data_ready = 0;
 276:../../../src/net/isa/isa.c **** 
 277:../../../src/net/isa/isa.c ****     isa_param.mobile_sync_timeout = 100;
 278:../../../src/net/isa/isa.c ****     isa_param.rx_timeout = 8000;   // 8000 *.125us = 1ms
 279:../../../src/net/isa/isa.c ****     isa_param.tx_guard_time = TX_GUARD_TIME;
 280:../../../src/net/isa/isa.c ****     isa_param.channel = 15;
 281:../../../src/net/isa/isa.c ****     isa_param.mac_addr = 0x1981;
 282:../../../src/net/isa/isa.c **** /*
 283:../../../src/net/isa/isa.c **** for (i = 0; i < ISA_SLOTS_PER_FRAME; i++) {
 284:../../../src/net/isa/isa.c ****         isa_sched[i] = 0;
 285:../../../src/net/isa/isa.c ****     }
 286:../../../src/net/isa/isa.c ****     isa_tdma_rx_mask = 0;
 287:../../../src/net/isa/isa.c ****     isa_tdma_tx_mask = 0;
 288:../../../src/net/isa/isa.c **** */
 289:../../../src/net/isa/isa.c ****     /* Setup the cc2420 chip */
 290:../../../src/net/isa/isa.c ****     rf_init (&isa_rfRxInfo, isa_param.channel, 0x2421, isa_param.mac_addr);
 291:../../../src/net/isa/isa.c **** 
 292:../../../src/net/isa/isa.c ****     AFTER_FIRST_SYNC = 1;
 293:../../../src/net/isa/isa.c **** 
 294:../../../src/net/isa/isa.c ****     /* Setup fisrt hopping channel */
 295:../../../src/net/isa/isa.c ****     #ifdef CHANNEL_HOPPING
 296:../../../src/net/isa/isa.c ****         slowIndex=0;
 297:../../../src/net/isa/isa.c ****         if(id!=1){
 298:../../../src/net/isa/isa.c ****             channelIndex = src_id;
 299:../../../src/net/isa/isa.c ****             currentChannel = slottedPattern[channelIndex];
 300:../../../src/net/isa/isa.c ****         }else{
 301:../../../src/net/isa/isa.c ****             channelIndex = 0;
 302:../../../src/net/isa/isa.c ****             currentChannel = slottedPattern[channelIndex];
 303:../../../src/net/isa/isa.c ****         }
 304:../../../src/net/isa/isa.c ****         isa_set_channel(currentChannel);
 305:../../../src/net/isa/isa.c ****     #endif
 306:../../../src/net/isa/isa.c **** 
 307:../../../src/net/isa/isa.c ****     #ifdef JOIN_PROCESS
 308:../../../src/net/isa/isa.c ****         if(mode==ISA_GATEWAY){
 309:../../../src/net/isa/isa.c ****            for(i=22;i<=24;i++){
 310:../../../src/net/isa/isa.c ****                 isa_tx_info[i].pPayload = join_pkt_buf;
 311:../../../src/net/isa/isa.c ****                     isa_tx_info[i].length = PKT_DATA_START+1;    // pass le pointer
 312:../../../src/net/isa/isa.c ****                     isa_tx_info[i].DHDR = configDHDR();
 313:../../../src/net/isa/isa.c ****                     isa_tx_data_ready |= ((uint32_t) 1 << i);        // set the flag
 314:../../../src/net/isa/isa.c ****            }
 315:../../../src/net/isa/isa.c ****         }
 316:../../../src/net/isa/isa.c ****     #endif
 317:../../../src/net/isa/isa.c **** 
 318:../../../src/net/isa/isa.c ****     resync_times=0;
 319:../../../src/net/isa/isa.c **** 
 320:../../../src/net/isa/isa.c ****     dlmoInit();        //Initialize the  dlmo data structure
 321:../../../src/net/isa/isa.c ****     return NRK_OK;
 322:../../../src/net/isa/isa.c **** }
 323:../../../src/net/isa/isa.c **** 
 324:../../../src/net/isa/isa.c **** void isa_start ()
 325:../../../src/net/isa/isa.c **** {
 442               	.LM37:
 443               	.LFBB6:
 444               	/* prologue: frame size=0 */
 445               	/* prologue end (size=0) */
 326:../../../src/net/isa/isa.c ****     //_isa_clear_sched_cache ();
 327:../../../src/net/isa/isa.c ****     _isa_ready = 2;
 447               	.LM38:
 448 00fc 82E0      		ldi r24,lo8(2)
 449 00fe 8093 0000 		sts _isa_ready,r24
 450               	/* epilogue: frame size=0 */
 451 0102 0895      		ret
 452               	/* epilogue end (size=1) */
 453               	/* function isa_start size 4 (3) */
 455               	.Lscope6:
 457               		.stabd	78,0,0
 460               	.global	configDHDR
 462               	configDHDR:
 463               		.stabd	46,0,0
 328:../../../src/net/isa/isa.c **** }
 329:../../../src/net/isa/isa.c **** 
 330:../../../src/net/isa/isa.c **** /*------------------------------------------------- configDHDR() -----
 331:../../../src/net/isa/isa.c ****          |  Function configDHDR()
 332:../../../src/net/isa/isa.c ****          |
 333:../../../src/net/isa/isa.c ****          |  Purpose:  Configures the DHDR header
 334:../../../src/net/isa/isa.c ****          |
 335:../../../src/net/isa/isa.c ****          |      Bit  - Description
 336:../../../src/net/isa/isa.c ****          |                10   - DL version (Always 01)
 337:../../../src/net/isa/isa.c ****          |                2         - Clock recipient         0 - Not DL clock recipient
 338:../../../src/net/isa/isa.c ****          |                                                                1 - DL clock recipient
 339:../../../src/net/isa/isa.c ****          |                 3         - Include slow hopping offset                 0  - no
 340:../../../src/net/isa/isa.c ****          |                                                                                         
 341:../../../src/net/isa/isa.c ****          |                4          - Include DAUX                                                
 342:../../../src/net/isa/isa.c ****          |                                                                                         
 343:../../../src/net/isa/isa.c ****          |                 5          - Request EUI-64                                        0 - n
 344:../../../src/net/isa/isa.c ****          |                                                                                         
 345:../../../src/net/isa/isa.c ****          |                6         - Signal Quality is ACK                         0 - no
 346:../../../src/net/isa/isa.c ****          |                                                                                         
 347:../../../src/net/isa/isa.c ****          |                7         -         ACK needed                                           
 348:../../../src/net/isa/isa.c ****          |                                                                                         
 349:../../../src/net/isa/isa.c ****          |
 350:../../../src/net/isa/isa.c ****          |                 The configuration of bits in the DHDR header is done based on
 351:../../../src/net/isa/isa.c ****          |                link and neighbor information
 352:../../../src/net/isa/isa.c ****          |
 353:../../../src/net/isa/isa.c ****          |  Parameters:
 354:../../../src/net/isa/isa.c ****          |      (IN)DLMO_LINK * link - pointer to the link data structure that is used for the curr
 355:../../../src/net/isa/isa.c ****          |
 356:../../../src/net/isa/isa.c ****          |  Returns:  DHDR
 357:../../../src/net/isa/isa.c ****          *-------------------------------------------------------------------*/
 358:../../../src/net/isa/isa.c **** int8_t configDHDR(DLMO_LINK * link)
 359:../../../src/net/isa/isa.c **** {
 465               	.LM39:
 466               	.LFBB7:
 467               	/* prologue: frame size=0 */
 468               	/* prologue end (size=0) */
 469 0104 FC01      		movw r30,r24
 360:../../../src/net/isa/isa.c **** 
 361:../../../src/net/isa/isa.c **** 
 362:../../../src/net/isa/isa.c ****     int8_t DHDR = 1;                                        //lower two bits are always 01
 363:../../../src/net/isa/isa.c ****     if(link->linkType == TX_NO_ADV){//request ACK/NACK for a TX link only
 471               	.LM40:
 472 0106 2481      		ldd r18,Z+4
 473 0108 2130      		cpi r18,lo8(1)
 474 010a 01F4      		brne .L24
 476               	.LM41:
 477 010c 81E8      		ldi r24,lo8(-127)
 478 010e 00C0      		rjmp .L26
 479               	.L24:
 480 0110 81E0      		ldi r24,lo8(1)
 481               	.L26:
 364:../../../src/net/isa/isa.c ****         DHDR |= 1<<7;
 365:../../../src/net/isa/isa.c ****     }
 366:../../../src/net/isa/isa.c ****     if(1){//request signal quality in ACK
 367:../../../src/net/isa/isa.c ****         DHDR |= 1<<6;
 368:../../../src/net/isa/isa.c ****     }
 369:../../../src/net/isa/isa.c ****     if(1){//request EUI
 370:../../../src/net/isa/isa.c ****         DHDR |= 1<<5;
 483               	.LM42:
 484 0112 982F      		mov r25,r24
 485 0114 9066      		ori r25,lo8(96)
 371:../../../src/net/isa/isa.c ****     }
 372:../../../src/net/isa/isa.c ****     if(link->linkType == ADV){//include DAUX if this is an ADV link
 487               	.LM43:
 488 0116 2430      		cpi r18,lo8(4)
 489 0118 01F4      		brne .L27
 373:../../../src/net/isa/isa.c ****         DHDR |= 1<<4;
 491               	.LM44:
 492 011a 982F      		mov r25,r24
 493 011c 9067      		ori r25,lo8(112)
 494               	.L27:
 374:../../../src/net/isa/isa.c ****     }
 375:../../../src/net/isa/isa.c ****     if(0){//include slow hopping offset
 376:../../../src/net/isa/isa.c ****         DHDR |= 1<<3;
 377:../../../src/net/isa/isa.c ****     }
 378:../../../src/net/isa/isa.c ****     if(ISAMASK(link->neighbor->typeInfo, CLOCK_PREFERRED) == CLOCK_PREFERRED){ //is clock recipient
 496               	.LM45:
 497 011e 0084      		ldd __tmp_reg__,Z+8
 498 0120 F185      		ldd r31,Z+9
 499 0122 E02D      		mov r30,__tmp_reg__
 500 0124 8585      		ldd r24,Z+13
 501 0126 87FD      		sbrc r24,7
 379:../../../src/net/isa/isa.c ****             /*
 380:../../../src/net/isa/isa.c ****              * The link points to a neighbor that is configured
 381:../../../src/net/isa/isa.c ****              *  for it. This checks if that neighbor is our clock source or not.
 382:../../../src/net/isa/isa.c ****              *  If it is, then we should request for clock correction
 383:../../../src/net/isa/isa.c ****              */
 384:../../../src/net/isa/isa.c ****         DHDR |= 1<<2;
 503               	.LM46:
 504 0128 9460      		ori r25,lo8(4)
 505               	.L29:
 385:../../../src/net/isa/isa.c ****     }
 386:../../../src/net/isa/isa.c ****     return DHDR;
 387:../../../src/net/isa/isa.c **** }
 507               	.LM47:
 508 012a 892F      		mov r24,r25
 509 012c 9927      		clr r25
 510 012e 87FD      		sbrc r24,7
 511 0130 9095      		com r25
 512               	/* epilogue: frame size=0 */
 513 0132 0895      		ret
 514               	/* epilogue end (size=1) */
 515               	/* function configDHDR size 25 (24) */
 520               	.Lscope7:
 522               		.stabd	78,0,0
 526               	.global	configDHR
 528               	configDHR:
 529               		.stabd	46,0,0
 388:../../../src/net/isa/isa.c **** 
 389:../../../src/net/isa/isa.c **** /*------------------------------------------------- configDHR() -----
 390:../../../src/net/isa/isa.c ****          |  Function configDHR()
 391:../../../src/net/isa/isa.c ****          |
 392:../../../src/net/isa/isa.c ****          |  Purpose:  Configures the DHR header
 393:../../../src/net/isa/isa.c ****          |
 394:../../../src/net/isa/isa.c ****          |      Bit  - Description
 395:../../../src/net/isa/isa.c ****          |                10   - Reserved (Always 11)
 396:../../../src/net/isa/isa.c ****          |                2         - Reserved (0)
 397:../../../src/net/isa/isa.c ****          |                 3         - Auxiliary sub-header                         0 - no DAUX
 398:../../../src/net/isa/isa.c ****          |                                                                                         
 399:../../../src/net/isa/isa.c ****          |                54          - ACK/NACK type                                        0 - AC
 400:../../../src/net/isa/isa.c ****          |                                                                                         
 401:../../../src/net/isa/isa.c ****          |                                                                                         
 402:../../../src/net/isa/isa.c ****          |                                                                                         
 403:../../../src/net/isa/isa.c ****          |                 6          - Include slow hopping timeslot    0 - no
 404:../../../src/net/isa/isa.c ****          |                                offset                                                   
 405:../../../src/net/isa/isa.c ****          |
 406:../../../src/net/isa/isa.c ****          |                7         - Include clock correction                 0 - no
 407:../../../src/net/isa/isa.c ****          |                                                                                         
 408:../../../src/net/isa/isa.c ****          |
 409:../../../src/net/isa/isa.c ****          |                 This configures the DHR header based on the incoming messages DHDR heade
 410:../../../src/net/isa/isa.c ****          |                the clock correction bit is set. Rest is yet to be implemented
 411:../../../src/net/isa/isa.c ****          |
 412:../../../src/net/isa/isa.c ****          |  Parameters:
 413:../../../src/net/isa/isa.c ****          |      (IN)clockCorrection - used to decide whether to set the clock correction bit
 414:../../../src/net/isa/isa.c ****          |           (IN)nack                        - used to set the ACK/NACK(54) bits
 415:../../../src/net/isa/isa.c ****          |
 416:../../../src/net/isa/isa.c ****          |  Returns:  DHDR
 417:../../../src/net/isa/isa.c ****          *-------------------------------------------------------------------*/
 418:../../../src/net/isa/isa.c **** int8_t configDHR(uint8_t clockCorrection,uint8_t nack)
 419:../../../src/net/isa/isa.c **** {
 531               	.LM48:
 532               	.LFBB8:
 533               	/* prologue: frame size=0 */
 534               	/* prologue end (size=0) */
 420:../../../src/net/isa/isa.c ****     int8_t DHR = 3;
 421:../../../src/net/isa/isa.c ****     if(clockCorrection){//include clock correction change
 536               	.LM49:
 537 0134 8823      		tst r24
 538 0136 01F0      		breq .L33
 540               	.LM50:
 541 0138 83E8      		ldi r24,lo8(-125)
 542 013a 00C0      		rjmp .L35
 543               	.L33:
 544 013c 83E0      		ldi r24,lo8(3)
 545               	.L35:
 546 013e 6295      		swap r22
 547 0140 607F      		andi r22,0xf0
 548 0142 862B      		or r24,r22
 422:../../../src/net/isa/isa.c ****         DHR |= 1<<7;
 423:../../../src/net/isa/isa.c ****     }
 424:../../../src/net/isa/isa.c ****     if(0){//including slow-hopping timeslot offset
 425:../../../src/net/isa/isa.c ****         DHR |= 1<<6;
 426:../../../src/net/isa/isa.c ****     }
 427:../../../src/net/isa/isa.c ****     DHR |= nack<<4;                //what type of ACK/NACK is this?
 428:../../../src/net/isa/isa.c **** 
 429:../../../src/net/isa/isa.c ****     if(0){//include slow hopping offset
 430:../../../src/net/isa/isa.c ****         DHR |= 1<<3;
 431:../../../src/net/isa/isa.c ****     }
 432:../../../src/net/isa/isa.c **** 
 433:../../../src/net/isa/isa.c ****     return DHR;
 434:../../../src/net/isa/isa.c **** }
 550               	.LM51:
 551 0144 9927      		clr r25
 552 0146 87FD      		sbrc r24,7
 553 0148 9095      		com r25
 554               	/* epilogue: frame size=0 */
 555 014a 0895      		ret
 556               	/* epilogue end (size=1) */
 557               	/* function configDHR size 12 (11) */
 562               	.Lscope8:
 564               		.stabd	78,0,0
 577               	.global	configAdvDAUX
 579               	configAdvDAUX:
 580               		.stabd	46,0,0
 435:../../../src/net/isa/isa.c **** 
 436:../../../src/net/isa/isa.c **** /**
 437:../../../src/net/isa/isa.c ****  * configAdvDAUX()
 438:../../../src/net/isa/isa.c ****  *
 439:../../../src/net/isa/isa.c ****  * Gateway could config the DAUX
 440:../../../src/net/isa/isa.c ****  * DAUX contains superframe and join information
 441:../../../src/net/isa/isa.c ****  *
 442:../../../src/net/isa/isa.c ****  */
 443:../../../src/net/isa/isa.c **** void configAdvDAUX(uint8_t chPattern, uint8_t chIndex, uint8_t sp_period, uint8_t tx_slot1, uint8_t
 444:../../../src/net/isa/isa.c **** {
 582               	.LM52:
 583               	.LFBB9:
 584               	/* prologue: frame size=0 */
 585 014c 8F92      		push r8
 586 014e AF92      		push r10
 587 0150 CF92      		push r12
 588 0152 EF92      		push r14
 589 0154 0F93      		push r16
 590 0156 CF93      		push r28
 591 0158 DF93      		push r29
 592 015a CDB7      		in r28,__SP_L__
 593 015c DEB7      		in r29,__SP_H__
 594               	/* prologue end (size=9) */
 445:../../../src/net/isa/isa.c ****     /*ADVERTISEMENT SELECTION*/
 446:../../../src/net/isa/isa.c ****     DAUX[0]=0; // Advertisement selection, 0 indicates advertisement DAUX
 596               	.LM53:
 597 015e 1092 0000 		sts DAUX,__zero_reg__
 447:../../../src/net/isa/isa.c **** 
 448:../../../src/net/isa/isa.c ****     /*TIME SYNCHRONIZATION*/
 449:../../../src/net/isa/isa.c ****     /* 1-6 bytes are reserved for time synchronization */
 450:../../../src/net/isa/isa.c **** 
 451:../../../src/net/isa/isa.c ****     /*SUPERFRAME INFORMATION*/
 452:../../../src/net/isa/isa.c ****     DAUX[7]=10; // timeslot duration, currently not used.
 599               	.LM54:
 600 0162 9AE0      		ldi r25,lo8(10)
 601 0164 9093 0000 		sts DAUX+7,r25
 453:../../../src/net/isa/isa.c ****     DAUX[8]=0; // reserved for long timeslot duration
 603               	.LM55:
 604 0168 1092 0000 		sts DAUX+8,__zero_reg__
 454:../../../src/net/isa/isa.c ****     DAUX[9]=chPattern; // channel pattern selection
 606               	.LM56:
 607 016c 8093 0000 		sts DAUX+9,r24
 455:../../../src/net/isa/isa.c ****     DAUX[10]=chIndex; // channel index selection
 609               	.LM57:
 610 0170 6093 0000 		sts DAUX+10,r22
 456:../../../src/net/isa/isa.c ****     DAUX[11]=sp_period; // superframe period
 612               	.LM58:
 613 0174 4093 0000 		sts DAUX+11,r20
 457:../../../src/net/isa/isa.c ****     DAUX[12]=0; // reserved for long period situation
 615               	.LM59:
 616 0178 1092 0000 		sts DAUX+12,__zero_reg__
 458:../../../src/net/isa/isa.c ****     /* 13 reserved for superframe cycle starting point
 459:../../../src/net/isa/isa.c ****        14 reserved of the length of slow hopping period
 460:../../../src/net/isa/isa.c ****        15 and 16 reserved for channel hopping channel map for spectrum management
 461:../../../src/net/isa/isa.c ****     */
 462:../../../src/net/isa/isa.c **** 
 463:../../../src/net/isa/isa.c ****     /*JOIN INFORMATION*/
 464:../../../src/net/isa/isa.c ****     /* 17 reserved for Join backoff and timeout
 465:../../../src/net/isa/isa.c ****        18 reserved for Indicates fields that are transmitted
 466:../../../src/net/isa/isa.c ****     */
 467:../../../src/net/isa/isa.c ****     DAUX[19]=tx_slot1;  //TX slot 1
 618               	.LM60:
 619 017c 2093 0000 		sts DAUX+19,r18
 468:../../../src/net/isa/isa.c ****     DAUX[20]=tx_slot2;  //TX slot 2
 621               	.LM61:
 622 0180 0093 0000 		sts DAUX+20,r16
 469:../../../src/net/isa/isa.c ****     DAUX[21]=tx_slot3;  //TX slot 3
 624               	.LM62:
 625 0184 E092 0000 		sts DAUX+21,r14
 470:../../../src/net/isa/isa.c ****     DAUX[22]=tx_slot4;  //TX slot 4
 627               	.LM63:
 628 0188 C092 0000 		sts DAUX+22,r12
 471:../../../src/net/isa/isa.c ****     DAUX[23]=rx_slot1;  //RX slot 1
 630               	.LM64:
 631 018c A092 0000 		sts DAUX+23,r10
 472:../../../src/net/isa/isa.c ****     DAUX[24]=rx_slot2;  //RX slot 2
 633               	.LM65:
 634 0190 8092 0000 		sts DAUX+24,r8
 473:../../../src/net/isa/isa.c ****     DAUX[25]=rx_slot3;  //RX slot 3
 636               	.LM66:
 637 0194 8A85      		ldd r24,Y+10
 638 0196 8093 0000 		sts DAUX+25,r24
 474:../../../src/net/isa/isa.c ****     DAUX[26]=rx_slot4;  //RX slot 4
 640               	.LM67:
 641 019a 8B85      		ldd r24,Y+11
 642 019c 8093 0000 		sts DAUX+26,r24
 643               	/* epilogue: frame size=0 */
 644 01a0 DF91      		pop r29
 645 01a2 CF91      		pop r28
 646 01a4 0F91      		pop r16
 647 01a6 EF90      		pop r14
 648 01a8 CF90      		pop r12
 649 01aa AF90      		pop r10
 650 01ac 8F90      		pop r8
 651 01ae 0895      		ret
 652               	/* epilogue end (size=8) */
 653               	/* function configAdvDAUX size 50 (33) */
 657               	.Lscope9:
 659               		.stabd	78,0,0
 661               	.global	isa_rx_pkt_check
 663               	isa_rx_pkt_check:
 664               		.stabd	46,0,0
 475:../../../src/net/isa/isa.c **** 
 476:../../../src/net/isa/isa.c ****     /*INTEGRETY CHECK*/
 477:../../../src/net/isa/isa.c ****     /* 27 and 28 are reserved for Integrety check*/
 478:../../../src/net/isa/isa.c **** }
 479:../../../src/net/isa/isa.c **** 
 480:../../../src/net/isa/isa.c **** /**
 481:../../../src/net/isa/isa.c ****  * isa_check_rx_status()
 482:../../../src/net/isa/isa.c ****  *
 483:../../../src/net/isa/isa.c ****  * This function returns if there is a packet in the link layer
 484:../../../src/net/isa/isa.c ****  * rx buffer.  Once a packet has been received, it should be quickly
 485:../../../src/net/isa/isa.c ****  * processed or moved and then rtl_release_rx_packet() should be called.
 486:../../../src/net/isa/isa.c ****  * rtl_release_rx_packet() then resets the value of rtl_check_rx_status()
 487:../../../src/net/isa/isa.c ****  *
 488:../../../src/net/isa/isa.c ****  * Returns: 1 if a new packet was received, 0 otherwise
 489:../../../src/net/isa/isa.c ****  */
 490:../../../src/net/isa/isa.c **** int8_t isa_rx_pkt_check()
 491:../../../src/net/isa/isa.c **** {
 666               	.LM68:
 667               	.LFBB10:
 668               	/* prologue: frame size=0 */
 669               	/* prologue end (size=0) */
 670 01b0 8091 0000 		lds r24,isa_rx_data_ready
 492:../../../src/net/isa/isa.c ****     return isa_rx_data_ready;
 493:../../../src/net/isa/isa.c **** }
 672               	.LM69:
 673 01b4 9927      		clr r25
 674 01b6 87FD      		sbrc r24,7
 675 01b8 9095      		com r25
 676               	/* epilogue: frame size=0 */
 677 01ba 0895      		ret
 678               	/* epilogue end (size=1) */
 679               	/* function isa_rx_pkt_check size 6 (5) */
 681               	.Lscope10:
 683               		.stabd	78,0,0
 685               	.global	isa_rx_pkt_release
 687               	isa_rx_pkt_release:
 688               		.stabd	46,0,0
 494:../../../src/net/isa/isa.c **** 
 495:../../../src/net/isa/isa.c **** /**
 496:../../../src/net/isa/isa.c ****  * isa_rx_pkt_get()
 497:../../../src/net/isa/isa.c ****  *
 498:../../../src/net/isa/isa.c ****  * This function returns the rx buffer point. It should be called
 499:../../../src/net/isa/isa.c ****  * once a packet is received and must be followed by isa_release_rx_packet().
 500:../../../src/net/isa/isa.c ****  * isa_release_rx_packet() then resets the value of isa_check_rx_status().
 501:../../../src/net/isa/isa.c ****  *
 502:../../../src/net/isa/isa.c ****  * Returns: rx buffer point
 503:../../../src/net/isa/isa.c ****  */
 504:../../../src/net/isa/isa.c **** uint8_t* isa_rx_pkt_get (uint8_t *len, int8_t *rssi)
 505:../../../src/net/isa/isa.c **** {
 506:../../../src/net/isa/isa.c ****     if(isa_rx_pkt_check()==0){
 507:../../../src/net/isa/isa.c ****         *len=0;
 508:../../../src/net/isa/isa.c ****         *rssi=0;
 509:../../../src/net/isa/isa.c ****         return NULL;
 510:../../../src/net/isa/isa.c ****     }
 511:../../../src/net/isa/isa.c ****     *len=isa_rfRxInfo.length;
 512:../../../src/net/isa/isa.c ****     *rssi=isa_rfRxInfo.rssi;
 513:../../../src/net/isa/isa.c **** 
 514:../../../src/net/isa/isa.c **** 
 515:../../../src/net/isa/isa.c ****     return isa_rfRxInfo.pPayload;
 516:../../../src/net/isa/isa.c **** }
 517:../../../src/net/isa/isa.c **** 
 518:../../../src/net/isa/isa.c **** /**
 519:../../../src/net/isa/isa.c ****  * _isa_rx()
 520:../../../src/net/isa/isa.c ****  *
 521:../../../src/net/isa/isa.c ****  * This is the low level RX packet function.  It will read in
 522:../../../src/net/isa/isa.c ****  * a packet and buffer it in the link layer's single RX buffer.
 523:../../../src/net/isa/isa.c ****  * This buffer can be checked with rtl_check_rx_status() and
 524:../../../src/net/isa/isa.c ****  * released with rtl_release_rx_packet().  If the buffer has not
 525:../../../src/net/isa/isa.c ****  * been released and a new packet arrives, the packet will be lost.
 526:../../../src/net/isa/isa.c ****  * This function is only called from the timer interrupt routine.
 527:../../../src/net/isa/isa.c ****  *
 528:../../../src/net/isa/isa.c ****  * Arguments: slot is the current slot that is actively in RX mode.
 529:../../../src/net/isa/isa.c ****  */
 530:../../../src/net/isa/isa.c **** 
 531:../../../src/net/isa/isa.c **** void _isa_rx (DLMO_LINK * link, uint8_t slot)
 532:../../../src/net/isa/isa.c **** {
 533:../../../src/net/isa/isa.c ****         uint8_t DHDR;  // Data link layer header sub-header, currently used as ACK control
 534:../../../src/net/isa/isa.c ****         NEIGHBOR_TABLE* neighborTable;
 535:../../../src/net/isa/isa.c ****         CONFIG_NEIGHBOR* configNeighbor;
 536:../../../src/net/isa/isa.c ****         CONFIG_GRAPH* configGraph;
 537:../../../src/net/isa/isa.c ****         CONFIG_LINK* configLink;
 538:../../../src/net/isa/isa.c ****         CANDIDATE* candidate;
 539:../../../src/net/isa/isa.c ****         uint8_t i;
 540:../../../src/net/isa/isa.c **** //putchar('R');
 541:../../../src/net/isa/isa.c ****     uint8_t n;
 542:../../../src/net/isa/isa.c ****     uint32_t node_mask;
 543:../../../src/net/isa/isa.c ****     uint16_t destAddr;
 544:../../../src/net/isa/isa.c ****     volatile uint8_t timeout;
 545:../../../src/net/isa/isa.c ****     MESSAGE* message;
 546:../../../src/net/isa/isa.c ****     bool TransmitLinkPresent = false;
 547:../../../src/net/isa/isa.c ****     uint8_t nack = 0;// NACK
 548:../../../src/net/isa/isa.c ****     #ifdef LED_DEBUG
 549:../../../src/net/isa/isa.c ****         nrk_led_set(1);
 550:../../../src/net/isa/isa.c ****     #endif
 551:../../../src/net/isa/isa.c ****     rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel
 552:../../../src/net/isa/isa.c ****     rf_polling_rx_on ();
 553:../../../src/net/isa/isa.c ****     nrk_gpio_set(NRK_DEBUG_2);
 554:../../../src/net/isa/isa.c ****     // Timing for waiting for sfd
 555:../../../src/net/isa/isa.c ****     timeout = _nrk_os_timer_get();
 556:../../../src/net/isa/isa.c ****     timeout+=4;  // 4ms
 557:../../../src/net/isa/isa.c ****     n = 0;
 558:../../../src/net/isa/isa.c ****     //nrk_gpio_set(NRK_DEBUG_3);
 559:../../../src/net/isa/isa.c ****     while ((n = rf_rx_check_sfd()) == 0) {
 560:../../../src/net/isa/isa.c ****         if (_nrk_os_timer_get() > timeout) {
 561:../../../src/net/isa/isa.c ****             //spend too much time on waiting for a pkt's arrival
 562:../../../src/net/isa/isa.c ****                 nrk_gpio_clr(NRK_DEBUG_2);
 563:../../../src/net/isa/isa.c **** 
 564:../../../src/net/isa/isa.c ****             rf_rx_off ();
 565:../../../src/net/isa/isa.c ****             #ifdef LED_DEBUG
 566:../../../src/net/isa/isa.c ****                 nrk_led_clr(1);
 567:../../../src/net/isa/isa.c ****             #endif
 568:../../../src/net/isa/isa.c ****             #ifdef RX_DEBUG
 569:../../../src/net/isa/isa.c ****         //         nrk_gpio_set(NRK_DEBUG_2);
 570:../../../src/net/isa/isa.c ****         //        nrk_gpio_clr(NRK_DEBUG_2);
 571:../../../src/net/isa/isa.c ****                 //putchar('v');
 572:../../../src/net/isa/isa.c ****                 //printf("%d", slot);
 573:../../../src/net/isa/isa.c ****                 //printf("sfd times out.\n\r");
 574:../../../src/net/isa/isa.c ****             #endif
 575:../../../src/net/isa/isa.c ****         //        packetsLost++;
 576:../../../src/net/isa/isa.c ****                 return;
 577:../../../src/net/isa/isa.c ****         }
 578:../../../src/net/isa/isa.c ****     }
 579:../../../src/net/isa/isa.c **** //printf("%d\n\r",_nrk_high_speed_timer_get());
 580:../../../src/net/isa/isa.c ****     // sfd received, start receiving packet and record start time
 581:../../../src/net/isa/isa.c ****     rx_start_time = _nrk_high_speed_timer_get();
 582:../../../src/net/isa/isa.c ****     //nrk_gpio_set(NRK_DEBUG_1);
 583:../../../src/net/isa/isa.c ****     //       nrk_gpio_clr(NRK_DEBUG_1);
 584:../../../src/net/isa/isa.c ****     // Timing for waiting for finishing packet receiving
 585:../../../src/net/isa/isa.c ****     timeout = _nrk_os_timer_get();
 586:../../../src/net/isa/isa.c ****     timeout += 5;               // 5ms
 587:../../../src/net/isa/isa.c ****     if (n != 0) {
 588:../../../src/net/isa/isa.c ****         n = 0;
 589:../../../src/net/isa/isa.c ****        // printf("Packet on its way\n\r");
 590:../../../src/net/isa/isa.c ****         while ((n = rf_polling_rx_packet (false,128)) == 0) {
 591:../../../src/net/isa/isa.c ****             //printf("%d\n\r",_nrk_os_timer_get());
 592:../../../src/net/isa/isa.c ****             if (_nrk_os_timer_get () > timeout) {
 593:../../../src/net/isa/isa.c ****                 #ifdef RX_DEBUG
 594:../../../src/net/isa/isa.c ****                     printf("packet is too long, times out.\n\r");
 595:../../../src/net/isa/isa.c ****                 #endif
 596:../../../src/net/isa/isa.c ****                 //    packetsLost++;
 597:../../../src/net/isa/isa.c ****                     // spend too much time on receiving pkt.
 598:../../../src/net/isa/isa.c ****                 return;          // huge timeout as fail safe
 599:../../../src/net/isa/isa.c ****             }
 600:../../../src/net/isa/isa.c ****         }
 601:../../../src/net/isa/isa.c ****     }
 602:../../../src/net/isa/isa.c ****     nrk_gpio_clr(NRK_DEBUG_2);
 603:../../../src/net/isa/isa.c ****    // printf("%d", currentChannel);
 604:../../../src/net/isa/isa.c ****     rf_rx_off ();
 605:../../../src/net/isa/isa.c **** 
 606:../../../src/net/isa/isa.c ****     if  (n !=1){        //size of packet must have been wrong
 607:../../../src/net/isa/isa.c ****         putchar('b');
 608:../../../src/net/isa/isa.c ****         printf("Channel %d\r\n",currentChannel);
 609:../../../src/net/isa/isa.c **** //        packetsLost++;
 610:../../../src/net/isa/isa.c **** }
 611:../../../src/net/isa/isa.c **** 
 612:../../../src/net/isa/isa.c ****     if (n == 1) {// successfully received packet
 613:../../../src/net/isa/isa.c ****             rxCount++;
 614:../../../src/net/isa/isa.c ****             nrk_led_toggle(BLUE_LED);
 615:../../../src/net/isa/isa.c ****             //If I am the destination
 616:../../../src/net/isa/isa.c ****             destAddr = isa_rfRxInfo.pPayload[DEST_INDEX];
 617:../../../src/net/isa/isa.c ****         //potential problem: if repeater or recipient receives noise, the DHDR would be changed. An
 618:../../../src/net/isa/isa.c ****         //if(isa_node_mode != ISA_GATEWAY)
 619:../../../src/net/isa/isa.c ****             DHDR = isa_rfRxInfo.pPayload[DHDR_INDEX];
 620:../../../src/net/isa/isa.c ****             message = &isa_rfRxInfo.pPayload[PKT_DATA_START];
 621:../../../src/net/isa/isa.c **** 
 622:../../../src/net/isa/isa.c ****         #ifdef RX_DEBUG
 623:../../../src/net/isa/isa.c ****            // printf("Repeater slot = %d, local slot is %d.\n\r", isa_rfRxInfo.pPayload[SLOT_INDEX]
 624:../../../src/net/isa/isa.c ****         #endif RX_DEBUG
 625:../../../src/net/isa/isa.c ****         nrk_event_signal(isa_rx_pkt_signal);
 626:../../../src/net/isa/isa.c **** 
 627:../../../src/net/isa/isa.c ****         node_mask = ((uint32_t) 1) << isa_rfRxInfo.pPayload[SRC_INDEX];
 628:../../../src/net/isa/isa.c **** 
 629:../../../src/net/isa/isa.c ****         if(DHDR & (1<<4))// if advertisement, add into candidate table and return
 630:../../../src/net/isa/isa.c ****         {
 631:../../../src/net/isa/isa.c ****                 //printf("S:%d\r\n",isa_rfRxInfo.pPayload[SRC_INDEX]);
 632:../../../src/net/isa/isa.c ****                 //putchar('w');
 633:../../../src/net/isa/isa.c ****                  if (addCandidate(isa_rfRxInfo.pPayload[SRC_INDEX]) == ISA_ERROR){
 634:../../../src/net/isa/isa.c ****                          printIsaError();
 635:../../../src/net/isa/isa.c ****                  }
 636:../../../src/net/isa/isa.c ****                 isa_rx_pkt_release();
 637:../../../src/net/isa/isa.c ****                 return;
 638:../../../src/net/isa/isa.c ****                 //printf("Received advertisement \r\n");
 639:../../../src/net/isa/isa.c ****         }
 640:../../../src/net/isa/isa.c ****         else if(DHDR & (1<<7)){        //if ACK is required
 641:../../../src/net/isa/isa.c ****                 txCount++;
 642:../../../src/net/isa/isa.c ****             // Transmit ACK packet
 643:../../../src/net/isa/isa.c **** 
 644:../../../src/net/isa/isa.c ****                 //If the packet is meant for me or to a node I have a transmit link to, I send an a
 645:../../../src/net/isa/isa.c ****                 if((TransmitLinkPresent=isTransmitLinkPresent(isa_rfRxInfo.pPayload)) || (dmo.dlAdd
 646:../../../src/net/isa/isa.c ****                 {
 647:../../../src/net/isa/isa.c ****                         nack = 0;
 648:../../../src/net/isa/isa.c ****                 }
 649:../../../src/net/isa/isa.c ****                 else
 650:../../../src/net/isa/isa.c ****                 {
 651:../../../src/net/isa/isa.c ****                         nack = 3; // NACK1 because of difficulties downstream
 652:../../../src/net/isa/isa.c ****                 }
 653:../../../src/net/isa/isa.c ****             DHR = configDHR(DHDR & (1<<2),nack); //configure DHRto include clock correction based o
 654:../../../src/net/isa/isa.c ****           //  printf("%d", DHR);
 655:../../../src/net/isa/isa.c ****             isa_ack_buf[DHR_INDEX]= DHR;
 656:../../../src/net/isa/isa.c ****             #ifdef ACK_DEBUG
 657:../../../src/net/isa/isa.c ****                 //printf("DHDR is %x.\n\r",DHDR);
 658:../../../src/net/isa/isa.c ****             #endif
 659:../../../src/net/isa/isa.c ****             isa_ack_tx.pPayload = isa_ack_buf;
 660:../../../src/net/isa/isa.c ****             if (DHDR & (1<<2)) { //reply ACK with time offsetX
 661:../../../src/net/isa/isa.c ****                     //            putchar ('K');
 662:../../../src/net/isa/isa.c ****                             offsetX = rx_start_time - slot_start_time;
 663:../../../src/net/isa/isa.c ****                             //printf("slot_start_time is %d,rx_start_time is %d.\n\r",slot_start_ti
 664:../../../src/net/isa/isa.c ****                             uint8_t temp1,temp2;
 665:../../../src/net/isa/isa.c ****                             temp1 = (offsetX & 0xFF00)>>8;
 666:../../../src/net/isa/isa.c ****                             isa_ack_buf[OFFSET_HIGH]=temp1;
 667:../../../src/net/isa/isa.c ****                             temp2 = (offsetX & 0x00FF);
 668:../../../src/net/isa/isa.c ****                              isa_ack_buf[OFFSET_LOW]=temp2;
 669:../../../src/net/isa/isa.c ****                             #ifdef ACK_DEBUG
 670:../../../src/net/isa/isa.c ****                               //  printf("offsetX is %d\n\r", offsetX);
 671:../../../src/net/isa/isa.c ****                             #endif
 672:../../../src/net/isa/isa.c ****                             //isa_ack_tx.length = PKT_DATA_START + 1;
 673:../../../src/net/isa/isa.c ****                             isa_ack_tx.length = 4;
 674:../../../src/net/isa/isa.c ****                         }
 675:../../../src/net/isa/isa.c **** 
 676:../../../src/net/isa/isa.c ****             else
 677:../../../src/net/isa/isa.c ****             { // recipient , only reply explicit ACK
 678:../../../src/net/isa/isa.c ****                 //isa_ack_tx.length = PKT_DATA_START-1;
 679:../../../src/net/isa/isa.c ****                 isa_ack_tx.length = 2;
 680:../../../src/net/isa/isa.c ****                 //putchar ('C');
 681:../../../src/net/isa/isa.c ****                 //putchar('\n');
 682:../../../src/net/isa/isa.c ****             }
 683:../../../src/net/isa/isa.c ****            nrk_gpio_set(NRK_DEBUG_2);
 684:../../../src/net/isa/isa.c ****             rf_tx_tdma_packet (&isa_ack_tx,slot_start_time,isa_param.tx_guard_time,&tx_start_time);
 685:../../../src/net/isa/isa.c ****             nrk_gpio_clr(NRK_DEBUG_2);
 686:../../../src/net/isa/isa.c ****            // printf ("Tx :%d| ", isa_rfRxInfo.length);
 687:../../../src/net/isa/isa.c **** 
 688:../../../src/net/isa/isa.c ****         }
 689:../../../src/net/isa/isa.c **** //This will be a normal TX packet if we have reached this point
 690:../../../src/net/isa/isa.c ****         //If it is a neighbor table report then we can forward it to our clock source
 691:../../../src/net/isa/isa.c ****         //If I am the gateway then I don't forward it to anyone
 692:../../../src/net/isa/isa.c ****         if (message->type == DUMMY_PAYLOAD){
 693:../../../src/net/isa/isa.c ****         if (destAddr == dmo.dlAddress) {
 694:../../../src/net/isa/isa.c ****                 dd_data_indication(isa_rfRxInfo.pPayload[SRC_INDEX] , destAddr,0,0, 0, 0, isa_rfRxI
 695:../../../src/net/isa/isa.c ****         }
 696:../../../src/net/isa/isa.c ****         else{
 697:../../../src/net/isa/isa.c ****                 //if the dest address is not mine, then add into the queue to forward provided we h
 698:../../../src/net/isa/isa.c ****                 // configured in the message then we should at least have a link to the dest neighb
 699:../../../src/net/isa/isa.c **** //                if (isTransmitLinkPresent(isa_rfRxInfo.pPayload)){
 700:../../../src/net/isa/isa.c ****                         //if yes, then place the message on the Queue again
 701:../../../src/net/isa/isa.c ****                 if(TransmitLinkPresent == true){
 702:../../../src/net/isa/isa.c ****                 enQueue (destAddr, 0, isa_rfRxInfo.length, isa_rfRxInfo.pPayload, NULL);
 703:../../../src/net/isa/isa.c ****                         printf("packet forwarded to %d\r\n", destAddr);
 704:../../../src/net/isa/isa.c ****                                   isa_rx_pkt_release();
 705:../../../src/net/isa/isa.c ****                 }
 706:../../../src/net/isa/isa.c ****                 else{
 707:../../../src/net/isa/isa.c ****                         printf("No Transmit Link for this test message for %d - dropped\r\n", destA
 708:../../../src/net/isa/isa.c ****                         isa_rx_pkt_release();
 709:../../../src/net/isa/isa.c ****                 }
 710:../../../src/net/isa/isa.c ****         }
 711:../../../src/net/isa/isa.c ****         }
 712:../../../src/net/isa/isa.c **** 
 713:../../../src/net/isa/isa.c **** 
 714:../../../src/net/isa/isa.c ****            else if (message->type==ADD_NEIGHBOR)
 715:../../../src/net/isa/isa.c ****            {
 716:../../../src/net/isa/isa.c ****               // printf("Received configure Neighbor data form %d\r\n",isa_rfRxInfo.pPayload[SRC_IN
 717:../../../src/net/isa/isa.c ****                if(destAddr == dmo.dlAddress)
 718:../../../src/net/isa/isa.c ****                {
 719:../../../src/net/isa/isa.c ****                        configNeighbor = &message->data;
 720:../../../src/net/isa/isa.c ****                        addNeighbor(configNeighbor->neighborId,0,0,0,false,0,0,0);
 721:../../../src/net/isa/isa.c ****                        isa_rx_pkt_release();
 722:../../../src/net/isa/isa.c ****                        setNewDisplay(12, destAddr-1);
 723:../../../src/net/isa/isa.c ****                }
 724:../../../src/net/isa/isa.c ****                else
 725:../../../src/net/isa/isa.c ****                {
 726:../../../src/net/isa/isa.c ****                    //if (isTransmitLinkPresent(isa_rfRxInfo.pPayload)){
 727:../../../src/net/isa/isa.c ****                        if(TransmitLinkPresent == true){
 728:../../../src/net/isa/isa.c ****                                //if yes, then place the message on the Queue again
 729:../../../src/net/isa/isa.c ****                                enQueue (destAddr, 0, isa_rfRxInfo.length, isa_rfRxInfo.pPayload, NU
 730:../../../src/net/isa/isa.c ****                                // printf("packet forwarded to %d", destAddr);
 731:../../../src/net/isa/isa.c ****                                isa_rx_pkt_release();
 732:../../../src/net/isa/isa.c ****                                setNewDisplay(12, destAddr-1);
 733:../../../src/net/isa/isa.c ****                            }
 734:../../../src/net/isa/isa.c ****                            else{
 735:../../../src/net/isa/isa.c ****                                printf("No Transmit Link for Add Neighbor Message for %d- dropped\r\
 736:../../../src/net/isa/isa.c ****                                isa_rx_pkt_release();
 737:../../../src/net/isa/isa.c ****                            }
 738:../../../src/net/isa/isa.c ****                }
 739:../../../src/net/isa/isa.c **** 
 740:../../../src/net/isa/isa.c ****            }
 741:../../../src/net/isa/isa.c ****            else if(message->type==ADD_GRAPH)
 742:../../../src/net/isa/isa.c ****            {
 743:../../../src/net/isa/isa.c ****               // printf("Received configure Graph data form %d\r\n",isa_rfRxInfo.pPayload[SRC_INDEX
 744:../../../src/net/isa/isa.c ****                if(destAddr == dmo.dlAddress)
 745:../../../src/net/isa/isa.c ****                {
 746:../../../src/net/isa/isa.c ****                        configGraph = &message->data;
 747:../../../src/net/isa/isa.c ****                        addGraph(configGraph->graphId,configGraph->neighborCount,configGraph->neigh1
 748:../../../src/net/isa/isa.c ****                        isa_rx_pkt_release();
 749:../../../src/net/isa/isa.c ****                        setNewDisplay(9, destAddr-1);
 750:../../../src/net/isa/isa.c ****                }
 751:../../../src/net/isa/isa.c ****                else
 752:../../../src/net/isa/isa.c ****                {
 753:../../../src/net/isa/isa.c **** 
 754:../../../src/net/isa/isa.c ****                    //if (isTransmitLinkPresent(isa_rfRxInfo.pPayload)){
 755:../../../src/net/isa/isa.c ****                        if(TransmitLinkPresent == true){
 756:../../../src/net/isa/isa.c ****                                //if yes, then place the message on the Queue again
 757:../../../src/net/isa/isa.c ****                                enQueue (destAddr, 0, isa_rfRxInfo.length, isa_rfRxInfo.pPayload, NU
 758:../../../src/net/isa/isa.c ****                                // printf("packet forwarded to %d", destAddr);
 759:../../../src/net/isa/isa.c ****                                      isa_rx_pkt_release();
 760:../../../src/net/isa/isa.c ****                                      setNewDisplay(9, destAddr-1);
 761:../../../src/net/isa/isa.c ****                            }
 762:../../../src/net/isa/isa.c ****                            else{
 763:../../../src/net/isa/isa.c ****                                printf("No Transmit link for graph config for %d- dropped", destAddr
 764:../../../src/net/isa/isa.c ****                                isa_rx_pkt_release();
 765:../../../src/net/isa/isa.c ****                            }
 766:../../../src/net/isa/isa.c **** 
 767:../../../src/net/isa/isa.c ****                }
 768:../../../src/net/isa/isa.c ****            }
 769:../../../src/net/isa/isa.c ****            else if(message->type==ADD_LINK)
 770:../../../src/net/isa/isa.c ****            {
 771:../../../src/net/isa/isa.c ****               // printf("Received configure Link data form %d\r\n",isa_rfRxInfo.pPayload[SRC_INDEX]
 772:../../../src/net/isa/isa.c ****                if(destAddr == dmo.dlAddress)
 773:../../../src/net/isa/isa.c ****                {
 774:../../../src/net/isa/isa.c ****                    configLink = &message->data;
 775:../../../src/net/isa/isa.c ****                    addLink(configLink->slotNumber,configLink->neighborId,configLink->graphId,config
 776:../../../src/net/isa/isa.c ****                    isa_rx_pkt_release();
 777:../../../src/net/isa/isa.c ****                    setNewDisplay(11, destAddr-1);
 778:../../../src/net/isa/isa.c ****                }
 779:../../../src/net/isa/isa.c ****                else
 780:../../../src/net/isa/isa.c ****                {
 781:../../../src/net/isa/isa.c ****                   // if (isTransmitLinkPresent(isa_rfRxInfo.pPayload)){
 782:../../../src/net/isa/isa.c ****                        if(TransmitLinkPresent == true){
 783:../../../src/net/isa/isa.c ****                                        //if yes, then place the message on the Queue again
 784:../../../src/net/isa/isa.c ****                                        enQueue (destAddr, 0, isa_rfRxInfo.length, isa_rfRxInfo.pPay
 785:../../../src/net/isa/isa.c ****                                        // printf("packet forwarded to %d", destAddr);
 786:../../../src/net/isa/isa.c ****                                              isa_rx_pkt_release();
 787:../../../src/net/isa/isa.c ****                                              setNewDisplay(11, destAddr-1);
 788:../../../src/net/isa/isa.c ****                                    }
 789:../../../src/net/isa/isa.c ****                                    else{
 790:../../../src/net/isa/isa.c ****                                        printf("No Transmit Link for Add link message for %d- droppe
 791:../../../src/net/isa/isa.c ****                                        isa_rx_pkt_release();
 792:../../../src/net/isa/isa.c ****                                    }
 793:../../../src/net/isa/isa.c ****                }
 794:../../../src/net/isa/isa.c ****            }
 795:../../../src/net/isa/isa.c ****         else if (message->type==NEIGHBOR_TABLE_REPORT){        //if it is a neighbor table report,
 796:../../../src/net/isa/isa.c ****                 if (isa_node_mode==ISA_GATEWAY){
 797:../../../src/net/isa/isa.c **** 
 798:../../../src/net/isa/isa.c ****                         //array[SRC_INDEX] |= ((uint16_t)1<<candidate->neighbor);
 799:../../../src/net/isa/isa.c ****                         printf ("Received Candidate Table frm %d\r\n",isa_rfRxInfo.pPayload[SRC_IND
 800:../../../src/net/isa/isa.c ****                         //need to print the neighbor info now
 801:../../../src/net/isa/isa.c ****                         neighborTable = &message->data; //cast to neighbor Table
 802:../../../src/net/isa/isa.c ****                         candidate = &neighborTable->candidate;
 803:../../../src/net/isa/isa.c ****                         adjacencyMatrix[isa_rfRxInfo.pPayload[SRC_INDEX]] = 0;
 804:../../../src/net/isa/isa.c ****                         for (i = 0; i < neighborTable->numberOfNeighbors; i++){
 805:../../../src/net/isa/isa.c ****                                 adjacencyMatrix[isa_rfRxInfo.pPayload[SRC_INDEX]] |= ((uint16_t)1<<
 806:../../../src/net/isa/isa.c ****                                 //printf ("\t%d", candidate->neighbor);
 807:../../../src/net/isa/isa.c ****                                 candidate++;
 808:../../../src/net/isa/isa.c ****                         }
 809:../../../src/net/isa/isa.c ****                         putchar('\n');
 810:../../../src/net/isa/isa.c ****                         putchar('\r');
 811:../../../src/net/isa/isa.c ****                         putchar('n');
 812:../../../src/net/isa/isa.c ****                           isa_rx_pkt_release();
 813:../../../src/net/isa/isa.c ****                 }
 814:../../../src/net/isa/isa.c ****                 else{        // if I am not the gateway, forward to my clock source
 815:../../../src/net/isa/isa.c ****                          enQueue (isa_clk_src_id, 0, isa_rfRxInfo.length, isa_rfRxInfo.pPayload, NU
 816:../../../src/net/isa/isa.c ****                           isa_rx_pkt_release();
 817:../../../src/net/isa/isa.c ****                           setNewDisplay(13, isa_rfRxInfo.pPayload[SRC_INDEX]-1);
 818:../../../src/net/isa/isa.c **** 
 819:../../../src/net/isa/isa.c ****                 }
 820:../../../src/net/isa/isa.c ****         }
 821:../../../src/net/isa/isa.c ****         else if(message->type==FLUSH_CANDIDATE_TABLE)
 822:../../../src/net/isa/isa.c ****         {
 823:../../../src/net/isa/isa.c ****                 printf("Received flush candidate table %d\r\n",isa_rfRxInfo.pPayload[SRC_INDEX]);
 824:../../../src/net/isa/isa.c ****                                if(destAddr == dmo.dlAddress)
 825:../../../src/net/isa/isa.c ****                                {
 826:../../../src/net/isa/isa.c ****                                   flushCandidateEntries();
 827:../../../src/net/isa/isa.c ****                                    isa_rx_pkt_release();
 828:../../../src/net/isa/isa.c ****                                }
 829:../../../src/net/isa/isa.c ****                                else
 830:../../../src/net/isa/isa.c ****                                {
 831:../../../src/net/isa/isa.c ****                                    if (isTransmitLinkPresent(isa_rfRxInfo.pPayload)){
 832:../../../src/net/isa/isa.c ****                                                        //if yes, then place the message on the Queu
 833:../../../src/net/isa/isa.c ****                                                        enQueue (destAddr, 0, isa_rfRxInfo.length, i
 834:../../../src/net/isa/isa.c ****                                                        // printf("packet forwarded to %d", destAddr
 835:../../../src/net/isa/isa.c ****                                                              isa_rx_pkt_release();
 836:../../../src/net/isa/isa.c ****                                                    }
 837:../../../src/net/isa/isa.c ****                                                    else{
 838:../../../src/net/isa/isa.c ****                                                        printf("No Transmit link for Flush message f
 839:../../../src/net/isa/isa.c ****                                                        isa_rx_pkt_release();
 840:../../../src/net/isa/isa.c ****                                                    }
 841:../../../src/net/isa/isa.c ****                                }
 842:../../../src/net/isa/isa.c ****         }
 843:../../../src/net/isa/isa.c ****         else printf ("Unknown message type\r\n");
 844:../../../src/net/isa/isa.c **** 
 845:../../../src/net/isa/isa.c **** //nrk_gpio_clr(NRK_DEBUG_3);
 846:../../../src/net/isa/isa.c **** 
 847:../../../src/net/isa/isa.c ****     }
 848:../../../src/net/isa/isa.c ****     #ifdef LED_DEBUG
 849:../../../src/net/isa/isa.c ****         nrk_led_clr (1);
 850:../../../src/net/isa/isa.c ****     #endif
 851:../../../src/net/isa/isa.c **** }
 852:../../../src/net/isa/isa.c **** 
 853:../../../src/net/isa/isa.c **** /**
 854:../../../src/net/isa/isa.c ****  * isa_release_rx_packet()
 855:../../../src/net/isa/isa.c ****  *
 856:../../../src/net/isa/isa.c ****  * This function releases the link layer's hold on the rx buffer.
 857:../../../src/net/isa/isa.c ****  * This must be called after a packet is received before a new
 858:../../../src/net/isa/isa.c ****  * packet can be buffered!  This should ideally be done by the
 859:../../../src/net/isa/isa.c ****  * network layer.
 860:../../../src/net/isa/isa.c ****  *
 861:../../../src/net/isa/isa.c ****  */
 862:../../../src/net/isa/isa.c **** 
 863:../../../src/net/isa/isa.c **** void isa_rx_pkt_release()
 864:../../../src/net/isa/isa.c **** {
 690               	.LM70:
 691               	.LFBB11:
 692               	/* prologue: frame size=0 */
 693               	/* prologue end (size=0) */
 865:../../../src/net/isa/isa.c ****     isa_rx_data_ready = 0;
 695               	.LM71:
 696 01bc 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 697 01c0 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 698 01c4 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 699 01c8 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 700               	/* epilogue: frame size=0 */
 701 01cc 0895      		ret
 702               	/* epilogue end (size=1) */
 703               	/* function isa_rx_pkt_release size 9 (8) */
 705               	.Lscope11:
 707               		.stabd	78,0,0
 709               	.global	isa_join_ready
 711               	isa_join_ready:
 712               		.stabd	46,0,0
 866:../../../src/net/isa/isa.c **** }
 867:../../../src/net/isa/isa.c **** 
 868:../../../src/net/isa/isa.c **** 
 869:../../../src/net/isa/isa.c **** /**
 870:../../../src/net/isa/isa.c ****  * _isa_tx()
 871:../../../src/net/isa/isa.c ****  *
 872:../../../src/net/isa/isa.c ****  * This function is the low level TX function.
 873:../../../src/net/isa/isa.c ****  * It is only called from the timer interrupt and fetches any
 874:../../../src/net/isa/isa.c ****  * packets that were set for a particular slot by rtl_tx_packet().
 875:../../../src/net/isa/isa.c ****  *
 876:../../../src/net/isa/isa.c ****  * Arguments: slot is the active slot set by the interrupt timer.
 877:../../../src/net/isa/isa.c ****  */
 878:../../../src/net/isa/isa.c **** void _isa_tx (DLMO_LINK * link, uint16_t slot)
 879:../../../src/net/isa/isa.c **** {
 880:../../../src/net/isa/isa.c ****         uint8_t DHDR;  // Data link layer header sub-header, currently used as ACK control
 881:../../../src/net/isa/isa.c ****         uint8_t c;
 882:../../../src/net/isa/isa.c ****     uint8_t n;
 883:../../../src/net/isa/isa.c ****     uint8_t i;
 884:../../../src/net/isa/isa.c ****     int8_t tmp;
 885:../../../src/net/isa/isa.c ****     volatile uint8_t timeout;
 886:../../../src/net/isa/isa.c ****   volatile  uint8_t offsetSec, curSec;
 887:../../../src/net/isa/isa.c ****  volatile   uint16_t offsetNanoSec;
 888:../../../src/net/isa/isa.c ****    volatile int16_t time_correction, time_correction1;
 889:../../../src/net/isa/isa.c ****     uint8_t tmp_nrk_prev_timer_val;
 890:../../../src/net/isa/isa.c ****   volatile  ISA_QUEUE *transmitEntry;
 891:../../../src/net/isa/isa.c ****     // load header
 892:../../../src/net/isa/isa.c ****     isa_rfTxInfo.cca = true;
 893:../../../src/net/isa/isa.c **** 
 894:../../../src/net/isa/isa.c **** 
 895:../../../src/net/isa/isa.c ****     //the link should be a transmit link and either have a neighbor configured or a graph configure
 896:../../../src/net/isa/isa.c ****     if(link->linkType == TX_NO_ADV )
 897:../../../src/net/isa/isa.c ****     {
 898:../../../src/net/isa/isa.c ****             MESSAGE* message;
 899:../../../src/net/isa/isa.c **** 
 900:../../../src/net/isa/isa.c ****             //if (check==5) nrk_terminate_task();//Azriel killed after 5 transmits
 901:../../../src/net/isa/isa.c ****             //find if there is anything in the Queue to be transmitted
 902:../../../src/net/isa/isa.c ****             transmitEntry = getHighPriorityEntry(link);
 903:../../../src/net/isa/isa.c ****             if (transmitEntry == NULL){
 904:../../../src/net/isa/isa.c ****                     //printf("Nothing in the queue to transmit on slot %d ", slot);
 905:../../../src/net/isa/isa.c ****                     return;
 906:../../../src/net/isa/isa.c ****             }
 907:../../../src/net/isa/isa.c **** 
 908:../../../src/net/isa/isa.c ****             previous_tx_slot = slot;
 909:../../../src/net/isa/isa.c ****             isa_rfTxInfo.pPayload = transmitEntry->tx_buf;
 910:../../../src/net/isa/isa.c ****             #ifdef TX_DEBUG
 911:../../../src/net/isa/isa.c ****             //printf("TX Payload is: %s.\n\r", isa_rfTxInfo.pPayload);
 912:../../../src/net/isa/isa.c ****             #endif
 913:../../../src/net/isa/isa.c ****             isa_rfTxInfo.length=transmitEntry->length;
 914:../../../src/net/isa/isa.c ****             DHDR = configDHDR(link);
 915:../../../src/net/isa/isa.c ****             isa_rfTxInfo.pPayload[DHDR_INDEX] = DHDR;
 916:../../../src/net/isa/isa.c ****             //isa_rfTxInfo.pPayload[SLOT_INDEX] = (uint8_t)(global_slot & 0xFF);
 917:../../../src/net/isa/isa.c **** 
 918:../../../src/net/isa/isa.c ****             //Change the src id only if not neighbor table
 919:../../../src/net/isa/isa.c ****             message = &isa_rfTxInfo.pPayload[PKT_DATA_START];
 920:../../../src/net/isa/isa.c ****             if (message->type != NEIGHBOR_TABLE_REPORT)isa_rfTxInfo.pPayload[SRC_INDEX] = isa_id; /
 921:../../../src/net/isa/isa.c ****             else if (message->type == NEIGHBOR_TABLE_REPORT){
 922:../../../src/net/isa/isa.c ****                     //do nothing
 923:../../../src/net/isa/isa.c ****             }
 924:../../../src/net/isa/isa.c ****             transmitEntry->numTries++;
 925:../../../src/net/isa/isa.c ****             #ifdef JOIN_PROCESS
 926:../../../src/net/isa/isa.c ****             if(slot>=22 && isa_node_mode == ISA_GATEWAY){
 927:../../../src/net/isa/isa.c ****                     for(i=0;i<29;i++){
 928:../../../src/net/isa/isa.c ****                             isa_rfTxInfo.pPayload[DAUX_INDEX+i]=DAUX[i];
 929:../../../src/net/isa/isa.c ****                             //printf("DAUX[%d]=%d\r\n",i,isa_rfTxInfo.pPayload[DAUX_INDEX+i]);
 930:../../../src/net/isa/isa.c ****                     }
 931:../../../src/net/isa/isa.c ****             }
 932:../../../src/net/isa/isa.c ****             #endif
 933:../../../src/net/isa/isa.c ****     }
 934:../../../src/net/isa/isa.c ****     else if(link->linkType == ADV)
 935:../../../src/net/isa/isa.c ****     {
 936:../../../src/net/isa/isa.c ****             //putchar('a');
 937:../../../src/net/isa/isa.c ****             //nrk_gpio_set(NRK_DEBUG_1);
 938:../../../src/net/isa/isa.c ****             isa_rfTxInfo.pPayload = adv_buf;
 939:../../../src/net/isa/isa.c ****             isa_rfTxInfo.length = DAUX_INDEX + sizeof(DLMO_DAUX) + 1;  //sizeof(DLMO_DAUX) should b
 940:../../../src/net/isa/isa.c ****             //isa_rfTxInfo.length = DHDR_INDEX  + sizeof(uint8_t) + 1;
 941:../../../src/net/isa/isa.c ****             DHDR = configDHDR(link);
 942:../../../src/net/isa/isa.c ****             isa_rfTxInfo.pPayload[DHDR_INDEX] = DHDR;
 943:../../../src/net/isa/isa.c ****             isa_rfTxInfo.pPayload[SRC_INDEX] = isa_id;//changeisa_rfTxInfo.pPayload[SLOT_INDEX] = (
 944:../../../src/net/isa/isa.c ****             isa_rfTxInfo.pPayload[SLOT_INDEX] = (uint8_t)(global_slot & 0xFF);
 945:../../../src/net/isa/isa.c ****             DLMO_DAUX* advertise;
 946:../../../src/net/isa/isa.c ****             advertise = isa_rfTxInfo.pPayload[DAUX_INDEX];
 947:../../../src/net/isa/isa.c ****             advertise->adSelection = 0;
 948:../../../src/net/isa/isa.c ****             //nrk_gpio_clr(NRK_DEBUG_1);
 949:../../../src/net/isa/isa.c ****     }
 950:../../../src/net/isa/isa.c ****     // FIXME a small bug. should not happen and should be fixed in _isa_init_sync()
 951:../../../src/net/isa/isa.c ****     //if(AFTER_FIRST_SYNC == 1){
 952:../../../src/net/isa/isa.c ****         _nrk_high_speed_timer_reset();
 953:../../../src/net/isa/isa.c ****         nrk_high_speed_timer_wait(0,WAIT_TIME_BEFORE_TX);
 954:../../../src/net/isa/isa.c ****         //AFTER_FIRST_SYNC = 0;
 955:../../../src/net/isa/isa.c ****     //}
 956:../../../src/net/isa/isa.c ****             #ifdef TX_RX_DEBUG
 957:../../../src/net/isa/isa.c ****                 nrk_gpio_set(NRK_DEBUG_1);
 958:../../../src/net/isa/isa.c ****                    //printf("T\r\n");
 959:../../../src/net/isa/isa.c ****             #endif
 960:../../../src/net/isa/isa.c ****     if(rf_tx_tdma_packet (&isa_rfTxInfo,slot_start_time,isa_param.tx_guard_time,&tx_start_time))
 961:../../../src/net/isa/isa.c ****     {
 962:../../../src/net/isa/isa.c ****     	//if(link->linkType==TX_NO_ADV)transmitEntry->transmitPending = false;
 963:../../../src/net/isa/isa.c ****             txCount++;//change for packet loss
 964:../../../src/net/isa/isa.c ****             nrk_gpio_clr(NRK_DEBUG_1);
 965:../../../src/net/isa/isa.c ****             nrk_led_toggle(RED_LED);
 966:../../../src/net/isa/isa.c ****     //        putchar ('t');
 967:../../../src/net/isa/isa.c ****                     //("rx_start_time is %d.\n\r",_nrk_high_speed_timer_get());
 968:../../../src/net/isa/isa.c ****         offsetY = tx_start_time - slot_start_time;
 969:../../../src/net/isa/isa.c **** //        printf("%d.\n\r",offsetY);
 970:../../../src/net/isa/isa.c ****         #ifdef HIGH_TIMER_DEBUG
 971:../../../src/net/isa/isa.c ****             //printf("In isa.c _isa_tx(): offsetY is %d, tx_start_time is %d\n\r",offsetY,tx_start_
 972:../../../src/net/isa/isa.c ****         #endif
 973:../../../src/net/isa/isa.c ****     }
 974:../../../src/net/isa/isa.c ****     nrk_event_signal (isa_tx_done_signal);
 975:../../../src/net/isa/isa.c ****     // ACK required
 976:../../../src/net/isa/isa.c ****     if(DHDR & (1<<7)) {  //&& isa_node_mode!=ISA_GATEWAY){ //Azriel
 977:../../../src/net/isa/isa.c **** 
 978:../../../src/net/isa/isa.c ****             rf_polling_rx_on ();
 979:../../../src/net/isa/isa.c ****             nrk_gpio_set(NRK_DEBUG_1);
 980:../../../src/net/isa/isa.c ****         _nrk_high_speed_timer_reset();
 981:../../../src/net/isa/isa.c ****         nrk_high_speed_timer_wait(0,CPU_PROCESS_TIME);
 982:../../../src/net/isa/isa.c **** //nrk_gpio_set(NRK_DEBUG_1);
 983:../../../src/net/isa/isa.c ****         // Timing for waiting for receiving ACK
 984:../../../src/net/isa/isa.c ****         timeout = _nrk_os_timer_get();
 985:../../../src/net/isa/isa.c ****         timeout+=2;  // 2ms
 986:../../../src/net/isa/isa.c ****         n = 0;
 987:../../../src/net/isa/isa.c ****         while ((n = rf_rx_check_sfd()) == 0) {
 988:../../../src/net/isa/isa.c ****             if (_nrk_os_timer_get() > timeout) {
 989:../../../src/net/isa/isa.c ****                 tmp = slot - previous_tx_slot;
 990:../../../src/net/isa/isa.c ****                 if(slot == previous_tx_slot)
 991:../../../src/net/isa/isa.c ****                     slot_expired += 25;
 992:../../../src/net/isa/isa.c ****                 else{
 993:../../../src/net/isa/isa.c ****                     tmp = slot - previous_tx_slot;
 994:../../../src/net/isa/isa.c ****                     if(tmp>0)
 995:../../../src/net/isa/isa.c ****                         slot_expired += tmp;
 996:../../../src/net/isa/isa.c ****                     else
 997:../../../src/net/isa/isa.c ****                         slot_expired += 25+tmp;
 998:../../../src/net/isa/isa.c ****                 }
 999:../../../src/net/isa/isa.c ****                 //printf("%d,%d,%d,%d,%d\n\r",slot_expired,tmp_curSec,tmp_offsetSec,tmp_offsetNanoS
1000:../../../src/net/isa/isa.c ****                 //printf("%d,%d\n\r",slot_expired,isa_param.channel);
1001:../../../src/net/isa/isa.c ****                 //printf("%d,%d,%d\n\r",slot_expired,slot,previous_tx_slot);
1002:../../../src/net/isa/isa.c ****             //spend too much time on waiting for a pkt's arrival
1003:../../../src/net/isa/isa.c ****                 rf_rx_off ();
1004:../../../src/net/isa/isa.c ****                 nrk_gpio_clr(NRK_DEBUG_1);
1005:../../../src/net/isa/isa.c ****                 #ifdef LED_DEBUG
1006:../../../src/net/isa/isa.c ****                     nrk_led_clr(1);
1007:../../../src/net/isa/isa.c ****                 #endif
1008:../../../src/net/isa/isa.c ****                 #ifdef RX_DEBUG
1009:../../../src/net/isa/isa.c ****          putchar('s');
1010:../../../src/net/isa/isa.c ****                 // printf("%d", slot);
1011:../../../src/net/isa/isa.c **** 
1012:../../../src/net/isa/isa.c ****                  //   printf("sfd times out.\n\r");
1013:../../../src/net/isa/isa.c ****                     #endif
1014:../../../src/net/isa/isa.c ****                 //nrk_gpio_clr(NRK_DEBUG_1);
1015:../../../src/net/isa/isa.c ****                  packetsLost++;
1016:../../../src/net/isa/isa.c ****                  if(transmitEntry->numTries >= MAX_RETRIES){
1017:../../../src/net/isa/isa.c ****                  if (transmitEntry-> slot_callback == NULL )  isaFreePacket(transmitEntry);
1018:../../../src/net/isa/isa.c ****                  else transmitEntry-> slot_callback(transmitEntry, FAILURE);
1019:../../../src/net/isa/isa.c ****                  }
1020:../../../src/net/isa/isa.c ****                  return;
1021:../../../src/net/isa/isa.c **** 
1022:../../../src/net/isa/isa.c ****             }
1023:../../../src/net/isa/isa.c ****         }
1024:../../../src/net/isa/isa.c ****         //nrk_gpio_clr(NRK_DEBUG_1);
1025:../../../src/net/isa/isa.c ****         timeout = _nrk_os_timer_get();
1026:../../../src/net/isa/isa.c ****         timeout += 2;               // 5ms
1027:../../../src/net/isa/isa.c ****         if (n != 0) {
1028:../../../src/net/isa/isa.c ****             n = 0;
1029:../../../src/net/isa/isa.c ****             //printf("Packet on its way\n\r");
1030:../../../src/net/isa/isa.c ****             if ( BITGET(DHDR,2)) c = 4 ;
1031:../../../src/net/isa/isa.c ****             else c = 2;
1032:../../../src/net/isa/isa.c ****             while ((n = rf_polling_rx_packet (true, c)) == 0)                 {        //changed to
1033:../../../src/net/isa/isa.c ****                 if (_nrk_os_timer_get () > timeout) {
1034:../../../src/net/isa/isa.c ****                 #ifdef RX_DEBUG
1035:../../../src/net/isa/isa.c ****                     printf("packet is too long, times out.\n\r");
1036:../../../src/net/isa/isa.c ****                 #endif
1037:../../../src/net/isa/isa.c ****                     packetsLost++;
1038:../../../src/net/isa/isa.c ****                     tmp_curSec = _nrk_os_timer_get();
1039:../../../src/net/isa/isa.c ****                     if(transmitEntry->numTries == MAX_RETRIES){
1040:../../../src/net/isa/isa.c ****                     if (transmitEntry-> slot_callback == NULL )  isaFreePacket(transmitEntry);
1041:../../../src/net/isa/isa.c ****                     else transmitEntry-> slot_callback(transmitEntry, FAILURE);
1042:../../../src/net/isa/isa.c ****                     // spend too much time on receiving pkt.
1043:../../../src/net/isa/isa.c ****                     }
1044:../../../src/net/isa/isa.c ****                     return;          // huge timeout as fail safe
1045:../../../src/net/isa/isa.c ****                     }
1046:../../../src/net/isa/isa.c **** 
1047:../../../src/net/isa/isa.c ****                 //if(n==-6)
1048:../../../src/net/isa/isa.c ****                   //  printf("%d\n\r",_nrk_os_timer_get());
1049:../../../src/net/isa/isa.c ****             }
1050:../../../src/net/isa/isa.c ****         }
1051:../../../src/net/isa/isa.c **** 
1052:../../../src/net/isa/isa.c ****         if  (n !=1){        //size of packet must have been wrong
1053:../../../src/net/isa/isa.c ****                 putchar('f');
1054:../../../src/net/isa/isa.c ****                 printf("f channel %d\r\n",currentChannel);
1055:../../../src/net/isa/isa.c ****                 packetsLost++;
1056:../../../src/net/isa/isa.c **** 
1057:../../../src/net/isa/isa.c ****         }
1058:../../../src/net/isa/isa.c ****         rf_rx_off ();
1059:../../../src/net/isa/isa.c ****        // if (n==1)
1060:../../../src/net/isa/isa.c ****         nrk_gpio_clr(NRK_DEBUG_1);
1061:../../../src/net/isa/isa.c ****         if (n == 1) {// successfully received ACK
1062:../../../src/net/isa/isa.c ****            rxCount++;
1063:../../../src/net/isa/isa.c **** 
1064:../../../src/net/isa/isa.c ****             //isa_rx_data_ready = 1;
1065:../../../src/net/isa/isa.c ****             DHR = isa_rfRxInfo.pPayload[DHR_INDEX];
1066:../../../src/net/isa/isa.c ****             #ifdef ACK_DEBUG
1067:../../../src/net/isa/isa.c **** 
1068:../../../src/net/isa/isa.c ****             #endif ACK_DEBUG
1069:../../../src/net/isa/isa.c ****             if((DHDR & (1<<7))) {  //  &&isa_node_mode!=ISA_GATEWAY){
1070:../../../src/net/isa/isa.c ****                     slot_expired = 0;
1071:../../../src/net/isa/isa.c **** 
1072:../../../src/net/isa/isa.c **** 
1073:../../../src/net/isa/isa.c ****         //        ************************* Trying time correction
1074:../../../src/net/isa/isa.c ****                 if(DHR & (1<<7)){
1075:../../../src/net/isa/isa.c **** 
1076:../../../src/net/isa/isa.c ****                         offsetX = ((0x0000|isa_rfRxInfo.pPayload[OFFSET_HIGH])<<8)&0xff00 + 0x0000|
1077:../../../src/net/isa/isa.c ****                                     #ifdef ACK_DEBUG
1078:../../../src/net/isa/isa.c ****                                     nrk_led_toggle(ORANGE_LED);
1079:../../../src/net/isa/isa.c ****                                 //    putchar('a');
1080:../../../src/net/isa/isa.c ****                                     #endif ACK_DEBUG
1081:../../../src/net/isa/isa.c ****                                 //        check++;
1082:../../../src/net/isa/isa.c **** 
1083:../../../src/net/isa/isa.c ****                                     time_correction = offsetX - offsetY - 1400;
1084:../../../src/net/isa/isa.c ****                                     //-1400 is the error in reading used for calculating the offset
1085:../../../src/net/isa/isa.c ****                                     #ifdef HIGH_TIMER_DEBUG
1086:../../../src/net/isa/isa.c ****                                         printf("time correction is %d.\n\r", time_correction);
1087:../../../src/net/isa/isa.c ****                                     #endif
1088:../../../src/net/isa/isa.c ****                                 //        printf("%d.\n\r", time_correction);
1089:../../../src/net/isa/isa.c ****                                     timeout=50;
1090:../../../src/net/isa/isa.c **** 
1091:../../../src/net/isa/isa.c ****                                     if(time_correction >= 0){
1092:../../../src/net/isa/isa.c **** 
1093:../../../src/net/isa/isa.c ****                                              curSec = _nrk_os_timer_get();
1094:../../../src/net/isa/isa.c ****                                             offsetSec = (time_correction/7325)+1;
1095:../../../src/net/isa/isa.c ****                                                 offsetNanoSec = 7325-(time_correction%7325);       
1096:../../../src/net/isa/isa.c ****                                                 _nrk_os_timer_stop();
1097:../../../src/net/isa/isa.c ****                                                // nrk_gpio_set(NRK_DEBUG_1);
1098:../../../src/net/isa/isa.c ****                                                 _nrk_high_speed_timer_reset();
1099:../../../src/net/isa/isa.c ****                                                 nrk_high_speed_timer_wait(0,offsetNanoSec);
1100:../../../src/net/isa/isa.c ****                                                 _nrk_os_timer_set(curSec+offsetSec);
1101:../../../src/net/isa/isa.c ****                                                // nrk_gpio_clr(NRK_DEBUG_1);
1102:../../../src/net/isa/isa.c ****                                                 _nrk_os_timer_start();
1103:../../../src/net/isa/isa.c ****                                         //        _nrk_set_next_wakeup(10);
1104:../../../src/net/isa/isa.c ****                                                 nrk_spin_wait_us(50);
1105:../../../src/net/isa/isa.c **** 
1106:../../../src/net/isa/isa.c ****                                     }else if(time_correction<0){
1107:../../../src/net/isa/isa.c **** 
1108:../../../src/net/isa/isa.c ****                                              _nrk_os_timer_stop();
1109:../../../src/net/isa/isa.c ****                                         #ifdef CORRECTION
1110:../../../src/net/isa/isa.c ****                                         nrk_gpio_set(NRK_DEBUG_2);
1111:../../../src/net/isa/isa.c ****                                         //nrk_high_speed_timer_wait(0,22800); // for test
1112:../../../src/net/isa/isa.c ****                                         nrk_gpio_clr(NRK_DEBUG_2);
1113:../../../src/net/isa/isa.c ****                                         #endif
1114:../../../src/net/isa/isa.c ****                                         _nrk_high_speed_timer_reset();
1115:../../../src/net/isa/isa.c ****                                         nrk_high_speed_timer_wait(0,-time_correction);
1116:../../../src/net/isa/isa.c ****                                         _nrk_os_timer_start();
1117:../../../src/net/isa/isa.c **** 
1118:../../../src/net/isa/isa.c ****                                     }
1119:../../../src/net/isa/isa.c **** 
1120:../../../src/net/isa/isa.c ****                                 }
1121:../../../src/net/isa/isa.c **** 
1122:../../../src/net/isa/isa.c ****             }
1123:../../../src/net/isa/isa.c ****                     //Checking the 4th and 5th bit of the DHR to see if the incoming acknowledgment
1124:../../../src/net/isa/isa.c ****                     //from the message queue
1125:../../../src/net/isa/isa.c ****            if(transmitEntry->numTries == MAX_RETRIES || ((DHR & (3<<4))==0)){
1126:../../../src/net/isa/isa.c ****             if (transmitEntry-> slot_callback == NULL )  isaFreePacket(transmitEntry);
1127:../../../src/net/isa/isa.c ****                         else transmitEntry-> slot_callback(transmitEntry, SUCCESS);
1128:../../../src/net/isa/isa.c ****             }
1129:../../../src/net/isa/isa.c ****         }
1130:../../../src/net/isa/isa.c **** 
1131:../../../src/net/isa/isa.c ****     }//wait for ACK
1132:../../../src/net/isa/isa.c **** 
1133:../../../src/net/isa/isa.c **** 
1134:../../../src/net/isa/isa.c **** }
1135:../../../src/net/isa/isa.c **** 
1136:../../../src/net/isa/isa.c **** /*
1137:../../../src/net/isa/isa.c **** uint8_t _isa_join_process ()
1138:../../../src/net/isa/isa.c **** {
1139:../../../src/net/isa/isa.c ****     int8_t n;
1140:../../../src/net/isa/isa.c ****     uint16_t timeout;
1141:../../../src/net/isa/isa.c ****     uint16_t timer;
1142:../../../src/net/isa/isa.c ****     uint8_t tdma_start_tick;
1143:../../../src/net/isa/isa.c ****     uint8_t battery_save_cnt;
1144:../../../src/net/isa/isa.c ****     uint8_t last_nrk_tick;
1145:../../../src/net/isa/isa.c ****     uint8_t i;
1146:../../../src/net/isa/isa.c **** 
1147:../../../src/net/isa/isa.c ****     timer=0;
1148:../../../src/net/isa/isa.c ****     battery_save_cnt=0;
1149:../../../src/net/isa/isa.c **** 
1150:../../../src/net/isa/isa.c ****     while(1)
1151:../../../src/net/isa/isa.c ****     {
1152:../../../src/net/isa/isa.c **** 
1153:../../../src/net/isa/isa.c ****         rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel
1154:../../../src/net/isa/isa.c ****         rf_polling_rx_on ();
1155:../../../src/net/isa/isa.c ****         n = 0;
1156:../../../src/net/isa/isa.c ****         _isa_sync_ok = 0;
1157:../../../src/net/isa/isa.c ****         last_nrk_tick=0;  // should be 0 going in
1158:../../../src/net/isa/isa.c ****         //_nrk_prev_timer_val=250;
1159:../../../src/net/isa/isa.c ****         //_nrk_set_next_wakeup(250);
1160:../../../src/net/isa/isa.c ****         //_nrk_os_timer_set(0);
1161:../../../src/net/isa/isa.c ****         //timeout=200;
1162:../../../src/net/isa/isa.c ****         while ((n = rf_rx_check_sfd()) == 0) {
1163:../../../src/net/isa/isa.c ****             // every OS tick
1164:../../../src/net/isa/isa.c ****             if(last_nrk_tick!=_nrk_os_timer_get()) {
1165:../../../src/net/isa/isa.c ****                 last_nrk_tick=_nrk_os_timer_get();
1166:../../../src/net/isa/isa.c ****                 timer++;
1167:../../../src/net/isa/isa.c ****                 if(timer>ISA_TOKEN_TIMEOUT){
1168:../../../src/net/isa/isa.c ****                     timer=0;
1169:../../../src/net/isa/isa.c ****                     break;
1170:../../../src/net/isa/isa.c ****                 }
1171:../../../src/net/isa/isa.c ****             }
1172:../../../src/net/isa/isa.c ****         }
1173:../../../src/net/isa/isa.c ****         //_nrk_high_speed_timer_reset();
1174:../../../src/net/isa/isa.c **** 
1175:../../../src/net/isa/isa.c ****         tdma_start_tick=_nrk_os_timer_get();
1176:../../../src/net/isa/isa.c ****         timeout = tdma_start_tick+4;
1177:../../../src/net/isa/isa.c ****         // an interrupt could happen in here and mess things up
1178:../../../src/net/isa/isa.c ****         if (n != 0) {
1179:../../../src/net/isa/isa.c ****             n = 0;
1180:../../../src/net/isa/isa.c ****         // Packet on its way
1181:../../../src/net/isa/isa.c ****             while ((n = rf_polling_rx_packet (false,128)) == 0) {
1182:../../../src/net/isa/isa.c ****                 if (_nrk_os_timer_get () > timeout)
1183:../../../src/net/isa/isa.c ****                 {
1184:../../../src/net/isa/isa.c ****                     //nrk_kprintf( PSTR("Pkt timed out\r\n") );
1185:../../../src/net/isa/isa.c ****                     break;          // huge timeout as failsafe
1186:../../../src/net/isa/isa.c ****                 }
1187:../../../src/net/isa/isa.c ****             }
1188:../../../src/net/isa/isa.c ****         }
1189:../../../src/net/isa/isa.c ****         rf_rx_off ();
1190:../../../src/net/isa/isa.c ****         if (n == 1){ //&& isa_rfRxInfo.length>0) {
1191:../../../src/net/isa/isa.c ****            // if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id){//change
1192:../../../src/net/isa/isa.c ****                 // CRC and checksum passed
1193:../../../src/net/isa/isa.c ****                 if(isa_rfRxInfo.pPayload[DAUX_INDEX+7]==10){ // DAUX packet
1194:../../../src/net/isa/isa.c ****                         isa_rx_data_ready = 1;
1195:../../../src/net/isa/isa.c ****                         //global_slot = (volatile)isa_rfRxInfo.pPayload[SLOT_INDEX];
1196:../../../src/net/isa/isa.c **** 
1197:../../../src/net/isa/isa.c ****                         isa_set_channel_pattern(isa_rfRxInfo.pPayload[DAUX_INDEX+9]); //set channel
1198:../../../src/net/isa/isa.c ****                         channelIndex=isa_rfRxInfo.pPayload[DAUX_INDEX+10];
1199:../../../src/net/isa/isa.c ****                         currentChannel = slottedPattern[channelIndex];
1200:../../../src/net/isa/isa.c ****                         isa_set_channel(currentChannel);
1201:../../../src/net/isa/isa.c ****                         for(i=0;i<4;i++){  // set tx slots
1202:../../../src/net/isa/isa.c ****                             if(isa_rfRxInfo.pPayload[DAUX_INDEX+19+i]==0)
1203:../../../src/net/isa/isa.c ****                                 break;
1204:../../../src/net/isa/isa.c ****                             else{
1205:../../../src/net/isa/isa.c ****                                 isa_tdma_tx_mask |= ((uint32_t) 1) << isa_rfRxInfo.pPayload[DAUX_IN
1206:../../../src/net/isa/isa.c ****                                 isa_sched[isa_rfRxInfo.pPayload[DAUX_INDEX+19+i]] = 1;
1207:../../../src/net/isa/isa.c ****                                 tx_slot_from_join[i]=isa_rfRxInfo.pPayload[DAUX_INDEX+19+i];
1208:../../../src/net/isa/isa.c ****                         //        printf("TX:%d\r\n",tx_slot_from_join[i]);
1209:../../../src/net/isa/isa.c ****                             }
1210:../../../src/net/isa/isa.c ****                         }
1211:../../../src/net/isa/isa.c **** 
1212:../../../src/net/isa/isa.c ****                         for(i=0;i<4;i++){  // set rx slots
1213:../../../src/net/isa/isa.c ****                             if(isa_rfRxInfo.pPayload[DAUX_INDEX+23+i]==0)
1214:../../../src/net/isa/isa.c ****                                 break;
1215:../../../src/net/isa/isa.c ****                             else{
1216:../../../src/net/isa/isa.c ****                                 isa_tdma_rx_mask |= ((uint32_t) 1) << isa_rfRxInfo.pPayload[DAUX_IN
1217:../../../src/net/isa/isa.c ****                                 isa_sched[isa_rfRxInfo.pPayload[DAUX_INDEX+23+i]] = 1;
1218:../../../src/net/isa/isa.c ****                             }
1219:../../../src/net/isa/isa.c ****                         }
1220:../../../src/net/isa/isa.c ****                         nrk_event_signal(SIG(isa_rx_pkt_signal));
1221:../../../src/net/isa/isa.c ****                 break;
1222:../../../src/net/isa/isa.c ****                  }
1223:../../../src/net/isa/isa.c ****            // }
1224:../../../src/net/isa/isa.c ****         }
1225:../../../src/net/isa/isa.c ****     }
1226:../../../src/net/isa/isa.c **** 
1227:../../../src/net/isa/isa.c **** 
1228:../../../src/net/isa/isa.c **** 
1229:../../../src/net/isa/isa.c ****     _isa_join_ok=1;
1230:../../../src/net/isa/isa.c ****     isa_rx_pkt_release();
1231:../../../src/net/isa/isa.c ****     return _isa_join_ok;
1232:../../../src/net/isa/isa.c **** }
1233:../../../src/net/isa/isa.c **** */
1234:../../../src/net/isa/isa.c **** 
1235:../../../src/net/isa/isa.c **** 
1236:../../../src/net/isa/isa.c **** int8_t isa_join_ready()
1237:../../../src/net/isa/isa.c **** {
 714               	.LM72:
 715               	.LFBB12:
 716               	/* prologue: frame size=0 */
 717               	/* prologue end (size=0) */
1238:../../../src/net/isa/isa.c ****     if (_isa_join_ok ==  1)
 719               	.LM73:
 720 01ce 8091 0000 		lds r24,_isa_join_ok
 721 01d2 8130      		cpi r24,lo8(1)
 722 01d4 01F4      		brne .L44
 724               	.LM74:
 725 01d6 81E0      		ldi r24,lo8(1)
 726 01d8 90E0      		ldi r25,hi8(1)
 727 01da 0895      		ret
 728               	.L44:
 729 01dc 8FEF      		ldi r24,lo8(-1)
 730 01de 9FEF      		ldi r25,hi8(-1)
1239:../../../src/net/isa/isa.c ****         return NRK_OK;
1240:../../../src/net/isa/isa.c ****     else
1241:../../../src/net/isa/isa.c ****         return NRK_ERROR;
1242:../../../src/net/isa/isa.c **** }
 732               	.LM75:
 733 01e0 0895      		ret
 734               	/* epilogue: frame size=0 */
 735               	/* epilogue: noreturn */
 736               	/* epilogue end (size=0) */
 737               	/* function isa_join_ready size 10 (10) */
 739               	.Lscope12:
 741               		.stabd	78,0,0
 743               	.global	isa_task_config
 745               	isa_task_config:
 746               		.stabd	46,0,0
1243:../../../src/net/isa/isa.c **** 
1244:../../../src/net/isa/isa.c **** 
1245:../../../src/net/isa/isa.c **** /** FIXME this is only a temporary function need to be more specified
1246:../../../src/net/isa/isa.c ****  * _isa_init_sync()
1247:../../../src/net/isa/isa.c ****  *
1248:../../../src/net/isa/isa.c ****  * This function is used for join process.
1249:../../../src/net/isa/isa.c ****  * A node that wants to join the network would keep listening first
1250:../../../src/net/isa/isa.c ****  * and set up first sync.
1251:../../../src/net/isa/isa.c ****  *
1252:../../../src/net/isa/isa.c ****  * Return: _isa_sync_ok.
1253:../../../src/net/isa/isa.c ****  */
1254:../../../src/net/isa/isa.c **** uint8_t _isa_init_sync ()
1255:../../../src/net/isa/isa.c **** {
1256:../../../src/net/isa/isa.c ****     int8_t n;
1257:../../../src/net/isa/isa.c ****     uint16_t timeout;
1258:../../../src/net/isa/isa.c ****     uint16_t timer;
1259:../../../src/net/isa/isa.c ****     uint8_t tdma_start_tick;
1260:../../../src/net/isa/isa.c ****     uint8_t battery_save_cnt;
1261:../../../src/net/isa/isa.c ****     uint8_t last_nrk_tick;
1262:../../../src/net/isa/isa.c ****     uint8_t tmp_nrk_prev_timer_val;
1263:../../../src/net/isa/isa.c ****     //volatile uint16_t sfd_start_time;
1264:../../../src/net/isa/isa.c **** 
1265:../../../src/net/isa/isa.c ****         //printf("%d,%d\n\r",isa_param.channel,global_slot);
1266:../../../src/net/isa/isa.c ****   //  DISABLE_GLOBAL_INT ();
1267:../../../src/net/isa/isa.c ****     timer=0;
1268:../../../src/net/isa/isa.c ****     battery_save_cnt=0;
1269:../../../src/net/isa/isa.c **** 
1270:../../../src/net/isa/isa.c **** 
1271:../../../src/net/isa/isa.c ****     while(1)
1272:../../../src/net/isa/isa.c ****     {
1273:../../../src/net/isa/isa.c **** 
1274:../../../src/net/isa/isa.c ****     	//	printf("Channel%d ,channelINdex %d\r\n",currentChannel,channelIndex);
1275:../../../src/net/isa/isa.c ****             //printf("Init sync \r\n");
1276:../../../src/net/isa/isa.c ****         isa_rfRxInfo.pPayload[DHDR_INDEX]=1;                        //configDHDR(0); This will have
1277:../../../src/net/isa/isa.c ****         //isa_rfRxInfo.pPayload[SLOT_INDEX]=global_slot;
1278:../../../src/net/isa/isa.c **** 
1279:../../../src/net/isa/isa.c ****         #ifdef LED_DEBUG
1280:../../../src/net/isa/isa.c ****             nrk_led_set(1);
1281:../../../src/net/isa/isa.c ****         #endif
1282:../../../src/net/isa/isa.c ****         rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel
1283:../../../src/net/isa/isa.c ****         rf_polling_rx_on ();
1284:../../../src/net/isa/isa.c ****         n = 0;
1285:../../../src/net/isa/isa.c ****         _isa_sync_ok = 0;
1286:../../../src/net/isa/isa.c ****         last_nrk_tick=0;  // should be 0 going in
1287:../../../src/net/isa/isa.c ****         //_nrk_prev_timer_val=250;
1288:../../../src/net/isa/isa.c ****         _nrk_set_next_wakeup(250);
1289:../../../src/net/isa/isa.c ****         _nrk_os_timer_set(0);
1290:../../../src/net/isa/isa.c ****         //timeout=200;
1291:../../../src/net/isa/isa.c ****         while ((n = rf_rx_check_sfd()) == 0) {
1292:../../../src/net/isa/isa.c **** 
1293:../../../src/net/isa/isa.c ****             // every OS tick
1294:../../../src/net/isa/isa.c ****             if(last_nrk_tick!=_nrk_os_timer_get()) {
1295:../../../src/net/isa/isa.c ****                 last_nrk_tick=_nrk_os_timer_get();
1296:../../../src/net/isa/isa.c ****                 timer++;
1297:../../../src/net/isa/isa.c ****                 if(timer>ISA_TOKEN_TIMEOUT){
1298:../../../src/net/isa/isa.c ****                     timer=0;
1299:../../../src/net/isa/isa.c ****                     break;
1300:../../../src/net/isa/isa.c ****                 }
1301:../../../src/net/isa/isa.c ****             }
1302:../../../src/net/isa/isa.c **** 
1303:../../../src/net/isa/isa.c ****         }
1304:../../../src/net/isa/isa.c ****         //printf("3 \n");
1305:../../../src/net/isa/isa.c ****         _nrk_high_speed_timer_reset();
1306:../../../src/net/isa/isa.c ****         // capture SFD transition with high speed timer
1307:../../../src/net/isa/isa.c ****         //sfd_start_time=_nrk_high_speed_timer_get();
1308:../../../src/net/isa/isa.c ****         tdma_start_tick=_nrk_os_timer_get();
1309:../../../src/net/isa/isa.c **** 
1310:../../../src/net/isa/isa.c ****         timeout = tdma_start_tick+4;
1311:../../../src/net/isa/isa.c ****         // an interrupt could happen in here and mess things up
1312:../../../src/net/isa/isa.c ****         if (n != 0) {
1313:../../../src/net/isa/isa.c ****             n = 0;
1314:../../../src/net/isa/isa.c ****         // Packet on its way
1315:../../../src/net/isa/isa.c ****             while ((n = rf_polling_rx_packet (false,128)) == 0) {
1316:../../../src/net/isa/isa.c ****           //          printf("4 \n");
1317:../../../src/net/isa/isa.c ****                 if (_nrk_os_timer_get () > timeout)
1318:../../../src/net/isa/isa.c ****                 {
1319:../../../src/net/isa/isa.c ****                     //nrk_kprintf( PSTR("Pkt timed out\r\n") );
1320:../../../src/net/isa/isa.c ****                     break;          // huge timeout as failsafe
1321:../../../src/net/isa/isa.c ****                 }
1322:../../../src/net/isa/isa.c ****             }
1323:../../../src/net/isa/isa.c ****         }
1324:../../../src/net/isa/isa.c ****         rf_rx_off ();
1325:../../../src/net/isa/isa.c ****         //printf("5 \n");
1326:../../../src/net/isa/isa.c ****         if (n == 1 /*&& isa_rfRxInfo.length>0*/) {
1327:../../../src/net/isa/isa.c ****                 int DHDR = isa_rfRxInfo.pPayload[DHDR_INDEX];
1328:../../../src/net/isa/isa.c ****            // if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id && isa_rfRxInfo.pPayload[DEST_IND
1329:../../../src/net/isa/isa.c ****                 //if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id && DHDR & (1<<4)){
1330:../../../src/net/isa/isa.c ****                 if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id && DHDR &(1<<4)){
1331:../../../src/net/isa/isa.c ****                 // CRC and checksum passed
1332:../../../src/net/isa/isa.c ****                 isa_rx_data_ready = 1;
1333:../../../src/net/isa/isa.c ****                 //rtl_rx_slot = 0;
1334:../../../src/net/isa/isa.c ****                 //DHDR = (volatile)isa_rfRxInfo.pPayload[DHDR_INDEX];
1335:../../../src/net/isa/isa.c ****                 global_slot = (volatile)isa_rfRxInfo.pPayload[SLOT_INDEX];
1336:../../../src/net/isa/isa.c ****                 nrk_led_toggle(GREEN_LED);
1337:../../../src/net/isa/isa.c ****                 putchar ('i');
1338:../../../src/net/isa/isa.c **** 
1339:../../../src/net/isa/isa.c ****         //        nrk_event_signal(SIG(isa_rx_pkt_signal));
1340:../../../src/net/isa/isa.c ****                 break;
1341:../../../src/net/isa/isa.c ****                 //
1342:../../../src/net/isa/isa.c ****             }
1343:../../../src/net/isa/isa.c ****         }
1344:../../../src/net/isa/isa.c ****     }
1345:../../../src/net/isa/isa.c **** 
1346:../../../src/net/isa/isa.c **** 
1347:../../../src/net/isa/isa.c **** #ifdef LED_DEBUG
1348:../../../src/net/isa/isa.c ****     nrk_led_clr(1);
1349:../../../src/net/isa/isa.c **** #endif
1350:../../../src/net/isa/isa.c ****      //printf("os_timer=%d\r\n",_nrk_os_itimer_get());
1351:../../../src/net/isa/isa.c ****      #ifdef INIT_SYNC
1352:../../../src/net/isa/isa.c ****         nrk_gpio_set(NRK_DEBUG_1);
1353:../../../src/net/isa/isa.c ****      #endif
1354:../../../src/net/isa/isa.c ****     _isa_sync_ok = 1;
1355:../../../src/net/isa/isa.c ****     isa_rx_pkt_release();
1356:../../../src/net/isa/isa.c ****     tmp_nrk_prev_timer_val=_nrk_prev_timer_val;
1357:../../../src/net/isa/isa.c ****     _nrk_os_timer_stop();
1358:../../../src/net/isa/isa.c ****     _nrk_os_timer_reset();
1359:../../../src/net/isa/isa.c ****     /*
1360:../../../src/net/isa/isa.c ****      * If I dont do this reset, then the next wakeup is not predictable! Why??
1361:../../../src/net/isa/isa.c ****      */
1362:../../../src/net/isa/isa.c ****     _nrk_set_next_wakeup(10);
1363:../../../src/net/isa/isa.c ****     _nrk_os_timer_set(7);
1364:../../../src/net/isa/isa.c ****     nrk_high_speed_timer_wait(0,SFD_TO_NEXT_SLOT_TIME);
1365:../../../src/net/isa/isa.c ****     //_nrk_os_timer_reset();
1366:../../../src/net/isa/isa.c ****     _nrk_os_timer_start();
1367:../../../src/net/isa/isa.c ****     //_nrk_prev_timer_val=9;
1368:../../../src/net/isa/isa.c ****     //printf("%d\n\r", _nrk_os_timer_get());
1369:../../../src/net/isa/isa.c **** nrk_cur_task_TCB->next_wakeup = 10;
1370:../../../src/net/isa/isa.c **** 
1371:../../../src/net/isa/isa.c ****     //printf("%d\n\r",_nrk_prev_timer_val);
1372:../../../src/net/isa/isa.c ****    // _nrk_high_speed_timer_reset();
1373:../../../src/net/isa/isa.c ****    // slot_start_time=_nrk_high_speed_timer_get();
1374:../../../src/net/isa/isa.c ****     #ifdef INIT_SYNC
1375:../../../src/net/isa/isa.c ****         nrk_gpio_clr(NRK_DEBUG_1);
1376:../../../src/net/isa/isa.c ****      #endif
1377:../../../src/net/isa/isa.c **** 
1378:../../../src/net/isa/isa.c ****         return _isa_sync_ok;
1379:../../../src/net/isa/isa.c **** 
1380:../../../src/net/isa/isa.c **** }
1381:../../../src/net/isa/isa.c **** 
1382:../../../src/net/isa/isa.c **** 
1383:../../../src/net/isa/isa.c **** void isa_nw_task ()
1384:../../../src/net/isa/isa.c **** {
1385:../../../src/net/isa/isa.c ****     uint8_t slot;
1386:../../../src/net/isa/isa.c ****     uint16_t next_slot_offset = 0;
1387:../../../src/net/isa/isa.c ****     uint8_t FIRST = 1;
1388:../../../src/net/isa/isa.c ****     DLMO_LINK * link;
1389:../../../src/net/isa/isa.c **** 
1390:../../../src/net/isa/isa.c ****     _isa_ready = 0;
1391:../../../src/net/isa/isa.c **** 
1392:../../../src/net/isa/isa.c ****     // wait for isa ready
1393:../../../src/net/isa/isa.c ****     do {
1394:../../../src/net/isa/isa.c ****         nrk_wait_until_next_period ();
1395:../../../src/net/isa/isa.c ****     }while (_isa_ready == 0);
1396:../../../src/net/isa/isa.c **** 
1397:../../../src/net/isa/isa.c ****     _isa_ready = 1;
1398:../../../src/net/isa/isa.c ****     //nrk_gpio_clr(NRK_DEBUG_0);
1399:../../../src/net/isa/isa.c ****     //nrk_time_get (&last_slot_time);// dont know if it is useful
1400:../../../src/net/isa/isa.c ****     while (1) {
1401:../../../src/net/isa/isa.c **** 
1402:../../../src/net/isa/isa.c ****             //putchar('n');
1403:../../../src/net/isa/isa.c ****             _nrk_high_speed_timer_reset();
1404:../../../src/net/isa/isa.c ****              slot_start_time = _nrk_high_speed_timer_get();
1405:../../../src/net/isa/isa.c ****             nrk_gpio_set(NRK_DEBUG_1);
1406:../../../src/net/isa/isa.c ****         nrk_gpio_clr(NRK_DEBUG_1);
1407:../../../src/net/isa/isa.c **** 
1408:../../../src/net/isa/isa.c ****         // reset high speed timer and then record the timer value used for calculating offsets
1409:../../../src/net/isa/isa.c **** 
1410:../../../src/net/isa/isa.c ****         //nrk_time_get (&last_slot_time);// dont know if it is useful
1411:../../../src/net/isa/isa.c ****      //   last_slot = global_slot; //global_slot has been initialized to MAX_ISA_GLOBAL_SLOTS in is
1412:../../../src/net/isa/isa.c ****       //  if (last_slot > MAX_ISA_GLOBAL_SLOTS)
1413:../../../src/net/isa/isa.c ****         //    last_slot -= (MAX_ISA_GLOBAL_SLOTS+1);
1414:../../../src/net/isa/isa.c **** 
1415:../../../src/net/isa/isa.c ****         current_global_slot = global_slot;
1416:../../../src/net/isa/isa.c ****         /* global_slot should be wrapped */
1417:../../../src/net/isa/isa.c ****         if(global_slot > ISA_SLOTS_PER_FRAME * 3)
1418:../../../src/net/isa/isa.c ****         {
1419:../../../src/net/isa/isa.c ****         	global_slot = global_slot % ISA_SLOTS_PER_FRAME;
1420:../../../src/net/isa/isa.c ****         	global_cycle++;
1421:../../../src/net/isa/isa.c ****         }
1422:../../../src/net/isa/isa.c ****         /*
1423:../../../src/net/isa/isa.c ****         if (global_slot > MAX_ISA_GLOBAL_SLOTS) {
1424:../../../src/net/isa/isa.c **** 
1425:../../../src/net/isa/isa.c ****             global_slot -= MAX_ISA_GLOBAL_SLOTS;
1426:../../../src/net/isa/isa.c ****             global_cycle++;
1427:../../../src/net/isa/isa.c ****         }
1428:../../../src/net/isa/isa.c **** 	*/
1429:../../../src/net/isa/isa.c ****         slot = global_slot % ISA_SLOTS_PER_FRAME;
1430:../../../src/net/isa/isa.c ****         if(_isa_sync_ok == 1){
1431:../../../src/net/isa/isa.c ****             #ifdef CHANNEL_HOPPING
1432:../../../src/net/isa/isa.c ****                 channelIndex += next_slot_offset;
1433:../../../src/net/isa/isa.c ****                 currentChannel = slottedPattern[(channelIndex)&0x0F];//equivalent to mod by 16
1434:../../../src/net/isa/isa.c ****                 isa_set_channel(currentChannel);
1435:../../../src/net/isa/isa.c **** 
1436:../../../src/net/isa/isa.c ****                 /*
1437:../../../src/net/isa/isa.c ****                 if(slot>=22 && isa_node_mode == ISA_GATEWAY){
1438:../../../src/net/isa/isa.c ****                    slowIndex = slowIndex % 3;
1439:../../../src/net/isa/isa.c ****                    currentChannel = slowPattern[slowIndex];
1440:../../../src/net/isa/isa.c ****                    isa_set_channel(currentChannel);
1441:../../../src/net/isa/isa.c ****                    if(slot>=24)
1442:../../../src/net/isa/isa.c ****                       slowIndex++;
1443:../../../src/net/isa/isa.c ****                 }
1444:../../../src/net/isa/isa.c **** 
1445:../../../src/net/isa/isa.c ****                 */
1446:../../../src/net/isa/isa.c ****             //printf("CH:%d SL: %d\r\n",currentChannel,slot);
1447:../../../src/net/isa/isa.c ****             #endif
1448:../../../src/net/isa/isa.c ****             //printf("%d,%d\n\r",currentChannel,(channelIndex)&0x0F);
1449:../../../src/net/isa/isa.c ****             //printf("isa_rx_data_ready:%d\r\n",isa_rx_data_ready);
1450:../../../src/net/isa/isa.c ****             // if TX slot mask and tx ready, send a packet
1451:../../../src/net/isa/isa.c ****             #ifdef JOIN_PROCESS
1452:../../../src/net/isa/isa.c ****                 if(slot>=22 && isa_node_mode == ISA_GATEWAY)
1453:../../../src/net/isa/isa.c ****                    isa_tx_data_ready |= ((uint32_t) 1 << slot);
1454:../../../src/net/isa/isa.c ****             #endif
1455:../../../src/net/isa/isa.c ****             #ifdef TX_RX_DEBUG
1456:../../../src/net/isa/isa.c ****                 //printf("R\r\n");
1457:../../../src/net/isa/isa.c ****         //        nrk_gpio_set(NRK_DEBUG_0);
1458:../../../src/net/isa/isa.c **** 
1459:../../../src/net/isa/isa.c ****             #endif
1460:../../../src/net/isa/isa.c ****                     /*
1461:../../../src/net/isa/isa.c ****                      * who is the neighbor that this slot is configured for?
1462:../../../src/net/isa/isa.c ****                      */
1463:../../../src/net/isa/isa.c ****                 link = findLink(slot);
1464:../../../src/net/isa/isa.c ****                     if(link != NULL){
1465:../../../src/net/isa/isa.c ****                             //what type of link is this
1466:../../../src/net/isa/isa.c ****                             if (link->linkType == RX){
1467:../../../src/net/isa/isa.c ****                                     _isa_rx (link, slot);
1468:../../../src/net/isa/isa.c ****                             }
1469:../../../src/net/isa/isa.c ****                             else if (link->linkType == TX_NO_ADV){
1470:../../../src/net/isa/isa.c ****                                     _isa_tx(link , slot);
1471:../../../src/net/isa/isa.c ****                             }
1472:../../../src/net/isa/isa.c ****                             else if(link->linkType == ADV){//Added by Vignesh.
1473:../../../src/net/isa/isa.c ****                                     _isa_tx(link,slot);
1474:../../../src/net/isa/isa.c ****                             }
1475:../../../src/net/isa/isa.c ****                             //find the highest priority entry in the queue (if any)
1476:../../../src/net/isa/isa.c ****                             //if (transmitEntry = hightestPriorityEntry(neighbor) != NULL){
1477:../../../src/net/isa/isa.c ****                             //        _isa_tx(transmitEntry, link);
1478:../../../src/net/isa/isa.c ****                     //        }
1479:../../../src/net/isa/isa.c ****                     }
1480:../../../src/net/isa/isa.c **** 
1481:../../../src/net/isa/isa.c **** 
1482:../../../src/net/isa/isa.c ****                 //printf("isa tx slot %d.\n\r",slot);
1483:../../../src/net/isa/isa.c ****         //        printf("TX %d,%d,%d\n\r",currentChannel,(channelIndex)&0x0F,slot);
1484:../../../src/net/isa/isa.c ****                 //printf("tx\n\r");
1485:../../../src/net/isa/isa.c ****         //        _isa_tx (slot);
1486:../../../src/net/isa/isa.c ****         //        previous_tx_slot = slot;
1487:../../../src/net/isa/isa.c ****                 #ifdef HIGH_TIMER_DEBUG
1488:../../../src/net/isa/isa.c ****                         //printf("TX later, high speed timer value is %d.\n\r", _nrk_high_speed_tim
1489:../../../src/net/isa/isa.c ****                 #endif
1490:../../../src/net/isa/isa.c **** 
1491:../../../src/net/isa/isa.c **** 
1492:../../../src/net/isa/isa.c ****         } else        {
1493:../../../src/net/isa/isa.c **** 
1494:../../../src/net/isa/isa.c ****             ///do joining or sync request here
1495:../../../src/net/isa/isa.c ****         //    DHDR = configDHDR(0);
1496:../../../src/net/isa/isa.c ****             if(isa_node_mode != ISA_GATEWAY){//change
1497:../../../src/net/isa/isa.c ****                 #ifdef JOIN_PROCESS
1498:../../../src/net/isa/isa.c ****                 if(!_isa_join_ok){
1499:../../../src/net/isa/isa.c ****                     _isa_join_process();
1500:../../../src/net/isa/isa.c ****                 }
1501:../../../src/net/isa/isa.c ****                 #endif
1502:../../../src/net/isa/isa.c ****                 DHDRcount = 0;        //make send request for time correction
1503:../../../src/net/isa/isa.c ****                 _isa_sync_ok = _isa_init_sync();
1504:../../../src/net/isa/isa.c **** 
1505:../../../src/net/isa/isa.c ****                 //printf("waiting for sync...isa_sync_ok is %d.\n\r",_isa_sync_ok);
1506:../../../src/net/isa/isa.c ****             }else if (isa_node_mode == ISA_GATEWAY){
1507:../../../src/net/isa/isa.c ****                 _isa_sync_ok = 1;
1508:../../../src/net/isa/isa.c ****             }
1509:../../../src/net/isa/isa.c ****         }
1510:../../../src/net/isa/isa.c **** 
1511:../../../src/net/isa/isa.c ****         if(slot_expired >= EXPIRATION && isa_node_mode != ISA_GATEWAY){
1512:../../../src/net/isa/isa.c ****             //printf("re-sync\n\r");
1513:../../../src/net/isa/isa.c ****             _isa_sync_ok = 0;
1514:../../../src/net/isa/isa.c ****             slot_expired = 0;
1515:../../../src/net/isa/isa.c ****             global_slot = 0;
1516:../../../src/net/isa/isa.c ****             next_slot_offset = 0;
1517:../../../src/net/isa/isa.c ****             resync_times++;
1518:../../../src/net/isa/isa.c ****             if(isa_id!=1){
1519:../../../src/net/isa/isa.c ****                 channelIndex = isa_clk_src_id;
1520:../../../src/net/isa/isa.c ****                 currentChannel = slottedPattern[channelIndex];
1521:../../../src/net/isa/isa.c ****             }else{
1522:../../../src/net/isa/isa.c ****                 channelIndex = 0;
1523:../../../src/net/isa/isa.c ****                 currentChannel = slottedPattern[channelIndex];
1524:../../../src/net/isa/isa.c ****             }
1525:../../../src/net/isa/isa.c ****             isa_set_channel(currentChannel);
1526:../../../src/net/isa/isa.c **** 
1527:../../../src/net/isa/isa.c **** 
1528:../../../src/net/isa/isa.c ****         }else{
1529:../../../src/net/isa/isa.c ****         	//printf("Channel%d ,channelINdex %d\r\n",currentChannel,channelIndex);
1530:../../../src/net/isa/isa.c ****             //printf("global_slot is %d. global cycle is %d.\n\r",global_slot,global_cycle);
1531:../../../src/net/isa/isa.c ****             next_slot_offset = isa_get_slots_until_next_wakeup (global_slot);
1532:../../../src/net/isa/isa.c ****           //  printf("NOS:%d\n\r",next_slot_offset);
1533:../../../src/net/isa/isa.c ****             //printf("%d,%d,%d,%d\n\r",_nrk_os_timer_get (),_nrk_get_next_wakeup (),global_slot,nex
1534:../../../src/net/isa/isa.c ****             global_slot += next_slot_offset;
1535:../../../src/net/isa/isa.c ****             //nrk_clr_led (1);
1536:../../../src/net/isa/isa.c ****             #ifdef LED_SLOT_DEBUG
1537:../../../src/net/isa/isa.c ****             nrk_led_clr(0);
1538:../../../src/net/isa/isa.c ****             #endif
1539:../../../src/net/isa/isa.c **** 
1540:../../../src/net/isa/isa.c ****             offsetY = 0;
1541:../../../src/net/isa/isa.c ****           //  printf("%d\n\r",next_slot_offset);
1542:../../../src/net/isa/isa.c ****                 //nrk_gpio_set(NRK_DEBUG_2);
1543:../../../src/net/isa/isa.c **** 
1544:../../../src/net/isa/isa.c ****             if (txCount % 1000 == 0){
1545:../../../src/net/isa/isa.c ****             //                   printf ("PL:%d\r\n",packetsLost);
1546:../../../src/net/isa/isa.c ****                                  }
1547:../../../src/net/isa/isa.c **** 
1548:../../../src/net/isa/isa.c ****         // Check to see if and adv is due if not gateway
1549:../../../src/net/isa/isa.c **** 
1550:../../../src/net/isa/isa.c ****             if (isa_node_mode!=ISA_GATEWAY){
1551:../../../src/net/isa/isa.c ****                     if (isDiscoveryAlertDue()){
1552:../../../src/net/isa/isa.c ****                     if (sendAdv()== ISA_ERROR){
1553:../../../src/net/isa/isa.c ****                             printIsaError();
1554:../../../src/net/isa/isa.c ****                     }
1555:../../../src/net/isa/isa.c ****                     printf ("AdvSent\r\n");
1556:../../../src/net/isa/isa.c ****                     updateLastSentTime();
1557:../../../src/net/isa/isa.c ****                     setNewDisplay(13, dmo.dlAddress-1);
1558:../../../src/net/isa/isa.c ****             }
1559:../../../src/net/isa/isa.c ****             }
1560:../../../src/net/isa/isa.c ****             nrk_wait_until_next_n_periods (next_slot_offset);
1561:../../../src/net/isa/isa.c ****            // nrk_gpio_clr(NRK_DEBUG_2);
1562:../../../src/net/isa/isa.c ****             #ifdef LED_SLOT_DEBUG
1563:../../../src/net/isa/isa.c ****             nrk_led_set(0);
1564:../../../src/net/isa/isa.c ****             #endif
1565:../../../src/net/isa/isa.c ****         //}
1566:../../../src/net/isa/isa.c ****         //nrk_set_led (1);
1567:../../../src/net/isa/isa.c ****         // Set last_slot_time to the time of the start of the slot
1568:../../../src/net/isa/isa.c ****         }
1569:../../../src/net/isa/isa.c ****     }
1570:../../../src/net/isa/isa.c **** }
1571:../../../src/net/isa/isa.c **** 
1572:../../../src/net/isa/isa.c **** void isa_task_config ()
1573:../../../src/net/isa/isa.c **** {
 748               	.LM76:
 749               	.LFBB13:
 750               	/* prologue: frame size=0 */
 751 01e2 0F93      		push r16
 752 01e4 1F93      		push r17
 753               	/* prologue end (size=2) */
1574:../../../src/net/isa/isa.c ****     isa_task.task = isa_nw_task;
 755               	.LM77:
 756 01e6 80E0      		ldi r24,lo8(pm(isa_nw_task))
 757 01e8 90E0      		ldi r25,hi8(pm(isa_nw_task))
 758 01ea 9093 0000 		sts (isa_task+5)+1,r25
 759 01ee 8093 0000 		sts isa_task+5,r24
1575:../../../src/net/isa/isa.c ****     nrk_task_set_stk( &isa_task, isa_task_stack, ISA_STACK_SIZE);
 761               	.LM78:
 762 01f2 00E0      		ldi r16,lo8(isa_task)
 763 01f4 10E0      		ldi r17,hi8(isa_task)
 764 01f6 40E8      		ldi r20,lo8(128)
 765 01f8 50E0      		ldi r21,hi8(128)
 766 01fa 60E0      		ldi r22,lo8(isa_task_stack)
 767 01fc 70E0      		ldi r23,hi8(isa_task_stack)
 768 01fe C801      		movw r24,r16
 769 0200 0E94 0000 		call nrk_task_set_stk
1576:../../../src/net/isa/isa.c ****     isa_task.prio = 20;
 771               	.LM79:
 772 0204 84E1      		ldi r24,lo8(20)
 773 0206 8093 0000 		sts isa_task+8,r24
1577:../../../src/net/isa/isa.c ****     isa_task.FirstActivation = TRUE;
 775               	.LM80:
 776 020a 81E0      		ldi r24,lo8(1)
 777 020c 8093 0000 		sts isa_task+7,r24
1578:../../../src/net/isa/isa.c ****     isa_task.Type = BASIC_TASK;
 779               	.LM81:
 780 0210 8093 0000 		sts isa_task+9,r24
1579:../../../src/net/isa/isa.c ****     isa_task.SchType = PREEMPTIVE;
 782               	.LM82:
 783 0214 8093 0000 		sts isa_task+10,r24
1580:../../../src/net/isa/isa.c ****     isa_task.period.secs = 0;
 785               	.LM83:
 786 0218 1092 0000 		sts isa_task+11,__zero_reg__
 787 021c 1092 0000 		sts (isa_task+11)+1,__zero_reg__
 788 0220 1092 0000 		sts (isa_task+11)+2,__zero_reg__
 789 0224 1092 0000 		sts (isa_task+11)+3,__zero_reg__
1581:../../../src/net/isa/isa.c ****     isa_task.period.nano_secs = 10*NANOS_PER_MS;
 791               	.LM84:
 792 0228 80E8      		ldi r24,lo8(10000000)
 793 022a 96E9      		ldi r25,hi8(10000000)
 794 022c A8E9      		ldi r26,hlo8(10000000)
 795 022e B0E0      		ldi r27,hhi8(10000000)
 796 0230 8093 0000 		sts isa_task+15,r24
 797 0234 9093 0000 		sts (isa_task+15)+1,r25
 798 0238 A093 0000 		sts (isa_task+15)+2,r26
 799 023c B093 0000 		sts (isa_task+15)+3,r27
1582:../../../src/net/isa/isa.c ****     isa_task.cpu_reserve.secs = 0;
 801               	.LM85:
 802 0240 1092 0000 		sts isa_task+19,__zero_reg__
 803 0244 1092 0000 		sts (isa_task+19)+1,__zero_reg__
 804 0248 1092 0000 		sts (isa_task+19)+2,__zero_reg__
 805 024c 1092 0000 		sts (isa_task+19)+3,__zero_reg__
1583:../../../src/net/isa/isa.c ****     isa_task.cpu_reserve.nano_secs = 0;
 807               	.LM86:
 808 0250 1092 0000 		sts isa_task+23,__zero_reg__
 809 0254 1092 0000 		sts (isa_task+23)+1,__zero_reg__
 810 0258 1092 0000 		sts (isa_task+23)+2,__zero_reg__
 811 025c 1092 0000 		sts (isa_task+23)+3,__zero_reg__
1584:../../../src/net/isa/isa.c ****     isa_task.offset.secs = 0;
 813               	.LM87:
 814 0260 1092 0000 		sts isa_task+27,__zero_reg__
 815 0264 1092 0000 		sts (isa_task+27)+1,__zero_reg__
 816 0268 1092 0000 		sts (isa_task+27)+2,__zero_reg__
 817 026c 1092 0000 		sts (isa_task+27)+3,__zero_reg__
1585:../../../src/net/isa/isa.c ****     isa_task.offset.nano_secs = 0;
 819               	.LM88:
 820 0270 1092 0000 		sts isa_task+31,__zero_reg__
 821 0274 1092 0000 		sts (isa_task+31)+1,__zero_reg__
 822 0278 1092 0000 		sts (isa_task+31)+2,__zero_reg__
 823 027c 1092 0000 		sts (isa_task+31)+3,__zero_reg__
1586:../../../src/net/isa/isa.c ****     nrk_activate_task (&isa_task);
 825               	.LM89:
 826 0280 C801      		movw r24,r16
 827 0282 0E94 0000 		call nrk_activate_task
 828               	/* epilogue: frame size=0 */
 829 0286 1F91      		pop r17
 830 0288 0F91      		pop r16
 831 028a 0895      		ret
 832               	/* epilogue end (size=3) */
 833               	/* function isa_task_config size 85 (80) */
 835               	.Lscope13:
 837               		.stabd	78,0,0
 839               	.global	_isa_init_sync
 841               	_isa_init_sync:
 842               		.stabd	46,0,0
 844               	.LM90:
 845               	.LFBB14:
 846               	/* prologue: frame size=0 */
 847 028c CF92      		push r12
 848 028e DF92      		push r13
 849 0290 EF92      		push r14
 850 0292 FF92      		push r15
 851 0294 0F93      		push r16
 852 0296 1F93      		push r17
 853 0298 CF93      		push r28
 854 029a DF93      		push r29
 855               	/* prologue end (size=8) */
 856 029c EE24      		clr r14
 857 029e FF24      		clr r15
 858 02a0 80E0      		ldi r24,lo8(isa_rfRxInfo)
 859 02a2 C82E      		mov r12,r24
 860 02a4 80E0      		ldi r24,hi8(isa_rfRxInfo)
 861 02a6 D82E      		mov r13,r24
 862               	.L71:
 864               	.LM91:
 865 02a8 E091 0000 		lds r30,isa_rfRxInfo+5
 866 02ac F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 867 02b0 81E0      		ldi r24,lo8(1)
 868 02b2 8083      		st Z,r24
 870               	.LM92:
 871 02b4 6091 0000 		lds r22,isa_param+2
 872 02b8 C601      		movw r24,r12
 873 02ba 0E94 0000 		call rf_set_rx
 875               	.LM93:
 876 02be 0E94 0000 		call rf_polling_rx_on
 878               	.LM94:
 879 02c2 1092 0000 		sts _isa_sync_ok,__zero_reg__
 881               	.LM95:
 882 02c6 8AEF      		ldi r24,lo8(-6)
 883 02c8 0E94 0000 		call _nrk_set_next_wakeup
 885               	.LM96:
 886 02cc 80E0      		ldi r24,lo8(0)
 887 02ce 0E94 0000 		call _nrk_os_timer_set
 888 02d2 00E0      		ldi r16,lo8(0)
 889 02d4 00C0      		rjmp .L72
 890               	.L53:
 892               	.LM97:
 893 02d6 0E94 0000 		call _nrk_os_timer_get
 894 02da 0817      		cp r16,r24
 895 02dc 01F0      		breq .L72
 897               	.LM98:
 898 02de 0E94 0000 		call _nrk_os_timer_get
 899 02e2 082F      		mov r16,r24
 901               	.LM99:
 902 02e4 0894      		sec
 903 02e6 E11C      		adc r14,__zero_reg__
 904 02e8 F11C      		adc r15,__zero_reg__
 906               	.LM100:
 907 02ea 81E1      		ldi r24,lo8(10001)
 908 02ec E816      		cp r14,r24
 909 02ee 87E2      		ldi r24,hi8(10001)
 910 02f0 F806      		cpc r15,r24
 911 02f2 00F0      		brlo .L72
 912 02f4 EE24      		clr r14
 913 02f6 FF24      		clr r15
 914 02f8 00C0      		rjmp .L56
 915               	.L72:
 917               	.LM101:
 918 02fa 0E94 0000 		call rf_rx_check_sfd
 919 02fe 182F      		mov r17,r24
 920 0300 8823      		tst r24
 921 0302 01F0      		breq .L53
 922               	.L56:
 924               	.LM102:
 925 0304 0E94 0000 		call _nrk_high_speed_timer_reset
 927               	.LM103:
 928 0308 0E94 0000 		call _nrk_os_timer_get
 930               	.LM104:
 931 030c C82F      		mov r28,r24
 932 030e DD27      		clr r29
 933 0310 2496      		adiw r28,4
 935               	.LM105:
 936 0312 1123      		tst r17
 937 0314 01F0      		breq .L58
 938 0316 00C0      		rjmp .L68
 939               	.L59:
 941               	.LM106:
 942 0318 0E94 0000 		call _nrk_os_timer_get
 943 031c 9927      		clr r25
 944 031e C817      		cp r28,r24
 945 0320 D907      		cpc r29,r25
 946 0322 00F0      		brlo .L58
 947               	.L68:
 949               	.LM107:
 950 0324 60E8      		ldi r22,lo8(-128)
 951 0326 80E0      		ldi r24,lo8(0)
 952 0328 0E94 0000 		call rf_polling_rx_packet
 953 032c 182F      		mov r17,r24
 954 032e 8823      		tst r24
 955 0330 01F0      		breq .L59
 956               	.L58:
 958               	.LM108:
 959 0332 0E94 0000 		call rf_rx_off
 961               	.LM109:
 962 0336 1130      		cpi r17,lo8(1)
 963 0338 01F0      		breq .+2
 964 033a 00C0      		rjmp .L71
 965               	.LBB40:
 967               	.LM110:
 968 033c E091 0000 		lds r30,isa_rfRxInfo+5
 969 0340 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 970 0344 2081      		ld r18,Z
 972               	.LM111:
 973 0346 9281      		ldd r25,Z+2
 974 0348 8091 0000 		lds r24,isa_clk_src_id
 975 034c 9817      		cp r25,r24
 976 034e 01F0      		breq .+2
 977 0350 00C0      		rjmp .L71
 978 0352 24FF      		sbrs r18,4
 979 0354 00C0      		rjmp .L71
 981               	.LM112:
 982 0356 81E0      		ldi r24,lo8(1)
 983 0358 90E0      		ldi r25,hi8(1)
 984 035a A0E0      		ldi r26,hlo8(1)
 985 035c B0E0      		ldi r27,hhi8(1)
 986 035e 8093 0000 		sts isa_rx_data_ready,r24
 987 0362 9093 0000 		sts (isa_rx_data_ready)+1,r25
 988 0366 A093 0000 		sts (isa_rx_data_ready)+2,r26
 989 036a B093 0000 		sts (isa_rx_data_ready)+3,r27
 991               	.LM113:
 992 036e 8181      		ldd r24,Z+1
 993 0370 9927      		clr r25
 994 0372 9093 0000 		sts (global_slot)+1,r25
 995 0376 8093 0000 		sts global_slot,r24
 997               	.LM114:
 998 037a 82E0      		ldi r24,lo8(2)
 999 037c 90E0      		ldi r25,hi8(2)
 1000 037e 0E94 0000 		call nrk_led_toggle
 1002               	.LM115:
 1003 0382 6091 0000 		lds r22,__iob+2
 1004 0386 7091 0000 		lds r23,(__iob+2)+1
 1005 038a 89E6      		ldi r24,lo8(105)
 1006 038c 90E0      		ldi r25,hi8(105)
 1007 038e 0E94 0000 		call fputc
 1008               	.LBE40:
 1010               	.LM116:
 1011 0392 1093 0000 		sts _isa_sync_ok,r17
 1012               	.LBB41:
 1013               	.LBB42:
 1015               	.LM117:
 1016 0396 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 1017 039a 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 1018 039e 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 1019 03a2 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 1020               	.LBE42:
 1021               	.LBE41:
 1023               	.LM118:
 1024 03a6 0E94 0000 		call _nrk_os_timer_stop
 1026               	.LM119:
 1027 03aa 0E94 0000 		call _nrk_os_timer_reset
 1029               	.LM120:
 1030 03ae 8AE0      		ldi r24,lo8(10)
 1031 03b0 0E94 0000 		call _nrk_set_next_wakeup
 1033               	.LM121:
 1034 03b4 87E0      		ldi r24,lo8(7)
 1035 03b6 0E94 0000 		call _nrk_os_timer_set
 1037               	.LM122:
 1038 03ba 61E1      		ldi r22,lo8(-32751)
 1039 03bc 70E8      		ldi r23,hi8(-32751)
 1040 03be 80E0      		ldi r24,lo8(0)
 1041 03c0 90E0      		ldi r25,hi8(0)
 1042 03c2 0E94 0000 		call nrk_high_speed_timer_wait
 1044               	.LM123:
 1045 03c6 0E94 0000 		call _nrk_os_timer_start
 1047               	.LM124:
 1048 03ca E091 0000 		lds r30,nrk_cur_task_TCB
 1049 03ce F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1050 03d2 8AE0      		ldi r24,lo8(10)
 1051 03d4 90E0      		ldi r25,hi8(10)
 1052 03d6 968B      		std Z+22,r25
 1053 03d8 858B      		std Z+21,r24
 1054 03da 8091 0000 		lds r24,_isa_sync_ok
 1056               	.LM125:
 1057 03de 9927      		clr r25
 1058               	/* epilogue: frame size=0 */
 1059 03e0 DF91      		pop r29
 1060 03e2 CF91      		pop r28
 1061 03e4 1F91      		pop r17
 1062 03e6 0F91      		pop r16
 1063 03e8 FF90      		pop r15
 1064 03ea EF90      		pop r14
 1065 03ec DF90      		pop r13
 1066 03ee CF90      		pop r12
 1067 03f0 0895      		ret
 1068               	/* epilogue end (size=9) */
 1069               	/* function _isa_init_sync size 179 (162) */
 1077               	.Lscope14:
 1079               		.stabd	78,0,0
 1080               		.data
 1081               	.LC0:
 1082 0000 7061 636B 		.string	"packet is too long, times out.\n\r"
 1082      6574 2069 
 1082      7320 746F 
 1082      6F20 6C6F 
 1082      6E67 2C20 
 1083               	.LC1:
 1084 0021 6620 6368 		.string	"f channel %d\r\n"
 1084      616E 6E65 
 1084      6C20 2564 
 1084      0D0A 00
 1085               		.text
 1089               	.global	_isa_tx
 1091               	_isa_tx:
 1092               		.stabd	46,0,0
 1094               	.LM126:
 1095               	.LFBB15:
 1096               	/* prologue: frame size=7 */
 1097 03f2 BF92      		push r11
 1098 03f4 CF92      		push r12
 1099 03f6 DF92      		push r13
 1100 03f8 EF92      		push r14
 1101 03fa FF92      		push r15
 1102 03fc 0F93      		push r16
 1103 03fe 1F93      		push r17
 1104 0400 CF93      		push r28
 1105 0402 DF93      		push r29
 1106 0404 CDB7      		in r28,__SP_L__
 1107 0406 DEB7      		in r29,__SP_H__
 1108 0408 2797      		sbiw r28,7
 1109 040a 0FB6      		in __tmp_reg__,__SREG__
 1110 040c F894      		cli
 1111 040e DEBF      		out __SP_H__,r29
 1112 0410 0FBE      		out __SREG__,__tmp_reg__
 1113 0412 CDBF      		out __SP_L__,r28
 1114               	/* prologue end (size=17) */
 1115 0414 7C01      		movw r14,r24
 1116 0416 6B01      		movw r12,r22
 1118               	.LM127:
 1119 0418 81E0      		ldi r24,lo8(1)
 1120 041a 8093 0000 		sts isa_rfTxInfo+5,r24
 1122               	.LM128:
 1123 041e F701      		movw r30,r14
 1124 0420 8481      		ldd r24,Z+4
 1125 0422 8130      		cpi r24,lo8(1)
 1126 0424 01F4      		brne .L74
 1127               	.LBB43:
 1129               	.LM129:
 1130 0426 C701      		movw r24,r14
 1131 0428 0E94 0000 		call getHighPriorityEntry
 1133               	.LM130:
 1134 042c 0097      		sbiw r24,0
 1135 042e 01F4      		brne .+2
 1136 0430 00C0      		rjmp .L118
 1138               	.LM131:
 1139 0432 8C01      		movw r16,r24
 1141               	.LM132:
 1142 0434 C092 0000 		sts previous_tx_slot,r12
 1144               	.LM133:
 1145 0438 0F5F      		subi r16,lo8(-(1))
 1146 043a 1F4F      		sbci r17,hi8(-(1))
 1147 043c 1093 0000 		sts (isa_rfTxInfo+3)+1,r17
 1148 0440 0093 0000 		sts isa_rfTxInfo+3,r16
 1150               	.LM134:
 1151 0444 F801      		movw r30,r16
 1152 0446 8291      		ld r24,-Z
 1153 0448 8F01      		movw r16,r30
 1154 044a 8093 0000 		sts isa_rfTxInfo+2,r24
 1156               	.LM135:
 1157 044e C701      		movw r24,r14
 1158 0450 0E94 0000 		call configDHDR
 1159 0454 F82E      		mov r15,r24
 1161               	.LM136:
 1162 0456 E091 0000 		lds r30,isa_rfTxInfo+3
 1163 045a F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1164 045e 8083      		st Z,r24
 1166               	.LM137:
 1167 0460 E091 0000 		lds r30,isa_rfTxInfo+3
 1168 0464 F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1170               	.LM138:
 1171 0468 8781      		ldd r24,Z+7
 1172 046a 8823      		tst r24
 1173 046c 01F0      		breq .L78
 1174 046e E091 0000 		lds r30,isa_rfTxInfo+3
 1175 0472 F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1176 0476 8091 0000 		lds r24,isa_id
 1177 047a 8283      		std Z+2,r24
 1178               	.L78:
 1180               	.LM139:
 1181 047c F801      		movw r30,r16
 1182 047e EC57      		subi r30,lo8(-(132))
 1183 0480 FF4F      		sbci r31,hi8(-(132))
 1184 0482 8081      		ld r24,Z
 1185 0484 8F5F      		subi r24,lo8(-(1))
 1186 0486 8083      		st Z,r24
 1187 0488 00C0      		rjmp .L80
 1188               	.L74:
 1189               	.LBE43:
 1191               	.LM140:
 1192 048a 8430      		cpi r24,lo8(4)
 1193 048c 01F4      		brne .L80
 1194               	.LBB44:
 1196               	.LM141:
 1197 048e 80E0      		ldi r24,lo8(adv_buf)
 1198 0490 90E0      		ldi r25,hi8(adv_buf)
 1199 0492 9093 0000 		sts (isa_rfTxInfo+3)+1,r25
 1200 0496 8093 0000 		sts isa_rfTxInfo+3,r24
 1202               	.LM142:
 1203 049a 8BE1      		ldi r24,lo8(27)
 1204 049c 8093 0000 		sts isa_rfTxInfo+2,r24
 1206               	.LM143:
 1207 04a0 C701      		movw r24,r14
 1208 04a2 0E94 0000 		call configDHDR
 1209 04a6 F82E      		mov r15,r24
 1211               	.LM144:
 1212 04a8 E091 0000 		lds r30,isa_rfTxInfo+3
 1213 04ac F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1214 04b0 8083      		st Z,r24
 1216               	.LM145:
 1217 04b2 E091 0000 		lds r30,isa_rfTxInfo+3
 1218 04b6 F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1219 04ba 8091 0000 		lds r24,isa_id
 1220 04be 8283      		std Z+2,r24
 1222               	.LM146:
 1223 04c0 E091 0000 		lds r30,isa_rfTxInfo+3
 1224 04c4 F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1225 04c8 8091 0000 		lds r24,global_slot
 1226 04cc 9091 0000 		lds r25,(global_slot)+1
 1227 04d0 8183      		std Z+1,r24
 1229               	.LM147:
 1230 04d2 E091 0000 		lds r30,isa_rfTxInfo+3
 1231 04d6 F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1233               	.LM148:
 1234 04da E581      		ldd r30,Z+5
 1235 04dc FF27      		clr r31
 1236 04de 1082      		st Z,__zero_reg__
 1237               	.L80:
 1238               	.LBE44:
 1240               	.LM149:
 1241 04e0 0E94 0000 		call _nrk_high_speed_timer_reset
 1243               	.LM150:
 1244 04e4 60E8      		ldi r22,lo8(9600)
 1245 04e6 75E2      		ldi r23,hi8(9600)
 1246 04e8 80E0      		ldi r24,lo8(0)
 1247 04ea 90E0      		ldi r25,hi8(0)
 1248 04ec 0E94 0000 		call nrk_high_speed_timer_wait
 1250               	.LM151:
 1251 04f0 B090 0000 		lds r11,NRK_DEBUG_1
 1252 04f4 8B2D      		mov r24,r11
 1253 04f6 0E94 0000 		call nrk_gpio_set
 1255               	.LM152:
 1256 04fa 4091 0000 		lds r20,isa_param+4
 1257 04fe 5091 0000 		lds r21,(isa_param+4)+1
 1258 0502 6091 0000 		lds r22,slot_start_time
 1259 0506 7091 0000 		lds r23,(slot_start_time)+1
 1260 050a 20E0      		ldi r18,lo8(tx_start_time)
 1261 050c 30E0      		ldi r19,hi8(tx_start_time)
 1262 050e 80E0      		ldi r24,lo8(isa_rfTxInfo)
 1263 0510 90E0      		ldi r25,hi8(isa_rfTxInfo)
 1264 0512 0E94 0000 		call rf_tx_tdma_packet
 1265 0516 8823      		tst r24
 1266 0518 01F0      		breq .L82
 1268               	.LM153:
 1269 051a 8091 0000 		lds r24,txCount
 1270 051e 9091 0000 		lds r25,(txCount)+1
 1271 0522 0196      		adiw r24,1
 1272 0524 9093 0000 		sts (txCount)+1,r25
 1273 0528 8093 0000 		sts txCount,r24
 1275               	.LM154:
 1276 052c 8B2D      		mov r24,r11
 1277 052e 0E94 0000 		call nrk_gpio_clr
 1279               	.LM155:
 1280 0532 83E0      		ldi r24,lo8(3)
 1281 0534 90E0      		ldi r25,hi8(3)
 1282 0536 0E94 0000 		call nrk_led_toggle
 1284               	.LM156:
 1285 053a 8091 0000 		lds r24,tx_start_time
 1286 053e 9091 0000 		lds r25,(tx_start_time)+1
 1287 0542 2091 0000 		lds r18,slot_start_time
 1288 0546 3091 0000 		lds r19,(slot_start_time)+1
 1289 054a 821B      		sub r24,r18
 1290 054c 930B      		sbc r25,r19
 1291 054e 9093 0000 		sts (offsetY)+1,r25
 1292 0552 8093 0000 		sts offsetY,r24
 1293               	.L82:
 1295               	.LM157:
 1296 0556 8091 0000 		lds r24,isa_tx_done_signal
 1297 055a 0E94 0000 		call nrk_event_signal
 1299               	.LM158:
 1300 055e F7FE      		sbrs r15,7
 1301 0560 00C0      		rjmp .L118
 1303               	.LM159:
 1304 0562 0E94 0000 		call rf_polling_rx_on
 1306               	.LM160:
 1307 0566 8B2D      		mov r24,r11
 1308 0568 0E94 0000 		call nrk_gpio_set
 1310               	.LM161:
 1311 056c 0E94 0000 		call _nrk_high_speed_timer_reset
 1313               	.LM162:
 1314 0570 60E0      		ldi r22,lo8(4096)
 1315 0572 70E1      		ldi r23,hi8(4096)
 1316 0574 80E0      		ldi r24,lo8(0)
 1317 0576 90E0      		ldi r25,hi8(0)
 1318 0578 0E94 0000 		call nrk_high_speed_timer_wait
 1320               	.LM163:
 1321 057c 0E94 0000 		call _nrk_os_timer_get
 1322 0580 8983      		std Y+1,r24
 1324               	.LM164:
 1325 0582 8981      		ldd r24,Y+1
 1326 0584 8E5F      		subi r24,lo8(-(2))
 1327 0586 8983      		std Y+1,r24
 1328 0588 00C0      		rjmp .L85
 1329               	.L86:
 1331               	.LM165:
 1332 058a 0E94 0000 		call _nrk_os_timer_get
 1333 058e 9981      		ldd r25,Y+1
 1334 0590 9817      		cp r25,r24
 1335 0592 00F0      		brlo .+2
 1336 0594 00C0      		rjmp .L85
 1338               	.LM166:
 1339 0596 6091 0000 		lds r22,previous_tx_slot
 1341               	.LM167:
 1342 059a 862F      		mov r24,r22
 1343 059c 9927      		clr r25
 1344 059e C816      		cp r12,r24
 1345 05a0 D906      		cpc r13,r25
 1346 05a2 01F4      		brne .L88
 1348               	.LM168:
 1349 05a4 8091 0000 		lds r24,slot_expired
 1350 05a8 9091 0000 		lds r25,(slot_expired)+1
 1351 05ac 4996      		adiw r24,25
 1352 05ae 9093 0000 		sts (slot_expired)+1,r25
 1353 05b2 8093 0000 		sts slot_expired,r24
 1354 05b6 00C0      		rjmp .L90
 1355               	.L88:
 1357               	.LM169:
 1358 05b8 8C2D      		mov r24,r12
 1359 05ba 861B      		sub r24,r22
 1360 05bc 2091 0000 		lds r18,slot_expired
 1361 05c0 3091 0000 		lds r19,(slot_expired)+1
 1362 05c4 482F      		mov r20,r24
 1363 05c6 5527      		clr r21
 1364 05c8 47FD      		sbrc r20,7
 1365 05ca 5095      		com r21
 1367               	.LM170:
 1368 05cc 1816      		cp __zero_reg__,r24
 1369 05ce 04F0      		brlt .L124
 1371               	.LM171:
 1372 05d0 275E      		subi r18,lo8(-(25))
 1373 05d2 3F4F      		sbci r19,hi8(-(25))
 1374               	.L124:
 1375 05d4 240F      		add r18,r20
 1376 05d6 351F      		adc r19,r21
 1377 05d8 3093 0000 		sts (slot_expired)+1,r19
 1378 05dc 2093 0000 		sts slot_expired,r18
 1379               	.L90:
 1381               	.LM172:
 1382 05e0 0E94 0000 		call rf_rx_off
 1384               	.LM173:
 1385 05e4 8B2D      		mov r24,r11
 1386 05e6 0E94 0000 		call nrk_gpio_clr
 1388               	.LM174:
 1389 05ea 6091 0000 		lds r22,__iob+2
 1390 05ee 7091 0000 		lds r23,(__iob+2)+1
 1391 05f2 83E7      		ldi r24,lo8(115)
 1392 05f4 90E0      		ldi r25,hi8(115)
 1393 05f6 0E94 0000 		call fputc
 1395               	.LM175:
 1396 05fa 8091 0000 		lds r24,packetsLost
 1397 05fe 9091 0000 		lds r25,(packetsLost)+1
 1398 0602 0196      		adiw r24,1
 1399 0604 9093 0000 		sts (packetsLost)+1,r25
 1400 0608 8093 0000 		sts packetsLost,r24
 1402               	.LM176:
 1403 060c 0C57      		subi r16,lo8(-(132))
 1404 060e 1F4F      		sbci r17,hi8(-(132))
 1405 0610 F801      		movw r30,r16
 1406 0612 8081      		ld r24,Z
 1407 0614 0458      		subi r16,lo8(-(-132))
 1408 0616 1040      		sbci r17,hi8(-(-132))
 1409 0618 8330      		cpi r24,lo8(3)
 1410 061a 00F4      		brsh .+2
 1411 061c 00C0      		rjmp .L118
 1412 061e 00C0      		rjmp .L129
 1413               	.L85:
 1415               	.LM177:
 1416 0620 0E94 0000 		call rf_rx_check_sfd
 1417 0624 8823      		tst r24
 1418 0626 01F4      		brne .+2
 1419 0628 00C0      		rjmp .L86
 1421               	.LM178:
 1422 062a 0E94 0000 		call _nrk_os_timer_get
 1423 062e 8983      		std Y+1,r24
 1425               	.LM179:
 1426 0630 8981      		ldd r24,Y+1
 1427 0632 8E5F      		subi r24,lo8(-(2))
 1428 0634 8983      		std Y+1,r24
 1430               	.LM180:
 1431 0636 F2FE      		sbrs r15,2
 1432 0638 00C0      		rjmp .L97
 1433 063a 44E0      		ldi r20,lo8(4)
 1434 063c E42E      		mov r14,r20
 1435 063e 00C0      		rjmp .L119
 1436               	.L100:
 1438               	.LM181:
 1439 0640 0E94 0000 		call _nrk_os_timer_get
 1440 0644 9981      		ldd r25,Y+1
 1441 0646 9817      		cp r25,r24
 1442 0648 00F4      		brsh .L119
 1444               	.LM182:
 1445 064a 80E0      		ldi r24,lo8(.LC0)
 1446 064c 90E0      		ldi r25,hi8(.LC0)
 1447 064e 9F93      		push r25
 1448 0650 8F93      		push r24
 1449 0652 0E94 0000 		call printf
 1451               	.LM183:
 1452 0656 8091 0000 		lds r24,packetsLost
 1453 065a 9091 0000 		lds r25,(packetsLost)+1
 1454 065e 0196      		adiw r24,1
 1455 0660 9093 0000 		sts (packetsLost)+1,r25
 1456 0664 8093 0000 		sts packetsLost,r24
 1458               	.LM184:
 1459 0668 0E94 0000 		call _nrk_os_timer_get
 1460 066c 8093 0000 		sts tmp_curSec,r24
 1462               	.LM185:
 1463 0670 0C57      		subi r16,lo8(-(132))
 1464 0672 1F4F      		sbci r17,hi8(-(132))
 1465 0674 F801      		movw r30,r16
 1466 0676 8081      		ld r24,Z
 1467 0678 0458      		subi r16,lo8(-(-132))
 1468 067a 1040      		sbci r17,hi8(-(-132))
 1469 067c 0F90      		pop __tmp_reg__
 1470 067e 0F90      		pop __tmp_reg__
 1471 0680 8330      		cpi r24,lo8(3)
 1472 0682 01F0      		breq .+2
 1473 0684 00C0      		rjmp .L118
 1474               	.L129:
 1476               	.LM186:
 1477 0686 F801      		movw r30,r16
 1478 0688 E958      		subi r30,lo8(-(119))
 1479 068a FF4F      		sbci r31,hi8(-(119))
 1480 068c 8081      		ld r24,Z
 1481 068e 9181      		ldd r25,Z+1
 1482 0690 892B      		or r24,r25
 1483 0692 01F4      		brne .+2
 1484 0694 00C0      		rjmp .L126
 1486               	.LM187:
 1487 0696 0190      		ld __tmp_reg__,Z+
 1488 0698 F081      		ld r31,Z
 1489 069a E02D      		mov r30,__tmp_reg__
 1490 069c 60E0      		ldi r22,lo8(0)
 1491 069e 00C0      		rjmp .L125
 1492               	.L97:
 1493 06a0 32E0      		ldi r19,lo8(2)
 1494 06a2 E32E      		mov r14,r19
 1495               	.L119:
 1497               	.LM188:
 1498 06a4 6E2D      		mov r22,r14
 1499 06a6 81E0      		ldi r24,lo8(1)
 1500 06a8 0E94 0000 		call rf_polling_rx_packet
 1501 06ac F82E      		mov r15,r24
 1502 06ae 8823      		tst r24
 1503 06b0 01F0      		breq .L100
 1505               	.LM189:
 1506 06b2 F1E0      		ldi r31,lo8(1)
 1507 06b4 8F17      		cp r24,r31
 1508 06b6 01F0      		breq .L106
 1510               	.LM190:
 1511 06b8 6091 0000 		lds r22,__iob+2
 1512 06bc 7091 0000 		lds r23,(__iob+2)+1
 1513 06c0 86E6      		ldi r24,lo8(102)
 1514 06c2 90E0      		ldi r25,hi8(102)
 1515 06c4 0E94 0000 		call fputc
 1517               	.LM191:
 1518 06c8 8091 0000 		lds r24,currentChannel
 1519 06cc 9927      		clr r25
 1520 06ce 9F93      		push r25
 1521 06d0 8F93      		push r24
 1522 06d2 80E0      		ldi r24,lo8(.LC1)
 1523 06d4 90E0      		ldi r25,hi8(.LC1)
 1524 06d6 9F93      		push r25
 1525 06d8 8F93      		push r24
 1526 06da 0E94 0000 		call printf
 1528               	.LM192:
 1529 06de 8091 0000 		lds r24,packetsLost
 1530 06e2 9091 0000 		lds r25,(packetsLost)+1
 1531 06e6 0196      		adiw r24,1
 1532 06e8 9093 0000 		sts (packetsLost)+1,r25
 1533 06ec 8093 0000 		sts packetsLost,r24
 1534 06f0 0F90      		pop __tmp_reg__
 1535 06f2 0F90      		pop __tmp_reg__
 1536 06f4 0F90      		pop __tmp_reg__
 1537 06f6 0F90      		pop __tmp_reg__
 1538               	.L106:
 1540               	.LM193:
 1541 06f8 0E94 0000 		call rf_rx_off
 1543               	.LM194:
 1544 06fc 8B2D      		mov r24,r11
 1545 06fe 0E94 0000 		call nrk_gpio_clr
 1547               	.LM195:
 1548 0702 81E0      		ldi r24,lo8(1)
 1549 0704 F816      		cp r15,r24
 1550 0706 01F0      		breq .+2
 1551 0708 00C0      		rjmp .L118
 1553               	.LM196:
 1554 070a 8091 0000 		lds r24,rxCount
 1555 070e 9091 0000 		lds r25,(rxCount)+1
 1556 0712 0196      		adiw r24,1
 1557 0714 9093 0000 		sts (rxCount)+1,r25
 1558 0718 8093 0000 		sts rxCount,r24
 1560               	.LM197:
 1561 071c E091 0000 		lds r30,isa_rfRxInfo+5
 1562 0720 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 1563 0724 8081      		ld r24,Z
 1564 0726 8093 0000 		sts DHR,r24
 1566               	.LM198:
 1567 072a 1092 0000 		sts (slot_expired)+1,__zero_reg__
 1568 072e 1092 0000 		sts slot_expired,__zero_reg__
 1570               	.LM199:
 1571 0732 87FF      		sbrs r24,7
 1572 0734 00C0      		rjmp .L109
 1574               	.LM200:
 1575 0736 8181      		ldd r24,Z+1
 1576 0738 9927      		clr r25
 1577 073a 982F      		mov r25,r24
 1578 073c 8827      		clr r24
 1579 073e 2281      		ldd r18,Z+2
 1580 0740 3327      		clr r19
 1581 0742 822B      		or r24,r18
 1582 0744 932B      		or r25,r19
 1583 0746 9093 0000 		sts (offsetX)+1,r25
 1584 074a 8093 0000 		sts offsetX,r24
 1586               	.LM201:
 1587 074e 80E0      		ldi r24,lo8(0)
 1588 0750 90E0      		ldi r25,hi8(0)
 1589 0752 0E94 0000 		call nrk_led_toggle
 1591               	.LM202:
 1592 0756 8091 0000 		lds r24,offsetX
 1593 075a 9091 0000 		lds r25,(offsetX)+1
 1594 075e 2091 0000 		lds r18,offsetY
 1595 0762 3091 0000 		lds r19,(offsetY)+1
 1596 0766 821B      		sub r24,r18
 1597 0768 930B      		sbc r25,r19
 1598 076a 8857      		subi r24,lo8(-(-1400))
 1599 076c 9540      		sbci r25,hi8(-(-1400))
 1600 076e 9F83      		std Y+7,r25
 1601 0770 8E83      		std Y+6,r24
 1603               	.LM203:
 1604 0772 82E3      		ldi r24,lo8(50)
 1605 0774 8983      		std Y+1,r24
 1607               	.LM204:
 1608 0776 8E81      		ldd r24,Y+6
 1609 0778 9F81      		ldd r25,Y+7
 1610 077a 97FD      		sbrc r25,7
 1611 077c 00C0      		rjmp .L111
 1613               	.LM205:
 1614 077e 0E94 0000 		call _nrk_os_timer_get
 1615 0782 8B83      		std Y+3,r24
 1617               	.LM206:
 1618 0784 8E81      		ldd r24,Y+6
 1619 0786 9F81      		ldd r25,Y+7
 1620 0788 2DE9      		ldi r18,lo8(7325)
 1621 078a 3CE1      		ldi r19,hi8(7325)
 1622 078c 6DE9      		ldi r22,lo8(7325)
 1623 078e 7CE1      		ldi r23,hi8(7325)
 1624 0790 0E94 0000 		call __divmodhi4
 1625 0794 6F5F      		subi r22,lo8(-(1))
 1626 0796 6A83      		std Y+2,r22
 1628               	.LM207:
 1629 0798 8E81      		ldd r24,Y+6
 1630 079a 9F81      		ldd r25,Y+7
 1631 079c 6DE9      		ldi r22,lo8(7325)
 1632 079e 7CE1      		ldi r23,hi8(7325)
 1633 07a0 0E94 0000 		call __divmodhi4
 1634 07a4 281B      		sub r18,r24
 1635 07a6 390B      		sbc r19,r25
 1636 07a8 3D83      		std Y+5,r19
 1637 07aa 2C83      		std Y+4,r18
 1639               	.LM208:
 1640 07ac 0E94 0000 		call _nrk_os_timer_stop
 1642               	.LM209:
 1643 07b0 0E94 0000 		call _nrk_high_speed_timer_reset
 1645               	.LM210:
 1646 07b4 6C81      		ldd r22,Y+4
 1647 07b6 7D81      		ldd r23,Y+5
 1648 07b8 80E0      		ldi r24,lo8(0)
 1649 07ba 90E0      		ldi r25,hi8(0)
 1650 07bc 0E94 0000 		call nrk_high_speed_timer_wait
 1652               	.LM211:
 1653 07c0 9B81      		ldd r25,Y+3
 1654 07c2 8A81      		ldd r24,Y+2
 1655 07c4 890F      		add r24,r25
 1656 07c6 0E94 0000 		call _nrk_os_timer_set
 1658               	.LM212:
 1659 07ca 0E94 0000 		call _nrk_os_timer_start
 1661               	.LM213:
 1662 07ce 82E3      		ldi r24,lo8(50)
 1663 07d0 90E0      		ldi r25,hi8(50)
 1664 07d2 0E94 0000 		call nrk_spin_wait_us
 1665 07d6 00C0      		rjmp .L109
 1666               	.L111:
 1668               	.LM214:
 1669 07d8 8E81      		ldd r24,Y+6
 1670 07da 9F81      		ldd r25,Y+7
 1671 07dc 97FF      		sbrs r25,7
 1672 07de 00C0      		rjmp .L109
 1674               	.LM215:
 1675 07e0 0E94 0000 		call _nrk_os_timer_stop
 1677               	.LM216:
 1678 07e4 0E94 0000 		call _nrk_high_speed_timer_reset
 1680               	.LM217:
 1681 07e8 6E81      		ldd r22,Y+6
 1682 07ea 7F81      		ldd r23,Y+7
 1683 07ec 7095      		com r23
 1684 07ee 6195      		neg r22
 1685 07f0 7F4F      		sbci r23,lo8(-1)
 1686 07f2 80E0      		ldi r24,lo8(0)
 1687 07f4 90E0      		ldi r25,hi8(0)
 1688 07f6 0E94 0000 		call nrk_high_speed_timer_wait
 1690               	.LM218:
 1691 07fa 0E94 0000 		call _nrk_os_timer_start
 1692               	.L109:
 1694               	.LM219:
 1695 07fe 0C57      		subi r16,lo8(-(132))
 1696 0800 1F4F      		sbci r17,hi8(-(132))
 1697 0802 F801      		movw r30,r16
 1698 0804 8081      		ld r24,Z
 1699 0806 0458      		subi r16,lo8(-(-132))
 1700 0808 1040      		sbci r17,hi8(-(-132))
 1701 080a 8330      		cpi r24,lo8(3)
 1702 080c 01F0      		breq .L114
 1703 080e 8091 0000 		lds r24,DHR
 1704 0812 8073      		andi r24,lo8(48)
 1705 0814 01F4      		brne .L118
 1706               	.L114:
 1708               	.LM220:
 1709 0816 F801      		movw r30,r16
 1710 0818 E958      		subi r30,lo8(-(119))
 1711 081a FF4F      		sbci r31,hi8(-(119))
 1712 081c 8081      		ld r24,Z
 1713 081e 9181      		ldd r25,Z+1
 1714 0820 892B      		or r24,r25
 1715 0822 01F4      		brne .L116
 1716               	.L126:
 1717 0824 C801      		movw r24,r16
 1718 0826 0E94 0000 		call isaFreePacket
 1719 082a 00C0      		rjmp .L118
 1720               	.L116:
 1722               	.LM221:
 1723 082c 0190      		ld __tmp_reg__,Z+
 1724 082e F081      		ld r31,Z
 1725 0830 E02D      		mov r30,__tmp_reg__
 1726 0832 61E0      		ldi r22,lo8(1)
 1727               	.L125:
 1728 0834 C801      		movw r24,r16
 1729 0836 0995      		icall
 1730               	.L118:
 1731               	/* epilogue: frame size=7 */
 1732 0838 2796      		adiw r28,7
 1733 083a 0FB6      		in __tmp_reg__,__SREG__
 1734 083c F894      		cli
 1735 083e DEBF      		out __SP_H__,r29
 1736 0840 0FBE      		out __SREG__,__tmp_reg__
 1737 0842 CDBF      		out __SP_L__,r28
 1738 0844 DF91      		pop r29
 1739 0846 CF91      		pop r28
 1740 0848 1F91      		pop r17
 1741 084a 0F91      		pop r16
 1742 084c FF90      		pop r15
 1743 084e EF90      		pop r14
 1744 0850 DF90      		pop r13
 1745 0852 CF90      		pop r12
 1746 0854 BF90      		pop r11
 1747 0856 0895      		ret
 1748               	/* epilogue end (size=16) */
 1749               	/* function _isa_tx size 565 (532) */
 1763               	.Lscope15:
 1765               		.stabd	78,0,0
 1766               		.data
 1767               	.LC2:
 1768 0030 4368 616E 		.string	"Channel %d\r\n"
 1768      6E65 6C20 
 1768      2564 0D0A 
 1768      00
 1769               	.LC3:
 1770 003d 7061 636B 		.string	"packet forwarded to %d\r\n"
 1770      6574 2066 
 1770      6F72 7761 
 1770      7264 6564 
 1770      2074 6F20 
 1771               	.LC4:
 1772 0056 4E6F 2054 		.string	"No Transmit Link for this test message for %d - dropped\r\n"
 1772      7261 6E73 
 1772      6D69 7420 
 1772      4C69 6E6B 
 1772      2066 6F72 
 1773               	.LC5:
 1774 0090 4E6F 2054 		.string	"No Transmit Link for Add Neighbor Message for %d- dropped\r\n"
 1774      7261 6E73 
 1774      6D69 7420 
 1774      4C69 6E6B 
 1774      2066 6F72 
 1775               	.LC6:
 1776 00cc 4E6F 2054 		.string	"No Transmit link for graph config for %d- dropped"
 1776      7261 6E73 
 1776      6D69 7420 
 1776      6C69 6E6B 
 1776      2066 6F72 
 1777               	.LC7:
 1778 00fe 4E6F 2054 		.string	"No Transmit Link for Add link message for %d- dropped"
 1778      7261 6E73 
 1778      6D69 7420 
 1778      4C69 6E6B 
 1778      2066 6F72 
 1779               	.LC8:
 1780 0134 5265 6365 		.string	"Received Candidate Table frm %d\r\n"
 1780      6976 6564 
 1780      2043 616E 
 1780      6469 6461 
 1780      7465 2054 
 1781               	.LC9:
 1782 0156 5265 6365 		.string	"Received flush candidate table %d\r\n"
 1782      6976 6564 
 1782      2066 6C75 
 1782      7368 2063 
 1782      616E 6469 
 1783               	.LC10:
 1784 017a 4E6F 2054 		.string	"No Transmit link for Flush message for  %d- dropped\r\n"
 1784      7261 6E73 
 1784      6D69 7420 
 1784      6C69 6E6B 
 1784      2066 6F72 
 1785               	.LC11:
 1786 01b0 556E 6B6E 		.string	"Unknown message type\r"
 1786      6F77 6E20 
 1786      6D65 7373 
 1786      6167 6520 
 1786      7479 7065 
 1787               		.text
 1791               	.global	_isa_rx
 1793               	_isa_rx:
 1794               		.stabd	46,0,0
 1796               	.LM222:
 1797               	.LFBB16:
 1798               	/* prologue: frame size=1 */
 1799 0858 8F92      		push r8
 1800 085a 9F92      		push r9
 1801 085c AF92      		push r10
 1802 085e BF92      		push r11
 1803 0860 CF92      		push r12
 1804 0862 DF92      		push r13
 1805 0864 EF92      		push r14
 1806 0866 FF92      		push r15
 1807 0868 0F93      		push r16
 1808 086a 1F93      		push r17
 1809 086c CF93      		push r28
 1810 086e DF93      		push r29
 1811 0870 CDB7      		in r28,__SP_L__
 1812 0872 DEB7      		in r29,__SP_H__
 1813 0874 2197      		sbiw r28,1
 1814 0876 0FB6      		in __tmp_reg__,__SREG__
 1815 0878 F894      		cli
 1816 087a DEBF      		out __SP_H__,r29
 1817 087c 0FBE      		out __SREG__,__tmp_reg__
 1818 087e CDBF      		out __SP_L__,r28
 1819               	/* prologue end (size=20) */
 1821               	.LM223:
 1822 0880 6091 0000 		lds r22,isa_param+2
 1823 0884 80E0      		ldi r24,lo8(isa_rfRxInfo)
 1824 0886 90E0      		ldi r25,hi8(isa_rfRxInfo)
 1825 0888 0E94 0000 		call rf_set_rx
 1827               	.LM224:
 1828 088c 0E94 0000 		call rf_polling_rx_on
 1830               	.LM225:
 1831 0890 0091 0000 		lds r16,NRK_DEBUG_2
 1832 0894 802F      		mov r24,r16
 1833 0896 0E94 0000 		call nrk_gpio_set
 1835               	.LM226:
 1836 089a 0E94 0000 		call _nrk_os_timer_get
 1837 089e 8983      		std Y+1,r24
 1839               	.LM227:
 1840 08a0 8981      		ldd r24,Y+1
 1841 08a2 8C5F      		subi r24,lo8(-(4))
 1842 08a4 8983      		std Y+1,r24
 1843 08a6 00C0      		rjmp .L131
 1844               	.L132:
 1846               	.LM228:
 1847 08a8 0E94 0000 		call _nrk_os_timer_get
 1848 08ac 9981      		ldd r25,Y+1
 1849 08ae 9817      		cp r25,r24
 1850 08b0 00F4      		brsh .L131
 1852               	.LM229:
 1853 08b2 802F      		mov r24,r16
 1854 08b4 0E94 0000 		call nrk_gpio_clr
 1856               	.LM230:
 1857 08b8 0E94 0000 		call rf_rx_off
 1858 08bc 00C0      		rjmp .L193
 1859               	.L131:
 1861               	.LM231:
 1862 08be 0E94 0000 		call rf_rx_check_sfd
 1863 08c2 8823      		tst r24
 1864 08c4 01F0      		breq .L132
 1866               	.LM232:
 1867 08c6 0E94 0000 		call _nrk_high_speed_timer_get
 1868 08ca 9093 0000 		sts (rx_start_time)+1,r25
 1869 08ce 8093 0000 		sts rx_start_time,r24
 1871               	.LM233:
 1872 08d2 0E94 0000 		call _nrk_os_timer_get
 1873 08d6 8983      		std Y+1,r24
 1875               	.LM234:
 1876 08d8 8981      		ldd r24,Y+1
 1877 08da 8B5F      		subi r24,lo8(-(5))
 1878 08dc 8983      		std Y+1,r24
 1879 08de 00C0      		rjmp .L136
 1880               	.L137:
 1882               	.LM235:
 1883 08e0 0E94 0000 		call _nrk_os_timer_get
 1884 08e4 9981      		ldd r25,Y+1
 1885 08e6 9817      		cp r25,r24
 1886 08e8 00F4      		brsh .L136
 1888               	.LM236:
 1889 08ea 80E0      		ldi r24,lo8(.LC0)
 1890 08ec 90E0      		ldi r25,hi8(.LC0)
 1891 08ee 9F93      		push r25
 1892 08f0 8F93      		push r24
 1893 08f2 0E94 0000 		call printf
 1894 08f6 00C0      		rjmp .L200
 1895               	.L136:
 1897               	.LM237:
 1898 08f8 60E8      		ldi r22,lo8(-128)
 1899 08fa 80E0      		ldi r24,lo8(0)
 1900 08fc 0E94 0000 		call rf_polling_rx_packet
 1901 0900 182F      		mov r17,r24
 1902 0902 8823      		tst r24
 1903 0904 01F0      		breq .L137
 1905               	.LM238:
 1906 0906 802F      		mov r24,r16
 1907 0908 0E94 0000 		call nrk_gpio_clr
 1909               	.LM239:
 1910 090c 0E94 0000 		call rf_rx_off
 1912               	.LM240:
 1913 0910 1130      		cpi r17,lo8(1)
 1914 0912 01F4      		brne .+2
 1915 0914 00C0      		rjmp .L140
 1917               	.LM241:
 1918 0916 6091 0000 		lds r22,__iob+2
 1919 091a 7091 0000 		lds r23,(__iob+2)+1
 1920 091e 82E6      		ldi r24,lo8(98)
 1921 0920 90E0      		ldi r25,hi8(98)
 1922 0922 0E94 0000 		call fputc
 1924               	.LM242:
 1925 0926 8091 0000 		lds r24,currentChannel
 1926 092a 9927      		clr r25
 1927 092c 9F93      		push r25
 1928 092e 8F93      		push r24
 1929 0930 80E0      		ldi r24,lo8(.LC2)
 1930 0932 90E0      		ldi r25,hi8(.LC2)
 1931 0934 9F93      		push r25
 1932 0936 8F93      		push r24
 1933 0938 0E94 0000 		call printf
 1934 093c 00C0      		rjmp .L201
 1935               	.L142:
 1937               	.LM243:
 1938 093e 9927      		clr r25
 1939 0940 0E94 0000 		call addCandidate
 1940 0944 8F3F      		cpi r24,lo8(-1)
 1941 0946 01F0      		breq .+2
 1942 0948 00C0      		rjmp .L202
 1944               	.LM244:
 1945 094a 0E94 0000 		call printIsaError
 1946 094e 00C0      		rjmp .L202
 1947               	.L198:
 1949               	.LM245:
 1950 0950 AF2C      		mov r10,r15
 1951 0952 BB24      		clr r11
 1953               	.LM246:
 1954 0954 17FD      		sbrc r17,7
 1955 0956 00C0      		rjmp .L146
 1956 0958 EE24      		clr r14
 1957 095a 00C0      		rjmp .L148
 1958               	.L146:
 1960               	.LM247:
 1961 095c 8091 0000 		lds r24,txCount
 1962 0960 9091 0000 		lds r25,(txCount)+1
 1963 0964 0196      		adiw r24,1
 1964 0966 9093 0000 		sts (txCount)+1,r25
 1965 096a 8093 0000 		sts txCount,r24
 1967               	.LM248:
 1968 096e CF01      		movw r24,r30
 1969 0970 0E94 0000 		call isTransmitLinkPresent
 1970 0974 E82E      		mov r14,r24
 1971 0976 8823      		tst r24
 1972 0978 01F4      		brne .L149
 1973 097a 8091 0000 		lds r24,dmo
 1974 097e 9091 0000 		lds r25,(dmo)+1
 1975 0982 8A15      		cp r24,r10
 1976 0984 9B05      		cpc r25,r11
 1977 0986 01F0      		breq .L149
 1978 0988 63E0      		ldi r22,lo8(3)
 1979 098a 00C0      		rjmp .L152
 1980               	.L149:
 1981 098c 60E0      		ldi r22,lo8(0)
 1982               	.L152:
 1984               	.LM249:
 1985 098e 812F      		mov r24,r17
 1986 0990 8470      		andi r24,lo8(4)
 1987 0992 0E94 0000 		call configDHR
 1988 0996 8093 0000 		sts DHR,r24
 1990               	.LM250:
 1991 099a 8093 0000 		sts isa_ack_buf,r24
 1993               	.LM251:
 1994 099e 80E0      		ldi r24,lo8(isa_ack_buf)
 1995 09a0 90E0      		ldi r25,hi8(isa_ack_buf)
 1996 09a2 9093 0000 		sts (isa_ack_tx+3)+1,r25
 1997 09a6 8093 0000 		sts isa_ack_tx+3,r24
 1999               	.LM252:
 2000 09aa 82FE      		sbrs r8,2
 2001 09ac 00C0      		rjmp .L153
 2002               	.LBB45:
 2004               	.LM253:
 2005 09ae 8091 0000 		lds r24,rx_start_time
 2006 09b2 9091 0000 		lds r25,(rx_start_time)+1
 2007 09b6 2091 0000 		lds r18,slot_start_time
 2008 09ba 3091 0000 		lds r19,(slot_start_time)+1
 2009 09be 821B      		sub r24,r18
 2010 09c0 930B      		sbc r25,r19
 2011 09c2 9093 0000 		sts (offsetX)+1,r25
 2012 09c6 8093 0000 		sts offsetX,r24
 2014               	.LM254:
 2015 09ca 892F      		mov r24,r25
 2016 09cc 9927      		clr r25
 2017 09ce 8093 0000 		sts isa_ack_buf+1,r24
 2019               	.LM255:
 2020 09d2 8091 0000 		lds r24,offsetX
 2021 09d6 8093 0000 		sts isa_ack_buf+2,r24
 2023               	.LM256:
 2024 09da 84E0      		ldi r24,lo8(4)
 2025 09dc 00C0      		rjmp .L199
 2026               	.L153:
 2027               	.LBE45:
 2029               	.LM257:
 2030 09de 82E0      		ldi r24,lo8(2)
 2031               	.L199:
 2032 09e0 8093 0000 		sts isa_ack_tx+2,r24
 2034               	.LM258:
 2035 09e4 802F      		mov r24,r16
 2036 09e6 0E94 0000 		call nrk_gpio_set
 2038               	.LM259:
 2039 09ea 4091 0000 		lds r20,isa_param+4
 2040 09ee 5091 0000 		lds r21,(isa_param+4)+1
 2041 09f2 6091 0000 		lds r22,slot_start_time
 2042 09f6 7091 0000 		lds r23,(slot_start_time)+1
 2043 09fa 20E0      		ldi r18,lo8(tx_start_time)
 2044 09fc 30E0      		ldi r19,hi8(tx_start_time)
 2045 09fe 80E0      		ldi r24,lo8(isa_ack_tx)
 2046 0a00 90E0      		ldi r25,hi8(isa_ack_tx)
 2047 0a02 0E94 0000 		call rf_tx_tdma_packet
 2049               	.LM260:
 2050 0a06 802F      		mov r24,r16
 2051 0a08 0E94 0000 		call nrk_gpio_clr
 2052               	.L148:
 2054               	.LM261:
 2055 0a0c D601      		movw r26,r12
 2056 0a0e 1796      		adiw r26,7
 2058               	.LM262:
 2059 0a10 F601      		movw r30,r12
 2060 0a12 8781      		ldd r24,Z+7
 2061 0a14 8130      		cpi r24,lo8(1)
 2062 0a16 01F4      		brne .L156
 2064               	.LM263:
 2065 0a18 8091 0000 		lds r24,dmo
 2066 0a1c 9091 0000 		lds r25,(dmo)+1
 2067 0a20 A816      		cp r10,r24
 2068 0a22 B906      		cpc r11,r25
 2069 0a24 01F4      		brne .L158
 2071               	.LM264:
 2072 0a26 E091 0000 		lds r30,isa_rfRxInfo+5
 2073 0a2a F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 2074 0a2e 8281      		ldd r24,Z+2
 2075 0a30 6F01      		movw r12,r30
 2076 0a32 EE24      		clr r14
 2077 0a34 00E0      		ldi r16,lo8(0)
 2078 0a36 20E0      		ldi r18,lo8(0)
 2079 0a38 40E0      		ldi r20,lo8(0)
 2080 0a3a B501      		movw r22,r10
 2081 0a3c 9927      		clr r25
 2082 0a3e 0E94 0000 		call dd_data_indication
 2083 0a42 00C0      		rjmp .L193
 2084               	.L158:
 2086               	.LM265:
 2087 0a44 EE20      		tst r14
 2088 0a46 01F0      		breq .L160
 2090               	.LM266:
 2091 0a48 2091 0000 		lds r18,isa_rfRxInfo+5
 2092 0a4c 3091 0000 		lds r19,(isa_rfRxInfo+5)+1
 2093 0a50 4091 0000 		lds r20,isa_rfRxInfo+3
 2094 0a54 5527      		clr r21
 2095 0a56 47FD      		sbrc r20,7
 2096 0a58 5095      		com r21
 2097 0a5a 00E0      		ldi r16,lo8(0)
 2098 0a5c 10E0      		ldi r17,hi8(0)
 2099 0a5e 60E0      		ldi r22,lo8(0)
 2100 0a60 70E0      		ldi r23,hi8(0)
 2101 0a62 C501      		movw r24,r10
 2102 0a64 0E94 0000 		call enQueue
 2104               	.LM267:
 2105 0a68 BF92      		push r11
 2106 0a6a AF92      		push r10
 2107 0a6c 80E0      		ldi r24,lo8(.LC3)
 2108 0a6e 90E0      		ldi r25,hi8(.LC3)
 2109 0a70 00C0      		rjmp .L206
 2110               	.L160:
 2112               	.LM268:
 2113 0a72 BF92      		push r11
 2114 0a74 AF92      		push r10
 2115 0a76 80E0      		ldi r24,lo8(.LC4)
 2116 0a78 90E0      		ldi r25,hi8(.LC4)
 2117 0a7a 00C0      		rjmp .L206
 2118               	.L156:
 2120               	.LM269:
 2121 0a7c 8230      		cpi r24,lo8(2)
 2122 0a7e 01F0      		breq .+2
 2123 0a80 00C0      		rjmp .L162
 2125               	.LM270:
 2126 0a82 8091 0000 		lds r24,dmo
 2127 0a86 9091 0000 		lds r25,(dmo)+1
 2128 0a8a A816      		cp r10,r24
 2129 0a8c B906      		cpc r11,r25
 2130 0a8e 01F4      		brne .L164
 2132               	.LM271:
 2133 0a90 1F92      		push __zero_reg__
 2134 0a92 1F92      		push __zero_reg__
 2135 0a94 8824      		clr r8
 2136 0a96 AA24      		clr r10
 2137 0a98 CC24      		clr r12
 2138 0a9a EE24      		clr r14
 2139 0a9c 00E0      		ldi r16,lo8(0)
 2140 0a9e 10E0      		ldi r17,lo8(0)
 2141 0aa0 20E0      		ldi r18,lo8(0)
 2142 0aa2 30E0      		ldi r19,lo8(0)
 2143 0aa4 40E0      		ldi r20,lo8(0)
 2144 0aa6 50E0      		ldi r21,lo8(0)
 2145 0aa8 60E0      		ldi r22,lo8(0)
 2146 0aaa 70E0      		ldi r23,lo8(0)
 2147 0aac FD01      		movw r30,r26
 2148 0aae 8181      		ldd r24,Z+1
 2149 0ab0 9281      		ldd r25,Z+2
 2150 0ab2 0E94 0000 		call addNeighbor
 2151               	.LBB46:
 2152               	.LBB47:
 2154               	.LM272:
 2155 0ab6 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 2156 0aba 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 2157 0abe 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 2158 0ac2 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 2159               	.LBE47:
 2160               	.LBE46:
 2162               	.LM273:
 2163 0ac6 FA94      		dec r15
 2164 0ac8 6F2D      		mov r22,r15
 2165 0aca 8CE0      		ldi r24,lo8(12)
 2166 0acc 0E94 0000 		call setNewDisplay
 2167               	.L200:
 2168 0ad0 0F90      		pop __tmp_reg__
 2169 0ad2 0F90      		pop __tmp_reg__
 2170 0ad4 00C0      		rjmp .L193
 2171               	.L164:
 2173               	.LM274:
 2174 0ad6 EE20      		tst r14
 2175 0ad8 01F0      		breq .L166
 2177               	.LM275:
 2178 0ada 2091 0000 		lds r18,isa_rfRxInfo+5
 2179 0ade 3091 0000 		lds r19,(isa_rfRxInfo+5)+1
 2180 0ae2 4091 0000 		lds r20,isa_rfRxInfo+3
 2181 0ae6 5527      		clr r21
 2182 0ae8 47FD      		sbrc r20,7
 2183 0aea 5095      		com r21
 2184 0aec 00E0      		ldi r16,lo8(0)
 2185 0aee 10E0      		ldi r17,hi8(0)
 2186 0af0 60E0      		ldi r22,lo8(0)
 2187 0af2 70E0      		ldi r23,hi8(0)
 2188 0af4 C501      		movw r24,r10
 2189 0af6 0E94 0000 		call enQueue
 2190               	.LBB48:
 2191               	.LBB49:
 2193               	.LM276:
 2194 0afa 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 2195 0afe 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 2196 0b02 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 2197 0b06 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 2198               	.LBE49:
 2199               	.LBE48:
 2201               	.LM277:
 2202 0b0a FA94      		dec r15
 2203 0b0c 6F2D      		mov r22,r15
 2204 0b0e 8CE0      		ldi r24,lo8(12)
 2205 0b10 00C0      		rjmp .L203
 2206               	.L166:
 2208               	.LM278:
 2209 0b12 BF92      		push r11
 2210 0b14 AF92      		push r10
 2211 0b16 80E0      		ldi r24,lo8(.LC5)
 2212 0b18 90E0      		ldi r25,hi8(.LC5)
 2213 0b1a 00C0      		rjmp .L206
 2214               	.L162:
 2216               	.LM279:
 2217 0b1c 8330      		cpi r24,lo8(3)
 2218 0b1e 01F4      		brne .L168
 2220               	.LM280:
 2221 0b20 8091 0000 		lds r24,dmo
 2222 0b24 9091 0000 		lds r25,(dmo)+1
 2223 0b28 A816      		cp r10,r24
 2224 0b2a B906      		cpc r11,r25
 2225 0b2c 01F4      		brne .L170
 2227               	.LM281:
 2228 0b2e D601      		movw r26,r12
 2229 0b30 1896      		adiw r26,8
 2231               	.LM282:
 2232 0b32 FD01      		movw r30,r26
 2233 0b34 0681      		ldd r16,Z+6
 2234 0b36 1781      		ldd r17,Z+7
 2235 0b38 2481      		ldd r18,Z+4
 2236 0b3a 3581      		ldd r19,Z+5
 2237 0b3c 4281      		ldd r20,Z+2
 2238 0b3e 5381      		ldd r21,Z+3
 2239 0b40 F601      		movw r30,r12
 2240 0b42 8085      		ldd r24,Z+8
 2241 0b44 FD01      		movw r30,r26
 2242 0b46 6181      		ldd r22,Z+1
 2243 0b48 9927      		clr r25
 2244 0b4a 0E94 0000 		call addGraph
 2245 0b4e 00C0      		rjmp .L205
 2246               	.L170:
 2248               	.LM283:
 2249 0b50 EE20      		tst r14
 2250 0b52 01F0      		breq .L172
 2252               	.LM284:
 2253 0b54 2091 0000 		lds r18,isa_rfRxInfo+5
 2254 0b58 3091 0000 		lds r19,(isa_rfRxInfo+5)+1
 2255 0b5c 4091 0000 		lds r20,isa_rfRxInfo+3
 2256 0b60 5527      		clr r21
 2257 0b62 47FD      		sbrc r20,7
 2258 0b64 5095      		com r21
 2259 0b66 00E0      		ldi r16,lo8(0)
 2260 0b68 10E0      		ldi r17,hi8(0)
 2261 0b6a 60E0      		ldi r22,lo8(0)
 2262 0b6c 70E0      		ldi r23,hi8(0)
 2263 0b6e C501      		movw r24,r10
 2264 0b70 0E94 0000 		call enQueue
 2265               	.L205:
 2266               	.LBB50:
 2267               	.LBB51:
 2269               	.LM285:
 2270 0b74 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 2271 0b78 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 2272 0b7c 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 2273 0b80 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 2274               	.LBE51:
 2275               	.LBE50:
 2277               	.LM286:
 2278 0b84 FA94      		dec r15
 2279 0b86 6F2D      		mov r22,r15
 2280 0b88 89E0      		ldi r24,lo8(9)
 2281 0b8a 00C0      		rjmp .L203
 2282               	.L172:
 2284               	.LM287:
 2285 0b8c BF92      		push r11
 2286 0b8e AF92      		push r10
 2287 0b90 80E0      		ldi r24,lo8(.LC6)
 2288 0b92 90E0      		ldi r25,hi8(.LC6)
 2289 0b94 00C0      		rjmp .L206
 2290               	.L168:
 2292               	.LM288:
 2293 0b96 8430      		cpi r24,lo8(4)
 2294 0b98 01F4      		brne .L174
 2296               	.LM289:
 2297 0b9a 8091 0000 		lds r24,dmo
 2298 0b9e 9091 0000 		lds r25,(dmo)+1
 2299 0ba2 A816      		cp r10,r24
 2300 0ba4 B906      		cpc r11,r25
 2301 0ba6 01F4      		brne .L176
 2303               	.LM290:
 2304 0ba8 F601      		movw r30,r12
 2305 0baa 3896      		adiw r30,8
 2307               	.LM291:
 2308 0bac 4381      		ldd r20,Z+3
 2309 0bae 5527      		clr r21
 2310 0bb0 6181      		ldd r22,Z+1
 2311 0bb2 7281      		ldd r23,Z+2
 2312 0bb4 0581      		ldd r16,Z+5
 2313 0bb6 2481      		ldd r18,Z+4
 2314 0bb8 F601      		movw r30,r12
 2315 0bba 8085      		ldd r24,Z+8
 2316 0bbc 0E94 0000 		call addLink
 2317 0bc0 00C0      		rjmp .L204
 2318               	.L176:
 2320               	.LM292:
 2321 0bc2 EE20      		tst r14
 2322 0bc4 01F0      		breq .L178
 2324               	.LM293:
 2325 0bc6 2091 0000 		lds r18,isa_rfRxInfo+5
 2326 0bca 3091 0000 		lds r19,(isa_rfRxInfo+5)+1
 2327 0bce 4091 0000 		lds r20,isa_rfRxInfo+3
 2328 0bd2 5527      		clr r21
 2329 0bd4 47FD      		sbrc r20,7
 2330 0bd6 5095      		com r21
 2331 0bd8 00E0      		ldi r16,lo8(0)
 2332 0bda 10E0      		ldi r17,hi8(0)
 2333 0bdc 60E0      		ldi r22,lo8(0)
 2334 0bde 70E0      		ldi r23,hi8(0)
 2335 0be0 C501      		movw r24,r10
 2336 0be2 0E94 0000 		call enQueue
 2337               	.L204:
 2338               	.LBB52:
 2339               	.LBB53:
 2341               	.LM294:
 2342 0be6 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 2343 0bea 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 2344 0bee 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 2345 0bf2 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 2346               	.LBE53:
 2347               	.LBE52:
 2349               	.LM295:
 2350 0bf6 FA94      		dec r15
 2351 0bf8 6F2D      		mov r22,r15
 2352 0bfa 8BE0      		ldi r24,lo8(11)
 2353 0bfc 00C0      		rjmp .L203
 2354               	.L178:
 2356               	.LM296:
 2357 0bfe BF92      		push r11
 2358 0c00 AF92      		push r10
 2359 0c02 80E0      		ldi r24,lo8(.LC7)
 2360 0c04 90E0      		ldi r25,hi8(.LC7)
 2361 0c06 00C0      		rjmp .L206
 2362               	.L174:
 2364               	.LM297:
 2365 0c08 8823      		tst r24
 2366 0c0a 01F0      		breq .+2
 2367 0c0c 00C0      		rjmp .L180
 2369               	.LM298:
 2370 0c0e 8091 0000 		lds r24,isa_node_mode
 2371 0c12 E091 0000 		lds r30,isa_rfRxInfo+5
 2372 0c16 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 2373 0c1a 8230      		cpi r24,lo8(2)
 2374 0c1c 01F0      		breq .+2
 2375 0c1e 00C0      		rjmp .L182
 2377               	.LM299:
 2378 0c20 8281      		ldd r24,Z+2
 2379 0c22 9927      		clr r25
 2380 0c24 9F93      		push r25
 2381 0c26 8F93      		push r24
 2382 0c28 80E0      		ldi r24,lo8(.LC8)
 2383 0c2a 90E0      		ldi r25,hi8(.LC8)
 2384 0c2c 9F93      		push r25
 2385 0c2e 8F93      		push r24
 2386 0c30 0E94 0000 		call printf
 2388               	.LM300:
 2389 0c34 B601      		movw r22,r12
 2390 0c36 685F      		subi r22,lo8(-(8))
 2391 0c38 7F4F      		sbci r23,hi8(-(8))
 2393               	.LM301:
 2394 0c3a D601      		movw r26,r12
 2395 0c3c 1996      		adiw r26,9
 2397               	.LM302:
 2398 0c3e E091 0000 		lds r30,isa_rfRxInfo+5
 2399 0c42 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 2400 0c46 E281      		ldd r30,Z+2
 2401 0c48 FF27      		clr r31
 2402 0c4a EE0F      		lsl r30
 2403 0c4c FF1F      		rol r31
 2404 0c4e E050      		subi r30,lo8(-(adjacencyMatrix))
 2405 0c50 F040      		sbci r31,hi8(-(adjacencyMatrix))
 2406 0c52 1182      		std Z+1,__zero_reg__
 2407 0c54 1082      		st Z,__zero_reg__
 2408 0c56 40E0      		ldi r20,lo8(0)
 2409 0c58 50E0      		ldi r21,hi8(0)
 2411               	.LM303:
 2412 0c5a 0F90      		pop __tmp_reg__
 2413 0c5c 0F90      		pop __tmp_reg__
 2414 0c5e 0F90      		pop __tmp_reg__
 2415 0c60 0F90      		pop __tmp_reg__
 2416 0c62 00C0      		rjmp .L184
 2417               	.L185:
 2419               	.LM304:
 2420 0c64 E091 0000 		lds r30,isa_rfRxInfo+5
 2421 0c68 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 2422 0c6c E281      		ldd r30,Z+2
 2423 0c6e FF27      		clr r31
 2424 0c70 EE0F      		lsl r30
 2425 0c72 FF1F      		rol r31
 2426 0c74 E050      		subi r30,lo8(-(adjacencyMatrix))
 2427 0c76 F040      		sbci r31,hi8(-(adjacencyMatrix))
 2428 0c78 21E0      		ldi r18,lo8(1)
 2429 0c7a 30E0      		ldi r19,hi8(1)
 2430 0c7c 0C90      		ld r0,X
 2431 0c7e 00C0      		rjmp 2f
 2432 0c80 220F      	1:	lsl r18
 2433 0c82 331F      		rol r19
 2434 0c84 0A94      	2:	dec r0
 2435 0c86 02F4      		brpl 1b
 2436 0c88 8081      		ld r24,Z
 2437 0c8a 9181      		ldd r25,Z+1
 2438 0c8c 822B      		or r24,r18
 2439 0c8e 932B      		or r25,r19
 2440 0c90 9183      		std Z+1,r25
 2441 0c92 8083      		st Z,r24
 2443               	.LM305:
 2444 0c94 1496      		adiw r26,4
 2445               	.L184:
 2446 0c96 942F      		mov r25,r20
 2447 0c98 4F5F      		subi r20,lo8(-(1))
 2448 0c9a 5F4F      		sbci r21,hi8(-(1))
 2450               	.LM306:
 2451 0c9c FB01      		movw r30,r22
 2452 0c9e 8081      		ld r24,Z
 2453 0ca0 9817      		cp r25,r24
 2454 0ca2 00F0      		brlo .L185
 2456               	.LM307:
 2457 0ca4 6091 0000 		lds r22,__iob+2
 2458 0ca8 7091 0000 		lds r23,(__iob+2)+1
 2459 0cac 8AE0      		ldi r24,lo8(10)
 2460 0cae 90E0      		ldi r25,hi8(10)
 2461 0cb0 0E94 0000 		call fputc
 2463               	.LM308:
 2464 0cb4 6091 0000 		lds r22,__iob+2
 2465 0cb8 7091 0000 		lds r23,(__iob+2)+1
 2466 0cbc 8DE0      		ldi r24,lo8(13)
 2467 0cbe 90E0      		ldi r25,hi8(13)
 2468 0cc0 0E94 0000 		call fputc
 2470               	.LM309:
 2471 0cc4 6091 0000 		lds r22,__iob+2
 2472 0cc8 7091 0000 		lds r23,(__iob+2)+1
 2473 0ccc 8EE6      		ldi r24,lo8(110)
 2474 0cce 90E0      		ldi r25,hi8(110)
 2475 0cd0 0E94 0000 		call fputc
 2476 0cd4 00C0      		rjmp .L202
 2477               	.L182:
 2479               	.LM310:
 2480 0cd6 4091 0000 		lds r20,isa_rfRxInfo+3
 2481 0cda 5527      		clr r21
 2482 0cdc 47FD      		sbrc r20,7
 2483 0cde 5095      		com r21
 2484 0ce0 8091 0000 		lds r24,isa_clk_src_id
 2485 0ce4 00E0      		ldi r16,lo8(0)
 2486 0ce6 10E0      		ldi r17,hi8(0)
 2487 0ce8 9F01      		movw r18,r30
 2488 0cea 60E0      		ldi r22,lo8(0)
 2489 0cec 70E0      		ldi r23,hi8(0)
 2490 0cee 9927      		clr r25
 2491 0cf0 0E94 0000 		call enQueue
 2492               	.LBB54:
 2493               	.LBB55:
 2495               	.LM311:
 2496 0cf4 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 2497 0cf8 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 2498 0cfc 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 2499 0d00 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 2500               	.LBE55:
 2501               	.LBE54:
 2503               	.LM312:
 2504 0d04 E091 0000 		lds r30,isa_rfRxInfo+5
 2505 0d08 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 2506 0d0c 6281      		ldd r22,Z+2
 2507 0d0e 6150      		subi r22,lo8(-(-1))
 2508 0d10 8DE0      		ldi r24,lo8(13)
 2509               	.L203:
 2510 0d12 0E94 0000 		call setNewDisplay
 2511 0d16 00C0      		rjmp .L193
 2512               	.L180:
 2514               	.LM313:
 2515 0d18 8530      		cpi r24,lo8(5)
 2516 0d1a 01F0      		breq .+2
 2517 0d1c 00C0      		rjmp .L187
 2519               	.LM314:
 2520 0d1e E091 0000 		lds r30,isa_rfRxInfo+5
 2521 0d22 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 2522 0d26 8281      		ldd r24,Z+2
 2523 0d28 9927      		clr r25
 2524 0d2a 9F93      		push r25
 2525 0d2c 8F93      		push r24
 2526 0d2e 80E0      		ldi r24,lo8(.LC9)
 2527 0d30 90E0      		ldi r25,hi8(.LC9)
 2528 0d32 9F93      		push r25
 2529 0d34 8F93      		push r24
 2530 0d36 0E94 0000 		call printf
 2532               	.LM315:
 2533 0d3a 0F90      		pop __tmp_reg__
 2534 0d3c 0F90      		pop __tmp_reg__
 2535 0d3e 0F90      		pop __tmp_reg__
 2536 0d40 0F90      		pop __tmp_reg__
 2537 0d42 8091 0000 		lds r24,dmo
 2538 0d46 9091 0000 		lds r25,(dmo)+1
 2539 0d4a A816      		cp r10,r24
 2540 0d4c B906      		cpc r11,r25
 2541 0d4e 01F4      		brne .L189
 2543               	.LM316:
 2544 0d50 0E94 0000 		call flushCandidateEntries
 2545 0d54 00C0      		rjmp .L202
 2546               	.L189:
 2548               	.LM317:
 2549 0d56 8091 0000 		lds r24,isa_rfRxInfo+5
 2550 0d5a 9091 0000 		lds r25,(isa_rfRxInfo+5)+1
 2551 0d5e 0E94 0000 		call isTransmitLinkPresent
 2552 0d62 8823      		tst r24
 2553 0d64 01F0      		breq .L191
 2555               	.LM318:
 2556 0d66 2091 0000 		lds r18,isa_rfRxInfo+5
 2557 0d6a 3091 0000 		lds r19,(isa_rfRxInfo+5)+1
 2558 0d6e 4091 0000 		lds r20,isa_rfRxInfo+3
 2559 0d72 5527      		clr r21
 2560 0d74 47FD      		sbrc r20,7
 2561 0d76 5095      		com r21
 2562 0d78 00E0      		ldi r16,lo8(0)
 2563 0d7a 10E0      		ldi r17,hi8(0)
 2564 0d7c 60E0      		ldi r22,lo8(0)
 2565 0d7e 70E0      		ldi r23,hi8(0)
 2566 0d80 C501      		movw r24,r10
 2567 0d82 0E94 0000 		call enQueue
 2568               	.L202:
 2569               	.LBB56:
 2570               	.LBB57:
 2572               	.LM319:
 2573 0d86 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 2574 0d8a 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 2575 0d8e 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 2576 0d92 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 2577 0d96 00C0      		rjmp .L193
 2578               	.L191:
 2579               	.LBE57:
 2580               	.LBE56:
 2582               	.LM320:
 2583 0d98 BF92      		push r11
 2584 0d9a AF92      		push r10
 2585 0d9c 80E0      		ldi r24,lo8(.LC10)
 2586 0d9e 90E0      		ldi r25,hi8(.LC10)
 2587               	.L206:
 2588 0da0 9F93      		push r25
 2589 0da2 8F93      		push r24
 2590 0da4 0E94 0000 		call printf
 2591               	.LBB58:
 2592               	.LBB59:
 2594               	.LM321:
 2595 0da8 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 2596 0dac 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 2597 0db0 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 2598 0db4 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 2599               	.L201:
 2600 0db8 0F90      		pop __tmp_reg__
 2601 0dba 0F90      		pop __tmp_reg__
 2602 0dbc 0F90      		pop __tmp_reg__
 2603 0dbe 0F90      		pop __tmp_reg__
 2604 0dc0 00C0      		rjmp .L193
 2605               	.L187:
 2606               	.LBE59:
 2607               	.LBE58:
 2609               	.LM322:
 2610 0dc2 80E0      		ldi r24,lo8(.LC11)
 2611 0dc4 90E0      		ldi r25,hi8(.LC11)
 2612 0dc6 0E94 0000 		call puts
 2613 0dca 00C0      		rjmp .L193
 2614               	.L140:
 2616               	.LM323:
 2617 0dcc 8091 0000 		lds r24,rxCount
 2618 0dd0 9091 0000 		lds r25,(rxCount)+1
 2619 0dd4 0196      		adiw r24,1
 2620 0dd6 9093 0000 		sts (rxCount)+1,r25
 2621 0dda 8093 0000 		sts rxCount,r24
 2623               	.LM324:
 2624 0dde 81E0      		ldi r24,lo8(1)
 2625 0de0 90E0      		ldi r25,hi8(1)
 2626 0de2 0E94 0000 		call nrk_led_toggle
 2628               	.LM325:
 2629 0de6 C090 0000 		lds r12,isa_rfRxInfo+5
 2630 0dea D090 0000 		lds r13,(isa_rfRxInfo+5)+1
 2631 0dee F601      		movw r30,r12
 2632 0df0 F380      		ldd r15,Z+3
 2634               	.LM326:
 2635 0df2 1081      		ld r17,Z
 2637               	.LM327:
 2638 0df4 8091 0000 		lds r24,isa_rx_pkt_signal
 2639 0df8 0E94 0000 		call nrk_event_signal
 2641               	.LM328:
 2642 0dfc E091 0000 		lds r30,isa_rfRxInfo+5
 2643 0e00 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 2644 0e04 8281      		ldd r24,Z+2
 2646               	.LM329:
 2647 0e06 812E      		mov r8,r17
 2648 0e08 9924      		clr r9
 2649 0e0a 84FE      		sbrs r8,4
 2650 0e0c 00C0      		rjmp .L198
 2651 0e0e 00C0      		rjmp .L142
 2652               	.L193:
 2653               	/* epilogue: frame size=1 */
 2654 0e10 2196      		adiw r28,1
 2655 0e12 0FB6      		in __tmp_reg__,__SREG__
 2656 0e14 F894      		cli
 2657 0e16 DEBF      		out __SP_H__,r29
 2658 0e18 0FBE      		out __SREG__,__tmp_reg__
 2659 0e1a CDBF      		out __SP_L__,r28
 2660 0e1c DF91      		pop r29
 2661 0e1e CF91      		pop r28
 2662 0e20 1F91      		pop r17
 2663 0e22 0F91      		pop r16
 2664 0e24 FF90      		pop r15
 2665 0e26 EF90      		pop r14
 2666 0e28 DF90      		pop r13
 2667 0e2a CF90      		pop r12
 2668 0e2c BF90      		pop r11
 2669 0e2e AF90      		pop r10
 2670 0e30 9F90      		pop r9
 2671 0e32 8F90      		pop r8
 2672 0e34 0895      		ret
 2673               	/* epilogue end (size=19) */
 2674               	/* function _isa_rx size 751 (712) */
 2690               	.Lscope16:
 2692               		.stabd	78,0,0
 2694               	.global	isa_wait_until_rx_or_tx
 2696               	isa_wait_until_rx_or_tx:
 2697               		.stabd	46,0,0
 2699               	.LM330:
 2700               	.LFBB17:
 2701               	/* prologue: frame size=0 */
 2702               	/* prologue end (size=0) */
 2704               	.LM331:
 2705 0e36 8091 0000 		lds r24,isa_rx_pkt_signal
 2706 0e3a 0E94 0000 		call nrk_signal_register
 2708               	.LM332:
 2709 0e3e 8091 0000 		lds r24,isa_tx_done_signal
 2710 0e42 0E94 0000 		call nrk_signal_register
 2712               	.LM333:
 2713 0e46 21E0      		ldi r18,lo8(1)
 2714 0e48 30E0      		ldi r19,hi8(1)
 2715 0e4a 40E0      		ldi r20,hlo8(1)
 2716 0e4c 50E0      		ldi r21,hhi8(1)
 2717 0e4e CA01      		movw r24,r20
 2718 0e50 B901      		movw r22,r18
 2719 0e52 0090 0000 		lds r0,isa_tx_done_signal
 2720 0e56 00C0      		rjmp 2f
 2721 0e58 660F      	1:	lsl r22
 2722 0e5a 771F      		rol r23
 2723 0e5c 881F      		rol r24
 2724 0e5e 991F      		rol r25
 2725 0e60 0A94      	2:	dec r0
 2726 0e62 02F4      		brpl 1b
 2727 0e64 0090 0000 		lds r0,isa_rx_pkt_signal
 2728 0e68 00C0      		rjmp 2f
 2729 0e6a 220F      	1:	lsl r18
 2730 0e6c 331F      		rol r19
 2731 0e6e 441F      		rol r20
 2732 0e70 551F      		rol r21
 2733 0e72 0A94      	2:	dec r0
 2734 0e74 02F4      		brpl 1b
 2735 0e76 622B      		or r22,r18
 2736 0e78 732B      		or r23,r19
 2737 0e7a 842B      		or r24,r20
 2738 0e7c 952B      		or r25,r21
 2739 0e7e 0E94 0000 		call nrk_event_wait
 2741               	.LM334:
 2742 0e82 81E0      		ldi r24,lo8(1)
 2743 0e84 90E0      		ldi r25,hi8(1)
 2744               	/* epilogue: frame size=0 */
 2745 0e86 0895      		ret
 2746               	/* epilogue end (size=1) */
 2747               	/* function isa_wait_until_rx_or_tx size 41 (40) */
 2749               	.Lscope17:
 2751               		.stabd	78,0,0
 2754               	.global	isa_set_channel
 2756               	isa_set_channel:
 2757               		.stabd	46,0,0
 2759               	.LM335:
 2760               	.LFBB18:
 2761               	/* prologue: frame size=0 */
 2762               	/* prologue end (size=0) */
 2764               	.LM336:
 2765 0e88 8093 0000 		sts isa_param+2,r24
 2767               	.LM337:
 2768 0e8c 0E94 0000 		call rf_set_channel
 2769               	/* epilogue: frame size=0 */
 2770 0e90 0895      		ret
 2771               	/* epilogue end (size=1) */
 2772               	/* function isa_set_channel size 5 (4) */
 2774               	.Lscope18:
 2776               		.stabd	78,0,0
 2777               		.data
 2778               	.LC12:
 2779 01c6 4164 7653 		.string	"AdvSent\r"
 2779      656E 740D 
 2779      00
 2780               		.text
 2782               	.global	isa_nw_task
 2784               	isa_nw_task:
 2785               		.stabd	46,0,0
 2787               	.LM338:
 2788               	.LFBB19:
 2789               	/* prologue: frame size=0 */
 2790 0e92 CF92      		push r12
 2791 0e94 DF92      		push r13
 2792 0e96 EF92      		push r14
 2793 0e98 FF92      		push r15
 2794 0e9a 0F93      		push r16
 2795 0e9c 1F93      		push r17
 2796 0e9e CF93      		push r28
 2797 0ea0 DF93      		push r29
 2798               	/* prologue end (size=8) */
 2800               	.LM339:
 2801 0ea2 1092 0000 		sts _isa_ready,__zero_reg__
 2802               	.L212:
 2804               	.LM340:
 2805 0ea6 0E94 0000 		call nrk_wait_until_next_period
 2807               	.LM341:
 2808 0eaa 8091 0000 		lds r24,_isa_ready
 2809 0eae 8823      		tst r24
 2810 0eb0 01F0      		breq .L212
 2812               	.LM342:
 2813 0eb2 81E0      		ldi r24,lo8(1)
 2814 0eb4 8093 0000 		sts _isa_ready,r24
 2816               	.LM343:
 2817 0eb8 0091 0000 		lds r16,NRK_DEBUG_1
 2818 0ebc EE24      		clr r14
 2819 0ebe FF24      		clr r15
 2820 0ec0 30E0      		ldi r19,lo8(.LC12)
 2821 0ec2 C32E      		mov r12,r19
 2822 0ec4 30E0      		ldi r19,hi8(.LC12)
 2823 0ec6 D32E      		mov r13,r19
 2824               	.L248:
 2826               	.LM344:
 2827 0ec8 0E94 0000 		call _nrk_high_speed_timer_reset
 2829               	.LM345:
 2830 0ecc 0E94 0000 		call _nrk_high_speed_timer_get
 2831 0ed0 9093 0000 		sts (slot_start_time)+1,r25
 2832 0ed4 8093 0000 		sts slot_start_time,r24
 2834               	.LM346:
 2835 0ed8 802F      		mov r24,r16
 2836 0eda 0E94 0000 		call nrk_gpio_set
 2838               	.LM347:
 2839 0ede 802F      		mov r24,r16
 2840 0ee0 0E94 0000 		call nrk_gpio_clr
 2842               	.LM348:
 2843 0ee4 8091 0000 		lds r24,global_slot
 2844 0ee8 9091 0000 		lds r25,(global_slot)+1
 2845 0eec 9093 0000 		sts (current_global_slot)+1,r25
 2846 0ef0 8093 0000 		sts current_global_slot,r24
 2848               	.LM349:
 2849 0ef4 8091 0000 		lds r24,global_slot
 2850 0ef8 9091 0000 		lds r25,(global_slot)+1
 2851 0efc 8739      		cpi r24,151
 2852 0efe 9105      		cpc r25,__zero_reg__
 2853 0f00 00F0      		brlo .L215
 2855               	.LM350:
 2856 0f02 8091 0000 		lds r24,global_slot
 2857 0f06 9091 0000 		lds r25,(global_slot)+1
 2858 0f0a 62E3      		ldi r22,lo8(50)
 2859 0f0c 70E0      		ldi r23,hi8(50)
 2860 0f0e 0E94 0000 		call __udivmodhi4
 2861 0f12 9093 0000 		sts (global_slot)+1,r25
 2862 0f16 8093 0000 		sts global_slot,r24
 2864               	.LM351:
 2865 0f1a 8091 0000 		lds r24,global_cycle
 2866 0f1e 9091 0000 		lds r25,(global_cycle)+1
 2867 0f22 0196      		adiw r24,1
 2868 0f24 9093 0000 		sts (global_cycle)+1,r25
 2869 0f28 8093 0000 		sts global_cycle,r24
 2870               	.L215:
 2872               	.LM352:
 2873 0f2c 2091 0000 		lds r18,global_slot
 2874 0f30 3091 0000 		lds r19,(global_slot)+1
 2876               	.LM353:
 2877 0f34 8091 0000 		lds r24,_isa_sync_ok
 2878 0f38 8130      		cpi r24,lo8(1)
 2879 0f3a 01F4      		brne .L217
 2881               	.LM354:
 2882 0f3c C901      		movw r24,r18
 2883 0f3e 62E3      		ldi r22,lo8(50)
 2884 0f40 70E0      		ldi r23,hi8(50)
 2885 0f42 0E94 0000 		call __udivmodhi4
 2886 0f46 EC01      		movw r28,r24
 2887 0f48 182F      		mov r17,r24
 2889               	.LM355:
 2890 0f4a E091 0000 		lds r30,channelIndex
 2891 0f4e EE0D      		add r30,r14
 2892 0f50 E093 0000 		sts channelIndex,r30
 2894               	.LM356:
 2895 0f54 FF27      		clr r31
 2896 0f56 EF70      		andi r30,lo8(15)
 2897 0f58 F070      		andi r31,hi8(15)
 2898 0f5a E050      		subi r30,lo8(-(slottedPattern))
 2899 0f5c F040      		sbci r31,hi8(-(slottedPattern))
 2900 0f5e 8081      		ld r24,Z
 2901 0f60 8093 0000 		sts currentChannel,r24
 2903               	.LM357:
 2904 0f64 0E94 0000 		call isa_set_channel
 2906               	.LM358:
 2907 0f68 8C2F      		mov r24,r28
 2908 0f6a 0E94 0000 		call findLink
 2909 0f6e FC01      		movw r30,r24
 2911               	.LM359:
 2912 0f70 892B      		or r24,r25
 2913 0f72 01F0      		breq .L219
 2915               	.LM360:
 2916 0f74 8481      		ldd r24,Z+4
 2917 0f76 8830      		cpi r24,lo8(8)
 2918 0f78 01F4      		brne .L221
 2920               	.LM361:
 2921 0f7a 6C2F      		mov r22,r28
 2922 0f7c CF01      		movw r24,r30
 2923 0f7e 0E94 0000 		call _isa_rx
 2924 0f82 00C0      		rjmp .L219
 2925               	.L221:
 2927               	.LM362:
 2928 0f84 8130      		cpi r24,lo8(1)
 2929 0f86 01F0      		breq .L245
 2931               	.LM363:
 2932 0f88 8430      		cpi r24,lo8(4)
 2933 0f8a 01F4      		brne .L219
 2934               	.L245:
 2936               	.LM364:
 2937 0f8c 612F      		mov r22,r17
 2938 0f8e 7727      		clr r23
 2939 0f90 CF01      		movw r24,r30
 2940 0f92 0E94 0000 		call _isa_tx
 2941 0f96 00C0      		rjmp .L219
 2942               	.L217:
 2944               	.LM365:
 2945 0f98 8091 0000 		lds r24,isa_node_mode
 2946 0f9c 8230      		cpi r24,lo8(2)
 2947 0f9e 01F0      		breq .L226
 2949               	.LM366:
 2950 0fa0 1092 0000 		sts (DHDRcount)+1,__zero_reg__
 2951 0fa4 1092 0000 		sts DHDRcount,__zero_reg__
 2953               	.LM367:
 2954 0fa8 0E94 0000 		call _isa_init_sync
 2955 0fac 00C0      		rjmp .L246
 2956               	.L226:
 2958               	.LM368:
 2959 0fae 81E0      		ldi r24,lo8(1)
 2960               	.L246:
 2961 0fb0 8093 0000 		sts _isa_sync_ok,r24
 2962               	.L219:
 2964               	.LM369:
 2965 0fb4 2091 0000 		lds r18,slot_expired
 2966 0fb8 3091 0000 		lds r19,(slot_expired)+1
 2967 0fbc 8091 0000 		lds r24,EXPIRATION
 2968 0fc0 9091 0000 		lds r25,(EXPIRATION)+1
 2969 0fc4 2817      		cp r18,r24
 2970 0fc6 3907      		cpc r19,r25
 2971 0fc8 00F0      		brlo .L228
 2972 0fca 8091 0000 		lds r24,isa_node_mode
 2973 0fce 8230      		cpi r24,lo8(2)
 2974 0fd0 01F0      		breq .L228
 2976               	.LM370:
 2977 0fd2 1092 0000 		sts _isa_sync_ok,__zero_reg__
 2979               	.LM371:
 2980 0fd6 1092 0000 		sts (slot_expired)+1,__zero_reg__
 2981 0fda 1092 0000 		sts slot_expired,__zero_reg__
 2983               	.LM372:
 2984 0fde 1092 0000 		sts (global_slot)+1,__zero_reg__
 2985 0fe2 1092 0000 		sts global_slot,__zero_reg__
 2987               	.LM373:
 2988 0fe6 8091 0000 		lds r24,resync_times
 2989 0fea 9091 0000 		lds r25,(resync_times)+1
 2990 0fee 0196      		adiw r24,1
 2991 0ff0 9093 0000 		sts (resync_times)+1,r25
 2992 0ff4 8093 0000 		sts resync_times,r24
 2994               	.LM374:
 2995 0ff8 8091 0000 		lds r24,isa_id
 2996 0ffc 8130      		cpi r24,lo8(1)
 2997 0ffe 01F0      		breq .L231
 2999               	.LM375:
 3000 1000 E091 0000 		lds r30,isa_clk_src_id
 3001 1004 E093 0000 		sts channelIndex,r30
 3003               	.LM376:
 3004 1008 FF27      		clr r31
 3005 100a E050      		subi r30,lo8(-(slottedPattern))
 3006 100c F040      		sbci r31,hi8(-(slottedPattern))
 3007 100e 8081      		ld r24,Z
 3008 1010 00C0      		rjmp .L247
 3009               	.L231:
 3011               	.LM377:
 3012 1012 1092 0000 		sts channelIndex,__zero_reg__
 3014               	.LM378:
 3015 1016 8091 0000 		lds r24,slottedPattern
 3016               	.L247:
 3017 101a 8093 0000 		sts currentChannel,r24
 3019               	.LM379:
 3020 101e 8091 0000 		lds r24,currentChannel
 3021 1022 0E94 0000 		call isa_set_channel
 3022 1026 EE24      		clr r14
 3023 1028 FF24      		clr r15
 3024 102a 00C0      		rjmp .L248
 3025               	.L228:
 3027               	.LM380:
 3028 102c 8091 0000 		lds r24,global_slot
 3029 1030 9091 0000 		lds r25,(global_slot)+1
 3030 1034 0E94 0000 		call isa_get_slots_until_next_wakeup
 3031 1038 7C01      		movw r14,r24
 3033               	.LM381:
 3034 103a 8091 0000 		lds r24,global_slot
 3035 103e 9091 0000 		lds r25,(global_slot)+1
 3036 1042 8E0D      		add r24,r14
 3037 1044 9F1D      		adc r25,r15
 3038 1046 9093 0000 		sts (global_slot)+1,r25
 3039 104a 8093 0000 		sts global_slot,r24
 3041               	.LM382:
 3042 104e 80E0      		ldi r24,lo8(0)
 3043 1050 90E0      		ldi r25,hi8(0)
 3044 1052 0E94 0000 		call nrk_led_clr
 3046               	.LM383:
 3047 1056 1092 0000 		sts (offsetY)+1,__zero_reg__
 3048 105a 1092 0000 		sts offsetY,__zero_reg__
 3050               	.LM384:
 3051 105e 8091 0000 		lds r24,isa_node_mode
 3052 1062 8230      		cpi r24,lo8(2)
 3053 1064 01F0      		breq .L234
 3055               	.LM385:
 3056 1066 0E94 0000 		call isDiscoveryAlertDue
 3057 106a 8823      		tst r24
 3058 106c 01F0      		breq .L234
 3060               	.LM386:
 3061 106e 0E94 0000 		call sendAdv
 3062 1072 8F3F      		cpi r24,lo8(-1)
 3063 1074 01F4      		brne .L237
 3065               	.LM387:
 3066 1076 0E94 0000 		call printIsaError
 3067               	.L237:
 3069               	.LM388:
 3070 107a C601      		movw r24,r12
 3071 107c 0E94 0000 		call puts
 3073               	.LM389:
 3074 1080 0E94 0000 		call updateLastSentTime
 3076               	.LM390:
 3077 1084 6091 0000 		lds r22,dmo
 3078 1088 6150      		subi r22,lo8(-(-1))
 3079 108a 8DE0      		ldi r24,lo8(13)
 3080 108c 0E94 0000 		call setNewDisplay
 3081               	.L234:
 3083               	.LM391:
 3084 1090 C701      		movw r24,r14
 3085 1092 0E94 0000 		call nrk_wait_until_next_n_periods
 3087               	.LM392:
 3088 1096 80E0      		ldi r24,lo8(0)
 3089 1098 90E0      		ldi r25,hi8(0)
 3090 109a 0E94 0000 		call nrk_led_set
 3091 109e 00C0      		rjmp .L248
 3092               	/* epilogue: frame size=0 */
 3093               	/* epilogue: noreturn */
 3094               	/* epilogue end (size=0) */
 3095               	/* function isa_nw_task size 263 (255) */
 3102               	.Lscope19:
 3104               		.stabd	78,0,0
 3109               	.global	isa_init
 3111               	isa_init:
 3112               		.stabd	46,0,0
 3114               	.LM393:
 3115               	.LFBB20:
 3116               	/* prologue: frame size=0 */
 3117 10a0 FF92      		push r15
 3118 10a2 0F93      		push r16
 3119 10a4 1F93      		push r17
 3120               	/* prologue end (size=3) */
 3121 10a6 F82E      		mov r15,r24
 3122 10a8 162F      		mov r17,r22
 3123 10aa 042F      		mov r16,r20
 3125               	.LM394:
 3126 10ac 0E94 0000 		call nrk_signal_create
 3127 10b0 8093 0000 		sts isa_rx_pkt_signal,r24
 3129               	.LM395:
 3130 10b4 8F3F      		cpi r24,lo8(-1)
 3131 10b6 01F4      		brne .L250
 3133               	.LM396:
 3134 10b8 80E0      		ldi r24,lo8(__c.2862)
 3135 10ba 90E0      		ldi r25,hi8(__c.2862)
 3136 10bc 00C0      		rjmp .L260
 3137               	.L250:
 3139               	.LM397:
 3140 10be 0E94 0000 		call nrk_signal_create
 3141 10c2 8093 0000 		sts isa_tx_done_signal,r24
 3143               	.LM398:
 3144 10c6 8F3F      		cpi r24,lo8(-1)
 3145 10c8 01F4      		brne .L253
 3147               	.LM399:
 3148 10ca 80E0      		ldi r24,lo8(__c.2864)
 3149 10cc 90E0      		ldi r25,hi8(__c.2864)
 3150               	.L260:
 3151 10ce 0E94 0000 		call nrk_kprintf
 3153               	.LM400:
 3154 10d2 E091 0000 		lds r30,nrk_cur_task_TCB
 3155 10d6 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 3156 10da 6085      		ldd r22,Z+8
 3157 10dc 8EE0      		ldi r24,lo8(14)
 3158 10de 0E94 0000 		call nrk_kernel_error_add
 3159 10e2 8FEF      		ldi r24,lo8(255)
 3160 10e4 90E0      		ldi r25,hi8(255)
 3161 10e6 00C0      		rjmp .L252
 3162               	.L253:
 3164               	.LM401:
 3165 10e8 1092 0000 		sts (isa_rfRxInfo+5)+1,__zero_reg__
 3166 10ec 1092 0000 		sts isa_rfRxInfo+5,__zero_reg__
 3168               	.LM402:
 3169 10f0 1092 0000 		sts isa_rfRxInfo+4,__zero_reg__
 3171               	.LM403:
 3172 10f4 0E94 0000 		call _nrk_high_speed_timer_start
 3174               	.LM404:
 3175 10f8 1092 0000 		sts (global_cycle)+1,__zero_reg__
 3176 10fc 1092 0000 		sts global_cycle,__zero_reg__
 3178               	.LM405:
 3179 1100 84E6      		ldi r24,lo8(100)
 3180 1102 90E0      		ldi r25,hi8(100)
 3181 1104 9093 0000 		sts (global_slot)+1,r25
 3182 1108 8093 0000 		sts global_slot,r24
 3184               	.LM406:
 3185 110c 1092 0000 		sts _isa_sync_ok,__zero_reg__
 3187               	.LM407:
 3188 1110 1092 0000 		sts _isa_join_ok,__zero_reg__
 3190               	.LM408:
 3191 1114 1092 0000 		sts (slot_expired)+1,__zero_reg__
 3192 1118 1092 0000 		sts slot_expired,__zero_reg__
 3194               	.LM409:
 3195 111c F092 0000 		sts isa_node_mode,r15
 3197               	.LM410:
 3198 1120 1093 0000 		sts isa_id,r17
 3200               	.LM411:
 3201 1124 812F      		mov r24,r17
 3202 1126 9927      		clr r25
 3203 1128 9093 0000 		sts (dmo)+1,r25
 3204 112c 8093 0000 		sts dmo,r24
 3206               	.LM412:
 3207 1130 0093 0000 		sts isa_clk_src_id,r16
 3209               	.LM413:
 3210 1134 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 3211 1138 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 3212 113c 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 3213 1140 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 3215               	.LM414:
 3216 1144 84E6      		ldi r24,lo8(100)
 3217 1146 8093 0000 		sts isa_param+8,r24
 3219               	.LM415:
 3220 114a 80E4      		ldi r24,lo8(8000)
 3221 114c 9FE1      		ldi r25,hi8(8000)
 3222 114e 9093 0000 		sts (isa_param+6)+1,r25
 3223 1152 8093 0000 		sts isa_param+6,r24
 3225               	.LM416:
 3226 1156 80EA      		ldi r24,lo8(4000)
 3227 1158 9FE0      		ldi r25,hi8(4000)
 3228 115a 9093 0000 		sts (isa_param+4)+1,r25
 3229 115e 8093 0000 		sts isa_param+4,r24
 3231               	.LM417:
 3232 1162 8FE0      		ldi r24,lo8(15)
 3233 1164 8093 0000 		sts isa_param+2,r24
 3235               	.LM418:
 3236 1168 81E8      		ldi r24,lo8(6529)
 3237 116a 99E1      		ldi r25,hi8(6529)
 3238 116c 9093 0000 		sts (isa_param)+1,r25
 3239 1170 8093 0000 		sts isa_param,r24
 3241               	.LM419:
 3242 1174 21E8      		ldi r18,lo8(6529)
 3243 1176 39E1      		ldi r19,hi8(6529)
 3244 1178 41E2      		ldi r20,lo8(9249)
 3245 117a 54E2      		ldi r21,hi8(9249)
 3246 117c 6FE0      		ldi r22,lo8(15)
 3247 117e 80E0      		ldi r24,lo8(isa_rfRxInfo)
 3248 1180 90E0      		ldi r25,hi8(isa_rfRxInfo)
 3249 1182 0E94 0000 		call rf_init
 3251               	.LM420:
 3252 1186 81E0      		ldi r24,lo8(1)
 3253 1188 8093 0000 		sts AFTER_FIRST_SYNC,r24
 3255               	.LM421:
 3256 118c 1092 0000 		sts slowIndex,__zero_reg__
 3258               	.LM422:
 3259 1190 1130      		cpi r17,lo8(1)
 3260 1192 01F0      		breq .L255
 3262               	.LM423:
 3263 1194 0093 0000 		sts channelIndex,r16
 3265               	.LM424:
 3266 1198 E02F      		mov r30,r16
 3267 119a FF27      		clr r31
 3268 119c E050      		subi r30,lo8(-(slottedPattern))
 3269 119e F040      		sbci r31,hi8(-(slottedPattern))
 3270 11a0 8081      		ld r24,Z
 3271 11a2 00C0      		rjmp .L259
 3272               	.L255:
 3274               	.LM425:
 3275 11a4 1092 0000 		sts channelIndex,__zero_reg__
 3277               	.LM426:
 3278 11a8 8091 0000 		lds r24,slottedPattern
 3279               	.L259:
 3280 11ac 8093 0000 		sts currentChannel,r24
 3282               	.LM427:
 3283 11b0 8091 0000 		lds r24,currentChannel
 3284 11b4 0E94 0000 		call isa_set_channel
 3286               	.LM428:
 3287 11b8 1092 0000 		sts (resync_times)+1,__zero_reg__
 3288 11bc 1092 0000 		sts resync_times,__zero_reg__
 3290               	.LM429:
 3291 11c0 0E94 0000 		call dlmoInit
 3292 11c4 81E0      		ldi r24,lo8(1)
 3293 11c6 90E0      		ldi r25,hi8(1)
 3294               	.L252:
 3295               	/* epilogue: frame size=0 */
 3296 11c8 1F91      		pop r17
 3297 11ca 0F91      		pop r16
 3298 11cc FF90      		pop r15
 3299 11ce 0895      		ret
 3300               	/* epilogue end (size=4) */
 3301               	/* function isa_init size 152 (145) */
 3303               	.Lscope20:
 3305               		.stabd	78,0,0
 3307               	.global	isa_wait_until_rx_pkt
 3309               	isa_wait_until_rx_pkt:
 3310               		.stabd	46,0,0
 3312               	.LM430:
 3313               	.LFBB21:
 3314               	/* prologue: frame size=0 */
 3315               	/* prologue end (size=0) */
 3317               	.LM431:
 3318 11d0 8091 0000 		lds r24,isa_rx_pkt_signal
 3319 11d4 0E94 0000 		call nrk_signal_register
 3321               	.LM432:
 3322 11d8 8091 0000 		lds r24,isa_rx_data_ready
 3323 11dc 8823      		tst r24
 3324 11de 01F4      		brne .L262
 3326               	.LM433:
 3327 11e0 61E0      		ldi r22,lo8(1)
 3328 11e2 70E0      		ldi r23,hi8(1)
 3329 11e4 80E0      		ldi r24,hlo8(1)
 3330 11e6 90E0      		ldi r25,hhi8(1)
 3331 11e8 0090 0000 		lds r0,isa_rx_pkt_signal
 3332 11ec 00C0      		rjmp 2f
 3333 11ee 660F      	1:	lsl r22
 3334 11f0 771F      		rol r23
 3335 11f2 881F      		rol r24
 3336 11f4 991F      		rol r25
 3337 11f6 0A94      	2:	dec r0
 3338 11f8 02F4      		brpl 1b
 3339 11fa 0E94 0000 		call nrk_event_wait
 3340               	.L262:
 3342               	.LM434:
 3343 11fe 81E0      		ldi r24,lo8(1)
 3344 1200 90E0      		ldi r25,hi8(1)
 3345               	/* epilogue: frame size=0 */
 3346 1202 0895      		ret
 3347               	/* epilogue end (size=1) */
 3348               	/* function isa_wait_until_rx_pkt size 26 (25) */
 3350               	.Lscope21:
 3352               		.stabd	78,0,0
 3356               	.global	isa_rx_pkt_get
 3358               	isa_rx_pkt_get:
 3359               		.stabd	46,0,0
 3361               	.LM435:
 3362               	.LFBB22:
 3363               	/* prologue: frame size=0 */
 3364               	/* prologue end (size=0) */
 3365 1204 FC01      		movw r30,r24
 3366 1206 DB01      		movw r26,r22
 3368               	.LM436:
 3369 1208 8091 0000 		lds r24,isa_rx_data_ready
 3370 120c 8823      		tst r24
 3371 120e 01F4      		brne .L266
 3373               	.LM437:
 3374 1210 1082      		st Z,__zero_reg__
 3376               	.LM438:
 3377 1212 1C92      		st X,__zero_reg__
 3378 1214 80E0      		ldi r24,lo8(0)
 3379 1216 90E0      		ldi r25,hi8(0)
 3380 1218 0895      		ret
 3381               	.L266:
 3383               	.LM439:
 3384 121a 8091 0000 		lds r24,isa_rfRxInfo+3
 3385 121e 8083      		st Z,r24
 3387               	.LM440:
 3388 1220 8091 0000 		lds r24,isa_rfRxInfo+8
 3389 1224 8C93      		st X,r24
 3391               	.LM441:
 3392 1226 8091 0000 		lds r24,isa_rfRxInfo+5
 3393 122a 9091 0000 		lds r25,(isa_rfRxInfo+5)+1
 3395               	.LM442:
 3396 122e 0895      		ret
 3397               	/* epilogue: frame size=0 */
 3398               	/* epilogue: noreturn */
 3399               	/* epilogue end (size=0) */
 3400               	/* function isa_rx_pkt_get size 22 (22) */
 3402               	.Lscope22:
 3404               		.stabd	78,0,0
 3405               	.global	channelIndex
 3406               	.global	channelIndex
 3407               		.section .bss
 3410               	channelIndex:
 3411 0000 00        		.skip 1,0
 3412               	.global	EXPIRATION
 3413               		.data
 3416               	EXPIRATION:
 3417 01cf C800      		.word	200
 3418               	.global	tmp_count
 3419               	.global	tmp_count
 3420               		.section .bss
 3423               	tmp_count:
 3424 0001 0000      		.skip 2,0
 3425               	.global	DHDRcount
 3426               	.global	DHDRcount
 3429               	DHDRcount:
 3430 0003 0000      		.skip 2,0
 3431               	.global	txCount
 3432               	.global	txCount
 3435               	txCount:
 3436 0005 0000      		.skip 2,0
 3437               	.global	rxCount
 3438               	.global	rxCount
 3441               	rxCount:
 3442 0007 0000      		.skip 2,0
 3443               	.global	packetsLost
 3444               	.global	packetsLost
 3447               	packetsLost:
 3448 0009 0000      		.skip 2,0
 3449               	.global	check
 3450               	.global	check
 3453               	check:
 3454 000b 00        		.skip 1,0
 3455               		.section	.progmem.data,"a",@progbits
 3458               	__c.2864:
 3459 0000 4953 4120 		.string	"ISA ERROR: creating tx signal failed\r\n"
 3459      4552 524F 
 3459      523A 2063 
 3459      7265 6174 
 3459      696E 6720 
 3462               	__c.2862:
 3463 0027 4953 4120 		.string	"ISA ERROR: creating rx signal failed\r\n"
 3463      4552 524F 
 3463      523A 2063 
 3463      7265 6174 
 3463      696E 6720 
 3464               		.comm _nrk_signal_list,4,1
 3465               		.comm nrk_idle_task_stk,128,1
 3466               		.comm nrk_kernel_stk_ptr,2,1
 3467               		.comm _nrk_prev_timer_val,1,1
 3468               		.comm _nrk_time_trigger,1,1
 3469               		.comm app_timer0_callback,2,1
 3470               		.comm app_timer0_prescale,1,1
 3471               		.comm error_task,1,1
 3472               		.comm error_num,1,1
 3473               		.comm isa_clk_src_id,1,1
 3474               		.comm isa_id,1,1
 3475               		.comm tx_slot_from_join,4,1
 3476               		.comm isa_rx_data_ready,4,1
 3477               		.comm child_list,4,1
 3478               		.comm DHDR,1,1
 3479               		.comm last_slot,2,1
 3480               		.comm resync_times,2,1
 3481               		.comm isa_param,9,1
 3482               		.comm isa_node_mode,1,1
 3483               		.comm isa_task,35,1
 3484               		.comm isa_task_stack,128,1
 3485               		.comm isa_rfRxInfo,9,1
 3486               		.comm isa_ack_tx,7,1
 3487               		.comm isa_ack_buf,4,1
 3488               		.comm isa_rfTxInfo,7,1
 3489               		.comm _isa_ready,1,1
 3490               		.comm _isa_join_ok,1,1
 3491               		.comm global_slot,2,1
 3492               		.comm current_global_slot,2,1
 3493               		.comm global_cycle,2,1
 3494               		.comm last_sync_slot,2,1
 3495               		.comm slottedPattern,16,1
 3496               		.comm slowPattern,3,1
 3497               		.comm currentChannel,1,1
 3498               		.comm slowIndex,1,1
 3499               		.comm slot_start_time,2,1
 3500               		.comm tx_start_time,2,1
 3501               		.comm rx_start_time,2,1
 3502               		.comm offsetY,2,1
 3503               		.comm offsetX,2,1
 3504               		.comm _isa_sync_ok,1,1
 3505               		.comm AFTER_FIRST_SYNC,1,1
 3506               		.comm slot_expired,2,1
 3507               		.comm previous_tx_slot,1,1
 3508               		.comm isa_tx_done_signal,1,1
 3509               		.comm isa_rx_pkt_signal,1,1
 3510               		.comm adv_buf,116,1
 3511               		.comm DAUX,29,1
 3512               		.comm DHR,1,1
 3513               		.comm tmp_curSec,1,1
 3514               		.comm tmp_offsetSec,1,1
 3515               		.comm tmp_offsetNanoSec,2,1
 3516               		.comm adjacencyMatrix,32,1
 3580               		.text
 3582               	.Letext0:
 3583               	/* File "../../../src/net/isa/isa.c": code 2332 = 0x091c (2196), prologues  67, epilogues  69 */
DEFINED SYMBOLS
                            *ABS*:00000000 isa.c
     /tmp/cclu2MMA.s:2      *ABS*:0000003f __SREG__
     /tmp/cclu2MMA.s:3      *ABS*:0000003e __SP_H__
     /tmp/cclu2MMA.s:4      *ABS*:0000003d __SP_L__
     /tmp/cclu2MMA.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cclu2MMA.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cclu2MMA.s:185    .text:00000000 config_child_list
                            *COM*:00000004 child_list
     /tmp/cclu2MMA.s:228    .text:00000040 isa_get_channel
                            *COM*:00000009 isa_param
     /tmp/cclu2MMA.s:251    .text:00000048 isa_set_channel_pattern
                            *COM*:00000010 slottedPattern
                            *COM*:00000003 slowPattern
     /tmp/cclu2MMA.s:359    .text:000000c8 isa_ready
                            *COM*:00000001 _isa_ready
     /tmp/cclu2MMA.s:395    .text:000000dc isa_rx_pkt_set_buffer
                            *COM*:00000009 isa_rfRxInfo
     /tmp/cclu2MMA.s:439    .text:000000fc isa_start
     /tmp/cclu2MMA.s:462    .text:00000104 configDHDR
     /tmp/cclu2MMA.s:528    .text:00000134 configDHR
     /tmp/cclu2MMA.s:579    .text:0000014c configAdvDAUX
                            *COM*:0000001d DAUX
     /tmp/cclu2MMA.s:663    .text:000001b0 isa_rx_pkt_check
                            *COM*:00000004 isa_rx_data_ready
     /tmp/cclu2MMA.s:687    .text:000001bc isa_rx_pkt_release
     /tmp/cclu2MMA.s:711    .text:000001ce isa_join_ready
                            *COM*:00000001 _isa_join_ok
     /tmp/cclu2MMA.s:745    .text:000001e2 isa_task_config
     /tmp/cclu2MMA.s:2784   .text:00000e92 isa_nw_task
                            *COM*:00000023 isa_task
                            *COM*:00000080 isa_task_stack
     /tmp/cclu2MMA.s:841    .text:0000028c _isa_init_sync
                            *COM*:00000001 _isa_sync_ok
                            *COM*:00000001 isa_clk_src_id
                            *COM*:00000002 global_slot
     /tmp/cclu2MMA.s:1091   .text:000003f2 _isa_tx
                            *COM*:00000007 isa_rfTxInfo
                            *COM*:00000001 previous_tx_slot
                            *COM*:00000001 isa_id
                            *COM*:00000074 adv_buf
                            *COM*:00000002 slot_start_time
                            *COM*:00000002 tx_start_time
     /tmp/cclu2MMA.s:3435   .bss:00000005 txCount
                            *COM*:00000002 offsetY
                            *COM*:00000001 isa_tx_done_signal
                            *COM*:00000002 slot_expired
     /tmp/cclu2MMA.s:3447   .bss:00000009 packetsLost
                            *COM*:00000001 tmp_curSec
                            *COM*:00000001 currentChannel
     /tmp/cclu2MMA.s:3441   .bss:00000007 rxCount
                            *COM*:00000001 DHR
                            *COM*:00000002 offsetX
     /tmp/cclu2MMA.s:1793   .text:00000858 _isa_rx
                            *COM*:00000002 rx_start_time
                            *COM*:00000004 isa_ack_buf
                            *COM*:00000007 isa_ack_tx
                            *COM*:00000001 isa_node_mode
                            *COM*:00000020 adjacencyMatrix
                            *COM*:00000001 isa_rx_pkt_signal
     /tmp/cclu2MMA.s:2696   .text:00000e36 isa_wait_until_rx_or_tx
     /tmp/cclu2MMA.s:2756   .text:00000e88 isa_set_channel
                            *COM*:00000002 current_global_slot
                            *COM*:00000002 global_cycle
     /tmp/cclu2MMA.s:3410   .bss:00000000 channelIndex
     /tmp/cclu2MMA.s:3429   .bss:00000003 DHDRcount
     /tmp/cclu2MMA.s:3416   .data:000001cf EXPIRATION
                            *COM*:00000002 resync_times
     /tmp/cclu2MMA.s:3111   .text:000010a0 isa_init
     /tmp/cclu2MMA.s:3462   .progmem.data:00000027 __c.2862
     /tmp/cclu2MMA.s:3458   .progmem.data:00000000 __c.2864
                            *COM*:00000001 AFTER_FIRST_SYNC
                            *COM*:00000001 slowIndex
     /tmp/cclu2MMA.s:3309   .text:000011d0 isa_wait_until_rx_pkt
     /tmp/cclu2MMA.s:3358   .text:00001204 isa_rx_pkt_get
     /tmp/cclu2MMA.s:3423   .bss:00000001 tmp_count
     /tmp/cclu2MMA.s:3453   .bss:0000000b check
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000004 tx_slot_from_join
                            *COM*:00000001 DHDR
                            *COM*:00000002 last_slot
                            *COM*:00000002 last_sync_slot
                            *COM*:00000001 tmp_offsetSec
                            *COM*:00000002 tmp_offsetNanoSec

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
nrk_task_set_stk
nrk_activate_task
rf_set_rx
rf_polling_rx_on
_nrk_set_next_wakeup
_nrk_os_timer_set
_nrk_os_timer_get
rf_rx_check_sfd
_nrk_high_speed_timer_reset
rf_polling_rx_packet
rf_rx_off
nrk_led_toggle
__iob
fputc
_nrk_os_timer_stop
_nrk_os_timer_reset
nrk_high_speed_timer_wait
_nrk_os_timer_start
nrk_cur_task_TCB
getHighPriorityEntry
NRK_DEBUG_1
nrk_gpio_set
rf_tx_tdma_packet
nrk_gpio_clr
nrk_event_signal
printf
__divmodhi4
nrk_spin_wait_us
isaFreePacket
NRK_DEBUG_2
_nrk_high_speed_timer_get
addCandidate
printIsaError
isTransmitLinkPresent
dmo
dd_data_indication
enQueue
addNeighbor
setNewDisplay
addGraph
addLink
flushCandidateEntries
puts
nrk_signal_register
nrk_event_wait
rf_set_channel
nrk_wait_until_next_period
__udivmodhi4
findLink
isa_get_slots_until_next_wakeup
nrk_led_clr
isDiscoveryAlertDue
sendAdv
updateLastSentTime
nrk_wait_until_next_n_periods
nrk_led_set
nrk_signal_create
nrk_kprintf
nrk_kernel_error_add
_nrk_high_speed_timer_start
rf_init
dlmoInit
