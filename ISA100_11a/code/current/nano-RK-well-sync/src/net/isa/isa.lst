   1               		.file	"isa.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 150               	.global	config_child_list
 152               	config_child_list:
 153               		.stabd	46,0,0
   1:../../../src/net/isa/isa.c **** /******************************************************************************
   2:../../../src/net/isa/isa.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/net/isa/isa.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/net/isa/isa.c **** *  All rights reserved.
   5:../../../src/net/isa/isa.c **** *
   6:../../../src/net/isa/isa.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/net/isa/isa.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/net/isa/isa.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/net/isa/isa.c **** *
  10:../../../src/net/isa/isa.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/net/isa/isa.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/net/isa/isa.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/net/isa/isa.c **** *
  14:../../../src/net/isa/isa.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/net/isa/isa.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/net/isa/isa.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/net/isa/isa.c **** *  GNU General Public License for more details.
  18:../../../src/net/isa/isa.c **** *
  19:../../../src/net/isa/isa.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/net/isa/isa.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/net/isa/isa.c **** *
  22:../../../src/net/isa/isa.c **** *  Contributing Authors (specific to this file):
  23:../../../src/net/isa/isa.c **** *  Anthony Rowe
  24:../../../src/net/isa/isa.c **** *******************************************************************************/
  25:../../../src/net/isa/isa.c **** 
  26:../../../src/net/isa/isa.c **** //#include <rtl_debug.h>
  27:../../../src/net/isa/isa.c **** #include <include.h>
  28:../../../src/net/isa/isa.c **** #include <ulib.h>
  29:../../../src/net/isa/isa.c **** #include <avr/sleep.h>
  30:../../../src/net/isa/isa.c **** #include <avr/wdt.h>
  31:../../../src/net/isa/isa.c **** #include <avr/eeprom.h>
  32:../../../src/net/isa/isa.c **** #include <stdio.h>
  33:../../../src/net/isa/isa.c **** #include <avr/interrupt.h>
  34:../../../src/net/isa/isa.c **** #include <nrk.h>
  35:../../../src/net/isa/isa.c **** #include <nrk_events.h>
  36:../../../src/net/isa/isa.c **** #include <nrk_timer.h>
  37:../../../src/net/isa/isa.c **** #include <nrk_error.h>
  38:../../../src/net/isa/isa.c **** //#include <rtl_defs.h>
  39:../../../src/net/isa/isa.c **** #include <stdlib.h>
  40:../../../src/net/isa/isa.c **** #include <isa_scheduler.h>
  41:../../../src/net/isa/isa.c **** #include <isa.h>
  42:../../../src/net/isa/isa.c **** #include <isa_defs.h>
  43:../../../src/net/isa/isa.c **** 
  44:../../../src/net/isa/isa.c **** 
  45:../../../src/net/isa/isa.c **** #define CHANNEL_HOPPING 
  46:../../../src/net/isa/isa.c **** //#define CORRECTION
  47:../../../src/net/isa/isa.c **** //#define INIT_SYNC
  48:../../../src/net/isa/isa.c **** #define LED_SLOT_DEBUG
  49:../../../src/net/isa/isa.c **** //#define HIGH_TIMER_DEBUG
  50:../../../src/net/isa/isa.c **** #define TX_RX_DEBUG
  51:../../../src/net/isa/isa.c **** #define ACK_DEBUG
  52:../../../src/net/isa/isa.c **** #define RX_DEBUG
  53:../../../src/net/isa/isa.c **** #define TX_DEBUG
  54:../../../src/net/isa/isa.c **** //#define JOIN_PROCESS
  55:../../../src/net/isa/isa.c **** 
  56:../../../src/net/isa/isa.c **** #ifdef JOIN_PROCESS
  57:../../../src/net/isa/isa.c ****  uint8_t join_pkt_buf[RF_MAX_PAYLOAD_SIZE];
  58:../../../src/net/isa/isa.c **** #endif
  59:../../../src/net/isa/isa.c **** 
  60:../../../src/net/isa/isa.c **** /* slot related declaration */
  61:../../../src/net/isa/isa.c **** volatile uint16_t global_slot;
  62:../../../src/net/isa/isa.c **** volatile uint16_t current_global_slot;
  63:../../../src/net/isa/isa.c **** volatile uint16_t global_cycle;
  64:../../../src/net/isa/isa.c **** uint16_t last_sync_slot;
  65:../../../src/net/isa/isa.c **** 
  66:../../../src/net/isa/isa.c **** /* channel hopping related declaration */
  67:../../../src/net/isa/isa.c **** uint8_t slottedPattern[16];
  68:../../../src/net/isa/isa.c **** uint8_t slowPattern[3];
  69:../../../src/net/isa/isa.c **** uint8_t currentChannel;
  70:../../../src/net/isa/isa.c **** uint8_t channelIndex;
  71:../../../src/net/isa/isa.c **** uint8_t slowIndex;
  72:../../../src/net/isa/isa.c **** 
  73:../../../src/net/isa/isa.c **** /*used for calculating offset*/
  74:../../../src/net/isa/isa.c **** uint16_t slot_start_time;
  75:../../../src/net/isa/isa.c **** uint16_t tx_start_time; // actual transmission starting time
  76:../../../src/net/isa/isa.c **** uint16_t rx_start_time; 
  77:../../../src/net/isa/isa.c **** uint16_t offsetY;
  78:../../../src/net/isa/isa.c **** uint16_t offsetX;
  79:../../../src/net/isa/isa.c **** 
  80:../../../src/net/isa/isa.c **** /* SYNC related declaration */
  81:../../../src/net/isa/isa.c **** uint8_t _isa_sync_ok;
  82:../../../src/net/isa/isa.c **** uint8_t AFTER_FIRST_SYNC;
  83:../../../src/net/isa/isa.c **** uint16_t EXPIRATION = 200;// each slot lasts for 10ms, so 100 slots last for 1s
  84:../../../src/net/isa/isa.c **** uint16_t slot_expired;
  85:../../../src/net/isa/isa.c **** uint8_t previous_tx_slot;
  86:../../../src/net/isa/isa.c **** 
  87:../../../src/net/isa/isa.c **** /* signal related declaration */
  88:../../../src/net/isa/isa.c **** int8_t isa_tx_done_signal;
  89:../../../src/net/isa/isa.c **** int8_t isa_rx_pkt_signal;
  90:../../../src/net/isa/isa.c **** 
  91:../../../src/net/isa/isa.c **** /* header type */
  92:../../../src/net/isa/isa.c **** uint8_t DHDR;  // Data link layer header sub-header, currently used as ACK control
  93:../../../src/net/isa/isa.c **** //uint8_t DMXHR[4]; //Data link layer media access control extension sub header, mainly used for se
  94:../../../src/net/isa/isa.c **** uint8_t DAUX[29]; //Data link layer auxiliary sub-header, currently used for join process
  95:../../../src/net/isa/isa.c **** //uint8_t DROUT[3]; //Routing sub-header, compressed variant
  96:../../../src/net/isa/isa.c **** //uint8_t DADDR[5]; //Addressing sub-header
  97:../../../src/net/isa/isa.c **** uint8_t DHR;   // ACK's data link layer header
  98:../../../src/net/isa/isa.c **** 
  99:../../../src/net/isa/isa.c **** /* Test variable */
 100:../../../src/net/isa/isa.c **** uint8_t tmp_curSec;
 101:../../../src/net/isa/isa.c **** uint8_t tmp_offsetSec;
 102:../../../src/net/isa/isa.c **** int16_t tmp_offsetNanoSec;
 103:../../../src/net/isa/isa.c **** uint16_t tmp_count=0;
 104:../../../src/net/isa/isa.c **** uint16_t DHDRcount = 0;
 105:../../../src/net/isa/isa.c **** uint16_t txCount = 0;		//Holds the number of packets transmitted successfully
 106:../../../src/net/isa/isa.c **** uint16_t rxCount = 0;		// Holds the number of packets received successfully
 107:../../../src/net/isa/isa.c **** uint16_t packetsLost = 0; //Holds packets lost (receive  + ACK )
 108:../../../src/net/isa/isa.c **** 
 109:../../../src/net/isa/isa.c **** 
 110:../../../src/net/isa/isa.c **** void config_child_list (uint8_t node_id)
 111:../../../src/net/isa/isa.c **** {
 155               	.LM0:
 156               	.LFBB1:
 157               	/* prologue: frame size=0 */
 158               	/* prologue end (size=0) */
 112:../../../src/net/isa/isa.c ****     child_list |= ((uint32_t) 1) << node_id;
 160               	.LM1:
 161 0000 21E0      		ldi r18,lo8(1)
 162 0002 30E0      		ldi r19,hi8(1)
 163 0004 40E0      		ldi r20,hlo8(1)
 164 0006 50E0      		ldi r21,hhi8(1)
 165 0008 00C0      		rjmp 2f
 166 000a 220F      	1:	lsl r18
 167 000c 331F      		rol r19
 168 000e 441F      		rol r20
 169 0010 551F      		rol r21
 170 0012 8A95      	2:	dec r24
 171 0014 02F4      		brpl 1b
 172 0016 8091 0000 		lds r24,child_list
 173 001a 9091 0000 		lds r25,(child_list)+1
 174 001e A091 0000 		lds r26,(child_list)+2
 175 0022 B091 0000 		lds r27,(child_list)+3
 176 0026 822B      		or r24,r18
 177 0028 932B      		or r25,r19
 178 002a A42B      		or r26,r20
 179 002c B52B      		or r27,r21
 180 002e 8093 0000 		sts child_list,r24
 181 0032 9093 0000 		sts (child_list)+1,r25
 182 0036 A093 0000 		sts (child_list)+2,r26
 183 003a B093 0000 		sts (child_list)+3,r27
 184               	/* epilogue: frame size=0 */
 185 003e 0895      		ret
 186               	/* epilogue end (size=1) */
 187               	/* function config_child_list size 33 (32) */
 189               	.Lscope1:
 191               		.stabd	78,0,0
 193               	.global	isa_get_channel
 195               	isa_get_channel:
 196               		.stabd	46,0,0
 113:../../../src/net/isa/isa.c **** }
 114:../../../src/net/isa/isa.c **** 
 115:../../../src/net/isa/isa.c **** /**
 116:../../../src/net/isa/isa.c ****  * isa_set_channel()
 117:../../../src/net/isa/isa.c ****  *
 118:../../../src/net/isa/isa.c ****  * This function set channel and is used for channel hopping.
 119:../../../src/net/isa/isa.c ****  *
 120:../../../src/net/isa/isa.c ****  */
 121:../../../src/net/isa/isa.c **** void isa_set_channel (uint8_t chan)
 122:../../../src/net/isa/isa.c **** {
 123:../../../src/net/isa/isa.c ****     isa_param.channel = chan;
 124:../../../src/net/isa/isa.c ****     rf_set_channel (chan);
 125:../../../src/net/isa/isa.c **** }
 126:../../../src/net/isa/isa.c **** 
 127:../../../src/net/isa/isa.c **** uint8_t isa_get_channel()
 128:../../../src/net/isa/isa.c **** {
 198               	.LM2:
 199               	.LFBB2:
 200               	/* prologue: frame size=0 */
 201               	/* prologue end (size=0) */
 202 0040 8091 0000 		lds r24,isa_param+2
 129:../../../src/net/isa/isa.c ****     return isa_param.channel;
 130:../../../src/net/isa/isa.c **** }
 204               	.LM3:
 205 0044 9927      		clr r25
 206               	/* epilogue: frame size=0 */
 207 0046 0895      		ret
 208               	/* epilogue end (size=1) */
 209               	/* function isa_get_channel size 4 (3) */
 211               	.Lscope2:
 213               		.stabd	78,0,0
 216               	.global	isa_set_channel_pattern
 218               	isa_set_channel_pattern:
 219               		.stabd	46,0,0
 131:../../../src/net/isa/isa.c **** 
 132:../../../src/net/isa/isa.c **** void isa_set_channel_pattern(uint8_t pattern)
 133:../../../src/net/isa/isa.c **** {
 221               	.LM4:
 222               	.LFBB3:
 223               	/* prologue: frame size=0 */
 224               	/* prologue end (size=0) */
 134:../../../src/net/isa/isa.c ****     switch (pattern)
 226               	.LM5:
 227 0048 8130      		cpi r24,lo8(1)
 228 004a 01F0      		breq .L7
 230               	.LM6:
 231 004c 8330      		cpi r24,lo8(3)
 232 004e 01F4      		brne .L9
 233 0050 00C0      		rjmp .L8
 234               	.L7:
 135:../../../src/net/isa/isa.c ****     {
 136:../../../src/net/isa/isa.c **** 	case 1:
 137:../../../src/net/isa/isa.c **** 	    slottedPattern[0] = 19;
 236               	.LM7:
 237 0052 83E1      		ldi r24,lo8(19)
 238 0054 8093 0000 		sts slottedPattern,r24
 138:../../../src/net/isa/isa.c **** 	    slottedPattern[1] = 12;
 240               	.LM8:
 241 0058 8CE0      		ldi r24,lo8(12)
 242 005a 8093 0000 		sts slottedPattern+1,r24
 139:../../../src/net/isa/isa.c **** 	    slottedPattern[2] = 20;
 244               	.LM9:
 245 005e 84E1      		ldi r24,lo8(20)
 246 0060 8093 0000 		sts slottedPattern+2,r24
 140:../../../src/net/isa/isa.c **** 	    slottedPattern[3] = 24;
 248               	.LM10:
 249 0064 88E1      		ldi r24,lo8(24)
 250 0066 8093 0000 		sts slottedPattern+3,r24
 141:../../../src/net/isa/isa.c **** 	    slottedPattern[4] = 16;
 252               	.LM11:
 253 006a 80E1      		ldi r24,lo8(16)
 254 006c 8093 0000 		sts slottedPattern+4,r24
 142:../../../src/net/isa/isa.c **** 	    slottedPattern[5] = 23;
 256               	.LM12:
 257 0070 87E1      		ldi r24,lo8(23)
 258 0072 8093 0000 		sts slottedPattern+5,r24
 143:../../../src/net/isa/isa.c **** 	    slottedPattern[6] = 18;
 260               	.LM13:
 261 0076 82E1      		ldi r24,lo8(18)
 262 0078 8093 0000 		sts slottedPattern+6,r24
 144:../../../src/net/isa/isa.c **** 	    slottedPattern[7] = 25;
 264               	.LM14:
 265 007c 89E1      		ldi r24,lo8(25)
 266 007e 8093 0000 		sts slottedPattern+7,r24
 145:../../../src/net/isa/isa.c **** 	    slottedPattern[8] = 14;
 268               	.LM15:
 269 0082 8EE0      		ldi r24,lo8(14)
 270 0084 8093 0000 		sts slottedPattern+8,r24
 146:../../../src/net/isa/isa.c **** 	    slottedPattern[9] = 21;
 272               	.LM16:
 273 0088 85E1      		ldi r24,lo8(21)
 274 008a 8093 0000 		sts slottedPattern+9,r24
 147:../../../src/net/isa/isa.c **** 	    slottedPattern[10] = 11;
 276               	.LM17:
 277 008e 8BE0      		ldi r24,lo8(11)
 278 0090 8093 0000 		sts slottedPattern+10,r24
 148:../../../src/net/isa/isa.c **** 	    slottedPattern[11] = 15;
 280               	.LM18:
 281 0094 8FE0      		ldi r24,lo8(15)
 282 0096 8093 0000 		sts slottedPattern+11,r24
 149:../../../src/net/isa/isa.c **** 	    slottedPattern[12] = 22;
 284               	.LM19:
 285 009a 86E1      		ldi r24,lo8(22)
 286 009c 8093 0000 		sts slottedPattern+12,r24
 150:../../../src/net/isa/isa.c **** 	    slottedPattern[13] = 17;
 288               	.LM20:
 289 00a0 81E1      		ldi r24,lo8(17)
 290 00a2 8093 0000 		sts slottedPattern+13,r24
 151:../../../src/net/isa/isa.c **** 	    slottedPattern[14] = 13;
 292               	.LM21:
 293 00a6 8DE0      		ldi r24,lo8(13)
 294 00a8 8093 0000 		sts slottedPattern+14,r24
 152:../../../src/net/isa/isa.c **** 	    slottedPattern[15] = 26;
 296               	.LM22:
 297 00ac 8AE1      		ldi r24,lo8(26)
 298 00ae 8093 0000 		sts slottedPattern+15,r24
 299 00b2 0895      		ret
 300               	.L8:
 153:../../../src/net/isa/isa.c **** 	    break;
 154:../../../src/net/isa/isa.c **** 	case 3:
 155:../../../src/net/isa/isa.c **** 	    slowPattern[0]=15;
 302               	.LM23:
 303 00b4 8FE0      		ldi r24,lo8(15)
 304 00b6 8093 0000 		sts slowPattern,r24
 156:../../../src/net/isa/isa.c **** 	    slowPattern[1]=20;
 306               	.LM24:
 307 00ba 84E1      		ldi r24,lo8(20)
 308 00bc 8093 0000 		sts slowPattern+1,r24
 157:../../../src/net/isa/isa.c **** 	    slowPattern[2]=25;
 310               	.LM25:
 311 00c0 89E1      		ldi r24,lo8(25)
 312 00c2 8093 0000 		sts slowPattern+2,r24
 313               	.L9:
 314 00c6 0895      		ret
 315               	/* epilogue: frame size=0 */
 316               	/* epilogue: noreturn */
 317               	/* epilogue end (size=0) */
 318               	/* function isa_set_channel_pattern size 64 (64) */
 320               	.Lscope3:
 322               		.stabd	78,0,0
 324               	.global	isa_ready
 326               	isa_ready:
 327               		.stabd	46,0,0
 158:../../../src/net/isa/isa.c **** 	    break;
 159:../../../src/net/isa/isa.c **** 	default:
 160:../../../src/net/isa/isa.c **** 	    break;
 161:../../../src/net/isa/isa.c ****     }
 162:../../../src/net/isa/isa.c **** }
 163:../../../src/net/isa/isa.c **** 
 164:../../../src/net/isa/isa.c **** int8_t isa_ready()
 165:../../../src/net/isa/isa.c **** {
 329               	.LM26:
 330               	.LFBB4:
 331               	/* prologue: frame size=0 */
 332               	/* prologue end (size=0) */
 166:../../../src/net/isa/isa.c ****     if (_isa_ready ==  1)
 334               	.LM27:
 335 00c8 8091 0000 		lds r24,_isa_ready
 336 00cc 8130      		cpi r24,lo8(1)
 337 00ce 01F4      		brne .L11
 339               	.LM28:
 340 00d0 81E0      		ldi r24,lo8(1)
 341 00d2 90E0      		ldi r25,hi8(1)
 342 00d4 0895      		ret
 343               	.L11:
 344 00d6 8FEF      		ldi r24,lo8(-1)
 345 00d8 9FEF      		ldi r25,hi8(-1)
 167:../../../src/net/isa/isa.c ****         return NRK_OK;
 168:../../../src/net/isa/isa.c ****     else
 169:../../../src/net/isa/isa.c ****         return NRK_ERROR;
 170:../../../src/net/isa/isa.c **** }
 347               	.LM29:
 348 00da 0895      		ret
 349               	/* epilogue: frame size=0 */
 350               	/* epilogue: noreturn */
 351               	/* epilogue end (size=0) */
 352               	/* function isa_ready size 10 (10) */
 354               	.Lscope4:
 356               		.stabd	78,0,0
 360               	.global	isa_rx_pkt_set_buffer
 362               	isa_rx_pkt_set_buffer:
 363               		.stabd	46,0,0
 171:../../../src/net/isa/isa.c **** 
 172:../../../src/net/isa/isa.c **** int8_t isa_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
 173:../../../src/net/isa/isa.c **** {
 365               	.LM30:
 366               	.LFBB5:
 367               	/* prologue: frame size=0 */
 368               	/* prologue end (size=0) */
 174:../../../src/net/isa/isa.c **** 
 175:../../../src/net/isa/isa.c ****     if(size==0 || buf==NULL) return NRK_ERROR;
 370               	.LM31:
 371 00dc 6623      		tst r22
 372 00de 01F0      		breq .L16
 374               	.LM32:
 375 00e0 0097      		sbiw r24,0
 376 00e2 01F0      		breq .L16
 176:../../../src/net/isa/isa.c ****     isa_rfRxInfo.pPayload = buf;
 378               	.LM33:
 379 00e4 9093 0000 		sts (isa_rfRxInfo+5)+1,r25
 380 00e8 8093 0000 		sts isa_rfRxInfo+5,r24
 177:../../../src/net/isa/isa.c ****     isa_rfRxInfo.max_length = size;
 382               	.LM34:
 383 00ec 6093 0000 		sts isa_rfRxInfo+4,r22
 384 00f0 81E0      		ldi r24,lo8(1)
 385 00f2 90E0      		ldi r25,hi8(1)
 386 00f4 0895      		ret
 387               	.L16:
 178:../../../src/net/isa/isa.c **** 
 179:../../../src/net/isa/isa.c **** return NRK_OK;
 389               	.LM35:
 390 00f6 8FEF      		ldi r24,lo8(-1)
 391 00f8 9FEF      		ldi r25,hi8(-1)
 180:../../../src/net/isa/isa.c **** }
 393               	.LM36:
 394 00fa 0895      		ret
 395               	/* epilogue: frame size=0 */
 396               	/* epilogue: noreturn */
 397               	/* epilogue end (size=0) */
 398               	/* function isa_rx_pkt_set_buffer size 16 (16) */
 400               	.Lscope5:
 402               		.stabd	78,0,0
 404               	.global	isa_start
 406               	isa_start:
 407               		.stabd	46,0,0
 181:../../../src/net/isa/isa.c **** 
 182:../../../src/net/isa/isa.c **** int8_t isa_wait_until_rx_pkt()
 183:../../../src/net/isa/isa.c **** {
 184:../../../src/net/isa/isa.c ****     nrk_signal_register(isa_rx_pkt_signal);
 185:../../../src/net/isa/isa.c ****     if (isa_rx_pkt_check() != 0)
 186:../../../src/net/isa/isa.c ****         return NRK_OK;
 187:../../../src/net/isa/isa.c ****     nrk_event_wait (SIG(isa_rx_pkt_signal));
 188:../../../src/net/isa/isa.c ****     return NRK_OK;
 189:../../../src/net/isa/isa.c **** }
 190:../../../src/net/isa/isa.c **** 
 191:../../../src/net/isa/isa.c **** int8_t isa_wait_until_rx_or_tx ()
 192:../../../src/net/isa/isa.c **** {
 193:../../../src/net/isa/isa.c ****     nrk_signal_register(isa_rx_pkt_signal);
 194:../../../src/net/isa/isa.c ****     nrk_signal_register(isa_tx_done_signal);
 195:../../../src/net/isa/isa.c ****     nrk_event_wait (SIG(isa_rx_pkt_signal) | SIG(isa_tx_done_signal));
 196:../../../src/net/isa/isa.c ****     return NRK_OK;
 197:../../../src/net/isa/isa.c **** }
 198:../../../src/net/isa/isa.c **** 
 199:../../../src/net/isa/isa.c **** /**
 200:../../../src/net/isa/isa.c ****  * isa_init()
 201:../../../src/net/isa/isa.c ****  *
 202:../../../src/net/isa/isa.c ****  * This function sets up the low level link layer parameters.
 203:../../../src/net/isa/isa.c ****  * This starts the main timer routine that will then automatically
 204:../../../src/net/isa/isa.c ****  * trigger whenever a packet might be sent or received.
 205:../../../src/net/isa/isa.c ****  * This should be called before ANY scheduling information is set
 206:../../../src/net/isa/isa.c ****  * since it will clear some default values.
 207:../../../src/net/isa/isa.c ****  *
 208:../../../src/net/isa/isa.c ****  */
 209:../../../src/net/isa/isa.c **** uint8_t isa_init (isa_node_mode_t mode, uint8_t id, uint8_t src_id)
 210:../../../src/net/isa/isa.c **** {
 211:../../../src/net/isa/isa.c ****     uint8_t i;
 212:../../../src/net/isa/isa.c **** 
 213:../../../src/net/isa/isa.c ****     /* Generate signals */
 214:../../../src/net/isa/isa.c ****     isa_rx_pkt_signal=nrk_signal_create();
 215:../../../src/net/isa/isa.c ****     if(isa_rx_pkt_signal==NRK_ERROR){
 216:../../../src/net/isa/isa.c **** 	nrk_kprintf(PSTR("ISA ERROR: creating rx signal failed\r\n"));
 217:../../../src/net/isa/isa.c **** 	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
 218:../../../src/net/isa/isa.c **** 	return NRK_ERROR;
 219:../../../src/net/isa/isa.c ****     }
 220:../../../src/net/isa/isa.c ****     isa_tx_done_signal=nrk_signal_create();
 221:../../../src/net/isa/isa.c ****     if(isa_tx_done_signal==NRK_ERROR){
 222:../../../src/net/isa/isa.c **** 	nrk_kprintf(PSTR("ISA ERROR: creating tx signal failed\r\n"));
 223:../../../src/net/isa/isa.c **** 	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
 224:../../../src/net/isa/isa.c **** 	return NRK_ERROR;
 225:../../../src/net/isa/isa.c ****     }
 226:../../../src/net/isa/isa.c **** 
 227:../../../src/net/isa/isa.c ****     // No buffer to start with
 228:../../../src/net/isa/isa.c ****     isa_rfRxInfo.pPayload = NULL;
 229:../../../src/net/isa/isa.c ****     isa_rfRxInfo.max_length = 0;
 230:../../../src/net/isa/isa.c **** 
 231:../../../src/net/isa/isa.c ****     /*FIXME Actually we dont need to always run the high speed timer */
 232:../../../src/net/isa/isa.c ****     _nrk_high_speed_timer_start();  
 233:../../../src/net/isa/isa.c **** 
 234:../../../src/net/isa/isa.c ****     /* clear everything out */
 235:../../../src/net/isa/isa.c ****     global_cycle = 0;
 236:../../../src/net/isa/isa.c ****     global_slot = MAX_ISA_GLOBAL_SLOTS;
 237:../../../src/net/isa/isa.c ****     _isa_sync_ok = 0;
 238:../../../src/net/isa/isa.c ****     _isa_join_ok = 0;
 239:../../../src/net/isa/isa.c ****     slot_expired = 0;
 240:../../../src/net/isa/isa.c ****     isa_node_mode = mode;
 241:../../../src/net/isa/isa.c ****     isa_id = id;//change
 242:../../../src/net/isa/isa.c ****     isa_clk_src_id=src_id; //change
 243:../../../src/net/isa/isa.c ****     isa_rx_data_ready = 0;
 244:../../../src/net/isa/isa.c ****     isa_tx_data_ready = 0;
 245:../../../src/net/isa/isa.c **** 
 246:../../../src/net/isa/isa.c **** 
 247:../../../src/net/isa/isa.c ****     isa_param.mobile_sync_timeout = 100;
 248:../../../src/net/isa/isa.c ****     isa_param.rx_timeout = 8000;   // 8000 *.125us = 1ms
 249:../../../src/net/isa/isa.c ****     isa_param.tx_guard_time = TX_GUARD_TIME;
 250:../../../src/net/isa/isa.c ****     isa_param.channel = 15;
 251:../../../src/net/isa/isa.c ****     isa_param.mac_addr = 0x1981;
 252:../../../src/net/isa/isa.c **** 
 253:../../../src/net/isa/isa.c **** for (i = 0; i < ISA_SLOTS_PER_FRAME; i++) {
 254:../../../src/net/isa/isa.c ****         isa_sched[i] = 0;
 255:../../../src/net/isa/isa.c ****     }
 256:../../../src/net/isa/isa.c ****     isa_tdma_rx_mask = 0;
 257:../../../src/net/isa/isa.c ****     isa_tdma_tx_mask = 0;
 258:../../../src/net/isa/isa.c **** 
 259:../../../src/net/isa/isa.c ****     /* Setup the cc2420 chip */
 260:../../../src/net/isa/isa.c ****     rf_init (&isa_rfRxInfo, isa_param.channel, 0x2421, isa_param.mac_addr);
 261:../../../src/net/isa/isa.c **** 
 262:../../../src/net/isa/isa.c ****     AFTER_FIRST_SYNC = 1;
 263:../../../src/net/isa/isa.c **** 
 264:../../../src/net/isa/isa.c ****     /* Setup fisrt hopping channel */
 265:../../../src/net/isa/isa.c ****     #ifdef CHANNEL_HOPPING
 266:../../../src/net/isa/isa.c **** 	slowIndex=0; 
 267:../../../src/net/isa/isa.c **** 	if(id!=0){
 268:../../../src/net/isa/isa.c **** 	    channelIndex = src_id;
 269:../../../src/net/isa/isa.c **** 	    currentChannel = slottedPattern[channelIndex];   
 270:../../../src/net/isa/isa.c **** 	}else{
 271:../../../src/net/isa/isa.c **** 	    channelIndex = 0;
 272:../../../src/net/isa/isa.c **** 	    currentChannel = slottedPattern[channelIndex];
 273:../../../src/net/isa/isa.c **** 	}
 274:../../../src/net/isa/isa.c **** 	isa_set_channel(currentChannel);
 275:../../../src/net/isa/isa.c ****     #endif
 276:../../../src/net/isa/isa.c **** 
 277:../../../src/net/isa/isa.c ****     #ifdef JOIN_PROCESS
 278:../../../src/net/isa/isa.c **** 	if(mode==ISA_GATEWAY){
 279:../../../src/net/isa/isa.c **** 	   for(i=22;i<=24;i++){
 280:../../../src/net/isa/isa.c **** 		isa_tx_info[i].pPayload = join_pkt_buf;
 281:../../../src/net/isa/isa.c ****     		isa_tx_info[i].length = PKT_DATA_START+1;    // pass le pointer
 282:../../../src/net/isa/isa.c ****     		isa_tx_info[i].DHDR = configDHDR();
 283:../../../src/net/isa/isa.c ****     		isa_tx_data_ready |= ((uint32_t) 1 << i);        // set the flag
 284:../../../src/net/isa/isa.c **** 	   }
 285:../../../src/net/isa/isa.c ****         }
 286:../../../src/net/isa/isa.c ****     #endif
 287:../../../src/net/isa/isa.c **** 
 288:../../../src/net/isa/isa.c ****     resync_times=0;
 289:../../../src/net/isa/isa.c **** 
 290:../../../src/net/isa/isa.c ****     return NRK_OK;
 291:../../../src/net/isa/isa.c **** }
 292:../../../src/net/isa/isa.c **** 
 293:../../../src/net/isa/isa.c **** void isa_start ()
 294:../../../src/net/isa/isa.c **** {
 409               	.LM37:
 410               	.LFBB6:
 411               	/* prologue: frame size=0 */
 412               	/* prologue end (size=0) */
 295:../../../src/net/isa/isa.c ****     //_isa_clear_sched_cache ();
 296:../../../src/net/isa/isa.c ****     _isa_ready = 2;
 414               	.LM38:
 415 00fc 82E0      		ldi r24,lo8(2)
 416 00fe 8093 0000 		sts _isa_ready,r24
 417               	/* epilogue: frame size=0 */
 418 0102 0895      		ret
 419               	/* epilogue end (size=1) */
 420               	/* function isa_start size 4 (3) */
 422               	.Lscope6:
 424               		.stabd	78,0,0
 427               	.global	configDHDR
 429               	configDHDR:
 430               		.stabd	46,0,0
 297:../../../src/net/isa/isa.c **** }
 298:../../../src/net/isa/isa.c **** 
 299:../../../src/net/isa/isa.c **** /**
 300:../../../src/net/isa/isa.c ****  * configDHDR()
 301:../../../src/net/isa/isa.c ****  *
 302:../../../src/net/isa/isa.c ****  * Gateway could config the DHDR by informing the nodes.
 303:../../../src/net/isa/isa.c ****  * DHDR contains control information that should be loaded
 304:../../../src/net/isa/isa.c ****  * into the PDU header.
 305:../../../src/net/isa/isa.c ****  *
 306:../../../src/net/isa/isa.c ****  */
 307:../../../src/net/isa/isa.c **** int8_t configDHDR(uint8_t slot)
 308:../../../src/net/isa/isa.c **** {
 432               	.LM39:
 433               	.LFBB7:
 434               	/* prologue: frame size=0 */
 435               	/* prologue end (size=0) */
 436 0104 282F      		mov r18,r24
 309:../../../src/net/isa/isa.c ****     int8_t DHDR = 1;
 310:../../../src/net/isa/isa.c ****     if (slot !=5)DHDRcount++;
 438               	.LM40:
 439 0106 8530      		cpi r24,lo8(5)
 440 0108 01F0      		breq .L24
 442               	.LM41:
 443 010a 8091 0000 		lds r24,DHDRcount
 444 010e 9091 0000 		lds r25,(DHDRcount)+1
 445 0112 0196      		adiw r24,1
 446 0114 9093 0000 		sts (DHDRcount)+1,r25
 447 0118 8093 0000 		sts DHDRcount,r24
 448               	.L24:
 311:../../../src/net/isa/isa.c ****     if(1){//request ACK
 312:../../../src/net/isa/isa.c **** 	DHDR |= 1<<7;
 313:../../../src/net/isa/isa.c ****     }
 314:../../../src/net/isa/isa.c ****     if(1){//request signal quality in ACK
 315:../../../src/net/isa/isa.c **** 	DHDR |= 1<<6;
 316:../../../src/net/isa/isa.c ****     }
 317:../../../src/net/isa/isa.c ****     if(1){//request EUI
 318:../../../src/net/isa/isa.c **** 	DHDR |= 1<<5;
 319:../../../src/net/isa/isa.c ****     }
 320:../../../src/net/isa/isa.c ****     if(0){//include DAUX
 321:../../../src/net/isa/isa.c **** 	DHDR |= 1<<4;
 322:../../../src/net/isa/isa.c ****     }
 323:../../../src/net/isa/isa.c ****     if(0){//include slow hopping offset
 324:../../../src/net/isa/isa.c **** 	DHDR |= 1<<3;
 325:../../../src/net/isa/isa.c ****     }
 326:../../../src/net/isa/isa.c ****     if((isa_node_mode == ISA_RECIPIENT || isa_node_mode == ISA_REPEATER) &&  (DHDRcount % 200==0) &
 450               	.LM42:
 451 011c 8091 0000 		lds r24,isa_node_mode
 452 0120 8230      		cpi r24,lo8(2)
 453 0122 00F4      		brsh .L26
 454 0124 8091 0000 		lds r24,DHDRcount
 455 0128 9091 0000 		lds r25,(DHDRcount)+1
 456 012c 68EC      		ldi r22,lo8(200)
 457 012e 70E0      		ldi r23,hi8(200)
 458 0130 0E94 0000 		call __udivmodhi4
 459 0134 892B      		or r24,r25
 460 0136 01F4      		brne .L26
 461 0138 2530      		cpi r18,lo8(5)
 462 013a 01F0      		breq .L26
 463 013c 85EE      		ldi r24,lo8(-27)
 464 013e 00C0      		rjmp .L30
 465               	.L26:
 466 0140 81EE      		ldi r24,lo8(-31)
 467               	.L30:
 327:../../../src/net/isa/isa.c **** 	DHDR |= 1<<2;
 328:../../../src/net/isa/isa.c **** 
 329:../../../src/net/isa/isa.c ****     }
 330:../../../src/net/isa/isa.c **** 
 331:../../../src/net/isa/isa.c **** 
 332:../../../src/net/isa/isa.c ****     return DHDR;
 333:../../../src/net/isa/isa.c **** }
 469               	.LM43:
 470 0142 9927      		clr r25
 471 0144 87FD      		sbrc r24,7
 472 0146 9095      		com r25
 473               	/* epilogue: frame size=0 */
 474 0148 0895      		ret
 475               	/* epilogue end (size=1) */
 476               	/* function configDHDR size 35 (34) */
 481               	.Lscope7:
 483               		.stabd	78,0,0
 486               	.global	configDHR
 488               	configDHR:
 489               		.stabd	46,0,0
 334:../../../src/net/isa/isa.c **** 
 335:../../../src/net/isa/isa.c **** /**
 336:../../../src/net/isa/isa.c ****  * configDHR()
 337:../../../src/net/isa/isa.c ****  *
 338:../../../src/net/isa/isa.c ****  * Gateway could config the DHR by informing the nodes.
 339:../../../src/net/isa/isa.c ****  * DHR contains control information that should be loaded
 340:../../../src/net/isa/isa.c ****  * into the ACK reply header.
 341:../../../src/net/isa/isa.c ****  *
 342:../../../src/net/isa/isa.c ****  */
 343:../../../src/net/isa/isa.c **** int8_t configDHR(uint8_t clockCorrection)
 344:../../../src/net/isa/isa.c **** {
 491               	.LM44:
 492               	.LFBB8:
 493               	/* prologue: frame size=0 */
 494               	/* prologue end (size=0) */
 345:../../../src/net/isa/isa.c ****     int8_t DHR = 3;
 346:../../../src/net/isa/isa.c ****     if(clockCorrection){//include clock correction change
 496               	.LM45:
 497 014a 8823      		tst r24
 498 014c 01F0      		breq .L33
 500               	.LM46:
 501 014e 83E8      		ldi r24,lo8(-125)
 502 0150 00C0      		rjmp .L35
 503               	.L33:
 504 0152 83E0      		ldi r24,lo8(3)
 505               	.L35:
 347:../../../src/net/isa/isa.c **** 	DHR |= 1<<7;
 348:../../../src/net/isa/isa.c ****     }
 349:../../../src/net/isa/isa.c ****     if(0){//including slow-hopping timeslot offset
 350:../../../src/net/isa/isa.c **** 	DHR |= 1<<6;
 351:../../../src/net/isa/isa.c ****     }
 352:../../../src/net/isa/isa.c ****     if(0){//request EUI
 353:../../../src/net/isa/isa.c **** 	DHR |= 1<<5;
 354:../../../src/net/isa/isa.c ****     }
 355:../../../src/net/isa/isa.c ****     if(0){//include DAUX
 356:../../../src/net/isa/isa.c **** 	DHR |= 1<<4;
 357:../../../src/net/isa/isa.c ****     }
 358:../../../src/net/isa/isa.c ****     if(0){//include slow hopping offset
 359:../../../src/net/isa/isa.c **** 	DHR |= 1<<3;
 360:../../../src/net/isa/isa.c ****     }
 361:../../../src/net/isa/isa.c ****    
 362:../../../src/net/isa/isa.c ****     return DHR;
 363:../../../src/net/isa/isa.c **** }
 507               	.LM47:
 508 0154 9927      		clr r25
 509 0156 87FD      		sbrc r24,7
 510 0158 9095      		com r25
 511               	/* epilogue: frame size=0 */
 512 015a 0895      		ret
 513               	/* epilogue end (size=1) */
 514               	/* function configDHR size 9 (8) */
 519               	.Lscope8:
 521               		.stabd	78,0,0
 534               	.global	configAdvDAUX
 536               	configAdvDAUX:
 537               		.stabd	46,0,0
 364:../../../src/net/isa/isa.c **** 
 365:../../../src/net/isa/isa.c **** /**
 366:../../../src/net/isa/isa.c ****  * configAdvDAUX()
 367:../../../src/net/isa/isa.c ****  *
 368:../../../src/net/isa/isa.c ****  * Gateway could config the DAUX 
 369:../../../src/net/isa/isa.c ****  * DAUX contains superframe and join information 
 370:../../../src/net/isa/isa.c ****  *
 371:../../../src/net/isa/isa.c ****  */
 372:../../../src/net/isa/isa.c **** void configAdvDAUX(uint8_t chPattern, uint8_t chIndex, uint8_t sp_period, uint8_t tx_slot1, uint8_t
 373:../../../src/net/isa/isa.c **** {	
 539               	.LM48:
 540               	.LFBB9:
 541               	/* prologue: frame size=0 */
 542 015c 8F92      		push r8
 543 015e AF92      		push r10
 544 0160 CF92      		push r12
 545 0162 EF92      		push r14
 546 0164 0F93      		push r16
 547 0166 CF93      		push r28
 548 0168 DF93      		push r29
 549 016a CDB7      		in r28,__SP_L__
 550 016c DEB7      		in r29,__SP_H__
 551               	/* prologue end (size=9) */
 374:../../../src/net/isa/isa.c ****     /*ADVERTISEMENT SELECTION*/
 375:../../../src/net/isa/isa.c ****     DAUX[0]=0; // Advertisement selection, 0 indicates advertisement DAUX
 553               	.LM49:
 554 016e 1092 0000 		sts DAUX,__zero_reg__
 376:../../../src/net/isa/isa.c ****     
 377:../../../src/net/isa/isa.c ****     /*TIME SYNCHRONIZATION*/
 378:../../../src/net/isa/isa.c ****     /* 1-6 bytes are reserved for time synchronization */ 
 379:../../../src/net/isa/isa.c ****   
 380:../../../src/net/isa/isa.c ****     /*SUPERFRAME INFORMATION*/
 381:../../../src/net/isa/isa.c ****     DAUX[7]=10; // timeslot duration, currently not used.
 556               	.LM50:
 557 0172 9AE0      		ldi r25,lo8(10)
 558 0174 9093 0000 		sts DAUX+7,r25
 382:../../../src/net/isa/isa.c ****     DAUX[8]=0; // reserved for long timeslot duration
 560               	.LM51:
 561 0178 1092 0000 		sts DAUX+8,__zero_reg__
 383:../../../src/net/isa/isa.c ****     DAUX[9]=chPattern; // channel pattern selection
 563               	.LM52:
 564 017c 8093 0000 		sts DAUX+9,r24
 384:../../../src/net/isa/isa.c ****     DAUX[10]=chIndex; // channel index selection
 566               	.LM53:
 567 0180 6093 0000 		sts DAUX+10,r22
 385:../../../src/net/isa/isa.c ****     DAUX[11]=sp_period; // superframe period
 569               	.LM54:
 570 0184 4093 0000 		sts DAUX+11,r20
 386:../../../src/net/isa/isa.c ****     DAUX[12]=0; // reserved for long period situation  
 572               	.LM55:
 573 0188 1092 0000 		sts DAUX+12,__zero_reg__
 387:../../../src/net/isa/isa.c ****     /* 13 reserved for superframe cycle starting point
 388:../../../src/net/isa/isa.c ****        14 reserved of the length of slow hopping period
 389:../../../src/net/isa/isa.c ****        15 and 16 reserved for channel hopping channel map for spectrum management
 390:../../../src/net/isa/isa.c ****     */
 391:../../../src/net/isa/isa.c **** 
 392:../../../src/net/isa/isa.c ****     /*JOIN INFORMATION*/
 393:../../../src/net/isa/isa.c ****     /* 17 reserved for Join backoff and timeout
 394:../../../src/net/isa/isa.c ****        18 reserved for Indicates fields that are transmitted
 395:../../../src/net/isa/isa.c ****     */
 396:../../../src/net/isa/isa.c ****     DAUX[19]=tx_slot1;  //TX slot 1
 575               	.LM56:
 576 018c 2093 0000 		sts DAUX+19,r18
 397:../../../src/net/isa/isa.c ****     DAUX[20]=tx_slot2;  //TX slot 2
 578               	.LM57:
 579 0190 0093 0000 		sts DAUX+20,r16
 398:../../../src/net/isa/isa.c ****     DAUX[21]=tx_slot3;  //TX slot 3
 581               	.LM58:
 582 0194 E092 0000 		sts DAUX+21,r14
 399:../../../src/net/isa/isa.c ****     DAUX[22]=tx_slot4;  //TX slot 4
 584               	.LM59:
 585 0198 C092 0000 		sts DAUX+22,r12
 400:../../../src/net/isa/isa.c ****     DAUX[23]=rx_slot1;  //RX slot 1
 587               	.LM60:
 588 019c A092 0000 		sts DAUX+23,r10
 401:../../../src/net/isa/isa.c ****     DAUX[24]=rx_slot2;  //RX slot 2
 590               	.LM61:
 591 01a0 8092 0000 		sts DAUX+24,r8
 402:../../../src/net/isa/isa.c ****     DAUX[25]=rx_slot3;  //RX slot 3
 593               	.LM62:
 594 01a4 8A85      		ldd r24,Y+10
 595 01a6 8093 0000 		sts DAUX+25,r24
 403:../../../src/net/isa/isa.c ****     DAUX[26]=rx_slot4;  //RX slot 4
 597               	.LM63:
 598 01aa 8B85      		ldd r24,Y+11
 599 01ac 8093 0000 		sts DAUX+26,r24
 600               	/* epilogue: frame size=0 */
 601 01b0 DF91      		pop r29
 602 01b2 CF91      		pop r28
 603 01b4 0F91      		pop r16
 604 01b6 EF90      		pop r14
 605 01b8 CF90      		pop r12
 606 01ba AF90      		pop r10
 607 01bc 8F90      		pop r8
 608 01be 0895      		ret
 609               	/* epilogue end (size=8) */
 610               	/* function configAdvDAUX size 50 (33) */
 614               	.Lscope9:
 616               		.stabd	78,0,0
 618               	.global	isa_rx_pkt_check
 620               	isa_rx_pkt_check:
 621               		.stabd	46,0,0
 404:../../../src/net/isa/isa.c **** 
 405:../../../src/net/isa/isa.c ****     /*INTEGRETY CHECK*/
 406:../../../src/net/isa/isa.c ****     /* 27 and 28 are reserved for Integrety check*/
 407:../../../src/net/isa/isa.c **** }
 408:../../../src/net/isa/isa.c **** 
 409:../../../src/net/isa/isa.c **** /**
 410:../../../src/net/isa/isa.c ****  * isa_check_rx_status()
 411:../../../src/net/isa/isa.c ****  *
 412:../../../src/net/isa/isa.c ****  * This function returns if there is a packet in the link layer
 413:../../../src/net/isa/isa.c ****  * rx buffer.  Once a packet has been received, it should be quickly
 414:../../../src/net/isa/isa.c ****  * processed or moved and then rtl_release_rx_packet() should be called. 
 415:../../../src/net/isa/isa.c ****  * rtl_release_rx_packet() then resets the value of rtl_check_rx_status()
 416:../../../src/net/isa/isa.c ****  *
 417:../../../src/net/isa/isa.c ****  * Returns: 1 if a new packet was received, 0 otherwise
 418:../../../src/net/isa/isa.c ****  */
 419:../../../src/net/isa/isa.c **** int8_t isa_rx_pkt_check()
 420:../../../src/net/isa/isa.c **** {
 623               	.LM64:
 624               	.LFBB10:
 625               	/* prologue: frame size=0 */
 626               	/* prologue end (size=0) */
 627 01c0 8091 0000 		lds r24,isa_rx_data_ready
 421:../../../src/net/isa/isa.c ****     return isa_rx_data_ready;
 422:../../../src/net/isa/isa.c **** }
 629               	.LM65:
 630 01c4 9927      		clr r25
 631 01c6 87FD      		sbrc r24,7
 632 01c8 9095      		com r25
 633               	/* epilogue: frame size=0 */
 634 01ca 0895      		ret
 635               	/* epilogue end (size=1) */
 636               	/* function isa_rx_pkt_check size 6 (5) */
 638               	.Lscope10:
 640               		.stabd	78,0,0
 642               	.global	isa_rx_pkt_release
 644               	isa_rx_pkt_release:
 645               		.stabd	46,0,0
 423:../../../src/net/isa/isa.c **** 
 424:../../../src/net/isa/isa.c **** /**
 425:../../../src/net/isa/isa.c ****  * isa_rx_pkt_get()
 426:../../../src/net/isa/isa.c ****  *
 427:../../../src/net/isa/isa.c ****  * This function returns the rx buffer point. It should be called
 428:../../../src/net/isa/isa.c ****  * once a packet is received and must be followed by isa_release_rx_packet().
 429:../../../src/net/isa/isa.c ****  * isa_release_rx_packet() then resets the value of isa_check_rx_status().
 430:../../../src/net/isa/isa.c ****  * 
 431:../../../src/net/isa/isa.c ****  * Returns: rx buffer point
 432:../../../src/net/isa/isa.c ****  */
 433:../../../src/net/isa/isa.c **** uint8_t* isa_rx_pkt_get (uint8_t *len, int8_t *rssi)
 434:../../../src/net/isa/isa.c **** {
 435:../../../src/net/isa/isa.c ****     if(isa_rx_pkt_check()==0){
 436:../../../src/net/isa/isa.c **** 	*len=0;
 437:../../../src/net/isa/isa.c **** 	*rssi=0;
 438:../../../src/net/isa/isa.c **** 	return NULL;
 439:../../../src/net/isa/isa.c ****     }
 440:../../../src/net/isa/isa.c ****     *len=isa_rfRxInfo.length;
 441:../../../src/net/isa/isa.c ****     *rssi=isa_rfRxInfo.rssi;
 442:../../../src/net/isa/isa.c **** 
 443:../../../src/net/isa/isa.c ****     return isa_rfRxInfo.pPayload;
 444:../../../src/net/isa/isa.c **** }
 445:../../../src/net/isa/isa.c **** 
 446:../../../src/net/isa/isa.c **** /**
 447:../../../src/net/isa/isa.c ****  * _isa_rx()
 448:../../../src/net/isa/isa.c ****  *
 449:../../../src/net/isa/isa.c ****  * This is the low level RX packet function.  It will read in
 450:../../../src/net/isa/isa.c ****  * a packet and buffer it in the link layer's single RX buffer.
 451:../../../src/net/isa/isa.c ****  * This buffer can be checked with rtl_check_rx_status() and 
 452:../../../src/net/isa/isa.c ****  * released with rtl_release_rx_packet().  If the buffer has not
 453:../../../src/net/isa/isa.c ****  * been released and a new packet arrives, the packet will be lost.
 454:../../../src/net/isa/isa.c ****  * This function is only called from the timer interrupt routine.
 455:../../../src/net/isa/isa.c ****  *
 456:../../../src/net/isa/isa.c ****  * Arguments: slot is the current slot that is actively in RX mode.
 457:../../../src/net/isa/isa.c ****  */
 458:../../../src/net/isa/isa.c **** 
 459:../../../src/net/isa/isa.c **** void _isa_rx (uint8_t slot)
 460:../../../src/net/isa/isa.c **** {
 461:../../../src/net/isa/isa.c **** //putchar('R');
 462:../../../src/net/isa/isa.c ****     uint8_t n;
 463:../../../src/net/isa/isa.c ****     uint32_t node_mask;
 464:../../../src/net/isa/isa.c ****     volatile uint8_t timeout;
 465:../../../src/net/isa/isa.c **** 
 466:../../../src/net/isa/isa.c ****     #ifdef LED_DEBUG
 467:../../../src/net/isa/isa.c **** 	nrk_led_set(1);
 468:../../../src/net/isa/isa.c ****     #endif
 469:../../../src/net/isa/isa.c ****     rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel 
 470:../../../src/net/isa/isa.c ****     rf_polling_rx_on ();
 471:../../../src/net/isa/isa.c ****     nrk_gpio_set(NRK_DEBUG_2);
 472:../../../src/net/isa/isa.c ****     // Timing for waiting for sfd
 473:../../../src/net/isa/isa.c ****     timeout = _nrk_os_timer_get();
 474:../../../src/net/isa/isa.c ****     timeout+=4;  // 4ms
 475:../../../src/net/isa/isa.c ****     n = 0;
 476:../../../src/net/isa/isa.c ****     //nrk_gpio_set(NRK_DEBUG_3);
 477:../../../src/net/isa/isa.c ****     while ((n = rf_rx_check_sfd()) == 0) {
 478:../../../src/net/isa/isa.c ****         if (_nrk_os_timer_get() > timeout) {
 479:../../../src/net/isa/isa.c **** 	    //spend too much time on waiting for a pkt's arrival
 480:../../../src/net/isa/isa.c ****         	nrk_gpio_clr(NRK_DEBUG_2);
 481:../../../src/net/isa/isa.c **** 
 482:../../../src/net/isa/isa.c **** 	    rf_rx_off ();
 483:../../../src/net/isa/isa.c **** 	    #ifdef LED_DEBUG
 484:../../../src/net/isa/isa.c **** 		nrk_led_clr(1);
 485:../../../src/net/isa/isa.c **** 	    #endif
 486:../../../src/net/isa/isa.c **** 	    #ifdef RX_DEBUG
 487:../../../src/net/isa/isa.c **** 		 nrk_gpio_set(NRK_DEBUG_2);
 488:../../../src/net/isa/isa.c **** 				 nrk_gpio_clr(NRK_DEBUG_2);
 489:../../../src/net/isa/isa.c **** 		putchar('v');
 490:../../../src/net/isa/isa.c **** 		printf("%d", slot);
 491:../../../src/net/isa/isa.c **** 		//printf("sfd times out.\n\r");
 492:../../../src/net/isa/isa.c **** 	    #endif
 493:../../../src/net/isa/isa.c **** 		packetsLost++;
 494:../../../src/net/isa/isa.c **** 		return;
 495:../../../src/net/isa/isa.c ****         }
 496:../../../src/net/isa/isa.c ****     }
 497:../../../src/net/isa/isa.c **** //printf("%d\n\r",_nrk_high_speed_timer_get());
 498:../../../src/net/isa/isa.c ****     // sfd received, start receiving packet and record start time
 499:../../../src/net/isa/isa.c ****     rx_start_time = _nrk_high_speed_timer_get();
 500:../../../src/net/isa/isa.c **** 
 501:../../../src/net/isa/isa.c ****     // Timing for waiting for finishing packet receiving
 502:../../../src/net/isa/isa.c ****     timeout = _nrk_os_timer_get(); 
 503:../../../src/net/isa/isa.c ****     timeout += 5;               // 5ms
 504:../../../src/net/isa/isa.c ****     if (n != 0) {
 505:../../../src/net/isa/isa.c ****         n = 0;
 506:../../../src/net/isa/isa.c ****        // printf("Packet on its way\n\r");
 507:../../../src/net/isa/isa.c ****         while ((n = rf_polling_rx_packet (false,128)) == 0) {
 508:../../../src/net/isa/isa.c **** 	    //printf("%d\n\r",_nrk_os_timer_get());
 509:../../../src/net/isa/isa.c ****             if (_nrk_os_timer_get () > timeout) {
 510:../../../src/net/isa/isa.c **** 		#ifdef RX_DEBUG
 511:../../../src/net/isa/isa.c **** 		    printf("packet is too long, times out.\n\r");
 512:../../../src/net/isa/isa.c **** 		#endif
 513:../../../src/net/isa/isa.c **** 		    packetsLost++;
 514:../../../src/net/isa/isa.c **** 		    // spend too much time on receiving pkt.
 515:../../../src/net/isa/isa.c ****                 return;          // huge timeout as fail safe
 516:../../../src/net/isa/isa.c ****             }
 517:../../../src/net/isa/isa.c ****         }
 518:../../../src/net/isa/isa.c ****     }
 519:../../../src/net/isa/isa.c ****     nrk_gpio_clr(NRK_DEBUG_2);
 520:../../../src/net/isa/isa.c ****    // printf("%d", currentChannel);
 521:../../../src/net/isa/isa.c ****     rf_rx_off ();
 522:../../../src/net/isa/isa.c **** 
 523:../../../src/net/isa/isa.c ****     if  (n !=1){	//size of packet must have been wrong
 524:../../../src/net/isa/isa.c **** 	putchar('b');
 525:../../../src/net/isa/isa.c **** 	printf("N:%d\r\n", n);
 526:../../../src/net/isa/isa.c **** 	packetsLost++;
 527:../../../src/net/isa/isa.c **** }
 528:../../../src/net/isa/isa.c **** 
 529:../../../src/net/isa/isa.c ****     if (n == 1) {// successfully received packet
 530:../../../src/net/isa/isa.c ****     	rxCount++;
 531:../../../src/net/isa/isa.c ****     	nrk_led_toggle(BLUE_LED);
 532:../../../src/net/isa/isa.c ****     	//putchar ('r');
 533:../../../src/net/isa/isa.c **** 	if (slot != 7) isa_rx_data_ready = 1;
 534:../../../src/net/isa/isa.c **** 	//potential problem: if repeater or recipient receives noise, the DHDR would be changed. And it is
 535:../../../src/net/isa/isa.c **** 	//if(isa_node_mode != ISA_GATEWAY)
 536:../../../src/net/isa/isa.c **** 	    DHDR = isa_rfRxInfo.pPayload[DHDR_INDEX];
 537:../../../src/net/isa/isa.c **** 	#ifdef RX_DEBUG
 538:../../../src/net/isa/isa.c **** 	   // printf("Repeater slot = %d, local slot is %d.\n\r", isa_rfRxInfo.pPayload[SLOT_INDEX],global
 539:../../../src/net/isa/isa.c **** 	#endif RX_DEBUG	
 540:../../../src/net/isa/isa.c **** 	nrk_event_signal(isa_rx_pkt_signal);	
 541:../../../src/net/isa/isa.c **** 
 542:../../../src/net/isa/isa.c **** 	node_mask = ((uint32_t) 1) << isa_rfRxInfo.pPayload[SRC_INDEX];
 543:../../../src/net/isa/isa.c **** 	
 544:../../../src/net/isa/isa.c **** 	if(DHDR & (1<<7)){
 545:../../../src/net/isa/isa.c **** 		txCount++;
 546:../../../src/net/isa/isa.c **** 	    // Transmit ACK packet
 547:../../../src/net/isa/isa.c **** 	    DHR = configDHR(DHDR & (1<<2));
 548:../../../src/net/isa/isa.c **** 	  //  printf("%d", DHR);
 549:../../../src/net/isa/isa.c **** 	    isa_ack_buf[DHR_INDEX]= DHR;
 550:../../../src/net/isa/isa.c **** 	    #ifdef ACK_DEBUG
 551:../../../src/net/isa/isa.c **** 		//printf("DHDR is %x.\n\r",DHDR);
 552:../../../src/net/isa/isa.c **** 	    #endif
 553:../../../src/net/isa/isa.c **** 	    isa_ack_tx.pPayload = isa_ack_buf;
 554:../../../src/net/isa/isa.c **** 	    if (DHDR & (1<<2)) { //reply ACK with time offsetX
 555:../../../src/net/isa/isa.c **** 	    	    	putchar ('K');
 556:../../../src/net/isa/isa.c **** 	    		offsetX = rx_start_time - slot_start_time;
 557:../../../src/net/isa/isa.c **** 	    		//printf("slot_start_time is %d,rx_start_time is %d.\n\r",slot_start_time,rx_start_time);
 558:../../../src/net/isa/isa.c **** 	    		uint8_t temp1,temp2;
 559:../../../src/net/isa/isa.c **** 	    		temp1 = (offsetX & 0xFF00)>>8;
 560:../../../src/net/isa/isa.c **** 	    		isa_ack_buf[OFFSET_HIGH]=temp1;
 561:../../../src/net/isa/isa.c **** 	    		temp2 = (offsetX & 0x00FF);
 562:../../../src/net/isa/isa.c **** 	     		isa_ack_buf[OFFSET_LOW]=temp2;
 563:../../../src/net/isa/isa.c **** 	    		#ifdef ACK_DEBUG
 564:../../../src/net/isa/isa.c **** 	    		  //  printf("offsetX is %d\n\r", offsetX);
 565:../../../src/net/isa/isa.c **** 	    		#endif
 566:../../../src/net/isa/isa.c **** 	    		//isa_ack_tx.length = PKT_DATA_START + 1;
 567:../../../src/net/isa/isa.c **** 	    		isa_ack_tx.length = 4;
 568:../../../src/net/isa/isa.c **** 	    	    }
 569:../../../src/net/isa/isa.c **** 
 570:../../../src/net/isa/isa.c **** 	    else
 571:../../../src/net/isa/isa.c **** 	    { // recipient , only reply explicit ACK
 572:../../../src/net/isa/isa.c **** 	        //isa_ack_tx.length = PKT_DATA_START-1;
 573:../../../src/net/isa/isa.c **** 		isa_ack_tx.length = 2;
 574:../../../src/net/isa/isa.c **** 		//putchar ('C');
 575:../../../src/net/isa/isa.c **** 		//putchar('\n');
 576:../../../src/net/isa/isa.c ****             }
 577:../../../src/net/isa/isa.c **** 	   nrk_gpio_set(NRK_DEBUG_2);
 578:../../../src/net/isa/isa.c **** 	    rf_tx_tdma_packet (&isa_ack_tx,slot_start_time,isa_param.tx_guard_time,&tx_start_time);	
 579:../../../src/net/isa/isa.c **** 	    nrk_gpio_clr(NRK_DEBUG_2);
 580:../../../src/net/isa/isa.c **** 	}	
 581:../../../src/net/isa/isa.c **** //nrk_gpio_clr(NRK_DEBUG_3);
 582:../../../src/net/isa/isa.c ****     }        
 583:../../../src/net/isa/isa.c ****     #ifdef LED_DEBUG
 584:../../../src/net/isa/isa.c **** 	nrk_led_clr (1);
 585:../../../src/net/isa/isa.c ****     #endif
 586:../../../src/net/isa/isa.c **** }
 587:../../../src/net/isa/isa.c **** 
 588:../../../src/net/isa/isa.c **** /**
 589:../../../src/net/isa/isa.c ****  * isa_release_rx_packet()
 590:../../../src/net/isa/isa.c ****  *
 591:../../../src/net/isa/isa.c ****  * This function releases the link layer's hold on the rx buffer.
 592:../../../src/net/isa/isa.c ****  * This must be called after a packet is received before a new
 593:../../../src/net/isa/isa.c ****  * packet can be buffered!  This should ideally be done by the
 594:../../../src/net/isa/isa.c ****  * network layer.
 595:../../../src/net/isa/isa.c ****  *
 596:../../../src/net/isa/isa.c ****  */
 597:../../../src/net/isa/isa.c **** 
 598:../../../src/net/isa/isa.c **** void isa_rx_pkt_release()
 599:../../../src/net/isa/isa.c **** {
 647               	.LM66:
 648               	.LFBB11:
 649               	/* prologue: frame size=0 */
 650               	/* prologue end (size=0) */
 600:../../../src/net/isa/isa.c ****     isa_rx_data_ready = 0;
 652               	.LM67:
 653 01cc 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 654 01d0 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 655 01d4 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 656 01d8 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 657               	/* epilogue: frame size=0 */
 658 01dc 0895      		ret
 659               	/* epilogue end (size=1) */
 660               	/* function isa_rx_pkt_release size 9 (8) */
 662               	.Lscope11:
 664               		.stabd	78,0,0
 670               	.global	isa_tx_pkt
 672               	isa_tx_pkt:
 673               		.stabd	46,0,0
 601:../../../src/net/isa/isa.c **** }
 602:../../../src/net/isa/isa.c **** 
 603:../../../src/net/isa/isa.c **** /**
 604:../../../src/net/isa/isa.c ****  * rtl_tx_packet()
 605:../../../src/net/isa/isa.c ****  *
 606:../../../src/net/isa/isa.c ****  * This function associates a slot with a particular packet that needs
 607:../../../src/net/isa/isa.c ****  * to be sent. 
 608:../../../src/net/isa/isa.c ****  * 
 609:../../../src/net/isa/isa.c ****  * Arguments: RF_TX_INFO *tx is a pointer to a transmit structure, this structure
 610:../../../src/net/isa/isa.c ****  *            must have a valid pPayload pointer to the real packet.
 611:../../../src/net/isa/isa.c ****  *            uint8_t slot is the value of the tx slot (starting from 0)
 612:../../../src/net/isa/isa.c ****  *
 613:../../../src/net/isa/isa.c ****  * Return:  currently always returns 1
 614:../../../src/net/isa/isa.c ****  */
 615:../../../src/net/isa/isa.c **** int8_t isa_tx_pkt (uint8_t *tx_buf, uint8_t len, uint8_t DHDR, uint8_t slot)
 616:../../../src/net/isa/isa.c **** {
 675               	.LM68:
 676               	.LFBB12:
 677               	/* prologue: frame size=0 */
 678               	/* prologue end (size=0) */
 617:../../../src/net/isa/isa.c ****     isa_tx_info[slot].pPayload = tx_buf; 
 680               	.LM69:
 681 01de 3327      		clr r19
 682 01e0 F901      		movw r30,r18
 683 01e2 EE0F      		lsl r30
 684 01e4 FF1F      		rol r31
 685 01e6 EE0F      		lsl r30
 686 01e8 FF1F      		rol r31
 687 01ea E050      		subi r30,lo8(-(isa_tx_info))
 688 01ec F040      		sbci r31,hi8(-(isa_tx_info))
 689 01ee 9383      		std Z+3,r25
 690 01f0 8283      		std Z+2,r24
 618:../../../src/net/isa/isa.c ****     isa_tx_info[slot].length = len;    // pass le pointer
 692               	.LM70:
 693 01f2 6083      		st Z,r22
 619:../../../src/net/isa/isa.c ****     isa_tx_info[slot].DHDR = DHDR;
 695               	.LM71:
 696 01f4 4183      		std Z+1,r20
 620:../../../src/net/isa/isa.c **** 
 621:../../../src/net/isa/isa.c ****     isa_tx_data_ready |= ((uint32_t) 1 << slot);        // set the flag
 698               	.LM72:
 699 01f6 41E0      		ldi r20,lo8(1)
 700 01f8 50E0      		ldi r21,hi8(1)
 701 01fa 60E0      		ldi r22,hlo8(1)
 702 01fc 70E0      		ldi r23,hhi8(1)
 703 01fe 00C0      		rjmp 2f
 704 0200 440F      	1:	lsl r20
 705 0202 551F      		rol r21
 706 0204 661F      		rol r22
 707 0206 771F      		rol r23
 708 0208 2A95      	2:	dec r18
 709 020a 02F4      		brpl 1b
 710 020c 8091 0000 		lds r24,isa_tx_data_ready
 711 0210 9091 0000 		lds r25,(isa_tx_data_ready)+1
 712 0214 A091 0000 		lds r26,(isa_tx_data_ready)+2
 713 0218 B091 0000 		lds r27,(isa_tx_data_ready)+3
 714 021c 842B      		or r24,r20
 715 021e 952B      		or r25,r21
 716 0220 A62B      		or r26,r22
 717 0222 B72B      		or r27,r23
 718 0224 8093 0000 		sts isa_tx_data_ready,r24
 719 0228 9093 0000 		sts (isa_tx_data_ready)+1,r25
 720 022c A093 0000 		sts (isa_tx_data_ready)+2,r26
 721 0230 B093 0000 		sts (isa_tx_data_ready)+3,r27
 622:../../../src/net/isa/isa.c ****     return 1;
 623:../../../src/net/isa/isa.c **** }
 723               	.LM73:
 724 0234 81E0      		ldi r24,lo8(1)
 725 0236 90E0      		ldi r25,hi8(1)
 726               	/* epilogue: frame size=0 */
 727 0238 0895      		ret
 728               	/* epilogue end (size=1) */
 729               	/* function isa_tx_pkt size 47 (46) */
 731               	.Lscope12:
 733               		.stabd	78,0,0
 736               	.global	isa_tx_pkt_check
 738               	isa_tx_pkt_check:
 739               		.stabd	46,0,0
 624:../../../src/net/isa/isa.c **** 
 625:../../../src/net/isa/isa.c **** /**
 626:../../../src/net/isa/isa.c ****  * isa_tx_pkt_check()
 627:../../../src/net/isa/isa.c ****  *
 628:../../../src/net/isa/isa.c ****  * This function allows an upper layer to check if a TX packet
 629:../../../src/net/isa/isa.c ****  * has been sent.  For instance, you would first send a packet 
 630:../../../src/net/isa/isa.c ****  * and then you could sleep or do more work, and eventually check
 631:../../../src/net/isa/isa.c ****  * done = isa_tx_pkt_check(8);
 632:../../../src/net/isa/isa.c ****  * to see if the packet had been sent by the interrupt routine.
 633:../../../src/net/isa/isa.c ****  *
 634:../../../src/net/isa/isa.c ****  * Returns: 1 if the packet was sent, 0 otherwise
 635:../../../src/net/isa/isa.c ****  */
 636:../../../src/net/isa/isa.c **** int8_t isa_tx_pkt_check(uint8_t slot)
 637:../../../src/net/isa/isa.c **** {
 741               	.LM74:
 742               	.LFBB13:
 743               	/* prologue: frame size=0 */
 744               	/* prologue end (size=0) */
 745 023a 2091 0000 		lds r18,isa_tx_data_ready
 746 023e 3091 0000 		lds r19,(isa_tx_data_ready)+1
 747 0242 4091 0000 		lds r20,(isa_tx_data_ready)+2
 748 0246 5091 0000 		lds r21,(isa_tx_data_ready)+3
 749 024a 00C0      		rjmp 2f
 750 024c 5695      	1:	lsr r21
 751 024e 4795      		ror r20
 752 0250 3795      		ror r19
 753 0252 2795      		ror r18
 754 0254 8A95      	2:	dec r24
 755 0256 02F4      		brpl 1b
 638:../../../src/net/isa/isa.c ****     if ((isa_tx_data_ready & ((uint32_t) 1 << slot)) != 0)
 639:../../../src/net/isa/isa.c ****         return 1;
 640:../../../src/net/isa/isa.c ****     return 0;
 641:../../../src/net/isa/isa.c **** }
 757               	.LM75:
 758 0258 C901      		movw r24,r18
 759 025a 8170      		andi r24,lo8(1)
 760 025c 9070      		andi r25,hi8(1)
 761               	/* epilogue: frame size=0 */
 762 025e 0895      		ret
 763               	/* epilogue end (size=1) */
 764               	/* function isa_tx_pkt_check size 20 (19) */
 766               	.Lscope13:
 768               		.stabd	78,0,0
 770               	.global	isa_join_ready
 772               	isa_join_ready:
 773               		.stabd	46,0,0
 642:../../../src/net/isa/isa.c **** 
 643:../../../src/net/isa/isa.c **** /**
 644:../../../src/net/isa/isa.c ****  * _isa_tx()
 645:../../../src/net/isa/isa.c ****  *
 646:../../../src/net/isa/isa.c ****  * This function is the low level TX function.
 647:../../../src/net/isa/isa.c ****  * It is only called from the timer interrupt and fetches any
 648:../../../src/net/isa/isa.c ****  * packets that were set for a particular slot by rtl_tx_packet().
 649:../../../src/net/isa/isa.c ****  *
 650:../../../src/net/isa/isa.c ****  * Arguments: slot is the active slot set by the interrupt timer.
 651:../../../src/net/isa/isa.c ****  */
 652:../../../src/net/isa/isa.c **** void _isa_tx (uint8_t slot)
 653:../../../src/net/isa/isa.c **** {
 654:../../../src/net/isa/isa.c **** 	uint8_t c;
 655:../../../src/net/isa/isa.c ****     uint8_t n;
 656:../../../src/net/isa/isa.c ****     uint8_t i;
 657:../../../src/net/isa/isa.c ****     int8_t tmp;
 658:../../../src/net/isa/isa.c ****     volatile uint8_t timeout;
 659:../../../src/net/isa/isa.c ****     uint8_t offsetSec, curSec;
 660:../../../src/net/isa/isa.c ****     uint16_t offsetNanoSec;
 661:../../../src/net/isa/isa.c ****     int16_t time_correction;
 662:../../../src/net/isa/isa.c ****     uint8_t tmp_nrk_prev_timer_val;
 663:../../../src/net/isa/isa.c ****     // load header
 664:../../../src/net/isa/isa.c ****     isa_rfTxInfo.cca = true;
 665:../../../src/net/isa/isa.c ****     isa_rfTxInfo.pPayload=isa_tx_info[slot].pPayload;
 666:../../../src/net/isa/isa.c ****     #ifdef TX_DEBUG
 667:../../../src/net/isa/isa.c **** 	//printf("TX Payload is: %s.\n\r", isa_rfTxInfo.pPayload);
 668:../../../src/net/isa/isa.c ****     #endif
 669:../../../src/net/isa/isa.c ****     isa_rfTxInfo.length=isa_tx_info[slot].length;
 670:../../../src/net/isa/isa.c **** 
 671:../../../src/net/isa/isa.c ****     isa_rfTxInfo.pPayload[DHDR_INDEX] = isa_tx_info[slot].DHDR;
 672:../../../src/net/isa/isa.c ****     isa_rfTxInfo.pPayload[SLOT_INDEX] = (global_slot & 0xFF); 
 673:../../../src/net/isa/isa.c ****     isa_rfTxInfo.pPayload[SRC_INDEX] = isa_id;//change
 674:../../../src/net/isa/isa.c **** 
 675:../../../src/net/isa/isa.c ****     #ifdef JOIN_PROCESS
 676:../../../src/net/isa/isa.c ****     if(slot>=22 && isa_node_mode == ISA_GATEWAY){
 677:../../../src/net/isa/isa.c **** 	for(i=0;i<29;i++){
 678:../../../src/net/isa/isa.c **** 	 isa_rfTxInfo.pPayload[DAUX_INDEX+i]=DAUX[i];
 679:../../../src/net/isa/isa.c **** 	 //printf("DAUX[%d]=%d\r\n",i,isa_rfTxInfo.pPayload[DAUX_INDEX+i]);
 680:../../../src/net/isa/isa.c ****         }
 681:../../../src/net/isa/isa.c ****     } 
 682:../../../src/net/isa/isa.c ****     #endif
 683:../../../src/net/isa/isa.c ****     // FIXME a small bug. should not happen and should be fixed in _isa_init_sync()
 684:../../../src/net/isa/isa.c ****     //if(AFTER_FIRST_SYNC == 1){    
 685:../../../src/net/isa/isa.c **** 	_nrk_high_speed_timer_reset();
 686:../../../src/net/isa/isa.c **** 	nrk_high_speed_timer_wait(0,WAIT_TIME_BEFORE_TX);
 687:../../../src/net/isa/isa.c **** 	//AFTER_FIRST_SYNC = 0;
 688:../../../src/net/isa/isa.c ****     //}
 689:../../../src/net/isa/isa.c **** 	    #ifdef TX_RX_DEBUG
 690:../../../src/net/isa/isa.c **** 		nrk_gpio_set(NRK_DEBUG_1);
 691:../../../src/net/isa/isa.c ****    		//printf("T\r\n");
 692:../../../src/net/isa/isa.c **** 	    #endif
 693:../../../src/net/isa/isa.c ****     if(rf_tx_tdma_packet (&isa_rfTxInfo,slot_start_time,isa_param.tx_guard_time,&tx_start_time))
 694:../../../src/net/isa/isa.c ****     {	txCount++;
 695:../../../src/net/isa/isa.c ****     	nrk_gpio_clr(NRK_DEBUG_1);
 696:../../../src/net/isa/isa.c ****     	nrk_led_toggle(RED_LED);
 697:../../../src/net/isa/isa.c ****     //	putchar ('t');
 698:../../../src/net/isa/isa.c ****     		//("rx_start_time is %d.\n\r",_nrk_high_speed_timer_get());
 699:../../../src/net/isa/isa.c **** 	offsetY = tx_start_time - slot_start_time;
 700:../../../src/net/isa/isa.c **** 	//printf("offset Y is %d.\n\r",offsetY);
 701:../../../src/net/isa/isa.c **** 	#ifdef HIGH_TIMER_DEBUG
 702:../../../src/net/isa/isa.c **** 	    //printf("In isa.c _isa_tx(): offsetY is %d, tx_start_time is %d\n\r",offsetY,tx_start_time);
 703:../../../src/net/isa/isa.c **** 	#endif
 704:../../../src/net/isa/isa.c ****     }
 705:../../../src/net/isa/isa.c ****     nrk_event_signal (isa_tx_done_signal);
 706:../../../src/net/isa/isa.c ****     isa_tx_data_ready &= ~((uint32_t) 1 << slot);       // clear the flag
 707:../../../src/net/isa/isa.c **** 
 708:../../../src/net/isa/isa.c ****     // ACK required
 709:../../../src/net/isa/isa.c ****     if(DHDR & (1<<7)) {  //&& isa_node_mode!=ISA_GATEWAY){ //Azriel
 710:../../../src/net/isa/isa.c ****     	//putchar('b');
 711:../../../src/net/isa/isa.c ****     	rf_polling_rx_on ();
 712:../../../src/net/isa/isa.c ****     	nrk_gpio_set(NRK_DEBUG_1);
 713:../../../src/net/isa/isa.c **** 	_nrk_high_speed_timer_reset();
 714:../../../src/net/isa/isa.c **** 	nrk_high_speed_timer_wait(0,CPU_PROCESS_TIME);
 715:../../../src/net/isa/isa.c **** //nrk_gpio_set(NRK_DEBUG_1);
 716:../../../src/net/isa/isa.c **** 	// Timing for waiting for receiving ACK
 717:../../../src/net/isa/isa.c **** 	timeout = _nrk_os_timer_get();
 718:../../../src/net/isa/isa.c **** 	timeout+=2;  // 2ms
 719:../../../src/net/isa/isa.c **** 	n = 0;
 720:../../../src/net/isa/isa.c **** 	while ((n = rf_rx_check_sfd()) == 0) {
 721:../../../src/net/isa/isa.c **** 	    if (_nrk_os_timer_get() > timeout) {
 722:../../../src/net/isa/isa.c **** 		tmp = slot - previous_tx_slot;
 723:../../../src/net/isa/isa.c **** 		if(slot == previous_tx_slot)
 724:../../../src/net/isa/isa.c **** 		    slot_expired += 25;
 725:../../../src/net/isa/isa.c **** 		else{
 726:../../../src/net/isa/isa.c **** 		    tmp = slot - previous_tx_slot;
 727:../../../src/net/isa/isa.c **** 		    if(tmp>0)
 728:../../../src/net/isa/isa.c **** 			slot_expired += tmp;
 729:../../../src/net/isa/isa.c **** 		    else
 730:../../../src/net/isa/isa.c **** 			slot_expired += 25+tmp;
 731:../../../src/net/isa/isa.c **** 		}
 732:../../../src/net/isa/isa.c **** 		//printf("%d,%d,%d,%d,%d\n\r",slot_expired,tmp_curSec,tmp_offsetSec,tmp_offsetNanoSec,++tmp_count
 733:../../../src/net/isa/isa.c **** 		//printf("%d,%d\n\r",slot_expired,isa_param.channel);
 734:../../../src/net/isa/isa.c **** 		//printf("%d,%d,%d\n\r",slot_expired,slot,previous_tx_slot);
 735:../../../src/net/isa/isa.c **** 	    //spend too much time on waiting for a pkt's arrival
 736:../../../src/net/isa/isa.c **** 		rf_rx_off ();
 737:../../../src/net/isa/isa.c **** 		nrk_gpio_clr(NRK_DEBUG_1);
 738:../../../src/net/isa/isa.c **** 		#ifdef LED_DEBUG
 739:../../../src/net/isa/isa.c **** 		    nrk_led_clr(1);
 740:../../../src/net/isa/isa.c **** 		#endif
 741:../../../src/net/isa/isa.c **** 		#ifdef RX_DEBUG
 742:../../../src/net/isa/isa.c **** 		 putchar('s');
 743:../../../src/net/isa/isa.c **** 		 printf("%d", slot);
 744:../../../src/net/isa/isa.c **** 
 745:../../../src/net/isa/isa.c **** 		 //   printf("sfd times out.\n\r");
 746:../../../src/net/isa/isa.c **** 		    #endif
 747:../../../src/net/isa/isa.c **** 		//nrk_gpio_clr(NRK_DEBUG_1);
 748:../../../src/net/isa/isa.c **** 		 packetsLost++;
 749:../../../src/net/isa/isa.c **** 		 return;
 750:../../../src/net/isa/isa.c **** 	    }
 751:../../../src/net/isa/isa.c **** 	}
 752:../../../src/net/isa/isa.c **** 	//nrk_gpio_clr(NRK_DEBUG_1);
 753:../../../src/net/isa/isa.c **** 	timeout = _nrk_os_timer_get(); 
 754:../../../src/net/isa/isa.c **** 	timeout += 2;               // 5ms
 755:../../../src/net/isa/isa.c **** 	if (n != 0) {
 756:../../../src/net/isa/isa.c **** 	    n = 0;
 757:../../../src/net/isa/isa.c **** 	    //printf("Packet on its way\n\r");
 758:../../../src/net/isa/isa.c **** 	    if (slot !=5 && DHDRcount%200==0 ) c = 4 ;
 759:../../../src/net/isa/isa.c **** 	    else c = 2;
 760:../../../src/net/isa/isa.c **** 	    if (isa_node_mode == ISA_GATEWAY) c=2;
 761:../../../src/net/isa/isa.c **** 	    while ((n = rf_polling_rx_packet (true, c)) == 0)		 {	//changed to 2 by Azriel for gateway
 762:../../../src/net/isa/isa.c **** 
 763:../../../src/net/isa/isa.c **** 		if (_nrk_os_timer_get () > timeout) {
 764:../../../src/net/isa/isa.c **** 		#ifdef RX_DEBUG
 765:../../../src/net/isa/isa.c **** 		    printf("packet is too long, times out.\n\r");
 766:../../../src/net/isa/isa.c **** 		#endif	
 767:../../../src/net/isa/isa.c **** 		    packetsLost++;
 768:../../../src/net/isa/isa.c **** 		    tmp_curSec = _nrk_os_timer_get();
 769:../../../src/net/isa/isa.c **** 		    // spend too much time on receiving pkt.
 770:../../../src/net/isa/isa.c ****                     return;          // huge timeout as fail safe
 771:../../../src/net/isa/isa.c **** 		}
 772:../../../src/net/isa/isa.c **** 
 773:../../../src/net/isa/isa.c **** 		//if(n==-6)		
 774:../../../src/net/isa/isa.c **** 		  //  printf("%d\n\r",_nrk_os_timer_get());	
 775:../../../src/net/isa/isa.c **** 	    }
 776:../../../src/net/isa/isa.c **** 	}
 777:../../../src/net/isa/isa.c **** 
 778:../../../src/net/isa/isa.c **** 	if  (n !=1){	//size of packet must have been wrong
 779:../../../src/net/isa/isa.c **** 		putchar('f');
 780:../../../src/net/isa/isa.c **** 		packetsLost++;
 781:../../../src/net/isa/isa.c **** 	}
 782:../../../src/net/isa/isa.c **** 	if (n==1)
 783:../../../src/net/isa/isa.c **** 	rf_rx_off ();
 784:../../../src/net/isa/isa.c **** 	nrk_gpio_clr(NRK_DEBUG_1);
 785:../../../src/net/isa/isa.c **** 	if (n == 1) {// successfully received ACK
 786:../../../src/net/isa/isa.c **** 	   rxCount++;
 787:../../../src/net/isa/isa.c **** 		slot_expired = 0;
 788:../../../src/net/isa/isa.c **** 	    //isa_rx_data_ready = 1;
 789:../../../src/net/isa/isa.c **** 	    DHR = isa_rfRxInfo.pPayload[DHR_INDEX];
 790:../../../src/net/isa/isa.c **** 	    #ifdef ACK_DEBUG
 791:../../../src/net/isa/isa.c **** 
 792:../../../src/net/isa/isa.c **** 	    #endif ACK_DEBUG
 793:../../../src/net/isa/isa.c **** 	    if((DHDR & (1<<7))) {  //  &&isa_node_mode!=ISA_GATEWAY){
 794:../../../src/net/isa/isa.c **** #ifdef TIME
 795:../../../src/net/isa/isa.c **** 		if(DHR & (1<<7)){
 796:../../../src/net/isa/isa.c **** 			offsetX = ((0x0000|isa_rfRxInfo.pPayload[OFFSET_HIGH])<<8)&0xff00 + 0x0000|isa_rfRxInfo.pPayload
 797:../../../src/net/isa/isa.c **** 		    #ifdef ACK_DEBUG
 798:../../../src/net/isa/isa.c **** 		//	printf("offset X is %d.\n\r", offsetX);
 799:../../../src/net/isa/isa.c **** 		//	printf("offset Y is %d.\n\r", offsetY);
 800:../../../src/net/isa/isa.c **** 		    nrk_led_toggle(ORANGE_LED);
 801:../../../src/net/isa/isa.c **** 		    putchar('a');
 802:../../../src/net/isa/isa.c **** 		    #endif ACK_DEBUG
 803:../../../src/net/isa/isa.c **** 
 804:../../../src/net/isa/isa.c **** //printf("%d,%d\n\r",offsetX,offsetY);
 805:../../../src/net/isa/isa.c **** 		    time_correction = offsetX - offsetY;
 806:../../../src/net/isa/isa.c **** 		    #ifdef HIGH_TIMER_DEBUG
 807:../../../src/net/isa/isa.c **** 			printf("time correction is %d.\n\r", time_correction);
 808:../../../src/net/isa/isa.c **** 		    #endif
 809:../../../src/net/isa/isa.c **** 		    printf("time correction is %d.\n\r", time_correction);
 810:../../../src/net/isa/isa.c **** 		    // SYNC as a by-product of communication.
 811:../../../src/net/isa/isa.c **** 		    //tmp_nrk_prev_timer_val = _nrk_prev_timer_val;
 812:../../../src/net/isa/isa.c **** //printf("%d\n\r",time_correction);
 813:../../../src/net/isa/isa.c **** //printf("%d\n\r",HIGH_TIMER_TICKES_PER_MILISEC-time_correction%HIGH_TIMER_TICKES_PER_MILISEC);
 814:../../../src/net/isa/isa.c **** 		    timeout=50;
 815:../../../src/net/isa/isa.c **** 		    curSec = _nrk_os_timer_get();
 816:../../../src/net/isa/isa.c **** 		    nrk_gpio_set(NRK_DEBUG_2);
 817:../../../src/net/isa/isa.c **** 		    if(time_correction >= 0&&curSec<7){
 818:../../../src/net/isa/isa.c **** 			tmp_curSec = curSec;
 819:../../../src/net/isa/isa.c **** 			/*do{
 820:../../../src/net/isa/isa.c **** 			    curSec = _nrk_os_timer_get();
 821:../../../src/net/isa/isa.c **** 			}while(curSec<=7);*/
 822:../../../src/net/isa/isa.c **** 			_nrk_os_timer_stop();
 823:../../../src/net/isa/isa.c **** 
 824:../../../src/net/isa/isa.c **** 			//_nrk_os_timer_reset();
 825:../../../src/net/isa/isa.c **** 
 826:../../../src/net/isa/isa.c **** 			//Basically speed up by offsetSec ticks of OS timer - offsetNanoSeconds
 827:../../../src/net/isa/isa.c **** 			offsetSec = time_correction/HIGH_TIMER_TICKES_PER_MILISEC+1; //This should be called offSetMilli
 828:../../../src/net/isa/isa.c **** 			tmp_offsetSec = offsetSec;
 829:../../../src/net/isa/isa.c **** 			offsetNanoSec = HIGH_TIMER_TICKES_PER_MILISEC-time_correction%HIGH_TIMER_TICKES_PER_MILISEC;	//T
 830:../../../src/net/isa/isa.c **** 			tmp_offsetNanoSec = offsetNanoSec;																//This is the high speed timer ticks that we s
 831:../../../src/net/isa/isa.c **** //printf("%d,%d\n\r",curSec,offsetSec);
 832:../../../src/net/isa/isa.c **** 			    //if(curSec+offsetSec>=10)
 833:../../../src/net/isa/isa.c **** 			    	//printf("%d,%d\n\r",curSec,offsetSec);
 834:../../../src/net/isa/isa.c **** 			/*if(curSec+offsetSec>=9){
 835:../../../src/net/isa/isa.c **** 			    _nrk_set_next_wakeup(curSec+offsetSec+2);
 836:../../../src/net/isa/isa.c **** 			    if(curSec+offsetSec>=10)
 837:../../../src/net/isa/isa.c **** 			    	printf("%d,%d\n\r",curSec,offsetSec);
 838:../../../src/net/isa/isa.c **** 			}
 839:../../../src/net/isa/isa.c **** 			else
 840:../../../src/net/isa/isa.c **** 			    _nrk_set_next_wakeup(10);*/
 841:../../../src/net/isa/isa.c **** 			_nrk_high_speed_timer_reset();
 842:../../../src/net/isa/isa.c **** 			nrk_spin_wait_us(50);
 843:../../../src/net/isa/isa.c **** 			//printf("%d,%d,%d\n\r",curSec,offsetSec,offsetNanoSec);
 844:../../../src/net/isa/isa.c **** 		//	nrk_gpio_set(NRK_DEBUG_2);
 845:../../../src/net/isa/isa.c **** 			do{}while(_nrk_high_speed_timer_get()<offsetNanoSec);	//Why not use high_speed_timer_wait here??
 846:../../../src/net/isa/isa.c **** 		//	nrk_gpio_clr(NRK_DEBUG_2);
 847:../../../src/net/isa/isa.c **** 			//nrk_high_speed_timer_wait(0,offsetNanoSec);
 848:../../../src/net/isa/isa.c **** 			//nrk_high_speed_timer_wait(0,4912);
 849:../../../src/net/isa/isa.c **** 
 850:../../../src/net/isa/isa.c **** 			_nrk_os_timer_set(curSec+offsetSec);
 851:../../../src/net/isa/isa.c **** 			nrk_spin_wait_us(100);
 852:../../../src/net/isa/isa.c **** 			#ifdef CORRECTION
 853:../../../src/net/isa/isa.c **** 			    nrk_gpio_set(NRK_DEBUG_1);
 854:../../../src/net/isa/isa.c **** 			    nrk_gpio_clr(NRK_DEBUG_1);
 855:../../../src/net/isa/isa.c **** 			#endif
 856:../../../src/net/isa/isa.c **** //printf("p\n\r");	
 857:../../../src/net/isa/isa.c **** 			_nrk_os_timer_start();
 858:../../../src/net/isa/isa.c **** 		    }else if(-time_correction>8000&&curSec<7){
 859:../../../src/net/isa/isa.c **** 		    	putchar('!');
 860:../../../src/net/isa/isa.c **** 			_nrk_os_timer_stop();
 861:../../../src/net/isa/isa.c **** 			//_nrk_os_timer_reset();
 862:../../../src/net/isa/isa.c **** 			_nrk_high_speed_timer_reset();
 863:../../../src/net/isa/isa.c **** 			do{
 864:../../../src/net/isa/isa.c **** 			    NOP();
 865:../../../src/net/isa/isa.c **** 			    NOP();
 866:../../../src/net/isa/isa.c **** 			    NOP();
 867:../../../src/net/isa/isa.c **** 			    NOP();
 868:../../../src/net/isa/isa.c **** 			}while(timeout--);
 869:../../../src/net/isa/isa.c **** 			//_nrk_set_next_wakeup(10);
 870:../../../src/net/isa/isa.c **** 			#ifdef CORRECTION
 871:../../../src/net/isa/isa.c **** 			nrk_gpio_set(NRK_DEBUG_2);
 872:../../../src/net/isa/isa.c **** 			//nrk_high_speed_timer_wait(0,22800); // for test
 873:../../../src/net/isa/isa.c **** 			nrk_gpio_clr(NRK_DEBUG_2);
 874:../../../src/net/isa/isa.c **** 			#endif
 875:../../../src/net/isa/isa.c **** 			//printf("%d\n\r",-time_correction);
 876:../../../src/net/isa/isa.c **** 			nrk_high_speed_timer_wait(0,-time_correction);
 877:../../../src/net/isa/isa.c **** 			_nrk_os_timer_set(curSec);
 878:../../../src/net/isa/isa.c **** 			timeout = 100;
 879:../../../src/net/isa/isa.c **** 			do{
 880:../../../src/net/isa/isa.c **** 			    NOP();
 881:../../../src/net/isa/isa.c **** 			    NOP();
 882:../../../src/net/isa/isa.c **** 			    NOP();
 883:../../../src/net/isa/isa.c **** 			    NOP();
 884:../../../src/net/isa/isa.c **** 			}while(timeout--);
 885:../../../src/net/isa/isa.c **** 			_nrk_os_timer_start();
 886:../../../src/net/isa/isa.c **** 		    }
 887:../../../src/net/isa/isa.c **** 		    //_nrk_prev_timer_val=tmp_nrk_prev_timer_val;
 888:../../../src/net/isa/isa.c **** //nrk_cur_task_TCB->next_wakeup = 10;
 889:../../../src/net/isa/isa.c **** 		    _nrk_high_speed_timer_reset();
 890:../../../src/net/isa/isa.c **** 		    nrk_spin_wait_us(50);
 891:../../../src/net/isa/isa.c **** 		    nrk_gpio_clr(NRK_DEBUG_2);
 892:../../../src/net/isa/isa.c **** 		}
 893:../../../src/net/isa/isa.c **** #endif
 894:../../../src/net/isa/isa.c **** 
 895:../../../src/net/isa/isa.c **** 	//	************************* Trying time correction
 896:../../../src/net/isa/isa.c **** 		if(DHR & (1<<7)){
 897:../../../src/net/isa/isa.c **** 					offsetX = ((0x0000|isa_rfRxInfo.pPayload[OFFSET_HIGH])<<8)&0xff00 + 0x0000|isa_rfRxInfo.pPaylo
 898:../../../src/net/isa/isa.c **** 				    #ifdef ACK_DEBUG
 899:../../../src/net/isa/isa.c **** 				    nrk_led_toggle(ORANGE_LED);
 900:../../../src/net/isa/isa.c **** 				    putchar('a');
 901:../../../src/net/isa/isa.c **** 				    #endif ACK_DEBUG
 902:../../../src/net/isa/isa.c **** 
 903:../../../src/net/isa/isa.c **** 
 904:../../../src/net/isa/isa.c **** 				    time_correction = offsetX - offsetY;
 905:../../../src/net/isa/isa.c **** 				    #ifdef HIGH_TIMER_DEBUG
 906:../../../src/net/isa/isa.c **** 					printf("time correction is %d.\n\r", time_correction);
 907:../../../src/net/isa/isa.c **** 				    #endif
 908:../../../src/net/isa/isa.c **** 
 909:../../../src/net/isa/isa.c **** 				    timeout=50;
 910:../../../src/net/isa/isa.c **** 				    curSec = _nrk_os_timer_get();
 911:../../../src/net/isa/isa.c **** 				    nrk_gpio_set(NRK_DEBUG_2);
 912:../../../src/net/isa/isa.c **** 				    if(time_correction >= 0){
 913:../../../src/net/isa/isa.c **** 					tmp_curSec = curSec;
 914:../../../src/net/isa/isa.c **** 
 915:../../../src/net/isa/isa.c **** 					_nrk_os_timer_stop();
 916:../../../src/net/isa/isa.c **** 
 917:../../../src/net/isa/isa.c **** 					offsetSec = time_correction/HIGH_TIMER_TICKES_PER_MILISEC+1; //This should be called offSetMil
 918:../../../src/net/isa/isa.c **** 					tmp_offsetSec = offsetSec;
 919:../../../src/net/isa/isa.c **** 					offsetNanoSec = HIGH_TIMER_TICKES_PER_MILISEC-time_correction%HIGH_TIMER_TICKES_PER_MILISEC;	/
 920:../../../src/net/isa/isa.c **** 					tmp_offsetNanoSec = offsetNanoSec;																//This is the high speed timer ticks that we
 921:../../../src/net/isa/isa.c **** 
 922:../../../src/net/isa/isa.c **** 					_nrk_high_speed_timer_reset();
 923:../../../src/net/isa/isa.c **** 					nrk_spin_wait_us(50);
 924:../../../src/net/isa/isa.c **** 
 925:../../../src/net/isa/isa.c **** 					nrk_high_speed_timer_wait(0,offsetNanoSec);
 926:../../../src/net/isa/isa.c **** 					//nrk_high_speed_timer_wait(0,4912);
 927:../../../src/net/isa/isa.c **** 
 928:../../../src/net/isa/isa.c **** 					_nrk_os_timer_set(curSec+offsetSec);
 929:../../../src/net/isa/isa.c **** 					nrk_spin_wait_us(100);
 930:../../../src/net/isa/isa.c **** 					#ifdef CORRECTION
 931:../../../src/net/isa/isa.c **** 					    nrk_gpio_set(NRK_DEBUG_1);
 932:../../../src/net/isa/isa.c **** 					    nrk_gpio_clr(NRK_DEBUG_1);
 933:../../../src/net/isa/isa.c **** 					#endif
 934:../../../src/net/isa/isa.c **** 		//printf("p\n\r");
 935:../../../src/net/isa/isa.c **** 					_nrk_os_timer_start();
 936:../../../src/net/isa/isa.c **** 
 937:../../../src/net/isa/isa.c **** 
 938:../../../src/net/isa/isa.c **** 				    }else if(time_correction<0){
 939:../../../src/net/isa/isa.c **** 				    	putchar('!');
 940:../../../src/net/isa/isa.c **** 					_nrk_os_timer_stop();
 941:../../../src/net/isa/isa.c **** 
 942:../../../src/net/isa/isa.c **** 					_nrk_high_speed_timer_reset();
 943:../../../src/net/isa/isa.c **** 
 944:../../../src/net/isa/isa.c **** 					//_nrk_set_next_wakeup(10);
 945:../../../src/net/isa/isa.c **** 					#ifdef CORRECTION
 946:../../../src/net/isa/isa.c **** 					nrk_gpio_set(NRK_DEBUG_2);
 947:../../../src/net/isa/isa.c **** 					//nrk_high_speed_timer_wait(0,22800); // for test
 948:../../../src/net/isa/isa.c **** 					nrk_gpio_clr(NRK_DEBUG_2);
 949:../../../src/net/isa/isa.c **** 					#endif
 950:../../../src/net/isa/isa.c **** 					//printf("%d\n\r",-time_correction);
 951:../../../src/net/isa/isa.c **** 					nrk_high_speed_timer_wait(0,-time_correction);
 952:../../../src/net/isa/isa.c **** 					_nrk_os_timer_set(curSec);
 953:../../../src/net/isa/isa.c **** 
 954:../../../src/net/isa/isa.c **** 					_nrk_os_timer_start();
 955:../../../src/net/isa/isa.c **** 				    }
 956:../../../src/net/isa/isa.c **** 				    //_nrk_prev_timer_val=tmp_nrk_prev_timer_val;
 957:../../../src/net/isa/isa.c **** 		//nrk_cur_task_TCB->next_wakeup = 10;
 958:../../../src/net/isa/isa.c **** 				    _nrk_high_speed_timer_reset();
 959:../../../src/net/isa/isa.c **** 				    nrk_spin_wait_us(50);
 960:../../../src/net/isa/isa.c **** 				    nrk_gpio_clr(NRK_DEBUG_2);
 961:../../../src/net/isa/isa.c **** 				}
 962:../../../src/net/isa/isa.c **** 
 963:../../../src/net/isa/isa.c **** 
 964:../../../src/net/isa/isa.c **** 		//****************************************************
 965:../../../src/net/isa/isa.c **** 
 966:../../../src/net/isa/isa.c **** 	    }		
 967:../../../src/net/isa/isa.c ****         }
 968:../../../src/net/isa/isa.c **** 
 969:../../../src/net/isa/isa.c ****     }//wait for ACK 
 970:../../../src/net/isa/isa.c **** }
 971:../../../src/net/isa/isa.c **** 
 972:../../../src/net/isa/isa.c **** 
 973:../../../src/net/isa/isa.c **** uint8_t _isa_join_process ()
 974:../../../src/net/isa/isa.c **** {
 975:../../../src/net/isa/isa.c ****     int8_t n;
 976:../../../src/net/isa/isa.c ****     uint16_t timeout;
 977:../../../src/net/isa/isa.c ****     uint16_t timer;
 978:../../../src/net/isa/isa.c ****     uint8_t tdma_start_tick;
 979:../../../src/net/isa/isa.c ****     uint8_t battery_save_cnt;
 980:../../../src/net/isa/isa.c ****     uint8_t last_nrk_tick;
 981:../../../src/net/isa/isa.c ****     uint8_t i;
 982:../../../src/net/isa/isa.c **** 
 983:../../../src/net/isa/isa.c ****     timer=0;
 984:../../../src/net/isa/isa.c ****     battery_save_cnt=0;
 985:../../../src/net/isa/isa.c **** 
 986:../../../src/net/isa/isa.c ****     while(1)
 987:../../../src/net/isa/isa.c ****     {
 988:../../../src/net/isa/isa.c **** 	
 989:../../../src/net/isa/isa.c **** 	rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel 
 990:../../../src/net/isa/isa.c **** 	rf_polling_rx_on ();
 991:../../../src/net/isa/isa.c **** 	n = 0;
 992:../../../src/net/isa/isa.c **** 	_isa_sync_ok = 0;
 993:../../../src/net/isa/isa.c **** 	last_nrk_tick=0;  // should be 0 going in
 994:../../../src/net/isa/isa.c **** 	//_nrk_prev_timer_val=250;
 995:../../../src/net/isa/isa.c **** 	//_nrk_set_next_wakeup(250);
 996:../../../src/net/isa/isa.c **** 	//_nrk_os_timer_set(0);
 997:../../../src/net/isa/isa.c **** 	//timeout=200;
 998:../../../src/net/isa/isa.c **** 	while ((n = rf_rx_check_sfd()) == 0) {
 999:../../../src/net/isa/isa.c **** 	    // every OS tick 
1000:../../../src/net/isa/isa.c **** 	    if(last_nrk_tick!=_nrk_os_timer_get()) {
1001:../../../src/net/isa/isa.c **** 		last_nrk_tick=_nrk_os_timer_get();
1002:../../../src/net/isa/isa.c **** 		timer++;
1003:../../../src/net/isa/isa.c **** 		if(timer>ISA_TOKEN_TIMEOUT){
1004:../../../src/net/isa/isa.c **** 		    timer=0;
1005:../../../src/net/isa/isa.c **** 		    break;
1006:../../../src/net/isa/isa.c **** 		}
1007:../../../src/net/isa/isa.c **** 	    }
1008:../../../src/net/isa/isa.c **** 	}
1009:../../../src/net/isa/isa.c **** 	//_nrk_high_speed_timer_reset();
1010:../../../src/net/isa/isa.c **** 
1011:../../../src/net/isa/isa.c **** 	tdma_start_tick=_nrk_os_timer_get();
1012:../../../src/net/isa/isa.c **** 	timeout = tdma_start_tick+4;
1013:../../../src/net/isa/isa.c **** 	// an interrupt could happen in here and mess things up
1014:../../../src/net/isa/isa.c **** 	if (n != 0) {
1015:../../../src/net/isa/isa.c **** 	    n = 0;
1016:../../../src/net/isa/isa.c **** 	// Packet on its way
1017:../../../src/net/isa/isa.c **** 	    while ((n = rf_polling_rx_packet (false,128)) == 0) {
1018:../../../src/net/isa/isa.c **** 		if (_nrk_os_timer_get () > timeout)
1019:../../../src/net/isa/isa.c **** 		{
1020:../../../src/net/isa/isa.c **** 		    //nrk_kprintf( PSTR("Pkt timed out\r\n") );
1021:../../../src/net/isa/isa.c **** 		    break;          // huge timeout as failsafe
1022:../../../src/net/isa/isa.c **** 		}
1023:../../../src/net/isa/isa.c **** 	    }
1024:../../../src/net/isa/isa.c **** 	}
1025:../../../src/net/isa/isa.c **** 	rf_rx_off (); 
1026:../../../src/net/isa/isa.c **** 	if (n == 1 /*&& isa_rfRxInfo.length>0*/) {
1027:../../../src/net/isa/isa.c **** 	   // if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id){//change
1028:../../../src/net/isa/isa.c **** 		// CRC and checksum passed
1029:../../../src/net/isa/isa.c **** 		if(isa_rfRxInfo.pPayload[DAUX_INDEX+7]==10){ // DAUX packet
1030:../../../src/net/isa/isa.c **** 			isa_rx_data_ready = 1;	
1031:../../../src/net/isa/isa.c **** 			//global_slot = (volatile)isa_rfRxInfo.pPayload[SLOT_INDEX];
1032:../../../src/net/isa/isa.c **** 
1033:../../../src/net/isa/isa.c **** 			isa_set_channel_pattern(isa_rfRxInfo.pPayload[DAUX_INDEX+9]); //set channel hopping pattern
1034:../../../src/net/isa/isa.c **** 			channelIndex=isa_rfRxInfo.pPayload[DAUX_INDEX+10];
1035:../../../src/net/isa/isa.c **** 			currentChannel = slottedPattern[channelIndex];
1036:../../../src/net/isa/isa.c **** 			isa_set_channel(currentChannel);
1037:../../../src/net/isa/isa.c **** 			for(i=0;i<4;i++){  // set tx slots
1038:../../../src/net/isa/isa.c **** 			    if(isa_rfRxInfo.pPayload[DAUX_INDEX+19+i]==0)
1039:../../../src/net/isa/isa.c **** 				break;
1040:../../../src/net/isa/isa.c **** 			    else{
1041:../../../src/net/isa/isa.c **** 				isa_tdma_tx_mask |= ((uint32_t) 1) << isa_rfRxInfo.pPayload[DAUX_INDEX+19+i];
1042:../../../src/net/isa/isa.c **** 				isa_sched[isa_rfRxInfo.pPayload[DAUX_INDEX+19+i]] = 1;
1043:../../../src/net/isa/isa.c **** 				tx_slot_from_join[i]=isa_rfRxInfo.pPayload[DAUX_INDEX+19+i];
1044:../../../src/net/isa/isa.c **** 			//	printf("TX:%d\r\n",tx_slot_from_join[i]);
1045:../../../src/net/isa/isa.c ****                             }
1046:../../../src/net/isa/isa.c **** 			}			
1047:../../../src/net/isa/isa.c **** 			
1048:../../../src/net/isa/isa.c **** 			for(i=0;i<4;i++){  // set rx slots
1049:../../../src/net/isa/isa.c **** 			    if(isa_rfRxInfo.pPayload[DAUX_INDEX+23+i]==0)
1050:../../../src/net/isa/isa.c **** 				break;
1051:../../../src/net/isa/isa.c **** 			    else{
1052:../../../src/net/isa/isa.c **** 				isa_tdma_rx_mask |= ((uint32_t) 1) << isa_rfRxInfo.pPayload[DAUX_INDEX+23+i];
1053:../../../src/net/isa/isa.c **** 				isa_sched[isa_rfRxInfo.pPayload[DAUX_INDEX+23+i]] = 1;
1054:../../../src/net/isa/isa.c **** 			    }
1055:../../../src/net/isa/isa.c **** 			}
1056:../../../src/net/isa/isa.c **** 			nrk_event_signal(SIG(isa_rx_pkt_signal));
1057:../../../src/net/isa/isa.c **** 		break;
1058:../../../src/net/isa/isa.c ****  		}
1059:../../../src/net/isa/isa.c **** 	   // }
1060:../../../src/net/isa/isa.c **** 	}
1061:../../../src/net/isa/isa.c ****     }
1062:../../../src/net/isa/isa.c **** 
1063:../../../src/net/isa/isa.c **** 
1064:../../../src/net/isa/isa.c **** 
1065:../../../src/net/isa/isa.c ****     _isa_join_ok=1;
1066:../../../src/net/isa/isa.c ****     isa_rx_pkt_release();
1067:../../../src/net/isa/isa.c ****     return _isa_join_ok;
1068:../../../src/net/isa/isa.c **** }
1069:../../../src/net/isa/isa.c **** 
1070:../../../src/net/isa/isa.c **** int8_t isa_join_ready()
1071:../../../src/net/isa/isa.c **** {
 775               	.LM76:
 776               	.LFBB14:
 777               	/* prologue: frame size=0 */
 778               	/* prologue end (size=0) */
1072:../../../src/net/isa/isa.c ****     if (_isa_join_ok ==  1)
 780               	.LM77:
 781 0260 8091 0000 		lds r24,_isa_join_ok
 782 0264 8130      		cpi r24,lo8(1)
 783 0266 01F4      		brne .L48
 785               	.LM78:
 786 0268 81E0      		ldi r24,lo8(1)
 787 026a 90E0      		ldi r25,hi8(1)
 788 026c 0895      		ret
 789               	.L48:
 790 026e 8FEF      		ldi r24,lo8(-1)
 791 0270 9FEF      		ldi r25,hi8(-1)
1073:../../../src/net/isa/isa.c ****         return NRK_OK;
1074:../../../src/net/isa/isa.c ****     else
1075:../../../src/net/isa/isa.c ****         return NRK_ERROR;
1076:../../../src/net/isa/isa.c **** }
 793               	.LM79:
 794 0272 0895      		ret
 795               	/* epilogue: frame size=0 */
 796               	/* epilogue: noreturn */
 797               	/* epilogue end (size=0) */
 798               	/* function isa_join_ready size 10 (10) */
 800               	.Lscope14:
 802               		.stabd	78,0,0
 804               	.global	isa_task_config
 806               	isa_task_config:
 807               		.stabd	46,0,0
1077:../../../src/net/isa/isa.c **** 
1078:../../../src/net/isa/isa.c **** 
1079:../../../src/net/isa/isa.c **** /** FIXME this is only a temporary function need to be more specified
1080:../../../src/net/isa/isa.c ****  * _isa_init_sync()
1081:../../../src/net/isa/isa.c ****  *
1082:../../../src/net/isa/isa.c ****  * This function is used for join process.
1083:../../../src/net/isa/isa.c ****  * A node that wants to join the network would keep listening first
1084:../../../src/net/isa/isa.c ****  * and set up first sync.
1085:../../../src/net/isa/isa.c ****  * 
1086:../../../src/net/isa/isa.c ****  * Return: _isa_sync_ok.
1087:../../../src/net/isa/isa.c ****  */
1088:../../../src/net/isa/isa.c **** uint8_t _isa_init_sync ()
1089:../../../src/net/isa/isa.c **** {
1090:../../../src/net/isa/isa.c ****     int8_t n;
1091:../../../src/net/isa/isa.c ****     uint16_t timeout;
1092:../../../src/net/isa/isa.c ****     uint16_t timer;
1093:../../../src/net/isa/isa.c ****     uint8_t tdma_start_tick;
1094:../../../src/net/isa/isa.c ****     uint8_t battery_save_cnt;
1095:../../../src/net/isa/isa.c ****     uint8_t last_nrk_tick;
1096:../../../src/net/isa/isa.c ****     uint8_t tmp_nrk_prev_timer_val;
1097:../../../src/net/isa/isa.c ****     //volatile uint16_t sfd_start_time;
1098:../../../src/net/isa/isa.c **** 
1099:../../../src/net/isa/isa.c **** 	//printf("%d,%d\n\r",isa_param.channel,global_slot);
1100:../../../src/net/isa/isa.c ****   //  DISABLE_GLOBAL_INT ();
1101:../../../src/net/isa/isa.c ****     timer=0;
1102:../../../src/net/isa/isa.c ****     battery_save_cnt=0;
1103:../../../src/net/isa/isa.c **** 
1104:../../../src/net/isa/isa.c **** 
1105:../../../src/net/isa/isa.c ****     while(1)
1106:../../../src/net/isa/isa.c ****     {
1107:../../../src/net/isa/isa.c **** 
1108:../../../src/net/isa/isa.c ****     	//printf("Init sync \r\n");
1109:../../../src/net/isa/isa.c **** 	isa_rfRxInfo.pPayload[DHDR_INDEX]=configDHDR(0);
1110:../../../src/net/isa/isa.c **** 	//isa_rfRxInfo.pPayload[SLOT_INDEX]=global_slot;
1111:../../../src/net/isa/isa.c **** 	
1112:../../../src/net/isa/isa.c **** 	#ifdef LED_DEBUG
1113:../../../src/net/isa/isa.c **** 	    nrk_led_set(1);
1114:../../../src/net/isa/isa.c **** 	#endif
1115:../../../src/net/isa/isa.c **** 	rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel 
1116:../../../src/net/isa/isa.c **** 	rf_polling_rx_on ();
1117:../../../src/net/isa/isa.c **** 	n = 0;
1118:../../../src/net/isa/isa.c **** 	_isa_sync_ok = 0;
1119:../../../src/net/isa/isa.c **** 	last_nrk_tick=0;  // should be 0 going in
1120:../../../src/net/isa/isa.c **** 	//_nrk_prev_timer_val=250;
1121:../../../src/net/isa/isa.c **** 	_nrk_set_next_wakeup(250);
1122:../../../src/net/isa/isa.c **** 	_nrk_os_timer_set(0);
1123:../../../src/net/isa/isa.c **** 	//timeout=200;
1124:../../../src/net/isa/isa.c **** 	while ((n = rf_rx_check_sfd()) == 0) {
1125:../../../src/net/isa/isa.c **** 
1126:../../../src/net/isa/isa.c **** 	    // every OS tick 
1127:../../../src/net/isa/isa.c **** 	    if(last_nrk_tick!=_nrk_os_timer_get()) {
1128:../../../src/net/isa/isa.c **** 		last_nrk_tick=_nrk_os_timer_get();
1129:../../../src/net/isa/isa.c **** 		timer++;
1130:../../../src/net/isa/isa.c **** 		if(timer>ISA_TOKEN_TIMEOUT){
1131:../../../src/net/isa/isa.c **** 		    timer=0;
1132:../../../src/net/isa/isa.c **** 		    break;
1133:../../../src/net/isa/isa.c **** 		}
1134:../../../src/net/isa/isa.c **** 	    }
1135:../../../src/net/isa/isa.c **** 	}
1136:../../../src/net/isa/isa.c **** 	//printf("3 \n");
1137:../../../src/net/isa/isa.c **** 	_nrk_high_speed_timer_reset();
1138:../../../src/net/isa/isa.c **** 	// capture SFD transition with high speed timer
1139:../../../src/net/isa/isa.c **** 	//sfd_start_time=_nrk_high_speed_timer_get();
1140:../../../src/net/isa/isa.c **** 	tdma_start_tick=_nrk_os_timer_get();
1141:../../../src/net/isa/isa.c **** 
1142:../../../src/net/isa/isa.c **** 	timeout = tdma_start_tick+4;
1143:../../../src/net/isa/isa.c **** 	// an interrupt could happen in here and mess things up
1144:../../../src/net/isa/isa.c **** 	if (n != 0) {
1145:../../../src/net/isa/isa.c **** 	    n = 0;
1146:../../../src/net/isa/isa.c **** 	// Packet on its way
1147:../../../src/net/isa/isa.c **** 	    while ((n = rf_polling_rx_packet (false,128)) == 0) {
1148:../../../src/net/isa/isa.c **** 	  //  	printf("4 \n");
1149:../../../src/net/isa/isa.c **** 		if (_nrk_os_timer_get () > timeout)
1150:../../../src/net/isa/isa.c **** 		{
1151:../../../src/net/isa/isa.c **** 		    //nrk_kprintf( PSTR("Pkt timed out\r\n") );
1152:../../../src/net/isa/isa.c **** 		    break;          // huge timeout as failsafe
1153:../../../src/net/isa/isa.c **** 		}
1154:../../../src/net/isa/isa.c **** 	    }
1155:../../../src/net/isa/isa.c **** 	}
1156:../../../src/net/isa/isa.c **** 	rf_rx_off (); 
1157:../../../src/net/isa/isa.c **** 	//printf("5 \n");
1158:../../../src/net/isa/isa.c **** 	if (n == 1 /*&& isa_rfRxInfo.length>0*/) {
1159:../../../src/net/isa/isa.c **** 	    if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id){//change
1160:../../../src/net/isa/isa.c **** 		// CRC and checksum passed
1161:../../../src/net/isa/isa.c **** 		isa_rx_data_ready = 1;
1162:../../../src/net/isa/isa.c **** 		//rtl_rx_slot = 0;
1163:../../../src/net/isa/isa.c **** 		//DHDR = (volatile)isa_rfRxInfo.pPayload[DHDR_INDEX];		
1164:../../../src/net/isa/isa.c **** 		global_slot += (volatile)isa_rfRxInfo.pPayload[SLOT_INDEX];
1165:../../../src/net/isa/isa.c **** 
1166:../../../src/net/isa/isa.c **** 		nrk_led_toggle(GREEN_LED);
1167:../../../src/net/isa/isa.c **** 		putchar ('i');
1168:../../../src/net/isa/isa.c **** 
1169:../../../src/net/isa/isa.c **** 	//	nrk_event_signal(SIG(isa_rx_pkt_signal));
1170:../../../src/net/isa/isa.c **** 		break;
1171:../../../src/net/isa/isa.c **** 		//
1172:../../../src/net/isa/isa.c **** 	    }
1173:../../../src/net/isa/isa.c **** 	}
1174:../../../src/net/isa/isa.c ****     }
1175:../../../src/net/isa/isa.c **** 
1176:../../../src/net/isa/isa.c **** 
1177:../../../src/net/isa/isa.c **** #ifdef LED_DEBUG
1178:../../../src/net/isa/isa.c ****     nrk_led_clr(1);
1179:../../../src/net/isa/isa.c **** #endif
1180:../../../src/net/isa/isa.c ****      //printf("os_timer=%d\r\n",_nrk_os_itimer_get());
1181:../../../src/net/isa/isa.c ****      #ifdef INIT_SYNC
1182:../../../src/net/isa/isa.c **** 	nrk_gpio_set(NRK_DEBUG_1);
1183:../../../src/net/isa/isa.c ****      #endif
1184:../../../src/net/isa/isa.c ****     _isa_sync_ok = 1;
1185:../../../src/net/isa/isa.c ****     isa_rx_pkt_release();
1186:../../../src/net/isa/isa.c ****     tmp_nrk_prev_timer_val=_nrk_prev_timer_val;
1187:../../../src/net/isa/isa.c ****     _nrk_os_timer_stop();
1188:../../../src/net/isa/isa.c ****     //_nrk_os_timer_reset();
1189:../../../src/net/isa/isa.c ****     _nrk_set_next_wakeup(10);
1190:../../../src/net/isa/isa.c ****     _nrk_os_timer_set(7);
1191:../../../src/net/isa/isa.c ****     nrk_high_speed_timer_wait(0,SFD_TO_NEXT_SLOT_TIME);
1192:../../../src/net/isa/isa.c ****     //_nrk_os_timer_reset();
1193:../../../src/net/isa/isa.c ****     _nrk_os_timer_start();
1194:../../../src/net/isa/isa.c ****     //_nrk_prev_timer_val=9;
1195:../../../src/net/isa/isa.c ****     //printf("%d\n\r", _nrk_os_timer_get());
1196:../../../src/net/isa/isa.c **** nrk_cur_task_TCB->next_wakeup = 10;
1197:../../../src/net/isa/isa.c ****     //printf("%d\n\r",_nrk_prev_timer_val);
1198:../../../src/net/isa/isa.c ****    // _nrk_high_speed_timer_reset();
1199:../../../src/net/isa/isa.c ****    // slot_start_time=_nrk_high_speed_timer_get();
1200:../../../src/net/isa/isa.c ****     #ifdef INIT_SYNC
1201:../../../src/net/isa/isa.c **** 	nrk_gpio_clr(NRK_DEBUG_1);
1202:../../../src/net/isa/isa.c ****      #endif
1203:../../../src/net/isa/isa.c **** 
1204:../../../src/net/isa/isa.c **** 	return _isa_sync_ok;
1205:../../../src/net/isa/isa.c **** 
1206:../../../src/net/isa/isa.c **** }
1207:../../../src/net/isa/isa.c **** 
1208:../../../src/net/isa/isa.c **** 
1209:../../../src/net/isa/isa.c **** void isa_nw_task ()
1210:../../../src/net/isa/isa.c **** {
1211:../../../src/net/isa/isa.c ****     uint8_t slot;
1212:../../../src/net/isa/isa.c ****     uint32_t slot_mask;
1213:../../../src/net/isa/isa.c ****     uint16_t next_slot_offset = 0; 
1214:../../../src/net/isa/isa.c ****     uint8_t FIRST = 1;
1215:../../../src/net/isa/isa.c ****     _isa_ready = 0;
1216:../../../src/net/isa/isa.c ****     
1217:../../../src/net/isa/isa.c ****     // wait for isa ready 
1218:../../../src/net/isa/isa.c ****     do {
1219:../../../src/net/isa/isa.c ****         nrk_wait_until_next_period ();
1220:../../../src/net/isa/isa.c ****     }while (_isa_ready == 0);
1221:../../../src/net/isa/isa.c **** 
1222:../../../src/net/isa/isa.c ****     _isa_ready = 1;
1223:../../../src/net/isa/isa.c ****     //nrk_gpio_clr(NRK_DEBUG_0);
1224:../../../src/net/isa/isa.c ****     //nrk_time_get (&last_slot_time);// dont know if it is useful
1225:../../../src/net/isa/isa.c ****     while (1) {
1226:../../../src/net/isa/isa.c ****     	//putchar('n');
1227:../../../src/net/isa/isa.c **** 	nrk_gpio_set(NRK_DEBUG_1);
1228:../../../src/net/isa/isa.c **** 	nrk_gpio_clr(NRK_DEBUG_1);
1229:../../../src/net/isa/isa.c **** 
1230:../../../src/net/isa/isa.c **** 	// reset high speed timer and then record the timer value used for calculating offsets
1231:../../../src/net/isa/isa.c **** 	_nrk_high_speed_timer_reset();
1232:../../../src/net/isa/isa.c ****         slot_start_time = _nrk_high_speed_timer_get();
1233:../../../src/net/isa/isa.c **** 	//nrk_time_get (&last_slot_time);// dont know if it is useful
1234:../../../src/net/isa/isa.c ****      //   last_slot = global_slot; //global_slot has been initialized to MAX_ISA_GLOBAL_SLOTS in is
1235:../../../src/net/isa/isa.c ****       //  if (last_slot > MAX_ISA_GLOBAL_SLOTS)
1236:../../../src/net/isa/isa.c ****         //    last_slot -= (MAX_ISA_GLOBAL_SLOTS+1);
1237:../../../src/net/isa/isa.c **** 
1238:../../../src/net/isa/isa.c **** 	current_global_slot = global_slot;
1239:../../../src/net/isa/isa.c **** 	/* global_slot should be wrapped */
1240:../../../src/net/isa/isa.c ****         if (global_slot > MAX_ISA_GLOBAL_SLOTS) {
1241:../../../src/net/isa/isa.c ****             global_slot -= MAX_ISA_GLOBAL_SLOTS;
1242:../../../src/net/isa/isa.c ****             global_cycle++;
1243:../../../src/net/isa/isa.c ****         }
1244:../../../src/net/isa/isa.c **** 
1245:../../../src/net/isa/isa.c **** 	slot = global_slot % ISA_SLOTS_PER_FRAME;
1246:../../../src/net/isa/isa.c ****         slot_mask = ((uint32_t) 1) << slot;
1247:../../../src/net/isa/isa.c **** 	if(_isa_sync_ok == 1){
1248:../../../src/net/isa/isa.c **** 	    #ifdef CHANNEL_HOPPING
1249:../../../src/net/isa/isa.c **** 		channelIndex += next_slot_offset;
1250:../../../src/net/isa/isa.c **** 		currentChannel = slottedPattern[(channelIndex)&0x0F];
1251:../../../src/net/isa/isa.c **** 		isa_set_channel(currentChannel);
1252:../../../src/net/isa/isa.c **** 
1253:../../../src/net/isa/isa.c **** 		/*
1254:../../../src/net/isa/isa.c **** 		if(slot>=22 && isa_node_mode == ISA_GATEWAY){
1255:../../../src/net/isa/isa.c **** 		   slowIndex = slowIndex % 3;
1256:../../../src/net/isa/isa.c **** 		   currentChannel = slowPattern[slowIndex];
1257:../../../src/net/isa/isa.c **** 		   isa_set_channel(currentChannel);
1258:../../../src/net/isa/isa.c **** 		   if(slot>=24)
1259:../../../src/net/isa/isa.c **** 		      slowIndex++;
1260:../../../src/net/isa/isa.c **** 		}
1261:../../../src/net/isa/isa.c **** 
1262:../../../src/net/isa/isa.c **** 		*/
1263:../../../src/net/isa/isa.c **** 	    //printf("CH:%d SL: %d\r\n",currentChannel,slot);
1264:../../../src/net/isa/isa.c **** 	    #endif
1265:../../../src/net/isa/isa.c **** 	    //printf("%d,%d\n\r",currentChannel,(channelIndex)&0x0F);
1266:../../../src/net/isa/isa.c **** 	    //printf("isa_rx_data_ready:%d\r\n",isa_rx_data_ready);
1267:../../../src/net/isa/isa.c **** 	    // if TX slot mask and tx ready, send a packet
1268:../../../src/net/isa/isa.c **** 	    #ifdef JOIN_PROCESS
1269:../../../src/net/isa/isa.c **** 		if(slot>=22 && isa_node_mode == ISA_GATEWAY)
1270:../../../src/net/isa/isa.c **** 		   isa_tx_data_ready |= ((uint32_t) 1 << slot);
1271:../../../src/net/isa/isa.c **** 	    #endif
1272:../../../src/net/isa/isa.c **** 	    #ifdef TX_RX_DEBUG
1273:../../../src/net/isa/isa.c **** 		//printf("R\r\n");
1274:../../../src/net/isa/isa.c **** 	//	nrk_gpio_set(NRK_DEBUG_0);
1275:../../../src/net/isa/isa.c **** 
1276:../../../src/net/isa/isa.c **** 	    #endif
1277:../../../src/net/isa/isa.c ****             if (slot_mask & isa_tx_data_ready & isa_tdma_tx_mask){
1278:../../../src/net/isa/isa.c **** 
1279:../../../src/net/isa/isa.c **** 		//printf("isa tx slot %d.\n\r",slot);
1280:../../../src/net/isa/isa.c **** 	//	printf("TX %d,%d,%d\n\r",currentChannel,(channelIndex)&0x0F,slot);
1281:../../../src/net/isa/isa.c **** 		//printf("tx\n\r");
1282:../../../src/net/isa/isa.c **** 		_isa_tx (slot);
1283:../../../src/net/isa/isa.c **** 		previous_tx_slot = slot; 
1284:../../../src/net/isa/isa.c **** 		#ifdef HIGH_TIMER_DEBUG
1285:../../../src/net/isa/isa.c **** 	    	    //printf("TX later, high speed timer value is %d.\n\r", _nrk_high_speed_timer_get());
1286:../../../src/net/isa/isa.c **** 		#endif		
1287:../../../src/net/isa/isa.c **** 	    } else if ((slot_mask & isa_tdma_rx_mask) && (isa_rx_data_ready == 0)){// if RX slot mask and 
1288:../../../src/net/isa/isa.c **** 	    #ifdef TX_RX_DEBUG
1289:../../../src/net/isa/isa.c **** 		//printf("R\r\n");
1290:../../../src/net/isa/isa.c **** 		//nrk_gpio_set(NRK_DEBUG_0);
1291:../../../src/net/isa/isa.c **** 	    #endif
1292:../../../src/net/isa/isa.c **** 		//printf("isa rx slot %d.\n\r",slot);
1293:../../../src/net/isa/isa.c **** 	//	printf("RX %d,%d %d\n\r",currentChannel,(channelIndex)&0x0F, slot);
1294:../../../src/net/isa/isa.c **** 		//printf("rx\n\r");
1295:../../../src/net/isa/isa.c **** 		_isa_rx (slot);
1296:../../../src/net/isa/isa.c **** 	    } 
1297:../../../src/net/isa/isa.c **** 	    #ifdef TX_RX_DEBUG
1298:../../../src/net/isa/isa.c **** 		//    nrk_gpio_clr(NRK_DEBUG_0);
1299:../../../src/net/isa/isa.c **** 		    //nrk_gpio_clr(NRK_DEBUG_1);
1300:../../../src/net/isa/isa.c **** 	    #endif
1301:../../../src/net/isa/isa.c **** 	    // if RX slot mask and RX buffer free, try to receive a packet
1302:../../../src/net/isa/isa.c ****             /*else if ((slot_mask & rtl_tdma_rx_mask) && (rtl_rx_data_ready == 0)){ 
1303:../../../src/net/isa/isa.c **** 		_rtl_rx (slot);
1304:../../../src/net/isa/isa.c **** 	    }*/ 
1305:../../../src/net/isa/isa.c **** 	} else	{
1306:../../../src/net/isa/isa.c **** 
1307:../../../src/net/isa/isa.c **** 	    ///do joining or sync request here
1308:../../../src/net/isa/isa.c **** 	    DHDR = configDHDR(0);
1309:../../../src/net/isa/isa.c **** 	    if(isa_node_mode != ISA_GATEWAY){//change
1310:../../../src/net/isa/isa.c **** 		#ifdef JOIN_PROCESS
1311:../../../src/net/isa/isa.c **** 		if(!_isa_join_ok){
1312:../../../src/net/isa/isa.c **** 		    _isa_join_process();
1313:../../../src/net/isa/isa.c **** 		}
1314:../../../src/net/isa/isa.c **** 		#endif
1315:../../../src/net/isa/isa.c **** 		DHDRcount = 0;	//make send request for time correction
1316:../../../src/net/isa/isa.c **** 		_isa_sync_ok = _isa_init_sync();
1317:../../../src/net/isa/isa.c **** 
1318:../../../src/net/isa/isa.c **** 		//printf("waiting for sync...isa_sync_ok is %d.\n\r",_isa_sync_ok);
1319:../../../src/net/isa/isa.c **** 	    }else if (isa_node_mode == ISA_GATEWAY){
1320:../../../src/net/isa/isa.c **** 		_isa_sync_ok = 1;
1321:../../../src/net/isa/isa.c **** 	    }	
1322:../../../src/net/isa/isa.c **** 	}
1323:../../../src/net/isa/isa.c **** 	
1324:../../../src/net/isa/isa.c **** 	//nrk_gpio_clr(NRK_DEBUG_2);
1325:../../../src/net/isa/isa.c **** 	//printf("next_slot_offset %d\n\r",next_slot_offset);
1326:../../../src/net/isa/isa.c **** 	// To make sure that initial sync is correct
1327:../../../src/net/isa/isa.c ****         /*if(FIRST){
1328:../../../src/net/isa/isa.c **** 		//printf("%d\n\r",_nrk_os_timer_get ());
1329:../../../src/net/isa/isa.c **** 		next_slot_offset = 1;
1330:../../../src/net/isa/isa.c **** 		FIRST = 0;
1331:../../../src/net/isa/isa.c **** 	}*/
1332:../../../src/net/isa/isa.c **** 	if(slot_expired >= EXPIRATION && isa_node_mode != ISA_GATEWAY){
1333:../../../src/net/isa/isa.c **** 	    //printf("re-sync\n\r");
1334:../../../src/net/isa/isa.c **** 	    _isa_sync_ok = 0;
1335:../../../src/net/isa/isa.c **** 	    slot_expired = 0;    
1336:../../../src/net/isa/isa.c **** 	    global_slot = 0;
1337:../../../src/net/isa/isa.c **** 	    next_slot_offset = 0;
1338:../../../src/net/isa/isa.c **** 	    resync_times++;
1339:../../../src/net/isa/isa.c **** 	    if(isa_id!=0){
1340:../../../src/net/isa/isa.c **** 	        channelIndex = isa_clk_src_id;
1341:../../../src/net/isa/isa.c **** 	        currentChannel = slottedPattern[channelIndex];    
1342:../../../src/net/isa/isa.c **** 	    }else{
1343:../../../src/net/isa/isa.c **** 	        channelIndex = 0;
1344:../../../src/net/isa/isa.c **** 	        currentChannel = slottedPattern[channelIndex];
1345:../../../src/net/isa/isa.c **** 	    }
1346:../../../src/net/isa/isa.c **** 	    isa_set_channel(currentChannel);
1347:../../../src/net/isa/isa.c **** 
1348:../../../src/net/isa/isa.c **** 
1349:../../../src/net/isa/isa.c **** 	}else{
1350:../../../src/net/isa/isa.c **** 	    //printf("global_slot is %d. global cycle is %d.\n\r",global_slot,global_cycle);
1351:../../../src/net/isa/isa.c **** 	    next_slot_offset = isa_get_slots_until_next_wakeup (global_slot);
1352:../../../src/net/isa/isa.c **** 	  //  printf("NOS:%d\n\r",next_slot_offset);
1353:../../../src/net/isa/isa.c **** 	    //printf("%d,%d,%d,%d\n\r",_nrk_os_timer_get (),_nrk_get_next_wakeup (),global_slot,next_slot_
1354:../../../src/net/isa/isa.c **** 	    global_slot += next_slot_offset;
1355:../../../src/net/isa/isa.c ****             //nrk_clr_led (1);
1356:../../../src/net/isa/isa.c **** 	    #ifdef LED_SLOT_DEBUG
1357:../../../src/net/isa/isa.c **** 	    nrk_led_clr(0);
1358:../../../src/net/isa/isa.c **** 	    #endif
1359:../../../src/net/isa/isa.c **** 
1360:../../../src/net/isa/isa.c **** 	    offsetY = 0;
1361:../../../src/net/isa/isa.c **** 	    //printf("%d\n\r",next_slot_offset);
1362:../../../src/net/isa/isa.c **** 
1363:../../../src/net/isa/isa.c ****             nrk_wait_until_next_n_periods (next_slot_offset);
1364:../../../src/net/isa/isa.c **** 
1365:../../../src/net/isa/isa.c **** 
1366:../../../src/net/isa/isa.c **** 	    #ifdef LED_SLOT_DEBUG
1367:../../../src/net/isa/isa.c **** 	    nrk_led_set(0);
1368:../../../src/net/isa/isa.c **** 	    #endif
1369:../../../src/net/isa/isa.c **** 	//}
1370:../../../src/net/isa/isa.c ****         //nrk_set_led (1);
1371:../../../src/net/isa/isa.c ****         // Set last_slot_time to the time of the start of the slot
1372:../../../src/net/isa/isa.c **** 	}
1373:../../../src/net/isa/isa.c ****     }
1374:../../../src/net/isa/isa.c **** }
1375:../../../src/net/isa/isa.c **** 
1376:../../../src/net/isa/isa.c **** void isa_task_config ()
1377:../../../src/net/isa/isa.c **** {
 809               	.LM80:
 810               	.LFBB15:
 811               	/* prologue: frame size=0 */
 812 0274 0F93      		push r16
 813 0276 1F93      		push r17
 814               	/* prologue end (size=2) */
1378:../../../src/net/isa/isa.c ****     isa_task.task = isa_nw_task;
 816               	.LM81:
 817 0278 80E0      		ldi r24,lo8(pm(isa_nw_task))
 818 027a 90E0      		ldi r25,hi8(pm(isa_nw_task))
 819 027c 9093 0000 		sts (isa_task+5)+1,r25
 820 0280 8093 0000 		sts isa_task+5,r24
1379:../../../src/net/isa/isa.c ****     nrk_task_set_stk( &isa_task, isa_task_stack, ISA_STACK_SIZE);
 822               	.LM82:
 823 0284 00E0      		ldi r16,lo8(isa_task)
 824 0286 10E0      		ldi r17,hi8(isa_task)
 825 0288 40E8      		ldi r20,lo8(128)
 826 028a 50E0      		ldi r21,hi8(128)
 827 028c 60E0      		ldi r22,lo8(isa_task_stack)
 828 028e 70E0      		ldi r23,hi8(isa_task_stack)
 829 0290 C801      		movw r24,r16
 830 0292 0E94 0000 		call nrk_task_set_stk
1380:../../../src/net/isa/isa.c ****     isa_task.prio = 20;
 832               	.LM83:
 833 0296 84E1      		ldi r24,lo8(20)
 834 0298 8093 0000 		sts isa_task+8,r24
1381:../../../src/net/isa/isa.c ****     isa_task.FirstActivation = TRUE;
 836               	.LM84:
 837 029c 81E0      		ldi r24,lo8(1)
 838 029e 8093 0000 		sts isa_task+7,r24
1382:../../../src/net/isa/isa.c ****     isa_task.Type = BASIC_TASK;
 840               	.LM85:
 841 02a2 8093 0000 		sts isa_task+9,r24
1383:../../../src/net/isa/isa.c ****     isa_task.SchType = PREEMPTIVE;
 843               	.LM86:
 844 02a6 8093 0000 		sts isa_task+10,r24
1384:../../../src/net/isa/isa.c ****     isa_task.period.secs = 0;
 846               	.LM87:
 847 02aa 1092 0000 		sts isa_task+11,__zero_reg__
 848 02ae 1092 0000 		sts (isa_task+11)+1,__zero_reg__
 849 02b2 1092 0000 		sts (isa_task+11)+2,__zero_reg__
 850 02b6 1092 0000 		sts (isa_task+11)+3,__zero_reg__
1385:../../../src/net/isa/isa.c ****     isa_task.period.nano_secs = 10*NANOS_PER_MS;
 852               	.LM88:
 853 02ba 80E8      		ldi r24,lo8(10000000)
 854 02bc 96E9      		ldi r25,hi8(10000000)
 855 02be A8E9      		ldi r26,hlo8(10000000)
 856 02c0 B0E0      		ldi r27,hhi8(10000000)
 857 02c2 8093 0000 		sts isa_task+15,r24
 858 02c6 9093 0000 		sts (isa_task+15)+1,r25
 859 02ca A093 0000 		sts (isa_task+15)+2,r26
 860 02ce B093 0000 		sts (isa_task+15)+3,r27
1386:../../../src/net/isa/isa.c ****     isa_task.cpu_reserve.secs = 0;      
 862               	.LM89:
 863 02d2 1092 0000 		sts isa_task+19,__zero_reg__
 864 02d6 1092 0000 		sts (isa_task+19)+1,__zero_reg__
 865 02da 1092 0000 		sts (isa_task+19)+2,__zero_reg__
 866 02de 1092 0000 		sts (isa_task+19)+3,__zero_reg__
1387:../../../src/net/isa/isa.c ****     isa_task.cpu_reserve.nano_secs = 0;
 868               	.LM90:
 869 02e2 1092 0000 		sts isa_task+23,__zero_reg__
 870 02e6 1092 0000 		sts (isa_task+23)+1,__zero_reg__
 871 02ea 1092 0000 		sts (isa_task+23)+2,__zero_reg__
 872 02ee 1092 0000 		sts (isa_task+23)+3,__zero_reg__
1388:../../../src/net/isa/isa.c ****     isa_task.offset.secs = 0;
 874               	.LM91:
 875 02f2 1092 0000 		sts isa_task+27,__zero_reg__
 876 02f6 1092 0000 		sts (isa_task+27)+1,__zero_reg__
 877 02fa 1092 0000 		sts (isa_task+27)+2,__zero_reg__
 878 02fe 1092 0000 		sts (isa_task+27)+3,__zero_reg__
1389:../../../src/net/isa/isa.c ****     isa_task.offset.nano_secs = 0;
 880               	.LM92:
 881 0302 1092 0000 		sts isa_task+31,__zero_reg__
 882 0306 1092 0000 		sts (isa_task+31)+1,__zero_reg__
 883 030a 1092 0000 		sts (isa_task+31)+2,__zero_reg__
 884 030e 1092 0000 		sts (isa_task+31)+3,__zero_reg__
1390:../../../src/net/isa/isa.c ****     nrk_activate_task (&isa_task);
 886               	.LM93:
 887 0312 C801      		movw r24,r16
 888 0314 0E94 0000 		call nrk_activate_task
 889               	/* epilogue: frame size=0 */
 890 0318 1F91      		pop r17
 891 031a 0F91      		pop r16
 892 031c 0895      		ret
 893               	/* epilogue end (size=3) */
 894               	/* function isa_task_config size 85 (80) */
 896               	.Lscope15:
 898               		.stabd	78,0,0
 900               	.global	_isa_init_sync
 902               	_isa_init_sync:
 903               		.stabd	46,0,0
 905               	.LM94:
 906               	.LFBB16:
 907               	/* prologue: frame size=0 */
 908 031e CF92      		push r12
 909 0320 DF92      		push r13
 910 0322 EF92      		push r14
 911 0324 FF92      		push r15
 912 0326 0F93      		push r16
 913 0328 1F93      		push r17
 914 032a CF93      		push r28
 915 032c DF93      		push r29
 916               	/* prologue end (size=8) */
 917 032e EE24      		clr r14
 918 0330 FF24      		clr r15
 919 0332 40E0      		ldi r20,lo8(isa_rfRxInfo)
 920 0334 C42E      		mov r12,r20
 921 0336 40E0      		ldi r20,hi8(isa_rfRxInfo)
 922 0338 D42E      		mov r13,r20
 923               	.L74:
 925               	.LM95:
 926 033a 0091 0000 		lds r16,isa_rfRxInfo+5
 927 033e 1091 0000 		lds r17,(isa_rfRxInfo+5)+1
 928 0342 80E0      		ldi r24,lo8(0)
 929 0344 0E94 0000 		call configDHDR
 930 0348 F801      		movw r30,r16
 931 034a 8083      		st Z,r24
 933               	.LM96:
 934 034c 6091 0000 		lds r22,isa_param+2
 935 0350 C601      		movw r24,r12
 936 0352 0E94 0000 		call rf_set_rx
 938               	.LM97:
 939 0356 0E94 0000 		call rf_polling_rx_on
 941               	.LM98:
 942 035a 1092 0000 		sts _isa_sync_ok,__zero_reg__
 944               	.LM99:
 945 035e 8AEF      		ldi r24,lo8(-6)
 946 0360 0E94 0000 		call _nrk_set_next_wakeup
 948               	.LM100:
 949 0364 80E0      		ldi r24,lo8(0)
 950 0366 0E94 0000 		call _nrk_os_timer_set
 951 036a 10E0      		ldi r17,lo8(0)
 952 036c 00C0      		rjmp .L75
 953               	.L57:
 955               	.LM101:
 956 036e 0E94 0000 		call _nrk_os_timer_get
 957 0372 1817      		cp r17,r24
 958 0374 01F0      		breq .L75
 960               	.LM102:
 961 0376 0E94 0000 		call _nrk_os_timer_get
 962 037a 182F      		mov r17,r24
 964               	.LM103:
 965 037c 0894      		sec
 966 037e E11C      		adc r14,__zero_reg__
 967 0380 F11C      		adc r15,__zero_reg__
 969               	.LM104:
 970 0382 F1E1      		ldi r31,lo8(10001)
 971 0384 EF16      		cp r14,r31
 972 0386 F7E2      		ldi r31,hi8(10001)
 973 0388 FF06      		cpc r15,r31
 974 038a 00F0      		brlo .L75
 975 038c EE24      		clr r14
 976 038e FF24      		clr r15
 977 0390 00C0      		rjmp .L60
 978               	.L75:
 980               	.LM105:
 981 0392 0E94 0000 		call rf_rx_check_sfd
 982 0396 082F      		mov r16,r24
 983 0398 8823      		tst r24
 984 039a 01F0      		breq .L57
 985               	.L60:
 987               	.LM106:
 988 039c 0E94 0000 		call _nrk_high_speed_timer_reset
 990               	.LM107:
 991 03a0 0E94 0000 		call _nrk_os_timer_get
 993               	.LM108:
 994 03a4 C82F      		mov r28,r24
 995 03a6 DD27      		clr r29
 996 03a8 2496      		adiw r28,4
 998               	.LM109:
 999 03aa 0023      		tst r16
 1000 03ac 01F0      		breq .L62
 1001 03ae 00C0      		rjmp .L71
 1002               	.L63:
 1004               	.LM110:
 1005 03b0 0E94 0000 		call _nrk_os_timer_get
 1006 03b4 9927      		clr r25
 1007 03b6 C817      		cp r28,r24
 1008 03b8 D907      		cpc r29,r25
 1009 03ba 00F0      		brlo .L62
 1010               	.L71:
 1012               	.LM111:
 1013 03bc 60E8      		ldi r22,lo8(-128)
 1014 03be 80E0      		ldi r24,lo8(0)
 1015 03c0 0E94 0000 		call rf_polling_rx_packet
 1016 03c4 082F      		mov r16,r24
 1017 03c6 8823      		tst r24
 1018 03c8 01F0      		breq .L63
 1019               	.L62:
 1021               	.LM112:
 1022 03ca 0E94 0000 		call rf_rx_off
 1024               	.LM113:
 1025 03ce 0130      		cpi r16,lo8(1)
 1026 03d0 01F0      		breq .+2
 1027 03d2 00C0      		rjmp .L74
 1029               	.LM114:
 1030 03d4 E091 0000 		lds r30,isa_rfRxInfo+5
 1031 03d8 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 1032 03dc 9281      		ldd r25,Z+2
 1033 03de 8091 0000 		lds r24,isa_clk_src_id
 1034 03e2 9817      		cp r25,r24
 1035 03e4 01F0      		breq .+2
 1036 03e6 00C0      		rjmp .L74
 1038               	.LM115:
 1039 03e8 81E0      		ldi r24,lo8(1)
 1040 03ea 90E0      		ldi r25,hi8(1)
 1041 03ec A0E0      		ldi r26,hlo8(1)
 1042 03ee B0E0      		ldi r27,hhi8(1)
 1043 03f0 8093 0000 		sts isa_rx_data_ready,r24
 1044 03f4 9093 0000 		sts (isa_rx_data_ready)+1,r25
 1045 03f8 A093 0000 		sts (isa_rx_data_ready)+2,r26
 1046 03fc B093 0000 		sts (isa_rx_data_ready)+3,r27
 1048               	.LM116:
 1049 0400 8091 0000 		lds r24,global_slot
 1050 0404 9091 0000 		lds r25,(global_slot)+1
 1051 0408 2181      		ldd r18,Z+1
 1052 040a 820F      		add r24,r18
 1053 040c 911D      		adc r25,__zero_reg__
 1054 040e 9093 0000 		sts (global_slot)+1,r25
 1055 0412 8093 0000 		sts global_slot,r24
 1057               	.LM117:
 1058 0416 82E0      		ldi r24,lo8(2)
 1059 0418 90E0      		ldi r25,hi8(2)
 1060 041a 0E94 0000 		call nrk_led_toggle
 1062               	.LM118:
 1063 041e 6091 0000 		lds r22,__iob+2
 1064 0422 7091 0000 		lds r23,(__iob+2)+1
 1065 0426 89E6      		ldi r24,lo8(105)
 1066 0428 90E0      		ldi r25,hi8(105)
 1067 042a 0E94 0000 		call fputc
 1069               	.LM119:
 1070 042e 0093 0000 		sts _isa_sync_ok,r16
 1071               	.LBB7:
 1072               	.LBB8:
 1074               	.LM120:
 1075 0432 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 1076 0436 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 1077 043a 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 1078 043e 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 1079               	.LBE8:
 1080               	.LBE7:
 1082               	.LM121:
 1083 0442 0E94 0000 		call _nrk_os_timer_stop
 1085               	.LM122:
 1086 0446 8AE0      		ldi r24,lo8(10)
 1087 0448 0E94 0000 		call _nrk_set_next_wakeup
 1089               	.LM123:
 1090 044c 87E0      		ldi r24,lo8(7)
 1091 044e 0E94 0000 		call _nrk_os_timer_set
 1093               	.LM124:
 1094 0452 60E5      		ldi r22,lo8(-28336)
 1095 0454 71E9      		ldi r23,hi8(-28336)
 1096 0456 80E0      		ldi r24,lo8(0)
 1097 0458 90E0      		ldi r25,hi8(0)
 1098 045a 0E94 0000 		call nrk_high_speed_timer_wait
 1100               	.LM125:
 1101 045e 0E94 0000 		call _nrk_os_timer_start
 1103               	.LM126:
 1104 0462 E091 0000 		lds r30,nrk_cur_task_TCB
 1105 0466 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1106 046a 8AE0      		ldi r24,lo8(10)
 1107 046c 90E0      		ldi r25,hi8(10)
 1108 046e 968B      		std Z+22,r25
 1109 0470 858B      		std Z+21,r24
 1110 0472 8091 0000 		lds r24,_isa_sync_ok
 1112               	.LM127:
 1113 0476 9927      		clr r25
 1114               	/* epilogue: frame size=0 */
 1115 0478 DF91      		pop r29
 1116 047a CF91      		pop r28
 1117 047c 1F91      		pop r17
 1118 047e 0F91      		pop r16
 1119 0480 FF90      		pop r15
 1120 0482 EF90      		pop r14
 1121 0484 DF90      		pop r13
 1122 0486 CF90      		pop r12
 1123 0488 0895      		ret
 1124               	/* epilogue end (size=9) */
 1125               	/* function _isa_init_sync size 182 (165) */
 1133               	.Lscope16:
 1135               		.stabd	78,0,0
 1136               		.data
 1137               	.LC0:
 1138 0000 2564 00   		.string	"%d"
 1139               	.LC1:
 1140 0003 7061 636B 		.string	"packet is too long, times out.\n\r"
 1140      6574 2069 
 1140      7320 746F 
 1140      6F20 6C6F 
 1140      6E67 2C20 
 1141               	.LC2:
 1142 0024 4E3A 2564 		.string	"N:%d\r\n"
 1142      0D0A 00
 1143               		.text
 1146               	.global	_isa_rx
 1148               	_isa_rx:
 1149               		.stabd	46,0,0
 1151               	.LM128:
 1152               	.LFBB17:
 1153               	/* prologue: frame size=1 */
 1154 048a FF92      		push r15
 1155 048c 0F93      		push r16
 1156 048e 1F93      		push r17
 1157 0490 CF93      		push r28
 1158 0492 DF93      		push r29
 1159 0494 CDB7      		in r28,__SP_L__
 1160 0496 DEB7      		in r29,__SP_H__
 1161 0498 2197      		sbiw r28,1
 1162 049a 0FB6      		in __tmp_reg__,__SREG__
 1163 049c F894      		cli
 1164 049e DEBF      		out __SP_H__,r29
 1165 04a0 0FBE      		out __SREG__,__tmp_reg__
 1166 04a2 CDBF      		out __SP_L__,r28
 1167               	/* prologue end (size=13) */
 1168 04a4 F82E      		mov r15,r24
 1170               	.LM129:
 1171 04a6 6091 0000 		lds r22,isa_param+2
 1172 04aa 80E0      		ldi r24,lo8(isa_rfRxInfo)
 1173 04ac 90E0      		ldi r25,hi8(isa_rfRxInfo)
 1174 04ae 0E94 0000 		call rf_set_rx
 1176               	.LM130:
 1177 04b2 0E94 0000 		call rf_polling_rx_on
 1179               	.LM131:
 1180 04b6 0091 0000 		lds r16,NRK_DEBUG_2
 1181 04ba 802F      		mov r24,r16
 1182 04bc 0E94 0000 		call nrk_gpio_set
 1184               	.LM132:
 1185 04c0 0E94 0000 		call _nrk_os_timer_get
 1186 04c4 8983      		std Y+1,r24
 1188               	.LM133:
 1189 04c6 8981      		ldd r24,Y+1
 1190 04c8 8C5F      		subi r24,lo8(-(4))
 1191 04ca 8983      		std Y+1,r24
 1192 04cc 00C0      		rjmp .L77
 1193               	.L78:
 1195               	.LM134:
 1196 04ce 0E94 0000 		call _nrk_os_timer_get
 1197 04d2 9981      		ldd r25,Y+1
 1198 04d4 9817      		cp r25,r24
 1199 04d6 00F4      		brsh .L77
 1201               	.LM135:
 1202 04d8 802F      		mov r24,r16
 1203 04da 0E94 0000 		call nrk_gpio_clr
 1205               	.LM136:
 1206 04de 0E94 0000 		call rf_rx_off
 1208               	.LM137:
 1209 04e2 802F      		mov r24,r16
 1210 04e4 0E94 0000 		call nrk_gpio_set
 1212               	.LM138:
 1213 04e8 802F      		mov r24,r16
 1214 04ea 0E94 0000 		call nrk_gpio_clr
 1216               	.LM139:
 1217 04ee 6091 0000 		lds r22,__iob+2
 1218 04f2 7091 0000 		lds r23,(__iob+2)+1
 1219 04f6 86E7      		ldi r24,lo8(118)
 1220 04f8 90E0      		ldi r25,hi8(118)
 1221 04fa 0E94 0000 		call fputc
 1223               	.LM140:
 1224 04fe 8F2D      		mov r24,r15
 1225 0500 9927      		clr r25
 1226 0502 9F93      		push r25
 1227 0504 8F93      		push r24
 1228 0506 80E0      		ldi r24,lo8(.LC0)
 1229 0508 90E0      		ldi r25,hi8(.LC0)
 1230 050a 00C0      		rjmp .L103
 1231               	.L77:
 1233               	.LM141:
 1234 050c 0E94 0000 		call rf_rx_check_sfd
 1235 0510 8823      		tst r24
 1236 0512 01F0      		breq .L78
 1238               	.LM142:
 1239 0514 0E94 0000 		call _nrk_high_speed_timer_get
 1240 0518 9093 0000 		sts (rx_start_time)+1,r25
 1241 051c 8093 0000 		sts rx_start_time,r24
 1243               	.LM143:
 1244 0520 0E94 0000 		call _nrk_os_timer_get
 1245 0524 8983      		std Y+1,r24
 1247               	.LM144:
 1248 0526 8981      		ldd r24,Y+1
 1249 0528 8B5F      		subi r24,lo8(-(5))
 1250 052a 8983      		std Y+1,r24
 1251 052c 00C0      		rjmp .L82
 1252               	.L83:
 1254               	.LM145:
 1255 052e 0E94 0000 		call _nrk_os_timer_get
 1256 0532 9981      		ldd r25,Y+1
 1257 0534 9817      		cp r25,r24
 1258 0536 00F4      		brsh .L82
 1260               	.LM146:
 1261 0538 80E0      		ldi r24,lo8(.LC1)
 1262 053a 90E0      		ldi r25,hi8(.LC1)
 1263 053c 9F93      		push r25
 1264 053e 8F93      		push r24
 1265 0540 0E94 0000 		call printf
 1267               	.LM147:
 1268 0544 8091 0000 		lds r24,packetsLost
 1269 0548 9091 0000 		lds r25,(packetsLost)+1
 1270 054c 0196      		adiw r24,1
 1271 054e 9093 0000 		sts (packetsLost)+1,r25
 1272 0552 8093 0000 		sts packetsLost,r24
 1274               	.LM148:
 1275 0556 0F90      		pop __tmp_reg__
 1276 0558 0F90      		pop __tmp_reg__
 1277 055a 00C0      		rjmp .L97
 1278               	.L82:
 1280               	.LM149:
 1281 055c 60E8      		ldi r22,lo8(-128)
 1282 055e 80E0      		ldi r24,lo8(0)
 1283 0560 0E94 0000 		call rf_polling_rx_packet
 1284 0564 182F      		mov r17,r24
 1285 0566 8823      		tst r24
 1286 0568 01F0      		breq .L83
 1288               	.LM150:
 1289 056a 802F      		mov r24,r16
 1290 056c 0E94 0000 		call nrk_gpio_clr
 1292               	.LM151:
 1293 0570 0E94 0000 		call rf_rx_off
 1295               	.LM152:
 1296 0574 1130      		cpi r17,lo8(1)
 1297 0576 01F0      		breq .L86
 1299               	.LM153:
 1300 0578 6091 0000 		lds r22,__iob+2
 1301 057c 7091 0000 		lds r23,(__iob+2)+1
 1302 0580 82E6      		ldi r24,lo8(98)
 1303 0582 90E0      		ldi r25,hi8(98)
 1304 0584 0E94 0000 		call fputc
 1306               	.LM154:
 1307 0588 812F      		mov r24,r17
 1308 058a 9927      		clr r25
 1309 058c 9F93      		push r25
 1310 058e 8F93      		push r24
 1311 0590 80E0      		ldi r24,lo8(.LC2)
 1312 0592 90E0      		ldi r25,hi8(.LC2)
 1313               	.L103:
 1314 0594 9F93      		push r25
 1315 0596 8F93      		push r24
 1316 0598 0E94 0000 		call printf
 1318               	.LM155:
 1319 059c 8091 0000 		lds r24,packetsLost
 1320 05a0 9091 0000 		lds r25,(packetsLost)+1
 1321 05a4 0196      		adiw r24,1
 1322 05a6 9093 0000 		sts (packetsLost)+1,r25
 1323 05aa 8093 0000 		sts packetsLost,r24
 1324 05ae 0F90      		pop __tmp_reg__
 1325 05b0 0F90      		pop __tmp_reg__
 1326 05b2 0F90      		pop __tmp_reg__
 1327 05b4 0F90      		pop __tmp_reg__
 1328 05b6 00C0      		rjmp .L97
 1329               	.L86:
 1331               	.LM156:
 1332 05b8 8091 0000 		lds r24,rxCount
 1333 05bc 9091 0000 		lds r25,(rxCount)+1
 1334 05c0 0196      		adiw r24,1
 1335 05c2 9093 0000 		sts (rxCount)+1,r25
 1336 05c6 8093 0000 		sts rxCount,r24
 1338               	.LM157:
 1339 05ca 81E0      		ldi r24,lo8(1)
 1340 05cc 90E0      		ldi r25,hi8(1)
 1341 05ce 0E94 0000 		call nrk_led_toggle
 1343               	.LM158:
 1344 05d2 87E0      		ldi r24,lo8(7)
 1345 05d4 F816      		cp r15,r24
 1346 05d6 01F0      		breq .L88
 1347 05d8 81E0      		ldi r24,lo8(1)
 1348 05da 90E0      		ldi r25,hi8(1)
 1349 05dc A0E0      		ldi r26,hlo8(1)
 1350 05de B0E0      		ldi r27,hhi8(1)
 1351 05e0 8093 0000 		sts isa_rx_data_ready,r24
 1352 05e4 9093 0000 		sts (isa_rx_data_ready)+1,r25
 1353 05e8 A093 0000 		sts (isa_rx_data_ready)+2,r26
 1354 05ec B093 0000 		sts (isa_rx_data_ready)+3,r27
 1355               	.L88:
 1357               	.LM159:
 1358 05f0 E091 0000 		lds r30,isa_rfRxInfo+5
 1359 05f4 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 1360 05f8 8081      		ld r24,Z
 1361 05fa 8093 0000 		sts DHDR,r24
 1363               	.LM160:
 1364 05fe 8091 0000 		lds r24,isa_rx_pkt_signal
 1365 0602 0E94 0000 		call nrk_event_signal
 1367               	.LM161:
 1368 0606 2091 0000 		lds r18,DHDR
 1369 060a 27FF      		sbrs r18,7
 1370 060c 00C0      		rjmp .L97
 1372               	.LM162:
 1373 060e 8091 0000 		lds r24,txCount
 1374 0612 9091 0000 		lds r25,(txCount)+1
 1375 0616 0196      		adiw r24,1
 1376 0618 9093 0000 		sts (txCount)+1,r25
 1377 061c 8093 0000 		sts txCount,r24
 1378               	.LBB9:
 1379               	.LBB10:
 1381               	.LM163:
 1382 0620 22FF      		sbrs r18,2
 1383 0622 00C0      		rjmp .L91
 1384 0624 83E8      		ldi r24,lo8(-125)
 1385 0626 00C0      		rjmp .L93
 1386               	.L91:
 1387 0628 83E0      		ldi r24,lo8(3)
 1388               	.L93:
 1389               	.LBE10:
 1390               	.LBE9:
 1392               	.LM164:
 1393 062a 8093 0000 		sts DHR,r24
 1395               	.LM165:
 1396 062e 8093 0000 		sts isa_ack_buf,r24
 1398               	.LM166:
 1399 0632 80E0      		ldi r24,lo8(isa_ack_buf)
 1400 0634 90E0      		ldi r25,hi8(isa_ack_buf)
 1401 0636 9093 0000 		sts (isa_ack_tx+3)+1,r25
 1402 063a 8093 0000 		sts isa_ack_tx+3,r24
 1404               	.LM167:
 1405 063e 22FF      		sbrs r18,2
 1406 0640 00C0      		rjmp .L94
 1407               	.LBB11:
 1409               	.LM168:
 1410 0642 6091 0000 		lds r22,__iob+2
 1411 0646 7091 0000 		lds r23,(__iob+2)+1
 1412 064a 8BE4      		ldi r24,lo8(75)
 1413 064c 90E0      		ldi r25,hi8(75)
 1414 064e 0E94 0000 		call fputc
 1416               	.LM169:
 1417 0652 8091 0000 		lds r24,rx_start_time
 1418 0656 9091 0000 		lds r25,(rx_start_time)+1
 1419 065a 2091 0000 		lds r18,slot_start_time
 1420 065e 3091 0000 		lds r19,(slot_start_time)+1
 1421 0662 821B      		sub r24,r18
 1422 0664 930B      		sbc r25,r19
 1423 0666 9093 0000 		sts (offsetX)+1,r25
 1424 066a 8093 0000 		sts offsetX,r24
 1426               	.LM170:
 1427 066e 292F      		mov r18,r25
 1428 0670 3327      		clr r19
 1429 0672 2093 0000 		sts isa_ack_buf+1,r18
 1431               	.LM171:
 1432 0676 8093 0000 		sts isa_ack_buf+2,r24
 1434               	.LM172:
 1435 067a 84E0      		ldi r24,lo8(4)
 1436 067c 00C0      		rjmp .L102
 1437               	.L94:
 1438               	.LBE11:
 1440               	.LM173:
 1441 067e 82E0      		ldi r24,lo8(2)
 1442               	.L102:
 1443 0680 8093 0000 		sts isa_ack_tx+2,r24
 1445               	.LM174:
 1446 0684 802F      		mov r24,r16
 1447 0686 0E94 0000 		call nrk_gpio_set
 1449               	.LM175:
 1450 068a 4091 0000 		lds r20,isa_param+4
 1451 068e 5091 0000 		lds r21,(isa_param+4)+1
 1452 0692 6091 0000 		lds r22,slot_start_time
 1453 0696 7091 0000 		lds r23,(slot_start_time)+1
 1454 069a 20E0      		ldi r18,lo8(tx_start_time)
 1455 069c 30E0      		ldi r19,hi8(tx_start_time)
 1456 069e 80E0      		ldi r24,lo8(isa_ack_tx)
 1457 06a0 90E0      		ldi r25,hi8(isa_ack_tx)
 1458 06a2 0E94 0000 		call rf_tx_tdma_packet
 1460               	.LM176:
 1461 06a6 802F      		mov r24,r16
 1462 06a8 0E94 0000 		call nrk_gpio_clr
 1463               	.L97:
 1464               	/* epilogue: frame size=1 */
 1465 06ac 2196      		adiw r28,1
 1466 06ae 0FB6      		in __tmp_reg__,__SREG__
 1467 06b0 F894      		cli
 1468 06b2 DEBF      		out __SP_H__,r29
 1469 06b4 0FBE      		out __SREG__,__tmp_reg__
 1470 06b6 CDBF      		out __SP_L__,r28
 1471 06b8 DF91      		pop r29
 1472 06ba CF91      		pop r28
 1473 06bc 1F91      		pop r17
 1474 06be 0F91      		pop r16
 1475 06c0 FF90      		pop r15
 1476 06c2 0895      		ret
 1477               	/* epilogue end (size=12) */
 1478               	/* function _isa_rx size 285 (260) */
 1487               	.Lscope17:
 1489               		.stabd	78,0,0
 1492               	.global	_isa_tx
 1494               	_isa_tx:
 1495               		.stabd	46,0,0
 1497               	.LM177:
 1498               	.LFBB18:
 1499               	/* prologue: frame size=1 */
 1500 06c4 AF92      		push r10
 1501 06c6 BF92      		push r11
 1502 06c8 CF92      		push r12
 1503 06ca DF92      		push r13
 1504 06cc EF92      		push r14
 1505 06ce FF92      		push r15
 1506 06d0 0F93      		push r16
 1507 06d2 1F93      		push r17
 1508 06d4 CF93      		push r28
 1509 06d6 DF93      		push r29
 1510 06d8 CDB7      		in r28,__SP_L__
 1511 06da DEB7      		in r29,__SP_H__
 1512 06dc 2197      		sbiw r28,1
 1513 06de 0FB6      		in __tmp_reg__,__SREG__
 1514 06e0 F894      		cli
 1515 06e2 DEBF      		out __SP_H__,r29
 1516 06e4 0FBE      		out __SREG__,__tmp_reg__
 1517 06e6 CDBF      		out __SP_L__,r28
 1518               	/* prologue end (size=18) */
 1519 06e8 E82E      		mov r14,r24
 1521               	.LM178:
 1522 06ea 81E0      		ldi r24,lo8(1)
 1523 06ec 8093 0000 		sts isa_rfTxInfo+5,r24
 1525               	.LM179:
 1526 06f0 0E2D      		mov r16,r14
 1527 06f2 1127      		clr r17
 1528 06f4 F801      		movw r30,r16
 1529 06f6 EE0F      		lsl r30
 1530 06f8 FF1F      		rol r31
 1531 06fa EE0F      		lsl r30
 1532 06fc FF1F      		rol r31
 1533 06fe E050      		subi r30,lo8(-(isa_tx_info))
 1534 0700 F040      		sbci r31,hi8(-(isa_tx_info))
 1535 0702 8281      		ldd r24,Z+2
 1536 0704 9381      		ldd r25,Z+3
 1537 0706 9093 0000 		sts (isa_rfTxInfo+3)+1,r25
 1538 070a 8093 0000 		sts isa_rfTxInfo+3,r24
 1540               	.LM180:
 1541 070e 8081      		ld r24,Z
 1542 0710 8093 0000 		sts isa_rfTxInfo+2,r24
 1544               	.LM181:
 1545 0714 A091 0000 		lds r26,isa_rfTxInfo+3
 1546 0718 B091 0000 		lds r27,(isa_rfTxInfo+3)+1
 1547 071c 8181      		ldd r24,Z+1
 1548 071e 8C93      		st X,r24
 1550               	.LM182:
 1551 0720 E091 0000 		lds r30,isa_rfTxInfo+3
 1552 0724 F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1553 0728 8091 0000 		lds r24,global_slot
 1554 072c 9091 0000 		lds r25,(global_slot)+1
 1555 0730 8183      		std Z+1,r24
 1557               	.LM183:
 1558 0732 E091 0000 		lds r30,isa_rfTxInfo+3
 1559 0736 F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1560 073a 8091 0000 		lds r24,isa_id
 1561 073e 8283      		std Z+2,r24
 1563               	.LM184:
 1564 0740 0E94 0000 		call _nrk_high_speed_timer_reset
 1566               	.LM185:
 1567 0744 60E8      		ldi r22,lo8(9600)
 1568 0746 75E2      		ldi r23,hi8(9600)
 1569 0748 80E0      		ldi r24,lo8(0)
 1570 074a 90E0      		ldi r25,hi8(0)
 1571 074c 0E94 0000 		call nrk_high_speed_timer_wait
 1573               	.LM186:
 1574 0750 D090 0000 		lds r13,NRK_DEBUG_1
 1575 0754 8D2D      		mov r24,r13
 1576 0756 0E94 0000 		call nrk_gpio_set
 1578               	.LM187:
 1579 075a 4091 0000 		lds r20,isa_param+4
 1580 075e 5091 0000 		lds r21,(isa_param+4)+1
 1581 0762 6091 0000 		lds r22,slot_start_time
 1582 0766 7091 0000 		lds r23,(slot_start_time)+1
 1583 076a 20E0      		ldi r18,lo8(tx_start_time)
 1584 076c 30E0      		ldi r19,hi8(tx_start_time)
 1585 076e 80E0      		ldi r24,lo8(isa_rfTxInfo)
 1586 0770 90E0      		ldi r25,hi8(isa_rfTxInfo)
 1587 0772 0E94 0000 		call rf_tx_tdma_packet
 1588 0776 8823      		tst r24
 1589 0778 01F0      		breq .L105
 1591               	.LM188:
 1592 077a 8091 0000 		lds r24,txCount
 1593 077e 9091 0000 		lds r25,(txCount)+1
 1594 0782 0196      		adiw r24,1
 1595 0784 9093 0000 		sts (txCount)+1,r25
 1596 0788 8093 0000 		sts txCount,r24
 1598               	.LM189:
 1599 078c 8D2D      		mov r24,r13
 1600 078e 0E94 0000 		call nrk_gpio_clr
 1602               	.LM190:
 1603 0792 83E0      		ldi r24,lo8(3)
 1604 0794 90E0      		ldi r25,hi8(3)
 1605 0796 0E94 0000 		call nrk_led_toggle
 1607               	.LM191:
 1608 079a 8091 0000 		lds r24,tx_start_time
 1609 079e 9091 0000 		lds r25,(tx_start_time)+1
 1610 07a2 2091 0000 		lds r18,slot_start_time
 1611 07a6 3091 0000 		lds r19,(slot_start_time)+1
 1612 07aa 821B      		sub r24,r18
 1613 07ac 930B      		sbc r25,r19
 1614 07ae 9093 0000 		sts (offsetY)+1,r25
 1615 07b2 8093 0000 		sts offsetY,r24
 1616               	.L105:
 1618               	.LM192:
 1619 07b6 8091 0000 		lds r24,isa_tx_done_signal
 1620 07ba 0E94 0000 		call nrk_event_signal
 1622               	.LM193:
 1623 07be 81E0      		ldi r24,lo8(1)
 1624 07c0 90E0      		ldi r25,hi8(1)
 1625 07c2 A0E0      		ldi r26,hlo8(1)
 1626 07c4 B0E0      		ldi r27,hhi8(1)
 1627 07c6 002E      		mov r0,r16
 1628 07c8 00C0      		rjmp 2f
 1629 07ca 880F      	1:	lsl r24
 1630 07cc 991F      		rol r25
 1631 07ce AA1F      		rol r26
 1632 07d0 BB1F      		rol r27
 1633 07d2 0A94      	2:	dec r0
 1634 07d4 02F4      		brpl 1b
 1635 07d6 8095      		com r24
 1636 07d8 9095      		com r25
 1637 07da A095      		com r26
 1638 07dc B095      		com r27
 1639 07de 2091 0000 		lds r18,isa_tx_data_ready
 1640 07e2 3091 0000 		lds r19,(isa_tx_data_ready)+1
 1641 07e6 4091 0000 		lds r20,(isa_tx_data_ready)+2
 1642 07ea 5091 0000 		lds r21,(isa_tx_data_ready)+3
 1643 07ee 2823      		and r18,r24
 1644 07f0 3923      		and r19,r25
 1645 07f2 4A23      		and r20,r26
 1646 07f4 5B23      		and r21,r27
 1647 07f6 2093 0000 		sts isa_tx_data_ready,r18
 1648 07fa 3093 0000 		sts (isa_tx_data_ready)+1,r19
 1649 07fe 4093 0000 		sts (isa_tx_data_ready)+2,r20
 1650 0802 5093 0000 		sts (isa_tx_data_ready)+3,r21
 1652               	.LM194:
 1653 0806 8091 0000 		lds r24,DHDR
 1654 080a 87FF      		sbrs r24,7
 1655 080c 00C0      		rjmp .L136
 1657               	.LM195:
 1658 080e 0E94 0000 		call rf_polling_rx_on
 1660               	.LM196:
 1661 0812 8D2D      		mov r24,r13
 1662 0814 0E94 0000 		call nrk_gpio_set
 1664               	.LM197:
 1665 0818 0E94 0000 		call _nrk_high_speed_timer_reset
 1667               	.LM198:
 1668 081c 60E0      		ldi r22,lo8(4096)
 1669 081e 70E1      		ldi r23,hi8(4096)
 1670 0820 80E0      		ldi r24,lo8(0)
 1671 0822 90E0      		ldi r25,hi8(0)
 1672 0824 0E94 0000 		call nrk_high_speed_timer_wait
 1674               	.LM199:
 1675 0828 0E94 0000 		call _nrk_os_timer_get
 1676 082c 8983      		std Y+1,r24
 1678               	.LM200:
 1679 082e 8981      		ldd r24,Y+1
 1680 0830 8E5F      		subi r24,lo8(-(2))
 1681 0832 8983      		std Y+1,r24
 1682 0834 00C0      		rjmp .L109
 1683               	.L110:
 1685               	.LM201:
 1686 0836 0E94 0000 		call _nrk_os_timer_get
 1687 083a 9981      		ldd r25,Y+1
 1688 083c 9817      		cp r25,r24
 1689 083e 00F0      		brlo .+2
 1690 0840 00C0      		rjmp .L109
 1692               	.LM202:
 1693 0842 8091 0000 		lds r24,previous_tx_slot
 1695               	.LM203:
 1696 0846 E816      		cp r14,r24
 1697 0848 01F4      		brne .L112
 1699               	.LM204:
 1700 084a 8091 0000 		lds r24,slot_expired
 1701 084e 9091 0000 		lds r25,(slot_expired)+1
 1702 0852 4996      		adiw r24,25
 1703 0854 9093 0000 		sts (slot_expired)+1,r25
 1704 0858 8093 0000 		sts slot_expired,r24
 1705 085c 00C0      		rjmp .L114
 1706               	.L112:
 1708               	.LM205:
 1709 085e E81A      		sub r14,r24
 1710 0860 2091 0000 		lds r18,slot_expired
 1711 0864 3091 0000 		lds r19,(slot_expired)+1
 1712 0868 4E2D      		mov r20,r14
 1713 086a 5527      		clr r21
 1714 086c 47FD      		sbrc r20,7
 1715 086e 5095      		com r21
 1717               	.LM206:
 1718 0870 1E14      		cp __zero_reg__,r14
 1719 0872 04F0      		brlt .L142
 1721               	.LM207:
 1722 0874 275E      		subi r18,lo8(-(25))
 1723 0876 3F4F      		sbci r19,hi8(-(25))
 1724               	.L142:
 1725 0878 240F      		add r18,r20
 1726 087a 351F      		adc r19,r21
 1727 087c 3093 0000 		sts (slot_expired)+1,r19
 1728 0880 2093 0000 		sts slot_expired,r18
 1729               	.L114:
 1731               	.LM208:
 1732 0884 0E94 0000 		call rf_rx_off
 1734               	.LM209:
 1735 0888 8D2D      		mov r24,r13
 1736 088a 0E94 0000 		call nrk_gpio_clr
 1738               	.LM210:
 1739 088e 6091 0000 		lds r22,__iob+2
 1740 0892 7091 0000 		lds r23,(__iob+2)+1
 1741 0896 83E7      		ldi r24,lo8(115)
 1742 0898 90E0      		ldi r25,hi8(115)
 1743 089a 0E94 0000 		call fputc
 1745               	.LM211:
 1746 089e 1F93      		push r17
 1747 08a0 0F93      		push r16
 1748 08a2 80E0      		ldi r24,lo8(.LC0)
 1749 08a4 90E0      		ldi r25,hi8(.LC0)
 1750 08a6 9F93      		push r25
 1751 08a8 8F93      		push r24
 1752 08aa 0E94 0000 		call printf
 1754               	.LM212:
 1755 08ae 8091 0000 		lds r24,packetsLost
 1756 08b2 9091 0000 		lds r25,(packetsLost)+1
 1757 08b6 0196      		adiw r24,1
 1758 08b8 9093 0000 		sts (packetsLost)+1,r25
 1759 08bc 8093 0000 		sts packetsLost,r24
 1761               	.LM213:
 1762 08c0 0F90      		pop __tmp_reg__
 1763 08c2 0F90      		pop __tmp_reg__
 1764 08c4 0F90      		pop __tmp_reg__
 1765 08c6 0F90      		pop __tmp_reg__
 1766 08c8 00C0      		rjmp .L136
 1767               	.L109:
 1769               	.LM214:
 1770 08ca 0E94 0000 		call rf_rx_check_sfd
 1771 08ce 8823      		tst r24
 1772 08d0 01F4      		brne .+2
 1773 08d2 00C0      		rjmp .L110
 1775               	.LM215:
 1776 08d4 0E94 0000 		call _nrk_os_timer_get
 1777 08d8 8983      		std Y+1,r24
 1779               	.LM216:
 1780 08da 8981      		ldd r24,Y+1
 1781 08dc 8E5F      		subi r24,lo8(-(2))
 1782 08de 8983      		std Y+1,r24
 1784               	.LM217:
 1785 08e0 85E0      		ldi r24,lo8(5)
 1786 08e2 E816      		cp r14,r24
 1787 08e4 01F0      		breq .L118
 1788 08e6 8091 0000 		lds r24,DHDRcount
 1789 08ea 9091 0000 		lds r25,(DHDRcount)+1
 1790 08ee 68EC      		ldi r22,lo8(200)
 1791 08f0 70E0      		ldi r23,hi8(200)
 1792 08f2 0E94 0000 		call __udivmodhi4
 1793 08f6 892B      		or r24,r25
 1794 08f8 01F4      		brne .L118
 1795 08fa 14E0      		ldi r17,lo8(4)
 1796 08fc 00C0      		rjmp .L121
 1797               	.L118:
 1798 08fe 12E0      		ldi r17,lo8(2)
 1799               	.L121:
 1801               	.LM218:
 1802 0900 8091 0000 		lds r24,isa_node_mode
 1803 0904 8230      		cpi r24,lo8(2)
 1804 0906 01F4      		brne .L137
 1805 0908 12E0      		ldi r17,lo8(2)
 1806 090a 00C0      		rjmp .L137
 1807               	.L124:
 1809               	.LM219:
 1810 090c 0E94 0000 		call _nrk_os_timer_get
 1811 0910 9981      		ldd r25,Y+1
 1812 0912 9817      		cp r25,r24
 1813 0914 00F4      		brsh .L137
 1815               	.LM220:
 1816 0916 80E0      		ldi r24,lo8(.LC1)
 1817 0918 90E0      		ldi r25,hi8(.LC1)
 1818 091a 9F93      		push r25
 1819 091c 8F93      		push r24
 1820 091e 0E94 0000 		call printf
 1822               	.LM221:
 1823 0922 8091 0000 		lds r24,packetsLost
 1824 0926 9091 0000 		lds r25,(packetsLost)+1
 1825 092a 0196      		adiw r24,1
 1826 092c 9093 0000 		sts (packetsLost)+1,r25
 1827 0930 8093 0000 		sts packetsLost,r24
 1829               	.LM222:
 1830 0934 0E94 0000 		call _nrk_os_timer_get
 1831 0938 8093 0000 		sts tmp_curSec,r24
 1833               	.LM223:
 1834 093c 0F90      		pop __tmp_reg__
 1835 093e 0F90      		pop __tmp_reg__
 1836 0940 00C0      		rjmp .L136
 1837               	.L137:
 1839               	.LM224:
 1840 0942 612F      		mov r22,r17
 1841 0944 81E0      		ldi r24,lo8(1)
 1842 0946 0E94 0000 		call rf_polling_rx_packet
 1843 094a 082F      		mov r16,r24
 1844 094c 8823      		tst r24
 1845 094e 01F0      		breq .L124
 1847               	.LM225:
 1848 0950 8130      		cpi r24,lo8(1)
 1849 0952 01F4      		brne .+2
 1850 0954 00C0      		rjmp .L127
 1852               	.LM226:
 1853 0956 6091 0000 		lds r22,__iob+2
 1854 095a 7091 0000 		lds r23,(__iob+2)+1
 1855 095e 86E6      		ldi r24,lo8(102)
 1856 0960 90E0      		ldi r25,hi8(102)
 1857 0962 0E94 0000 		call fputc
 1859               	.LM227:
 1860 0966 8091 0000 		lds r24,packetsLost
 1861 096a 9091 0000 		lds r25,(packetsLost)+1
 1862 096e 0196      		adiw r24,1
 1863 0970 9093 0000 		sts (packetsLost)+1,r25
 1864 0974 8093 0000 		sts packetsLost,r24
 1865               	.L129:
 1867               	.LM228:
 1868 0978 8D2D      		mov r24,r13
 1869 097a 0E94 0000 		call nrk_gpio_clr
 1871               	.LM229:
 1872 097e 0130      		cpi r16,lo8(1)
 1873 0980 01F0      		breq .+2
 1874 0982 00C0      		rjmp .L136
 1876               	.LM230:
 1877 0984 8091 0000 		lds r24,rxCount
 1878 0988 9091 0000 		lds r25,(rxCount)+1
 1879 098c 0196      		adiw r24,1
 1880 098e 9093 0000 		sts (rxCount)+1,r25
 1881 0992 8093 0000 		sts rxCount,r24
 1883               	.LM231:
 1884 0996 1092 0000 		sts (slot_expired)+1,__zero_reg__
 1885 099a 1092 0000 		sts slot_expired,__zero_reg__
 1887               	.LM232:
 1888 099e E091 0000 		lds r30,isa_rfRxInfo+5
 1889 09a2 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 1890 09a6 9081      		ld r25,Z
 1891 09a8 9093 0000 		sts DHR,r25
 1893               	.LM233:
 1894 09ac 8091 0000 		lds r24,DHDR
 1895 09b0 87FF      		sbrs r24,7
 1896 09b2 00C0      		rjmp .L136
 1898               	.LM234:
 1899 09b4 97FF      		sbrs r25,7
 1900 09b6 00C0      		rjmp .L136
 1902               	.LM235:
 1903 09b8 8181      		ldd r24,Z+1
 1904 09ba 9927      		clr r25
 1905 09bc 982F      		mov r25,r24
 1906 09be 8827      		clr r24
 1907 09c0 2281      		ldd r18,Z+2
 1908 09c2 3327      		clr r19
 1909 09c4 822B      		or r24,r18
 1910 09c6 932B      		or r25,r19
 1911 09c8 9093 0000 		sts (offsetX)+1,r25
 1912 09cc 8093 0000 		sts offsetX,r24
 1914               	.LM236:
 1915 09d0 80E0      		ldi r24,lo8(0)
 1916 09d2 90E0      		ldi r25,hi8(0)
 1917 09d4 0E94 0000 		call nrk_led_toggle
 1919               	.LM237:
 1920 09d8 6091 0000 		lds r22,__iob+2
 1921 09dc 7091 0000 		lds r23,(__iob+2)+1
 1922 09e0 81E6      		ldi r24,lo8(97)
 1923 09e2 90E0      		ldi r25,hi8(97)
 1924 09e4 0E94 0000 		call fputc
 1926               	.LM238:
 1927 09e8 C090 0000 		lds r12,offsetX
 1928 09ec D090 0000 		lds r13,(offsetX)+1
 1929 09f0 8091 0000 		lds r24,offsetY
 1930 09f4 9091 0000 		lds r25,(offsetY)+1
 1931 09f8 C81A      		sub r12,r24
 1932 09fa D90A      		sbc r13,r25
 1934               	.LM239:
 1935 09fc 82E3      		ldi r24,lo8(50)
 1936 09fe 8983      		std Y+1,r24
 1938               	.LM240:
 1939 0a00 0E94 0000 		call _nrk_os_timer_get
 1940 0a04 B82E      		mov r11,r24
 1942               	.LM241:
 1943 0a06 A090 0000 		lds r10,NRK_DEBUG_2
 1944 0a0a 8A2D      		mov r24,r10
 1945 0a0c 0E94 0000 		call nrk_gpio_set
 1947               	.LM242:
 1948 0a10 D7FC      		sbrc r13,7
 1949 0a12 00C0      		rjmp .L133
 1951               	.LM243:
 1952 0a14 B092 0000 		sts tmp_curSec,r11
 1954               	.LM244:
 1955 0a18 0E94 0000 		call _nrk_os_timer_stop
 1957               	.LM245:
 1958 0a1c 64E6      		ldi r22,lo8(6500)
 1959 0a1e E62E      		mov r14,r22
 1960 0a20 69E1      		ldi r22,hi8(6500)
 1961 0a22 F62E      		mov r15,r22
 1962 0a24 C601      		movw r24,r12
 1963 0a26 64E6      		ldi r22,lo8(6500)
 1964 0a28 79E1      		ldi r23,hi8(6500)
 1965 0a2a 0E94 0000 		call __divmodhi4
 1966 0a2e 8B01      		movw r16,r22
 1967 0a30 0F5F      		subi r16,lo8(-(1))
 1969               	.LM246:
 1970 0a32 0093 0000 		sts tmp_offsetSec,r16
 1972               	.LM247:
 1973 0a36 C601      		movw r24,r12
 1974 0a38 64E6      		ldi r22,lo8(6500)
 1975 0a3a 79E1      		ldi r23,hi8(6500)
 1976 0a3c 0E94 0000 		call __divmodhi4
 1977 0a40 E81A      		sub r14,r24
 1978 0a42 F90A      		sbc r15,r25
 1980               	.LM248:
 1981 0a44 F092 0000 		sts (tmp_offsetNanoSec)+1,r15
 1982 0a48 E092 0000 		sts tmp_offsetNanoSec,r14
 1984               	.LM249:
 1985 0a4c 0E94 0000 		call _nrk_high_speed_timer_reset
 1987               	.LM250:
 1988 0a50 82E3      		ldi r24,lo8(50)
 1989 0a52 90E0      		ldi r25,hi8(50)
 1990 0a54 0E94 0000 		call nrk_spin_wait_us
 1992               	.LM251:
 1993 0a58 B701      		movw r22,r14
 1994 0a5a 80E0      		ldi r24,lo8(0)
 1995 0a5c 90E0      		ldi r25,hi8(0)
 1996 0a5e 0E94 0000 		call nrk_high_speed_timer_wait
 1998               	.LM252:
 1999 0a62 8B2D      		mov r24,r11
 2000 0a64 800F      		add r24,r16
 2001 0a66 0E94 0000 		call _nrk_os_timer_set
 2003               	.LM253:
 2004 0a6a 84E6      		ldi r24,lo8(100)
 2005 0a6c 90E0      		ldi r25,hi8(100)
 2006 0a6e 0E94 0000 		call nrk_spin_wait_us
 2007 0a72 00C0      		rjmp .L143
 2008               	.L133:
 2010               	.LM254:
 2011 0a74 6091 0000 		lds r22,__iob+2
 2012 0a78 7091 0000 		lds r23,(__iob+2)+1
 2013 0a7c 81E2      		ldi r24,lo8(33)
 2014 0a7e 90E0      		ldi r25,hi8(33)
 2015 0a80 0E94 0000 		call fputc
 2017               	.LM255:
 2018 0a84 0E94 0000 		call _nrk_os_timer_stop
 2020               	.LM256:
 2021 0a88 0E94 0000 		call _nrk_high_speed_timer_reset
 2023               	.LM257:
 2024 0a8c 6627      		clr r22
 2025 0a8e 7727      		clr r23
 2026 0a90 6C19      		sub r22,r12
 2027 0a92 7D09      		sbc r23,r13
 2028 0a94 80E0      		ldi r24,lo8(0)
 2029 0a96 90E0      		ldi r25,hi8(0)
 2030 0a98 0E94 0000 		call nrk_high_speed_timer_wait
 2032               	.LM258:
 2033 0a9c 8B2D      		mov r24,r11
 2034 0a9e 0E94 0000 		call _nrk_os_timer_set
 2035               	.L143:
 2037               	.LM259:
 2038 0aa2 0E94 0000 		call _nrk_os_timer_start
 2040               	.LM260:
 2041 0aa6 0E94 0000 		call _nrk_high_speed_timer_reset
 2043               	.LM261:
 2044 0aaa 82E3      		ldi r24,lo8(50)
 2045 0aac 90E0      		ldi r25,hi8(50)
 2046 0aae 0E94 0000 		call nrk_spin_wait_us
 2048               	.LM262:
 2049 0ab2 8A2D      		mov r24,r10
 2050 0ab4 0E94 0000 		call nrk_gpio_clr
 2051 0ab8 00C0      		rjmp .L136
 2052               	.L127:
 2054               	.LM263:
 2055 0aba 0E94 0000 		call rf_rx_off
 2056 0abe 00C0      		rjmp .L129
 2057               	.L136:
 2058               	/* epilogue: frame size=1 */
 2059 0ac0 2196      		adiw r28,1
 2060 0ac2 0FB6      		in __tmp_reg__,__SREG__
 2061 0ac4 F894      		cli
 2062 0ac6 DEBF      		out __SP_H__,r29
 2063 0ac8 0FBE      		out __SREG__,__tmp_reg__
 2064 0aca CDBF      		out __SP_L__,r28
 2065 0acc DF91      		pop r29
 2066 0ace CF91      		pop r28
 2067 0ad0 1F91      		pop r17
 2068 0ad2 0F91      		pop r16
 2069 0ad4 FF90      		pop r15
 2070 0ad6 EF90      		pop r14
 2071 0ad8 DF90      		pop r13
 2072 0ada CF90      		pop r12
 2073 0adc BF90      		pop r11
 2074 0ade AF90      		pop r10
 2075 0ae0 0895      		ret
 2076               	/* epilogue end (size=17) */
 2077               	/* function _isa_tx size 528 (493) */
 2088               	.Lscope18:
 2090               		.stabd	78,0,0
 2092               	.global	isa_wait_until_rx_or_tx
 2094               	isa_wait_until_rx_or_tx:
 2095               		.stabd	46,0,0
 2097               	.LM264:
 2098               	.LFBB19:
 2099               	/* prologue: frame size=0 */
 2100               	/* prologue end (size=0) */
 2102               	.LM265:
 2103 0ae2 8091 0000 		lds r24,isa_rx_pkt_signal
 2104 0ae6 0E94 0000 		call nrk_signal_register
 2106               	.LM266:
 2107 0aea 8091 0000 		lds r24,isa_tx_done_signal
 2108 0aee 0E94 0000 		call nrk_signal_register
 2110               	.LM267:
 2111 0af2 21E0      		ldi r18,lo8(1)
 2112 0af4 30E0      		ldi r19,hi8(1)
 2113 0af6 40E0      		ldi r20,hlo8(1)
 2114 0af8 50E0      		ldi r21,hhi8(1)
 2115 0afa CA01      		movw r24,r20
 2116 0afc B901      		movw r22,r18
 2117 0afe 0090 0000 		lds r0,isa_tx_done_signal
 2118 0b02 00C0      		rjmp 2f
 2119 0b04 660F      	1:	lsl r22
 2120 0b06 771F      		rol r23
 2121 0b08 881F      		rol r24
 2122 0b0a 991F      		rol r25
 2123 0b0c 0A94      	2:	dec r0
 2124 0b0e 02F4      		brpl 1b
 2125 0b10 0090 0000 		lds r0,isa_rx_pkt_signal
 2126 0b14 00C0      		rjmp 2f
 2127 0b16 220F      	1:	lsl r18
 2128 0b18 331F      		rol r19
 2129 0b1a 441F      		rol r20
 2130 0b1c 551F      		rol r21
 2131 0b1e 0A94      	2:	dec r0
 2132 0b20 02F4      		brpl 1b
 2133 0b22 622B      		or r22,r18
 2134 0b24 732B      		or r23,r19
 2135 0b26 842B      		or r24,r20
 2136 0b28 952B      		or r25,r21
 2137 0b2a 0E94 0000 		call nrk_event_wait
 2139               	.LM268:
 2140 0b2e 81E0      		ldi r24,lo8(1)
 2141 0b30 90E0      		ldi r25,hi8(1)
 2142               	/* epilogue: frame size=0 */
 2143 0b32 0895      		ret
 2144               	/* epilogue end (size=1) */
 2145               	/* function isa_wait_until_rx_or_tx size 41 (40) */
 2147               	.Lscope19:
 2149               		.stabd	78,0,0
 2152               	.global	isa_set_channel
 2154               	isa_set_channel:
 2155               		.stabd	46,0,0
 2157               	.LM269:
 2158               	.LFBB20:
 2159               	/* prologue: frame size=0 */
 2160               	/* prologue end (size=0) */
 2162               	.LM270:
 2163 0b34 8093 0000 		sts isa_param+2,r24
 2165               	.LM271:
 2166 0b38 0E94 0000 		call rf_set_channel
 2167               	/* epilogue: frame size=0 */
 2168 0b3c 0895      		ret
 2169               	/* epilogue end (size=1) */
 2170               	/* function isa_set_channel size 5 (4) */
 2172               	.Lscope20:
 2174               		.stabd	78,0,0
 2176               	.global	isa_nw_task
 2178               	isa_nw_task:
 2179               		.stabd	46,0,0
 2181               	.LM272:
 2182               	.LFBB21:
 2183               	/* prologue: frame size=0 */
 2184 0b3e BF92      		push r11
 2185 0b40 CF92      		push r12
 2186 0b42 DF92      		push r13
 2187 0b44 EF92      		push r14
 2188 0b46 FF92      		push r15
 2189 0b48 0F93      		push r16
 2190 0b4a 1F93      		push r17
 2191 0b4c CF93      		push r28
 2192 0b4e DF93      		push r29
 2193               	/* prologue end (size=9) */
 2195               	.LM273:
 2196 0b50 1092 0000 		sts _isa_ready,__zero_reg__
 2197               	.L149:
 2199               	.LM274:
 2200 0b54 0E94 0000 		call nrk_wait_until_next_period
 2202               	.LM275:
 2203 0b58 8091 0000 		lds r24,_isa_ready
 2204 0b5c 8823      		tst r24
 2205 0b5e 01F0      		breq .L149
 2207               	.LM276:
 2208 0b60 81E0      		ldi r24,lo8(1)
 2209 0b62 8093 0000 		sts _isa_ready,r24
 2211               	.LM277:
 2212 0b66 B090 0000 		lds r11,NRK_DEBUG_1
 2213               	.L175:
 2214 0b6a CC24      		clr r12
 2215 0b6c DD24      		clr r13
 2216               	.L174:
 2217 0b6e 8B2D      		mov r24,r11
 2218 0b70 0E94 0000 		call nrk_gpio_set
 2220               	.LM278:
 2221 0b74 8B2D      		mov r24,r11
 2222 0b76 0E94 0000 		call nrk_gpio_clr
 2224               	.LM279:
 2225 0b7a 0E94 0000 		call _nrk_high_speed_timer_reset
 2227               	.LM280:
 2228 0b7e 0E94 0000 		call _nrk_high_speed_timer_get
 2229 0b82 9093 0000 		sts (slot_start_time)+1,r25
 2230 0b86 8093 0000 		sts slot_start_time,r24
 2232               	.LM281:
 2233 0b8a 8091 0000 		lds r24,global_slot
 2234 0b8e 9091 0000 		lds r25,(global_slot)+1
 2235 0b92 9093 0000 		sts (current_global_slot)+1,r25
 2236 0b96 8093 0000 		sts current_global_slot,r24
 2238               	.LM282:
 2239 0b9a 8091 0000 		lds r24,global_slot
 2240 0b9e 9091 0000 		lds r25,(global_slot)+1
 2241 0ba2 8536      		cpi r24,101
 2242 0ba4 9105      		cpc r25,__zero_reg__
 2243 0ba6 00F0      		brlo .L152
 2245               	.LM283:
 2246 0ba8 8091 0000 		lds r24,global_slot
 2247 0bac 9091 0000 		lds r25,(global_slot)+1
 2248 0bb0 8456      		subi r24,lo8(-(-100))
 2249 0bb2 9040      		sbci r25,hi8(-(-100))
 2250 0bb4 9093 0000 		sts (global_slot)+1,r25
 2251 0bb8 8093 0000 		sts global_slot,r24
 2253               	.LM284:
 2254 0bbc 8091 0000 		lds r24,global_cycle
 2255 0bc0 9091 0000 		lds r25,(global_cycle)+1
 2256 0bc4 0196      		adiw r24,1
 2257 0bc6 9093 0000 		sts (global_cycle)+1,r25
 2258 0bca 8093 0000 		sts global_cycle,r24
 2259               	.L152:
 2261               	.LM285:
 2262 0bce 2091 0000 		lds r18,global_slot
 2263 0bd2 3091 0000 		lds r19,(global_slot)+1
 2265               	.LM286:
 2266 0bd6 8091 0000 		lds r24,_isa_sync_ok
 2267 0bda 8130      		cpi r24,lo8(1)
 2268 0bdc 01F0      		breq .+2
 2269 0bde 00C0      		rjmp .L154
 2271               	.LM287:
 2272 0be0 C901      		movw r24,r18
 2273 0be2 69E1      		ldi r22,lo8(25)
 2274 0be4 70E0      		ldi r23,hi8(25)
 2275 0be6 0E94 0000 		call __udivmodhi4
 2276 0bea EC01      		movw r28,r24
 2278               	.LM288:
 2279 0bec B1E0      		ldi r27,lo8(1)
 2280 0bee EB2E      		mov r14,r27
 2281 0bf0 F12C      		mov r15,__zero_reg__
 2282 0bf2 012D      		mov r16,__zero_reg__
 2283 0bf4 112D      		mov r17,__zero_reg__
 2284 0bf6 00C0      		rjmp 2f
 2285 0bf8 EE0C      	1:	lsl r14
 2286 0bfa FF1C      		rol r15
 2287 0bfc 001F      		rol r16
 2288 0bfe 111F      		rol r17
 2289 0c00 8A95      	2:	dec r24
 2290 0c02 02F4      		brpl 1b
 2292               	.LM289:
 2293 0c04 E091 0000 		lds r30,channelIndex
 2294 0c08 EC0D      		add r30,r12
 2295 0c0a E093 0000 		sts channelIndex,r30
 2297               	.LM290:
 2298 0c0e FF27      		clr r31
 2299 0c10 EF70      		andi r30,lo8(15)
 2300 0c12 F070      		andi r31,hi8(15)
 2301 0c14 E050      		subi r30,lo8(-(slottedPattern))
 2302 0c16 F040      		sbci r31,hi8(-(slottedPattern))
 2303 0c18 8081      		ld r24,Z
 2304 0c1a 8093 0000 		sts currentChannel,r24
 2306               	.LM291:
 2307 0c1e 0E94 0000 		call isa_set_channel
 2309               	.LM292:
 2310 0c22 8091 0000 		lds r24,isa_tdma_tx_mask
 2311 0c26 9091 0000 		lds r25,(isa_tdma_tx_mask)+1
 2312 0c2a A091 0000 		lds r26,(isa_tdma_tx_mask)+2
 2313 0c2e B091 0000 		lds r27,(isa_tdma_tx_mask)+3
 2314 0c32 2091 0000 		lds r18,isa_tx_data_ready
 2315 0c36 3091 0000 		lds r19,(isa_tx_data_ready)+1
 2316 0c3a 4091 0000 		lds r20,(isa_tx_data_ready)+2
 2317 0c3e 5091 0000 		lds r21,(isa_tx_data_ready)+3
 2318 0c42 8223      		and r24,r18
 2319 0c44 9323      		and r25,r19
 2320 0c46 A423      		and r26,r20
 2321 0c48 B523      		and r27,r21
 2322 0c4a 8E21      		and r24,r14
 2323 0c4c 9F21      		and r25,r15
 2324 0c4e A023      		and r26,r16
 2325 0c50 B123      		and r27,r17
 2326 0c52 0097      		sbiw r24,0
 2327 0c54 A105      		cpc r26,__zero_reg__
 2328 0c56 B105      		cpc r27,__zero_reg__
 2329 0c58 01F0      		breq .L156
 2331               	.LM293:
 2332 0c5a 8C2F      		mov r24,r28
 2333 0c5c 0E94 0000 		call _isa_tx
 2335               	.LM294:
 2336 0c60 C093 0000 		sts previous_tx_slot,r28
 2337 0c64 00C0      		rjmp .L158
 2338               	.L156:
 2340               	.LM295:
 2341 0c66 8091 0000 		lds r24,isa_tdma_rx_mask
 2342 0c6a 9091 0000 		lds r25,(isa_tdma_rx_mask)+1
 2343 0c6e A091 0000 		lds r26,(isa_tdma_rx_mask)+2
 2344 0c72 B091 0000 		lds r27,(isa_tdma_rx_mask)+3
 2345 0c76 E822      		and r14,r24
 2346 0c78 F922      		and r15,r25
 2347 0c7a 0A23      		and r16,r26
 2348 0c7c 1B23      		and r17,r27
 2349 0c7e E114      		cp r14,__zero_reg__
 2350 0c80 F104      		cpc r15,__zero_reg__
 2351 0c82 0105      		cpc r16,__zero_reg__
 2352 0c84 1105      		cpc r17,__zero_reg__
 2353 0c86 01F0      		breq .L158
 2354 0c88 8091 0000 		lds r24,isa_rx_data_ready
 2355 0c8c 9091 0000 		lds r25,(isa_rx_data_ready)+1
 2356 0c90 A091 0000 		lds r26,(isa_rx_data_ready)+2
 2357 0c94 B091 0000 		lds r27,(isa_rx_data_ready)+3
 2358 0c98 0097      		sbiw r24,0
 2359 0c9a A105      		cpc r26,__zero_reg__
 2360 0c9c B105      		cpc r27,__zero_reg__
 2361 0c9e 01F4      		brne .L158
 2363               	.LM296:
 2364 0ca0 8C2F      		mov r24,r28
 2365 0ca2 0E94 0000 		call _isa_rx
 2366 0ca6 00C0      		rjmp .L158
 2367               	.L154:
 2369               	.LM297:
 2370 0ca8 80E0      		ldi r24,lo8(0)
 2371 0caa 0E94 0000 		call configDHDR
 2372 0cae 8093 0000 		sts DHDR,r24
 2374               	.LM298:
 2375 0cb2 8091 0000 		lds r24,isa_node_mode
 2376 0cb6 8230      		cpi r24,lo8(2)
 2377 0cb8 01F0      		breq .L161
 2379               	.LM299:
 2380 0cba 1092 0000 		sts (DHDRcount)+1,__zero_reg__
 2381 0cbe 1092 0000 		sts DHDRcount,__zero_reg__
 2383               	.LM300:
 2384 0cc2 0E94 0000 		call _isa_init_sync
 2385 0cc6 00C0      		rjmp .L176
 2386               	.L161:
 2388               	.LM301:
 2389 0cc8 81E0      		ldi r24,lo8(1)
 2390               	.L176:
 2391 0cca 8093 0000 		sts _isa_sync_ok,r24
 2392               	.L158:
 2394               	.LM302:
 2395 0cce 2091 0000 		lds r18,slot_expired
 2396 0cd2 3091 0000 		lds r19,(slot_expired)+1
 2397 0cd6 8091 0000 		lds r24,EXPIRATION
 2398 0cda 9091 0000 		lds r25,(EXPIRATION)+1
 2399 0cde 2817      		cp r18,r24
 2400 0ce0 3907      		cpc r19,r25
 2401 0ce2 00F0      		brlo .L163
 2402 0ce4 8091 0000 		lds r24,isa_node_mode
 2403 0ce8 8230      		cpi r24,lo8(2)
 2404 0cea 01F0      		breq .L163
 2406               	.LM303:
 2407 0cec 1092 0000 		sts _isa_sync_ok,__zero_reg__
 2409               	.LM304:
 2410 0cf0 1092 0000 		sts (slot_expired)+1,__zero_reg__
 2411 0cf4 1092 0000 		sts slot_expired,__zero_reg__
 2413               	.LM305:
 2414 0cf8 1092 0000 		sts (global_slot)+1,__zero_reg__
 2415 0cfc 1092 0000 		sts global_slot,__zero_reg__
 2417               	.LM306:
 2418 0d00 8091 0000 		lds r24,resync_times
 2419 0d04 9091 0000 		lds r25,(resync_times)+1
 2420 0d08 0196      		adiw r24,1
 2421 0d0a 9093 0000 		sts (resync_times)+1,r25
 2422 0d0e 8093 0000 		sts resync_times,r24
 2424               	.LM307:
 2425 0d12 8091 0000 		lds r24,isa_id
 2426 0d16 8823      		tst r24
 2427 0d18 01F0      		breq .L166
 2429               	.LM308:
 2430 0d1a E091 0000 		lds r30,isa_clk_src_id
 2431 0d1e E093 0000 		sts channelIndex,r30
 2433               	.LM309:
 2434 0d22 FF27      		clr r31
 2435 0d24 E050      		subi r30,lo8(-(slottedPattern))
 2436 0d26 F040      		sbci r31,hi8(-(slottedPattern))
 2437 0d28 8081      		ld r24,Z
 2438 0d2a 00C0      		rjmp .L177
 2439               	.L166:
 2441               	.LM310:
 2442 0d2c 1092 0000 		sts channelIndex,__zero_reg__
 2444               	.LM311:
 2445 0d30 8091 0000 		lds r24,slottedPattern
 2446               	.L177:
 2447 0d34 8093 0000 		sts currentChannel,r24
 2449               	.LM312:
 2450 0d38 8091 0000 		lds r24,currentChannel
 2451 0d3c 0E94 0000 		call isa_set_channel
 2452 0d40 00C0      		rjmp .L175
 2453               	.L163:
 2455               	.LM313:
 2456 0d42 8091 0000 		lds r24,global_slot
 2457 0d46 9091 0000 		lds r25,(global_slot)+1
 2458 0d4a 0E94 0000 		call isa_get_slots_until_next_wakeup
 2459 0d4e 6C01      		movw r12,r24
 2461               	.LM314:
 2462 0d50 8091 0000 		lds r24,global_slot
 2463 0d54 9091 0000 		lds r25,(global_slot)+1
 2464 0d58 8C0D      		add r24,r12
 2465 0d5a 9D1D      		adc r25,r13
 2466 0d5c 9093 0000 		sts (global_slot)+1,r25
 2467 0d60 8093 0000 		sts global_slot,r24
 2469               	.LM315:
 2470 0d64 80E0      		ldi r24,lo8(0)
 2471 0d66 90E0      		ldi r25,hi8(0)
 2472 0d68 0E94 0000 		call nrk_led_clr
 2474               	.LM316:
 2475 0d6c 1092 0000 		sts (offsetY)+1,__zero_reg__
 2476 0d70 1092 0000 		sts offsetY,__zero_reg__
 2478               	.LM317:
 2479 0d74 C601      		movw r24,r12
 2480 0d76 0E94 0000 		call nrk_wait_until_next_n_periods
 2482               	.LM318:
 2483 0d7a 80E0      		ldi r24,lo8(0)
 2484 0d7c 90E0      		ldi r25,hi8(0)
 2485 0d7e 0E94 0000 		call nrk_led_set
 2486 0d82 00C0      		rjmp .L174
 2487               	/* epilogue: frame size=0 */
 2488               	/* epilogue: noreturn */
 2489               	/* epilogue end (size=0) */
 2490               	/* function isa_nw_task size 292 (283) */
 2496               	.Lscope21:
 2498               		.stabd	78,0,0
 2503               	.global	isa_init
 2505               	isa_init:
 2506               		.stabd	46,0,0
 2508               	.LM319:
 2509               	.LFBB22:
 2510               	/* prologue: frame size=0 */
 2511 0d84 FF92      		push r15
 2512 0d86 0F93      		push r16
 2513 0d88 1F93      		push r17
 2514               	/* prologue end (size=3) */
 2515 0d8a 082F      		mov r16,r24
 2516 0d8c F62E      		mov r15,r22
 2517 0d8e 142F      		mov r17,r20
 2519               	.LM320:
 2520 0d90 0E94 0000 		call nrk_signal_create
 2521 0d94 8093 0000 		sts isa_rx_pkt_signal,r24
 2523               	.LM321:
 2524 0d98 8F3F      		cpi r24,lo8(-1)
 2525 0d9a 01F4      		brne .L179
 2527               	.LM322:
 2528 0d9c 80E0      		ldi r24,lo8(__c.2648)
 2529 0d9e 90E0      		ldi r25,hi8(__c.2648)
 2530 0da0 00C0      		rjmp .L193
 2531               	.L179:
 2533               	.LM323:
 2534 0da2 0E94 0000 		call nrk_signal_create
 2535 0da6 8093 0000 		sts isa_tx_done_signal,r24
 2537               	.LM324:
 2538 0daa 8F3F      		cpi r24,lo8(-1)
 2539 0dac 01F4      		brne .L182
 2541               	.LM325:
 2542 0dae 80E0      		ldi r24,lo8(__c.2650)
 2543 0db0 90E0      		ldi r25,hi8(__c.2650)
 2544               	.L193:
 2545 0db2 0E94 0000 		call nrk_kprintf
 2547               	.LM326:
 2548 0db6 E091 0000 		lds r30,nrk_cur_task_TCB
 2549 0dba F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 2550 0dbe 6085      		ldd r22,Z+8
 2551 0dc0 8EE0      		ldi r24,lo8(14)
 2552 0dc2 0E94 0000 		call nrk_kernel_error_add
 2553 0dc6 8FEF      		ldi r24,lo8(255)
 2554 0dc8 90E0      		ldi r25,hi8(255)
 2555 0dca 00C0      		rjmp .L181
 2556               	.L182:
 2558               	.LM327:
 2559 0dcc 1092 0000 		sts (isa_rfRxInfo+5)+1,__zero_reg__
 2560 0dd0 1092 0000 		sts isa_rfRxInfo+5,__zero_reg__
 2562               	.LM328:
 2563 0dd4 1092 0000 		sts isa_rfRxInfo+4,__zero_reg__
 2565               	.LM329:
 2566 0dd8 0E94 0000 		call _nrk_high_speed_timer_start
 2568               	.LM330:
 2569 0ddc 1092 0000 		sts (global_cycle)+1,__zero_reg__
 2570 0de0 1092 0000 		sts global_cycle,__zero_reg__
 2572               	.LM331:
 2573 0de4 84E6      		ldi r24,lo8(100)
 2574 0de6 90E0      		ldi r25,hi8(100)
 2575 0de8 9093 0000 		sts (global_slot)+1,r25
 2576 0dec 8093 0000 		sts global_slot,r24
 2578               	.LM332:
 2579 0df0 1092 0000 		sts _isa_sync_ok,__zero_reg__
 2581               	.LM333:
 2582 0df4 1092 0000 		sts _isa_join_ok,__zero_reg__
 2584               	.LM334:
 2585 0df8 1092 0000 		sts (slot_expired)+1,__zero_reg__
 2586 0dfc 1092 0000 		sts slot_expired,__zero_reg__
 2588               	.LM335:
 2589 0e00 0093 0000 		sts isa_node_mode,r16
 2591               	.LM336:
 2592 0e04 F092 0000 		sts isa_id,r15
 2594               	.LM337:
 2595 0e08 1093 0000 		sts isa_clk_src_id,r17
 2597               	.LM338:
 2598 0e0c 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 2599 0e10 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 2600 0e14 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 2601 0e18 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 2603               	.LM339:
 2604 0e1c 1092 0000 		sts isa_tx_data_ready,__zero_reg__
 2605 0e20 1092 0000 		sts (isa_tx_data_ready)+1,__zero_reg__
 2606 0e24 1092 0000 		sts (isa_tx_data_ready)+2,__zero_reg__
 2607 0e28 1092 0000 		sts (isa_tx_data_ready)+3,__zero_reg__
 2609               	.LM340:
 2610 0e2c 84E6      		ldi r24,lo8(100)
 2611 0e2e 8093 0000 		sts isa_param+8,r24
 2613               	.LM341:
 2614 0e32 80E4      		ldi r24,lo8(8000)
 2615 0e34 9FE1      		ldi r25,hi8(8000)
 2616 0e36 9093 0000 		sts (isa_param+6)+1,r25
 2617 0e3a 8093 0000 		sts isa_param+6,r24
 2619               	.LM342:
 2620 0e3e 80EA      		ldi r24,lo8(4000)
 2621 0e40 9FE0      		ldi r25,hi8(4000)
 2622 0e42 9093 0000 		sts (isa_param+4)+1,r25
 2623 0e46 8093 0000 		sts isa_param+4,r24
 2625               	.LM343:
 2626 0e4a 8FE0      		ldi r24,lo8(15)
 2627 0e4c 8093 0000 		sts isa_param+2,r24
 2629               	.LM344:
 2630 0e50 81E8      		ldi r24,lo8(6529)
 2631 0e52 99E1      		ldi r25,hi8(6529)
 2632 0e54 9093 0000 		sts (isa_param)+1,r25
 2633 0e58 8093 0000 		sts isa_param,r24
 2634 0e5c E0E0      		ldi r30,lo8(isa_sched)
 2635 0e5e F0E0      		ldi r31,hi8(isa_sched)
 2636               	.L184:
 2638               	.LM345:
 2639 0e60 1192      		st Z+,__zero_reg__
 2641               	.LM346:
 2642 0e62 80E0      		ldi r24,hi8(isa_sched+25)
 2643 0e64 E030      		cpi r30,lo8(isa_sched+25)
 2644 0e66 F807      		cpc r31,r24
 2645 0e68 01F4      		brne .L184
 2647               	.LM347:
 2648 0e6a 1092 0000 		sts isa_tdma_rx_mask,__zero_reg__
 2649 0e6e 1092 0000 		sts (isa_tdma_rx_mask)+1,__zero_reg__
 2650 0e72 1092 0000 		sts (isa_tdma_rx_mask)+2,__zero_reg__
 2651 0e76 1092 0000 		sts (isa_tdma_rx_mask)+3,__zero_reg__
 2653               	.LM348:
 2654 0e7a 1092 0000 		sts isa_tdma_tx_mask,__zero_reg__
 2655 0e7e 1092 0000 		sts (isa_tdma_tx_mask)+1,__zero_reg__
 2656 0e82 1092 0000 		sts (isa_tdma_tx_mask)+2,__zero_reg__
 2657 0e86 1092 0000 		sts (isa_tdma_tx_mask)+3,__zero_reg__
 2659               	.LM349:
 2660 0e8a 21E8      		ldi r18,lo8(6529)
 2661 0e8c 39E1      		ldi r19,hi8(6529)
 2662 0e8e 41E2      		ldi r20,lo8(9249)
 2663 0e90 54E2      		ldi r21,hi8(9249)
 2664 0e92 6FE0      		ldi r22,lo8(15)
 2665 0e94 80E0      		ldi r24,lo8(isa_rfRxInfo)
 2666 0e96 90E0      		ldi r25,hi8(isa_rfRxInfo)
 2667 0e98 0E94 0000 		call rf_init
 2669               	.LM350:
 2670 0e9c 81E0      		ldi r24,lo8(1)
 2671 0e9e 8093 0000 		sts AFTER_FIRST_SYNC,r24
 2673               	.LM351:
 2674 0ea2 1092 0000 		sts slowIndex,__zero_reg__
 2676               	.LM352:
 2677 0ea6 FF20      		tst r15
 2678 0ea8 01F0      		breq .L186
 2680               	.LM353:
 2681 0eaa 1093 0000 		sts channelIndex,r17
 2683               	.LM354:
 2684 0eae E12F      		mov r30,r17
 2685 0eb0 FF27      		clr r31
 2686 0eb2 E050      		subi r30,lo8(-(slottedPattern))
 2687 0eb4 F040      		sbci r31,hi8(-(slottedPattern))
 2688 0eb6 8081      		ld r24,Z
 2689 0eb8 00C0      		rjmp .L192
 2690               	.L186:
 2692               	.LM355:
 2693 0eba 1092 0000 		sts channelIndex,__zero_reg__
 2695               	.LM356:
 2696 0ebe 8091 0000 		lds r24,slottedPattern
 2697               	.L192:
 2698 0ec2 8093 0000 		sts currentChannel,r24
 2700               	.LM357:
 2701 0ec6 8091 0000 		lds r24,currentChannel
 2702 0eca 0E94 0000 		call isa_set_channel
 2704               	.LM358:
 2705 0ece 1092 0000 		sts (resync_times)+1,__zero_reg__
 2706 0ed2 1092 0000 		sts resync_times,__zero_reg__
 2707 0ed6 81E0      		ldi r24,lo8(1)
 2708 0ed8 90E0      		ldi r25,hi8(1)
 2709               	.L181:
 2710               	/* epilogue: frame size=0 */
 2711 0eda 1F91      		pop r17
 2712 0edc 0F91      		pop r16
 2713 0ede FF90      		pop r15
 2714 0ee0 0895      		ret
 2715               	/* epilogue end (size=4) */
 2716               	/* function isa_init size 175 (168) */
 2718               	.Lscope22:
 2720               		.stabd	78,0,0
 2722               	.global	isa_wait_until_rx_pkt
 2724               	isa_wait_until_rx_pkt:
 2725               		.stabd	46,0,0
 2727               	.LM359:
 2728               	.LFBB23:
 2729               	/* prologue: frame size=0 */
 2730               	/* prologue end (size=0) */
 2732               	.LM360:
 2733 0ee2 8091 0000 		lds r24,isa_rx_pkt_signal
 2734 0ee6 0E94 0000 		call nrk_signal_register
 2736               	.LM361:
 2737 0eea 8091 0000 		lds r24,isa_rx_data_ready
 2738 0eee 8823      		tst r24
 2739 0ef0 01F4      		brne .L195
 2741               	.LM362:
 2742 0ef2 61E0      		ldi r22,lo8(1)
 2743 0ef4 70E0      		ldi r23,hi8(1)
 2744 0ef6 80E0      		ldi r24,hlo8(1)
 2745 0ef8 90E0      		ldi r25,hhi8(1)
 2746 0efa 0090 0000 		lds r0,isa_rx_pkt_signal
 2747 0efe 00C0      		rjmp 2f
 2748 0f00 660F      	1:	lsl r22
 2749 0f02 771F      		rol r23
 2750 0f04 881F      		rol r24
 2751 0f06 991F      		rol r25
 2752 0f08 0A94      	2:	dec r0
 2753 0f0a 02F4      		brpl 1b
 2754 0f0c 0E94 0000 		call nrk_event_wait
 2755               	.L195:
 2757               	.LM363:
 2758 0f10 81E0      		ldi r24,lo8(1)
 2759 0f12 90E0      		ldi r25,hi8(1)
 2760               	/* epilogue: frame size=0 */
 2761 0f14 0895      		ret
 2762               	/* epilogue end (size=1) */
 2763               	/* function isa_wait_until_rx_pkt size 26 (25) */
 2765               	.Lscope23:
 2767               		.stabd	78,0,0
 2771               	.global	isa_rx_pkt_get
 2773               	isa_rx_pkt_get:
 2774               		.stabd	46,0,0
 2776               	.LM364:
 2777               	.LFBB24:
 2778               	/* prologue: frame size=0 */
 2779               	/* prologue end (size=0) */
 2780 0f16 FC01      		movw r30,r24
 2781 0f18 DB01      		movw r26,r22
 2783               	.LM365:
 2784 0f1a 8091 0000 		lds r24,isa_rx_data_ready
 2785 0f1e 8823      		tst r24
 2786 0f20 01F4      		brne .L199
 2788               	.LM366:
 2789 0f22 1082      		st Z,__zero_reg__
 2791               	.LM367:
 2792 0f24 1C92      		st X,__zero_reg__
 2793 0f26 80E0      		ldi r24,lo8(0)
 2794 0f28 90E0      		ldi r25,hi8(0)
 2795 0f2a 0895      		ret
 2796               	.L199:
 2798               	.LM368:
 2799 0f2c 8091 0000 		lds r24,isa_rfRxInfo+3
 2800 0f30 8083      		st Z,r24
 2802               	.LM369:
 2803 0f32 8091 0000 		lds r24,isa_rfRxInfo+8
 2804 0f36 8C93      		st X,r24
 2806               	.LM370:
 2807 0f38 8091 0000 		lds r24,isa_rfRxInfo+5
 2808 0f3c 9091 0000 		lds r25,(isa_rfRxInfo+5)+1
 2810               	.LM371:
 2811 0f40 0895      		ret
 2812               	/* epilogue: frame size=0 */
 2813               	/* epilogue: noreturn */
 2814               	/* epilogue end (size=0) */
 2815               	/* function isa_rx_pkt_get size 22 (22) */
 2817               	.Lscope24:
 2819               		.stabd	78,0,0
 2821               	.global	_isa_join_process
 2823               	_isa_join_process:
 2824               		.stabd	46,0,0
 2826               	.LM372:
 2827               	.LFBB25:
 2828               	/* prologue: frame size=0 */
 2829 0f42 CF92      		push r12
 2830 0f44 DF92      		push r13
 2831 0f46 EF92      		push r14
 2832 0f48 FF92      		push r15
 2833 0f4a 0F93      		push r16
 2834 0f4c 1F93      		push r17
 2835 0f4e CF93      		push r28
 2836 0f50 DF93      		push r29
 2837               	/* prologue end (size=8) */
 2838 0f52 EE24      		clr r14
 2839 0f54 FF24      		clr r15
 2840 0f56 10E0      		ldi r17,lo8(isa_rfRxInfo)
 2841 0f58 C12E      		mov r12,r17
 2842 0f5a 10E0      		ldi r17,hi8(isa_rfRxInfo)
 2843 0f5c D12E      		mov r13,r17
 2844               	.L231:
 2846               	.LM373:
 2847 0f5e 6091 0000 		lds r22,isa_param+2
 2848 0f62 C601      		movw r24,r12
 2849 0f64 0E94 0000 		call rf_set_rx
 2851               	.LM374:
 2852 0f68 0E94 0000 		call rf_polling_rx_on
 2854               	.LM375:
 2855 0f6c 1092 0000 		sts _isa_sync_ok,__zero_reg__
 2856 0f70 00E0      		ldi r16,lo8(0)
 2857 0f72 00C0      		rjmp .L232
 2858               	.L206:
 2860               	.LM376:
 2861 0f74 0E94 0000 		call _nrk_os_timer_get
 2862 0f78 0817      		cp r16,r24
 2863 0f7a 01F0      		breq .L232
 2865               	.LM377:
 2866 0f7c 0E94 0000 		call _nrk_os_timer_get
 2867 0f80 082F      		mov r16,r24
 2869               	.LM378:
 2870 0f82 0894      		sec
 2871 0f84 E11C      		adc r14,__zero_reg__
 2872 0f86 F11C      		adc r15,__zero_reg__
 2874               	.LM379:
 2875 0f88 81E1      		ldi r24,lo8(10001)
 2876 0f8a E816      		cp r14,r24
 2877 0f8c 87E2      		ldi r24,hi8(10001)
 2878 0f8e F806      		cpc r15,r24
 2879 0f90 00F0      		brlo .L232
 2880 0f92 EE24      		clr r14
 2881 0f94 FF24      		clr r15
 2882 0f96 00C0      		rjmp .L209
 2883               	.L232:
 2885               	.LM380:
 2886 0f98 0E94 0000 		call rf_rx_check_sfd
 2887 0f9c 182F      		mov r17,r24
 2888 0f9e 8823      		tst r24
 2889 0fa0 01F0      		breq .L206
 2890               	.L209:
 2892               	.LM381:
 2893 0fa2 0E94 0000 		call _nrk_os_timer_get
 2895               	.LM382:
 2896 0fa6 C82F      		mov r28,r24
 2897 0fa8 DD27      		clr r29
 2898 0faa 2496      		adiw r28,4
 2900               	.LM383:
 2901 0fac 1123      		tst r17
 2902 0fae 01F0      		breq .L211
 2903 0fb0 00C0      		rjmp .L228
 2904               	.L212:
 2906               	.LM384:
 2907 0fb2 0E94 0000 		call _nrk_os_timer_get
 2908 0fb6 9927      		clr r25
 2909 0fb8 C817      		cp r28,r24
 2910 0fba D907      		cpc r29,r25
 2911 0fbc 00F0      		brlo .L211
 2912               	.L228:
 2914               	.LM385:
 2915 0fbe 60E8      		ldi r22,lo8(-128)
 2916 0fc0 80E0      		ldi r24,lo8(0)
 2917 0fc2 0E94 0000 		call rf_polling_rx_packet
 2918 0fc6 182F      		mov r17,r24
 2919 0fc8 8823      		tst r24
 2920 0fca 01F0      		breq .L212
 2921               	.L211:
 2923               	.LM386:
 2924 0fcc 0E94 0000 		call rf_rx_off
 2926               	.LM387:
 2927 0fd0 1130      		cpi r17,lo8(1)
 2928 0fd2 01F4      		brne .L231
 2930               	.LM388:
 2931 0fd4 E091 0000 		lds r30,isa_rfRxInfo+5
 2932 0fd8 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 2933 0fdc 8485      		ldd r24,Z+12
 2934 0fde 8A30      		cpi r24,lo8(10)
 2935 0fe0 01F0      		breq .+2
 2936 0fe2 00C0      		rjmp .L231
 2938               	.LM389:
 2939 0fe4 81E0      		ldi r24,lo8(1)
 2940 0fe6 90E0      		ldi r25,hi8(1)
 2941 0fe8 A0E0      		ldi r26,hlo8(1)
 2942 0fea B0E0      		ldi r27,hhi8(1)
 2943 0fec 8093 0000 		sts isa_rx_data_ready,r24
 2944 0ff0 9093 0000 		sts (isa_rx_data_ready)+1,r25
 2945 0ff4 A093 0000 		sts (isa_rx_data_ready)+2,r26
 2946 0ff8 B093 0000 		sts (isa_rx_data_ready)+3,r27
 2948               	.LM390:
 2949 0ffc 8685      		ldd r24,Z+14
 2950 0ffe 0E94 0000 		call isa_set_channel_pattern
 2952               	.LM391:
 2953 1002 E091 0000 		lds r30,isa_rfRxInfo+5
 2954 1006 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 2955 100a E785      		ldd r30,Z+15
 2956 100c E093 0000 		sts channelIndex,r30
 2958               	.LM392:
 2959 1010 FF27      		clr r31
 2960 1012 E050      		subi r30,lo8(-(slottedPattern))
 2961 1014 F040      		sbci r31,hi8(-(slottedPattern))
 2962 1016 8081      		ld r24,Z
 2963 1018 8093 0000 		sts currentChannel,r24
 2965               	.LM393:
 2966 101c 0E94 0000 		call isa_set_channel
 2968               	.LM394:
 2969 1020 0091 0000 		lds r16,isa_rfRxInfo+5
 2970 1024 1091 0000 		lds r17,(isa_rfRxInfo+5)+1
 2971 1028 E801      		movw r28,r16
 2972 102a 60E0      		ldi r22,lo8(tx_slot_from_join)
 2973 102c 70E0      		ldi r23,hi8(tx_slot_from_join)
 2974               	.L215:
 2975 102e 888D      		ldd r24,Y+24
 2976 1030 8823      		tst r24
 2977 1032 01F0      		breq .L216
 2979               	.LM395:
 2980 1034 21E0      		ldi r18,lo8(1)
 2981 1036 30E0      		ldi r19,hi8(1)
 2982 1038 40E0      		ldi r20,hlo8(1)
 2983 103a 50E0      		ldi r21,hhi8(1)
 2984 103c 00C0      		rjmp 2f
 2985 103e 220F      	1:	lsl r18
 2986 1040 331F      		rol r19
 2987 1042 441F      		rol r20
 2988 1044 551F      		rol r21
 2989 1046 8A95      	2:	dec r24
 2990 1048 02F4      		brpl 1b
 2991 104a 8091 0000 		lds r24,isa_tdma_tx_mask
 2992 104e 9091 0000 		lds r25,(isa_tdma_tx_mask)+1
 2993 1052 A091 0000 		lds r26,(isa_tdma_tx_mask)+2
 2994 1056 B091 0000 		lds r27,(isa_tdma_tx_mask)+3
 2995 105a 822B      		or r24,r18
 2996 105c 932B      		or r25,r19
 2997 105e A42B      		or r26,r20
 2998 1060 B52B      		or r27,r21
 2999 1062 8093 0000 		sts isa_tdma_tx_mask,r24
 3000 1066 9093 0000 		sts (isa_tdma_tx_mask)+1,r25
 3001 106a A093 0000 		sts (isa_tdma_tx_mask)+2,r26
 3002 106e B093 0000 		sts (isa_tdma_tx_mask)+3,r27
 3004               	.LM396:
 3005 1072 E88D      		ldd r30,Y+24
 3006 1074 FF27      		clr r31
 3007 1076 E050      		subi r30,lo8(-(isa_sched))
 3008 1078 F040      		sbci r31,hi8(-(isa_sched))
 3009 107a 81E0      		ldi r24,lo8(1)
 3010 107c 8083      		st Z,r24
 3012               	.LM397:
 3013 107e 888D      		ldd r24,Y+24
 3014 1080 FB01      		movw r30,r22
 3015 1082 8193      		st Z+,r24
 3016 1084 BF01      		movw r22,r30
 3017 1086 2196      		adiw r28,1
 3019               	.LM398:
 3020 1088 F0E0      		ldi r31,hi8(tx_slot_from_join+4)
 3021 108a 6030      		cpi r22,lo8(tx_slot_from_join+4)
 3022 108c 7F07      		cpc r23,r31
 3023 108e 01F4      		brne .L215
 3024               	.L216:
 3025 1090 E801      		movw r28,r16
 3026 1092 60E0      		ldi r22,lo8(0)
 3027               	.L218:
 3029               	.LM399:
 3030 1094 8C8D      		ldd r24,Y+28
 3031 1096 8823      		tst r24
 3032 1098 01F0      		breq .L219
 3034               	.LM400:
 3035 109a 21E0      		ldi r18,lo8(1)
 3036 109c 30E0      		ldi r19,hi8(1)
 3037 109e 40E0      		ldi r20,hlo8(1)
 3038 10a0 50E0      		ldi r21,hhi8(1)
 3039 10a2 00C0      		rjmp 2f
 3040 10a4 220F      	1:	lsl r18
 3041 10a6 331F      		rol r19
 3042 10a8 441F      		rol r20
 3043 10aa 551F      		rol r21
 3044 10ac 8A95      	2:	dec r24
 3045 10ae 02F4      		brpl 1b
 3046 10b0 8091 0000 		lds r24,isa_tdma_rx_mask
 3047 10b4 9091 0000 		lds r25,(isa_tdma_rx_mask)+1
 3048 10b8 A091 0000 		lds r26,(isa_tdma_rx_mask)+2
 3049 10bc B091 0000 		lds r27,(isa_tdma_rx_mask)+3
 3050 10c0 822B      		or r24,r18
 3051 10c2 932B      		or r25,r19
 3052 10c4 A42B      		or r26,r20
 3053 10c6 B52B      		or r27,r21
 3054 10c8 8093 0000 		sts isa_tdma_rx_mask,r24
 3055 10cc 9093 0000 		sts (isa_tdma_rx_mask)+1,r25
 3056 10d0 A093 0000 		sts (isa_tdma_rx_mask)+2,r26
 3057 10d4 B093 0000 		sts (isa_tdma_rx_mask)+3,r27
 3059               	.LM401:
 3060 10d8 EC8D      		ldd r30,Y+28
 3061 10da FF27      		clr r31
 3062 10dc E050      		subi r30,lo8(-(isa_sched))
 3063 10de F040      		sbci r31,hi8(-(isa_sched))
 3064 10e0 81E0      		ldi r24,lo8(1)
 3065 10e2 8083      		st Z,r24
 3067               	.LM402:
 3068 10e4 6F5F      		subi r22,lo8(-(1))
 3069 10e6 2196      		adiw r28,1
 3070 10e8 6430      		cpi r22,lo8(4)
 3071 10ea 01F4      		brne .L218
 3072               	.L219:
 3074               	.LM403:
 3075 10ec 81E0      		ldi r24,lo8(1)
 3076 10ee 90E0      		ldi r25,hi8(1)
 3077 10f0 A0E0      		ldi r26,hlo8(1)
 3078 10f2 B0E0      		ldi r27,hhi8(1)
 3079 10f4 0090 0000 		lds r0,isa_rx_pkt_signal
 3080 10f8 00C0      		rjmp 2f
 3081 10fa 880F      	1:	lsl r24
 3082 10fc 991F      		rol r25
 3083 10fe AA1F      		rol r26
 3084 1100 BB1F      		rol r27
 3085 1102 0A94      	2:	dec r0
 3086 1104 02F4      		brpl 1b
 3087 1106 0E94 0000 		call nrk_event_signal
 3089               	.LM404:
 3090 110a 81E0      		ldi r24,lo8(1)
 3091 110c 8093 0000 		sts _isa_join_ok,r24
 3092               	.LBB18:
 3093               	.LBB19:
 3095               	.LM405:
 3096 1110 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 3097 1114 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 3098 1118 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 3099 111c 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 3100               	.LBE19:
 3101               	.LBE18:
 3103               	.LM406:
 3104 1120 81E0      		ldi r24,lo8(1)
 3105 1122 90E0      		ldi r25,hi8(1)
 3106               	/* epilogue: frame size=0 */
 3107 1124 DF91      		pop r29
 3108 1126 CF91      		pop r28
 3109 1128 1F91      		pop r17
 3110 112a 0F91      		pop r16
 3111 112c FF90      		pop r15
 3112 112e EF90      		pop r14
 3113 1130 DF90      		pop r13
 3114 1132 CF90      		pop r12
 3115 1134 0895      		ret
 3116               	/* epilogue end (size=9) */
 3117               	/* function _isa_join_process size 252 (235) */
 3126               	.Lscope25:
 3128               		.stabd	78,0,0
 3129               	.global	EXPIRATION
 3130               		.data
 3133               	EXPIRATION:
 3134 002b C800      		.word	200
 3135               	.global	tmp_count
 3136               	.global	tmp_count
 3137               		.section .bss
 3140               	tmp_count:
 3141 0000 0000      		.skip 2,0
 3142               	.global	DHDRcount
 3143               	.global	DHDRcount
 3146               	DHDRcount:
 3147 0002 0000      		.skip 2,0
 3148               	.global	txCount
 3149               	.global	txCount
 3152               	txCount:
 3153 0004 0000      		.skip 2,0
 3154               	.global	rxCount
 3155               	.global	rxCount
 3158               	rxCount:
 3159 0006 0000      		.skip 2,0
 3160               	.global	packetsLost
 3161               	.global	packetsLost
 3164               	packetsLost:
 3165 0008 0000      		.skip 2,0
 3166               		.section	.progmem.data,"a",@progbits
 3169               	__c.2650:
 3170 0000 4953 4120 		.string	"ISA ERROR: creating tx signal failed\r\n"
 3170      4552 524F 
 3170      523A 2063 
 3170      7265 6174 
 3170      696E 6720 
 3173               	__c.2648:
 3174 0027 4953 4120 		.string	"ISA ERROR: creating rx signal failed\r\n"
 3174      4552 524F 
 3174      523A 2063 
 3174      7265 6174 
 3174      696E 6720 
 3175               		.comm _nrk_signal_list,4,1
 3176               		.comm nrk_idle_task_stk,128,1
 3177               		.comm nrk_kernel_stk_ptr,2,1
 3178               		.comm _nrk_prev_timer_val,1,1
 3179               		.comm _nrk_time_trigger,1,1
 3180               		.comm app_timer0_callback,2,1
 3181               		.comm app_timer0_prescale,1,1
 3182               		.comm error_task,1,1
 3183               		.comm error_num,1,1
 3184               		.comm isa_sched,25,1
 3185               		.comm isa_tdma_rx_mask,4,1
 3186               		.comm isa_tdma_tx_mask,4,1
 3187               		.comm isa_id,1,1
 3188               		.comm isa_clk_src_id,1,1
 3189               		.comm tx_slot_from_join,4,1
 3190               		.comm isa_rx_data_ready,4,1
 3191               		.comm isa_tx_data_ready,4,1
 3192               		.comm child_list,4,1
 3193               		.comm DHDR,1,1
 3194               		.comm last_slot,2,1
 3195               		.comm resync_times,2,1
 3196               		.comm isa_tx_info,100,1
 3197               		.comm isa_param,9,1
 3198               		.comm isa_node_mode,1,1
 3199               		.comm isa_task,35,1
 3200               		.comm isa_task_stack,128,1
 3201               		.comm isa_rfRxInfo,9,1
 3202               		.comm isa_ack_tx,7,1
 3203               		.comm isa_ack_buf,4,1
 3204               		.comm isa_rfTxInfo,7,1
 3205               		.comm _isa_ready,1,1
 3206               		.comm _isa_join_ok,1,1
 3207               		.comm global_slot,2,1
 3208               		.comm current_global_slot,2,1
 3209               		.comm global_cycle,2,1
 3210               		.comm last_sync_slot,2,1
 3211               		.comm slottedPattern,16,1
 3212               		.comm slowPattern,3,1
 3213               		.comm currentChannel,1,1
 3214               		.comm channelIndex,1,1
 3215               		.comm slowIndex,1,1
 3216               		.comm slot_start_time,2,1
 3217               		.comm tx_start_time,2,1
 3218               		.comm rx_start_time,2,1
 3219               		.comm offsetY,2,1
 3220               		.comm offsetX,2,1
 3221               		.comm _isa_sync_ok,1,1
 3222               		.comm AFTER_FIRST_SYNC,1,1
 3223               		.comm slot_expired,2,1
 3224               		.comm previous_tx_slot,1,1
 3225               		.comm isa_tx_done_signal,1,1
 3226               		.comm isa_rx_pkt_signal,1,1
 3227               		.comm DAUX,29,1
 3228               		.comm DHR,1,1
 3229               		.comm tmp_curSec,1,1
 3230               		.comm tmp_offsetSec,1,1
 3231               		.comm tmp_offsetNanoSec,2,1
 3297               		.text
 3299               	.Letext0:
 3300               	/* File "../../../src/net/isa/isa.c": code 2210 = 0x08a2 (2066), prologues  70, epilogues  74 */
DEFINED SYMBOLS
                            *ABS*:00000000 isa.c
     /tmp/ccNoSUdx.s:2      *ABS*:0000003f __SREG__
     /tmp/ccNoSUdx.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccNoSUdx.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccNoSUdx.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccNoSUdx.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccNoSUdx.s:152    .text:00000000 config_child_list
                            *COM*:00000004 child_list
     /tmp/ccNoSUdx.s:195    .text:00000040 isa_get_channel
                            *COM*:00000009 isa_param
     /tmp/ccNoSUdx.s:218    .text:00000048 isa_set_channel_pattern
                            *COM*:00000010 slottedPattern
                            *COM*:00000003 slowPattern
     /tmp/ccNoSUdx.s:326    .text:000000c8 isa_ready
                            *COM*:00000001 _isa_ready
     /tmp/ccNoSUdx.s:362    .text:000000dc isa_rx_pkt_set_buffer
                            *COM*:00000009 isa_rfRxInfo
     /tmp/ccNoSUdx.s:406    .text:000000fc isa_start
     /tmp/ccNoSUdx.s:429    .text:00000104 configDHDR
     /tmp/ccNoSUdx.s:3146   .bss:00000002 DHDRcount
                            *COM*:00000001 isa_node_mode
     /tmp/ccNoSUdx.s:488    .text:0000014a configDHR
     /tmp/ccNoSUdx.s:536    .text:0000015c configAdvDAUX
                            *COM*:0000001d DAUX
     /tmp/ccNoSUdx.s:620    .text:000001c0 isa_rx_pkt_check
                            *COM*:00000004 isa_rx_data_ready
     /tmp/ccNoSUdx.s:644    .text:000001cc isa_rx_pkt_release
     /tmp/ccNoSUdx.s:672    .text:000001de isa_tx_pkt
                            *COM*:00000064 isa_tx_info
                            *COM*:00000004 isa_tx_data_ready
     /tmp/ccNoSUdx.s:738    .text:0000023a isa_tx_pkt_check
     /tmp/ccNoSUdx.s:772    .text:00000260 isa_join_ready
                            *COM*:00000001 _isa_join_ok
     /tmp/ccNoSUdx.s:806    .text:00000274 isa_task_config
     /tmp/ccNoSUdx.s:2178   .text:00000b3e isa_nw_task
                            *COM*:00000023 isa_task
                            *COM*:00000080 isa_task_stack
     /tmp/ccNoSUdx.s:902    .text:0000031e _isa_init_sync
                            *COM*:00000001 _isa_sync_ok
                            *COM*:00000001 isa_clk_src_id
                            *COM*:00000002 global_slot
     /tmp/ccNoSUdx.s:1148   .text:0000048a _isa_rx
                            *COM*:00000002 rx_start_time
     /tmp/ccNoSUdx.s:3164   .bss:00000008 packetsLost
     /tmp/ccNoSUdx.s:3158   .bss:00000006 rxCount
                            *COM*:00000001 DHDR
                            *COM*:00000001 isa_rx_pkt_signal
     /tmp/ccNoSUdx.s:3152   .bss:00000004 txCount
                            *COM*:00000001 DHR
                            *COM*:00000004 isa_ack_buf
                            *COM*:00000007 isa_ack_tx
                            *COM*:00000002 slot_start_time
                            *COM*:00000002 offsetX
                            *COM*:00000002 tx_start_time
     /tmp/ccNoSUdx.s:1494   .text:000006c4 _isa_tx
                            *COM*:00000007 isa_rfTxInfo
                            *COM*:00000001 isa_id
                            *COM*:00000002 offsetY
                            *COM*:00000001 isa_tx_done_signal
                            *COM*:00000001 previous_tx_slot
                            *COM*:00000002 slot_expired
                            *COM*:00000001 tmp_curSec
                            *COM*:00000001 tmp_offsetSec
                            *COM*:00000002 tmp_offsetNanoSec
     /tmp/ccNoSUdx.s:2094   .text:00000ae2 isa_wait_until_rx_or_tx
     /tmp/ccNoSUdx.s:2154   .text:00000b34 isa_set_channel
                            *COM*:00000002 current_global_slot
                            *COM*:00000002 global_cycle
                            *COM*:00000001 channelIndex
                            *COM*:00000001 currentChannel
                            *COM*:00000004 isa_tdma_tx_mask
                            *COM*:00000004 isa_tdma_rx_mask
     /tmp/ccNoSUdx.s:3133   .data:0000002b EXPIRATION
                            *COM*:00000002 resync_times
     /tmp/ccNoSUdx.s:2505   .text:00000d84 isa_init
     /tmp/ccNoSUdx.s:3173   .progmem.data:00000027 __c.2648
     /tmp/ccNoSUdx.s:3169   .progmem.data:00000000 __c.2650
                            *COM*:00000019 isa_sched
                            *COM*:00000001 AFTER_FIRST_SYNC
                            *COM*:00000001 slowIndex
     /tmp/ccNoSUdx.s:2724   .text:00000ee2 isa_wait_until_rx_pkt
     /tmp/ccNoSUdx.s:2773   .text:00000f16 isa_rx_pkt_get
     /tmp/ccNoSUdx.s:2823   .text:00000f42 _isa_join_process
                            *COM*:00000004 tx_slot_from_join
     /tmp/ccNoSUdx.s:3140   .bss:00000000 tmp_count
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000002 last_slot
                            *COM*:00000002 last_sync_slot

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__udivmodhi4
nrk_task_set_stk
nrk_activate_task
rf_set_rx
rf_polling_rx_on
_nrk_set_next_wakeup
_nrk_os_timer_set
_nrk_os_timer_get
rf_rx_check_sfd
_nrk_high_speed_timer_reset
rf_polling_rx_packet
rf_rx_off
nrk_led_toggle
__iob
fputc
_nrk_os_timer_stop
nrk_high_speed_timer_wait
_nrk_os_timer_start
nrk_cur_task_TCB
NRK_DEBUG_2
nrk_gpio_set
nrk_gpio_clr
_nrk_high_speed_timer_get
printf
nrk_event_signal
rf_tx_tdma_packet
NRK_DEBUG_1
__divmodhi4
nrk_spin_wait_us
nrk_signal_register
nrk_event_wait
rf_set_channel
nrk_wait_until_next_period
isa_get_slots_until_next_wakeup
nrk_led_clr
nrk_wait_until_next_n_periods
nrk_led_set
nrk_signal_create
nrk_kprintf
nrk_kernel_error_add
_nrk_high_speed_timer_start
rf_init
