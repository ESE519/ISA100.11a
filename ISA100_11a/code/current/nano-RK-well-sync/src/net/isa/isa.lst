   1               		.file	"isa.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 162               	.global	config_child_list
 164               	config_child_list:
 165               		.stabd	46,0,0
   1:../../../src/net/isa/isa.c **** /******************************************************************************
   2:../../../src/net/isa/isa.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/net/isa/isa.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/net/isa/isa.c **** *  All rights reserved.
   5:../../../src/net/isa/isa.c **** *
   6:../../../src/net/isa/isa.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/net/isa/isa.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/net/isa/isa.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/net/isa/isa.c **** *
  10:../../../src/net/isa/isa.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/net/isa/isa.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/net/isa/isa.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/net/isa/isa.c **** *
  14:../../../src/net/isa/isa.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/net/isa/isa.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/net/isa/isa.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/net/isa/isa.c **** *  GNU General Public License for more details.
  18:../../../src/net/isa/isa.c **** *
  19:../../../src/net/isa/isa.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/net/isa/isa.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/net/isa/isa.c **** *
  22:../../../src/net/isa/isa.c **** *  Contributing Authors (specific to this file):
  23:../../../src/net/isa/isa.c **** *  Anthony Rowe
  24:../../../src/net/isa/isa.c **** *******************************************************************************/
  25:../../../src/net/isa/isa.c **** 
  26:../../../src/net/isa/isa.c **** //#include <rtl_debug.h>
  27:../../../src/net/isa/isa.c **** #include <include.h>
  28:../../../src/net/isa/isa.c **** #include <ulib.h>
  29:../../../src/net/isa/isa.c **** #include <avr/sleep.h>
  30:../../../src/net/isa/isa.c **** #include <avr/wdt.h>
  31:../../../src/net/isa/isa.c **** #include <avr/eeprom.h>
  32:../../../src/net/isa/isa.c **** #include <stdio.h>
  33:../../../src/net/isa/isa.c **** #include <avr/interrupt.h>
  34:../../../src/net/isa/isa.c **** #include <nrk.h>
  35:../../../src/net/isa/isa.c **** #include <nrk_events.h>
  36:../../../src/net/isa/isa.c **** #include <nrk_timer.h>
  37:../../../src/net/isa/isa.c **** #include <nrk_error.h>
  38:../../../src/net/isa/isa.c **** //#include <rtl_defs.h>
  39:../../../src/net/isa/isa.c **** #include <stdlib.h>
  40:../../../src/net/isa/isa.c **** //#include <isa_scheduler.h>
  41:../../../src/net/isa/isa.c **** //#include <dlmo.h>
  42:../../../src/net/isa/isa.c **** #include <isa.h>
  43:../../../src/net/isa/isa.c **** #include <isa_defs.h>
  44:../../../src/net/isa/isa.c **** #include <isa_error.h>
  45:../../../src/net/isa/isa.c **** #include <dmo.h>
  46:../../../src/net/isa/isa.c **** 
  47:../../../src/net/isa/isa.c **** 
  48:../../../src/net/isa/isa.c **** #define CHANNEL_HOPPING 
  49:../../../src/net/isa/isa.c **** //#define CORRECTION
  50:../../../src/net/isa/isa.c **** //#define INIT_SYNC
  51:../../../src/net/isa/isa.c **** #define LED_SLOT_DEBUG
  52:../../../src/net/isa/isa.c **** //#define HIGH_TIMER_DEBUG
  53:../../../src/net/isa/isa.c **** #define TX_RX_DEBUG
  54:../../../src/net/isa/isa.c **** #define ACK_DEBUG
  55:../../../src/net/isa/isa.c **** #define RX_DEBUG
  56:../../../src/net/isa/isa.c **** #define TX_DEBUG
  57:../../../src/net/isa/isa.c **** //#define JOIN_PROCESS
  58:../../../src/net/isa/isa.c **** 
  59:../../../src/net/isa/isa.c **** #ifdef JOIN_PROCESS
  60:../../../src/net/isa/isa.c ****  uint8_t join_pkt_buf[RF_MAX_PAYLOAD_SIZE];
  61:../../../src/net/isa/isa.c **** #endif
  62:../../../src/net/isa/isa.c **** /* Device management object*/
  63:../../../src/net/isa/isa.c ****  DMO dmo;
  64:../../../src/net/isa/isa.c **** 
  65:../../../src/net/isa/isa.c **** /* slot related declaration */
  66:../../../src/net/isa/isa.c **** volatile uint16_t global_slot;
  67:../../../src/net/isa/isa.c **** volatile uint16_t current_global_slot;
  68:../../../src/net/isa/isa.c **** volatile uint16_t global_cycle;
  69:../../../src/net/isa/isa.c **** uint16_t last_sync_slot;
  70:../../../src/net/isa/isa.c **** 
  71:../../../src/net/isa/isa.c **** /* channel hopping related declaration */
  72:../../../src/net/isa/isa.c **** uint8_t slottedPattern[16];
  73:../../../src/net/isa/isa.c **** uint8_t slowPattern[3];
  74:../../../src/net/isa/isa.c **** uint8_t currentChannel;
  75:../../../src/net/isa/isa.c **** uint8_t channelIndex;
  76:../../../src/net/isa/isa.c **** uint8_t slowIndex;
  77:../../../src/net/isa/isa.c **** 
  78:../../../src/net/isa/isa.c **** /*used for calculating offset*/
  79:../../../src/net/isa/isa.c **** uint16_t slot_start_time;
  80:../../../src/net/isa/isa.c **** uint16_t tx_start_time; // actual transmission starting time
  81:../../../src/net/isa/isa.c **** uint16_t rx_start_time; 
  82:../../../src/net/isa/isa.c **** uint16_t offsetY;
  83:../../../src/net/isa/isa.c **** uint16_t offsetX;
  84:../../../src/net/isa/isa.c **** 
  85:../../../src/net/isa/isa.c **** /* SYNC related declaration */
  86:../../../src/net/isa/isa.c **** uint8_t _isa_sync_ok;
  87:../../../src/net/isa/isa.c **** uint8_t AFTER_FIRST_SYNC;
  88:../../../src/net/isa/isa.c **** uint16_t EXPIRATION = 200;// each slot lasts for 10ms, so 100 slots last for 1s
  89:../../../src/net/isa/isa.c **** uint16_t slot_expired;
  90:../../../src/net/isa/isa.c **** uint8_t previous_tx_slot;
  91:../../../src/net/isa/isa.c **** 
  92:../../../src/net/isa/isa.c **** /* signal related declaration */
  93:../../../src/net/isa/isa.c **** int8_t isa_tx_done_signal;
  94:../../../src/net/isa/isa.c **** int8_t isa_rx_pkt_signal;
  95:../../../src/net/isa/isa.c **** 
  96:../../../src/net/isa/isa.c **** /* header type */
  97:../../../src/net/isa/isa.c **** 
  98:../../../src/net/isa/isa.c **** //uint8_t DMXHR[4]; //Data link layer media access control extension sub header, mainly used for se
  99:../../../src/net/isa/isa.c **** uint8_t DAUX[29]; //Data link layer auxiliary sub-header, currently used for join process
 100:../../../src/net/isa/isa.c **** //uint8_t DROUT[3]; //Routing sub-header, compressed variant
 101:../../../src/net/isa/isa.c **** //uint8_t DADDR[5]; //Addressing sub-header
 102:../../../src/net/isa/isa.c **** uint8_t DHR;   // ACK's data link layer header
 103:../../../src/net/isa/isa.c **** 
 104:../../../src/net/isa/isa.c **** /* Test variable */
 105:../../../src/net/isa/isa.c **** uint8_t tmp_curSec;
 106:../../../src/net/isa/isa.c **** uint8_t tmp_offsetSec;
 107:../../../src/net/isa/isa.c **** int16_t tmp_offsetNanoSec;
 108:../../../src/net/isa/isa.c **** uint16_t tmp_count=0;
 109:../../../src/net/isa/isa.c **** uint16_t DHDRcount = 0;
 110:../../../src/net/isa/isa.c **** uint16_t txCount = 0;		//Holds the number of packets transmitted successfully
 111:../../../src/net/isa/isa.c **** uint16_t rxCount = 0;		// Holds the number of packets received successfully
 112:../../../src/net/isa/isa.c **** uint16_t packetsLost = 0; //Holds packets lost (receive  + ACK )
 113:../../../src/net/isa/isa.c **** 
 114:../../../src/net/isa/isa.c **** 
 115:../../../src/net/isa/isa.c **** void config_child_list (uint8_t node_id)
 116:../../../src/net/isa/isa.c **** {
 167               	.LM0:
 168               	.LFBB1:
 169               	/* prologue: frame size=0 */
 170               	/* prologue end (size=0) */
 117:../../../src/net/isa/isa.c ****     child_list |= ((uint32_t) 1) << node_id;
 172               	.LM1:
 173 0000 21E0      		ldi r18,lo8(1)
 174 0002 30E0      		ldi r19,hi8(1)
 175 0004 40E0      		ldi r20,hlo8(1)
 176 0006 50E0      		ldi r21,hhi8(1)
 177 0008 00C0      		rjmp 2f
 178 000a 220F      	1:	lsl r18
 179 000c 331F      		rol r19
 180 000e 441F      		rol r20
 181 0010 551F      		rol r21
 182 0012 8A95      	2:	dec r24
 183 0014 02F4      		brpl 1b
 184 0016 8091 0000 		lds r24,child_list
 185 001a 9091 0000 		lds r25,(child_list)+1
 186 001e A091 0000 		lds r26,(child_list)+2
 187 0022 B091 0000 		lds r27,(child_list)+3
 188 0026 822B      		or r24,r18
 189 0028 932B      		or r25,r19
 190 002a A42B      		or r26,r20
 191 002c B52B      		or r27,r21
 192 002e 8093 0000 		sts child_list,r24
 193 0032 9093 0000 		sts (child_list)+1,r25
 194 0036 A093 0000 		sts (child_list)+2,r26
 195 003a B093 0000 		sts (child_list)+3,r27
 196               	/* epilogue: frame size=0 */
 197 003e 0895      		ret
 198               	/* epilogue end (size=1) */
 199               	/* function config_child_list size 33 (32) */
 201               	.Lscope1:
 203               		.stabd	78,0,0
 205               	.global	isa_get_channel
 207               	isa_get_channel:
 208               		.stabd	46,0,0
 118:../../../src/net/isa/isa.c **** }
 119:../../../src/net/isa/isa.c **** 
 120:../../../src/net/isa/isa.c **** /**
 121:../../../src/net/isa/isa.c ****  * isa_set_channel()
 122:../../../src/net/isa/isa.c ****  *
 123:../../../src/net/isa/isa.c ****  * This function set channel and is used for channel hopping.
 124:../../../src/net/isa/isa.c ****  *
 125:../../../src/net/isa/isa.c ****  */
 126:../../../src/net/isa/isa.c **** void isa_set_channel (uint8_t chan)
 127:../../../src/net/isa/isa.c **** {
 128:../../../src/net/isa/isa.c ****     isa_param.channel = chan;
 129:../../../src/net/isa/isa.c ****     rf_set_channel (chan);
 130:../../../src/net/isa/isa.c **** }
 131:../../../src/net/isa/isa.c **** 
 132:../../../src/net/isa/isa.c **** uint8_t isa_get_channel()
 133:../../../src/net/isa/isa.c **** {
 210               	.LM2:
 211               	.LFBB2:
 212               	/* prologue: frame size=0 */
 213               	/* prologue end (size=0) */
 214 0040 8091 0000 		lds r24,isa_param+2
 134:../../../src/net/isa/isa.c ****     return isa_param.channel;
 135:../../../src/net/isa/isa.c **** }
 216               	.LM3:
 217 0044 9927      		clr r25
 218               	/* epilogue: frame size=0 */
 219 0046 0895      		ret
 220               	/* epilogue end (size=1) */
 221               	/* function isa_get_channel size 4 (3) */
 223               	.Lscope2:
 225               		.stabd	78,0,0
 228               	.global	isa_set_channel_pattern
 230               	isa_set_channel_pattern:
 231               		.stabd	46,0,0
 136:../../../src/net/isa/isa.c **** 
 137:../../../src/net/isa/isa.c **** void isa_set_channel_pattern(uint8_t pattern)
 138:../../../src/net/isa/isa.c **** {
 233               	.LM4:
 234               	.LFBB3:
 235               	/* prologue: frame size=0 */
 236               	/* prologue end (size=0) */
 139:../../../src/net/isa/isa.c ****     switch (pattern)
 238               	.LM5:
 239 0048 8130      		cpi r24,lo8(1)
 240 004a 01F0      		breq .L7
 242               	.LM6:
 243 004c 8330      		cpi r24,lo8(3)
 244 004e 01F4      		brne .L9
 245 0050 00C0      		rjmp .L8
 246               	.L7:
 140:../../../src/net/isa/isa.c ****     {
 141:../../../src/net/isa/isa.c **** 	case 1:
 142:../../../src/net/isa/isa.c **** 	    slottedPattern[0] = 19;
 248               	.LM7:
 249 0052 83E1      		ldi r24,lo8(19)
 250 0054 8093 0000 		sts slottedPattern,r24
 143:../../../src/net/isa/isa.c **** 	    slottedPattern[1] = 12;
 252               	.LM8:
 253 0058 8CE0      		ldi r24,lo8(12)
 254 005a 8093 0000 		sts slottedPattern+1,r24
 144:../../../src/net/isa/isa.c **** 	    slottedPattern[2] = 20;
 256               	.LM9:
 257 005e 84E1      		ldi r24,lo8(20)
 258 0060 8093 0000 		sts slottedPattern+2,r24
 145:../../../src/net/isa/isa.c **** 	    slottedPattern[3] = 24;
 260               	.LM10:
 261 0064 88E1      		ldi r24,lo8(24)
 262 0066 8093 0000 		sts slottedPattern+3,r24
 146:../../../src/net/isa/isa.c **** 	    slottedPattern[4] = 16;
 264               	.LM11:
 265 006a 80E1      		ldi r24,lo8(16)
 266 006c 8093 0000 		sts slottedPattern+4,r24
 147:../../../src/net/isa/isa.c **** 	    slottedPattern[5] = 23;
 268               	.LM12:
 269 0070 87E1      		ldi r24,lo8(23)
 270 0072 8093 0000 		sts slottedPattern+5,r24
 148:../../../src/net/isa/isa.c **** 	    slottedPattern[6] = 18;
 272               	.LM13:
 273 0076 82E1      		ldi r24,lo8(18)
 274 0078 8093 0000 		sts slottedPattern+6,r24
 149:../../../src/net/isa/isa.c **** 	    slottedPattern[7] = 25;
 276               	.LM14:
 277 007c 89E1      		ldi r24,lo8(25)
 278 007e 8093 0000 		sts slottedPattern+7,r24
 150:../../../src/net/isa/isa.c **** 	    slottedPattern[8] = 14;
 280               	.LM15:
 281 0082 8EE0      		ldi r24,lo8(14)
 282 0084 8093 0000 		sts slottedPattern+8,r24
 151:../../../src/net/isa/isa.c **** 	    slottedPattern[9] = 21;
 284               	.LM16:
 285 0088 85E1      		ldi r24,lo8(21)
 286 008a 8093 0000 		sts slottedPattern+9,r24
 152:../../../src/net/isa/isa.c **** 	    slottedPattern[10] = 11;
 288               	.LM17:
 289 008e 8BE0      		ldi r24,lo8(11)
 290 0090 8093 0000 		sts slottedPattern+10,r24
 153:../../../src/net/isa/isa.c **** 	    slottedPattern[11] = 15;
 292               	.LM18:
 293 0094 8FE0      		ldi r24,lo8(15)
 294 0096 8093 0000 		sts slottedPattern+11,r24
 154:../../../src/net/isa/isa.c **** 	    slottedPattern[12] = 22;
 296               	.LM19:
 297 009a 86E1      		ldi r24,lo8(22)
 298 009c 8093 0000 		sts slottedPattern+12,r24
 155:../../../src/net/isa/isa.c **** 	    slottedPattern[13] = 17;
 300               	.LM20:
 301 00a0 81E1      		ldi r24,lo8(17)
 302 00a2 8093 0000 		sts slottedPattern+13,r24
 156:../../../src/net/isa/isa.c **** 	    slottedPattern[14] = 13;
 304               	.LM21:
 305 00a6 8DE0      		ldi r24,lo8(13)
 306 00a8 8093 0000 		sts slottedPattern+14,r24
 157:../../../src/net/isa/isa.c **** 	    slottedPattern[15] = 26;
 308               	.LM22:
 309 00ac 8AE1      		ldi r24,lo8(26)
 310 00ae 8093 0000 		sts slottedPattern+15,r24
 311 00b2 0895      		ret
 312               	.L8:
 158:../../../src/net/isa/isa.c **** 	    break;
 159:../../../src/net/isa/isa.c **** 	case 3:
 160:../../../src/net/isa/isa.c **** 	    slowPattern[0]=15;
 314               	.LM23:
 315 00b4 8FE0      		ldi r24,lo8(15)
 316 00b6 8093 0000 		sts slowPattern,r24
 161:../../../src/net/isa/isa.c **** 	    slowPattern[1]=20;
 318               	.LM24:
 319 00ba 84E1      		ldi r24,lo8(20)
 320 00bc 8093 0000 		sts slowPattern+1,r24
 162:../../../src/net/isa/isa.c **** 	    slowPattern[2]=25;
 322               	.LM25:
 323 00c0 89E1      		ldi r24,lo8(25)
 324 00c2 8093 0000 		sts slowPattern+2,r24
 325               	.L9:
 326 00c6 0895      		ret
 327               	/* epilogue: frame size=0 */
 328               	/* epilogue: noreturn */
 329               	/* epilogue end (size=0) */
 330               	/* function isa_set_channel_pattern size 64 (64) */
 332               	.Lscope3:
 334               		.stabd	78,0,0
 336               	.global	isa_ready
 338               	isa_ready:
 339               		.stabd	46,0,0
 163:../../../src/net/isa/isa.c **** 	    break;
 164:../../../src/net/isa/isa.c **** 	default:
 165:../../../src/net/isa/isa.c **** 	    break;
 166:../../../src/net/isa/isa.c ****     }
 167:../../../src/net/isa/isa.c **** }
 168:../../../src/net/isa/isa.c **** 
 169:../../../src/net/isa/isa.c **** int8_t isa_ready()
 170:../../../src/net/isa/isa.c **** {
 341               	.LM26:
 342               	.LFBB4:
 343               	/* prologue: frame size=0 */
 344               	/* prologue end (size=0) */
 171:../../../src/net/isa/isa.c ****     if (_isa_ready ==  1)
 346               	.LM27:
 347 00c8 8091 0000 		lds r24,_isa_ready
 348 00cc 8130      		cpi r24,lo8(1)
 349 00ce 01F4      		brne .L11
 351               	.LM28:
 352 00d0 81E0      		ldi r24,lo8(1)
 353 00d2 90E0      		ldi r25,hi8(1)
 354 00d4 0895      		ret
 355               	.L11:
 356 00d6 8FEF      		ldi r24,lo8(-1)
 357 00d8 9FEF      		ldi r25,hi8(-1)
 172:../../../src/net/isa/isa.c ****         return NRK_OK;
 173:../../../src/net/isa/isa.c ****     else
 174:../../../src/net/isa/isa.c ****         return NRK_ERROR;
 175:../../../src/net/isa/isa.c **** }
 359               	.LM29:
 360 00da 0895      		ret
 361               	/* epilogue: frame size=0 */
 362               	/* epilogue: noreturn */
 363               	/* epilogue end (size=0) */
 364               	/* function isa_ready size 10 (10) */
 366               	.Lscope4:
 368               		.stabd	78,0,0
 372               	.global	isa_rx_pkt_set_buffer
 374               	isa_rx_pkt_set_buffer:
 375               		.stabd	46,0,0
 176:../../../src/net/isa/isa.c **** 
 177:../../../src/net/isa/isa.c **** int8_t isa_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
 178:../../../src/net/isa/isa.c **** {
 377               	.LM30:
 378               	.LFBB5:
 379               	/* prologue: frame size=0 */
 380               	/* prologue end (size=0) */
 179:../../../src/net/isa/isa.c **** 
 180:../../../src/net/isa/isa.c ****     if(size==0 || buf==NULL) return NRK_ERROR;
 382               	.LM31:
 383 00dc 6623      		tst r22
 384 00de 01F0      		breq .L16
 386               	.LM32:
 387 00e0 0097      		sbiw r24,0
 388 00e2 01F0      		breq .L16
 181:../../../src/net/isa/isa.c ****     isa_rfRxInfo.pPayload = buf;
 390               	.LM33:
 391 00e4 9093 0000 		sts (isa_rfRxInfo+5)+1,r25
 392 00e8 8093 0000 		sts isa_rfRxInfo+5,r24
 182:../../../src/net/isa/isa.c ****     isa_rfRxInfo.max_length = size;
 394               	.LM34:
 395 00ec 6093 0000 		sts isa_rfRxInfo+4,r22
 396 00f0 81E0      		ldi r24,lo8(1)
 397 00f2 90E0      		ldi r25,hi8(1)
 398 00f4 0895      		ret
 399               	.L16:
 183:../../../src/net/isa/isa.c **** 
 184:../../../src/net/isa/isa.c **** return NRK_OK;
 401               	.LM35:
 402 00f6 8FEF      		ldi r24,lo8(-1)
 403 00f8 9FEF      		ldi r25,hi8(-1)
 185:../../../src/net/isa/isa.c **** }
 405               	.LM36:
 406 00fa 0895      		ret
 407               	/* epilogue: frame size=0 */
 408               	/* epilogue: noreturn */
 409               	/* epilogue end (size=0) */
 410               	/* function isa_rx_pkt_set_buffer size 16 (16) */
 412               	.Lscope5:
 414               		.stabd	78,0,0
 416               	.global	isa_start
 418               	isa_start:
 419               		.stabd	46,0,0
 186:../../../src/net/isa/isa.c **** 
 187:../../../src/net/isa/isa.c **** int8_t isa_wait_until_rx_pkt()
 188:../../../src/net/isa/isa.c **** {
 189:../../../src/net/isa/isa.c ****     nrk_signal_register(isa_rx_pkt_signal);
 190:../../../src/net/isa/isa.c ****     if (isa_rx_pkt_check() != 0)
 191:../../../src/net/isa/isa.c ****         return NRK_OK;
 192:../../../src/net/isa/isa.c ****     nrk_event_wait (SIG(isa_rx_pkt_signal));
 193:../../../src/net/isa/isa.c ****     return NRK_OK;
 194:../../../src/net/isa/isa.c **** }
 195:../../../src/net/isa/isa.c **** 
 196:../../../src/net/isa/isa.c **** int8_t isa_wait_until_rx_or_tx ()
 197:../../../src/net/isa/isa.c **** {
 198:../../../src/net/isa/isa.c ****     nrk_signal_register(isa_rx_pkt_signal);
 199:../../../src/net/isa/isa.c ****     nrk_signal_register(isa_tx_done_signal);
 200:../../../src/net/isa/isa.c ****     nrk_event_wait (SIG(isa_rx_pkt_signal) | SIG(isa_tx_done_signal));
 201:../../../src/net/isa/isa.c ****     return NRK_OK;
 202:../../../src/net/isa/isa.c **** }
 203:../../../src/net/isa/isa.c **** 
 204:../../../src/net/isa/isa.c **** /**
 205:../../../src/net/isa/isa.c ****  * isa_init()
 206:../../../src/net/isa/isa.c ****  *
 207:../../../src/net/isa/isa.c ****  * This function sets up the low level link layer parameters.
 208:../../../src/net/isa/isa.c ****  * This starts the main timer routine that will then automatically
 209:../../../src/net/isa/isa.c ****  * trigger whenever a packet might be sent or received.
 210:../../../src/net/isa/isa.c ****  * This should be called before ANY scheduling information is set
 211:../../../src/net/isa/isa.c ****  * since it will clear some default values.
 212:../../../src/net/isa/isa.c ****  *
 213:../../../src/net/isa/isa.c ****  */
 214:../../../src/net/isa/isa.c **** uint8_t isa_init (isa_node_mode_t mode, uint8_t id, uint8_t src_id)
 215:../../../src/net/isa/isa.c **** {
 216:../../../src/net/isa/isa.c ****     uint8_t i;
 217:../../../src/net/isa/isa.c **** 
 218:../../../src/net/isa/isa.c ****     /* Generate signals */
 219:../../../src/net/isa/isa.c ****     isa_rx_pkt_signal=nrk_signal_create();
 220:../../../src/net/isa/isa.c ****     if(isa_rx_pkt_signal==NRK_ERROR){
 221:../../../src/net/isa/isa.c **** 	nrk_kprintf(PSTR("ISA ERROR: creating rx signal failed\r\n"));
 222:../../../src/net/isa/isa.c **** 	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
 223:../../../src/net/isa/isa.c **** 	return NRK_ERROR;
 224:../../../src/net/isa/isa.c ****     }
 225:../../../src/net/isa/isa.c ****     isa_tx_done_signal=nrk_signal_create();
 226:../../../src/net/isa/isa.c ****     if(isa_tx_done_signal==NRK_ERROR){
 227:../../../src/net/isa/isa.c **** 	nrk_kprintf(PSTR("ISA ERROR: creating tx signal failed\r\n"));
 228:../../../src/net/isa/isa.c **** 	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
 229:../../../src/net/isa/isa.c **** 	return NRK_ERROR;
 230:../../../src/net/isa/isa.c ****     }
 231:../../../src/net/isa/isa.c **** 
 232:../../../src/net/isa/isa.c ****     // No buffer to start with
 233:../../../src/net/isa/isa.c ****     isa_rfRxInfo.pPayload = NULL;
 234:../../../src/net/isa/isa.c ****     isa_rfRxInfo.max_length = 0;
 235:../../../src/net/isa/isa.c **** 
 236:../../../src/net/isa/isa.c ****     /*FIXME Actually we dont need to always run the high speed timer */
 237:../../../src/net/isa/isa.c ****     _nrk_high_speed_timer_start();  
 238:../../../src/net/isa/isa.c **** 
 239:../../../src/net/isa/isa.c ****     /* clear everything out */
 240:../../../src/net/isa/isa.c ****     global_cycle = 0;
 241:../../../src/net/isa/isa.c ****     global_slot = MAX_ISA_GLOBAL_SLOTS;
 242:../../../src/net/isa/isa.c ****     _isa_sync_ok = 0;
 243:../../../src/net/isa/isa.c ****     _isa_join_ok = 0;
 244:../../../src/net/isa/isa.c ****     slot_expired = 0;
 245:../../../src/net/isa/isa.c ****     isa_node_mode = mode;
 246:../../../src/net/isa/isa.c ****     isa_id = id;//change
 247:../../../src/net/isa/isa.c ****     dmo.dlAddress = id;
 248:../../../src/net/isa/isa.c ****     isa_clk_src_id=src_id; //change
 249:../../../src/net/isa/isa.c ****     isa_rx_data_ready = 0;
 250:../../../src/net/isa/isa.c **** 
 251:../../../src/net/isa/isa.c ****     isa_param.mobile_sync_timeout = 100;
 252:../../../src/net/isa/isa.c ****     isa_param.rx_timeout = 8000;   // 8000 *.125us = 1ms
 253:../../../src/net/isa/isa.c ****     isa_param.tx_guard_time = TX_GUARD_TIME;
 254:../../../src/net/isa/isa.c ****     isa_param.channel = 15;
 255:../../../src/net/isa/isa.c ****     isa_param.mac_addr = 0x1981;
 256:../../../src/net/isa/isa.c **** /*
 257:../../../src/net/isa/isa.c **** for (i = 0; i < ISA_SLOTS_PER_FRAME; i++) {
 258:../../../src/net/isa/isa.c ****         isa_sched[i] = 0;
 259:../../../src/net/isa/isa.c ****     }
 260:../../../src/net/isa/isa.c ****     isa_tdma_rx_mask = 0;
 261:../../../src/net/isa/isa.c ****     isa_tdma_tx_mask = 0;
 262:../../../src/net/isa/isa.c **** */
 263:../../../src/net/isa/isa.c ****     /* Setup the cc2420 chip */
 264:../../../src/net/isa/isa.c ****     rf_init (&isa_rfRxInfo, isa_param.channel, 0x2421, isa_param.mac_addr);
 265:../../../src/net/isa/isa.c **** 
 266:../../../src/net/isa/isa.c ****     AFTER_FIRST_SYNC = 1;
 267:../../../src/net/isa/isa.c **** 
 268:../../../src/net/isa/isa.c ****     /* Setup fisrt hopping channel */
 269:../../../src/net/isa/isa.c ****     #ifdef CHANNEL_HOPPING
 270:../../../src/net/isa/isa.c **** 	slowIndex=0; 
 271:../../../src/net/isa/isa.c **** 	if(id!=0){
 272:../../../src/net/isa/isa.c **** 	    channelIndex = src_id;
 273:../../../src/net/isa/isa.c **** 	    currentChannel = slottedPattern[channelIndex];   
 274:../../../src/net/isa/isa.c **** 	}else{
 275:../../../src/net/isa/isa.c **** 	    channelIndex = 0;
 276:../../../src/net/isa/isa.c **** 	    currentChannel = slottedPattern[channelIndex];
 277:../../../src/net/isa/isa.c **** 	}
 278:../../../src/net/isa/isa.c **** 	isa_set_channel(currentChannel);
 279:../../../src/net/isa/isa.c ****     #endif
 280:../../../src/net/isa/isa.c **** 
 281:../../../src/net/isa/isa.c ****     #ifdef JOIN_PROCESS
 282:../../../src/net/isa/isa.c **** 	if(mode==ISA_GATEWAY){
 283:../../../src/net/isa/isa.c **** 	   for(i=22;i<=24;i++){
 284:../../../src/net/isa/isa.c **** 		isa_tx_info[i].pPayload = join_pkt_buf;
 285:../../../src/net/isa/isa.c ****     		isa_tx_info[i].length = PKT_DATA_START+1;    // pass le pointer
 286:../../../src/net/isa/isa.c ****     		isa_tx_info[i].DHDR = configDHDR();
 287:../../../src/net/isa/isa.c ****     		isa_tx_data_ready |= ((uint32_t) 1 << i);        // set the flag
 288:../../../src/net/isa/isa.c **** 	   }
 289:../../../src/net/isa/isa.c ****         }
 290:../../../src/net/isa/isa.c ****     #endif
 291:../../../src/net/isa/isa.c **** 
 292:../../../src/net/isa/isa.c ****     resync_times=0;
 293:../../../src/net/isa/isa.c **** 
 294:../../../src/net/isa/isa.c ****     dlmoInit();	//Initialize the  dlmo data structure
 295:../../../src/net/isa/isa.c ****     return NRK_OK;
 296:../../../src/net/isa/isa.c **** }
 297:../../../src/net/isa/isa.c **** 
 298:../../../src/net/isa/isa.c **** void isa_start ()
 299:../../../src/net/isa/isa.c **** {
 421               	.LM37:
 422               	.LFBB6:
 423               	/* prologue: frame size=0 */
 424               	/* prologue end (size=0) */
 300:../../../src/net/isa/isa.c ****     //_isa_clear_sched_cache ();
 301:../../../src/net/isa/isa.c ****     _isa_ready = 2;
 426               	.LM38:
 427 00fc 82E0      		ldi r24,lo8(2)
 428 00fe 8093 0000 		sts _isa_ready,r24
 429               	/* epilogue: frame size=0 */
 430 0102 0895      		ret
 431               	/* epilogue end (size=1) */
 432               	/* function isa_start size 4 (3) */
 434               	.Lscope6:
 436               		.stabd	78,0,0
 439               	.global	configDHDR
 441               	configDHDR:
 442               		.stabd	46,0,0
 302:../../../src/net/isa/isa.c **** }
 303:../../../src/net/isa/isa.c **** 
 304:../../../src/net/isa/isa.c **** /**
 305:../../../src/net/isa/isa.c ****  * configDHDR()
 306:../../../src/net/isa/isa.c ****  *
 307:../../../src/net/isa/isa.c ****  * Gateway could config the DHDR by informing the nodes.
 308:../../../src/net/isa/isa.c ****  * DHDR contains control information that should be loaded
 309:../../../src/net/isa/isa.c ****  * into the PDU header.
 310:../../../src/net/isa/isa.c ****  *
 311:../../../src/net/isa/isa.c ****  */
 312:../../../src/net/isa/isa.c **** int8_t configDHDR(DLMO_LINK * link)
 313:../../../src/net/isa/isa.c **** {
 444               	.LM39:
 445               	.LFBB7:
 446               	/* prologue: frame size=0 */
 447 0104 CF93      		push r28
 448 0106 DF93      		push r29
 449               	/* prologue end (size=2) */
 314:../../../src/net/isa/isa.c **** 
 315:../../../src/net/isa/isa.c **** 	//lookup neighbor information to deciede whether to request clock
 316:../../../src/net/isa/isa.c ****     int8_t DHDR = 1;
 317:../../../src/net/isa/isa.c ****     if(1){//request ACK - always for multicast device
 318:../../../src/net/isa/isa.c **** 	DHDR |= 1<<7;
 319:../../../src/net/isa/isa.c ****     }
 320:../../../src/net/isa/isa.c ****     if(1){//request signal quality in ACK
 321:../../../src/net/isa/isa.c **** 	DHDR |= 1<<6;
 322:../../../src/net/isa/isa.c ****     }
 323:../../../src/net/isa/isa.c ****     if(1){//request EUI
 324:../../../src/net/isa/isa.c **** 	DHDR |= 1<<5;
 325:../../../src/net/isa/isa.c ****     }
 326:../../../src/net/isa/isa.c ****     if(0){//include DAUX
 327:../../../src/net/isa/isa.c **** 	DHDR |= 1<<4;
 328:../../../src/net/isa/isa.c ****     }
 329:../../../src/net/isa/isa.c ****     if(0){//include slow hopping offset
 330:../../../src/net/isa/isa.c **** 	DHDR |= 1<<3;
 331:../../../src/net/isa/isa.c ****     }
 332:../../../src/net/isa/isa.c ****     if(ISAMASK(link->neighbor->typeInfo, CLOCK_PREFERRED) == CLOCK_PREFERRED ){//is clock recipient
 451               	.LM40:
 452 0108 EC01      		movw r28,r24
 453 010a E885      		ldd r30,Y+8
 454 010c F985      		ldd r31,Y+9
 455 010e 8585      		ldd r24,Z+13
 456 0110 87FF      		sbrs r24,7
 457 0112 00C0      		rjmp .L24
 459               	.LM41:
 460 0114 85EE      		ldi r24,lo8(-27)
 461 0116 00C0      		rjmp .L26
 462               	.L24:
 463 0118 81EE      		ldi r24,lo8(-31)
 464               	.L26:
 333:../../../src/net/isa/isa.c **** 	DHDR |= 1<<2;
 334:../../../src/net/isa/isa.c **** 	//printf ("Asking for time correction");
 335:../../../src/net/isa/isa.c ****     }
 336:../../../src/net/isa/isa.c ****     return DHDR;
 337:../../../src/net/isa/isa.c **** }
 466               	.LM42:
 467 011a 9927      		clr r25
 468 011c 87FD      		sbrc r24,7
 469 011e 9095      		com r25
 470               	/* epilogue: frame size=0 */
 471 0120 DF91      		pop r29
 472 0122 CF91      		pop r28
 473 0124 0895      		ret
 474               	/* epilogue end (size=3) */
 475               	/* function configDHDR size 17 (12) */
 480               	.Lscope7:
 482               		.stabd	78,0,0
 485               	.global	configDHR
 487               	configDHR:
 488               		.stabd	46,0,0
 338:../../../src/net/isa/isa.c **** 
 339:../../../src/net/isa/isa.c **** /**
 340:../../../src/net/isa/isa.c ****  * configDHR()
 341:../../../src/net/isa/isa.c ****  *
 342:../../../src/net/isa/isa.c ****  * Gateway could config the DHR by informing the nodes.
 343:../../../src/net/isa/isa.c ****  * DHR contains control information that should be loaded
 344:../../../src/net/isa/isa.c ****  * into the ACK reply header.
 345:../../../src/net/isa/isa.c ****  *
 346:../../../src/net/isa/isa.c ****  */
 347:../../../src/net/isa/isa.c **** int8_t configDHR(uint8_t clockCorrection)
 348:../../../src/net/isa/isa.c **** {
 490               	.LM43:
 491               	.LFBB8:
 492               	/* prologue: frame size=0 */
 493               	/* prologue end (size=0) */
 349:../../../src/net/isa/isa.c ****     int8_t DHR = 3;
 350:../../../src/net/isa/isa.c ****     if(clockCorrection){//include clock correction change
 495               	.LM44:
 496 0126 8823      		tst r24
 497 0128 01F0      		breq .L29
 499               	.LM45:
 500 012a 83E8      		ldi r24,lo8(-125)
 501 012c 00C0      		rjmp .L31
 502               	.L29:
 503 012e 83E0      		ldi r24,lo8(3)
 504               	.L31:
 351:../../../src/net/isa/isa.c **** 	DHR |= 1<<7;
 352:../../../src/net/isa/isa.c ****     }
 353:../../../src/net/isa/isa.c ****     if(0){//including slow-hopping timeslot offset
 354:../../../src/net/isa/isa.c **** 	DHR |= 1<<6;
 355:../../../src/net/isa/isa.c ****     }
 356:../../../src/net/isa/isa.c ****     if(0){//request EUI
 357:../../../src/net/isa/isa.c **** 	DHR |= 1<<5;
 358:../../../src/net/isa/isa.c ****     }
 359:../../../src/net/isa/isa.c ****     if(0){//include DAUX
 360:../../../src/net/isa/isa.c **** 	DHR |= 1<<4;
 361:../../../src/net/isa/isa.c ****     }
 362:../../../src/net/isa/isa.c ****     if(0){//include slow hopping offset
 363:../../../src/net/isa/isa.c **** 	DHR |= 1<<3;
 364:../../../src/net/isa/isa.c ****     }
 365:../../../src/net/isa/isa.c ****    
 366:../../../src/net/isa/isa.c ****     return DHR;
 367:../../../src/net/isa/isa.c **** }
 506               	.LM46:
 507 0130 9927      		clr r25
 508 0132 87FD      		sbrc r24,7
 509 0134 9095      		com r25
 510               	/* epilogue: frame size=0 */
 511 0136 0895      		ret
 512               	/* epilogue end (size=1) */
 513               	/* function configDHR size 9 (8) */
 518               	.Lscope8:
 520               		.stabd	78,0,0
 533               	.global	configAdvDAUX
 535               	configAdvDAUX:
 536               		.stabd	46,0,0
 368:../../../src/net/isa/isa.c **** 
 369:../../../src/net/isa/isa.c **** /**
 370:../../../src/net/isa/isa.c ****  * configAdvDAUX()
 371:../../../src/net/isa/isa.c ****  *
 372:../../../src/net/isa/isa.c ****  * Gateway could config the DAUX 
 373:../../../src/net/isa/isa.c ****  * DAUX contains superframe and join information 
 374:../../../src/net/isa/isa.c ****  *
 375:../../../src/net/isa/isa.c ****  */
 376:../../../src/net/isa/isa.c **** void configAdvDAUX(uint8_t chPattern, uint8_t chIndex, uint8_t sp_period, uint8_t tx_slot1, uint8_t
 377:../../../src/net/isa/isa.c **** {	
 538               	.LM47:
 539               	.LFBB9:
 540               	/* prologue: frame size=0 */
 541 0138 8F92      		push r8
 542 013a AF92      		push r10
 543 013c CF92      		push r12
 544 013e EF92      		push r14
 545 0140 0F93      		push r16
 546 0142 CF93      		push r28
 547 0144 DF93      		push r29
 548 0146 CDB7      		in r28,__SP_L__
 549 0148 DEB7      		in r29,__SP_H__
 550               	/* prologue end (size=9) */
 378:../../../src/net/isa/isa.c ****     /*ADVERTISEMENT SELECTION*/
 379:../../../src/net/isa/isa.c ****     DAUX[0]=0; // Advertisement selection, 0 indicates advertisement DAUX
 552               	.LM48:
 553 014a 1092 0000 		sts DAUX,__zero_reg__
 380:../../../src/net/isa/isa.c ****     
 381:../../../src/net/isa/isa.c ****     /*TIME SYNCHRONIZATION*/
 382:../../../src/net/isa/isa.c ****     /* 1-6 bytes are reserved for time synchronization */ 
 383:../../../src/net/isa/isa.c ****   
 384:../../../src/net/isa/isa.c ****     /*SUPERFRAME INFORMATION*/
 385:../../../src/net/isa/isa.c ****     DAUX[7]=10; // timeslot duration, currently not used.
 555               	.LM49:
 556 014e 9AE0      		ldi r25,lo8(10)
 557 0150 9093 0000 		sts DAUX+7,r25
 386:../../../src/net/isa/isa.c ****     DAUX[8]=0; // reserved for long timeslot duration
 559               	.LM50:
 560 0154 1092 0000 		sts DAUX+8,__zero_reg__
 387:../../../src/net/isa/isa.c ****     DAUX[9]=chPattern; // channel pattern selection
 562               	.LM51:
 563 0158 8093 0000 		sts DAUX+9,r24
 388:../../../src/net/isa/isa.c ****     DAUX[10]=chIndex; // channel index selection
 565               	.LM52:
 566 015c 6093 0000 		sts DAUX+10,r22
 389:../../../src/net/isa/isa.c ****     DAUX[11]=sp_period; // superframe period
 568               	.LM53:
 569 0160 4093 0000 		sts DAUX+11,r20
 390:../../../src/net/isa/isa.c ****     DAUX[12]=0; // reserved for long period situation  
 571               	.LM54:
 572 0164 1092 0000 		sts DAUX+12,__zero_reg__
 391:../../../src/net/isa/isa.c ****     /* 13 reserved for superframe cycle starting point
 392:../../../src/net/isa/isa.c ****        14 reserved of the length of slow hopping period
 393:../../../src/net/isa/isa.c ****        15 and 16 reserved for channel hopping channel map for spectrum management
 394:../../../src/net/isa/isa.c ****     */
 395:../../../src/net/isa/isa.c **** 
 396:../../../src/net/isa/isa.c ****     /*JOIN INFORMATION*/
 397:../../../src/net/isa/isa.c ****     /* 17 reserved for Join backoff and timeout
 398:../../../src/net/isa/isa.c ****        18 reserved for Indicates fields that are transmitted
 399:../../../src/net/isa/isa.c ****     */
 400:../../../src/net/isa/isa.c ****     DAUX[19]=tx_slot1;  //TX slot 1
 574               	.LM55:
 575 0168 2093 0000 		sts DAUX+19,r18
 401:../../../src/net/isa/isa.c ****     DAUX[20]=tx_slot2;  //TX slot 2
 577               	.LM56:
 578 016c 0093 0000 		sts DAUX+20,r16
 402:../../../src/net/isa/isa.c ****     DAUX[21]=tx_slot3;  //TX slot 3
 580               	.LM57:
 581 0170 E092 0000 		sts DAUX+21,r14
 403:../../../src/net/isa/isa.c ****     DAUX[22]=tx_slot4;  //TX slot 4
 583               	.LM58:
 584 0174 C092 0000 		sts DAUX+22,r12
 404:../../../src/net/isa/isa.c ****     DAUX[23]=rx_slot1;  //RX slot 1
 586               	.LM59:
 587 0178 A092 0000 		sts DAUX+23,r10
 405:../../../src/net/isa/isa.c ****     DAUX[24]=rx_slot2;  //RX slot 2
 589               	.LM60:
 590 017c 8092 0000 		sts DAUX+24,r8
 406:../../../src/net/isa/isa.c ****     DAUX[25]=rx_slot3;  //RX slot 3
 592               	.LM61:
 593 0180 8A85      		ldd r24,Y+10
 594 0182 8093 0000 		sts DAUX+25,r24
 407:../../../src/net/isa/isa.c ****     DAUX[26]=rx_slot4;  //RX slot 4
 596               	.LM62:
 597 0186 8B85      		ldd r24,Y+11
 598 0188 8093 0000 		sts DAUX+26,r24
 599               	/* epilogue: frame size=0 */
 600 018c DF91      		pop r29
 601 018e CF91      		pop r28
 602 0190 0F91      		pop r16
 603 0192 EF90      		pop r14
 604 0194 CF90      		pop r12
 605 0196 AF90      		pop r10
 606 0198 8F90      		pop r8
 607 019a 0895      		ret
 608               	/* epilogue end (size=8) */
 609               	/* function configAdvDAUX size 50 (33) */
 613               	.Lscope9:
 615               		.stabd	78,0,0
 617               	.global	isa_rx_pkt_check
 619               	isa_rx_pkt_check:
 620               		.stabd	46,0,0
 408:../../../src/net/isa/isa.c **** 
 409:../../../src/net/isa/isa.c ****     /*INTEGRETY CHECK*/
 410:../../../src/net/isa/isa.c ****     /* 27 and 28 are reserved for Integrety check*/
 411:../../../src/net/isa/isa.c **** }
 412:../../../src/net/isa/isa.c **** 
 413:../../../src/net/isa/isa.c **** /**
 414:../../../src/net/isa/isa.c ****  * isa_check_rx_status()
 415:../../../src/net/isa/isa.c ****  *
 416:../../../src/net/isa/isa.c ****  * This function returns if there is a packet in the link layer
 417:../../../src/net/isa/isa.c ****  * rx buffer.  Once a packet has been received, it should be quickly
 418:../../../src/net/isa/isa.c ****  * processed or moved and then rtl_release_rx_packet() should be called. 
 419:../../../src/net/isa/isa.c ****  * rtl_release_rx_packet() then resets the value of rtl_check_rx_status()
 420:../../../src/net/isa/isa.c ****  *
 421:../../../src/net/isa/isa.c ****  * Returns: 1 if a new packet was received, 0 otherwise
 422:../../../src/net/isa/isa.c ****  */
 423:../../../src/net/isa/isa.c **** int8_t isa_rx_pkt_check()
 424:../../../src/net/isa/isa.c **** {
 622               	.LM63:
 623               	.LFBB10:
 624               	/* prologue: frame size=0 */
 625               	/* prologue end (size=0) */
 626 019c 8091 0000 		lds r24,isa_rx_data_ready
 425:../../../src/net/isa/isa.c ****     return isa_rx_data_ready;
 426:../../../src/net/isa/isa.c **** }
 628               	.LM64:
 629 01a0 9927      		clr r25
 630 01a2 87FD      		sbrc r24,7
 631 01a4 9095      		com r25
 632               	/* epilogue: frame size=0 */
 633 01a6 0895      		ret
 634               	/* epilogue end (size=1) */
 635               	/* function isa_rx_pkt_check size 6 (5) */
 637               	.Lscope10:
 639               		.stabd	78,0,0
 641               	.global	isa_rx_pkt_release
 643               	isa_rx_pkt_release:
 644               		.stabd	46,0,0
 427:../../../src/net/isa/isa.c **** 
 428:../../../src/net/isa/isa.c **** /**
 429:../../../src/net/isa/isa.c ****  * isa_rx_pkt_get()
 430:../../../src/net/isa/isa.c ****  *
 431:../../../src/net/isa/isa.c ****  * This function returns the rx buffer point. It should be called
 432:../../../src/net/isa/isa.c ****  * once a packet is received and must be followed by isa_release_rx_packet().
 433:../../../src/net/isa/isa.c ****  * isa_release_rx_packet() then resets the value of isa_check_rx_status().
 434:../../../src/net/isa/isa.c ****  * 
 435:../../../src/net/isa/isa.c ****  * Returns: rx buffer point
 436:../../../src/net/isa/isa.c ****  */
 437:../../../src/net/isa/isa.c **** uint8_t* isa_rx_pkt_get (uint8_t *len, int8_t *rssi)
 438:../../../src/net/isa/isa.c **** {
 439:../../../src/net/isa/isa.c ****     if(isa_rx_pkt_check()==0){
 440:../../../src/net/isa/isa.c **** 	*len=0;
 441:../../../src/net/isa/isa.c **** 	*rssi=0;
 442:../../../src/net/isa/isa.c **** 	return NULL;
 443:../../../src/net/isa/isa.c ****     }
 444:../../../src/net/isa/isa.c ****     *len=isa_rfRxInfo.length;
 445:../../../src/net/isa/isa.c ****     *rssi=isa_rfRxInfo.rssi;
 446:../../../src/net/isa/isa.c **** 
 447:../../../src/net/isa/isa.c **** 
 448:../../../src/net/isa/isa.c ****     return isa_rfRxInfo.pPayload;
 449:../../../src/net/isa/isa.c **** }
 450:../../../src/net/isa/isa.c **** 
 451:../../../src/net/isa/isa.c **** /**
 452:../../../src/net/isa/isa.c ****  * _isa_rx()
 453:../../../src/net/isa/isa.c ****  *
 454:../../../src/net/isa/isa.c ****  * This is the low level RX packet function.  It will read in
 455:../../../src/net/isa/isa.c ****  * a packet and buffer it in the link layer's single RX buffer.
 456:../../../src/net/isa/isa.c ****  * This buffer can be checked with rtl_check_rx_status() and 
 457:../../../src/net/isa/isa.c ****  * released with rtl_release_rx_packet().  If the buffer has not
 458:../../../src/net/isa/isa.c ****  * been released and a new packet arrives, the packet will be lost.
 459:../../../src/net/isa/isa.c ****  * This function is only called from the timer interrupt routine.
 460:../../../src/net/isa/isa.c ****  *
 461:../../../src/net/isa/isa.c ****  * Arguments: slot is the current slot that is actively in RX mode.
 462:../../../src/net/isa/isa.c ****  */
 463:../../../src/net/isa/isa.c **** 
 464:../../../src/net/isa/isa.c **** void _isa_rx (DLMO_LINK * link, uint8_t slot)
 465:../../../src/net/isa/isa.c **** {
 466:../../../src/net/isa/isa.c **** 	uint8_t DHDR;  // Data link layer header sub-header, currently used as ACK control
 467:../../../src/net/isa/isa.c **** //putchar('R');
 468:../../../src/net/isa/isa.c ****     uint8_t n;
 469:../../../src/net/isa/isa.c ****     uint32_t node_mask;
 470:../../../src/net/isa/isa.c ****     uint16_t destAddr;
 471:../../../src/net/isa/isa.c ****     volatile uint8_t timeout;
 472:../../../src/net/isa/isa.c **** 
 473:../../../src/net/isa/isa.c ****     #ifdef LED_DEBUG
 474:../../../src/net/isa/isa.c **** 	nrk_led_set(1);
 475:../../../src/net/isa/isa.c ****     #endif
 476:../../../src/net/isa/isa.c ****     rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel 
 477:../../../src/net/isa/isa.c ****     rf_polling_rx_on ();
 478:../../../src/net/isa/isa.c ****     nrk_gpio_set(NRK_DEBUG_2);
 479:../../../src/net/isa/isa.c ****     // Timing for waiting for sfd
 480:../../../src/net/isa/isa.c ****     timeout = _nrk_os_timer_get();
 481:../../../src/net/isa/isa.c ****     timeout+=4;  // 4ms
 482:../../../src/net/isa/isa.c ****     n = 0;
 483:../../../src/net/isa/isa.c ****     //nrk_gpio_set(NRK_DEBUG_3);
 484:../../../src/net/isa/isa.c ****     while ((n = rf_rx_check_sfd()) == 0) {
 485:../../../src/net/isa/isa.c ****         if (_nrk_os_timer_get() > timeout) {
 486:../../../src/net/isa/isa.c **** 	    //spend too much time on waiting for a pkt's arrival
 487:../../../src/net/isa/isa.c ****         	nrk_gpio_clr(NRK_DEBUG_2);
 488:../../../src/net/isa/isa.c **** 
 489:../../../src/net/isa/isa.c **** 	    rf_rx_off ();
 490:../../../src/net/isa/isa.c **** 	    #ifdef LED_DEBUG
 491:../../../src/net/isa/isa.c **** 		nrk_led_clr(1);
 492:../../../src/net/isa/isa.c **** 	    #endif
 493:../../../src/net/isa/isa.c **** 	    #ifdef RX_DEBUG
 494:../../../src/net/isa/isa.c **** 		 nrk_gpio_set(NRK_DEBUG_2);
 495:../../../src/net/isa/isa.c **** 				 nrk_gpio_clr(NRK_DEBUG_2);
 496:../../../src/net/isa/isa.c **** 		putchar('v');
 497:../../../src/net/isa/isa.c **** 		//printf("%d", slot);
 498:../../../src/net/isa/isa.c **** 		//printf("sfd times out.\n\r");
 499:../../../src/net/isa/isa.c **** 	    #endif
 500:../../../src/net/isa/isa.c **** 		packetsLost++;
 501:../../../src/net/isa/isa.c **** 		return;
 502:../../../src/net/isa/isa.c ****         }
 503:../../../src/net/isa/isa.c ****     }
 504:../../../src/net/isa/isa.c **** //printf("%d\n\r",_nrk_high_speed_timer_get());
 505:../../../src/net/isa/isa.c ****     // sfd received, start receiving packet and record start time
 506:../../../src/net/isa/isa.c ****     rx_start_time = _nrk_high_speed_timer_get();
 507:../../../src/net/isa/isa.c **** 
 508:../../../src/net/isa/isa.c ****     // Timing for waiting for finishing packet receiving
 509:../../../src/net/isa/isa.c ****     timeout = _nrk_os_timer_get(); 
 510:../../../src/net/isa/isa.c ****     timeout += 5;               // 5ms
 511:../../../src/net/isa/isa.c ****     if (n != 0) {
 512:../../../src/net/isa/isa.c ****         n = 0;
 513:../../../src/net/isa/isa.c ****        // printf("Packet on its way\n\r");
 514:../../../src/net/isa/isa.c ****         while ((n = rf_polling_rx_packet (false,128)) == 0) {
 515:../../../src/net/isa/isa.c **** 	    //printf("%d\n\r",_nrk_os_timer_get());
 516:../../../src/net/isa/isa.c ****             if (_nrk_os_timer_get () > timeout) {
 517:../../../src/net/isa/isa.c **** 		#ifdef RX_DEBUG
 518:../../../src/net/isa/isa.c **** 		    printf("packet is too long, times out.\n\r");
 519:../../../src/net/isa/isa.c **** 		#endif
 520:../../../src/net/isa/isa.c **** 		    packetsLost++;
 521:../../../src/net/isa/isa.c **** 		    // spend too much time on receiving pkt.
 522:../../../src/net/isa/isa.c ****                 return;          // huge timeout as fail safe
 523:../../../src/net/isa/isa.c ****             }
 524:../../../src/net/isa/isa.c ****         }
 525:../../../src/net/isa/isa.c ****     }
 526:../../../src/net/isa/isa.c ****     nrk_gpio_clr(NRK_DEBUG_2);
 527:../../../src/net/isa/isa.c ****    // printf("%d", currentChannel);
 528:../../../src/net/isa/isa.c ****     rf_rx_off ();
 529:../../../src/net/isa/isa.c **** 
 530:../../../src/net/isa/isa.c ****     if  (n !=1){	//size of packet must have been wrong
 531:../../../src/net/isa/isa.c **** 	putchar('b');
 532:../../../src/net/isa/isa.c **** 	packetsLost++;
 533:../../../src/net/isa/isa.c **** }
 534:../../../src/net/isa/isa.c **** 
 535:../../../src/net/isa/isa.c ****     if (n == 1) {// successfully received packet
 536:../../../src/net/isa/isa.c ****     	rxCount++;
 537:../../../src/net/isa/isa.c ****     	nrk_led_toggle(BLUE_LED);
 538:../../../src/net/isa/isa.c ****     	//If I am the destination
 539:../../../src/net/isa/isa.c ****     	destAddr = isa_rfRxInfo.pPayload[DEST_INDEX];
 540:../../../src/net/isa/isa.c ****     	//putchar ('r');
 541:../../../src/net/isa/isa.c **** 	//potential problem: if repeater or recipient receives noise, the DHDR would be changed. And it is
 542:../../../src/net/isa/isa.c **** 	//if(isa_node_mode != ISA_GATEWAY)
 543:../../../src/net/isa/isa.c **** 	    DHDR = isa_rfRxInfo.pPayload[DHDR_INDEX];
 544:../../../src/net/isa/isa.c **** 	#ifdef RX_DEBUG
 545:../../../src/net/isa/isa.c **** 	   // printf("Repeater slot = %d, local slot is %d.\n\r", isa_rfRxInfo.pPayload[SLOT_INDEX],global
 546:../../../src/net/isa/isa.c **** 	#endif RX_DEBUG	
 547:../../../src/net/isa/isa.c **** 	nrk_event_signal(isa_rx_pkt_signal);	
 548:../../../src/net/isa/isa.c **** 
 549:../../../src/net/isa/isa.c **** 	node_mask = ((uint32_t) 1) << isa_rfRxInfo.pPayload[SRC_INDEX];
 550:../../../src/net/isa/isa.c **** 	
 551:../../../src/net/isa/isa.c **** 	if(DHDR & (1<<7)){
 552:../../../src/net/isa/isa.c **** 		txCount++;
 553:../../../src/net/isa/isa.c **** 	    // Transmit ACK packet
 554:../../../src/net/isa/isa.c **** 	    DHR = configDHR(DHDR & (1<<2));
 555:../../../src/net/isa/isa.c **** 	  //  printf("%d", DHR);
 556:../../../src/net/isa/isa.c **** 	    isa_ack_buf[DHR_INDEX]= DHR;
 557:../../../src/net/isa/isa.c **** 	    #ifdef ACK_DEBUG
 558:../../../src/net/isa/isa.c **** 		//printf("DHDR is %x.\n\r",DHDR);
 559:../../../src/net/isa/isa.c **** 	    #endif
 560:../../../src/net/isa/isa.c **** 	    isa_ack_tx.pPayload = isa_ack_buf;
 561:../../../src/net/isa/isa.c **** 	    if (DHDR & (1<<2)) { //reply ACK with time offsetX
 562:../../../src/net/isa/isa.c **** 	    	    	putchar ('K');
 563:../../../src/net/isa/isa.c **** 	    		offsetX = rx_start_time - slot_start_time;
 564:../../../src/net/isa/isa.c **** 	    		//printf("slot_start_time is %d,rx_start_time is %d.\n\r",slot_start_time,rx_start_time);
 565:../../../src/net/isa/isa.c **** 	    		uint8_t temp1,temp2;
 566:../../../src/net/isa/isa.c **** 	    		temp1 = (offsetX & 0xFF00)>>8;
 567:../../../src/net/isa/isa.c **** 	    		isa_ack_buf[OFFSET_HIGH]=temp1;
 568:../../../src/net/isa/isa.c **** 	    		temp2 = (offsetX & 0x00FF);
 569:../../../src/net/isa/isa.c **** 	     		isa_ack_buf[OFFSET_LOW]=temp2;
 570:../../../src/net/isa/isa.c **** 	    		#ifdef ACK_DEBUG
 571:../../../src/net/isa/isa.c **** 	    		  //  printf("offsetX is %d\n\r", offsetX);
 572:../../../src/net/isa/isa.c **** 	    		#endif
 573:../../../src/net/isa/isa.c **** 	    		//isa_ack_tx.length = PKT_DATA_START + 1;
 574:../../../src/net/isa/isa.c **** 	    		isa_ack_tx.length = 4;
 575:../../../src/net/isa/isa.c **** 	    	    }
 576:../../../src/net/isa/isa.c **** 
 577:../../../src/net/isa/isa.c **** 	    else
 578:../../../src/net/isa/isa.c **** 	    { // recipient , only reply explicit ACK
 579:../../../src/net/isa/isa.c **** 	        //isa_ack_tx.length = PKT_DATA_START-1;
 580:../../../src/net/isa/isa.c **** 		isa_ack_tx.length = 2;
 581:../../../src/net/isa/isa.c **** 		//putchar ('C');
 582:../../../src/net/isa/isa.c **** 		//putchar('\n');
 583:../../../src/net/isa/isa.c ****             }
 584:../../../src/net/isa/isa.c **** 	   nrk_gpio_set(NRK_DEBUG_2);
 585:../../../src/net/isa/isa.c **** 	    rf_tx_tdma_packet (&isa_ack_tx,slot_start_time,isa_param.tx_guard_time,&tx_start_time);	
 586:../../../src/net/isa/isa.c **** 	    nrk_gpio_clr(NRK_DEBUG_2);
 587:../../../src/net/isa/isa.c **** 	}	
 588:../../../src/net/isa/isa.c **** 
 589:../../../src/net/isa/isa.c **** 	if (destAddr == dmo.dlAddress) {
 590:../../../src/net/isa/isa.c **** 		dd_data_indication(isa_rfRxInfo.pPayload[SRC_INDEX] , destAddr,0,0, 0, 0, isa_rfRxInfo.pPayload);
 591:../../../src/net/isa/isa.c **** 	}
 592:../../../src/net/isa/isa.c **** 	else{
 593:../../../src/net/isa/isa.c **** 		//if the dest address is not mine, then add into the queue to forward provided we have a link to 
 594:../../../src/net/isa/isa.c **** 		// this part should change later on, we should check the dest then lookup the next hop or neighbo
 595:../../../src/net/isa/isa.c **** 		if (isTransmitLinkPresent(destAddr)){
 596:../../../src/net/isa/isa.c **** 			//if yes, then place the message on the Queue again
 597:../../../src/net/isa/isa.c **** 			enQueue (destAddr, 0, 10, isa_rfRxInfo.pPayload, NULL);
 598:../../../src/net/isa/isa.c **** 			// printf("packet forwarded to %d", destAddr);
 599:../../../src/net/isa/isa.c **** 				  isa_rx_pkt_release();
 600:../../../src/net/isa/isa.c **** 		}
 601:../../../src/net/isa/isa.c **** 		else{
 602:../../../src/net/isa/isa.c **** 			printf("Dont know what to do with this packet for %d- releasing", destAddr);
 603:../../../src/net/isa/isa.c **** 			isa_rx_pkt_release();
 604:../../../src/net/isa/isa.c **** 		}
 605:../../../src/net/isa/isa.c **** 	}
 606:../../../src/net/isa/isa.c **** 
 607:../../../src/net/isa/isa.c **** 
 608:../../../src/net/isa/isa.c **** //nrk_gpio_clr(NRK_DEBUG_3);
 609:../../../src/net/isa/isa.c ****     }        
 610:../../../src/net/isa/isa.c ****     #ifdef LED_DEBUG
 611:../../../src/net/isa/isa.c **** 	nrk_led_clr (1);
 612:../../../src/net/isa/isa.c ****     #endif
 613:../../../src/net/isa/isa.c **** }
 614:../../../src/net/isa/isa.c **** 
 615:../../../src/net/isa/isa.c **** /**
 616:../../../src/net/isa/isa.c ****  * isa_release_rx_packet()
 617:../../../src/net/isa/isa.c ****  *
 618:../../../src/net/isa/isa.c ****  * This function releases the link layer's hold on the rx buffer.
 619:../../../src/net/isa/isa.c ****  * This must be called after a packet is received before a new
 620:../../../src/net/isa/isa.c ****  * packet can be buffered!  This should ideally be done by the
 621:../../../src/net/isa/isa.c ****  * network layer.
 622:../../../src/net/isa/isa.c ****  *
 623:../../../src/net/isa/isa.c ****  */
 624:../../../src/net/isa/isa.c **** 
 625:../../../src/net/isa/isa.c **** void isa_rx_pkt_release()
 626:../../../src/net/isa/isa.c **** {
 646               	.LM65:
 647               	.LFBB11:
 648               	/* prologue: frame size=0 */
 649               	/* prologue end (size=0) */
 627:../../../src/net/isa/isa.c ****     isa_rx_data_ready = 0;
 651               	.LM66:
 652 01a8 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 653 01ac 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 654 01b0 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 655 01b4 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 656               	/* epilogue: frame size=0 */
 657 01b8 0895      		ret
 658               	/* epilogue end (size=1) */
 659               	/* function isa_rx_pkt_release size 9 (8) */
 661               	.Lscope11:
 663               		.stabd	78,0,0
 665               	.global	isa_join_ready
 667               	isa_join_ready:
 668               		.stabd	46,0,0
 628:../../../src/net/isa/isa.c **** }
 629:../../../src/net/isa/isa.c **** 
 630:../../../src/net/isa/isa.c **** /**
 631:../../../src/net/isa/isa.c ****  * rtl_tx_packet()
 632:../../../src/net/isa/isa.c ****  *
 633:../../../src/net/isa/isa.c ****  * This function associates a slot with a particular packet that needs
 634:../../../src/net/isa/isa.c ****  * to be sent. 
 635:../../../src/net/isa/isa.c ****  * 
 636:../../../src/net/isa/isa.c ****  * Arguments: RF_TX_INFO *tx is a pointer to a transmit structure, this structure
 637:../../../src/net/isa/isa.c ****  *            must have a valid pPayload pointer to the real packet.
 638:../../../src/net/isa/isa.c ****  *            uint8_t slot is the value of the tx slot (starting from 0)
 639:../../../src/net/isa/isa.c ****  *
 640:../../../src/net/isa/isa.c ****  * Return:  currently always returns 1
 641:../../../src/net/isa/isa.c ****  */
 642:../../../src/net/isa/isa.c **** /*
 643:../../../src/net/isa/isa.c **** int8_t isa_tx_pkt (uint8_t *tx_buf, uint8_t len, uint8_t DHDR, uint8_t slot)
 644:../../../src/net/isa/isa.c **** {
 645:../../../src/net/isa/isa.c ****     isa_tx_info[slot].pPayload = tx_buf; 
 646:../../../src/net/isa/isa.c ****     isa_tx_info[slot].length = len;    // pass le pointer
 647:../../../src/net/isa/isa.c ****     isa_tx_info[slot].DHDR = DHDR;
 648:../../../src/net/isa/isa.c **** 
 649:../../../src/net/isa/isa.c ****     isa_tx_data_ready |= ((uint32_t) 1 << slot);        // set the flag
 650:../../../src/net/isa/isa.c ****     return 1;
 651:../../../src/net/isa/isa.c **** }
 652:../../../src/net/isa/isa.c **** */
 653:../../../src/net/isa/isa.c **** 
 654:../../../src/net/isa/isa.c **** /**
 655:../../../src/net/isa/isa.c ****  * isa_tx_pkt_check()
 656:../../../src/net/isa/isa.c ****  *
 657:../../../src/net/isa/isa.c ****  * This function allows an upper layer to check if a TX packet
 658:../../../src/net/isa/isa.c ****  * has been sent.  For instance, you would first send a packet 
 659:../../../src/net/isa/isa.c ****  * and then you could sleep or do more work, and eventually check
 660:../../../src/net/isa/isa.c ****  * done = isa_tx_pkt_check(8);
 661:../../../src/net/isa/isa.c ****  * to see if the packet had been sent by the interrupt routine.
 662:../../../src/net/isa/isa.c ****  *
 663:../../../src/net/isa/isa.c ****  * Returns: 1 if the packet was sent, 0 otherwise
 664:../../../src/net/isa/isa.c ****  */
 665:../../../src/net/isa/isa.c **** /*
 666:../../../src/net/isa/isa.c **** int8_t isa_tx_pkt_check(uint8_t slot)
 667:../../../src/net/isa/isa.c **** {
 668:../../../src/net/isa/isa.c ****     if ((isa_tx_data_ready & ((uint32_t) 1 << slot)) != 0)
 669:../../../src/net/isa/isa.c ****         return 1;
 670:../../../src/net/isa/isa.c ****     return 0;
 671:../../../src/net/isa/isa.c **** }
 672:../../../src/net/isa/isa.c **** */
 673:../../../src/net/isa/isa.c **** /**
 674:../../../src/net/isa/isa.c ****  * _isa_tx()
 675:../../../src/net/isa/isa.c ****  *
 676:../../../src/net/isa/isa.c ****  * This function is the low level TX function.
 677:../../../src/net/isa/isa.c ****  * It is only called from the timer interrupt and fetches any
 678:../../../src/net/isa/isa.c ****  * packets that were set for a particular slot by rtl_tx_packet().
 679:../../../src/net/isa/isa.c ****  *
 680:../../../src/net/isa/isa.c ****  * Arguments: slot is the active slot set by the interrupt timer.
 681:../../../src/net/isa/isa.c ****  */
 682:../../../src/net/isa/isa.c **** void _isa_tx (DLMO_LINK * link, uint16_t slot)
 683:../../../src/net/isa/isa.c **** {
 684:../../../src/net/isa/isa.c **** 	uint8_t DHDR;  // Data link layer header sub-header, currently used as ACK control
 685:../../../src/net/isa/isa.c **** 	uint8_t c;
 686:../../../src/net/isa/isa.c ****     uint8_t n;
 687:../../../src/net/isa/isa.c ****     uint8_t i;
 688:../../../src/net/isa/isa.c ****     int8_t tmp;
 689:../../../src/net/isa/isa.c ****     volatile uint8_t timeout;
 690:../../../src/net/isa/isa.c ****     uint8_t offsetSec, curSec;
 691:../../../src/net/isa/isa.c ****     uint16_t offsetNanoSec;
 692:../../../src/net/isa/isa.c ****     int16_t time_correction;
 693:../../../src/net/isa/isa.c ****     uint8_t tmp_nrk_prev_timer_val;
 694:../../../src/net/isa/isa.c ****     ISA_QUEUE *transmitEntry;
 695:../../../src/net/isa/isa.c ****     // load header
 696:../../../src/net/isa/isa.c ****     isa_rfTxInfo.cca = true;
 697:../../../src/net/isa/isa.c ****     //find if there is anything in the Queue to be transmitted
 698:../../../src/net/isa/isa.c ****     transmitEntry = getHighPriorityEntry(link->neighbor->index)	;//This holds the neighbor id
 699:../../../src/net/isa/isa.c ****     if (transmitEntry == NULL){
 700:../../../src/net/isa/isa.c ****     	printf("Nothing in the queue to transmit on slot %d ", slot);
 701:../../../src/net/isa/isa.c ****     	return;
 702:../../../src/net/isa/isa.c ****     }
 703:../../../src/net/isa/isa.c ****     previous_tx_slot = slot;
 704:../../../src/net/isa/isa.c ****     isa_rfTxInfo.pPayload= transmitEntry->tx_buf;
 705:../../../src/net/isa/isa.c ****     #ifdef TX_DEBUG
 706:../../../src/net/isa/isa.c **** 	//printf("TX Payload is: %s.\n\r", isa_rfTxInfo.pPayload);
 707:../../../src/net/isa/isa.c ****     #endif
 708:../../../src/net/isa/isa.c ****     isa_rfTxInfo.length=transmitEntry->length;
 709:../../../src/net/isa/isa.c ****     DHDR = configDHDR(link);
 710:../../../src/net/isa/isa.c ****     isa_rfTxInfo.pPayload[DHDR_INDEX] = DHDR;
 711:../../../src/net/isa/isa.c ****     isa_rfTxInfo.pPayload[SLOT_INDEX] = (global_slot & 0xFF); 
 712:../../../src/net/isa/isa.c ****     isa_rfTxInfo.pPayload[SRC_INDEX] = isa_id;//change
 713:../../../src/net/isa/isa.c ****     #ifdef JOIN_PROCESS
 714:../../../src/net/isa/isa.c ****     if(slot>=22 && isa_node_mode == ISA_GATEWAY){
 715:../../../src/net/isa/isa.c **** 	for(i=0;i<29;i++){
 716:../../../src/net/isa/isa.c **** 	 isa_rfTxInfo.pPayload[DAUX_INDEX+i]=DAUX[i];
 717:../../../src/net/isa/isa.c **** 	 //printf("DAUX[%d]=%d\r\n",i,isa_rfTxInfo.pPayload[DAUX_INDEX+i]);
 718:../../../src/net/isa/isa.c ****         }
 719:../../../src/net/isa/isa.c ****     } 
 720:../../../src/net/isa/isa.c ****     #endif
 721:../../../src/net/isa/isa.c ****     // FIXME a small bug. should not happen and should be fixed in _isa_init_sync()
 722:../../../src/net/isa/isa.c ****     //if(AFTER_FIRST_SYNC == 1){    
 723:../../../src/net/isa/isa.c **** 	_nrk_high_speed_timer_reset();
 724:../../../src/net/isa/isa.c **** 	nrk_high_speed_timer_wait(0,WAIT_TIME_BEFORE_TX);
 725:../../../src/net/isa/isa.c **** 	//AFTER_FIRST_SYNC = 0;
 726:../../../src/net/isa/isa.c ****     //}
 727:../../../src/net/isa/isa.c **** 	    #ifdef TX_RX_DEBUG
 728:../../../src/net/isa/isa.c **** 		nrk_gpio_set(NRK_DEBUG_1);
 729:../../../src/net/isa/isa.c ****    		//printf("T\r\n");
 730:../../../src/net/isa/isa.c **** 	    #endif
 731:../../../src/net/isa/isa.c ****     if(rf_tx_tdma_packet (&isa_rfTxInfo,slot_start_time,isa_param.tx_guard_time,&tx_start_time))
 732:../../../src/net/isa/isa.c ****     {	transmitEntry->transmitPending = false;
 733:../../../src/net/isa/isa.c ****     	txCount++;
 734:../../../src/net/isa/isa.c ****     	nrk_gpio_clr(NRK_DEBUG_1);
 735:../../../src/net/isa/isa.c ****     	nrk_led_toggle(RED_LED);
 736:../../../src/net/isa/isa.c ****     //	putchar ('t');
 737:../../../src/net/isa/isa.c ****     		//("rx_start_time is %d.\n\r",_nrk_high_speed_timer_get());
 738:../../../src/net/isa/isa.c **** 	offsetY = tx_start_time - slot_start_time;
 739:../../../src/net/isa/isa.c **** 	//printf("offset Y is %d.\n\r",offsetY);
 740:../../../src/net/isa/isa.c **** 	#ifdef HIGH_TIMER_DEBUG
 741:../../../src/net/isa/isa.c **** 	    //printf("In isa.c _isa_tx(): offsetY is %d, tx_start_time is %d\n\r",offsetY,tx_start_time);
 742:../../../src/net/isa/isa.c **** 	#endif
 743:../../../src/net/isa/isa.c ****     }
 744:../../../src/net/isa/isa.c ****     nrk_event_signal (isa_tx_done_signal);
 745:../../../src/net/isa/isa.c ****     // ACK required
 746:../../../src/net/isa/isa.c ****     if(DHDR & (1<<7)) {  //&& isa_node_mode!=ISA_GATEWAY){ //Azriel
 747:../../../src/net/isa/isa.c **** 
 748:../../../src/net/isa/isa.c ****     	//putchar('b');
 749:../../../src/net/isa/isa.c ****     	rf_polling_rx_on ();
 750:../../../src/net/isa/isa.c ****     	nrk_gpio_set(NRK_DEBUG_1);
 751:../../../src/net/isa/isa.c **** 	_nrk_high_speed_timer_reset();
 752:../../../src/net/isa/isa.c **** 	nrk_high_speed_timer_wait(0,CPU_PROCESS_TIME);
 753:../../../src/net/isa/isa.c **** //nrk_gpio_set(NRK_DEBUG_1);
 754:../../../src/net/isa/isa.c **** 	// Timing for waiting for receiving ACK
 755:../../../src/net/isa/isa.c **** 	timeout = _nrk_os_timer_get();
 756:../../../src/net/isa/isa.c **** 	timeout+=2;  // 2ms
 757:../../../src/net/isa/isa.c **** 	n = 0;
 758:../../../src/net/isa/isa.c **** 	while ((n = rf_rx_check_sfd()) == 0) {
 759:../../../src/net/isa/isa.c **** 	    if (_nrk_os_timer_get() > timeout) {
 760:../../../src/net/isa/isa.c **** 		tmp = slot - previous_tx_slot;
 761:../../../src/net/isa/isa.c **** 		if(slot == previous_tx_slot)
 762:../../../src/net/isa/isa.c **** 		    slot_expired += 25;
 763:../../../src/net/isa/isa.c **** 		else{
 764:../../../src/net/isa/isa.c **** 		    tmp = slot - previous_tx_slot;
 765:../../../src/net/isa/isa.c **** 		    if(tmp>0)
 766:../../../src/net/isa/isa.c **** 			slot_expired += tmp;
 767:../../../src/net/isa/isa.c **** 		    else
 768:../../../src/net/isa/isa.c **** 			slot_expired += 25+tmp;
 769:../../../src/net/isa/isa.c **** 		}
 770:../../../src/net/isa/isa.c **** 		//printf("%d,%d,%d,%d,%d\n\r",slot_expired,tmp_curSec,tmp_offsetSec,tmp_offsetNanoSec,++tmp_count
 771:../../../src/net/isa/isa.c **** 		//printf("%d,%d\n\r",slot_expired,isa_param.channel);
 772:../../../src/net/isa/isa.c **** 		//printf("%d,%d,%d\n\r",slot_expired,slot,previous_tx_slot);
 773:../../../src/net/isa/isa.c **** 	    //spend too much time on waiting for a pkt's arrival
 774:../../../src/net/isa/isa.c **** 		rf_rx_off ();
 775:../../../src/net/isa/isa.c **** 		nrk_gpio_clr(NRK_DEBUG_1);
 776:../../../src/net/isa/isa.c **** 		#ifdef LED_DEBUG
 777:../../../src/net/isa/isa.c **** 		    nrk_led_clr(1);
 778:../../../src/net/isa/isa.c **** 		#endif
 779:../../../src/net/isa/isa.c **** 		#ifdef RX_DEBUG
 780:../../../src/net/isa/isa.c **** 		 putchar('s');
 781:../../../src/net/isa/isa.c **** 		// printf("%d", slot);
 782:../../../src/net/isa/isa.c **** 
 783:../../../src/net/isa/isa.c **** 		 //   printf("sfd times out.\n\r");
 784:../../../src/net/isa/isa.c **** 		    #endif
 785:../../../src/net/isa/isa.c **** 		//nrk_gpio_clr(NRK_DEBUG_1);
 786:../../../src/net/isa/isa.c **** 		 packetsLost++;
 787:../../../src/net/isa/isa.c **** 		 if (transmitEntry-> slot_callback == NULL )  isaFreePacket(transmitEntry);
 788:../../../src/net/isa/isa.c **** 		 else transmitEntry-> slot_callback(transmitEntry, FAILURE);
 789:../../../src/net/isa/isa.c **** 		 return;
 790:../../../src/net/isa/isa.c **** 	    }
 791:../../../src/net/isa/isa.c **** 	}
 792:../../../src/net/isa/isa.c **** 	//nrk_gpio_clr(NRK_DEBUG_1);
 793:../../../src/net/isa/isa.c **** 	timeout = _nrk_os_timer_get(); 
 794:../../../src/net/isa/isa.c **** 	timeout += 2;               // 5ms
 795:../../../src/net/isa/isa.c **** 	if (n != 0) {
 796:../../../src/net/isa/isa.c **** 	    n = 0;
 797:../../../src/net/isa/isa.c **** 	    //printf("Packet on its way\n\r");
 798:../../../src/net/isa/isa.c **** 	    if (ISAMASK(link->neighbor->typeInfo, CLOCK_PREFERRED) == CLOCK_PREFERRED ) c = 4 ;
 799:../../../src/net/isa/isa.c **** 	    else c = 2;
 800:../../../src/net/isa/isa.c **** 	    while ((n = rf_polling_rx_packet (true, c)) == 0)		 {	//changed to 2 by Azriel for gateway
 801:../../../src/net/isa/isa.c **** 		if (_nrk_os_timer_get () > timeout) {
 802:../../../src/net/isa/isa.c **** 		#ifdef RX_DEBUG
 803:../../../src/net/isa/isa.c **** 		    printf("packet is too long, times out.\n\r");
 804:../../../src/net/isa/isa.c **** 		#endif	
 805:../../../src/net/isa/isa.c **** 		    packetsLost++;
 806:../../../src/net/isa/isa.c **** 		    tmp_curSec = _nrk_os_timer_get();
 807:../../../src/net/isa/isa.c **** 		    if (transmitEntry-> slot_callback == NULL )  isaFreePacket(transmitEntry);
 808:../../../src/net/isa/isa.c **** 		    else transmitEntry-> slot_callback(transmitEntry, FAILURE);
 809:../../../src/net/isa/isa.c **** 		    // spend too much time on receiving pkt.
 810:../../../src/net/isa/isa.c ****                     return;          // huge timeout as fail safe
 811:../../../src/net/isa/isa.c **** 		}
 812:../../../src/net/isa/isa.c **** 
 813:../../../src/net/isa/isa.c **** 		//if(n==-6)		
 814:../../../src/net/isa/isa.c **** 		  //  printf("%d\n\r",_nrk_os_timer_get());	
 815:../../../src/net/isa/isa.c **** 	    }
 816:../../../src/net/isa/isa.c **** 	}
 817:../../../src/net/isa/isa.c **** 
 818:../../../src/net/isa/isa.c **** 	if  (n !=1){	//size of packet must have been wrong
 819:../../../src/net/isa/isa.c **** 		putchar('f');
 820:../../../src/net/isa/isa.c **** 		packetsLost++;
 821:../../../src/net/isa/isa.c **** 		printf("DHDRcount:%d", DHDRcount);
 822:../../../src/net/isa/isa.c **** 	}
 823:../../../src/net/isa/isa.c **** 	if (n==1)
 824:../../../src/net/isa/isa.c **** 	rf_rx_off ();
 825:../../../src/net/isa/isa.c **** 	nrk_gpio_clr(NRK_DEBUG_1);
 826:../../../src/net/isa/isa.c **** 	if (n == 1) {// successfully received ACK
 827:../../../src/net/isa/isa.c **** 	   rxCount++;
 828:../../../src/net/isa/isa.c **** 		slot_expired = 0;
 829:../../../src/net/isa/isa.c **** 	    //isa_rx_data_ready = 1;
 830:../../../src/net/isa/isa.c **** 	    DHR = isa_rfRxInfo.pPayload[DHR_INDEX];
 831:../../../src/net/isa/isa.c **** 	    #ifdef ACK_DEBUG
 832:../../../src/net/isa/isa.c **** 
 833:../../../src/net/isa/isa.c **** 	    #endif ACK_DEBUG
 834:../../../src/net/isa/isa.c **** 	    if((DHDR & (1<<7))) {  //  &&isa_node_mode!=ISA_GATEWAY){
 835:../../../src/net/isa/isa.c **** #ifdef TIME
 836:../../../src/net/isa/isa.c **** 		if(DHR & (1<<7)){
 837:../../../src/net/isa/isa.c **** 			offsetX = ((0x0000|isa_rfRxInfo.pPayload[OFFSET_HIGH])<<8)&0xff00 + 0x0000|isa_rfRxInfo.pPayload
 838:../../../src/net/isa/isa.c **** 		    #ifdef ACK_DEBUG
 839:../../../src/net/isa/isa.c **** 		//	printf("offset X is %d.\n\r", offsetX);
 840:../../../src/net/isa/isa.c **** 		//	printf("offset Y is %d.\n\r", offsetY);
 841:../../../src/net/isa/isa.c **** 		    nrk_led_toggle(ORANGE_LED);
 842:../../../src/net/isa/isa.c **** 		    putchar('a');
 843:../../../src/net/isa/isa.c **** 		    #endif ACK_DEBUG
 844:../../../src/net/isa/isa.c **** 
 845:../../../src/net/isa/isa.c **** //printf("%d,%d\n\r",offsetX,offsetY);
 846:../../../src/net/isa/isa.c **** 		    time_correction = offsetX - offsetY;
 847:../../../src/net/isa/isa.c **** 		    #ifdef HIGH_TIMER_DEBUG
 848:../../../src/net/isa/isa.c **** 			printf("time correction is %d.\n\r", time_correction);
 849:../../../src/net/isa/isa.c **** 		    #endif
 850:../../../src/net/isa/isa.c **** 		    printf("time correction is %d.\n\r", time_correction);
 851:../../../src/net/isa/isa.c **** 		    // SYNC as a by-product of communication.
 852:../../../src/net/isa/isa.c **** 		    //tmp_nrk_prev_timer_val = _nrk_prev_timer_val;
 853:../../../src/net/isa/isa.c **** //printf("%d\n\r",time_correction);
 854:../../../src/net/isa/isa.c **** //printf("%d\n\r",HIGH_TIMER_TICKES_PER_MILISEC-time_correction%HIGH_TIMER_TICKES_PER_MILISEC);
 855:../../../src/net/isa/isa.c **** 		    timeout=50;
 856:../../../src/net/isa/isa.c **** 		    curSec = _nrk_os_timer_get();
 857:../../../src/net/isa/isa.c **** 		    nrk_gpio_set(NRK_DEBUG_2);
 858:../../../src/net/isa/isa.c **** 		    if(time_correction >= 0&&curSec<7){
 859:../../../src/net/isa/isa.c **** 			tmp_curSec = curSec;
 860:../../../src/net/isa/isa.c **** 			/*do{
 861:../../../src/net/isa/isa.c **** 			    curSec = _nrk_os_timer_get();
 862:../../../src/net/isa/isa.c **** 			}while(curSec<=7);*/
 863:../../../src/net/isa/isa.c **** 			_nrk_os_timer_stop();
 864:../../../src/net/isa/isa.c **** 
 865:../../../src/net/isa/isa.c **** 			//_nrk_os_timer_reset();
 866:../../../src/net/isa/isa.c **** 
 867:../../../src/net/isa/isa.c **** 			//Basically speed up by offsetSec ticks of OS timer - offsetNanoSeconds
 868:../../../src/net/isa/isa.c **** 			offsetSec = time_correction/HIGH_TIMER_TICKES_PER_MILISEC+1; //This should be called offSetMilli
 869:../../../src/net/isa/isa.c **** 			tmp_offsetSec = offsetSec;
 870:../../../src/net/isa/isa.c **** 			offsetNanoSec = HIGH_TIMER_TICKES_PER_MILISEC-time_correction%HIGH_TIMER_TICKES_PER_MILISEC;	//T
 871:../../../src/net/isa/isa.c **** 			tmp_offsetNanoSec = offsetNanoSec;																//This is the high speed timer ticks that we s
 872:../../../src/net/isa/isa.c **** //printf("%d,%d\n\r",curSec,offsetSec);
 873:../../../src/net/isa/isa.c **** 			    //if(curSec+offsetSec>=10)
 874:../../../src/net/isa/isa.c **** 			    	//printf("%d,%d\n\r",curSec,offsetSec);
 875:../../../src/net/isa/isa.c **** 			/*if(curSec+offsetSec>=9){
 876:../../../src/net/isa/isa.c **** 			    _nrk_set_next_wakeup(curSec+offsetSec+2);
 877:../../../src/net/isa/isa.c **** 			    if(curSec+offsetSec>=10)
 878:../../../src/net/isa/isa.c **** 			    	printf("%d,%d\n\r",curSec,offsetSec);
 879:../../../src/net/isa/isa.c **** 			}
 880:../../../src/net/isa/isa.c **** 			else
 881:../../../src/net/isa/isa.c **** 			    _nrk_set_next_wakeup(10);*/
 882:../../../src/net/isa/isa.c **** 			_nrk_high_speed_timer_reset();
 883:../../../src/net/isa/isa.c **** 			nrk_spin_wait_us(50);
 884:../../../src/net/isa/isa.c **** 			//printf("%d,%d,%d\n\r",curSec,offsetSec,offsetNanoSec);
 885:../../../src/net/isa/isa.c **** 		//	nrk_gpio_set(NRK_DEBUG_2);
 886:../../../src/net/isa/isa.c **** 			do{}while(_nrk_high_speed_timer_get()<offsetNanoSec);	//Why not use high_speed_timer_wait here??
 887:../../../src/net/isa/isa.c **** 		//	nrk_gpio_clr(NRK_DEBUG_2);
 888:../../../src/net/isa/isa.c **** 			//nrk_high_speed_timer_wait(0,offsetNanoSec);
 889:../../../src/net/isa/isa.c **** 			//nrk_high_speed_timer_wait(0,4912);
 890:../../../src/net/isa/isa.c **** 
 891:../../../src/net/isa/isa.c **** 			_nrk_os_timer_set(curSec+offsetSec);
 892:../../../src/net/isa/isa.c **** 			nrk_spin_wait_us(100);
 893:../../../src/net/isa/isa.c **** 			#ifdef CORRECTION
 894:../../../src/net/isa/isa.c **** 			    nrk_gpio_set(NRK_DEBUG_1);
 895:../../../src/net/isa/isa.c **** 			    nrk_gpio_clr(NRK_DEBUG_1);
 896:../../../src/net/isa/isa.c **** 			#endif
 897:../../../src/net/isa/isa.c **** //printf("p\n\r");	
 898:../../../src/net/isa/isa.c **** 			_nrk_os_timer_start();
 899:../../../src/net/isa/isa.c **** 		    }else if(-time_correction>8000&&curSec<7){
 900:../../../src/net/isa/isa.c **** 		    	putchar('!');
 901:../../../src/net/isa/isa.c **** 			_nrk_os_timer_stop();
 902:../../../src/net/isa/isa.c **** 			//_nrk_os_timer_reset();
 903:../../../src/net/isa/isa.c **** 			_nrk_high_speed_timer_reset();
 904:../../../src/net/isa/isa.c **** 			do{
 905:../../../src/net/isa/isa.c **** 			    NOP();
 906:../../../src/net/isa/isa.c **** 			    NOP();
 907:../../../src/net/isa/isa.c **** 			    NOP();
 908:../../../src/net/isa/isa.c **** 			    NOP();
 909:../../../src/net/isa/isa.c **** 			}while(timeout--);
 910:../../../src/net/isa/isa.c **** 			//_nrk_set_next_wakeup(10);
 911:../../../src/net/isa/isa.c **** 			#ifdef CORRECTION
 912:../../../src/net/isa/isa.c **** 			nrk_gpio_set(NRK_DEBUG_2);
 913:../../../src/net/isa/isa.c **** 			//nrk_high_speed_timer_wait(0,22800); // for test
 914:../../../src/net/isa/isa.c **** 			nrk_gpio_clr(NRK_DEBUG_2);
 915:../../../src/net/isa/isa.c **** 			#endif
 916:../../../src/net/isa/isa.c **** 			//printf("%d\n\r",-time_correction);
 917:../../../src/net/isa/isa.c **** 			nrk_high_speed_timer_wait(0,-time_correction);
 918:../../../src/net/isa/isa.c **** 			_nrk_os_timer_set(curSec);
 919:../../../src/net/isa/isa.c **** 			timeout = 100;
 920:../../../src/net/isa/isa.c **** 			do{
 921:../../../src/net/isa/isa.c **** 			    NOP();
 922:../../../src/net/isa/isa.c **** 			    NOP();
 923:../../../src/net/isa/isa.c **** 			    NOP();
 924:../../../src/net/isa/isa.c **** 			    NOP();
 925:../../../src/net/isa/isa.c **** 			}while(timeout--);
 926:../../../src/net/isa/isa.c **** 			_nrk_os_timer_start();
 927:../../../src/net/isa/isa.c **** 		    }
 928:../../../src/net/isa/isa.c **** 		    //_nrk_prev_timer_val=tmp_nrk_prev_timer_val;
 929:../../../src/net/isa/isa.c **** //nrk_cur_task_TCB->next_wakeup = 10;
 930:../../../src/net/isa/isa.c **** 		    _nrk_high_speed_timer_reset();
 931:../../../src/net/isa/isa.c **** 		    nrk_spin_wait_us(50);
 932:../../../src/net/isa/isa.c **** 		    nrk_gpio_clr(NRK_DEBUG_2);
 933:../../../src/net/isa/isa.c **** 		}
 934:../../../src/net/isa/isa.c **** #endif
 935:../../../src/net/isa/isa.c **** 
 936:../../../src/net/isa/isa.c **** 	//	************************* Trying time correction
 937:../../../src/net/isa/isa.c **** 		if(DHR & (1<<7)){
 938:../../../src/net/isa/isa.c **** 					offsetX = ((0x0000|isa_rfRxInfo.pPayload[OFFSET_HIGH])<<8)&0xff00 + 0x0000|isa_rfRxInfo.pPaylo
 939:../../../src/net/isa/isa.c **** 				    #ifdef ACK_DEBUG
 940:../../../src/net/isa/isa.c **** 				    nrk_led_toggle(ORANGE_LED);
 941:../../../src/net/isa/isa.c **** 				    putchar('a');
 942:../../../src/net/isa/isa.c **** 				    #endif ACK_DEBUG
 943:../../../src/net/isa/isa.c **** 
 944:../../../src/net/isa/isa.c **** 
 945:../../../src/net/isa/isa.c **** 				    time_correction = offsetX - offsetY;
 946:../../../src/net/isa/isa.c **** 				    #ifdef HIGH_TIMER_DEBUG
 947:../../../src/net/isa/isa.c **** 					printf("time correction is %d.\n\r", time_correction);
 948:../../../src/net/isa/isa.c **** 				    #endif
 949:../../../src/net/isa/isa.c **** 
 950:../../../src/net/isa/isa.c **** 				    timeout=50;
 951:../../../src/net/isa/isa.c **** 				    curSec = _nrk_os_timer_get();
 952:../../../src/net/isa/isa.c **** 				    nrk_gpio_set(NRK_DEBUG_2);
 953:../../../src/net/isa/isa.c **** 				    if(time_correction >= 0){
 954:../../../src/net/isa/isa.c **** 					tmp_curSec = curSec;
 955:../../../src/net/isa/isa.c **** 
 956:../../../src/net/isa/isa.c **** 					_nrk_os_timer_stop();
 957:../../../src/net/isa/isa.c **** 
 958:../../../src/net/isa/isa.c **** 					offsetSec = time_correction/HIGH_TIMER_TICKES_PER_MILISEC+1; //This should be called offSetMil
 959:../../../src/net/isa/isa.c **** 					tmp_offsetSec = offsetSec;
 960:../../../src/net/isa/isa.c **** 					offsetNanoSec = HIGH_TIMER_TICKES_PER_MILISEC-time_correction%HIGH_TIMER_TICKES_PER_MILISEC;	/
 961:../../../src/net/isa/isa.c **** 					tmp_offsetNanoSec = offsetNanoSec;																//This is the high speed timer ticks that we
 962:../../../src/net/isa/isa.c **** 
 963:../../../src/net/isa/isa.c **** 					_nrk_high_speed_timer_reset();
 964:../../../src/net/isa/isa.c **** 					nrk_spin_wait_us(50);
 965:../../../src/net/isa/isa.c **** 
 966:../../../src/net/isa/isa.c **** 					nrk_high_speed_timer_wait(0,offsetNanoSec);
 967:../../../src/net/isa/isa.c **** 					//nrk_high_speed_timer_wait(0,4912);
 968:../../../src/net/isa/isa.c **** 
 969:../../../src/net/isa/isa.c **** 					_nrk_os_timer_set(curSec+offsetSec);
 970:../../../src/net/isa/isa.c **** 					nrk_spin_wait_us(100);
 971:../../../src/net/isa/isa.c **** 					#ifdef CORRECTION
 972:../../../src/net/isa/isa.c **** 					    nrk_gpio_set(NRK_DEBUG_1);
 973:../../../src/net/isa/isa.c **** 					    nrk_gpio_clr(NRK_DEBUG_1);
 974:../../../src/net/isa/isa.c **** 					#endif
 975:../../../src/net/isa/isa.c **** 		//printf("p\n\r");
 976:../../../src/net/isa/isa.c **** 					_nrk_os_timer_start();
 977:../../../src/net/isa/isa.c **** 
 978:../../../src/net/isa/isa.c **** 
 979:../../../src/net/isa/isa.c **** 				    }else if(time_correction<0){
 980:../../../src/net/isa/isa.c **** 				    	putchar('!');
 981:../../../src/net/isa/isa.c **** 					_nrk_os_timer_stop();
 982:../../../src/net/isa/isa.c **** 
 983:../../../src/net/isa/isa.c **** 					_nrk_high_speed_timer_reset();
 984:../../../src/net/isa/isa.c **** 
 985:../../../src/net/isa/isa.c **** 					//_nrk_set_next_wakeup(10);
 986:../../../src/net/isa/isa.c **** 					#ifdef CORRECTION
 987:../../../src/net/isa/isa.c **** 					nrk_gpio_set(NRK_DEBUG_2);
 988:../../../src/net/isa/isa.c **** 					//nrk_high_speed_timer_wait(0,22800); // for test
 989:../../../src/net/isa/isa.c **** 					nrk_gpio_clr(NRK_DEBUG_2);
 990:../../../src/net/isa/isa.c **** 					#endif
 991:../../../src/net/isa/isa.c **** 					//printf("%d\n\r",-time_correction);
 992:../../../src/net/isa/isa.c **** 					nrk_high_speed_timer_wait(0,-time_correction);
 993:../../../src/net/isa/isa.c **** 					_nrk_os_timer_set(curSec);
 994:../../../src/net/isa/isa.c **** 
 995:../../../src/net/isa/isa.c **** 					_nrk_os_timer_start();
 996:../../../src/net/isa/isa.c **** 				    }
 997:../../../src/net/isa/isa.c **** 				    //_nrk_prev_timer_val=tmp_nrk_prev_timer_val;
 998:../../../src/net/isa/isa.c **** 		//nrk_cur_task_TCB->next_wakeup = 10;
 999:../../../src/net/isa/isa.c **** 				    _nrk_high_speed_timer_reset();
1000:../../../src/net/isa/isa.c **** 				    nrk_spin_wait_us(50);
1001:../../../src/net/isa/isa.c **** 				    nrk_gpio_clr(NRK_DEBUG_2);
1002:../../../src/net/isa/isa.c **** 				}
1003:../../../src/net/isa/isa.c **** 
1004:../../../src/net/isa/isa.c **** 
1005:../../../src/net/isa/isa.c **** 		//****************************************************
1006:../../../src/net/isa/isa.c **** 
1007:../../../src/net/isa/isa.c **** 	    }		
1008:../../../src/net/isa/isa.c ****         }
1009:../../../src/net/isa/isa.c **** 
1010:../../../src/net/isa/isa.c ****     }//wait for ACK 
1011:../../../src/net/isa/isa.c ****     //printf("Pointer %p", transmitEntry->slot_callback);
1012:../../../src/net/isa/isa.c ****     if (transmitEntry-> slot_callback == NULL )  isaFreePacket(transmitEntry);
1013:../../../src/net/isa/isa.c ****     else transmitEntry-> slot_callback(transmitEntry, SUCCESS);
1014:../../../src/net/isa/isa.c **** }
1015:../../../src/net/isa/isa.c **** 
1016:../../../src/net/isa/isa.c **** /*
1017:../../../src/net/isa/isa.c **** uint8_t _isa_join_process ()
1018:../../../src/net/isa/isa.c **** {
1019:../../../src/net/isa/isa.c ****     int8_t n;
1020:../../../src/net/isa/isa.c ****     uint16_t timeout;
1021:../../../src/net/isa/isa.c ****     uint16_t timer;
1022:../../../src/net/isa/isa.c ****     uint8_t tdma_start_tick;
1023:../../../src/net/isa/isa.c ****     uint8_t battery_save_cnt;
1024:../../../src/net/isa/isa.c ****     uint8_t last_nrk_tick;
1025:../../../src/net/isa/isa.c ****     uint8_t i;
1026:../../../src/net/isa/isa.c **** 
1027:../../../src/net/isa/isa.c ****     timer=0;
1028:../../../src/net/isa/isa.c ****     battery_save_cnt=0;
1029:../../../src/net/isa/isa.c **** 
1030:../../../src/net/isa/isa.c ****     while(1)
1031:../../../src/net/isa/isa.c ****     {
1032:../../../src/net/isa/isa.c **** 	
1033:../../../src/net/isa/isa.c **** 	rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel 
1034:../../../src/net/isa/isa.c **** 	rf_polling_rx_on ();
1035:../../../src/net/isa/isa.c **** 	n = 0;
1036:../../../src/net/isa/isa.c **** 	_isa_sync_ok = 0;
1037:../../../src/net/isa/isa.c **** 	last_nrk_tick=0;  // should be 0 going in
1038:../../../src/net/isa/isa.c **** 	//_nrk_prev_timer_val=250;
1039:../../../src/net/isa/isa.c **** 	//_nrk_set_next_wakeup(250);
1040:../../../src/net/isa/isa.c **** 	//_nrk_os_timer_set(0);
1041:../../../src/net/isa/isa.c **** 	//timeout=200;
1042:../../../src/net/isa/isa.c **** 	while ((n = rf_rx_check_sfd()) == 0) {
1043:../../../src/net/isa/isa.c **** 	    // every OS tick 
1044:../../../src/net/isa/isa.c **** 	    if(last_nrk_tick!=_nrk_os_timer_get()) {
1045:../../../src/net/isa/isa.c **** 		last_nrk_tick=_nrk_os_timer_get();
1046:../../../src/net/isa/isa.c **** 		timer++;
1047:../../../src/net/isa/isa.c **** 		if(timer>ISA_TOKEN_TIMEOUT){
1048:../../../src/net/isa/isa.c **** 		    timer=0;
1049:../../../src/net/isa/isa.c **** 		    break;
1050:../../../src/net/isa/isa.c **** 		}
1051:../../../src/net/isa/isa.c **** 	    }
1052:../../../src/net/isa/isa.c **** 	}
1053:../../../src/net/isa/isa.c **** 	//_nrk_high_speed_timer_reset();
1054:../../../src/net/isa/isa.c **** 
1055:../../../src/net/isa/isa.c **** 	tdma_start_tick=_nrk_os_timer_get();
1056:../../../src/net/isa/isa.c **** 	timeout = tdma_start_tick+4;
1057:../../../src/net/isa/isa.c **** 	// an interrupt could happen in here and mess things up
1058:../../../src/net/isa/isa.c **** 	if (n != 0) {
1059:../../../src/net/isa/isa.c **** 	    n = 0;
1060:../../../src/net/isa/isa.c **** 	// Packet on its way
1061:../../../src/net/isa/isa.c **** 	    while ((n = rf_polling_rx_packet (false,128)) == 0) {
1062:../../../src/net/isa/isa.c **** 		if (_nrk_os_timer_get () > timeout)
1063:../../../src/net/isa/isa.c **** 		{
1064:../../../src/net/isa/isa.c **** 		    //nrk_kprintf( PSTR("Pkt timed out\r\n") );
1065:../../../src/net/isa/isa.c **** 		    break;          // huge timeout as failsafe
1066:../../../src/net/isa/isa.c **** 		}
1067:../../../src/net/isa/isa.c **** 	    }
1068:../../../src/net/isa/isa.c **** 	}
1069:../../../src/net/isa/isa.c **** 	rf_rx_off (); 
1070:../../../src/net/isa/isa.c **** 	if (n == 1){ //&& isa_rfRxInfo.length>0) {
1071:../../../src/net/isa/isa.c **** 	   // if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id){//change
1072:../../../src/net/isa/isa.c **** 		// CRC and checksum passed
1073:../../../src/net/isa/isa.c **** 		if(isa_rfRxInfo.pPayload[DAUX_INDEX+7]==10){ // DAUX packet
1074:../../../src/net/isa/isa.c **** 			isa_rx_data_ready = 1;	
1075:../../../src/net/isa/isa.c **** 			//global_slot = (volatile)isa_rfRxInfo.pPayload[SLOT_INDEX];
1076:../../../src/net/isa/isa.c **** 
1077:../../../src/net/isa/isa.c **** 			isa_set_channel_pattern(isa_rfRxInfo.pPayload[DAUX_INDEX+9]); //set channel hopping pattern
1078:../../../src/net/isa/isa.c **** 			channelIndex=isa_rfRxInfo.pPayload[DAUX_INDEX+10];
1079:../../../src/net/isa/isa.c **** 			currentChannel = slottedPattern[channelIndex];
1080:../../../src/net/isa/isa.c **** 			isa_set_channel(currentChannel);
1081:../../../src/net/isa/isa.c **** 			for(i=0;i<4;i++){  // set tx slots
1082:../../../src/net/isa/isa.c **** 			    if(isa_rfRxInfo.pPayload[DAUX_INDEX+19+i]==0)
1083:../../../src/net/isa/isa.c **** 				break;
1084:../../../src/net/isa/isa.c **** 			    else{
1085:../../../src/net/isa/isa.c **** 				isa_tdma_tx_mask |= ((uint32_t) 1) << isa_rfRxInfo.pPayload[DAUX_INDEX+19+i];
1086:../../../src/net/isa/isa.c **** 				isa_sched[isa_rfRxInfo.pPayload[DAUX_INDEX+19+i]] = 1;
1087:../../../src/net/isa/isa.c **** 				tx_slot_from_join[i]=isa_rfRxInfo.pPayload[DAUX_INDEX+19+i];
1088:../../../src/net/isa/isa.c **** 			//	printf("TX:%d\r\n",tx_slot_from_join[i]);
1089:../../../src/net/isa/isa.c ****                             }
1090:../../../src/net/isa/isa.c **** 			}			
1091:../../../src/net/isa/isa.c **** 			
1092:../../../src/net/isa/isa.c **** 			for(i=0;i<4;i++){  // set rx slots
1093:../../../src/net/isa/isa.c **** 			    if(isa_rfRxInfo.pPayload[DAUX_INDEX+23+i]==0)
1094:../../../src/net/isa/isa.c **** 				break;
1095:../../../src/net/isa/isa.c **** 			    else{
1096:../../../src/net/isa/isa.c **** 				isa_tdma_rx_mask |= ((uint32_t) 1) << isa_rfRxInfo.pPayload[DAUX_INDEX+23+i];
1097:../../../src/net/isa/isa.c **** 				isa_sched[isa_rfRxInfo.pPayload[DAUX_INDEX+23+i]] = 1;
1098:../../../src/net/isa/isa.c **** 			    }
1099:../../../src/net/isa/isa.c **** 			}
1100:../../../src/net/isa/isa.c **** 			nrk_event_signal(SIG(isa_rx_pkt_signal));
1101:../../../src/net/isa/isa.c **** 		break;
1102:../../../src/net/isa/isa.c ****  		}
1103:../../../src/net/isa/isa.c **** 	   // }
1104:../../../src/net/isa/isa.c **** 	}
1105:../../../src/net/isa/isa.c ****     }
1106:../../../src/net/isa/isa.c **** 
1107:../../../src/net/isa/isa.c **** 
1108:../../../src/net/isa/isa.c **** 
1109:../../../src/net/isa/isa.c ****     _isa_join_ok=1;
1110:../../../src/net/isa/isa.c ****     isa_rx_pkt_release();
1111:../../../src/net/isa/isa.c ****     return _isa_join_ok;
1112:../../../src/net/isa/isa.c **** }
1113:../../../src/net/isa/isa.c **** */
1114:../../../src/net/isa/isa.c **** 
1115:../../../src/net/isa/isa.c **** 
1116:../../../src/net/isa/isa.c **** int8_t isa_join_ready()
1117:../../../src/net/isa/isa.c **** {
 670               	.LM67:
 671               	.LFBB12:
 672               	/* prologue: frame size=0 */
 673               	/* prologue end (size=0) */
1118:../../../src/net/isa/isa.c ****     if (_isa_join_ok ==  1)
 675               	.LM68:
 676 01ba 8091 0000 		lds r24,_isa_join_ok
 677 01be 8130      		cpi r24,lo8(1)
 678 01c0 01F4      		brne .L40
 680               	.LM69:
 681 01c2 81E0      		ldi r24,lo8(1)
 682 01c4 90E0      		ldi r25,hi8(1)
 683 01c6 0895      		ret
 684               	.L40:
 685 01c8 8FEF      		ldi r24,lo8(-1)
 686 01ca 9FEF      		ldi r25,hi8(-1)
1119:../../../src/net/isa/isa.c ****         return NRK_OK;
1120:../../../src/net/isa/isa.c ****     else
1121:../../../src/net/isa/isa.c ****         return NRK_ERROR;
1122:../../../src/net/isa/isa.c **** }
 688               	.LM70:
 689 01cc 0895      		ret
 690               	/* epilogue: frame size=0 */
 691               	/* epilogue: noreturn */
 692               	/* epilogue end (size=0) */
 693               	/* function isa_join_ready size 10 (10) */
 695               	.Lscope12:
 697               		.stabd	78,0,0
 699               	.global	isa_task_config
 701               	isa_task_config:
 702               		.stabd	46,0,0
1123:../../../src/net/isa/isa.c **** 
1124:../../../src/net/isa/isa.c **** 
1125:../../../src/net/isa/isa.c **** /** FIXME this is only a temporary function need to be more specified
1126:../../../src/net/isa/isa.c ****  * _isa_init_sync()
1127:../../../src/net/isa/isa.c ****  *
1128:../../../src/net/isa/isa.c ****  * This function is used for join process.
1129:../../../src/net/isa/isa.c ****  * A node that wants to join the network would keep listening first
1130:../../../src/net/isa/isa.c ****  * and set up first sync.
1131:../../../src/net/isa/isa.c ****  * 
1132:../../../src/net/isa/isa.c ****  * Return: _isa_sync_ok.
1133:../../../src/net/isa/isa.c ****  */
1134:../../../src/net/isa/isa.c **** uint8_t _isa_init_sync ()
1135:../../../src/net/isa/isa.c **** {
1136:../../../src/net/isa/isa.c ****     int8_t n;
1137:../../../src/net/isa/isa.c ****     uint16_t timeout;
1138:../../../src/net/isa/isa.c ****     uint16_t timer;
1139:../../../src/net/isa/isa.c ****     uint8_t tdma_start_tick;
1140:../../../src/net/isa/isa.c ****     uint8_t battery_save_cnt;
1141:../../../src/net/isa/isa.c ****     uint8_t last_nrk_tick;
1142:../../../src/net/isa/isa.c ****     uint8_t tmp_nrk_prev_timer_val;
1143:../../../src/net/isa/isa.c ****     //volatile uint16_t sfd_start_time;
1144:../../../src/net/isa/isa.c **** 
1145:../../../src/net/isa/isa.c **** 	//printf("%d,%d\n\r",isa_param.channel,global_slot);
1146:../../../src/net/isa/isa.c ****   //  DISABLE_GLOBAL_INT ();
1147:../../../src/net/isa/isa.c ****     timer=0;
1148:../../../src/net/isa/isa.c ****     battery_save_cnt=0;
1149:../../../src/net/isa/isa.c **** 
1150:../../../src/net/isa/isa.c **** 
1151:../../../src/net/isa/isa.c ****     while(1)
1152:../../../src/net/isa/isa.c ****     {
1153:../../../src/net/isa/isa.c **** 
1154:../../../src/net/isa/isa.c ****     	//printf("Init sync \r\n");
1155:../../../src/net/isa/isa.c **** 	isa_rfRxInfo.pPayload[DHDR_INDEX]=1;			//configDHDR(0); This will have to change
1156:../../../src/net/isa/isa.c **** 	//isa_rfRxInfo.pPayload[SLOT_INDEX]=global_slot;
1157:../../../src/net/isa/isa.c **** 	
1158:../../../src/net/isa/isa.c **** 	#ifdef LED_DEBUG
1159:../../../src/net/isa/isa.c **** 	    nrk_led_set(1);
1160:../../../src/net/isa/isa.c **** 	#endif
1161:../../../src/net/isa/isa.c **** 	rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel 
1162:../../../src/net/isa/isa.c **** 	rf_polling_rx_on ();
1163:../../../src/net/isa/isa.c **** 	n = 0;
1164:../../../src/net/isa/isa.c **** 	_isa_sync_ok = 0;
1165:../../../src/net/isa/isa.c **** 	last_nrk_tick=0;  // should be 0 going in
1166:../../../src/net/isa/isa.c **** 	//_nrk_prev_timer_val=250;
1167:../../../src/net/isa/isa.c **** 	_nrk_set_next_wakeup(250);
1168:../../../src/net/isa/isa.c **** 	_nrk_os_timer_set(0);
1169:../../../src/net/isa/isa.c **** 	//timeout=200;
1170:../../../src/net/isa/isa.c **** 	while ((n = rf_rx_check_sfd()) == 0) {
1171:../../../src/net/isa/isa.c **** 
1172:../../../src/net/isa/isa.c **** 	    // every OS tick 
1173:../../../src/net/isa/isa.c **** 	    if(last_nrk_tick!=_nrk_os_timer_get()) {
1174:../../../src/net/isa/isa.c **** 		last_nrk_tick=_nrk_os_timer_get();
1175:../../../src/net/isa/isa.c **** 		timer++;
1176:../../../src/net/isa/isa.c **** 		if(timer>ISA_TOKEN_TIMEOUT){
1177:../../../src/net/isa/isa.c **** 		    timer=0;
1178:../../../src/net/isa/isa.c **** 		    break;
1179:../../../src/net/isa/isa.c **** 		}
1180:../../../src/net/isa/isa.c **** 	    }
1181:../../../src/net/isa/isa.c **** 	}
1182:../../../src/net/isa/isa.c **** 	//printf("3 \n");
1183:../../../src/net/isa/isa.c **** 	_nrk_high_speed_timer_reset();
1184:../../../src/net/isa/isa.c **** 	// capture SFD transition with high speed timer
1185:../../../src/net/isa/isa.c **** 	//sfd_start_time=_nrk_high_speed_timer_get();
1186:../../../src/net/isa/isa.c **** 	tdma_start_tick=_nrk_os_timer_get();
1187:../../../src/net/isa/isa.c **** 
1188:../../../src/net/isa/isa.c **** 	timeout = tdma_start_tick+4;
1189:../../../src/net/isa/isa.c **** 	// an interrupt could happen in here and mess things up
1190:../../../src/net/isa/isa.c **** 	if (n != 0) {
1191:../../../src/net/isa/isa.c **** 	    n = 0;
1192:../../../src/net/isa/isa.c **** 	// Packet on its way
1193:../../../src/net/isa/isa.c **** 	    while ((n = rf_polling_rx_packet (false,128)) == 0) {
1194:../../../src/net/isa/isa.c **** 	  //  	printf("4 \n");
1195:../../../src/net/isa/isa.c **** 		if (_nrk_os_timer_get () > timeout)
1196:../../../src/net/isa/isa.c **** 		{
1197:../../../src/net/isa/isa.c **** 		    //nrk_kprintf( PSTR("Pkt timed out\r\n") );
1198:../../../src/net/isa/isa.c **** 		    break;          // huge timeout as failsafe
1199:../../../src/net/isa/isa.c **** 		}
1200:../../../src/net/isa/isa.c **** 	    }
1201:../../../src/net/isa/isa.c **** 	}
1202:../../../src/net/isa/isa.c **** 	rf_rx_off (); 
1203:../../../src/net/isa/isa.c **** 	//printf("5 \n");
1204:../../../src/net/isa/isa.c **** 	if (n == 1 /*&& isa_rfRxInfo.length>0*/) {
1205:../../../src/net/isa/isa.c **** 	    if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id){//change
1206:../../../src/net/isa/isa.c **** 		// CRC and checksum passed
1207:../../../src/net/isa/isa.c **** 		isa_rx_data_ready = 1;
1208:../../../src/net/isa/isa.c **** 		//rtl_rx_slot = 0;
1209:../../../src/net/isa/isa.c **** 		//DHDR = (volatile)isa_rfRxInfo.pPayload[DHDR_INDEX];		
1210:../../../src/net/isa/isa.c **** 		global_slot += (volatile)isa_rfRxInfo.pPayload[SLOT_INDEX];
1211:../../../src/net/isa/isa.c **** 
1212:../../../src/net/isa/isa.c **** 		nrk_led_toggle(GREEN_LED);
1213:../../../src/net/isa/isa.c **** 		putchar ('i');
1214:../../../src/net/isa/isa.c **** 
1215:../../../src/net/isa/isa.c **** 	//	nrk_event_signal(SIG(isa_rx_pkt_signal));
1216:../../../src/net/isa/isa.c **** 		break;
1217:../../../src/net/isa/isa.c **** 		//
1218:../../../src/net/isa/isa.c **** 	    }
1219:../../../src/net/isa/isa.c **** 	}
1220:../../../src/net/isa/isa.c ****     }
1221:../../../src/net/isa/isa.c **** 
1222:../../../src/net/isa/isa.c **** 
1223:../../../src/net/isa/isa.c **** #ifdef LED_DEBUG
1224:../../../src/net/isa/isa.c ****     nrk_led_clr(1);
1225:../../../src/net/isa/isa.c **** #endif
1226:../../../src/net/isa/isa.c ****      //printf("os_timer=%d\r\n",_nrk_os_itimer_get());
1227:../../../src/net/isa/isa.c ****      #ifdef INIT_SYNC
1228:../../../src/net/isa/isa.c **** 	nrk_gpio_set(NRK_DEBUG_1);
1229:../../../src/net/isa/isa.c ****      #endif
1230:../../../src/net/isa/isa.c ****     _isa_sync_ok = 1;
1231:../../../src/net/isa/isa.c ****     isa_rx_pkt_release();
1232:../../../src/net/isa/isa.c ****     tmp_nrk_prev_timer_val=_nrk_prev_timer_val;
1233:../../../src/net/isa/isa.c ****     _nrk_os_timer_stop();
1234:../../../src/net/isa/isa.c ****     //_nrk_os_timer_reset();
1235:../../../src/net/isa/isa.c ****     _nrk_set_next_wakeup(10);
1236:../../../src/net/isa/isa.c ****     _nrk_os_timer_set(7);
1237:../../../src/net/isa/isa.c ****     nrk_high_speed_timer_wait(0,SFD_TO_NEXT_SLOT_TIME);
1238:../../../src/net/isa/isa.c ****     //_nrk_os_timer_reset();
1239:../../../src/net/isa/isa.c ****     _nrk_os_timer_start();
1240:../../../src/net/isa/isa.c ****     //_nrk_prev_timer_val=9;
1241:../../../src/net/isa/isa.c ****     //printf("%d\n\r", _nrk_os_timer_get());
1242:../../../src/net/isa/isa.c **** nrk_cur_task_TCB->next_wakeup = 10;
1243:../../../src/net/isa/isa.c ****     //printf("%d\n\r",_nrk_prev_timer_val);
1244:../../../src/net/isa/isa.c ****    // _nrk_high_speed_timer_reset();
1245:../../../src/net/isa/isa.c ****    // slot_start_time=_nrk_high_speed_timer_get();
1246:../../../src/net/isa/isa.c ****     #ifdef INIT_SYNC
1247:../../../src/net/isa/isa.c **** 	nrk_gpio_clr(NRK_DEBUG_1);
1248:../../../src/net/isa/isa.c ****      #endif
1249:../../../src/net/isa/isa.c **** 
1250:../../../src/net/isa/isa.c **** 	return _isa_sync_ok;
1251:../../../src/net/isa/isa.c **** 
1252:../../../src/net/isa/isa.c **** }
1253:../../../src/net/isa/isa.c **** 
1254:../../../src/net/isa/isa.c **** 
1255:../../../src/net/isa/isa.c **** void isa_nw_task ()
1256:../../../src/net/isa/isa.c **** {
1257:../../../src/net/isa/isa.c ****     uint8_t slot;
1258:../../../src/net/isa/isa.c ****     uint32_t slot_mask;
1259:../../../src/net/isa/isa.c ****     uint16_t next_slot_offset = 0; 
1260:../../../src/net/isa/isa.c ****     uint8_t FIRST = 1;
1261:../../../src/net/isa/isa.c ****     DLMO_LINK * link;
1262:../../../src/net/isa/isa.c **** 
1263:../../../src/net/isa/isa.c ****     _isa_ready = 0;
1264:../../../src/net/isa/isa.c ****     
1265:../../../src/net/isa/isa.c ****     // wait for isa ready 
1266:../../../src/net/isa/isa.c ****     do {
1267:../../../src/net/isa/isa.c ****         nrk_wait_until_next_period ();
1268:../../../src/net/isa/isa.c ****     }while (_isa_ready == 0);
1269:../../../src/net/isa/isa.c **** 
1270:../../../src/net/isa/isa.c ****     _isa_ready = 1;
1271:../../../src/net/isa/isa.c ****     //nrk_gpio_clr(NRK_DEBUG_0);
1272:../../../src/net/isa/isa.c ****     //nrk_time_get (&last_slot_time);// dont know if it is useful
1273:../../../src/net/isa/isa.c ****     while (1) {
1274:../../../src/net/isa/isa.c ****     	//putchar('n');
1275:../../../src/net/isa/isa.c **** 	nrk_gpio_set(NRK_DEBUG_1);
1276:../../../src/net/isa/isa.c **** 	nrk_gpio_clr(NRK_DEBUG_1);
1277:../../../src/net/isa/isa.c **** 
1278:../../../src/net/isa/isa.c **** 	// reset high speed timer and then record the timer value used for calculating offsets
1279:../../../src/net/isa/isa.c **** 	_nrk_high_speed_timer_reset();
1280:../../../src/net/isa/isa.c ****         slot_start_time = _nrk_high_speed_timer_get();
1281:../../../src/net/isa/isa.c **** 	//nrk_time_get (&last_slot_time);// dont know if it is useful
1282:../../../src/net/isa/isa.c ****      //   last_slot = global_slot; //global_slot has been initialized to MAX_ISA_GLOBAL_SLOTS in is
1283:../../../src/net/isa/isa.c ****       //  if (last_slot > MAX_ISA_GLOBAL_SLOTS)
1284:../../../src/net/isa/isa.c ****         //    last_slot -= (MAX_ISA_GLOBAL_SLOTS+1);
1285:../../../src/net/isa/isa.c **** 
1286:../../../src/net/isa/isa.c **** 	current_global_slot = global_slot;
1287:../../../src/net/isa/isa.c **** 	/* global_slot should be wrapped */
1288:../../../src/net/isa/isa.c ****         if (global_slot > MAX_ISA_GLOBAL_SLOTS) {
1289:../../../src/net/isa/isa.c ****             global_slot -= MAX_ISA_GLOBAL_SLOTS;
1290:../../../src/net/isa/isa.c ****             global_cycle++;
1291:../../../src/net/isa/isa.c ****         }
1292:../../../src/net/isa/isa.c **** 
1293:../../../src/net/isa/isa.c **** 	slot = global_slot % ISA_SLOTS_PER_FRAME;
1294:../../../src/net/isa/isa.c ****         slot_mask = ((uint32_t) 1) << slot;
1295:../../../src/net/isa/isa.c **** 	if(_isa_sync_ok == 1){
1296:../../../src/net/isa/isa.c **** 	    #ifdef CHANNEL_HOPPING
1297:../../../src/net/isa/isa.c **** 		channelIndex += next_slot_offset;
1298:../../../src/net/isa/isa.c **** 		currentChannel = slottedPattern[(channelIndex)&0x0F];
1299:../../../src/net/isa/isa.c **** 		isa_set_channel(currentChannel);
1300:../../../src/net/isa/isa.c **** 
1301:../../../src/net/isa/isa.c **** 		/*
1302:../../../src/net/isa/isa.c **** 		if(slot>=22 && isa_node_mode == ISA_GATEWAY){
1303:../../../src/net/isa/isa.c **** 		   slowIndex = slowIndex % 3;
1304:../../../src/net/isa/isa.c **** 		   currentChannel = slowPattern[slowIndex];
1305:../../../src/net/isa/isa.c **** 		   isa_set_channel(currentChannel);
1306:../../../src/net/isa/isa.c **** 		   if(slot>=24)
1307:../../../src/net/isa/isa.c **** 		      slowIndex++;
1308:../../../src/net/isa/isa.c **** 		}
1309:../../../src/net/isa/isa.c **** 
1310:../../../src/net/isa/isa.c **** 		*/
1311:../../../src/net/isa/isa.c **** 	    //printf("CH:%d SL: %d\r\n",currentChannel,slot);
1312:../../../src/net/isa/isa.c **** 	    #endif
1313:../../../src/net/isa/isa.c **** 	    //printf("%d,%d\n\r",currentChannel,(channelIndex)&0x0F);
1314:../../../src/net/isa/isa.c **** 	    //printf("isa_rx_data_ready:%d\r\n",isa_rx_data_ready);
1315:../../../src/net/isa/isa.c **** 	    // if TX slot mask and tx ready, send a packet
1316:../../../src/net/isa/isa.c **** 	    #ifdef JOIN_PROCESS
1317:../../../src/net/isa/isa.c **** 		if(slot>=22 && isa_node_mode == ISA_GATEWAY)
1318:../../../src/net/isa/isa.c **** 		   isa_tx_data_ready |= ((uint32_t) 1 << slot);
1319:../../../src/net/isa/isa.c **** 	    #endif
1320:../../../src/net/isa/isa.c **** 	    #ifdef TX_RX_DEBUG
1321:../../../src/net/isa/isa.c **** 		//printf("R\r\n");
1322:../../../src/net/isa/isa.c **** 	//	nrk_gpio_set(NRK_DEBUG_0);
1323:../../../src/net/isa/isa.c **** 
1324:../../../src/net/isa/isa.c **** 	    #endif
1325:../../../src/net/isa/isa.c ****             	/*
1326:../../../src/net/isa/isa.c ****             	 * who is the neighbor that this slot is configured for?
1327:../../../src/net/isa/isa.c ****             	 */
1328:../../../src/net/isa/isa.c **** 		link = findLink(slot);
1329:../../../src/net/isa/isa.c ****             	if(link != NULL){
1330:../../../src/net/isa/isa.c ****             		//what type of link is this
1331:../../../src/net/isa/isa.c ****             		if (link->linkType == RX){
1332:../../../src/net/isa/isa.c ****             			_isa_rx (link, slot);
1333:../../../src/net/isa/isa.c ****             		}
1334:../../../src/net/isa/isa.c ****             		else if (link->linkType == TX_NO_ADV){
1335:../../../src/net/isa/isa.c ****             			_isa_tx(link , slot);
1336:../../../src/net/isa/isa.c ****             		}
1337:../../../src/net/isa/isa.c ****             		//find the highest priority entry in the queue (if any)
1338:../../../src/net/isa/isa.c ****             		//if (transmitEntry = hightestPriorityEntry(neighbor) != NULL){
1339:../../../src/net/isa/isa.c ****             		//	_isa_tx(transmitEntry, link);
1340:../../../src/net/isa/isa.c ****             	//	}
1341:../../../src/net/isa/isa.c ****             	}
1342:../../../src/net/isa/isa.c **** 
1343:../../../src/net/isa/isa.c **** 
1344:../../../src/net/isa/isa.c **** 		//printf("isa tx slot %d.\n\r",slot);
1345:../../../src/net/isa/isa.c **** 	//	printf("TX %d,%d,%d\n\r",currentChannel,(channelIndex)&0x0F,slot);
1346:../../../src/net/isa/isa.c **** 		//printf("tx\n\r");
1347:../../../src/net/isa/isa.c **** 	//	_isa_tx (slot);
1348:../../../src/net/isa/isa.c **** 	//	previous_tx_slot = slot;
1349:../../../src/net/isa/isa.c **** 		#ifdef HIGH_TIMER_DEBUG
1350:../../../src/net/isa/isa.c **** 	    	    //printf("TX later, high speed timer value is %d.\n\r", _nrk_high_speed_timer_get());
1351:../../../src/net/isa/isa.c **** 		#endif		
1352:../../../src/net/isa/isa.c **** 
1353:../../../src/net/isa/isa.c **** 
1354:../../../src/net/isa/isa.c **** 	} else	{
1355:../../../src/net/isa/isa.c **** 
1356:../../../src/net/isa/isa.c **** 	    ///do joining or sync request here
1357:../../../src/net/isa/isa.c **** 	//    DHDR = configDHDR(0);
1358:../../../src/net/isa/isa.c **** 	    if(isa_node_mode != ISA_GATEWAY){//change
1359:../../../src/net/isa/isa.c **** 		#ifdef JOIN_PROCESS
1360:../../../src/net/isa/isa.c **** 		if(!_isa_join_ok){
1361:../../../src/net/isa/isa.c **** 		    _isa_join_process();
1362:../../../src/net/isa/isa.c **** 		}
1363:../../../src/net/isa/isa.c **** 		#endif
1364:../../../src/net/isa/isa.c **** 		DHDRcount = 0;	//make send request for time correction
1365:../../../src/net/isa/isa.c **** 		_isa_sync_ok = _isa_init_sync();
1366:../../../src/net/isa/isa.c **** 
1367:../../../src/net/isa/isa.c **** 		//printf("waiting for sync...isa_sync_ok is %d.\n\r",_isa_sync_ok);
1368:../../../src/net/isa/isa.c **** 	    }else if (isa_node_mode == ISA_GATEWAY){
1369:../../../src/net/isa/isa.c **** 		_isa_sync_ok = 1;
1370:../../../src/net/isa/isa.c **** 	    }	
1371:../../../src/net/isa/isa.c **** 	}
1372:../../../src/net/isa/isa.c **** 	
1373:../../../src/net/isa/isa.c **** 	//nrk_gpio_clr(NRK_DEBUG_2);
1374:../../../src/net/isa/isa.c **** 	//printf("next_slot_offset %d\n\r",next_slot_offset);
1375:../../../src/net/isa/isa.c **** 	// To make sure that initial sync is correct
1376:../../../src/net/isa/isa.c ****         /*if(FIRST){
1377:../../../src/net/isa/isa.c **** 		//printf("%d\n\r",_nrk_os_timer_get ());
1378:../../../src/net/isa/isa.c **** 		next_slot_offset = 1;
1379:../../../src/net/isa/isa.c **** 		FIRST = 0;
1380:../../../src/net/isa/isa.c **** 	}*/
1381:../../../src/net/isa/isa.c **** 	if(slot_expired >= EXPIRATION && isa_node_mode != ISA_GATEWAY){
1382:../../../src/net/isa/isa.c **** 	    //printf("re-sync\n\r");
1383:../../../src/net/isa/isa.c **** 	    _isa_sync_ok = 0;
1384:../../../src/net/isa/isa.c **** 	    slot_expired = 0;    
1385:../../../src/net/isa/isa.c **** 	    global_slot = 0;
1386:../../../src/net/isa/isa.c **** 	    next_slot_offset = 0;
1387:../../../src/net/isa/isa.c **** 	    resync_times++;
1388:../../../src/net/isa/isa.c **** 	    if(isa_id!=0){
1389:../../../src/net/isa/isa.c **** 	        channelIndex = isa_clk_src_id;
1390:../../../src/net/isa/isa.c **** 	        currentChannel = slottedPattern[channelIndex];    
1391:../../../src/net/isa/isa.c **** 	    }else{
1392:../../../src/net/isa/isa.c **** 	        channelIndex = 0;
1393:../../../src/net/isa/isa.c **** 	        currentChannel = slottedPattern[channelIndex];
1394:../../../src/net/isa/isa.c **** 	    }
1395:../../../src/net/isa/isa.c **** 	    isa_set_channel(currentChannel);
1396:../../../src/net/isa/isa.c **** 
1397:../../../src/net/isa/isa.c **** 
1398:../../../src/net/isa/isa.c **** 	}else{
1399:../../../src/net/isa/isa.c **** 	    //printf("global_slot is %d. global cycle is %d.\n\r",global_slot,global_cycle);
1400:../../../src/net/isa/isa.c **** 	    next_slot_offset = isa_get_slots_until_next_wakeup (global_slot);
1401:../../../src/net/isa/isa.c **** 	  //  printf("NOS:%d\n\r",next_slot_offset);
1402:../../../src/net/isa/isa.c **** 	    //printf("%d,%d,%d,%d\n\r",_nrk_os_timer_get (),_nrk_get_next_wakeup (),global_slot,next_slot_
1403:../../../src/net/isa/isa.c **** 	    global_slot += next_slot_offset;
1404:../../../src/net/isa/isa.c ****             //nrk_clr_led (1);
1405:../../../src/net/isa/isa.c **** 	    #ifdef LED_SLOT_DEBUG
1406:../../../src/net/isa/isa.c **** 	    nrk_led_clr(0);
1407:../../../src/net/isa/isa.c **** 	    #endif
1408:../../../src/net/isa/isa.c **** 
1409:../../../src/net/isa/isa.c **** 	    offsetY = 0;
1410:../../../src/net/isa/isa.c **** 	    //printf("%d\n\r",next_slot_offset);
1411:../../../src/net/isa/isa.c **** 
1412:../../../src/net/isa/isa.c ****             nrk_wait_until_next_n_periods (next_slot_offset);
1413:../../../src/net/isa/isa.c **** 
1414:../../../src/net/isa/isa.c **** 
1415:../../../src/net/isa/isa.c **** 	    #ifdef LED_SLOT_DEBUG
1416:../../../src/net/isa/isa.c **** 	    nrk_led_set(0);
1417:../../../src/net/isa/isa.c **** 	    #endif
1418:../../../src/net/isa/isa.c **** 	//}
1419:../../../src/net/isa/isa.c ****         //nrk_set_led (1);
1420:../../../src/net/isa/isa.c ****         // Set last_slot_time to the time of the start of the slot
1421:../../../src/net/isa/isa.c **** 	}
1422:../../../src/net/isa/isa.c ****     }
1423:../../../src/net/isa/isa.c **** }
1424:../../../src/net/isa/isa.c **** 
1425:../../../src/net/isa/isa.c **** void isa_task_config ()
1426:../../../src/net/isa/isa.c **** {
 704               	.LM71:
 705               	.LFBB13:
 706               	/* prologue: frame size=0 */
 707 01ce 0F93      		push r16
 708 01d0 1F93      		push r17
 709               	/* prologue end (size=2) */
1427:../../../src/net/isa/isa.c ****     isa_task.task = isa_nw_task;
 711               	.LM72:
 712 01d2 80E0      		ldi r24,lo8(pm(isa_nw_task))
 713 01d4 90E0      		ldi r25,hi8(pm(isa_nw_task))
 714 01d6 9093 0000 		sts (isa_task+5)+1,r25
 715 01da 8093 0000 		sts isa_task+5,r24
1428:../../../src/net/isa/isa.c ****     nrk_task_set_stk( &isa_task, isa_task_stack, ISA_STACK_SIZE);
 717               	.LM73:
 718 01de 00E0      		ldi r16,lo8(isa_task)
 719 01e0 10E0      		ldi r17,hi8(isa_task)
 720 01e2 40E8      		ldi r20,lo8(128)
 721 01e4 50E0      		ldi r21,hi8(128)
 722 01e6 60E0      		ldi r22,lo8(isa_task_stack)
 723 01e8 70E0      		ldi r23,hi8(isa_task_stack)
 724 01ea C801      		movw r24,r16
 725 01ec 0E94 0000 		call nrk_task_set_stk
1429:../../../src/net/isa/isa.c ****     isa_task.prio = 20;
 727               	.LM74:
 728 01f0 84E1      		ldi r24,lo8(20)
 729 01f2 8093 0000 		sts isa_task+8,r24
1430:../../../src/net/isa/isa.c ****     isa_task.FirstActivation = TRUE;
 731               	.LM75:
 732 01f6 81E0      		ldi r24,lo8(1)
 733 01f8 8093 0000 		sts isa_task+7,r24
1431:../../../src/net/isa/isa.c ****     isa_task.Type = BASIC_TASK;
 735               	.LM76:
 736 01fc 8093 0000 		sts isa_task+9,r24
1432:../../../src/net/isa/isa.c ****     isa_task.SchType = PREEMPTIVE;
 738               	.LM77:
 739 0200 8093 0000 		sts isa_task+10,r24
1433:../../../src/net/isa/isa.c ****     isa_task.period.secs = 0;
 741               	.LM78:
 742 0204 1092 0000 		sts isa_task+11,__zero_reg__
 743 0208 1092 0000 		sts (isa_task+11)+1,__zero_reg__
 744 020c 1092 0000 		sts (isa_task+11)+2,__zero_reg__
 745 0210 1092 0000 		sts (isa_task+11)+3,__zero_reg__
1434:../../../src/net/isa/isa.c ****     isa_task.period.nano_secs = 10*NANOS_PER_MS;
 747               	.LM79:
 748 0214 80E8      		ldi r24,lo8(10000000)
 749 0216 96E9      		ldi r25,hi8(10000000)
 750 0218 A8E9      		ldi r26,hlo8(10000000)
 751 021a B0E0      		ldi r27,hhi8(10000000)
 752 021c 8093 0000 		sts isa_task+15,r24
 753 0220 9093 0000 		sts (isa_task+15)+1,r25
 754 0224 A093 0000 		sts (isa_task+15)+2,r26
 755 0228 B093 0000 		sts (isa_task+15)+3,r27
1435:../../../src/net/isa/isa.c ****     isa_task.cpu_reserve.secs = 0;      
 757               	.LM80:
 758 022c 1092 0000 		sts isa_task+19,__zero_reg__
 759 0230 1092 0000 		sts (isa_task+19)+1,__zero_reg__
 760 0234 1092 0000 		sts (isa_task+19)+2,__zero_reg__
 761 0238 1092 0000 		sts (isa_task+19)+3,__zero_reg__
1436:../../../src/net/isa/isa.c ****     isa_task.cpu_reserve.nano_secs = 0;
 763               	.LM81:
 764 023c 1092 0000 		sts isa_task+23,__zero_reg__
 765 0240 1092 0000 		sts (isa_task+23)+1,__zero_reg__
 766 0244 1092 0000 		sts (isa_task+23)+2,__zero_reg__
 767 0248 1092 0000 		sts (isa_task+23)+3,__zero_reg__
1437:../../../src/net/isa/isa.c ****     isa_task.offset.secs = 0;
 769               	.LM82:
 770 024c 1092 0000 		sts isa_task+27,__zero_reg__
 771 0250 1092 0000 		sts (isa_task+27)+1,__zero_reg__
 772 0254 1092 0000 		sts (isa_task+27)+2,__zero_reg__
 773 0258 1092 0000 		sts (isa_task+27)+3,__zero_reg__
1438:../../../src/net/isa/isa.c ****     isa_task.offset.nano_secs = 0;
 775               	.LM83:
 776 025c 1092 0000 		sts isa_task+31,__zero_reg__
 777 0260 1092 0000 		sts (isa_task+31)+1,__zero_reg__
 778 0264 1092 0000 		sts (isa_task+31)+2,__zero_reg__
 779 0268 1092 0000 		sts (isa_task+31)+3,__zero_reg__
1439:../../../src/net/isa/isa.c ****     nrk_activate_task (&isa_task);
 781               	.LM84:
 782 026c C801      		movw r24,r16
 783 026e 0E94 0000 		call nrk_activate_task
 784               	/* epilogue: frame size=0 */
 785 0272 1F91      		pop r17
 786 0274 0F91      		pop r16
 787 0276 0895      		ret
 788               	/* epilogue end (size=3) */
 789               	/* function isa_task_config size 85 (80) */
 791               	.Lscope13:
 793               		.stabd	78,0,0
 795               	.global	_isa_init_sync
 797               	_isa_init_sync:
 798               		.stabd	46,0,0
 800               	.LM85:
 801               	.LFBB14:
 802               	/* prologue: frame size=0 */
 803 0278 CF92      		push r12
 804 027a DF92      		push r13
 805 027c EF92      		push r14
 806 027e FF92      		push r15
 807 0280 0F93      		push r16
 808 0282 1F93      		push r17
 809 0284 CF93      		push r28
 810 0286 DF93      		push r29
 811               	/* prologue end (size=8) */
 812 0288 EE24      		clr r14
 813 028a FF24      		clr r15
 814 028c 80E0      		ldi r24,lo8(isa_rfRxInfo)
 815 028e C82E      		mov r12,r24
 816 0290 80E0      		ldi r24,hi8(isa_rfRxInfo)
 817 0292 D82E      		mov r13,r24
 818               	.L66:
 820               	.LM86:
 821 0294 E091 0000 		lds r30,isa_rfRxInfo+5
 822 0298 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 823 029c 81E0      		ldi r24,lo8(1)
 824 029e 8083      		st Z,r24
 826               	.LM87:
 827 02a0 6091 0000 		lds r22,isa_param+2
 828 02a4 C601      		movw r24,r12
 829 02a6 0E94 0000 		call rf_set_rx
 831               	.LM88:
 832 02aa 0E94 0000 		call rf_polling_rx_on
 834               	.LM89:
 835 02ae 1092 0000 		sts _isa_sync_ok,__zero_reg__
 837               	.LM90:
 838 02b2 8AEF      		ldi r24,lo8(-6)
 839 02b4 0E94 0000 		call _nrk_set_next_wakeup
 841               	.LM91:
 842 02b8 80E0      		ldi r24,lo8(0)
 843 02ba 0E94 0000 		call _nrk_os_timer_set
 844 02be 00E0      		ldi r16,lo8(0)
 845 02c0 00C0      		rjmp .L67
 846               	.L49:
 848               	.LM92:
 849 02c2 0E94 0000 		call _nrk_os_timer_get
 850 02c6 0817      		cp r16,r24
 851 02c8 01F0      		breq .L67
 853               	.LM93:
 854 02ca 0E94 0000 		call _nrk_os_timer_get
 855 02ce 082F      		mov r16,r24
 857               	.LM94:
 858 02d0 0894      		sec
 859 02d2 E11C      		adc r14,__zero_reg__
 860 02d4 F11C      		adc r15,__zero_reg__
 862               	.LM95:
 863 02d6 81E1      		ldi r24,lo8(10001)
 864 02d8 E816      		cp r14,r24
 865 02da 87E2      		ldi r24,hi8(10001)
 866 02dc F806      		cpc r15,r24
 867 02de 00F0      		brlo .L67
 868 02e0 EE24      		clr r14
 869 02e2 FF24      		clr r15
 870 02e4 00C0      		rjmp .L52
 871               	.L67:
 873               	.LM96:
 874 02e6 0E94 0000 		call rf_rx_check_sfd
 875 02ea 182F      		mov r17,r24
 876 02ec 8823      		tst r24
 877 02ee 01F0      		breq .L49
 878               	.L52:
 880               	.LM97:
 881 02f0 0E94 0000 		call _nrk_high_speed_timer_reset
 883               	.LM98:
 884 02f4 0E94 0000 		call _nrk_os_timer_get
 886               	.LM99:
 887 02f8 C82F      		mov r28,r24
 888 02fa DD27      		clr r29
 889 02fc 2496      		adiw r28,4
 891               	.LM100:
 892 02fe 1123      		tst r17
 893 0300 01F0      		breq .L54
 894 0302 00C0      		rjmp .L63
 895               	.L55:
 897               	.LM101:
 898 0304 0E94 0000 		call _nrk_os_timer_get
 899 0308 9927      		clr r25
 900 030a C817      		cp r28,r24
 901 030c D907      		cpc r29,r25
 902 030e 00F0      		brlo .L54
 903               	.L63:
 905               	.LM102:
 906 0310 60E8      		ldi r22,lo8(-128)
 907 0312 80E0      		ldi r24,lo8(0)
 908 0314 0E94 0000 		call rf_polling_rx_packet
 909 0318 182F      		mov r17,r24
 910 031a 8823      		tst r24
 911 031c 01F0      		breq .L55
 912               	.L54:
 914               	.LM103:
 915 031e 0E94 0000 		call rf_rx_off
 917               	.LM104:
 918 0322 1130      		cpi r17,lo8(1)
 919 0324 01F0      		breq .+2
 920 0326 00C0      		rjmp .L66
 922               	.LM105:
 923 0328 E091 0000 		lds r30,isa_rfRxInfo+5
 924 032c F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 925 0330 9281      		ldd r25,Z+2
 926 0332 8091 0000 		lds r24,isa_clk_src_id
 927 0336 9817      		cp r25,r24
 928 0338 01F0      		breq .+2
 929 033a 00C0      		rjmp .L66
 931               	.LM106:
 932 033c 81E0      		ldi r24,lo8(1)
 933 033e 90E0      		ldi r25,hi8(1)
 934 0340 A0E0      		ldi r26,hlo8(1)
 935 0342 B0E0      		ldi r27,hhi8(1)
 936 0344 8093 0000 		sts isa_rx_data_ready,r24
 937 0348 9093 0000 		sts (isa_rx_data_ready)+1,r25
 938 034c A093 0000 		sts (isa_rx_data_ready)+2,r26
 939 0350 B093 0000 		sts (isa_rx_data_ready)+3,r27
 941               	.LM107:
 942 0354 8091 0000 		lds r24,global_slot
 943 0358 9091 0000 		lds r25,(global_slot)+1
 944 035c 2181      		ldd r18,Z+1
 945 035e 820F      		add r24,r18
 946 0360 911D      		adc r25,__zero_reg__
 947 0362 9093 0000 		sts (global_slot)+1,r25
 948 0366 8093 0000 		sts global_slot,r24
 950               	.LM108:
 951 036a 82E0      		ldi r24,lo8(2)
 952 036c 90E0      		ldi r25,hi8(2)
 953 036e 0E94 0000 		call nrk_led_toggle
 955               	.LM109:
 956 0372 6091 0000 		lds r22,__iob+2
 957 0376 7091 0000 		lds r23,(__iob+2)+1
 958 037a 89E6      		ldi r24,lo8(105)
 959 037c 90E0      		ldi r25,hi8(105)
 960 037e 0E94 0000 		call fputc
 962               	.LM110:
 963 0382 1093 0000 		sts _isa_sync_ok,r17
 964               	.LBB11:
 965               	.LBB12:
 967               	.LM111:
 968 0386 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 969 038a 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 970 038e 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 971 0392 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 972               	.LBE12:
 973               	.LBE11:
 975               	.LM112:
 976 0396 0E94 0000 		call _nrk_os_timer_stop
 978               	.LM113:
 979 039a 8AE0      		ldi r24,lo8(10)
 980 039c 0E94 0000 		call _nrk_set_next_wakeup
 982               	.LM114:
 983 03a0 87E0      		ldi r24,lo8(7)
 984 03a2 0E94 0000 		call _nrk_os_timer_set
 986               	.LM115:
 987 03a6 60E5      		ldi r22,lo8(-28336)
 988 03a8 71E9      		ldi r23,hi8(-28336)
 989 03aa 80E0      		ldi r24,lo8(0)
 990 03ac 90E0      		ldi r25,hi8(0)
 991 03ae 0E94 0000 		call nrk_high_speed_timer_wait
 993               	.LM116:
 994 03b2 0E94 0000 		call _nrk_os_timer_start
 996               	.LM117:
 997 03b6 E091 0000 		lds r30,nrk_cur_task_TCB
 998 03ba F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 999 03be 8AE0      		ldi r24,lo8(10)
 1000 03c0 90E0      		ldi r25,hi8(10)
 1001 03c2 968B      		std Z+22,r25
 1002 03c4 858B      		std Z+21,r24
 1003 03c6 8091 0000 		lds r24,_isa_sync_ok
 1005               	.LM118:
 1006 03ca 9927      		clr r25
 1007               	/* epilogue: frame size=0 */
 1008 03cc DF91      		pop r29
 1009 03ce CF91      		pop r28
 1010 03d0 1F91      		pop r17
 1011 03d2 0F91      		pop r16
 1012 03d4 FF90      		pop r15
 1013 03d6 EF90      		pop r14
 1014 03d8 DF90      		pop r13
 1015 03da CF90      		pop r12
 1016 03dc 0895      		ret
 1017               	/* epilogue end (size=9) */
 1018               	/* function _isa_init_sync size 179 (162) */
 1026               	.Lscope14:
 1028               		.stabd	78,0,0
 1029               		.data
 1030               	.LC0:
 1031 0000 4E6F 7468 		.string	"Nothing in the queue to transmit on slot %d "
 1031      696E 6720 
 1031      696E 2074 
 1031      6865 2071 
 1031      7565 7565 
 1032               	.LC1:
 1033 002d 7061 636B 		.string	"packet is too long, times out.\n\r"
 1033      6574 2069 
 1033      7320 746F 
 1033      6F20 6C6F 
 1033      6E67 2C20 
 1034               	.LC2:
 1035 004e 4448 4452 		.string	"DHDRcount:%d"
 1035      636F 756E 
 1035      743A 2564 
 1035      00
 1036               		.text
 1040               	.global	_isa_tx
 1042               	_isa_tx:
 1043               		.stabd	46,0,0
 1045               	.LM119:
 1046               	.LFBB15:
 1047               	/* prologue: frame size=1 */
 1048 03de 8F92      		push r8
 1049 03e0 9F92      		push r9
 1050 03e2 AF92      		push r10
 1051 03e4 BF92      		push r11
 1052 03e6 CF92      		push r12
 1053 03e8 DF92      		push r13
 1054 03ea EF92      		push r14
 1055 03ec FF92      		push r15
 1056 03ee 0F93      		push r16
 1057 03f0 1F93      		push r17
 1058 03f2 CF93      		push r28
 1059 03f4 DF93      		push r29
 1060 03f6 CDB7      		in r28,__SP_L__
 1061 03f8 DEB7      		in r29,__SP_H__
 1062 03fa 2197      		sbiw r28,1
 1063 03fc 0FB6      		in __tmp_reg__,__SREG__
 1064 03fe F894      		cli
 1065 0400 DEBF      		out __SP_H__,r29
 1066 0402 0FBE      		out __SREG__,__tmp_reg__
 1067 0404 CDBF      		out __SP_L__,r28
 1068               	/* prologue end (size=20) */
 1069 0406 8C01      		movw r16,r24
 1070 0408 5B01      		movw r10,r22
 1072               	.LM120:
 1073 040a 81E0      		ldi r24,lo8(1)
 1074 040c 8093 0000 		sts isa_rfTxInfo+5,r24
 1076               	.LM121:
 1077 0410 F801      		movw r30,r16
 1078 0412 A085      		ldd r26,Z+8
 1079 0414 B185      		ldd r27,Z+9
 1080 0416 FD01      		movw r30,r26
 1081 0418 8181      		ldd r24,Z+1
 1082 041a 9281      		ldd r25,Z+2
 1083 041c 0E94 0000 		call getHighPriorityEntry
 1084 0420 6C01      		movw r12,r24
 1086               	.LM122:
 1087 0422 892B      		or r24,r25
 1088 0424 01F4      		brne .L69
 1090               	.LM123:
 1091 0426 BF92      		push r11
 1092 0428 AF92      		push r10
 1093 042a 80E0      		ldi r24,lo8(.LC0)
 1094 042c 90E0      		ldi r25,hi8(.LC0)
 1095 042e 9F93      		push r25
 1096 0430 8F93      		push r24
 1097 0432 0E94 0000 		call printf
 1099               	.LM124:
 1100 0436 0F90      		pop __tmp_reg__
 1101 0438 0F90      		pop __tmp_reg__
 1102 043a 0F90      		pop __tmp_reg__
 1103 043c 0F90      		pop __tmp_reg__
 1104 043e 00C0      		rjmp .L105
 1105               	.L69:
 1107               	.LM125:
 1108 0440 8A2C      		mov r8,r10
 1109 0442 A092 0000 		sts previous_tx_slot,r10
 1111               	.LM126:
 1112 0446 0894      		sec
 1113 0448 C11C      		adc r12,__zero_reg__
 1114 044a D11C      		adc r13,__zero_reg__
 1115 044c D092 0000 		sts (isa_rfTxInfo+3)+1,r13
 1116 0450 C092 0000 		sts isa_rfTxInfo+3,r12
 1118               	.LM127:
 1119 0454 D601      		movw r26,r12
 1120 0456 8E91      		ld r24,-X
 1121 0458 6D01      		movw r12,r26
 1122 045a 8093 0000 		sts isa_rfTxInfo+2,r24
 1124               	.LM128:
 1125 045e C801      		movw r24,r16
 1126 0460 0E94 0000 		call configDHDR
 1127 0464 982E      		mov r9,r24
 1129               	.LM129:
 1130 0466 E091 0000 		lds r30,isa_rfTxInfo+3
 1131 046a F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1132 046e 8083      		st Z,r24
 1134               	.LM130:
 1135 0470 E091 0000 		lds r30,isa_rfTxInfo+3
 1136 0474 F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1137 0478 8091 0000 		lds r24,global_slot
 1138 047c 9091 0000 		lds r25,(global_slot)+1
 1139 0480 8183      		std Z+1,r24
 1141               	.LM131:
 1142 0482 E091 0000 		lds r30,isa_rfTxInfo+3
 1143 0486 F091 0000 		lds r31,(isa_rfTxInfo+3)+1
 1144 048a 8091 0000 		lds r24,isa_id
 1145 048e 8283      		std Z+2,r24
 1147               	.LM132:
 1148 0490 0E94 0000 		call _nrk_high_speed_timer_reset
 1150               	.LM133:
 1151 0494 60E8      		ldi r22,lo8(9600)
 1152 0496 75E2      		ldi r23,hi8(9600)
 1153 0498 80E0      		ldi r24,lo8(0)
 1154 049a 90E0      		ldi r25,hi8(0)
 1155 049c 0E94 0000 		call nrk_high_speed_timer_wait
 1157               	.LM134:
 1158 04a0 E090 0000 		lds r14,NRK_DEBUG_1
 1159 04a4 8E2D      		mov r24,r14
 1160 04a6 0E94 0000 		call nrk_gpio_set
 1162               	.LM135:
 1163 04aa 4091 0000 		lds r20,isa_param+4
 1164 04ae 5091 0000 		lds r21,(isa_param+4)+1
 1165 04b2 6091 0000 		lds r22,slot_start_time
 1166 04b6 7091 0000 		lds r23,(slot_start_time)+1
 1167 04ba 20E0      		ldi r18,lo8(tx_start_time)
 1168 04bc 30E0      		ldi r19,hi8(tx_start_time)
 1169 04be 80E0      		ldi r24,lo8(isa_rfTxInfo)
 1170 04c0 90E0      		ldi r25,hi8(isa_rfTxInfo)
 1171 04c2 0E94 0000 		call rf_tx_tdma_packet
 1172 04c6 8823      		tst r24
 1173 04c8 01F0      		breq .L72
 1175               	.LM136:
 1176 04ca E5E7      		ldi r30,lo8(117)
 1177 04cc F0E0      		ldi r31,hi8(117)
 1178 04ce CE0E      		add r12,r30
 1179 04d0 DF1E      		adc r13,r31
 1180 04d2 D601      		movw r26,r12
 1181 04d4 1C92      		st X,__zero_reg__
 1182 04d6 EBE8      		ldi r30,lo8(-117)
 1183 04d8 FFEF      		ldi r31,hi8(-117)
 1184 04da CE0E      		add r12,r30
 1185 04dc DF1E      		adc r13,r31
 1187               	.LM137:
 1188 04de 8091 0000 		lds r24,txCount
 1189 04e2 9091 0000 		lds r25,(txCount)+1
 1190 04e6 0196      		adiw r24,1
 1191 04e8 9093 0000 		sts (txCount)+1,r25
 1192 04ec 8093 0000 		sts txCount,r24
 1194               	.LM138:
 1195 04f0 8E2D      		mov r24,r14
 1196 04f2 0E94 0000 		call nrk_gpio_clr
 1198               	.LM139:
 1199 04f6 83E0      		ldi r24,lo8(3)
 1200 04f8 90E0      		ldi r25,hi8(3)
 1201 04fa 0E94 0000 		call nrk_led_toggle
 1203               	.LM140:
 1204 04fe 8091 0000 		lds r24,tx_start_time
 1205 0502 9091 0000 		lds r25,(tx_start_time)+1
 1206 0506 2091 0000 		lds r18,slot_start_time
 1207 050a 3091 0000 		lds r19,(slot_start_time)+1
 1208 050e 821B      		sub r24,r18
 1209 0510 930B      		sbc r25,r19
 1210 0512 9093 0000 		sts (offsetY)+1,r25
 1211 0516 8093 0000 		sts offsetY,r24
 1212               	.L72:
 1214               	.LM141:
 1215 051a 8091 0000 		lds r24,isa_tx_done_signal
 1216 051e 0E94 0000 		call nrk_event_signal
 1218               	.LM142:
 1219 0522 97FE      		sbrs r9,7
 1220 0524 00C0      		rjmp .L74
 1222               	.LM143:
 1223 0526 0E94 0000 		call rf_polling_rx_on
 1225               	.LM144:
 1226 052a 8E2D      		mov r24,r14
 1227 052c 0E94 0000 		call nrk_gpio_set
 1229               	.LM145:
 1230 0530 0E94 0000 		call _nrk_high_speed_timer_reset
 1232               	.LM146:
 1233 0534 60E0      		ldi r22,lo8(4096)
 1234 0536 70E1      		ldi r23,hi8(4096)
 1235 0538 80E0      		ldi r24,lo8(0)
 1236 053a 90E0      		ldi r25,hi8(0)
 1237 053c 0E94 0000 		call nrk_high_speed_timer_wait
 1239               	.LM147:
 1240 0540 0E94 0000 		call _nrk_os_timer_get
 1241 0544 8983      		std Y+1,r24
 1243               	.LM148:
 1244 0546 8981      		ldd r24,Y+1
 1245 0548 8E5F      		subi r24,lo8(-(2))
 1246 054a 8983      		std Y+1,r24
 1247 054c 00C0      		rjmp .L76
 1248               	.L77:
 1250               	.LM149:
 1251 054e 0E94 0000 		call _nrk_os_timer_get
 1252 0552 9981      		ldd r25,Y+1
 1253 0554 9817      		cp r25,r24
 1254 0556 00F0      		brlo .+2
 1255 0558 00C0      		rjmp .L76
 1257               	.LM150:
 1258 055a 2091 0000 		lds r18,previous_tx_slot
 1260               	.LM151:
 1261 055e 822F      		mov r24,r18
 1262 0560 9927      		clr r25
 1263 0562 A816      		cp r10,r24
 1264 0564 B906      		cpc r11,r25
 1265 0566 01F4      		brne .L79
 1267               	.LM152:
 1268 0568 8091 0000 		lds r24,slot_expired
 1269 056c 9091 0000 		lds r25,(slot_expired)+1
 1270 0570 4996      		adiw r24,25
 1271 0572 9093 0000 		sts (slot_expired)+1,r25
 1272 0576 8093 0000 		sts slot_expired,r24
 1273 057a 00C0      		rjmp .L81
 1274               	.L79:
 1276               	.LM153:
 1277 057c 882D      		mov r24,r8
 1278 057e 821B      		sub r24,r18
 1279 0580 2091 0000 		lds r18,slot_expired
 1280 0584 3091 0000 		lds r19,(slot_expired)+1
 1281 0588 482F      		mov r20,r24
 1282 058a 5527      		clr r21
 1283 058c 47FD      		sbrc r20,7
 1284 058e 5095      		com r21
 1286               	.LM154:
 1287 0590 1816      		cp __zero_reg__,r24
 1288 0592 04F0      		brlt .L111
 1290               	.LM155:
 1291 0594 275E      		subi r18,lo8(-(25))
 1292 0596 3F4F      		sbci r19,hi8(-(25))
 1293               	.L111:
 1294 0598 240F      		add r18,r20
 1295 059a 351F      		adc r19,r21
 1296 059c 3093 0000 		sts (slot_expired)+1,r19
 1297 05a0 2093 0000 		sts slot_expired,r18
 1298               	.L81:
 1300               	.LM156:
 1301 05a4 0E94 0000 		call rf_rx_off
 1303               	.LM157:
 1304 05a8 8E2D      		mov r24,r14
 1305 05aa 0E94 0000 		call nrk_gpio_clr
 1307               	.LM158:
 1308 05ae 6091 0000 		lds r22,__iob+2
 1309 05b2 7091 0000 		lds r23,(__iob+2)+1
 1310 05b6 83E7      		ldi r24,lo8(115)
 1311 05b8 90E0      		ldi r25,hi8(115)
 1312 05ba 0E94 0000 		call fputc
 1314               	.LM159:
 1315 05be 8091 0000 		lds r24,packetsLost
 1316 05c2 9091 0000 		lds r25,(packetsLost)+1
 1317 05c6 0196      		adiw r24,1
 1318 05c8 9093 0000 		sts (packetsLost)+1,r25
 1319 05cc 8093 0000 		sts packetsLost,r24
 1321               	.LM160:
 1322 05d0 87E7      		ldi r24,lo8(119)
 1323 05d2 90E0      		ldi r25,hi8(119)
 1324 05d4 C80E      		add r12,r24
 1325 05d6 D91E      		adc r13,r25
 1326 05d8 D601      		movw r26,r12
 1327 05da ED91      		ld r30,X+
 1328 05dc FC91      		ld r31,X
 1329 05de 89E8      		ldi r24,lo8(-119)
 1330 05e0 9FEF      		ldi r25,hi8(-119)
 1331 05e2 C80E      		add r12,r24
 1332 05e4 D91E      		adc r13,r25
 1333 05e6 00C0      		rjmp .L117
 1334               	.L76:
 1336               	.LM161:
 1337 05e8 0E94 0000 		call rf_rx_check_sfd
 1338 05ec 8823      		tst r24
 1339 05ee 01F4      		brne .+2
 1340 05f0 00C0      		rjmp .L77
 1342               	.LM162:
 1343 05f2 0E94 0000 		call _nrk_os_timer_get
 1344 05f6 8983      		std Y+1,r24
 1346               	.LM163:
 1347 05f8 8981      		ldd r24,Y+1
 1348 05fa 8E5F      		subi r24,lo8(-(2))
 1349 05fc 8983      		std Y+1,r24
 1351               	.LM164:
 1352 05fe F801      		movw r30,r16
 1353 0600 A085      		ldd r26,Z+8
 1354 0602 B185      		ldd r27,Z+9
 1355 0604 FD01      		movw r30,r26
 1356 0606 8585      		ldd r24,Z+13
 1357 0608 87FF      		sbrs r24,7
 1358 060a 00C0      		rjmp .L87
 1359 060c 14E0      		ldi r17,lo8(4)
 1360 060e 00C0      		rjmp .L106
 1361               	.L90:
 1363               	.LM165:
 1364 0610 0E94 0000 		call _nrk_os_timer_get
 1365 0614 9981      		ldd r25,Y+1
 1366 0616 9817      		cp r25,r24
 1367 0618 00F4      		brsh .L106
 1369               	.LM166:
 1370 061a 80E0      		ldi r24,lo8(.LC1)
 1371 061c 90E0      		ldi r25,hi8(.LC1)
 1372 061e 9F93      		push r25
 1373 0620 8F93      		push r24
 1374 0622 0E94 0000 		call printf
 1376               	.LM167:
 1377 0626 8091 0000 		lds r24,packetsLost
 1378 062a 9091 0000 		lds r25,(packetsLost)+1
 1379 062e 0196      		adiw r24,1
 1380 0630 9093 0000 		sts (packetsLost)+1,r25
 1381 0634 8093 0000 		sts packetsLost,r24
 1383               	.LM168:
 1384 0638 0E94 0000 		call _nrk_os_timer_get
 1385 063c 8093 0000 		sts tmp_curSec,r24
 1387               	.LM169:
 1388 0640 87E7      		ldi r24,lo8(119)
 1389 0642 90E0      		ldi r25,hi8(119)
 1390 0644 C80E      		add r12,r24
 1391 0646 D91E      		adc r13,r25
 1392 0648 D601      		movw r26,r12
 1393 064a ED91      		ld r30,X+
 1394 064c FC91      		ld r31,X
 1395 064e 89E8      		ldi r24,lo8(-119)
 1396 0650 9FEF      		ldi r25,hi8(-119)
 1397 0652 C80E      		add r12,r24
 1398 0654 D91E      		adc r13,r25
 1399 0656 0F90      		pop __tmp_reg__
 1400 0658 0F90      		pop __tmp_reg__
 1401               	.L117:
 1402 065a 3097      		sbiw r30,0
 1403 065c 01F4      		brne .+2
 1404 065e 00C0      		rjmp .L114
 1406               	.LM170:
 1407 0660 60E0      		ldi r22,lo8(0)
 1408 0662 00C0      		rjmp .L113
 1409               	.L87:
 1410 0664 12E0      		ldi r17,lo8(2)
 1411               	.L106:
 1413               	.LM171:
 1414 0666 612F      		mov r22,r17
 1415 0668 81E0      		ldi r24,lo8(1)
 1416 066a 0E94 0000 		call rf_polling_rx_packet
 1417 066e 082F      		mov r16,r24
 1418 0670 8823      		tst r24
 1419 0672 01F0      		breq .L90
 1421               	.LM172:
 1422 0674 8130      		cpi r24,lo8(1)
 1423 0676 01F4      		brne .+2
 1424 0678 00C0      		rjmp .L95
 1426               	.LM173:
 1427 067a 6091 0000 		lds r22,__iob+2
 1428 067e 7091 0000 		lds r23,(__iob+2)+1
 1429 0682 86E6      		ldi r24,lo8(102)
 1430 0684 90E0      		ldi r25,hi8(102)
 1431 0686 0E94 0000 		call fputc
 1433               	.LM174:
 1434 068a 8091 0000 		lds r24,packetsLost
 1435 068e 9091 0000 		lds r25,(packetsLost)+1
 1436 0692 0196      		adiw r24,1
 1437 0694 9093 0000 		sts (packetsLost)+1,r25
 1438 0698 8093 0000 		sts packetsLost,r24
 1440               	.LM175:
 1441 069c 8091 0000 		lds r24,DHDRcount
 1442 06a0 9091 0000 		lds r25,(DHDRcount)+1
 1443 06a4 9F93      		push r25
 1444 06a6 8F93      		push r24
 1445 06a8 80E0      		ldi r24,lo8(.LC2)
 1446 06aa 90E0      		ldi r25,hi8(.LC2)
 1447 06ac 9F93      		push r25
 1448 06ae 8F93      		push r24
 1449 06b0 0E94 0000 		call printf
 1450 06b4 0F90      		pop __tmp_reg__
 1451 06b6 0F90      		pop __tmp_reg__
 1452 06b8 0F90      		pop __tmp_reg__
 1453 06ba 0F90      		pop __tmp_reg__
 1454               	.L97:
 1456               	.LM176:
 1457 06bc 8E2D      		mov r24,r14
 1458 06be 0E94 0000 		call nrk_gpio_clr
 1460               	.LM177:
 1461 06c2 0130      		cpi r16,lo8(1)
 1462 06c4 01F0      		breq .+2
 1463 06c6 00C0      		rjmp .L74
 1465               	.LM178:
 1466 06c8 8091 0000 		lds r24,rxCount
 1467 06cc 9091 0000 		lds r25,(rxCount)+1
 1468 06d0 0196      		adiw r24,1
 1469 06d2 9093 0000 		sts (rxCount)+1,r25
 1470 06d6 8093 0000 		sts rxCount,r24
 1472               	.LM179:
 1473 06da 1092 0000 		sts (slot_expired)+1,__zero_reg__
 1474 06de 1092 0000 		sts slot_expired,__zero_reg__
 1476               	.LM180:
 1477 06e2 E091 0000 		lds r30,isa_rfRxInfo+5
 1478 06e6 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 1479 06ea 8081      		ld r24,Z
 1480 06ec 8093 0000 		sts DHR,r24
 1482               	.LM181:
 1483 06f0 87FF      		sbrs r24,7
 1484 06f2 00C0      		rjmp .L74
 1486               	.LM182:
 1487 06f4 8181      		ldd r24,Z+1
 1488 06f6 9927      		clr r25
 1489 06f8 982F      		mov r25,r24
 1490 06fa 8827      		clr r24
 1491 06fc 2281      		ldd r18,Z+2
 1492 06fe 3327      		clr r19
 1493 0700 822B      		or r24,r18
 1494 0702 932B      		or r25,r19
 1495 0704 9093 0000 		sts (offsetX)+1,r25
 1496 0708 8093 0000 		sts offsetX,r24
 1498               	.LM183:
 1499 070c 80E0      		ldi r24,lo8(0)
 1500 070e 90E0      		ldi r25,hi8(0)
 1501 0710 0E94 0000 		call nrk_led_toggle
 1503               	.LM184:
 1504 0714 6091 0000 		lds r22,__iob+2
 1505 0718 7091 0000 		lds r23,(__iob+2)+1
 1506 071c 81E6      		ldi r24,lo8(97)
 1507 071e 90E0      		ldi r25,hi8(97)
 1508 0720 0E94 0000 		call fputc
 1510               	.LM185:
 1511 0724 A090 0000 		lds r10,offsetX
 1512 0728 B090 0000 		lds r11,(offsetX)+1
 1513 072c 8091 0000 		lds r24,offsetY
 1514 0730 9091 0000 		lds r25,(offsetY)+1
 1515 0734 A81A      		sub r10,r24
 1516 0736 B90A      		sbc r11,r25
 1518               	.LM186:
 1519 0738 82E3      		ldi r24,lo8(50)
 1520 073a 8983      		std Y+1,r24
 1522               	.LM187:
 1523 073c 0E94 0000 		call _nrk_os_timer_get
 1524 0740 982E      		mov r9,r24
 1526               	.LM188:
 1527 0742 8090 0000 		lds r8,NRK_DEBUG_2
 1528 0746 882D      		mov r24,r8
 1529 0748 0E94 0000 		call nrk_gpio_set
 1531               	.LM189:
 1532 074c B7FC      		sbrc r11,7
 1533 074e 00C0      		rjmp .L100
 1535               	.LM190:
 1536 0750 9092 0000 		sts tmp_curSec,r9
 1538               	.LM191:
 1539 0754 0E94 0000 		call _nrk_os_timer_stop
 1541               	.LM192:
 1542 0758 94E6      		ldi r25,lo8(6500)
 1543 075a E92E      		mov r14,r25
 1544 075c 99E1      		ldi r25,hi8(6500)
 1545 075e F92E      		mov r15,r25
 1546 0760 C501      		movw r24,r10
 1547 0762 64E6      		ldi r22,lo8(6500)
 1548 0764 79E1      		ldi r23,hi8(6500)
 1549 0766 0E94 0000 		call __divmodhi4
 1550 076a 8B01      		movw r16,r22
 1551 076c 0F5F      		subi r16,lo8(-(1))
 1553               	.LM193:
 1554 076e 0093 0000 		sts tmp_offsetSec,r16
 1556               	.LM194:
 1557 0772 C501      		movw r24,r10
 1558 0774 64E6      		ldi r22,lo8(6500)
 1559 0776 79E1      		ldi r23,hi8(6500)
 1560 0778 0E94 0000 		call __divmodhi4
 1561 077c E81A      		sub r14,r24
 1562 077e F90A      		sbc r15,r25
 1564               	.LM195:
 1565 0780 F092 0000 		sts (tmp_offsetNanoSec)+1,r15
 1566 0784 E092 0000 		sts tmp_offsetNanoSec,r14
 1568               	.LM196:
 1569 0788 0E94 0000 		call _nrk_high_speed_timer_reset
 1571               	.LM197:
 1572 078c 82E3      		ldi r24,lo8(50)
 1573 078e 90E0      		ldi r25,hi8(50)
 1574 0790 0E94 0000 		call nrk_spin_wait_us
 1576               	.LM198:
 1577 0794 B701      		movw r22,r14
 1578 0796 80E0      		ldi r24,lo8(0)
 1579 0798 90E0      		ldi r25,hi8(0)
 1580 079a 0E94 0000 		call nrk_high_speed_timer_wait
 1582               	.LM199:
 1583 079e 892D      		mov r24,r9
 1584 07a0 800F      		add r24,r16
 1585 07a2 0E94 0000 		call _nrk_os_timer_set
 1587               	.LM200:
 1588 07a6 84E6      		ldi r24,lo8(100)
 1589 07a8 90E0      		ldi r25,hi8(100)
 1590 07aa 0E94 0000 		call nrk_spin_wait_us
 1591 07ae 00C0      		rjmp .L112
 1592               	.L100:
 1594               	.LM201:
 1595 07b0 6091 0000 		lds r22,__iob+2
 1596 07b4 7091 0000 		lds r23,(__iob+2)+1
 1597 07b8 81E2      		ldi r24,lo8(33)
 1598 07ba 90E0      		ldi r25,hi8(33)
 1599 07bc 0E94 0000 		call fputc
 1601               	.LM202:
 1602 07c0 0E94 0000 		call _nrk_os_timer_stop
 1604               	.LM203:
 1605 07c4 0E94 0000 		call _nrk_high_speed_timer_reset
 1607               	.LM204:
 1608 07c8 6627      		clr r22
 1609 07ca 7727      		clr r23
 1610 07cc 6A19      		sub r22,r10
 1611 07ce 7B09      		sbc r23,r11
 1612 07d0 80E0      		ldi r24,lo8(0)
 1613 07d2 90E0      		ldi r25,hi8(0)
 1614 07d4 0E94 0000 		call nrk_high_speed_timer_wait
 1616               	.LM205:
 1617 07d8 892D      		mov r24,r9
 1618 07da 0E94 0000 		call _nrk_os_timer_set
 1619               	.L112:
 1621               	.LM206:
 1622 07de 0E94 0000 		call _nrk_os_timer_start
 1624               	.LM207:
 1625 07e2 0E94 0000 		call _nrk_high_speed_timer_reset
 1627               	.LM208:
 1628 07e6 82E3      		ldi r24,lo8(50)
 1629 07e8 90E0      		ldi r25,hi8(50)
 1630 07ea 0E94 0000 		call nrk_spin_wait_us
 1632               	.LM209:
 1633 07ee 882D      		mov r24,r8
 1634 07f0 0E94 0000 		call nrk_gpio_clr
 1635               	.L74:
 1637               	.LM210:
 1638 07f4 A7E7      		ldi r26,lo8(119)
 1639 07f6 B0E0      		ldi r27,hi8(119)
 1640 07f8 CA0E      		add r12,r26
 1641 07fa DB1E      		adc r13,r27
 1642 07fc D601      		movw r26,r12
 1643 07fe ED91      		ld r30,X+
 1644 0800 FC91      		ld r31,X
 1645 0802 89E8      		ldi r24,lo8(-119)
 1646 0804 9FEF      		ldi r25,hi8(-119)
 1647 0806 C80E      		add r12,r24
 1648 0808 D91E      		adc r13,r25
 1649 080a 3097      		sbiw r30,0
 1650 080c 01F4      		brne .L103
 1651               	.L114:
 1652 080e C601      		movw r24,r12
 1653 0810 0E94 0000 		call isaFreePacket
 1654 0814 00C0      		rjmp .L105
 1655               	.L103:
 1657               	.LM211:
 1658 0816 61E0      		ldi r22,lo8(1)
 1659               	.L113:
 1660 0818 C601      		movw r24,r12
 1661 081a 0995      		icall
 1662 081c 00C0      		rjmp .L105
 1663               	.L95:
 1665               	.LM212:
 1666 081e 0E94 0000 		call rf_rx_off
 1667 0822 00C0      		rjmp .L97
 1668               	.L105:
 1669               	/* epilogue: frame size=1 */
 1670 0824 2196      		adiw r28,1
 1671 0826 0FB6      		in __tmp_reg__,__SREG__
 1672 0828 F894      		cli
 1673 082a DEBF      		out __SP_H__,r29
 1674 082c 0FBE      		out __SREG__,__tmp_reg__
 1675 082e CDBF      		out __SP_L__,r28
 1676 0830 DF91      		pop r29
 1677 0832 CF91      		pop r28
 1678 0834 1F91      		pop r17
 1679 0836 0F91      		pop r16
 1680 0838 FF90      		pop r15
 1681 083a EF90      		pop r14
 1682 083c DF90      		pop r13
 1683 083e CF90      		pop r12
 1684 0840 BF90      		pop r11
 1685 0842 AF90      		pop r10
 1686 0844 9F90      		pop r9
 1687 0846 8F90      		pop r8
 1688 0848 0895      		ret
 1689               	/* epilogue end (size=19) */
 1690               	/* function _isa_tx size 567 (528) */
 1701               	.Lscope15:
 1703               		.stabd	78,0,0
 1704               		.data
 1705               	.LC3:
 1706 005b 446F 6E74 		.string	"Dont know what to do with this packet for %d- releasing"
 1706      206B 6E6F 
 1706      7720 7768 
 1706      6174 2074 
 1706      6F20 646F 
 1707               		.text
 1711               	.global	_isa_rx
 1713               	_isa_rx:
 1714               		.stabd	46,0,0
 1716               	.LM213:
 1717               	.LFBB16:
 1718               	/* prologue: frame size=1 */
 1719 084a AF92      		push r10
 1720 084c BF92      		push r11
 1721 084e CF92      		push r12
 1722 0850 DF92      		push r13
 1723 0852 EF92      		push r14
 1724 0854 0F93      		push r16
 1725 0856 1F93      		push r17
 1726 0858 CF93      		push r28
 1727 085a DF93      		push r29
 1728 085c CDB7      		in r28,__SP_L__
 1729 085e DEB7      		in r29,__SP_H__
 1730 0860 2197      		sbiw r28,1
 1731 0862 0FB6      		in __tmp_reg__,__SREG__
 1732 0864 F894      		cli
 1733 0866 DEBF      		out __SP_H__,r29
 1734 0868 0FBE      		out __SREG__,__tmp_reg__
 1735 086a CDBF      		out __SP_L__,r28
 1736               	/* prologue end (size=17) */
 1738               	.LM214:
 1739 086c 6091 0000 		lds r22,isa_param+2
 1740 0870 80E0      		ldi r24,lo8(isa_rfRxInfo)
 1741 0872 90E0      		ldi r25,hi8(isa_rfRxInfo)
 1742 0874 0E94 0000 		call rf_set_rx
 1744               	.LM215:
 1745 0878 0E94 0000 		call rf_polling_rx_on
 1747               	.LM216:
 1748 087c 0091 0000 		lds r16,NRK_DEBUG_2
 1749 0880 802F      		mov r24,r16
 1750 0882 0E94 0000 		call nrk_gpio_set
 1752               	.LM217:
 1753 0886 0E94 0000 		call _nrk_os_timer_get
 1754 088a 8983      		std Y+1,r24
 1756               	.LM218:
 1757 088c 8981      		ldd r24,Y+1
 1758 088e 8C5F      		subi r24,lo8(-(4))
 1759 0890 8983      		std Y+1,r24
 1760 0892 00C0      		rjmp .L119
 1761               	.L120:
 1763               	.LM219:
 1764 0894 0E94 0000 		call _nrk_os_timer_get
 1765 0898 9981      		ldd r25,Y+1
 1766 089a 9817      		cp r25,r24
 1767 089c 00F4      		brsh .L119
 1769               	.LM220:
 1770 089e 802F      		mov r24,r16
 1771 08a0 0E94 0000 		call nrk_gpio_clr
 1773               	.LM221:
 1774 08a4 0E94 0000 		call rf_rx_off
 1776               	.LM222:
 1777 08a8 802F      		mov r24,r16
 1778 08aa 0E94 0000 		call nrk_gpio_set
 1780               	.LM223:
 1781 08ae 802F      		mov r24,r16
 1782 08b0 0E94 0000 		call nrk_gpio_clr
 1784               	.LM224:
 1785 08b4 6091 0000 		lds r22,__iob+2
 1786 08b8 7091 0000 		lds r23,(__iob+2)+1
 1787 08bc 86E7      		ldi r24,lo8(118)
 1788 08be 90E0      		ldi r25,hi8(118)
 1789 08c0 00C0      		rjmp .L148
 1790               	.L119:
 1792               	.LM225:
 1793 08c2 0E94 0000 		call rf_rx_check_sfd
 1794 08c6 8823      		tst r24
 1795 08c8 01F0      		breq .L120
 1797               	.LM226:
 1798 08ca 0E94 0000 		call _nrk_high_speed_timer_get
 1799 08ce 9093 0000 		sts (rx_start_time)+1,r25
 1800 08d2 8093 0000 		sts rx_start_time,r24
 1802               	.LM227:
 1803 08d6 0E94 0000 		call _nrk_os_timer_get
 1804 08da 8983      		std Y+1,r24
 1806               	.LM228:
 1807 08dc 8981      		ldd r24,Y+1
 1808 08de 8B5F      		subi r24,lo8(-(5))
 1809 08e0 8983      		std Y+1,r24
 1810 08e2 00C0      		rjmp .L124
 1811               	.L125:
 1813               	.LM229:
 1814 08e4 0E94 0000 		call _nrk_os_timer_get
 1815 08e8 9981      		ldd r25,Y+1
 1816 08ea 9817      		cp r25,r24
 1817 08ec 00F4      		brsh .L124
 1819               	.LM230:
 1820 08ee 80E0      		ldi r24,lo8(.LC1)
 1821 08f0 90E0      		ldi r25,hi8(.LC1)
 1822 08f2 9F93      		push r25
 1823 08f4 8F93      		push r24
 1824 08f6 0E94 0000 		call printf
 1826               	.LM231:
 1827 08fa 8091 0000 		lds r24,packetsLost
 1828 08fe 9091 0000 		lds r25,(packetsLost)+1
 1829 0902 0196      		adiw r24,1
 1830 0904 9093 0000 		sts (packetsLost)+1,r25
 1831 0908 8093 0000 		sts packetsLost,r24
 1833               	.LM232:
 1834 090c 0F90      		pop __tmp_reg__
 1835 090e 0F90      		pop __tmp_reg__
 1836 0910 00C0      		rjmp .L142
 1837               	.L124:
 1839               	.LM233:
 1840 0912 60E8      		ldi r22,lo8(-128)
 1841 0914 80E0      		ldi r24,lo8(0)
 1842 0916 0E94 0000 		call rf_polling_rx_packet
 1843 091a 182F      		mov r17,r24
 1844 091c 8823      		tst r24
 1845 091e 01F0      		breq .L125
 1847               	.LM234:
 1848 0920 802F      		mov r24,r16
 1849 0922 0E94 0000 		call nrk_gpio_clr
 1851               	.LM235:
 1852 0926 0E94 0000 		call rf_rx_off
 1854               	.LM236:
 1855 092a 1130      		cpi r17,lo8(1)
 1856 092c 01F4      		brne .+2
 1857 092e 00C0      		rjmp .L128
 1859               	.LM237:
 1860 0930 6091 0000 		lds r22,__iob+2
 1861 0934 7091 0000 		lds r23,(__iob+2)+1
 1862 0938 82E6      		ldi r24,lo8(98)
 1863 093a 90E0      		ldi r25,hi8(98)
 1864               	.L148:
 1865 093c 0E94 0000 		call fputc
 1867               	.LM238:
 1868 0940 8091 0000 		lds r24,packetsLost
 1869 0944 9091 0000 		lds r25,(packetsLost)+1
 1870 0948 0196      		adiw r24,1
 1871 094a 9093 0000 		sts (packetsLost)+1,r25
 1872 094e 8093 0000 		sts packetsLost,r24
 1873 0952 00C0      		rjmp .L142
 1874               	.L130:
 1876               	.LM239:
 1877 0954 8091 0000 		lds r24,txCount
 1878 0958 9091 0000 		lds r25,(txCount)+1
 1879 095c 0196      		adiw r24,1
 1880 095e 9093 0000 		sts (txCount)+1,r25
 1881 0962 8093 0000 		sts txCount,r24
 1882               	.LBB13:
 1883               	.LBB14:
 1885               	.LM240:
 1886 0966 12FF      		sbrs r17,2
 1887 0968 00C0      		rjmp .L131
 1888 096a 83E8      		ldi r24,lo8(-125)
 1889 096c 00C0      		rjmp .L133
 1890               	.L131:
 1891 096e 83E0      		ldi r24,lo8(3)
 1892               	.L133:
 1893               	.LBE14:
 1894               	.LBE13:
 1896               	.LM241:
 1897 0970 8093 0000 		sts DHR,r24
 1899               	.LM242:
 1900 0974 8093 0000 		sts isa_ack_buf,r24
 1902               	.LM243:
 1903 0978 80E0      		ldi r24,lo8(isa_ack_buf)
 1904 097a 90E0      		ldi r25,hi8(isa_ack_buf)
 1905 097c 9093 0000 		sts (isa_ack_tx+3)+1,r25
 1906 0980 8093 0000 		sts isa_ack_tx+3,r24
 1908               	.LM244:
 1909 0984 12FF      		sbrs r17,2
 1910 0986 00C0      		rjmp .L134
 1911               	.LBB15:
 1913               	.LM245:
 1914 0988 6091 0000 		lds r22,__iob+2
 1915 098c 7091 0000 		lds r23,(__iob+2)+1
 1916 0990 8BE4      		ldi r24,lo8(75)
 1917 0992 90E0      		ldi r25,hi8(75)
 1918 0994 0E94 0000 		call fputc
 1920               	.LM246:
 1921 0998 8091 0000 		lds r24,rx_start_time
 1922 099c 9091 0000 		lds r25,(rx_start_time)+1
 1923 09a0 2091 0000 		lds r18,slot_start_time
 1924 09a4 3091 0000 		lds r19,(slot_start_time)+1
 1925 09a8 821B      		sub r24,r18
 1926 09aa 930B      		sbc r25,r19
 1927 09ac 9093 0000 		sts (offsetX)+1,r25
 1928 09b0 8093 0000 		sts offsetX,r24
 1930               	.LM247:
 1931 09b4 292F      		mov r18,r25
 1932 09b6 3327      		clr r19
 1933 09b8 2093 0000 		sts isa_ack_buf+1,r18
 1935               	.LM248:
 1936 09bc 8093 0000 		sts isa_ack_buf+2,r24
 1938               	.LM249:
 1939 09c0 84E0      		ldi r24,lo8(4)
 1940 09c2 00C0      		rjmp .L147
 1941               	.L134:
 1942               	.LBE15:
 1944               	.LM250:
 1945 09c4 82E0      		ldi r24,lo8(2)
 1946               	.L147:
 1947 09c6 8093 0000 		sts isa_ack_tx+2,r24
 1949               	.LM251:
 1950 09ca 802F      		mov r24,r16
 1951 09cc 0E94 0000 		call nrk_gpio_set
 1953               	.LM252:
 1954 09d0 4091 0000 		lds r20,isa_param+4
 1955 09d4 5091 0000 		lds r21,(isa_param+4)+1
 1956 09d8 6091 0000 		lds r22,slot_start_time
 1957 09dc 7091 0000 		lds r23,(slot_start_time)+1
 1958 09e0 20E0      		ldi r18,lo8(tx_start_time)
 1959 09e2 30E0      		ldi r19,hi8(tx_start_time)
 1960 09e4 80E0      		ldi r24,lo8(isa_ack_tx)
 1961 09e6 90E0      		ldi r25,hi8(isa_ack_tx)
 1962 09e8 0E94 0000 		call rf_tx_tdma_packet
 1964               	.LM253:
 1965 09ec 802F      		mov r24,r16
 1966 09ee 0E94 0000 		call nrk_gpio_clr
 1967               	.L137:
 1969               	.LM254:
 1970 09f2 8091 0000 		lds r24,dmo
 1971 09f6 9091 0000 		lds r25,(dmo)+1
 1972 09fa A816      		cp r10,r24
 1973 09fc B906      		cpc r11,r25
 1974 09fe 01F4      		brne .L138
 1976               	.LM255:
 1977 0a00 E091 0000 		lds r30,isa_rfRxInfo+5
 1978 0a04 F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 1979 0a08 8281      		ldd r24,Z+2
 1980 0a0a 6F01      		movw r12,r30
 1981 0a0c EE24      		clr r14
 1982 0a0e 00E0      		ldi r16,lo8(0)
 1983 0a10 20E0      		ldi r18,lo8(0)
 1984 0a12 40E0      		ldi r20,lo8(0)
 1985 0a14 B501      		movw r22,r10
 1986 0a16 9927      		clr r25
 1987 0a18 0E94 0000 		call dd_data_indication
 1988 0a1c 00C0      		rjmp .L142
 1989               	.L138:
 1991               	.LM256:
 1992 0a1e C501      		movw r24,r10
 1993 0a20 0E94 0000 		call isTransmitLinkPresent
 1994 0a24 8823      		tst r24
 1995 0a26 01F0      		breq .L140
 1997               	.LM257:
 1998 0a28 2091 0000 		lds r18,isa_rfRxInfo+5
 1999 0a2c 3091 0000 		lds r19,(isa_rfRxInfo+5)+1
 2000 0a30 00E0      		ldi r16,lo8(0)
 2001 0a32 10E0      		ldi r17,hi8(0)
 2002 0a34 4AE0      		ldi r20,lo8(10)
 2003 0a36 50E0      		ldi r21,hi8(10)
 2004 0a38 60E0      		ldi r22,lo8(0)
 2005 0a3a 70E0      		ldi r23,hi8(0)
 2006 0a3c C501      		movw r24,r10
 2007 0a3e 0E94 0000 		call enQueue
 2008               	.LBB16:
 2009               	.LBB17:
 2011               	.LM258:
 2012 0a42 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 2013 0a46 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 2014 0a4a 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 2015 0a4e 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 2016 0a52 00C0      		rjmp .L142
 2017               	.L140:
 2018               	.LBE17:
 2019               	.LBE16:
 2021               	.LM259:
 2022 0a54 BF92      		push r11
 2023 0a56 AF92      		push r10
 2024 0a58 80E0      		ldi r24,lo8(.LC3)
 2025 0a5a 90E0      		ldi r25,hi8(.LC3)
 2026 0a5c 9F93      		push r25
 2027 0a5e 8F93      		push r24
 2028 0a60 0E94 0000 		call printf
 2029               	.LBB18:
 2030               	.LBB19:
 2032               	.LM260:
 2033 0a64 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 2034 0a68 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 2035 0a6c 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 2036 0a70 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 2037 0a74 0F90      		pop __tmp_reg__
 2038 0a76 0F90      		pop __tmp_reg__
 2039 0a78 0F90      		pop __tmp_reg__
 2040 0a7a 0F90      		pop __tmp_reg__
 2041 0a7c 00C0      		rjmp .L142
 2042               	.L128:
 2043               	.LBE19:
 2044               	.LBE18:
 2046               	.LM261:
 2047 0a7e 8091 0000 		lds r24,rxCount
 2048 0a82 9091 0000 		lds r25,(rxCount)+1
 2049 0a86 0196      		adiw r24,1
 2050 0a88 9093 0000 		sts (rxCount)+1,r25
 2051 0a8c 8093 0000 		sts rxCount,r24
 2053               	.LM262:
 2054 0a90 81E0      		ldi r24,lo8(1)
 2055 0a92 90E0      		ldi r25,hi8(1)
 2056 0a94 0E94 0000 		call nrk_led_toggle
 2058               	.LM263:
 2059 0a98 E091 0000 		lds r30,isa_rfRxInfo+5
 2060 0a9c F091 0000 		lds r31,(isa_rfRxInfo+5)+1
 2061 0aa0 8381      		ldd r24,Z+3
 2062 0aa2 A82E      		mov r10,r24
 2063 0aa4 BB24      		clr r11
 2065               	.LM264:
 2066 0aa6 1081      		ld r17,Z
 2068               	.LM265:
 2069 0aa8 8091 0000 		lds r24,isa_rx_pkt_signal
 2070 0aac 0E94 0000 		call nrk_event_signal
 2072               	.LM266:
 2073 0ab0 1123      		tst r17
 2074 0ab2 04F0      		brlt .+2
 2075 0ab4 00C0      		rjmp .L137
 2076 0ab6 00C0      		rjmp .L130
 2077               	.L142:
 2078               	/* epilogue: frame size=1 */
 2079 0ab8 2196      		adiw r28,1
 2080 0aba 0FB6      		in __tmp_reg__,__SREG__
 2081 0abc F894      		cli
 2082 0abe DEBF      		out __SP_H__,r29
 2083 0ac0 0FBE      		out __SREG__,__tmp_reg__
 2084 0ac2 CDBF      		out __SP_L__,r28
 2085 0ac4 DF91      		pop r29
 2086 0ac6 CF91      		pop r28
 2087 0ac8 1F91      		pop r17
 2088 0aca 0F91      		pop r16
 2089 0acc EF90      		pop r14
 2090 0ace DF90      		pop r13
 2091 0ad0 CF90      		pop r12
 2092 0ad2 BF90      		pop r11
 2093 0ad4 AF90      		pop r10
 2094 0ad6 0895      		ret
 2095               	/* epilogue end (size=16) */
 2096               	/* function _isa_rx size 328 (295) */
 2107               	.Lscope16:
 2109               		.stabd	78,0,0
 2111               	.global	isa_wait_until_rx_or_tx
 2113               	isa_wait_until_rx_or_tx:
 2114               		.stabd	46,0,0
 2116               	.LM267:
 2117               	.LFBB17:
 2118               	/* prologue: frame size=0 */
 2119               	/* prologue end (size=0) */
 2121               	.LM268:
 2122 0ad8 8091 0000 		lds r24,isa_rx_pkt_signal
 2123 0adc 0E94 0000 		call nrk_signal_register
 2125               	.LM269:
 2126 0ae0 8091 0000 		lds r24,isa_tx_done_signal
 2127 0ae4 0E94 0000 		call nrk_signal_register
 2129               	.LM270:
 2130 0ae8 21E0      		ldi r18,lo8(1)
 2131 0aea 30E0      		ldi r19,hi8(1)
 2132 0aec 40E0      		ldi r20,hlo8(1)
 2133 0aee 50E0      		ldi r21,hhi8(1)
 2134 0af0 CA01      		movw r24,r20
 2135 0af2 B901      		movw r22,r18
 2136 0af4 0090 0000 		lds r0,isa_tx_done_signal
 2137 0af8 00C0      		rjmp 2f
 2138 0afa 660F      	1:	lsl r22
 2139 0afc 771F      		rol r23
 2140 0afe 881F      		rol r24
 2141 0b00 991F      		rol r25
 2142 0b02 0A94      	2:	dec r0
 2143 0b04 02F4      		brpl 1b
 2144 0b06 0090 0000 		lds r0,isa_rx_pkt_signal
 2145 0b0a 00C0      		rjmp 2f
 2146 0b0c 220F      	1:	lsl r18
 2147 0b0e 331F      		rol r19
 2148 0b10 441F      		rol r20
 2149 0b12 551F      		rol r21
 2150 0b14 0A94      	2:	dec r0
 2151 0b16 02F4      		brpl 1b
 2152 0b18 622B      		or r22,r18
 2153 0b1a 732B      		or r23,r19
 2154 0b1c 842B      		or r24,r20
 2155 0b1e 952B      		or r25,r21
 2156 0b20 0E94 0000 		call nrk_event_wait
 2158               	.LM271:
 2159 0b24 81E0      		ldi r24,lo8(1)
 2160 0b26 90E0      		ldi r25,hi8(1)
 2161               	/* epilogue: frame size=0 */
 2162 0b28 0895      		ret
 2163               	/* epilogue end (size=1) */
 2164               	/* function isa_wait_until_rx_or_tx size 41 (40) */
 2166               	.Lscope17:
 2168               		.stabd	78,0,0
 2171               	.global	isa_set_channel
 2173               	isa_set_channel:
 2174               		.stabd	46,0,0
 2176               	.LM272:
 2177               	.LFBB18:
 2178               	/* prologue: frame size=0 */
 2179               	/* prologue end (size=0) */
 2181               	.LM273:
 2182 0b2a 8093 0000 		sts isa_param+2,r24
 2184               	.LM274:
 2185 0b2e 0E94 0000 		call rf_set_channel
 2186               	/* epilogue: frame size=0 */
 2187 0b32 0895      		ret
 2188               	/* epilogue end (size=1) */
 2189               	/* function isa_set_channel size 5 (4) */
 2191               	.Lscope18:
 2193               		.stabd	78,0,0
 2195               	.global	isa_nw_task
 2197               	isa_nw_task:
 2198               		.stabd	46,0,0
 2200               	.LM275:
 2201               	.LFBB19:
 2202               	/* prologue: frame size=0 */
 2203 0b34 EF92      		push r14
 2204 0b36 FF92      		push r15
 2205 0b38 0F93      		push r16
 2206 0b3a 1F93      		push r17
 2207 0b3c CF93      		push r28
 2208 0b3e DF93      		push r29
 2209               	/* prologue end (size=6) */
 2211               	.LM276:
 2212 0b40 1092 0000 		sts _isa_ready,__zero_reg__
 2213               	.L154:
 2215               	.LM277:
 2216 0b44 0E94 0000 		call nrk_wait_until_next_period
 2218               	.LM278:
 2219 0b48 8091 0000 		lds r24,_isa_ready
 2220 0b4c 8823      		tst r24
 2221 0b4e 01F0      		breq .L154
 2223               	.LM279:
 2224 0b50 81E0      		ldi r24,lo8(1)
 2225 0b52 8093 0000 		sts _isa_ready,r24
 2227               	.LM280:
 2228 0b56 E090 0000 		lds r14,NRK_DEBUG_1
 2229               	.L180:
 2230 0b5a 00E0      		ldi r16,lo8(0)
 2231 0b5c 10E0      		ldi r17,hi8(0)
 2232               	.L179:
 2233 0b5e 8E2D      		mov r24,r14
 2234 0b60 0E94 0000 		call nrk_gpio_set
 2236               	.LM281:
 2237 0b64 8E2D      		mov r24,r14
 2238 0b66 0E94 0000 		call nrk_gpio_clr
 2240               	.LM282:
 2241 0b6a 0E94 0000 		call _nrk_high_speed_timer_reset
 2243               	.LM283:
 2244 0b6e 0E94 0000 		call _nrk_high_speed_timer_get
 2245 0b72 9093 0000 		sts (slot_start_time)+1,r25
 2246 0b76 8093 0000 		sts slot_start_time,r24
 2248               	.LM284:
 2249 0b7a 8091 0000 		lds r24,global_slot
 2250 0b7e 9091 0000 		lds r25,(global_slot)+1
 2251 0b82 9093 0000 		sts (current_global_slot)+1,r25
 2252 0b86 8093 0000 		sts current_global_slot,r24
 2254               	.LM285:
 2255 0b8a 8091 0000 		lds r24,global_slot
 2256 0b8e 9091 0000 		lds r25,(global_slot)+1
 2257 0b92 8536      		cpi r24,101
 2258 0b94 9105      		cpc r25,__zero_reg__
 2259 0b96 00F0      		brlo .L157
 2261               	.LM286:
 2262 0b98 8091 0000 		lds r24,global_slot
 2263 0b9c 9091 0000 		lds r25,(global_slot)+1
 2264 0ba0 8456      		subi r24,lo8(-(-100))
 2265 0ba2 9040      		sbci r25,hi8(-(-100))
 2266 0ba4 9093 0000 		sts (global_slot)+1,r25
 2267 0ba8 8093 0000 		sts global_slot,r24
 2269               	.LM287:
 2270 0bac 8091 0000 		lds r24,global_cycle
 2271 0bb0 9091 0000 		lds r25,(global_cycle)+1
 2272 0bb4 0196      		adiw r24,1
 2273 0bb6 9093 0000 		sts (global_cycle)+1,r25
 2274 0bba 8093 0000 		sts global_cycle,r24
 2275               	.L157:
 2277               	.LM288:
 2278 0bbe 2091 0000 		lds r18,global_slot
 2279 0bc2 3091 0000 		lds r19,(global_slot)+1
 2281               	.LM289:
 2282 0bc6 8091 0000 		lds r24,_isa_sync_ok
 2283 0bca 8130      		cpi r24,lo8(1)
 2284 0bcc 01F4      		brne .L159
 2286               	.LM290:
 2287 0bce C901      		movw r24,r18
 2288 0bd0 69E1      		ldi r22,lo8(25)
 2289 0bd2 70E0      		ldi r23,hi8(25)
 2290 0bd4 0E94 0000 		call __udivmodhi4
 2291 0bd8 EC01      		movw r28,r24
 2293               	.LM291:
 2294 0bda E091 0000 		lds r30,channelIndex
 2295 0bde E00F      		add r30,r16
 2296 0be0 E093 0000 		sts channelIndex,r30
 2298               	.LM292:
 2299 0be4 FF27      		clr r31
 2300 0be6 EF70      		andi r30,lo8(15)
 2301 0be8 F070      		andi r31,hi8(15)
 2302 0bea E050      		subi r30,lo8(-(slottedPattern))
 2303 0bec F040      		sbci r31,hi8(-(slottedPattern))
 2304 0bee 8081      		ld r24,Z
 2305 0bf0 8093 0000 		sts currentChannel,r24
 2307               	.LM293:
 2308 0bf4 0E94 0000 		call isa_set_channel
 2310               	.LM294:
 2311 0bf8 8C2F      		mov r24,r28
 2312 0bfa 0E94 0000 		call findLink
 2313 0bfe FC01      		movw r30,r24
 2315               	.LM295:
 2316 0c00 892B      		or r24,r25
 2317 0c02 01F0      		breq .L161
 2319               	.LM296:
 2320 0c04 8481      		ldd r24,Z+4
 2321 0c06 8830      		cpi r24,lo8(8)
 2322 0c08 01F4      		brne .L163
 2324               	.LM297:
 2325 0c0a 6C2F      		mov r22,r28
 2326 0c0c CF01      		movw r24,r30
 2327 0c0e 0E94 0000 		call _isa_rx
 2328 0c12 00C0      		rjmp .L161
 2329               	.L163:
 2331               	.LM298:
 2332 0c14 8130      		cpi r24,lo8(1)
 2333 0c16 01F4      		brne .L161
 2335               	.LM299:
 2336 0c18 6C2F      		mov r22,r28
 2337 0c1a 7727      		clr r23
 2338 0c1c CF01      		movw r24,r30
 2339 0c1e 0E94 0000 		call _isa_tx
 2340 0c22 00C0      		rjmp .L161
 2341               	.L159:
 2343               	.LM300:
 2344 0c24 8091 0000 		lds r24,isa_node_mode
 2345 0c28 8230      		cpi r24,lo8(2)
 2346 0c2a 01F0      		breq .L166
 2348               	.LM301:
 2349 0c2c 1092 0000 		sts (DHDRcount)+1,__zero_reg__
 2350 0c30 1092 0000 		sts DHDRcount,__zero_reg__
 2352               	.LM302:
 2353 0c34 0E94 0000 		call _isa_init_sync
 2354 0c38 00C0      		rjmp .L181
 2355               	.L166:
 2357               	.LM303:
 2358 0c3a 81E0      		ldi r24,lo8(1)
 2359               	.L181:
 2360 0c3c 8093 0000 		sts _isa_sync_ok,r24
 2361               	.L161:
 2363               	.LM304:
 2364 0c40 2091 0000 		lds r18,slot_expired
 2365 0c44 3091 0000 		lds r19,(slot_expired)+1
 2366 0c48 8091 0000 		lds r24,EXPIRATION
 2367 0c4c 9091 0000 		lds r25,(EXPIRATION)+1
 2368 0c50 2817      		cp r18,r24
 2369 0c52 3907      		cpc r19,r25
 2370 0c54 00F0      		brlo .L168
 2371 0c56 8091 0000 		lds r24,isa_node_mode
 2372 0c5a 8230      		cpi r24,lo8(2)
 2373 0c5c 01F0      		breq .L168
 2375               	.LM305:
 2376 0c5e 1092 0000 		sts _isa_sync_ok,__zero_reg__
 2378               	.LM306:
 2379 0c62 1092 0000 		sts (slot_expired)+1,__zero_reg__
 2380 0c66 1092 0000 		sts slot_expired,__zero_reg__
 2382               	.LM307:
 2383 0c6a 1092 0000 		sts (global_slot)+1,__zero_reg__
 2384 0c6e 1092 0000 		sts global_slot,__zero_reg__
 2386               	.LM308:
 2387 0c72 8091 0000 		lds r24,resync_times
 2388 0c76 9091 0000 		lds r25,(resync_times)+1
 2389 0c7a 0196      		adiw r24,1
 2390 0c7c 9093 0000 		sts (resync_times)+1,r25
 2391 0c80 8093 0000 		sts resync_times,r24
 2393               	.LM309:
 2394 0c84 8091 0000 		lds r24,isa_id
 2395 0c88 8823      		tst r24
 2396 0c8a 01F0      		breq .L171
 2398               	.LM310:
 2399 0c8c E091 0000 		lds r30,isa_clk_src_id
 2400 0c90 E093 0000 		sts channelIndex,r30
 2402               	.LM311:
 2403 0c94 FF27      		clr r31
 2404 0c96 E050      		subi r30,lo8(-(slottedPattern))
 2405 0c98 F040      		sbci r31,hi8(-(slottedPattern))
 2406 0c9a 8081      		ld r24,Z
 2407 0c9c 00C0      		rjmp .L182
 2408               	.L171:
 2410               	.LM312:
 2411 0c9e 1092 0000 		sts channelIndex,__zero_reg__
 2413               	.LM313:
 2414 0ca2 8091 0000 		lds r24,slottedPattern
 2415               	.L182:
 2416 0ca6 8093 0000 		sts currentChannel,r24
 2418               	.LM314:
 2419 0caa 8091 0000 		lds r24,currentChannel
 2420 0cae 0E94 0000 		call isa_set_channel
 2421 0cb2 00C0      		rjmp .L180
 2422               	.L168:
 2424               	.LM315:
 2425 0cb4 8091 0000 		lds r24,global_slot
 2426 0cb8 9091 0000 		lds r25,(global_slot)+1
 2427 0cbc 0E94 0000 		call isa_get_slots_until_next_wakeup
 2428 0cc0 8C01      		movw r16,r24
 2430               	.LM316:
 2431 0cc2 8091 0000 		lds r24,global_slot
 2432 0cc6 9091 0000 		lds r25,(global_slot)+1
 2433 0cca 800F      		add r24,r16
 2434 0ccc 911F      		adc r25,r17
 2435 0cce 9093 0000 		sts (global_slot)+1,r25
 2436 0cd2 8093 0000 		sts global_slot,r24
 2438               	.LM317:
 2439 0cd6 80E0      		ldi r24,lo8(0)
 2440 0cd8 90E0      		ldi r25,hi8(0)
 2441 0cda 0E94 0000 		call nrk_led_clr
 2443               	.LM318:
 2444 0cde 1092 0000 		sts (offsetY)+1,__zero_reg__
 2445 0ce2 1092 0000 		sts offsetY,__zero_reg__
 2447               	.LM319:
 2448 0ce6 C801      		movw r24,r16
 2449 0ce8 0E94 0000 		call nrk_wait_until_next_n_periods
 2451               	.LM320:
 2452 0cec 80E0      		ldi r24,lo8(0)
 2453 0cee 90E0      		ldi r25,hi8(0)
 2454 0cf0 0E94 0000 		call nrk_led_set
 2455 0cf4 00C0      		rjmp .L179
 2456               	/* epilogue: frame size=0 */
 2457               	/* epilogue: noreturn */
 2458               	/* epilogue end (size=0) */
 2459               	/* function isa_nw_task size 225 (219) */
 2466               	.Lscope19:
 2468               		.stabd	78,0,0
 2473               	.global	isa_init
 2475               	isa_init:
 2476               		.stabd	46,0,0
 2478               	.LM321:
 2479               	.LFBB20:
 2480               	/* prologue: frame size=0 */
 2481 0cf6 FF92      		push r15
 2482 0cf8 0F93      		push r16
 2483 0cfa 1F93      		push r17
 2484               	/* prologue end (size=3) */
 2485 0cfc F82E      		mov r15,r24
 2486 0cfe 162F      		mov r17,r22
 2487 0d00 042F      		mov r16,r20
 2489               	.LM322:
 2490 0d02 0E94 0000 		call nrk_signal_create
 2491 0d06 8093 0000 		sts isa_rx_pkt_signal,r24
 2493               	.LM323:
 2494 0d0a 8F3F      		cpi r24,lo8(-1)
 2495 0d0c 01F4      		brne .L184
 2497               	.LM324:
 2498 0d0e 80E0      		ldi r24,lo8(__c.2740)
 2499 0d10 90E0      		ldi r25,hi8(__c.2740)
 2500 0d12 00C0      		rjmp .L194
 2501               	.L184:
 2503               	.LM325:
 2504 0d14 0E94 0000 		call nrk_signal_create
 2505 0d18 8093 0000 		sts isa_tx_done_signal,r24
 2507               	.LM326:
 2508 0d1c 8F3F      		cpi r24,lo8(-1)
 2509 0d1e 01F4      		brne .L187
 2511               	.LM327:
 2512 0d20 80E0      		ldi r24,lo8(__c.2742)
 2513 0d22 90E0      		ldi r25,hi8(__c.2742)
 2514               	.L194:
 2515 0d24 0E94 0000 		call nrk_kprintf
 2517               	.LM328:
 2518 0d28 E091 0000 		lds r30,nrk_cur_task_TCB
 2519 0d2c F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 2520 0d30 6085      		ldd r22,Z+8
 2521 0d32 8EE0      		ldi r24,lo8(14)
 2522 0d34 0E94 0000 		call nrk_kernel_error_add
 2523 0d38 8FEF      		ldi r24,lo8(255)
 2524 0d3a 90E0      		ldi r25,hi8(255)
 2525 0d3c 00C0      		rjmp .L186
 2526               	.L187:
 2528               	.LM329:
 2529 0d3e 1092 0000 		sts (isa_rfRxInfo+5)+1,__zero_reg__
 2530 0d42 1092 0000 		sts isa_rfRxInfo+5,__zero_reg__
 2532               	.LM330:
 2533 0d46 1092 0000 		sts isa_rfRxInfo+4,__zero_reg__
 2535               	.LM331:
 2536 0d4a 0E94 0000 		call _nrk_high_speed_timer_start
 2538               	.LM332:
 2539 0d4e 1092 0000 		sts (global_cycle)+1,__zero_reg__
 2540 0d52 1092 0000 		sts global_cycle,__zero_reg__
 2542               	.LM333:
 2543 0d56 84E6      		ldi r24,lo8(100)
 2544 0d58 90E0      		ldi r25,hi8(100)
 2545 0d5a 9093 0000 		sts (global_slot)+1,r25
 2546 0d5e 8093 0000 		sts global_slot,r24
 2548               	.LM334:
 2549 0d62 1092 0000 		sts _isa_sync_ok,__zero_reg__
 2551               	.LM335:
 2552 0d66 1092 0000 		sts _isa_join_ok,__zero_reg__
 2554               	.LM336:
 2555 0d6a 1092 0000 		sts (slot_expired)+1,__zero_reg__
 2556 0d6e 1092 0000 		sts slot_expired,__zero_reg__
 2558               	.LM337:
 2559 0d72 F092 0000 		sts isa_node_mode,r15
 2561               	.LM338:
 2562 0d76 1093 0000 		sts isa_id,r17
 2564               	.LM339:
 2565 0d7a 812F      		mov r24,r17
 2566 0d7c 9927      		clr r25
 2567 0d7e 9093 0000 		sts (dmo)+1,r25
 2568 0d82 8093 0000 		sts dmo,r24
 2570               	.LM340:
 2571 0d86 0093 0000 		sts isa_clk_src_id,r16
 2573               	.LM341:
 2574 0d8a 1092 0000 		sts isa_rx_data_ready,__zero_reg__
 2575 0d8e 1092 0000 		sts (isa_rx_data_ready)+1,__zero_reg__
 2576 0d92 1092 0000 		sts (isa_rx_data_ready)+2,__zero_reg__
 2577 0d96 1092 0000 		sts (isa_rx_data_ready)+3,__zero_reg__
 2579               	.LM342:
 2580 0d9a 84E6      		ldi r24,lo8(100)
 2581 0d9c 8093 0000 		sts isa_param+8,r24
 2583               	.LM343:
 2584 0da0 80E4      		ldi r24,lo8(8000)
 2585 0da2 9FE1      		ldi r25,hi8(8000)
 2586 0da4 9093 0000 		sts (isa_param+6)+1,r25
 2587 0da8 8093 0000 		sts isa_param+6,r24
 2589               	.LM344:
 2590 0dac 80EA      		ldi r24,lo8(4000)
 2591 0dae 9FE0      		ldi r25,hi8(4000)
 2592 0db0 9093 0000 		sts (isa_param+4)+1,r25
 2593 0db4 8093 0000 		sts isa_param+4,r24
 2595               	.LM345:
 2596 0db8 8FE0      		ldi r24,lo8(15)
 2597 0dba 8093 0000 		sts isa_param+2,r24
 2599               	.LM346:
 2600 0dbe 81E8      		ldi r24,lo8(6529)
 2601 0dc0 99E1      		ldi r25,hi8(6529)
 2602 0dc2 9093 0000 		sts (isa_param)+1,r25
 2603 0dc6 8093 0000 		sts isa_param,r24
 2605               	.LM347:
 2606 0dca 21E8      		ldi r18,lo8(6529)
 2607 0dcc 39E1      		ldi r19,hi8(6529)
 2608 0dce 41E2      		ldi r20,lo8(9249)
 2609 0dd0 54E2      		ldi r21,hi8(9249)
 2610 0dd2 6FE0      		ldi r22,lo8(15)
 2611 0dd4 80E0      		ldi r24,lo8(isa_rfRxInfo)
 2612 0dd6 90E0      		ldi r25,hi8(isa_rfRxInfo)
 2613 0dd8 0E94 0000 		call rf_init
 2615               	.LM348:
 2616 0ddc 81E0      		ldi r24,lo8(1)
 2617 0dde 8093 0000 		sts AFTER_FIRST_SYNC,r24
 2619               	.LM349:
 2620 0de2 1092 0000 		sts slowIndex,__zero_reg__
 2622               	.LM350:
 2623 0de6 1123      		tst r17
 2624 0de8 01F0      		breq .L189
 2626               	.LM351:
 2627 0dea 0093 0000 		sts channelIndex,r16
 2629               	.LM352:
 2630 0dee E02F      		mov r30,r16
 2631 0df0 FF27      		clr r31
 2632 0df2 E050      		subi r30,lo8(-(slottedPattern))
 2633 0df4 F040      		sbci r31,hi8(-(slottedPattern))
 2634 0df6 8081      		ld r24,Z
 2635 0df8 00C0      		rjmp .L193
 2636               	.L189:
 2638               	.LM353:
 2639 0dfa 1092 0000 		sts channelIndex,__zero_reg__
 2641               	.LM354:
 2642 0dfe 8091 0000 		lds r24,slottedPattern
 2643               	.L193:
 2644 0e02 8093 0000 		sts currentChannel,r24
 2646               	.LM355:
 2647 0e06 8091 0000 		lds r24,currentChannel
 2648 0e0a 0E94 0000 		call isa_set_channel
 2650               	.LM356:
 2651 0e0e 1092 0000 		sts (resync_times)+1,__zero_reg__
 2652 0e12 1092 0000 		sts resync_times,__zero_reg__
 2654               	.LM357:
 2655 0e16 0E94 0000 		call dlmoInit
 2656 0e1a 81E0      		ldi r24,lo8(1)
 2657 0e1c 90E0      		ldi r25,hi8(1)
 2658               	.L186:
 2659               	/* epilogue: frame size=0 */
 2660 0e1e 1F91      		pop r17
 2661 0e20 0F91      		pop r16
 2662 0e22 FF90      		pop r15
 2663 0e24 0895      		ret
 2664               	/* epilogue end (size=4) */
 2665               	/* function isa_init size 152 (145) */
 2667               	.Lscope20:
 2669               		.stabd	78,0,0
 2671               	.global	isa_wait_until_rx_pkt
 2673               	isa_wait_until_rx_pkt:
 2674               		.stabd	46,0,0
 2676               	.LM358:
 2677               	.LFBB21:
 2678               	/* prologue: frame size=0 */
 2679               	/* prologue end (size=0) */
 2681               	.LM359:
 2682 0e26 8091 0000 		lds r24,isa_rx_pkt_signal
 2683 0e2a 0E94 0000 		call nrk_signal_register
 2685               	.LM360:
 2686 0e2e 8091 0000 		lds r24,isa_rx_data_ready
 2687 0e32 8823      		tst r24
 2688 0e34 01F4      		brne .L196
 2690               	.LM361:
 2691 0e36 61E0      		ldi r22,lo8(1)
 2692 0e38 70E0      		ldi r23,hi8(1)
 2693 0e3a 80E0      		ldi r24,hlo8(1)
 2694 0e3c 90E0      		ldi r25,hhi8(1)
 2695 0e3e 0090 0000 		lds r0,isa_rx_pkt_signal
 2696 0e42 00C0      		rjmp 2f
 2697 0e44 660F      	1:	lsl r22
 2698 0e46 771F      		rol r23
 2699 0e48 881F      		rol r24
 2700 0e4a 991F      		rol r25
 2701 0e4c 0A94      	2:	dec r0
 2702 0e4e 02F4      		brpl 1b
 2703 0e50 0E94 0000 		call nrk_event_wait
 2704               	.L196:
 2706               	.LM362:
 2707 0e54 81E0      		ldi r24,lo8(1)
 2708 0e56 90E0      		ldi r25,hi8(1)
 2709               	/* epilogue: frame size=0 */
 2710 0e58 0895      		ret
 2711               	/* epilogue end (size=1) */
 2712               	/* function isa_wait_until_rx_pkt size 26 (25) */
 2714               	.Lscope21:
 2716               		.stabd	78,0,0
 2720               	.global	isa_rx_pkt_get
 2722               	isa_rx_pkt_get:
 2723               		.stabd	46,0,0
 2725               	.LM363:
 2726               	.LFBB22:
 2727               	/* prologue: frame size=0 */
 2728               	/* prologue end (size=0) */
 2729 0e5a FC01      		movw r30,r24
 2730 0e5c DB01      		movw r26,r22
 2732               	.LM364:
 2733 0e5e 8091 0000 		lds r24,isa_rx_data_ready
 2734 0e62 8823      		tst r24
 2735 0e64 01F4      		brne .L200
 2737               	.LM365:
 2738 0e66 1082      		st Z,__zero_reg__
 2740               	.LM366:
 2741 0e68 1C92      		st X,__zero_reg__
 2742 0e6a 80E0      		ldi r24,lo8(0)
 2743 0e6c 90E0      		ldi r25,hi8(0)
 2744 0e6e 0895      		ret
 2745               	.L200:
 2747               	.LM367:
 2748 0e70 8091 0000 		lds r24,isa_rfRxInfo+3
 2749 0e74 8083      		st Z,r24
 2751               	.LM368:
 2752 0e76 8091 0000 		lds r24,isa_rfRxInfo+8
 2753 0e7a 8C93      		st X,r24
 2755               	.LM369:
 2756 0e7c 8091 0000 		lds r24,isa_rfRxInfo+5
 2757 0e80 9091 0000 		lds r25,(isa_rfRxInfo+5)+1
 2759               	.LM370:
 2760 0e84 0895      		ret
 2761               	/* epilogue: frame size=0 */
 2762               	/* epilogue: noreturn */
 2763               	/* epilogue end (size=0) */
 2764               	/* function isa_rx_pkt_get size 22 (22) */
 2766               	.Lscope22:
 2768               		.stabd	78,0,0
 2769               	.global	EXPIRATION
 2770               		.data
 2773               	EXPIRATION:
 2774 0093 C800      		.word	200
 2775               	.global	tmp_count
 2776               	.global	tmp_count
 2777               		.section .bss
 2780               	tmp_count:
 2781 0000 0000      		.skip 2,0
 2782               	.global	DHDRcount
 2783               	.global	DHDRcount
 2786               	DHDRcount:
 2787 0002 0000      		.skip 2,0
 2788               	.global	txCount
 2789               	.global	txCount
 2792               	txCount:
 2793 0004 0000      		.skip 2,0
 2794               	.global	rxCount
 2795               	.global	rxCount
 2798               	rxCount:
 2799 0006 0000      		.skip 2,0
 2800               	.global	packetsLost
 2801               	.global	packetsLost
 2804               	packetsLost:
 2805 0008 0000      		.skip 2,0
 2806               		.section	.progmem.data,"a",@progbits
 2809               	__c.2742:
 2810 0000 4953 4120 		.string	"ISA ERROR: creating tx signal failed\r\n"
 2810      4552 524F 
 2810      523A 2063 
 2810      7265 6174 
 2810      696E 6720 
 2813               	__c.2740:
 2814 0027 4953 4120 		.string	"ISA ERROR: creating rx signal failed\r\n"
 2814      4552 524F 
 2814      523A 2063 
 2814      7265 6174 
 2814      696E 6720 
 2815               		.comm _nrk_signal_list,4,1
 2816               		.comm nrk_idle_task_stk,128,1
 2817               		.comm nrk_kernel_stk_ptr,2,1
 2818               		.comm _nrk_prev_timer_val,1,1
 2819               		.comm _nrk_time_trigger,1,1
 2820               		.comm app_timer0_callback,2,1
 2821               		.comm app_timer0_prescale,1,1
 2822               		.comm error_task,1,1
 2823               		.comm error_num,1,1
 2824               		.comm isa_id,1,1
 2825               		.comm isa_clk_src_id,1,1
 2826               		.comm tx_slot_from_join,4,1
 2827               		.comm isa_rx_data_ready,4,1
 2828               		.comm child_list,4,1
 2829               		.comm DHDR,1,1
 2830               		.comm last_slot,2,1
 2831               		.comm resync_times,2,1
 2832               		.comm isa_param,9,1
 2833               		.comm isa_node_mode,1,1
 2834               		.comm isa_task,35,1
 2835               		.comm isa_task_stack,128,1
 2836               		.comm isa_rfRxInfo,9,1
 2837               		.comm isa_ack_tx,7,1
 2838               		.comm isa_ack_buf,4,1
 2839               		.comm isa_rfTxInfo,7,1
 2840               		.comm _isa_ready,1,1
 2841               		.comm _isa_join_ok,1,1
 2842               		.comm dmo,2,1
 2843               		.comm global_slot,2,1
 2844               		.comm current_global_slot,2,1
 2845               		.comm global_cycle,2,1
 2846               		.comm last_sync_slot,2,1
 2847               		.comm slottedPattern,16,1
 2848               		.comm slowPattern,3,1
 2849               		.comm currentChannel,1,1
 2850               		.comm channelIndex,1,1
 2851               		.comm slowIndex,1,1
 2852               		.comm slot_start_time,2,1
 2853               		.comm tx_start_time,2,1
 2854               		.comm rx_start_time,2,1
 2855               		.comm offsetY,2,1
 2856               		.comm offsetX,2,1
 2857               		.comm _isa_sync_ok,1,1
 2858               		.comm AFTER_FIRST_SYNC,1,1
 2859               		.comm slot_expired,2,1
 2860               		.comm previous_tx_slot,1,1
 2861               		.comm isa_tx_done_signal,1,1
 2862               		.comm isa_rx_pkt_signal,1,1
 2863               		.comm DAUX,29,1
 2864               		.comm DHR,1,1
 2865               		.comm tmp_curSec,1,1
 2866               		.comm tmp_offsetSec,1,1
 2867               		.comm tmp_offsetNanoSec,2,1
 2929               		.text
 2931               	.Letext0:
 2932               	/* File "../../../src/net/isa/isa.c": code 1862 = 0x0746 (1724), prologues  67, epilogues  71 */
DEFINED SYMBOLS
                            *ABS*:00000000 isa.c
     /tmp/cceX7xEv.s:2      *ABS*:0000003f __SREG__
     /tmp/cceX7xEv.s:3      *ABS*:0000003e __SP_H__
     /tmp/cceX7xEv.s:4      *ABS*:0000003d __SP_L__
     /tmp/cceX7xEv.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cceX7xEv.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cceX7xEv.s:164    .text:00000000 config_child_list
                            *COM*:00000004 child_list
     /tmp/cceX7xEv.s:207    .text:00000040 isa_get_channel
                            *COM*:00000009 isa_param
     /tmp/cceX7xEv.s:230    .text:00000048 isa_set_channel_pattern
                            *COM*:00000010 slottedPattern
                            *COM*:00000003 slowPattern
     /tmp/cceX7xEv.s:338    .text:000000c8 isa_ready
                            *COM*:00000001 _isa_ready
     /tmp/cceX7xEv.s:374    .text:000000dc isa_rx_pkt_set_buffer
                            *COM*:00000009 isa_rfRxInfo
     /tmp/cceX7xEv.s:418    .text:000000fc isa_start
     /tmp/cceX7xEv.s:441    .text:00000104 configDHDR
     /tmp/cceX7xEv.s:487    .text:00000126 configDHR
     /tmp/cceX7xEv.s:535    .text:00000138 configAdvDAUX
                            *COM*:0000001d DAUX
     /tmp/cceX7xEv.s:619    .text:0000019c isa_rx_pkt_check
                            *COM*:00000004 isa_rx_data_ready
     /tmp/cceX7xEv.s:643    .text:000001a8 isa_rx_pkt_release
     /tmp/cceX7xEv.s:667    .text:000001ba isa_join_ready
                            *COM*:00000001 _isa_join_ok
     /tmp/cceX7xEv.s:701    .text:000001ce isa_task_config
     /tmp/cceX7xEv.s:2197   .text:00000b34 isa_nw_task
                            *COM*:00000023 isa_task
                            *COM*:00000080 isa_task_stack
     /tmp/cceX7xEv.s:797    .text:00000278 _isa_init_sync
                            *COM*:00000001 _isa_sync_ok
                            *COM*:00000001 isa_clk_src_id
                            *COM*:00000002 global_slot
     /tmp/cceX7xEv.s:1042   .text:000003de _isa_tx
                            *COM*:00000007 isa_rfTxInfo
                            *COM*:00000001 previous_tx_slot
                            *COM*:00000001 isa_id
                            *COM*:00000002 slot_start_time
                            *COM*:00000002 tx_start_time
     /tmp/cceX7xEv.s:2792   .bss:00000004 txCount
                            *COM*:00000002 offsetY
                            *COM*:00000001 isa_tx_done_signal
                            *COM*:00000002 slot_expired
     /tmp/cceX7xEv.s:2804   .bss:00000008 packetsLost
                            *COM*:00000001 tmp_curSec
     /tmp/cceX7xEv.s:2786   .bss:00000002 DHDRcount
     /tmp/cceX7xEv.s:2798   .bss:00000006 rxCount
                            *COM*:00000001 DHR
                            *COM*:00000002 offsetX
                            *COM*:00000001 tmp_offsetSec
                            *COM*:00000002 tmp_offsetNanoSec
     /tmp/cceX7xEv.s:1713   .text:0000084a _isa_rx
                            *COM*:00000002 rx_start_time
                            *COM*:00000004 isa_ack_buf
                            *COM*:00000007 isa_ack_tx
                            *COM*:00000002 dmo
                            *COM*:00000001 isa_rx_pkt_signal
     /tmp/cceX7xEv.s:2113   .text:00000ad8 isa_wait_until_rx_or_tx
     /tmp/cceX7xEv.s:2173   .text:00000b2a isa_set_channel
                            *COM*:00000002 current_global_slot
                            *COM*:00000002 global_cycle
                            *COM*:00000001 channelIndex
                            *COM*:00000001 currentChannel
                            *COM*:00000001 isa_node_mode
     /tmp/cceX7xEv.s:2773   .data:00000093 EXPIRATION
                            *COM*:00000002 resync_times
     /tmp/cceX7xEv.s:2475   .text:00000cf6 isa_init
     /tmp/cceX7xEv.s:2813   .progmem.data:00000027 __c.2740
     /tmp/cceX7xEv.s:2809   .progmem.data:00000000 __c.2742
                            *COM*:00000001 AFTER_FIRST_SYNC
                            *COM*:00000001 slowIndex
     /tmp/cceX7xEv.s:2673   .text:00000e26 isa_wait_until_rx_pkt
     /tmp/cceX7xEv.s:2722   .text:00000e5a isa_rx_pkt_get
     /tmp/cceX7xEv.s:2780   .bss:00000000 tmp_count
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000004 tx_slot_from_join
                            *COM*:00000001 DHDR
                            *COM*:00000002 last_slot
                            *COM*:00000002 last_sync_slot

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
nrk_task_set_stk
nrk_activate_task
rf_set_rx
rf_polling_rx_on
_nrk_set_next_wakeup
_nrk_os_timer_set
_nrk_os_timer_get
rf_rx_check_sfd
_nrk_high_speed_timer_reset
rf_polling_rx_packet
rf_rx_off
nrk_led_toggle
__iob
fputc
_nrk_os_timer_stop
nrk_high_speed_timer_wait
_nrk_os_timer_start
nrk_cur_task_TCB
getHighPriorityEntry
printf
NRK_DEBUG_1
nrk_gpio_set
rf_tx_tdma_packet
nrk_gpio_clr
nrk_event_signal
NRK_DEBUG_2
__divmodhi4
nrk_spin_wait_us
isaFreePacket
_nrk_high_speed_timer_get
dd_data_indication
isTransmitLinkPresent
enQueue
nrk_signal_register
nrk_event_wait
rf_set_channel
nrk_wait_until_next_period
__udivmodhi4
findLink
isa_get_slots_until_next_wakeup
nrk_led_clr
nrk_wait_until_next_n_periods
nrk_led_set
nrk_signal_create
nrk_kprintf
nrk_kernel_error_add
_nrk_high_speed_timer_start
rf_init
dlmoInit
