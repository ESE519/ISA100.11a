
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000009c8  00800200  0000951c  000095b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000951c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001488  00800bc8  00800bc8  00009f78  2**0
                  ALLOC
  3 .stab         000156f0  00000000  00000000  00009f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000c057  00000000  00000000  0001f668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 02 	jmp	0x492	; 0x492 <__ctors_end>
       4:	0c 94 c2 43 	jmp	0x8784	; 0x8784 <__vector_1>
       8:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
       c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      10:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      14:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      18:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      1c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      20:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      24:	0c 94 f4 43 	jmp	0x87e8	; 0x87e8 <__vector_9>
      28:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      2c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      30:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      34:	0c 94 26 42 	jmp	0x844c	; 0x844c <__vector_13>
      38:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      3c:	0c 94 26 42 	jmp	0x844c	; 0x844c <__vector_13>
      40:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      44:	0c 94 59 42 	jmp	0x84b2	; 0x84b2 <__vector_17>
      48:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      4c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      50:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      54:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      58:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      5c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      60:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      64:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      68:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      6c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      70:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      74:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      78:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      7c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      80:	0c 94 63 42 	jmp	0x84c6	; 0x84c6 <__vector_32>
      84:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      88:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      8c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      90:	0c 94 d1 2f 	jmp	0x5fa2	; 0x5fa2 <__vector_36>
      94:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      98:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      9c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      a0:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      a4:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      a8:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      ac:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      b0:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      b4:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      b8:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      bc:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      c0:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      c4:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      c8:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__bad_interrupt>
      cc:	ce 32       	cpi	r28, 0x2E	; 46
      ce:	d4 32       	cpi	r29, 0x24	; 36
      d0:	d7 32       	cpi	r29, 0x27	; 39
      d2:	da 32       	cpi	r29, 0x2A	; 42
      d4:	dd 32       	cpi	r29, 0x2D	; 45
      d6:	e0 32       	cpi	r30, 0x20	; 32
      d8:	e6 32       	cpi	r30, 0x26	; 38
      da:	e3 32       	cpi	r30, 0x23	; 35
      dc:	e9 32       	cpi	r30, 0x29	; 41
      de:	ec 32       	cpi	r30, 0x2C	; 44
      e0:	ef 32       	cpi	r30, 0x2F	; 47
      e2:	f5 32       	cpi	r31, 0x25	; 37
      e4:	f8 32       	cpi	r31, 0x28	; 40
      e6:	fb 32       	cpi	r31, 0x2B	; 43
      e8:	fe 32       	cpi	r31, 0x2E	; 46
      ea:	f2 32       	cpi	r31, 0x22	; 34
      ec:	cb 32       	cpi	r28, 0x2B	; 43
      ee:	d1 32       	cpi	r29, 0x21	; 33

000000f0 <__c.2441>:
      f0:	43 72 65 61 74 65 20 44 6f 6e 65 0d 0a 00           Create Done...

000000fe <__c.2406>:
      fe:	52 58 20 73 69 67 6e 61 6c 20 65 72 72 6f 72 00     RX signal error.

0000010e <__c.2403>:
     10e:	47 65 74 20 53 69 67 6e 61 6c 20 45 52 52 4f 52     Get Signal ERROR
     11e:	21 0d 0a 00                                         !...

00000122 <__c.2401>:
     122:	45 52 52 4f 52 3a 20 63 72 65 61 74 69 6e 67 20     ERROR: creating 
     132:	70 61 63 6b 65 74 20 72 65 63 6f 72 64 20 73 69     packet record si
     142:	67 6e 61 6c 20 66 61 69 6c 65 64 0d 0a 00           gnal failed...

00000150 <__c.2365>:
     150:	53 74 61 72 74 69 6e 67 20 75 70 2e 2e 2e 0d 0a     Starting up.....
	...

00000161 <__c.2077>:
     161:	53 4c 49 50 20 52 58 20 65 72 72 6f 72 3a 20 6e     SLIP RX error: n
     171:	72 6b 5f 73 69 67 6e 61 6c 5f 72 65 67 69 73 74     rk_signal_regist
     181:	65 72 0d 0a 00                                      er...

00000186 <__c.2075>:
     186:	53 4c 49 50 20 52 58 20 65 72 72 6f 72 3a 20 47     SLIP RX error: G
     196:	65 74 20 53 69 67 6e 61 6c 0d 0a 00                 et Signal...

000001a2 <__c.2041>:
     1a2:	53 4c 49 50 20 54 58 20 45 52 52 4f 52 3a 20 20     SLIP TX ERROR:  
     1b2:	52 65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70     Release of semap
     1c2:	68 6f 72 65 20 66 61 69 6c 65 64 0d 0a 00           hore failed...

000001d0 <__c.2036>:
     1d0:	53 4c 49 50 20 54 58 20 45 52 52 4f 52 3a 20 20     SLIP TX ERROR:  
     1e0:	41 63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68     Access to semaph
     1f0:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

000001fd <__c.2567>:
     1fd:	49 53 41 20 45 52 52 4f 52 3a 20 63 72 65 61 74     ISA ERROR: creat
     20d:	69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66 61     ing tx signal fa
     21d:	69 6c 65 64 0d 0a 00                                iled...

00000224 <__c.2565>:
     224:	49 53 41 20 45 52 52 4f 52 3a 20 63 72 65 61 74     ISA ERROR: creat
     234:	69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66 61     ing rx signal fa
     244:	69 6c 65 64 0d 0a 00                                iled...

0000024b <__c.2464>:
     24b:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 52     CC2420 ERROR:  R
     25b:	65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70 68     elease of semaph
     26b:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

00000278 <__c.2402>:
     278:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 41     CC2420 ERROR:  A
     288:	63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68 6f     ccess to semapho
     298:	72 65 20 66 61 69 6c 65 64 0d 0a 00                 re failed...

000002a4 <__c.2112>:
     2a4:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000002ab <__c.2109>:
     2ab:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2bb:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000002c6 <__c.2106>:
     2c6:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2d6:	20 53 69 67 6e 61 6c 00                              Signal.

000002de <__c.2103>:
     2de:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     2ee:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

000002fe <__c.2100>:
     2fe:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     30e:	72 6f 72 00                                         ror.

00000312 <__c.2097>:
     312:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000323 <__c.2094>:
     323:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000332 <__c.2091>:
     332:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     342:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

0000034d <__c.2088>:
     34d:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000359 <__c.2085>:
     359:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     369:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     379:	20 6f 6b 3f 00                                       ok?.

0000037e <__c.2082>:
     37e:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     38e:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

0000039c <__c.2079>:
     39c:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     3ac:	72 74 00                                            rt.

000003af <__c.2076>:
     3af:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     3bf:	49 44 00                                            ID.

000003c2 <__c.2073>:
     3c2:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     3d2:	20 57 61 6b 65 75 70 00                              Wakeup.

000003da <__c.2070>:
     3da:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     3ea:	6c 61 74 65 64 00                                   lated.

000003f0 <__c.2067>:
     3f0:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     400:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000040b <__c.2064>:
     40b:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     41b:	69 6e 74 65 72 00                                   inter.

00000421 <__c.2061>:
     421:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     431:	6c 6f 77 00                                         low.

00000435 <__c.2057>:
     435:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     445:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     455:	6e 6f 75 67 68 21 00                                nough!.

0000045c <__c.2054>:
     45c:	29 3a 20 00                                         ): .

00000460 <__c.2052>:
     460:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

0000046c <__c.1984>:
     46c:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

0000047b <__c.1839>:
     47b:	45 46 47 65 66 67 00                                EFGefg.

00000482 <__c.1833>:
     482:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000492 <__ctors_end>:
     492:	11 24       	eor	r1, r1
     494:	1f be       	out	0x3f, r1	; 63
     496:	cf ef       	ldi	r28, 0xFF	; 255
     498:	d1 e2       	ldi	r29, 0x21	; 33
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	cd bf       	out	0x3d, r28	; 61

0000049e <__do_copy_data>:
     49e:	1b e0       	ldi	r17, 0x0B	; 11
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b2 e0       	ldi	r27, 0x02	; 2
     4a4:	ec e1       	ldi	r30, 0x1C	; 28
     4a6:	f5 e9       	ldi	r31, 0x95	; 149
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a8 3c       	cpi	r26, 0xC8	; 200
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	10 e2       	ldi	r17, 0x20	; 32
     4ba:	a8 ec       	ldi	r26, 0xC8	; 200
     4bc:	bb e0       	ldi	r27, 0x0B	; 11
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a0 35       	cpi	r26, 0x50	; 80
     4c4:	b1 07       	cpc	r27, r17
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 07 04 	call	0x80e	; 0x80e <main>
     4cc:	0c 94 8c 4a 	jmp	0x9518	; 0x9518 <_exit>

000004d0 <__bad_interrupt>:
     4d0:	0c 94 95 42 	jmp	0x852a	; 0x852a <__vector_default>

000004d4 <pkt_record_check>:
extern uint64_t isa_slot;

int8_t pkt_record_check()
{
  return sendFlag;
}
     4d4:	80 91 02 0d 	lds	r24, 0x0D02
     4d8:	08 95       	ret

000004da <nrk_create_taskset>:

*/
void
nrk_create_taskset()
{
  TaskOne.task = Task1;
     4da:	8e ec       	ldi	r24, 0xCE	; 206
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	90 93 5e 0c 	sts	0x0C5E, r25
     4e2:	80 93 5d 0c 	sts	0x0C5D, r24
  TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE-1];
     4e6:	82 e5       	ldi	r24, 0x52	; 82
     4e8:	9e e0       	ldi	r25, 0x0E	; 14
     4ea:	90 93 5a 0c 	sts	0x0C5A, r25
     4ee:	80 93 59 0c 	sts	0x0C59, r24
  TaskOne.Pbos = (void *) &Stack1[0];
     4f2:	83 ed       	ldi	r24, 0xD3	; 211
     4f4:	9d e0       	ldi	r25, 0x0D	; 13
     4f6:	90 93 5c 0c 	sts	0x0C5C, r25
     4fa:	80 93 5b 0c 	sts	0x0C5B, r24
  TaskOne.prio = 2;
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	80 93 60 0c 	sts	0x0C60, r24
  TaskOne.FirstActivation = TRUE;
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	80 93 5f 0c 	sts	0x0C5F, r24
  TaskOne.Type = BASIC_TASK;
     50a:	80 93 61 0c 	sts	0x0C61, r24
  TaskOne.SchType = PREEMPTIVE;
     50e:	80 93 62 0c 	sts	0x0C62, r24
  TaskOne.period.secs = 10;
     512:	8a e0       	ldi	r24, 0x0A	; 10
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	a0 e0       	ldi	r26, 0x00	; 0
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	80 93 63 0c 	sts	0x0C63, r24
     51e:	90 93 64 0c 	sts	0x0C64, r25
     522:	a0 93 65 0c 	sts	0x0C65, r26
     526:	b0 93 66 0c 	sts	0x0C66, r27
  TaskOne.period.nano_secs = 0*NANOS_PER_MS;
     52a:	10 92 67 0c 	sts	0x0C67, r1
     52e:	10 92 68 0c 	sts	0x0C68, r1
     532:	10 92 69 0c 	sts	0x0C69, r1
     536:	10 92 6a 0c 	sts	0x0C6A, r1
  TaskOne.cpu_reserve.secs = 0;
     53a:	10 92 6b 0c 	sts	0x0C6B, r1
     53e:	10 92 6c 0c 	sts	0x0C6C, r1
     542:	10 92 6d 0c 	sts	0x0C6D, r1
     546:	10 92 6e 0c 	sts	0x0C6E, r1
  TaskOne.cpu_reserve.nano_secs = 500*NANOS_PER_MS;
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	95 e6       	ldi	r25, 0x65	; 101
     54e:	ad ec       	ldi	r26, 0xCD	; 205
     550:	bd e1       	ldi	r27, 0x1D	; 29
     552:	80 93 6f 0c 	sts	0x0C6F, r24
     556:	90 93 70 0c 	sts	0x0C70, r25
     55a:	a0 93 71 0c 	sts	0x0C71, r26
     55e:	b0 93 72 0c 	sts	0x0C72, r27
  TaskOne.offset.secs = 0;
     562:	10 92 73 0c 	sts	0x0C73, r1
     566:	10 92 74 0c 	sts	0x0C74, r1
     56a:	10 92 75 0c 	sts	0x0C75, r1
     56e:	10 92 76 0c 	sts	0x0C76, r1
  TaskOne.offset.nano_secs= 60*NANOS_PER_MS;
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	97 e8       	ldi	r25, 0x87	; 135
     576:	a3 e9       	ldi	r26, 0x93	; 147
     578:	b3 e0       	ldi	r27, 0x03	; 3
     57a:	80 93 77 0c 	sts	0x0C77, r24
     57e:	90 93 78 0c 	sts	0x0C78, r25
     582:	a0 93 79 0c 	sts	0x0C79, r26
     586:	b0 93 7a 0c 	sts	0x0C7A, r27
  nrk_activate_task (&TaskOne);
     58a:	88 e5       	ldi	r24, 0x58	; 88
     58c:	9c e0       	ldi	r25, 0x0C	; 12
     58e:	0e 94 b6 3a 	call	0x756c	; 0x756c <nrk_activate_task>
  TaskTwo.offset.secs = 0;
  TaskTwo.offset.nano_secs = 100*NANOS_PER_MS;
  nrk_activate_task (&TaskTwo);
  */

  nrk_kprintf( PSTR("Create Done\r\n") );
     592:	80 ef       	ldi	r24, 0xF0	; 240
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
}
     59a:	08 95       	ret

0000059c <Task1>:


//********************************************************************************************

void Task1()
{
     59c:	2f 92       	push	r2
     59e:	3f 92       	push	r3
     5a0:	4f 92       	push	r4
     5a2:	5f 92       	push	r5
     5a4:	6f 92       	push	r6
     5a6:	7f 92       	push	r7
     5a8:	8f 92       	push	r8
     5aa:	9f 92       	push	r9
     5ac:	af 92       	push	r10
     5ae:	bf 92       	push	r11
     5b0:	cf 92       	push	r12
     5b2:	df 92       	push	r13
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	df 93       	push	r29
     5be:	cf 93       	push	r28
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <Task1+0x26>
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
  //char c = -1;
  nrk_sig_t uart_rx_signal;
  nrk_sig_mask_t sm;
  uint8_t finished = 0;

  printf( "Task1 PID=%d\r\n",nrk_get_pid());
     5c6:	0e 94 c3 38 	call	0x7186	; 0x7186 <nrk_get_pid>
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <Task1+0x30>
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <Task1+0x32>
     5ce:	ed b7       	in	r30, 0x3d	; 61
     5d0:	fe b7       	in	r31, 0x3e	; 62
     5d2:	31 96       	adiw	r30, 0x01	; 1
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	32 e0       	ldi	r19, 0x02	; 2
     5d8:	ad b7       	in	r26, 0x3d	; 61
     5da:	be b7       	in	r27, 0x3e	; 62
     5dc:	12 96       	adiw	r26, 0x02	; 2
     5de:	3c 93       	st	X, r19
     5e0:	2e 93       	st	-X, r18
     5e2:	11 97       	sbiw	r26, 0x01	; 1
     5e4:	82 83       	std	Z+2, r24	; 0x02
     5e6:	13 82       	std	Z+3, r1	; 0x03
     5e8:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
  printf("Gateway\r\n");
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	8f e0       	ldi	r24, 0x0F	; 15
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	0e 94 4d 48 	call	0x909a	; 0x909a <puts>

  nrk_led_set(RED_LED);
     5fc:	83 e0       	ldi	r24, 0x03	; 3
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <nrk_led_set>
  nrk_led_set(BLUE_LED);
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <nrk_led_set>



  //configAdvDAUX(1, 0, 25, 1, NULL, NULL, NULL, 2, NULL, NULL, NULL);

  isa_start();
     60c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <isa_start>

  isa_rx_pkt_set_buffer(rx_buf, RF_MAX_PAYLOAD_SIZE);
     610:	8e e5       	ldi	r24, 0x5E	; 94
     612:	9d e0       	ldi	r25, 0x0D	; 13
     614:	64 e7       	ldi	r22, 0x74	; 116
     616:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <isa_rx_pkt_set_buffer>
  //slip_init (stdin, stdout, 0, 0);

  //while (slip_started () != 1) nrk_wait_until_next_period ();

  
  while(!isa_ready())  nrk_wait_until_next_period(); 
     61a:	02 c0       	rjmp	.+4      	; 0x620 <Task1+0x84>
     61c:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <nrk_wait_until_next_period>
     620:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <isa_ready>
     624:	88 23       	and	r24, r24
     626:	d1 f3       	breq	.-12     	; 0x61c <Task1+0x80>
  printf("isa start!\n\r");
     628:	00 d0       	rcall	.+0      	; 0x62a <Task1+0x8e>
     62a:	88 e1       	ldi	r24, 0x18	; 24
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	ed b7       	in	r30, 0x3d	; 61
     630:	fe b7       	in	r31, 0x3e	; 62
     632:	92 83       	std	Z+2, r25	; 0x02
     634:	81 83       	std	Z+1, r24	; 0x01
     636:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>

   
    pkt_record_done_signal=nrk_signal_create();
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0e 94 6a 34 	call	0x68d4	; 0x68d4 <nrk_signal_create>
     642:	80 93 fb 0c 	sts	0x0CFB, r24
    if(pkt_record_done_signal==NRK_ERROR){
     646:	8f 3f       	cpi	r24, 0xFF	; 255
     648:	09 f5       	brne	.+66     	; 0x68c <Task1+0xf0>
	nrk_kprintf(PSTR("ERROR: creating packet record signal failed\r\n"));
     64a:	82 e2       	ldi	r24, 0x22	; 34
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
     652:	e0 91 17 20 	lds	r30, 0x2017
     656:	f0 91 18 20 	lds	r31, 0x2018
     65a:	8e e0       	ldi	r24, 0x0E	; 14
     65c:	60 85       	ldd	r22, Z+8	; 0x08
     65e:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>


  }
  

}
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	cf 91       	pop	r28
     668:	df 91       	pop	r29
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	bf 90       	pop	r11
     678:	af 90       	pop	r10
     67a:	9f 90       	pop	r9
     67c:	8f 90       	pop	r8
     67e:	7f 90       	pop	r7
     680:	6f 90       	pop	r6
     682:	5f 90       	pop	r5
     684:	4f 90       	pop	r4
     686:	3f 90       	pop	r3
     688:	2f 90       	pop	r2
     68a:	08 95       	ret
	nrk_kprintf(PSTR("ERROR: creating packet record signal failed\r\n"));
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
    }  

    uart_rx_signal=nrk_uart_rx_signal_get();
     68c:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <nrk_uart_rx_signal_get>
     690:	b8 2e       	mov	r11, r24
     // Register your task to wakeup on RX Data
     if(uart_rx_signal==NRK_ERROR) nrk_kprintf( PSTR("Get Signal ERROR!\r\n") );
     692:	ff ef       	ldi	r31, 0xFF	; 255
     694:	8f 17       	cp	r24, r31
     696:	21 f4       	brne	.+8      	; 0x6a0 <Task1+0x104>
     698:	8e e0       	ldi	r24, 0x0E	; 14
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
     nrk_signal_register(uart_rx_signal);
     6a0:	8b 2d       	mov	r24, r11
     6a2:	0e 94 f5 34 	call	0x69ea	; 0x69ea <nrk_signal_register>
	  //Spit out log info
	/*  	  if (txCount % 1000 == 0){
	  	printf ("TxCount: %d\r\nRXCount: %d\r\nPacketLoss:%d", txCount,rxCount, packetsLost);
	  	  }
      */
       nrk_gpio_set(NRK_DEBUG_3);
     6a6:	a0 90 5b 0b 	lds	r10, 0x0B5B
if (cnt ==0 )
{
	MESSAGE *message;
	message = &tx_buf[PKT_DATA_START];
	message->type = DUMMY_PAYLOAD;
	sprintf( &message->data,"node %d,%c",MY_ID,cnt++);
     6aa:	4f e5       	ldi	r20, 0x5F	; 95
     6ac:	c4 2e       	mov	r12, r20
     6ae:	4e e0       	ldi	r20, 0x0E	; 14
     6b0:	d4 2e       	mov	r13, r20
}


emberProcessCommandInput(0);
//printf ("After that shit");
sm=nrk_event_wait(SIG(uart_rx_signal));
     6b2:	31 e0       	ldi	r19, 0x01	; 1
     6b4:	e3 2e       	mov	r14, r19
     6b6:	f1 2c       	mov	r15, r1
     6b8:	01 2d       	mov	r16, r1
     6ba:	11 2d       	mov	r17, r1
     6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <Task1+0x12a>
     6be:	ee 0c       	add	r14, r14
     6c0:	ff 1c       	adc	r15, r15
     6c2:	00 1f       	adc	r16, r16
     6c4:	11 1f       	adc	r17, r17
     6c6:	ba 94       	dec	r11
     6c8:	d2 f7       	brpl	.-12     	; 0x6be <Task1+0x122>
     6ca:	bb 24       	eor	r11, r11
      */
       nrk_gpio_set(NRK_DEBUG_3);
       
       if( isa_rx_pkt_check()!=0 ) {
	   // printf("message is received.\n\r");
	    local_rx_buf=isa_rx_pkt_get(&length, &rssi);
     6cc:	22 e0       	ldi	r18, 0x02	; 2
     6ce:	62 2e       	mov	r6, r18
     6d0:	71 2c       	mov	r7, r1
     6d2:	6c 0e       	add	r6, r28
     6d4:	7d 1e       	adc	r7, r29
     6d6:	4e 01       	movw	r8, r28
     6d8:	08 94       	sec
     6da:	81 1c       	adc	r8, r1
     6dc:	91 1c       	adc	r9, r1
if (cnt ==0 )
{
	MESSAGE *message;
	message = &tx_buf[PKT_DATA_START];
	message->type = DUMMY_PAYLOAD;
	sprintf( &message->data,"node %d,%c",MY_ID,cnt++);
     6de:	95 e2       	ldi	r25, 0x25	; 37
     6e0:	49 2e       	mov	r4, r25
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	59 2e       	mov	r5, r25
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	28 2e       	mov	r2, r24
     6ea:	31 2c       	mov	r3, r1
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <Task1+0x156>
}


emberProcessCommandInput(0);
//printf ("After that shit");
sm=nrk_event_wait(SIG(uart_rx_signal));
     6ee:	bb 24       	eor	r11, r11
     6f0:	b3 94       	inc	r11
	  //Spit out log info
	/*  	  if (txCount % 1000 == 0){
	  	printf ("TxCount: %d\r\nRXCount: %d\r\nPacketLoss:%d", txCount,rxCount, packetsLost);
	  	  }
      */
       nrk_gpio_set(NRK_DEBUG_3);
     6f2:	8a 2d       	mov	r24, r10
     6f4:	0e 94 ba 2b 	call	0x5774	; 0x5774 <nrk_gpio_set>
       
       if( isa_rx_pkt_check()!=0 ) {
     6f8:	0e 94 67 0f 	call	0x1ece	; 0x1ece <isa_rx_pkt_check>
     6fc:	88 23       	and	r24, r24
     6fe:	21 f0       	breq	.+8      	; 0x708 <Task1+0x16c>
	   // printf("message is received.\n\r");
	    local_rx_buf=isa_rx_pkt_get(&length, &rssi);
     700:	c4 01       	movw	r24, r8
     702:	b3 01       	movw	r22, r6
     704:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <isa_rx_pkt_get>
	if(isa_tx_pkt_check(MY_TX_SLOT)!=0){
	  // printf("Pending TX\r\n");
	}
	*/
	//else{
if (cnt ==0 )
     708:	bb 20       	and	r11, r11
     70a:	59 f5       	brne	.+86     	; 0x762 <Task1+0x1c6>
{
	MESSAGE *message;
	message = &tx_buf[PKT_DATA_START];
	message->type = DUMMY_PAYLOAD;
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	80 93 5e 0e 	sts	0x0E5E, r24
	sprintf( &message->data,"node %d,%c",MY_ID,cnt++);
     712:	ad b7       	in	r26, 0x3d	; 61
     714:	be b7       	in	r27, 0x3e	; 62
     716:	18 97       	sbiw	r26, 0x08	; 8
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	be bf       	out	0x3e, r27	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	ad bf       	out	0x3d, r26	; 61
     722:	ed b7       	in	r30, 0x3d	; 61
     724:	fe b7       	in	r31, 0x3e	; 62
     726:	31 96       	adiw	r30, 0x01	; 1
     728:	12 96       	adiw	r26, 0x02	; 2
     72a:	dc 92       	st	X, r13
     72c:	ce 92       	st	-X, r12
     72e:	11 97       	sbiw	r26, 0x01	; 1
     730:	53 82       	std	Z+3, r5	; 0x03
     732:	42 82       	std	Z+2, r4	; 0x02
     734:	35 82       	std	Z+5, r3	; 0x05
     736:	24 82       	std	Z+4, r2	; 0x04
     738:	17 82       	std	Z+7, r1	; 0x07
     73a:	16 82       	std	Z+6, r1	; 0x06
     73c:	0e 94 88 48 	call	0x9110	; 0x9110 <sprintf>
  	length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+2; //1 for \0 + 1 for message->type
     740:	ee e5       	ldi	r30, 0x5E	; 94
     742:	fe e0       	ldi	r31, 0x0E	; 14
     744:	01 90       	ld	r0, Z+
     746:	00 20       	and	r0, r0
     748:	e9 f7       	brne	.-6      	; 0x744 <Task1+0x1a8>
     74a:	ef 55       	subi	r30, 0x5F	; 95
     74c:	fe 40       	sbci	r31, 0x0E	; 14
     74e:	e7 5f       	subi	r30, 0xF7	; 247
     750:	e9 83       	std	Y+1, r30	; 0x01
     752:	ed b7       	in	r30, 0x3d	; 61
     754:	fe b7       	in	r31, 0x3e	; 62
     756:	38 96       	adiw	r30, 0x08	; 8
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	fe bf       	out	0x3e, r31	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	ed bf       	out	0x3d, r30	; 61
  //	sendPacket(2,0, length, tx_buf, transmitCallback1);

}


emberProcessCommandInput(0);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <emberProcessCommandString>
//printf ("After that shit");
sm=nrk_event_wait(SIG(uart_rx_signal));
     76c:	c8 01       	movw	r24, r16
     76e:	b7 01       	movw	r22, r14
     770:	0e 94 6e 37 	call	0x6edc	; 0x6edc <nrk_event_wait>
if(sm != SIG(uart_rx_signal))
     774:	6e 15       	cp	r22, r14
     776:	7f 05       	cpc	r23, r15
     778:	80 07       	cpc	r24, r16
     77a:	91 07       	cpc	r25, r17
     77c:	09 f4       	brne	.+2      	; 0x780 <Task1+0x1e4>
     77e:	b7 cf       	rjmp	.-146    	; 0x6ee <Task1+0x152>
nrk_kprintf( PSTR("RX signal error") );
     780:	8e ef       	ldi	r24, 0xFE	; 254
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
     788:	b2 cf       	rjmp	.-156    	; 0x6ee <Task1+0x152>

0000078a <wait_until_record_full>:
  return sendFlag;
}

int8_t wait_until_record_full()
{
    nrk_signal_register(pkt_record_done_signal);
     78a:	80 91 fb 0c 	lds	r24, 0x0CFB
     78e:	0e 94 f5 34 	call	0x69ea	; 0x69ea <nrk_signal_register>
    if (pkt_record_check() != 0)
     792:	80 91 02 0d 	lds	r24, 0x0D02
     796:	88 23       	and	r24, r24
     798:	79 f4       	brne	.+30     	; 0x7b8 <wait_until_record_full+0x2e>
        return NRK_OK;
    nrk_event_wait (SIG(pkt_record_done_signal));
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	00 90 fb 0c 	lds	r0, 0x0CFB
     7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <wait_until_record_full+0x26>
     7a8:	66 0f       	add	r22, r22
     7aa:	77 1f       	adc	r23, r23
     7ac:	88 1f       	adc	r24, r24
     7ae:	99 1f       	adc	r25, r25
     7b0:	0a 94       	dec	r0
     7b2:	d2 f7       	brpl	.-12     	; 0x7a8 <wait_until_record_full+0x1e>
     7b4:	0e 94 6e 37 	call	0x6edc	; 0x6edc <nrk_event_wait>
    return NRK_OK;
}
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	08 95       	ret

000007bc <transmitCallback1>:
  return 0;
}

//*********************Making a callback function***************************************

void transmitCallback1(ISA_QUEUE *entry , bool status){
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	ec 01       	movw	r28, r24
uint8_t length;
MESSAGE *message;
DLMO_DROUT *dRout;
dRout = &entry->tx_buf[DROUT_INDEX];
message = &tx_buf[PKT_DATA_START];
     7c6:	0e e5       	ldi	r16, 0x5E	; 94
     7c8:	1e e0       	ldi	r17, 0x0E	; 14
message->type = DUMMY_PAYLOAD;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	80 93 5e 0e 	sts	0x0E5E, r24
sprintf( &message->data,"node" );
     7d0:	c8 01       	movw	r24, r16
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	60 e3       	ldi	r22, 0x30	; 48
     7d6:	72 e0       	ldi	r23, 0x02	; 2
     7d8:	0e 94 74 47 	call	0x8ee8	; 0x8ee8 <strcpy>
length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+2;
     7dc:	f8 01       	movw	r30, r16
     7de:	01 90       	ld	r0, Z+
     7e0:	00 20       	and	r0, r0
     7e2:	e9 f7       	brne	.-6      	; 0x7de <transmitCallback1+0x22>
     7e4:	af 01       	movw	r20, r30
     7e6:	40 1b       	sub	r20, r16
sendPacket(entry->tx_buf[DEST_INDEX],dRout->GraphId, length, tx_buf, transmitCallback1);
     7e8:	48 5f       	subi	r20, 0xF8	; 248
     7ea:	98 01       	movw	r18, r16
     7ec:	27 50       	subi	r18, 0x07	; 7
     7ee:	30 40       	sbci	r19, 0x00	; 0
     7f0:	8c 81       	ldd	r24, Y+4	; 0x04
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	6f 81       	ldd	r22, Y+7	; 0x07
     7f6:	0e ed       	ldi	r16, 0xDE	; 222
     7f8:	13 e0       	ldi	r17, 0x03	; 3
     7fa:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <sendPacket>
isaFreePacket(entry);
     7fe:	ce 01       	movw	r24, r28
     800:	0e 94 de 09 	call	0x13bc	; 0x13bc <isaFreePacket>
}
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
     80c:	08 95       	ret

0000080e <main>:
    nrk_event_wait (SIG(pkt_record_done_signal));
    return NRK_OK;
}

int main ()
{
     80e:	8f 92       	push	r8
     810:	af 92       	push	r10
     812:	cf 92       	push	r12
     814:	ef 92       	push	r14
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
  nrk_setup_ports();
     81a:	0e 94 b3 2b 	call	0x5766	; 0x5766 <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
     81e:	87 e0       	ldi	r24, 0x07	; 7
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <nrk_setup_uart>

  nrk_kprintf( PSTR("Starting up...\r\n") );
     826:	80 e5       	ldi	r24, 0x50	; 80
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
	
  nrk_init();
     82e:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <nrk_init>

  nrk_led_clr(0);
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <nrk_led_clr>
  nrk_led_clr(1);
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <nrk_led_clr>
  nrk_led_clr(2);
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <nrk_led_clr>
  nrk_led_clr(3);
     84a:	83 e0       	ldi	r24, 0x03	; 3
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <nrk_led_clr>
  
  nrk_time_set(0,0);
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	0e 94 33 3c 	call	0x7866	; 0x7866 <nrk_time_set>
  
  isa_task_config();
     866:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <isa_task_config>
  
  nrk_create_taskset ();
     86a:	0e 94 6d 02 	call	0x4da	; 0x4da <nrk_create_taskset>

  isa_set_channel_pattern(1); // must before isa_init
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <isa_set_channel_pattern>
  isa_init (ISA_GATEWAY, MY_ID, MY_ID);//change
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	41 e0       	ldi	r20, 0x01	; 1
     87c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <isa_init>

  //isa_set_channel(MY_CHANNEL);
   dlmoInit(); 	//Initialize the Data Link Management Object
     880:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <dlmoInit>
//   addLink(10,0,0,4,0);
   //addGraph(1,3,2,3,4);
   //addLink(1,2,1,1,2);
//   addLink(2,2,1,8,2);
  //Tx slots
   addNeighbor(2,0,0,0,false,0,0,0);//neighbor 2
     884:	00 d0       	rcall	.+0      	; 0x886 <main+0x78>
     886:	ed b7       	in	r30, 0x3d	; 61
     888:	fe b7       	in	r31, 0x3e	; 62
     88a:	11 82       	std	Z+1, r1	; 0x01
     88c:	12 82       	std	Z+2, r1	; 0x02
     88e:	82 e0       	ldi	r24, 0x02	; 2
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	00 e0       	ldi	r16, 0x00	; 0
     894:	10 e0       	ldi	r17, 0x00	; 0
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	ee 24       	eor	r14, r14
     8a4:	cc 24       	eor	r12, r12
     8a6:	aa 24       	eor	r10, r10
     8a8:	88 24       	eor	r8, r8
     8aa:	0e 94 bb 0c 	call	0x1976	; 0x1976 <addNeighbor>
   addNeighbor(3,0,0,0,false,0,0,0);//neighbor 3
     8ae:	ed b7       	in	r30, 0x3d	; 61
     8b0:	fe b7       	in	r31, 0x3e	; 62
     8b2:	11 82       	std	Z+1, r1	; 0x01
     8b4:	12 82       	std	Z+2, r1	; 0x02
     8b6:	83 e0       	ldi	r24, 0x03	; 3
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	40 e0       	ldi	r20, 0x00	; 0
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	0e 94 bb 0c 	call	0x1976	; 0x1976 <addNeighbor>
   addNeighbor(4,0,0,0,false,0,0,0);//neighbor 4
     8ca:	ed b7       	in	r30, 0x3d	; 61
     8cc:	fe b7       	in	r31, 0x3e	; 62
     8ce:	11 82       	std	Z+1, r1	; 0x01
     8d0:	12 82       	std	Z+2, r1	; 0x02
     8d2:	84 e0       	ldi	r24, 0x04	; 4
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	50 e0       	ldi	r21, 0x00	; 0
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <addNeighbor>
   addGraph(1,2,3,4,0);//Graph
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	62 e0       	ldi	r22, 0x02	; 2
     8f0:	43 e0       	ldi	r20, 0x03	; 3
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	24 e0       	ldi	r18, 0x04	; 4
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	00 e0       	ldi	r16, 0x00	; 0
     8fa:	10 e0       	ldi	r17, 0x00	; 0
     8fc:	0e 94 0d 0c 	call	0x181a	; 0x181a <addGraph>
   addLink(25,0,0,4,0);//ad on 16
     900:	89 e1       	ldi	r24, 0x19	; 25
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	24 e0       	ldi	r18, 0x04	; 4
     90c:	00 e0       	ldi	r16, 0x00	; 0
     90e:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <addLink>

  addLink(1,3,1,1,2);//transmit to 3 on 1
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	63 e0       	ldi	r22, 0x03	; 3
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	41 e0       	ldi	r20, 0x01	; 1
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	21 e0       	ldi	r18, 0x01	; 1
     91e:	02 e0       	ldi	r16, 0x02	; 2
     920:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <addLink>
   addLink(2,4,1,1,2);//transmit to 4 on 2
     924:	82 e0       	ldi	r24, 0x02	; 2
     926:	64 e0       	ldi	r22, 0x04	; 4
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	41 e0       	ldi	r20, 0x01	; 1
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	21 e0       	ldi	r18, 0x01	; 1
     930:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <addLink>
   addLink(3,2,0,1,0);//transmit to 2 on 3, direct Neighbor not on a Graph
     934:	83 e0       	ldi	r24, 0x03	; 3
     936:	62 e0       	ldi	r22, 0x02	; 2
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	00 e0       	ldi	r16, 0x00	; 0
     942:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <addLink>
   addLink(4,0,0,8,0);//receive link on 2
     946:	84 e0       	ldi	r24, 0x04	; 4
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	28 e0       	ldi	r18, 0x08	; 8
     952:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <addLink>
   addLink(5,0,0,8,0);//transmit to 3 on 3
     956:	85 e0       	ldi	r24, 0x05	; 5
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	40 e0       	ldi	r20, 0x00	; 0
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	28 e0       	ldi	r18, 0x08	; 8
     962:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <addLink>
   addLink(6,0,0,8,0);
     966:	86 e0       	ldi	r24, 0x06	; 6
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	28 e0       	ldi	r18, 0x08	; 8
     972:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <addLink>
   addLink(26,0,0,8,0);//Ad
     976:	8a e1       	ldi	r24, 0x1A	; 26
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	28 e0       	ldi	r18, 0x08	; 8
     982:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <addLink>
  configureSlot(22,0, RX, false,0,0,0,0,0, NEIGHBOR);
  configureSlot(23,0, RX, false,0,0,0,0,0, NEIGHBOR);
  configureSlot(24,0, RX, false,0,0,0,0,0, NEIGHBOR);
*/

  nrk_start();
     986:	0e 94 86 31 	call	0x630c	; 0x630c <nrk_start>
  
  return 0;
}
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ef 90       	pop	r14
     994:	cf 90       	pop	r12
     996:	af 90       	pop	r10
     998:	8f 90       	pop	r8
     99a:	08 95       	ret

0000099c <slip_started>:
}

int8_t slip_started ()
{
  return _slip_started;
}
     99c:	80 91 35 02 	lds	r24, 0x0235
     9a0:	08 95       	ret

000009a2 <get_byte>:
  }
}

uint8_t get_byte (void)
{
  return fgetc (g_dv_in);
     9a2:	80 91 63 0f 	lds	r24, 0x0F63
     9a6:	90 91 64 0f 	lds	r25, 0x0F64
     9aa:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <fgetc>
}
     9ae:	08 95       	ret

000009b0 <slip_rx>:
{
  return _slip_started;
}

int8_t slip_rx (uint8_t * buf, uint8_t max_len)
{
     9b0:	9f 92       	push	r9
     9b2:	af 92       	push	r10
     9b4:	bf 92       	push	r11
     9b6:	cf 92       	push	r12
     9b8:	df 92       	push	r13
     9ba:	ef 92       	push	r14
     9bc:	ff 92       	push	r15
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	ec 01       	movw	r28, r24
     9c8:	96 2e       	mov	r9, r22
  uint8_t received, checksum, size;
  int8_t v;
  nrk_sig_t my_uart_rx_signal;
  nrk_sig_mask_t sm;

my_uart_rx_signal=nrk_uart_rx_signal_get();
     9ca:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <nrk_uart_rx_signal_get>
     9ce:	18 2f       	mov	r17, r24
// Register your task to wakeup on RX Data
  if (my_uart_rx_signal == NRK_ERROR)
     9d0:	8f 3f       	cpi	r24, 0xFF	; 255
     9d2:	21 f4       	brne	.+8      	; 0x9dc <slip_rx+0x2c>
    nrk_kprintf (PSTR ("SLIP RX error: Get Signal\r\n"));
     9d4:	86 e8       	ldi	r24, 0x86	; 134
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
  
   v=nrk_signal_register (my_uart_rx_signal);
     9dc:	81 2f       	mov	r24, r17
     9de:	0e 94 f5 34 	call	0x69ea	; 0x69ea <nrk_signal_register>
   if(v==NRK_ERROR) nrk_kprintf( PSTR( "SLIP RX error: nrk_signal_register\r\n" ));
     9e2:	8f 3f       	cpi	r24, 0xFF	; 255
     9e4:	21 f4       	brne	.+8      	; 0x9ee <slip_rx+0x3e>
     9e6:	81 e6       	ldi	r24, 0x61	; 97
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
      // Read Character
      c = getchar ();
      if (c == START)
        break;
    }
    sm = nrk_event_wait (SIG (my_uart_rx_signal));
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	c8 2e       	mov	r12, r24
     9f2:	d1 2c       	mov	r13, r1
     9f4:	e1 2c       	mov	r14, r1
     9f6:	f1 2c       	mov	r15, r1
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <slip_rx+0x52>
     9fa:	cc 0c       	add	r12, r12
     9fc:	dd 1c       	adc	r13, r13
     9fe:	ee 1c       	adc	r14, r14
     a00:	ff 1c       	adc	r15, r15
     a02:	1a 95       	dec	r17
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <slip_rx+0x4a>
     a06:	08 c0       	rjmp	.+16     	; 0xa18 <slip_rx+0x68>
// Wait until you receive the packet start (START) command
  while (1) {
    // Wait for UART signal
    while (nrk_uart_data_ready (NRK_DEFAULT_UART) != 0) {
      // Read Character
      c = getchar ();
     a08:	80 91 46 20 	lds	r24, 0x2046
     a0c:	90 91 47 20 	lds	r25, 0x2047
     a10:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <fgetc>
      if (c == START)
     a14:	81 3c       	cpi	r24, 0xC1	; 193
     a16:	29 f0       	breq	.+10     	; 0xa22 <slip_rx+0x72>
  received = 0;

// Wait until you receive the packet start (START) command
  while (1) {
    // Wait for UART signal
    while (nrk_uart_data_ready (NRK_DEFAULT_UART) != 0) {
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	0e 94 88 2b 	call	0x5710	; 0x5710 <nrk_uart_data_ready>
     a1e:	88 23       	and	r24, r24
     a20:	99 f7       	brne	.-26     	; 0xa08 <slip_rx+0x58>
      // Read Character
      c = getchar ();
      if (c == START)
        break;
    }
    sm = nrk_event_wait (SIG (my_uart_rx_signal));
     a22:	c7 01       	movw	r24, r14
     a24:	b6 01       	movw	r22, r12
     a26:	0e 94 6e 37 	call	0x6edc	; 0x6edc <nrk_event_wait>
    c = getchar ();
     a2a:	80 91 46 20 	lds	r24, 0x2046
     a2e:	90 91 47 20 	lds	r25, 0x2047
     a32:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <fgetc>
     a36:	08 2f       	mov	r16, r24
    if (c == START)
     a38:	81 3c       	cpi	r24, 0xC1	; 193
     a3a:	71 f7       	brne	.-36     	; 0xa18 <slip_rx+0x68>
      break;
  }

  size = get_byte ();
     a3c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <get_byte>
     a40:	a8 2e       	mov	r10, r24
     a42:	bb 24       	eor	r11, r11
     a44:	10 e0       	ldi	r17, 0x00	; 0
     a46:	2a c0       	rjmp	.+84     	; 0xa9c <slip_rx+0xec>
  checksum = 0;
  while (1) {
    while (nrk_uart_data_ready (NRK_DEFAULT_UART) != 0) {
      last_c = c;
      c = getchar ();
     a48:	80 91 46 20 	lds	r24, 0x2046
     a4c:	90 91 47 20 	lds	r25, 0x2047
     a50:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <fgetc>
     a54:	98 2f       	mov	r25, r24

      // handle bytestuffing if necessary
      switch (c) {
     a56:	90 3c       	cpi	r25, 0xC0	; 192
     a58:	19 f0       	breq	.+6      	; 0xa60 <slip_rx+0xb0>
     a5a:	9b 3d       	cpi	r25, 0xDB	; 219
     a5c:	a1 f4       	brne	.+40     	; 0xa86 <slip_rx+0xd6>
     a5e:	08 c0       	rjmp	.+16     	; 0xa70 <slip_rx+0xc0>
        // data in the packet, ignore it. This is
        // meant to avoid bothering IP with all
        // the empty packets generated by the
        // duplicate END characters which are in
        // turn sent to try to detect line noise.
        if (received) {
     a60:	11 23       	and	r17, r17
     a62:	31 f1       	breq	.+76     	; 0xab0 <slip_rx+0x100>
	
          checksum &= 0x7f;
          if (last_c == checksum)
     a64:	8b 2d       	mov	r24, r11
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	08 17       	cp	r16, r24
     a6a:	11 f5       	brne	.+68     	; 0xab0 <slip_rx+0x100>
            return received;
     a6c:	81 2f       	mov	r24, r17
     a6e:	21 c0       	rjmp	.+66     	; 0xab2 <slip_rx+0x102>
        // and get another character and then figure out
        // what to store in the packet based on that.
      case ESC:
        // FIXME: Need to sleep here
        last_c = c;
    	if( nrk_uart_data_ready (NRK_DEFAULT_UART)==0 )	
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	0e 94 88 2b 	call	0x5710	; 0x5710 <nrk_uart_data_ready>
     a76:	88 23       	and	r24, r24
     a78:	21 f4       	brne	.+8      	; 0xa82 <slip_rx+0xd2>
		sm = nrk_event_wait (SIG (my_uart_rx_signal));
     a7a:	c7 01       	movw	r24, r14
     a7c:	b6 01       	movw	r22, r12
     a7e:	0e 94 6e 37 	call	0x6edc	; 0x6edc <nrk_event_wait>
        c = get_byte ();
     a82:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <get_byte>
        }

        // here we fall into the default handler and let
        // it store the character for us
      default:
        if (received < max_len && received < size) {
     a86:	19 15       	cp	r17, r9
     a88:	40 f4       	brcc	.+16     	; 0xa9a <slip_rx+0xea>
     a8a:	1a 15       	cp	r17, r10
     a8c:	30 f4       	brcc	.+12     	; 0xa9a <slip_rx+0xea>
          buf[received++] = c;
     a8e:	fe 01       	movw	r30, r28
     a90:	e1 0f       	add	r30, r17
     a92:	f1 1d       	adc	r31, r1
     a94:	80 83       	st	Z, r24
     a96:	1f 5f       	subi	r17, 0xFF	; 255
          checksum += c;
     a98:	b8 0e       	add	r11, r24
     a9a:	08 2f       	mov	r16, r24
  }

  size = get_byte ();
  checksum = 0;
  while (1) {
    while (nrk_uart_data_ready (NRK_DEFAULT_UART) != 0) {
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	0e 94 88 2b 	call	0x5710	; 0x5710 <nrk_uart_data_ready>
     aa2:	88 23       	and	r24, r24
     aa4:	89 f6       	brne	.-94     	; 0xa48 <slip_rx+0x98>
          buf[received++] = c;
          checksum += c;
        }
      }
    }
    sm = nrk_event_wait (SIG (my_uart_rx_signal));
     aa6:	c7 01       	movw	r24, r14
     aa8:	b6 01       	movw	r22, r12
     aaa:	0e 94 6e 37 	call	0x6edc	; 0x6edc <nrk_event_wait>
     aae:	f6 cf       	rjmp	.-20     	; 0xa9c <slip_rx+0xec>
  }
     ab0:	8f ef       	ldi	r24, 0xFF	; 255


}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	9f 90       	pop	r9
     ac8:	08 95       	ret

00000aca <put_byte>:
  _slip_started = NRK_OK;
  return NRK_OK;
}

void put_byte (uint8_t c)
{
     aca:	1f 93       	push	r17
     acc:	18 2f       	mov	r17, r24
  if (g_delay > 0)
     ace:	80 91 5d 0f 	lds	r24, 0x0F5D
     ad2:	88 23       	and	r24, r24
     ad4:	69 f0       	breq	.+26     	; 0xaf0 <put_byte+0x26>
    nrk_spin_wait_us (g_delay * 1000);
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	28 ee       	ldi	r18, 0xE8	; 232
     ada:	33 e0       	ldi	r19, 0x03	; 3
     adc:	ac 01       	movw	r20, r24
     ade:	42 9f       	mul	r20, r18
     ae0:	c0 01       	movw	r24, r0
     ae2:	43 9f       	mul	r20, r19
     ae4:	90 0d       	add	r25, r0
     ae6:	52 9f       	mul	r21, r18
     ae8:	90 0d       	add	r25, r0
     aea:	11 24       	eor	r1, r1
     aec:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>
  fputc (c, g_dv_out);
     af0:	60 91 5e 0f 	lds	r22, 0x0F5E
     af4:	70 91 5f 0f 	lds	r23, 0x0F5F
     af8:	81 2f       	mov	r24, r17
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
  if (g_echo) {
    // Not IMPLEMENTED
  }
}
     b00:	1f 91       	pop	r17
     b02:	08 95       	ret

00000b04 <slip_tx>:
{
  return fgetc (g_dv_in);
}

int8_t slip_tx (uint8_t * buf, uint8_t size)
{
     b04:	cf 92       	push	r12
     b06:	df 92       	push	r13
     b08:	ff 92       	push	r15
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	18 2f       	mov	r17, r24
     b14:	09 2f       	mov	r16, r25
     b16:	f6 2e       	mov	r15, r22
  int8_t v;
  uint8_t checksum;

// Make sure size is less than 128 so it doesn't act as a control
// message
  if (size > 128) {
     b18:	90 e8       	ldi	r25, 0x80	; 128
     b1a:	c9 2e       	mov	r12, r25
     b1c:	c6 16       	cp	r12, r22
     b1e:	10 f4       	brcc	.+4      	; 0xb24 <slip_tx+0x20>
    _nrk_errno_set (3);
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	43 c0       	rjmp	.+134    	; 0xbaa <slip_tx+0xa6>
    return NRK_ERROR;
  }

  v = nrk_sem_pend (slip_tx_sem);
     b24:	80 91 60 0f 	lds	r24, 0x0F60
     b28:	90 91 61 0f 	lds	r25, 0x0F61
     b2c:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
  if (v == NRK_ERROR) {
     b30:	8f 3f       	cpi	r24, 0xFF	; 255
     b32:	31 f4       	brne	.+12     	; 0xb40 <slip_tx+0x3c>
    nrk_kprintf (PSTR ("SLIP TX ERROR:  Access to semaphore failed\r\n"));
     b34:	80 ed       	ldi	r24, 0xD0	; 208
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
    _nrk_errno_set (1);
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	35 c0       	rjmp	.+106    	; 0xbaa <slip_tx+0xa6>
    return NRK_ERROR;
  }

// Send the start byte
  put_byte (START);
     b40:	81 ec       	ldi	r24, 0xC1	; 193
     b42:	0e 94 65 05 	call	0xaca	; 0xaca <put_byte>
  put_byte (size);
     b46:	8f 2d       	mov	r24, r15
     b48:	0e 94 65 05 	call	0xaca	; 0xaca <put_byte>
     b4c:	c8 01       	movw	r24, r16
     b4e:	29 2f       	mov	r18, r25
     b50:	e9 01       	movw	r28, r18
     b52:	6e 01       	movw	r12, r28
     b54:	d8 2e       	mov	r13, r24
     b56:	e6 01       	movw	r28, r12
     b58:	00 e0       	ldi	r16, 0x00	; 0

  checksum = 0;

// Send payload and stuff bytes as needed
  for (i = 0; i < size; i++) {
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <slip_tx+0x72>
    if (buf[i] == END || buf[i] == ESC)
     b5c:	88 81       	ld	r24, Y
     b5e:	80 3c       	cpi	r24, 0xC0	; 192
     b60:	11 f0       	breq	.+4      	; 0xb66 <slip_tx+0x62>
     b62:	8b 3d       	cpi	r24, 0xDB	; 219
     b64:	19 f4       	brne	.+6      	; 0xb6c <slip_tx+0x68>
      put_byte (ESC);
     b66:	8b ed       	ldi	r24, 0xDB	; 219
     b68:	0e 94 65 05 	call	0xaca	; 0xaca <put_byte>
    put_byte (buf[i]);
     b6c:	88 81       	ld	r24, Y
     b6e:	0e 94 65 05 	call	0xaca	; 0xaca <put_byte>
    checksum += buf[i];
     b72:	89 91       	ld	r24, Y+
     b74:	08 0f       	add	r16, r24
  put_byte (size);

  checksum = 0;

// Send payload and stuff bytes as needed
  for (i = 0; i < size; i++) {
     b76:	6e 01       	movw	r12, r28
     b78:	c1 1a       	sub	r12, r17
     b7a:	cf 14       	cp	r12, r15
     b7c:	78 f3       	brcs	.-34     	; 0xb5c <slip_tx+0x58>

// Make sure checksum is less than 128 so it doesn't act as a control
// message
  checksum &= 0x7F;
  // Send the end byte
  put_byte (checksum);
     b7e:	80 2f       	mov	r24, r16
     b80:	8f 77       	andi	r24, 0x7F	; 127
     b82:	0e 94 65 05 	call	0xaca	; 0xaca <put_byte>
  put_byte (END);
     b86:	80 ec       	ldi	r24, 0xC0	; 192
     b88:	0e 94 65 05 	call	0xaca	; 0xaca <put_byte>
  v = nrk_sem_post (slip_tx_sem);
     b8c:	80 91 60 0f 	lds	r24, 0x0F60
     b90:	90 91 61 0f 	lds	r25, 0x0F61
     b94:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
  if (v == NRK_ERROR) {
     b98:	8f 3f       	cpi	r24, 0xFF	; 255
     b9a:	11 f0       	breq	.+4      	; 0xba0 <slip_tx+0x9c>
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	08 c0       	rjmp	.+16     	; 0xbb0 <slip_tx+0xac>
    nrk_kprintf (PSTR ("SLIP TX ERROR:  Release of semaphore failed\r\n"));
     ba0:	82 ea       	ldi	r24, 0xA2	; 162
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
    _nrk_errno_set (2);
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	0e 94 70 32 	call	0x64e0	; 0x64e0 <_nrk_errno_set>
     bae:	8f ef       	ldi	r24, 0xFF	; 255
    return NRK_ERROR;
  }
  return NRK_OK;
}
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	df 90       	pop	r13
     bbc:	cf 90       	pop	r12
     bbe:	08 95       	ret

00000bc0 <slip_init>:
nrk_sem_t *slip_tx_sem;

int8_t slip_init (FILE * device_in, FILE * device_out, bool echo,
                  uint8_t delay)
{
  g_dv_in = device_in;
     bc0:	90 93 64 0f 	sts	0x0F64, r25
     bc4:	80 93 63 0f 	sts	0x0F63, r24
  g_dv_out = device_out;
     bc8:	70 93 5f 0f 	sts	0x0F5F, r23
     bcc:	60 93 5e 0f 	sts	0x0F5E, r22
  g_echo = echo;
     bd0:	40 93 62 0f 	sts	0x0F62, r20
  g_delay = delay;
     bd4:	20 93 5d 0f 	sts	0x0F5D, r18


#ifndef UART_PCP_CEILING
#define UART_PCP_CEILING       255
#endif
  slip_tx_sem = nrk_sem_create (1, UART_PCP_CEILING);
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	6f ef       	ldi	r22, 0xFF	; 255
     bdc:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <nrk_sem_create>
     be0:	90 93 61 0f 	sts	0x0F61, r25
     be4:	80 93 60 0f 	sts	0x0F60, r24
  if (slip_tx_sem == NRK_ERROR)
     be8:	2f ef       	ldi	r18, 0xFF	; 255
     bea:	8f 3f       	cpi	r24, 0xFF	; 255
     bec:	92 07       	cpc	r25, r18
     bee:	31 f4       	brne	.+12     	; 0xbfc <slip_init+0x3c>
    nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());
     bf0:	0e 94 c3 38 	call	0x7186	; 0x7186 <nrk_get_pid>
     bf4:	68 2f       	mov	r22, r24
     bf6:	8f e0       	ldi	r24, 0x0F	; 15
     bf8:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>

  _slip_started = NRK_OK;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	80 93 35 02 	sts	0x0235, r24
  return NRK_OK;
}
     c02:	08 95       	ret

00000c04 <setIsaError>:



void setIsaError(uint8_t value)
{
	isaError = value;
     c04:	80 93 c8 0b 	sts	0x0BC8, r24
}
     c08:	08 95       	ret

00000c0a <getIsaError>:

uint8_t getIsaError ()
{
	return isaError;
}
     c0a:	80 91 c8 0b 	lds	r24, 0x0BC8
     c0e:	08 95       	ret

00000c10 <printIsaError>:

void printIsaError()
{
	switch(isaError)
     c10:	80 91 c8 0b 	lds	r24, 0x0BC8
     c14:	83 30       	cpi	r24, 0x03	; 3
     c16:	b1 f0       	breq	.+44     	; 0xc44 <printIsaError+0x34>
     c18:	84 30       	cpi	r24, 0x04	; 4
     c1a:	28 f4       	brcc	.+10     	; 0xc26 <printIsaError+0x16>
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	51 f0       	breq	.+20     	; 0xc34 <printIsaError+0x24>
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	01 f5       	brne	.+64     	; 0xc64 <printIsaError+0x54>
     c24:	0b c0       	rjmp	.+22     	; 0xc3c <printIsaError+0x2c>
     c26:	85 30       	cpi	r24, 0x05	; 5
     c28:	a9 f0       	breq	.+42     	; 0xc54 <printIsaError+0x44>
     c2a:	85 30       	cpi	r24, 0x05	; 5
     c2c:	78 f0       	brcs	.+30     	; 0xc4c <printIsaError+0x3c>
     c2e:	86 30       	cpi	r24, 0x06	; 6
     c30:	c9 f4       	brne	.+50     	; 0xc64 <printIsaError+0x54>
     c32:	14 c0       	rjmp	.+40     	; 0xc5c <printIsaError+0x4c>
	{
	case LINK_CAPACITY_ERROR :
	printf ("ISA_ERROR : LINK_CAPACITY_ERROR \n\r" );
     c34:	00 d0       	rcall	.+0      	; 0xc36 <printIsaError+0x26>
     c36:	86 e3       	ldi	r24, 0x36	; 54
     c38:	92 e0       	ldi	r25, 0x02	; 2
     c3a:	17 c0       	rjmp	.+46     	; 0xc6a <printIsaError+0x5a>
	break;
	case NEIGHBOR_CAPACITY_ERROR :
		printf ("ISA_ERROR : NEIGHBOR_CAPACITY_ERROR\n\r" );
     c3c:	00 d0       	rcall	.+0      	; 0xc3e <printIsaError+0x2e>
     c3e:	89 e5       	ldi	r24, 0x59	; 89
     c40:	92 e0       	ldi	r25, 0x02	; 2
     c42:	13 c0       	rjmp	.+38     	; 0xc6a <printIsaError+0x5a>
		break;
	case TRANSMIT_QUEUE_CAPACITY_ERROR :
		printf ("ISA_ERROR : TRANSMIT_QUEUE_CAPACITY_ERROR\n\r" );
     c44:	00 d0       	rcall	.+0      	; 0xc46 <printIsaError+0x36>
     c46:	8f e7       	ldi	r24, 0x7F	; 127
     c48:	92 e0       	ldi	r25, 0x02	; 2
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <printIsaError+0x5a>
		break;
	case MAX_PAYLOAD_ERROR :
		printf ("ISA_ERROR : MAX_PAYLOAD_ERROR\n\r");
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <printIsaError+0x3e>
     c4e:	8b ea       	ldi	r24, 0xAB	; 171
     c50:	92 e0       	ldi	r25, 0x02	; 2
     c52:	0b c0       	rjmp	.+22     	; 0xc6a <printIsaError+0x5a>
		break;
	case CANDIDATE_CAPACITY_ERROR :
		printf ("ISA_ERROR : CANDIDATE CAPACITY ERROR\n\r");
     c54:	00 d0       	rcall	.+0      	; 0xc56 <printIsaError+0x46>
     c56:	8b ec       	ldi	r24, 0xCB	; 203
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	07 c0       	rjmp	.+14     	; 0xc6a <printIsaError+0x5a>
		break;
	case GRAPH_CAPACITY_ERROR :
			printf ("ISA_ERROR : GRAPH CAPACITY ERROR\n\r");
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <printIsaError+0x4e>
     c5e:	82 ef       	ldi	r24, 0xF2	; 242
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	03 c0       	rjmp	.+6      	; 0xc6a <printIsaError+0x5a>
			break;
	default: printf ("Unknown ISA_ERROR");
     c64:	00 d0       	rcall	.+0      	; 0xc66 <printIsaError+0x56>
     c66:	85 e1       	ldi	r24, 0x15	; 21
     c68:	93 e0       	ldi	r25, 0x03	; 3
     c6a:	ed b7       	in	r30, 0x3d	; 61
     c6c:	fe b7       	in	r31, 0x3e	; 62
     c6e:	92 83       	std	Z+2, r25	; 0x02
     c70:	81 83       	std	Z+1, r24	; 0x01
     c72:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	08 95       	ret

00000c7c <findGraph>:
	 nrk_time_get(&lastSentTime);

}


DLMO_GRAPH* findGraph(uint16_t graphId){
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
	for(uint8_t i=0;i<DLMO_GRAPH_MAX_COUNT;i++)
		{
			if(graphId == dlmoGraph[i].index) return &dlmoGraph[i];
     c80:	ba 01       	movw	r22, r20
     c82:	fb 01       	movw	r30, r22
     c84:	ee 0f       	add	r30, r30
     c86:	ff 1f       	adc	r31, r31
     c88:	33 e0       	ldi	r19, 0x03	; 3
     c8a:	66 0f       	add	r22, r22
     c8c:	77 1f       	adc	r23, r23
     c8e:	3a 95       	dec	r19
     c90:	e1 f7       	brne	.-8      	; 0xc8a <findGraph+0xe>
     c92:	e6 0f       	add	r30, r22
     c94:	f7 1f       	adc	r31, r23
     c96:	e7 5a       	subi	r30, 0xA7	; 167
     c98:	fe 4e       	sbci	r31, 0xEE	; 238
     c9a:	60 81       	ld	r22, Z
     c9c:	71 81       	ldd	r23, Z+1	; 0x01
     c9e:	86 17       	cp	r24, r22
     ca0:	97 07       	cpc	r25, r23
     ca2:	39 f4       	brne	.+14     	; 0xcb2 <findGraph+0x36>
     ca4:	8a e0       	ldi	r24, 0x0A	; 10
     ca6:	48 9f       	mul	r20, r24
     ca8:	90 01       	movw	r18, r0
     caa:	11 24       	eor	r1, r1
     cac:	27 5a       	subi	r18, 0xA7	; 167
     cae:	3e 4e       	sbci	r19, 0xEE	; 238
     cb0:	07 c0       	rjmp	.+14     	; 0xcc0 <findGraph+0x44>
     cb2:	4f 5f       	subi	r20, 0xFF	; 255
     cb4:	5f 4f       	sbci	r21, 0xFF	; 255

}


DLMO_GRAPH* findGraph(uint16_t graphId){
	for(uint8_t i=0;i<DLMO_GRAPH_MAX_COUNT;i++)
     cb6:	4a 30       	cpi	r20, 0x0A	; 10
     cb8:	51 05       	cpc	r21, r1
     cba:	11 f7       	brne	.-60     	; 0xc80 <findGraph+0x4>
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
		{
			if(graphId == dlmoGraph[i].index) return &dlmoGraph[i];
		}
	return NULL;
}
     cc0:	c9 01       	movw	r24, r18
     cc2:	08 95       	ret

00000cc4 <findNeighbor>:

DLMO_NEIGHBOR* findNeighbor(uint16_t neighborId){
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	50 e0       	ldi	r21, 0x00	; 0
	for(uint8_t i=0;i<DLMO_NEIGHBOR_MAX_COUNT;i++)
		{
			if(neighborId == dlmoNeighbor[i].index) return &dlmoNeighbor[i];
     cc8:	fa 01       	movw	r30, r20
     cca:	b4 e0       	ldi	r27, 0x04	; 4
     ccc:	ee 0f       	add	r30, r30
     cce:	ff 1f       	adc	r31, r31
     cd0:	ba 95       	dec	r27
     cd2:	e1 f7       	brne	.-8      	; 0xccc <findNeighbor+0x8>
     cd4:	e4 0f       	add	r30, r20
     cd6:	f5 1f       	adc	r31, r21
     cd8:	e2 54       	subi	r30, 0x42	; 66
     cda:	fe 4e       	sbci	r31, 0xEE	; 238
     cdc:	61 81       	ldd	r22, Z+1	; 0x01
     cde:	72 81       	ldd	r23, Z+2	; 0x02
     ce0:	86 17       	cp	r24, r22
     ce2:	97 07       	cpc	r25, r23
     ce4:	39 f4       	brne	.+14     	; 0xcf4 <findNeighbor+0x30>
     ce6:	81 e1       	ldi	r24, 0x11	; 17
     ce8:	48 9f       	mul	r20, r24
     cea:	90 01       	movw	r18, r0
     cec:	11 24       	eor	r1, r1
     cee:	22 54       	subi	r18, 0x42	; 66
     cf0:	3e 4e       	sbci	r19, 0xEE	; 238
     cf2:	07 c0       	rjmp	.+14     	; 0xd02 <findNeighbor+0x3e>
     cf4:	4f 5f       	subi	r20, 0xFF	; 255
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
		}
	return NULL;
}

DLMO_NEIGHBOR* findNeighbor(uint16_t neighborId){
	for(uint8_t i=0;i<DLMO_NEIGHBOR_MAX_COUNT;i++)
     cf8:	40 31       	cpi	r20, 0x10	; 16
     cfa:	51 05       	cpc	r21, r1
     cfc:	29 f7       	brne	.-54     	; 0xcc8 <findNeighbor+0x4>
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
		{
			if(neighborId == dlmoNeighbor[i].index) return &dlmoNeighbor[i];
		}
	return NULL;
}
     d02:	c9 01       	movw	r24, r18
     d04:	08 95       	ret

00000d06 <isTransmitLinkPresent>:
         |		true
         |		false
         *-------------------------------------------------------------------*/


bool isTransmitLinkPresent (uint8_t *payload){
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	dc 01       	movw	r26, r24
	uint8_t index;
	 uint8_t graphType;
		 //check the link type

	 DLMO_DROUT * dRout = &payload[DROUT_INDEX];
     d0c:	ec 01       	movw	r28, r24
     d0e:	24 96       	adiw	r28, 0x04	; 4
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	62 2f       	mov	r22, r18
     d16:	83 2f       	mov	r24, r19

	for (index = 0; index < DLMO_LINK_MAX_COUNT; index++)
	{
		//first find the graph type
		graphType = ISAMASK(dlmoLink[index].typeInfo,GRAPH_TYPE_MASK);
     d18:	a9 01       	movw	r20, r18
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	fa 01       	movw	r30, r20
     d20:	93 e0       	ldi	r25, 0x03	; 3
     d22:	ee 0f       	add	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	9a 95       	dec	r25
     d28:	e1 f7       	brne	.-8      	; 0xd22 <isTransmitLinkPresent+0x1c>
     d2a:	e4 0f       	add	r30, r20
     d2c:	f5 1f       	adc	r31, r21
     d2e:	e7 59       	subi	r30, 0x97	; 151
     d30:	f0 4f       	sbci	r31, 0xF0	; 240
     d32:	97 81       	ldd	r25, Z+7	; 0x07
		graphType = SHIFTRIGHT(graphType,GRAPH_TYPE_BIT);

				if (dlmoLink[index].isPresent == true && dlmoLink[index].linkType == TX_NO_ADV ) {	//this is a valid TX link
     d34:	a9 01       	movw	r20, r18
     d36:	44 0f       	add	r20, r20
     d38:	55 1f       	adc	r21, r21
     d3a:	fa 01       	movw	r30, r20
     d3c:	73 e0       	ldi	r23, 0x03	; 3
     d3e:	ee 0f       	add	r30, r30
     d40:	ff 1f       	adc	r31, r31
     d42:	7a 95       	dec	r23
     d44:	e1 f7       	brne	.-8      	; 0xd3e <isTransmitLinkPresent+0x38>
     d46:	e4 0f       	add	r30, r20
     d48:	f5 1f       	adc	r31, r21
     d4a:	e7 59       	subi	r30, 0x97	; 151
     d4c:	f0 4f       	sbci	r31, 0xF0	; 240
     d4e:	40 81       	ld	r20, Z
     d50:	44 23       	and	r20, r20
     d52:	09 f4       	brne	.+2      	; 0xd56 <isTransmitLinkPresent+0x50>
     d54:	63 c0       	rjmp	.+198    	; 0xe1c <isTransmitLinkPresent+0x116>
     d56:	a9 01       	movw	r20, r18
     d58:	44 0f       	add	r20, r20
     d5a:	55 1f       	adc	r21, r21
     d5c:	fa 01       	movw	r30, r20
     d5e:	73 e0       	ldi	r23, 0x03	; 3
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	7a 95       	dec	r23
     d66:	e1 f7       	brne	.-8      	; 0xd60 <isTransmitLinkPresent+0x5a>
     d68:	e4 0f       	add	r30, r20
     d6a:	f5 1f       	adc	r31, r21
     d6c:	e7 59       	subi	r30, 0x97	; 151
     d6e:	f0 4f       	sbci	r31, 0xF0	; 240
     d70:	44 81       	ldd	r20, Z+4	; 0x04
     d72:	41 30       	cpi	r20, 0x01	; 1
     d74:	09 f0       	breq	.+2      	; 0xd78 <isTransmitLinkPresent+0x72>
     d76:	52 c0       	rjmp	.+164    	; 0xe1c <isTransmitLinkPresent+0x116>
	 DLMO_DROUT * dRout = &payload[DROUT_INDEX];

	for (index = 0; index < DLMO_LINK_MAX_COUNT; index++)
	{
		//first find the graph type
		graphType = ISAMASK(dlmoLink[index].typeInfo,GRAPH_TYPE_MASK);
     d78:	90 73       	andi	r25, 0x30	; 48
		graphType = SHIFTRIGHT(graphType,GRAPH_TYPE_BIT);
     d7a:	92 95       	swap	r25
     d7c:	9f 70       	andi	r25, 0x0F	; 15

				if (dlmoLink[index].isPresent == true && dlmoLink[index].linkType == TX_NO_ADV ) {	//this is a valid TX link
					//the link neighbor is equal to payload destID  			and the  graph type is NEIGHBOR or GRAPH_NEIGHBOR			or 	 									link graphId is equal to the message graphID and the link type is GRAPH or GRAPH_NEIGHBOR
					if ((dlmoLink[index].neighbor->index == payload[DEST_INDEX] && (graphType == NEIGHBOR || graphType == GRAPH_NEIGHBOR))|| (dlmoLink[index].graphPtr->index !=0 && dlmoLink[index].graphPtr->index==dRout->GraphId&& (graphType == GRAPH || graphType == GRAPH_NEIGHBOR)) )
     d7e:	a9 01       	movw	r20, r18
     d80:	44 0f       	add	r20, r20
     d82:	55 1f       	adc	r21, r21
     d84:	fa 01       	movw	r30, r20
     d86:	73 e0       	ldi	r23, 0x03	; 3
     d88:	ee 0f       	add	r30, r30
     d8a:	ff 1f       	adc	r31, r31
     d8c:	7a 95       	dec	r23
     d8e:	e1 f7       	brne	.-8      	; 0xd88 <isTransmitLinkPresent+0x82>
     d90:	e4 0f       	add	r30, r20
     d92:	f5 1f       	adc	r31, r21
     d94:	e7 59       	subi	r30, 0x97	; 151
     d96:	f0 4f       	sbci	r31, 0xF0	; 240
     d98:	00 84       	ldd	r0, Z+8	; 0x08
     d9a:	f1 85       	ldd	r31, Z+9	; 0x09
     d9c:	e0 2d       	mov	r30, r0
     d9e:	13 96       	adiw	r26, 0x03	; 3
     da0:	4c 91       	ld	r20, X
     da2:	13 97       	sbiw	r26, 0x03	; 3
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	01 80       	ldd	r0, Z+1	; 0x01
     da8:	f2 81       	ldd	r31, Z+2	; 0x02
     daa:	e0 2d       	mov	r30, r0
     dac:	e4 17       	cp	r30, r20
     dae:	f5 07       	cpc	r31, r21
     db0:	21 f4       	brne	.+8      	; 0xdba <isTransmitLinkPresent+0xb4>
     db2:	99 23       	and	r25, r25
     db4:	d9 f1       	breq	.+118    	; 0xe2c <isTransmitLinkPresent+0x126>
     db6:	92 30       	cpi	r25, 0x02	; 2
     db8:	c9 f1       	breq	.+114    	; 0xe2c <isTransmitLinkPresent+0x126>
     dba:	46 2f       	mov	r20, r22
     dbc:	58 2f       	mov	r21, r24
     dbe:	44 0f       	add	r20, r20
     dc0:	55 1f       	adc	r21, r21
     dc2:	fa 01       	movw	r30, r20
     dc4:	73 e0       	ldi	r23, 0x03	; 3
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	7a 95       	dec	r23
     dcc:	e1 f7       	brne	.-8      	; 0xdc6 <isTransmitLinkPresent+0xc0>
     dce:	e4 0f       	add	r30, r20
     dd0:	f5 1f       	adc	r31, r21
     dd2:	e7 59       	subi	r30, 0x97	; 151
     dd4:	f0 4f       	sbci	r31, 0xF0	; 240
     dd6:	02 84       	ldd	r0, Z+10	; 0x0a
     dd8:	f3 85       	ldd	r31, Z+11	; 0x0b
     dda:	e0 2d       	mov	r30, r0
     ddc:	40 81       	ld	r20, Z
     dde:	51 81       	ldd	r21, Z+1	; 0x01
     de0:	41 15       	cp	r20, r1
     de2:	51 05       	cpc	r21, r1
     de4:	d9 f0       	breq	.+54     	; 0xe1c <isTransmitLinkPresent+0x116>
     de6:	46 2f       	mov	r20, r22
     de8:	58 2f       	mov	r21, r24
     dea:	44 0f       	add	r20, r20
     dec:	55 1f       	adc	r21, r21
     dee:	fa 01       	movw	r30, r20
     df0:	83 e0       	ldi	r24, 0x03	; 3
     df2:	ee 0f       	add	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	8a 95       	dec	r24
     df8:	e1 f7       	brne	.-8      	; 0xdf2 <isTransmitLinkPresent+0xec>
     dfa:	e4 0f       	add	r30, r20
     dfc:	f5 1f       	adc	r31, r21
     dfe:	e7 59       	subi	r30, 0x97	; 151
     e00:	f0 4f       	sbci	r31, 0xF0	; 240
     e02:	02 84       	ldd	r0, Z+10	; 0x0a
     e04:	f3 85       	ldd	r31, Z+11	; 0x0b
     e06:	e0 2d       	mov	r30, r0
     e08:	4a 81       	ldd	r20, Y+2	; 0x02
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	60 81       	ld	r22, Z
     e0e:	71 81       	ldd	r23, Z+1	; 0x01
     e10:	64 17       	cp	r22, r20
     e12:	75 07       	cpc	r23, r21
     e14:	19 f4       	brne	.+6      	; 0xe1c <isTransmitLinkPresent+0x116>
     e16:	91 50       	subi	r25, 0x01	; 1
     e18:	92 30       	cpi	r25, 0x02	; 2
     e1a:	40 f0       	brcs	.+16     	; 0xe2c <isTransmitLinkPresent+0x126>
     e1c:	2f 5f       	subi	r18, 0xFF	; 255
     e1e:	3f 4f       	sbci	r19, 0xFF	; 255
	 uint8_t graphType;
		 //check the link type

	 DLMO_DROUT * dRout = &payload[DROUT_INDEX];

	for (index = 0; index < DLMO_LINK_MAX_COUNT; index++)
     e20:	24 31       	cpi	r18, 0x14	; 20
     e22:	31 05       	cpc	r19, r1
     e24:	09 f0       	breq	.+2      	; 0xe28 <isTransmitLinkPresent+0x122>
     e26:	76 cf       	rjmp	.-276    	; 0xd14 <isTransmitLinkPresent+0xe>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <isTransmitLinkPresent+0x128>
     e2c:	81 e0       	ldi	r24, 0x01	; 1
					if ((dlmoLink[index].neighbor->index == payload[DEST_INDEX] && (graphType == NEIGHBOR || graphType == GRAPH_NEIGHBOR))|| (dlmoLink[index].graphPtr->index !=0 && dlmoLink[index].graphPtr->index==dRout->GraphId&& (graphType == GRAPH || graphType == GRAPH_NEIGHBOR)) )
					return true;
				}
			}
	return false;		//we do not have a link that is configured for this graphId
}
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	08 95       	ret

00000e34 <isa_get_slots_until_next_wakeup>:
 *
 * Argument: current_slot is the current slot
 * Return: uint16_t number of slots until the next wakeup
 */
uint16_t isa_get_slots_until_next_wakeup (uint16_t current_global_slot)
{
     e34:	4f 92       	push	r4
     e36:	5f 92       	push	r5
     e38:	6f 92       	push	r6
     e3a:	7f 92       	push	r7
     e3c:	8f 92       	push	r8
     e3e:	9f 92       	push	r9
     e40:	af 92       	push	r10
     e42:	bf 92       	push	r11
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
    uint8_t test_slot;
    uint8_t wrapped_slot;
    uint8_t current_local_slot;
    uint64_t testVariable = 0;

    current_local_slot = current_global_slot%ISA_SLOTS_PER_FRAME;
     e54:	62 e3       	ldi	r22, 0x32	; 50
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	0e 94 d9 46 	call	0x8db2	; 0x8db2 <__udivmodhi4>
     e5c:	f8 2e       	mov	r15, r24
  //  printf("current local slot %d\r\n",current_local_slot);
    testVariable |= ((uint64_t)1) << (current_local_slot+1);
     e5e:	c8 2f       	mov	r28, r24
     e60:	d0 e0       	ldi	r29, 0x00	; 0
     e62:	8e 01       	movw	r16, r28
     e64:	0f 5f       	subi	r16, 0xFF	; 255
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	21 e0       	ldi	r18, 0x01	; 1
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 02 45 	call	0x8a04	; 0x8a04 <__ashldi3>

    for (test_slot = current_local_slot+1; test_slot < ISA_SLOTS_PER_FRAME; test_slot++) {
     e7c:	1f 2d       	mov	r17, r15
     e7e:	1f 5f       	subi	r17, 0xFF	; 255

            if(isa_slot & testVariable) { 	//slot is  scheduled
     e80:	70 90 dd 10 	lds	r7, 0x10DD
     e84:	80 90 de 10 	lds	r8, 0x10DE
     e88:	90 90 df 10 	lds	r9, 0x10DF
     e8c:	a0 90 e0 10 	lds	r10, 0x10E0
     e90:	b0 90 e1 10 	lds	r11, 0x10E1
     e94:	c0 90 e2 10 	lds	r12, 0x10E2
     e98:	d0 90 e3 10 	lds	r13, 0x10E3
     e9c:	e0 90 e4 10 	lds	r14, 0x10E4

    current_local_slot = current_global_slot%ISA_SLOTS_PER_FRAME;
  //  printf("current local slot %d\r\n",current_local_slot);
    testVariable |= ((uint64_t)1) << (current_local_slot+1);

    for (test_slot = current_local_slot+1; test_slot < ISA_SLOTS_PER_FRAME; test_slot++) {
     ea0:	21 c0       	rjmp	.+66     	; 0xee4 <isa_get_slots_until_next_wakeup+0xb0>

            if(isa_slot & testVariable) { 	//slot is  scheduled
     ea2:	e2 2f       	mov	r30, r18
     ea4:	e7 21       	and	r30, r7
     ea6:	43 2e       	mov	r4, r19
     ea8:	48 20       	and	r4, r8
     eaa:	54 2e       	mov	r5, r20
     eac:	59 20       	and	r5, r9
     eae:	65 2e       	mov	r6, r21
     eb0:	6a 20       	and	r6, r10
     eb2:	06 2f       	mov	r16, r22
     eb4:	0b 21       	and	r16, r11
     eb6:	b7 2f       	mov	r27, r23
     eb8:	bc 21       	and	r27, r12
     eba:	a8 2f       	mov	r26, r24
     ebc:	ad 21       	and	r26, r13
     ebe:	f9 2f       	mov	r31, r25
     ec0:	fe 21       	and	r31, r14
     ec2:	e4 29       	or	r30, r4
     ec4:	e5 29       	or	r30, r5
     ec6:	e6 29       	or	r30, r6
     ec8:	e0 2b       	or	r30, r16
     eca:	eb 2b       	or	r30, r27
     ecc:	ea 2b       	or	r30, r26
     ece:	ef 2b       	or	r30, r31
     ed0:	29 f0       	breq	.+10     	; 0xedc <isa_get_slots_until_next_wakeup+0xa8>
            	min_slot = test_slot-current_local_slot;
     ed2:	21 2f       	mov	r18, r17
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	2c 1b       	sub	r18, r28
     ed8:	3d 0b       	sbc	r19, r29
            	    	return min_slot;
     eda:	36 c0       	rjmp	.+108    	; 0xf48 <isa_get_slots_until_next_wakeup+0x114>

            }
                testVariable = testVariable << 1;
     edc:	01 e0       	ldi	r16, 0x01	; 1
     ede:	0e 94 02 45 	call	0x8a04	; 0x8a04 <__ashldi3>

    current_local_slot = current_global_slot%ISA_SLOTS_PER_FRAME;
  //  printf("current local slot %d\r\n",current_local_slot);
    testVariable |= ((uint64_t)1) << (current_local_slot+1);

    for (test_slot = current_local_slot+1; test_slot < ISA_SLOTS_PER_FRAME; test_slot++) {
     ee2:	1f 5f       	subi	r17, 0xFF	; 255
     ee4:	12 33       	cpi	r17, 0x32	; 50
     ee6:	e8 f2       	brcs	.-70     	; 0xea2 <isa_get_slots_until_next_wakeup+0x6e>
     ee8:	21 e0       	ldi	r18, 0x01	; 1
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	10 e0       	ldi	r17, 0x00	; 0

    // scheduled slot wrapped back

    testVariable = 1;
    for (test_slot = 0; test_slot<=current_local_slot;test_slot++){
	if(isa_slot & testVariable){ //slot is scheduled
     efa:	e2 2f       	mov	r30, r18
     efc:	e7 21       	and	r30, r7
     efe:	43 2e       	mov	r4, r19
     f00:	48 20       	and	r4, r8
     f02:	54 2e       	mov	r5, r20
     f04:	59 20       	and	r5, r9
     f06:	65 2e       	mov	r6, r21
     f08:	6a 20       	and	r6, r10
     f0a:	06 2f       	mov	r16, r22
     f0c:	0b 21       	and	r16, r11
     f0e:	b7 2f       	mov	r27, r23
     f10:	bc 21       	and	r27, r12
     f12:	a8 2f       	mov	r26, r24
     f14:	ad 21       	and	r26, r13
     f16:	f9 2f       	mov	r31, r25
     f18:	fe 21       	and	r31, r14
     f1a:	e4 29       	or	r30, r4
     f1c:	e5 29       	or	r30, r5
     f1e:	e6 29       	or	r30, r6
     f20:	e0 2b       	or	r30, r16
     f22:	eb 2b       	or	r30, r27
     f24:	ea 2b       	or	r30, r26
     f26:	ef 2b       	or	r30, r31
     f28:	39 f0       	breq	.+14     	; 0xf38 <isa_get_slots_until_next_wakeup+0x104>
		min_slot = (ISA_SLOTS_PER_FRAME - current_local_slot + test_slot);
     f2a:	22 e3       	ldi	r18, 0x32	; 50
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	2c 1b       	sub	r18, r28
     f30:	3d 0b       	sbc	r19, r29
     f32:	21 0f       	add	r18, r17
     f34:	31 1d       	adc	r19, r1
			return min_slot;
     f36:	08 c0       	rjmp	.+16     	; 0xf48 <isa_get_slots_until_next_wakeup+0x114>
        }

    // scheduled slot wrapped back

    testVariable = 1;
    for (test_slot = 0; test_slot<=current_local_slot;test_slot++){
     f38:	1f 5f       	subi	r17, 0xFF	; 255
     f3a:	f1 16       	cp	r15, r17
     f3c:	20 f0       	brcs	.+8      	; 0xf46 <isa_get_slots_until_next_wakeup+0x112>
	if(isa_slot & testVariable){ //slot is scheduled
		min_slot = (ISA_SLOTS_PER_FRAME - current_local_slot + test_slot);
			return min_slot;

	}
    testVariable = testVariable << 1;
     f3e:	01 e0       	ldi	r16, 0x01	; 1
     f40:	0e 94 02 45 	call	0x8a04	; 0x8a04 <__ashldi3>
     f44:	da cf       	rjmp	.-76     	; 0xefa <isa_get_slots_until_next_wakeup+0xc6>
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <isa_get_slots_until_next_wakeup+0x116>
	    }
}
     f48:	c9 01       	movw	r24, r18
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	df 90       	pop	r13
     f58:	cf 90       	pop	r12
     f5a:	bf 90       	pop	r11
     f5c:	af 90       	pop	r10
     f5e:	9f 90       	pop	r9
     f60:	8f 90       	pop	r8
     f62:	7f 90       	pop	r7
     f64:	6f 90       	pop	r6
     f66:	5f 90       	pop	r5
     f68:	4f 90       	pop	r4
     f6a:	08 95       	ret

00000f6c <isLinkNeigborApplicable>:
/*
 * if numtries is 0 then we should have the preferred link, else take any of the other links if possible
 */

 bool isLinkNeigborApplicable(ISA_QUEUE* isaQueue, DLMO_LINK * link)
 {
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	fb 01       	movw	r30, r22
	 uint8_t i;
	 if (isaQueue->numTries == 0){
     f72:	dc 01       	movw	r26, r24
     f74:	ac 57       	subi	r26, 0x7C	; 124
     f76:	bf 4f       	sbci	r27, 0xFF	; 255
     f78:	8c 91       	ld	r24, X
     f7a:	c2 85       	ldd	r28, Z+10	; 0x0a
     f7c:	d3 85       	ldd	r29, Z+11	; 0x0b
     f7e:	88 23       	and	r24, r24
     f80:	59 f0       	breq	.+22     	; 0xf98 <isLinkNeigborApplicable+0x2c>
		 if( link->graphPtr->neighbor[0] == link->neighbor->index ) return true;
	 return false;
	 }
	 //for the number of neighbors configured as alternate routes in this graph
	 for (i = 0; i< SHIFTRIGHT(ISAMASK(link->graphPtr->info, NEIGHBOR_COUNT_MASK),NEIGHBOR_COUNT_LOWER_BIT );i++){
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	80 77       	andi	r24, 0x70	; 112
     f88:	90 70       	andi	r25, 0x00	; 0
     f8a:	44 e0       	ldi	r20, 0x04	; 4
     f8c:	95 95       	asr	r25
     f8e:	87 95       	ror	r24
     f90:	4a 95       	dec	r20
     f92:	e1 f7       	brne	.-8      	; 0xf8c <isLinkNeigborApplicable+0x20>
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	20 c0       	rjmp	.+64     	; 0xfd8 <isLinkNeigborApplicable+0x6c>

/*
 * if numtries is 0 then we should have the preferred link, else take any of the other links if possible
 */

 bool isLinkNeigborApplicable(ISA_QUEUE* isaQueue, DLMO_LINK * link)
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	00 84       	ldd	r0, Z+8	; 0x08
     f9c:	f1 85       	ldd	r31, Z+9	; 0x09
     f9e:	e0 2d       	mov	r30, r0
     fa0:	4c 81       	ldd	r20, Y+4	; 0x04
     fa2:	5d 81       	ldd	r21, Y+5	; 0x05
     fa4:	21 81       	ldd	r18, Z+1	; 0x01
     fa6:	32 81       	ldd	r19, Z+2	; 0x02
     fa8:	42 17       	cp	r20, r18
     faa:	53 07       	cpc	r21, r19
     fac:	d9 f4       	brne	.+54     	; 0xfe4 <isLinkNeigborApplicable+0x78>
     fae:	11 c0       	rjmp	.+34     	; 0xfd2 <isLinkNeigborApplicable+0x66>
		 if( link->graphPtr->neighbor[0] == link->neighbor->index ) return true;
	 return false;
	 }
	 //for the number of neighbors configured as alternate routes in this graph
	 for (i = 0; i< SHIFTRIGHT(ISAMASK(link->graphPtr->info, NEIGHBOR_COUNT_MASK),NEIGHBOR_COUNT_LOWER_BIT );i++){
		 if (link->graphPtr->neighbor[i] == link->neighbor->index) return true;
     fb0:	12 96       	adiw	r26, 0x02	; 2
     fb2:	aa 0f       	add	r26, r26
     fb4:	bb 1f       	adc	r27, r27
     fb6:	ac 0f       	add	r26, r28
     fb8:	bd 1f       	adc	r27, r29
     fba:	40 85       	ldd	r20, Z+8	; 0x08
     fbc:	51 85       	ldd	r21, Z+9	; 0x09
     fbe:	6d 91       	ld	r22, X+
     fc0:	7c 91       	ld	r23, X
     fc2:	da 01       	movw	r26, r20
     fc4:	11 96       	adiw	r26, 0x01	; 1
     fc6:	4d 91       	ld	r20, X+
     fc8:	5c 91       	ld	r21, X
     fca:	12 97       	sbiw	r26, 0x02	; 2
     fcc:	64 17       	cp	r22, r20
     fce:	75 07       	cpc	r23, r21
     fd0:	11 f4       	brne	.+4      	; 0xfd6 <isLinkNeigborApplicable+0x6a>
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	07 c0       	rjmp	.+14     	; 0xfe4 <isLinkNeigborApplicable+0x78>
	 if (isaQueue->numTries == 0){
		 if( link->graphPtr->neighbor[0] == link->neighbor->index ) return true;
	 return false;
	 }
	 //for the number of neighbors configured as alternate routes in this graph
	 for (i = 0; i< SHIFTRIGHT(ISAMASK(link->graphPtr->info, NEIGHBOR_COUNT_MASK),NEIGHBOR_COUNT_LOWER_BIT );i++){
     fd6:	2f 5f       	subi	r18, 0xFF	; 255
     fd8:	a2 2f       	mov	r26, r18
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	a8 17       	cp	r26, r24
     fde:	b9 07       	cpc	r27, r25
     fe0:	3c f3       	brlt	.-50     	; 0xfb0 <isLinkNeigborApplicable+0x44>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
		 if (link->graphPtr->neighbor[i] == link->neighbor->index) return true;
	 }
	 return false;
 }
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret

00000fea <getHighPriorityEntry>:

 ISA_QUEUE * getHighPriorityEntry(DLMO_LINK * link){
     fea:	2f 92       	push	r2
     fec:	3f 92       	push	r3
     fee:	4f 92       	push	r4
     ff0:	5f 92       	push	r5
     ff2:	6f 92       	push	r6
     ff4:	7f 92       	push	r7
     ff6:	8f 92       	push	r8
     ff8:	9f 92       	push	r9
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	2b 97       	sbiw	r28, 0x0b	; 11
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	3c 01       	movw	r6, r24
	 bool found = false;
	 uint8_t i;
	 uint8_t graphType;
	 //check the link type

	 graphType = ISAMASK(link->typeInfo,GRAPH_TYPE_MASK);
    1020:	dc 01       	movw	r26, r24
    1022:	17 96       	adiw	r26, 0x07	; 7
    1024:	0c 91       	ld	r16, X
    1026:	17 97       	sbiw	r26, 0x07	; 7
    1028:	00 73       	andi	r16, 0x30	; 48
	 graphType = SHIFTRIGHT(graphType,GRAPH_TYPE_BIT);
    102a:	02 95       	swap	r16
    102c:	0f 70       	andi	r16, 0x0F	; 15



if (graphType == 0){	//if the graph type is 0
    102e:	09 f0       	breq	.+2      	; 0x1032 <getHighPriorityEntry+0x48>
    1030:	c3 c0       	rjmp	.+390    	; 0x11b8 <getHighPriorityEntry+0x1ce>
    1032:	10 e0       	ldi	r17, 0x00	; 0
	DIRECT_NEIGHBOR:
	if (link->neighbor == NULL || link->neighbor->isPresent == false) return NULL;
    1034:	d3 01       	movw	r26, r6
    1036:	18 96       	adiw	r26, 0x08	; 8
    1038:	ed 91       	ld	r30, X+
    103a:	fc 91       	ld	r31, X
    103c:	19 97       	sbiw	r26, 0x09	; 9
    103e:	30 97       	sbiw	r30, 0x00	; 0
    1040:	09 f4       	brne	.+2      	; 0x1044 <getHighPriorityEntry+0x5a>
    1042:	a0 c1       	rjmp	.+832    	; 0x1384 <getHighPriorityEntry+0x39a>
    1044:	80 81       	ld	r24, Z
    1046:	88 23       	and	r24, r24
    1048:	09 f4       	brne	.+2      	; 0x104c <getHighPriorityEntry+0x62>
    104a:	9c c1       	rjmp	.+824    	; 0x1384 <getHighPriorityEntry+0x39a>
	neighbor = link->neighbor->index;
    104c:	21 81       	ldd	r18, Z+1	; 0x01
    104e:	32 81       	ldd	r19, Z+2	; 0x02
    1050:	3a 83       	std	Y+2, r19	; 0x02
    1052:	29 83       	std	Y+1, r18	; 0x01
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	00 e0       	ldi	r16, 0x00	; 0
	for (i = 0; i < TRANSMIT_QUEUE_MAX_SIZE; i++){
		 if (isaQueue[i].usedSlot == true && isaQueue[i].transmitPending == true && isaQueue[i].neighbor == neighbor){
    105e:	a5 e8       	ldi	r26, 0x85	; 133
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	2a 9f       	mul	r18, r26
    1064:	c0 01       	movw	r24, r0
    1066:	2b 9f       	mul	r18, r27
    1068:	90 0d       	add	r25, r0
    106a:	3a 9f       	mul	r19, r26
    106c:	90 0d       	add	r25, r0
    106e:	11 24       	eor	r1, r1
    1070:	82 53       	subi	r24, 0x32	; 50
    1072:	9d 4e       	sbci	r25, 0xED	; 237
    1074:	f6 e7       	ldi	r31, 0x76	; 118
    1076:	6f 2e       	mov	r6, r31
    1078:	71 2c       	mov	r7, r1
    107a:	68 0e       	add	r6, r24
    107c:	79 1e       	adc	r7, r25
    107e:	f3 01       	movw	r30, r6
    1080:	60 80       	ld	r6, Z
    1082:	66 20       	and	r6, r6
    1084:	09 f4       	brne	.+2      	; 0x1088 <getHighPriorityEntry+0x9e>
    1086:	8c c0       	rjmp	.+280    	; 0x11a0 <getHighPriorityEntry+0x1b6>
    1088:	e5 e7       	ldi	r30, 0x75	; 117
    108a:	6e 2e       	mov	r6, r30
    108c:	71 2c       	mov	r7, r1
    108e:	68 0e       	add	r6, r24
    1090:	79 1e       	adc	r7, r25
    1092:	f3 01       	movw	r30, r6
    1094:	60 80       	ld	r6, Z
    1096:	66 20       	and	r6, r6
    1098:	09 f4       	brne	.+2      	; 0x109c <getHighPriorityEntry+0xb2>
    109a:	82 c0       	rjmp	.+260    	; 0x11a0 <getHighPriorityEntry+0x1b6>
    109c:	fa e7       	ldi	r31, 0x7A	; 122
    109e:	6f 2e       	mov	r6, r31
    10a0:	71 2c       	mov	r7, r1
    10a2:	68 0e       	add	r6, r24
    10a4:	79 1e       	adc	r7, r25
    10a6:	f3 01       	movw	r30, r6
    10a8:	60 80       	ld	r6, Z
    10aa:	71 80       	ldd	r7, Z+1	; 0x01
    10ac:	e9 81       	ldd	r30, Y+1	; 0x01
    10ae:	fa 81       	ldd	r31, Y+2	; 0x02
    10b0:	6e 16       	cp	r6, r30
    10b2:	7f 06       	cpc	r7, r31
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <getHighPriorityEntry+0xce>
    10b6:	74 c0       	rjmp	.+232    	; 0x11a0 <getHighPriorityEntry+0x1b6>
			 if (found == false){
    10b8:	00 23       	and	r16, r16
    10ba:	b1 f4       	brne	.+44     	; 0x10e8 <getHighPriorityEntry+0xfe>
				 found = true;
				 priority = isaQueue[i].priority;
    10bc:	fc 01       	movw	r30, r24
    10be:	e7 58       	subi	r30, 0x87	; 135
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	10 81       	ld	r17, Z
    10c4:	ab 01       	movw	r20, r22
    10c6:	42 53       	subi	r20, 0x32	; 50
    10c8:	5d 4e       	sbci	r21, 0xED	; 237
				 tempIndex = &isaQueue[i];
				 time.nano_secs = isaQueue[i].time.nano_secs;
    10ca:	fc 01       	movw	r30, r24
    10cc:	e0 58       	subi	r30, 0x80	; 128
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	80 80       	ld	r8, Z
    10d2:	91 80       	ldd	r9, Z+1	; 0x01
    10d4:	a2 80       	ldd	r10, Z+2	; 0x02
    10d6:	b3 80       	ldd	r11, Z+3	; 0x03
				 time.secs = isaQueue[i].time.secs;
    10d8:	84 58       	subi	r24, 0x84	; 132
    10da:	9f 4f       	sbci	r25, 0xFF	; 255
    10dc:	fc 01       	movw	r30, r24
    10de:	c0 80       	ld	r12, Z
    10e0:	d1 80       	ldd	r13, Z+1	; 0x01
    10e2:	e2 80       	ldd	r14, Z+2	; 0x02
    10e4:	f3 80       	ldd	r15, Z+3	; 0x03
    10e6:	01 e0       	ldi	r16, 0x01	; 1
			 }
			 //			if the priority is greater					or	(	priority is the same    		and ( seconds is less					or 	nanosecs is less))
		 if (found == true && ( priority < isaQueue[i].priority  || ( (priority == isaQueue[i].priority) && ( time.secs > isaQueue[i].time.secs || (time.secs == isaQueue[i].time.secs && time.nano_secs > isaQueue[i].time.nano_secs ))))){
    10e8:	2a 9f       	mul	r18, r26
    10ea:	c0 01       	movw	r24, r0
    10ec:	2b 9f       	mul	r18, r27
    10ee:	90 0d       	add	r25, r0
    10f0:	3a 9f       	mul	r19, r26
    10f2:	90 0d       	add	r25, r0
    10f4:	11 24       	eor	r1, r1
    10f6:	82 53       	subi	r24, 0x32	; 50
    10f8:	9d 4e       	sbci	r25, 0xED	; 237
    10fa:	e9 e7       	ldi	r30, 0x79	; 121
    10fc:	6e 2e       	mov	r6, r30
    10fe:	71 2c       	mov	r7, r1
    1100:	68 0e       	add	r6, r24
    1102:	79 1e       	adc	r7, r25
    1104:	f3 01       	movw	r30, r6
    1106:	40 80       	ld	r4, Z
    1108:	14 15       	cp	r17, r4
    110a:	40 f1       	brcs	.+80     	; 0x115c <getHighPriorityEntry+0x172>
    110c:	60 80       	ld	r6, Z
    110e:	16 15       	cp	r17, r6
    1110:	09 f0       	breq	.+2      	; 0x1114 <getHighPriorityEntry+0x12a>
    1112:	46 c0       	rjmp	.+140    	; 0x11a0 <getHighPriorityEntry+0x1b6>
    1114:	fc e7       	ldi	r31, 0x7C	; 124
    1116:	6f 2e       	mov	r6, r31
    1118:	71 2c       	mov	r7, r1
    111a:	68 0e       	add	r6, r24
    111c:	79 1e       	adc	r7, r25
    111e:	f3 01       	movw	r30, r6
    1120:	20 80       	ld	r2, Z
    1122:	31 80       	ldd	r3, Z+1	; 0x01
    1124:	42 80       	ldd	r4, Z+2	; 0x02
    1126:	53 80       	ldd	r5, Z+3	; 0x03
    1128:	2c 14       	cp	r2, r12
    112a:	3d 04       	cpc	r3, r13
    112c:	4e 04       	cpc	r4, r14
    112e:	5f 04       	cpc	r5, r15
    1130:	a8 f0       	brcs	.+42     	; 0x115c <getHighPriorityEntry+0x172>
    1132:	40 80       	ld	r4, Z
    1134:	51 80       	ldd	r5, Z+1	; 0x01
    1136:	62 80       	ldd	r6, Z+2	; 0x02
    1138:	73 80       	ldd	r7, Z+3	; 0x03
    113a:	c4 14       	cp	r12, r4
    113c:	d5 04       	cpc	r13, r5
    113e:	e6 04       	cpc	r14, r6
    1140:	f7 04       	cpc	r15, r7
    1142:	71 f5       	brne	.+92     	; 0x11a0 <getHighPriorityEntry+0x1b6>
    1144:	80 58       	subi	r24, 0x80	; 128
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	fc 01       	movw	r30, r24
    114a:	40 80       	ld	r4, Z
    114c:	51 80       	ldd	r5, Z+1	; 0x01
    114e:	62 80       	ldd	r6, Z+2	; 0x02
    1150:	73 80       	ldd	r7, Z+3	; 0x03
    1152:	48 14       	cp	r4, r8
    1154:	59 04       	cpc	r5, r9
    1156:	6a 04       	cpc	r6, r10
    1158:	7b 04       	cpc	r7, r11
    115a:	10 f5       	brcc	.+68     	; 0x11a0 <getHighPriorityEntry+0x1b6>
			 priority = isaQueue[i].priority;
    115c:	2a 9f       	mul	r18, r26
    115e:	c0 01       	movw	r24, r0
    1160:	2b 9f       	mul	r18, r27
    1162:	90 0d       	add	r25, r0
    1164:	3a 9f       	mul	r19, r26
    1166:	90 0d       	add	r25, r0
    1168:	11 24       	eor	r1, r1
    116a:	82 53       	subi	r24, 0x32	; 50
    116c:	9d 4e       	sbci	r25, 0xED	; 237
    116e:	ac 01       	movw	r20, r24
    1170:	47 58       	subi	r20, 0x87	; 135
    1172:	5f 4f       	sbci	r21, 0xFF	; 255
    1174:	fa 01       	movw	r30, r20
    1176:	10 81       	ld	r17, Z
    1178:	ab 01       	movw	r20, r22
    117a:	42 53       	subi	r20, 0x32	; 50
    117c:	5d 4e       	sbci	r21, 0xED	; 237
			 tempIndex = &isaQueue[i];
			 time.nano_secs = isaQueue[i].time.nano_secs;
    117e:	e0 e8       	ldi	r30, 0x80	; 128
    1180:	ce 2e       	mov	r12, r30
    1182:	d1 2c       	mov	r13, r1
    1184:	c8 0e       	add	r12, r24
    1186:	d9 1e       	adc	r13, r25
    1188:	f6 01       	movw	r30, r12
    118a:	80 80       	ld	r8, Z
    118c:	91 80       	ldd	r9, Z+1	; 0x01
    118e:	a2 80       	ldd	r10, Z+2	; 0x02
    1190:	b3 80       	ldd	r11, Z+3	; 0x03
			 time.secs = isaQueue[i].time.secs;
    1192:	84 58       	subi	r24, 0x84	; 132
    1194:	9f 4f       	sbci	r25, 0xFF	; 255
    1196:	fc 01       	movw	r30, r24
    1198:	c0 80       	ld	r12, Z
    119a:	d1 80       	ldd	r13, Z+1	; 0x01
    119c:	e2 80       	ldd	r14, Z+2	; 0x02
    119e:	f3 80       	ldd	r15, Z+3	; 0x03
    11a0:	2f 5f       	subi	r18, 0xFF	; 255
    11a2:	3f 4f       	sbci	r19, 0xFF	; 255
    11a4:	6b 57       	subi	r22, 0x7B	; 123
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255

if (graphType == 0){	//if the graph type is 0
	DIRECT_NEIGHBOR:
	if (link->neighbor == NULL || link->neighbor->isPresent == false) return NULL;
	neighbor = link->neighbor->index;
	for (i = 0; i < TRANSMIT_QUEUE_MAX_SIZE; i++){
    11a8:	24 31       	cpi	r18, 0x14	; 20
    11aa:	31 05       	cpc	r19, r1
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <getHighPriorityEntry+0x1c6>
    11ae:	59 cf       	rjmp	.-334    	; 0x1062 <getHighPriorityEntry+0x78>
			 time.secs = isaQueue[i].time.secs;
		 }
	 }

 }
	 if (found == false) {
    11b0:	00 23       	and	r16, r16
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <getHighPriorityEntry+0x1cc>
    11b4:	e7 c0       	rjmp	.+462    	; 0x1384 <getHighPriorityEntry+0x39a>
    11b6:	e8 c0       	rjmp	.+464    	; 0x1388 <getHighPriorityEntry+0x39e>
		 return NULL;
	 }
	 return tempIndex;
}
else if (graphType == 1 || graphType == 2){		//this link is only for graph routing or this link preferres graph over direct neighbor
    11b8:	80 2f       	mov	r24, r16
    11ba:	81 50       	subi	r24, 0x01	; 1
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <getHighPriorityEntry+0x1d8>
    11c0:	e0 c0       	rjmp	.+448    	; 0x1382 <getHighPriorityEntry+0x398>
	//get the graph from the link
	if (link->graphPtr == NULL || link->graphPtr->index == 0) {	//if the graph pointer is null and the graph type is 2, then check for neighbor, else return NULL
    11c2:	d3 01       	movw	r26, r6
    11c4:	1a 96       	adiw	r26, 0x0a	; 10
    11c6:	ed 91       	ld	r30, X+
    11c8:	fc 91       	ld	r31, X
    11ca:	1b 97       	sbiw	r26, 0x0b	; 11
    11cc:	30 97       	sbiw	r30, 0x00	; 0
    11ce:	21 f0       	breq	.+8      	; 0x11d8 <getHighPriorityEntry+0x1ee>
    11d0:	80 81       	ld	r24, Z
    11d2:	91 81       	ldd	r25, Z+1	; 0x01
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	21 f4       	brne	.+8      	; 0x11e0 <getHighPriorityEntry+0x1f6>
	if (graphType==2)goto DIRECT_NEIGHBOR;
    11d8:	02 30       	cpi	r16, 0x02	; 2
    11da:	09 f0       	breq	.+2      	; 0x11de <getHighPriorityEntry+0x1f4>
    11dc:	d3 c0       	rjmp	.+422    	; 0x1384 <getHighPriorityEntry+0x39a>
    11de:	29 cf       	rjmp	.-430    	; 0x1032 <getHighPriorityEntry+0x48>
    11e0:	44 24       	eor	r4, r4
    11e2:	55 24       	eor	r5, r5
    11e4:	1b 86       	std	Y+11, r1	; 0x0b
    11e6:	1a 86       	std	Y+10, r1	; 0x0a
    11e8:	1d 82       	std	Y+5, r1	; 0x05
    11ea:	10 e0       	ldi	r17, 0x00	; 0
	return NULL;
}
for (i = 0; i < TRANSMIT_QUEUE_MAX_SIZE; i++){
		 if (isaQueue[i].usedSlot == true && isaQueue[i].transmitPending == true ){
    11ec:	65 e8       	ldi	r22, 0x85	; 133
    11ee:	26 2e       	mov	r2, r22
    11f0:	31 2c       	mov	r3, r1
    11f2:	2a 85       	ldd	r18, Y+10	; 0x0a
    11f4:	3b 85       	ldd	r19, Y+11	; 0x0b
    11f6:	22 9d       	mul	r18, r2
    11f8:	f0 01       	movw	r30, r0
    11fa:	23 9d       	mul	r18, r3
    11fc:	f0 0d       	add	r31, r0
    11fe:	32 9d       	mul	r19, r2
    1200:	f0 0d       	add	r31, r0
    1202:	11 24       	eor	r1, r1
    1204:	9f 01       	movw	r18, r30
    1206:	22 53       	subi	r18, 0x32	; 50
    1208:	3d 4e       	sbci	r19, 0xED	; 237
    120a:	d9 01       	movw	r26, r18
    120c:	aa 58       	subi	r26, 0x8A	; 138
    120e:	bf 4f       	sbci	r27, 0xFF	; 255
    1210:	8c 91       	ld	r24, X
    1212:	88 23       	and	r24, r24
    1214:	09 f4       	brne	.+2      	; 0x1218 <getHighPriorityEntry+0x22e>
    1216:	a2 c0       	rjmp	.+324    	; 0x135c <getHighPriorityEntry+0x372>
    1218:	d9 01       	movw	r26, r18
    121a:	ab 58       	subi	r26, 0x8B	; 139
    121c:	bf 4f       	sbci	r27, 0xFF	; 255
    121e:	8c 91       	ld	r24, X
    1220:	88 23       	and	r24, r24
    1222:	09 f4       	brne	.+2      	; 0x1226 <getHighPriorityEntry+0x23c>
    1224:	9b c0       	rjmp	.+310    	; 0x135c <getHighPriorityEntry+0x372>
			 DLMO_DROUT * dRout = &isaQueue[i].tx_buf[DROUT_INDEX];
    1226:	e1 53       	subi	r30, 0x31	; 49
    1228:	fd 4e       	sbci	r31, 0xED	; 237
			 if (dRout->GraphId!=0 && dRout->GraphId == link->graphPtr->index)//If the GraphId matches  (graphId is 8 bits while index is 16 bits)
    122a:	86 81       	ldd	r24, Z+6	; 0x06
    122c:	88 23       	and	r24, r24
    122e:	09 f4       	brne	.+2      	; 0x1232 <getHighPriorityEntry+0x248>
    1230:	95 c0       	rjmp	.+298    	; 0x135c <getHighPriorityEntry+0x372>
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	d3 01       	movw	r26, r6
    1236:	1a 96       	adiw	r26, 0x0a	; 10
    1238:	ed 91       	ld	r30, X+
    123a:	fc 91       	ld	r31, X
    123c:	1b 97       	sbiw	r26, 0x0b	; 11
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	86 17       	cp	r24, r22
    1244:	97 07       	cpc	r25, r23
    1246:	09 f0       	breq	.+2      	; 0x124a <getHighPriorityEntry+0x260>
    1248:	89 c0       	rjmp	.+274    	; 0x135c <getHighPriorityEntry+0x372>
			 {//first time to be transmitted and top preference neighbor for is on this link or second time and second pref or third time and third pref

				 if (isLinkNeigborApplicable(&isaQueue[i], link))
    124a:	f2 01       	movw	r30, r4
    124c:	e2 53       	subi	r30, 0x32	; 50
    124e:	fd 4e       	sbci	r31, 0xED	; 237
    1250:	fa 83       	std	Y+2, r31	; 0x02
    1252:	e9 83       	std	Y+1, r30	; 0x01
    1254:	cf 01       	movw	r24, r30
    1256:	b3 01       	movw	r22, r6
    1258:	28 87       	std	Y+8, r18	; 0x08
    125a:	39 87       	std	Y+9, r19	; 0x09
    125c:	4e 83       	std	Y+6, r20	; 0x06
    125e:	5f 83       	std	Y+7, r21	; 0x07
    1260:	0e 94 b6 07 	call	0xf6c	; 0xf6c <isLinkNeigborApplicable>
    1264:	28 85       	ldd	r18, Y+8	; 0x08
    1266:	39 85       	ldd	r19, Y+9	; 0x09
    1268:	4e 81       	ldd	r20, Y+6	; 0x06
    126a:	5f 81       	ldd	r21, Y+7	; 0x07
    126c:	88 23       	and	r24, r24
    126e:	09 f4       	brne	.+2      	; 0x1272 <getHighPriorityEntry+0x288>
    1270:	75 c0       	rjmp	.+234    	; 0x135c <getHighPriorityEntry+0x372>
				{
				 if (found == false){
    1272:	fd 81       	ldd	r31, Y+5	; 0x05
    1274:	ff 23       	and	r31, r31
    1276:	b1 f4       	brne	.+44     	; 0x12a4 <getHighPriorityEntry+0x2ba>
					 found = true;
					 priority = isaQueue[i].priority;
    1278:	f9 01       	movw	r30, r18
    127a:	e7 58       	subi	r30, 0x87	; 135
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	10 81       	ld	r17, Z
    1280:	49 81       	ldd	r20, Y+1	; 0x01
    1282:	5a 81       	ldd	r21, Y+2	; 0x02
					 tempIndex = &isaQueue[i];
					 time.nano_secs = isaQueue[i].time.nano_secs;
    1284:	f9 01       	movw	r30, r18
    1286:	e0 58       	subi	r30, 0x80	; 128
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	80 80       	ld	r8, Z
    128c:	91 80       	ldd	r9, Z+1	; 0x01
    128e:	a2 80       	ldd	r10, Z+2	; 0x02
    1290:	b3 80       	ldd	r11, Z+3	; 0x03
					 time.secs = isaQueue[i].time.secs;
    1292:	24 58       	subi	r18, 0x84	; 132
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	d9 01       	movw	r26, r18
    1298:	cd 90       	ld	r12, X+
    129a:	dd 90       	ld	r13, X+
    129c:	ed 90       	ld	r14, X+
    129e:	fc 90       	ld	r15, X
    12a0:	b1 e0       	ldi	r27, 0x01	; 1
    12a2:	bd 83       	std	Y+5, r27	; 0x05
				 }
			 //			if the priority is greater					or	(	priority is the same    		and ( seconds is less					or 	nanosecs is less))
		 if (found == true && ( priority < isaQueue[i].priority  || ( (priority == isaQueue[i].priority) && ( time.secs > isaQueue[i].time.secs || (time.secs == isaQueue[i].time.secs && time.nano_secs > isaQueue[i].time.nano_secs ))))){
    12a4:	ea 85       	ldd	r30, Y+10	; 0x0a
    12a6:	fb 85       	ldd	r31, Y+11	; 0x0b
    12a8:	e2 9d       	mul	r30, r2
    12aa:	b0 01       	movw	r22, r0
    12ac:	e3 9d       	mul	r30, r3
    12ae:	70 0d       	add	r23, r0
    12b0:	f2 9d       	mul	r31, r2
    12b2:	70 0d       	add	r23, r0
    12b4:	11 24       	eor	r1, r1
    12b6:	62 53       	subi	r22, 0x32	; 50
    12b8:	7d 4e       	sbci	r23, 0xED	; 237
    12ba:	fb 01       	movw	r30, r22
    12bc:	e7 58       	subi	r30, 0x87	; 135
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	20 81       	ld	r18, Z
    12c2:	12 17       	cp	r17, r18
    12c4:	50 f1       	brcs	.+84     	; 0x131a <getHighPriorityEntry+0x330>
    12c6:	20 81       	ld	r18, Z
    12c8:	12 17       	cp	r17, r18
    12ca:	09 f0       	breq	.+2      	; 0x12ce <getHighPriorityEntry+0x2e4>
    12cc:	47 c0       	rjmp	.+142    	; 0x135c <getHighPriorityEntry+0x372>
    12ce:	9b 01       	movw	r18, r22
    12d0:	24 58       	subi	r18, 0x84	; 132
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	d9 01       	movw	r26, r18
    12d6:	8d 91       	ld	r24, X+
    12d8:	9d 91       	ld	r25, X+
    12da:	0d 90       	ld	r0, X+
    12dc:	bc 91       	ld	r27, X
    12de:	a0 2d       	mov	r26, r0
    12e0:	8c 15       	cp	r24, r12
    12e2:	9d 05       	cpc	r25, r13
    12e4:	ae 05       	cpc	r26, r14
    12e6:	bf 05       	cpc	r27, r15
    12e8:	c0 f0       	brcs	.+48     	; 0x131a <getHighPriorityEntry+0x330>
    12ea:	d9 01       	movw	r26, r18
    12ec:	8d 91       	ld	r24, X+
    12ee:	9d 91       	ld	r25, X+
    12f0:	0d 90       	ld	r0, X+
    12f2:	bc 91       	ld	r27, X
    12f4:	a0 2d       	mov	r26, r0
    12f6:	c8 16       	cp	r12, r24
    12f8:	d9 06       	cpc	r13, r25
    12fa:	ea 06       	cpc	r14, r26
    12fc:	fb 06       	cpc	r15, r27
    12fe:	71 f5       	brne	.+92     	; 0x135c <getHighPriorityEntry+0x372>
    1300:	cb 01       	movw	r24, r22
    1302:	80 58       	subi	r24, 0x80	; 128
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	fc 01       	movw	r30, r24
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	a2 81       	ldd	r26, Z+2	; 0x02
    130e:	b3 81       	ldd	r27, Z+3	; 0x03
    1310:	88 15       	cp	r24, r8
    1312:	99 05       	cpc	r25, r9
    1314:	aa 05       	cpc	r26, r10
    1316:	bb 05       	cpc	r27, r11
    1318:	08 f5       	brcc	.+66     	; 0x135c <getHighPriorityEntry+0x372>
			 priority = isaQueue[i].priority;
    131a:	2a 85       	ldd	r18, Y+10	; 0x0a
    131c:	3b 85       	ldd	r19, Y+11	; 0x0b
    131e:	22 9d       	mul	r18, r2
    1320:	c0 01       	movw	r24, r0
    1322:	23 9d       	mul	r18, r3
    1324:	90 0d       	add	r25, r0
    1326:	32 9d       	mul	r19, r2
    1328:	90 0d       	add	r25, r0
    132a:	11 24       	eor	r1, r1
    132c:	82 53       	subi	r24, 0x32	; 50
    132e:	9d 4e       	sbci	r25, 0xED	; 237
    1330:	fc 01       	movw	r30, r24
    1332:	e7 58       	subi	r30, 0x87	; 135
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	10 81       	ld	r17, Z
    1338:	a2 01       	movw	r20, r4
    133a:	42 53       	subi	r20, 0x32	; 50
    133c:	5d 4e       	sbci	r21, 0xED	; 237
			 tempIndex = &isaQueue[i];
			 time.nano_secs = isaQueue[i].time.nano_secs;
    133e:	fc 01       	movw	r30, r24
    1340:	e0 58       	subi	r30, 0x80	; 128
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	80 80       	ld	r8, Z
    1346:	91 80       	ldd	r9, Z+1	; 0x01
    1348:	a2 80       	ldd	r10, Z+2	; 0x02
    134a:	b3 80       	ldd	r11, Z+3	; 0x03
			 time.secs = isaQueue[i].time.secs;
    134c:	84 58       	subi	r24, 0x84	; 132
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	dc 01       	movw	r26, r24
    1352:	cd 90       	ld	r12, X+
    1354:	dd 90       	ld	r13, X+
    1356:	ed 90       	ld	r14, X+
    1358:	fc 90       	ld	r15, X
    135a:	13 97       	sbiw	r26, 0x03	; 3
    135c:	ea 85       	ldd	r30, Y+10	; 0x0a
    135e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1360:	31 96       	adiw	r30, 0x01	; 1
    1362:	fb 87       	std	Y+11, r31	; 0x0b
    1364:	ea 87       	std	Y+10, r30	; 0x0a
    1366:	25 e8       	ldi	r18, 0x85	; 133
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	42 0e       	add	r4, r18
    136c:	53 1e       	adc	r5, r19
	//get the graph from the link
	if (link->graphPtr == NULL || link->graphPtr->index == 0) {	//if the graph pointer is null and the graph type is 2, then check for neighbor, else return NULL
	if (graphType==2)goto DIRECT_NEIGHBOR;
	return NULL;
}
for (i = 0; i < TRANSMIT_QUEUE_MAX_SIZE; i++){
    136e:	e4 31       	cpi	r30, 0x14	; 20
    1370:	f1 05       	cpc	r31, r1
    1372:	09 f0       	breq	.+2      	; 0x1376 <getHighPriorityEntry+0x38c>
    1374:	3e cf       	rjmp	.-388    	; 0x11f2 <getHighPriorityEntry+0x208>
			 }
			 }
	 }

}
	 if (found == false) {//if no graph to use, then we can check for direct neighbor, if type is 2
    1376:	3d 81       	ldd	r19, Y+5	; 0x05
    1378:	33 23       	and	r19, r19
    137a:	31 f4       	brne	.+12     	; 0x1388 <getHighPriorityEntry+0x39e>
		 if (graphType == 2) goto DIRECT_NEIGHBOR;	//we did not find a graph , so now we check for direct_neighbor
    137c:	02 30       	cpi	r16, 0x02	; 2
    137e:	11 f4       	brne	.+4      	; 0x1384 <getHighPriorityEntry+0x39a>
    1380:	59 ce       	rjmp	.-846    	; 0x1034 <getHighPriorityEntry+0x4a>
    1382:	03 c0       	rjmp	.+6      	; 0x138a <getHighPriorityEntry+0x3a0>
		 return NULL;
	 }
	 return tempIndex;
}
 }
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	ca 01       	movw	r24, r20
    138a:	2b 96       	adiw	r28, 0x0b	; 11
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	df 90       	pop	r13
    13a4:	cf 90       	pop	r12
    13a6:	bf 90       	pop	r11
    13a8:	af 90       	pop	r10
    13aa:	9f 90       	pop	r9
    13ac:	8f 90       	pop	r8
    13ae:	7f 90       	pop	r7
    13b0:	6f 90       	pop	r6
    13b2:	5f 90       	pop	r5
    13b4:	4f 90       	pop	r4
    13b6:	3f 90       	pop	r3
    13b8:	2f 90       	pop	r2
    13ba:	08 95       	ret

000013bc <isaFreePacket>:

 //*********************************************************************************************************
 void isaFreePacket(ISA_QUEUE *entry){
	 //Write 0 into the queue payload

	 entry->usedSlot = false;
    13bc:	fc 01       	movw	r30, r24
    13be:	ea 58       	subi	r30, 0x8A	; 138
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	10 82       	st	Z, r1
	 entry->transmitPending = false;;
    13c4:	fc 01       	movw	r30, r24
    13c6:	eb 58       	subi	r30, 0x8B	; 139
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	10 82       	st	Z, r1
	 entry->slot_callback = NULL;
    13cc:	89 58       	subi	r24, 0x89	; 137
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	fc 01       	movw	r30, r24
    13d2:	11 82       	std	Z+1, r1	; 0x01
    13d4:	10 82       	st	Z, r1
	 isaTxQueueSize--;
    13d6:	80 91 42 1d 	lds	r24, 0x1D42
    13da:	81 50       	subi	r24, 0x01	; 1
    13dc:	80 93 42 1d 	sts	0x1D42, r24
 }
    13e0:	08 95       	ret

000013e2 <clearCandidateTable>:
  * entire candidate table. Individual candidates are never removed
  */

 void clearCandidateTable(){
 uint8_t i;
 dlmoCandidate.n=0;
    13e2:	10 92 76 1d 	sts	0x1D76, r1
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	90 e0       	ldi	r25, 0x00	; 0
 for (i=0; i< DLMO_CANDIDATE_MAX_SIZE ; i++){
	 dlmoCandidate.candidate[i].neighbor = 0;  //setting to zero indicates that no neighbor is present
    13ea:	fc 01       	movw	r30, r24
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	ee 0f       	add	r30, r30
    13f2:	ff 1f       	adc	r31, r31
    13f4:	ea 58       	subi	r30, 0x8A	; 138
    13f6:	f2 4e       	sbci	r31, 0xE2	; 226
    13f8:	12 82       	std	Z+2, r1	; 0x02
    13fa:	11 82       	std	Z+1, r1	; 0x01
    13fc:	01 96       	adiw	r24, 0x01	; 1
  */

 void clearCandidateTable(){
 uint8_t i;
 dlmoCandidate.n=0;
 for (i=0; i< DLMO_CANDIDATE_MAX_SIZE ; i++){
    13fe:	84 31       	cpi	r24, 0x14	; 20
    1400:	91 05       	cpc	r25, r1
    1402:	99 f7       	brne	.-26     	; 0x13ea <clearCandidateTable+0x8>
	 dlmoCandidate.candidate[i].neighbor = 0;  //setting to zero indicates that no neighbor is present
}
 }
    1404:	08 95       	ret

00001406 <flushCandidateEntries>:
/*
 * This function is called to flush candidate table
 */

void flushCandidateEntries()
{
    1406:	80 e0       	ldi	r24, 0x00	; 0

	for (uint8_t i = 0;  i <  dlmoCandidate.n ; i++ ){
    1408:	1d c0       	rjmp	.+58     	; 0x1444 <flushCandidateEntries+0x3e>
		dlmoCandidate.candidate[i].neighbor = 0;
    140a:	e8 2f       	mov	r30, r24
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	df 01       	movw	r26, r30
    1410:	aa 0f       	add	r26, r26
    1412:	bb 1f       	adc	r27, r27
    1414:	aa 0f       	add	r26, r26
    1416:	bb 1f       	adc	r27, r27
    1418:	aa 58       	subi	r26, 0x8A	; 138
    141a:	b2 4e       	sbci	r27, 0xE2	; 226
    141c:	12 96       	adiw	r26, 0x02	; 2
    141e:	1c 92       	st	X, r1
    1420:	1e 92       	st	-X, r1
    1422:	11 97       	sbiw	r26, 0x01	; 1
		dlmoCandidate.candidate[i].rsqi = 0;
    1424:	df 01       	movw	r26, r30
    1426:	aa 0f       	add	r26, r26
    1428:	bb 1f       	adc	r27, r27
    142a:	aa 0f       	add	r26, r26
    142c:	bb 1f       	adc	r27, r27
    142e:	a6 58       	subi	r26, 0x86	; 134
    1430:	b2 4e       	sbci	r27, 0xE2	; 226
    1432:	1c 92       	st	X, r1
		dlmoCandidate.candidate[i].rssi = 0;
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	ee 0f       	add	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	e8 58       	subi	r30, 0x88	; 136
    143e:	f2 4e       	sbci	r31, 0xE2	; 226
    1440:	11 82       	std	Z+1, r1	; 0x01
 */

void flushCandidateEntries()
{

	for (uint8_t i = 0;  i <  dlmoCandidate.n ; i++ ){
    1442:	8f 5f       	subi	r24, 0xFF	; 255
    1444:	90 91 76 1d 	lds	r25, 0x1D76
    1448:	89 17       	cp	r24, r25
    144a:	f8 f2       	brcs	.-66     	; 0x140a <flushCandidateEntries+0x4>
		dlmoCandidate.candidate[i].neighbor = 0;
		dlmoCandidate.candidate[i].rsqi = 0;
		dlmoCandidate.candidate[i].rssi = 0;

	}
	dlmoCandidate.n=0;
    144c:	10 92 76 1d 	sts	0x1D76, r1
}
    1450:	08 95       	ret

00001452 <updateLastSentTime>:
	 if (currentTime.secs - lastSentTime.secs > 60) return true;
	 else return false;
 }

 void updateLastSentTime(){
	 nrk_time_get(&lastSentTime);
    1452:	85 ed       	ldi	r24, 0xD5	; 213
    1454:	90 e1       	ldi	r25, 0x10	; 16
    1456:	0e 94 88 3d 	call	0x7b10	; 0x7b10 <nrk_time_get>
 }
    145a:	08 95       	ret

0000145c <isDiscoveryAlertDue>:
printf ("Added %d to Candidate table at %d\r\n", candidate,dlmoCandidate.n-1 );
return ISA_SUCCESS;
 }


 bool isDiscoveryAlertDue(){
    145c:	ef 92       	push	r14
    145e:	ff 92       	push	r15
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	28 97       	sbiw	r28, 0x08	; 8
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
	 nrk_time_t currentTime;
	 nrk_time_get(&currentTime);
    1478:	ce 01       	movw	r24, r28
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	0e 94 88 3d 	call	0x7b10	; 0x7b10 <nrk_time_get>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	29 81       	ldd	r18, Y+1	; 0x01
    1484:	3a 81       	ldd	r19, Y+2	; 0x02
    1486:	4b 81       	ldd	r20, Y+3	; 0x03
    1488:	5c 81       	ldd	r21, Y+4	; 0x04
    148a:	e0 90 d5 10 	lds	r14, 0x10D5
    148e:	f0 90 d6 10 	lds	r15, 0x10D6
    1492:	00 91 d7 10 	lds	r16, 0x10D7
    1496:	10 91 d8 10 	lds	r17, 0x10D8
    149a:	2e 19       	sub	r18, r14
    149c:	3f 09       	sbc	r19, r15
    149e:	40 0b       	sbc	r20, r16
    14a0:	51 0b       	sbc	r21, r17
    14a2:	2d 33       	cpi	r18, 0x3D	; 61
    14a4:	31 05       	cpc	r19, r1
    14a6:	41 05       	cpc	r20, r1
    14a8:	51 05       	cpc	r21, r1
    14aa:	08 f0       	brcs	.+2      	; 0x14ae <isDiscoveryAlertDue+0x52>
    14ac:	81 e0       	ldi	r24, 0x01	; 1
	 if (currentTime.secs - lastSentTime.secs > 60) return true;
	 else return false;
 }
    14ae:	28 96       	adiw	r28, 0x08	; 8
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	08 95       	ret

000014c8 <dlmoInit>:
         |
         |  Returns:
         |		NONE
         *-------------------------------------------------------------------*/
void dlmoInit()
{
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	//for LINK
	for (i=0; i<DLMO_LINK_MAX_COUNT; i++)

		{
			(dlmoLink[i].isPresent = false);
    14cc:	9c 01       	movw	r18, r24
    14ce:	22 0f       	add	r18, r18
    14d0:	33 1f       	adc	r19, r19
    14d2:	f9 01       	movw	r30, r18
    14d4:	43 e0       	ldi	r20, 0x03	; 3
    14d6:	ee 0f       	add	r30, r30
    14d8:	ff 1f       	adc	r31, r31
    14da:	4a 95       	dec	r20
    14dc:	e1 f7       	brne	.-8      	; 0x14d6 <dlmoInit+0xe>
    14de:	e2 0f       	add	r30, r18
    14e0:	f3 1f       	adc	r31, r19
    14e2:	e7 59       	subi	r30, 0x97	; 151
    14e4:	f0 4f       	sbci	r31, 0xF0	; 240
    14e6:	10 82       	st	Z, r1
    14e8:	01 96       	adiw	r24, 0x01	; 1
         *-------------------------------------------------------------------*/
void dlmoInit()
{
	uint8_t i;
	//for LINK
	for (i=0; i<DLMO_LINK_MAX_COUNT; i++)
    14ea:	84 31       	cpi	r24, 0x14	; 20
    14ec:	91 05       	cpc	r25, r1
    14ee:	71 f7       	brne	.-36     	; 0x14cc <dlmoInit+0x4>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
		}

//for NEIGHBOR
	for(i=0; i<DLMO_NEIGHBOR_MAX_COUNT; i++)
	{
		dlmoNeighbor[i].isPresent = false;
    14f4:	fc 01       	movw	r30, r24
    14f6:	34 e0       	ldi	r19, 0x04	; 4
    14f8:	ee 0f       	add	r30, r30
    14fa:	ff 1f       	adc	r31, r31
    14fc:	3a 95       	dec	r19
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <dlmoInit+0x30>
    1500:	e8 0f       	add	r30, r24
    1502:	f9 1f       	adc	r31, r25
    1504:	e2 54       	subi	r30, 0x42	; 66
    1506:	fe 4e       	sbci	r31, 0xEE	; 238
    1508:	10 82       	st	Z, r1
    150a:	01 96       	adiw	r24, 0x01	; 1
		{
			(dlmoLink[i].isPresent = false);
		}

//for NEIGHBOR
	for(i=0; i<DLMO_NEIGHBOR_MAX_COUNT; i++)
    150c:	80 31       	cpi	r24, 0x10	; 16
    150e:	91 05       	cpc	r25, r1
    1510:	89 f7       	brne	.-30     	; 0x14f4 <dlmoInit+0x2c>
	{
		dlmoNeighbor[i].isPresent = false;
	}

		//Initialization for Transmit Queue
	isaTxQueueSize = 0; //Explicitly initialize this to 0
    1512:	10 92 42 1d 	sts	0x1D42, r1

*/

	// Initialize the dlmo.DiscoveryAlery field
	/* Device management object*/
	discoveryAlert.alertReport.alertReportDisabled = false;
    1516:	10 92 d1 10 	sts	0x10D1, r1
	discoveryAlert.duration = 60; //in seconds
    151a:	8c e3       	ldi	r24, 0x3C	; 60
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	90 93 d4 10 	sts	0x10D4, r25
    1522:	80 93 d3 10 	sts	0x10D3, r24

	//initialize the lastSentTime to the startTime
	 nrk_time_get(&lastSentTime);
    1526:	85 ed       	ldi	r24, 0xD5	; 213
    1528:	90 e1       	ldi	r25, 0x10	; 16
    152a:	0e 94 88 3d 	call	0x7b10	; 0x7b10 <nrk_time_get>

}
    152e:	08 95       	ret

00001530 <addCandidate>:

 /*
  * This function adds a neighbor in the candidate table
  */

 int8_t addCandidate(uint16_t candidate){
    1530:	9c 01       	movw	r18, r24
    1532:	90 e0       	ldi	r25, 0x00	; 0
	 uint8_t i;
	 for (i=0; i<dlmoCandidate.n; i++){
    1534:	10 c0       	rjmp	.+32     	; 0x1556 <addCandidate+0x26>
		 if (dlmoCandidate.candidate[i].neighbor == candidate){
    1536:	e9 2f       	mov	r30, r25
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	ee 0f       	add	r30, r30
    1540:	ff 1f       	adc	r31, r31
    1542:	ea 58       	subi	r30, 0x8A	; 138
    1544:	f2 4e       	sbci	r31, 0xE2	; 226
    1546:	41 81       	ldd	r20, Z+1	; 0x01
    1548:	52 81       	ldd	r21, Z+2	; 0x02
    154a:	42 17       	cp	r20, r18
    154c:	53 07       	cpc	r21, r19
    154e:	11 f4       	brne	.+4      	; 0x1554 <addCandidate+0x24>
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	08 95       	ret
  * This function adds a neighbor in the candidate table
  */

 int8_t addCandidate(uint16_t candidate){
	 uint8_t i;
	 for (i=0; i<dlmoCandidate.n; i++){
    1554:	9f 5f       	subi	r25, 0xFF	; 255
    1556:	80 91 76 1d 	lds	r24, 0x1D76
    155a:	98 17       	cp	r25, r24
    155c:	60 f3       	brcs	.-40     	; 0x1536 <addCandidate+0x6>
			// printf ("Neighbor: %d already present", candidate);
			 return ISA_SUCCESS;
		 }
	 }

	 if (dlmoCandidate.n >= DLMO_CANDIDATE_MAX_SIZE) {
    155e:	80 91 76 1d 	lds	r24, 0x1D76
    1562:	84 31       	cpi	r24, 0x14	; 20
    1564:	28 f0       	brcs	.+10     	; 0x1570 <addCandidate+0x40>
		 setIsaError(CANDIDATE_CAPACITY_ERROR);
    1566:	85 e0       	ldi	r24, 0x05	; 5
    1568:	0e 94 02 06 	call	0xc04	; 0xc04 <setIsaError>
    156c:	8f ef       	ldi	r24, 0xFF	; 255
		 return ISA_ERROR ;//we have reached max size
    156e:	08 95       	ret
	 }

dlmoCandidate.candidate[dlmoCandidate.n].neighbor = candidate;
    1570:	e0 91 76 1d 	lds	r30, 0x1D76
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	ee 0f       	add	r30, r30
    1578:	ff 1f       	adc	r31, r31
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	ea 58       	subi	r30, 0x8A	; 138
    1580:	f2 4e       	sbci	r31, 0xE2	; 226
    1582:	32 83       	std	Z+2, r19	; 0x02
    1584:	21 83       	std	Z+1, r18	; 0x01
dlmoCandidate.n++;
    1586:	80 91 76 1d 	lds	r24, 0x1D76
    158a:	8f 5f       	subi	r24, 0xFF	; 255
    158c:	80 93 76 1d 	sts	0x1D76, r24
printf ("Added %d to Candidate table at %d\r\n", candidate,dlmoCandidate.n-1 );
    1590:	80 91 76 1d 	lds	r24, 0x1D76
    1594:	00 d0       	rcall	.+0      	; 0x1596 <addCandidate+0x66>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <addCandidate+0x68>
    1598:	00 d0       	rcall	.+0      	; 0x159a <addCandidate+0x6a>
    159a:	ed b7       	in	r30, 0x3d	; 61
    159c:	fe b7       	in	r31, 0x3e	; 62
    159e:	31 96       	adiw	r30, 0x01	; 1
    15a0:	47 e2       	ldi	r20, 0x27	; 39
    15a2:	53 e0       	ldi	r21, 0x03	; 3
    15a4:	ad b7       	in	r26, 0x3d	; 61
    15a6:	be b7       	in	r27, 0x3e	; 62
    15a8:	12 96       	adiw	r26, 0x02	; 2
    15aa:	5c 93       	st	X, r21
    15ac:	4e 93       	st	-X, r20
    15ae:	11 97       	sbiw	r26, 0x01	; 1
    15b0:	33 83       	std	Z+3, r19	; 0x03
    15b2:	22 83       	std	Z+2, r18	; 0x02
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	95 83       	std	Z+5, r25	; 0x05
    15ba:	84 83       	std	Z+4, r24	; 0x04
    15bc:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    15c0:	81 e0       	ldi	r24, 0x01	; 1
return ISA_SUCCESS;
    15c2:	2d b7       	in	r18, 0x3d	; 61
    15c4:	3e b7       	in	r19, 0x3e	; 62
    15c6:	2a 5f       	subi	r18, 0xFA	; 250
    15c8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	3e bf       	out	0x3e, r19	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	2d bf       	out	0x3d, r18	; 61
 }
    15d4:	08 95       	ret

000015d6 <findLink>:
         |      (IN)uint8_t slot - Slot for which we want the link pointer
         |
         |  Returns:
         |		DLMO_LINK * - Pointer to the link that corresponds to the slot passed as an argument.
         *-------------------------------------------------------------------*/
DLMO_LINK * findLink(uint8_t slot){
    15d6:	40 e0       	ldi	r20, 0x00	; 0
    15d8:	50 e0       	ldi	r21, 0x00	; 0

	uint8_t index;

	for (index = 0; index < DLMO_LINK_MAX_COUNT; index++)
			{
				if (dlmoLink[index].isPresent == true && dlmoLink[index].chOffset == slot ) {
    15da:	ba 01       	movw	r22, r20
    15dc:	66 0f       	add	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	fb 01       	movw	r30, r22
    15e2:	93 e0       	ldi	r25, 0x03	; 3
    15e4:	ee 0f       	add	r30, r30
    15e6:	ff 1f       	adc	r31, r31
    15e8:	9a 95       	dec	r25
    15ea:	e1 f7       	brne	.-8      	; 0x15e4 <findLink+0xe>
    15ec:	e6 0f       	add	r30, r22
    15ee:	f7 1f       	adc	r31, r23
    15f0:	e7 59       	subi	r30, 0x97	; 151
    15f2:	f0 4f       	sbci	r31, 0xF0	; 240
    15f4:	90 81       	ld	r25, Z
    15f6:	99 23       	and	r25, r25
    15f8:	b9 f0       	breq	.+46     	; 0x1628 <findLink+0x52>
    15fa:	ba 01       	movw	r22, r20
    15fc:	66 0f       	add	r22, r22
    15fe:	77 1f       	adc	r23, r23
    1600:	fb 01       	movw	r30, r22
    1602:	a3 e0       	ldi	r26, 0x03	; 3
    1604:	ee 0f       	add	r30, r30
    1606:	ff 1f       	adc	r31, r31
    1608:	aa 95       	dec	r26
    160a:	e1 f7       	brne	.-8      	; 0x1604 <findLink+0x2e>
    160c:	e6 0f       	add	r30, r22
    160e:	f7 1f       	adc	r31, r23
    1610:	e7 59       	subi	r30, 0x97	; 151
    1612:	f0 4f       	sbci	r31, 0xF0	; 240
    1614:	90 89       	ldd	r25, Z+16	; 0x10
    1616:	98 17       	cp	r25, r24
    1618:	39 f4       	brne	.+14     	; 0x1628 <findLink+0x52>
					return &dlmoLink[index];
    161a:	82 e1       	ldi	r24, 0x12	; 18
    161c:	48 9f       	mul	r20, r24
    161e:	90 01       	movw	r18, r0
    1620:	11 24       	eor	r1, r1
    1622:	27 59       	subi	r18, 0x97	; 151
    1624:	30 4f       	sbci	r19, 0xF0	; 240
    1626:	1c c0       	rjmp	.+56     	; 0x1660 <findLink+0x8a>
    1628:	4f 5f       	subi	r20, 0xFF	; 255
    162a:	5f 4f       	sbci	r21, 0xFF	; 255
         *-------------------------------------------------------------------*/
DLMO_LINK * findLink(uint8_t slot){

	uint8_t index;

	for (index = 0; index < DLMO_LINK_MAX_COUNT; index++)
    162c:	44 31       	cpi	r20, 0x14	; 20
    162e:	51 05       	cpc	r21, r1
    1630:	a1 f6       	brne	.-88     	; 0x15da <findLink+0x4>
			{
				if (dlmoLink[index].isPresent == true && dlmoLink[index].chOffset == slot ) {
					return &dlmoLink[index];
				}
			}
	printf ("This slot is not configured yet: %d\n\r" , slot);
    1632:	00 d0       	rcall	.+0      	; 0x1634 <findLink+0x5e>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <findLink+0x60>
    1636:	ed b7       	in	r30, 0x3d	; 61
    1638:	fe b7       	in	r31, 0x3e	; 62
    163a:	31 96       	adiw	r30, 0x01	; 1
    163c:	2b e4       	ldi	r18, 0x4B	; 75
    163e:	33 e0       	ldi	r19, 0x03	; 3
    1640:	ad b7       	in	r26, 0x3d	; 61
    1642:	be b7       	in	r27, 0x3e	; 62
    1644:	12 96       	adiw	r26, 0x02	; 2
    1646:	3c 93       	st	X, r19
    1648:	2e 93       	st	-X, r18
    164a:	11 97       	sbiw	r26, 0x01	; 1
    164c:	82 83       	std	Z+2, r24	; 0x02
    164e:	13 82       	std	Z+3, r1	; 0x03
    1650:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
	return NULL;
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
}
    1660:	c9 01       	movw	r24, r18
    1662:	08 95       	ret

00001664 <enQueue>:
 /*
  * Add to queue. Find a free place and insert with current time
  */

 int8_t enQueue(uint16_t neighbor, uint8_t priority, uint8_t length, uint8_t *payload,  void (*slot_callback)(ISA_QUEUE *entry, status))
 {
    1664:	8f 92       	push	r8
    1666:	9f 92       	push	r9
    1668:	af 92       	push	r10
    166a:	bf 92       	push	r11
    166c:	cf 92       	push	r12
    166e:	df 92       	push	r13
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	68 01       	movw	r12, r16
	 uint8_t lowerPriorityIndex;
	 uint8_t usedIndex;
	 ISA_QUEUE * temp;
*/

	 	 if (isaTxQueueSize > TRANSMIT_QUEUE_MAX_SIZE){
    167e:	50 91 42 1d 	lds	r21, 0x1D42
    1682:	55 31       	cpi	r21, 0x15	; 21
    1684:	10 f0       	brcs	.+4      	; 0x168a <enQueue+0x26>
	 		 setIsaError(TRANSMIT_QUEUE_CAPACITY_ERROR);
    1686:	83 e0       	ldi	r24, 0x03	; 3
    1688:	03 c0       	rjmp	.+6      	; 0x1690 <enQueue+0x2c>
	 		 return ISA_ERROR;
	 	 }

	 	 //check if length of payload is within bounds
	 	 if (length >= RF_MAX_PAYLOAD_SIZE) {
    168a:	44 37       	cpi	r20, 0x74	; 116
    168c:	20 f0       	brcs	.+8      	; 0x1696 <enQueue+0x32>
	 		 setIsaError(MAX_PAYLOAD_ERROR);
    168e:	84 e0       	ldi	r24, 0x04	; 4
    1690:	0e 94 02 06 	call	0xc04	; 0xc04 <setIsaError>
    1694:	54 c0       	rjmp	.+168    	; 0x173e <enQueue+0xda>
	 		 return ISA_ERROR;
    1696:	a0 e0       	ldi	r26, 0x00	; 0
    1698:	b0 e0       	ldi	r27, 0x00	; 0

	 	 //if we are here, we should have place to add into the Queue
	 	 //find the first free index and insert
	 for (i = 0; i < TRANSMIT_QUEUE_MAX_SIZE; i++){

		 if (isaQueue[i].usedSlot == false){
    169a:	75 e8       	ldi	r23, 0x85	; 133
    169c:	a7 2e       	mov	r10, r23
    169e:	b1 2c       	mov	r11, r1
	 	 }

	 	 //check if length of payload is within bounds
	 	 if (length >= RF_MAX_PAYLOAD_SIZE) {
	 		 setIsaError(MAX_PAYLOAD_ERROR);
	 		 return ISA_ERROR;
    16a0:	1a 2f       	mov	r17, r26

	 	 //if we are here, we should have place to add into the Queue
	 	 //find the first free index and insert
	 for (i = 0; i < TRANSMIT_QUEUE_MAX_SIZE; i++){

		 if (isaQueue[i].usedSlot == false){
    16a2:	aa 9d       	mul	r26, r10
    16a4:	40 01       	movw	r8, r0
    16a6:	ab 9d       	mul	r26, r11
    16a8:	90 0c       	add	r9, r0
    16aa:	ba 9d       	mul	r27, r10
    16ac:	90 0c       	add	r9, r0
    16ae:	11 24       	eor	r1, r1
    16b0:	f4 01       	movw	r30, r8
    16b2:	e2 53       	subi	r30, 0x32	; 50
    16b4:	fd 4e       	sbci	r31, 0xED	; 237
    16b6:	56 e7       	ldi	r21, 0x76	; 118
    16b8:	e5 2e       	mov	r14, r21
    16ba:	f1 2c       	mov	r15, r1
    16bc:	ee 0e       	add	r14, r30
    16be:	ff 1e       	adc	r15, r31
    16c0:	e7 01       	movw	r28, r14
    16c2:	58 81       	ld	r21, Y
    16c4:	55 23       	and	r21, r21
    16c6:	69 f5       	brne	.+90     	; 0x1722 <enQueue+0xbe>
			 isaQueue[i].length = length;
    16c8:	40 83       	st	Z, r20
			 isaQueue[i].priority = priority;
    16ca:	df 01       	movw	r26, r30
    16cc:	a7 58       	subi	r26, 0x87	; 135
    16ce:	bf 4f       	sbci	r27, 0xFF	; 255
    16d0:	6c 93       	st	X, r22
			 isaQueue[i].transmitPending = true;
    16d2:	df 01       	movw	r26, r30
    16d4:	ab 58       	subi	r26, 0x8B	; 139
    16d6:	bf 4f       	sbci	r27, 0xFF	; 255
    16d8:	51 e0       	ldi	r21, 0x01	; 1
    16da:	5c 93       	st	X, r21
			 isaQueue[i].usedSlot = true;
    16dc:	58 83       	st	Y, r21
			 isaQueue[i].neighbor = neighbor;
    16de:	df 01       	movw	r26, r30
    16e0:	a6 58       	subi	r26, 0x86	; 134
    16e2:	bf 4f       	sbci	r27, 0xFF	; 255
    16e4:	11 96       	adiw	r26, 0x01	; 1
    16e6:	9c 93       	st	X, r25
    16e8:	8e 93       	st	-X, r24
			 isaQueue[i].slot_callback =  slot_callback;
    16ea:	df 01       	movw	r26, r30
    16ec:	a9 58       	subi	r26, 0x89	; 137
    16ee:	bf 4f       	sbci	r27, 0xFF	; 255
    16f0:	11 96       	adiw	r26, 0x01	; 1
    16f2:	dc 92       	st	X, r13
    16f4:	ce 92       	st	-X, r12
			 isaQueue[i].numTries = 0;
    16f6:	ec 57       	subi	r30, 0x7C	; 124
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	10 82       	st	Z, r1
			 memcpy(isaQueue[i].tx_buf, payload, length );//copy the payload
    16fc:	b4 01       	movw	r22, r8
    16fe:	61 53       	subi	r22, 0x31	; 49
    1700:	7d 4e       	sbci	r23, 0xED	; 237
    1702:	cb 01       	movw	r24, r22
    1704:	b9 01       	movw	r22, r18
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <memcpy>
			 nrk_time_get(&isaQueue[i].time);	//copy the time when I was inserted into Queue
    170c:	c4 01       	movw	r24, r8
    170e:	86 5b       	subi	r24, 0xB6	; 182
    1710:	9c 4e       	sbci	r25, 0xEC	; 236
    1712:	0e 94 88 3d 	call	0x7b10	; 0x7b10 <nrk_time_get>
			 isaTxQueueSize++;
    1716:	80 91 42 1d 	lds	r24, 0x1D42
    171a:	8f 5f       	subi	r24, 0xFF	; 255
    171c:	80 93 42 1d 	sts	0x1D42, r24
			 break;
    1720:	06 c0       	rjmp	.+12     	; 0x172e <enQueue+0xca>
    1722:	1f 5f       	subi	r17, 0xFF	; 255
    1724:	11 96       	adiw	r26, 0x01	; 1
	 		 return ISA_ERROR;
	 	 }

	 	 //if we are here, we should have place to add into the Queue
	 	 //find the first free index and insert
	 for (i = 0; i < TRANSMIT_QUEUE_MAX_SIZE; i++){
    1726:	a4 31       	cpi	r26, 0x14	; 20
    1728:	b1 05       	cpc	r27, r1
    172a:	09 f0       	breq	.+2      	; 0x172e <enQueue+0xca>
    172c:	b9 cf       	rjmp	.-142    	; 0x16a0 <enQueue+0x3c>
			 isaTxQueueSize++;
			 break;
		 }

	 }
	 if ( i == TRANSMIT_QUEUE_MAX_SIZE){
    172e:	14 31       	cpi	r17, 0x14	; 20
    1730:	11 f0       	breq	.+4      	; 0x1736 <enQueue+0xd2>
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	05 c0       	rjmp	.+10     	; 0x1740 <enQueue+0xdc>
		 printf(" Critical error 2\r\n");
    1736:	81 e7       	ldi	r24, 0x71	; 113
    1738:	93 e0       	ldi	r25, 0x03	; 3
    173a:	0e 94 4d 48 	call	0x909a	; 0x909a <puts>
    173e:	8f ef       	ldi	r24, 0xFF	; 255
			 isaQueuePointer[usedIndex] = temp;
			 usedIndex = i;
		 }
	 return 1;
 */
 }
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	ff 90       	pop	r15
    174a:	ef 90       	pop	r14
    174c:	df 90       	pop	r13
    174e:	cf 90       	pop	r12
    1750:	bf 90       	pop	r11
    1752:	af 90       	pop	r10
    1754:	9f 90       	pop	r9
    1756:	8f 90       	pop	r8
    1758:	08 95       	ret

0000175a <sendAdv>:

 void updateLastSentTime(){
	 nrk_time_get(&lastSentTime);
 }

int8_t sendAdv (){
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
	uint8_t length;
	//		n +  n * number of neighbors
	length = 1 + dlmoCandidate.n * sizeof(CANDIDATE);
    1762:	26 e7       	ldi	r18, 0x76	; 118
    1764:	3d e1       	ldi	r19, 0x1D	; 29
    1766:	10 91 76 1d 	lds	r17, 0x1D76
    176a:	11 0f       	add	r17, r17
    176c:	11 0f       	add	r17, r17
    176e:	41 2f       	mov	r20, r17
    1770:	4f 5f       	subi	r20, 0xFF	; 255
	MESSAGE *message;
	message = &nbr_buf[PKT_DATA_START];
    1772:	cc ee       	ldi	r28, 0xEC	; 236
    1774:	d0 e1       	ldi	r29, 0x10	; 16
	message->type = NEIGHBOR_TABLE_REPORT;
    1776:	10 92 ec 10 	sts	0x10EC, r1
	memcpy(&message->data, &dlmoCandidate, length);
    177a:	be 01       	movw	r22, r28
    177c:	6f 5f       	subi	r22, 0xFF	; 255
    177e:	7f 4f       	sbci	r23, 0xFF	; 255
    1780:	cb 01       	movw	r24, r22
    1782:	b9 01       	movw	r22, r18
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <memcpy>

	nbr_buf[DEST_INDEX] = isa_clk_src_id;
    178a:	80 91 fe 0c 	lds	r24, 0x0CFE
    178e:	80 93 e8 10 	sts	0x10E8, r24
	nbr_buf[SRC_INDEX] = dmo.dlAddress;
    1792:	90 91 65 0f 	lds	r25, 0x0F65
    1796:	90 93 e7 10 	sts	0x10E7, r25
			//length of dlmo.candidate + PKT_DATA_START + message-> type (1)
	length = length + PKT_DATA_START + 1;
	return enQueue(isa_clk_src_id, 0, length, nbr_buf, NULL);
    179a:	41 2f       	mov	r20, r17
    179c:	47 5f       	subi	r20, 0xF7	; 247
    179e:	9e 01       	movw	r18, r28
    17a0:	27 50       	subi	r18, 0x07	; 7
    17a2:	30 40       	sbci	r19, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	00 e0       	ldi	r16, 0x00	; 0
    17aa:	10 e0       	ldi	r17, 0x00	; 0
    17ac:	0e 94 32 0b 	call	0x1664	; 0x1664 <enQueue>

}
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	08 95       	ret

000017ba <dd_data_request>:
 *
 */


 int8_t dd_data_request(uint16_t srcAddr, uint16_t destAddr, uint8_t priority, bool discardEligible, uint8_t ecn, bool lh, uint8_t contractId, uint8_t length, uint8_t *payload,  void (*slot_callback)(ISA_QUEUE *entry, status))
 {
    17ba:	8f 92       	push	r8
    17bc:	9f 92       	push	r9
    17be:	af 92       	push	r10
    17c0:	cf 92       	push	r12
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	cb 01       	movw	r24, r22
    17d0:	64 2f       	mov	r22, r20
    17d2:	4a 2d       	mov	r20, r10
    17d4:	94 01       	movw	r18, r8
	 //Future - Table lookup based on contract Id and dest address
	 //Current - contractId is considered as the graphID directly and dest is the destID

//Configure the headers within the payload (whichever applicable)
	 payload[DEST_INDEX] = destAddr;
    17d6:	f4 01       	movw	r30, r8
    17d8:	83 83       	std	Z+3, r24	; 0x03
	 //if (contractId!=0)
	 {
		 DLMO_DROUT * dRout;
		 dRout = &payload[DROUT_INDEX];
		 dRout->GraphId = contractId;
    17da:	c6 82       	std	Z+6, r12	; 0x06
	 }
return  enQueue (destAddr, priority, length, payload, slot_callback);
    17dc:	0b 85       	ldd	r16, Y+11	; 0x0b
    17de:	1c 85       	ldd	r17, Y+12	; 0x0c
    17e0:	0e 94 32 0b 	call	0x1664	; 0x1664 <enQueue>


}
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	cf 90       	pop	r12
    17ee:	af 90       	pop	r10
    17f0:	9f 90       	pop	r9
    17f2:	8f 90       	pop	r8
    17f4:	08 95       	ret

000017f6 <dd_data_indication>:
 //*******************dd_data_indication: Service access point used to indicate received data************
 void dd_data_indication(uint16_t srcAddr,uint16_t destAddr,uint8_t priority,bool discardEligibile, bool lh, uint8_t length, uint8_t *payload)
 {

	// printf("packet is for me");
	  isa_rx_pkt_release();
    17f6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <isa_rx_pkt_release>
 }
    17fa:	08 95       	ret

000017fc <sendPacket>:
}

//Wrapper for dd_data_request

 void sendPacket(uint16_t destAddr,uint8_t graphId, uint8_t length, uint8_t *payload, void (*slot_callback)(ISA_QUEUE *entry, status))
 {
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
 {
	 //Future - Table lookup based on contract Id and dest address
	 //Current - contractId is considered as the graphID directly and dest is the destID

//Configure the headers within the payload (whichever applicable)
	 payload[DEST_INDEX] = destAddr;
    1800:	f9 01       	movw	r30, r18
    1802:	83 83       	std	Z+3, r24	; 0x03
	 //if (contractId!=0)
	 {
		 DLMO_DROUT * dRout;
		 dRout = &payload[DROUT_INDEX];
		 dRout->GraphId = contractId;
    1804:	66 83       	std	Z+6, r22	; 0x06
	 }
return  enQueue (destAddr, priority, length, payload, slot_callback);
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	0e 94 32 0b 	call	0x1664	; 0x1664 <enQueue>

//Wrapper for dd_data_request

 void sendPacket(uint16_t destAddr,uint8_t graphId, uint8_t length, uint8_t *payload, void (*slot_callback)(ISA_QUEUE *entry, status))
 {
	 if (dd_data_request(0, destAddr, 0, 0, 0, 0, graphId,  length, payload,   slot_callback) == -1)
    180c:	8f 3f       	cpi	r24, 0xFF	; 255
    180e:	11 f4       	brne	.+4      	; 0x1814 <sendPacket+0x18>
	 {
		 printIsaError();
    1810:	0e 94 08 06 	call	0xc10	; 0xc10 <printIsaError>
	 }
 }
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	08 95       	ret

0000181a <addGraph>:
         |
         |  Returns:
         |		DLMO_GRAPH* - pointer to the graph added/updated
         *-------------------------------------------------------------------*/

DLMO_GRAPH* addGraph(uint16_t graphId, uint8_t neighborCount, uint16_t n1, uint16_t n2, uint16_t n3){
    181a:	8f 92       	push	r8
    181c:	9f 92       	push	r9
    181e:	af 92       	push	r10
    1820:	bf 92       	push	r11
    1822:	cf 92       	push	r12
    1824:	df 92       	push	r13
    1826:	ef 92       	push	r14
    1828:	ff 92       	push	r15
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	ec 01       	movw	r28, r24
    1834:	f6 2e       	mov	r15, r22
    1836:	6a 01       	movw	r12, r20
    1838:	59 01       	movw	r10, r18
    183a:	48 01       	movw	r8, r16
    183c:	00 e0       	ldi	r16, 0x00	; 0
    183e:	10 e0       	ldi	r17, 0x00	; 0
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	ee 24       	eor	r14, r14

	uint8_t i,free_index=0;
	bool free_index_present = false;
	for(uint8_t i=0;i<DLMO_GRAPH_MAX_COUNT;i++)
	{
		if(graphId == dlmoGraph[i].index)
    1844:	c8 01       	movw	r24, r16
    1846:	f8 01       	movw	r30, r16
    1848:	ee 0f       	add	r30, r30
    184a:	ff 1f       	adc	r31, r31
    184c:	a3 e0       	ldi	r26, 0x03	; 3
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	aa 95       	dec	r26
    1854:	e1 f7       	brne	.-8      	; 0x184e <addGraph+0x34>
    1856:	e8 0f       	add	r30, r24
    1858:	f9 1f       	adc	r31, r25
    185a:	e7 5a       	subi	r30, 0xA7	; 167
    185c:	fe 4e       	sbci	r31, 0xEE	; 238
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	c8 17       	cp	r28, r24
    1864:	d9 07       	cpc	r29, r25
    1866:	91 f4       	brne	.+36     	; 0x188c <addGraph+0x72>
		{
			printf("Graph %d Exists in Table -updating\n\r",graphId);
    1868:	00 d0       	rcall	.+0      	; 0x186a <addGraph+0x50>
    186a:	00 d0       	rcall	.+0      	; 0x186c <addGraph+0x52>
    186c:	84 e8       	ldi	r24, 0x84	; 132
    186e:	93 e0       	ldi	r25, 0x03	; 3
    1870:	ad b7       	in	r26, 0x3d	; 61
    1872:	be b7       	in	r27, 0x3e	; 62
    1874:	12 96       	adiw	r26, 0x02	; 2
    1876:	9c 93       	st	X, r25
    1878:	8e 93       	st	-X, r24
    187a:	11 97       	sbiw	r26, 0x01	; 1
    187c:	14 96       	adiw	r26, 0x04	; 4
    187e:	dc 93       	st	X, r29
    1880:	ce 93       	st	-X, r28
    1882:	13 97       	sbiw	r26, 0x03	; 3
    1884:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    1888:	e0 2e       	mov	r14, r16
    188a:	35 c0       	rjmp	.+106    	; 0x18f6 <addGraph+0xdc>
			free_index = i;
			goto UPDATE_GRAPH;
		}
		if(dlmoGraph[i].index == 0 && free_index_present == false) 	//is not configured
    188c:	c8 01       	movw	r24, r16
    188e:	f8 01       	movw	r30, r16
    1890:	ee 0f       	add	r30, r30
    1892:	ff 1f       	adc	r31, r31
    1894:	63 e0       	ldi	r22, 0x03	; 3
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	6a 95       	dec	r22
    189c:	e1 f7       	brne	.-8      	; 0x1896 <addGraph+0x7c>
    189e:	e8 0f       	add	r30, r24
    18a0:	f9 1f       	adc	r31, r25
    18a2:	e7 5a       	subi	r30, 0xA7	; 167
    18a4:	fe 4e       	sbci	r31, 0xEE	; 238
    18a6:	80 81       	ld	r24, Z
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	21 f4       	brne	.+8      	; 0x18b6 <addGraph+0x9c>
    18ae:	22 23       	and	r18, r18
    18b0:	11 f4       	brne	.+4      	; 0x18b6 <addGraph+0x9c>
    18b2:	e0 2e       	mov	r14, r16
    18b4:	21 e0       	ldi	r18, 0x01	; 1
    18b6:	0f 5f       	subi	r16, 0xFF	; 255
    18b8:	1f 4f       	sbci	r17, 0xFF	; 255

	//printf("AddGraph Graph ID: %d\r\n",graphId);

	uint8_t i,free_index=0;
	bool free_index_present = false;
	for(uint8_t i=0;i<DLMO_GRAPH_MAX_COUNT;i++)
    18ba:	0a 30       	cpi	r16, 0x0A	; 10
    18bc:	11 05       	cpc	r17, r1
    18be:	11 f6       	brne	.-124    	; 0x1844 <addGraph+0x2a>
		{
					free_index_present = true;
					free_index = i;
		}
	}
	if(free_index_present == false)
    18c0:	22 23       	and	r18, r18
    18c2:	41 f4       	brne	.+16     	; 0x18d4 <addGraph+0xba>
	{
			setIsaError(GRAPH_CAPACITY_ERROR);
    18c4:	86 e0       	ldi	r24, 0x06	; 6
    18c6:	0e 94 02 06 	call	0xc04	; 0xc04 <setIsaError>
			printIsaError();
    18ca:	0e 94 08 06 	call	0xc10	; 0xc10 <printIsaError>
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
			return NULL;
    18d2:	43 c0       	rjmp	.+134    	; 0x195a <addGraph+0x140>
	}
	else
	{
		printf("Added graph at index %d\r\n",free_index);
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <addGraph+0xbc>
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <addGraph+0xbe>
    18d8:	ed b7       	in	r30, 0x3d	; 61
    18da:	fe b7       	in	r31, 0x3e	; 62
    18dc:	31 96       	adiw	r30, 0x01	; 1
    18de:	89 ea       	ldi	r24, 0xA9	; 169
    18e0:	93 e0       	ldi	r25, 0x03	; 3
    18e2:	ad b7       	in	r26, 0x3d	; 61
    18e4:	be b7       	in	r27, 0x3e	; 62
    18e6:	12 96       	adiw	r26, 0x02	; 2
    18e8:	9c 93       	st	X, r25
    18ea:	8e 93       	st	-X, r24
    18ec:	11 97       	sbiw	r26, 0x01	; 1
    18ee:	e2 82       	std	Z+2, r14	; 0x02
    18f0:	13 82       	std	Z+3, r1	; 0x03
    18f2:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
		UPDATE_GRAPH:
		dlmoGraph[free_index].index = graphId;
    18fe:	8e 2d       	mov	r24, r14
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	fc 01       	movw	r30, r24
    1904:	ee 0f       	add	r30, r30
    1906:	ff 1f       	adc	r31, r31
    1908:	9c 01       	movw	r18, r24
    190a:	43 e0       	ldi	r20, 0x03	; 3
    190c:	22 0f       	add	r18, r18
    190e:	33 1f       	adc	r19, r19
    1910:	4a 95       	dec	r20
    1912:	e1 f7       	brne	.-8      	; 0x190c <addGraph+0xf2>
    1914:	e2 0f       	add	r30, r18
    1916:	f3 1f       	adc	r31, r19
    1918:	e7 5a       	subi	r30, 0xA7	; 167
    191a:	fe 4e       	sbci	r31, 0xEE	; 238
    191c:	d1 83       	std	Z+1, r29	; 0x01
    191e:	c0 83       	st	Z, r28
		dlmoGraph[free_index].info = ISASET(SHIFTLEFT(neighborCount, NEIGHBOR_COUNT_LOWER_BIT), dlmoGraph[free_index].info );	//set the neighbor count
    1920:	dc 01       	movw	r26, r24
    1922:	aa 0f       	add	r26, r26
    1924:	bb 1f       	adc	r27, r27
    1926:	aa 0f       	add	r26, r26
    1928:	bb 1f       	adc	r27, r27
    192a:	a8 0f       	add	r26, r24
    192c:	b9 1f       	adc	r27, r25
    192e:	aa 0f       	add	r26, r26
    1930:	bb 1f       	adc	r27, r27
    1932:	a5 5a       	subi	r26, 0xA5	; 165
    1934:	be 4e       	sbci	r27, 0xEE	; 238
    1936:	8c 91       	ld	r24, X
    1938:	f2 94       	swap	r15
    193a:	10 ef       	ldi	r17, 0xF0	; 240
    193c:	f1 22       	and	r15, r17
    193e:	f8 2a       	or	r15, r24
    1940:	fc 92       	st	X, r15
		dlmoGraph[free_index].neighbor[0] = n1;
    1942:	d5 82       	std	Z+5, r13	; 0x05
    1944:	c4 82       	std	Z+4, r12	; 0x04
		dlmoGraph[free_index].neighbor[1] = n2;
    1946:	b7 82       	std	Z+7, r11	; 0x07
    1948:	a6 82       	std	Z+6, r10	; 0x06
		dlmoGraph[free_index].neighbor[2] = n3;
    194a:	91 86       	std	Z+9, r9	; 0x09
    194c:	80 86       	std	Z+8, r8	; 0x08
		return &dlmoGraph[free_index];
    194e:	2a e0       	ldi	r18, 0x0A	; 10
    1950:	e2 9e       	mul	r14, r18
    1952:	90 01       	movw	r18, r0
    1954:	11 24       	eor	r1, r1
    1956:	27 5a       	subi	r18, 0xA7	; 167
    1958:	3e 4e       	sbci	r19, 0xEE	; 238
	}

}
    195a:	c9 01       	movw	r24, r18
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
    1962:	0f 91       	pop	r16
    1964:	ff 90       	pop	r15
    1966:	ef 90       	pop	r14
    1968:	df 90       	pop	r13
    196a:	cf 90       	pop	r12
    196c:	bf 90       	pop	r11
    196e:	af 90       	pop	r10
    1970:	9f 90       	pop	r9
    1972:	8f 90       	pop	r8
    1974:	08 95       	ret

00001976 <addNeighbor>:
         |
         |  Returns:
         |		DLMO_NEIGHBOR* - pointer to the neighbor added/updated
         *-------------------------------------------------------------------*/
DLMO_NEIGHBOR* addNeighbor(uint16_t index,uint64_t EUI64, uint8_t groupCode1, uint8_t groupCode2, bool clockSource,uint8_t  linkBacklogIndex,uint8_t linkBacklogDur, uint8_t linkBacklogActivate)
{
    1976:	2f 92       	push	r2
    1978:	3f 92       	push	r3
    197a:	4f 92       	push	r4
    197c:	5f 92       	push	r5
    197e:	6f 92       	push	r6
    1980:	7f 92       	push	r7
    1982:	8f 92       	push	r8
    1984:	9f 92       	push	r9
    1986:	af 92       	push	r10
    1988:	bf 92       	push	r11
    198a:	cf 92       	push	r12
    198c:	df 92       	push	r13
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	0f 92       	push	r0
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	3c 01       	movw	r6, r24
    19a2:	53 2e       	mov	r5, r19
    19a4:	b4 2e       	mov	r11, r20
    19a6:	f5 2e       	mov	r15, r21
    19a8:	d6 2e       	mov	r13, r22
    19aa:	97 2e       	mov	r9, r23
    19ac:	22 24       	eor	r2, r2
    19ae:	33 24       	eor	r3, r3
    19b0:	44 24       	eor	r4, r4
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	92 2d       	mov	r25, r2
	uint8_t i,free_index=0;
	bool free_index_present = false;
	for(uint8_t i=0;i<DLMO_NEIGHBOR_MAX_COUNT;i++)
	{
		if(index == dlmoNeighbor[i].index && dlmoNeighbor[i].isPresent == true)
    19b6:	f1 01       	movw	r30, r2
    19b8:	54 e0       	ldi	r21, 0x04	; 4
    19ba:	ee 0f       	add	r30, r30
    19bc:	ff 1f       	adc	r31, r31
    19be:	5a 95       	dec	r21
    19c0:	e1 f7       	brne	.-8      	; 0x19ba <addNeighbor+0x44>
    19c2:	e2 0d       	add	r30, r2
    19c4:	f3 1d       	adc	r31, r3
    19c6:	e2 54       	subi	r30, 0x42	; 66
    19c8:	fe 4e       	sbci	r31, 0xEE	; 238
    19ca:	41 81       	ldd	r20, Z+1	; 0x01
    19cc:	52 81       	ldd	r21, Z+2	; 0x02
    19ce:	64 16       	cp	r6, r20
    19d0:	75 06       	cpc	r7, r21
    19d2:	b1 f4       	brne	.+44     	; 0x1a00 <addNeighbor+0x8a>
    19d4:	30 81       	ld	r19, Z
    19d6:	33 23       	and	r19, r19
    19d8:	99 f0       	breq	.+38     	; 0x1a00 <addNeighbor+0x8a>
		{
			printf("Neighbor %d Exists in Table - updating\n\r",index);
    19da:	00 d0       	rcall	.+0      	; 0x19dc <addNeighbor+0x66>
    19dc:	00 d0       	rcall	.+0      	; 0x19de <addNeighbor+0x68>
    19de:	83 ec       	ldi	r24, 0xC3	; 195
    19e0:	93 e0       	ldi	r25, 0x03	; 3
    19e2:	ad b7       	in	r26, 0x3d	; 61
    19e4:	be b7       	in	r27, 0x3e	; 62
    19e6:	12 96       	adiw	r26, 0x02	; 2
    19e8:	9c 93       	st	X, r25
    19ea:	8e 93       	st	-X, r24
    19ec:	11 97       	sbiw	r26, 0x01	; 1
    19ee:	14 96       	adiw	r26, 0x04	; 4
    19f0:	7c 92       	st	X, r7
    19f2:	6e 92       	st	-X, r6
    19f4:	13 97       	sbiw	r26, 0x03	; 3
    19f6:	29 83       	std	Y+1, r18	; 0x01
    19f8:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    19fc:	42 2c       	mov	r4, r2
    19fe:	34 c0       	rjmp	.+104    	; 0x1a68 <addNeighbor+0xf2>
			free_index = i;
			goto UPDATE_NEIGHBOR;
		}
		if(dlmoNeighbor[i].isPresent == false && free_index_present == false)
    1a00:	f1 01       	movw	r30, r2
    1a02:	44 e0       	ldi	r20, 0x04	; 4
    1a04:	ee 0f       	add	r30, r30
    1a06:	ff 1f       	adc	r31, r31
    1a08:	4a 95       	dec	r20
    1a0a:	e1 f7       	brne	.-8      	; 0x1a04 <addNeighbor+0x8e>
    1a0c:	e2 0d       	add	r30, r2
    1a0e:	f3 1d       	adc	r31, r3
    1a10:	e2 54       	subi	r30, 0x42	; 66
    1a12:	fe 4e       	sbci	r31, 0xEE	; 238
    1a14:	30 81       	ld	r19, Z
    1a16:	33 23       	and	r19, r19
    1a18:	21 f4       	brne	.+8      	; 0x1a22 <addNeighbor+0xac>
    1a1a:	88 23       	and	r24, r24
    1a1c:	11 f4       	brne	.+4      	; 0x1a22 <addNeighbor+0xac>
    1a1e:	49 2e       	mov	r4, r25
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	08 94       	sec
    1a24:	21 1c       	adc	r2, r1
    1a26:	31 1c       	adc	r3, r1
         *-------------------------------------------------------------------*/
DLMO_NEIGHBOR* addNeighbor(uint16_t index,uint64_t EUI64, uint8_t groupCode1, uint8_t groupCode2, bool clockSource,uint8_t  linkBacklogIndex,uint8_t linkBacklogDur, uint8_t linkBacklogActivate)
{
	uint8_t i,free_index=0;
	bool free_index_present = false;
	for(uint8_t i=0;i<DLMO_NEIGHBOR_MAX_COUNT;i++)
    1a28:	b0 e1       	ldi	r27, 0x10	; 16
    1a2a:	2b 16       	cp	r2, r27
    1a2c:	31 04       	cpc	r3, r1
    1a2e:	11 f6       	brne	.-124    	; 0x19b4 <addNeighbor+0x3e>
		{
					free_index_present = true;
					free_index = i;
		}
	}
	if(free_index_present == false)
    1a30:	88 23       	and	r24, r24
    1a32:	41 f4       	brne	.+16     	; 0x1a44 <addNeighbor+0xce>
	{
			setIsaError(NEIGHBOR_CAPACITY_ERROR);
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	0e 94 02 06 	call	0xc04	; 0xc04 <setIsaError>
			printIsaError();
    1a3a:	0e 94 08 06 	call	0xc10	; 0xc10 <printIsaError>
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
			return NULL;
    1a42:	5b c0       	rjmp	.+182    	; 0x1afa <addNeighbor+0x184>
	}
	else
	{
		printf("Added Neighbor at Index %d\r\n",free_index);
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <addNeighbor+0xd0>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <addNeighbor+0xd2>
    1a48:	ed b7       	in	r30, 0x3d	; 61
    1a4a:	fe b7       	in	r31, 0x3e	; 62
    1a4c:	31 96       	adiw	r30, 0x01	; 1
    1a4e:	8c ee       	ldi	r24, 0xEC	; 236
    1a50:	93 e0       	ldi	r25, 0x03	; 3
    1a52:	ad b7       	in	r26, 0x3d	; 61
    1a54:	be b7       	in	r27, 0x3e	; 62
    1a56:	12 96       	adiw	r26, 0x02	; 2
    1a58:	9c 93       	st	X, r25
    1a5a:	8e 93       	st	-X, r24
    1a5c:	11 97       	sbiw	r26, 0x01	; 1
    1a5e:	42 82       	std	Z+2, r4	; 0x02
    1a60:	13 82       	std	Z+3, r1	; 0x03
    1a62:	29 83       	std	Y+1, r18	; 0x01
    1a64:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	29 81       	ldd	r18, Y+1	; 0x01
		UPDATE_NEIGHBOR:
		dlmoNeighbor[free_index].index = index;
    1a72:	84 2d       	mov	r24, r4
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	fc 01       	movw	r30, r24
    1a78:	34 e0       	ldi	r19, 0x04	; 4
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	3a 95       	dec	r19
    1a80:	e1 f7       	brne	.-8      	; 0x1a7a <addNeighbor+0x104>
    1a82:	e8 0f       	add	r30, r24
    1a84:	f9 1f       	adc	r31, r25
    1a86:	e2 54       	subi	r30, 0x42	; 66
    1a88:	fe 4e       	sbci	r31, 0xEE	; 238
    1a8a:	72 82       	std	Z+2, r7	; 0x02
    1a8c:	61 82       	std	Z+1, r6	; 0x01
		dlmoNeighbor[free_index].isPresent = true;
    1a8e:	31 e0       	ldi	r19, 0x01	; 1
    1a90:	30 83       	st	Z, r19
		dlmoNeighbor[free_index].EUI64 = EUI64;
    1a92:	df 01       	movw	r26, r30
    1a94:	13 96       	adiw	r26, 0x03	; 3
    1a96:	03 83       	std	Z+3, r16	; 0x03
    1a98:	11 96       	adiw	r26, 0x01	; 1
    1a9a:	1c 93       	st	X, r17
    1a9c:	11 97       	sbiw	r26, 0x01	; 1
    1a9e:	12 96       	adiw	r26, 0x02	; 2
    1aa0:	2c 93       	st	X, r18
    1aa2:	12 97       	sbiw	r26, 0x02	; 2
    1aa4:	13 96       	adiw	r26, 0x03	; 3
    1aa6:	5c 92       	st	X, r5
    1aa8:	13 97       	sbiw	r26, 0x03	; 3
    1aaa:	14 96       	adiw	r26, 0x04	; 4
    1aac:	bc 92       	st	X, r11
    1aae:	14 97       	sbiw	r26, 0x04	; 4
    1ab0:	15 96       	adiw	r26, 0x05	; 5
    1ab2:	fc 92       	st	X, r15
    1ab4:	15 97       	sbiw	r26, 0x05	; 5
    1ab6:	16 96       	adiw	r26, 0x06	; 6
    1ab8:	dc 92       	st	X, r13
    1aba:	16 97       	sbiw	r26, 0x06	; 6
    1abc:	17 96       	adiw	r26, 0x07	; 7
    1abe:	9c 92       	st	X, r9
    1ac0:	17 97       	sbiw	r26, 0x07	; 7
		dlmoNeighbor[free_index].groupCode1 = groupCode1;
    1ac2:	e3 86       	std	Z+11, r14	; 0x0b
		dlmoNeighbor[free_index].groupCode2 = groupCode2;
    1ac4:	c4 86       	std	Z+12, r12	; 0x0c
	    if(clockSource == true) dlmoNeighbor[free_index].typeInfo = ISASET(dlmoNeighbor[free_index].typeInfo,CLOCK_PREFERRED);
    1ac6:	aa 20       	and	r10, r10
    1ac8:	19 f0       	breq	.+6      	; 0x1ad0 <addNeighbor+0x15a>
    1aca:	25 85       	ldd	r18, Z+13	; 0x0d
    1acc:	20 68       	ori	r18, 0x80	; 128
    1ace:	25 87       	std	Z+13, r18	; 0x0d
		dlmoNeighbor[free_index].linkBacklogIndex = linkBacklogIndex;
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	14 e0       	ldi	r17, 0x04	; 4
    1ad4:	ee 0f       	add	r30, r30
    1ad6:	ff 1f       	adc	r31, r31
    1ad8:	1a 95       	dec	r17
    1ada:	e1 f7       	brne	.-8      	; 0x1ad4 <addNeighbor+0x15e>
    1adc:	e8 0f       	add	r30, r24
    1ade:	f9 1f       	adc	r31, r25
    1ae0:	e2 54       	subi	r30, 0x42	; 66
    1ae2:	fe 4e       	sbci	r31, 0xEE	; 238
    1ae4:	86 86       	std	Z+14, r8	; 0x0e
		dlmoNeighbor[free_index].linkBacklogDur = linkBacklogDur;
    1ae6:	8e 89       	ldd	r24, Y+22	; 0x16
    1ae8:	87 87       	std	Z+15, r24	; 0x0f
		dlmoNeighbor[free_index].linkBacklogActivate = linkBacklogActivate;
    1aea:	8f 89       	ldd	r24, Y+23	; 0x17
    1aec:	80 8b       	std	Z+16, r24	; 0x10
		return &dlmoNeighbor[free_index];
    1aee:	21 e1       	ldi	r18, 0x11	; 17
    1af0:	42 9e       	mul	r4, r18
    1af2:	90 01       	movw	r18, r0
    1af4:	11 24       	eor	r1, r1
    1af6:	22 54       	subi	r18, 0x42	; 66
    1af8:	3e 4e       	sbci	r19, 0xEE	; 238
	}
}
    1afa:	c9 01       	movw	r24, r18
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	df 90       	pop	r13
    1b0c:	cf 90       	pop	r12
    1b0e:	bf 90       	pop	r11
    1b10:	af 90       	pop	r10
    1b12:	9f 90       	pop	r9
    1b14:	8f 90       	pop	r8
    1b16:	7f 90       	pop	r7
    1b18:	6f 90       	pop	r6
    1b1a:	5f 90       	pop	r5
    1b1c:	4f 90       	pop	r4
    1b1e:	3f 90       	pop	r3
    1b20:	2f 90       	pop	r2
    1b22:	08 95       	ret

00001b24 <addLink>:
         |  Returns:
         |		ISA_SUCCESS
		 |		ISA_ERROR
         *-------------------------------------------------------------------*/
int8_t addLink(uint8_t slotNumber, uint16_t neighborId, uint16_t graphId , LinkType linkType, GraphType graphType)
{
    1b24:	9f 92       	push	r9
    1b26:	af 92       	push	r10
    1b28:	bf 92       	push	r11
    1b2a:	cf 92       	push	r12
    1b2c:	df 92       	push	r13
    1b2e:	ef 92       	push	r14
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	18 2f       	mov	r17, r24
    1b3c:	eb 01       	movw	r28, r22
    1b3e:	7a 01       	movw	r14, r20
    1b40:	d2 2e       	mov	r13, r18
    1b42:	90 2e       	mov	r9, r16
	uint8_t index;
	int8_t freeIndex = -1;
	DLMO_NEIGHBOR* neighborPtr = NULL;	// neighbor pointer to store
	DLMO_GRAPH* graphPtr = NULL;			// graph pointer to store

	if (slotNumber >=  ISA_MAX_SLOTS) {
    1b44:	8f 33       	cpi	r24, 0x3F	; 63
    1b46:	28 f0       	brcs	.+10     	; 0x1b52 <addLink+0x2e>
			printf ("Slot number not in range\r\n");
    1b48:	89 e0       	ldi	r24, 0x09	; 9
    1b4a:	94 e0       	ldi	r25, 0x04	; 4
    1b4c:	0e 94 4d 48 	call	0x909a	; 0x909a <puts>
    1b50:	e6 c0       	rjmp	.+460    	; 0x1d1e <addLink+0x1fa>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0f ef       	ldi	r16, 0xFF	; 255
    1b58:	c8 2e       	mov	r12, r24
			return;
		}

	for (index = 0; index < DLMO_LINK_MAX_COUNT; index++)
		{
		if (freeIndex==-1 && dlmoLink[index].isPresent == false) freeIndex = index;
    1b5a:	0f 3f       	cpi	r16, 0xFF	; 255
    1b5c:	89 f4       	brne	.+34     	; 0x1b80 <addLink+0x5c>
    1b5e:	9c 01       	movw	r18, r24
    1b60:	22 0f       	add	r18, r18
    1b62:	33 1f       	adc	r19, r19
    1b64:	f9 01       	movw	r30, r18
    1b66:	63 e0       	ldi	r22, 0x03	; 3
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	6a 95       	dec	r22
    1b6e:	e1 f7       	brne	.-8      	; 0x1b68 <addLink+0x44>
    1b70:	e2 0f       	add	r30, r18
    1b72:	f3 1f       	adc	r31, r19
    1b74:	e7 59       	subi	r30, 0x97	; 151
    1b76:	f0 4f       	sbci	r31, 0xF0	; 240
    1b78:	20 81       	ld	r18, Z
    1b7a:	22 23       	and	r18, r18
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <addLink+0x5c>
    1b7e:	08 2f       	mov	r16, r24
		if (dlmoLink[index].chOffset == slotNumber) {
    1b80:	9c 01       	movw	r18, r24
    1b82:	22 0f       	add	r18, r18
    1b84:	33 1f       	adc	r19, r19
    1b86:	f9 01       	movw	r30, r18
    1b88:	43 e0       	ldi	r20, 0x03	; 3
    1b8a:	ee 0f       	add	r30, r30
    1b8c:	ff 1f       	adc	r31, r31
    1b8e:	4a 95       	dec	r20
    1b90:	e1 f7       	brne	.-8      	; 0x1b8a <addLink+0x66>
    1b92:	e2 0f       	add	r30, r18
    1b94:	f3 1f       	adc	r31, r19
    1b96:	e7 59       	subi	r30, 0x97	; 151
    1b98:	f0 4f       	sbci	r31, 0xF0	; 240
    1b9a:	20 89       	ldd	r18, Z+16	; 0x10
    1b9c:	21 17       	cp	r18, r17
    1b9e:	b9 f4       	brne	.+46     	; 0x1bce <addLink+0xaa>
			printf ("Slot %d already configured- updating\r\n",slotNumber);
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <addLink+0x7e>
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <addLink+0x80>
    1ba4:	ed b7       	in	r30, 0x3d	; 61
    1ba6:	fe b7       	in	r31, 0x3e	; 62
    1ba8:	31 96       	adiw	r30, 0x01	; 1
    1baa:	83 e2       	ldi	r24, 0x23	; 35
    1bac:	94 e0       	ldi	r25, 0x04	; 4
    1bae:	ad b7       	in	r26, 0x3d	; 61
    1bb0:	be b7       	in	r27, 0x3e	; 62
    1bb2:	12 96       	adiw	r26, 0x02	; 2
    1bb4:	9c 93       	st	X, r25
    1bb6:	8e 93       	st	-X, r24
    1bb8:	11 97       	sbiw	r26, 0x01	; 1
    1bba:	12 83       	std	Z+2, r17	; 0x02
    1bbc:	13 82       	std	Z+3, r1	; 0x03
    1bbe:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
			freeIndex = index;
    1bc2:	0c 2d       	mov	r16, r12
			goto UPDATE_LINK;
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f c0       	rjmp	.+30     	; 0x1bec <addLink+0xc8>
    1bce:	c3 94       	inc	r12
    1bd0:	01 96       	adiw	r24, 0x01	; 1
	if (slotNumber >=  ISA_MAX_SLOTS) {
			printf ("Slot number not in range\r\n");
			return;
		}

	for (index = 0; index < DLMO_LINK_MAX_COUNT; index++)
    1bd2:	84 31       	cpi	r24, 0x14	; 20
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	09 f0       	breq	.+2      	; 0x1bda <addLink+0xb6>
    1bd8:	bf cf       	rjmp	.-130    	; 0x1b58 <addLink+0x34>
			freeIndex = index;
			goto UPDATE_LINK;
		}
		}

	if (freeIndex == -1)
    1bda:	0f 3f       	cpi	r16, 0xFF	; 255
    1bdc:	39 f4       	brne	.+14     	; 0x1bec <addLink+0xc8>
		{

			 setIsaError(LINK_CAPACITY_ERROR);
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	0e 94 02 06 	call	0xc04	; 0xc04 <setIsaError>
			 printIsaError();
    1be4:	0e 94 08 06 	call	0xc10	; 0xc10 <printIsaError>
    1be8:	8f ef       	ldi	r24, 0xFF	; 255
			 return ISA_ERROR;
    1bea:	99 c0       	rjmp	.+306    	; 0x1d1e <addLink+0x1fa>
		}


	//we have found a free index
	UPDATE_LINK:
	if (linkType == TX_NO_ADV){
    1bec:	b1 e0       	ldi	r27, 0x01	; 1
    1bee:	db 16       	cp	r13, r27
    1bf0:	29 f0       	breq	.+10     	; 0x1bfc <addLink+0xd8>
    1bf2:	c0 e0       	ldi	r28, 0x00	; 0
    1bf4:	d0 e0       	ldi	r29, 0x00	; 0
    1bf6:	aa 24       	eor	r10, r10
    1bf8:	bb 24       	eor	r11, r11
    1bfa:	13 c0       	rjmp	.+38     	; 0x1c22 <addLink+0xfe>

	//find the neighbor pointer
	if (neighborId!=0)
    1bfc:	20 97       	sbiw	r28, 0x00	; 0
    1bfe:	19 f4       	brne	.+6      	; 0x1c06 <addLink+0xe2>
    1c00:	aa 24       	eor	r10, r10
    1c02:	bb 24       	eor	r11, r11
    1c04:	04 c0       	rjmp	.+8      	; 0x1c0e <addLink+0xea>
		{
			neighborPtr = findNeighbor(neighborId);
    1c06:	ce 01       	movw	r24, r28
    1c08:	0e 94 62 06 	call	0xcc4	; 0xcc4 <findNeighbor>
    1c0c:	5c 01       	movw	r10, r24
		}
	//find the graph pointer
	if (graphId!=0)
    1c0e:	e1 14       	cp	r14, r1
    1c10:	f1 04       	cpc	r15, r1
    1c12:	19 f4       	brne	.+6      	; 0x1c1a <addLink+0xf6>
    1c14:	c0 e0       	ldi	r28, 0x00	; 0
    1c16:	d0 e0       	ldi	r29, 0x00	; 0
    1c18:	04 c0       	rjmp	.+8      	; 0x1c22 <addLink+0xfe>
	{
		graphPtr = findGraph(graphId);
    1c1a:	c7 01       	movw	r24, r14
    1c1c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <findGraph>
    1c20:	ec 01       	movw	r28, r24
	}

	}
	printf("Added link at index %d\r\n",freeIndex);
    1c22:	e0 2e       	mov	r14, r16
    1c24:	ff 24       	eor	r15, r15
    1c26:	e7 fc       	sbrc	r14, 7
    1c28:	f0 94       	com	r15
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <addLink+0x108>
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <addLink+0x10a>
    1c2e:	8a e4       	ldi	r24, 0x4A	; 74
    1c30:	94 e0       	ldi	r25, 0x04	; 4
    1c32:	ed b7       	in	r30, 0x3d	; 61
    1c34:	fe b7       	in	r31, 0x3e	; 62
    1c36:	92 83       	std	Z+2, r25	; 0x02
    1c38:	81 83       	std	Z+1, r24	; 0x01
    1c3a:	f4 82       	std	Z+4, r15	; 0x04
    1c3c:	e3 82       	std	Z+3, r14	; 0x03
    1c3e:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
	 dlmoLink[freeIndex].isPresent = true;
    1c42:	ee 0c       	add	r14, r14
    1c44:	ff 1c       	adc	r15, r15
    1c46:	f7 01       	movw	r30, r14
    1c48:	b3 e0       	ldi	r27, 0x03	; 3
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	ba 95       	dec	r27
    1c50:	e1 f7       	brne	.-8      	; 0x1c4a <addLink+0x126>
    1c52:	ee 0d       	add	r30, r14
    1c54:	ff 1d       	adc	r31, r15
    1c56:	e7 59       	subi	r30, 0x97	; 151
    1c58:	f0 4f       	sbci	r31, 0xF0	; 240
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	80 83       	st	Z, r24
	 dlmoLink[freeIndex].neighbor = neighborPtr;
    1c5e:	b1 86       	std	Z+9, r11	; 0x09
    1c60:	a0 86       	std	Z+8, r10	; 0x08
	 dlmoLink[freeIndex].graphPtr = graphPtr;
    1c62:	d3 87       	std	Z+11, r29	; 0x0b
    1c64:	c2 87       	std	Z+10, r28	; 0x0a
	 dlmoLink[freeIndex].linkType = linkType;
    1c66:	d4 82       	std	Z+4, r13	; 0x04
	 //reset the previous slot number before updating
	// isa_slot &= ~(((uint64_t) 1) << dlmoLink[freeIndex].chOffset);
	 dlmoLink[freeIndex].chOffset = slotNumber;
    1c68:	10 8b       	std	Z+16, r17	; 0x10
	 dlmoLink[freeIndex].graphPtr = graphPtr;
    1c6a:	d3 87       	std	Z+11, r29	; 0x0b
    1c6c:	c2 87       	std	Z+10, r28	; 0x0a
	 dlmoLink[freeIndex].typeInfo = ISASET(dlmoLink[index].typeInfo, SHIFTLEFT(graphType, GRAPH_TYPE_BIT));
    1c6e:	8c 2d       	mov	r24, r12
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	dc 01       	movw	r26, r24
    1c78:	73 e0       	ldi	r23, 0x03	; 3
    1c7a:	aa 0f       	add	r26, r26
    1c7c:	bb 1f       	adc	r27, r27
    1c7e:	7a 95       	dec	r23
    1c80:	e1 f7       	brne	.-8      	; 0x1c7a <addLink+0x156>
    1c82:	a8 0f       	add	r26, r24
    1c84:	b9 1f       	adc	r27, r25
    1c86:	a7 59       	subi	r26, 0x97	; 151
    1c88:	b0 4f       	sbci	r27, 0xF0	; 240
    1c8a:	17 96       	adiw	r26, 0x07	; 7
    1c8c:	8c 91       	ld	r24, X
    1c8e:	17 97       	sbiw	r26, 0x07	; 7
    1c90:	92 94       	swap	r9
    1c92:	60 ef       	ldi	r22, 0xF0	; 240
    1c94:	96 22       	and	r9, r22
    1c96:	98 2a       	or	r9, r24
    1c98:	97 82       	std	Z+7, r9	; 0x07
	 // channel offset implementation will change as the protocol develops
	 //record that the slot is in use- used to calculate next wakeup
	 if(slotNumber == 23) putchar('x');
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	17 31       	cpi	r17, 0x17	; 23
    1ca4:	41 f4       	brne	.+16     	; 0x1cb6 <addLink+0x192>
    1ca6:	60 91 48 20 	lds	r22, 0x2048
    1caa:	70 91 49 20 	lds	r23, 0x2049
    1cae:	88 e7       	ldi	r24, 0x78	; 120
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
	 	isa_slot |= ((uint64_t) 1) << slotNumber;
    1cb6:	21 e0       	ldi	r18, 0x01	; 1
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	01 2f       	mov	r16, r17
    1cc8:	0e 94 02 45 	call	0x8a04	; 0x8a04 <__ashldi3>
    1ccc:	e0 91 dd 10 	lds	r30, 0x10DD
    1cd0:	e2 2b       	or	r30, r18
    1cd2:	e0 93 dd 10 	sts	0x10DD, r30
    1cd6:	20 91 de 10 	lds	r18, 0x10DE
    1cda:	23 2b       	or	r18, r19
    1cdc:	20 93 de 10 	sts	0x10DE, r18
    1ce0:	20 91 df 10 	lds	r18, 0x10DF
    1ce4:	24 2b       	or	r18, r20
    1ce6:	20 93 df 10 	sts	0x10DF, r18
    1cea:	20 91 e0 10 	lds	r18, 0x10E0
    1cee:	25 2b       	or	r18, r21
    1cf0:	20 93 e0 10 	sts	0x10E0, r18
    1cf4:	20 91 e1 10 	lds	r18, 0x10E1
    1cf8:	26 2b       	or	r18, r22
    1cfa:	20 93 e1 10 	sts	0x10E1, r18
    1cfe:	20 91 e2 10 	lds	r18, 0x10E2
    1d02:	27 2b       	or	r18, r23
    1d04:	20 93 e2 10 	sts	0x10E2, r18
    1d08:	20 91 e3 10 	lds	r18, 0x10E3
    1d0c:	28 2b       	or	r18, r24
    1d0e:	20 93 e3 10 	sts	0x10E3, r18
    1d12:	80 91 e4 10 	lds	r24, 0x10E4
    1d16:	89 2b       	or	r24, r25
    1d18:	80 93 e4 10 	sts	0x10E4, r24
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
	return ISA_SUCCESS;
}
    1d1e:	df 91       	pop	r29
    1d20:	cf 91       	pop	r28
    1d22:	1f 91       	pop	r17
    1d24:	0f 91       	pop	r16
    1d26:	ff 90       	pop	r15
    1d28:	ef 90       	pop	r14
    1d2a:	df 90       	pop	r13
    1d2c:	cf 90       	pop	r12
    1d2e:	bf 90       	pop	r11
    1d30:	af 90       	pop	r10
    1d32:	9f 90       	pop	r9
    1d34:	08 95       	ret

00001d36 <config_child_list>:
uint16_t adjacencyMatrix[DLMO_NEIGHBOR_MAX_COUNT];


void config_child_list (uint8_t node_id)
{
    child_list |= ((uint32_t) 1) << node_id;
    1d36:	21 e0       	ldi	r18, 0x01	; 1
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	04 c0       	rjmp	.+8      	; 0x1d48 <config_child_list+0x12>
    1d40:	22 0f       	add	r18, r18
    1d42:	33 1f       	adc	r19, r19
    1d44:	44 1f       	adc	r20, r20
    1d46:	55 1f       	adc	r21, r21
    1d48:	8a 95       	dec	r24
    1d4a:	d2 f7       	brpl	.-12     	; 0x1d40 <config_child_list+0xa>
    1d4c:	80 91 0b 0c 	lds	r24, 0x0C0B
    1d50:	90 91 0c 0c 	lds	r25, 0x0C0C
    1d54:	a0 91 0d 0c 	lds	r26, 0x0C0D
    1d58:	b0 91 0e 0c 	lds	r27, 0x0C0E
    1d5c:	82 2b       	or	r24, r18
    1d5e:	93 2b       	or	r25, r19
    1d60:	a4 2b       	or	r26, r20
    1d62:	b5 2b       	or	r27, r21
    1d64:	80 93 0b 0c 	sts	0x0C0B, r24
    1d68:	90 93 0c 0c 	sts	0x0C0C, r25
    1d6c:	a0 93 0d 0c 	sts	0x0C0D, r26
    1d70:	b0 93 0e 0c 	sts	0x0C0E, r27
}
    1d74:	08 95       	ret

00001d76 <isa_get_channel>:
         |  Returns:  uint8_t channel value
         *-------------------------------------------------------------------*/
uint8_t isa_get_channel()
{
    return isa_param.channel;
}
    1d76:	80 91 24 0c 	lds	r24, 0x0C24
    1d7a:	08 95       	ret

00001d7c <isa_set_channel_pattern>:

void isa_set_channel_pattern(uint8_t pattern)
{
    switch (pattern)
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	19 f0       	breq	.+6      	; 0x1d86 <isa_set_channel_pattern+0xa>
    1d80:	83 30       	cpi	r24, 0x03	; 3
    1d82:	d9 f5       	brne	.+118    	; 0x1dfa <isa_set_channel_pattern+0x7e>
    1d84:	31 c0       	rjmp	.+98     	; 0x1de8 <isa_set_channel_pattern+0x6c>
    {
        case 1:
            slottedPattern[0] = 19;
    1d86:	83 e1       	ldi	r24, 0x13	; 19
    1d88:	80 93 25 1e 	sts	0x1E25, r24
            slottedPattern[1] = 12;
    1d8c:	8c e0       	ldi	r24, 0x0C	; 12
    1d8e:	80 93 26 1e 	sts	0x1E26, r24
            slottedPattern[2] = 20;
    1d92:	84 e1       	ldi	r24, 0x14	; 20
    1d94:	80 93 27 1e 	sts	0x1E27, r24
            slottedPattern[3] = 24;
    1d98:	88 e1       	ldi	r24, 0x18	; 24
    1d9a:	80 93 28 1e 	sts	0x1E28, r24
            slottedPattern[4] = 16;
    1d9e:	80 e1       	ldi	r24, 0x10	; 16
    1da0:	80 93 29 1e 	sts	0x1E29, r24
            slottedPattern[5] = 23;
    1da4:	87 e1       	ldi	r24, 0x17	; 23
    1da6:	80 93 2a 1e 	sts	0x1E2A, r24
            slottedPattern[6] = 18;
    1daa:	82 e1       	ldi	r24, 0x12	; 18
    1dac:	80 93 2b 1e 	sts	0x1E2B, r24
            slottedPattern[7] = 25;
    1db0:	89 e1       	ldi	r24, 0x19	; 25
    1db2:	80 93 2c 1e 	sts	0x1E2C, r24
            slottedPattern[8] = 14;
    1db6:	8e e0       	ldi	r24, 0x0E	; 14
    1db8:	80 93 2d 1e 	sts	0x1E2D, r24
            slottedPattern[9] = 21;
    1dbc:	85 e1       	ldi	r24, 0x15	; 21
    1dbe:	80 93 2e 1e 	sts	0x1E2E, r24
            slottedPattern[10] = 11;
    1dc2:	8b e0       	ldi	r24, 0x0B	; 11
    1dc4:	80 93 2f 1e 	sts	0x1E2F, r24
            slottedPattern[11] = 15;
    1dc8:	8f e0       	ldi	r24, 0x0F	; 15
    1dca:	80 93 30 1e 	sts	0x1E30, r24
            slottedPattern[12] = 22;
    1dce:	86 e1       	ldi	r24, 0x16	; 22
    1dd0:	80 93 31 1e 	sts	0x1E31, r24
            slottedPattern[13] = 17;
    1dd4:	81 e1       	ldi	r24, 0x11	; 17
    1dd6:	80 93 32 1e 	sts	0x1E32, r24
            slottedPattern[14] = 13;
    1dda:	8d e0       	ldi	r24, 0x0D	; 13
    1ddc:	80 93 33 1e 	sts	0x1E33, r24
            slottedPattern[15] = 26;
    1de0:	8a e1       	ldi	r24, 0x1A	; 26
    1de2:	80 93 34 1e 	sts	0x1E34, r24
            break;
    1de6:	08 95       	ret
        case 3:
            slowPattern[0]=15;
    1de8:	8f e0       	ldi	r24, 0x0F	; 15
    1dea:	80 93 21 1e 	sts	0x1E21, r24
            slowPattern[1]=20;
    1dee:	84 e1       	ldi	r24, 0x14	; 20
    1df0:	80 93 22 1e 	sts	0x1E22, r24
            slowPattern[2]=25;
    1df4:	89 e1       	ldi	r24, 0x19	; 25
    1df6:	80 93 23 1e 	sts	0x1E23, r24
    1dfa:	08 95       	ret

00001dfc <isa_ready>:
    }
}

int8_t isa_ready()
{
    if (_isa_ready ==  1)
    1dfc:	80 91 56 0e 	lds	r24, 0x0E56
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	11 f0       	breq	.+4      	; 0x1e08 <isa_ready+0xc>
    1e04:	8f ef       	ldi	r24, 0xFF	; 255
    1e06:	08 95       	ret
    1e08:	81 e0       	ldi	r24, 0x01	; 1
        return NRK_OK;
    else
        return NRK_ERROR;
}
    1e0a:	08 95       	ret

00001e0c <isa_rx_pkt_set_buffer>:

int8_t isa_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
{

    if(size==0 || buf==NULL) return NRK_ERROR;
    1e0c:	66 23       	and	r22, r22
    1e0e:	51 f0       	breq	.+20     	; 0x1e24 <isa_rx_pkt_set_buffer+0x18>
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	41 f0       	breq	.+16     	; 0x1e24 <isa_rx_pkt_set_buffer+0x18>
    isa_rfRxInfo.pPayload = buf;
    1e14:	90 93 17 0c 	sts	0x0C17, r25
    1e18:	80 93 16 0c 	sts	0x0C16, r24
    isa_rfRxInfo.max_length = size;
    1e1c:	60 93 15 0c 	sts	0x0C15, r22
    1e20:	81 e0       	ldi	r24, 0x01	; 1

return NRK_OK;
    1e22:	08 95       	ret
    1e24:	8f ef       	ldi	r24, 0xFF	; 255
}
    1e26:	08 95       	ret

00001e28 <isa_start>:
}

void isa_start ()
{
    //_isa_clear_sched_cache ();
    _isa_ready = 2;
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	80 93 56 0e 	sts	0x0E56, r24
}
    1e2e:	08 95       	ret

00001e30 <configDHDR>:
         |      (IN)DLMO_LINK * link - pointer to the link data structure that is used for the current slot
         |
         |  Returns:  DHDR
         *-------------------------------------------------------------------*/
int8_t configDHDR(DLMO_LINK * link)
{
    1e30:	fc 01       	movw	r30, r24


    int8_t DHDR = 1;                                        //lower two bits are always 01
    if(link->linkType == TX_NO_ADV){//request ACK/NACK for a TX link only
    1e32:	24 81       	ldd	r18, Z+4	; 0x04
    1e34:	21 30       	cpi	r18, 0x01	; 1
    1e36:	11 f4       	brne	.+4      	; 0x1e3c <configDHDR+0xc>
    1e38:	91 e8       	ldi	r25, 0x81	; 129
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <configDHDR+0xe>
    1e3c:	91 e0       	ldi	r25, 0x01	; 1
    }
    if(1){//request signal quality in ACK
        DHDR |= 1<<6;
    }
    if(1){//request EUI
        DHDR |= 1<<5;
    1e3e:	89 2f       	mov	r24, r25
    1e40:	80 66       	ori	r24, 0x60	; 96
    }
    if(link->linkType == ADV){//include DAUX if this is an ADV link
    1e42:	24 30       	cpi	r18, 0x04	; 4
    1e44:	11 f4       	brne	.+4      	; 0x1e4a <configDHDR+0x1a>
        DHDR |= 1<<4;
    1e46:	89 2f       	mov	r24, r25
    1e48:	80 67       	ori	r24, 0x70	; 112
    }
    if(0){//include slow hopping offset
        DHDR |= 1<<3;
    }
    if(ISAMASK(link->neighbor->typeInfo, CLOCK_PREFERRED) == CLOCK_PREFERRED){ //is clock recipient
    1e4a:	00 84       	ldd	r0, Z+8	; 0x08
    1e4c:	f1 85       	ldd	r31, Z+9	; 0x09
    1e4e:	e0 2d       	mov	r30, r0
    1e50:	95 85       	ldd	r25, Z+13	; 0x0d
    1e52:	97 fd       	sbrc	r25, 7
            /*
             * The link points to a neighbor that is configured
             *  for it. This checks if that neighbor is our clock source or not.
             *  If it is, then we should request for clock correction
             */
        DHDR |= 1<<2;
    1e54:	84 60       	ori	r24, 0x04	; 4
    }
    return DHDR;
}
    1e56:	08 95       	ret

00001e58 <configDHR>:
         |  Returns:  DHDR
         *-------------------------------------------------------------------*/
int8_t configDHR(uint8_t clockCorrection,uint8_t nack)
{
    int8_t DHR = 3;
    if(clockCorrection){//include clock correction change
    1e58:	88 23       	and	r24, r24
    1e5a:	11 f0       	breq	.+4      	; 0x1e60 <configDHR+0x8>
    1e5c:	83 e8       	ldi	r24, 0x83	; 131
    1e5e:	01 c0       	rjmp	.+2      	; 0x1e62 <configDHR+0xa>
    1e60:	83 e0       	ldi	r24, 0x03	; 3
    1e62:	62 95       	swap	r22
    1e64:	60 7f       	andi	r22, 0xF0	; 240
    if(0){//include slow hopping offset
        DHR |= 1<<3;
    }

    return DHR;
}
    1e66:	86 2b       	or	r24, r22
    1e68:	08 95       	ret

00001e6a <configAdvDAUX>:
 * Gateway could config the DAUX
 * DAUX contains superframe and join information
 *
 */
void configAdvDAUX(uint8_t chPattern, uint8_t chIndex, uint8_t sp_period, uint8_t tx_slot1, uint8_t tx_slot2, uint8_t tx_slot3, uint8_t tx_slot4, uint8_t rx_slot1, uint8_t rx_slot2, uint8_t rx_slot3, uint8_t rx_slot4)
{
    1e6a:	8f 92       	push	r8
    1e6c:	af 92       	push	r10
    1e6e:	cf 92       	push	r12
    1e70:	ef 92       	push	r14
    1e72:	0f 93       	push	r16
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    /*ADVERTISEMENT SELECTION*/
    DAUX[0]=0; // Advertisement selection, 0 indicates advertisement DAUX
    1e7c:	10 92 04 1e 	sts	0x1E04, r1

    /*TIME SYNCHRONIZATION*/
    /* 1-6 bytes are reserved for time synchronization */

    /*SUPERFRAME INFORMATION*/
    DAUX[7]=10; // timeslot duration, currently not used.
    1e80:	9a e0       	ldi	r25, 0x0A	; 10
    1e82:	90 93 0b 1e 	sts	0x1E0B, r25
    DAUX[8]=0; // reserved for long timeslot duration
    1e86:	10 92 0c 1e 	sts	0x1E0C, r1
    DAUX[9]=chPattern; // channel pattern selection
    1e8a:	80 93 0d 1e 	sts	0x1E0D, r24
    DAUX[10]=chIndex; // channel index selection
    1e8e:	60 93 0e 1e 	sts	0x1E0E, r22
    DAUX[11]=sp_period; // superframe period
    1e92:	40 93 0f 1e 	sts	0x1E0F, r20
    DAUX[12]=0; // reserved for long period situation
    1e96:	10 92 10 1e 	sts	0x1E10, r1

    /*JOIN INFORMATION*/
    /* 17 reserved for Join backoff and timeout
       18 reserved for Indicates fields that are transmitted
    */
    DAUX[19]=tx_slot1;  //TX slot 1
    1e9a:	20 93 17 1e 	sts	0x1E17, r18
    DAUX[20]=tx_slot2;  //TX slot 2
    1e9e:	00 93 18 1e 	sts	0x1E18, r16
    DAUX[21]=tx_slot3;  //TX slot 3
    1ea2:	e0 92 19 1e 	sts	0x1E19, r14
    DAUX[22]=tx_slot4;  //TX slot 4
    1ea6:	c0 92 1a 1e 	sts	0x1E1A, r12
    DAUX[23]=rx_slot1;  //RX slot 1
    1eaa:	a0 92 1b 1e 	sts	0x1E1B, r10
    DAUX[24]=rx_slot2;  //RX slot 2
    1eae:	80 92 1c 1e 	sts	0x1E1C, r8
    DAUX[25]=rx_slot3;  //RX slot 3
    1eb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eb4:	80 93 1d 1e 	sts	0x1E1D, r24
    DAUX[26]=rx_slot4;  //RX slot 4
    1eb8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1eba:	80 93 1e 1e 	sts	0x1E1E, r24

    /*INTEGRETY CHECK*/
    /* 27 and 28 are reserved for Integrety check*/
}
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	0f 91       	pop	r16
    1ec4:	ef 90       	pop	r14
    1ec6:	cf 90       	pop	r12
    1ec8:	af 90       	pop	r10
    1eca:	8f 90       	pop	r8
    1ecc:	08 95       	ret

00001ece <isa_rx_pkt_check>:
 * Returns: 1 if a new packet was received, 0 otherwise
 */
int8_t isa_rx_pkt_check()
{
    return isa_rx_data_ready;
}
    1ece:	80 91 d4 0e 	lds	r24, 0x0ED4
    1ed2:	08 95       	ret

00001ed4 <isa_rx_pkt_get>:
 * isa_release_rx_packet() then resets the value of isa_check_rx_status().
 *
 * Returns: rx buffer point
 */
uint8_t* isa_rx_pkt_get (uint8_t *len, int8_t *rssi)
{
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	db 01       	movw	r26, r22
    if(isa_rx_pkt_check()==0){
    1ed8:	80 91 d4 0e 	lds	r24, 0x0ED4
    1edc:	88 23       	and	r24, r24
    1ede:	29 f4       	brne	.+10     	; 0x1eea <isa_rx_pkt_get+0x16>
        *len=0;
    1ee0:	10 82       	st	Z, r1
        *rssi=0;
    1ee2:	1c 92       	st	X, r1
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
        return NULL;
    1ee8:	0a c0       	rjmp	.+20     	; 0x1efe <isa_rx_pkt_get+0x2a>
    }
    *len=isa_rfRxInfo.length;
    1eea:	80 91 14 0c 	lds	r24, 0x0C14
    1eee:	80 83       	st	Z, r24
    *rssi=isa_rfRxInfo.rssi;
    1ef0:	80 91 19 0c 	lds	r24, 0x0C19
    1ef4:	8c 93       	st	X, r24


    return isa_rfRxInfo.pPayload;
    1ef6:	20 91 16 0c 	lds	r18, 0x0C16
    1efa:	30 91 17 0c 	lds	r19, 0x0C17
}
    1efe:	c9 01       	movw	r24, r18
    1f00:	08 95       	ret

00001f02 <isa_rx_pkt_release>:
 *
 */

void isa_rx_pkt_release()
{
    isa_rx_data_ready = 0;
    1f02:	10 92 d4 0e 	sts	0x0ED4, r1
    1f06:	10 92 d5 0e 	sts	0x0ED5, r1
    1f0a:	10 92 d6 0e 	sts	0x0ED6, r1
    1f0e:	10 92 d7 0e 	sts	0x0ED7, r1
}
    1f12:	08 95       	ret

00001f14 <isa_join_ready>:
*/


int8_t isa_join_ready()
{
    if (_isa_join_ok ==  1)
    1f14:	80 91 44 0d 	lds	r24, 0x0D44
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	11 f0       	breq	.+4      	; 0x1f20 <isa_join_ready+0xc>
    1f1c:	8f ef       	ldi	r24, 0xFF	; 255
    1f1e:	08 95       	ret
    1f20:	81 e0       	ldi	r24, 0x01	; 1
        return NRK_OK;
    else
        return NRK_ERROR;
}
    1f22:	08 95       	ret

00001f24 <isa_task_config>:
        }
    }
}

void isa_task_config ()
{
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    isa_task.task = isa_nw_task;
    1f28:	87 ea       	ldi	r24, 0xA7	; 167
    1f2a:	95 e1       	ldi	r25, 0x15	; 21
    1f2c:	90 93 3b 0c 	sts	0x0C3B, r25
    1f30:	80 93 3a 0c 	sts	0x0C3A, r24
    nrk_task_set_stk( &isa_task, isa_task_stack, ISA_STACK_SIZE);
    1f34:	c5 e3       	ldi	r28, 0x35	; 53
    1f36:	dc e0       	ldi	r29, 0x0C	; 12
    1f38:	ce 01       	movw	r24, r28
    1f3a:	6b e7       	ldi	r22, 0x7B	; 123
    1f3c:	7c e0       	ldi	r23, 0x0C	; 12
    1f3e:	40 e8       	ldi	r20, 0x80	; 128
    1f40:	50 e0       	ldi	r21, 0x00	; 0
    1f42:	0e 94 b8 44 	call	0x8970	; 0x8970 <nrk_task_set_stk>
    isa_task.prio = 20;
    1f46:	84 e1       	ldi	r24, 0x14	; 20
    1f48:	88 87       	std	Y+8, r24	; 0x08
    isa_task.FirstActivation = TRUE;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	8f 83       	std	Y+7, r24	; 0x07
    isa_task.Type = BASIC_TASK;
    1f4e:	89 87       	std	Y+9, r24	; 0x09
    isa_task.SchType = PREEMPTIVE;
    1f50:	8a 87       	std	Y+10, r24	; 0x0a
    isa_task.period.secs = 0;
    1f52:	1b 86       	std	Y+11, r1	; 0x0b
    1f54:	1c 86       	std	Y+12, r1	; 0x0c
    1f56:	1d 86       	std	Y+13, r1	; 0x0d
    1f58:	1e 86       	std	Y+14, r1	; 0x0e
    isa_task.period.nano_secs = 10*NANOS_PER_MS;
    1f5a:	80 e8       	ldi	r24, 0x80	; 128
    1f5c:	96 e9       	ldi	r25, 0x96	; 150
    1f5e:	a8 e9       	ldi	r26, 0x98	; 152
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	8f 87       	std	Y+15, r24	; 0x0f
    1f64:	98 8b       	std	Y+16, r25	; 0x10
    1f66:	a9 8b       	std	Y+17, r26	; 0x11
    1f68:	ba 8b       	std	Y+18, r27	; 0x12
    isa_task.cpu_reserve.secs = 0;
    1f6a:	1b 8a       	std	Y+19, r1	; 0x13
    1f6c:	1c 8a       	std	Y+20, r1	; 0x14
    1f6e:	1d 8a       	std	Y+21, r1	; 0x15
    1f70:	1e 8a       	std	Y+22, r1	; 0x16
    isa_task.cpu_reserve.nano_secs = 0;
    1f72:	1f 8a       	std	Y+23, r1	; 0x17
    1f74:	18 8e       	std	Y+24, r1	; 0x18
    1f76:	19 8e       	std	Y+25, r1	; 0x19
    1f78:	1a 8e       	std	Y+26, r1	; 0x1a
    isa_task.offset.secs = 0;
    1f7a:	1b 8e       	std	Y+27, r1	; 0x1b
    1f7c:	1c 8e       	std	Y+28, r1	; 0x1c
    1f7e:	1d 8e       	std	Y+29, r1	; 0x1d
    1f80:	1e 8e       	std	Y+30, r1	; 0x1e
    isa_task.offset.nano_secs = 0;
    1f82:	1f 8e       	std	Y+31, r1	; 0x1f
    1f84:	18 a2       	std	Y+32, r1	; 0x20
    1f86:	19 a2       	std	Y+33, r1	; 0x21
    1f88:	1a a2       	std	Y+34, r1	; 0x22
    nrk_activate_task (&isa_task);
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	0e 94 b6 3a 	call	0x756c	; 0x756c <nrk_activate_task>
}
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	08 95       	ret

00001f96 <_isa_init_sync>:
 * and set up first sync.
 *
 * Return: _isa_sync_ok.
 */
uint8_t _isa_init_sync ()
{
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	c0 e0       	ldi	r28, 0x00	; 0
    1fa4:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {

    	//	printf("Channel%d ,channelINdex %d\r\n",currentChannel,channelIndex);
            //printf("Init sync \r\n");
        isa_rfRxInfo.pPayload[DHDR_INDEX]=1;                        //configDHDR(0); This will have to change
    1fa6:	01 e0       	ldi	r16, 0x01	; 1
    1fa8:	e0 91 16 0c 	lds	r30, 0x0C16
    1fac:	f0 91 17 0c 	lds	r31, 0x0C17
    1fb0:	00 83       	st	Z, r16
        //isa_rfRxInfo.pPayload[SLOT_INDEX]=global_slot;

        #ifdef LED_DEBUG
            nrk_led_set(1);
        #endif
        rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel
    1fb2:	81 e1       	ldi	r24, 0x11	; 17
    1fb4:	9c e0       	ldi	r25, 0x0C	; 12
    1fb6:	60 91 24 0c 	lds	r22, 0x0C24
    1fba:	0e 94 31 2a 	call	0x5462	; 0x5462 <rf_set_rx>
        rf_polling_rx_on ();
    1fbe:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <rf_polling_rx_on>
        n = 0;
        _isa_sync_ok = 0;
    1fc2:	10 92 01 1e 	sts	0x1E01, r1
        last_nrk_tick=0;  // should be 0 going in
        //_nrk_prev_timer_val=250;
        _nrk_set_next_wakeup(250);
    1fc6:	8a ef       	ldi	r24, 0xFA	; 250
    1fc8:	0e 94 bc 41 	call	0x8378	; 0x8378 <_nrk_set_next_wakeup>
        _nrk_os_timer_set(0);
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	0e 94 a2 41 	call	0x8344	; 0x8344 <_nrk_os_timer_set>
    1fd2:	ee 24       	eor	r14, r14
        //timeout=200;
        while ((n = rf_rx_check_sfd()) == 0) {
    1fd4:	0f c0       	rjmp	.+30     	; 0x1ff4 <_isa_init_sync+0x5e>

            // every OS tick
            if(last_nrk_tick!=_nrk_os_timer_get()) {
    1fd6:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    1fda:	e8 16       	cp	r14, r24
    1fdc:	59 f0       	breq	.+22     	; 0x1ff4 <_isa_init_sync+0x5e>
                last_nrk_tick=_nrk_os_timer_get();
    1fde:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    1fe2:	e8 2e       	mov	r14, r24
                timer++;
    1fe4:	21 96       	adiw	r28, 0x01	; 1
                if(timer>ISA_TOKEN_TIMEOUT){
    1fe6:	87 e2       	ldi	r24, 0x27	; 39
    1fe8:	c1 31       	cpi	r28, 0x11	; 17
    1fea:	d8 07       	cpc	r29, r24
    1fec:	18 f0       	brcs	.+6      	; 0x1ff4 <_isa_init_sync+0x5e>
    1fee:	c0 e0       	ldi	r28, 0x00	; 0
    1ff0:	d0 e0       	ldi	r29, 0x00	; 0
    1ff2:	05 c0       	rjmp	.+10     	; 0x1ffe <_isa_init_sync+0x68>
        last_nrk_tick=0;  // should be 0 going in
        //_nrk_prev_timer_val=250;
        _nrk_set_next_wakeup(250);
        _nrk_os_timer_set(0);
        //timeout=200;
        while ((n = rf_rx_check_sfd()) == 0) {
    1ff4:	0e 94 47 22 	call	0x448e	; 0x448e <rf_rx_check_sfd>
    1ff8:	18 2f       	mov	r17, r24
    1ffa:	88 23       	and	r24, r24
    1ffc:	61 f3       	breq	.-40     	; 0x1fd6 <_isa_init_sync+0x40>
                }
            }

        }
        //printf("3 \n");
        _nrk_high_speed_timer_reset();
    1ffe:	0e 94 38 41 	call	0x8270	; 0x8270 <_nrk_high_speed_timer_reset>
        // capture SFD transition with high speed timer
        //sfd_start_time=_nrk_high_speed_timer_get();
        tdma_start_tick=_nrk_os_timer_get();
    2002:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>

        timeout = tdma_start_tick+4;
    2006:	e8 2e       	mov	r14, r24
    2008:	ff 24       	eor	r15, r15
    200a:	84 e0       	ldi	r24, 0x04	; 4
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	e8 0e       	add	r14, r24
    2010:	f9 1e       	adc	r15, r25
        // an interrupt could happen in here and mess things up
        if (n != 0) {
    2012:	11 23       	and	r17, r17
    2014:	39 f4       	brne	.+14     	; 0x2024 <_isa_init_sync+0x8e>
    2016:	0d c0       	rjmp	.+26     	; 0x2032 <_isa_init_sync+0x9c>
            n = 0;
        // Packet on its way
            while ((n = rf_polling_rx_packet (false,128)) == 0) {
          //          printf("4 \n");
                if (_nrk_os_timer_get () > timeout)
    2018:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	e8 16       	cp	r14, r24
    2020:	f9 06       	cpc	r15, r25
    2022:	38 f0       	brcs	.+14     	; 0x2032 <_isa_init_sync+0x9c>
        timeout = tdma_start_tick+4;
        // an interrupt could happen in here and mess things up
        if (n != 0) {
            n = 0;
        // Packet on its way
            while ((n = rf_polling_rx_packet (false,128)) == 0) {
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	60 e8       	ldi	r22, 0x80	; 128
    2028:	0e 94 22 23 	call	0x4644	; 0x4644 <rf_polling_rx_packet>
    202c:	18 2f       	mov	r17, r24
    202e:	88 23       	and	r24, r24
    2030:	99 f3       	breq	.-26     	; 0x2018 <_isa_init_sync+0x82>
                    //nrk_kprintf( PSTR("Pkt timed out\r\n") );
                    break;          // huge timeout as failsafe
                }
            }
        }
        rf_rx_off ();
    2032:	0e 94 7e 25 	call	0x4afc	; 0x4afc <rf_rx_off>
        //printf("5 \n");
        if (n == 1 /*&& isa_rfRxInfo.length>0*/) {
    2036:	11 30       	cpi	r17, 0x01	; 1
    2038:	09 f0       	breq	.+2      	; 0x203c <_isa_init_sync+0xa6>
    203a:	b6 cf       	rjmp	.-148    	; 0x1fa8 <_isa_init_sync+0x12>
                int DHDR = isa_rfRxInfo.pPayload[DHDR_INDEX];
    203c:	e0 91 16 0c 	lds	r30, 0x0C16
    2040:	f0 91 17 0c 	lds	r31, 0x0C17
    2044:	80 81       	ld	r24, Z
           // if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id && isa_rfRxInfo.pPayload[DEST_INDEX] == dmo.dlAddress){//change
                //if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id && DHDR & (1<<4)){
                if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id && DHDR &(1<<4)){
    2046:	22 81       	ldd	r18, Z+2	; 0x02
    2048:	90 91 fe 0c 	lds	r25, 0x0CFE
    204c:	29 17       	cp	r18, r25
    204e:	09 f0       	breq	.+2      	; 0x2052 <_isa_init_sync+0xbc>
    2050:	ab cf       	rjmp	.-170    	; 0x1fa8 <_isa_init_sync+0x12>
    2052:	84 ff       	sbrs	r24, 4
    2054:	a9 cf       	rjmp	.-174    	; 0x1fa8 <_isa_init_sync+0x12>
                // CRC and checksum passed
                isa_rx_data_ready = 1;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	a0 e0       	ldi	r26, 0x00	; 0
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	80 93 d4 0e 	sts	0x0ED4, r24
    2062:	90 93 d5 0e 	sts	0x0ED5, r25
    2066:	a0 93 d6 0e 	sts	0x0ED6, r26
    206a:	b0 93 d7 0e 	sts	0x0ED7, r27
                //rtl_rx_slot = 0;
                //DHDR = (volatile)isa_rfRxInfo.pPayload[DHDR_INDEX];
                global_slot = (volatile)isa_rfRxInfo.pPayload[SLOT_INDEX];
    206e:	81 81       	ldd	r24, Z+1	; 0x01
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	90 93 d6 1d 	sts	0x1DD6, r25
    2076:	80 93 d5 1d 	sts	0x1DD5, r24
                nrk_led_toggle(GREEN_LED);
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <nrk_led_toggle>
                putchar ('i');
    2082:	60 91 48 20 	lds	r22, 0x2048
    2086:	70 91 49 20 	lds	r23, 0x2049
    208a:	89 e6       	ldi	r24, 0x69	; 105
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
#endif
     //printf("os_timer=%d\r\n",_nrk_os_itimer_get());
     #ifdef INIT_SYNC
        nrk_gpio_set(NRK_DEBUG_1);
     #endif
    _isa_sync_ok = 1;
    2092:	10 93 01 1e 	sts	0x1E01, r17
 *
 */

void isa_rx_pkt_release()
{
    isa_rx_data_ready = 0;
    2096:	10 92 d4 0e 	sts	0x0ED4, r1
    209a:	10 92 d5 0e 	sts	0x0ED5, r1
    209e:	10 92 d6 0e 	sts	0x0ED6, r1
    20a2:	10 92 d7 0e 	sts	0x0ED7, r1
        nrk_gpio_set(NRK_DEBUG_1);
     #endif
    _isa_sync_ok = 1;
    isa_rx_pkt_release();
    tmp_nrk_prev_timer_val=_nrk_prev_timer_val;
    _nrk_os_timer_stop();
    20a6:	0e 94 97 41 	call	0x832e	; 0x832e <_nrk_os_timer_stop>
    _nrk_os_timer_reset();
    20aa:	0e 94 ae 41 	call	0x835c	; 0x835c <_nrk_os_timer_reset>
    /*
     * If I dont do this reset, then the next wakeup is not predictable! Why??
     */
    _nrk_set_next_wakeup(10);
    20ae:	8a e0       	ldi	r24, 0x0A	; 10
    20b0:	0e 94 bc 41 	call	0x8378	; 0x8378 <_nrk_set_next_wakeup>
    _nrk_os_timer_set(7);
    20b4:	87 e0       	ldi	r24, 0x07	; 7
    20b6:	0e 94 a2 41 	call	0x8344	; 0x8344 <_nrk_os_timer_set>
    nrk_high_speed_timer_wait(0,SFD_TO_NEXT_SLOT_TIME);
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	61 e1       	ldi	r22, 0x11	; 17
    20c0:	70 e8       	ldi	r23, 0x80	; 128
    20c2:	0e 94 40 41 	call	0x8280	; 0x8280 <nrk_high_speed_timer_wait>
    //_nrk_os_timer_reset();
    _nrk_os_timer_start();
    20c6:	0e 94 a5 41 	call	0x834a	; 0x834a <_nrk_os_timer_start>
    //_nrk_prev_timer_val=9;
    //printf("%d\n\r", _nrk_os_timer_get());
nrk_cur_task_TCB->next_wakeup = 10;
    20ca:	e0 91 17 20 	lds	r30, 0x2017
    20ce:	f0 91 18 20 	lds	r31, 0x2018
    20d2:	8a e0       	ldi	r24, 0x0A	; 10
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	96 8b       	std	Z+22, r25	; 0x16
    20d8:	85 8b       	std	Z+21, r24	; 0x15
        nrk_gpio_clr(NRK_DEBUG_1);
     #endif

        return _isa_sync_ok;

}
    20da:	80 91 01 1e 	lds	r24, 0x1E01
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	08 95       	ret

000020ec <_isa_tx>:
 * packets that were set for a particular slot by rtl_tx_packet().
 *
 * Arguments: slot is the active slot set by the interrupt timer.
 */
void _isa_tx (DLMO_LINK * link, uint16_t slot)
{
    20ec:	8f 92       	push	r8
    20ee:	9f 92       	push	r9
    20f0:	af 92       	push	r10
    20f2:	bf 92       	push	r11
    20f4:	cf 92       	push	r12
    20f6:	df 92       	push	r13
    20f8:	ef 92       	push	r14
    20fa:	ff 92       	push	r15
    20fc:	0f 93       	push	r16
    20fe:	1f 93       	push	r17
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	27 97       	sbiw	r28, 0x07	; 7
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	5c 01       	movw	r10, r24
    2116:	6b 01       	movw	r12, r22
 volatile   uint16_t offsetNanoSec;
   volatile int16_t time_correction, time_correction1;
    uint8_t tmp_nrk_prev_timer_val;
  volatile  ISA_QUEUE *transmitEntry;
    // load header
    isa_rfTxInfo.cca = true;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	80 93 1f 0c 	sts	0x0C1F, r24


    //the link should be a transmit link and either have a neighbor configured or a graph configured
    if(link->linkType == TX_NO_ADV )
    211e:	d5 01       	movw	r26, r10
    2120:	14 96       	adiw	r26, 0x04	; 4
    2122:	8c 91       	ld	r24, X
    2124:	14 97       	sbiw	r26, 0x04	; 4
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	89 f5       	brne	.+98     	; 0x218c <_isa_tx+0xa0>
    {
            MESSAGE* message;

            //if (check==5) nrk_terminate_task();//Azriel killed after 5 transmits
            //find if there is anything in the Queue to be transmitted
            transmitEntry = getHighPriorityEntry(link);
    212a:	c5 01       	movw	r24, r10
    212c:	0e 94 f5 07 	call	0xfea	; 0xfea <getHighPriorityEntry>
    2130:	4c 01       	movw	r8, r24
    2132:	8c 01       	movw	r16, r24
            if (transmitEntry == NULL){
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	09 f4       	brne	.+2      	; 0x213a <_isa_tx+0x4e>
    2138:	fe c1       	rjmp	.+1020   	; 0x2536 <__stack+0x337>
                    //printf("Nothing in the queue to transmit on slot %d ", slot);
                    return;
            }

            previous_tx_slot = slot;
    213a:	c0 92 d1 1d 	sts	0x1DD1, r12
            isa_rfTxInfo.pPayload = transmitEntry->tx_buf;
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	90 93 1e 0c 	sts	0x0C1E, r25
    2144:	80 93 1d 0c 	sts	0x0C1D, r24
            #ifdef TX_DEBUG
            //printf("TX Payload is: %s.\n\r", isa_rfTxInfo.pPayload);
            #endif
            isa_rfTxInfo.length=transmitEntry->length;
    2148:	f4 01       	movw	r30, r8
    214a:	80 81       	ld	r24, Z
    214c:	80 93 1c 0c 	sts	0x0C1C, r24
            DHDR = configDHDR(link);
    2150:	c5 01       	movw	r24, r10
    2152:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <configDHDR>
    2156:	e8 2e       	mov	r14, r24
            isa_rfTxInfo.pPayload[DHDR_INDEX] = DHDR;
    2158:	e0 91 1d 0c 	lds	r30, 0x0C1D
    215c:	f0 91 1e 0c 	lds	r31, 0x0C1E
    2160:	80 83       	st	Z, r24
            //isa_rfTxInfo.pPayload[SLOT_INDEX] = (uint8_t)(global_slot & 0xFF);

            //Change the src id only if not neighbor table
            message = &isa_rfTxInfo.pPayload[PKT_DATA_START];
    2162:	e0 91 1d 0c 	lds	r30, 0x0C1D
    2166:	f0 91 1e 0c 	lds	r31, 0x0C1E
            if (message->type != NEIGHBOR_TABLE_REPORT)isa_rfTxInfo.pPayload[SRC_INDEX] = isa_id; //replace the source id only if it is not a neighbor table report
    216a:	87 81       	ldd	r24, Z+7	; 0x07
    216c:	88 23       	and	r24, r24
    216e:	39 f0       	breq	.+14     	; 0x217e <_isa_tx+0x92>
    2170:	e0 91 1d 0c 	lds	r30, 0x0C1D
    2174:	f0 91 1e 0c 	lds	r31, 0x0C1E
    2178:	80 91 0f 0c 	lds	r24, 0x0C0F
    217c:	82 83       	std	Z+2, r24	; 0x02
            else if (message->type == NEIGHBOR_TABLE_REPORT){
                    //do nothing
            }
            transmitEntry->numTries++;
    217e:	f4 01       	movw	r30, r8
    2180:	ec 57       	subi	r30, 0x7C	; 124
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	80 81       	ld	r24, Z
    2186:	8f 5f       	subi	r24, 0xFF	; 255
    2188:	80 83       	st	Z, r24
    218a:	2b c0       	rjmp	.+86     	; 0x21e2 <_isa_tx+0xf6>
                            //printf("DAUX[%d]=%d\r\n",i,isa_rfTxInfo.pPayload[DAUX_INDEX+i]);
                    }
            }
            #endif
    }
    else if(link->linkType == ADV)
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	49 f5       	brne	.+82     	; 0x21e2 <_isa_tx+0xf6>
    {
            //putchar('a');
            //nrk_gpio_set(NRK_DEBUG_1);
            isa_rfTxInfo.pPayload = adv_buf;
    2190:	85 e3       	ldi	r24, 0x35	; 53
    2192:	9e e1       	ldi	r25, 0x1E	; 30
    2194:	90 93 1e 0c 	sts	0x0C1E, r25
    2198:	80 93 1d 0c 	sts	0x0C1D, r24
            isa_rfTxInfo.length = DAUX_INDEX + sizeof(DLMO_DAUX) + 1;  //sizeof(DLMO_DAUX) should be 21
    219c:	8b e1       	ldi	r24, 0x1B	; 27
    219e:	80 93 1c 0c 	sts	0x0C1C, r24
            //isa_rfTxInfo.length = DHDR_INDEX  + sizeof(uint8_t) + 1;
            DHDR = configDHDR(link);
    21a2:	c5 01       	movw	r24, r10
    21a4:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <configDHDR>
    21a8:	e8 2e       	mov	r14, r24
            isa_rfTxInfo.pPayload[DHDR_INDEX] = DHDR;
    21aa:	e0 91 1d 0c 	lds	r30, 0x0C1D
    21ae:	f0 91 1e 0c 	lds	r31, 0x0C1E
    21b2:	80 83       	st	Z, r24
            isa_rfTxInfo.pPayload[SRC_INDEX] = isa_id;//changeisa_rfTxInfo.pPayload[SLOT_INDEX] = (uint8_t)(global_slot & 0xFF);
    21b4:	e0 91 1d 0c 	lds	r30, 0x0C1D
    21b8:	f0 91 1e 0c 	lds	r31, 0x0C1E
    21bc:	80 91 0f 0c 	lds	r24, 0x0C0F
    21c0:	82 83       	std	Z+2, r24	; 0x02
            isa_rfTxInfo.pPayload[SLOT_INDEX] = (uint8_t)(global_slot & 0xFF);
    21c2:	e0 91 1d 0c 	lds	r30, 0x0C1D
    21c6:	f0 91 1e 0c 	lds	r31, 0x0C1E
    21ca:	80 91 d5 1d 	lds	r24, 0x1DD5
    21ce:	90 91 d6 1d 	lds	r25, 0x1DD6
    21d2:	81 83       	std	Z+1, r24	; 0x01
            DLMO_DAUX* advertise;
            advertise = isa_rfTxInfo.pPayload[DAUX_INDEX];
    21d4:	e0 91 1d 0c 	lds	r30, 0x0C1D
    21d8:	f0 91 1e 0c 	lds	r31, 0x0C1E
            advertise->adSelection = 0;
    21dc:	e5 81       	ldd	r30, Z+5	; 0x05
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	10 82       	st	Z, r1
            //nrk_gpio_clr(NRK_DEBUG_1);
    }
    // FIXME a small bug. should not happen and should be fixed in _isa_init_sync()
    //if(AFTER_FIRST_SYNC == 1){
        _nrk_high_speed_timer_reset();
    21e2:	0e 94 38 41 	call	0x8270	; 0x8270 <_nrk_high_speed_timer_reset>
        nrk_high_speed_timer_wait(0,WAIT_TIME_BEFORE_TX);
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	60 e8       	ldi	r22, 0x80	; 128
    21ec:	75 e2       	ldi	r23, 0x25	; 37
    21ee:	0e 94 40 41 	call	0x8280	; 0x8280 <nrk_high_speed_timer_wait>
        //AFTER_FIRST_SYNC = 0;
    //}
            #ifdef TX_RX_DEBUG
                nrk_gpio_set(NRK_DEBUG_1);
    21f2:	f0 90 50 0b 	lds	r15, 0x0B50
    21f6:	8f 2d       	mov	r24, r15
    21f8:	0e 94 ba 2b 	call	0x5774	; 0x5774 <nrk_gpio_set>
                   //printf("T\r\n");
            #endif
    if(rf_tx_tdma_packet (&isa_rfTxInfo,slot_start_time,isa_param.tx_guard_time,&tx_start_time))
    21fc:	60 91 d2 1d 	lds	r22, 0x1DD2
    2200:	70 91 d3 1d 	lds	r23, 0x1DD3
    2204:	40 91 26 0c 	lds	r20, 0x0C26
    2208:	50 91 27 0c 	lds	r21, 0x0C27
    220c:	8a e1       	ldi	r24, 0x1A	; 26
    220e:	9c e0       	ldi	r25, 0x0C	; 12
    2210:	2d ef       	ldi	r18, 0xFD	; 253
    2212:	3d e1       	ldi	r19, 0x1D	; 29
    2214:	0e 94 95 27 	call	0x4f2a	; 0x4f2a <rf_tx_tdma_packet>
    2218:	88 23       	and	r24, r24
    221a:	f1 f0       	breq	.+60     	; 0x2258 <__stack+0x59>
    {
    	//if(link->linkType==TX_NO_ADV)transmitEntry->transmitPending = false;
            txCount++;//change for packet loss
    221c:	80 91 ce 0b 	lds	r24, 0x0BCE
    2220:	90 91 cf 0b 	lds	r25, 0x0BCF
    2224:	01 96       	adiw	r24, 0x01	; 1
    2226:	90 93 cf 0b 	sts	0x0BCF, r25
    222a:	80 93 ce 0b 	sts	0x0BCE, r24
            nrk_gpio_clr(NRK_DEBUG_1);
    222e:	8f 2d       	mov	r24, r15
    2230:	0e 94 30 2c 	call	0x5860	; 0x5860 <nrk_gpio_clr>
            nrk_led_toggle(RED_LED);
    2234:	83 e0       	ldi	r24, 0x03	; 3
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <nrk_led_toggle>
    //        putchar ('t');
                    //("rx_start_time is %d.\n\r",_nrk_high_speed_timer_get());
        offsetY = tx_start_time - slot_start_time;
    223c:	80 91 fd 1d 	lds	r24, 0x1DFD
    2240:	90 91 fe 1d 	lds	r25, 0x1DFE
    2244:	20 91 d2 1d 	lds	r18, 0x1DD2
    2248:	30 91 d3 1d 	lds	r19, 0x1DD3
    224c:	82 1b       	sub	r24, r18
    224e:	93 0b       	sbc	r25, r19
    2250:	90 93 cd 1d 	sts	0x1DCD, r25
    2254:	80 93 cc 1d 	sts	0x1DCC, r24
//        printf("%d.\n\r",offsetY);
        #ifdef HIGH_TIMER_DEBUG
            //printf("In isa.c _isa_tx(): offsetY is %d, tx_start_time is %d\n\r",offsetY,tx_start_time);
        #endif
    }
    nrk_event_signal (isa_tx_done_signal);
    2258:	80 91 d4 1d 	lds	r24, 0x1DD4
    225c:	0e 94 14 36 	call	0x6c28	; 0x6c28 <nrk_event_signal>
    // ACK required
    if(DHDR & (1<<7)) {  //&& isa_node_mode!=ISA_GATEWAY){ //Azriel
    2260:	e7 fe       	sbrs	r14, 7
    2262:	69 c1       	rjmp	.+722    	; 0x2536 <__stack+0x337>

            rf_polling_rx_on ();
    2264:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <rf_polling_rx_on>
            nrk_gpio_set(NRK_DEBUG_1);
    2268:	8f 2d       	mov	r24, r15
    226a:	0e 94 ba 2b 	call	0x5774	; 0x5774 <nrk_gpio_set>
        _nrk_high_speed_timer_reset();
    226e:	0e 94 38 41 	call	0x8270	; 0x8270 <_nrk_high_speed_timer_reset>
        nrk_high_speed_timer_wait(0,CPU_PROCESS_TIME);
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	70 e1       	ldi	r23, 0x10	; 16
    227a:	0e 94 40 41 	call	0x8280	; 0x8280 <nrk_high_speed_timer_wait>
//nrk_gpio_set(NRK_DEBUG_1);
        // Timing for waiting for receiving ACK
        timeout = _nrk_os_timer_get();
    227e:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    2282:	89 83       	std	Y+1, r24	; 0x01
        timeout+=2;  // 2ms
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	8e 5f       	subi	r24, 0xFE	; 254
    2288:	89 83       	std	Y+1, r24	; 0x01
        n = 0;
        while ((n = rf_rx_check_sfd()) == 0) {
    228a:	41 c0       	rjmp	.+130    	; 0x230e <__stack+0x10f>
            if (_nrk_os_timer_get() > timeout) {
    228c:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    2290:	99 81       	ldd	r25, Y+1	; 0x01
    2292:	98 17       	cp	r25, r24
    2294:	e0 f5       	brcc	.+120    	; 0x230e <__stack+0x10f>
                tmp = slot - previous_tx_slot;
                if(slot == previous_tx_slot)
    2296:	80 91 d1 1d 	lds	r24, 0x1DD1
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	c2 16       	cp	r12, r18
    22a0:	d3 06       	cpc	r13, r19
    22a2:	31 f4       	brne	.+12     	; 0x22b0 <__stack+0xb1>
                    slot_expired += 25;
    22a4:	80 91 aa 1e 	lds	r24, 0x1EAA
    22a8:	90 91 ab 1e 	lds	r25, 0x1EAB
    22ac:	49 96       	adiw	r24, 0x19	; 25
    22ae:	0e c0       	rjmp	.+28     	; 0x22cc <__stack+0xcd>
                else{
                    tmp = slot - previous_tx_slot;
    22b0:	c8 1a       	sub	r12, r24
    22b2:	80 91 aa 1e 	lds	r24, 0x1EAA
    22b6:	90 91 ab 1e 	lds	r25, 0x1EAB
    22ba:	2c 2d       	mov	r18, r12
    22bc:	33 27       	eor	r19, r19
    22be:	27 fd       	sbrc	r18, 7
    22c0:	30 95       	com	r19
                    if(tmp>0)
    22c2:	1c 14       	cp	r1, r12
    22c4:	0c f0       	brlt	.+2      	; 0x22c8 <__stack+0xc9>
                        slot_expired += tmp;
                    else
                        slot_expired += 25+tmp;
    22c6:	49 96       	adiw	r24, 0x19	; 25
    22c8:	82 0f       	add	r24, r18
    22ca:	93 1f       	adc	r25, r19
    22cc:	90 93 ab 1e 	sts	0x1EAB, r25
    22d0:	80 93 aa 1e 	sts	0x1EAA, r24
                }
                //printf("%d,%d,%d,%d,%d\n\r",slot_expired,tmp_curSec,tmp_offsetSec,tmp_offsetNanoSec,++tmp_count);
                //printf("%d,%d\n\r",slot_expired,isa_param.channel);
                //printf("%d,%d,%d\n\r",slot_expired,slot,previous_tx_slot);
            //spend too much time on waiting for a pkt's arrival
                rf_rx_off ();
    22d4:	0e 94 7e 25 	call	0x4afc	; 0x4afc <rf_rx_off>
                nrk_gpio_clr(NRK_DEBUG_1);
    22d8:	8f 2d       	mov	r24, r15
    22da:	0e 94 30 2c 	call	0x5860	; 0x5860 <nrk_gpio_clr>
                #ifdef LED_DEBUG
                    nrk_led_clr(1);
                #endif
                #ifdef RX_DEBUG
         putchar('s');
    22de:	60 91 48 20 	lds	r22, 0x2048
    22e2:	70 91 49 20 	lds	r23, 0x2049
    22e6:	83 e7       	ldi	r24, 0x73	; 115
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
                // printf("%d", slot);

                 //   printf("sfd times out.\n\r");
                    #endif
                //nrk_gpio_clr(NRK_DEBUG_1);
                 packetsLost++;
    22ee:	80 91 d2 0b 	lds	r24, 0x0BD2
    22f2:	90 91 d3 0b 	lds	r25, 0x0BD3
    22f6:	01 96       	adiw	r24, 0x01	; 1
    22f8:	90 93 d3 0b 	sts	0x0BD3, r25
    22fc:	80 93 d2 0b 	sts	0x0BD2, r24
                 if(transmitEntry->numTries >= MAX_RETRIES){
    2300:	f8 01       	movw	r30, r16
    2302:	ec 57       	subi	r30, 0x7C	; 124
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 81       	ld	r24, Z
    2308:	83 30       	cpi	r24, 0x03	; 3
    230a:	b8 f5       	brcc	.+110    	; 0x237a <__stack+0x17b>
    230c:	14 c1       	rjmp	.+552    	; 0x2536 <__stack+0x337>
//nrk_gpio_set(NRK_DEBUG_1);
        // Timing for waiting for receiving ACK
        timeout = _nrk_os_timer_get();
        timeout+=2;  // 2ms
        n = 0;
        while ((n = rf_rx_check_sfd()) == 0) {
    230e:	0e 94 47 22 	call	0x448e	; 0x448e <rf_rx_check_sfd>
    2312:	88 23       	and	r24, r24
    2314:	09 f4       	brne	.+2      	; 0x2318 <__stack+0x119>
    2316:	ba cf       	rjmp	.-140    	; 0x228c <__stack+0x8d>
                 return;

            }
        }
        //nrk_gpio_clr(NRK_DEBUG_1);
        timeout = _nrk_os_timer_get();
    2318:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    231c:	89 83       	std	Y+1, r24	; 0x01
        timeout += 2;               // 5ms
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	8e 5f       	subi	r24, 0xFE	; 254
    2322:	89 83       	std	Y+1, r24	; 0x01
        if (n != 0) {
            n = 0;
            //printf("Packet on its way\n\r");
            if ( BITGET(DHDR,2)) c = 4 ;
    2324:	e2 fc       	sbrc	r14, 2
    2326:	37 c0       	rjmp	.+110    	; 0x2396 <__stack+0x197>
    2328:	92 e0       	ldi	r25, 0x02	; 2
    232a:	c9 2e       	mov	r12, r25
    232c:	36 c0       	rjmp	.+108    	; 0x239a <__stack+0x19b>
            else c = 2;
            while ((n = rf_polling_rx_packet (true, c)) == 0)                 {        //changed to 2 by Azriel for gateway
                if (_nrk_os_timer_get () > timeout) {
    232e:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    2332:	99 81       	ldd	r25, Y+1	; 0x01
    2334:	98 17       	cp	r25, r24
    2336:	88 f5       	brcc	.+98     	; 0x239a <__stack+0x19b>
                #ifdef RX_DEBUG
                    printf("packet is too long, times out.\n\r");
    2338:	00 d0       	rcall	.+0      	; 0x233a <__stack+0x13b>
    233a:	83 e6       	ldi	r24, 0x63	; 99
    233c:	94 e0       	ldi	r25, 0x04	; 4
    233e:	ad b7       	in	r26, 0x3d	; 61
    2340:	be b7       	in	r27, 0x3e	; 62
    2342:	12 96       	adiw	r26, 0x02	; 2
    2344:	9c 93       	st	X, r25
    2346:	8e 93       	st	-X, r24
    2348:	11 97       	sbiw	r26, 0x01	; 1
    234a:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
                #endif
                    packetsLost++;
    234e:	80 91 d2 0b 	lds	r24, 0x0BD2
    2352:	90 91 d3 0b 	lds	r25, 0x0BD3
    2356:	01 96       	adiw	r24, 0x01	; 1
    2358:	90 93 d3 0b 	sts	0x0BD3, r25
    235c:	80 93 d2 0b 	sts	0x0BD2, r24
                    tmp_curSec = _nrk_os_timer_get();
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    2368:	80 93 c9 1d 	sts	0x1DC9, r24
                    if(transmitEntry->numTries == MAX_RETRIES){
    236c:	f8 01       	movw	r30, r16
    236e:	ec 57       	subi	r30, 0x7C	; 124
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	83 30       	cpi	r24, 0x03	; 3
    2376:	09 f0       	breq	.+2      	; 0x237a <__stack+0x17b>
    2378:	de c0       	rjmp	.+444    	; 0x2536 <__stack+0x337>
                    if (transmitEntry-> slot_callback == NULL )  isaFreePacket(transmitEntry);
    237a:	f8 01       	movw	r30, r16
    237c:	e9 58       	subi	r30, 0x89	; 137
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	80 81       	ld	r24, Z
    2382:	91 81       	ldd	r25, Z+1	; 0x01
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	09 f4       	brne	.+2      	; 0x238a <__stack+0x18b>
    2388:	cc c0       	rjmp	.+408    	; 0x2522 <__stack+0x323>
                    else transmitEntry-> slot_callback(transmitEntry, FAILURE);
    238a:	01 90       	ld	r0, Z+
    238c:	f0 81       	ld	r31, Z
    238e:	e0 2d       	mov	r30, r0
    2390:	c8 01       	movw	r24, r16
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	cf c0       	rjmp	.+414    	; 0x2534 <__stack+0x335>
    2396:	84 e0       	ldi	r24, 0x04	; 4
    2398:	c8 2e       	mov	r12, r24
        if (n != 0) {
            n = 0;
            //printf("Packet on its way\n\r");
            if ( BITGET(DHDR,2)) c = 4 ;
            else c = 2;
            while ((n = rf_polling_rx_packet (true, c)) == 0)                 {        //changed to 2 by Azriel for gateway
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	6c 2d       	mov	r22, r12
    239e:	0e 94 22 23 	call	0x4644	; 0x4644 <rf_polling_rx_packet>
    23a2:	e8 2e       	mov	r14, r24
    23a4:	88 23       	and	r24, r24
    23a6:	19 f2       	breq	.-122    	; 0x232e <__stack+0x12f>
                //if(n==-6)
                  //  printf("%d\n\r",_nrk_os_timer_get());
            }
        }

        if  (n !=1){        //size of packet must have been wrong
    23a8:	b1 e0       	ldi	r27, 0x01	; 1
    23aa:	8b 17       	cp	r24, r27
    23ac:	41 f1       	breq	.+80     	; 0x23fe <__stack+0x1ff>
                putchar('f');
    23ae:	60 91 48 20 	lds	r22, 0x2048
    23b2:	70 91 49 20 	lds	r23, 0x2049
    23b6:	86 e6       	ldi	r24, 0x66	; 102
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
                printf("f channel %d\r\n",currentChannel);
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <__stack+0x1c1>
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <__stack+0x1c3>
    23c2:	ed b7       	in	r30, 0x3d	; 61
    23c4:	fe b7       	in	r31, 0x3e	; 62
    23c6:	31 96       	adiw	r30, 0x01	; 1
    23c8:	84 e8       	ldi	r24, 0x84	; 132
    23ca:	94 e0       	ldi	r25, 0x04	; 4
    23cc:	ad b7       	in	r26, 0x3d	; 61
    23ce:	be b7       	in	r27, 0x3e	; 62
    23d0:	12 96       	adiw	r26, 0x02	; 2
    23d2:	9c 93       	st	X, r25
    23d4:	8e 93       	st	-X, r24
    23d6:	11 97       	sbiw	r26, 0x01	; 1
    23d8:	80 91 24 1e 	lds	r24, 0x1E24
    23dc:	82 83       	std	Z+2, r24	; 0x02
    23de:	13 82       	std	Z+3, r1	; 0x03
    23e0:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
                packetsLost++;
    23e4:	80 91 d2 0b 	lds	r24, 0x0BD2
    23e8:	90 91 d3 0b 	lds	r25, 0x0BD3
    23ec:	01 96       	adiw	r24, 0x01	; 1
    23ee:	90 93 d3 0b 	sts	0x0BD3, r25
    23f2:	80 93 d2 0b 	sts	0x0BD2, r24
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0

        }
        rf_rx_off ();
    23fe:	0e 94 7e 25 	call	0x4afc	; 0x4afc <rf_rx_off>
       // if (n==1)
        nrk_gpio_clr(NRK_DEBUG_1);
    2402:	8f 2d       	mov	r24, r15
    2404:	0e 94 30 2c 	call	0x5860	; 0x5860 <nrk_gpio_clr>
        if (n == 1) {// successfully received ACK
    2408:	b1 e0       	ldi	r27, 0x01	; 1
    240a:	eb 16       	cp	r14, r27
    240c:	09 f0       	breq	.+2      	; 0x2410 <__stack+0x211>
    240e:	93 c0       	rjmp	.+294    	; 0x2536 <__stack+0x337>
           rxCount++;
    2410:	80 91 d0 0b 	lds	r24, 0x0BD0
    2414:	90 91 d1 0b 	lds	r25, 0x0BD1
    2418:	01 96       	adiw	r24, 0x01	; 1
    241a:	90 93 d1 0b 	sts	0x0BD1, r25
    241e:	80 93 d0 0b 	sts	0x0BD0, r24

            //isa_rx_data_ready = 1;
            DHR = isa_rfRxInfo.pPayload[DHR_INDEX];
    2422:	e0 91 16 0c 	lds	r30, 0x0C16
    2426:	f0 91 17 0c 	lds	r31, 0x0C17
    242a:	80 81       	ld	r24, Z
    242c:	80 93 a9 1e 	sts	0x1EA9, r24
            #ifdef ACK_DEBUG

            #endif ACK_DEBUG
            if((DHDR & (1<<7))) {  //  &&isa_node_mode!=ISA_GATEWAY){
                    slot_expired = 0;
    2430:	10 92 ab 1e 	sts	0x1EAB, r1
    2434:	10 92 aa 1e 	sts	0x1EAA, r1


        //        ************************* Trying time correction
                if(DHR & (1<<7)){
    2438:	87 ff       	sbrs	r24, 7
    243a:	62 c0       	rjmp	.+196    	; 0x2500 <__stack+0x301>

                        offsetX = ((0x0000|isa_rfRxInfo.pPayload[OFFSET_HIGH])<<8)&0xff00 + 0x0000|isa_rfRxInfo.pPayload[OFFSET_LOW];
    243c:	31 81       	ldd	r19, Z+1	; 0x01
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	82 81       	ldd	r24, Z+2	; 0x02
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	82 2b       	or	r24, r18
    2446:	93 2b       	or	r25, r19
    2448:	90 93 cf 1d 	sts	0x1DCF, r25
    244c:	80 93 ce 1d 	sts	0x1DCE, r24
                                    #ifdef ACK_DEBUG
                                    nrk_led_toggle(ORANGE_LED);
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <nrk_led_toggle>
                                //    putchar('a');
                                    #endif ACK_DEBUG
                                //        check++;

                                    time_correction = offsetX - offsetY - 1400;
    2458:	80 91 ce 1d 	lds	r24, 0x1DCE
    245c:	90 91 cf 1d 	lds	r25, 0x1DCF
    2460:	88 57       	subi	r24, 0x78	; 120
    2462:	95 40       	sbci	r25, 0x05	; 5
    2464:	20 91 cc 1d 	lds	r18, 0x1DCC
    2468:	30 91 cd 1d 	lds	r19, 0x1DCD
    246c:	82 1b       	sub	r24, r18
    246e:	93 0b       	sbc	r25, r19
    2470:	9f 83       	std	Y+7, r25	; 0x07
    2472:	8e 83       	std	Y+6, r24	; 0x06
                                    //-1400 is the error in reading used for calculating the offset
                                    #ifdef HIGH_TIMER_DEBUG
                                        printf("time correction is %d.\n\r", time_correction);
                                    #endif
                                //        printf("%d.\n\r", time_correction);
                                    timeout=50;
    2474:	82 e3       	ldi	r24, 0x32	; 50
    2476:	89 83       	std	Y+1, r24	; 0x01

                                    if(time_correction >= 0){
    2478:	8e 81       	ldd	r24, Y+6	; 0x06
    247a:	9f 81       	ldd	r25, Y+7	; 0x07
    247c:	97 fd       	sbrc	r25, 7
    247e:	2d c0       	rjmp	.+90     	; 0x24da <__stack+0x2db>

                                             curSec = _nrk_os_timer_get();
    2480:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    2484:	8b 83       	std	Y+3, r24	; 0x03
                                            offsetSec = (time_correction/7325)+1;
    2486:	8e 81       	ldd	r24, Y+6	; 0x06
    2488:	9f 81       	ldd	r25, Y+7	; 0x07
    248a:	2d e9       	ldi	r18, 0x9D	; 157
    248c:	3c e1       	ldi	r19, 0x1C	; 28
    248e:	6d e9       	ldi	r22, 0x9D	; 157
    2490:	7c e1       	ldi	r23, 0x1C	; 28
    2492:	0e 94 ed 46 	call	0x8dda	; 0x8dda <__divmodhi4>
    2496:	6f 5f       	subi	r22, 0xFF	; 255
    2498:	6a 83       	std	Y+2, r22	; 0x02
                                                offsetNanoSec = 7325-(time_correction%7325);        //This should not be called nanoseconds because it is NOT!!!
    249a:	8e 81       	ldd	r24, Y+6	; 0x06
    249c:	9f 81       	ldd	r25, Y+7	; 0x07
    249e:	6d e9       	ldi	r22, 0x9D	; 157
    24a0:	7c e1       	ldi	r23, 0x1C	; 28
    24a2:	0e 94 ed 46 	call	0x8dda	; 0x8dda <__divmodhi4>
    24a6:	28 1b       	sub	r18, r24
    24a8:	39 0b       	sbc	r19, r25
    24aa:	3d 83       	std	Y+5, r19	; 0x05
    24ac:	2c 83       	std	Y+4, r18	; 0x04
                                                _nrk_os_timer_stop();
    24ae:	0e 94 97 41 	call	0x832e	; 0x832e <_nrk_os_timer_stop>
                                               // nrk_gpio_set(NRK_DEBUG_1);
                                                _nrk_high_speed_timer_reset();
    24b2:	0e 94 38 41 	call	0x8270	; 0x8270 <_nrk_high_speed_timer_reset>
                                                nrk_high_speed_timer_wait(0,offsetNanoSec);
    24b6:	6c 81       	ldd	r22, Y+4	; 0x04
    24b8:	7d 81       	ldd	r23, Y+5	; 0x05
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0e 94 40 41 	call	0x8280	; 0x8280 <nrk_high_speed_timer_wait>
                                                _nrk_os_timer_set(curSec+offsetSec);
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	89 0f       	add	r24, r25
    24c8:	0e 94 a2 41 	call	0x8344	; 0x8344 <_nrk_os_timer_set>
                                               // nrk_gpio_clr(NRK_DEBUG_1);
                                                _nrk_os_timer_start();
    24cc:	0e 94 a5 41 	call	0x834a	; 0x834a <_nrk_os_timer_start>
                                        //        _nrk_set_next_wakeup(10);
                                                nrk_spin_wait_us(50);
    24d0:	82 e3       	ldi	r24, 0x32	; 50
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>
    24d8:	13 c0       	rjmp	.+38     	; 0x2500 <__stack+0x301>

                                    }else if(time_correction<0){
    24da:	8e 81       	ldd	r24, Y+6	; 0x06
    24dc:	9f 81       	ldd	r25, Y+7	; 0x07
    24de:	97 ff       	sbrs	r25, 7
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <__stack+0x301>

                                             _nrk_os_timer_stop();
    24e2:	0e 94 97 41 	call	0x832e	; 0x832e <_nrk_os_timer_stop>
                                        #ifdef CORRECTION
                                        nrk_gpio_set(NRK_DEBUG_2);
                                        //nrk_high_speed_timer_wait(0,22800); // for test
                                        nrk_gpio_clr(NRK_DEBUG_2);
                                        #endif
                                        _nrk_high_speed_timer_reset();
    24e6:	0e 94 38 41 	call	0x8270	; 0x8270 <_nrk_high_speed_timer_reset>
                                        nrk_high_speed_timer_wait(0,-time_correction);
    24ea:	6e 81       	ldd	r22, Y+6	; 0x06
    24ec:	7f 81       	ldd	r23, Y+7	; 0x07
    24ee:	70 95       	com	r23
    24f0:	61 95       	neg	r22
    24f2:	7f 4f       	sbci	r23, 0xFF	; 255
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	0e 94 40 41 	call	0x8280	; 0x8280 <nrk_high_speed_timer_wait>
                                        _nrk_os_timer_start();
    24fc:	0e 94 a5 41 	call	0x834a	; 0x834a <_nrk_os_timer_start>
                                }

            }
                    //Checking the 4th and 5th bit of the DHR to see if the incoming acknowledgment is 0. If not, some error has occured and i shouldn't remove
                    //from the message queue
           if(transmitEntry->numTries == MAX_RETRIES || ((DHR & (3<<4))==0)){
    2500:	f8 01       	movw	r30, r16
    2502:	ec 57       	subi	r30, 0x7C	; 124
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	80 81       	ld	r24, Z
    2508:	83 30       	cpi	r24, 0x03	; 3
    250a:	21 f0       	breq	.+8      	; 0x2514 <__stack+0x315>
    250c:	80 91 a9 1e 	lds	r24, 0x1EA9
    2510:	80 73       	andi	r24, 0x30	; 48
    2512:	89 f4       	brne	.+34     	; 0x2536 <__stack+0x337>
            if (transmitEntry-> slot_callback == NULL )  isaFreePacket(transmitEntry);
    2514:	f8 01       	movw	r30, r16
    2516:	e9 58       	subi	r30, 0x89	; 137
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	80 81       	ld	r24, Z
    251c:	91 81       	ldd	r25, Z+1	; 0x01
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	21 f4       	brne	.+8      	; 0x252a <__stack+0x32b>
    2522:	c8 01       	movw	r24, r16
    2524:	0e 94 de 09 	call	0x13bc	; 0x13bc <isaFreePacket>
    2528:	06 c0       	rjmp	.+12     	; 0x2536 <__stack+0x337>
                        else transmitEntry-> slot_callback(transmitEntry, SUCCESS);
    252a:	01 90       	ld	r0, Z+
    252c:	f0 81       	ld	r31, Z
    252e:	e0 2d       	mov	r30, r0
    2530:	c8 01       	movw	r24, r16
    2532:	61 e0       	ldi	r22, 0x01	; 1
    2534:	09 95       	icall
        }

    }//wait for ACK


}
    2536:	27 96       	adiw	r28, 0x07	; 7
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	1f 91       	pop	r17
    2548:	0f 91       	pop	r16
    254a:	ff 90       	pop	r15
    254c:	ef 90       	pop	r14
    254e:	df 90       	pop	r13
    2550:	cf 90       	pop	r12
    2552:	bf 90       	pop	r11
    2554:	af 90       	pop	r10
    2556:	9f 90       	pop	r9
    2558:	8f 90       	pop	r8
    255a:	08 95       	ret

0000255c <_isa_rx>:
 *
 * Arguments: slot is the current slot that is actively in RX mode.
 */

void _isa_rx (DLMO_LINK * link, uint8_t slot)
{
    255c:	8f 92       	push	r8
    255e:	af 92       	push	r10
    2560:	bf 92       	push	r11
    2562:	cf 92       	push	r12
    2564:	df 92       	push	r13
    2566:	ef 92       	push	r14
    2568:	ff 92       	push	r15
    256a:	0f 93       	push	r16
    256c:	1f 93       	push	r17
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	0f 92       	push	r0
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    bool TransmitLinkPresent = false;
    uint8_t nack = 0;// NACK
    #ifdef LED_DEBUG
        nrk_led_set(1);
    #endif
    rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel
    2578:	81 e1       	ldi	r24, 0x11	; 17
    257a:	9c e0       	ldi	r25, 0x0C	; 12
    257c:	60 91 24 0c 	lds	r22, 0x0C24
    2580:	0e 94 31 2a 	call	0x5462	; 0x5462 <rf_set_rx>
    rf_polling_rx_on ();
    2584:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <rf_polling_rx_on>
    nrk_gpio_set(NRK_DEBUG_2);
    2588:	c0 90 5a 0b 	lds	r12, 0x0B5A
    258c:	8c 2d       	mov	r24, r12
    258e:	0e 94 ba 2b 	call	0x5774	; 0x5774 <nrk_gpio_set>
    // Timing for waiting for sfd
    timeout = _nrk_os_timer_get();
    2592:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    2596:	89 83       	std	Y+1, r24	; 0x01
    timeout+=4;  // 4ms
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	8c 5f       	subi	r24, 0xFC	; 252
    259c:	89 83       	std	Y+1, r24	; 0x01
    n = 0;
    //nrk_gpio_set(NRK_DEBUG_3);
    while ((n = rf_rx_check_sfd()) == 0) {
    259e:	0b c0       	rjmp	.+22     	; 0x25b6 <_isa_rx+0x5a>
        if (_nrk_os_timer_get() > timeout) {
    25a0:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    25a4:	99 81       	ldd	r25, Y+1	; 0x01
    25a6:	98 17       	cp	r25, r24
    25a8:	30 f4       	brcc	.+12     	; 0x25b6 <_isa_rx+0x5a>
            //spend too much time on waiting for a pkt's arrival
                nrk_gpio_clr(NRK_DEBUG_2);
    25aa:	8c 2d       	mov	r24, r12
    25ac:	0e 94 30 2c 	call	0x5860	; 0x5860 <nrk_gpio_clr>

            rf_rx_off ();
    25b0:	0e 94 7e 25 	call	0x4afc	; 0x4afc <rf_rx_off>
                //putchar('v');
                //printf("%d", slot);
                //printf("sfd times out.\n\r");
            #endif
        //        packetsLost++;
                return;
    25b4:	79 c2       	rjmp	.+1266   	; 0x2aa8 <_isa_rx+0x54c>
    // Timing for waiting for sfd
    timeout = _nrk_os_timer_get();
    timeout+=4;  // 4ms
    n = 0;
    //nrk_gpio_set(NRK_DEBUG_3);
    while ((n = rf_rx_check_sfd()) == 0) {
    25b6:	0e 94 47 22 	call	0x448e	; 0x448e <rf_rx_check_sfd>
    25ba:	88 23       	and	r24, r24
    25bc:	89 f3       	breq	.-30     	; 0x25a0 <_isa_rx+0x44>
                return;
        }
    }
//printf("%d\n\r",_nrk_high_speed_timer_get());
    // sfd received, start receiving packet and record start time
    rx_start_time = _nrk_high_speed_timer_get();
    25be:	0e 94 84 41 	call	0x8308	; 0x8308 <_nrk_high_speed_timer_get>
    25c2:	90 93 03 1e 	sts	0x1E03, r25
    25c6:	80 93 02 1e 	sts	0x1E02, r24
    //nrk_gpio_set(NRK_DEBUG_1);
    //       nrk_gpio_clr(NRK_DEBUG_1);
    // Timing for waiting for finishing packet receiving
    timeout = _nrk_os_timer_get();
    25ca:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    25ce:	89 83       	std	Y+1, r24	; 0x01
    timeout += 5;               // 5ms
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	8b 5f       	subi	r24, 0xFB	; 251
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	11 c0       	rjmp	.+34     	; 0x25fa <_isa_rx+0x9e>
    if (n != 0) {
        n = 0;
       // printf("Packet on its way\n\r");
        while ((n = rf_polling_rx_packet (false,128)) == 0) {
            //printf("%d\n\r",_nrk_os_timer_get());
            if (_nrk_os_timer_get () > timeout) {
    25d8:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    25dc:	99 81       	ldd	r25, Y+1	; 0x01
    25de:	98 17       	cp	r25, r24
    25e0:	60 f4       	brcc	.+24     	; 0x25fa <_isa_rx+0x9e>
                #ifdef RX_DEBUG
                    printf("packet is too long, times out.\n\r");
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <_isa_rx+0x88>
    25e4:	83 e6       	ldi	r24, 0x63	; 99
    25e6:	94 e0       	ldi	r25, 0x04	; 4
    25e8:	ad b7       	in	r26, 0x3d	; 61
    25ea:	be b7       	in	r27, 0x3e	; 62
    25ec:	12 96       	adiw	r26, 0x02	; 2
    25ee:	9c 93       	st	X, r25
    25f0:	8e 93       	st	-X, r24
    25f2:	11 97       	sbiw	r26, 0x01	; 1
    25f4:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    25f8:	17 c1       	rjmp	.+558    	; 0x2828 <_isa_rx+0x2cc>
    timeout = _nrk_os_timer_get();
    timeout += 5;               // 5ms
    if (n != 0) {
        n = 0;
       // printf("Packet on its way\n\r");
        while ((n = rf_polling_rx_packet (false,128)) == 0) {
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	60 e8       	ldi	r22, 0x80	; 128
    25fe:	0e 94 22 23 	call	0x4644	; 0x4644 <rf_polling_rx_packet>
    2602:	08 2f       	mov	r16, r24
    2604:	88 23       	and	r24, r24
    2606:	41 f3       	breq	.-48     	; 0x25d8 <_isa_rx+0x7c>
                    // spend too much time on receiving pkt.
                return;          // huge timeout as fail safe
            }
        }
    }
    nrk_gpio_clr(NRK_DEBUG_2);
    2608:	8c 2d       	mov	r24, r12
    260a:	0e 94 30 2c 	call	0x5860	; 0x5860 <nrk_gpio_clr>
   // printf("%d", currentChannel);
    rf_rx_off ();
    260e:	0e 94 7e 25 	call	0x4afc	; 0x4afc <rf_rx_off>

    if  (n !=1){        //size of packet must have been wrong
    2612:	01 30       	cpi	r16, 0x01	; 1
    2614:	e1 f0       	breq	.+56     	; 0x264e <_isa_rx+0xf2>
        putchar('b');
    2616:	60 91 48 20 	lds	r22, 0x2048
    261a:	70 91 49 20 	lds	r23, 0x2049
    261e:	82 e6       	ldi	r24, 0x62	; 98
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
        printf("Channel %d\r\n",currentChannel);
    2626:	00 d0       	rcall	.+0      	; 0x2628 <_isa_rx+0xcc>
    2628:	00 d0       	rcall	.+0      	; 0x262a <_isa_rx+0xce>
    262a:	ed b7       	in	r30, 0x3d	; 61
    262c:	fe b7       	in	r31, 0x3e	; 62
    262e:	31 96       	adiw	r30, 0x01	; 1
    2630:	83 e9       	ldi	r24, 0x93	; 147
    2632:	94 e0       	ldi	r25, 0x04	; 4
    2634:	ad b7       	in	r26, 0x3d	; 61
    2636:	be b7       	in	r27, 0x3e	; 62
    2638:	12 96       	adiw	r26, 0x02	; 2
    263a:	9c 93       	st	X, r25
    263c:	8e 93       	st	-X, r24
    263e:	11 97       	sbiw	r26, 0x01	; 1
    2640:	80 91 24 1e 	lds	r24, 0x1E24
    2644:	82 83       	std	Z+2, r24	; 0x02
    2646:	13 82       	std	Z+3, r1	; 0x03
    2648:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    264c:	24 c2       	rjmp	.+1096   	; 0x2a96 <_isa_rx+0x53a>
//        packetsLost++;
}

    if (n == 1) {// successfully received packet
            rxCount++;
    264e:	80 91 d0 0b 	lds	r24, 0x0BD0
    2652:	90 91 d1 0b 	lds	r25, 0x0BD1
    2656:	01 96       	adiw	r24, 0x01	; 1
    2658:	90 93 d1 0b 	sts	0x0BD1, r25
    265c:	80 93 d0 0b 	sts	0x0BD0, r24
            nrk_led_toggle(BLUE_LED);
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <nrk_led_toggle>
            //If I am the destination
            destAddr = isa_rfRxInfo.pPayload[DEST_INDEX];
    2668:	00 91 16 0c 	lds	r16, 0x0C16
    266c:	10 91 17 0c 	lds	r17, 0x0C17
    2670:	f8 01       	movw	r30, r16
    2672:	e3 80       	ldd	r14, Z+3	; 0x03
        //potential problem: if repeater or recipient receives noise, the DHDR would be changed. And it is highly possible that the highest bit of DHDR would be set to 0
        //if(isa_node_mode != ISA_GATEWAY)
            DHDR = isa_rfRxInfo.pPayload[DHDR_INDEX];
    2674:	b0 80       	ld	r11, Z
            message = &isa_rfRxInfo.pPayload[PKT_DATA_START];

        #ifdef RX_DEBUG
           // printf("Repeater slot = %d, local slot is %d.\n\r", isa_rfRxInfo.pPayload[SLOT_INDEX],global_slot);
        #endif RX_DEBUG
        nrk_event_signal(isa_rx_pkt_signal);
    2676:	80 91 c8 1d 	lds	r24, 0x1DC8
    267a:	0e 94 14 36 	call	0x6c28	; 0x6c28 <nrk_event_signal>

        node_mask = ((uint32_t) 1) << isa_rfRxInfo.pPayload[SRC_INDEX];

        if(DHDR & (1<<4))// if advertisement, add into candidate table and return
    267e:	ab 2c       	mov	r10, r11
    2680:	b4 fe       	sbrs	r11, 4
    2682:	0e c0       	rjmp	.+28     	; 0x26a0 <_isa_rx+0x144>
        {
                //printf("S:%d\r\n",isa_rfRxInfo.pPayload[SRC_INDEX]);
                //putchar('w');
                 if (addCandidate(isa_rfRxInfo.pPayload[SRC_INDEX]) == ISA_ERROR){
    2684:	e0 91 16 0c 	lds	r30, 0x0C16
    2688:	f0 91 17 0c 	lds	r31, 0x0C17
    268c:	82 81       	ldd	r24, Z+2	; 0x02
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0e 94 98 0a 	call	0x1530	; 0x1530 <addCandidate>
    2694:	8f 3f       	cpi	r24, 0xFF	; 255
    2696:	09 f0       	breq	.+2      	; 0x269a <_isa_rx+0x13e>
    2698:	e1 c1       	rjmp	.+962    	; 0x2a5c <_isa_rx+0x500>
                         printIsaError();
    269a:	0e 94 08 06 	call	0xc10	; 0xc10 <printIsaError>
    269e:	de c1       	rjmp	.+956    	; 0x2a5c <_isa_rx+0x500>

    if (n == 1) {// successfully received packet
            rxCount++;
            nrk_led_toggle(BLUE_LED);
            //If I am the destination
            destAddr = isa_rfRxInfo.pPayload[DEST_INDEX];
    26a0:	ff 24       	eor	r15, r15
                 }
                isa_rx_pkt_release();
                return;
                //printf("Received advertisement \r\n");
        }
        else if(DHDR & (1<<7)){        //if ACK is required
    26a2:	b7 fc       	sbrc	r11, 7
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <_isa_rx+0x14e>
    26a6:	dd 24       	eor	r13, r13
    26a8:	5c c0       	rjmp	.+184    	; 0x2762 <_isa_rx+0x206>
                txCount++;
    26aa:	80 91 ce 0b 	lds	r24, 0x0BCE
    26ae:	90 91 cf 0b 	lds	r25, 0x0BCF
    26b2:	01 96       	adiw	r24, 0x01	; 1
    26b4:	90 93 cf 0b 	sts	0x0BCF, r25
    26b8:	80 93 ce 0b 	sts	0x0BCE, r24
            // Transmit ACK packet

                //If the packet is meant for me or to a node I have a transmit link to, I send an acknowledge
                if((TransmitLinkPresent=isTransmitLinkPresent(isa_rfRxInfo.pPayload)) || (dmo.dlAddress == destAddr))
    26bc:	80 91 16 0c 	lds	r24, 0x0C16
    26c0:	90 91 17 0c 	lds	r25, 0x0C17
    26c4:	0e 94 83 06 	call	0xd06	; 0xd06 <isTransmitLinkPresent>
    26c8:	d8 2e       	mov	r13, r24
    26ca:	88 23       	and	r24, r24
    26cc:	49 f4       	brne	.+18     	; 0x26e0 <_isa_rx+0x184>
    26ce:	80 91 65 0f 	lds	r24, 0x0F65
    26d2:	90 91 66 0f 	lds	r25, 0x0F66
    26d6:	8e 15       	cp	r24, r14
    26d8:	9f 05       	cpc	r25, r15
    26da:	11 f0       	breq	.+4      	; 0x26e0 <_isa_rx+0x184>
    26dc:	83 e0       	ldi	r24, 0x03	; 3
    26de:	01 c0       	rjmp	.+2      	; 0x26e2 <_isa_rx+0x186>
    26e0:	80 e0       	ldi	r24, 0x00	; 0
         |  Returns:  DHDR
         *-------------------------------------------------------------------*/
int8_t configDHR(uint8_t clockCorrection,uint8_t nack)
{
    int8_t DHR = 3;
    if(clockCorrection){//include clock correction change
    26e2:	9b 2d       	mov	r25, r11
    26e4:	94 70       	andi	r25, 0x04	; 4
    26e6:	11 f4       	brne	.+4      	; 0x26ec <_isa_rx+0x190>
    26e8:	93 e0       	ldi	r25, 0x03	; 3
    26ea:	01 c0       	rjmp	.+2      	; 0x26ee <_isa_rx+0x192>
    26ec:	93 e8       	ldi	r25, 0x83	; 131
                }
                else
                {
                        nack = 3; // NACK1 because of difficulties downstream
                }
            DHR = configDHR(DHDR & (1<<2),nack); //configure DHRto include clock correction based on the DHDR bit
    26ee:	82 95       	swap	r24
    26f0:	80 7f       	andi	r24, 0xF0	; 240
    26f2:	89 2b       	or	r24, r25
    26f4:	80 93 a9 1e 	sts	0x1EA9, r24
          //  printf("%d", DHR);
            isa_ack_buf[DHR_INDEX]= DHR;
    26f8:	80 93 cb 0e 	sts	0x0ECB, r24
            #ifdef ACK_DEBUG
                //printf("DHDR is %x.\n\r",DHDR);
            #endif
            isa_ack_tx.pPayload = isa_ack_buf;
    26fc:	8b ec       	ldi	r24, 0xCB	; 203
    26fe:	9e e0       	ldi	r25, 0x0E	; 14
    2700:	90 93 32 0c 	sts	0x0C32, r25
    2704:	80 93 31 0c 	sts	0x0C31, r24
            if (DHDR & (1<<2)) { //reply ACK with time offsetX
    2708:	a2 fe       	sbrs	r10, 2
    270a:	14 c0       	rjmp	.+40     	; 0x2734 <_isa_rx+0x1d8>
                    //            putchar ('K');
                            offsetX = rx_start_time - slot_start_time;
    270c:	80 91 02 1e 	lds	r24, 0x1E02
    2710:	90 91 03 1e 	lds	r25, 0x1E03
    2714:	20 91 d2 1d 	lds	r18, 0x1DD2
    2718:	30 91 d3 1d 	lds	r19, 0x1DD3
    271c:	82 1b       	sub	r24, r18
    271e:	93 0b       	sbc	r25, r19
    2720:	90 93 cf 1d 	sts	0x1DCF, r25
    2724:	80 93 ce 1d 	sts	0x1DCE, r24
                            //printf("slot_start_time is %d,rx_start_time is %d.\n\r",slot_start_time,rx_start_time);
                            uint8_t temp1,temp2;
                            temp1 = (offsetX & 0xFF00)>>8;
                            isa_ack_buf[OFFSET_HIGH]=temp1;
    2728:	90 93 cc 0e 	sts	0x0ECC, r25
                            temp2 = (offsetX & 0x00FF);
                             isa_ack_buf[OFFSET_LOW]=temp2;
    272c:	80 93 cd 0e 	sts	0x0ECD, r24
                            #ifdef ACK_DEBUG
                              //  printf("offsetX is %d\n\r", offsetX);
                            #endif
                            //isa_ack_tx.length = PKT_DATA_START + 1;
                            isa_ack_tx.length = 4;
    2730:	84 e0       	ldi	r24, 0x04	; 4
    2732:	01 c0       	rjmp	.+2      	; 0x2736 <_isa_rx+0x1da>
                        }

            else
            { // recipient , only reply explicit ACK
                //isa_ack_tx.length = PKT_DATA_START-1;
                isa_ack_tx.length = 2;
    2734:	82 e0       	ldi	r24, 0x02	; 2
    2736:	80 93 30 0c 	sts	0x0C30, r24
                //putchar ('C');
                //putchar('\n');
            }
           nrk_gpio_set(NRK_DEBUG_2);
    273a:	8c 2d       	mov	r24, r12
    273c:	0e 94 ba 2b 	call	0x5774	; 0x5774 <nrk_gpio_set>
            rf_tx_tdma_packet (&isa_ack_tx,slot_start_time,isa_param.tx_guard_time,&tx_start_time);
    2740:	60 91 d2 1d 	lds	r22, 0x1DD2
    2744:	70 91 d3 1d 	lds	r23, 0x1DD3
    2748:	40 91 26 0c 	lds	r20, 0x0C26
    274c:	50 91 27 0c 	lds	r21, 0x0C27
    2750:	8e e2       	ldi	r24, 0x2E	; 46
    2752:	9c e0       	ldi	r25, 0x0C	; 12
    2754:	2d ef       	ldi	r18, 0xFD	; 253
    2756:	3d e1       	ldi	r19, 0x1D	; 29
    2758:	0e 94 95 27 	call	0x4f2a	; 0x4f2a <rf_tx_tdma_packet>
            nrk_gpio_clr(NRK_DEBUG_2);
    275c:	8c 2d       	mov	r24, r12
    275e:	0e 94 30 2c 	call	0x5860	; 0x5860 <nrk_gpio_clr>
            //If I am the destination
            destAddr = isa_rfRxInfo.pPayload[DEST_INDEX];
        //potential problem: if repeater or recipient receives noise, the DHDR would be changed. And it is highly possible that the highest bit of DHDR would be set to 0
        //if(isa_node_mode != ISA_GATEWAY)
            DHDR = isa_rfRxInfo.pPayload[DHDR_INDEX];
            message = &isa_rfRxInfo.pPayload[PKT_DATA_START];
    2762:	f8 01       	movw	r30, r16
    2764:	37 96       	adiw	r30, 0x07	; 7

        }
//This will be a normal TX packet if we have reached this point
        //If it is a neighbor table report then we can forward it to our clock source
        //If I am the gateway then I don't forward it to anyone
        if (message->type == DUMMY_PAYLOAD){
    2766:	d8 01       	movw	r26, r16
    2768:	17 96       	adiw	r26, 0x07	; 7
    276a:	8c 91       	ld	r24, X
    276c:	17 97       	sbiw	r26, 0x07	; 7
    276e:	81 30       	cpi	r24, 0x01	; 1
    2770:	91 f5       	brne	.+100    	; 0x27d6 <_isa_rx+0x27a>
        if (destAddr == dmo.dlAddress) {
    2772:	80 91 65 0f 	lds	r24, 0x0F65
    2776:	90 91 66 0f 	lds	r25, 0x0F66
    277a:	e8 16       	cp	r14, r24
    277c:	f9 06       	cpc	r15, r25
    277e:	79 f4       	brne	.+30     	; 0x279e <_isa_rx+0x242>
                dd_data_indication(isa_rfRxInfo.pPayload[SRC_INDEX] , destAddr,0,0, 0, 0, isa_rfRxInfo.pPayload);
    2780:	c0 90 16 0c 	lds	r12, 0x0C16
    2784:	d0 90 17 0c 	lds	r13, 0x0C17
    2788:	f6 01       	movw	r30, r12
    278a:	82 81       	ldd	r24, Z+2	; 0x02
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	b7 01       	movw	r22, r14
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	00 e0       	ldi	r16, 0x00	; 0
    2796:	ee 24       	eor	r14, r14
    2798:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <dd_data_indication>
    279c:	85 c1       	rjmp	.+778    	; 0x2aa8 <_isa_rx+0x54c>
        else{
                //if the dest address is not mine, then add into the queue to forward provided we have a link to forward for that graph. If a graph is not
                // configured in the message then we should at least have a link to the dest neighbor
//                if (isTransmitLinkPresent(isa_rfRxInfo.pPayload)){
                        //if yes, then place the message on the Queue again
                if(TransmitLinkPresent == true){
    279e:	dd 20       	and	r13, r13
    27a0:	a9 f0       	breq	.+42     	; 0x27cc <_isa_rx+0x270>
                enQueue (destAddr, 0, isa_rfRxInfo.length, isa_rfRxInfo.pPayload, NULL);
    27a2:	40 91 14 0c 	lds	r20, 0x0C14
    27a6:	55 27       	eor	r21, r21
    27a8:	47 fd       	sbrc	r20, 7
    27aa:	50 95       	com	r21
    27ac:	20 91 16 0c 	lds	r18, 0x0C16
    27b0:	30 91 17 0c 	lds	r19, 0x0C17
    27b4:	c7 01       	movw	r24, r14
    27b6:	60 e0       	ldi	r22, 0x00	; 0
    27b8:	70 e0       	ldi	r23, 0x00	; 0
    27ba:	00 e0       	ldi	r16, 0x00	; 0
    27bc:	10 e0       	ldi	r17, 0x00	; 0
    27be:	0e 94 32 0b 	call	0x1664	; 0x1664 <enQueue>
                        printf("packet forwarded to %d\r\n", destAddr);
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <_isa_rx+0x268>
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <_isa_rx+0x26a>
    27c6:	80 ea       	ldi	r24, 0xA0	; 160
    27c8:	94 e0       	ldi	r25, 0x04	; 4
    27ca:	60 c0       	rjmp	.+192    	; 0x288c <_isa_rx+0x330>
                                  isa_rx_pkt_release();
                }
                else{
                        printf("No Transmit Link for this test message for %d - dropped\r\n", destAddr);
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <_isa_rx+0x272>
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <_isa_rx+0x274>
    27d0:	89 eb       	ldi	r24, 0xB9	; 185
    27d2:	94 e0       	ldi	r25, 0x04	; 4
    27d4:	50 c1       	rjmp	.+672    	; 0x2a76 <_isa_rx+0x51a>
                }
        }
        }


           else if (message->type==ADD_NEIGHBOR)
    27d6:	82 30       	cpi	r24, 0x02	; 2
    27d8:	91 f5       	brne	.+100    	; 0x283e <_isa_rx+0x2e2>
           {
              // printf("Received configure Neighbor data form %d\r\n",isa_rfRxInfo.pPayload[SRC_INDEX]);
               if(destAddr == dmo.dlAddress)
    27da:	80 91 65 0f 	lds	r24, 0x0F65
    27de:	90 91 66 0f 	lds	r25, 0x0F66
    27e2:	e8 16       	cp	r14, r24
    27e4:	f9 06       	cpc	r15, r25
    27e6:	19 f5       	brne	.+70     	; 0x282e <_isa_rx+0x2d2>
               {
                       configNeighbor = &message->data;
                       addNeighbor(configNeighbor->neighborId,0,0,0,false,0,0,0);
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <_isa_rx+0x28e>
    27ea:	81 81       	ldd	r24, Z+1	; 0x01
    27ec:	92 81       	ldd	r25, Z+2	; 0x02
    27ee:	ad b7       	in	r26, 0x3d	; 61
    27f0:	be b7       	in	r27, 0x3e	; 62
    27f2:	11 96       	adiw	r26, 0x01	; 1
    27f4:	1c 92       	st	X, r1
    27f6:	11 97       	sbiw	r26, 0x01	; 1
    27f8:	12 96       	adiw	r26, 0x02	; 2
    27fa:	1c 92       	st	X, r1
    27fc:	00 e0       	ldi	r16, 0x00	; 0
    27fe:	10 e0       	ldi	r17, 0x00	; 0
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	70 e0       	ldi	r23, 0x00	; 0
    280c:	ee 24       	eor	r14, r14
    280e:	cc 24       	eor	r12, r12
    2810:	aa 24       	eor	r10, r10
    2812:	88 24       	eor	r8, r8
    2814:	0e 94 bb 0c 	call	0x1976	; 0x1976 <addNeighbor>
 *
 */

void isa_rx_pkt_release()
{
    isa_rx_data_ready = 0;
    2818:	10 92 d4 0e 	sts	0x0ED4, r1
    281c:	10 92 d5 0e 	sts	0x0ED5, r1
    2820:	10 92 d6 0e 	sts	0x0ED6, r1
    2824:	10 92 d7 0e 	sts	0x0ED7, r1
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	3d c1       	rjmp	.+634    	; 0x2aa8 <_isa_rx+0x54c>
                       isa_rx_pkt_release();
               }
               else
               {
                   //if (isTransmitLinkPresent(isa_rfRxInfo.pPayload)){
                       if(TransmitLinkPresent == true){
    282e:	dd 20       	and	r13, r13
    2830:	09 f0       	breq	.+2      	; 0x2834 <_isa_rx+0x2d8>
    2832:	04 c1       	rjmp	.+520    	; 0x2a3c <_isa_rx+0x4e0>
                               enQueue (destAddr, 0, isa_rfRxInfo.length, isa_rfRxInfo.pPayload, NULL);
                               // printf("packet forwarded to %d", destAddr);
                               isa_rx_pkt_release();
                           }
                           else{
                               printf("No Transmit Link for Add Neighbor Message for %d- dropped\r\n", destAddr);
    2834:	00 d0       	rcall	.+0      	; 0x2836 <_isa_rx+0x2da>
    2836:	00 d0       	rcall	.+0      	; 0x2838 <_isa_rx+0x2dc>
    2838:	83 ef       	ldi	r24, 0xF3	; 243
    283a:	94 e0       	ldi	r25, 0x04	; 4
    283c:	1c c1       	rjmp	.+568    	; 0x2a76 <_isa_rx+0x51a>
                               isa_rx_pkt_release();
                           }
               }

           }
           else if(message->type==ADD_GRAPH)
    283e:	83 30       	cpi	r24, 0x03	; 3
    2840:	81 f5       	brne	.+96     	; 0x28a2 <_isa_rx+0x346>
           {
              // printf("Received configure Graph data form %d\r\n",isa_rfRxInfo.pPayload[SRC_INDEX]);
               if(destAddr == dmo.dlAddress)
    2842:	80 91 65 0f 	lds	r24, 0x0F65
    2846:	90 91 66 0f 	lds	r25, 0x0F66
    284a:	e8 16       	cp	r14, r24
    284c:	f9 06       	cpc	r15, r25
    284e:	b9 f4       	brne	.+46     	; 0x287e <_isa_rx+0x322>
               {
                       configGraph = &message->data;
    2850:	d8 01       	movw	r26, r16
    2852:	18 96       	adiw	r26, 0x08	; 8
                       addGraph(configGraph->graphId,configGraph->neighborCount,configGraph->neigh1,configGraph->neigh2,configGraph->neigh3);
    2854:	12 96       	adiw	r26, 0x02	; 2
    2856:	4d 91       	ld	r20, X+
    2858:	5c 91       	ld	r21, X
    285a:	13 97       	sbiw	r26, 0x03	; 3
    285c:	14 96       	adiw	r26, 0x04	; 4
    285e:	2d 91       	ld	r18, X+
    2860:	3c 91       	ld	r19, X
    2862:	15 97       	sbiw	r26, 0x05	; 5
    2864:	16 96       	adiw	r26, 0x06	; 6
    2866:	ed 90       	ld	r14, X+
    2868:	fc 90       	ld	r15, X
    286a:	17 97       	sbiw	r26, 0x07	; 7
    286c:	f8 01       	movw	r30, r16
    286e:	80 85       	ldd	r24, Z+8	; 0x08
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	11 96       	adiw	r26, 0x01	; 1
    2874:	6c 91       	ld	r22, X
    2876:	87 01       	movw	r16, r14
    2878:	0e 94 0d 0c 	call	0x181a	; 0x181a <addGraph>
    287c:	ef c0       	rjmp	.+478    	; 0x2a5c <_isa_rx+0x500>
               }
               else
               {

                   //if (isTransmitLinkPresent(isa_rfRxInfo.pPayload)){
                       if(TransmitLinkPresent == true){
    287e:	dd 20       	and	r13, r13
    2880:	09 f0       	breq	.+2      	; 0x2884 <_isa_rx+0x328>
    2882:	dc c0       	rjmp	.+440    	; 0x2a3c <_isa_rx+0x4e0>
                               enQueue (destAddr, 0, isa_rfRxInfo.length, isa_rfRxInfo.pPayload, NULL);
                               // printf("packet forwarded to %d", destAddr);
                                     isa_rx_pkt_release();
                           }
                           else{
                               printf("No Transmit link for graph config for %d- dropped", destAddr);
    2884:	00 d0       	rcall	.+0      	; 0x2886 <_isa_rx+0x32a>
    2886:	00 d0       	rcall	.+0      	; 0x2888 <_isa_rx+0x32c>
    2888:	8f e2       	ldi	r24, 0x2F	; 47
    288a:	95 e0       	ldi	r25, 0x05	; 5
    288c:	ad b7       	in	r26, 0x3d	; 61
    288e:	be b7       	in	r27, 0x3e	; 62
    2890:	12 96       	adiw	r26, 0x02	; 2
    2892:	9c 93       	st	X, r25
    2894:	8e 93       	st	-X, r24
    2896:	11 97       	sbiw	r26, 0x01	; 1
    2898:	14 96       	adiw	r26, 0x04	; 4
    289a:	fc 92       	st	X, r15
    289c:	ee 92       	st	-X, r14
    289e:	13 97       	sbiw	r26, 0x03	; 3
    28a0:	f0 c0       	rjmp	.+480    	; 0x2a82 <_isa_rx+0x526>
                               isa_rx_pkt_release();
                           }

               }
           }
           else if(message->type==ADD_LINK)
    28a2:	84 30       	cpi	r24, 0x04	; 4
    28a4:	e9 f4       	brne	.+58     	; 0x28e0 <_isa_rx+0x384>
           {
              // printf("Received configure Link data form %d\r\n",isa_rfRxInfo.pPayload[SRC_INDEX]);
               if(destAddr == dmo.dlAddress)
    28a6:	80 91 65 0f 	lds	r24, 0x0F65
    28aa:	90 91 66 0f 	lds	r25, 0x0F66
    28ae:	e8 16       	cp	r14, r24
    28b0:	f9 06       	cpc	r15, r25
    28b2:	71 f4       	brne	.+28     	; 0x28d0 <_isa_rx+0x374>
               {
                   configLink = &message->data;
    28b4:	f8 01       	movw	r30, r16
    28b6:	38 96       	adiw	r30, 0x08	; 8
                   addLink(configLink->slotNumber,configLink->neighborId,configLink->graphId,configLink->linkType,configLink->graphType);
    28b8:	61 81       	ldd	r22, Z+1	; 0x01
    28ba:	72 81       	ldd	r23, Z+2	; 0x02
    28bc:	43 81       	ldd	r20, Z+3	; 0x03
    28be:	d8 01       	movw	r26, r16
    28c0:	18 96       	adiw	r26, 0x08	; 8
    28c2:	8c 91       	ld	r24, X
    28c4:	50 e0       	ldi	r21, 0x00	; 0
    28c6:	24 81       	ldd	r18, Z+4	; 0x04
    28c8:	05 81       	ldd	r16, Z+5	; 0x05
    28ca:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <addLink>
    28ce:	c6 c0       	rjmp	.+396    	; 0x2a5c <_isa_rx+0x500>
                   isa_rx_pkt_release();
               }
               else
               {
                  // if (isTransmitLinkPresent(isa_rfRxInfo.pPayload)){
                       if(TransmitLinkPresent == true){
    28d0:	dd 20       	and	r13, r13
    28d2:	09 f0       	breq	.+2      	; 0x28d6 <_isa_rx+0x37a>
    28d4:	b3 c0       	rjmp	.+358    	; 0x2a3c <_isa_rx+0x4e0>
                                       enQueue (destAddr, 0, isa_rfRxInfo.length, isa_rfRxInfo.pPayload, NULL);
                                       // printf("packet forwarded to %d", destAddr);
                                             isa_rx_pkt_release();
                                   }
                                   else{
                                       printf("No Transmit Link for Add link message for %d- dropped", destAddr);
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <_isa_rx+0x37c>
    28d8:	00 d0       	rcall	.+0      	; 0x28da <_isa_rx+0x37e>
    28da:	81 e6       	ldi	r24, 0x61	; 97
    28dc:	95 e0       	ldi	r25, 0x05	; 5
    28de:	cb c0       	rjmp	.+406    	; 0x2a76 <_isa_rx+0x51a>
                                       isa_rx_pkt_release();
                                   }
               }
           }
        else if (message->type==NEIGHBOR_TABLE_REPORT){        //if it is a neighbor table report,
    28e0:	88 23       	and	r24, r24
    28e2:	09 f0       	breq	.+2      	; 0x28e6 <_isa_rx+0x38a>
    28e4:	7b c0       	rjmp	.+246    	; 0x29dc <_isa_rx+0x480>
                if (isa_node_mode==ISA_GATEWAY){
    28e6:	80 91 5d 0d 	lds	r24, 0x0D5D
    28ea:	82 30       	cpi	r24, 0x02	; 2
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <_isa_rx+0x394>
    28ee:	69 c0       	rjmp	.+210    	; 0x29c2 <_isa_rx+0x466>

                        //array[SRC_INDEX] |= ((uint16_t)1<<candidate->neighbor);
                        printf ("Received Candidate Table frm %d\r\n",isa_rfRxInfo.pPayload[SRC_INDEX]);
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <_isa_rx+0x396>
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <_isa_rx+0x398>
    28f4:	ed b7       	in	r30, 0x3d	; 61
    28f6:	fe b7       	in	r31, 0x3e	; 62
    28f8:	31 96       	adiw	r30, 0x01	; 1
    28fa:	87 e9       	ldi	r24, 0x97	; 151
    28fc:	95 e0       	ldi	r25, 0x05	; 5
    28fe:	ad b7       	in	r26, 0x3d	; 61
    2900:	be b7       	in	r27, 0x3e	; 62
    2902:	12 96       	adiw	r26, 0x02	; 2
    2904:	9c 93       	st	X, r25
    2906:	8e 93       	st	-X, r24
    2908:	11 97       	sbiw	r26, 0x01	; 1
    290a:	a0 91 16 0c 	lds	r26, 0x0C16
    290e:	b0 91 17 0c 	lds	r27, 0x0C17
    2912:	12 96       	adiw	r26, 0x02	; 2
    2914:	8c 91       	ld	r24, X
    2916:	82 83       	std	Z+2, r24	; 0x02
    2918:	13 82       	std	Z+3, r1	; 0x03
    291a:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
                        //need to print the neighbor info now
                        neighborTable = &message->data; //cast to neighbor Table
    291e:	48 e0       	ldi	r20, 0x08	; 8
    2920:	e4 2e       	mov	r14, r20
    2922:	f1 2c       	mov	r15, r1
    2924:	e0 0e       	add	r14, r16
    2926:	f1 1e       	adc	r15, r17
                        candidate = &neighborTable->candidate;
    2928:	d8 01       	movw	r26, r16
    292a:	19 96       	adiw	r26, 0x09	; 9
                        adjacencyMatrix[isa_rfRxInfo.pPayload[SRC_INDEX]] = 0;
    292c:	e0 91 16 0c 	lds	r30, 0x0C16
    2930:	f0 91 17 0c 	lds	r31, 0x0C17
    2934:	bf 01       	movw	r22, r30
    2936:	6e 5f       	subi	r22, 0xFE	; 254
    2938:	7f 4f       	sbci	r23, 0xFF	; 255
    293a:	e2 81       	ldd	r30, Z+2	; 0x02
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	ee 0f       	add	r30, r30
    2940:	ff 1f       	adc	r31, r31
    2942:	e6 52       	subi	r30, 0x26	; 38
    2944:	f2 4e       	sbci	r31, 0xE2	; 226
    2946:	11 82       	std	Z+1, r1	; 0x01
    2948:	10 82       	st	Z, r1
    294a:	80 e0       	ldi	r24, 0x00	; 0
                        for (i = 0; i < neighborTable->numberOfNeighbors; i++){
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
                                adjacencyMatrix[isa_rfRxInfo.pPayload[SRC_INDEX]] |= ((uint16_t)1<<candidate->neighbor);
    2954:	41 e0       	ldi	r20, 0x01	; 1
    2956:	50 e0       	ldi	r21, 0x00	; 0
                        printf ("Received Candidate Table frm %d\r\n",isa_rfRxInfo.pPayload[SRC_INDEX]);
                        //need to print the neighbor info now
                        neighborTable = &message->data; //cast to neighbor Table
                        candidate = &neighborTable->candidate;
                        adjacencyMatrix[isa_rfRxInfo.pPayload[SRC_INDEX]] = 0;
                        for (i = 0; i < neighborTable->numberOfNeighbors; i++){
    2958:	17 c0       	rjmp	.+46     	; 0x2988 <_isa_rx+0x42c>
                                adjacencyMatrix[isa_rfRxInfo.pPayload[SRC_INDEX]] |= ((uint16_t)1<<candidate->neighbor);
    295a:	fb 01       	movw	r30, r22
    295c:	90 81       	ld	r25, Z
    295e:	e9 2f       	mov	r30, r25
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	ee 0f       	add	r30, r30
    2964:	ff 1f       	adc	r31, r31
    2966:	e6 52       	subi	r30, 0x26	; 38
    2968:	f2 4e       	sbci	r31, 0xE2	; 226
    296a:	8a 01       	movw	r16, r20
    296c:	0c 90       	ld	r0, X
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <_isa_rx+0x418>
    2970:	00 0f       	add	r16, r16
    2972:	11 1f       	adc	r17, r17
    2974:	0a 94       	dec	r0
    2976:	e2 f7       	brpl	.-8      	; 0x2970 <_isa_rx+0x414>
    2978:	20 81       	ld	r18, Z
    297a:	31 81       	ldd	r19, Z+1	; 0x01
    297c:	20 2b       	or	r18, r16
    297e:	31 2b       	or	r19, r17
    2980:	31 83       	std	Z+1, r19	; 0x01
    2982:	20 83       	st	Z, r18
                                //printf ("\t%d", candidate->neighbor);
                                candidate++;
    2984:	14 96       	adiw	r26, 0x04	; 4
                        printf ("Received Candidate Table frm %d\r\n",isa_rfRxInfo.pPayload[SRC_INDEX]);
                        //need to print the neighbor info now
                        neighborTable = &message->data; //cast to neighbor Table
                        candidate = &neighborTable->candidate;
                        adjacencyMatrix[isa_rfRxInfo.pPayload[SRC_INDEX]] = 0;
                        for (i = 0; i < neighborTable->numberOfNeighbors; i++){
    2986:	8f 5f       	subi	r24, 0xFF	; 255
    2988:	f7 01       	movw	r30, r14
    298a:	90 81       	ld	r25, Z
    298c:	89 17       	cp	r24, r25
    298e:	28 f3       	brcs	.-54     	; 0x295a <_isa_rx+0x3fe>
                                adjacencyMatrix[isa_rfRxInfo.pPayload[SRC_INDEX]] |= ((uint16_t)1<<candidate->neighbor);
                                //printf ("\t%d", candidate->neighbor);
                                candidate++;
                        }
                        putchar('\n');
    2990:	60 91 48 20 	lds	r22, 0x2048
    2994:	70 91 49 20 	lds	r23, 0x2049
    2998:	8a e0       	ldi	r24, 0x0A	; 10
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
                        putchar('\r');
    29a0:	60 91 48 20 	lds	r22, 0x2048
    29a4:	70 91 49 20 	lds	r23, 0x2049
    29a8:	8d e0       	ldi	r24, 0x0D	; 13
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
                        putchar('n');
    29b0:	60 91 48 20 	lds	r22, 0x2048
    29b4:	70 91 49 20 	lds	r23, 0x2049
    29b8:	8e e6       	ldi	r24, 0x6E	; 110
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
    29c0:	4d c0       	rjmp	.+154    	; 0x2a5c <_isa_rx+0x500>
                          isa_rx_pkt_release();
                }
                else{        // if I am not the gateway, forward to my clock source
                         enQueue (isa_clk_src_id, 0, isa_rfRxInfo.length, isa_rfRxInfo.pPayload, NULL);
    29c2:	40 91 14 0c 	lds	r20, 0x0C14
    29c6:	55 27       	eor	r21, r21
    29c8:	47 fd       	sbrc	r20, 7
    29ca:	50 95       	com	r21
    29cc:	20 91 16 0c 	lds	r18, 0x0C16
    29d0:	30 91 17 0c 	lds	r19, 0x0C17
    29d4:	80 91 fe 0c 	lds	r24, 0x0CFE
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	3a c0       	rjmp	.+116    	; 0x2a50 <_isa_rx+0x4f4>
                          isa_rx_pkt_release();

                }
        }
        else if(message->type==FLUSH_CANDIDATE_TABLE)
    29dc:	85 30       	cpi	r24, 0x05	; 5
    29de:	09 f0       	breq	.+2      	; 0x29e2 <_isa_rx+0x486>
    29e0:	5f c0       	rjmp	.+190    	; 0x2aa0 <_isa_rx+0x544>
        {
                printf("Received flush candidate table %d\r\n",isa_rfRxInfo.pPayload[SRC_INDEX]);
    29e2:	00 d0       	rcall	.+0      	; 0x29e4 <_isa_rx+0x488>
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <_isa_rx+0x48a>
    29e6:	ed b7       	in	r30, 0x3d	; 61
    29e8:	fe b7       	in	r31, 0x3e	; 62
    29ea:	31 96       	adiw	r30, 0x01	; 1
    29ec:	89 eb       	ldi	r24, 0xB9	; 185
    29ee:	95 e0       	ldi	r25, 0x05	; 5
    29f0:	ad b7       	in	r26, 0x3d	; 61
    29f2:	be b7       	in	r27, 0x3e	; 62
    29f4:	12 96       	adiw	r26, 0x02	; 2
    29f6:	9c 93       	st	X, r25
    29f8:	8e 93       	st	-X, r24
    29fa:	11 97       	sbiw	r26, 0x01	; 1
    29fc:	a0 91 16 0c 	lds	r26, 0x0C16
    2a00:	b0 91 17 0c 	lds	r27, 0x0C17
    2a04:	12 96       	adiw	r26, 0x02	; 2
    2a06:	8c 91       	ld	r24, X
    2a08:	82 83       	std	Z+2, r24	; 0x02
    2a0a:	13 82       	std	Z+3, r1	; 0x03
    2a0c:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
                               if(destAddr == dmo.dlAddress)
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	80 91 65 0f 	lds	r24, 0x0F65
    2a1c:	90 91 66 0f 	lds	r25, 0x0F66
    2a20:	e8 16       	cp	r14, r24
    2a22:	f9 06       	cpc	r15, r25
    2a24:	19 f4       	brne	.+6      	; 0x2a2c <_isa_rx+0x4d0>
                               {
                                  flushCandidateEntries();
    2a26:	0e 94 03 0a 	call	0x1406	; 0x1406 <flushCandidateEntries>
    2a2a:	18 c0       	rjmp	.+48     	; 0x2a5c <_isa_rx+0x500>
                                   isa_rx_pkt_release();
                               }
                               else
                               {
                                   if (isTransmitLinkPresent(isa_rfRxInfo.pPayload)){
    2a2c:	80 91 16 0c 	lds	r24, 0x0C16
    2a30:	90 91 17 0c 	lds	r25, 0x0C17
    2a34:	0e 94 83 06 	call	0xd06	; 0xd06 <isTransmitLinkPresent>
    2a38:	88 23       	and	r24, r24
    2a3a:	c9 f0       	breq	.+50     	; 0x2a6e <_isa_rx+0x512>
                                                       //if yes, then place the message on the Queue again
                                                       enQueue (destAddr, 0, isa_rfRxInfo.length, isa_rfRxInfo.pPayload, NULL);
    2a3c:	40 91 14 0c 	lds	r20, 0x0C14
    2a40:	55 27       	eor	r21, r21
    2a42:	47 fd       	sbrc	r20, 7
    2a44:	50 95       	com	r21
    2a46:	20 91 16 0c 	lds	r18, 0x0C16
    2a4a:	30 91 17 0c 	lds	r19, 0x0C17
    2a4e:	c7 01       	movw	r24, r14
    2a50:	60 e0       	ldi	r22, 0x00	; 0
    2a52:	70 e0       	ldi	r23, 0x00	; 0
    2a54:	00 e0       	ldi	r16, 0x00	; 0
    2a56:	10 e0       	ldi	r17, 0x00	; 0
    2a58:	0e 94 32 0b 	call	0x1664	; 0x1664 <enQueue>
 *
 */

void isa_rx_pkt_release()
{
    isa_rx_data_ready = 0;
    2a5c:	10 92 d4 0e 	sts	0x0ED4, r1
    2a60:	10 92 d5 0e 	sts	0x0ED5, r1
    2a64:	10 92 d6 0e 	sts	0x0ED6, r1
    2a68:	10 92 d7 0e 	sts	0x0ED7, r1
    2a6c:	1d c0       	rjmp	.+58     	; 0x2aa8 <_isa_rx+0x54c>
                                                       enQueue (destAddr, 0, isa_rfRxInfo.length, isa_rfRxInfo.pPayload, NULL);
                                                       // printf("packet forwarded to %d", destAddr);
                                                             isa_rx_pkt_release();
                                                   }
                                                   else{
                                                       printf("No Transmit link for Flush message for  %d- dropped\r\n", destAddr);
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <_isa_rx+0x514>
    2a70:	00 d0       	rcall	.+0      	; 0x2a72 <_isa_rx+0x516>
    2a72:	8d ed       	ldi	r24, 0xDD	; 221
    2a74:	95 e0       	ldi	r25, 0x05	; 5
    2a76:	ed b7       	in	r30, 0x3d	; 61
    2a78:	fe b7       	in	r31, 0x3e	; 62
    2a7a:	92 83       	std	Z+2, r25	; 0x02
    2a7c:	81 83       	std	Z+1, r24	; 0x01
    2a7e:	f4 82       	std	Z+4, r15	; 0x04
    2a80:	e3 82       	std	Z+3, r14	; 0x03
    2a82:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
 *
 */

void isa_rx_pkt_release()
{
    isa_rx_data_ready = 0;
    2a86:	10 92 d4 0e 	sts	0x0ED4, r1
    2a8a:	10 92 d5 0e 	sts	0x0ED5, r1
    2a8e:	10 92 d6 0e 	sts	0x0ED6, r1
    2a92:	10 92 d7 0e 	sts	0x0ED7, r1
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	04 c0       	rjmp	.+8      	; 0x2aa8 <_isa_rx+0x54c>
                                                       printf("No Transmit link for Flush message for  %d- dropped\r\n", destAddr);
                                                       isa_rx_pkt_release();
                                                   }
                               }
        }
        else printf ("Unknown message type\r\n");
    2aa0:	83 e1       	ldi	r24, 0x13	; 19
    2aa2:	96 e0       	ldi	r25, 0x06	; 6
    2aa4:	0e 94 4d 48 	call	0x909a	; 0x909a <puts>

    }
    #ifdef LED_DEBUG
        nrk_led_clr (1);
    #endif
}
    2aa8:	0f 90       	pop	r0
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	1f 91       	pop	r17
    2ab0:	0f 91       	pop	r16
    2ab2:	ff 90       	pop	r15
    2ab4:	ef 90       	pop	r14
    2ab6:	df 90       	pop	r13
    2ab8:	cf 90       	pop	r12
    2aba:	bf 90       	pop	r11
    2abc:	af 90       	pop	r10
    2abe:	8f 90       	pop	r8
    2ac0:	08 95       	ret

00002ac2 <isa_wait_until_rx_or_tx>:
    return NRK_OK;
}

int8_t isa_wait_until_rx_or_tx ()
{
    nrk_signal_register(isa_rx_pkt_signal);
    2ac2:	80 91 c8 1d 	lds	r24, 0x1DC8
    2ac6:	0e 94 f5 34 	call	0x69ea	; 0x69ea <nrk_signal_register>
    nrk_signal_register(isa_tx_done_signal);
    2aca:	80 91 d4 1d 	lds	r24, 0x1DD4
    2ace:	0e 94 f5 34 	call	0x69ea	; 0x69ea <nrk_signal_register>
    nrk_event_wait (SIG(isa_rx_pkt_signal) | SIG(isa_tx_done_signal));
    2ad2:	21 e0       	ldi	r18, 0x01	; 1
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	ca 01       	movw	r24, r20
    2adc:	b9 01       	movw	r22, r18
    2ade:	00 90 d4 1d 	lds	r0, 0x1DD4
    2ae2:	04 c0       	rjmp	.+8      	; 0x2aec <isa_wait_until_rx_or_tx+0x2a>
    2ae4:	66 0f       	add	r22, r22
    2ae6:	77 1f       	adc	r23, r23
    2ae8:	88 1f       	adc	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	0a 94       	dec	r0
    2aee:	d2 f7       	brpl	.-12     	; 0x2ae4 <isa_wait_until_rx_or_tx+0x22>
    2af0:	00 90 c8 1d 	lds	r0, 0x1DC8
    2af4:	04 c0       	rjmp	.+8      	; 0x2afe <isa_wait_until_rx_or_tx+0x3c>
    2af6:	22 0f       	add	r18, r18
    2af8:	33 1f       	adc	r19, r19
    2afa:	44 1f       	adc	r20, r20
    2afc:	55 1f       	adc	r21, r21
    2afe:	0a 94       	dec	r0
    2b00:	d2 f7       	brpl	.-12     	; 0x2af6 <isa_wait_until_rx_or_tx+0x34>
    2b02:	62 2b       	or	r22, r18
    2b04:	73 2b       	or	r23, r19
    2b06:	84 2b       	or	r24, r20
    2b08:	95 2b       	or	r25, r21
    2b0a:	0e 94 6e 37 	call	0x6edc	; 0x6edc <nrk_event_wait>
    return NRK_OK;
}
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	08 95       	ret

00002b12 <isa_wait_until_rx_pkt>:
return NRK_OK;
}

int8_t isa_wait_until_rx_pkt()
{
    nrk_signal_register(isa_rx_pkt_signal);
    2b12:	80 91 c8 1d 	lds	r24, 0x1DC8
    2b16:	0e 94 f5 34 	call	0x69ea	; 0x69ea <nrk_signal_register>
    if (isa_rx_pkt_check() != 0)
    2b1a:	80 91 d4 0e 	lds	r24, 0x0ED4
    2b1e:	88 23       	and	r24, r24
    2b20:	79 f4       	brne	.+30     	; 0x2b40 <isa_wait_until_rx_pkt+0x2e>
        return NRK_OK;
    nrk_event_wait (SIG(isa_rx_pkt_signal));
    2b22:	61 e0       	ldi	r22, 0x01	; 1
    2b24:	70 e0       	ldi	r23, 0x00	; 0
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	00 90 c8 1d 	lds	r0, 0x1DC8
    2b2e:	04 c0       	rjmp	.+8      	; 0x2b38 <isa_wait_until_rx_pkt+0x26>
    2b30:	66 0f       	add	r22, r22
    2b32:	77 1f       	adc	r23, r23
    2b34:	88 1f       	adc	r24, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	0a 94       	dec	r0
    2b3a:	d2 f7       	brpl	.-12     	; 0x2b30 <isa_wait_until_rx_pkt+0x1e>
    2b3c:	0e 94 6e 37 	call	0x6edc	; 0x6edc <nrk_event_wait>
    return NRK_OK;
}
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	08 95       	ret

00002b44 <isa_set_channel>:
 * This function set channel and is used for channel hopping.
 *
 */
void isa_set_channel (uint8_t chan)
{
    isa_param.channel = chan;
    2b44:	80 93 24 0c 	sts	0x0C24, r24
    rf_set_channel (chan);
    2b48:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <rf_set_channel>
}
    2b4c:	08 95       	ret

00002b4e <isa_nw_task>:

}


void isa_nw_task ()
{
    2b4e:	ef 92       	push	r14
    2b50:	ff 92       	push	r15
    2b52:	0f 93       	push	r16
    2b54:	1f 93       	push	r17
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	0f 92       	push	r0
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    uint8_t slot;
    uint16_t next_slot_offset = 0;
    uint8_t FIRST = 1;
    DLMO_LINK * link;

    _isa_ready = 0;
    2b60:	10 92 56 0e 	sts	0x0E56, r1

    // wait for isa ready
    do {
        nrk_wait_until_next_period ();
    2b64:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <nrk_wait_until_next_period>
    }while (_isa_ready == 0);
    2b68:	80 91 56 0e 	lds	r24, 0x0E56
    2b6c:	88 23       	and	r24, r24
    2b6e:	d1 f3       	breq	.-12     	; 0x2b64 <isa_nw_task+0x16>

    _isa_ready = 1;
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	80 93 56 0e 	sts	0x0E56, r24
    while (1) {

            //putchar('n');
            _nrk_high_speed_timer_reset();
             slot_start_time = _nrk_high_speed_timer_get();
            nrk_gpio_set(NRK_DEBUG_1);
    2b76:	10 91 50 0b 	lds	r17, 0x0B50
    2b7a:	ee 24       	eor	r14, r14
    2b7c:	ff 24       	eor	r15, r15
                DHDRcount = 0;        //make send request for time correction
                _isa_sync_ok = _isa_init_sync();

                //printf("waiting for sync...isa_sync_ok is %d.\n\r",_isa_sync_ok);
            }else if (isa_node_mode == ISA_GATEWAY){
                _isa_sync_ok = 1;
    2b7e:	01 e0       	ldi	r16, 0x01	; 1
    //nrk_gpio_clr(NRK_DEBUG_0);
    //nrk_time_get (&last_slot_time);// dont know if it is useful
    while (1) {

            //putchar('n');
            _nrk_high_speed_timer_reset();
    2b80:	0e 94 38 41 	call	0x8270	; 0x8270 <_nrk_high_speed_timer_reset>
             slot_start_time = _nrk_high_speed_timer_get();
    2b84:	0e 94 84 41 	call	0x8308	; 0x8308 <_nrk_high_speed_timer_get>
    2b88:	90 93 d3 1d 	sts	0x1DD3, r25
    2b8c:	80 93 d2 1d 	sts	0x1DD2, r24
            nrk_gpio_set(NRK_DEBUG_1);
    2b90:	81 2f       	mov	r24, r17
    2b92:	0e 94 ba 2b 	call	0x5774	; 0x5774 <nrk_gpio_set>
        nrk_gpio_clr(NRK_DEBUG_1);
    2b96:	81 2f       	mov	r24, r17
    2b98:	0e 94 30 2c 	call	0x5860	; 0x5860 <nrk_gpio_clr>
        //nrk_time_get (&last_slot_time);// dont know if it is useful
     //   last_slot = global_slot; //global_slot has been initialized to MAX_ISA_GLOBAL_SLOTS in isa_init()
      //  if (last_slot > MAX_ISA_GLOBAL_SLOTS)
        //    last_slot -= (MAX_ISA_GLOBAL_SLOTS+1);

        current_global_slot = global_slot;
    2b9c:	80 91 d5 1d 	lds	r24, 0x1DD5
    2ba0:	90 91 d6 1d 	lds	r25, 0x1DD6
    2ba4:	90 93 00 1e 	sts	0x1E00, r25
    2ba8:	80 93 ff 1d 	sts	0x1DFF, r24
        /* global_slot should be wrapped */
        if(global_slot > ISA_SLOTS_PER_FRAME * 3)
    2bac:	80 91 d5 1d 	lds	r24, 0x1DD5
    2bb0:	90 91 d6 1d 	lds	r25, 0x1DD6
    2bb4:	87 39       	cpi	r24, 0x97	; 151
    2bb6:	91 05       	cpc	r25, r1
    2bb8:	a8 f0       	brcs	.+42     	; 0x2be4 <isa_nw_task+0x96>
        {
        	global_slot = global_slot % ISA_SLOTS_PER_FRAME;
    2bba:	80 91 d5 1d 	lds	r24, 0x1DD5
    2bbe:	90 91 d6 1d 	lds	r25, 0x1DD6
    2bc2:	62 e3       	ldi	r22, 0x32	; 50
    2bc4:	70 e0       	ldi	r23, 0x00	; 0
    2bc6:	0e 94 d9 46 	call	0x8db2	; 0x8db2 <__udivmodhi4>
    2bca:	90 93 d6 1d 	sts	0x1DD6, r25
    2bce:	80 93 d5 1d 	sts	0x1DD5, r24
        	global_cycle++;
    2bd2:	80 91 ca 1d 	lds	r24, 0x1DCA
    2bd6:	90 91 cb 1d 	lds	r25, 0x1DCB
    2bda:	01 96       	adiw	r24, 0x01	; 1
    2bdc:	90 93 cb 1d 	sts	0x1DCB, r25
    2be0:	80 93 ca 1d 	sts	0x1DCA, r24

            global_slot -= MAX_ISA_GLOBAL_SLOTS;
            global_cycle++;
        }
	*/
        slot = global_slot % ISA_SLOTS_PER_FRAME;
    2be4:	80 91 d5 1d 	lds	r24, 0x1DD5
    2be8:	90 91 d6 1d 	lds	r25, 0x1DD6
        if(_isa_sync_ok == 1){
    2bec:	20 91 01 1e 	lds	r18, 0x1E01
    2bf0:	21 30       	cpi	r18, 0x01	; 1
    2bf2:	59 f5       	brne	.+86     	; 0x2c4a <isa_nw_task+0xfc>

            global_slot -= MAX_ISA_GLOBAL_SLOTS;
            global_cycle++;
        }
	*/
        slot = global_slot % ISA_SLOTS_PER_FRAME;
    2bf4:	62 e3       	ldi	r22, 0x32	; 50
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	0e 94 d9 46 	call	0x8db2	; 0x8db2 <__udivmodhi4>
    2bfc:	68 2f       	mov	r22, r24
        if(_isa_sync_ok == 1){
            #ifdef CHANNEL_HOPPING
                channelIndex += next_slot_offset;
    2bfe:	e0 91 c9 0b 	lds	r30, 0x0BC9
    2c02:	ee 0d       	add	r30, r14
    2c04:	e0 93 c9 0b 	sts	0x0BC9, r30
                currentChannel = slottedPattern[(channelIndex)&0x0F];//equivalent to mod by 16
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	ef 70       	andi	r30, 0x0F	; 15
    2c0c:	f0 70       	andi	r31, 0x00	; 0
    2c0e:	eb 5d       	subi	r30, 0xDB	; 219
    2c10:	f1 4e       	sbci	r31, 0xE1	; 225
    2c12:	80 81       	ld	r24, Z
    2c14:	80 93 24 1e 	sts	0x1E24, r24
                isa_set_channel(currentChannel);
    2c18:	69 83       	std	Y+1, r22	; 0x01
    2c1a:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <isa_set_channel>

            #endif
                    /*
                     * who is the neighbor that this slot is configured for?
                     */
                link = findLink(slot);
    2c1e:	69 81       	ldd	r22, Y+1	; 0x01
    2c20:	86 2f       	mov	r24, r22
    2c22:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <findLink>
                    if(link != NULL){
    2c26:	69 81       	ldd	r22, Y+1	; 0x01
    2c28:	00 97       	sbiw	r24, 0x00	; 0
    2c2a:	f1 f0       	breq	.+60     	; 0x2c68 <isa_nw_task+0x11a>
                            //what type of link is this
                            if (link->linkType == RX){
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	24 81       	ldd	r18, Z+4	; 0x04
    2c30:	28 30       	cpi	r18, 0x08	; 8
    2c32:	19 f4       	brne	.+6      	; 0x2c3a <isa_nw_task+0xec>
                                    _isa_rx (link, slot);
    2c34:	0e 94 ae 12 	call	0x255c	; 0x255c <_isa_rx>
    2c38:	17 c0       	rjmp	.+46     	; 0x2c68 <isa_nw_task+0x11a>
                            }
                            else if (link->linkType == TX_NO_ADV){
    2c3a:	21 30       	cpi	r18, 0x01	; 1
    2c3c:	11 f0       	breq	.+4      	; 0x2c42 <isa_nw_task+0xf4>
                                    _isa_tx(link , slot);
                            }
                            else if(link->linkType == ADV){//Added by Vignesh.
    2c3e:	24 30       	cpi	r18, 0x04	; 4
    2c40:	99 f4       	brne	.+38     	; 0x2c68 <isa_nw_task+0x11a>
                                    _isa_tx(link,slot);
    2c42:	70 e0       	ldi	r23, 0x00	; 0
    2c44:	0e 94 76 10 	call	0x20ec	; 0x20ec <_isa_tx>
    2c48:	0f c0       	rjmp	.+30     	; 0x2c68 <isa_nw_task+0x11a>

        } else        {

            ///do joining or sync request here
        //    DHDR = configDHDR(0);
            if(isa_node_mode != ISA_GATEWAY){//change
    2c4a:	80 91 5d 0d 	lds	r24, 0x0D5D
    2c4e:	82 30       	cpi	r24, 0x02	; 2
    2c50:	49 f0       	breq	.+18     	; 0x2c64 <isa_nw_task+0x116>
                #ifdef JOIN_PROCESS
                if(!_isa_join_ok){
                    _isa_join_process();
                }
                #endif
                DHDRcount = 0;        //make send request for time correction
    2c52:	10 92 cd 0b 	sts	0x0BCD, r1
    2c56:	10 92 cc 0b 	sts	0x0BCC, r1
                _isa_sync_ok = _isa_init_sync();
    2c5a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_isa_init_sync>
    2c5e:	80 93 01 1e 	sts	0x1E01, r24
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <isa_nw_task+0x11a>

                //printf("waiting for sync...isa_sync_ok is %d.\n\r",_isa_sync_ok);
            }else if (isa_node_mode == ISA_GATEWAY){
                _isa_sync_ok = 1;
    2c64:	00 93 01 1e 	sts	0x1E01, r16
            }
        }

        if(slot_expired >= EXPIRATION && isa_node_mode != ISA_GATEWAY){
    2c68:	20 91 aa 1e 	lds	r18, 0x1EAA
    2c6c:	30 91 ab 1e 	lds	r19, 0x1EAB
    2c70:	80 91 29 06 	lds	r24, 0x0629
    2c74:	90 91 2a 06 	lds	r25, 0x062A
    2c78:	28 17       	cp	r18, r24
    2c7a:	39 07       	cpc	r19, r25
    2c7c:	88 f1       	brcs	.+98     	; 0x2ce0 <isa_nw_task+0x192>
    2c7e:	80 91 5d 0d 	lds	r24, 0x0D5D
    2c82:	82 30       	cpi	r24, 0x02	; 2
    2c84:	69 f1       	breq	.+90     	; 0x2ce0 <isa_nw_task+0x192>
            //printf("re-sync\n\r");
            _isa_sync_ok = 0;
    2c86:	10 92 01 1e 	sts	0x1E01, r1
            slot_expired = 0;
    2c8a:	10 92 ab 1e 	sts	0x1EAB, r1
    2c8e:	10 92 aa 1e 	sts	0x1EAA, r1
            global_slot = 0;
    2c92:	10 92 d6 1d 	sts	0x1DD6, r1
    2c96:	10 92 d5 1d 	sts	0x1DD5, r1
            next_slot_offset = 0;
            resync_times++;
    2c9a:	80 91 fc 0c 	lds	r24, 0x0CFC
    2c9e:	90 91 fd 0c 	lds	r25, 0x0CFD
    2ca2:	01 96       	adiw	r24, 0x01	; 1
    2ca4:	90 93 fd 0c 	sts	0x0CFD, r25
    2ca8:	80 93 fc 0c 	sts	0x0CFC, r24
            if(isa_id!=1){
    2cac:	80 91 0f 0c 	lds	r24, 0x0C0F
    2cb0:	81 30       	cpi	r24, 0x01	; 1
    2cb2:	49 f0       	breq	.+18     	; 0x2cc6 <isa_nw_task+0x178>
                channelIndex = isa_clk_src_id;
    2cb4:	e0 91 fe 0c 	lds	r30, 0x0CFE
    2cb8:	e0 93 c9 0b 	sts	0x0BC9, r30
                currentChannel = slottedPattern[channelIndex];
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	eb 5d       	subi	r30, 0xDB	; 219
    2cc0:	f1 4e       	sbci	r31, 0xE1	; 225
    2cc2:	80 81       	ld	r24, Z
    2cc4:	04 c0       	rjmp	.+8      	; 0x2cce <isa_nw_task+0x180>
            }else{
                channelIndex = 0;
    2cc6:	10 92 c9 0b 	sts	0x0BC9, r1
                currentChannel = slottedPattern[channelIndex];
    2cca:	80 91 25 1e 	lds	r24, 0x1E25
    2cce:	80 93 24 1e 	sts	0x1E24, r24
            }
            isa_set_channel(currentChannel);
    2cd2:	80 91 24 1e 	lds	r24, 0x1E24
    2cd6:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <isa_set_channel>
    2cda:	ee 24       	eor	r14, r14
    2cdc:	ff 24       	eor	r15, r15
            }else if (isa_node_mode == ISA_GATEWAY){
                _isa_sync_ok = 1;
            }
        }

        if(slot_expired >= EXPIRATION && isa_node_mode != ISA_GATEWAY){
    2cde:	50 cf       	rjmp	.-352    	; 0x2b80 <isa_nw_task+0x32>


        }else{
        	//printf("Channel%d ,channelINdex %d\r\n",currentChannel,channelIndex);
            //printf("global_slot is %d. global cycle is %d.\n\r",global_slot,global_cycle);
            next_slot_offset = isa_get_slots_until_next_wakeup (global_slot);
    2ce0:	80 91 d5 1d 	lds	r24, 0x1DD5
    2ce4:	90 91 d6 1d 	lds	r25, 0x1DD6
    2ce8:	0e 94 1a 07 	call	0xe34	; 0xe34 <isa_get_slots_until_next_wakeup>
    2cec:	7c 01       	movw	r14, r24
          //  printf("NOS:%d\n\r",next_slot_offset);
            //printf("%d,%d,%d,%d\n\r",_nrk_os_timer_get (),_nrk_get_next_wakeup (),global_slot,next_slot_offset);
            global_slot += next_slot_offset;
    2cee:	80 91 d5 1d 	lds	r24, 0x1DD5
    2cf2:	90 91 d6 1d 	lds	r25, 0x1DD6
    2cf6:	8e 0d       	add	r24, r14
    2cf8:	9f 1d       	adc	r25, r15
    2cfa:	90 93 d6 1d 	sts	0x1DD6, r25
    2cfe:	80 93 d5 1d 	sts	0x1DD5, r24
            //nrk_clr_led (1);
            #ifdef LED_SLOT_DEBUG
            nrk_led_clr(0);
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <nrk_led_clr>
            #endif

            offsetY = 0;
    2d0a:	10 92 cd 1d 	sts	0x1DCD, r1
    2d0e:	10 92 cc 1d 	sts	0x1DCC, r1
                    }
                    printf ("AdvSent\r\n");
                    updateLastSentTime();
            }
            }*/
            nrk_wait_until_next_n_periods (next_slot_offset);
    2d12:	c7 01       	movw	r24, r14
    2d14:	0e 94 48 3a 	call	0x7490	; 0x7490 <nrk_wait_until_next_n_periods>
           // nrk_gpio_clr(NRK_DEBUG_2);
            #ifdef LED_SLOT_DEBUG
            nrk_led_set(0);
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <nrk_led_set>
    2d20:	2f cf       	rjmp	.-418    	; 0x2b80 <isa_nw_task+0x32>

00002d22 <isa_init>:
 * This should be called before ANY scheduling information is set
 * since it will clear some default values.
 *
 */
uint8_t isa_init (isa_node_mode_t mode, uint8_t id, uint8_t src_id)
{
    2d22:	ff 92       	push	r15
    2d24:	0f 93       	push	r16
    2d26:	1f 93       	push	r17
    2d28:	f8 2e       	mov	r15, r24
    2d2a:	06 2f       	mov	r16, r22
    2d2c:	14 2f       	mov	r17, r20
    uint8_t i;

    /* Generate signals */
    isa_rx_pkt_signal=nrk_signal_create();
    2d2e:	0e 94 6a 34 	call	0x68d4	; 0x68d4 <nrk_signal_create>
    2d32:	80 93 c8 1d 	sts	0x1DC8, r24
    if(isa_rx_pkt_signal==NRK_ERROR){
    2d36:	8f 3f       	cpi	r24, 0xFF	; 255
    2d38:	19 f4       	brne	.+6      	; 0x2d40 <isa_init+0x1e>
        nrk_kprintf(PSTR("ISA ERROR: creating rx signal failed\r\n"));
    2d3a:	84 e2       	ldi	r24, 0x24	; 36
    2d3c:	92 e0       	ldi	r25, 0x02	; 2
    2d3e:	08 c0       	rjmp	.+16     	; 0x2d50 <isa_init+0x2e>
        nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
        return NRK_ERROR;
    }
    isa_tx_done_signal=nrk_signal_create();
    2d40:	0e 94 6a 34 	call	0x68d4	; 0x68d4 <nrk_signal_create>
    2d44:	80 93 d4 1d 	sts	0x1DD4, r24
    if(isa_tx_done_signal==NRK_ERROR){
    2d48:	8f 3f       	cpi	r24, 0xFF	; 255
    2d4a:	71 f4       	brne	.+28     	; 0x2d68 <isa_init+0x46>
        nrk_kprintf(PSTR("ISA ERROR: creating tx signal failed\r\n"));
    2d4c:	8d ef       	ldi	r24, 0xFD	; 253
    2d4e:	91 e0       	ldi	r25, 0x01	; 1
    2d50:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
        nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
    2d54:	e0 91 17 20 	lds	r30, 0x2017
    2d58:	f0 91 18 20 	lds	r31, 0x2018
    2d5c:	8e e0       	ldi	r24, 0x0E	; 14
    2d5e:	60 85       	ldd	r22, Z+8	; 0x08
    2d60:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>
    2d64:	8f ef       	ldi	r24, 0xFF	; 255
        return NRK_ERROR;
    2d66:	6d c0       	rjmp	.+218    	; 0x2e42 <isa_init+0x120>
    }

    // No buffer to start with
    isa_rfRxInfo.pPayload = NULL;
    2d68:	10 92 17 0c 	sts	0x0C17, r1
    2d6c:	10 92 16 0c 	sts	0x0C16, r1
    isa_rfRxInfo.max_length = 0;
    2d70:	10 92 15 0c 	sts	0x0C15, r1

    /*FIXME Actually we dont need to always run the high speed timer */
    _nrk_high_speed_timer_start();
    2d74:	0e 94 34 41 	call	0x8268	; 0x8268 <_nrk_high_speed_timer_start>

    /* clear everything out */
    global_cycle = 0;
    2d78:	10 92 cb 1d 	sts	0x1DCB, r1
    2d7c:	10 92 ca 1d 	sts	0x1DCA, r1
    global_slot = MAX_ISA_GLOBAL_SLOTS;
    2d80:	84 e6       	ldi	r24, 0x64	; 100
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	90 93 d6 1d 	sts	0x1DD6, r25
    2d88:	80 93 d5 1d 	sts	0x1DD5, r24
    _isa_sync_ok = 0;
    2d8c:	10 92 01 1e 	sts	0x1E01, r1
    _isa_join_ok = 0;
    2d90:	10 92 44 0d 	sts	0x0D44, r1
    slot_expired = 0;
    2d94:	10 92 ab 1e 	sts	0x1EAB, r1
    2d98:	10 92 aa 1e 	sts	0x1EAA, r1
    isa_node_mode = mode;
    2d9c:	f0 92 5d 0d 	sts	0x0D5D, r15
    isa_id = id;//change
    2da0:	00 93 0f 0c 	sts	0x0C0F, r16
    dmo.dlAddress = id;
    2da4:	00 93 65 0f 	sts	0x0F65, r16
    2da8:	10 92 66 0f 	sts	0x0F66, r1
    isa_clk_src_id=src_id; //change
    2dac:	10 93 fe 0c 	sts	0x0CFE, r17
    isa_rx_data_ready = 0;
    2db0:	10 92 d4 0e 	sts	0x0ED4, r1
    2db4:	10 92 d5 0e 	sts	0x0ED5, r1
    2db8:	10 92 d6 0e 	sts	0x0ED6, r1
    2dbc:	10 92 d7 0e 	sts	0x0ED7, r1

    isa_param.mobile_sync_timeout = 100;
    2dc0:	84 e6       	ldi	r24, 0x64	; 100
    2dc2:	80 93 2a 0c 	sts	0x0C2A, r24
    isa_param.rx_timeout = 8000;   // 8000 *.125us = 1ms
    2dc6:	80 e4       	ldi	r24, 0x40	; 64
    2dc8:	9f e1       	ldi	r25, 0x1F	; 31
    2dca:	90 93 29 0c 	sts	0x0C29, r25
    2dce:	80 93 28 0c 	sts	0x0C28, r24
    isa_param.tx_guard_time = TX_GUARD_TIME;
    2dd2:	80 ea       	ldi	r24, 0xA0	; 160
    2dd4:	9f e0       	ldi	r25, 0x0F	; 15
    2dd6:	90 93 27 0c 	sts	0x0C27, r25
    2dda:	80 93 26 0c 	sts	0x0C26, r24
    isa_param.channel = 15;
    2dde:	8f e0       	ldi	r24, 0x0F	; 15
    2de0:	80 93 24 0c 	sts	0x0C24, r24
    isa_param.mac_addr = 0x1981;
    2de4:	81 e8       	ldi	r24, 0x81	; 129
    2de6:	99 e1       	ldi	r25, 0x19	; 25
    2de8:	90 93 23 0c 	sts	0x0C23, r25
    2dec:	80 93 22 0c 	sts	0x0C22, r24
    }
    isa_tdma_rx_mask = 0;
    isa_tdma_tx_mask = 0;
*/
    /* Setup the cc2420 chip */
    rf_init (&isa_rfRxInfo, isa_param.channel, 0x2421, isa_param.mac_addr);
    2df0:	81 e1       	ldi	r24, 0x11	; 17
    2df2:	9c e0       	ldi	r25, 0x0C	; 12
    2df4:	6f e0       	ldi	r22, 0x0F	; 15
    2df6:	41 e2       	ldi	r20, 0x21	; 33
    2df8:	54 e2       	ldi	r21, 0x24	; 36
    2dfa:	21 e8       	ldi	r18, 0x81	; 129
    2dfc:	39 e1       	ldi	r19, 0x19	; 25
    2dfe:	0e 94 75 2a 	call	0x54ea	; 0x54ea <rf_init>

    AFTER_FIRST_SYNC = 1;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	80 93 d0 1d 	sts	0x1DD0, r24

    /* Setup fisrt hopping channel */
    #ifdef CHANNEL_HOPPING
        slowIndex=0;
    2e08:	10 92 fa 1d 	sts	0x1DFA, r1
        if(id!=1){
    2e0c:	01 30       	cpi	r16, 0x01	; 1
    2e0e:	41 f0       	breq	.+16     	; 0x2e20 <isa_init+0xfe>
            channelIndex = src_id;
    2e10:	10 93 c9 0b 	sts	0x0BC9, r17
            currentChannel = slottedPattern[channelIndex];
    2e14:	e1 2f       	mov	r30, r17
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	eb 5d       	subi	r30, 0xDB	; 219
    2e1a:	f1 4e       	sbci	r31, 0xE1	; 225
    2e1c:	80 81       	ld	r24, Z
    2e1e:	04 c0       	rjmp	.+8      	; 0x2e28 <isa_init+0x106>
        }else{
            channelIndex = 0;
    2e20:	10 92 c9 0b 	sts	0x0BC9, r1
            currentChannel = slottedPattern[channelIndex];
    2e24:	80 91 25 1e 	lds	r24, 0x1E25
    2e28:	80 93 24 1e 	sts	0x1E24, r24
        }
        isa_set_channel(currentChannel);
    2e2c:	80 91 24 1e 	lds	r24, 0x1E24
    2e30:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <isa_set_channel>
                    isa_tx_data_ready |= ((uint32_t) 1 << i);        // set the flag
           }
        }
    #endif

    resync_times=0;
    2e34:	10 92 fd 0c 	sts	0x0CFD, r1
    2e38:	10 92 fc 0c 	sts	0x0CFC, r1

    dlmoInit();        //Initialize the  dlmo data structure
    2e3c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <dlmoInit>
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    return NRK_OK;
}
    2e42:	1f 91       	pop	r17
    2e44:	0f 91       	pop	r16
    2e46:	ff 90       	pop	r15
    2e48:	08 95       	ret

00002e4a <init_adc>:


void init_adc()
{
// Initialize values here
  ADC_INIT ();
    2e4a:	aa e7       	ldi	r26, 0x7A	; 122
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	83 e0       	ldi	r24, 0x03	; 3
    2e50:	8c 93       	st	X, r24
    2e52:	ec e7       	ldi	r30, 0x7C	; 124
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 e4       	ldi	r24, 0x40	; 64
    2e58:	80 83       	st	Z, r24
  ADC_ENABLE ();
    2e5a:	8c 91       	ld	r24, X
    2e5c:	80 68       	ori	r24, 0x80	; 128
    2e5e:	8c 93       	st	X, r24
  channel=0;
    2e60:	10 92 ad 1e 	sts	0x1EAD, r1
  ADC_SET_CHANNEL (0);
    2e64:	80 81       	ld	r24, Z
    2e66:	80 7e       	andi	r24, 0xE0	; 224
    2e68:	80 83       	st	Z, r24
    2e6a:	90 81       	ld	r25, Z
    2e6c:	80 81       	ld	r24, Z
    2e6e:	80 7e       	andi	r24, 0xE0	; 224
    2e70:	89 2b       	or	r24, r25
    2e72:	80 83       	st	Z, r24
}
    2e74:	08 95       	ret

00002e76 <delay>:
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
    2e76:	88 ec       	ldi	r24, 0xC8	; 200
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>
}
    2e7e:	08 95       	ret

00002e80 <get_adc_val>:
}

uint16_t get_adc_val()
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
    2e80:	80 91 7a 00 	lds	r24, 0x007A
    2e84:	80 64       	ori	r24, 0x40	; 64
    2e86:	80 93 7a 00 	sts	0x007A, r24
    2e8a:	80 91 7a 00 	lds	r24, 0x007A
    2e8e:	84 ff       	sbrs	r24, 4
    2e90:	fc cf       	rjmp	.-8      	; 0x2e8a <get_adc_val+0xa>
	delay();
    2e92:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <delay>
	ADC_GET_SAMPLE_10(adc_val);
    2e96:	20 91 78 00 	lds	r18, 0x0078
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	40 91 79 00 	lds	r20, 0x0079
    2ea0:	94 2f       	mov	r25, r20
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	28 2b       	or	r18, r24
    2ea6:	39 2b       	or	r19, r25
	return adc_val;
}
    2ea8:	c9 01       	movw	r24, r18
    2eaa:	08 95       	ret

00002eac <read_voltage_status>:
// the cc2420 chip to search for the voltage.
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
{
    2eac:	bf 92       	push	r11
    2eae:	cf 92       	push	r12
    2eb0:	df 92       	push	r13
    2eb2:	ef 92       	push	r14
    2eb4:	ff 92       	push	r15
    2eb6:	0f 93       	push	r16
    2eb8:	1f 93       	push	r17
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	00 d0       	rcall	.+0      	; 0x2ec0 <read_voltage_status+0x14>
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t val;
uint8_t check,level;
nrk_sem_t *radio_sem;

radio_sem= rf_get_sem();
    2ec4:	0e 94 cb 21 	call	0x4396	; 0x4396 <rf_get_sem>
    2ec8:	7c 01       	movw	r14, r24

// if semaphore not created, then assume you own the radio 
if(radio_sem!=NULL)
    2eca:	00 97       	sbiw	r24, 0x00	; 0
    2ecc:	11 f0       	breq	.+4      	; 0x2ed2 <read_voltage_status+0x26>
 nrk_sem_pend (radio_sem);
    2ece:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>

    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    2ed2:	15 9a       	sbi	0x02, 5	; 2
    2ed4:	10 e0       	ldi	r17, 0x00	; 0

level=0;
while(level<0x1F)
{
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
    2ed6:	8b e1       	ldi	r24, 0x1B	; 27
    2ed8:	b8 2e       	mov	r11, r24
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
    2eda:	0b e5       	ldi	r16, 0x5B	; 91
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
{
val=0x0020 | level;
    2edc:	81 2f       	mov	r24, r17
    2ede:	80 62       	ori	r24, 0x20	; 32
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	9a 83       	std	Y+2, r25	; 0x02
    2ee4:	89 83       	std	Y+1, r24	; 0x01
FASTSPI_SETREG(CC2420_BATTMON, val);
    2ee6:	40 98       	cbi	0x08, 0	; 8
    2ee8:	be bc       	out	0x2e, r11	; 46
    2eea:	0d b4       	in	r0, 0x2d	; 45
    2eec:	07 fe       	sbrs	r0, 7
    2eee:	fd cf       	rjmp	.-6      	; 0x2eea <read_voltage_status+0x3e>
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef4:	9e bd       	out	0x2e, r25	; 46
    2ef6:	0d b4       	in	r0, 0x2d	; 45
    2ef8:	07 fe       	sbrs	r0, 7
    2efa:	fd cf       	rjmp	.-6      	; 0x2ef6 <read_voltage_status+0x4a>
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	9a 81       	ldd	r25, Y+2	; 0x02
    2f00:	8e bd       	out	0x2e, r24	; 46
    2f02:	0d b4       	in	r0, 0x2d	; 45
    2f04:	07 fe       	sbrs	r0, 7
    2f06:	fd cf       	rjmp	.-6      	; 0x2f02 <read_voltage_status+0x56>
    2f08:	40 9a       	sbi	0x08, 0	; 8
nrk_spin_wait_us(2);
    2f0a:	82 e0       	ldi	r24, 0x02	; 2
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>
FASTSPI_GETREG(CC2420_BATTMON, val);
    2f12:	40 98       	cbi	0x08, 0	; 8
    2f14:	0e bd       	out	0x2e, r16	; 46
    2f16:	0d b4       	in	r0, 0x2d	; 45
    2f18:	07 fe       	sbrs	r0, 7
    2f1a:	fd cf       	rjmp	.-6      	; 0x2f16 <read_voltage_status+0x6a>
    2f1c:	1e bc       	out	0x2e, r1	; 46
    2f1e:	0d b4       	in	r0, 0x2d	; 45
    2f20:	07 fe       	sbrs	r0, 7
    2f22:	fd cf       	rjmp	.-6      	; 0x2f1e <read_voltage_status+0x72>
    2f24:	8e b5       	in	r24, 0x2e	; 46
    2f26:	d8 2e       	mov	r13, r24
    2f28:	cc 24       	eor	r12, r12
    2f2a:	da 82       	std	Y+2, r13	; 0x02
    2f2c:	c9 82       	std	Y+1, r12	; 0x01
    2f2e:	1e bc       	out	0x2e, r1	; 46
    2f30:	0d b4       	in	r0, 0x2d	; 45
    2f32:	07 fe       	sbrs	r0, 7
    2f34:	fd cf       	rjmp	.-6      	; 0x2f30 <read_voltage_status+0x84>
    2f36:	29 81       	ldd	r18, Y+1	; 0x01
    2f38:	3a 81       	ldd	r19, Y+2	; 0x02
    2f3a:	8e b5       	in	r24, 0x2e	; 46
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	82 2b       	or	r24, r18
    2f40:	93 2b       	or	r25, r19
    2f42:	9a 83       	std	Y+2, r25	; 0x02
    2f44:	89 83       	std	Y+1, r24	; 0x01
    2f46:	40 9a       	sbi	0x08, 0	; 8
if(val&0x0040) break; 
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
    2f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4c:	86 fd       	sbrc	r24, 6
    2f4e:	03 c0       	rjmp	.+6      	; 0x2f56 <read_voltage_status+0xaa>
level++;
    2f50:	1f 5f       	subi	r17, 0xFF	; 255
    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
    2f52:	1f 31       	cpi	r17, 0x1F	; 31
    2f54:	19 f6       	brne	.-122    	; 0x2edc <read_voltage_status+0x30>
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
if(val&0x0040) break; 
level++;
}
if(radio_sem!=NULL)
    2f56:	e1 14       	cp	r14, r1
    2f58:	f1 04       	cpc	r15, r1
    2f5a:	19 f0       	breq	.+6      	; 0x2f62 <read_voltage_status+0xb6>
 nrk_sem_post(radio_sem);
    2f5c:	c7 01       	movw	r24, r14
    2f5e:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
if(level==0)
    2f62:	11 23       	and	r17, r17
    2f64:	c1 f4       	brne	.+48     	; 0x2f96 <read_voltage_status+0xea>
  {
  val=get_adc_val();
    2f66:	0e 94 40 17 	call	0x2e80	; 0x2e80 <get_adc_val>
    2f6a:	9a 83       	std	Y+2, r25	; 0x02
    2f6c:	89 83       	std	Y+1, r24	; 0x01
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	9a 81       	ldd	r25, Y+2	; 0x02
    2f72:	8f 3a       	cpi	r24, 0xAF	; 175
    2f74:	91 05       	cpc	r25, r1
    2f76:	30 f0       	brcs	.+12     	; 0x2f84 <read_voltage_status+0xd8>
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7c:	8e 5a       	subi	r24, 0xAE	; 174
    2f7e:	90 40       	sbci	r25, 0x00	; 0
    2f80:	9a 83       	std	Y+2, r25	; 0x02
    2f82:	89 83       	std	Y+1, r24	; 0x01
  if(val<330) val=330;
    2f84:	89 81       	ldd	r24, Y+1	; 0x01
    2f86:	9a 81       	ldd	r25, Y+2	; 0x02
    2f88:	21 e0       	ldi	r18, 0x01	; 1
    2f8a:	8a 34       	cpi	r24, 0x4A	; 74
    2f8c:	92 07       	cpc	r25, r18
    2f8e:	c0 f4       	brcc	.+48     	; 0x2fc0 <read_voltage_status+0x114>
    2f90:	8a e4       	ldi	r24, 0x4A	; 74
    2f92:	91 e0       	ldi	r25, 0x01	; 1
    2f94:	13 c0       	rjmp	.+38     	; 0x2fbc <read_voltage_status+0x110>
  }
else val=(9000-(level*125)) / 27;
    2f96:	21 2f       	mov	r18, r17
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	83 e8       	ldi	r24, 0x83	; 131
    2f9c:	9f ef       	ldi	r25, 0xFF	; 255
    2f9e:	ac 01       	movw	r20, r24
    2fa0:	24 9f       	mul	r18, r20
    2fa2:	c0 01       	movw	r24, r0
    2fa4:	25 9f       	mul	r18, r21
    2fa6:	90 0d       	add	r25, r0
    2fa8:	34 9f       	mul	r19, r20
    2faa:	90 0d       	add	r25, r0
    2fac:	11 24       	eor	r1, r1
    2fae:	88 5d       	subi	r24, 0xD8	; 216
    2fb0:	9c 4d       	sbci	r25, 0xDC	; 220
    2fb2:	6b e1       	ldi	r22, 0x1B	; 27
    2fb4:	70 e0       	ldi	r23, 0x00	; 0
    2fb6:	0e 94 ed 46 	call	0x8dda	; 0x8dda <__divmodhi4>
    2fba:	cb 01       	movw	r24, r22
    2fbc:	9a 83       	std	Y+2, r25	; 0x02
    2fbe:	89 83       	std	Y+1, r24	; 0x01

return val;
    2fc0:	29 81       	ldd	r18, Y+1	; 0x01
    2fc2:	3a 81       	ldd	r19, Y+2	; 0x02
}
    2fc4:	c9 01       	movw	r24, r18
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	1f 91       	pop	r17
    2fd0:	0f 91       	pop	r16
    2fd2:	ff 90       	pop	r15
    2fd4:	ef 90       	pop	r14
    2fd6:	df 90       	pop	r13
    2fd8:	cf 90       	pop	r12
    2fda:	bf 90       	pop	r11
    2fdc:	08 95       	ret

00002fde <dev_manager_ff_sensors>:
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
    2fde:	cf 92       	push	r12
    2fe0:	df 92       	push	r13
    2fe2:	ef 92       	push	r14
    2fe4:	ff 92       	push	r15
    2fe6:	0f 93       	push	r16
    2fe8:	1f 93       	push	r17
    2fea:	cf 93       	push	r28
    2fec:	df 93       	push	r29
    2fee:	ea 01       	movw	r28, r20
    2ff0:	12 2f       	mov	r17, r18
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

     switch(action)
    2ff2:	82 30       	cpi	r24, 0x02	; 2
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <dev_manager_ff_sensors+0x1a>
    2ff6:	89 c0       	rjmp	.+274    	; 0x310a <dev_manager_ff_sensors+0x12c>
    2ff8:	83 30       	cpi	r24, 0x03	; 3
    2ffa:	30 f4       	brcc	.+12     	; 0x3008 <dev_manager_ff_sensors+0x2a>
    2ffc:	88 23       	and	r24, r24
    2ffe:	71 f0       	breq	.+28     	; 0x301c <dev_manager_ff_sensors+0x3e>
    3000:	81 30       	cpi	r24, 0x01	; 1
    3002:	09 f0       	breq	.+2      	; 0x3006 <dev_manager_ff_sensors+0x28>
    3004:	d6 c0       	rjmp	.+428    	; 0x31b2 <dev_manager_ff_sensors+0x1d4>
    3006:	10 c0       	rjmp	.+32     	; 0x3028 <dev_manager_ff_sensors+0x4a>
    3008:	84 30       	cpi	r24, 0x04	; 4
    300a:	09 f4       	brne	.+2      	; 0x300e <dev_manager_ff_sensors+0x30>
    300c:	88 c0       	rjmp	.+272    	; 0x311e <dev_manager_ff_sensors+0x140>
    300e:	84 30       	cpi	r24, 0x04	; 4
    3010:	08 f4       	brcc	.+2      	; 0x3014 <dev_manager_ff_sensors+0x36>
    3012:	7f c0       	rjmp	.+254    	; 0x3112 <dev_manager_ff_sensors+0x134>
    3014:	85 30       	cpi	r24, 0x05	; 5
    3016:	09 f0       	breq	.+2      	; 0x301a <dev_manager_ff_sensors+0x3c>
    3018:	cc c0       	rjmp	.+408    	; 0x31b2 <dev_manager_ff_sensors+0x1d4>
    301a:	30 c0       	rjmp	.+96     	; 0x307c <dev_manager_ff_sensors+0x9e>
     {
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
    301c:	80 e8       	ldi	r24, 0x80	; 128
    301e:	80 bb       	out	0x10, r24	; 16
			PORTF |= PWR_CTRL_MASK;
    3020:	8f 9a       	sbi	0x11, 7	; 17
	     		init_adc();  
    3022:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <init_adc>
    3026:	72 c0       	rjmp	.+228    	; 0x310c <dev_manager_ff_sensors+0x12e>
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    3028:	90 91 ac 1e 	lds	r25, 0x1EAC
    302c:	91 30       	cpi	r25, 0x01	; 1
    302e:	09 f4       	brne	.+2      	; 0x3032 <dev_manager_ff_sensors+0x54>
    3030:	c6 c0       	rjmp	.+396    	; 0x31be <dev_manager_ff_sensors+0x1e0>
		    is_open=1; 
    3032:	80 93 ac 1e 	sts	0x1EAC, r24
		    if(opt&READ_FLAG)
    3036:	70 e0       	ldi	r23, 0x00	; 0
    3038:	60 ff       	sbrs	r22, 0
    303a:	13 c0       	rjmp	.+38     	; 0x3062 <dev_manager_ff_sensors+0x84>
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
    303c:	8f 98       	cbi	0x11, 7	; 17
  			channel=0;
    303e:	10 92 ad 1e 	sts	0x1EAD, r1
  			ADC_SET_CHANNEL (0);
    3042:	80 91 7c 00 	lds	r24, 0x007C
    3046:	80 7e       	andi	r24, 0xE0	; 224
    3048:	80 93 7c 00 	sts	0x007C, r24
    304c:	90 91 7c 00 	lds	r25, 0x007C
    3050:	80 91 7c 00 	lds	r24, 0x007C
    3054:	80 7e       	andi	r24, 0xE0	; 224
    3056:	89 2b       	or	r24, r25
    3058:	80 93 7c 00 	sts	0x007C, r24
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    305c:	88 ee       	ldi	r24, 0xE8	; 232
    305e:	93 e0       	ldi	r25, 0x03	; 3
    3060:	7f c0       	rjmp	.+254    	; 0x3160 <dev_manager_ff_sensors+0x182>
		    }
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
    3062:	cb 01       	movw	r24, r22
    3064:	86 70       	andi	r24, 0x06	; 6
    3066:	90 70       	andi	r25, 0x00	; 0
    3068:	00 97       	sbiw	r24, 0x00	; 0
    306a:	09 f0       	breq	.+2      	; 0x306e <dev_manager_ff_sensors+0x90>
    306c:	a8 c0       	rjmp	.+336    	; 0x31be <dev_manager_ff_sensors+0x1e0>
		    {
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
    306e:	67 70       	andi	r22, 0x07	; 7
    3070:	70 70       	andi	r23, 0x00	; 0
    3072:	61 15       	cp	r22, r1
    3074:	71 05       	cpc	r23, r1
    3076:	09 f4       	brne	.+2      	; 0x307a <dev_manager_ff_sensors+0x9c>
    3078:	a2 c0       	rjmp	.+324    	; 0x31be <dev_manager_ff_sensors+0x1e0>
    307a:	74 c0       	rjmp	.+232    	; 0x3164 <dev_manager_ff_sensors+0x186>
		
	    

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
    307c:	82 2f       	mov	r24, r18
    307e:	81 50       	subi	r24, 0x01	; 1
    3080:	82 30       	cpi	r24, 0x02	; 2
    3082:	08 f0       	brcs	.+2      	; 0x3086 <dev_manager_ff_sensors+0xa8>
    3084:	9a c0       	rjmp	.+308    	; 0x31ba <dev_manager_ff_sensors+0x1dc>
			if(channel!=BAT && channel<7)
    3086:	80 91 ad 1e 	lds	r24, 0x1EAD
    308a:	98 2f       	mov	r25, r24
    308c:	91 50       	subi	r25, 0x01	; 1
    308e:	96 30       	cpi	r25, 0x06	; 6
    3090:	18 f4       	brcc	.+6      	; 0x3098 <dev_manager_ff_sensors+0xba>
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();
    3092:	0e 94 40 17 	call	0x2e80	; 0x2e80 <get_adc_val>
    3096:	04 c0       	rjmp	.+8      	; 0x30a0 <dev_manager_ff_sensors+0xc2>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}


			} else if(channel==BAT)
    3098:	88 23       	and	r24, r24
    309a:	69 f4       	brne	.+26     	; 0x30b6 <dev_manager_ff_sensors+0xd8>
			{
			uint16_t tmp;
			tmp=read_voltage_status();
    309c:	0e 94 56 17 	call	0x2eac	; 0x2eac <read_voltage_status>
			if(size==2)
    30a0:	12 30       	cpi	r17, 0x02	; 2
    30a2:	19 f4       	brne	.+6      	; 0x30aa <dev_manager_ff_sensors+0xcc>
				{
					buffer[count]=tmp & 0xFF;
    30a4:	88 83       	st	Y, r24
					count++;
					buffer[count]=(tmp>>8) & 0xFF;
    30a6:	99 83       	std	Y+1, r25	; 0x01
    30a8:	26 c0       	rjmp	.+76     	; 0x30f6 <dev_manager_ff_sensors+0x118>
				}
			if(size==1)
				{
					buffer[count]=(tmp>>2) & 0xFF;
    30aa:	96 95       	lsr	r25
    30ac:	87 95       	ror	r24
    30ae:	96 95       	lsr	r25
    30b0:	87 95       	ror	r24
    30b2:	88 83       	st	Y, r24
    30b4:	27 c0       	rjmp	.+78     	; 0x3104 <dev_manager_ff_sensors+0x126>
				}
			}else if(channel==AUDIO_P2P)
    30b6:	87 30       	cpi	r24, 0x07	; 7
    30b8:	29 f5       	brne	.+74     	; 0x3104 <dev_manager_ff_sensors+0x126>
    30ba:	00 e0       	ldi	r16, 0x00	; 0
    30bc:	cc 24       	eor	r12, r12
    30be:	dd 24       	eor	r13, r13
    30c0:	21 e0       	ldi	r18, 0x01	; 1
    30c2:	e2 2e       	mov	r14, r18
    30c4:	24 e0       	ldi	r18, 0x04	; 4
    30c6:	f2 2e       	mov	r15, r18
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
    30c8:	0e 94 40 17 	call	0x2e80	; 0x2e80 <get_adc_val>
    30cc:	8e 15       	cp	r24, r14
    30ce:	9f 05       	cpc	r25, r15
    30d0:	08 f4       	brcc	.+2      	; 0x30d4 <dev_manager_ff_sensors+0xf6>
    30d2:	7c 01       	movw	r14, r24
    30d4:	c8 16       	cp	r12, r24
    30d6:	d9 06       	cpc	r13, r25
    30d8:	08 f4       	brcc	.+2      	; 0x30dc <dev_manager_ff_sensors+0xfe>
    30da:	6c 01       	movw	r12, r24
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
    30dc:	8d e7       	ldi	r24, 0x7D	; 125
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
    30e4:	0f 5f       	subi	r16, 0xFF	; 255
    30e6:	00 34       	cpi	r16, 0x40	; 64
    30e8:	79 f7       	brne	.-34     	; 0x30c8 <dev_manager_ff_sensors+0xea>
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
				}
			 	val=max-min;	
    30ea:	ce 18       	sub	r12, r14
    30ec:	df 08       	sbc	r13, r15
				if(size==2)
    30ee:	12 30       	cpi	r17, 0x02	; 2
    30f0:	21 f4       	brne	.+8      	; 0x30fa <dev_manager_ff_sensors+0x11c>
			      	{
					buffer[count]=val  & 0xFF;
    30f2:	c8 82       	st	Y, r12
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    30f4:	d9 82       	std	Y+1, r13	; 0x01
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	06 c0       	rjmp	.+12     	; 0x3106 <dev_manager_ff_sensors+0x128>
				}

				if(size==1)
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
    30fa:	d6 94       	lsr	r13
    30fc:	c7 94       	ror	r12
    30fe:	d6 94       	lsr	r13
    3100:	c7 94       	ror	r12
    3102:	c8 82       	st	Y, r12
    3104:	80 e0       	ldi	r24, 0x00	; 0
				}

			}
			
		      count++;
    3106:	8f 5f       	subi	r24, 0xFF	; 255
                      return count;
    3108:	5b c0       	rjmp	.+182    	; 0x31c0 <dev_manager_ff_sensors+0x1e2>

             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
    310a:	8f 9a       	sbi	0x11, 7	; 17
		    	is_open=0; 
    310c:	10 92 ac 1e 	sts	0x1EAC, r1
    3110:	29 c0       	rjmp	.+82     	; 0x3164 <dev_manager_ff_sensors+0x186>
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
    3112:	61 30       	cpi	r22, 0x01	; 1
    3114:	09 f0       	breq	.+2      	; 0x3118 <dev_manager_ff_sensors+0x13a>
    3116:	53 c0       	rjmp	.+166    	; 0x31be <dev_manager_ff_sensors+0x1e0>
    3118:	80 91 ad 1e 	lds	r24, 0x1EAD
    311c:	51 c0       	rjmp	.+162    	; 0x31c0 <dev_manager_ff_sensors+0x1e2>
	     		return NRK_ERROR;
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    311e:	61 30       	cpi	r22, 0x01	; 1
    3120:	09 f0       	breq	.+2      	; 0x3124 <dev_manager_ff_sensors+0x146>
    3122:	4d c0       	rjmp	.+154    	; 0x31be <dev_manager_ff_sensors+0x1e0>
			{
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
    3124:	27 30       	cpi	r18, 0x07	; 7
    3126:	01 f5       	brne	.+64     	; 0x3168 <dev_manager_ff_sensors+0x18a>
			  {
				channel=value;
    3128:	20 93 ad 1e 	sts	0x1EAD, r18
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
    312c:	80 91 7c 00 	lds	r24, 0x007C
    3130:	8f 77       	andi	r24, 0x7F	; 127
    3132:	80 93 7c 00 	sts	0x007C, r24
    3136:	80 91 7c 00 	lds	r24, 0x007C
    313a:	80 64       	ori	r24, 0x40	; 64
    313c:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (AUDIO);
    3140:	80 91 7c 00 	lds	r24, 0x007C
    3144:	80 7e       	andi	r24, 0xE0	; 224
    3146:	80 93 7c 00 	sts	0x007C, r24
    314a:	80 91 7c 00 	lds	r24, 0x007C
    314e:	90 91 7c 00 	lds	r25, 0x007C
    3152:	83 60       	ori	r24, 0x03	; 3
    3154:	90 7e       	andi	r25, 0xE0	; 224
    3156:	89 2b       	or	r24, r25
    3158:	80 93 7c 00 	sts	0x007C, r24
				nrk_spin_wait_us(ADC_SETUP_DELAY);
    315c:	88 ec       	ldi	r24, 0xC8	; 200
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>
    3164:	81 e0       	ldi	r24, 0x01	; 1
				return NRK_OK;
    3166:	2c c0       	rjmp	.+88     	; 0x31c0 <dev_manager_ff_sensors+0x1e2>

			  } else
			  {
				if(value>7) 
    3168:	28 30       	cpi	r18, 0x08	; 8
    316a:	20 f0       	brcs	.+8      	; 0x3174 <dev_manager_ff_sensors+0x196>
				{
					_nrk_errno_set(1);
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	0e 94 70 32 	call	0x64e0	; 0x64e0 <_nrk_errno_set>
    3172:	25 c0       	rjmp	.+74     	; 0x31be <dev_manager_ff_sensors+0x1e0>
					return NRK_ERROR;
				}
				channel=value;
    3174:	20 93 ad 1e 	sts	0x1EAD, r18
				if(channel==LIGHT)
    3178:	21 30       	cpi	r18, 0x01	; 1
    317a:	49 f4       	brne	.+18     	; 0x318e <dev_manager_ff_sensors+0x1b0>
				   ADC_VREF_VCC();	
    317c:	80 91 7c 00 	lds	r24, 0x007C
    3180:	8f 77       	andi	r24, 0x7F	; 127
    3182:	80 93 7c 00 	sts	0x007C, r24
    3186:	80 91 7c 00 	lds	r24, 0x007C
    318a:	80 64       	ori	r24, 0x40	; 64
    318c:	03 c0       	rjmp	.+6      	; 0x3194 <dev_manager_ff_sensors+0x1b6>
				else
				   ADC_VREF_2_56();	
    318e:	80 91 7c 00 	lds	r24, 0x007C
    3192:	80 6c       	ori	r24, 0xC0	; 192
    3194:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (channel);
    3198:	80 91 7c 00 	lds	r24, 0x007C
    319c:	80 7e       	andi	r24, 0xE0	; 224
    319e:	80 93 7c 00 	sts	0x007C, r24
    31a2:	90 91 7c 00 	lds	r25, 0x007C
    31a6:	80 91 7c 00 	lds	r24, 0x007C
    31aa:	80 7e       	andi	r24, 0xE0	; 224
    31ac:	89 2b       	or	r24, r25
    31ae:	81 2b       	or	r24, r17
    31b0:	d3 cf       	rjmp	.-90     	; 0x3158 <dev_manager_ff_sensors+0x17a>
				return NRK_OK;
			  }
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
    31b2:	8c e0       	ldi	r24, 0x0C	; 12
    31b4:	60 e0       	ldi	r22, 0x00	; 0
    31b6:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>
    31ba:	80 e0       	ldi	r24, 0x00	; 0
		 return 0;
    31bc:	01 c0       	rjmp	.+2      	; 0x31c0 <dev_manager_ff_sensors+0x1e2>
    31be:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    31c0:	df 91       	pop	r29
    31c2:	cf 91       	pop	r28
    31c4:	1f 91       	pop	r17
    31c6:	0f 91       	pop	r16
    31c8:	ff 90       	pop	r15
    31ca:	ef 90       	pop	r14
    31cc:	df 90       	pop	r13
    31ce:	cf 90       	pop	r12
    31d0:	08 95       	ret

000031d2 <printEnable>:
	}
}

void printEnable(void){

	isPrintEnabled = true;
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	80 93 4e 0b 	sts	0x0B4E, r24
}
    31d8:	08 95       	ret

000031da <printDisable>:

void printDisable(void){
	isPrintEnabled = false;
    31da:	10 92 4e 0b 	sts	0x0B4E, r1
}
    31de:	08 95       	ret

000031e0 <emberCommandReaderInit>:
//----------------------------------------------------------------
// Initialize the state machine.

void emberCommandReaderInit(void)
{
  commandState.state = CMD_AWAITING_ARGUMENT;
    31e0:	10 92 d9 0b 	sts	0x0BD9, r1
  commandState.index = 0;
    31e4:	10 92 07 0c 	sts	0x0C07, r1
  commandState.tokenIndices[0] = 0;
    31e8:	10 92 fa 0b 	sts	0x0BFA, r1
  commandState.tokenCount = 0;
    31ec:	10 92 06 0c 	sts	0x0C06, r1
  commandState.error = EMBER_CMD_SUCCESS;
    31f0:	10 92 08 0c 	sts	0x0C08, r1
  commandState.hexHighNibble = 0xFF;
    31f4:	8f ef       	ldi	r24, 0xFF	; 255
    31f6:	80 93 09 0c 	sts	0x0C09, r24
  commandState.argOffset = 0;
    31fa:	10 92 0a 0c 	sts	0x0C0A, r1
  emberCurrentCommand = NULL;
    31fe:	10 92 af 1e 	sts	0x1EAF, r1
    3202:	10 92 ae 1e 	sts	0x1EAE, r1
}
    3206:	08 95       	ret

00003208 <emberCommandArgumentCount>:

//----------------------------------------------------------------
// Retrieving arguments

uint8_t emberCommandArgumentCount(void)
{
    3208:	80 91 06 0c 	lds	r24, 0x0C06
    320c:	90 91 0a 0c 	lds	r25, 0x0C0A
  return (commandState.tokenCount - commandState.argOffset);
}
    3210:	89 1b       	sub	r24, r25
    3212:	08 95       	ret

00003214 <stringToUnsignedInt>:

static uint32_t stringToUnsignedInt(uint8_t argNum, bool swallowLeadingSign)
{
    3214:	df 92       	push	r13
    3216:	ef 92       	push	r14
    3218:	ff 92       	push	r15
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	e6 2e       	mov	r14, r22
  uint8_t tokenNum = argNum + commandState.argOffset;
  uint8_t *string = commandState.buffer + commandState.tokenIndices[tokenNum];
    3224:	90 91 0a 0c 	lds	r25, 0x0C0A
    3228:	98 0f       	add	r25, r24
    322a:	e9 2f       	mov	r30, r25
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	e7 52       	subi	r30, 0x27	; 39
    3230:	f4 4f       	sbci	r31, 0xF4	; 244
    3232:	81 a1       	ldd	r24, Z+33	; 0x21
                     : 0)));
}

static uint8_t tokenLength(uint8_t num)
{
  return (commandState.tokenIndices[num + 1]
    3234:	f2 a0       	ldd	r15, Z+34	; 0x22
    3236:	f8 1a       	sub	r15, r24
    3238:	c8 2f       	mov	r28, r24
    323a:	d0 e0       	ldi	r29, 0x00	; 0
    323c:	c6 52       	subi	r28, 0x26	; 38
    323e:	d4 4f       	sbci	r29, 0xF4	; 244
    3240:	10 e0       	ldi	r17, 0x00	; 0
    3242:	0a e0       	ldi	r16, 0x0A	; 10
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e0       	ldi	r20, 0x00	; 0
    324a:	50 e0       	ldi	r21, 0x00	; 0
  uint8_t *string = commandState.buffer + commandState.tokenIndices[tokenNum];
  uint8_t length = tokenLength(tokenNum);
  uint32_t result = 0;
  uint8_t base = 10;
  uint8_t i;
  for (i = 0; i < length; i++) {
    324c:	3d c0       	rjmp	.+122    	; 0x32c8 <stringToUnsignedInt+0xb4>
    uint8_t next = string[i];
    324e:	88 81       	ld	r24, Y
    if (swallowLeadingSign && i == 0 && next == '-') {
    3250:	ee 20       	and	r14, r14
    3252:	21 f0       	breq	.+8      	; 0x325c <stringToUnsignedInt+0x48>
    3254:	11 23       	and	r17, r17
    3256:	11 f4       	brne	.+4      	; 0x325c <stringToUnsignedInt+0x48>
    3258:	8d 32       	cpi	r24, 0x2D	; 45
    325a:	a1 f1       	breq	.+104    	; 0x32c4 <stringToUnsignedInt+0xb0>
      // do nothing
    } else if ((next == 'x' || next == 'X')
    325c:	88 37       	cpi	r24, 0x78	; 120
    325e:	11 f0       	breq	.+4      	; 0x3264 <stringToUnsignedInt+0x50>
    3260:	88 35       	cpi	r24, 0x58	; 88
    3262:	49 f4       	brne	.+18     	; 0x3276 <stringToUnsignedInt+0x62>
    3264:	21 15       	cp	r18, r1
    3266:	31 05       	cpc	r19, r1
    3268:	41 05       	cpc	r20, r1
    326a:	51 05       	cpc	r21, r1
    326c:	21 f4       	brne	.+8      	; 0x3276 <stringToUnsignedInt+0x62>
    326e:	91 2f       	mov	r25, r17
    3270:	91 50       	subi	r25, 0x01	; 1
    3272:	92 30       	cpi	r25, 0x02	; 2
    3274:	30 f1       	brcs	.+76     	; 0x32c2 <stringToUnsignedInt+0xae>
}

// Returns a value > 15 if ch is not a hex digit.
static uint8_t hexToInt(uint8_t ch)
{
  return ch - (ch >= 'a' ? 'a' - 10
    3276:	81 36       	cpi	r24, 0x61	; 97
    3278:	10 f0       	brcs	.+4      	; 0x327e <stringToUnsignedInt+0x6a>
    327a:	97 e5       	ldi	r25, 0x57	; 87
    327c:	09 c0       	rjmp	.+18     	; 0x3290 <stringToUnsignedInt+0x7c>
    327e:	81 34       	cpi	r24, 0x41	; 65
    3280:	10 f0       	brcs	.+4      	; 0x3286 <stringToUnsignedInt+0x72>
    3282:	97 e3       	ldi	r25, 0x37	; 55
    3284:	05 c0       	rjmp	.+10     	; 0x3290 <stringToUnsignedInt+0x7c>
    3286:	8a 33       	cpi	r24, 0x3A	; 58
    3288:	10 f0       	brcs	.+4      	; 0x328e <stringToUnsignedInt+0x7a>
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	01 c0       	rjmp	.+2      	; 0x3290 <stringToUnsignedInt+0x7c>
    328e:	90 e3       	ldi	r25, 0x30	; 48
    3290:	d8 2e       	mov	r13, r24
    3292:	d9 1a       	sub	r13, r25
               && result == 0
               && (i == 1 || i == 2)) {
      base = 16;
    } else {
      uint8_t value = hexToInt(next);
      if (value < base) {
    3294:	d0 16       	cp	r13, r16
    3296:	68 f4       	brcc	.+26     	; 0x32b2 <stringToUnsignedInt+0x9e>
        result = result * base + value;
    3298:	60 2f       	mov	r22, r16
    329a:	70 e0       	ldi	r23, 0x00	; 0
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <__mulsi3>
    32a4:	9b 01       	movw	r18, r22
    32a6:	ac 01       	movw	r20, r24
    32a8:	2d 0d       	add	r18, r13
    32aa:	31 1d       	adc	r19, r1
    32ac:	41 1d       	adc	r20, r1
    32ae:	51 1d       	adc	r21, r1
    32b0:	09 c0       	rjmp	.+18     	; 0x32c4 <stringToUnsignedInt+0xb0>
      } else {
        commandState.error = EMBER_CMD_ERR_ARGUMENT_SYNTAX_ERROR;
    32b2:	85 e0       	ldi	r24, 0x05	; 5
    32b4:	80 93 08 0c 	sts	0x0C08, r24
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	40 e0       	ldi	r20, 0x00	; 0
    32be:	50 e0       	ldi	r21, 0x00	; 0
        return 0;
    32c0:	05 c0       	rjmp	.+10     	; 0x32cc <stringToUnsignedInt+0xb8>
    32c2:	00 e1       	ldi	r16, 0x10	; 16
  uint8_t *string = commandState.buffer + commandState.tokenIndices[tokenNum];
  uint8_t length = tokenLength(tokenNum);
  uint32_t result = 0;
  uint8_t base = 10;
  uint8_t i;
  for (i = 0; i < length; i++) {
    32c4:	1f 5f       	subi	r17, 0xFF	; 255
    32c6:	21 96       	adiw	r28, 0x01	; 1
    32c8:	1f 15       	cp	r17, r15
    32ca:	08 f2       	brcs	.-126    	; 0x324e <stringToUnsignedInt+0x3a>
        return 0;
      }
    }
  }
  return result;
}
    32cc:	b9 01       	movw	r22, r18
    32ce:	ca 01       	movw	r24, r20
    32d0:	df 91       	pop	r29
    32d2:	cf 91       	pop	r28
    32d4:	1f 91       	pop	r17
    32d6:	0f 91       	pop	r16
    32d8:	ff 90       	pop	r15
    32da:	ef 90       	pop	r14
    32dc:	df 90       	pop	r13
    32de:	08 95       	ret

000032e0 <emberUnsignedCommandArgument>:

uint32_t emberUnsignedCommandArgument(uint8_t argNum)
{
  return stringToUnsignedInt(argNum, false);
    32e0:	60 e0       	ldi	r22, 0x00	; 0
    32e2:	0e 94 0a 19 	call	0x3214	; 0x3214 <stringToUnsignedInt>
}
    32e6:	08 95       	ret

000032e8 <setEcho>:
	}



void setEcho(void){
	if (emberUnsignedCommandArgument(0) == 0)  emberCommandInterpreterEchoOff();
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    32ee:	9b 01       	movw	r18, r22
    32f0:	ac 01       	movw	r20, r24
    32f2:	80 91 d5 0b 	lds	r24, 0x0BD5
    32f6:	21 15       	cp	r18, r1
    32f8:	31 05       	cpc	r19, r1
    32fa:	41 05       	cpc	r20, r1
    32fc:	51 05       	cpc	r21, r1
    32fe:	11 f4       	brne	.+4      	; 0x3304 <setEcho+0x1c>
    3300:	8e 7f       	andi	r24, 0xFE	; 254
    3302:	01 c0       	rjmp	.+2      	; 0x3306 <setEcho+0x1e>
	else emberCommandInterpreterEchoOn();
    3304:	81 60       	ori	r24, 0x01	; 1
    3306:	80 93 d5 0b 	sts	0x0BD5, r24
    330a:	08 95       	ret

0000330c <emberSignedCommandArgument>:
{
  return stringToUnsignedInt(argNum, false);
}

int16_t emberSignedCommandArgument(uint8_t argNum)
{
    330c:	1f 93       	push	r17
  bool negative = (firstByteOfArg(argNum) == '-');
    330e:	10 e0       	ldi	r17, 0x00	; 0
    3310:	e0 91 0a 0c 	lds	r30, 0x0C0A
    3314:	e8 0f       	add	r30, r24
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	e7 52       	subi	r30, 0x27	; 39
    331a:	f4 4f       	sbci	r31, 0xF4	; 244
    331c:	e1 a1       	ldd	r30, Z+33	; 0x21
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	e7 52       	subi	r30, 0x27	; 39
    3322:	f4 4f       	sbci	r31, 0xF4	; 244
    3324:	91 81       	ldd	r25, Z+1	; 0x01
    3326:	9d 32       	cpi	r25, 0x2D	; 45
    3328:	09 f4       	brne	.+2      	; 0x332c <emberSignedCommandArgument+0x20>
    332a:	11 e0       	ldi	r17, 0x01	; 1
  int16_t result = (int16_t) stringToUnsignedInt(argNum, negative);
    332c:	61 2f       	mov	r22, r17
    332e:	0e 94 0a 19 	call	0x3214	; 0x3214 <stringToUnsignedInt>
  return (negative ? -result : result);
    3332:	11 23       	and	r17, r17
    3334:	19 f0       	breq	.+6      	; 0x333c <emberSignedCommandArgument+0x30>
    3336:	70 95       	com	r23
    3338:	61 95       	neg	r22
    333a:	7f 4f       	sbci	r23, 0xFF	; 255
}
    333c:	cb 01       	movw	r24, r22
    333e:	1f 91       	pop	r17
    3340:	08 95       	ret

00003342 <emberStringCommandArgument>:

uint8_t *emberStringCommandArgument(int8_t argNum, uint8_t *length)
{
  uint8_t tokenNum = argNum + commandState.argOffset;
    3342:	20 91 0a 0c 	lds	r18, 0x0C0A
    3346:	28 0f       	add	r18, r24
  uint8_t leadingQuote = (argNum < 0 ? 0 : 1);
    3348:	80 95       	com	r24
    334a:	88 1f       	adc	r24, r24
    334c:	88 27       	eor	r24, r24
    334e:	88 1f       	adc	r24, r24
  if (length != NULL) {
    3350:	61 15       	cp	r22, r1
    3352:	71 05       	cpc	r23, r1
    3354:	51 f0       	breq	.+20     	; 0x336a <emberStringCommandArgument+0x28>
                     : 0)));
}

static uint8_t tokenLength(uint8_t num)
{
  return (commandState.tokenIndices[num + 1]
    3356:	e2 2f       	mov	r30, r18
    3358:	f0 e0       	ldi	r31, 0x00	; 0
uint8_t *emberStringCommandArgument(int8_t argNum, uint8_t *length)
{
  uint8_t tokenNum = argNum + commandState.argOffset;
  uint8_t leadingQuote = (argNum < 0 ? 0 : 1);
  if (length != NULL) {
    *length = tokenLength(tokenNum) - leadingQuote;
    335a:	e7 52       	subi	r30, 0x27	; 39
    335c:	f4 4f       	sbci	r31, 0xF4	; 244
    335e:	92 a1       	ldd	r25, Z+34	; 0x22
    3360:	31 a1       	ldd	r19, Z+33	; 0x21
    3362:	93 1b       	sub	r25, r19
    3364:	98 1b       	sub	r25, r24
    3366:	fb 01       	movw	r30, r22
    3368:	90 83       	st	Z, r25
    336a:	e2 2f       	mov	r30, r18
    336c:	ff 27       	eor	r31, r31
    336e:	e7 fd       	sbrc	r30, 7
    3370:	f0 95       	com	r31
    3372:	e7 52       	subi	r30, 0x27	; 39
    3374:	f4 4f       	sbci	r31, 0xF4	; 244
    3376:	21 a1       	ldd	r18, Z+33	; 0x21
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	26 52       	subi	r18, 0x26	; 38
    337c:	34 4f       	sbci	r19, 0xF4	; 244
    337e:	28 0f       	add	r18, r24
    3380:	31 1d       	adc	r19, r1
  }
  return tokenPointer(tokenNum) + leadingQuote;
}
    3382:	c9 01       	movw	r24, r18
    3384:	08 95       	ret

00003386 <printCommandUsage>:
    "Bad arg type"
  };


static void printCommandUsage(EmberCommandEntry *entry)
{
    3386:	0f 93       	push	r16
    3388:	1f 93       	push	r17
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	ec 01       	movw	r28, r24
  PGM_P arg = entry->argumentTypes;
    3390:	0c 81       	ldd	r16, Y+4	; 0x04
    3392:	1d 81       	ldd	r17, Y+5	; 0x05
  printf("%s", entry->name);
    3394:	00 d0       	rcall	.+0      	; 0x3396 <printCommandUsage+0x10>
    3396:	00 d0       	rcall	.+0      	; 0x3398 <printCommandUsage+0x12>
    3398:	8b e2       	ldi	r24, 0x2B	; 43
    339a:	96 e0       	ldi	r25, 0x06	; 6
    339c:	ed b7       	in	r30, 0x3d	; 61
    339e:	fe b7       	in	r31, 0x3e	; 62
    33a0:	92 83       	std	Z+2, r25	; 0x02
    33a2:	81 83       	std	Z+1, r24	; 0x01
    33a4:	88 81       	ld	r24, Y
    33a6:	99 81       	ldd	r25, Y+1	; 0x01
    33a8:	94 83       	std	Z+4, r25	; 0x04
    33aa:	83 83       	std	Z+3, r24	; 0x03
    33ac:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>

  if ( entry -> action == NULL ); //printf("...");
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	0f 90       	pop	r0
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	9b 81       	ldd	r25, Y+3	; 0x03
    33bc:	00 97       	sbiw	r24, 0x00	; 0
    33be:	89 f5       	brne	.+98     	; 0x3422 <printCommandUsage+0x9c>
    33c0:	34 c0       	rjmp	.+104    	; 0x342a <printCommandUsage+0xa4>
  else
    while (*arg) {
      uint8_t c = *arg;

      printf(c == 'u' ? " <uint8_t>"
    33c2:	85 37       	cpi	r24, 0x75	; 117
    33c4:	19 f4       	brne	.+6      	; 0x33cc <printCommandUsage+0x46>
    33c6:	8e e2       	ldi	r24, 0x2E	; 46
    33c8:	96 e0       	ldi	r25, 0x06	; 6
    33ca:	20 c0       	rjmp	.+64     	; 0x340c <printCommandUsage+0x86>
    33cc:	86 37       	cpi	r24, 0x76	; 118
    33ce:	19 f4       	brne	.+6      	; 0x33d6 <printCommandUsage+0x50>
    33d0:	89 e3       	ldi	r24, 0x39	; 57
    33d2:	96 e0       	ldi	r25, 0x06	; 6
    33d4:	1b c0       	rjmp	.+54     	; 0x340c <printCommandUsage+0x86>
    33d6:	87 37       	cpi	r24, 0x77	; 119
    33d8:	19 f4       	brne	.+6      	; 0x33e0 <printCommandUsage+0x5a>
    33da:	85 e4       	ldi	r24, 0x45	; 69
    33dc:	96 e0       	ldi	r25, 0x06	; 6
    33de:	16 c0       	rjmp	.+44     	; 0x340c <printCommandUsage+0x86>
    33e0:	83 37       	cpi	r24, 0x73	; 115
    33e2:	19 f4       	brne	.+6      	; 0x33ea <printCommandUsage+0x64>
    33e4:	81 e5       	ldi	r24, 0x51	; 81
    33e6:	96 e0       	ldi	r25, 0x06	; 6
    33e8:	11 c0       	rjmp	.+34     	; 0x340c <printCommandUsage+0x86>
    33ea:	82 36       	cpi	r24, 0x62	; 98
    33ec:	19 f4       	brne	.+6      	; 0x33f4 <printCommandUsage+0x6e>
    33ee:	8b e5       	ldi	r24, 0x5B	; 91
    33f0:	96 e0       	ldi	r25, 0x06	; 6
    33f2:	0c c0       	rjmp	.+24     	; 0x340c <printCommandUsage+0x86>
    33f4:	8e 36       	cpi	r24, 0x6E	; 110
    33f6:	19 f4       	brne	.+6      	; 0x33fe <printCommandUsage+0x78>
    33f8:	85 e6       	ldi	r24, 0x65	; 101
    33fa:	96 e0       	ldi	r25, 0x06	; 6
    33fc:	07 c0       	rjmp	.+14     	; 0x340c <printCommandUsage+0x86>
    33fe:	8a 32       	cpi	r24, 0x2A	; 42
    3400:	19 f0       	breq	.+6      	; 0x3408 <printCommandUsage+0x82>
    3402:	8a e6       	ldi	r24, 0x6A	; 106
    3404:	96 e0       	ldi	r25, 0x06	; 6
    3406:	02 c0       	rjmp	.+4      	; 0x340c <printCommandUsage+0x86>
    3408:	8d e6       	ldi	r24, 0x6D	; 109
    340a:	96 e0       	ldi	r25, 0x06	; 6
    340c:	00 d0       	rcall	.+0      	; 0x340e <printCommandUsage+0x88>
    340e:	ed b7       	in	r30, 0x3d	; 61
    3410:	fe b7       	in	r31, 0x3e	; 62
    3412:	92 83       	std	Z+2, r25	; 0x02
    3414:	81 83       	std	Z+1, r24	; 0x01
    3416:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
                         : c == 'n' ? " ..."
                         : c == '*' ? " *"
                         : " ?");


      arg += 1;
    341a:	0f 5f       	subi	r16, 0xFF	; 255
    341c:	1f 4f       	sbci	r17, 0xFF	; 255
    341e:	0f 90       	pop	r0
    3420:	0f 90       	pop	r0
  PGM_P arg = entry->argumentTypes;
  printf("%s", entry->name);

  if ( entry -> action == NULL ); //printf("...");
  else
    while (*arg) {
    3422:	f8 01       	movw	r30, r16
    3424:	80 81       	ld	r24, Z
    3426:	88 23       	and	r24, r24
    3428:	61 f6       	brne	.-104    	; 0x33c2 <printCommandUsage+0x3c>


      arg += 1;
    }

  if(entry->description) {
    342a:	8e 81       	ldd	r24, Y+6	; 0x06
    342c:	9f 81       	ldd	r25, Y+7	; 0x07
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	81 f0       	breq	.+32     	; 0x3452 <printCommandUsage+0xcc>
    printf(" - %s", entry->description);
    3432:	00 d0       	rcall	.+0      	; 0x3434 <printCommandUsage+0xae>
    3434:	00 d0       	rcall	.+0      	; 0x3436 <printCommandUsage+0xb0>
    3436:	20 e7       	ldi	r18, 0x70	; 112
    3438:	36 e0       	ldi	r19, 0x06	; 6
    343a:	ed b7       	in	r30, 0x3d	; 61
    343c:	fe b7       	in	r31, 0x3e	; 62
    343e:	32 83       	std	Z+2, r19	; 0x02
    3440:	21 83       	std	Z+1, r18	; 0x01
    3442:	94 83       	std	Z+4, r25	; 0x04
    3444:	83 83       	std	Z+3, r24	; 0x03
    3446:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
  }

  printf( "\r\n");
    3452:	86 e7       	ldi	r24, 0x76	; 118
    3454:	96 e0       	ldi	r25, 0x06	; 6
    3456:	0e 94 4d 48 	call	0x909a	; 0x909a <puts>
 // emberSerialWaitSend(APP_SERIAL);
}
    345a:	df 91       	pop	r29
    345c:	cf 91       	pop	r28
    345e:	1f 91       	pop	r17
    3460:	0f 91       	pop	r16
    3462:	08 95       	ret

00003464 <emberPrintCommandUsage>:

void emberPrintCommandUsage(EmberCommandEntry *entry)
{
    3464:	0f 93       	push	r16
    3466:	1f 93       	push	r17
    3468:	cf 93       	push	r28
    346a:	df 93       	push	r29
    346c:	ec 01       	movw	r28, r24
  EmberCommandEntry *commandFinger;
  printCommandUsage(entry);
    346e:	0e 94 c3 19 	call	0x3386	; 0x3386 <printCommandUsage>
// contains the EmberCommandEntry, but that approach has a problem
// on AVR128, therefore it is technically deprecated. If you have
// a choice, put NULL for action and a table under argumentTypes.
static bool getNestedCommand(EmberCommandEntry *entry,
                                EmberCommandEntry **nestedCommand) {
  if ( entry -> action == NULL ) {
    3472:	8a 81       	ldd	r24, Y+2	; 0x02
    3474:	9b 81       	ldd	r25, Y+3	; 0x03
    3476:	0c 80       	ldd	r0, Y+4	; 0x04
    3478:	dd 81       	ldd	r29, Y+5	; 0x05
    347a:	c0 2d       	mov	r28, r0
    347c:	00 97       	sbiw	r24, 0x00	; 0
    347e:	99 f0       	breq	.+38     	; 0x34a6 <emberPrintCommandUsage+0x42>
    *nestedCommand = (EmberCommandEntry*)entry->argumentTypes;
    return TRUE;
  } else if ( entry -> argumentTypes[0] == 'n' ) {
    3480:	28 81       	ld	r18, Y
    3482:	2e 36       	cpi	r18, 0x6E	; 110
    3484:	b1 f4       	brne	.+44     	; 0x34b2 <emberPrintCommandUsage+0x4e>
    *nestedCommand = (EmberCommandEntry*)(void*)entry->action;
    3486:	ec 01       	movw	r28, r24
    3488:	0e c0       	rjmp	.+28     	; 0x34a6 <emberPrintCommandUsage+0x42>
  EmberCommandEntry *commandFinger;
  printCommandUsage(entry);

  if ( getNestedCommand(entry, &commandFinger) ) {
    for (; commandFinger->name != NULL; commandFinger++) {
      printf("  ");
    348a:	00 d0       	rcall	.+0      	; 0x348c <emberPrintCommandUsage+0x28>
    348c:	ed b7       	in	r30, 0x3d	; 61
    348e:	fe b7       	in	r31, 0x3e	; 62
    3490:	12 83       	std	Z+2, r17	; 0x02
    3492:	01 83       	std	Z+1, r16	; 0x01
    3494:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
      printCommandUsage(commandFinger);
    3498:	0f 90       	pop	r0
    349a:	0f 90       	pop	r0
    349c:	ce 01       	movw	r24, r28
    349e:	0e 94 c3 19 	call	0x3386	; 0x3386 <printCommandUsage>
{
  EmberCommandEntry *commandFinger;
  printCommandUsage(entry);

  if ( getNestedCommand(entry, &commandFinger) ) {
    for (; commandFinger->name != NULL; commandFinger++) {
    34a2:	28 96       	adiw	r28, 0x08	; 8
    34a4:	02 c0       	rjmp	.+4      	; 0x34aa <emberPrintCommandUsage+0x46>
      printf("  ");
    34a6:	08 e7       	ldi	r16, 0x78	; 120
    34a8:	16 e0       	ldi	r17, 0x06	; 6
{
  EmberCommandEntry *commandFinger;
  printCommandUsage(entry);

  if ( getNestedCommand(entry, &commandFinger) ) {
    for (; commandFinger->name != NULL; commandFinger++) {
    34aa:	88 81       	ld	r24, Y
    34ac:	99 81       	ldd	r25, Y+1	; 0x01
    34ae:	00 97       	sbiw	r24, 0x00	; 0
    34b0:	61 f7       	brne	.-40     	; 0x348a <emberPrintCommandUsage+0x26>
      printf("  ");
      printCommandUsage(commandFinger);
    }
  }
}
    34b2:	df 91       	pop	r29
    34b4:	cf 91       	pop	r28
    34b6:	1f 91       	pop	r17
    34b8:	0f 91       	pop	r16
    34ba:	08 95       	ret

000034bc <emberPrintCommandUsageNotes>:

void emberPrintCommandUsageNotes(void)
{

	printf( "Usage:\r\n"
    34bc:	8b e7       	ldi	r24, 0x7B	; 123
    34be:	96 e0       	ldi	r25, 0x06	; 6
    34c0:	0e 94 4d 48 	call	0x909a	; 0x909a <puts>
                    "<int>: 123 or 0x1ABC\r\n"
                    "<string>: \"foo\" or {0A 1B 2C}\r\n\r\n");

}
    34c4:	08 95       	ret

000034c6 <emberPrintCommandTable>:

void emberPrintCommandTable(void)
{
    34c6:	cf 93       	push	r28
    34c8:	df 93       	push	r29
  EmberCommandEntry *commandFinger = emberCommandTable;

  emberPrintCommandUsageNotes();
    34ca:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <emberPrintCommandUsageNotes>
    34ce:	cf ea       	ldi	r28, 0xAF	; 175
    34d0:	da e0       	ldi	r29, 0x0A	; 10
  for (; commandFinger->name != NULL; commandFinger++) {
    34d2:	04 c0       	rjmp	.+8      	; 0x34dc <emberPrintCommandTable+0x16>
    printCommandUsage(commandFinger);
    34d4:	ce 01       	movw	r24, r28
    34d6:	0e 94 c3 19 	call	0x3386	; 0x3386 <printCommandUsage>
void emberPrintCommandTable(void)
{
  EmberCommandEntry *commandFinger = emberCommandTable;

  emberPrintCommandUsageNotes();
  for (; commandFinger->name != NULL; commandFinger++) {
    34da:	28 96       	adiw	r28, 0x08	; 8
    34dc:	88 81       	ld	r24, Y
    34de:	99 81       	ldd	r25, Y+1	; 0x01
    34e0:	00 97       	sbiw	r24, 0x00	; 0
    34e2:	c1 f7       	brne	.-16     	; 0x34d4 <emberPrintCommandTable+0xe>
    printCommandUsage(commandFinger);
  }
}
    34e4:	df 91       	pop	r29
    34e6:	cf 91       	pop	r28
    34e8:	08 95       	ret

000034ea <emberCommandErrorHandler>:

void emberCommandErrorHandler(EmberCommandStatus status)
{
    34ea:	cf 92       	push	r12
    34ec:	df 92       	push	r13
    34ee:	ef 92       	push	r14
    34f0:	ff 92       	push	r15
    34f2:	0f 93       	push	r16
    34f4:	1f 93       	push	r17
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
  printf("%s\r\n", emberCommandErrorNames[status]);
    34fa:	00 d0       	rcall	.+0      	; 0x34fc <emberCommandErrorHandler+0x12>
    34fc:	00 d0       	rcall	.+0      	; 0x34fe <emberCommandErrorHandler+0x14>
    34fe:	2a eb       	ldi	r18, 0xBA	; 186
    3500:	36 e0       	ldi	r19, 0x06	; 6
    3502:	ed b7       	in	r30, 0x3d	; 61
    3504:	fe b7       	in	r31, 0x3e	; 62
    3506:	32 83       	std	Z+2, r19	; 0x02
    3508:	21 83       	std	Z+1, r18	; 0x01
    350a:	e8 2f       	mov	r30, r24
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	ee 0f       	add	r30, r30
    3510:	ff 1f       	adc	r31, r31
    3512:	e2 5c       	subi	r30, 0xC2	; 194
    3514:	f4 4f       	sbci	r31, 0xF4	; 244
    3516:	80 81       	ld	r24, Z
    3518:	91 81       	ldd	r25, Z+1	; 0x01
    351a:	ed b7       	in	r30, 0x3d	; 61
    351c:	fe b7       	in	r31, 0x3e	; 62
    351e:	94 83       	std	Z+4, r25	; 0x04
    3520:	83 83       	std	Z+3, r24	; 0x03
    3522:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>

  if (emberCurrentCommand == NULL) {
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	80 91 ae 1e 	lds	r24, 0x1EAE
    3532:	90 91 af 1e 	lds	r25, 0x1EAF
    3536:	00 97       	sbiw	r24, 0x00	; 0
    3538:	41 f4       	brne	.+16     	; 0x354a <emberCommandErrorHandler+0x60>
		if (isPrintEnabled){
    353a:	80 91 4e 0b 	lds	r24, 0x0B4E
    353e:	88 23       	and	r24, r24
    3540:	09 f4       	brne	.+2      	; 0x3544 <emberCommandErrorHandler+0x5a>
    3542:	47 c0       	rjmp	.+142    	; 0x35d2 <emberCommandErrorHandler+0xe8>
	  emberPrintCommandTable();
    3544:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <emberPrintCommandTable>
    3548:	44 c0       	rjmp	.+136    	; 0x35d2 <emberCommandErrorHandler+0xe8>
		}
  } else {
    uint8_t *finger;
    uint8_t tokenNum, i;
    emberPrintCommandUsageNotes();
    354a:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <emberPrintCommandUsageNotes>
    354e:	10 e0       	ldi	r17, 0x00	; 0
    // Reconstruct any parent commands from the buffer.
    for (tokenNum = 0; tokenNum < commandState.argOffset - 1; tokenNum++) {
    3550:	2d c0       	rjmp	.+90     	; 0x35ac <emberCommandErrorHandler+0xc2>
          - commandState.tokenIndices[num]);
}

static uint8_t *tokenPointer(int8_t tokenNum)
{
  return commandState.buffer + commandState.tokenIndices[tokenNum];
    3552:	e1 2f       	mov	r30, r17
    3554:	ff 27       	eor	r31, r31
    3556:	e7 fd       	sbrc	r30, 7
    3558:	f0 95       	com	r31
    355a:	e7 52       	subi	r30, 0x27	; 39
    355c:	f4 4f       	sbci	r31, 0xF4	; 244
    355e:	81 a1       	ldd	r24, Z+33	; 0x21
    3560:	c8 2f       	mov	r28, r24
    3562:	d0 e0       	ldi	r29, 0x00	; 0
    3564:	c6 52       	subi	r28, 0x26	; 38
    3566:	d4 4f       	sbci	r29, 0xF4	; 244
    3568:	00 e0       	ldi	r16, 0x00	; 0
                     : 0)));
}

static uint8_t tokenLength(uint8_t num)
{
  return (commandState.tokenIndices[num + 1]
    356a:	27 52       	subi	r18, 0x27	; 39
    356c:	34 4f       	sbci	r19, 0xF4	; 244
    356e:	92 e2       	ldi	r25, 0x22	; 34
    3570:	c9 2e       	mov	r12, r25
    3572:	d1 2c       	mov	r13, r1
    3574:	c2 0e       	add	r12, r18
    3576:	d3 1e       	adc	r13, r19
          - commandState.tokenIndices[num]);
    3578:	81 e2       	ldi	r24, 0x21	; 33
    357a:	e8 2e       	mov	r14, r24
    357c:	f1 2c       	mov	r15, r1
    357e:	e2 0e       	add	r14, r18
    3580:	f3 1e       	adc	r15, r19
    uint8_t tokenNum, i;
    emberPrintCommandUsageNotes();
    // Reconstruct any parent commands from the buffer.
    for (tokenNum = 0; tokenNum < commandState.argOffset - 1; tokenNum++) {
      finger = tokenPointer(tokenNum);
      for (i = 0; i < tokenLength(tokenNum); i++) {
    3582:	08 c0       	rjmp	.+16     	; 0x3594 <emberCommandErrorHandler+0xaa>
        printf( "%c", finger[i]);
    3584:	fe 01       	movw	r30, r28
    3586:	e0 0f       	add	r30, r16
    3588:	f1 1d       	adc	r31, r1
    358a:	80 81       	ld	r24, Z
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	0e 94 46 48 	call	0x908c	; 0x908c <putchar>
    uint8_t tokenNum, i;
    emberPrintCommandUsageNotes();
    // Reconstruct any parent commands from the buffer.
    for (tokenNum = 0; tokenNum < commandState.argOffset - 1; tokenNum++) {
      finger = tokenPointer(tokenNum);
      for (i = 0; i < tokenLength(tokenNum); i++) {
    3592:	0f 5f       	subi	r16, 0xFF	; 255
}

static uint8_t tokenLength(uint8_t num)
{
  return (commandState.tokenIndices[num + 1]
          - commandState.tokenIndices[num]);
    3594:	f6 01       	movw	r30, r12
    3596:	80 81       	ld	r24, Z
    3598:	f7 01       	movw	r30, r14
    359a:	90 81       	ld	r25, Z
    359c:	89 1b       	sub	r24, r25
    359e:	08 17       	cp	r16, r24
    35a0:	88 f3       	brcs	.-30     	; 0x3584 <emberCommandErrorHandler+0x9a>
    for (tokenNum = 0; tokenNum < commandState.argOffset - 1; tokenNum++) {
      finger = tokenPointer(tokenNum);
      for (i = 0; i < tokenLength(tokenNum); i++) {
        printf( "%c", finger[i]);
      }
      printf(" ");
    35a2:	80 e2       	ldi	r24, 0x20	; 32
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	0e 94 46 48 	call	0x908c	; 0x908c <putchar>
  } else {
    uint8_t *finger;
    uint8_t tokenNum, i;
    emberPrintCommandUsageNotes();
    // Reconstruct any parent commands from the buffer.
    for (tokenNum = 0; tokenNum < commandState.argOffset - 1; tokenNum++) {
    35aa:	1f 5f       	subi	r17, 0xFF	; 255
    35ac:	21 2f       	mov	r18, r17
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	80 91 0a 0c 	lds	r24, 0x0C0A
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	28 17       	cp	r18, r24
    35ba:	39 07       	cpc	r19, r25
    35bc:	54 f2       	brlt	.-108    	; 0x3552 <emberCommandErrorHandler+0x68>
      for (i = 0; i < tokenLength(tokenNum); i++) {
        printf( "%c", finger[i]);
      }
      printf(" ");
    }
    if (isPrintEnabled){
    35be:	80 91 4e 0b 	lds	r24, 0x0B4E
    35c2:	88 23       	and	r24, r24
    35c4:	31 f0       	breq	.+12     	; 0x35d2 <emberCommandErrorHandler+0xe8>
    emberPrintCommandUsage(emberCurrentCommand);
    35c6:	80 91 ae 1e 	lds	r24, 0x1EAE
    35ca:	90 91 af 1e 	lds	r25, 0x1EAF
    35ce:	0e 94 32 1a 	call	0x3464	; 0x3464 <emberPrintCommandUsage>
    }
  }
}
    35d2:	df 91       	pop	r29
    35d4:	cf 91       	pop	r28
    35d6:	1f 91       	pop	r17
    35d8:	0f 91       	pop	r16
    35da:	ff 90       	pop	r15
    35dc:	ef 90       	pop	r14
    35de:	df 90       	pop	r13
    35e0:	cf 90       	pop	r12
    35e2:	08 95       	ret

000035e4 <printLink>:
			}
		}

}

void printLink(void){
    35e4:	ef 92       	push	r14
    35e6:	ff 92       	push	r15
    35e8:	0f 93       	push	r16
    35ea:	1f 93       	push	r17
    35ec:	cf 93       	push	r28
    35ee:	df 93       	push	r29

	if (isPrintEnabled){
    35f0:	80 91 4e 0b 	lds	r24, 0x0B4E
    35f4:	88 23       	and	r24, r24
    35f6:	09 f4       	brne	.+2      	; 0x35fa <printLink+0x16>
    35f8:	52 c0       	rjmp	.+164    	; 0x369e <printLink+0xba>
			printf ("\tLinkID\tSlot Number\tNeighID\tGraphID\t    LinkType\tGraphType\r\n");
    35fa:	8f eb       	ldi	r24, 0xBF	; 191
    35fc:	96 e0       	ldi	r25, 0x06	; 6
    35fe:	0e 94 4d 48 	call	0x909a	; 0x909a <puts>
    3602:	c9 e6       	ldi	r28, 0x69	; 105
    3604:	df e0       	ldi	r29, 0x0F	; 15
    3606:	00 e0       	ldi	r16, 0x00	; 0
    3608:	10 e0       	ldi	r17, 0x00	; 0
		for (uint8_t i = 0; i < DLMO_LINK_MAX_COUNT; i++)
			{
				if (dlmoLink[i].isPresent) {

					printf("\t%d\t%d\t\t%d\t%d\t    %d\t\t%d\r\n",i,dlmoLink[i].chOffset,dlmoLink[i].neighbor->index,dlmoLink[i].graphPtr->index,dlmoLink[i].linkType, SHIFTRIGHT(ISAMASK(dlmoLink[i].typeInfo,GRAPH_TYPE_MASK),GRAPH_TYPE_BIT));
    360a:	4b ef       	ldi	r20, 0xFB	; 251
    360c:	e4 2e       	mov	r14, r20
    360e:	46 e0       	ldi	r20, 0x06	; 6
    3610:	f4 2e       	mov	r15, r20

	if (isPrintEnabled){
			printf ("\tLinkID\tSlot Number\tNeighID\tGraphID\t    LinkType\tGraphType\r\n");
		for (uint8_t i = 0; i < DLMO_LINK_MAX_COUNT; i++)
			{
				if (dlmoLink[i].isPresent) {
    3612:	88 81       	ld	r24, Y
    3614:	88 23       	and	r24, r24
    3616:	e1 f1       	breq	.+120    	; 0x3690 <printLink+0xac>

					printf("\t%d\t%d\t\t%d\t%d\t    %d\t\t%d\r\n",i,dlmoLink[i].chOffset,dlmoLink[i].neighbor->index,dlmoLink[i].graphPtr->index,dlmoLink[i].linkType, SHIFTRIGHT(ISAMASK(dlmoLink[i].typeInfo,GRAPH_TYPE_MASK),GRAPH_TYPE_BIT));
    3618:	8d b7       	in	r24, 0x3d	; 61
    361a:	9e b7       	in	r25, 0x3e	; 62
    361c:	0e 97       	sbiw	r24, 0x0e	; 14
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	f8 94       	cli
    3622:	9e bf       	out	0x3e, r25	; 62
    3624:	0f be       	out	0x3f, r0	; 63
    3626:	8d bf       	out	0x3d, r24	; 61
    3628:	ed b7       	in	r30, 0x3d	; 61
    362a:	fe b7       	in	r31, 0x3e	; 62
    362c:	31 96       	adiw	r30, 0x01	; 1
    362e:	ad b7       	in	r26, 0x3d	; 61
    3630:	be b7       	in	r27, 0x3e	; 62
    3632:	12 96       	adiw	r26, 0x02	; 2
    3634:	fc 92       	st	X, r15
    3636:	ee 92       	st	-X, r14
    3638:	11 97       	sbiw	r26, 0x01	; 1
    363a:	02 83       	std	Z+2, r16	; 0x02
    363c:	13 83       	std	Z+3, r17	; 0x03
    363e:	88 89       	ldd	r24, Y+16	; 0x10
    3640:	84 83       	std	Z+4, r24	; 0x04
    3642:	15 82       	std	Z+5, r1	; 0x05
    3644:	a8 85       	ldd	r26, Y+8	; 0x08
    3646:	b9 85       	ldd	r27, Y+9	; 0x09
    3648:	11 96       	adiw	r26, 0x01	; 1
    364a:	8d 91       	ld	r24, X+
    364c:	9c 91       	ld	r25, X
    364e:	12 97       	sbiw	r26, 0x02	; 2
    3650:	97 83       	std	Z+7, r25	; 0x07
    3652:	86 83       	std	Z+6, r24	; 0x06
    3654:	aa 85       	ldd	r26, Y+10	; 0x0a
    3656:	bb 85       	ldd	r27, Y+11	; 0x0b
    3658:	8d 91       	ld	r24, X+
    365a:	9c 91       	ld	r25, X
    365c:	91 87       	std	Z+9, r25	; 0x09
    365e:	80 87       	std	Z+8, r24	; 0x08
    3660:	8c 81       	ldd	r24, Y+4	; 0x04
    3662:	82 87       	std	Z+10, r24	; 0x0a
    3664:	13 86       	std	Z+11, r1	; 0x0b
    3666:	8f 81       	ldd	r24, Y+7	; 0x07
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	80 73       	andi	r24, 0x30	; 48
    366c:	90 70       	andi	r25, 0x00	; 0
    366e:	34 e0       	ldi	r19, 0x04	; 4
    3670:	95 95       	asr	r25
    3672:	87 95       	ror	r24
    3674:	3a 95       	dec	r19
    3676:	e1 f7       	brne	.-8      	; 0x3670 <printLink+0x8c>
    3678:	95 87       	std	Z+13, r25	; 0x0d
    367a:	84 87       	std	Z+12, r24	; 0x0c
    367c:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    3680:	8d b7       	in	r24, 0x3d	; 61
    3682:	9e b7       	in	r25, 0x3e	; 62
    3684:	0e 96       	adiw	r24, 0x0e	; 14
    3686:	0f b6       	in	r0, 0x3f	; 63
    3688:	f8 94       	cli
    368a:	9e bf       	out	0x3e, r25	; 62
    368c:	0f be       	out	0x3f, r0	; 63
    368e:	8d bf       	out	0x3d, r24	; 61
    3690:	0f 5f       	subi	r16, 0xFF	; 255
    3692:	1f 4f       	sbci	r17, 0xFF	; 255
    3694:	62 96       	adiw	r28, 0x12	; 18

void printLink(void){

	if (isPrintEnabled){
			printf ("\tLinkID\tSlot Number\tNeighID\tGraphID\t    LinkType\tGraphType\r\n");
		for (uint8_t i = 0; i < DLMO_LINK_MAX_COUNT; i++)
    3696:	04 31       	cpi	r16, 0x14	; 20
    3698:	11 05       	cpc	r17, r1
    369a:	09 f0       	breq	.+2      	; 0x369e <printLink+0xba>
    369c:	ba cf       	rjmp	.-140    	; 0x3612 <printLink+0x2e>
					printf("\t%d\t%d\t\t%d\t%d\t    %d\t\t%d\r\n",i,dlmoLink[i].chOffset,dlmoLink[i].neighbor->index,dlmoLink[i].graphPtr->index,dlmoLink[i].linkType, SHIFTRIGHT(ISAMASK(dlmoLink[i].typeInfo,GRAPH_TYPE_MASK),GRAPH_TYPE_BIT));
				}
			}
	}

}
    369e:	df 91       	pop	r29
    36a0:	cf 91       	pop	r28
    36a2:	1f 91       	pop	r17
    36a4:	0f 91       	pop	r16
    36a6:	ff 90       	pop	r15
    36a8:	ef 90       	pop	r14
    36aa:	08 95       	ret

000036ac <printGraph>:
		}
	}

}

void printGraph(void){
    36ac:	0f 93       	push	r16
    36ae:	1f 93       	push	r17
    36b0:	cf 93       	push	r28
    36b2:	df 93       	push	r29

	if (isPrintEnabled){
    36b4:	80 91 4e 0b 	lds	r24, 0x0B4E
    36b8:	88 23       	and	r24, r24
    36ba:	09 f4       	brne	.+2      	; 0x36be <printGraph+0x12>
    36bc:	47 c0       	rjmp	.+142    	; 0x374c <printGraph+0xa0>
			printf ("\tGraphID\t\tNo. of neighbors\tn1\tn2\tn3\r\n");
    36be:	86 e1       	ldi	r24, 0x16	; 22
    36c0:	97 e0       	ldi	r25, 0x07	; 7
    36c2:	0e 94 4d 48 	call	0x909a	; 0x909a <puts>
    36c6:	c9 e5       	ldi	r28, 0x59	; 89
    36c8:	d1 e1       	ldi	r29, 0x11	; 17

				for(int i=0;i<DLMO_GRAPH_MAX_COUNT;i++)
					{
						if(dlmoGraph[i].index){
							printf("\t%d\t\t\t%d\t\t%d\t%d\t%d\r\n",dlmoGraph[i].index, SHIFTRIGHT(ISAMASK(dlmoGraph[i].info, NEIGHBOR_COUNT_MASK),NEIGHBOR_COUNT_LOWER_BIT), dlmoGraph[i].neighbor[0],dlmoGraph[i].neighbor[1], dlmoGraph[i].neighbor[2] );
    36ca:	0b e3       	ldi	r16, 0x3B	; 59
    36cc:	17 e0       	ldi	r17, 0x07	; 7
	if (isPrintEnabled){
			printf ("\tGraphID\t\tNo. of neighbors\tn1\tn2\tn3\r\n");

				for(int i=0;i<DLMO_GRAPH_MAX_COUNT;i++)
					{
						if(dlmoGraph[i].index){
    36ce:	88 81       	ld	r24, Y
    36d0:	99 81       	ldd	r25, Y+1	; 0x01
    36d2:	00 97       	sbiw	r24, 0x00	; 0
    36d4:	b1 f1       	breq	.+108    	; 0x3742 <printGraph+0x96>
							printf("\t%d\t\t\t%d\t\t%d\t%d\t%d\r\n",dlmoGraph[i].index, SHIFTRIGHT(ISAMASK(dlmoGraph[i].info, NEIGHBOR_COUNT_MASK),NEIGHBOR_COUNT_LOWER_BIT), dlmoGraph[i].neighbor[0],dlmoGraph[i].neighbor[1], dlmoGraph[i].neighbor[2] );
    36d6:	2d b7       	in	r18, 0x3d	; 61
    36d8:	3e b7       	in	r19, 0x3e	; 62
    36da:	2c 50       	subi	r18, 0x0C	; 12
    36dc:	30 40       	sbci	r19, 0x00	; 0
    36de:	0f b6       	in	r0, 0x3f	; 63
    36e0:	f8 94       	cli
    36e2:	3e bf       	out	0x3e, r19	; 62
    36e4:	0f be       	out	0x3f, r0	; 63
    36e6:	2d bf       	out	0x3d, r18	; 61
    36e8:	ed b7       	in	r30, 0x3d	; 61
    36ea:	fe b7       	in	r31, 0x3e	; 62
    36ec:	31 96       	adiw	r30, 0x01	; 1
    36ee:	ad b7       	in	r26, 0x3d	; 61
    36f0:	be b7       	in	r27, 0x3e	; 62
    36f2:	12 96       	adiw	r26, 0x02	; 2
    36f4:	1c 93       	st	X, r17
    36f6:	0e 93       	st	-X, r16
    36f8:	11 97       	sbiw	r26, 0x01	; 1
    36fa:	93 83       	std	Z+3, r25	; 0x03
    36fc:	82 83       	std	Z+2, r24	; 0x02
    36fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	80 77       	andi	r24, 0x70	; 112
    3704:	90 70       	andi	r25, 0x00	; 0
    3706:	54 e0       	ldi	r21, 0x04	; 4
    3708:	95 95       	asr	r25
    370a:	87 95       	ror	r24
    370c:	5a 95       	dec	r21
    370e:	e1 f7       	brne	.-8      	; 0x3708 <printGraph+0x5c>
    3710:	95 83       	std	Z+5, r25	; 0x05
    3712:	84 83       	std	Z+4, r24	; 0x04
    3714:	8c 81       	ldd	r24, Y+4	; 0x04
    3716:	9d 81       	ldd	r25, Y+5	; 0x05
    3718:	97 83       	std	Z+7, r25	; 0x07
    371a:	86 83       	std	Z+6, r24	; 0x06
    371c:	8e 81       	ldd	r24, Y+6	; 0x06
    371e:	9f 81       	ldd	r25, Y+7	; 0x07
    3720:	91 87       	std	Z+9, r25	; 0x09
    3722:	80 87       	std	Z+8, r24	; 0x08
    3724:	88 85       	ldd	r24, Y+8	; 0x08
    3726:	99 85       	ldd	r25, Y+9	; 0x09
    3728:	93 87       	std	Z+11, r25	; 0x0b
    372a:	82 87       	std	Z+10, r24	; 0x0a
    372c:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    3730:	2d b7       	in	r18, 0x3d	; 61
    3732:	3e b7       	in	r19, 0x3e	; 62
    3734:	24 5f       	subi	r18, 0xF4	; 244
    3736:	3f 4f       	sbci	r19, 0xFF	; 255
    3738:	0f b6       	in	r0, 0x3f	; 63
    373a:	f8 94       	cli
    373c:	3e bf       	out	0x3e, r19	; 62
    373e:	0f be       	out	0x3f, r0	; 63
    3740:	2d bf       	out	0x3d, r18	; 61
    3742:	2a 96       	adiw	r28, 0x0a	; 10
void printGraph(void){

	if (isPrintEnabled){
			printf ("\tGraphID\t\tNo. of neighbors\tn1\tn2\tn3\r\n");

				for(int i=0;i<DLMO_GRAPH_MAX_COUNT;i++)
    3744:	31 e1       	ldi	r19, 0x11	; 17
    3746:	cd 3b       	cpi	r28, 0xBD	; 189
    3748:	d3 07       	cpc	r29, r19
    374a:	09 f6       	brne	.-126    	; 0x36ce <printGraph+0x22>
							printf("\t%d\t\t\t%d\t\t%d\t%d\t%d\r\n",dlmoGraph[i].index, SHIFTRIGHT(ISAMASK(dlmoGraph[i].info, NEIGHBOR_COUNT_MASK),NEIGHBOR_COUNT_LOWER_BIT), dlmoGraph[i].neighbor[0],dlmoGraph[i].neighbor[1], dlmoGraph[i].neighbor[2] );
						}
			}
		}

}
    374c:	df 91       	pop	r29
    374e:	cf 91       	pop	r28
    3750:	1f 91       	pop	r17
    3752:	0f 91       	pop	r16
    3754:	08 95       	ret

00003756 <printNeighbor>:
void printDisable(void){
	isPrintEnabled = false;
}


void printNeighbor(void){
    3756:	0f 93       	push	r16
    3758:	1f 93       	push	r17
    375a:	cf 93       	push	r28
    375c:	df 93       	push	r29

	if (isPrintEnabled){
    375e:	80 91 4e 0b 	lds	r24, 0x0B4E
    3762:	88 23       	and	r24, r24
    3764:	99 f1       	breq	.+102    	; 0x37cc <printNeighbor+0x76>
		printf ("\tNeighborId\tClock Source\r\n");
    3766:	80 e5       	ldi	r24, 0x50	; 80
    3768:	97 e0       	ldi	r25, 0x07	; 7
    376a:	0e 94 4d 48 	call	0x909a	; 0x909a <puts>
    376e:	ce eb       	ldi	r28, 0xBE	; 190
    3770:	d1 e1       	ldi	r29, 0x11	; 17
		for(int i=0;i<DLMO_NEIGHBOR_MAX_COUNT;i++){
			if (dlmoNeighbor[i].isPresent){
				printf("\t%d\t\t\t%d\r\n",dlmoNeighbor[i].index, (ISAMASK(dlmoNeighbor[i].typeInfo, CLOCK_PREFERRED) == CLOCK_PREFERRED));
    3772:	0a e6       	ldi	r16, 0x6A	; 106
    3774:	17 e0       	ldi	r17, 0x07	; 7
void printNeighbor(void){

	if (isPrintEnabled){
		printf ("\tNeighborId\tClock Source\r\n");
		for(int i=0;i<DLMO_NEIGHBOR_MAX_COUNT;i++){
			if (dlmoNeighbor[i].isPresent){
    3776:	88 81       	ld	r24, Y
    3778:	88 23       	and	r24, r24
    377a:	19 f1       	breq	.+70     	; 0x37c2 <printNeighbor+0x6c>
				printf("\t%d\t\t\t%d\r\n",dlmoNeighbor[i].index, (ISAMASK(dlmoNeighbor[i].typeInfo, CLOCK_PREFERRED) == CLOCK_PREFERRED));
    377c:	00 d0       	rcall	.+0      	; 0x377e <printNeighbor+0x28>
    377e:	00 d0       	rcall	.+0      	; 0x3780 <printNeighbor+0x2a>
    3780:	00 d0       	rcall	.+0      	; 0x3782 <printNeighbor+0x2c>
    3782:	ed b7       	in	r30, 0x3d	; 61
    3784:	fe b7       	in	r31, 0x3e	; 62
    3786:	31 96       	adiw	r30, 0x01	; 1
    3788:	ad b7       	in	r26, 0x3d	; 61
    378a:	be b7       	in	r27, 0x3e	; 62
    378c:	12 96       	adiw	r26, 0x02	; 2
    378e:	1c 93       	st	X, r17
    3790:	0e 93       	st	-X, r16
    3792:	11 97       	sbiw	r26, 0x01	; 1
    3794:	89 81       	ldd	r24, Y+1	; 0x01
    3796:	9a 81       	ldd	r25, Y+2	; 0x02
    3798:	93 83       	std	Z+3, r25	; 0x03
    379a:	82 83       	std	Z+2, r24	; 0x02
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	2d 85       	ldd	r18, Y+13	; 0x0d
    37a2:	27 ff       	sbrs	r18, 7
    37a4:	02 c0       	rjmp	.+4      	; 0x37aa <printNeighbor+0x54>
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	95 83       	std	Z+5, r25	; 0x05
    37ac:	84 83       	std	Z+4, r24	; 0x04
    37ae:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    37b2:	8d b7       	in	r24, 0x3d	; 61
    37b4:	9e b7       	in	r25, 0x3e	; 62
    37b6:	06 96       	adiw	r24, 0x06	; 6
    37b8:	0f b6       	in	r0, 0x3f	; 63
    37ba:	f8 94       	cli
    37bc:	9e bf       	out	0x3e, r25	; 62
    37be:	0f be       	out	0x3f, r0	; 63
    37c0:	8d bf       	out	0x3d, r24	; 61
    37c2:	61 96       	adiw	r28, 0x11	; 17

void printNeighbor(void){

	if (isPrintEnabled){
		printf ("\tNeighborId\tClock Source\r\n");
		for(int i=0;i<DLMO_NEIGHBOR_MAX_COUNT;i++){
    37c4:	92 e1       	ldi	r25, 0x12	; 18
    37c6:	ce 3c       	cpi	r28, 0xCE	; 206
    37c8:	d9 07       	cpc	r29, r25
    37ca:	a9 f6       	brne	.-86     	; 0x3776 <printNeighbor+0x20>
			}

		}
	}

}
    37cc:	df 91       	pop	r29
    37ce:	cf 91       	pop	r28
    37d0:	1f 91       	pop	r17
    37d2:	0f 91       	pop	r16
    37d4:	08 95       	ret

000037d6 <printSendCommandArguments>:

}

void printSendCommandArguments(void){

	if (isPrintEnabled){
    37d6:	80 91 4e 0b 	lds	r24, 0x0B4E
    37da:	88 23       	and	r24, r24
    37dc:	39 f1       	breq	.+78     	; 0x382c <printSendCommandArguments+0x56>
	printf ("\n\n\n\tneighbor -->| message_destId | message_graphId | neighborId \n\r");
    37de:	00 d0       	rcall	.+0      	; 0x37e0 <printSendCommandArguments+0xa>
    37e0:	85 e7       	ldi	r24, 0x75	; 117
    37e2:	97 e0       	ldi	r25, 0x07	; 7
    37e4:	ed b7       	in	r30, 0x3d	; 61
    37e6:	fe b7       	in	r31, 0x3e	; 62
    37e8:	92 83       	std	Z+2, r25	; 0x02
    37ea:	81 83       	std	Z+1, r24	; 0x01
    37ec:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
	printf ("\tgraph\t -->| message_destId | message_graphId | graphID |");
    37f0:	88 eb       	ldi	r24, 0xB8	; 184
    37f2:	97 e0       	ldi	r25, 0x07	; 7
    37f4:	ed b7       	in	r30, 0x3d	; 61
    37f6:	fe b7       	in	r31, 0x3e	; 62
    37f8:	92 83       	std	Z+2, r25	; 0x02
    37fa:	81 83       	std	Z+1, r24	; 0x01
    37fc:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
	printf ("neighCount | n1 | n2 | n3\n\r");
    3800:	82 ef       	ldi	r24, 0xF2	; 242
    3802:	97 e0       	ldi	r25, 0x07	; 7
    3804:	ed b7       	in	r30, 0x3d	; 61
    3806:	fe b7       	in	r31, 0x3e	; 62
    3808:	92 83       	std	Z+2, r25	; 0x02
    380a:	81 83       	std	Z+1, r24	; 0x01
    380c:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
	printf ("\tlink\t -->| message_destId | message_graphId | slotNo");
    3810:	8e e0       	ldi	r24, 0x0E	; 14
    3812:	98 e0       	ldi	r25, 0x08	; 8
    3814:	ed b7       	in	r30, 0x3d	; 61
    3816:	fe b7       	in	r31, 0x3e	; 62
    3818:	92 83       	std	Z+2, r25	; 0x02
    381a:	81 83       	std	Z+1, r24	; 0x01
    381c:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
	printf ("neighbor | graphId | linkType | graphType\n\n\n");
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
    3824:	84 e4       	ldi	r24, 0x44	; 68
    3826:	98 e0       	ldi	r25, 0x08	; 8
    3828:	0e 94 4d 48 	call	0x909a	; 0x909a <puts>
    382c:	08 95       	ret

0000382e <printTempCommand>:
// This byte is used to toggle certain internal features on or off.
// By default all are off.
uint8_t emberCommandInterpreter2Configuration = 0x00;


void printTempCommand(void){
    382e:	1f 93       	push	r17
    3830:	df 93       	push	r29
    3832:	cf 93       	push	r28
    3834:	0f 92       	push	r0
    3836:	cd b7       	in	r28, 0x3d	; 61
    3838:	de b7       	in	r29, 0x3e	; 62
	uint8_t arg1;
	uint8_t arg2;
	arg1 = emberUnsignedCommandArgument(0);
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3840:	16 2f       	mov	r17, r22
	arg2 = emberUnsignedCommandArgument(1);
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
	if (isPrintEnabled){
    3848:	80 91 4e 0b 	lds	r24, 0x0B4E
    384c:	88 23       	and	r24, r24
    384e:	11 f1       	breq	.+68     	; 0x3894 <printTempCommand+0x66>

		printf ("Came to temp command\r\n");
    3850:	80 e7       	ldi	r24, 0x70	; 112
    3852:	98 e0       	ldi	r25, 0x08	; 8
    3854:	69 83       	std	Y+1, r22	; 0x01
    3856:	0e 94 4d 48 	call	0x909a	; 0x909a <puts>
		printf ("Arg1:%d  Arg2:%d\n\r", arg1, arg2);
    385a:	00 d0       	rcall	.+0      	; 0x385c <printTempCommand+0x2e>
    385c:	00 d0       	rcall	.+0      	; 0x385e <printTempCommand+0x30>
    385e:	00 d0       	rcall	.+0      	; 0x3860 <printTempCommand+0x32>
    3860:	ed b7       	in	r30, 0x3d	; 61
    3862:	fe b7       	in	r31, 0x3e	; 62
    3864:	31 96       	adiw	r30, 0x01	; 1
    3866:	86 e8       	ldi	r24, 0x86	; 134
    3868:	98 e0       	ldi	r25, 0x08	; 8
    386a:	ad b7       	in	r26, 0x3d	; 61
    386c:	be b7       	in	r27, 0x3e	; 62
    386e:	12 96       	adiw	r26, 0x02	; 2
    3870:	9c 93       	st	X, r25
    3872:	8e 93       	st	-X, r24
    3874:	11 97       	sbiw	r26, 0x01	; 1
    3876:	12 83       	std	Z+2, r17	; 0x02
    3878:	13 82       	std	Z+3, r1	; 0x03
    387a:	69 81       	ldd	r22, Y+1	; 0x01
    387c:	64 83       	std	Z+4, r22	; 0x04
    387e:	15 82       	std	Z+5, r1	; 0x05
    3880:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    3884:	ed b7       	in	r30, 0x3d	; 61
    3886:	fe b7       	in	r31, 0x3e	; 62
    3888:	36 96       	adiw	r30, 0x06	; 6
    388a:	0f b6       	in	r0, 0x3f	; 63
    388c:	f8 94       	cli
    388e:	fe bf       	out	0x3e, r31	; 62
    3890:	0f be       	out	0x3f, r0	; 63
    3892:	ed bf       	out	0x3d, r30	; 61
	}

}
    3894:	0f 90       	pop	r0
    3896:	cf 91       	pop	r28
    3898:	df 91       	pop	r29
    389a:	1f 91       	pop	r17
    389c:	08 95       	ret

0000389e <emberCopyStringArgument>:

uint8_t emberCopyStringArgument(int8_t argNum,
                              uint8_t *destination,
                              uint8_t maxLength,
                              bool leftPad)
{
    389e:	cf 92       	push	r12
    38a0:	df 92       	push	r13
    38a2:	ef 92       	push	r14
    38a4:	ff 92       	push	r15
    38a6:	0f 93       	push	r16
    38a8:	1f 93       	push	r17
    38aa:	df 93       	push	r29
    38ac:	cf 93       	push	r28
    38ae:	00 d0       	rcall	.+0      	; 0x38b0 <emberCopyStringArgument+0x12>
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
    38b4:	8b 01       	movw	r16, r22
    38b6:	e4 2e       	mov	r14, r20
  uint8_t padLength;
  uint8_t argLength;
  uint8_t *contents = emberStringCommandArgument(argNum, &argLength);
    38b8:	be 01       	movw	r22, r28
    38ba:	6f 5f       	subi	r22, 0xFF	; 255
    38bc:	7f 4f       	sbci	r23, 0xFF	; 255
    38be:	2a 83       	std	Y+2, r18	; 0x02
    38c0:	0e 94 a1 19 	call	0x3342	; 0x3342 <emberStringCommandArgument>
    38c4:	6c 01       	movw	r12, r24
  if (argLength > maxLength) {
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	2a 81       	ldd	r18, Y+2	; 0x02
    38ca:	e8 16       	cp	r14, r24
    38cc:	08 f4       	brcc	.+2      	; 0x38d0 <emberCopyStringArgument+0x32>
    argLength = maxLength;
    38ce:	e9 82       	std	Y+1, r14	; 0x01
  }
  padLength = leftPad ? maxLength - argLength : 0;
    38d0:	22 23       	and	r18, r18
    38d2:	11 f4       	brne	.+4      	; 0x38d8 <emberCopyStringArgument+0x3a>
    38d4:	ee 24       	eor	r14, r14
    38d6:	02 c0       	rjmp	.+4      	; 0x38dc <emberCopyStringArgument+0x3e>
    38d8:	89 81       	ldd	r24, Y+1	; 0x01
    38da:	e8 1a       	sub	r14, r24
  memset(destination, 0, padLength);
    38dc:	ff 24       	eor	r15, r15
    38de:	c8 01       	movw	r24, r16
    38e0:	60 e0       	ldi	r22, 0x00	; 0
    38e2:	70 e0       	ldi	r23, 0x00	; 0
    38e4:	4e 2d       	mov	r20, r14
    38e6:	50 e0       	ldi	r21, 0x00	; 0
    38e8:	0e 94 6d 47 	call	0x8eda	; 0x8eda <memset>
  memcpy(destination + padLength, contents, argLength);
    38ec:	0e 0d       	add	r16, r14
    38ee:	1f 1d       	adc	r17, r15
    38f0:	49 81       	ldd	r20, Y+1	; 0x01
    38f2:	c8 01       	movw	r24, r16
    38f4:	b6 01       	movw	r22, r12
    38f6:	50 e0       	ldi	r21, 0x00	; 0
    38f8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <memcpy>
  return argLength;
}
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	0f 90       	pop	r0
    3900:	0f 90       	pop	r0
    3902:	cf 91       	pop	r28
    3904:	df 91       	pop	r29
    3906:	1f 91       	pop	r17
    3908:	0f 91       	pop	r16
    390a:	ff 90       	pop	r15
    390c:	ef 90       	pop	r14
    390e:	df 90       	pop	r13
    3910:	cf 90       	pop	r12
    3912:	08 95       	ret

00003914 <emberSerialWriteData>:
  }
  return (multipleMatches || false ? NULL : inexactMatch);
}

EmberStatus emberSerialWriteData(uint8_t *data, uint8_t length)
{
    3914:	1f 93       	push	r17
    3916:	cf 93       	push	r28
    3918:	df 93       	push	r29
    391a:	ec 01       	movw	r28, r24
    391c:	16 2f       	mov	r17, r22

	while(length--) {
    391e:	09 c0       	rjmp	.+18     	; 0x3932 <emberSerialWriteData+0x1e>
    putchar(*data);
    3920:	60 91 48 20 	lds	r22, 0x2048
    3924:	70 91 49 20 	lds	r23, 0x2049
    3928:	89 91       	ld	r24, Y+
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
    data++;
    3930:	11 50       	subi	r17, 0x01	; 1
}

EmberStatus emberSerialWriteData(uint8_t *data, uint8_t length)
{

	while(length--) {
    3932:	11 23       	and	r17, r17
    3934:	a9 f7       	brne	.-22     	; 0x3920 <emberSerialWriteData+0xc>
    putchar(*data);
    data++;
  }

  return EMBER_SUCCESS;
}
    3936:	80 e0       	ldi	r24, 0x00	; 0
    3938:	df 91       	pop	r29
    393a:	cf 91       	pop	r28
    393c:	1f 91       	pop	r17
    393e:	08 95       	ret

00003940 <callCommandAction>:
  }
  printf("\r\n");
}

static void callCommandAction(void)
{
    3940:	5f 92       	push	r5
    3942:	6f 92       	push	r6
    3944:	7f 92       	push	r7
    3946:	8f 92       	push	r8
    3948:	9f 92       	push	r9
    394a:	af 92       	push	r10
    394c:	bf 92       	push	r11
    394e:	cf 92       	push	r12
    3950:	df 92       	push	r13
    3952:	ef 92       	push	r14
    3954:	ff 92       	push	r15
    3956:	0f 93       	push	r16
    3958:	1f 93       	push	r17
    395a:	cf 93       	push	r28
    395c:	df 93       	push	r29
  EmberCommandEntry *commandFinger = emberCommandTable;
  uint8_t tokenNum = 0;
  // We need a separate argTypeNum index because of the '*' arg type.
  uint8_t argTypeNum, argNum;

  if (commandState.tokenCount == 0) {
    395e:	80 91 06 0c 	lds	r24, 0x0C06
    3962:	88 23       	and	r24, r24
    3964:	09 f4       	brne	.+2      	; 0x3968 <callCommandAction+0x28>
    3966:	2a c1       	rjmp	.+596    	; 0x3bbc <callCommandAction+0x27c>
    goto kickout2;
  }

  // If we have echo, we echo here.
  if ( emberCommandInterpreterIsEchoOn() ) {
    3968:	80 91 d5 0b 	lds	r24, 0x0BD5
    396c:	80 ff       	sbrs	r24, 0
    396e:	27 c0       	rjmp	.+78     	; 0x39be <callCommandAction+0x7e>
	  if (isPrintEnabled){
    3970:	80 91 4e 0b 	lds	r24, 0x0B4E
    3974:	88 23       	and	r24, r24
    3976:	19 f1       	breq	.+70     	; 0x39be <callCommandAction+0x7e>
    3978:	10 e0       	ldi	r17, 0x00	; 0
    397a:	19 c0       	rjmp	.+50     	; 0x39ae <callCommandAction+0x6e>
                     : 0)));
}

static uint8_t tokenLength(uint8_t num)
{
  return (commandState.tokenIndices[num + 1]
    397c:	e1 2f       	mov	r30, r17
    397e:	f0 e0       	ldi	r31, 0x00	; 0

  uint8_t tokenNum = 0;
  for ( ; tokenNum < commandState.tokenCount; tokenNum++ ) {
    uint8_t *ptr = tokenPointer(tokenNum);
    uint8_t len = tokenLength(tokenNum);
    emberSerialWriteData(ptr, len);
    3980:	a1 2f       	mov	r26, r17
    3982:	bb 27       	eor	r27, r27
    3984:	a7 fd       	sbrc	r26, 7
    3986:	b0 95       	com	r27
    3988:	a7 52       	subi	r26, 0x27	; 39
    398a:	b4 4f       	sbci	r27, 0xF4	; 244
    398c:	91 96       	adiw	r26, 0x21	; 33
    398e:	8c 91       	ld	r24, X
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	e7 52       	subi	r30, 0x27	; 39
    3994:	f4 4f       	sbci	r31, 0xF4	; 244
    3996:	62 a1       	ldd	r22, Z+34	; 0x22
    3998:	21 a1       	ldd	r18, Z+33	; 0x21
    399a:	62 1b       	sub	r22, r18
    399c:	86 52       	subi	r24, 0x26	; 38
    399e:	94 4f       	sbci	r25, 0xF4	; 244
    39a0:	0e 94 8a 1c 	call	0x3914	; 0x3914 <emberSerialWriteData>
    printf(" ");
    39a4:	80 e2       	ldi	r24, 0x20	; 32
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	0e 94 46 48 	call	0x908c	; 0x908c <putchar>

static void echoPrint(void)
{

  uint8_t tokenNum = 0;
  for ( ; tokenNum < commandState.tokenCount; tokenNum++ ) {
    39ac:	1f 5f       	subi	r17, 0xFF	; 255
    39ae:	80 91 06 0c 	lds	r24, 0x0C06
    39b2:	18 17       	cp	r17, r24
    39b4:	18 f3       	brcs	.-58     	; 0x397c <callCommandAction+0x3c>
    uint8_t *ptr = tokenPointer(tokenNum);
    uint8_t len = tokenLength(tokenNum);
    emberSerialWriteData(ptr, len);
    printf(" ");
  }
  printf("\r\n");
    39b6:	86 e7       	ldi	r24, 0x76	; 118
    39b8:	96 e0       	ldi	r25, 0x06	; 6
    39ba:	0e 94 4d 48 	call	0x909a	; 0x909a <puts>
      emberCurrentCommand = commandFinger;
      tokenNum += 1;
      commandState.argOffset += 1;

      if ( getNestedCommand(commandFinger, &commandFinger) ) {
        if (tokenNum >= commandState.tokenCount) {
    39be:	c0 90 06 0c 	lds	r12, 0x0C06
    39c2:	fa ef       	ldi	r31, 0xFA	; 250
    39c4:	6f 2e       	mov	r6, r31
    39c6:	fb e0       	ldi	r31, 0x0B	; 11
    39c8:	7f 2e       	mov	r7, r31
    39ca:	cf ea       	ldi	r28, 0xAF	; 175
    39cc:	da e0       	ldi	r29, 0x0A	; 10
    39ce:	10 e0       	ldi	r17, 0x00	; 0
          - commandState.tokenIndices[num]);
}

static uint8_t *tokenPointer(int8_t tokenNum)
{
  return commandState.buffer + commandState.tokenIndices[tokenNum];
    39d0:	f3 01       	movw	r30, r6
    39d2:	90 81       	ld	r25, Z
    39d4:	69 2f       	mov	r22, r25
    39d6:	70 e0       	ldi	r23, 0x00	; 0
    39d8:	66 52       	subi	r22, 0x26	; 38
    39da:	74 4f       	sbci	r23, 0xF4	; 244
                     : 0)));
}

static uint8_t tokenLength(uint8_t num)
{
  return (commandState.tokenIndices[num + 1]
    39dc:	81 81       	ldd	r24, Z+1	; 0x01
    39de:	89 1b       	sub	r24, r25
    39e0:	00 e0       	ldi	r16, 0x00	; 0
    39e2:	40 e0       	ldi	r20, 0x00	; 0
    39e4:	50 e0       	ldi	r21, 0x00	; 0
    PGM_P entryFinger = commandFinger->name;
    uint8_t *inputFinger = inputCommand;
    for (;; entryFinger++, inputFinger++) {
      bool endInput = (inputFinger - inputCommand == inputLength);
      bool endEntry = (*entryFinger == 0);
      if (endInput && endEntry) {
    39e6:	a8 2e       	mov	r10, r24
    39e8:	bb 24       	eor	r11, r11
    39ea:	30 c0       	rjmp	.+96     	; 0x3a4c <callCommandAction+0x10c>
                     : 0)));
}

static uint8_t tokenLength(uint8_t num)
{
  return (commandState.tokenIndices[num + 1]
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
  for (; commandFinger->name != NULL; commandFinger++) {
    PGM_P entryFinger = commandFinger->name;
    uint8_t *inputFinger = inputCommand;
    for (;; entryFinger++, inputFinger++) {
      bool endInput = (inputFinger - inputCommand == inputLength);
      bool endEntry = (*entryFinger == 0);
    39f0:	8c 91       	ld	r24, X
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	88 23       	and	r24, r24
    39f6:	09 f4       	brne	.+2      	; 0x39fa <callCommandAction+0xba>
    39f8:	91 e0       	ldi	r25, 0x01	; 1
      if (endInput && endEntry) {
    39fa:	2a 15       	cp	r18, r10
    39fc:	3b 05       	cpc	r19, r11
    39fe:	19 f4       	brne	.+6      	; 0x3a06 <callCommandAction+0xc6>
    3a00:	99 23       	and	r25, r25
    3a02:	19 f0       	breq	.+6      	; 0x3a0a <callCommandAction+0xca>
    3a04:	2a c0       	rjmp	.+84     	; 0x3a5a <callCommandAction+0x11a>
        return commandFinger;  // Exact match.
      } else if (endInput || endEntry) {
    3a06:	99 23       	and	r25, r25
    3a08:	29 f0       	breq	.+10     	; 0x3a14 <callCommandAction+0xd4>
        if (inexactMatch != NULL) {
    3a0a:	41 15       	cp	r20, r1
    3a0c:	51 05       	cpc	r21, r1
    3a0e:	e1 f4       	brne	.+56     	; 0x3a48 <callCommandAction+0x108>
    3a10:	ae 01       	movw	r20, r28
    3a12:	1b c0       	rjmp	.+54     	; 0x3a4a <callCommandAction+0x10a>
          break;
        } else {
          inexactMatch = commandFinger;
          break;
        }
      } else if (charDowncase(*inputFinger) != charDowncase(*entryFinger)) {
    3a14:	4b 01       	movw	r8, r22
    3a16:	82 0e       	add	r8, r18
    3a18:	93 1e       	adc	r9, r19
    3a1a:	f4 01       	movw	r30, r8
    3a1c:	90 81       	ld	r25, Z
  }
}

static uint8_t charDowncase(uint8_t c)
{
  if ('A' <= c && c <= 'Z')
    3a1e:	ef eb       	ldi	r30, 0xBF	; 191
    3a20:	8e 2e       	mov	r8, r30
    3a22:	89 0e       	add	r8, r25
    3a24:	f9 e1       	ldi	r31, 0x19	; 25
    3a26:	f8 15       	cp	r31, r8
    3a28:	08 f0       	brcs	.+2      	; 0x3a2c <callCommandAction+0xec>
    return c + 'a' - 'A';
    3a2a:	90 5e       	subi	r25, 0xE0	; 224
  }
}

static uint8_t charDowncase(uint8_t c)
{
  if ('A' <= c && c <= 'Z')
    3a2c:	ff eb       	ldi	r31, 0xBF	; 191
    3a2e:	8f 2e       	mov	r8, r31
    3a30:	88 0e       	add	r8, r24
    3a32:	e9 e1       	ldi	r30, 0x19	; 25
    3a34:	ee 2e       	mov	r14, r30
    3a36:	e8 14       	cp	r14, r8
    3a38:	08 f0       	brcs	.+2      	; 0x3a3c <callCommandAction+0xfc>
    return c + 'a' - 'A';
    3a3a:	80 5e       	subi	r24, 0xE0	; 224
    3a3c:	2f 5f       	subi	r18, 0xFF	; 255
    3a3e:	3f 4f       	sbci	r19, 0xFF	; 255
          break;
        } else {
          inexactMatch = commandFinger;
          break;
        }
      } else if (charDowncase(*inputFinger) != charDowncase(*entryFinger)) {
    3a40:	98 17       	cp	r25, r24
    3a42:	19 f4       	brne	.+6      	; 0x3a4a <callCommandAction+0x10a>
  bool multipleMatches = FALSE;

  for (; commandFinger->name != NULL; commandFinger++) {
    PGM_P entryFinger = commandFinger->name;
    uint8_t *inputFinger = inputCommand;
    for (;; entryFinger++, inputFinger++) {
    3a44:	11 96       	adiw	r26, 0x01	; 1
    3a46:	d4 cf       	rjmp	.-88     	; 0x39f0 <callCommandAction+0xb0>
    3a48:	01 e0       	ldi	r16, 0x01	; 1
  EmberCommandEntry *inexactMatch = NULL;
  uint8_t *inputCommand = tokenPointer(tokenNum);
  uint8_t inputLength = tokenLength(tokenNum);
  bool multipleMatches = FALSE;

  for (; commandFinger->name != NULL; commandFinger++) {
    3a4a:	28 96       	adiw	r28, 0x08	; 8
    3a4c:	a8 81       	ld	r26, Y
    3a4e:	b9 81       	ldd	r27, Y+1	; 0x01
    3a50:	10 97       	sbiw	r26, 0x00	; 0
    3a52:	61 f6       	brne	.-104    	; 0x39ec <callCommandAction+0xac>
      } else if (charDowncase(*inputFinger) != charDowncase(*entryFinger)) {
        break;
      }
    }
  }
  return (multipleMatches || false ? NULL : inexactMatch);
    3a54:	00 23       	and	r16, r16
    3a56:	19 f4       	brne	.+6      	; 0x3a5e <callCommandAction+0x11e>
    3a58:	ea 01       	movw	r28, r20
  }

  // Lookup the command.
  while (TRUE) {
    commandFinger = commandLookup(commandFinger, tokenNum);
    if (commandFinger == NULL) {
    3a5a:	20 97       	sbiw	r28, 0x00	; 0
    3a5c:	31 f4       	brne	.+12     	; 0x3a6a <callCommandAction+0x12a>
      commandState.error = EMBER_CMD_ERR_NO_SUCH_COMMAND;
    3a5e:	82 e0       	ldi	r24, 0x02	; 2
    3a60:	80 93 08 0c 	sts	0x0C08, r24
    3a64:	c0 e0       	ldi	r28, 0x00	; 0
    3a66:	d0 e0       	ldi	r29, 0x00	; 0
      goto kickout;
    3a68:	9b c0       	rjmp	.+310    	; 0x3ba0 <callCommandAction+0x260>
    } else {
      emberCurrentCommand = commandFinger;
    3a6a:	d0 93 af 1e 	sts	0x1EAF, r29
    3a6e:	c0 93 ae 1e 	sts	0x1EAE, r28
      tokenNum += 1;
    3a72:	1f 5f       	subi	r17, 0xFF	; 255
      commandState.argOffset += 1;
    3a74:	80 91 0a 0c 	lds	r24, 0x0C0A
    3a78:	8f 5f       	subi	r24, 0xFF	; 255
    3a7a:	80 93 0a 0c 	sts	0x0C0A, r24
// contains the EmberCommandEntry, but that approach has a problem
// on AVR128, therefore it is technically deprecated. If you have
// a choice, put NULL for action and a table under argumentTypes.
static bool getNestedCommand(EmberCommandEntry *entry,
                                EmberCommandEntry **nestedCommand) {
  if ( entry -> action == NULL ) {
    3a7e:	2a 81       	ldd	r18, Y+2	; 0x02
    3a80:	3b 81       	ldd	r19, Y+3	; 0x03
    3a82:	21 15       	cp	r18, r1
    3a84:	31 05       	cpc	r19, r1
    3a86:	41 f4       	brne	.+16     	; 0x3a98 <callCommandAction+0x158>
    *nestedCommand = (EmberCommandEntry*)entry->argumentTypes;
    3a88:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a8c:	29 2f       	mov	r18, r25
    3a8e:	e9 01       	movw	r28, r18
    3a90:	7e 01       	movw	r14, r28
    3a92:	f8 2e       	mov	r15, r24
    3a94:	e7 01       	movw	r28, r14
    3a96:	07 c0       	rjmp	.+14     	; 0x3aa6 <callCommandAction+0x166>
    return TRUE;
  } else if ( entry -> argumentTypes[0] == 'n' ) {
    3a98:	ac 81       	ldd	r26, Y+4	; 0x04
    3a9a:	bd 81       	ldd	r27, Y+5	; 0x05
    3a9c:	8c 91       	ld	r24, X
    3a9e:	8e 36       	cpi	r24, 0x6E	; 110
    3aa0:	09 f0       	breq	.+2      	; 0x3aa4 <callCommandAction+0x164>
    3aa2:	9e c0       	rjmp	.+316    	; 0x3be0 <callCommandAction+0x2a0>
    *nestedCommand = (EmberCommandEntry*)(void*)entry->action;
    3aa4:	e9 01       	movw	r28, r18
    3aa6:	08 94       	sec
    3aa8:	61 1c       	adc	r6, r1
    3aaa:	71 1c       	adc	r7, r1
      emberCurrentCommand = commandFinger;
      tokenNum += 1;
      commandState.argOffset += 1;

      if ( getNestedCommand(commandFinger, &commandFinger) ) {
        if (tokenNum >= commandState.tokenCount) {
    3aac:	1c 15       	cp	r17, r12
    3aae:	08 f4       	brcc	.+2      	; 0x3ab2 <callCommandAction+0x172>
    3ab0:	8f cf       	rjmp	.-226    	; 0x39d0 <callCommandAction+0x90>
          commandState.error = EMBER_CMD_ERR_WRONG_NUMBER_OF_ARGUMENTS;
    3ab2:	83 e0       	ldi	r24, 0x03	; 3
    3ab4:	80 93 08 0c 	sts	0x0C08, r24
          goto kickout;
    3ab8:	73 c0       	rjmp	.+230    	; 0x3ba0 <callCommandAction+0x260>

  // Validate the arguments.
  for(argTypeNum = 0, argNum = 0;
      tokenNum < commandState.tokenCount;
      tokenNum++, argNum++) {
    uint8_t type = commandFinger->argumentTypes[argTypeNum];
    3aba:	e8 0d       	add	r30, r8
    3abc:	f9 1d       	adc	r31, r9
    3abe:	80 81       	ld	r24, Z
}

static uint8_t firstByteOfArg(uint8_t argNum)
{
  uint8_t tokenNum = argNum + commandState.argOffset;
  return commandState.buffer[commandState.tokenIndices[tokenNum]];
    3ac0:	e0 91 0a 0c 	lds	r30, 0x0C0A
    3ac4:	e0 0f       	add	r30, r16
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	e7 52       	subi	r30, 0x27	; 39
    3aca:	f4 4f       	sbci	r31, 0xF4	; 244
    3acc:	e1 a1       	ldd	r30, Z+33	; 0x21
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	e7 52       	subi	r30, 0x27	; 39
    3ad2:	f4 4f       	sbci	r31, 0xF4	; 244
    3ad4:	91 81       	ldd	r25, Z+1	; 0x01
  for(argTypeNum = 0, argNum = 0;
      tokenNum < commandState.tokenCount;
      tokenNum++, argNum++) {
    uint8_t type = commandFinger->argumentTypes[argTypeNum];
    uint8_t firstChar = firstByteOfArg(argNum);
    switch(type) {
    3ad6:	83 37       	cpi	r24, 0x73	; 115
    3ad8:	59 f0       	breq	.+22     	; 0x3af0 <callCommandAction+0x1b0>
    3ada:	84 37       	cpi	r24, 0x74	; 116
    3adc:	28 f4       	brcc	.+10     	; 0x3ae8 <callCommandAction+0x1a8>
    3ade:	88 23       	and	r24, r24
    3ae0:	b9 f1       	breq	.+110    	; 0x3b50 <callCommandAction+0x210>
    3ae2:	82 36       	cpi	r24, 0x62	; 98
    3ae4:	c1 f5       	brne	.+112    	; 0x3b56 <callCommandAction+0x216>
    3ae6:	2d c0       	rjmp	.+90     	; 0x3b42 <callCommandAction+0x202>
    3ae8:	98 2f       	mov	r25, r24
    3aea:	95 57       	subi	r25, 0x75	; 117
    3aec:	93 30       	cpi	r25, 0x03	; 3
    3aee:	98 f5       	brcc	.+102    	; 0x3b56 <callCommandAction+0x216>
    // Integers
    case 'u':
    case 'v':
    case 'w':
    case 's': {
      uint32_t limit = (type == 'u' ? 0xFF
    3af0:	85 37       	cpi	r24, 0x75	; 117
    3af2:	31 f4       	brne	.+12     	; 0x3b00 <callCommandAction+0x1c0>
    3af4:	8f ef       	ldi	r24, 0xFF	; 255
    3af6:	c8 2e       	mov	r12, r24
    3af8:	d1 2c       	mov	r13, r1
    3afa:	e1 2c       	mov	r14, r1
    3afc:	f1 2c       	mov	r15, r1
    3afe:	15 c0       	rjmp	.+42     	; 0x3b2a <callCommandAction+0x1ea>
                      : (type == 'v' ? 0xFFFF
    3b00:	86 37       	cpi	r24, 0x76	; 118
    3b02:	39 f4       	brne	.+14     	; 0x3b12 <callCommandAction+0x1d2>
    3b04:	bf ef       	ldi	r27, 0xFF	; 255
    3b06:	cb 2e       	mov	r12, r27
    3b08:	bf ef       	ldi	r27, 0xFF	; 255
    3b0a:	db 2e       	mov	r13, r27
    3b0c:	e1 2c       	mov	r14, r1
    3b0e:	f1 2c       	mov	r15, r1
    3b10:	0c c0       	rjmp	.+24     	; 0x3b2a <callCommandAction+0x1ea>
                         : (type =='s' ? 0x7F : 0xFFFFFFFFUL)));
    3b12:	83 37       	cpi	r24, 0x73	; 115
    3b14:	29 f0       	breq	.+10     	; 0x3b20 <callCommandAction+0x1e0>
    3b16:	cc 24       	eor	r12, r12
    3b18:	ca 94       	dec	r12
    3b1a:	dc 2c       	mov	r13, r12
    3b1c:	76 01       	movw	r14, r12
    3b1e:	05 c0       	rjmp	.+10     	; 0x3b2a <callCommandAction+0x1ea>
    3b20:	af e7       	ldi	r26, 0x7F	; 127
    3b22:	ca 2e       	mov	r12, r26
    3b24:	d1 2c       	mov	r13, r1
    3b26:	e1 2c       	mov	r14, r1
    3b28:	f1 2c       	mov	r15, r1
      if (stringToUnsignedInt(argNum, true) > limit) {
    3b2a:	80 2f       	mov	r24, r16
    3b2c:	61 e0       	ldi	r22, 0x01	; 1
    3b2e:	0e 94 0a 19 	call	0x3214	; 0x3214 <stringToUnsignedInt>
    3b32:	c6 16       	cp	r12, r22
    3b34:	d7 06       	cpc	r13, r23
    3b36:	e8 06       	cpc	r14, r24
    3b38:	f9 06       	cpc	r15, r25
    3b3a:	78 f4       	brcc	.+30     	; 0x3b5a <callCommandAction+0x21a>
        commandState.error = EMBER_CMD_ERR_ARGUMENT_OUT_OF_RANGE;
    3b3c:	60 92 08 0c 	sts	0x0C08, r6
    3b40:	0c c0       	rjmp	.+24     	; 0x3b5a <callCommandAction+0x21a>
      break;
    }

    // String
    case 'b':
      if (firstChar != '"' && firstChar != '{') {
    3b42:	92 32       	cpi	r25, 0x22	; 34
    3b44:	51 f0       	breq	.+20     	; 0x3b5a <callCommandAction+0x21a>
    3b46:	9b 37       	cpi	r25, 0x7B	; 123
    3b48:	41 f0       	breq	.+16     	; 0x3b5a <callCommandAction+0x21a>
        commandState.error = EMBER_CMD_ERR_ARGUMENT_SYNTAX_ERROR;
    3b4a:	50 92 08 0c 	sts	0x0C08, r5
    3b4e:	05 c0       	rjmp	.+10     	; 0x3b5a <callCommandAction+0x21a>
      }
      break;

    case 0:
      commandState.error = EMBER_CMD_ERR_WRONG_NUMBER_OF_ARGUMENTS;
    3b50:	a0 92 08 0c 	sts	0x0C08, r10
      break;
    3b54:	02 c0       	rjmp	.+4      	; 0x3b5a <callCommandAction+0x21a>

    default:
      commandState.error = EMBER_CMD_ERR_INVALID_ARGUMENT_TYPE;
    3b56:	70 92 08 0c 	sts	0x0C08, r7
      break;
    }

    if (commandFinger->argumentTypes[argTypeNum + 1] != '*') {
    3b5a:	ec 81       	ldd	r30, Y+4	; 0x04
    3b5c:	fd 81       	ldd	r31, Y+5	; 0x05
    3b5e:	e8 0d       	add	r30, r8
    3b60:	f9 1d       	adc	r31, r9
    3b62:	81 81       	ldd	r24, Z+1	; 0x01
    3b64:	8a 32       	cpi	r24, 0x2A	; 42
    3b66:	09 f0       	breq	.+2      	; 0x3b6a <callCommandAction+0x22a>
      argTypeNum += 1;
    3b68:	b3 94       	inc	r11
    }

    if (commandState.error != EMBER_CMD_SUCCESS) {
    3b6a:	80 91 08 0c 	lds	r24, 0x0C08
    3b6e:	88 23       	and	r24, r24
    3b70:	b9 f4       	brne	.+46     	; 0x3ba0 <callCommandAction+0x260>
    goto kickout;

  // Validate the arguments.
  for(argTypeNum = 0, argNum = 0;
      tokenNum < commandState.tokenCount;
      tokenNum++, argNum++) {
    3b72:	1f 5f       	subi	r17, 0xFF	; 255
    3b74:	0f 5f       	subi	r16, 0xFF	; 255
  // arguments it got.
  if ( commandFinger->argumentTypes[0] == '?' )
    goto kickout;

  // Validate the arguments.
  for(argTypeNum = 0, argNum = 0;
    3b76:	80 91 06 0c 	lds	r24, 0x0C06
    3b7a:	ec 81       	ldd	r30, Y+4	; 0x04
    3b7c:	fd 81       	ldd	r31, Y+5	; 0x05
    3b7e:	8b 2c       	mov	r8, r11
    3b80:	99 24       	eor	r9, r9
    3b82:	18 17       	cp	r17, r24
    3b84:	08 f4       	brcc	.+2      	; 0x3b88 <callCommandAction+0x248>
    3b86:	99 cf       	rjmp	.-206    	; 0x3aba <callCommandAction+0x17a>
    if (commandState.error != EMBER_CMD_SUCCESS) {
      goto kickout;
    }
  }

  if (! (commandFinger->argumentTypes[argTypeNum] == 0
    3b88:	e8 0d       	add	r30, r8
    3b8a:	f9 1d       	adc	r31, r9
    3b8c:	80 81       	ld	r24, Z
    3b8e:	88 23       	and	r24, r24
    3b90:	39 f0       	breq	.+14     	; 0x3ba0 <callCommandAction+0x260>
         || commandFinger->argumentTypes[argTypeNum + 1] == '*')) {
    3b92:	81 81       	ldd	r24, Z+1	; 0x01
    3b94:	8a 32       	cpi	r24, 0x2A	; 42
    3b96:	21 f0       	breq	.+8      	; 0x3ba0 <callCommandAction+0x260>
    commandState.error = EMBER_CMD_ERR_WRONG_NUMBER_OF_ARGUMENTS;
    3b98:	83 e0       	ldi	r24, 0x03	; 3
    3b9a:	e6 e0       	ldi	r30, 0x06	; 6
    3b9c:	fc e0       	ldi	r31, 0x0C	; 12
    3b9e:	82 83       	std	Z+2, r24	; 0x02
  }

 kickout:

  if (commandState.error == EMBER_CMD_SUCCESS) {
    3ba0:	80 91 08 0c 	lds	r24, 0x0C08
    3ba4:	88 23       	and	r24, r24
    3ba6:	21 f4       	brne	.+8      	; 0x3bb0 <callCommandAction+0x270>
    (commandFinger->action)();
    3ba8:	ea 81       	ldd	r30, Y+2	; 0x02
    3baa:	fb 81       	ldd	r31, Y+3	; 0x03
    3bac:	09 95       	icall
    3bae:	06 c0       	rjmp	.+12     	; 0x3bbc <callCommandAction+0x27c>
  } else {
	  if (isPrintEnabled){
    3bb0:	90 91 4e 0b 	lds	r25, 0x0B4E
    3bb4:	99 23       	and	r25, r25
    3bb6:	11 f0       	breq	.+4      	; 0x3bbc <callCommandAction+0x27c>
    emberCommandErrorHandler(commandState.error);
    3bb8:	0e 94 75 1a 	call	0x34ea	; 0x34ea <emberCommandErrorHandler>
	  }
	  }

 kickout2:

  emberCommandReaderInit();
    3bbc:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <emberCommandReaderInit>
}
    3bc0:	df 91       	pop	r29
    3bc2:	cf 91       	pop	r28
    3bc4:	1f 91       	pop	r17
    3bc6:	0f 91       	pop	r16
    3bc8:	ff 90       	pop	r15
    3bca:	ef 90       	pop	r14
    3bcc:	df 90       	pop	r13
    3bce:	cf 90       	pop	r12
    3bd0:	bf 90       	pop	r11
    3bd2:	af 90       	pop	r10
    3bd4:	9f 90       	pop	r9
    3bd6:	8f 90       	pop	r8
    3bd8:	7f 90       	pop	r7
    3bda:	6f 90       	pop	r6
    3bdc:	5f 90       	pop	r5
    3bde:	08 95       	ret
  // If you put '?' as the first character
  // of the argument format string, then you effectivelly
  // prevent the argument validation, and the command gets executed.
  // At that point it is down to the command to deal with whatever
  // arguments it got.
  if ( commandFinger->argumentTypes[0] == '?' )
    3be0:	8f 33       	cpi	r24, 0x3F	; 63
    3be2:	f1 f2       	breq	.-68     	; 0x3ba0 <callCommandAction+0x260>
    3be4:	00 e0       	ldi	r16, 0x00	; 0
    3be6:	bb 24       	eor	r11, r11
    case 's': {
      uint32_t limit = (type == 'u' ? 0xFF
                      : (type == 'v' ? 0xFFFF
                         : (type =='s' ? 0x7F : 0xFFFFFFFFUL)));
      if (stringToUnsignedInt(argNum, true) > limit) {
        commandState.error = EMBER_CMD_ERR_ARGUMENT_OUT_OF_RANGE;
    3be8:	f4 e0       	ldi	r31, 0x04	; 4
    3bea:	6f 2e       	mov	r6, r31
    case 0:
      commandState.error = EMBER_CMD_ERR_WRONG_NUMBER_OF_ARGUMENTS;
      break;

    default:
      commandState.error = EMBER_CMD_ERR_INVALID_ARGUMENT_TYPE;
    3bec:	e7 e0       	ldi	r30, 0x07	; 7
    3bee:	7e 2e       	mov	r7, r30
        commandState.error = EMBER_CMD_ERR_ARGUMENT_SYNTAX_ERROR;
      }
      break;

    case 0:
      commandState.error = EMBER_CMD_ERR_WRONG_NUMBER_OF_ARGUMENTS;
    3bf0:	73 e0       	ldi	r23, 0x03	; 3
    3bf2:	a7 2e       	mov	r10, r23
    }

    // String
    case 'b':
      if (firstChar != '"' && firstChar != '{') {
        commandState.error = EMBER_CMD_ERR_ARGUMENT_SYNTAX_ERROR;
    3bf4:	65 e0       	ldi	r22, 0x05	; 5
    3bf6:	56 2e       	mov	r5, r22
    3bf8:	be cf       	rjmp	.-132    	; 0x3b76 <callCommandAction+0x236>

00003bfa <printMatrix>:
	}

}


void printMatrix(void){
    3bfa:	0f 93       	push	r16
    3bfc:	1f 93       	push	r17
    3bfe:	cf 93       	push	r28
    3c00:	df 93       	push	r29
    3c02:	ca ed       	ldi	r28, 0xDA	; 218
    3c04:	dd e1       	ldi	r29, 0x1D	; 29


		for (uint8_t i = 0; i < DLMO_NEIGHBOR_MAX_COUNT; i++)
			{
					printf("%d ",adjacencyMatrix[i]);
    3c06:	09 e9       	ldi	r16, 0x99	; 153
    3c08:	18 e0       	ldi	r17, 0x08	; 8
    3c0a:	00 d0       	rcall	.+0      	; 0x3c0c <printMatrix+0x12>
    3c0c:	00 d0       	rcall	.+0      	; 0x3c0e <printMatrix+0x14>
    3c0e:	ed b7       	in	r30, 0x3d	; 61
    3c10:	fe b7       	in	r31, 0x3e	; 62
    3c12:	12 83       	std	Z+2, r17	; 0x02
    3c14:	01 83       	std	Z+1, r16	; 0x01
    3c16:	89 91       	ld	r24, Y+
    3c18:	99 91       	ld	r25, Y+
    3c1a:	94 83       	std	Z+4, r25	; 0x04
    3c1c:	83 83       	std	Z+3, r24	; 0x03
    3c1e:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>


void printMatrix(void){


		for (uint8_t i = 0; i < DLMO_NEIGHBOR_MAX_COUNT; i++)
    3c22:	0f 90       	pop	r0
    3c24:	0f 90       	pop	r0
    3c26:	0f 90       	pop	r0
    3c28:	0f 90       	pop	r0
    3c2a:	fd e1       	ldi	r31, 0x1D	; 29
    3c2c:	ca 3f       	cpi	r28, 0xFA	; 250
    3c2e:	df 07       	cpc	r29, r31
    3c30:	61 f7       	brne	.-40     	; 0x3c0a <printMatrix+0x10>
			{
					printf("%d ",adjacencyMatrix[i]);
				}
		putchar('\r');
    3c32:	60 91 48 20 	lds	r22, 0x2048
    3c36:	70 91 49 20 	lds	r23, 0x2049
    3c3a:	8d e0       	ldi	r24, 0x0D	; 13
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
		putchar('\n');
    3c42:	60 91 48 20 	lds	r22, 0x2048
    3c46:	70 91 49 20 	lds	r23, 0x2049
    3c4a:	8a e0       	ldi	r24, 0x0A	; 10
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>

	}
    3c52:	df 91       	pop	r29
    3c54:	cf 91       	pop	r28
    3c56:	1f 91       	pop	r17
    3c58:	0f 91       	pop	r16
    3c5a:	08 95       	ret

00003c5c <emberSerialReadByte>:
{
  return commandState.buffer + commandState.tokenIndices[tokenNum];
}

EmberStatus emberSerialReadByte(uint8_t *dataByte)
{
    3c5c:	cf 93       	push	r28
    3c5e:	df 93       	push	r29
    3c60:	ec 01       	movw	r28, r24
  int8_t ch=-1;
	if (nrk_uart_data_ready(NRK_DEFAULT_UART)!=0)
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	0e 94 88 2b 	call	0x5710	; 0x5710 <nrk_uart_data_ready>
    3c68:	88 23       	and	r24, r24
    3c6a:	59 f0       	breq	.+22     	; 0x3c82 <emberSerialReadByte+0x26>
  ch = getchar();
    3c6c:	80 91 46 20 	lds	r24, 0x2046
    3c70:	90 91 47 20 	lds	r25, 0x2047
    3c74:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <fgetc>

  if(ch<0) {
    3c78:	87 fd       	sbrc	r24, 7
    3c7a:	03 c0       	rjmp	.+6      	; 0x3c82 <emberSerialReadByte+0x26>
    return EMBER_SERIAL_RX_EMPTY;
  }
  *dataByte = (uint8_t)ch;
    3c7c:	88 83       	st	Y, r24
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
  return EMBER_SUCCESS;
    3c80:	01 c0       	rjmp	.+2      	; 0x3c84 <emberSerialReadByte+0x28>
    3c82:	86 e2       	ldi	r24, 0x26	; 38
}
    3c84:	df 91       	pop	r29
    3c86:	cf 91       	pop	r28
    3c88:	08 95       	ret

00003c8a <emberProcessCommandString>:
//
// Goto's are used where one parse state naturally falls into another,
// and to save flash.

bool emberProcessCommandString(uint8_t *input, uint8_t sizeOrPort)
{
    3c8a:	4f 92       	push	r4
    3c8c:	5f 92       	push	r5
    3c8e:	7f 92       	push	r7
    3c90:	8f 92       	push	r8
    3c92:	9f 92       	push	r9
    3c94:	af 92       	push	r10
    3c96:	bf 92       	push	r11
    3c98:	cf 92       	push	r12
    3c9a:	df 92       	push	r13
    3c9c:	ef 92       	push	r14
    3c9e:	ff 92       	push	r15
    3ca0:	0f 93       	push	r16
    3ca2:	1f 93       	push	r17
    3ca4:	df 93       	push	r29
    3ca6:	cf 93       	push	r28
    3ca8:	0f 92       	push	r0
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62
    3cae:	8c 01       	movw	r16, r24
    3cb0:	d6 2e       	mov	r13, r22
    3cb2:	ff 24       	eor	r15, r15

  while (TRUE) {
    uint8_t next;

    if (input == NULL) {
      switch (emberSerialReadByte(&next)) {
    3cb4:	2e 01       	movw	r4, r28
    3cb6:	08 94       	sec
    3cb8:	41 1c       	adc	r4, r1
    3cba:	51 1c       	adc	r5, r1
      case EMBER_SUCCESS:
        break;
      case EMBER_SERIAL_RX_EMPTY:
        return isEol;
      default:
        commandState.error = EMBER_CMD_ERR_PORT_PROBLEM;
    3cbc:	bb 24       	eor	r11, r11
    3cbe:	b3 94       	inc	r11
      }
      break;

    WRITE_TO_BUFFER:
      if (commandState.index == EMBER_COMMAND_BUFFER_LENGTH) {
        commandState.error = EMBER_CMD_ERR_STRING_TOO_LONG;
    3cc0:	26 e0       	ldi	r18, 0x06	; 6
    3cc2:	72 2e       	mov	r7, r18
      }
      break;

    END_ARGUMENT:
      if (commandState.tokenCount == MAX_TOKEN_COUNT) {
        commandState.error = EMBER_CMD_ERR_WRONG_NUMBER_OF_ARGUMENTS;
    3cc4:	93 e0       	ldi	r25, 0x03	; 3
    3cc6:	c9 2e       	mov	r12, r25

    case CMD_READING_STRING:
      if (isQuote) {
        goto END_ARGUMENT;
      } else if (isEol) {
        commandState.error = EMBER_CMD_ERR_ARGUMENT_SYNTAX_ERROR;
    3cc8:	85 e0       	ldi	r24, 0x05	; 5
    3cca:	e8 2e       	mov	r14, r24
      } else {
        uint8_t value = hexToInt(next);
        if (value < 16) {
          if (waitingForLowNibble) {
            next = (commandState.hexHighNibble << 4) + value;
            commandState.hexHighNibble = 0xFF;
    3ccc:	88 24       	eor	r8, r8
    3cce:	8a 94       	dec	r8
    case CMD_AWAITING_ARGUMENT:
      if (isEol) {
        callCommandAction();
      } else if (! isSpace) {
        if (isQuote) {
          commandState.state = CMD_READING_STRING;
    3cd0:	b2 e0       	ldi	r27, 0x02	; 2
    3cd2:	9b 2e       	mov	r9, r27
      }
      break;
    }

    READING_TO_EOL:
      commandState.state = CMD_READING_TO_EOL;
    3cd4:	a4 e0       	ldi	r26, 0x04	; 4
    3cd6:	aa 2e       	mov	r10, r26
  bool isSpace, isQuote;

  while (TRUE) {
    uint8_t next;

    if (input == NULL) {
    3cd8:	01 15       	cp	r16, r1
    3cda:	11 05       	cpc	r17, r1
    3cdc:	59 f4       	brne	.+22     	; 0x3cf4 <emberProcessCommandString+0x6a>
      switch (emberSerialReadByte(&next)) {
    3cde:	c2 01       	movw	r24, r4
    3ce0:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <emberSerialReadByte>
    3ce4:	88 23       	and	r24, r24
    3ce6:	71 f0       	breq	.+28     	; 0x3d04 <emberProcessCommandString+0x7a>
    3ce8:	86 32       	cpi	r24, 0x26	; 38
    3cea:	09 f4       	brne	.+2      	; 0x3cee <emberProcessCommandString+0x64>
    3cec:	cb c0       	rjmp	.+406    	; 0x3e84 <emberProcessCommandString+0x1fa>
      case EMBER_SUCCESS:
        break;
      case EMBER_SERIAL_RX_EMPTY:
        return isEol;
      default:
        commandState.error = EMBER_CMD_ERR_PORT_PROBLEM;
    3cee:	b0 92 08 0c 	sts	0x0C08, r11
        goto READING_TO_EOL;
    3cf2:	85 c0       	rjmp	.+266    	; 0x3dfe <emberProcessCommandString+0x174>
      }
    } else if (sizeOrPort == 0) {
    3cf4:	dd 20       	and	r13, r13
    3cf6:	09 f4       	brne	.+2      	; 0x3cfa <emberProcessCommandString+0x70>
    3cf8:	c5 c0       	rjmp	.+394    	; 0x3e84 <emberProcessCommandString+0x1fa>
      return isEol;
    } else {
      next = *input;
    3cfa:	f8 01       	movw	r30, r16
    3cfc:	81 91       	ld	r24, Z+
    3cfe:	8f 01       	movw	r16, r30
    3d00:	89 83       	std	Y+1, r24	; 0x01
      input += 1;
      sizeOrPort -= 1;
    3d02:	da 94       	dec	r13
    }

    //   fprintf(stderr, "[processing '%c' (%s)]\n", next, stateNames[commandState.state]);

    if (previousCharacter == '\r' && next == '\n') {
    3d04:	80 91 d6 0b 	lds	r24, 0x0BD6
    3d08:	8d 30       	cpi	r24, 0x0D	; 13
    3d0a:	31 f4       	brne	.+12     	; 0x3d18 <emberProcessCommandString+0x8e>
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	8a 30       	cpi	r24, 0x0A	; 10
    3d10:	19 f4       	brne	.+6      	; 0x3d18 <emberProcessCommandString+0x8e>
      previousCharacter = next;
    3d12:	80 93 d6 0b 	sts	0x0BD6, r24
      continue;
    3d16:	e0 cf       	rjmp	.-64     	; 0x3cd8 <emberProcessCommandString+0x4e>
    }
    previousCharacter = next;
    3d18:	89 81       	ldd	r24, Y+1	; 0x01
    3d1a:	80 93 d6 0b 	sts	0x0BD6, r24
    isEol = ((next == '\r') || (next == '\n'));
    3d1e:	8d 30       	cpi	r24, 0x0D	; 13
    3d20:	21 f0       	breq	.+8      	; 0x3d2a <emberProcessCommandString+0xa0>
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	8a 30       	cpi	r24, 0x0A	; 10
    3d28:	11 f4       	brne	.+4      	; 0x3d2e <emberProcessCommandString+0xa4>
    3d2a:	21 e0       	ldi	r18, 0x01	; 1
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	f2 2e       	mov	r15, r18
    isSpace = (next == ' ');
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	80 32       	cpi	r24, 0x20	; 32
    3d34:	09 f4       	brne	.+2      	; 0x3d38 <emberProcessCommandString+0xae>
    3d36:	21 e0       	ldi	r18, 0x01	; 1
    isQuote = (next == '"');
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	82 32       	cpi	r24, 0x22	; 34
    3d3c:	09 f4       	brne	.+2      	; 0x3d40 <emberProcessCommandString+0xb6>
    3d3e:	31 e0       	ldi	r19, 0x01	; 1


    switch (commandState.state) {
    3d40:	90 91 d9 0b 	lds	r25, 0x0BD9
    3d44:	92 30       	cpi	r25, 0x02	; 2
    3d46:	39 f1       	breq	.+78     	; 0x3d96 <emberProcessCommandString+0x10c>
    3d48:	93 30       	cpi	r25, 0x03	; 3
    3d4a:	28 f4       	brcc	.+10     	; 0x3d56 <emberProcessCommandString+0xcc>
    3d4c:	99 23       	and	r25, r25
    3d4e:	49 f0       	breq	.+18     	; 0x3d62 <emberProcessCommandString+0xd8>
    3d50:	91 30       	cpi	r25, 0x01	; 1
    3d52:	11 f6       	brne	.-124    	; 0x3cd8 <emberProcessCommandString+0x4e>
    3d54:	19 c0       	rjmp	.+50     	; 0x3d88 <emberProcessCommandString+0xfe>
    3d56:	93 30       	cpi	r25, 0x03	; 3
    3d58:	29 f1       	breq	.+74     	; 0x3da4 <emberProcessCommandString+0x11a>
    3d5a:	94 30       	cpi	r25, 0x04	; 4
    3d5c:	09 f0       	breq	.+2      	; 0x3d60 <emberProcessCommandString+0xd6>
    3d5e:	bc cf       	rjmp	.-136    	; 0x3cd8 <emberProcessCommandString+0x4e>
    3d60:	50 c0       	rjmp	.+160    	; 0x3e02 <emberProcessCommandString+0x178>

    case CMD_AWAITING_ARGUMENT:
      if (isEol) {
    3d62:	ff 20       	and	r15, r15
    3d64:	09 f0       	breq	.+2      	; 0x3d68 <emberProcessCommandString+0xde>
    3d66:	6e c0       	rjmp	.+220    	; 0x3e44 <emberProcessCommandString+0x1ba>
        callCommandAction();
      } else if (! isSpace) {
    3d68:	22 23       	and	r18, r18
    3d6a:	09 f0       	breq	.+2      	; 0x3d6e <emberProcessCommandString+0xe4>
    3d6c:	b5 cf       	rjmp	.-150    	; 0x3cd8 <emberProcessCommandString+0x4e>
        if (isQuote) {
    3d6e:	33 23       	and	r19, r19
    3d70:	19 f0       	breq	.+6      	; 0x3d78 <emberProcessCommandString+0xee>
          commandState.state = CMD_READING_STRING;
    3d72:	90 92 d9 0b 	sts	0x0BD9, r9
    3d76:	69 c0       	rjmp	.+210    	; 0x3e4a <emberProcessCommandString+0x1c0>
        } else if (next == '{') {
    3d78:	8b 37       	cpi	r24, 0x7B	; 123
    3d7a:	19 f4       	brne	.+6      	; 0x3d82 <emberProcessCommandString+0xf8>
          commandState.state = CMD_READING_HEX_STRING;
    3d7c:	c0 92 d9 0b 	sts	0x0BD9, r12
    3d80:	64 c0       	rjmp	.+200    	; 0x3e4a <emberProcessCommandString+0x1c0>
        } else {
          commandState.state = CMD_READING_ARGUMENT;
    3d82:	b0 92 d9 0b 	sts	0x0BD9, r11
    3d86:	61 c0       	rjmp	.+194    	; 0x3e4a <emberProcessCommandString+0x1c0>
        goto WRITE_TO_BUFFER;
      }
      break;

    case CMD_READING_ARGUMENT:
      if (isEol || isSpace) {
    3d88:	ff 20       	and	r15, r15
    3d8a:	09 f0       	breq	.+2      	; 0x3d8e <emberProcessCommandString+0x104>
    3d8c:	46 c0       	rjmp	.+140    	; 0x3e1a <emberProcessCommandString+0x190>
    3d8e:	22 23       	and	r18, r18
    3d90:	09 f0       	breq	.+2      	; 0x3d94 <emberProcessCommandString+0x10a>
    3d92:	43 c0       	rjmp	.+134    	; 0x3e1a <emberProcessCommandString+0x190>
    3d94:	5a c0       	rjmp	.+180    	; 0x3e4a <emberProcessCommandString+0x1c0>
      } else {
        goto WRITE_TO_BUFFER;
      }

    case CMD_READING_STRING:
      if (isQuote) {
    3d96:	33 23       	and	r19, r19
    3d98:	09 f0       	breq	.+2      	; 0x3d9c <emberProcessCommandString+0x112>
    3d9a:	3f c0       	rjmp	.+126    	; 0x3e1a <emberProcessCommandString+0x190>
        goto END_ARGUMENT;
      } else if (isEol) {
    3d9c:	ff 20       	and	r15, r15
    3d9e:	09 f4       	brne	.+2      	; 0x3da2 <emberProcessCommandString+0x118>
    3da0:	54 c0       	rjmp	.+168    	; 0x3e4a <emberProcessCommandString+0x1c0>
    3da2:	2b c0       	rjmp	.+86     	; 0x3dfa <emberProcessCommandString+0x170>
      } else {
        goto WRITE_TO_BUFFER;
      }

    case CMD_READING_HEX_STRING: {
      bool waitingForLowNibble = (commandState.hexHighNibble != 0xFF);
    3da4:	40 91 09 0c 	lds	r20, 0x0C09
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	4f 3f       	cpi	r20, 0xFF	; 255
    3dac:	09 f0       	breq	.+2      	; 0x3db0 <emberProcessCommandString+0x126>
    3dae:	31 e0       	ldi	r19, 0x01	; 1
      if (next == '}') {
    3db0:	8d 37       	cpi	r24, 0x7D	; 125
    3db2:	19 f4       	brne	.+6      	; 0x3dba <emberProcessCommandString+0x130>
        if (waitingForLowNibble) {
    3db4:	33 23       	and	r19, r19
    3db6:	89 f1       	breq	.+98     	; 0x3e1a <emberProcessCommandString+0x190>
    3db8:	20 c0       	rjmp	.+64     	; 0x3dfa <emberProcessCommandString+0x170>
}

// Returns a value > 15 if ch is not a hex digit.
static uint8_t hexToInt(uint8_t ch)
{
  return ch - (ch >= 'a' ? 'a' - 10
    3dba:	81 36       	cpi	r24, 0x61	; 97
    3dbc:	10 f0       	brcs	.+4      	; 0x3dc2 <emberProcessCommandString+0x138>
    3dbe:	97 e5       	ldi	r25, 0x57	; 87
    3dc0:	09 c0       	rjmp	.+18     	; 0x3dd4 <emberProcessCommandString+0x14a>
    3dc2:	81 34       	cpi	r24, 0x41	; 65
    3dc4:	10 f0       	brcs	.+4      	; 0x3dca <emberProcessCommandString+0x140>
    3dc6:	97 e3       	ldi	r25, 0x37	; 55
    3dc8:	05 c0       	rjmp	.+10     	; 0x3dd4 <emberProcessCommandString+0x14a>
    3dca:	8a 33       	cpi	r24, 0x3A	; 58
    3dcc:	10 f0       	brcs	.+4      	; 0x3dd2 <emberProcessCommandString+0x148>
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	01 c0       	rjmp	.+2      	; 0x3dd4 <emberProcessCommandString+0x14a>
    3dd2:	90 e3       	ldi	r25, 0x30	; 48
    3dd4:	89 1b       	sub	r24, r25
          goto READING_TO_EOL;
        }
        goto END_ARGUMENT;
      } else {
        uint8_t value = hexToInt(next);
        if (value < 16) {
    3dd6:	80 31       	cpi	r24, 0x10	; 16
    3dd8:	68 f4       	brcc	.+26     	; 0x3df4 <emberProcessCommandString+0x16a>
          if (waitingForLowNibble) {
    3dda:	33 23       	and	r19, r19
    3ddc:	41 f0       	breq	.+16     	; 0x3dee <emberProcessCommandString+0x164>
            next = (commandState.hexHighNibble << 4) + value;
    3dde:	94 2f       	mov	r25, r20
    3de0:	92 95       	swap	r25
    3de2:	90 7f       	andi	r25, 0xF0	; 240
    3de4:	98 0f       	add	r25, r24
    3de6:	99 83       	std	Y+1, r25	; 0x01
            commandState.hexHighNibble = 0xFF;
    3de8:	80 92 09 0c 	sts	0x0C09, r8
            goto WRITE_TO_BUFFER;
    3dec:	2e c0       	rjmp	.+92     	; 0x3e4a <emberProcessCommandString+0x1c0>
          } else {
            commandState.hexHighNibble = value;
    3dee:	80 93 09 0c 	sts	0x0C09, r24
    3df2:	72 cf       	rjmp	.-284    	; 0x3cd8 <emberProcessCommandString+0x4e>
          }
        } else if (! isSpace) {
    3df4:	22 23       	and	r18, r18
    3df6:	09 f0       	breq	.+2      	; 0x3dfa <emberProcessCommandString+0x170>
    3df8:	6f cf       	rjmp	.-290    	; 0x3cd8 <emberProcessCommandString+0x4e>
          commandState.error = EMBER_CMD_ERR_ARGUMENT_SYNTAX_ERROR;
    3dfa:	e0 92 08 0c 	sts	0x0C08, r14
      }
      break;
    }

    READING_TO_EOL:
      commandState.state = CMD_READING_TO_EOL;
    3dfe:	a0 92 d9 0b 	sts	0x0BD9, r10

    case CMD_READING_TO_EOL:
      if (isEol) {
    3e02:	ff 20       	and	r15, r15
    3e04:	09 f4       	brne	.+2      	; 0x3e08 <emberProcessCommandString+0x17e>
    3e06:	68 cf       	rjmp	.-304    	; 0x3cd8 <emberProcessCommandString+0x4e>
        if (commandState.error != EMBER_CMD_SUCCESS) {
    3e08:	80 91 08 0c 	lds	r24, 0x0C08
    3e0c:	88 23       	and	r24, r24
    3e0e:	11 f0       	breq	.+4      	; 0x3e14 <emberProcessCommandString+0x18a>
          emberCommandErrorHandler(commandState.error);
    3e10:	0e 94 75 1a 	call	0x34ea	; 0x34ea <emberCommandErrorHandler>
        }
        emberCommandReaderInit();
    3e14:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <emberCommandReaderInit>
    3e18:	5f cf       	rjmp	.-322    	; 0x3cd8 <emberProcessCommandString+0x4e>
      }
      break;

    END_ARGUMENT:
      if (commandState.tokenCount == MAX_TOKEN_COUNT) {
    3e1a:	e0 91 06 0c 	lds	r30, 0x0C06
    3e1e:	eb 30       	cpi	r30, 0x0B	; 11
    3e20:	19 f4       	brne	.+6      	; 0x3e28 <emberProcessCommandString+0x19e>
        commandState.error = EMBER_CMD_ERR_WRONG_NUMBER_OF_ARGUMENTS;
    3e22:	c0 92 08 0c 	sts	0x0C08, r12
        goto READING_TO_EOL;
    3e26:	eb cf       	rjmp	.-42     	; 0x3dfe <emberProcessCommandString+0x174>
      }
      commandState.tokenCount += 1;
    3e28:	ef 5f       	subi	r30, 0xFF	; 255
    3e2a:	e0 93 06 0c 	sts	0x0C06, r30
      commandState.tokenIndices[commandState.tokenCount] = commandState.index;
    3e2e:	f0 e0       	ldi	r31, 0x00	; 0
    3e30:	e7 52       	subi	r30, 0x27	; 39
    3e32:	f4 4f       	sbci	r31, 0xF4	; 244
    3e34:	80 91 07 0c 	lds	r24, 0x0C07
    3e38:	81 a3       	std	Z+33, r24	; 0x21
      commandState.state = CMD_AWAITING_ARGUMENT;
    3e3a:	10 92 d9 0b 	sts	0x0BD9, r1
      if (isEol) {
    3e3e:	ff 20       	and	r15, r15
    3e40:	09 f4       	brne	.+2      	; 0x3e44 <emberProcessCommandString+0x1ba>
    3e42:	4a cf       	rjmp	.-364    	; 0x3cd8 <emberProcessCommandString+0x4e>
        callCommandAction();
    3e44:	0e 94 a0 1c 	call	0x3940	; 0x3940 <callCommandAction>
    3e48:	47 cf       	rjmp	.-370    	; 0x3cd8 <emberProcessCommandString+0x4e>
      }
      break;

    WRITE_TO_BUFFER:
      if (commandState.index == EMBER_COMMAND_BUFFER_LENGTH) {
    3e4a:	e0 91 07 0c 	lds	r30, 0x0C07
    3e4e:	e0 32       	cpi	r30, 0x20	; 32
    3e50:	19 f4       	brne	.+6      	; 0x3e58 <emberProcessCommandString+0x1ce>
        commandState.error = EMBER_CMD_ERR_STRING_TOO_LONG;
    3e52:	70 92 08 0c 	sts	0x0C08, r7
        goto READING_TO_EOL;
    3e56:	d3 cf       	rjmp	.-90     	; 0x3dfe <emberProcessCommandString+0x174>
      }
      if (commandState.state == CMD_READING_ARGUMENT) {
    3e58:	80 91 d9 0b 	lds	r24, 0x0BD9
    3e5c:	81 30       	cpi	r24, 0x01	; 1
    3e5e:	39 f4       	brne	.+14     	; 0x3e6e <emberProcessCommandString+0x1e4>
        next = charDowncase(next);
    3e60:	89 81       	ldd	r24, Y+1	; 0x01
  }
}

static uint8_t charDowncase(uint8_t c)
{
  if ('A' <= c && c <= 'Z')
    3e62:	98 2f       	mov	r25, r24
    3e64:	91 54       	subi	r25, 0x41	; 65
    3e66:	9a 31       	cpi	r25, 0x1A	; 26
    3e68:	08 f4       	brcc	.+2      	; 0x3e6c <emberProcessCommandString+0x1e2>
    return c + 'a' - 'A';
    3e6a:	80 5e       	subi	r24, 0xE0	; 224
      if (commandState.index == EMBER_COMMAND_BUFFER_LENGTH) {
        commandState.error = EMBER_CMD_ERR_STRING_TOO_LONG;
        goto READING_TO_EOL;
      }
      if (commandState.state == CMD_READING_ARGUMENT) {
        next = charDowncase(next);
    3e6c:	89 83       	std	Y+1, r24	; 0x01
      }
      commandState.buffer[commandState.index] = next;
    3e6e:	f0 e0       	ldi	r31, 0x00	; 0
    3e70:	e7 52       	subi	r30, 0x27	; 39
    3e72:	f4 4f       	sbci	r31, 0xF4	; 244
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	81 83       	std	Z+1, r24	; 0x01
      commandState.index += 1;
    3e78:	80 91 07 0c 	lds	r24, 0x0C07
    3e7c:	8f 5f       	subi	r24, 0xFF	; 255
    3e7e:	80 93 07 0c 	sts	0x0C07, r24
    3e82:	2a cf       	rjmp	.-428    	; 0x3cd8 <emberProcessCommandString+0x4e>

    default: {
    }
    } //close switch.
  }
}
    3e84:	8f 2d       	mov	r24, r15
    3e86:	0f 90       	pop	r0
    3e88:	cf 91       	pop	r28
    3e8a:	df 91       	pop	r29
    3e8c:	1f 91       	pop	r17
    3e8e:	0f 91       	pop	r16
    3e90:	ff 90       	pop	r15
    3e92:	ef 90       	pop	r14
    3e94:	df 90       	pop	r13
    3e96:	cf 90       	pop	r12
    3e98:	bf 90       	pop	r11
    3e9a:	af 90       	pop	r10
    3e9c:	9f 90       	pop	r9
    3e9e:	8f 90       	pop	r8
    3ea0:	7f 90       	pop	r7
    3ea2:	5f 90       	pop	r5
    3ea4:	4f 90       	pop	r4
    3ea6:	08 95       	ret

00003ea8 <sendConfigLink>:
	configGraph->neigh2 = emberUnsignedCommandArgument(5);
	configGraph->neigh3 = emberUnsignedCommandArgument(6);
	length=PKT_DATA_START+ sizeof(MESSAGE) + sizeof(CONFIG_GRAPH) -1; // -1 because CONFIG_GRAPH is casted to the last byte of MESSAGE
	sendPacket(emberUnsignedCommandArgument(0),emberUnsignedCommandArgument(1), length, tx_buf, NULL);
}
void sendConfigLink(void){
    3ea8:	9f 92       	push	r9
    3eaa:	af 92       	push	r10
    3eac:	bf 92       	push	r11
    3eae:	cf 92       	push	r12
    3eb0:	df 92       	push	r13
    3eb2:	ef 92       	push	r14
    3eb4:	ff 92       	push	r15
    3eb6:	0f 93       	push	r16
    3eb8:	1f 93       	push	r17
    3eba:	df 93       	push	r29
    3ebc:	cf 93       	push	r28
    3ebe:	0f 92       	push	r0
    3ec0:	cd b7       	in	r28, 0x3d	; 61
    3ec2:	de b7       	in	r29, 0x3e	; 62

	uint16_t destId = emberUnsignedCommandArgument(0);
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
			if (destId == dmo.dlAddress) {
    3eca:	20 91 65 0f 	lds	r18, 0x0F65
    3ece:	30 91 66 0f 	lds	r19, 0x0F66
    3ed2:	26 17       	cp	r18, r22
    3ed4:	37 07       	cpc	r19, r23
    3ed6:	f9 f4       	brne	.+62     	; 0x3f16 <sendConfigLink+0x6e>
				addLink(emberUnsignedCommandArgument(2),emberUnsignedCommandArgument(3),emberUnsignedCommandArgument(4),emberUnsignedCommandArgument(5),emberUnsignedCommandArgument(6));
    3ed8:	82 e0       	ldi	r24, 0x02	; 2
    3eda:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3ede:	96 2e       	mov	r9, r22
    3ee0:	83 e0       	ldi	r24, 0x03	; 3
    3ee2:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3ee6:	5b 01       	movw	r10, r22
    3ee8:	6c 01       	movw	r12, r24
    3eea:	84 e0       	ldi	r24, 0x04	; 4
    3eec:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3ef0:	7b 01       	movw	r14, r22
    3ef2:	8c 01       	movw	r16, r24
    3ef4:	85 e0       	ldi	r24, 0x05	; 5
    3ef6:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3efa:	26 2f       	mov	r18, r22
    3efc:	86 e0       	ldi	r24, 0x06	; 6
    3efe:	29 83       	std	Y+1, r18	; 0x01
    3f00:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3f04:	96 2f       	mov	r25, r22
    3f06:	89 2d       	mov	r24, r9
    3f08:	b5 01       	movw	r22, r10
    3f0a:	a7 01       	movw	r20, r14
    3f0c:	29 81       	ldd	r18, Y+1	; 0x01
    3f0e:	09 2f       	mov	r16, r25
    3f10:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <addLink>
				return;
    3f14:	32 c0       	rjmp	.+100    	; 0x3f7a <sendConfigLink+0xd2>
			}
	MESSAGE *message;
	uint8_t length;
	message = &tx_buf[PKT_DATA_START];
	message->type = ADD_LINK;
    3f16:	84 e0       	ldi	r24, 0x04	; 4
    3f18:	80 93 5e 0e 	sts	0x0E5E, r24
	CONFIG_LINK* configLink = &message->data;
    3f1c:	3f e5       	ldi	r19, 0x5F	; 95
    3f1e:	a3 2e       	mov	r10, r19
    3f20:	3e e0       	ldi	r19, 0x0E	; 14
    3f22:	b3 2e       	mov	r11, r19
	configLink->slotNumber =  emberUnsignedCommandArgument(2);
    3f24:	82 e0       	ldi	r24, 0x02	; 2
    3f26:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3f2a:	60 93 5f 0e 	sts	0x0E5F, r22
	configLink->neighborId = emberUnsignedCommandArgument(3);
    3f2e:	83 e0       	ldi	r24, 0x03	; 3
    3f30:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3f34:	f5 01       	movw	r30, r10
    3f36:	72 83       	std	Z+2, r23	; 0x02
    3f38:	61 83       	std	Z+1, r22	; 0x01
	configLink->graphId = emberUnsignedCommandArgument(4);
    3f3a:	84 e0       	ldi	r24, 0x04	; 4
    3f3c:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3f40:	f5 01       	movw	r30, r10
    3f42:	63 83       	std	Z+3, r22	; 0x03
	configLink->linkType = emberUnsignedCommandArgument(5);
    3f44:	85 e0       	ldi	r24, 0x05	; 5
    3f46:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3f4a:	f5 01       	movw	r30, r10
    3f4c:	64 83       	std	Z+4, r22	; 0x04
	configLink->graphType = emberUnsignedCommandArgument(6);
    3f4e:	86 e0       	ldi	r24, 0x06	; 6
    3f50:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3f54:	f5 01       	movw	r30, r10
    3f56:	65 83       	std	Z+5, r22	; 0x05
	length=PKT_DATA_START+ sizeof(MESSAGE) + sizeof(CONFIG_LINK) -1; // -1 because CONFIG_LINK is casted to the last byte of MESSAGE
	sendPacket(emberUnsignedCommandArgument(0),emberUnsignedCommandArgument(1), length, tx_buf, NULL);
    3f58:	80 e0       	ldi	r24, 0x00	; 0
    3f5a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3f5e:	7b 01       	movw	r14, r22
    3f60:	8c 01       	movw	r16, r24
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3f68:	c7 01       	movw	r24, r14
    3f6a:	4e e0       	ldi	r20, 0x0E	; 14
    3f6c:	95 01       	movw	r18, r10
    3f6e:	28 50       	subi	r18, 0x08	; 8
    3f70:	30 40       	sbci	r19, 0x00	; 0
    3f72:	00 e0       	ldi	r16, 0x00	; 0
    3f74:	10 e0       	ldi	r17, 0x00	; 0
    3f76:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <sendPacket>

}
    3f7a:	0f 90       	pop	r0
    3f7c:	cf 91       	pop	r28
    3f7e:	df 91       	pop	r29
    3f80:	1f 91       	pop	r17
    3f82:	0f 91       	pop	r16
    3f84:	ff 90       	pop	r15
    3f86:	ef 90       	pop	r14
    3f88:	df 90       	pop	r13
    3f8a:	cf 90       	pop	r12
    3f8c:	bf 90       	pop	r11
    3f8e:	af 90       	pop	r10
    3f90:	9f 90       	pop	r9
    3f92:	08 95       	ret

00003f94 <flushCandidateTable>:
	sendPacket(destId,emberUnsignedCommandArgument(1), length, tx_buf, NULL);

}


void flushCandidateTable(void){
    3f94:	ef 92       	push	r14
    3f96:	ff 92       	push	r15
    3f98:	0f 93       	push	r16
    3f9a:	1f 93       	push	r17

	uint16_t destId = emberUnsignedCommandArgument(0);
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
    3f9e:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3fa2:	7b 01       	movw	r14, r22
    3fa4:	8c 01       	movw	r16, r24
	if (destId == dmo.dlAddress) {
    3fa6:	80 91 65 0f 	lds	r24, 0x0F65
    3faa:	90 91 66 0f 	lds	r25, 0x0F66
    3fae:	8e 15       	cp	r24, r14
    3fb0:	9f 05       	cpc	r25, r15
    3fb2:	71 f0       	breq	.+28     	; 0x3fd0 <flushCandidateTable+0x3c>
		return;
	}
	MESSAGE *message;
	uint8_t length;
	message = &tx_buf[PKT_DATA_START];
	message->type = FLUSH_CANDIDATE_TABLE;
    3fb4:	85 e0       	ldi	r24, 0x05	; 5
    3fb6:	80 93 5e 0e 	sts	0x0E5E, r24
	//CONFIG_NEIGHBOR* configNeighbor = &message->data;
	//configNeighbor->neighborId = emberUnsignedCommandArgument(2);;
	length=PKT_DATA_START+ sizeof(MESSAGE) ;
	sendPacket(destId,emberUnsignedCommandArgument(1), length, tx_buf, NULL);
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    3fc0:	c7 01       	movw	r24, r14
    3fc2:	49 e0       	ldi	r20, 0x09	; 9
    3fc4:	27 e5       	ldi	r18, 0x57	; 87
    3fc6:	3e e0       	ldi	r19, 0x0E	; 14
    3fc8:	00 e0       	ldi	r16, 0x00	; 0
    3fca:	10 e0       	ldi	r17, 0x00	; 0
    3fcc:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <sendPacket>

}
    3fd0:	1f 91       	pop	r17
    3fd2:	0f 91       	pop	r16
    3fd4:	ff 90       	pop	r15
    3fd6:	ef 90       	pop	r14
    3fd8:	08 95       	ret

00003fda <sendConfigGraph>:

//uint16_t dest, uint8_t graphId, uint8_t graphId, uint8_t neighborCount, uint16_t neigh1, uint16_t neigh2, uint16_t neigh3
void sendConfigGraph(void){
    3fda:	4f 92       	push	r4
    3fdc:	5f 92       	push	r5
    3fde:	6f 92       	push	r6
    3fe0:	7f 92       	push	r7
    3fe2:	8f 92       	push	r8
    3fe4:	9f 92       	push	r9
    3fe6:	af 92       	push	r10
    3fe8:	bf 92       	push	r11
    3fea:	df 92       	push	r13
    3fec:	ef 92       	push	r14
    3fee:	ff 92       	push	r15
    3ff0:	0f 93       	push	r16
    3ff2:	1f 93       	push	r17
    3ff4:	df 93       	push	r29
    3ff6:	cf 93       	push	r28
    3ff8:	00 d0       	rcall	.+0      	; 0x3ffa <sendConfigGraph+0x20>
    3ffa:	00 d0       	rcall	.+0      	; 0x3ffc <sendConfigGraph+0x22>
    3ffc:	cd b7       	in	r28, 0x3d	; 61
    3ffe:	de b7       	in	r29, 0x3e	; 62

	uint16_t destId = emberUnsignedCommandArgument(0);
    4000:	80 e0       	ldi	r24, 0x00	; 0
    4002:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
		if (destId == dmo.dlAddress) {
    4006:	20 91 65 0f 	lds	r18, 0x0F65
    400a:	30 91 66 0f 	lds	r19, 0x0F66
    400e:	26 17       	cp	r18, r22
    4010:	37 07       	cpc	r19, r23
    4012:	19 f5       	brne	.+70     	; 0x405a <sendConfigGraph+0x80>
			addGraph(emberUnsignedCommandArgument(2),emberUnsignedCommandArgument(3),emberUnsignedCommandArgument(4),emberUnsignedCommandArgument(5),emberUnsignedCommandArgument(6));
    4014:	82 e0       	ldi	r24, 0x02	; 2
    4016:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    401a:	4b 01       	movw	r8, r22
    401c:	5c 01       	movw	r10, r24
    401e:	83 e0       	ldi	r24, 0x03	; 3
    4020:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    4024:	d6 2e       	mov	r13, r22
    4026:	84 e0       	ldi	r24, 0x04	; 4
    4028:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    402c:	7b 01       	movw	r14, r22
    402e:	8c 01       	movw	r16, r24
    4030:	85 e0       	ldi	r24, 0x05	; 5
    4032:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    4036:	69 83       	std	Y+1, r22	; 0x01
    4038:	7a 83       	std	Y+2, r23	; 0x02
    403a:	8b 83       	std	Y+3, r24	; 0x03
    403c:	9c 83       	std	Y+4, r25	; 0x04
    403e:	86 e0       	ldi	r24, 0x06	; 6
    4040:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    4044:	2b 01       	movw	r4, r22
    4046:	3c 01       	movw	r6, r24
    4048:	c4 01       	movw	r24, r8
    404a:	6d 2d       	mov	r22, r13
    404c:	a7 01       	movw	r20, r14
    404e:	29 81       	ldd	r18, Y+1	; 0x01
    4050:	3a 81       	ldd	r19, Y+2	; 0x02
    4052:	82 01       	movw	r16, r4
    4054:	0e 94 0d 0c 	call	0x181a	; 0x181a <addGraph>
			return;
    4058:	34 c0       	rjmp	.+104    	; 0x40c2 <sendConfigGraph+0xe8>
		}
	MESSAGE *message;
	uint8_t length;
	message = &tx_buf[PKT_DATA_START];
	message->type = ADD_GRAPH;
    405a:	83 e0       	ldi	r24, 0x03	; 3
    405c:	80 93 5e 0e 	sts	0x0E5E, r24
	CONFIG_GRAPH* configGraph = &message->data;
    4060:	4f e5       	ldi	r20, 0x5F	; 95
    4062:	84 2e       	mov	r8, r20
    4064:	4e e0       	ldi	r20, 0x0E	; 14
    4066:	94 2e       	mov	r9, r20
	configGraph->graphId =  emberUnsignedCommandArgument(2);
    4068:	82 e0       	ldi	r24, 0x02	; 2
    406a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    406e:	60 93 5f 0e 	sts	0x0E5F, r22
	configGraph->neighborCount = emberUnsignedCommandArgument(3);
    4072:	83 e0       	ldi	r24, 0x03	; 3
    4074:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    4078:	f4 01       	movw	r30, r8
    407a:	61 83       	std	Z+1, r22	; 0x01
	configGraph->neigh1 = emberUnsignedCommandArgument(4);
    407c:	84 e0       	ldi	r24, 0x04	; 4
    407e:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    4082:	f4 01       	movw	r30, r8
    4084:	73 83       	std	Z+3, r23	; 0x03
    4086:	62 83       	std	Z+2, r22	; 0x02
	configGraph->neigh2 = emberUnsignedCommandArgument(5);
    4088:	85 e0       	ldi	r24, 0x05	; 5
    408a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    408e:	f4 01       	movw	r30, r8
    4090:	75 83       	std	Z+5, r23	; 0x05
    4092:	64 83       	std	Z+4, r22	; 0x04
	configGraph->neigh3 = emberUnsignedCommandArgument(6);
    4094:	86 e0       	ldi	r24, 0x06	; 6
    4096:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    409a:	f4 01       	movw	r30, r8
    409c:	77 83       	std	Z+7, r23	; 0x07
    409e:	66 83       	std	Z+6, r22	; 0x06
	length=PKT_DATA_START+ sizeof(MESSAGE) + sizeof(CONFIG_GRAPH) -1; // -1 because CONFIG_GRAPH is casted to the last byte of MESSAGE
	sendPacket(emberUnsignedCommandArgument(0),emberUnsignedCommandArgument(1), length, tx_buf, NULL);
    40a0:	80 e0       	ldi	r24, 0x00	; 0
    40a2:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    40a6:	7b 01       	movw	r14, r22
    40a8:	8c 01       	movw	r16, r24
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    40b0:	c7 01       	movw	r24, r14
    40b2:	40 e1       	ldi	r20, 0x10	; 16
    40b4:	94 01       	movw	r18, r8
    40b6:	28 50       	subi	r18, 0x08	; 8
    40b8:	30 40       	sbci	r19, 0x00	; 0
    40ba:	00 e0       	ldi	r16, 0x00	; 0
    40bc:	10 e0       	ldi	r17, 0x00	; 0
    40be:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <sendPacket>
}
    40c2:	0f 90       	pop	r0
    40c4:	0f 90       	pop	r0
    40c6:	0f 90       	pop	r0
    40c8:	0f 90       	pop	r0
    40ca:	cf 91       	pop	r28
    40cc:	df 91       	pop	r29
    40ce:	1f 91       	pop	r17
    40d0:	0f 91       	pop	r16
    40d2:	ff 90       	pop	r15
    40d4:	ef 90       	pop	r14
    40d6:	df 90       	pop	r13
    40d8:	bf 90       	pop	r11
    40da:	af 90       	pop	r10
    40dc:	9f 90       	pop	r9
    40de:	8f 90       	pop	r8
    40e0:	7f 90       	pop	r7
    40e2:	6f 90       	pop	r6
    40e4:	5f 90       	pop	r5
    40e6:	4f 90       	pop	r4
    40e8:	08 95       	ret

000040ea <sendConfigNeighbor>:
	  	sendPacket(emberUnsignedCommandArgument(0),emberUnsignedCommandArgument(1), length, tx_buf, NULL);
}


// uint16_t dest, uint8_t graphId ,uint16_t index
void sendConfigNeighbor(void){
    40ea:	8f 92       	push	r8
    40ec:	af 92       	push	r10
    40ee:	cf 92       	push	r12
    40f0:	ef 92       	push	r14
    40f2:	ff 92       	push	r15
    40f4:	0f 93       	push	r16
    40f6:	1f 93       	push	r17


	uint16_t destId = emberUnsignedCommandArgument(0);
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    40fe:	7b 01       	movw	r14, r22
    4100:	8c 01       	movw	r16, r24
	if (destId == dmo.dlAddress) {
    4102:	80 91 65 0f 	lds	r24, 0x0F65
    4106:	90 91 66 0f 	lds	r25, 0x0F66
    410a:	8e 15       	cp	r24, r14
    410c:	9f 05       	cpc	r25, r15
    410e:	d9 f4       	brne	.+54     	; 0x4146 <sendConfigNeighbor+0x5c>
		  addNeighbor(emberUnsignedCommandArgument(2),0,0,0,false,0,0,0);		//Add a neighbor for myself and return if this is my address
    4110:	82 e0       	ldi	r24, 0x02	; 2
    4112:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    4116:	dc 01       	movw	r26, r24
    4118:	cb 01       	movw	r24, r22
    411a:	00 d0       	rcall	.+0      	; 0x411c <sendConfigNeighbor+0x32>
    411c:	ed b7       	in	r30, 0x3d	; 61
    411e:	fe b7       	in	r31, 0x3e	; 62
    4120:	11 82       	std	Z+1, r1	; 0x01
    4122:	12 82       	std	Z+2, r1	; 0x02
    4124:	00 e0       	ldi	r16, 0x00	; 0
    4126:	10 e0       	ldi	r17, 0x00	; 0
    4128:	20 e0       	ldi	r18, 0x00	; 0
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	40 e0       	ldi	r20, 0x00	; 0
    412e:	50 e0       	ldi	r21, 0x00	; 0
    4130:	60 e0       	ldi	r22, 0x00	; 0
    4132:	70 e0       	ldi	r23, 0x00	; 0
    4134:	ee 24       	eor	r14, r14
    4136:	cc 24       	eor	r12, r12
    4138:	aa 24       	eor	r10, r10
    413a:	88 24       	eor	r8, r8
    413c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <addNeighbor>
		return;
    4140:	0f 90       	pop	r0
    4142:	0f 90       	pop	r0
    4144:	14 c0       	rjmp	.+40     	; 0x416e <sendConfigNeighbor+0x84>
	}
	MESSAGE *message;
	uint8_t length;
	message = &tx_buf[PKT_DATA_START];
	message->type = ADD_NEIGHBOR;
    4146:	82 e0       	ldi	r24, 0x02	; 2
    4148:	80 93 5e 0e 	sts	0x0E5E, r24
	CONFIG_NEIGHBOR* configNeighbor = &message->data;
	configNeighbor->neighborId = emberUnsignedCommandArgument(2);;
    414c:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    4150:	70 93 60 0e 	sts	0x0E60, r23
    4154:	60 93 5f 0e 	sts	0x0E5F, r22
	length=PKT_DATA_START+ sizeof(MESSAGE) + sizeof(CONFIG_NEIGHBOR) -1; // -1 because CONFIG_NEIGHBOR is casted to the last byte of MESSAGE
	sendPacket(destId,emberUnsignedCommandArgument(1), length, tx_buf, NULL);
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    415e:	c7 01       	movw	r24, r14
    4160:	4a e0       	ldi	r20, 0x0A	; 10
    4162:	27 e5       	ldi	r18, 0x57	; 87
    4164:	3e e0       	ldi	r19, 0x0E	; 14
    4166:	00 e0       	ldi	r16, 0x00	; 0
    4168:	10 e0       	ldi	r17, 0x00	; 0
    416a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <sendPacket>

}
    416e:	1f 91       	pop	r17
    4170:	0f 91       	pop	r16
    4172:	ff 90       	pop	r15
    4174:	ef 90       	pop	r14
    4176:	cf 90       	pop	r12
    4178:	af 90       	pop	r10
    417a:	8f 90       	pop	r8
    417c:	08 95       	ret

0000417e <sendDummyPacket>:
		printf ("Arg1:%d  Arg2:%d\n\r", arg1, arg2);
	}

}

void sendDummyPacket(void){
    417e:	cf 92       	push	r12
    4180:	df 92       	push	r13
    4182:	ef 92       	push	r14
    4184:	ff 92       	push	r15
    4186:	0f 93       	push	r16
    4188:	1f 93       	push	r17
    418a:	cf 93       	push	r28
    418c:	df 93       	push	r29

	MESSAGE *message;
	uint8_t length;
		message = &tx_buf[PKT_DATA_START];
    418e:	0e e5       	ldi	r16, 0x5E	; 94
    4190:	1e e0       	ldi	r17, 0x0E	; 14
		message->type = DUMMY_PAYLOAD;
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	80 93 5e 0e 	sts	0x0E5E, r24
		sprintf( &message->data,"node %d,%c",1,cnt1++);
    4198:	80 91 d7 0b 	lds	r24, 0x0BD7
    419c:	90 91 d8 0b 	lds	r25, 0x0BD8
    41a0:	9c 01       	movw	r18, r24
    41a2:	2f 5f       	subi	r18, 0xFF	; 255
    41a4:	3f 4f       	sbci	r19, 0xFF	; 255
    41a6:	30 93 d8 0b 	sts	0x0BD8, r19
    41aa:	20 93 d7 0b 	sts	0x0BD7, r18
    41ae:	2d b7       	in	r18, 0x3d	; 61
    41b0:	3e b7       	in	r19, 0x3e	; 62
    41b2:	28 50       	subi	r18, 0x08	; 8
    41b4:	30 40       	sbci	r19, 0x00	; 0
    41b6:	0f b6       	in	r0, 0x3f	; 63
    41b8:	f8 94       	cli
    41ba:	3e bf       	out	0x3e, r19	; 62
    41bc:	0f be       	out	0x3f, r0	; 63
    41be:	2d bf       	out	0x3d, r18	; 61
    41c0:	ed b7       	in	r30, 0x3d	; 61
    41c2:	fe b7       	in	r31, 0x3e	; 62
    41c4:	31 96       	adiw	r30, 0x01	; 1
    41c6:	98 01       	movw	r18, r16
    41c8:	2f 5f       	subi	r18, 0xFF	; 255
    41ca:	3f 4f       	sbci	r19, 0xFF	; 255
    41cc:	ad b7       	in	r26, 0x3d	; 61
    41ce:	be b7       	in	r27, 0x3e	; 62
    41d0:	12 96       	adiw	r26, 0x02	; 2
    41d2:	3c 93       	st	X, r19
    41d4:	2e 93       	st	-X, r18
    41d6:	11 97       	sbiw	r26, 0x01	; 1
    41d8:	2d e9       	ldi	r18, 0x9D	; 157
    41da:	38 e0       	ldi	r19, 0x08	; 8
    41dc:	33 83       	std	Z+3, r19	; 0x03
    41de:	22 83       	std	Z+2, r18	; 0x02
    41e0:	21 e0       	ldi	r18, 0x01	; 1
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	35 83       	std	Z+5, r19	; 0x05
    41e6:	24 83       	std	Z+4, r18	; 0x04
    41e8:	97 83       	std	Z+7, r25	; 0x07
    41ea:	86 83       	std	Z+6, r24	; 0x06
    41ec:	0e 94 88 48 	call	0x9110	; 0x9110 <sprintf>
	  	length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+2; //1 for \0 + 1 for message->type
    41f0:	e8 01       	movw	r28, r16
    41f2:	09 90       	ld	r0, Y+
    41f4:	00 20       	and	r0, r0
    41f6:	e9 f7       	brne	.-6      	; 0x41f2 <sendDummyPacket+0x74>
    41f8:	21 97       	sbiw	r28, 0x01	; 1
    41fa:	c0 1b       	sub	r28, r16
    41fc:	d1 0b       	sbc	r29, r17
	  	sendPacket(emberUnsignedCommandArgument(0),emberUnsignedCommandArgument(1), length, tx_buf, NULL);
    41fe:	2d b7       	in	r18, 0x3d	; 61
    4200:	3e b7       	in	r19, 0x3e	; 62
    4202:	28 5f       	subi	r18, 0xF8	; 248
    4204:	3f 4f       	sbci	r19, 0xFF	; 255
    4206:	0f b6       	in	r0, 0x3f	; 63
    4208:	f8 94       	cli
    420a:	3e bf       	out	0x3e, r19	; 62
    420c:	0f be       	out	0x3f, r0	; 63
    420e:	2d bf       	out	0x3d, r18	; 61
    4210:	80 e0       	ldi	r24, 0x00	; 0
    4212:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    4216:	6b 01       	movw	r12, r22
    4218:	7c 01       	movw	r14, r24
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	0e 94 70 19 	call	0x32e0	; 0x32e0 <emberUnsignedCommandArgument>
    4220:	ce 01       	movw	r24, r28
    4222:	87 5f       	subi	r24, 0xF7	; 247
    4224:	48 2f       	mov	r20, r24
    4226:	98 01       	movw	r18, r16
    4228:	27 50       	subi	r18, 0x07	; 7
    422a:	30 40       	sbci	r19, 0x00	; 0
    422c:	c6 01       	movw	r24, r12
    422e:	00 e0       	ldi	r16, 0x00	; 0
    4230:	10 e0       	ldi	r17, 0x00	; 0
    4232:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <sendPacket>
}
    4236:	df 91       	pop	r29
    4238:	cf 91       	pop	r28
    423a:	1f 91       	pop	r17
    423c:	0f 91       	pop	r16
    423e:	ff 90       	pop	r15
    4240:	ef 90       	pop	r14
    4242:	df 90       	pop	r13
    4244:	cf 90       	pop	r12
    4246:	08 95       	ret

00004248 <halRfSetChannel>:
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	9c 01       	movw	r18, r24
    424c:	2b 50       	subi	r18, 0x0B	; 11
    424e:	30 40       	sbci	r19, 0x00	; 0
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
    4250:	22 0f       	add	r18, r18
    4252:	33 1f       	adc	r19, r19
    4254:	22 0f       	add	r18, r18
    4256:	33 1f       	adc	r19, r19
    4258:	86 5a       	subi	r24, 0xA6	; 166
    425a:	9e 4b       	sbci	r25, 0xBE	; 190
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
    425c:	82 0f       	add	r24, r18
    425e:	93 1f       	adc	r25, r19
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
    4260:	f8 94       	cli
	FASTSPI_SETREG(CC2420_FSCTRL, f);
    4262:	40 98       	cbi	0x08, 0	; 8
    4264:	28 e1       	ldi	r18, 0x18	; 24
    4266:	2e bd       	out	0x2e, r18	; 46
    4268:	0d b4       	in	r0, 0x2d	; 45
    426a:	07 fe       	sbrs	r0, 7
    426c:	fd cf       	rjmp	.-6      	; 0x4268 <halRfSetChannel+0x20>
    426e:	9e bd       	out	0x2e, r25	; 46
    4270:	0d b4       	in	r0, 0x2d	; 45
    4272:	07 fe       	sbrs	r0, 7
    4274:	fd cf       	rjmp	.-6      	; 0x4270 <halRfSetChannel+0x28>
    4276:	8e bd       	out	0x2e, r24	; 46
    4278:	0d b4       	in	r0, 0x2d	; 45
    427a:	07 fe       	sbrs	r0, 7
    427c:	fd cf       	rjmp	.-6      	; 0x4278 <halRfSetChannel+0x30>
    427e:	40 9a       	sbi	0x08, 0	; 8
	ENABLE_GLOBAL_INT();
    4280:	78 94       	sei

} // rfSetChannel
    4282:	08 95       	ret

00004284 <halRfWaitForCrystalOscillator>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
    4284:	f8 94       	cli
	    FASTSPI_UPD_STATUS(spiStatusByte);
    4286:	40 98       	cbi	0x08, 0	; 8
    4288:	1e bc       	out	0x2e, r1	; 46
    428a:	0d b4       	in	r0, 0x2d	; 45
    428c:	07 fe       	sbrs	r0, 7
    428e:	fd cf       	rjmp	.-6      	; 0x428a <halRfWaitForCrystalOscillator+0x6>
    4290:	8e b5       	in	r24, 0x2e	; 46
    4292:	40 9a       	sbi	0x08, 0	; 8
	    ENABLE_GLOBAL_INT();
    4294:	78 94       	sei
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    4296:	86 ff       	sbrs	r24, 6
    4298:	f5 cf       	rjmp	.-22     	; 0x4284 <halRfWaitForCrystalOscillator>

} // halRfWaitForCrystalOscillator
    429a:	08 95       	ret

0000429c <rf_security_last_pkt_status>:

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
}
    429c:	80 91 c5 1e 	lds	r24, 0x1EC5
    42a0:	08 95       	ret

000042a2 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    42a2:	fc 01       	movw	r30, r24
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
    42a4:	40 98       	cbi	0x08, 0	; 8
    42a6:	89 ec       	ldi	r24, 0xC9	; 201
    42a8:	8e bd       	out	0x2e, r24	; 46
    42aa:	0d b4       	in	r0, 0x2d	; 45
    42ac:	07 fe       	sbrs	r0, 7
    42ae:	fd cf       	rjmp	.-6      	; 0x42aa <rf_security_set_ctr_counter+0x8>
    42b0:	80 e8       	ldi	r24, 0x80	; 128
    42b2:	8e bd       	out	0x2e, r24	; 46
    42b4:	0d b4       	in	r0, 0x2d	; 45
    42b6:	07 fe       	sbrs	r0, 7
    42b8:	fd cf       	rjmp	.-6      	; 0x42b4 <rf_security_set_ctr_counter+0x12>
    42ba:	82 e0       	ldi	r24, 0x02	; 2
    42bc:	81 50       	subi	r24, 0x01	; 1
    42be:	df 01       	movw	r26, r30
    42c0:	a8 0f       	add	r26, r24
    42c2:	b1 1d       	adc	r27, r1
    42c4:	9c 91       	ld	r25, X
    42c6:	9e bd       	out	0x2e, r25	; 46
    42c8:	0d b4       	in	r0, 0x2d	; 45
    42ca:	07 fe       	sbrs	r0, 7
    42cc:	fd cf       	rjmp	.-6      	; 0x42c8 <rf_security_set_ctr_counter+0x26>
    42ce:	88 23       	and	r24, r24
    42d0:	a9 f7       	brne	.-22     	; 0x42bc <rf_security_set_ctr_counter+0x1a>
    42d2:	40 9a       	sbi	0x08, 0	; 8
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
    42d4:	40 98       	cbi	0x08, 0	; 8
    42d6:	8b ec       	ldi	r24, 0xCB	; 203
    42d8:	8e bd       	out	0x2e, r24	; 46
    42da:	0d b4       	in	r0, 0x2d	; 45
    42dc:	07 fe       	sbrs	r0, 7
    42de:	fd cf       	rjmp	.-6      	; 0x42da <rf_security_set_ctr_counter+0x38>
    42e0:	80 e8       	ldi	r24, 0x80	; 128
    42e2:	8e bd       	out	0x2e, r24	; 46
    42e4:	0d b4       	in	r0, 0x2d	; 45
    42e6:	07 fe       	sbrs	r0, 7
    42e8:	fd cf       	rjmp	.-6      	; 0x42e4 <rf_security_set_ctr_counter+0x42>
    42ea:	82 e0       	ldi	r24, 0x02	; 2
    42ec:	81 50       	subi	r24, 0x01	; 1
    42ee:	df 01       	movw	r26, r30
    42f0:	a8 0f       	add	r26, r24
    42f2:	b1 1d       	adc	r27, r1
    42f4:	12 96       	adiw	r26, 0x02	; 2
    42f6:	9c 91       	ld	r25, X
    42f8:	12 97       	sbiw	r26, 0x02	; 2
    42fa:	9e bd       	out	0x2e, r25	; 46
    42fc:	0d b4       	in	r0, 0x2d	; 45
    42fe:	07 fe       	sbrs	r0, 7
    4300:	fd cf       	rjmp	.-6      	; 0x42fc <rf_security_set_ctr_counter+0x5a>
    4302:	88 23       	and	r24, r24
    4304:	99 f7       	brne	.-26     	; 0x42ec <rf_security_set_ctr_counter+0x4a>
    4306:	40 9a       	sbi	0x08, 0	; 8
tx_ctr[0]=counter[0];
    4308:	80 81       	ld	r24, Z
    430a:	80 93 c6 1e 	sts	0x1EC6, r24
tx_ctr[1]=counter[1];
    430e:	81 81       	ldd	r24, Z+1	; 0x01
    4310:	80 93 c7 1e 	sts	0x1EC7, r24
tx_ctr[2]=counter[2];
    4314:	82 81       	ldd	r24, Z+2	; 0x02
    4316:	80 93 c8 1e 	sts	0x1EC8, r24
tx_ctr[3]=counter[3];
    431a:	83 81       	ldd	r24, Z+3	; 0x03
    431c:	80 93 c9 1e 	sts	0x1EC9, r24
}
    4320:	08 95       	ret

00004322 <rf_security_enable>:
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    4322:	40 98       	cbi	0x08, 0	; 8
    4324:	89 e1       	ldi	r24, 0x19	; 25
    4326:	8e bd       	out	0x2e, r24	; 46
    4328:	0d b4       	in	r0, 0x2d	; 45
    432a:	07 fe       	sbrs	r0, 7
    432c:	fd cf       	rjmp	.-6      	; 0x4328 <rf_security_enable+0x6>
    432e:	83 e0       	ldi	r24, 0x03	; 3
    4330:	8e bd       	out	0x2e, r24	; 46
    4332:	0d b4       	in	r0, 0x2d	; 45
    4334:	07 fe       	sbrs	r0, 7
    4336:	fd cf       	rjmp	.-6      	; 0x4332 <rf_security_enable+0x10>
    4338:	86 e0       	ldi	r24, 0x06	; 6
    433a:	8e bd       	out	0x2e, r24	; 46
    433c:	0d b4       	in	r0, 0x2d	; 45
    433e:	07 fe       	sbrs	r0, 7
    4340:	fd cf       	rjmp	.-6      	; 0x433c <rf_security_enable+0x1a>
    4342:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
    4344:	40 98       	cbi	0x08, 0	; 8
    4346:	8a e1       	ldi	r24, 0x1A	; 26
    4348:	8e bd       	out	0x2e, r24	; 46
    434a:	0d b4       	in	r0, 0x2d	; 45
    434c:	07 fe       	sbrs	r0, 7
    434e:	fd cf       	rjmp	.-6      	; 0x434a <rf_security_enable+0x28>
    4350:	8e e0       	ldi	r24, 0x0E	; 14
    4352:	8e bd       	out	0x2e, r24	; 46
    4354:	0d b4       	in	r0, 0x2d	; 45
    4356:	07 fe       	sbrs	r0, 7
    4358:	fd cf       	rjmp	.-6      	; 0x4354 <rf_security_enable+0x32>
    435a:	8e e0       	ldi	r24, 0x0E	; 14
    435c:	8e bd       	out	0x2e, r24	; 46
    435e:	0d b4       	in	r0, 0x2d	; 45
    4360:	07 fe       	sbrs	r0, 7
    4362:	fd cf       	rjmp	.-6      	; 0x435e <rf_security_enable+0x3c>
    4364:	40 9a       	sbi	0x08, 0	; 8

security_enable=1;
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	80 93 b6 1e 	sts	0x1EB6, r24
}
    436c:	08 95       	ret

0000436e <rf_security_disable>:



void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
    436e:	40 98       	cbi	0x08, 0	; 8
    4370:	89 e1       	ldi	r24, 0x19	; 25
    4372:	8e bd       	out	0x2e, r24	; 46
    4374:	0d b4       	in	r0, 0x2d	; 45
    4376:	07 fe       	sbrs	r0, 7
    4378:	fd cf       	rjmp	.-6      	; 0x4374 <rf_security_disable+0x6>
    437a:	81 e0       	ldi	r24, 0x01	; 1
    437c:	8e bd       	out	0x2e, r24	; 46
    437e:	0d b4       	in	r0, 0x2d	; 45
    4380:	07 fe       	sbrs	r0, 7
    4382:	fd cf       	rjmp	.-6      	; 0x437e <rf_security_disable+0x10>
    4384:	84 ec       	ldi	r24, 0xC4	; 196
    4386:	8e bd       	out	0x2e, r24	; 46
    4388:	0d b4       	in	r0, 0x2d	; 45
    438a:	07 fe       	sbrs	r0, 7
    438c:	fd cf       	rjmp	.-6      	; 0x4388 <rf_security_disable+0x1a>
    438e:	40 9a       	sbi	0x08, 0	; 8
  security_enable=0;
    4390:	10 92 b6 1e 	sts	0x1EB6, r1
}
    4394:	08 95       	ret

00004396 <rf_get_sem>:
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    4396:	80 91 b4 1e 	lds	r24, 0x1EB4
    439a:	90 91 b5 1e 	lds	r25, 0x1EB5
    439e:	08 95       	ret

000043a0 <rf_addr_decode_enable>:
}


void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
    43a0:	80 91 b7 1e 	lds	r24, 0x1EB7
    43a4:	90 91 b8 1e 	lds	r25, 0x1EB8
    43a8:	98 60       	ori	r25, 0x08	; 8
    43aa:	90 93 b8 1e 	sts	0x1EB8, r25
    43ae:	80 93 b7 1e 	sts	0x1EB7, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    43b2:	40 98       	cbi	0x08, 0	; 8
    43b4:	21 e1       	ldi	r18, 0x11	; 17
    43b6:	2e bd       	out	0x2e, r18	; 46
    43b8:	0d b4       	in	r0, 0x2d	; 45
    43ba:	07 fe       	sbrs	r0, 7
    43bc:	fd cf       	rjmp	.-6      	; 0x43b8 <rf_addr_decode_enable+0x18>
    43be:	9e bd       	out	0x2e, r25	; 46
    43c0:	0d b4       	in	r0, 0x2d	; 45
    43c2:	07 fe       	sbrs	r0, 7
    43c4:	fd cf       	rjmp	.-6      	; 0x43c0 <rf_addr_decode_enable+0x20>
    43c6:	8e bd       	out	0x2e, r24	; 46
    43c8:	0d b4       	in	r0, 0x2d	; 45
    43ca:	07 fe       	sbrs	r0, 7
    43cc:	fd cf       	rjmp	.-6      	; 0x43c8 <rf_addr_decode_enable+0x28>
    43ce:	40 9a       	sbi	0x08, 0	; 8
}
    43d0:	08 95       	ret

000043d2 <rf_addr_decode_disable>:

void rf_addr_decode_disable()
{
    mdmctrl0 &= (~0x0800);
    43d2:	80 91 b7 1e 	lds	r24, 0x1EB7
    43d6:	90 91 b8 1e 	lds	r25, 0x1EB8
    43da:	97 7f       	andi	r25, 0xF7	; 247
    43dc:	90 93 b8 1e 	sts	0x1EB8, r25
    43e0:	80 93 b7 1e 	sts	0x1EB7, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    43e4:	40 98       	cbi	0x08, 0	; 8
    43e6:	21 e1       	ldi	r18, 0x11	; 17
    43e8:	2e bd       	out	0x2e, r18	; 46
    43ea:	0d b4       	in	r0, 0x2d	; 45
    43ec:	07 fe       	sbrs	r0, 7
    43ee:	fd cf       	rjmp	.-6      	; 0x43ea <rf_addr_decode_disable+0x18>
    43f0:	9e bd       	out	0x2e, r25	; 46
    43f2:	0d b4       	in	r0, 0x2d	; 45
    43f4:	07 fe       	sbrs	r0, 7
    43f6:	fd cf       	rjmp	.-6      	; 0x43f2 <rf_addr_decode_disable+0x20>
    43f8:	8e bd       	out	0x2e, r24	; 46
    43fa:	0d b4       	in	r0, 0x2d	; 45
    43fc:	07 fe       	sbrs	r0, 7
    43fe:	fd cf       	rjmp	.-6      	; 0x43fa <rf_addr_decode_disable+0x28>
    4400:	40 9a       	sbi	0x08, 0	; 8
}
    4402:	08 95       	ret

00004404 <rf_auto_ack_enable>:


void rf_auto_ack_enable()
{
    auto_ack_enable=1;
    4404:	81 e0       	ldi	r24, 0x01	; 1
    4406:	80 93 c4 1e 	sts	0x1EC4, r24
    mdmctrl0 |= 0x0010;
    440a:	80 91 b7 1e 	lds	r24, 0x1EB7
    440e:	90 91 b8 1e 	lds	r25, 0x1EB8
    4412:	80 61       	ori	r24, 0x10	; 16
    4414:	90 93 b8 1e 	sts	0x1EB8, r25
    4418:	80 93 b7 1e 	sts	0x1EB7, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
    441c:	40 98       	cbi	0x08, 0	; 8
    441e:	21 e1       	ldi	r18, 0x11	; 17
    4420:	2e bd       	out	0x2e, r18	; 46
    4422:	0d b4       	in	r0, 0x2d	; 45
    4424:	07 fe       	sbrs	r0, 7
    4426:	fd cf       	rjmp	.-6      	; 0x4422 <rf_auto_ack_enable+0x1e>
    4428:	9e bd       	out	0x2e, r25	; 46
    442a:	0d b4       	in	r0, 0x2d	; 45
    442c:	07 fe       	sbrs	r0, 7
    442e:	fd cf       	rjmp	.-6      	; 0x442a <rf_auto_ack_enable+0x26>
    4430:	8e bd       	out	0x2e, r24	; 46
    4432:	0d b4       	in	r0, 0x2d	; 45
    4434:	07 fe       	sbrs	r0, 7
    4436:	fd cf       	rjmp	.-6      	; 0x4432 <rf_auto_ack_enable+0x2e>
    4438:	40 9a       	sbi	0x08, 0	; 8
}
    443a:	08 95       	ret

0000443c <rf_auto_ack_disable>:

void rf_auto_ack_disable()
{
    auto_ack_enable=0;
    443c:	10 92 c4 1e 	sts	0x1EC4, r1
    mdmctrl0 &= (~0x0010);
    4440:	80 91 b7 1e 	lds	r24, 0x1EB7
    4444:	90 91 b8 1e 	lds	r25, 0x1EB8
    4448:	8f 7e       	andi	r24, 0xEF	; 239
    444a:	90 93 b8 1e 	sts	0x1EB8, r25
    444e:	80 93 b7 1e 	sts	0x1EB7, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
    4452:	40 98       	cbi	0x08, 0	; 8
    4454:	21 e1       	ldi	r18, 0x11	; 17
    4456:	2e bd       	out	0x2e, r18	; 46
    4458:	0d b4       	in	r0, 0x2d	; 45
    445a:	07 fe       	sbrs	r0, 7
    445c:	fd cf       	rjmp	.-6      	; 0x4458 <rf_auto_ack_disable+0x1c>
    445e:	9e bd       	out	0x2e, r25	; 46
    4460:	0d b4       	in	r0, 0x2d	; 45
    4462:	07 fe       	sbrs	r0, 7
    4464:	fd cf       	rjmp	.-6      	; 0x4460 <rf_auto_ack_disable+0x24>
    4466:	8e bd       	out	0x2e, r24	; 46
    4468:	0d b4       	in	r0, 0x2d	; 45
    446a:	07 fe       	sbrs	r0, 7
    446c:	fd cf       	rjmp	.-6      	; 0x4468 <rf_auto_ack_disable+0x2c>
    446e:	40 9a       	sbi	0x08, 0	; 8
}
    4470:	08 95       	ret

00004472 <rf_busy>:

}

uint8_t rf_busy()
{
return SFD_IS_1;
    4472:	89 b1       	in	r24, 0x09	; 9
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	26 e0       	ldi	r18, 0x06	; 6
    4478:	96 95       	lsr	r25
    447a:	87 95       	ror	r24
    447c:	2a 95       	dec	r18
    447e:	e1 f7       	brne	.-8      	; 0x4478 <rf_busy+0x6>
}
    4480:	81 70       	andi	r24, 0x01	; 1
    4482:	08 95       	ret

00004484 <rf_rx_check_fifop>:

uint8_t rf_rx_check_fifop()
{
return FIFOP_IS_1;
    4484:	8c b1       	in	r24, 0x0c	; 12
}
    4486:	88 1f       	adc	r24, r24
    4488:	88 27       	eor	r24, r24
    448a:	88 1f       	adc	r24, r24
    448c:	08 95       	ret

0000448e <rf_rx_check_sfd>:


uint8_t rf_rx_check_sfd()
{
return SFD_IS_1;
    448e:	89 b1       	in	r24, 0x09	; 9
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	36 e0       	ldi	r19, 0x06	; 6
    4494:	96 95       	lsr	r25
    4496:	87 95       	ror	r24
    4498:	3a 95       	dec	r19
    449a:	e1 f7       	brne	.-8      	; 0x4494 <rf_rx_check_sfd+0x6>
}
    449c:	81 70       	andi	r24, 0x01	; 1
    449e:	08 95       	ret

000044a0 <rf_rx_packet>:
}

int8_t rf_rx_packet()
{
int8_t tmp;
if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
    44a0:	80 91 ca 1e 	lds	r24, 0x1ECA
    44a4:	88 23       	and	r24, r24
    44a6:	21 f0       	breq	.+8      	; 0x44b0 <rf_rx_packet+0x10>
    44a8:	80 91 ca 1e 	lds	r24, 0x1ECA
    44ac:	10 92 ca 1e 	sts	0x1ECA, r1
return 0;
}
    44b0:	08 95       	ret

000044b2 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    44b2:	40 98       	cbi	0x08, 0	; 8
    44b4:	88 e0       	ldi	r24, 0x08	; 8
    44b6:	8e bd       	out	0x2e, r24	; 46
    44b8:	0d b4       	in	r0, 0x2d	; 45
    44ba:	07 fe       	sbrs	r0, 7
    44bc:	fd cf       	rjmp	.-6      	; 0x44b8 <rf_flush_rx_fifo+0x6>
    44be:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    44c0:	40 98       	cbi	0x08, 0	; 8
    44c2:	88 e0       	ldi	r24, 0x08	; 8
    44c4:	8e bd       	out	0x2e, r24	; 46
    44c6:	0d b4       	in	r0, 0x2d	; 45
    44c8:	07 fe       	sbrs	r0, 7
    44ca:	fd cf       	rjmp	.-6      	; 0x44c6 <rf_flush_rx_fifo+0x14>
    44cc:	40 9a       	sbi	0x08, 0	; 8
}
    44ce:	08 95       	ret

000044d0 <rf_carrier_off>:
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    44d0:	80 91 b4 1e 	lds	r24, 0x1EB4
    44d4:	90 91 b5 1e 	lds	r25, 0x1EB5
    44d8:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); // stop radio
    44dc:	40 98       	cbi	0x08, 0	; 8
    44de:	86 e0       	ldi	r24, 0x06	; 6
    44e0:	8e bd       	out	0x2e, r24	; 46
    44e2:	0d b4       	in	r0, 0x2d	; 45
    44e4:	07 fe       	sbrs	r0, 7
    44e6:	fd cf       	rjmp	.-6      	; 0x44e2 <rf_carrier_off+0x12>
    44e8:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    44ea:	80 91 b4 1e 	lds	r24, 0x1EB4
    44ee:	90 91 b5 1e 	lds	r25, 0x1EB5
    44f2:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
#endif
}
    44f6:	08 95       	ret

000044f8 <rf_carrier_on>:
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    44f8:	80 91 b4 1e 	lds	r24, 0x1EB4
    44fc:	90 91 b5 1e 	lds	r25, 0x1EB5
    4500:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_STXON); // tell radio to start sending
    4504:	40 98       	cbi	0x08, 0	; 8
    4506:	84 e0       	ldi	r24, 0x04	; 4
    4508:	8e bd       	out	0x2e, r24	; 46
    450a:	0d b4       	in	r0, 0x2d	; 45
    450c:	07 fe       	sbrs	r0, 7
    450e:	fd cf       	rjmp	.-6      	; 0x450a <rf_carrier_on+0x12>
    4510:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    4512:	80 91 b4 1e 	lds	r24, 0x1EB4
    4516:	90 91 b5 1e 	lds	r25, 0x1EB5
    451a:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
#endif
}
    451e:	08 95       	ret

00004520 <rf_data_mode>:

/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode() {
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    4520:	80 91 b4 1e 	lds	r24, 0x1EB4
    4524:	90 91 b5 1e 	lds	r25, 0x1EB5
    4528:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    452c:	40 98       	cbi	0x08, 0	; 8
    452e:	86 e0       	ldi	r24, 0x06	; 6
    4530:	8e bd       	out	0x2e, r24	; 46
    4532:	0d b4       	in	r0, 0x2d	; 45
    4534:	07 fe       	sbrs	r0, 7
    4536:	fd cf       	rjmp	.-6      	; 0x4532 <rf_data_mode+0x12>
    4538:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // default MDMCTRL1 value
    453a:	40 98       	cbi	0x08, 0	; 8
    453c:	82 e1       	ldi	r24, 0x12	; 18
    453e:	8e bd       	out	0x2e, r24	; 46
    4540:	0d b4       	in	r0, 0x2d	; 45
    4542:	07 fe       	sbrs	r0, 7
    4544:	fd cf       	rjmp	.-6      	; 0x4540 <rf_data_mode+0x20>
    4546:	85 e0       	ldi	r24, 0x05	; 5
    4548:	8e bd       	out	0x2e, r24	; 46
    454a:	0d b4       	in	r0, 0x2d	; 45
    454c:	07 fe       	sbrs	r0, 7
    454e:	fd cf       	rjmp	.-6      	; 0x454a <rf_data_mode+0x2a>
    4550:	1e bc       	out	0x2e, r1	; 46
    4552:	0d b4       	in	r0, 0x2d	; 45
    4554:	07 fe       	sbrs	r0, 7
    4556:	fd cf       	rjmp	.-6      	; 0x4552 <rf_data_mode+0x32>
    4558:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_DACTST, 0); // default value
    455a:	40 98       	cbi	0x08, 0	; 8
    455c:	8e e2       	ldi	r24, 0x2E	; 46
    455e:	8e bd       	out	0x2e, r24	; 46
    4560:	0d b4       	in	r0, 0x2d	; 45
    4562:	07 fe       	sbrs	r0, 7
    4564:	fd cf       	rjmp	.-6      	; 0x4560 <rf_data_mode+0x40>
    4566:	1e bc       	out	0x2e, r1	; 46
    4568:	0d b4       	in	r0, 0x2d	; 45
    456a:	07 fe       	sbrs	r0, 7
    456c:	fd cf       	rjmp	.-6      	; 0x4568 <rf_data_mode+0x48>
    456e:	1e bc       	out	0x2e, r1	; 46
    4570:	0d b4       	in	r0, 0x2d	; 45
    4572:	07 fe       	sbrs	r0, 7
    4574:	fd cf       	rjmp	.-6      	; 0x4570 <rf_data_mode+0x50>
    4576:	40 9a       	sbi	0x08, 0	; 8
        rf_flush_rx_fifo();
    4578:	0e 94 59 22 	call	0x44b2	; 0x44b2 <rf_flush_rx_fifo>
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    457c:	80 91 b4 1e 	lds	r24, 0x1EB4
    4580:	90 91 b5 1e 	lds	r25, 0x1EB5
    4584:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
#endif
}
    4588:	08 95       	ret

0000458a <rf_test_mode>:

void rf_test_mode()
{

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    458a:	80 91 b4 1e 	lds	r24, 0x1EB4
    458e:	90 91 b5 1e 	lds	r25, 0x1EB5
    4592:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    4596:	40 98       	cbi	0x08, 0	; 8
    4598:	86 e0       	ldi	r24, 0x06	; 6
    459a:	8e bd       	out	0x2e, r24	; 46
    459c:	0d b4       	in	r0, 0x2d	; 45
    459e:	07 fe       	sbrs	r0, 7
    45a0:	fd cf       	rjmp	.-6      	; 0x459c <rf_test_mode+0x12>
    45a2:	40 9a       	sbi	0x08, 0	; 8
	// RF studio" uses TX_MODE=3 (CC2420_MDMCTRL1=0x050C)
	// to send an unmodulated carrier; data sheet says TX_MODE 
	// can be 2 or 3. So it should not matter...
	// HOWEVER, using (TX_MODE=3) sometimes causes problems when 
	// going back to "data" mode!
	FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0508); // MDMCTRL1 with TX_MODE=2
    45a4:	40 98       	cbi	0x08, 0	; 8
    45a6:	82 e1       	ldi	r24, 0x12	; 18
    45a8:	8e bd       	out	0x2e, r24	; 46
    45aa:	0d b4       	in	r0, 0x2d	; 45
    45ac:	07 fe       	sbrs	r0, 7
    45ae:	fd cf       	rjmp	.-6      	; 0x45aa <rf_test_mode+0x20>
    45b0:	85 e0       	ldi	r24, 0x05	; 5
    45b2:	8e bd       	out	0x2e, r24	; 46
    45b4:	0d b4       	in	r0, 0x2d	; 45
    45b6:	07 fe       	sbrs	r0, 7
    45b8:	fd cf       	rjmp	.-6      	; 0x45b4 <rf_test_mode+0x2a>
    45ba:	88 e0       	ldi	r24, 0x08	; 8
    45bc:	8e bd       	out	0x2e, r24	; 46
    45be:	0d b4       	in	r0, 0x2d	; 45
    45c0:	07 fe       	sbrs	r0, 7
    45c2:	fd cf       	rjmp	.-6      	; 0x45be <rf_test_mode+0x34>
    45c4:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_SETREG(CC2420_DACTST, 0x1800); // send unmodulated carrier
    45c6:	40 98       	cbi	0x08, 0	; 8
    45c8:	8e e2       	ldi	r24, 0x2E	; 46
    45ca:	8e bd       	out	0x2e, r24	; 46
    45cc:	0d b4       	in	r0, 0x2d	; 45
    45ce:	07 fe       	sbrs	r0, 7
    45d0:	fd cf       	rjmp	.-6      	; 0x45cc <rf_test_mode+0x42>
    45d2:	88 e1       	ldi	r24, 0x18	; 24
    45d4:	8e bd       	out	0x2e, r24	; 46
    45d6:	0d b4       	in	r0, 0x2d	; 45
    45d8:	07 fe       	sbrs	r0, 7
    45da:	fd cf       	rjmp	.-6      	; 0x45d6 <rf_test_mode+0x4c>
    45dc:	1e bc       	out	0x2e, r1	; 46
    45de:	0d b4       	in	r0, 0x2d	; 45
    45e0:	07 fe       	sbrs	r0, 7
    45e2:	fd cf       	rjmp	.-6      	; 0x45de <rf_test_mode+0x54>
    45e4:	40 9a       	sbi	0x08, 0	; 8
	rf_flush_rx_fifo();
    45e6:	0e 94 59 22 	call	0x44b2	; 0x44b2 <rf_flush_rx_fifo>

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    45ea:	80 91 b4 1e 	lds	r24, 0x1EB4
    45ee:	90 91 b5 1e 	lds	r25, 0x1EB5
    45f2:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
#endif
}
    45f6:	08 95       	ret

000045f8 <rf_set_cca_thresh>:
        FASTSPI_STROBE(CC2420_SFLUSHRX);
        FASTSPI_STROBE(CC2420_SFLUSHRX);
}

void rf_set_cca_thresh(int8_t t)
{
    45f8:	1f 93       	push	r17
    45fa:	18 2f       	mov	r17, r24
// default is -32
// Higher number is less sensitive
uint16_t val;
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    45fc:	80 91 b4 1e 	lds	r24, 0x1EB4
    4600:	90 91 b5 1e 	lds	r25, 0x1EB5
    4604:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
#endif

val=(t<<8) | 0x80;
    4608:	81 2f       	mov	r24, r17
    460a:	99 27       	eor	r25, r25
    460c:	87 fd       	sbrc	r24, 7
    460e:	90 95       	com	r25
    4610:	98 2f       	mov	r25, r24
    4612:	88 27       	eor	r24, r24
    4614:	80 68       	ori	r24, 0x80	; 128
FASTSPI_SETREG(CC2420_RSSI, val); 
    4616:	40 98       	cbi	0x08, 0	; 8
    4618:	23 e1       	ldi	r18, 0x13	; 19
    461a:	2e bd       	out	0x2e, r18	; 46
    461c:	0d b4       	in	r0, 0x2d	; 45
    461e:	07 fe       	sbrs	r0, 7
    4620:	fd cf       	rjmp	.-6      	; 0x461c <rf_set_cca_thresh+0x24>
    4622:	9e bd       	out	0x2e, r25	; 46
    4624:	0d b4       	in	r0, 0x2d	; 45
    4626:	07 fe       	sbrs	r0, 7
    4628:	fd cf       	rjmp	.-6      	; 0x4624 <rf_set_cca_thresh+0x2c>
    462a:	8e bd       	out	0x2e, r24	; 46
    462c:	0d b4       	in	r0, 0x2d	; 45
    462e:	07 fe       	sbrs	r0, 7
    4630:	fd cf       	rjmp	.-6      	; 0x462c <rf_set_cca_thresh+0x34>
    4632:	40 9a       	sbi	0x08, 0	; 8

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    4634:	80 91 b4 1e 	lds	r24, 0x1EB4
    4638:	90 91 b5 1e 	lds	r25, 0x1EB5
    463c:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
#endif
}
    4640:	1f 91       	pop	r17
    4642:	08 95       	ret

00004644 <rf_polling_rx_packet>:
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet(bool ack,uint8_t len)
{
    4644:	1f 93       	push	r17
    4646:	df 93       	push	r29
    4648:	cf 93       	push	r28
    464a:	00 d0       	rcall	.+0      	; 0x464c <rf_polling_rx_packet+0x8>
    464c:	00 d0       	rcall	.+0      	; 0x464e <rf_polling_rx_packet+0xa>
    464e:	00 d0       	rcall	.+0      	; 0x4650 <rf_polling_rx_packet+0xc>
    4650:	cd b7       	in	r28, 0x3d	; 61
    4652:	de b7       	in	r29, 0x3e	; 62
    4654:	18 2f       	mov	r17, r24
uint8_t tmp;
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    4656:	80 91 b4 1e 	lds	r24, 0x1EB4
    465a:	90 91 b5 1e 	lds	r25, 0x1EB5
    465e:	6e 83       	std	Y+6, r22	; 0x06
    4660:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
#endif

    if(FIFOP_IS_1 )
    4664:	6e 81       	ldd	r22, Y+6	; 0x06
    4666:	67 9b       	sbis	0x0c, 7	; 12
    4668:	38 c2       	rjmp	.+1136   	; 0x4ada <rf_polling_rx_packet+0x496>
	uint16_t frameControlField;
	int8_t length;
	uint8_t pFooter[2];
	uint8_t checksum,rx_checksum,i;
			
	last_pkt_encrypted=0;
    466a:	10 92 c5 1e 	sts	0x1EC5, r1
    
//	while(!SFD_IS_1);
//  XXX Need to make sure SFD has gone down to be sure packet finished!
//	while(SFD_IS_1);
    // Clean up and exit in case of FIFO overflow, which is indicated by FIFOP = 1 and FIFO = 0
	if((FIFOP_IS_1) && (!(FIFO_IS_1))) {	   
    466e:	67 9b       	sbis	0x0c, 7	; 12
    4670:	24 c0       	rjmp	.+72     	; 0x46ba <rf_polling_rx_packet+0x76>
    4672:	31 99       	sbic	0x06, 1	; 6
    4674:	22 c0       	rjmp	.+68     	; 0x46ba <rf_polling_rx_packet+0x76>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    4676:	40 98       	cbi	0x08, 0	; 8
    4678:	8f e7       	ldi	r24, 0x7F	; 127
    467a:	8e bd       	out	0x2e, r24	; 46
    467c:	0d b4       	in	r0, 0x2d	; 45
    467e:	07 fe       	sbrs	r0, 7
    4680:	fd cf       	rjmp	.-6      	; 0x467c <rf_polling_rx_packet+0x38>
    4682:	1e bc       	out	0x2e, r1	; 46
    4684:	0d b4       	in	r0, 0x2d	; 45
    4686:	07 fe       	sbrs	r0, 7
    4688:	fd cf       	rjmp	.-6      	; 0x4684 <rf_polling_rx_packet+0x40>
    468a:	8e b5       	in	r24, 0x2e	; 46
    468c:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    468e:	40 98       	cbi	0x08, 0	; 8
    4690:	88 e0       	ldi	r24, 0x08	; 8
    4692:	8e bd       	out	0x2e, r24	; 46
    4694:	0d b4       	in	r0, 0x2d	; 45
    4696:	07 fe       	sbrs	r0, 7
    4698:	fd cf       	rjmp	.-6      	; 0x4694 <rf_polling_rx_packet+0x50>
    469a:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    469c:	40 98       	cbi	0x08, 0	; 8
    469e:	88 e0       	ldi	r24, 0x08	; 8
    46a0:	8e bd       	out	0x2e, r24	; 46
    46a2:	0d b4       	in	r0, 0x2d	; 45
    46a4:	07 fe       	sbrs	r0, 7
    46a6:	fd cf       	rjmp	.-6      	; 0x46a2 <rf_polling_rx_packet+0x5e>
    46a8:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    46aa:	80 91 b4 1e 	lds	r24, 0x1EB4
    46ae:	90 91 b5 1e 	lds	r25, 0x1EB5
    46b2:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
    46b6:	8f ef       	ldi	r24, 0xFF	; 255
#endif
	    return -1;
    46b8:	17 c2       	rjmp	.+1070   	; 0x4ae8 <rf_polling_rx_packet+0x4a4>
	}

	// Payload length
	FASTSPI_READ_FIFO_BYTE(length);
    46ba:	40 98       	cbi	0x08, 0	; 8
    46bc:	8f e7       	ldi	r24, 0x7F	; 127
    46be:	8e bd       	out	0x2e, r24	; 46
    46c0:	0d b4       	in	r0, 0x2d	; 45
    46c2:	07 fe       	sbrs	r0, 7
    46c4:	fd cf       	rjmp	.-6      	; 0x46c0 <rf_polling_rx_packet+0x7c>
    46c6:	1e bc       	out	0x2e, r1	; 46
    46c8:	0d b4       	in	r0, 0x2d	; 45
    46ca:	07 fe       	sbrs	r0, 7
    46cc:	fd cf       	rjmp	.-6      	; 0x46c8 <rf_polling_rx_packet+0x84>
    46ce:	8e b5       	in	r24, 0x2e	; 46
    46d0:	40 9a       	sbi	0x08, 0	; 8
	length &= RF_LENGTH_MASK; // Ignore MSB
    46d2:	8f 77       	andi	r24, 0x7F	; 127
    // Ignore the packet if the length is too short
    if(length==0){  
    46d4:	11 f5       	brne	.+68     	; 0x471a <rf_polling_rx_packet+0xd6>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    46d6:	40 98       	cbi	0x08, 0	; 8
    46d8:	8f e7       	ldi	r24, 0x7F	; 127
    46da:	8e bd       	out	0x2e, r24	; 46
    46dc:	0d b4       	in	r0, 0x2d	; 45
    46de:	07 fe       	sbrs	r0, 7
    46e0:	fd cf       	rjmp	.-6      	; 0x46dc <rf_polling_rx_packet+0x98>
    46e2:	1e bc       	out	0x2e, r1	; 46
    46e4:	0d b4       	in	r0, 0x2d	; 45
    46e6:	07 fe       	sbrs	r0, 7
    46e8:	fd cf       	rjmp	.-6      	; 0x46e4 <rf_polling_rx_packet+0xa0>
    46ea:	8e b5       	in	r24, 0x2e	; 46
    46ec:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    46ee:	40 98       	cbi	0x08, 0	; 8
    46f0:	88 e0       	ldi	r24, 0x08	; 8
    46f2:	8e bd       	out	0x2e, r24	; 46
    46f4:	0d b4       	in	r0, 0x2d	; 45
    46f6:	07 fe       	sbrs	r0, 7
    46f8:	fd cf       	rjmp	.-6      	; 0x46f4 <rf_polling_rx_packet+0xb0>
    46fa:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    46fc:	40 98       	cbi	0x08, 0	; 8
    46fe:	88 e0       	ldi	r24, 0x08	; 8
    4700:	8e bd       	out	0x2e, r24	; 46
    4702:	0d b4       	in	r0, 0x2d	; 45
    4704:	07 fe       	sbrs	r0, 7
    4706:	fd cf       	rjmp	.-6      	; 0x4702 <rf_polling_rx_packet+0xbe>
    4708:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    470a:	80 91 b4 1e 	lds	r24, 0x1EB4
    470e:	90 91 b5 1e 	lds	r25, 0x1EB5
    4712:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
    4716:	8e ef       	ldi	r24, 0xFE	; 254
#endif
	return -2;
    4718:	e7 c1       	rjmp	.+974    	; 0x4ae8 <rf_polling_rx_packet+0x4a4>
	}
    if (length < RF_ACK_PACKET_SIZE || (length-RF_PACKET_OVERHEAD_SIZE)> rfSettings.pRxInfo->max_length) {
    471a:	85 30       	cpi	r24, 0x05	; 5
    471c:	8c f0       	brlt	.+34     	; 0x4740 <rf_polling_rx_packet+0xfc>
    471e:	e0 91 b9 1e 	lds	r30, 0x1EB9
    4722:	f0 91 ba 1e 	lds	r31, 0x1EBA
    4726:	28 2f       	mov	r18, r24
    4728:	33 27       	eor	r19, r19
    472a:	27 fd       	sbrc	r18, 7
    472c:	30 95       	com	r19
    472e:	2b 50       	subi	r18, 0x0B	; 11
    4730:	30 40       	sbci	r19, 0x00	; 0
    4732:	44 81       	ldd	r20, Z+4	; 0x04
    4734:	55 27       	eor	r21, r21
    4736:	47 fd       	sbrc	r20, 7
    4738:	50 95       	com	r21
    473a:	42 17       	cp	r20, r18
    473c:	53 07       	cpc	r21, r19
    473e:	dc f5       	brge	.+118    	; 0x47b6 <rf_polling_rx_packet+0x172>
    	FASTSPI_READ_FIFO_GARBAGE(length);
    4740:	40 98       	cbi	0x08, 0	; 8
    4742:	9f e7       	ldi	r25, 0x7F	; 127
    4744:	9e bd       	out	0x2e, r25	; 46
    4746:	0d b4       	in	r0, 0x2d	; 45
    4748:	07 fe       	sbrs	r0, 7
    474a:	fd cf       	rjmp	.-6      	; 0x4746 <rf_polling_rx_packet+0x102>
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	28 2f       	mov	r18, r24
    4750:	33 27       	eor	r19, r19
    4752:	27 fd       	sbrc	r18, 7
    4754:	30 95       	com	r19
    4756:	05 c0       	rjmp	.+10     	; 0x4762 <rf_polling_rx_packet+0x11e>
    4758:	1e bc       	out	0x2e, r1	; 46
    475a:	0d b4       	in	r0, 0x2d	; 45
    475c:	07 fe       	sbrs	r0, 7
    475e:	fd cf       	rjmp	.-6      	; 0x475a <rf_polling_rx_packet+0x116>
    4760:	9f 5f       	subi	r25, 0xFF	; 255
    4762:	49 2f       	mov	r20, r25
    4764:	50 e0       	ldi	r21, 0x00	; 0
    4766:	42 17       	cp	r20, r18
    4768:	53 07       	cpc	r21, r19
    476a:	14 f4       	brge	.+4      	; 0x4770 <rf_polling_rx_packet+0x12c>
    476c:	31 99       	sbic	0x06, 1	; 6
    476e:	f4 cf       	rjmp	.-24     	; 0x4758 <rf_polling_rx_packet+0x114>
    4770:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    4772:	40 98       	cbi	0x08, 0	; 8
    4774:	8f e7       	ldi	r24, 0x7F	; 127
    4776:	8e bd       	out	0x2e, r24	; 46
    4778:	0d b4       	in	r0, 0x2d	; 45
    477a:	07 fe       	sbrs	r0, 7
    477c:	fd cf       	rjmp	.-6      	; 0x4778 <rf_polling_rx_packet+0x134>
    477e:	1e bc       	out	0x2e, r1	; 46
    4780:	0d b4       	in	r0, 0x2d	; 45
    4782:	07 fe       	sbrs	r0, 7
    4784:	fd cf       	rjmp	.-6      	; 0x4780 <rf_polling_rx_packet+0x13c>
    4786:	8e b5       	in	r24, 0x2e	; 46
    4788:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    478a:	40 98       	cbi	0x08, 0	; 8
    478c:	88 e0       	ldi	r24, 0x08	; 8
    478e:	8e bd       	out	0x2e, r24	; 46
    4790:	0d b4       	in	r0, 0x2d	; 45
    4792:	07 fe       	sbrs	r0, 7
    4794:	fd cf       	rjmp	.-6      	; 0x4790 <rf_polling_rx_packet+0x14c>
    4796:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    4798:	40 98       	cbi	0x08, 0	; 8
    479a:	88 e0       	ldi	r24, 0x08	; 8
    479c:	8e bd       	out	0x2e, r24	; 46
    479e:	0d b4       	in	r0, 0x2d	; 45
    47a0:	07 fe       	sbrs	r0, 7
    47a2:	fd cf       	rjmp	.-6      	; 0x479e <rf_polling_rx_packet+0x15a>
    47a4:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    47a6:	80 91 b4 1e 	lds	r24, 0x1EB4
    47aa:	90 91 b5 1e 	lds	r25, 0x1EB5
    47ae:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
    47b2:	8d ef       	ldi	r24, 0xFD	; 253
#endif
	return -3;
    47b4:	99 c1       	rjmp	.+818    	; 0x4ae8 <rf_polling_rx_packet+0x4a4>
	//printf_u( "Bad length: %d %d\n",length, rfSettings.pRxInfo->max_length );
    // Otherwise, if the length is valid, then proceed with the rest of the packet
    } else {
        // Register the payload length
        rfSettings.pRxInfo->length = length - RF_PACKET_OVERHEAD_SIZE - CHECKSUM_OVERHEAD;
    47b6:	e0 91 b9 1e 	lds	r30, 0x1EB9
    47ba:	f0 91 ba 1e 	lds	r31, 0x1EBA
    47be:	8c 50       	subi	r24, 0x0C	; 12
    47c0:	83 83       	std	Z+3, r24	; 0x03
	if(ack==true&&rfSettings.pRxInfo->length!=len){
    47c2:	11 23       	and	r17, r17
    47c4:	a1 f0       	breq	.+40     	; 0x47ee <rf_polling_rx_packet+0x1aa>
    47c6:	e0 91 b9 1e 	lds	r30, 0x1EB9
    47ca:	f0 91 ba 1e 	lds	r31, 0x1EBA
    47ce:	83 81       	ldd	r24, Z+3	; 0x03
    47d0:	99 27       	eor	r25, r25
    47d2:	87 fd       	sbrc	r24, 7
    47d4:	90 95       	com	r25
    47d6:	70 e0       	ldi	r23, 0x00	; 0
    47d8:	86 17       	cp	r24, r22
    47da:	97 07       	cpc	r25, r23
    47dc:	41 f0       	breq	.+16     	; 0x47ee <rf_polling_rx_packet+0x1aa>
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    47de:	80 91 b4 1e 	lds	r24, 0x1EB4
    47e2:	90 91 b5 1e 	lds	r25, 0x1EB5
    47e6:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
    47ea:	8a ef       	ldi	r24, 0xFA	; 250
#endif
	    return -6;
    47ec:	7d c1       	rjmp	.+762    	; 0x4ae8 <rf_polling_rx_packet+0x4a4>
}
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
    47ee:	40 98       	cbi	0x08, 0	; 8
    47f0:	8f e7       	ldi	r24, 0x7F	; 127
    47f2:	8e bd       	out	0x2e, r24	; 46
    47f4:	0d b4       	in	r0, 0x2d	; 45
    47f6:	07 fe       	sbrs	r0, 7
    47f8:	fd cf       	rjmp	.-6      	; 0x47f4 <rf_polling_rx_packet+0x1b0>
    47fa:	fe 01       	movw	r30, r28
    47fc:	32 96       	adiw	r30, 0x02	; 2
{
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet(bool ack,uint8_t len)
    47fe:	cf 01       	movw	r24, r30
    4800:	02 96       	adiw	r24, 0x02	; 2
	    nrk_sem_post(radio_sem);
#endif
	    return -6;
}
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
    4802:	1e bc       	out	0x2e, r1	; 46
    4804:	0d b4       	in	r0, 0x2d	; 45
    4806:	07 fe       	sbrs	r0, 7
    4808:	fd cf       	rjmp	.-6      	; 0x4804 <rf_polling_rx_packet+0x1c0>
    480a:	2e b5       	in	r18, 0x2e	; 46
    480c:	21 93       	st	Z+, r18
    480e:	e8 17       	cp	r30, r24
    4810:	f9 07       	cpc	r31, r25
    4812:	b9 f7       	brne	.-18     	; 0x4802 <rf_polling_rx_packet+0x1be>
    4814:	40 9a       	sbi	0x08, 0	; 8
        rfSettings.pRxInfo->ackRequest = !!(frameControlField & RF_FCF_ACK_BM);
    4816:	e0 91 b9 1e 	lds	r30, 0x1EB9
    481a:	f0 91 ba 1e 	lds	r31, 0x1EBA
    481e:	8a 81       	ldd	r24, Y+2	; 0x02
    4820:	9b 81       	ldd	r25, Y+3	; 0x03
    4822:	55 e0       	ldi	r21, 0x05	; 5
    4824:	96 95       	lsr	r25
    4826:	87 95       	ror	r24
    4828:	5a 95       	dec	r21
    482a:	e1 f7       	brne	.-8      	; 0x4824 <rf_polling_rx_packet+0x1e0>
    482c:	81 70       	andi	r24, 0x01	; 1
    482e:	87 83       	std	Z+7, r24	; 0x07
    	FASTSPI_READ_FIFO_BYTE(rfSettings.pRxInfo->seqNumber);
    4830:	40 98       	cbi	0x08, 0	; 8
    4832:	8f e7       	ldi	r24, 0x7F	; 127
    4834:	8e bd       	out	0x2e, r24	; 46
    4836:	0d b4       	in	r0, 0x2d	; 45
    4838:	07 fe       	sbrs	r0, 7
    483a:	fd cf       	rjmp	.-6      	; 0x4836 <rf_polling_rx_packet+0x1f2>
    483c:	1e bc       	out	0x2e, r1	; 46
    483e:	0d b4       	in	r0, 0x2d	; 45
    4840:	07 fe       	sbrs	r0, 7
    4842:	fd cf       	rjmp	.-6      	; 0x483e <rf_polling_rx_packet+0x1fa>
    4844:	e0 91 b9 1e 	lds	r30, 0x1EB9
    4848:	f0 91 ba 1e 	lds	r31, 0x1EBA
    484c:	8e b5       	in	r24, 0x2e	; 46
    484e:	80 83       	st	Z, r24
    4850:	40 9a       	sbi	0x08, 0	; 8

		// Receive the rest of the packet
		} else {
*/
			// Skip the destination PAN and address (that's taken care of by harware address recognition!)
		FASTSPI_READ_FIFO_GARBAGE(4);
    4852:	40 98       	cbi	0x08, 0	; 8
    4854:	8f e7       	ldi	r24, 0x7F	; 127
    4856:	8e bd       	out	0x2e, r24	; 46
    4858:	0d b4       	in	r0, 0x2d	; 45
    485a:	07 fe       	sbrs	r0, 7
    485c:	fd cf       	rjmp	.-6      	; 0x4858 <rf_polling_rx_packet+0x214>
    485e:	80 e0       	ldi	r24, 0x00	; 0
    4860:	07 c0       	rjmp	.+14     	; 0x4870 <rf_polling_rx_packet+0x22c>
    4862:	1e bc       	out	0x2e, r1	; 46
    4864:	0d b4       	in	r0, 0x2d	; 45
    4866:	07 fe       	sbrs	r0, 7
    4868:	fd cf       	rjmp	.-6      	; 0x4864 <rf_polling_rx_packet+0x220>
    486a:	8f 5f       	subi	r24, 0xFF	; 255
    486c:	84 30       	cpi	r24, 0x04	; 4
    486e:	11 f0       	breq	.+4      	; 0x4874 <rf_polling_rx_packet+0x230>
    4870:	31 99       	sbic	0x06, 1	; 6
    4872:	f7 cf       	rjmp	.-18     	; 0x4862 <rf_polling_rx_packet+0x21e>
    4874:	40 9a       	sbi	0x08, 0	; 8

			// Read the source address
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rfSettings.pRxInfo->srcAddr, 2);
    4876:	40 98       	cbi	0x08, 0	; 8
    4878:	8f e7       	ldi	r24, 0x7F	; 127
    487a:	8e bd       	out	0x2e, r24	; 46
    487c:	0d b4       	in	r0, 0x2d	; 45
    487e:	07 fe       	sbrs	r0, 7
    4880:	fd cf       	rjmp	.-6      	; 0x487c <rf_polling_rx_packet+0x238>
    4882:	80 e0       	ldi	r24, 0x00	; 0
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	1e bc       	out	0x2e, r1	; 46
    4888:	0d b4       	in	r0, 0x2d	; 45
    488a:	07 fe       	sbrs	r0, 7
    488c:	fd cf       	rjmp	.-6      	; 0x4888 <rf_polling_rx_packet+0x244>
    488e:	e0 91 b9 1e 	lds	r30, 0x1EB9
    4892:	f0 91 ba 1e 	lds	r31, 0x1EBA
    4896:	2e b5       	in	r18, 0x2e	; 46
    4898:	e8 0f       	add	r30, r24
    489a:	f9 1f       	adc	r31, r25
    489c:	21 83       	std	Z+1, r18	; 0x01
    489e:	01 96       	adiw	r24, 0x01	; 1
    48a0:	82 30       	cpi	r24, 0x02	; 2
    48a2:	91 05       	cpc	r25, r1
    48a4:	81 f7       	brne	.-32     	; 0x4886 <rf_polling_rx_packet+0x242>
    48a6:	40 9a       	sbi	0x08, 0	; 8

		        if(frameControlField & RF_SEC_BM)
    48a8:	8a 81       	ldd	r24, Y+2	; 0x02
    48aa:	83 ff       	sbrs	r24, 3
    48ac:	56 c0       	rjmp	.+172    	; 0x495a <rf_polling_rx_packet+0x316>
			{
				uint8_t n;
				// READ rx_ctr and set it
				FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rx_ctr, 4);
    48ae:	40 98       	cbi	0x08, 0	; 8
    48b0:	8f e7       	ldi	r24, 0x7F	; 127
    48b2:	8e bd       	out	0x2e, r24	; 46
    48b4:	0d b4       	in	r0, 0x2d	; 45
    48b6:	07 fe       	sbrs	r0, 7
    48b8:	fd cf       	rjmp	.-6      	; 0x48b4 <rf_polling_rx_packet+0x270>
    48ba:	e0 eb       	ldi	r30, 0xB0	; 176
    48bc:	fe e1       	ldi	r31, 0x1E	; 30
    48be:	1e bc       	out	0x2e, r1	; 46
    48c0:	0d b4       	in	r0, 0x2d	; 45
    48c2:	07 fe       	sbrs	r0, 7
    48c4:	fd cf       	rjmp	.-6      	; 0x48c0 <rf_polling_rx_packet+0x27c>
    48c6:	8e b5       	in	r24, 0x2e	; 46
    48c8:	81 93       	st	Z+, r24
    48ca:	8e e1       	ldi	r24, 0x1E	; 30
    48cc:	e4 3b       	cpi	r30, 0xB4	; 180
    48ce:	f8 07       	cpc	r31, r24
    48d0:	b1 f7       	brne	.-20     	; 0x48be <rf_polling_rx_packet+0x27a>
    48d2:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[0],(CC2420RAM_RXNONCE+9),2,n); 
    48d4:	40 98       	cbi	0x08, 0	; 8
    48d6:	89 e9       	ldi	r24, 0x99	; 153
    48d8:	8e bd       	out	0x2e, r24	; 46
    48da:	0d b4       	in	r0, 0x2d	; 45
    48dc:	07 fe       	sbrs	r0, 7
    48de:	fd cf       	rjmp	.-6      	; 0x48da <rf_polling_rx_packet+0x296>
    48e0:	80 e8       	ldi	r24, 0x80	; 128
    48e2:	8e bd       	out	0x2e, r24	; 46
    48e4:	0d b4       	in	r0, 0x2d	; 45
    48e6:	07 fe       	sbrs	r0, 7
    48e8:	fd cf       	rjmp	.-6      	; 0x48e4 <rf_polling_rx_packet+0x2a0>
    48ea:	82 e0       	ldi	r24, 0x02	; 2
    48ec:	81 50       	subi	r24, 0x01	; 1
    48ee:	e8 2f       	mov	r30, r24
    48f0:	f0 e0       	ldi	r31, 0x00	; 0
    48f2:	e0 55       	subi	r30, 0x50	; 80
    48f4:	f1 4e       	sbci	r31, 0xE1	; 225
    48f6:	90 81       	ld	r25, Z
    48f8:	9e bd       	out	0x2e, r25	; 46
    48fa:	0d b4       	in	r0, 0x2d	; 45
    48fc:	07 fe       	sbrs	r0, 7
    48fe:	fd cf       	rjmp	.-6      	; 0x48fa <rf_polling_rx_packet+0x2b6>
    4900:	88 23       	and	r24, r24
    4902:	a1 f7       	brne	.-24     	; 0x48ec <rf_polling_rx_packet+0x2a8>
    4904:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[2],(CC2420RAM_RXNONCE+11),2,n); 
    4906:	40 98       	cbi	0x08, 0	; 8
    4908:	8b e9       	ldi	r24, 0x9B	; 155
    490a:	8e bd       	out	0x2e, r24	; 46
    490c:	0d b4       	in	r0, 0x2d	; 45
    490e:	07 fe       	sbrs	r0, 7
    4910:	fd cf       	rjmp	.-6      	; 0x490c <rf_polling_rx_packet+0x2c8>
    4912:	80 e8       	ldi	r24, 0x80	; 128
    4914:	8e bd       	out	0x2e, r24	; 46
    4916:	0d b4       	in	r0, 0x2d	; 45
    4918:	07 fe       	sbrs	r0, 7
    491a:	fd cf       	rjmp	.-6      	; 0x4916 <rf_polling_rx_packet+0x2d2>
    491c:	82 e0       	ldi	r24, 0x02	; 2
    491e:	81 50       	subi	r24, 0x01	; 1
    4920:	e8 2f       	mov	r30, r24
    4922:	f0 e0       	ldi	r31, 0x00	; 0
    4924:	ee 54       	subi	r30, 0x4E	; 78
    4926:	f1 4e       	sbci	r31, 0xE1	; 225
    4928:	90 81       	ld	r25, Z
    492a:	9e bd       	out	0x2e, r25	; 46
    492c:	0d b4       	in	r0, 0x2d	; 45
    492e:	07 fe       	sbrs	r0, 7
    4930:	fd cf       	rjmp	.-6      	; 0x492c <rf_polling_rx_packet+0x2e8>
    4932:	88 23       	and	r24, r24
    4934:	a1 f7       	brne	.-24     	; 0x491e <rf_polling_rx_packet+0x2da>
    4936:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_STROBE(CC2420_SRXDEC);  // if packet is encrypted then decrypt 
    4938:	40 98       	cbi	0x08, 0	; 8
    493a:	8c e0       	ldi	r24, 0x0C	; 12
    493c:	8e bd       	out	0x2e, r24	; 46
    493e:	0d b4       	in	r0, 0x2d	; 45
    4940:	07 fe       	sbrs	r0, 7
    4942:	fd cf       	rjmp	.-6      	; 0x493e <rf_polling_rx_packet+0x2fa>
    4944:	40 9a       	sbi	0x08, 0	; 8
				last_pkt_encrypted=1;
    4946:	81 e0       	ldi	r24, 0x01	; 1
    4948:	80 93 c5 1e 	sts	0x1EC5, r24
        			rfSettings.pRxInfo->length -= 4;
    494c:	e0 91 b9 1e 	lds	r30, 0x1EB9
    4950:	f0 91 ba 1e 	lds	r31, 0x1EBA
    4954:	83 81       	ldd	r24, Z+3	; 0x03
    4956:	84 50       	subi	r24, 0x04	; 4
    4958:	83 83       	std	Z+3, r24	; 0x03
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
    495a:	40 98       	cbi	0x08, 0	; 8
    495c:	8f e7       	ldi	r24, 0x7F	; 127
    495e:	8e bd       	out	0x2e, r24	; 46
    4960:	0d b4       	in	r0, 0x2d	; 45
    4962:	07 fe       	sbrs	r0, 7
    4964:	fd cf       	rjmp	.-6      	; 0x4960 <rf_polling_rx_packet+0x31c>
    4966:	80 e0       	ldi	r24, 0x00	; 0
    4968:	10 c0       	rjmp	.+32     	; 0x498a <rf_polling_rx_packet+0x346>
    496a:	1e bc       	out	0x2e, r1	; 46
    496c:	0d b4       	in	r0, 0x2d	; 45
    496e:	07 fe       	sbrs	r0, 7
    4970:	fd cf       	rjmp	.-6      	; 0x496c <rf_polling_rx_packet+0x328>
    4972:	e0 91 b9 1e 	lds	r30, 0x1EB9
    4976:	f0 91 ba 1e 	lds	r31, 0x1EBA
    497a:	9e b5       	in	r25, 0x2e	; 46
    497c:	05 80       	ldd	r0, Z+5	; 0x05
    497e:	f6 81       	ldd	r31, Z+6	; 0x06
    4980:	e0 2d       	mov	r30, r0
    4982:	e8 0f       	add	r30, r24
    4984:	f1 1d       	adc	r31, r1
    4986:	90 83       	st	Z, r25
    4988:	8f 5f       	subi	r24, 0xFF	; 255
    498a:	e0 91 b9 1e 	lds	r30, 0x1EB9
    498e:	f0 91 ba 1e 	lds	r31, 0x1EBA
    4992:	48 2f       	mov	r20, r24
    4994:	50 e0       	ldi	r21, 0x00	; 0
    4996:	23 81       	ldd	r18, Z+3	; 0x03
    4998:	33 27       	eor	r19, r19
    499a:	27 fd       	sbrc	r18, 7
    499c:	30 95       	com	r19
    499e:	42 17       	cp	r20, r18
    49a0:	53 07       	cpc	r21, r19
    49a2:	1c f3       	brlt	.-58     	; 0x496a <rf_polling_rx_packet+0x326>
    49a4:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    49a6:	40 98       	cbi	0x08, 0	; 8
    49a8:	8f e7       	ldi	r24, 0x7F	; 127
    49aa:	8e bd       	out	0x2e, r24	; 46
    49ac:	0d b4       	in	r0, 0x2d	; 45
    49ae:	07 fe       	sbrs	r0, 7
    49b0:	fd cf       	rjmp	.-6      	; 0x49ac <rf_polling_rx_packet+0x368>
    49b2:	1e bc       	out	0x2e, r1	; 46
    49b4:	0d b4       	in	r0, 0x2d	; 45
    49b6:	07 fe       	sbrs	r0, 7
    49b8:	fd cf       	rjmp	.-6      	; 0x49b4 <rf_polling_rx_packet+0x370>
    49ba:	8e b5       	in	r24, 0x2e	; 46
    49bc:	40 9a       	sbi	0x08, 0	; 8

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    49be:	40 98       	cbi	0x08, 0	; 8
    49c0:	9f e7       	ldi	r25, 0x7F	; 127
    49c2:	9e bd       	out	0x2e, r25	; 46
    49c4:	0d b4       	in	r0, 0x2d	; 45
    49c6:	07 fe       	sbrs	r0, 7
    49c8:	fd cf       	rjmp	.-6      	; 0x49c4 <rf_polling_rx_packet+0x380>
        			rfSettings.pRxInfo->length -= 4;
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    49ca:	89 83       	std	Y+1, r24	; 0x01
    49cc:	fe 01       	movw	r30, r28
    49ce:	34 96       	adiw	r30, 0x04	; 4
{
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet(bool ack,uint8_t len)
    49d0:	ce 01       	movw	r24, r28
    49d2:	06 96       	adiw	r24, 0x06	; 6
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    49d4:	1e bc       	out	0x2e, r1	; 46
    49d6:	0d b4       	in	r0, 0x2d	; 45
    49d8:	07 fe       	sbrs	r0, 7
    49da:	fd cf       	rjmp	.-6      	; 0x49d6 <rf_polling_rx_packet+0x392>
    49dc:	2e b5       	in	r18, 0x2e	; 46
    49de:	21 93       	st	Z+, r18
    49e0:	e8 17       	cp	r30, r24
    49e2:	f9 07       	cpc	r31, r25
    49e4:	b9 f7       	brne	.-18     	; 0x49d4 <rf_polling_rx_packet+0x390>
    49e6:	40 9a       	sbi	0x08, 0	; 8
			rfSettings.pRxInfo->rssi = pFooter[0];
    49e8:	e0 91 b9 1e 	lds	r30, 0x1EB9
    49ec:	f0 91 ba 1e 	lds	r31, 0x1EBA
    49f0:	8c 81       	ldd	r24, Y+4	; 0x04
    49f2:	80 87       	std	Z+8, r24	; 0x08
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	80 e0       	ldi	r24, 0x00	; 0
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
    49f8:	0c c0       	rjmp	.+24     	; 0x4a12 <rf_polling_rx_packet+0x3ce>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
    49fa:	e0 91 b9 1e 	lds	r30, 0x1EB9
    49fe:	f0 91 ba 1e 	lds	r31, 0x1EBA
    4a02:	05 80       	ldd	r0, Z+5	; 0x05
    4a04:	f6 81       	ldd	r31, Z+6	; 0x06
    4a06:	e0 2d       	mov	r30, r0
    4a08:	e2 0f       	add	r30, r18
    4a0a:	f3 1f       	adc	r31, r19
    4a0c:	20 81       	ld	r18, Z
    4a0e:	82 0f       	add	r24, r18

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
			rfSettings.pRxInfo->rssi = pFooter[0];
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
    4a10:	9f 5f       	subi	r25, 0xFF	; 255
    4a12:	e0 91 b9 1e 	lds	r30, 0x1EB9
    4a16:	f0 91 ba 1e 	lds	r31, 0x1EBA
    4a1a:	29 2f       	mov	r18, r25
    4a1c:	30 e0       	ldi	r19, 0x00	; 0
    4a1e:	43 81       	ldd	r20, Z+3	; 0x03
    4a20:	55 27       	eor	r21, r21
    4a22:	47 fd       	sbrc	r20, 7
    4a24:	50 95       	com	r21
    4a26:	24 17       	cp	r18, r20
    4a28:	35 07       	cpc	r19, r21
    4a2a:	3c f3       	brlt	.-50     	; 0x49fa <rf_polling_rx_packet+0x3b6>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
				//printf( "%d ", rfSettings.pRxInfo->pPayload[i]);
			}

			if(checksum!=rx_checksum) {
    4a2c:	99 81       	ldd	r25, Y+1	; 0x01
    4a2e:	89 17       	cp	r24, r25
    4a30:	11 f1       	breq	.+68     	; 0x4a76 <rf_polling_rx_packet+0x432>
				//printf( "Checksum failed %d %d\r",rx_checksum, checksum );
	    			// always read 1 byte before flush (data sheet pg 62)
	   			FASTSPI_READ_FIFO_BYTE(tmp);  
    4a32:	40 98       	cbi	0x08, 0	; 8
    4a34:	8f e7       	ldi	r24, 0x7F	; 127
    4a36:	8e bd       	out	0x2e, r24	; 46
    4a38:	0d b4       	in	r0, 0x2d	; 45
    4a3a:	07 fe       	sbrs	r0, 7
    4a3c:	fd cf       	rjmp	.-6      	; 0x4a38 <rf_polling_rx_packet+0x3f4>
    4a3e:	1e bc       	out	0x2e, r1	; 46
    4a40:	0d b4       	in	r0, 0x2d	; 45
    4a42:	07 fe       	sbrs	r0, 7
    4a44:	fd cf       	rjmp	.-6      	; 0x4a40 <rf_polling_rx_packet+0x3fc>
    4a46:	8e b5       	in	r24, 0x2e	; 46
    4a48:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    4a4a:	40 98       	cbi	0x08, 0	; 8
    4a4c:	88 e0       	ldi	r24, 0x08	; 8
    4a4e:	8e bd       	out	0x2e, r24	; 46
    4a50:	0d b4       	in	r0, 0x2d	; 45
    4a52:	07 fe       	sbrs	r0, 7
    4a54:	fd cf       	rjmp	.-6      	; 0x4a50 <rf_polling_rx_packet+0x40c>
    4a56:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    4a58:	40 98       	cbi	0x08, 0	; 8
    4a5a:	88 e0       	ldi	r24, 0x08	; 8
    4a5c:	8e bd       	out	0x2e, r24	; 46
    4a5e:	0d b4       	in	r0, 0x2d	; 45
    4a60:	07 fe       	sbrs	r0, 7
    4a62:	fd cf       	rjmp	.-6      	; 0x4a5e <rf_polling_rx_packet+0x41a>
    4a64:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
    4a66:	80 91 b4 1e 	lds	r24, 0x1EB4
    4a6a:	90 91 b5 1e 	lds	r25, 0x1EB5
    4a6e:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
    4a72:	8c ef       	ldi	r24, 0xFC	; 252
#endif
				return -4;
    4a74:	39 c0       	rjmp	.+114    	; 0x4ae8 <rf_polling_rx_packet+0x4a4>
			}	
			if (pFooter[1] & RF_CRC_OK_BM) {
    4a76:	8d 81       	ldd	r24, Y+5	; 0x05
    4a78:	87 ff       	sbrs	r24, 7
    4a7a:	0d c0       	rjmp	.+26     	; 0x4a96 <rf_polling_rx_packet+0x452>
				//rfSettings.pRxInfo = rf_rx_callback(rfSettings.pRxInfo);
				rx_ready++;
    4a7c:	80 91 ca 1e 	lds	r24, 0x1ECA
    4a80:	8f 5f       	subi	r24, 0xFF	; 255
    4a82:	80 93 ca 1e 	sts	0x1ECA, r24
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
    4a86:	80 91 b4 1e 	lds	r24, 0x1EB4
    4a8a:	90 91 b5 1e 	lds	r25, 0x1EB5
    4a8e:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
    4a92:	81 e0       	ldi	r24, 0x01	; 1
#endif
				return 1;
    4a94:	29 c0       	rjmp	.+82     	; 0x4ae8 <rf_polling_rx_packet+0x4a4>
			} else
	    		{
	    		// always read 1 byte before flush (data sheet pg 62)
	   		FASTSPI_READ_FIFO_BYTE(tmp);  
    4a96:	40 98       	cbi	0x08, 0	; 8
    4a98:	8f e7       	ldi	r24, 0x7F	; 127
    4a9a:	8e bd       	out	0x2e, r24	; 46
    4a9c:	0d b4       	in	r0, 0x2d	; 45
    4a9e:	07 fe       	sbrs	r0, 7
    4aa0:	fd cf       	rjmp	.-6      	; 0x4a9c <rf_polling_rx_packet+0x458>
    4aa2:	1e bc       	out	0x2e, r1	; 46
    4aa4:	0d b4       	in	r0, 0x2d	; 45
    4aa6:	07 fe       	sbrs	r0, 7
    4aa8:	fd cf       	rjmp	.-6      	; 0x4aa4 <rf_polling_rx_packet+0x460>
    4aaa:	8e b5       	in	r24, 0x2e	; 46
    4aac:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_STROBE(CC2420_SFLUSHRX);
    4aae:	40 98       	cbi	0x08, 0	; 8
    4ab0:	88 e0       	ldi	r24, 0x08	; 8
    4ab2:	8e bd       	out	0x2e, r24	; 46
    4ab4:	0d b4       	in	r0, 0x2d	; 45
    4ab6:	07 fe       	sbrs	r0, 7
    4ab8:	fd cf       	rjmp	.-6      	; 0x4ab4 <rf_polling_rx_packet+0x470>
    4aba:	40 9a       	sbi	0x08, 0	; 8
	    		FASTSPI_STROBE(CC2420_SFLUSHRX);
    4abc:	40 98       	cbi	0x08, 0	; 8
    4abe:	88 e0       	ldi	r24, 0x08	; 8
    4ac0:	8e bd       	out	0x2e, r24	; 46
    4ac2:	0d b4       	in	r0, 0x2d	; 45
    4ac4:	07 fe       	sbrs	r0, 7
    4ac6:	fd cf       	rjmp	.-6      	; 0x4ac2 <rf_polling_rx_packet+0x47e>
    4ac8:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    		nrk_sem_post(radio_sem);
    4aca:	80 91 b4 1e 	lds	r24, 0x1EB4
    4ace:	90 91 b5 1e 	lds	r25, 0x1EB5
    4ad2:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
    4ad6:	8b ef       	ldi	r24, 0xFB	; 251
#endif
			return -5;
    4ad8:	07 c0       	rjmp	.+14     	; 0x4ae8 <rf_polling_rx_packet+0x4a4>
	}


    }
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    4ada:	80 91 b4 1e 	lds	r24, 0x1EB4
    4ade:	90 91 b5 1e 	lds	r25, 0x1EB5
    4ae2:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
    4ae6:	80 e0       	ldi	r24, 0x00	; 0
#endif
return 0;
}
    4ae8:	26 96       	adiw	r28, 0x06	; 6
    4aea:	0f b6       	in	r0, 0x3f	; 63
    4aec:	f8 94       	cli
    4aee:	de bf       	out	0x3e, r29	; 62
    4af0:	0f be       	out	0x3f, r0	; 63
    4af2:	cd bf       	out	0x3d, r28	; 61
    4af4:	cf 91       	pop	r28
    4af6:	df 91       	pop	r29
    4af8:	1f 91       	pop	r17
    4afa:	08 95       	ret

00004afc <rf_rx_off>:
//  DESCRIPTION:
//      Disables the CC2420 receiver and the FIFOP interrupt.
//-------------------------------------------------------------------------------------------------------
void rf_rx_off(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    4afc:	80 91 b4 1e 	lds	r24, 0x1EB4
    4b00:	90 91 b5 1e 	lds	r25, 0x1EB5
    4b04:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
#endif
	// XXX
    	//SET_VREG_INACTIVE();	
	rfSettings.receiveOn = FALSE;
    4b08:	10 92 c1 1e 	sts	0x1EC1, r1
	FASTSPI_STROBE(CC2420_SRFOFF);
    4b0c:	40 98       	cbi	0x08, 0	; 8
    4b0e:	86 e0       	ldi	r24, 0x06	; 6
    4b10:	8e bd       	out	0x2e, r24	; 46
    4b12:	0d b4       	in	r0, 0x2d	; 45
    4b14:	07 fe       	sbrs	r0, 7
    4b16:	fd cf       	rjmp	.-6      	; 0x4b12 <rf_rx_off+0x16>
    4b18:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    4b1a:	10 92 ca 1e 	sts	0x1ECA, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    4b1e:	80 91 b4 1e 	lds	r24, 0x1EB4
    4b22:	90 91 b5 1e 	lds	r25, 0x1EB5
    4b26:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
#endif
    //	DISABLE_FIFOP_INT();
} // rf_rx_off() 
    4b2a:	08 95       	ret

00004b2c <rf_polling_rx_on>:
    //	ENABLE_FIFOP_INT();
} // rf_rx_on() 

void rf_polling_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    4b2c:	80 91 b4 1e 	lds	r24, 0x1EB4
    4b30:	90 91 b5 1e 	lds	r25, 0x1EB5
    4b34:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
#endif
    	rfSettings.receiveOn = TRUE;
    4b38:	81 e0       	ldi	r24, 0x01	; 1
    4b3a:	80 93 c1 1e 	sts	0x1EC1, r24
	FASTSPI_STROBE(CC2420_SRXON);
    4b3e:	40 98       	cbi	0x08, 0	; 8
    4b40:	83 e0       	ldi	r24, 0x03	; 3
    4b42:	8e bd       	out	0x2e, r24	; 46
    4b44:	0d b4       	in	r0, 0x2d	; 45
    4b46:	07 fe       	sbrs	r0, 7
    4b48:	fd cf       	rjmp	.-6      	; 0x4b44 <rf_polling_rx_on+0x18>
    4b4a:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    4b4c:	40 98       	cbi	0x08, 0	; 8
    4b4e:	88 e0       	ldi	r24, 0x08	; 8
    4b50:	8e bd       	out	0x2e, r24	; 46
    4b52:	0d b4       	in	r0, 0x2d	; 45
    4b54:	07 fe       	sbrs	r0, 7
    4b56:	fd cf       	rjmp	.-6      	; 0x4b52 <rf_polling_rx_on+0x26>
    4b58:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    4b5a:	10 92 ca 1e 	sts	0x1ECA, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    4b5e:	80 91 b4 1e 	lds	r24, 0x1EB4
    4b62:	90 91 b5 1e 	lds	r25, 0x1EB5
    4b66:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
#endif
} // rf_rx_on() 
    4b6a:	08 95       	ret

00004b6c <rf_rx_on>:
//      Enables the CC2420 receiver and the FIFOP interrupt. When a packet is received through this
//      interrupt, it will call rf_rx_callback(...), which must be defined by the application
//-------------------------------------------------------------------------------------------------------
void rf_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    4b6c:	80 91 b4 1e 	lds	r24, 0x1EB4
    4b70:	90 91 b5 1e 	lds	r25, 0x1EB5
    4b74:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
#endif
    	rfSettings.receiveOn = TRUE;
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	80 93 c1 1e 	sts	0x1EC1, r24
	FASTSPI_STROBE(CC2420_SRXON);
    4b7e:	40 98       	cbi	0x08, 0	; 8
    4b80:	83 e0       	ldi	r24, 0x03	; 3
    4b82:	8e bd       	out	0x2e, r24	; 46
    4b84:	0d b4       	in	r0, 0x2d	; 45
    4b86:	07 fe       	sbrs	r0, 7
    4b88:	fd cf       	rjmp	.-6      	; 0x4b84 <rf_rx_on+0x18>
    4b8a:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    4b8c:	40 98       	cbi	0x08, 0	; 8
    4b8e:	88 e0       	ldi	r24, 0x08	; 8
    4b90:	8e bd       	out	0x2e, r24	; 46
    4b92:	0d b4       	in	r0, 0x2d	; 45
    4b94:	07 fe       	sbrs	r0, 7
    4b96:	fd cf       	rjmp	.-6      	; 0x4b92 <rf_rx_on+0x26>
    4b98:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    4b9a:	10 92 ca 1e 	sts	0x1ECA, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    4b9e:	80 91 b4 1e 	lds	r24, 0x1EB4
    4ba2:	90 91 b5 1e 	lds	r25, 0x1EB5
    4ba6:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
#endif
    //	ENABLE_FIFOP_INT();
} // rf_rx_on() 
    4baa:	08 95       	ret

00004bac <rf_tx_power>:
{
return radio_sem;
}

void rf_tx_power(uint8_t pwr)
{
    4bac:	1f 93       	push	r17
    4bae:	18 2f       	mov	r17, r24
uint16_t tmp;
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    4bb0:	80 91 b4 1e 	lds	r24, 0x1EB4
    4bb4:	90 91 b5 1e 	lds	r25, 0x1EB5
    4bb8:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    4bbc:	81 2f       	mov	r24, r17
    4bbe:	90 e0       	ldi	r25, 0x00	; 0
    4bc0:	8f 71       	andi	r24, 0x1F	; 31
    4bc2:	90 70       	andi	r25, 0x00	; 0
    4bc4:	80 6e       	ori	r24, 0xE0	; 224
    4bc6:	90 6a       	ori	r25, 0xA0	; 160
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
    4bc8:	40 98       	cbi	0x08, 0	; 8
    4bca:	25 e1       	ldi	r18, 0x15	; 21
    4bcc:	2e bd       	out	0x2e, r18	; 46
    4bce:	0d b4       	in	r0, 0x2d	; 45
    4bd0:	07 fe       	sbrs	r0, 7
    4bd2:	fd cf       	rjmp	.-6      	; 0x4bce <rf_tx_power+0x22>
    4bd4:	9e bd       	out	0x2e, r25	; 46
    4bd6:	0d b4       	in	r0, 0x2d	; 45
    4bd8:	07 fe       	sbrs	r0, 7
    4bda:	fd cf       	rjmp	.-6      	; 0x4bd6 <rf_tx_power+0x2a>
    4bdc:	8e bd       	out	0x2e, r24	; 46
    4bde:	0d b4       	in	r0, 0x2d	; 45
    4be0:	07 fe       	sbrs	r0, 7
    4be2:	fd cf       	rjmp	.-6      	; 0x4bde <rf_tx_power+0x32>
    4be4:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    4be6:	80 91 b4 1e 	lds	r24, 0x1EB4
    4bea:	90 91 b5 1e 	lds	r25, 0x1EB5
    4bee:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
#endif
}
    4bf2:	1f 91       	pop	r17
    4bf4:	08 95       	ret

00004bf6 <rf_tx_packet>:
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    4bf6:	ff 92       	push	r15
    4bf8:	0f 93       	push	r16
    4bfa:	1f 93       	push	r17
    4bfc:	df 93       	push	r29
    4bfe:	cf 93       	push	r28
    4c00:	00 d0       	rcall	.+0      	; 0x4c02 <rf_tx_packet+0xc>
    4c02:	00 d0       	rcall	.+0      	; 0x4c04 <rf_tx_packet+0xe>
    4c04:	cd b7       	in	r28, 0x3d	; 61
    4c06:	de b7       	in	r29, 0x3e	; 62
    4c08:	8c 01       	movw	r16, r24
    uint8_t success;
    uint8_t spiStatusByte;
   uint8_t checksum,i;
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    4c0a:	80 91 b4 1e 	lds	r24, 0x1EB4
    4c0e:	90 91 b5 1e 	lds	r25, 0x1EB5
    4c12:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
#endif

if(security_enable)
    4c16:	80 91 b6 1e 	lds	r24, 0x1EB6
    4c1a:	88 23       	and	r24, r24
    4c1c:	39 f0       	breq	.+14     	; 0x4c2c <rf_tx_packet+0x36>
    FASTSPI_STROBE(CC2420_STXENC);
    4c1e:	40 98       	cbi	0x08, 0	; 8
    4c20:	9d e0       	ldi	r25, 0x0D	; 13
    4c22:	9e bd       	out	0x2e, r25	; 46
    4c24:	0d b4       	in	r0, 0x2d	; 45
    4c26:	07 fe       	sbrs	r0, 7
    4c28:	fd cf       	rjmp	.-6      	; 0x4c24 <rf_tx_packet+0x2e>
    4c2a:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    4c2c:	1a 82       	std	Y+2, r1	; 0x02
    for(i=0; i<pRTI->length; i++ )
    4c2e:	d8 01       	movw	r26, r16
    4c30:	12 96       	adiw	r26, 0x02	; 2
    4c32:	9c 91       	ld	r25, X
    4c34:	12 97       	sbiw	r26, 0x02	; 2
    4c36:	49 2f       	mov	r20, r25
    4c38:	55 27       	eor	r21, r21
    4c3a:	47 fd       	sbrc	r20, 7
    4c3c:	50 95       	com	r21
    4c3e:	20 e0       	ldi	r18, 0x00	; 0
    4c40:	0c c0       	rjmp	.+24     	; 0x4c5a <rf_tx_packet+0x64>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    4c42:	d8 01       	movw	r26, r16
    4c44:	13 96       	adiw	r26, 0x03	; 3
    4c46:	ed 91       	ld	r30, X+
    4c48:	fc 91       	ld	r31, X
    4c4a:	14 97       	sbiw	r26, 0x04	; 4
    4c4c:	e6 0f       	add	r30, r22
    4c4e:	f7 1f       	adc	r31, r23
    4c50:	3a 81       	ldd	r19, Y+2	; 0x02
    4c52:	60 81       	ld	r22, Z
    4c54:	36 0f       	add	r19, r22
    4c56:	3a 83       	std	Y+2, r19	; 0x02

if(security_enable)
    FASTSPI_STROBE(CC2420_STXENC);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    4c58:	2f 5f       	subi	r18, 0xFF	; 255
    4c5a:	62 2f       	mov	r22, r18
    4c5c:	70 e0       	ldi	r23, 0x00	; 0
    4c5e:	64 17       	cp	r22, r20
    4c60:	75 07       	cpc	r23, r21
    4c62:	7c f3       	brlt	.-34     	; 0x4c42 <rf_tx_packet+0x4c>
    }
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)

    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a slighly higher later since they assume TDMA
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    4c64:	29 2f       	mov	r18, r25
    4c66:	24 5f       	subi	r18, 0xF4	; 244
    4c68:	29 83       	std	Y+1, r18	; 0x01
    if(security_enable) packetLength+=4;  // for CTR counter
    4c6a:	88 23       	and	r24, r24
    4c6c:	11 f0       	breq	.+4      	; 0x4c72 <rf_tx_packet+0x7c>
    4c6e:	90 5f       	subi	r25, 0xF0	; 240
    4c70:	99 83       	std	Y+1, r25	; 0x01

   	// XXX 2 below are hacks...
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
    // Wait until the transceiver is idle
    while (FIFOP_IS_1 || SFD_IS_1);
    4c72:	67 99       	sbic	0x0c, 7	; 12
    4c74:	fe cf       	rjmp	.-4      	; 0x4c72 <rf_tx_packet+0x7c>
    4c76:	4e 99       	sbic	0x09, 6	; 9
    4c78:	fc cf       	rjmp	.-8      	; 0x4c72 <rf_tx_packet+0x7c>
    // Turn off global interrupts to avoid interference on the SPI interface
    DISABLE_GLOBAL_INT();
    4c7a:	f8 94       	cli
	// Flush the TX FIFO just in case...
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    4c7c:	40 98       	cbi	0x08, 0	; 8
    4c7e:	99 e0       	ldi	r25, 0x09	; 9
    4c80:	9e bd       	out	0x2e, r25	; 46
    4c82:	0d b4       	in	r0, 0x2d	; 45
    4c84:	07 fe       	sbrs	r0, 7
    4c86:	fd cf       	rjmp	.-6      	; 0x4c82 <rf_tx_packet+0x8c>
    4c88:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    4c8a:	40 98       	cbi	0x08, 0	; 8
    4c8c:	99 e0       	ldi	r25, 0x09	; 9
    4c8e:	9e bd       	out	0x2e, r25	; 46
    4c90:	0d b4       	in	r0, 0x2d	; 45
    4c92:	07 fe       	sbrs	r0, 7
    4c94:	fd cf       	rjmp	.-6      	; 0x4c90 <rf_tx_packet+0x9a>
    4c96:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/

    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    4c98:	40 98       	cbi	0x08, 0	; 8
    4c9a:	9e e3       	ldi	r25, 0x3E	; 62
    4c9c:	9e bd       	out	0x2e, r25	; 46
    4c9e:	0d b4       	in	r0, 0x2d	; 45
    4ca0:	07 fe       	sbrs	r0, 7
    4ca2:	fd cf       	rjmp	.-6      	; 0x4c9e <rf_tx_packet+0xa8>
    4ca4:	99 81       	ldd	r25, Y+1	; 0x01
    4ca6:	9e bd       	out	0x2e, r25	; 46
    4ca8:	0d b4       	in	r0, 0x2d	; 45
    4caa:	07 fe       	sbrs	r0, 7
    4cac:	fd cf       	rjmp	.-6      	; 0x4ca8 <rf_tx_packet+0xb2>
    4cae:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = RF_FCF_NOACK;   // default
    4cb0:	21 e4       	ldi	r18, 0x41	; 65
    4cb2:	38 e8       	ldi	r19, 0x88	; 136
    4cb4:	3c 83       	std	Y+4, r19	; 0x04
    4cb6:	2b 83       	std	Y+3, r18	; 0x03
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    4cb8:	90 91 c4 1e 	lds	r25, 0x1EC4
    4cbc:	99 23       	and	r25, r25
    4cbe:	21 f0       	breq	.+8      	; 0x4cc8 <rf_tx_packet+0xd2>
    4cc0:	21 e6       	ldi	r18, 0x61	; 97
    4cc2:	38 e8       	ldi	r19, 0x88	; 136
    4cc4:	3c 83       	std	Y+4, r19	; 0x04
    4cc6:	2b 83       	std	Y+3, r18	; 0x03
    if(security_enable) frameControlField |= RF_SEC_BM;
    4cc8:	88 23       	and	r24, r24
    4cca:	29 f0       	breq	.+10     	; 0x4cd6 <rf_tx_packet+0xe0>
    4ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    4cce:	3c 81       	ldd	r19, Y+4	; 0x04
    4cd0:	28 60       	ori	r18, 0x08	; 8
    4cd2:	3c 83       	std	Y+4, r19	; 0x04
    4cd4:	2b 83       	std	Y+3, r18	; 0x03
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    4cd6:	40 98       	cbi	0x08, 0	; 8
    4cd8:	9e e3       	ldi	r25, 0x3E	; 62
    4cda:	9e bd       	out	0x2e, r25	; 46
    4cdc:	0d b4       	in	r0, 0x2d	; 45
    4cde:	07 fe       	sbrs	r0, 7
    4ce0:	fd cf       	rjmp	.-6      	; 0x4cdc <rf_tx_packet+0xe6>
    4ce2:	fe 01       	movw	r30, r28
    4ce4:	33 96       	adiw	r30, 0x03	; 3
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    4ce6:	9e 01       	movw	r18, r28
    4ce8:	2b 5f       	subi	r18, 0xFB	; 251
    4cea:	3f 4f       	sbci	r19, 0xFF	; 255

    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = RF_FCF_NOACK;   // default
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    if(security_enable) frameControlField |= RF_SEC_BM;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    4cec:	90 81       	ld	r25, Z
    4cee:	9e bd       	out	0x2e, r25	; 46
    4cf0:	0d b4       	in	r0, 0x2d	; 45
    4cf2:	07 fe       	sbrs	r0, 7
    4cf4:	fd cf       	rjmp	.-6      	; 0x4cf0 <rf_tx_packet+0xfa>
    4cf6:	31 96       	adiw	r30, 0x01	; 1
    4cf8:	e2 17       	cp	r30, r18
    4cfa:	f3 07       	cpc	r31, r19
    4cfc:	b9 f7       	brne	.-18     	; 0x4cec <rf_tx_packet+0xf6>
    4cfe:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    4d00:	40 98       	cbi	0x08, 0	; 8
    4d02:	9e e3       	ldi	r25, 0x3E	; 62
    4d04:	9e bd       	out	0x2e, r25	; 46
    4d06:	0d b4       	in	r0, 0x2d	; 45
    4d08:	07 fe       	sbrs	r0, 7
    4d0a:	fd cf       	rjmp	.-6      	; 0x4d06 <rf_tx_packet+0x110>
    4d0c:	90 91 bb 1e 	lds	r25, 0x1EBB
    4d10:	9e bd       	out	0x2e, r25	; 46
    4d12:	0d b4       	in	r0, 0x2d	; 45
    4d14:	07 fe       	sbrs	r0, 7
    4d16:	fd cf       	rjmp	.-6      	; 0x4d12 <rf_tx_packet+0x11c>
    4d18:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    4d1a:	40 98       	cbi	0x08, 0	; 8
    4d1c:	9e e3       	ldi	r25, 0x3E	; 62
    4d1e:	9e bd       	out	0x2e, r25	; 46
    4d20:	0d b4       	in	r0, 0x2d	; 45
    4d22:	07 fe       	sbrs	r0, 7
    4d24:	fd cf       	rjmp	.-6      	; 0x4d20 <rf_tx_packet+0x12a>
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	f9 01       	movw	r30, r18
    4d2c:	e7 54       	subi	r30, 0x47	; 71
    4d2e:	f1 4e       	sbci	r31, 0xE1	; 225
    4d30:	94 81       	ldd	r25, Z+4	; 0x04
    4d32:	9e bd       	out	0x2e, r25	; 46
    4d34:	0d b4       	in	r0, 0x2d	; 45
    4d36:	07 fe       	sbrs	r0, 7
    4d38:	fd cf       	rjmp	.-6      	; 0x4d34 <rf_tx_packet+0x13e>
    4d3a:	2f 5f       	subi	r18, 0xFF	; 255
    4d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d3e:	22 30       	cpi	r18, 0x02	; 2
    4d40:	31 05       	cpc	r19, r1
    4d42:	99 f7       	brne	.-26     	; 0x4d2a <rf_tx_packet+0x134>
    4d44:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    4d46:	40 98       	cbi	0x08, 0	; 8
    4d48:	9e e3       	ldi	r25, 0x3E	; 62
    4d4a:	9e bd       	out	0x2e, r25	; 46
    4d4c:	0d b4       	in	r0, 0x2d	; 45
    4d4e:	07 fe       	sbrs	r0, 7
    4d50:	fd cf       	rjmp	.-6      	; 0x4d4c <rf_tx_packet+0x156>
    4d52:	f8 01       	movw	r30, r16
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    4d54:	98 01       	movw	r18, r16
    4d56:	2e 5f       	subi	r18, 0xFE	; 254
    4d58:	3f 4f       	sbci	r19, 0xFF	; 255
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    if(security_enable) frameControlField |= RF_SEC_BM;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    4d5a:	90 81       	ld	r25, Z
    4d5c:	9e bd       	out	0x2e, r25	; 46
    4d5e:	0d b4       	in	r0, 0x2d	; 45
    4d60:	07 fe       	sbrs	r0, 7
    4d62:	fd cf       	rjmp	.-6      	; 0x4d5e <rf_tx_packet+0x168>
    4d64:	31 96       	adiw	r30, 0x01	; 1
    4d66:	e2 17       	cp	r30, r18
    4d68:	f3 07       	cpc	r31, r19
    4d6a:	b9 f7       	brne	.-18     	; 0x4d5a <rf_tx_packet+0x164>
    4d6c:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    4d6e:	40 98       	cbi	0x08, 0	; 8
    4d70:	9e e3       	ldi	r25, 0x3E	; 62
    4d72:	9e bd       	out	0x2e, r25	; 46
    4d74:	0d b4       	in	r0, 0x2d	; 45
    4d76:	07 fe       	sbrs	r0, 7
    4d78:	fd cf       	rjmp	.-6      	; 0x4d74 <rf_tx_packet+0x17e>
    4d7a:	20 e0       	ldi	r18, 0x00	; 0
    4d7c:	30 e0       	ldi	r19, 0x00	; 0
    4d7e:	f9 01       	movw	r30, r18
    4d80:	e7 54       	subi	r30, 0x47	; 71
    4d82:	f1 4e       	sbci	r31, 0xE1	; 225
    4d84:	96 81       	ldd	r25, Z+6	; 0x06
    4d86:	9e bd       	out	0x2e, r25	; 46
    4d88:	0d b4       	in	r0, 0x2d	; 45
    4d8a:	07 fe       	sbrs	r0, 7
    4d8c:	fd cf       	rjmp	.-6      	; 0x4d88 <rf_tx_packet+0x192>
    4d8e:	2f 5f       	subi	r18, 0xFF	; 255
    4d90:	3f 4f       	sbci	r19, 0xFF	; 255
    4d92:	22 30       	cpi	r18, 0x02	; 2
    4d94:	31 05       	cpc	r19, r1
    4d96:	99 f7       	brne	.-26     	; 0x4d7e <rf_tx_packet+0x188>
    4d98:	40 9a       	sbi	0x08, 0	; 8
    if(security_enable)
    4d9a:	88 23       	and	r24, r24
    4d9c:	99 f0       	breq	.+38     	; 0x4dc4 <rf_tx_packet+0x1ce>
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
    4d9e:	40 98       	cbi	0x08, 0	; 8
    4da0:	8e e3       	ldi	r24, 0x3E	; 62
    4da2:	8e bd       	out	0x2e, r24	; 46
    4da4:	0d b4       	in	r0, 0x2d	; 45
    4da6:	07 fe       	sbrs	r0, 7
    4da8:	fd cf       	rjmp	.-6      	; 0x4da4 <rf_tx_packet+0x1ae>
    4daa:	e6 ec       	ldi	r30, 0xC6	; 198
    4dac:	fe e1       	ldi	r31, 0x1E	; 30
    4dae:	80 81       	ld	r24, Z
    4db0:	8e bd       	out	0x2e, r24	; 46
    4db2:	0d b4       	in	r0, 0x2d	; 45
    4db4:	07 fe       	sbrs	r0, 7
    4db6:	fd cf       	rjmp	.-6      	; 0x4db2 <rf_tx_packet+0x1bc>
    4db8:	31 96       	adiw	r30, 0x01	; 1
    4dba:	be e1       	ldi	r27, 0x1E	; 30
    4dbc:	ea 3c       	cpi	r30, 0xCA	; 202
    4dbe:	fb 07       	cpc	r31, r27
    4dc0:	b1 f7       	brne	.-20     	; 0x4dae <rf_tx_packet+0x1b8>
    4dc2:	40 9a       	sbi	0x08, 0	; 8
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    4dc4:	40 98       	cbi	0x08, 0	; 8
    4dc6:	8e e3       	ldi	r24, 0x3E	; 62
    4dc8:	8e bd       	out	0x2e, r24	; 46
    4dca:	0d b4       	in	r0, 0x2d	; 45
    4dcc:	07 fe       	sbrs	r0, 7
    4dce:	fd cf       	rjmp	.-6      	; 0x4dca <rf_tx_packet+0x1d4>
    4dd0:	80 e0       	ldi	r24, 0x00	; 0
    4dd2:	0d c0       	rjmp	.+26     	; 0x4dee <rf_tx_packet+0x1f8>
    4dd4:	d8 01       	movw	r26, r16
    4dd6:	13 96       	adiw	r26, 0x03	; 3
    4dd8:	ed 91       	ld	r30, X+
    4dda:	fc 91       	ld	r31, X
    4ddc:	14 97       	sbiw	r26, 0x04	; 4
    4dde:	e2 0f       	add	r30, r18
    4de0:	f3 1f       	adc	r31, r19
    4de2:	90 81       	ld	r25, Z
    4de4:	9e bd       	out	0x2e, r25	; 46
    4de6:	0d b4       	in	r0, 0x2d	; 45
    4de8:	07 fe       	sbrs	r0, 7
    4dea:	fd cf       	rjmp	.-6      	; 0x4de6 <rf_tx_packet+0x1f0>
    4dec:	8f 5f       	subi	r24, 0xFF	; 255
    4dee:	28 2f       	mov	r18, r24
    4df0:	30 e0       	ldi	r19, 0x00	; 0
    4df2:	24 17       	cp	r18, r20
    4df4:	35 07       	cpc	r19, r21
    4df6:	74 f3       	brlt	.-36     	; 0x4dd4 <rf_tx_packet+0x1de>
    4df8:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    4dfa:	40 98       	cbi	0x08, 0	; 8
    4dfc:	8e e3       	ldi	r24, 0x3E	; 62
    4dfe:	8e bd       	out	0x2e, r24	; 46
    4e00:	0d b4       	in	r0, 0x2d	; 45
    4e02:	07 fe       	sbrs	r0, 7
    4e04:	fd cf       	rjmp	.-6      	; 0x4e00 <rf_tx_packet+0x20a>
    4e06:	8a 81       	ldd	r24, Y+2	; 0x02
    4e08:	8e bd       	out	0x2e, r24	; 46
    4e0a:	0d b4       	in	r0, 0x2d	; 45
    4e0c:	07 fe       	sbrs	r0, 7
    4e0e:	fd cf       	rjmp	.-6      	; 0x4e0a <rf_tx_packet+0x214>
    4e10:	40 9a       	sbi	0x08, 0	; 8

if (pRTI->cca == TRUE)
    4e12:	f8 01       	movw	r30, r16
    4e14:	85 81       	ldd	r24, Z+5	; 0x05
    4e16:	88 23       	and	r24, r24
    4e18:	b1 f1       	breq	.+108    	; 0x4e86 <rf_tx_packet+0x290>
{
    uint8_t cnt;
     if (!rfSettings.receiveOn)
    4e1a:	80 91 c1 1e 	lds	r24, 0x1EC1
    4e1e:	88 23       	and	r24, r24
    4e20:	39 f4       	brne	.+14     	; 0x4e30 <rf_tx_packet+0x23a>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    4e22:	40 98       	cbi	0x08, 0	; 8
    4e24:	83 e0       	ldi	r24, 0x03	; 3
    4e26:	8e bd       	out	0x2e, r24	; 46
    4e28:	0d b4       	in	r0, 0x2d	; 45
    4e2a:	07 fe       	sbrs	r0, 7
    4e2c:	fd cf       	rjmp	.-6      	; 0x4e28 <rf_tx_packet+0x232>
    4e2e:	40 9a       	sbi	0x08, 0	; 8
	}
      
      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    4e30:	40 98       	cbi	0x08, 0	; 8
    4e32:	1e bc       	out	0x2e, r1	; 46
    4e34:	0d b4       	in	r0, 0x2d	; 45
    4e36:	07 fe       	sbrs	r0, 7
    4e38:	fd cf       	rjmp	.-6      	; 0x4e34 <rf_tx_packet+0x23e>
    4e3a:	8e b5       	in	r24, 0x2e	; 46
    4e3c:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));      
    4e3e:	81 ff       	sbrs	r24, 1
    4e40:	f7 cf       	rjmp	.-18     	; 0x4e30 <rf_tx_packet+0x23a>
    4e42:	00 e0       	ldi	r16, 0x00	; 0
      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    4e44:	15 e0       	ldi	r17, 0x05	; 5
    4e46:	40 98       	cbi	0x08, 0	; 8
    4e48:	1e bd       	out	0x2e, r17	; 46
    4e4a:	0d b4       	in	r0, 0x2d	; 45
    4e4c:	07 fe       	sbrs	r0, 7
    4e4e:	fd cf       	rjmp	.-6      	; 0x4e4a <rf_tx_packet+0x254>
    4e50:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    4e52:	40 98       	cbi	0x08, 0	; 8
    4e54:	1e bc       	out	0x2e, r1	; 46
    4e56:	0d b4       	in	r0, 0x2d	; 45
    4e58:	07 fe       	sbrs	r0, 7
    4e5a:	fd cf       	rjmp	.-6      	; 0x4e56 <rf_tx_packet+0x260>
    4e5c:	fe b4       	in	r15, 0x2e	; 46
    4e5e:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    4e60:	0f 5f       	subi	r16, 0xFF	; 255
	  if (cnt > 100)
    4e62:	05 36       	cpi	r16, 0x65	; 101
    4e64:	49 f4       	brne	.+18     	; 0x4e78 <rf_tx_packet+0x282>
	    {
	      ENABLE_GLOBAL_INT ();
    4e66:	78 94       	sei
	      nrk_sem_post(radio_sem);
    4e68:	80 91 b4 1e 	lds	r24, 0x1EB4
    4e6c:	90 91 b5 1e 	lds	r25, 0x1EB5
    4e70:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
    4e74:	00 e0       	ldi	r16, 0x00	; 0
	      return FALSE;
    4e76:	4e c0       	rjmp	.+156    	; 0x4f14 <rf_tx_packet+0x31e>
	    }
	  halWait (100);
    4e78:	84 e6       	ldi	r24, 0x64	; 100
    4e7a:	90 e0       	ldi	r25, 0x00	; 0
    4e7c:	0e 94 23 30 	call	0x6046	; 0x6046 <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    4e80:	f3 fe       	sbrs	r15, 3
    4e82:	e1 cf       	rjmp	.-62     	; 0x4e46 <rf_tx_packet+0x250>
    4e84:	07 c0       	rjmp	.+14     	; 0x4e94 <rf_tx_packet+0x29e>
    }
  else
    FASTSPI_STROBE (CC2420_STXON); 
    4e86:	40 98       	cbi	0x08, 0	; 8
    4e88:	84 e0       	ldi	r24, 0x04	; 4
    4e8a:	8e bd       	out	0x2e, r24	; 46
    4e8c:	0d b4       	in	r0, 0x2d	; 45
    4e8e:	07 fe       	sbrs	r0, 7
    4e90:	fd cf       	rjmp	.-6      	; 0x4e8c <rf_tx_packet+0x296>
    4e92:	40 9a       	sbi	0x08, 0	; 8


  ENABLE_GLOBAL_INT();
    4e94:	78 94       	sei
	// Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
  while (!SFD_IS_1);
    4e96:	4e 9b       	sbis	0x09, 6	; 9
    4e98:	fe cf       	rjmp	.-4      	; 0x4e96 <rf_tx_packet+0x2a0>
  success = TRUE;

	// Turn interrupts back on
//	ENABLE_GLOBAL_INT();

    while (SFD_IS_1); // wait for packet to finish
    4e9a:	4e 99       	sbic	0x09, 6	; 9
    4e9c:	fe cf       	rjmp	.-4      	; 0x4e9a <rf_tx_packet+0x2a4>

    // Wait for the acknowledge to be received, if any
    if (auto_ack_enable) {
    4e9e:	80 91 c4 1e 	lds	r24, 0x1EC4
    4ea2:	88 23       	and	r24, r24
    4ea4:	91 f0       	breq	.+36     	; 0x4eca <rf_tx_packet+0x2d4>
		//	while (SFD_IS_1);
        // We'll enter RX automatically, so just wait until we can be sure that the 
	// ack reception should have finished
        // The timeout consists of a 12-symbol turnaround time, the ack packet duration, 
	// and a small margin
        halWait((12 * RF_SYMBOL_DURATION) + (RF_ACK_DURATION) + (2 * RF_SYMBOL_DURATION) + 100);
    4ea6:	84 ea       	ldi	r24, 0xA4	; 164
    4ea8:	92 e0       	ldi	r25, 0x02	; 2
    4eaa:	0e 94 23 30 	call	0x6046	; 0x6046 <halWait>

	if(FIFO_IS_1)
    4eae:	31 9b       	sbis	0x06, 1	; 6
    4eb0:	0e c0       	rjmp	.+28     	; 0x4ece <rf_tx_packet+0x2d8>
	{
	FASTSPI_READ_FIFO_BYTE(length);
    4eb2:	40 98       	cbi	0x08, 0	; 8
    4eb4:	8f e7       	ldi	r24, 0x7F	; 127
    4eb6:	8e bd       	out	0x2e, r24	; 46
    4eb8:	0d b4       	in	r0, 0x2d	; 45
    4eba:	07 fe       	sbrs	r0, 7
    4ebc:	fd cf       	rjmp	.-6      	; 0x4eb8 <rf_tx_packet+0x2c2>
    4ebe:	1e bc       	out	0x2e, r1	; 46
    4ec0:	0d b4       	in	r0, 0x2d	; 45
    4ec2:	07 fe       	sbrs	r0, 7
    4ec4:	fd cf       	rjmp	.-6      	; 0x4ec0 <rf_tx_packet+0x2ca>
    4ec6:	8e b5       	in	r24, 0x2e	; 46
    4ec8:	40 9a       	sbi	0x08, 0	; 8
    4eca:	01 e0       	ldi	r16, 0x01	; 1
    4ecc:	0f c0       	rjmp	.+30     	; 0x4eec <rf_tx_packet+0x2f6>
	length &= RF_LENGTH_MASK; // Ignore MSB
	    success = TRUE;

	}else
	{
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    4ece:	40 98       	cbi	0x08, 0	; 8
    4ed0:	88 e0       	ldi	r24, 0x08	; 8
    4ed2:	8e bd       	out	0x2e, r24	; 46
    4ed4:	0d b4       	in	r0, 0x2d	; 45
    4ed6:	07 fe       	sbrs	r0, 7
    4ed8:	fd cf       	rjmp	.-6      	; 0x4ed4 <rf_tx_packet+0x2de>
    4eda:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    4edc:	40 98       	cbi	0x08, 0	; 8
    4ede:	88 e0       	ldi	r24, 0x08	; 8
    4ee0:	8e bd       	out	0x2e, r24	; 46
    4ee2:	0d b4       	in	r0, 0x2d	; 45
    4ee4:	07 fe       	sbrs	r0, 7
    4ee6:	fd cf       	rjmp	.-6      	; 0x4ee2 <rf_tx_packet+0x2ec>
    4ee8:	40 9a       	sbi	0x08, 0	; 8
    4eea:	00 e0       	ldi	r16, 0x00	; 0
    }

    
	// Turn off the receiver if it should not continue to be enabled
    
    DISABLE_GLOBAL_INT();	
    4eec:	f8 94       	cli
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
    
	FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    4eee:	40 98       	cbi	0x08, 0	; 8
    4ef0:	86 e0       	ldi	r24, 0x06	; 6
    4ef2:	8e bd       	out	0x2e, r24	; 46
    4ef4:	0d b4       	in	r0, 0x2d	; 45
    4ef6:	07 fe       	sbrs	r0, 7
    4ef8:	fd cf       	rjmp	.-6      	; 0x4ef4 <rf_tx_packet+0x2fe>
    4efa:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    4efc:	78 94       	sei

    // agr XXX hack to test time issue
    //rf_rx_on(); 

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    4efe:	80 91 bb 1e 	lds	r24, 0x1EBB
    4f02:	8f 5f       	subi	r24, 0xFF	; 255
    4f04:	80 93 bb 1e 	sts	0x1EBB, r24
//	while (SFD_IS_1);
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    4f08:	80 91 b4 1e 	lds	r24, 0x1EB4
    4f0c:	90 91 b5 1e 	lds	r25, 0x1EB5
    4f10:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
#endif
    return success;

}
    4f14:	80 2f       	mov	r24, r16
    4f16:	0f 90       	pop	r0
    4f18:	0f 90       	pop	r0
    4f1a:	0f 90       	pop	r0
    4f1c:	0f 90       	pop	r0
    4f1e:	cf 91       	pop	r28
    4f20:	df 91       	pop	r29
    4f22:	1f 91       	pop	r17
    4f24:	0f 91       	pop	r16
    4f26:	ff 90       	pop	r15
    4f28:	08 95       	ret

00004f2a <rf_tx_tdma_packet>:

/**************************************************************************
This function is the same as normal TX, only it records actual transmission
starting time for calculating offset for SYNC
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time, uint16_t *tx_start_time) {
    4f2a:	af 92       	push	r10
    4f2c:	bf 92       	push	r11
    4f2e:	cf 92       	push	r12
    4f30:	df 92       	push	r13
    4f32:	ef 92       	push	r14
    4f34:	ff 92       	push	r15
    4f36:	0f 93       	push	r16
    4f38:	1f 93       	push	r17
    4f3a:	df 93       	push	r29
    4f3c:	cf 93       	push	r28
    4f3e:	00 d0       	rcall	.+0      	; 0x4f40 <rf_tx_tdma_packet+0x16>
    4f40:	00 d0       	rcall	.+0      	; 0x4f42 <rf_tx_tdma_packet+0x18>
    4f42:	0f 92       	push	r0
    4f44:	cd b7       	in	r28, 0x3d	; 61
    4f46:	de b7       	in	r29, 0x3e	; 62
    4f48:	8c 01       	movw	r16, r24
    4f4a:	7b 01       	movw	r14, r22
    4f4c:	5a 01       	movw	r10, r20
    4f4e:	69 01       	movw	r12, r18
    	uint8_t spiStatusByte;
   	uint8_t checksum,i;
	uint8_t timestamp;

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend (radio_sem);
    4f50:	80 91 b4 1e 	lds	r24, 0x1EB4
    4f54:	90 91 b5 1e 	lds	r25, 0x1EB5
    4f58:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
#endif
	timestamp=_nrk_os_timer_get();
    4f5c:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
	// XXX 2 below are hacks...
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    4f60:	40 98       	cbi	0x08, 0	; 8
    4f62:	88 e0       	ldi	r24, 0x08	; 8
    4f64:	8e bd       	out	0x2e, r24	; 46
    4f66:	0d b4       	in	r0, 0x2d	; 45
    4f68:	07 fe       	sbrs	r0, 7
    4f6a:	fd cf       	rjmp	.-6      	; 0x4f66 <rf_tx_tdma_packet+0x3c>
    4f6c:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    4f6e:	40 98       	cbi	0x08, 0	; 8
    4f70:	88 e0       	ldi	r24, 0x08	; 8
    4f72:	8e bd       	out	0x2e, r24	; 46
    4f74:	0d b4       	in	r0, 0x2d	; 45
    4f76:	07 fe       	sbrs	r0, 7
    4f78:	fd cf       	rjmp	.-6      	; 0x4f74 <rf_tx_tdma_packet+0x4a>
    4f7a:	40 9a       	sbi	0x08, 0	; 8
    // Wait until the transceiver is idle
     while (FIFOP_IS_1 || SFD_IS_1);
    4f7c:	67 99       	sbic	0x0c, 7	; 12
    4f7e:	fe cf       	rjmp	.-4      	; 0x4f7c <rf_tx_tdma_packet+0x52>
    4f80:	4e 99       	sbic	0x09, 6	; 9
    4f82:	fc cf       	rjmp	.-8      	; 0x4f7c <rf_tx_tdma_packet+0x52>
    // Turn off global interrupts to avoid interference on the SPI interface
      DISABLE_GLOBAL_INT();
    4f84:	f8 94       	cli
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    4f86:	40 98       	cbi	0x08, 0	; 8
    4f88:	89 e0       	ldi	r24, 0x09	; 9
    4f8a:	8e bd       	out	0x2e, r24	; 46
    4f8c:	0d b4       	in	r0, 0x2d	; 45
    4f8e:	07 fe       	sbrs	r0, 7
    4f90:	fd cf       	rjmp	.-6      	; 0x4f8c <rf_tx_tdma_packet+0x62>
    4f92:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    4f94:	40 98       	cbi	0x08, 0	; 8
    4f96:	89 e0       	ldi	r24, 0x09	; 9
    4f98:	8e bd       	out	0x2e, r24	; 46
    4f9a:	0d b4       	in	r0, 0x2d	; 45
    4f9c:	07 fe       	sbrs	r0, 7
    4f9e:	fd cf       	rjmp	.-6      	; 0x4f9a <rf_tx_tdma_packet+0x70>
    4fa0:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    4fa2:	1a 82       	std	Y+2, r1	; 0x02
    for(i=0; i<pRTI->length; i++ )
    4fa4:	d8 01       	movw	r26, r16
    4fa6:	12 96       	adiw	r26, 0x02	; 2
    4fa8:	2c 91       	ld	r18, X
    4faa:	12 97       	sbiw	r26, 0x02	; 2
    4fac:	62 2f       	mov	r22, r18
    4fae:	77 27       	eor	r23, r23
    4fb0:	67 fd       	sbrc	r22, 7
    4fb2:	70 95       	com	r23
    4fb4:	80 e0       	ldi	r24, 0x00	; 0
    4fb6:	0c c0       	rjmp	.+24     	; 0x4fd0 <rf_tx_tdma_packet+0xa6>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    4fb8:	d8 01       	movw	r26, r16
    4fba:	13 96       	adiw	r26, 0x03	; 3
    4fbc:	ed 91       	ld	r30, X+
    4fbe:	fc 91       	ld	r31, X
    4fc0:	14 97       	sbiw	r26, 0x04	; 4
    4fc2:	e4 0f       	add	r30, r20
    4fc4:	f5 1f       	adc	r31, r21
    4fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fc8:	30 81       	ld	r19, Z
    4fca:	93 0f       	add	r25, r19
    4fcc:	9a 83       	std	Y+2, r25	; 0x02
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
	FASTSPI_STROBE(CC2420_SFLUSHTX);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    4fce:	8f 5f       	subi	r24, 0xFF	; 255
    4fd0:	48 2f       	mov	r20, r24
    4fd2:	50 e0       	ldi	r21, 0x00	; 0
    4fd4:	46 17       	cp	r20, r22
    4fd6:	57 07       	cpc	r21, r23
    4fd8:	7c f3       	brlt	.-34     	; 0x4fb8 <rf_tx_tdma_packet+0x8e>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    }
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    4fda:	82 2f       	mov	r24, r18
    4fdc:	84 5f       	subi	r24, 0xF4	; 244
    4fde:	89 83       	std	Y+1, r24	; 0x01
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    4fe0:	40 98       	cbi	0x08, 0	; 8
    4fe2:	9e e3       	ldi	r25, 0x3E	; 62
    4fe4:	9e bd       	out	0x2e, r25	; 46
    4fe6:	0d b4       	in	r0, 0x2d	; 45
    4fe8:	07 fe       	sbrs	r0, 7
    4fea:	fd cf       	rjmp	.-6      	; 0x4fe6 <rf_tx_tdma_packet+0xbc>
    4fec:	8e bd       	out	0x2e, r24	; 46
    4fee:	0d b4       	in	r0, 0x2d	; 45
    4ff0:	07 fe       	sbrs	r0, 7
    4ff2:	fd cf       	rjmp	.-6      	; 0x4fee <rf_tx_tdma_packet+0xc4>
    4ff4:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    4ff6:	f8 01       	movw	r30, r16
    4ff8:	86 81       	ldd	r24, Z+6	; 0x06
    4ffa:	88 23       	and	r24, r24
    4ffc:	19 f4       	brne	.+6      	; 0x5004 <rf_tx_tdma_packet+0xda>
    4ffe:	81 e4       	ldi	r24, 0x41	; 65
    5000:	98 e8       	ldi	r25, 0x88	; 136
    5002:	02 c0       	rjmp	.+4      	; 0x5008 <rf_tx_tdma_packet+0xde>
    5004:	81 e6       	ldi	r24, 0x61	; 97
    5006:	98 e8       	ldi	r25, 0x88	; 136
    5008:	9c 83       	std	Y+4, r25	; 0x04
    500a:	8b 83       	std	Y+3, r24	; 0x03
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    500c:	40 98       	cbi	0x08, 0	; 8
    500e:	8e e3       	ldi	r24, 0x3E	; 62
    5010:	8e bd       	out	0x2e, r24	; 46
    5012:	0d b4       	in	r0, 0x2d	; 45
    5014:	07 fe       	sbrs	r0, 7
    5016:	fd cf       	rjmp	.-6      	; 0x5012 <rf_tx_tdma_packet+0xe8>
    5018:	fe 01       	movw	r30, r28
    501a:	33 96       	adiw	r30, 0x03	; 3

/**************************************************************************
This function is the same as normal TX, only it records actual transmission
starting time for calculating offset for SYNC
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time, uint16_t *tx_start_time) {
    501c:	ce 01       	movw	r24, r28
    501e:	05 96       	adiw	r24, 0x05	; 5
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    5020:	20 81       	ld	r18, Z
    5022:	2e bd       	out	0x2e, r18	; 46
    5024:	0d b4       	in	r0, 0x2d	; 45
    5026:	07 fe       	sbrs	r0, 7
    5028:	fd cf       	rjmp	.-6      	; 0x5024 <rf_tx_tdma_packet+0xfa>
    502a:	31 96       	adiw	r30, 0x01	; 1
    502c:	e8 17       	cp	r30, r24
    502e:	f9 07       	cpc	r31, r25
    5030:	b9 f7       	brne	.-18     	; 0x5020 <rf_tx_tdma_packet+0xf6>
    5032:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    5034:	40 98       	cbi	0x08, 0	; 8
    5036:	8e e3       	ldi	r24, 0x3E	; 62
    5038:	8e bd       	out	0x2e, r24	; 46
    503a:	0d b4       	in	r0, 0x2d	; 45
    503c:	07 fe       	sbrs	r0, 7
    503e:	fd cf       	rjmp	.-6      	; 0x503a <rf_tx_tdma_packet+0x110>
    5040:	80 91 bb 1e 	lds	r24, 0x1EBB
    5044:	8e bd       	out	0x2e, r24	; 46
    5046:	0d b4       	in	r0, 0x2d	; 45
    5048:	07 fe       	sbrs	r0, 7
    504a:	fd cf       	rjmp	.-6      	; 0x5046 <rf_tx_tdma_packet+0x11c>
    504c:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    504e:	40 98       	cbi	0x08, 0	; 8
    5050:	8e e3       	ldi	r24, 0x3E	; 62
    5052:	8e bd       	out	0x2e, r24	; 46
    5054:	0d b4       	in	r0, 0x2d	; 45
    5056:	07 fe       	sbrs	r0, 7
    5058:	fd cf       	rjmp	.-6      	; 0x5054 <rf_tx_tdma_packet+0x12a>
    505a:	80 e0       	ldi	r24, 0x00	; 0
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	fc 01       	movw	r30, r24
    5060:	e7 54       	subi	r30, 0x47	; 71
    5062:	f1 4e       	sbci	r31, 0xE1	; 225
    5064:	24 81       	ldd	r18, Z+4	; 0x04
    5066:	2e bd       	out	0x2e, r18	; 46
    5068:	0d b4       	in	r0, 0x2d	; 45
    506a:	07 fe       	sbrs	r0, 7
    506c:	fd cf       	rjmp	.-6      	; 0x5068 <rf_tx_tdma_packet+0x13e>
    506e:	01 96       	adiw	r24, 0x01	; 1
    5070:	82 30       	cpi	r24, 0x02	; 2
    5072:	91 05       	cpc	r25, r1
    5074:	a1 f7       	brne	.-24     	; 0x505e <rf_tx_tdma_packet+0x134>
    5076:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    5078:	40 98       	cbi	0x08, 0	; 8
    507a:	8e e3       	ldi	r24, 0x3E	; 62
    507c:	8e bd       	out	0x2e, r24	; 46
    507e:	0d b4       	in	r0, 0x2d	; 45
    5080:	07 fe       	sbrs	r0, 7
    5082:	fd cf       	rjmp	.-6      	; 0x507e <rf_tx_tdma_packet+0x154>
    5084:	f8 01       	movw	r30, r16

/**************************************************************************
This function is the same as normal TX, only it records actual transmission
starting time for calculating offset for SYNC
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time, uint16_t *tx_start_time) {
    5086:	c8 01       	movw	r24, r16
    5088:	02 96       	adiw	r24, 0x02	; 2
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    508a:	20 81       	ld	r18, Z
    508c:	2e bd       	out	0x2e, r18	; 46
    508e:	0d b4       	in	r0, 0x2d	; 45
    5090:	07 fe       	sbrs	r0, 7
    5092:	fd cf       	rjmp	.-6      	; 0x508e <rf_tx_tdma_packet+0x164>
    5094:	31 96       	adiw	r30, 0x01	; 1
    5096:	e8 17       	cp	r30, r24
    5098:	f9 07       	cpc	r31, r25
    509a:	b9 f7       	brne	.-18     	; 0x508a <rf_tx_tdma_packet+0x160>
    509c:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    509e:	40 98       	cbi	0x08, 0	; 8
    50a0:	8e e3       	ldi	r24, 0x3E	; 62
    50a2:	8e bd       	out	0x2e, r24	; 46
    50a4:	0d b4       	in	r0, 0x2d	; 45
    50a6:	07 fe       	sbrs	r0, 7
    50a8:	fd cf       	rjmp	.-6      	; 0x50a4 <rf_tx_tdma_packet+0x17a>
    50aa:	80 e0       	ldi	r24, 0x00	; 0
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	fc 01       	movw	r30, r24
    50b0:	e7 54       	subi	r30, 0x47	; 71
    50b2:	f1 4e       	sbci	r31, 0xE1	; 225
    50b4:	26 81       	ldd	r18, Z+6	; 0x06
    50b6:	2e bd       	out	0x2e, r18	; 46
    50b8:	0d b4       	in	r0, 0x2d	; 45
    50ba:	07 fe       	sbrs	r0, 7
    50bc:	fd cf       	rjmp	.-6      	; 0x50b8 <rf_tx_tdma_packet+0x18e>
    50be:	01 96       	adiw	r24, 0x01	; 1
    50c0:	82 30       	cpi	r24, 0x02	; 2
    50c2:	91 05       	cpc	r25, r1
    50c4:	a1 f7       	brne	.-24     	; 0x50ae <rf_tx_tdma_packet+0x184>
    50c6:	40 9a       	sbi	0x08, 0	; 8

    nrk_high_speed_timer_wait(slot_start_time,tx_guard_time);
    50c8:	c7 01       	movw	r24, r14
    50ca:	b5 01       	movw	r22, r10
    50cc:	0e 94 40 41 	call	0x8280	; 0x8280 <nrk_high_speed_timer_wait>
    
if (pRTI->cca == TRUE)
    50d0:	d8 01       	movw	r26, r16
    50d2:	15 96       	adiw	r26, 0x05	; 5
    50d4:	8c 91       	ld	r24, X
    50d6:	15 97       	sbiw	r26, 0x05	; 5
    50d8:	88 23       	and	r24, r24
    50da:	81 f1       	breq	.+96     	; 0x513c <rf_tx_tdma_packet+0x212>
    {
    uint8_t cnt;
      if (!rfSettings.receiveOn)
    50dc:	80 91 c1 1e 	lds	r24, 0x1EC1
    50e0:	88 23       	and	r24, r24
    50e2:	39 f4       	brne	.+14     	; 0x50f2 <rf_tx_tdma_packet+0x1c8>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    50e4:	40 98       	cbi	0x08, 0	; 8
    50e6:	83 e0       	ldi	r24, 0x03	; 3
    50e8:	8e bd       	out	0x2e, r24	; 46
    50ea:	0d b4       	in	r0, 0x2d	; 45
    50ec:	07 fe       	sbrs	r0, 7
    50ee:	fd cf       	rjmp	.-6      	; 0x50ea <rf_tx_tdma_packet+0x1c0>
    50f0:	40 9a       	sbi	0x08, 0	; 8
    50f2:	20 e0       	ldi	r18, 0x00	; 0

      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    50f4:	65 e0       	ldi	r22, 0x05	; 5
    50f6:	e6 2e       	mov	r14, r22
    50f8:	40 98       	cbi	0x08, 0	; 8
    50fa:	ee bc       	out	0x2e, r14	; 46
    50fc:	0d b4       	in	r0, 0x2d	; 45
    50fe:	07 fe       	sbrs	r0, 7
    5100:	fd cf       	rjmp	.-6      	; 0x50fc <rf_tx_tdma_packet+0x1d2>
    5102:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    5104:	40 98       	cbi	0x08, 0	; 8
    5106:	1e bc       	out	0x2e, r1	; 46
    5108:	0d b4       	in	r0, 0x2d	; 45
    510a:	07 fe       	sbrs	r0, 7
    510c:	fd cf       	rjmp	.-6      	; 0x5108 <rf_tx_tdma_packet+0x1de>
    510e:	ae b4       	in	r10, 0x2e	; 46
    5110:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    5112:	2f 5f       	subi	r18, 0xFF	; 255
	  if (cnt > 100)
    5114:	25 36       	cpi	r18, 0x65	; 101
    5116:	49 f4       	brne	.+18     	; 0x512a <rf_tx_tdma_packet+0x200>
	    {
	      ENABLE_GLOBAL_INT ();
    5118:	78 94       	sei
		nrk_sem_post(radio_sem);
    511a:	80 91 b4 1e 	lds	r24, 0x1EB4
    511e:	90 91 b5 1e 	lds	r25, 0x1EB5
    5122:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
    5126:	80 e0       	ldi	r24, 0x00	; 0
		//printf("transmission fail.\n\r");
	      return FALSE;
    5128:	78 c0       	rjmp	.+240    	; 0x521a <rf_tx_tdma_packet+0x2f0>
	    }
	  halWait (100);
    512a:	84 e6       	ldi	r24, 0x64	; 100
    512c:	90 e0       	ldi	r25, 0x00	; 0
    512e:	2d 83       	std	Y+5, r18	; 0x05
    5130:	0e 94 23 30 	call	0x6046	; 0x6046 <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    5134:	2d 81       	ldd	r18, Y+5	; 0x05
    5136:	a3 fe       	sbrs	r10, 3
    5138:	df cf       	rjmp	.-66     	; 0x50f8 <rf_tx_tdma_packet+0x1ce>
    513a:	07 c0       	rjmp	.+14     	; 0x514a <rf_tx_tdma_packet+0x220>
	//printf("In basic_rf.c: cnt is %d\n\r", cnt);
    }
  else
    FASTSPI_STROBE (CC2420_STXON);
    513c:	40 98       	cbi	0x08, 0	; 8
    513e:	84 e0       	ldi	r24, 0x04	; 4
    5140:	8e bd       	out	0x2e, r24	; 46
    5142:	0d b4       	in	r0, 0x2d	; 45
    5144:	07 fe       	sbrs	r0, 7
    5146:	fd cf       	rjmp	.-6      	; 0x5142 <rf_tx_tdma_packet+0x218>
    5148:	40 9a       	sbi	0x08, 0	; 8

    // get the high speed timer value
//    nrk_gpio_set(NRK_DEBUG_0);

    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    514a:	40 98       	cbi	0x08, 0	; 8
    514c:	8e e3       	ldi	r24, 0x3E	; 62
    514e:	8e bd       	out	0x2e, r24	; 46
    5150:	0d b4       	in	r0, 0x2d	; 45
    5152:	07 fe       	sbrs	r0, 7
    5154:	fd cf       	rjmp	.-6      	; 0x5150 <rf_tx_tdma_packet+0x226>
    5156:	f8 01       	movw	r30, r16
    5158:	42 81       	ldd	r20, Z+2	; 0x02
    515a:	55 27       	eor	r21, r21
    515c:	47 fd       	sbrc	r20, 7
    515e:	50 95       	com	r21
    5160:	80 e0       	ldi	r24, 0x00	; 0
    5162:	0d c0       	rjmp	.+26     	; 0x517e <rf_tx_tdma_packet+0x254>
    5164:	d8 01       	movw	r26, r16
    5166:	13 96       	adiw	r26, 0x03	; 3
    5168:	ed 91       	ld	r30, X+
    516a:	fc 91       	ld	r31, X
    516c:	14 97       	sbiw	r26, 0x04	; 4
    516e:	e2 0f       	add	r30, r18
    5170:	f3 1f       	adc	r31, r19
    5172:	90 81       	ld	r25, Z
    5174:	9e bd       	out	0x2e, r25	; 46
    5176:	0d b4       	in	r0, 0x2d	; 45
    5178:	07 fe       	sbrs	r0, 7
    517a:	fd cf       	rjmp	.-6      	; 0x5176 <rf_tx_tdma_packet+0x24c>
    517c:	8f 5f       	subi	r24, 0xFF	; 255
    517e:	28 2f       	mov	r18, r24
    5180:	30 e0       	ldi	r19, 0x00	; 0
    5182:	24 17       	cp	r18, r20
    5184:	35 07       	cpc	r19, r21
    5186:	74 f3       	brlt	.-36     	; 0x5164 <rf_tx_tdma_packet+0x23a>
    5188:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    518a:	40 98       	cbi	0x08, 0	; 8
    518c:	8e e3       	ldi	r24, 0x3E	; 62
    518e:	8e bd       	out	0x2e, r24	; 46
    5190:	0d b4       	in	r0, 0x2d	; 45
    5192:	07 fe       	sbrs	r0, 7
    5194:	fd cf       	rjmp	.-6      	; 0x5190 <rf_tx_tdma_packet+0x266>
    5196:	8a 81       	ldd	r24, Y+2	; 0x02
    5198:	8e bd       	out	0x2e, r24	; 46
    519a:	0d b4       	in	r0, 0x2d	; 45
    519c:	07 fe       	sbrs	r0, 7
    519e:	fd cf       	rjmp	.-6      	; 0x519a <rf_tx_tdma_packet+0x270>
    51a0:	40 9a       	sbi	0x08, 0	; 8

    //nrk_spin_wait_us(200);
//  FASTSPI_STROBE(CC2420_STXON);
   // Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
	while (!SFD_IS_1);
    51a2:	4e 9b       	sbis	0x09, 6	; 9
    51a4:	fe cf       	rjmp	.-4      	; 0x51a2 <rf_tx_tdma_packet+0x278>
	 *tx_start_time = (volatile)TCNT1;
    51a6:	80 91 84 00 	lds	r24, 0x0084
    51aa:	90 91 85 00 	lds	r25, 0x0085
    51ae:	f6 01       	movw	r30, r12
    51b0:	91 83       	std	Z+1, r25	; 0x01
    51b2:	80 83       	st	Z, r24
		success = rfSettings.ackReceived;
    }*/

    
	// Turn off the receiver if it should not continue to be enabled
    DISABLE_GLOBAL_INT();
    51b4:	f8 94       	cli
    // XXX hack, temp out
    //if (!rfSettings.receiveOn) { while (SFD_IS_1); /*FASTSPI_STROBE(CC2420_SRFOFF);*/ }
    // while (SFD_IS_1); 
    while (SFD_IS_1); // wait for packet to finish
    51b6:	4e 99       	sbic	0x09, 6	; 9
    51b8:	fe cf       	rjmp	.-4      	; 0x51b6 <rf_tx_tdma_packet+0x28c>
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    51ba:	40 98       	cbi	0x08, 0	; 8
    51bc:	88 e0       	ldi	r24, 0x08	; 8
    51be:	8e bd       	out	0x2e, r24	; 46
    51c0:	0d b4       	in	r0, 0x2d	; 45
    51c2:	07 fe       	sbrs	r0, 7
    51c4:	fd cf       	rjmp	.-6      	; 0x51c0 <rf_tx_tdma_packet+0x296>
    51c6:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    51c8:	40 98       	cbi	0x08, 0	; 8
    51ca:	88 e0       	ldi	r24, 0x08	; 8
    51cc:	8e bd       	out	0x2e, r24	; 46
    51ce:	0d b4       	in	r0, 0x2d	; 45
    51d0:	07 fe       	sbrs	r0, 7
    51d2:	fd cf       	rjmp	.-6      	; 0x51ce <rf_tx_tdma_packet+0x2a4>
    51d4:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    51d6:	40 98       	cbi	0x08, 0	; 8
    51d8:	89 e0       	ldi	r24, 0x09	; 9
    51da:	8e bd       	out	0x2e, r24	; 46
    51dc:	0d b4       	in	r0, 0x2d	; 45
    51de:	07 fe       	sbrs	r0, 7
    51e0:	fd cf       	rjmp	.-6      	; 0x51dc <rf_tx_tdma_packet+0x2b2>
    51e2:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    51e4:	40 98       	cbi	0x08, 0	; 8
    51e6:	89 e0       	ldi	r24, 0x09	; 9
    51e8:	8e bd       	out	0x2e, r24	; 46
    51ea:	0d b4       	in	r0, 0x2d	; 45
    51ec:	07 fe       	sbrs	r0, 7
    51ee:	fd cf       	rjmp	.-6      	; 0x51ea <rf_tx_tdma_packet+0x2c0>
    51f0:	40 9a       	sbi	0x08, 0	; 8

FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    51f2:	40 98       	cbi	0x08, 0	; 8
    51f4:	86 e0       	ldi	r24, 0x06	; 6
    51f6:	8e bd       	out	0x2e, r24	; 46
    51f8:	0d b4       	in	r0, 0x2d	; 45
    51fa:	07 fe       	sbrs	r0, 7
    51fc:	fd cf       	rjmp	.-6      	; 0x51f8 <rf_tx_tdma_packet+0x2ce>
    51fe:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    5200:	78 94       	sei
    

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    5202:	80 91 bb 1e 	lds	r24, 0x1EBB
    5206:	8f 5f       	subi	r24, 0xFF	; 255
    5208:	80 93 bb 1e 	sts	0x1EBB, r24
//	while (SFD_IS_1);
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    520c:	80 91 b4 1e 	lds	r24, 0x1EB4
    5210:	90 91 b5 1e 	lds	r25, 0x1EB5
    5214:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
    5218:	81 e0       	ldi	r24, 0x01	; 1
#endif
	//printf("sent success? %d.\n\r",success);
    return success;

}
    521a:	0f 90       	pop	r0
    521c:	0f 90       	pop	r0
    521e:	0f 90       	pop	r0
    5220:	0f 90       	pop	r0
    5222:	0f 90       	pop	r0
    5224:	cf 91       	pop	r28
    5226:	df 91       	pop	r29
    5228:	1f 91       	pop	r17
    522a:	0f 91       	pop	r16
    522c:	ff 90       	pop	r15
    522e:	ef 90       	pop	r14
    5230:	df 90       	pop	r13
    5232:	cf 90       	pop	r12
    5234:	bf 90       	pop	r11
    5236:	af 90       	pop	r10
    5238:	08 95       	ret

0000523a <rf_addr_decode_set_my_mac>:
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
    523a:	df 93       	push	r29
    523c:	cf 93       	push	r28
    523e:	00 d0       	rcall	.+0      	; 0x5240 <rf_addr_decode_set_my_mac+0x6>
    5240:	cd b7       	in	r28, 0x3d	; 61
    5242:	de b7       	in	r29, 0x3e	; 62
    5244:	9a 83       	std	Y+2, r25	; 0x02
    5246:	89 83       	std	Y+1, r24	; 0x01
uint8_t n;
    rfSettings.myAddr = my_mac;
    5248:	90 93 c0 1e 	sts	0x1EC0, r25
    524c:	80 93 bf 1e 	sts	0x1EBF, r24
    nrk_spin_wait_us(500);
    5250:	84 ef       	ldi	r24, 0xF4	; 244
    5252:	91 e0       	ldi	r25, 0x01	; 1
    5254:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    5258:	40 98       	cbi	0x08, 0	; 8
    525a:	8a ee       	ldi	r24, 0xEA	; 234
    525c:	8e bd       	out	0x2e, r24	; 46
    525e:	0d b4       	in	r0, 0x2d	; 45
    5260:	07 fe       	sbrs	r0, 7
    5262:	fd cf       	rjmp	.-6      	; 0x525e <rf_addr_decode_set_my_mac+0x24>
    5264:	80 e8       	ldi	r24, 0x80	; 128
    5266:	8e bd       	out	0x2e, r24	; 46
    5268:	0d b4       	in	r0, 0x2d	; 45
    526a:	07 fe       	sbrs	r0, 7
    526c:	fd cf       	rjmp	.-6      	; 0x5268 <rf_addr_decode_set_my_mac+0x2e>
    526e:	fe 01       	movw	r30, r28
    5270:	31 96       	adiw	r30, 0x01	; 1
    mdmctrl0 &= (~0x0010);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
    5272:	ce 01       	movw	r24, r28
    5274:	03 96       	adiw	r24, 0x03	; 3
{
uint8_t n;
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    5276:	20 81       	ld	r18, Z
    5278:	2e bd       	out	0x2e, r18	; 46
    527a:	0d b4       	in	r0, 0x2d	; 45
    527c:	07 fe       	sbrs	r0, 7
    527e:	fd cf       	rjmp	.-6      	; 0x527a <rf_addr_decode_set_my_mac+0x40>
    5280:	31 96       	adiw	r30, 0x01	; 1
    5282:	e8 17       	cp	r30, r24
    5284:	f9 07       	cpc	r31, r25
    5286:	b9 f7       	brne	.-18     	; 0x5276 <rf_addr_decode_set_my_mac+0x3c>
    5288:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    528a:	84 ef       	ldi	r24, 0xF4	; 244
    528c:	91 e0       	ldi	r25, 0x01	; 1
    528e:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>
}
    5292:	0f 90       	pop	r0
    5294:	0f 90       	pop	r0
    5296:	cf 91       	pop	r28
    5298:	df 91       	pop	r29
    529a:	08 95       	ret

0000529c <rf_security_set_key>:
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    529c:	8f 92       	push	r8
    529e:	9f 92       	push	r9
    52a0:	af 92       	push	r10
    52a2:	bf 92       	push	r11
    52a4:	cf 92       	push	r12
    52a6:	df 92       	push	r13
    52a8:	ef 92       	push	r14
    52aa:	ff 92       	push	r15
    52ac:	0f 93       	push	r16
    52ae:	1f 93       	push	r17
    52b0:	df 93       	push	r29
    52b2:	cf 93       	push	r28
    52b4:	00 d0       	rcall	.+0      	; 0x52b6 <rf_security_set_key+0x1a>
    52b6:	00 d0       	rcall	.+0      	; 0x52b8 <rf_security_set_key+0x1c>
    52b8:	cd b7       	in	r28, 0x3d	; 61
    52ba:	de b7       	in	r29, 0x3e	; 62
    52bc:	e8 2e       	mov	r14, r24
    52be:	09 2f       	mov	r16, r25
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    52c0:	84 e6       	ldi	r24, 0x64	; 100
    52c2:	90 e0       	ldi	r25, 0x00	; 0
    52c4:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>
    52c8:	ce 2c       	mov	r12, r14
    52ca:	d0 2e       	mov	r13, r16
    52cc:	20 e0       	ldi	r18, 0x00	; 0
    52ce:	31 e0       	ldi	r19, 0x01	; 1
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    52d0:	8e 01       	movw	r16, r28
    52d2:	0f 5f       	subi	r16, 0xFF	; 255
    52d4:	1f 4f       	sbci	r17, 0xFF	; 255
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    52d6:	a3 e0       	ldi	r26, 0x03	; 3
    52d8:	aa 2e       	mov	r10, r26
    52da:	b1 2c       	mov	r11, r1
    52dc:	ac 0e       	add	r10, r28
    52de:	bd 1e       	adc	r11, r29

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    52e0:	f6 01       	movw	r30, r12
    52e2:	90 80       	ld	r9, Z
    52e4:	88 24       	eor	r8, r8
    52e6:	81 81       	ldd	r24, Z+1	; 0x01
    52e8:	90 e0       	ldi	r25, 0x00	; 0
    52ea:	88 29       	or	r24, r8
    52ec:	99 29       	or	r25, r9
    52ee:	9a 83       	std	Y+2, r25	; 0x02
    52f0:	89 83       	std	Y+1, r24	; 0x01
   	nrk_spin_wait_us(100); 
    52f2:	84 e6       	ldi	r24, 0x64	; 100
    52f4:	90 e0       	ldi	r25, 0x00	; 0
    52f6:	2b 83       	std	Y+3, r18	; 0x03
    52f8:	3c 83       	std	Y+4, r19	; 0x04
    52fa:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    52fe:	40 98       	cbi	0x08, 0	; 8
    5300:	2b 81       	ldd	r18, Y+3	; 0x03
    5302:	3c 81       	ldd	r19, Y+4	; 0x04
    5304:	82 2f       	mov	r24, r18
    5306:	80 68       	ori	r24, 0x80	; 128
    5308:	8e bd       	out	0x2e, r24	; 46
    530a:	0d b4       	in	r0, 0x2d	; 45
    530c:	07 fe       	sbrs	r0, 7
    530e:	fd cf       	rjmp	.-6      	; 0x530a <rf_security_set_key+0x6e>
    5310:	c9 01       	movw	r24, r18
    5312:	95 95       	asr	r25
    5314:	87 95       	ror	r24
    5316:	80 7c       	andi	r24, 0xC0	; 192
    5318:	8e bd       	out	0x2e, r24	; 46
    531a:	0d b4       	in	r0, 0x2d	; 45
    531c:	07 fe       	sbrs	r0, 7
    531e:	fd cf       	rjmp	.-6      	; 0x531a <rf_security_set_key+0x7e>
    5320:	78 01       	movw	r14, r16
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    5322:	f8 01       	movw	r30, r16
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    5324:	80 81       	ld	r24, Z
    5326:	8e bd       	out	0x2e, r24	; 46
    5328:	0d b4       	in	r0, 0x2d	; 45
    532a:	07 fe       	sbrs	r0, 7
    532c:	fd cf       	rjmp	.-6      	; 0x5328 <rf_security_set_key+0x8c>
    532e:	31 96       	adiw	r30, 0x01	; 1
    5330:	ea 15       	cp	r30, r10
    5332:	fb 05       	cpc	r31, r11
    5334:	b9 f7       	brne	.-18     	; 0x5324 <rf_security_set_key+0x88>
    5336:	40 9a       	sbi	0x08, 0	; 8
    5338:	08 94       	sec
    533a:	c1 1c       	adc	r12, r1
    533c:	d1 1c       	adc	r13, r1
    533e:	2e 5f       	subi	r18, 0xFE	; 254
    5340:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    5342:	f1 e0       	ldi	r31, 0x01	; 1
    5344:	20 31       	cpi	r18, 0x10	; 16
    5346:	3f 07       	cpc	r19, r31
    5348:	59 f6       	brne	.-106    	; 0x52e0 <rf_security_set_key+0x44>
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
    534a:	84 e6       	ldi	r24, 0x64	; 100
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>
    5352:	20 e4       	ldi	r18, 0x40	; 64
    5354:	31 e0       	ldi	r19, 0x01	; 1
    5356:	80 e1       	ldi	r24, 0x10	; 16
    5358:	91 e0       	ldi	r25, 0x01	; 1
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    535a:	1a 82       	std	Y+2, r1	; 0x02
    535c:	19 82       	std	Y+1, r1	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    535e:	40 98       	cbi	0x08, 0	; 8
    5360:	42 2f       	mov	r20, r18
    5362:	40 68       	ori	r20, 0x80	; 128
    5364:	4e bd       	out	0x2e, r20	; 46
    5366:	0d b4       	in	r0, 0x2d	; 45
    5368:	07 fe       	sbrs	r0, 7
    536a:	fd cf       	rjmp	.-6      	; 0x5366 <rf_security_set_key+0xca>
    536c:	a9 01       	movw	r20, r18
    536e:	55 95       	asr	r21
    5370:	47 95       	ror	r20
    5372:	40 7c       	andi	r20, 0xC0	; 192
    5374:	4e bd       	out	0x2e, r20	; 46
    5376:	0d b4       	in	r0, 0x2d	; 45
    5378:	07 fe       	sbrs	r0, 7
    537a:	fd cf       	rjmp	.-6      	; 0x5376 <rf_security_set_key+0xda>
    537c:	f8 01       	movw	r30, r16
    537e:	40 81       	ld	r20, Z
    5380:	4e bd       	out	0x2e, r20	; 46
    5382:	0d b4       	in	r0, 0x2d	; 45
    5384:	07 fe       	sbrs	r0, 7
    5386:	fd cf       	rjmp	.-6      	; 0x5382 <rf_security_set_key+0xe6>
    5388:	31 96       	adiw	r30, 0x01	; 1
    538a:	ea 15       	cp	r30, r10
    538c:	fb 05       	cpc	r31, r11
    538e:	b9 f7       	brne	.-18     	; 0x537e <rf_security_set_key+0xe2>
    5390:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    5392:	40 98       	cbi	0x08, 0	; 8
    5394:	48 2f       	mov	r20, r24
    5396:	40 68       	ori	r20, 0x80	; 128
    5398:	4e bd       	out	0x2e, r20	; 46
    539a:	0d b4       	in	r0, 0x2d	; 45
    539c:	07 fe       	sbrs	r0, 7
    539e:	fd cf       	rjmp	.-6      	; 0x539a <rf_security_set_key+0xfe>
    53a0:	ac 01       	movw	r20, r24
    53a2:	55 95       	asr	r21
    53a4:	47 95       	ror	r20
    53a6:	40 7c       	andi	r20, 0xC0	; 192
    53a8:	4e bd       	out	0x2e, r20	; 46
    53aa:	0d b4       	in	r0, 0x2d	; 45
    53ac:	07 fe       	sbrs	r0, 7
    53ae:	fd cf       	rjmp	.-6      	; 0x53aa <rf_security_set_key+0x10e>
    53b0:	f8 01       	movw	r30, r16
    53b2:	40 81       	ld	r20, Z
    53b4:	4e bd       	out	0x2e, r20	; 46
    53b6:	0d b4       	in	r0, 0x2d	; 45
    53b8:	07 fe       	sbrs	r0, 7
    53ba:	fd cf       	rjmp	.-6      	; 0x53b6 <rf_security_set_key+0x11a>
    53bc:	31 96       	adiw	r30, 0x01	; 1
    53be:	ea 15       	cp	r30, r10
    53c0:	fb 05       	cpc	r31, r11
    53c2:	b9 f7       	brne	.-18     	; 0x53b2 <rf_security_set_key+0x116>
    53c4:	40 9a       	sbi	0x08, 0	; 8
    53c6:	02 96       	adiw	r24, 0x02	; 2
    53c8:	2e 5f       	subi	r18, 0xFE	; 254
    53ca:	3f 4f       	sbci	r19, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
    53cc:	41 e0       	ldi	r20, 0x01	; 1
    53ce:	8e 31       	cpi	r24, 0x1E	; 30
    53d0:	94 07       	cpc	r25, r20
    53d2:	19 f6       	brne	.-122    	; 0x535a <rf_security_set_key+0xbe>
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    53d4:	81 e0       	ldi	r24, 0x01	; 1
    53d6:	90 e0       	ldi	r25, 0x00	; 0
    53d8:	9a 83       	std	Y+2, r25	; 0x02
    53da:	89 83       	std	Y+1, r24	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    53dc:	40 98       	cbi	0x08, 0	; 8
    53de:	8e ec       	ldi	r24, 0xCE	; 206
    53e0:	8e bd       	out	0x2e, r24	; 46
    53e2:	0d b4       	in	r0, 0x2d	; 45
    53e4:	07 fe       	sbrs	r0, 7
    53e6:	fd cf       	rjmp	.-6      	; 0x53e2 <rf_security_set_key+0x146>
    53e8:	80 e8       	ldi	r24, 0x80	; 128
    53ea:	8e bd       	out	0x2e, r24	; 46
    53ec:	0d b4       	in	r0, 0x2d	; 45
    53ee:	07 fe       	sbrs	r0, 7
    53f0:	fd cf       	rjmp	.-6      	; 0x53ec <rf_security_set_key+0x150>
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    53f2:	c8 01       	movw	r24, r16
    53f4:	02 96       	adiw	r24, 0x02	; 2
    53f6:	f8 01       	movw	r30, r16
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    53f8:	20 81       	ld	r18, Z
    53fa:	2e bd       	out	0x2e, r18	; 46
    53fc:	0d b4       	in	r0, 0x2d	; 45
    53fe:	07 fe       	sbrs	r0, 7
    5400:	fd cf       	rjmp	.-6      	; 0x53fc <rf_security_set_key+0x160>
    5402:	31 96       	adiw	r30, 0x01	; 1
    5404:	e8 17       	cp	r30, r24
    5406:	f9 07       	cpc	r31, r25
    5408:	b9 f7       	brne	.-18     	; 0x53f8 <rf_security_set_key+0x15c>
    540a:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    540c:	40 98       	cbi	0x08, 0	; 8
    540e:	8e e9       	ldi	r24, 0x9E	; 158
    5410:	8e bd       	out	0x2e, r24	; 46
    5412:	0d b4       	in	r0, 0x2d	; 45
    5414:	07 fe       	sbrs	r0, 7
    5416:	fd cf       	rjmp	.-6      	; 0x5412 <rf_security_set_key+0x176>
    5418:	80 e8       	ldi	r24, 0x80	; 128
    541a:	8e bd       	out	0x2e, r24	; 46
    541c:	0d b4       	in	r0, 0x2d	; 45
    541e:	07 fe       	sbrs	r0, 7
    5420:	fd cf       	rjmp	.-6      	; 0x541c <rf_security_set_key+0x180>
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    5422:	0e 5f       	subi	r16, 0xFE	; 254
    5424:	1f 4f       	sbci	r17, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    5426:	f7 01       	movw	r30, r14
    5428:	80 81       	ld	r24, Z
    542a:	8e bd       	out	0x2e, r24	; 46
    542c:	0d b4       	in	r0, 0x2d	; 45
    542e:	07 fe       	sbrs	r0, 7
    5430:	fd cf       	rjmp	.-6      	; 0x542c <rf_security_set_key+0x190>
    5432:	08 94       	sec
    5434:	e1 1c       	adc	r14, r1
    5436:	f1 1c       	adc	r15, r1
    5438:	e0 16       	cp	r14, r16
    543a:	f1 06       	cpc	r15, r17
    543c:	a1 f7       	brne	.-24     	; 0x5426 <rf_security_set_key+0x18a>
    543e:	40 9a       	sbi	0x08, 0	; 8
}
    5440:	0f 90       	pop	r0
    5442:	0f 90       	pop	r0
    5444:	0f 90       	pop	r0
    5446:	0f 90       	pop	r0
    5448:	cf 91       	pop	r28
    544a:	df 91       	pop	r29
    544c:	1f 91       	pop	r17
    544e:	0f 91       	pop	r16
    5450:	ff 90       	pop	r15
    5452:	ef 90       	pop	r14
    5454:	df 90       	pop	r13
    5456:	cf 90       	pop	r12
    5458:	bf 90       	pop	r11
    545a:	af 90       	pop	r10
    545c:	9f 90       	pop	r9
    545e:	8f 90       	pop	r8
    5460:	08 95       	ret

00005462 <rf_set_rx>:
}



void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
    5462:	0f 93       	push	r16
    5464:	1f 93       	push	r17
    5466:	df 93       	push	r29
    5468:	cf 93       	push	r28
    546a:	0f 92       	push	r0
    546c:	cd b7       	in	r28, 0x3d	; 61
    546e:	de b7       	in	r29, 0x3e	; 62
    5470:	8c 01       	movw	r16, r24

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    5472:	80 91 b4 1e 	lds	r24, 0x1EB4
    5476:	90 91 b5 1e 	lds	r25, 0x1EB5
    547a:	69 83       	std	Y+1, r22	; 0x01
    547c:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    5480:	40 98       	cbi	0x08, 0	; 8
    5482:	88 e0       	ldi	r24, 0x08	; 8
    5484:	8e bd       	out	0x2e, r24	; 46
    5486:	69 81       	ldd	r22, Y+1	; 0x01
    5488:	0d b4       	in	r0, 0x2d	; 45
    548a:	07 fe       	sbrs	r0, 7
    548c:	fd cf       	rjmp	.-6      	; 0x5488 <rf_set_rx+0x26>
    548e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    5490:	40 98       	cbi	0x08, 0	; 8
    5492:	88 e0       	ldi	r24, 0x08	; 8
    5494:	8e bd       	out	0x2e, r24	; 46
    5496:	0d b4       	in	r0, 0x2d	; 45
    5498:	07 fe       	sbrs	r0, 7
    549a:	fd cf       	rjmp	.-6      	; 0x5496 <rf_set_rx+0x34>
    549c:	40 9a       	sbi	0x08, 0	; 8
    halRfSetChannel(channel);
    549e:	86 2f       	mov	r24, r22
    54a0:	0e 94 24 21 	call	0x4248	; 0x4248 <halRfSetChannel>
    rfSettings.pRxInfo = pRRI;
    54a4:	10 93 ba 1e 	sts	0x1EBA, r17
    54a8:	00 93 b9 1e 	sts	0x1EB9, r16

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    54ac:	80 91 b4 1e 	lds	r24, 0x1EB4
    54b0:	90 91 b5 1e 	lds	r25, 0x1EB5
    54b4:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
#endif
}
    54b8:	0f 90       	pop	r0
    54ba:	cf 91       	pop	r28
    54bc:	df 91       	pop	r29
    54be:	1f 91       	pop	r17
    54c0:	0f 91       	pop	r16
    54c2:	08 95       	ret

000054c4 <rf_set_channel>:
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
void rf_set_channel( uint8_t channel )
{
    54c4:	1f 93       	push	r17
    54c6:	18 2f       	mov	r17, r24
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    54c8:	80 91 b4 1e 	lds	r24, 0x1EB4
    54cc:	90 91 b5 1e 	lds	r25, 0x1EB5
    54d0:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
#endif
    halRfSetChannel(channel);
    54d4:	81 2f       	mov	r24, r17
    54d6:	0e 94 24 21 	call	0x4248	; 0x4248 <halRfSetChannel>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    54da:	80 91 b4 1e 	lds	r24, 0x1EB4
    54de:	90 91 b5 1e 	lds	r25, 0x1EB5
    54e2:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
#endif
}
    54e6:	1f 91       	pop	r17
    54e8:	08 95       	ret

000054ea <rf_init>:
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    54ea:	cf 92       	push	r12
    54ec:	df 92       	push	r13
    54ee:	ff 92       	push	r15
    54f0:	0f 93       	push	r16
    54f2:	1f 93       	push	r17
    54f4:	df 93       	push	r29
    54f6:	cf 93       	push	r28
    54f8:	00 d0       	rcall	.+0      	; 0x54fa <rf_init+0x10>
    54fa:	cd b7       	in	r28, 0x3d	; 61
    54fc:	de b7       	in	r29, 0x3e	; 62
    54fe:	8c 01       	movw	r16, r24
    5500:	f6 2e       	mov	r15, r22
    5502:	5a 83       	std	Y+2, r21	; 0x02
    5504:	49 83       	std	Y+1, r20	; 0x01
    5506:	69 01       	movw	r12, r18
    uint8_t n;

#ifdef RADIO_PRIORITY_CEILING
   int8_t v;
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    5508:	81 e0       	ldi	r24, 0x01	; 1
    550a:	64 e1       	ldi	r22, 0x14	; 20
    550c:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <nrk_sem_create>
    5510:	90 93 b5 1e 	sts	0x1EB5, r25
    5514:	80 93 b4 1e 	sts	0x1EB4, r24
    if (radio_sem == NULL)
    5518:	00 97       	sbiw	r24, 0x00	; 0
    551a:	31 f4       	brne	.+12     	; 0x5528 <rf_init+0x3e>
      nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());
    551c:	0e 94 c3 38 	call	0x7186	; 0x7186 <nrk_get_pid>
    5520:	68 2f       	mov	r22, r24
    5522:	8f e0       	ldi	r24, 0x0F	; 15
    5524:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>

  v = nrk_sem_pend (radio_sem);
    5528:	80 91 b4 1e 	lds	r24, 0x1EB4
    552c:	90 91 b5 1e 	lds	r25, 0x1EB5
    5530:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_sem_pend>
  if (v == NRK_ERROR) {
    5534:	8f 3f       	cpi	r24, 0xFF	; 255
    5536:	21 f4       	brne	.+8      	; 0x5540 <rf_init+0x56>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
    5538:	88 e7       	ldi	r24, 0x78	; 120
    553a:	92 e0       	ldi	r25, 0x02	; 2
    553c:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
  }
#endif

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    SET_VREG_ACTIVE();
    5540:	15 9a       	sbi	0x02, 5	; 2
    halWait(1000);
    5542:	88 ee       	ldi	r24, 0xE8	; 232
    5544:	93 e0       	ldi	r25, 0x03	; 3
    5546:	0e 94 23 30 	call	0x6046	; 0x6046 <halWait>
    SET_RESET_ACTIVE();
    554a:	16 98       	cbi	0x02, 6	; 2
    halWait(1);
    554c:	81 e0       	ldi	r24, 0x01	; 1
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	0e 94 23 30 	call	0x6046	; 0x6046 <halWait>
    SET_RESET_INACTIVE();
    5554:	16 9a       	sbi	0x02, 6	; 2
    halWait(100);
    5556:	84 e6       	ldi	r24, 0x64	; 100
    5558:	90 e0       	ldi	r25, 0x00	; 0
    555a:	0e 94 23 30 	call	0x6046	; 0x6046 <halWait>
    // Initialize the FIFOP external interrupt
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();
    555e:	f8 94       	cli

    // Register modifications
    FASTSPI_STROBE(CC2420_SXOSCON);
    5560:	40 98       	cbi	0x08, 0	; 8
    5562:	81 e0       	ldi	r24, 0x01	; 1
    5564:	8e bd       	out	0x2e, r24	; 46
    5566:	0d b4       	in	r0, 0x2d	; 45
    5568:	07 fe       	sbrs	r0, 7
    556a:	fd cf       	rjmp	.-6      	; 0x5566 <rf_init+0x7c>
    556c:	40 9a       	sbi	0x08, 0	; 8
    mdmctrl0=0x02E2;
    556e:	82 ee       	ldi	r24, 0xE2	; 226
    5570:	92 e0       	ldi	r25, 0x02	; 2
    5572:	90 93 b8 1e 	sts	0x1EB8, r25
    5576:	80 93 b7 1e 	sts	0x1EB7, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    557a:	40 98       	cbi	0x08, 0	; 8
    557c:	81 e1       	ldi	r24, 0x11	; 17
    557e:	8e bd       	out	0x2e, r24	; 46
    5580:	0d b4       	in	r0, 0x2d	; 45
    5582:	07 fe       	sbrs	r0, 7
    5584:	fd cf       	rjmp	.-6      	; 0x5580 <rf_init+0x96>
    5586:	82 e0       	ldi	r24, 0x02	; 2
    5588:	8e bd       	out	0x2e, r24	; 46
    558a:	0d b4       	in	r0, 0x2d	; 45
    558c:	07 fe       	sbrs	r0, 7
    558e:	fd cf       	rjmp	.-6      	; 0x558a <rf_init+0xa0>
    5590:	82 ee       	ldi	r24, 0xE2	; 226
    5592:	8e bd       	out	0x2e, r24	; 46
    5594:	0d b4       	in	r0, 0x2d	; 45
    5596:	07 fe       	sbrs	r0, 7
    5598:	fd cf       	rjmp	.-6      	; 0x5594 <rf_init+0xaa>
    559a:	40 9a       	sbi	0x08, 0	; 8
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    559c:	40 98       	cbi	0x08, 0	; 8
    559e:	82 e1       	ldi	r24, 0x12	; 18
    55a0:	8e bd       	out	0x2e, r24	; 46
    55a2:	0d b4       	in	r0, 0x2d	; 45
    55a4:	07 fe       	sbrs	r0, 7
    55a6:	fd cf       	rjmp	.-6      	; 0x55a2 <rf_init+0xb8>
    55a8:	85 e0       	ldi	r24, 0x05	; 5
    55aa:	8e bd       	out	0x2e, r24	; 46
    55ac:	0d b4       	in	r0, 0x2d	; 45
    55ae:	07 fe       	sbrs	r0, 7
    55b0:	fd cf       	rjmp	.-6      	; 0x55ac <rf_init+0xc2>
    55b2:	1e bc       	out	0x2e, r1	; 46
    55b4:	0d b4       	in	r0, 0x2d	; 45
    55b6:	07 fe       	sbrs	r0, 7
    55b8:	fd cf       	rjmp	.-6      	; 0x55b4 <rf_init+0xca>
    55ba:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    55bc:	40 98       	cbi	0x08, 0	; 8
    55be:	8c e1       	ldi	r24, 0x1C	; 28
    55c0:	8e bd       	out	0x2e, r24	; 46
    55c2:	0d b4       	in	r0, 0x2d	; 45
    55c4:	07 fe       	sbrs	r0, 7
    55c6:	fd cf       	rjmp	.-6      	; 0x55c2 <rf_init+0xd8>
    55c8:	1e bc       	out	0x2e, r1	; 46
    55ca:	0d b4       	in	r0, 0x2d	; 45
    55cc:	07 fe       	sbrs	r0, 7
    55ce:	fd cf       	rjmp	.-6      	; 0x55ca <rf_init+0xe0>
    55d0:	8f e7       	ldi	r24, 0x7F	; 127
    55d2:	8e bd       	out	0x2e, r24	; 46
    55d4:	0d b4       	in	r0, 0x2d	; 45
    55d6:	07 fe       	sbrs	r0, 7
    55d8:	fd cf       	rjmp	.-6      	; 0x55d4 <rf_init+0xea>
    55da:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    55dc:	40 98       	cbi	0x08, 0	; 8
    55de:	89 e1       	ldi	r24, 0x19	; 25
    55e0:	8e bd       	out	0x2e, r24	; 46
    55e2:	0d b4       	in	r0, 0x2d	; 45
    55e4:	07 fe       	sbrs	r0, 7
    55e6:	fd cf       	rjmp	.-6      	; 0x55e2 <rf_init+0xf8>
    55e8:	81 e0       	ldi	r24, 0x01	; 1
    55ea:	8e bd       	out	0x2e, r24	; 46
    55ec:	0d b4       	in	r0, 0x2d	; 45
    55ee:	07 fe       	sbrs	r0, 7
    55f0:	fd cf       	rjmp	.-6      	; 0x55ec <rf_init+0x102>
    55f2:	84 ec       	ldi	r24, 0xC4	; 196
    55f4:	8e bd       	out	0x2e, r24	; 46
    55f6:	0d b4       	in	r0, 0x2d	; 45
    55f8:	07 fe       	sbrs	r0, 7
    55fa:	fd cf       	rjmp	.-6      	; 0x55f6 <rf_init+0x10c>
    55fc:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
    55fe:	40 98       	cbi	0x08, 0	; 8
    5600:	87 e1       	ldi	r24, 0x17	; 23
    5602:	8e bd       	out	0x2e, r24	; 46
    5604:	0d b4       	in	r0, 0x2d	; 45
    5606:	07 fe       	sbrs	r0, 7
    5608:	fd cf       	rjmp	.-6      	; 0x5604 <rf_init+0x11a>
    560a:	8a e1       	ldi	r24, 0x1A	; 26
    560c:	8e bd       	out	0x2e, r24	; 46
    560e:	0d b4       	in	r0, 0x2d	; 45
    5610:	07 fe       	sbrs	r0, 7
    5612:	fd cf       	rjmp	.-6      	; 0x560e <rf_init+0x124>
    5614:	86 e5       	ldi	r24, 0x56	; 86
    5616:	8e bd       	out	0x2e, r24	; 46
    5618:	0d b4       	in	r0, 0x2d	; 45
    561a:	07 fe       	sbrs	r0, 7
    561c:	fd cf       	rjmp	.-6      	; 0x5618 <rf_init+0x12e>
    561e:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    5620:	84 ef       	ldi	r24, 0xF4	; 244
    5622:	91 e0       	ldi	r25, 0x01	; 1
    5624:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    5628:	40 98       	cbi	0x08, 0	; 8
    562a:	88 ee       	ldi	r24, 0xE8	; 232
    562c:	8e bd       	out	0x2e, r24	; 46
    562e:	0d b4       	in	r0, 0x2d	; 45
    5630:	07 fe       	sbrs	r0, 7
    5632:	fd cf       	rjmp	.-6      	; 0x562e <rf_init+0x144>
    5634:	80 e8       	ldi	r24, 0x80	; 128
    5636:	8e bd       	out	0x2e, r24	; 46
    5638:	0d b4       	in	r0, 0x2d	; 45
    563a:	07 fe       	sbrs	r0, 7
    563c:	fd cf       	rjmp	.-6      	; 0x5638 <rf_init+0x14e>
    563e:	fe 01       	movw	r30, r28
    5640:	31 96       	adiw	r30, 0x01	; 1
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    5642:	ce 01       	movw	r24, r28
    5644:	03 96       	adiw	r24, 0x03	; 3
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    5646:	20 81       	ld	r18, Z
    5648:	2e bd       	out	0x2e, r18	; 46
    564a:	0d b4       	in	r0, 0x2d	; 45
    564c:	07 fe       	sbrs	r0, 7
    564e:	fd cf       	rjmp	.-6      	; 0x564a <rf_init+0x160>
    5650:	31 96       	adiw	r30, 0x01	; 1
    5652:	e8 17       	cp	r30, r24
    5654:	f9 07       	cpc	r31, r25
    5656:	b9 f7       	brne	.-18     	; 0x5646 <rf_init+0x15c>
    5658:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    565a:	84 ef       	ldi	r24, 0xF4	; 244
    565c:	91 e0       	ldi	r25, 0x01	; 1
    565e:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>

  	ENABLE_GLOBAL_INT();
    5662:	78 94       	sei

    // Set the RF channel
    halRfSetChannel(channel);
    5664:	8f 2d       	mov	r24, r15
    5666:	0e 94 24 21 	call	0x4248	; 0x4248 <halRfSetChannel>

    // Turn interrupts back on
	ENABLE_GLOBAL_INT();
    566a:	78 94       	sei

	// Set the protocol configuration
	rfSettings.pRxInfo = pRRI;
    566c:	10 93 ba 1e 	sts	0x1EBA, r17
    5670:	00 93 b9 1e 	sts	0x1EB9, r16
	rfSettings.panId = panId;
    5674:	89 81       	ldd	r24, Y+1	; 0x01
    5676:	9a 81       	ldd	r25, Y+2	; 0x02
    5678:	90 93 be 1e 	sts	0x1EBE, r25
    567c:	80 93 bd 1e 	sts	0x1EBD, r24
	rfSettings.myAddr = myAddr;
    5680:	d0 92 c0 1e 	sts	0x1EC0, r13
    5684:	c0 92 bf 1e 	sts	0x1EBF, r12
	rfSettings.txSeqNumber = 0;
    5688:	10 92 bb 1e 	sts	0x1EBB, r1
        rfSettings.receiveOn = FALSE;
    568c:	10 92 c1 1e 	sts	0x1EC1, r1

	// Wait for the crystal oscillator to become stable
    halRfWaitForCrystalOscillator();
    5690:	0e 94 42 21 	call	0x4284	; 0x4284 <halRfWaitForCrystalOscillator>
//    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
//    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
  //	ENABLE_GLOBAL_INT();

#ifdef RADIO_PRIORITY_CEILING
  v = nrk_sem_post (radio_sem);
    5694:	80 91 b4 1e 	lds	r24, 0x1EB4
    5698:	90 91 b5 1e 	lds	r25, 0x1EB5
    569c:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <nrk_sem_post>
  if (v == NRK_ERROR) {
    56a0:	8f 3f       	cpi	r24, 0xFF	; 255
    56a2:	39 f4       	brne	.+14     	; 0x56b2 <rf_init+0x1c8>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    56a4:	8b e4       	ldi	r24, 0x4B	; 75
    56a6:	92 e0       	ldi	r25, 0x02	; 2
    56a8:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
    _nrk_errno_set (2);
    56ac:	82 e0       	ldi	r24, 0x02	; 2
    56ae:	0e 94 70 32 	call	0x64e0	; 0x64e0 <_nrk_errno_set>
  }
#endif

auto_ack_enable=0;
    56b2:	10 92 c4 1e 	sts	0x1EC4, r1
security_enable=0;
    56b6:	10 92 b6 1e 	sts	0x1EB6, r1
last_pkt_encrypted=0;
    56ba:	10 92 c5 1e 	sts	0x1EC5, r1
} // rf_init() 
    56be:	0f 90       	pop	r0
    56c0:	0f 90       	pop	r0
    56c2:	cf 91       	pop	r28
    56c4:	df 91       	pop	r29
    56c6:	1f 91       	pop	r17
    56c8:	0f 91       	pop	r16
    56ca:	ff 90       	pop	r15
    56cc:	df 90       	pop	r13
    56ce:	cf 90       	pop	r12
    56d0:	08 95       	ret

000056d2 <getc1>:

char getc1()
{
char tmp;

if(uart_rx_buf_start!=uart_rx_buf_end)
    56d2:	90 91 4d 1f 	lds	r25, 0x1F4D
    56d6:	80 91 cb 1e 	lds	r24, 0x1ECB
    56da:	98 17       	cp	r25, r24
    56dc:	69 f0       	breq	.+26     	; 0x56f8 <getc1+0x26>
   {
   tmp=uart_rx_buf[uart_rx_buf_start];
    56de:	e9 2f       	mov	r30, r25
    56e0:	f0 e0       	ldi	r31, 0x00	; 0
    56e2:	e4 53       	subi	r30, 0x34	; 52
    56e4:	f1 4e       	sbci	r31, 0xE1	; 225
    56e6:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    56e8:	9f 5f       	subi	r25, 0xFF	; 255
    56ea:	90 93 4d 1f 	sts	0x1F4D, r25
   if(uart_rx_buf_start==MAX_RX_UART_BUF) uart_rx_buf_start=0;
    56ee:	90 38       	cpi	r25, 0x80	; 128
    56f0:	71 f4       	brne	.+28     	; 0x570e <getc1+0x3c>
    56f2:	10 92 4d 1f 	sts	0x1F4D, r1
    56f6:	08 95       	ret
   return(tmp);
   }
// if buffer empty, then we have to block for it
UART1_WAIT_AND_RECEIVE(tmp);
    56f8:	80 91 c8 00 	lds	r24, 0x00C8
    56fc:	87 ff       	sbrs	r24, 7
    56fe:	fc cf       	rjmp	.-8      	; 0x56f8 <getc1+0x26>
    5700:	80 91 c8 00 	lds	r24, 0x00C8
    5704:	8f 77       	andi	r24, 0x7F	; 127
    5706:	80 93 c8 00 	sts	0x00C8, r24
    570a:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    570e:	08 95       	ret

00005710 <nrk_uart_data_ready>:

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    5710:	88 23       	and	r24, r24
    5712:	31 f4       	brne	.+12     	; 0x5720 <nrk_uart_data_ready+0x10>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    5714:	80 91 c0 00 	lds	r24, 0x00C0
    5718:	88 1f       	adc	r24, r24
    571a:	88 27       	eor	r24, r24
    571c:	88 1f       	adc	r24, r24
    571e:	08 95       	ret
        }
if(uart_num==1)
    5720:	81 30       	cpi	r24, 0x01	; 1
    5722:	11 f0       	breq	.+4      	; 0x5728 <nrk_uart_data_ready+0x18>
    5724:	80 e0       	ldi	r24, 0x00	; 0
    5726:	08 95       	ret
    5728:	80 e0       	ldi	r24, 0x00	; 0
    572a:	20 91 4d 1f 	lds	r18, 0x1F4D
    572e:	90 91 cb 1e 	lds	r25, 0x1ECB
    5732:	29 13       	cpse	r18, r25
    5734:	81 e0       	ldi	r24, 0x01	; 1
	{
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
}
    5736:	08 95       	ret

00005738 <PORT_INIT>:
NRK_PIN( ADC_INPUT_6, ADC_INPUT_6, NRK_PORTF )
NRK_PIN( ADC_INPUT_7, ADC_INPUT_7, NRK_PORTF )

void PORT_INIT(void)
{
        MCUCR |= BM(PUD); 
    5738:	85 b7       	in	r24, 0x35	; 53
    573a:	80 61       	ori	r24, 0x10	; 16
    573c:	85 bf       	out	0x35, r24	; 53
        DDRB  = BM(MOSI) | BM(SCK);  
    573e:	86 e0       	ldi	r24, 0x06	; 6
    5740:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
    5742:	87 e0       	ldi	r24, 0x07	; 7
    5744:	85 b9       	out	0x05, r24	; 5
        DDRC  = BM(CSN); 
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	87 b9       	out	0x07, r24	; 7
        PORTC = BM(CSN); 
    574a:	88 b9       	out	0x08, r24	; 8
        DDRE  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    574c:	8c e3       	ldi	r24, 0x3C	; 60
    574e:	8d b9       	out	0x0d, r24	; 13
        DDRD  = BM(UART1_TXD) | BM(DEBUG_2) | BM(DEBUG_3); 
    5750:	8b e0       	ldi	r24, 0x0B	; 11
    5752:	8a b9       	out	0x0a, r24	; 10
        PORTE  = BM(UART0_TXD) | BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    5754:	8e e3       	ldi	r24, 0x3E	; 62
    5756:	8e b9       	out	0x0e, r24	; 14
        DDRA  = BM(VREG_EN) | BM(RESET_N) | BM(DEBUG_0) | BM(DEBUG_1); 
    5758:	88 e7       	ldi	r24, 0x78	; 120
    575a:	81 b9       	out	0x01, r24	; 1
        PORTA = BM(RESET_N); 
    575c:	80 e4       	ldi	r24, 0x40	; 64
    575e:	82 b9       	out	0x02, r24	; 2
        DDRF = 0xFF;
    5760:	8f ef       	ldi	r24, 0xFF	; 255
    5762:	80 bb       	out	0x10, r24	; 16

} 
    5764:	08 95       	ret

00005766 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    5766:	0e 94 9c 2b 	call	0x5738	; 0x5738 <PORT_INIT>
SPI_INIT();
    576a:	80 e5       	ldi	r24, 0x50	; 80
    576c:	8c bd       	out	0x2c, r24	; 44
    576e:	81 e0       	ldi	r24, 0x01	; 1
    5770:	8d bd       	out	0x2d, r24	; 45
}
    5772:	08 95       	ret

00005774 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    5774:	8f 3f       	cpi	r24, 0xFF	; 255
    5776:	09 f4       	brne	.+2      	; 0x577a <nrk_gpio_set+0x6>
    5778:	71 c0       	rjmp	.+226    	; 0x585c <nrk_gpio_set+0xe8>

        switch (pin & 0x07) {
    577a:	28 2f       	mov	r18, r24
    577c:	30 e0       	ldi	r19, 0x00	; 0
    577e:	27 70       	andi	r18, 0x07	; 7
    5780:	30 70       	andi	r19, 0x00	; 0
    5782:	22 30       	cpi	r18, 0x02	; 2
    5784:	31 05       	cpc	r19, r1
    5786:	89 f1       	breq	.+98     	; 0x57ea <nrk_gpio_set+0x76>
    5788:	23 30       	cpi	r18, 0x03	; 3
    578a:	31 05       	cpc	r19, r1
    578c:	44 f4       	brge	.+16     	; 0x579e <nrk_gpio_set+0x2a>
    578e:	21 15       	cp	r18, r1
    5790:	31 05       	cpc	r19, r1
    5792:	89 f0       	breq	.+34     	; 0x57b6 <nrk_gpio_set+0x42>
    5794:	21 30       	cpi	r18, 0x01	; 1
    5796:	31 05       	cpc	r19, r1
    5798:	09 f0       	breq	.+2      	; 0x579c <nrk_gpio_set+0x28>
    579a:	60 c0       	rjmp	.+192    	; 0x585c <nrk_gpio_set+0xe8>
    579c:	1a c0       	rjmp	.+52     	; 0x57d2 <nrk_gpio_set+0x5e>
    579e:	24 30       	cpi	r18, 0x04	; 4
    57a0:	31 05       	cpc	r19, r1
    57a2:	09 f4       	brne	.+2      	; 0x57a6 <nrk_gpio_set+0x32>
    57a4:	3e c0       	rjmp	.+124    	; 0x5822 <nrk_gpio_set+0xae>
    57a6:	24 30       	cpi	r18, 0x04	; 4
    57a8:	31 05       	cpc	r19, r1
    57aa:	6c f1       	brlt	.+90     	; 0x5806 <nrk_gpio_set+0x92>
    57ac:	25 30       	cpi	r18, 0x05	; 5
    57ae:	31 05       	cpc	r19, r1
    57b0:	09 f0       	breq	.+2      	; 0x57b4 <nrk_gpio_set+0x40>
    57b2:	54 c0       	rjmp	.+168    	; 0x585c <nrk_gpio_set+0xe8>
    57b4:	44 c0       	rjmp	.+136    	; 0x583e <nrk_gpio_set+0xca>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    57b6:	92 b1       	in	r25, 0x02	; 2
    57b8:	86 95       	lsr	r24
    57ba:	86 95       	lsr	r24
    57bc:	86 95       	lsr	r24
    57be:	41 e0       	ldi	r20, 0x01	; 1
    57c0:	50 e0       	ldi	r21, 0x00	; 0
    57c2:	02 c0       	rjmp	.+4      	; 0x57c8 <nrk_gpio_set+0x54>
    57c4:	44 0f       	add	r20, r20
    57c6:	55 1f       	adc	r21, r21
    57c8:	8a 95       	dec	r24
    57ca:	e2 f7       	brpl	.-8      	; 0x57c4 <nrk_gpio_set+0x50>
    57cc:	94 2b       	or	r25, r20
    57ce:	92 b9       	out	0x02, r25	; 2
    57d0:	43 c0       	rjmp	.+134    	; 0x5858 <nrk_gpio_set+0xe4>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    57d2:	95 b1       	in	r25, 0x05	; 5
    57d4:	86 95       	lsr	r24
    57d6:	86 95       	lsr	r24
    57d8:	86 95       	lsr	r24
    57da:	02 c0       	rjmp	.+4      	; 0x57e0 <nrk_gpio_set+0x6c>
    57dc:	22 0f       	add	r18, r18
    57de:	33 1f       	adc	r19, r19
    57e0:	8a 95       	dec	r24
    57e2:	e2 f7       	brpl	.-8      	; 0x57dc <nrk_gpio_set+0x68>
    57e4:	92 2b       	or	r25, r18
    57e6:	95 b9       	out	0x05, r25	; 5
    57e8:	37 c0       	rjmp	.+110    	; 0x5858 <nrk_gpio_set+0xe4>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    57ea:	98 b1       	in	r25, 0x08	; 8
    57ec:	86 95       	lsr	r24
    57ee:	86 95       	lsr	r24
    57f0:	86 95       	lsr	r24
    57f2:	41 e0       	ldi	r20, 0x01	; 1
    57f4:	50 e0       	ldi	r21, 0x00	; 0
    57f6:	02 c0       	rjmp	.+4      	; 0x57fc <nrk_gpio_set+0x88>
    57f8:	44 0f       	add	r20, r20
    57fa:	55 1f       	adc	r21, r21
    57fc:	8a 95       	dec	r24
    57fe:	e2 f7       	brpl	.-8      	; 0x57f8 <nrk_gpio_set+0x84>
    5800:	94 2b       	or	r25, r20
    5802:	98 b9       	out	0x08, r25	; 8
    5804:	29 c0       	rjmp	.+82     	; 0x5858 <nrk_gpio_set+0xe4>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    5806:	9b b1       	in	r25, 0x0b	; 11
    5808:	86 95       	lsr	r24
    580a:	86 95       	lsr	r24
    580c:	86 95       	lsr	r24
    580e:	41 e0       	ldi	r20, 0x01	; 1
    5810:	50 e0       	ldi	r21, 0x00	; 0
    5812:	02 c0       	rjmp	.+4      	; 0x5818 <nrk_gpio_set+0xa4>
    5814:	44 0f       	add	r20, r20
    5816:	55 1f       	adc	r21, r21
    5818:	8a 95       	dec	r24
    581a:	e2 f7       	brpl	.-8      	; 0x5814 <nrk_gpio_set+0xa0>
    581c:	94 2b       	or	r25, r20
    581e:	9b b9       	out	0x0b, r25	; 11
    5820:	1b c0       	rjmp	.+54     	; 0x5858 <nrk_gpio_set+0xe4>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    5822:	9e b1       	in	r25, 0x0e	; 14
    5824:	86 95       	lsr	r24
    5826:	86 95       	lsr	r24
    5828:	86 95       	lsr	r24
    582a:	41 e0       	ldi	r20, 0x01	; 1
    582c:	50 e0       	ldi	r21, 0x00	; 0
    582e:	02 c0       	rjmp	.+4      	; 0x5834 <nrk_gpio_set+0xc0>
    5830:	44 0f       	add	r20, r20
    5832:	55 1f       	adc	r21, r21
    5834:	8a 95       	dec	r24
    5836:	e2 f7       	brpl	.-8      	; 0x5830 <nrk_gpio_set+0xbc>
    5838:	94 2b       	or	r25, r20
    583a:	9e b9       	out	0x0e, r25	; 14
    583c:	0d c0       	rjmp	.+26     	; 0x5858 <nrk_gpio_set+0xe4>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break;
    583e:	91 b3       	in	r25, 0x11	; 17
    5840:	86 95       	lsr	r24
    5842:	86 95       	lsr	r24
    5844:	86 95       	lsr	r24
    5846:	41 e0       	ldi	r20, 0x01	; 1
    5848:	50 e0       	ldi	r21, 0x00	; 0
    584a:	02 c0       	rjmp	.+4      	; 0x5850 <nrk_gpio_set+0xdc>
    584c:	44 0f       	add	r20, r20
    584e:	55 1f       	adc	r21, r21
    5850:	8a 95       	dec	r24
    5852:	e2 f7       	brpl	.-8      	; 0x584c <nrk_gpio_set+0xd8>
    5854:	94 2b       	or	r25, r20
    5856:	91 bb       	out	0x11, r25	; 17
    5858:	81 e0       	ldi	r24, 0x01	; 1
    585a:	08 95       	ret
    585c:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    585e:	08 95       	ret

00005860 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    5860:	8f 3f       	cpi	r24, 0xFF	; 255
    5862:	09 f4       	brne	.+2      	; 0x5866 <nrk_gpio_clr+0x6>
    5864:	7c c0       	rjmp	.+248    	; 0x595e <nrk_gpio_clr+0xfe>
        switch (pin & 0x07) {
    5866:	28 2f       	mov	r18, r24
    5868:	30 e0       	ldi	r19, 0x00	; 0
    586a:	27 70       	andi	r18, 0x07	; 7
    586c:	30 70       	andi	r19, 0x00	; 0
    586e:	22 30       	cpi	r18, 0x02	; 2
    5870:	31 05       	cpc	r19, r1
    5872:	a1 f1       	breq	.+104    	; 0x58dc <nrk_gpio_clr+0x7c>
    5874:	23 30       	cpi	r18, 0x03	; 3
    5876:	31 05       	cpc	r19, r1
    5878:	44 f4       	brge	.+16     	; 0x588a <nrk_gpio_clr+0x2a>
    587a:	21 15       	cp	r18, r1
    587c:	31 05       	cpc	r19, r1
    587e:	89 f0       	breq	.+34     	; 0x58a2 <nrk_gpio_clr+0x42>
    5880:	21 30       	cpi	r18, 0x01	; 1
    5882:	31 05       	cpc	r19, r1
    5884:	09 f0       	breq	.+2      	; 0x5888 <nrk_gpio_clr+0x28>
    5886:	6b c0       	rjmp	.+214    	; 0x595e <nrk_gpio_clr+0xfe>
    5888:	1c c0       	rjmp	.+56     	; 0x58c2 <nrk_gpio_clr+0x62>
    588a:	24 30       	cpi	r18, 0x04	; 4
    588c:	31 05       	cpc	r19, r1
    588e:	09 f4       	brne	.+2      	; 0x5892 <nrk_gpio_clr+0x32>
    5890:	45 c0       	rjmp	.+138    	; 0x591c <nrk_gpio_clr+0xbc>
    5892:	24 30       	cpi	r18, 0x04	; 4
    5894:	31 05       	cpc	r19, r1
    5896:	94 f1       	brlt	.+100    	; 0x58fc <nrk_gpio_clr+0x9c>
    5898:	25 30       	cpi	r18, 0x05	; 5
    589a:	31 05       	cpc	r19, r1
    589c:	09 f0       	breq	.+2      	; 0x58a0 <nrk_gpio_clr+0x40>
    589e:	5f c0       	rjmp	.+190    	; 0x595e <nrk_gpio_clr+0xfe>
    58a0:	4d c0       	rjmp	.+154    	; 0x593c <nrk_gpio_clr+0xdc>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    58a2:	32 b1       	in	r19, 0x02	; 2
    58a4:	28 2f       	mov	r18, r24
    58a6:	26 95       	lsr	r18
    58a8:	26 95       	lsr	r18
    58aa:	26 95       	lsr	r18
    58ac:	81 e0       	ldi	r24, 0x01	; 1
    58ae:	90 e0       	ldi	r25, 0x00	; 0
    58b0:	02 c0       	rjmp	.+4      	; 0x58b6 <nrk_gpio_clr+0x56>
    58b2:	88 0f       	add	r24, r24
    58b4:	99 1f       	adc	r25, r25
    58b6:	2a 95       	dec	r18
    58b8:	e2 f7       	brpl	.-8      	; 0x58b2 <nrk_gpio_clr+0x52>
    58ba:	80 95       	com	r24
    58bc:	83 23       	and	r24, r19
    58be:	82 b9       	out	0x02, r24	; 2
    58c0:	4c c0       	rjmp	.+152    	; 0x595a <nrk_gpio_clr+0xfa>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    58c2:	95 b1       	in	r25, 0x05	; 5
    58c4:	86 95       	lsr	r24
    58c6:	86 95       	lsr	r24
    58c8:	86 95       	lsr	r24
    58ca:	02 c0       	rjmp	.+4      	; 0x58d0 <nrk_gpio_clr+0x70>
    58cc:	22 0f       	add	r18, r18
    58ce:	33 1f       	adc	r19, r19
    58d0:	8a 95       	dec	r24
    58d2:	e2 f7       	brpl	.-8      	; 0x58cc <nrk_gpio_clr+0x6c>
    58d4:	20 95       	com	r18
    58d6:	29 23       	and	r18, r25
    58d8:	25 b9       	out	0x05, r18	; 5
    58da:	3f c0       	rjmp	.+126    	; 0x595a <nrk_gpio_clr+0xfa>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    58dc:	38 b1       	in	r19, 0x08	; 8
    58de:	28 2f       	mov	r18, r24
    58e0:	26 95       	lsr	r18
    58e2:	26 95       	lsr	r18
    58e4:	26 95       	lsr	r18
    58e6:	81 e0       	ldi	r24, 0x01	; 1
    58e8:	90 e0       	ldi	r25, 0x00	; 0
    58ea:	02 c0       	rjmp	.+4      	; 0x58f0 <nrk_gpio_clr+0x90>
    58ec:	88 0f       	add	r24, r24
    58ee:	99 1f       	adc	r25, r25
    58f0:	2a 95       	dec	r18
    58f2:	e2 f7       	brpl	.-8      	; 0x58ec <nrk_gpio_clr+0x8c>
    58f4:	80 95       	com	r24
    58f6:	83 23       	and	r24, r19
    58f8:	88 b9       	out	0x08, r24	; 8
    58fa:	2f c0       	rjmp	.+94     	; 0x595a <nrk_gpio_clr+0xfa>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    58fc:	3b b1       	in	r19, 0x0b	; 11
    58fe:	28 2f       	mov	r18, r24
    5900:	26 95       	lsr	r18
    5902:	26 95       	lsr	r18
    5904:	26 95       	lsr	r18
    5906:	81 e0       	ldi	r24, 0x01	; 1
    5908:	90 e0       	ldi	r25, 0x00	; 0
    590a:	02 c0       	rjmp	.+4      	; 0x5910 <nrk_gpio_clr+0xb0>
    590c:	88 0f       	add	r24, r24
    590e:	99 1f       	adc	r25, r25
    5910:	2a 95       	dec	r18
    5912:	e2 f7       	brpl	.-8      	; 0x590c <nrk_gpio_clr+0xac>
    5914:	80 95       	com	r24
    5916:	83 23       	and	r24, r19
    5918:	8b b9       	out	0x0b, r24	; 11
    591a:	1f c0       	rjmp	.+62     	; 0x595a <nrk_gpio_clr+0xfa>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    591c:	3e b1       	in	r19, 0x0e	; 14
    591e:	28 2f       	mov	r18, r24
    5920:	26 95       	lsr	r18
    5922:	26 95       	lsr	r18
    5924:	26 95       	lsr	r18
    5926:	81 e0       	ldi	r24, 0x01	; 1
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	02 c0       	rjmp	.+4      	; 0x5930 <nrk_gpio_clr+0xd0>
    592c:	88 0f       	add	r24, r24
    592e:	99 1f       	adc	r25, r25
    5930:	2a 95       	dec	r18
    5932:	e2 f7       	brpl	.-8      	; 0x592c <nrk_gpio_clr+0xcc>
    5934:	80 95       	com	r24
    5936:	83 23       	and	r24, r19
    5938:	8e b9       	out	0x0e, r24	; 14
    593a:	0f c0       	rjmp	.+30     	; 0x595a <nrk_gpio_clr+0xfa>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    593c:	31 b3       	in	r19, 0x11	; 17
    593e:	28 2f       	mov	r18, r24
    5940:	26 95       	lsr	r18
    5942:	26 95       	lsr	r18
    5944:	26 95       	lsr	r18
    5946:	81 e0       	ldi	r24, 0x01	; 1
    5948:	90 e0       	ldi	r25, 0x00	; 0
    594a:	02 c0       	rjmp	.+4      	; 0x5950 <nrk_gpio_clr+0xf0>
    594c:	88 0f       	add	r24, r24
    594e:	99 1f       	adc	r25, r25
    5950:	2a 95       	dec	r18
    5952:	e2 f7       	brpl	.-8      	; 0x594c <nrk_gpio_clr+0xec>
    5954:	80 95       	com	r24
    5956:	83 23       	and	r24, r19
    5958:	81 bb       	out	0x11, r24	; 17
    595a:	81 e0       	ldi	r24, 0x01	; 1
    595c:	08 95       	ret
    595e:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    5960:	08 95       	ret

00005962 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    5962:	8f 3f       	cpi	r24, 0xFF	; 255
    5964:	91 f1       	breq	.+100    	; 0x59ca <nrk_gpio_get+0x68>
        switch (pin & 0x07) {
    5966:	28 2f       	mov	r18, r24
    5968:	30 e0       	ldi	r19, 0x00	; 0
    596a:	27 70       	andi	r18, 0x07	; 7
    596c:	30 70       	andi	r19, 0x00	; 0
    596e:	22 30       	cpi	r18, 0x02	; 2
    5970:	31 05       	cpc	r19, r1
    5972:	c1 f0       	breq	.+48     	; 0x59a4 <nrk_gpio_get+0x42>
    5974:	23 30       	cpi	r18, 0x03	; 3
    5976:	31 05       	cpc	r19, r1
    5978:	3c f4       	brge	.+14     	; 0x5988 <nrk_gpio_get+0x26>
    597a:	21 15       	cp	r18, r1
    597c:	31 05       	cpc	r19, r1
    597e:	71 f0       	breq	.+28     	; 0x599c <nrk_gpio_get+0x3a>
    5980:	21 30       	cpi	r18, 0x01	; 1
    5982:	31 05       	cpc	r19, r1
    5984:	11 f5       	brne	.+68     	; 0x59ca <nrk_gpio_get+0x68>
    5986:	0c c0       	rjmp	.+24     	; 0x59a0 <nrk_gpio_get+0x3e>
    5988:	24 30       	cpi	r18, 0x04	; 4
    598a:	31 05       	cpc	r19, r1
    598c:	79 f0       	breq	.+30     	; 0x59ac <nrk_gpio_get+0x4a>
    598e:	24 30       	cpi	r18, 0x04	; 4
    5990:	31 05       	cpc	r19, r1
    5992:	54 f0       	brlt	.+20     	; 0x59a8 <nrk_gpio_get+0x46>
    5994:	25 30       	cpi	r18, 0x05	; 5
    5996:	31 05       	cpc	r19, r1
    5998:	c1 f4       	brne	.+48     	; 0x59ca <nrk_gpio_get+0x68>
    599a:	0a c0       	rjmp	.+20     	; 0x59b0 <nrk_gpio_get+0x4e>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    599c:	20 b1       	in	r18, 0x00	; 0
    599e:	09 c0       	rjmp	.+18     	; 0x59b2 <nrk_gpio_get+0x50>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    59a0:	23 b1       	in	r18, 0x03	; 3
    59a2:	07 c0       	rjmp	.+14     	; 0x59b2 <nrk_gpio_get+0x50>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    59a4:	26 b1       	in	r18, 0x06	; 6
    59a6:	05 c0       	rjmp	.+10     	; 0x59b2 <nrk_gpio_get+0x50>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    59a8:	29 b1       	in	r18, 0x09	; 9
    59aa:	03 c0       	rjmp	.+6      	; 0x59b2 <nrk_gpio_get+0x50>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    59ac:	2c b1       	in	r18, 0x0c	; 12
    59ae:	01 c0       	rjmp	.+2      	; 0x59b2 <nrk_gpio_get+0x50>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    59b0:	2f b1       	in	r18, 0x0f	; 15
    59b2:	30 e0       	ldi	r19, 0x00	; 0
    59b4:	86 95       	lsr	r24
    59b6:	86 95       	lsr	r24
    59b8:	86 95       	lsr	r24
    59ba:	02 c0       	rjmp	.+4      	; 0x59c0 <nrk_gpio_get+0x5e>
    59bc:	35 95       	asr	r19
    59be:	27 95       	ror	r18
    59c0:	8a 95       	dec	r24
    59c2:	e2 f7       	brpl	.-8      	; 0x59bc <nrk_gpio_get+0x5a>
    59c4:	82 2f       	mov	r24, r18
    59c6:	81 70       	andi	r24, 0x01	; 1
    59c8:	08 95       	ret
    59ca:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    59cc:	08 95       	ret

000059ce <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    59ce:	8f 3f       	cpi	r24, 0xFF	; 255
    59d0:	09 f4       	brne	.+2      	; 0x59d4 <nrk_gpio_toggle+0x6>
    59d2:	f5 c0       	rjmp	.+490    	; 0x5bbe <nrk_gpio_toggle+0x1f0>
        switch (pin & 0x07) {
    59d4:	28 2f       	mov	r18, r24
    59d6:	30 e0       	ldi	r19, 0x00	; 0
    59d8:	27 70       	andi	r18, 0x07	; 7
    59da:	30 70       	andi	r19, 0x00	; 0
    59dc:	22 30       	cpi	r18, 0x02	; 2
    59de:	31 05       	cpc	r19, r1
    59e0:	09 f4       	brne	.+2      	; 0x59e4 <nrk_gpio_toggle+0x16>
    59e2:	58 c0       	rjmp	.+176    	; 0x5a94 <nrk_gpio_toggle+0xc6>
    59e4:	23 30       	cpi	r18, 0x03	; 3
    59e6:	31 05       	cpc	r19, r1
    59e8:	44 f4       	brge	.+16     	; 0x59fa <nrk_gpio_toggle+0x2c>
    59ea:	21 15       	cp	r18, r1
    59ec:	31 05       	cpc	r19, r1
    59ee:	91 f0       	breq	.+36     	; 0x5a14 <nrk_gpio_toggle+0x46>
    59f0:	21 30       	cpi	r18, 0x01	; 1
    59f2:	31 05       	cpc	r19, r1
    59f4:	09 f0       	breq	.+2      	; 0x59f8 <nrk_gpio_toggle+0x2a>
    59f6:	e3 c0       	rjmp	.+454    	; 0x5bbe <nrk_gpio_toggle+0x1f0>
    59f8:	32 c0       	rjmp	.+100    	; 0x5a5e <nrk_gpio_toggle+0x90>
    59fa:	24 30       	cpi	r18, 0x04	; 4
    59fc:	31 05       	cpc	r19, r1
    59fe:	09 f4       	brne	.+2      	; 0x5a02 <nrk_gpio_toggle+0x34>
    5a00:	93 c0       	rjmp	.+294    	; 0x5b28 <nrk_gpio_toggle+0x15a>
    5a02:	24 30       	cpi	r18, 0x04	; 4
    5a04:	31 05       	cpc	r19, r1
    5a06:	0c f4       	brge	.+2      	; 0x5a0a <nrk_gpio_toggle+0x3c>
    5a08:	6a c0       	rjmp	.+212    	; 0x5ade <nrk_gpio_toggle+0x110>
    5a0a:	25 30       	cpi	r18, 0x05	; 5
    5a0c:	31 05       	cpc	r19, r1
    5a0e:	09 f0       	breq	.+2      	; 0x5a12 <nrk_gpio_toggle+0x44>
    5a10:	d6 c0       	rjmp	.+428    	; 0x5bbe <nrk_gpio_toggle+0x1f0>
    5a12:	af c0       	rjmp	.+350    	; 0x5b72 <nrk_gpio_toggle+0x1a4>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    5a14:	90 b1       	in	r25, 0x00	; 0
    5a16:	86 95       	lsr	r24
    5a18:	86 95       	lsr	r24
    5a1a:	86 95       	lsr	r24
    5a1c:	28 2f       	mov	r18, r24
    5a1e:	89 2f       	mov	r24, r25
    5a20:	90 e0       	ldi	r25, 0x00	; 0
    5a22:	02 2e       	mov	r0, r18
    5a24:	02 c0       	rjmp	.+4      	; 0x5a2a <nrk_gpio_toggle+0x5c>
    5a26:	95 95       	asr	r25
    5a28:	87 95       	ror	r24
    5a2a:	0a 94       	dec	r0
    5a2c:	e2 f7       	brpl	.-8      	; 0x5a26 <nrk_gpio_toggle+0x58>
    5a2e:	80 fd       	sbrc	r24, 0
    5a30:	0a c0       	rjmp	.+20     	; 0x5a46 <nrk_gpio_toggle+0x78>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    5a32:	82 b1       	in	r24, 0x02	; 2
    5a34:	41 e0       	ldi	r20, 0x01	; 1
    5a36:	50 e0       	ldi	r21, 0x00	; 0
    5a38:	02 c0       	rjmp	.+4      	; 0x5a3e <nrk_gpio_toggle+0x70>
    5a3a:	44 0f       	add	r20, r20
    5a3c:	55 1f       	adc	r21, r21
    5a3e:	2a 95       	dec	r18
    5a40:	e2 f7       	brpl	.-8      	; 0x5a3a <nrk_gpio_toggle+0x6c>
    5a42:	84 2b       	or	r24, r20
    5a44:	0a c0       	rjmp	.+20     	; 0x5a5a <nrk_gpio_toggle+0x8c>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    5a46:	32 b1       	in	r19, 0x02	; 2
    5a48:	81 e0       	ldi	r24, 0x01	; 1
    5a4a:	90 e0       	ldi	r25, 0x00	; 0
    5a4c:	02 c0       	rjmp	.+4      	; 0x5a52 <nrk_gpio_toggle+0x84>
    5a4e:	88 0f       	add	r24, r24
    5a50:	99 1f       	adc	r25, r25
    5a52:	2a 95       	dec	r18
    5a54:	e2 f7       	brpl	.-8      	; 0x5a4e <nrk_gpio_toggle+0x80>
    5a56:	80 95       	com	r24
    5a58:	83 23       	and	r24, r19
    5a5a:	82 b9       	out	0x02, r24	; 2
    5a5c:	ae c0       	rjmp	.+348    	; 0x5bba <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    5a5e:	43 b1       	in	r20, 0x03	; 3
    5a60:	86 95       	lsr	r24
    5a62:	86 95       	lsr	r24
    5a64:	86 95       	lsr	r24
    5a66:	50 e0       	ldi	r21, 0x00	; 0
    5a68:	08 2e       	mov	r0, r24
    5a6a:	02 c0       	rjmp	.+4      	; 0x5a70 <nrk_gpio_toggle+0xa2>
    5a6c:	55 95       	asr	r21
    5a6e:	47 95       	ror	r20
    5a70:	0a 94       	dec	r0
    5a72:	e2 f7       	brpl	.-8      	; 0x5a6c <nrk_gpio_toggle+0x9e>
    5a74:	02 c0       	rjmp	.+4      	; 0x5a7a <nrk_gpio_toggle+0xac>
    5a76:	22 0f       	add	r18, r18
    5a78:	33 1f       	adc	r19, r19
    5a7a:	8a 95       	dec	r24
    5a7c:	e2 f7       	brpl	.-8      	; 0x5a76 <nrk_gpio_toggle+0xa8>
    5a7e:	40 fd       	sbrc	r20, 0
    5a80:	04 c0       	rjmp	.+8      	; 0x5a8a <nrk_gpio_toggle+0xbc>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    5a82:	95 b1       	in	r25, 0x05	; 5
    5a84:	92 2b       	or	r25, r18
    5a86:	95 b9       	out	0x05, r25	; 5
    5a88:	98 c0       	rjmp	.+304    	; 0x5bba <nrk_gpio_toggle+0x1ec>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    5a8a:	85 b1       	in	r24, 0x05	; 5
    5a8c:	20 95       	com	r18
    5a8e:	28 23       	and	r18, r24
    5a90:	25 b9       	out	0x05, r18	; 5
    5a92:	93 c0       	rjmp	.+294    	; 0x5bba <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    5a94:	96 b1       	in	r25, 0x06	; 6
    5a96:	86 95       	lsr	r24
    5a98:	86 95       	lsr	r24
    5a9a:	86 95       	lsr	r24
    5a9c:	28 2f       	mov	r18, r24
    5a9e:	89 2f       	mov	r24, r25
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
    5aa2:	02 2e       	mov	r0, r18
    5aa4:	02 c0       	rjmp	.+4      	; 0x5aaa <nrk_gpio_toggle+0xdc>
    5aa6:	95 95       	asr	r25
    5aa8:	87 95       	ror	r24
    5aaa:	0a 94       	dec	r0
    5aac:	e2 f7       	brpl	.-8      	; 0x5aa6 <nrk_gpio_toggle+0xd8>
    5aae:	80 fd       	sbrc	r24, 0
    5ab0:	0a c0       	rjmp	.+20     	; 0x5ac6 <nrk_gpio_toggle+0xf8>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    5ab2:	88 b1       	in	r24, 0x08	; 8
    5ab4:	41 e0       	ldi	r20, 0x01	; 1
    5ab6:	50 e0       	ldi	r21, 0x00	; 0
    5ab8:	02 c0       	rjmp	.+4      	; 0x5abe <nrk_gpio_toggle+0xf0>
    5aba:	44 0f       	add	r20, r20
    5abc:	55 1f       	adc	r21, r21
    5abe:	2a 95       	dec	r18
    5ac0:	e2 f7       	brpl	.-8      	; 0x5aba <nrk_gpio_toggle+0xec>
    5ac2:	84 2b       	or	r24, r20
    5ac4:	0a c0       	rjmp	.+20     	; 0x5ada <nrk_gpio_toggle+0x10c>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    5ac6:	38 b1       	in	r19, 0x08	; 8
    5ac8:	81 e0       	ldi	r24, 0x01	; 1
    5aca:	90 e0       	ldi	r25, 0x00	; 0
    5acc:	02 c0       	rjmp	.+4      	; 0x5ad2 <nrk_gpio_toggle+0x104>
    5ace:	88 0f       	add	r24, r24
    5ad0:	99 1f       	adc	r25, r25
    5ad2:	2a 95       	dec	r18
    5ad4:	e2 f7       	brpl	.-8      	; 0x5ace <nrk_gpio_toggle+0x100>
    5ad6:	80 95       	com	r24
    5ad8:	83 23       	and	r24, r19
    5ada:	88 b9       	out	0x08, r24	; 8
    5adc:	6e c0       	rjmp	.+220    	; 0x5bba <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    5ade:	99 b1       	in	r25, 0x09	; 9
    5ae0:	86 95       	lsr	r24
    5ae2:	86 95       	lsr	r24
    5ae4:	86 95       	lsr	r24
    5ae6:	28 2f       	mov	r18, r24
    5ae8:	89 2f       	mov	r24, r25
    5aea:	90 e0       	ldi	r25, 0x00	; 0
    5aec:	02 2e       	mov	r0, r18
    5aee:	02 c0       	rjmp	.+4      	; 0x5af4 <nrk_gpio_toggle+0x126>
    5af0:	95 95       	asr	r25
    5af2:	87 95       	ror	r24
    5af4:	0a 94       	dec	r0
    5af6:	e2 f7       	brpl	.-8      	; 0x5af0 <nrk_gpio_toggle+0x122>
    5af8:	80 fd       	sbrc	r24, 0
    5afa:	0a c0       	rjmp	.+20     	; 0x5b10 <nrk_gpio_toggle+0x142>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    5afc:	8b b1       	in	r24, 0x0b	; 11
    5afe:	41 e0       	ldi	r20, 0x01	; 1
    5b00:	50 e0       	ldi	r21, 0x00	; 0
    5b02:	02 c0       	rjmp	.+4      	; 0x5b08 <nrk_gpio_toggle+0x13a>
    5b04:	44 0f       	add	r20, r20
    5b06:	55 1f       	adc	r21, r21
    5b08:	2a 95       	dec	r18
    5b0a:	e2 f7       	brpl	.-8      	; 0x5b04 <nrk_gpio_toggle+0x136>
    5b0c:	84 2b       	or	r24, r20
    5b0e:	0a c0       	rjmp	.+20     	; 0x5b24 <nrk_gpio_toggle+0x156>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    5b10:	3b b1       	in	r19, 0x0b	; 11
    5b12:	81 e0       	ldi	r24, 0x01	; 1
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	02 c0       	rjmp	.+4      	; 0x5b1c <nrk_gpio_toggle+0x14e>
    5b18:	88 0f       	add	r24, r24
    5b1a:	99 1f       	adc	r25, r25
    5b1c:	2a 95       	dec	r18
    5b1e:	e2 f7       	brpl	.-8      	; 0x5b18 <nrk_gpio_toggle+0x14a>
    5b20:	80 95       	com	r24
    5b22:	83 23       	and	r24, r19
    5b24:	8b b9       	out	0x0b, r24	; 11
    5b26:	49 c0       	rjmp	.+146    	; 0x5bba <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    5b28:	9c b1       	in	r25, 0x0c	; 12
    5b2a:	86 95       	lsr	r24
    5b2c:	86 95       	lsr	r24
    5b2e:	86 95       	lsr	r24
    5b30:	28 2f       	mov	r18, r24
    5b32:	89 2f       	mov	r24, r25
    5b34:	90 e0       	ldi	r25, 0x00	; 0
    5b36:	02 2e       	mov	r0, r18
    5b38:	02 c0       	rjmp	.+4      	; 0x5b3e <nrk_gpio_toggle+0x170>
    5b3a:	95 95       	asr	r25
    5b3c:	87 95       	ror	r24
    5b3e:	0a 94       	dec	r0
    5b40:	e2 f7       	brpl	.-8      	; 0x5b3a <nrk_gpio_toggle+0x16c>
    5b42:	80 fd       	sbrc	r24, 0
    5b44:	0a c0       	rjmp	.+20     	; 0x5b5a <nrk_gpio_toggle+0x18c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    5b46:	8e b1       	in	r24, 0x0e	; 14
    5b48:	41 e0       	ldi	r20, 0x01	; 1
    5b4a:	50 e0       	ldi	r21, 0x00	; 0
    5b4c:	02 c0       	rjmp	.+4      	; 0x5b52 <nrk_gpio_toggle+0x184>
    5b4e:	44 0f       	add	r20, r20
    5b50:	55 1f       	adc	r21, r21
    5b52:	2a 95       	dec	r18
    5b54:	e2 f7       	brpl	.-8      	; 0x5b4e <nrk_gpio_toggle+0x180>
    5b56:	84 2b       	or	r24, r20
    5b58:	0a c0       	rjmp	.+20     	; 0x5b6e <nrk_gpio_toggle+0x1a0>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    5b5a:	3e b1       	in	r19, 0x0e	; 14
    5b5c:	81 e0       	ldi	r24, 0x01	; 1
    5b5e:	90 e0       	ldi	r25, 0x00	; 0
    5b60:	02 c0       	rjmp	.+4      	; 0x5b66 <nrk_gpio_toggle+0x198>
    5b62:	88 0f       	add	r24, r24
    5b64:	99 1f       	adc	r25, r25
    5b66:	2a 95       	dec	r18
    5b68:	e2 f7       	brpl	.-8      	; 0x5b62 <nrk_gpio_toggle+0x194>
    5b6a:	80 95       	com	r24
    5b6c:	83 23       	and	r24, r19
    5b6e:	8e b9       	out	0x0e, r24	; 14
    5b70:	24 c0       	rjmp	.+72     	; 0x5bba <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    5b72:	9f b1       	in	r25, 0x0f	; 15
    5b74:	86 95       	lsr	r24
    5b76:	86 95       	lsr	r24
    5b78:	86 95       	lsr	r24
    5b7a:	28 2f       	mov	r18, r24
    5b7c:	89 2f       	mov	r24, r25
    5b7e:	90 e0       	ldi	r25, 0x00	; 0
    5b80:	02 2e       	mov	r0, r18
    5b82:	02 c0       	rjmp	.+4      	; 0x5b88 <nrk_gpio_toggle+0x1ba>
    5b84:	95 95       	asr	r25
    5b86:	87 95       	ror	r24
    5b88:	0a 94       	dec	r0
    5b8a:	e2 f7       	brpl	.-8      	; 0x5b84 <nrk_gpio_toggle+0x1b6>
    5b8c:	80 fd       	sbrc	r24, 0
    5b8e:	0a c0       	rjmp	.+20     	; 0x5ba4 <nrk_gpio_toggle+0x1d6>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    5b90:	81 b3       	in	r24, 0x11	; 17
    5b92:	41 e0       	ldi	r20, 0x01	; 1
    5b94:	50 e0       	ldi	r21, 0x00	; 0
    5b96:	02 c0       	rjmp	.+4      	; 0x5b9c <nrk_gpio_toggle+0x1ce>
    5b98:	44 0f       	add	r20, r20
    5b9a:	55 1f       	adc	r21, r21
    5b9c:	2a 95       	dec	r18
    5b9e:	e2 f7       	brpl	.-8      	; 0x5b98 <nrk_gpio_toggle+0x1ca>
    5ba0:	84 2b       	or	r24, r20
    5ba2:	0a c0       	rjmp	.+20     	; 0x5bb8 <nrk_gpio_toggle+0x1ea>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    5ba4:	31 b3       	in	r19, 0x11	; 17
    5ba6:	81 e0       	ldi	r24, 0x01	; 1
    5ba8:	90 e0       	ldi	r25, 0x00	; 0
    5baa:	02 c0       	rjmp	.+4      	; 0x5bb0 <nrk_gpio_toggle+0x1e2>
    5bac:	88 0f       	add	r24, r24
    5bae:	99 1f       	adc	r25, r25
    5bb0:	2a 95       	dec	r18
    5bb2:	e2 f7       	brpl	.-8      	; 0x5bac <nrk_gpio_toggle+0x1de>
    5bb4:	80 95       	com	r24
    5bb6:	83 23       	and	r24, r19
    5bb8:	81 bb       	out	0x11, r24	; 17
    5bba:	81 e0       	ldi	r24, 0x01	; 1
    5bbc:	08 95       	ret
    5bbe:	8f ef       	ldi	r24, 0xFF	; 255
                        }
                        break;
                default: return -1;
        }
        return 1;
}
    5bc0:	08 95       	ret

00005bc2 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    5bc2:	8f 3f       	cpi	r24, 0xFF	; 255
    5bc4:	09 f4       	brne	.+2      	; 0x5bc8 <nrk_gpio_direction+0x6>
    5bc6:	f7 c0       	rjmp	.+494    	; 0x5db6 <nrk_gpio_direction+0x1f4>
    5bc8:	28 2f       	mov	r18, r24
    5bca:	30 e0       	ldi	r19, 0x00	; 0
        if (pin_direction == NRK_PIN_INPUT) {
    5bcc:	66 23       	and	r22, r22
    5bce:	09 f0       	breq	.+2      	; 0x5bd2 <nrk_gpio_direction+0x10>
    5bd0:	83 c0       	rjmp	.+262    	; 0x5cd8 <nrk_gpio_direction+0x116>
                switch (pin & 0x07) {
    5bd2:	27 70       	andi	r18, 0x07	; 7
    5bd4:	30 70       	andi	r19, 0x00	; 0
    5bd6:	22 30       	cpi	r18, 0x02	; 2
    5bd8:	31 05       	cpc	r19, r1
    5bda:	d9 f1       	breq	.+118    	; 0x5c52 <nrk_gpio_direction+0x90>
    5bdc:	23 30       	cpi	r18, 0x03	; 3
    5bde:	31 05       	cpc	r19, r1
    5be0:	44 f4       	brge	.+16     	; 0x5bf2 <nrk_gpio_direction+0x30>
    5be2:	21 15       	cp	r18, r1
    5be4:	31 05       	cpc	r19, r1
    5be6:	89 f0       	breq	.+34     	; 0x5c0a <nrk_gpio_direction+0x48>
    5be8:	21 30       	cpi	r18, 0x01	; 1
    5bea:	31 05       	cpc	r19, r1
    5bec:	09 f0       	breq	.+2      	; 0x5bf0 <nrk_gpio_direction+0x2e>
    5bee:	e3 c0       	rjmp	.+454    	; 0x5db6 <nrk_gpio_direction+0x1f4>
    5bf0:	1f c0       	rjmp	.+62     	; 0x5c30 <nrk_gpio_direction+0x6e>
    5bf2:	24 30       	cpi	r18, 0x04	; 4
    5bf4:	31 05       	cpc	r19, r1
    5bf6:	09 f4       	brne	.+2      	; 0x5bfa <nrk_gpio_direction+0x38>
    5bf8:	4c c0       	rjmp	.+152    	; 0x5c92 <nrk_gpio_direction+0xd0>
    5bfa:	24 30       	cpi	r18, 0x04	; 4
    5bfc:	31 05       	cpc	r19, r1
    5bfe:	cc f1       	brlt	.+114    	; 0x5c72 <nrk_gpio_direction+0xb0>
    5c00:	25 30       	cpi	r18, 0x05	; 5
    5c02:	31 05       	cpc	r19, r1
    5c04:	09 f0       	breq	.+2      	; 0x5c08 <nrk_gpio_direction+0x46>
    5c06:	d7 c0       	rjmp	.+430    	; 0x5db6 <nrk_gpio_direction+0x1f4>
    5c08:	54 c0       	rjmp	.+168    	; 0x5cb2 <nrk_gpio_direction+0xf0>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    5c0a:	91 b1       	in	r25, 0x01	; 1
    5c0c:	86 95       	lsr	r24
    5c0e:	86 95       	lsr	r24
    5c10:	86 95       	lsr	r24
    5c12:	21 e0       	ldi	r18, 0x01	; 1
    5c14:	30 e0       	ldi	r19, 0x00	; 0
    5c16:	02 c0       	rjmp	.+4      	; 0x5c1c <nrk_gpio_direction+0x5a>
    5c18:	22 0f       	add	r18, r18
    5c1a:	33 1f       	adc	r19, r19
    5c1c:	8a 95       	dec	r24
    5c1e:	e2 f7       	brpl	.-8      	; 0x5c18 <nrk_gpio_direction+0x56>
    5c20:	82 2f       	mov	r24, r18
    5c22:	80 95       	com	r24
    5c24:	89 23       	and	r24, r25
    5c26:	81 b9       	out	0x01, r24	; 1
                                PORTA |= BM((pin & 0xF8) >> 3); 
    5c28:	82 b1       	in	r24, 0x02	; 2
    5c2a:	82 2b       	or	r24, r18
    5c2c:	82 b9       	out	0x02, r24	; 2
    5c2e:	c1 c0       	rjmp	.+386    	; 0x5db2 <nrk_gpio_direction+0x1f0>
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    5c30:	44 b1       	in	r20, 0x04	; 4
    5c32:	86 95       	lsr	r24
    5c34:	86 95       	lsr	r24
    5c36:	86 95       	lsr	r24
    5c38:	02 c0       	rjmp	.+4      	; 0x5c3e <nrk_gpio_direction+0x7c>
    5c3a:	22 0f       	add	r18, r18
    5c3c:	33 1f       	adc	r19, r19
    5c3e:	8a 95       	dec	r24
    5c40:	e2 f7       	brpl	.-8      	; 0x5c3a <nrk_gpio_direction+0x78>
    5c42:	92 2f       	mov	r25, r18
    5c44:	90 95       	com	r25
    5c46:	94 23       	and	r25, r20
    5c48:	94 b9       	out	0x04, r25	; 4
                                PORTB |= BM((pin & 0xF8) >> 3); 
    5c4a:	95 b1       	in	r25, 0x05	; 5
    5c4c:	92 2b       	or	r25, r18
    5c4e:	95 b9       	out	0x05, r25	; 5
    5c50:	b0 c0       	rjmp	.+352    	; 0x5db2 <nrk_gpio_direction+0x1f0>
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    5c52:	97 b1       	in	r25, 0x07	; 7
    5c54:	86 95       	lsr	r24
    5c56:	86 95       	lsr	r24
    5c58:	86 95       	lsr	r24
    5c5a:	21 e0       	ldi	r18, 0x01	; 1
    5c5c:	30 e0       	ldi	r19, 0x00	; 0
    5c5e:	02 c0       	rjmp	.+4      	; 0x5c64 <nrk_gpio_direction+0xa2>
    5c60:	22 0f       	add	r18, r18
    5c62:	33 1f       	adc	r19, r19
    5c64:	8a 95       	dec	r24
    5c66:	e2 f7       	brpl	.-8      	; 0x5c60 <nrk_gpio_direction+0x9e>
    5c68:	82 2f       	mov	r24, r18
    5c6a:	80 95       	com	r24
    5c6c:	89 23       	and	r24, r25
    5c6e:	87 b9       	out	0x07, r24	; 7
    5c70:	2f c0       	rjmp	.+94     	; 0x5cd0 <nrk_gpio_direction+0x10e>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    5c72:	9a b1       	in	r25, 0x0a	; 10
    5c74:	86 95       	lsr	r24
    5c76:	86 95       	lsr	r24
    5c78:	86 95       	lsr	r24
    5c7a:	21 e0       	ldi	r18, 0x01	; 1
    5c7c:	30 e0       	ldi	r19, 0x00	; 0
    5c7e:	02 c0       	rjmp	.+4      	; 0x5c84 <nrk_gpio_direction+0xc2>
    5c80:	22 0f       	add	r18, r18
    5c82:	33 1f       	adc	r19, r19
    5c84:	8a 95       	dec	r24
    5c86:	e2 f7       	brpl	.-8      	; 0x5c80 <nrk_gpio_direction+0xbe>
    5c88:	82 2f       	mov	r24, r18
    5c8a:	80 95       	com	r24
    5c8c:	89 23       	and	r24, r25
    5c8e:	8a b9       	out	0x0a, r24	; 10
    5c90:	1f c0       	rjmp	.+62     	; 0x5cd0 <nrk_gpio_direction+0x10e>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    5c92:	9d b1       	in	r25, 0x0d	; 13
    5c94:	86 95       	lsr	r24
    5c96:	86 95       	lsr	r24
    5c98:	86 95       	lsr	r24
    5c9a:	21 e0       	ldi	r18, 0x01	; 1
    5c9c:	30 e0       	ldi	r19, 0x00	; 0
    5c9e:	02 c0       	rjmp	.+4      	; 0x5ca4 <nrk_gpio_direction+0xe2>
    5ca0:	22 0f       	add	r18, r18
    5ca2:	33 1f       	adc	r19, r19
    5ca4:	8a 95       	dec	r24
    5ca6:	e2 f7       	brpl	.-8      	; 0x5ca0 <nrk_gpio_direction+0xde>
    5ca8:	82 2f       	mov	r24, r18
    5caa:	80 95       	com	r24
    5cac:	89 23       	and	r24, r25
    5cae:	8d b9       	out	0x0d, r24	; 13
    5cb0:	0f c0       	rjmp	.+30     	; 0x5cd0 <nrk_gpio_direction+0x10e>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    5cb2:	90 b3       	in	r25, 0x10	; 16
    5cb4:	86 95       	lsr	r24
    5cb6:	86 95       	lsr	r24
    5cb8:	86 95       	lsr	r24
    5cba:	21 e0       	ldi	r18, 0x01	; 1
    5cbc:	30 e0       	ldi	r19, 0x00	; 0
    5cbe:	02 c0       	rjmp	.+4      	; 0x5cc4 <nrk_gpio_direction+0x102>
    5cc0:	22 0f       	add	r18, r18
    5cc2:	33 1f       	adc	r19, r19
    5cc4:	8a 95       	dec	r24
    5cc6:	e2 f7       	brpl	.-8      	; 0x5cc0 <nrk_gpio_direction+0xfe>
    5cc8:	82 2f       	mov	r24, r18
    5cca:	80 95       	com	r24
    5ccc:	89 23       	and	r24, r25
    5cce:	80 bb       	out	0x10, r24	; 16
                                PORTB |= BM((pin & 0xF8) >> 3); 
    5cd0:	85 b1       	in	r24, 0x05	; 5
    5cd2:	82 2b       	or	r24, r18
    5cd4:	85 b9       	out	0x05, r24	; 5
    5cd6:	6d c0       	rjmp	.+218    	; 0x5db2 <nrk_gpio_direction+0x1f0>
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    5cd8:	27 70       	andi	r18, 0x07	; 7
    5cda:	30 70       	andi	r19, 0x00	; 0
    5cdc:	22 30       	cpi	r18, 0x02	; 2
    5cde:	31 05       	cpc	r19, r1
    5ce0:	89 f1       	breq	.+98     	; 0x5d44 <nrk_gpio_direction+0x182>
    5ce2:	23 30       	cpi	r18, 0x03	; 3
    5ce4:	31 05       	cpc	r19, r1
    5ce6:	44 f4       	brge	.+16     	; 0x5cf8 <nrk_gpio_direction+0x136>
    5ce8:	21 15       	cp	r18, r1
    5cea:	31 05       	cpc	r19, r1
    5cec:	89 f0       	breq	.+34     	; 0x5d10 <nrk_gpio_direction+0x14e>
    5cee:	21 30       	cpi	r18, 0x01	; 1
    5cf0:	31 05       	cpc	r19, r1
    5cf2:	09 f0       	breq	.+2      	; 0x5cf6 <nrk_gpio_direction+0x134>
    5cf4:	60 c0       	rjmp	.+192    	; 0x5db6 <nrk_gpio_direction+0x1f4>
    5cf6:	1a c0       	rjmp	.+52     	; 0x5d2c <nrk_gpio_direction+0x16a>
    5cf8:	24 30       	cpi	r18, 0x04	; 4
    5cfa:	31 05       	cpc	r19, r1
    5cfc:	09 f4       	brne	.+2      	; 0x5d00 <nrk_gpio_direction+0x13e>
    5cfe:	3e c0       	rjmp	.+124    	; 0x5d7c <nrk_gpio_direction+0x1ba>
    5d00:	24 30       	cpi	r18, 0x04	; 4
    5d02:	31 05       	cpc	r19, r1
    5d04:	6c f1       	brlt	.+90     	; 0x5d60 <nrk_gpio_direction+0x19e>
    5d06:	25 30       	cpi	r18, 0x05	; 5
    5d08:	31 05       	cpc	r19, r1
    5d0a:	09 f0       	breq	.+2      	; 0x5d0e <nrk_gpio_direction+0x14c>
    5d0c:	54 c0       	rjmp	.+168    	; 0x5db6 <nrk_gpio_direction+0x1f4>
    5d0e:	44 c0       	rjmp	.+136    	; 0x5d98 <nrk_gpio_direction+0x1d6>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    5d10:	91 b1       	in	r25, 0x01	; 1
    5d12:	86 95       	lsr	r24
    5d14:	86 95       	lsr	r24
    5d16:	86 95       	lsr	r24
    5d18:	21 e0       	ldi	r18, 0x01	; 1
    5d1a:	30 e0       	ldi	r19, 0x00	; 0
    5d1c:	02 c0       	rjmp	.+4      	; 0x5d22 <nrk_gpio_direction+0x160>
    5d1e:	22 0f       	add	r18, r18
    5d20:	33 1f       	adc	r19, r19
    5d22:	8a 95       	dec	r24
    5d24:	e2 f7       	brpl	.-8      	; 0x5d1e <nrk_gpio_direction+0x15c>
    5d26:	92 2b       	or	r25, r18
    5d28:	91 b9       	out	0x01, r25	; 1
    5d2a:	43 c0       	rjmp	.+134    	; 0x5db2 <nrk_gpio_direction+0x1f0>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    5d2c:	94 b1       	in	r25, 0x04	; 4
    5d2e:	86 95       	lsr	r24
    5d30:	86 95       	lsr	r24
    5d32:	86 95       	lsr	r24
    5d34:	02 c0       	rjmp	.+4      	; 0x5d3a <nrk_gpio_direction+0x178>
    5d36:	22 0f       	add	r18, r18
    5d38:	33 1f       	adc	r19, r19
    5d3a:	8a 95       	dec	r24
    5d3c:	e2 f7       	brpl	.-8      	; 0x5d36 <nrk_gpio_direction+0x174>
    5d3e:	92 2b       	or	r25, r18
    5d40:	94 b9       	out	0x04, r25	; 4
    5d42:	37 c0       	rjmp	.+110    	; 0x5db2 <nrk_gpio_direction+0x1f0>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    5d44:	97 b1       	in	r25, 0x07	; 7
    5d46:	86 95       	lsr	r24
    5d48:	86 95       	lsr	r24
    5d4a:	86 95       	lsr	r24
    5d4c:	21 e0       	ldi	r18, 0x01	; 1
    5d4e:	30 e0       	ldi	r19, 0x00	; 0
    5d50:	02 c0       	rjmp	.+4      	; 0x5d56 <nrk_gpio_direction+0x194>
    5d52:	22 0f       	add	r18, r18
    5d54:	33 1f       	adc	r19, r19
    5d56:	8a 95       	dec	r24
    5d58:	e2 f7       	brpl	.-8      	; 0x5d52 <nrk_gpio_direction+0x190>
    5d5a:	92 2b       	or	r25, r18
    5d5c:	97 b9       	out	0x07, r25	; 7
    5d5e:	29 c0       	rjmp	.+82     	; 0x5db2 <nrk_gpio_direction+0x1f0>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    5d60:	9a b1       	in	r25, 0x0a	; 10
    5d62:	86 95       	lsr	r24
    5d64:	86 95       	lsr	r24
    5d66:	86 95       	lsr	r24
    5d68:	21 e0       	ldi	r18, 0x01	; 1
    5d6a:	30 e0       	ldi	r19, 0x00	; 0
    5d6c:	02 c0       	rjmp	.+4      	; 0x5d72 <nrk_gpio_direction+0x1b0>
    5d6e:	22 0f       	add	r18, r18
    5d70:	33 1f       	adc	r19, r19
    5d72:	8a 95       	dec	r24
    5d74:	e2 f7       	brpl	.-8      	; 0x5d6e <nrk_gpio_direction+0x1ac>
    5d76:	92 2b       	or	r25, r18
    5d78:	9a b9       	out	0x0a, r25	; 10
    5d7a:	1b c0       	rjmp	.+54     	; 0x5db2 <nrk_gpio_direction+0x1f0>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    5d7c:	9d b1       	in	r25, 0x0d	; 13
    5d7e:	86 95       	lsr	r24
    5d80:	86 95       	lsr	r24
    5d82:	86 95       	lsr	r24
    5d84:	21 e0       	ldi	r18, 0x01	; 1
    5d86:	30 e0       	ldi	r19, 0x00	; 0
    5d88:	02 c0       	rjmp	.+4      	; 0x5d8e <nrk_gpio_direction+0x1cc>
    5d8a:	22 0f       	add	r18, r18
    5d8c:	33 1f       	adc	r19, r19
    5d8e:	8a 95       	dec	r24
    5d90:	e2 f7       	brpl	.-8      	; 0x5d8a <nrk_gpio_direction+0x1c8>
    5d92:	92 2b       	or	r25, r18
    5d94:	9d b9       	out	0x0d, r25	; 13
    5d96:	0d c0       	rjmp	.+26     	; 0x5db2 <nrk_gpio_direction+0x1f0>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    5d98:	90 b3       	in	r25, 0x10	; 16
    5d9a:	86 95       	lsr	r24
    5d9c:	86 95       	lsr	r24
    5d9e:	86 95       	lsr	r24
    5da0:	21 e0       	ldi	r18, 0x01	; 1
    5da2:	30 e0       	ldi	r19, 0x00	; 0
    5da4:	02 c0       	rjmp	.+4      	; 0x5daa <nrk_gpio_direction+0x1e8>
    5da6:	22 0f       	add	r18, r18
    5da8:	33 1f       	adc	r19, r19
    5daa:	8a 95       	dec	r24
    5dac:	e2 f7       	brpl	.-8      	; 0x5da6 <nrk_gpio_direction+0x1e4>
    5dae:	92 2b       	or	r25, r18
    5db0:	90 bb       	out	0x10, r25	; 16
    5db2:	81 e0       	ldi	r24, 0x01	; 1
    5db4:	08 95       	ret
    5db6:	8f ef       	ldi	r24, 0xFF	; 255
                        default: return -1;
                }
        }
        return 1;
}
    5db8:	08 95       	ret

00005dba <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    5dba:	88 23       	and	r24, r24
    5dbc:	11 f0       	breq	.+4      	; 0x5dc2 <nrk_get_button+0x8>
    5dbe:	8f ef       	ldi	r24, 0xFF	; 255
    5dc0:	08 95       	ret
	 return( !(PINA & BM(BUTTON))); 
    5dc2:	80 b1       	in	r24, 0x00	; 0
    5dc4:	80 95       	com	r24
    5dc6:	88 1f       	adc	r24, r24
    5dc8:	88 27       	eor	r24, r24
    5dca:	88 1f       	adc	r24, r24
	} 
return -1;
}
    5dcc:	08 95       	ret

00005dce <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    5dce:	00 97       	sbiw	r24, 0x00	; 0
    5dd0:	11 f4       	brne	.+4      	; 0x5dd6 <nrk_led_toggle+0x8>
    5dd2:	84 e1       	ldi	r24, 0x14	; 20
    5dd4:	09 c0       	rjmp	.+18     	; 0x5de8 <nrk_led_toggle+0x1a>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    5dd6:	81 30       	cpi	r24, 0x01	; 1
    5dd8:	91 05       	cpc	r25, r1
    5dda:	11 f4       	brne	.+4      	; 0x5de0 <nrk_led_toggle+0x12>
    5ddc:	8c e1       	ldi	r24, 0x1C	; 28
    5dde:	04 c0       	rjmp	.+8      	; 0x5de8 <nrk_led_toggle+0x1a>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    5de0:	82 30       	cpi	r24, 0x02	; 2
    5de2:	91 05       	cpc	r25, r1
    5de4:	29 f4       	brne	.+10     	; 0x5df0 <nrk_led_toggle+0x22>
    5de6:	84 e2       	ldi	r24, 0x24	; 36
    5de8:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <nrk_gpio_toggle>
    5dec:	81 e0       	ldi	r24, 0x01	; 1
    5dee:	08 95       	ret
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    5df0:	83 30       	cpi	r24, 0x03	; 3
    5df2:	91 05       	cpc	r25, r1
    5df4:	11 f0       	breq	.+4      	; 0x5dfa <nrk_led_toggle+0x2c>
    5df6:	8f ef       	ldi	r24, 0xFF	; 255
    5df8:	08 95       	ret
    5dfa:	8c e2       	ldi	r24, 0x2C	; 44
    5dfc:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <nrk_gpio_toggle>
    5e00:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    5e02:	08 95       	ret

00005e04 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    5e04:	00 97       	sbiw	r24, 0x00	; 0
    5e06:	11 f4       	brne	.+4      	; 0x5e0c <nrk_led_clr+0x8>
    5e08:	84 e1       	ldi	r24, 0x14	; 20
    5e0a:	09 c0       	rjmp	.+18     	; 0x5e1e <nrk_led_clr+0x1a>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    5e0c:	81 30       	cpi	r24, 0x01	; 1
    5e0e:	91 05       	cpc	r25, r1
    5e10:	11 f4       	brne	.+4      	; 0x5e16 <nrk_led_clr+0x12>
    5e12:	8c e1       	ldi	r24, 0x1C	; 28
    5e14:	04 c0       	rjmp	.+8      	; 0x5e1e <nrk_led_clr+0x1a>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    5e16:	82 30       	cpi	r24, 0x02	; 2
    5e18:	91 05       	cpc	r25, r1
    5e1a:	29 f4       	brne	.+10     	; 0x5e26 <nrk_led_clr+0x22>
    5e1c:	84 e2       	ldi	r24, 0x24	; 36
    5e1e:	0e 94 ba 2b 	call	0x5774	; 0x5774 <nrk_gpio_set>
    5e22:	81 e0       	ldi	r24, 0x01	; 1
    5e24:	08 95       	ret
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    5e26:	83 30       	cpi	r24, 0x03	; 3
    5e28:	91 05       	cpc	r25, r1
    5e2a:	11 f0       	breq	.+4      	; 0x5e30 <nrk_led_clr+0x2c>
    5e2c:	8f ef       	ldi	r24, 0xFF	; 255
    5e2e:	08 95       	ret
    5e30:	8c e2       	ldi	r24, 0x2C	; 44
    5e32:	0e 94 ba 2b 	call	0x5774	; 0x5774 <nrk_gpio_set>
    5e36:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    5e38:	08 95       	ret

00005e3a <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    5e3a:	00 97       	sbiw	r24, 0x00	; 0
    5e3c:	11 f4       	brne	.+4      	; 0x5e42 <nrk_led_set+0x8>
    5e3e:	84 e1       	ldi	r24, 0x14	; 20
    5e40:	09 c0       	rjmp	.+18     	; 0x5e54 <nrk_led_set+0x1a>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    5e42:	81 30       	cpi	r24, 0x01	; 1
    5e44:	91 05       	cpc	r25, r1
    5e46:	11 f4       	brne	.+4      	; 0x5e4c <nrk_led_set+0x12>
    5e48:	8c e1       	ldi	r24, 0x1C	; 28
    5e4a:	04 c0       	rjmp	.+8      	; 0x5e54 <nrk_led_set+0x1a>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    5e4c:	82 30       	cpi	r24, 0x02	; 2
    5e4e:	91 05       	cpc	r25, r1
    5e50:	29 f4       	brne	.+10     	; 0x5e5c <nrk_led_set+0x22>
    5e52:	84 e2       	ldi	r24, 0x24	; 36
    5e54:	0e 94 30 2c 	call	0x5860	; 0x5860 <nrk_gpio_clr>
    5e58:	81 e0       	ldi	r24, 0x01	; 1
    5e5a:	08 95       	ret
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    5e5c:	83 30       	cpi	r24, 0x03	; 3
    5e5e:	91 05       	cpc	r25, r1
    5e60:	11 f0       	breq	.+4      	; 0x5e66 <nrk_led_set+0x2c>
    5e62:	8f ef       	ldi	r24, 0xFF	; 255
    5e64:	08 95       	ret
    5e66:	8c e2       	ldi	r24, 0x2C	; 44
    5e68:	0e 94 30 2c 	call	0x5860	; 0x5860 <nrk_gpio_clr>
    5e6c:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    5e6e:	08 95       	ret

00005e70 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    5e70:	88 23       	and	r24, r24
    5e72:	19 f0       	breq	.+6      	; 0x5e7a <nrk_gpio_pullups+0xa>
    5e74:	85 b7       	in	r24, 0x35	; 53
    5e76:	8f 7e       	andi	r24, 0xEF	; 239
    5e78:	02 c0       	rjmp	.+4      	; 0x5e7e <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    5e7a:	85 b7       	in	r24, 0x35	; 53
    5e7c:	80 61       	ori	r24, 0x10	; 16
    5e7e:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    5e80:	81 e0       	ldi	r24, 0x01	; 1
    5e82:	08 95       	ret

00005e84 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    5e84:	90 91 c0 00 	lds	r25, 0x00C0
    5e88:	95 ff       	sbrs	r25, 5
    5e8a:	fc cf       	rjmp	.-8      	; 0x5e84 <putc0>
    5e8c:	90 91 c0 00 	lds	r25, 0x00C0
    5e90:	9f 7d       	andi	r25, 0xDF	; 223
    5e92:	90 93 c0 00 	sts	0x00C0, r25
    5e96:	80 93 c6 00 	sts	0x00C6, r24
}
    5e9a:	08 95       	ret

00005e9c <putc1>:

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    5e9c:	90 91 c8 00 	lds	r25, 0x00C8
    5ea0:	95 ff       	sbrs	r25, 5
    5ea2:	fc cf       	rjmp	.-8      	; 0x5e9c <putc1>
    5ea4:	80 93 ce 00 	sts	0x00CE, r24
}
    5ea8:	08 95       	ret

00005eaa <setup_uart0>:

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    5eaa:	90 93 c5 00 	sts	0x00C5, r25
    5eae:	80 93 c4 00 	sts	0x00C4, r24
    5eb2:	86 e0       	ldi	r24, 0x06	; 6
    5eb4:	80 93 c2 00 	sts	0x00C2, r24
    5eb8:	e1 ec       	ldi	r30, 0xC1	; 193
    5eba:	f0 e0       	ldi	r31, 0x00	; 0
    5ebc:	80 81       	ld	r24, Z
    5ebe:	8b 7f       	andi	r24, 0xFB	; 251
    5ec0:	80 83       	st	Z, r24
    5ec2:	a0 ec       	ldi	r26, 0xC0	; 192
    5ec4:	b0 e0       	ldi	r27, 0x00	; 0
    5ec6:	8c 91       	ld	r24, X
    5ec8:	82 60       	ori	r24, 0x02	; 2
    5eca:	8c 93       	st	X, r24
ENABLE_UART0();
    5ecc:	80 81       	ld	r24, Z
    5ece:	88 61       	ori	r24, 0x18	; 24
    5ed0:	80 83       	st	Z, r24
}
    5ed2:	08 95       	ret

00005ed4 <setup_uart1>:

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    5ed4:	90 93 cd 00 	sts	0x00CD, r25
    5ed8:	80 93 cc 00 	sts	0x00CC, r24
    5edc:	86 e0       	ldi	r24, 0x06	; 6
    5ede:	80 93 ca 00 	sts	0x00CA, r24
    5ee2:	e9 ec       	ldi	r30, 0xC9	; 201
    5ee4:	f0 e0       	ldi	r31, 0x00	; 0
    5ee6:	80 81       	ld	r24, Z
    5ee8:	8b 7f       	andi	r24, 0xFB	; 251
    5eea:	80 83       	st	Z, r24
    5eec:	a8 ec       	ldi	r26, 0xC8	; 200
    5eee:	b0 e0       	ldi	r27, 0x00	; 0
    5ef0:	8c 91       	ld	r24, X
    5ef2:	82 60       	ori	r24, 0x02	; 2
    5ef4:	8c 93       	st	X, r24
ENABLE_UART1();
    5ef6:	80 81       	ld	r24, Z
    5ef8:	88 61       	ori	r24, 0x18	; 24
    5efa:	80 83       	st	Z, r24
}
    5efc:	08 95       	ret

00005efe <getc0>:


/* get one char from uart */
char getc0(void){
	unsigned char tmp;
	UART0_WAIT_AND_RECEIVE(tmp);
    5efe:	80 91 c0 00 	lds	r24, 0x00C0
    5f02:	87 ff       	sbrs	r24, 7
    5f04:	fc cf       	rjmp	.-8      	; 0x5efe <getc0>
    5f06:	80 91 c0 00 	lds	r24, 0x00C0
    5f0a:	8f 77       	andi	r24, 0x7F	; 127
    5f0c:	80 93 c0 00 	sts	0x00C0, r24
    5f10:	80 91 c6 00 	lds	r24, 0x00C6
	return tmp;
}
    5f14:	08 95       	ret

00005f16 <nrk_setup_uart>:
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{

  setup_uart1(baudrate);
    5f16:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <setup_uart1>
  //setup_uart0(baudrate);

  stdout = fdevopen( (void *)putc1, (void *)getc1);
    5f1a:	8e e4       	ldi	r24, 0x4E	; 78
    5f1c:	9f e2       	ldi	r25, 0x2F	; 47
    5f1e:	69 e6       	ldi	r22, 0x69	; 105
    5f20:	7b e2       	ldi	r23, 0x2B	; 43
    5f22:	0e 94 7b 47 	call	0x8ef6	; 0x8ef6 <fdevopen>
    5f26:	90 93 49 20 	sts	0x2049, r25
    5f2a:	80 93 48 20 	sts	0x2048, r24
  stdin = fdevopen( (void *)putc1, (void *)getc1);
    5f2e:	8e e4       	ldi	r24, 0x4E	; 78
    5f30:	9f e2       	ldi	r25, 0x2F	; 47
    5f32:	69 e6       	ldi	r22, 0x69	; 105
    5f34:	7b e2       	ldi	r23, 0x2B	; 43
    5f36:	0e 94 7b 47 	call	0x8ef6	; 0x8ef6 <fdevopen>
    5f3a:	90 93 47 20 	sts	0x2047, r25
    5f3e:	80 93 46 20 	sts	0x2046, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    5f42:	0e 94 6a 34 	call	0x68d4	; 0x68d4 <nrk_signal_create>
    5f46:	80 93 4c 1f 	sts	0x1F4C, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    5f4a:	8f 3f       	cpi	r24, 0xFF	; 255
    5f4c:	19 f4       	brne	.+6      	; 0x5f54 <nrk_setup_uart+0x3e>
    5f4e:	8e e0       	ldi	r24, 0x0E	; 14
    5f50:	0e 94 3d 33 	call	0x667a	; 0x667a <nrk_error_add>
   uart_rx_buf_start=0;
    5f54:	10 92 4d 1f 	sts	0x1F4D, r1
   uart_rx_buf_end=0;
    5f58:	10 92 cb 1e 	sts	0x1ECB, r1
   ENABLE_UART1_RX_INT();
    5f5c:	80 91 c9 00 	lds	r24, 0x00C9
    5f60:	80 68       	ori	r24, 0x80	; 128
    5f62:	80 93 c9 00 	sts	0x00C9, r24
#endif

}
    5f66:	08 95       	ret

00005f68 <nrk_uart_rx_signal_get>:
return 0;
}

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    5f68:	80 91 4c 1f 	lds	r24, 0x1F4C
    5f6c:	8f 3f       	cpi	r24, 0xFF	; 255
    5f6e:	19 f4       	brne	.+6      	; 0x5f76 <nrk_uart_rx_signal_get+0xe>
    5f70:	8e e0       	ldi	r24, 0x0E	; 14
    5f72:	0e 94 3d 33 	call	0x667a	; 0x667a <nrk_error_add>
   return uart_rx_signal;
}
    5f76:	80 91 4c 1f 	lds	r24, 0x1F4C
    5f7a:	08 95       	ret

00005f7c <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    5f7c:	cf 93       	push	r28
    5f7e:	df 93       	push	r29
    5f80:	ec 01       	movw	r28, r24
 char c;
   while((c=pgm_read_byte(addr++)))
    5f82:	07 c0       	rjmp	.+14     	; 0x5f92 <nrk_kprintf+0x16>
        putchar(c);
    5f84:	60 91 48 20 	lds	r22, 0x2048
    5f88:	70 91 49 20 	lds	r23, 0x2049
    5f8c:	90 e0       	ldi	r25, 0x00	; 0
    5f8e:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
    5f92:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
    5f94:	21 96       	adiw	r28, 0x01	; 1
    5f96:	84 91       	lpm	r24, Z
    5f98:	88 23       	and	r24, r24
    5f9a:	a1 f7       	brne	.-24     	; 0x5f84 <nrk_kprintf+0x8>
        putchar(c);
}
    5f9c:	df 91       	pop	r29
    5f9e:	cf 91       	pop	r28
    5fa0:	08 95       	ret

00005fa2 <__vector_36>:
uint8_t uart_rx_buf_start,uart_rx_buf_end;
char uart_rx_buf[MAX_RX_UART_BUF];
nrk_sig_t uart_rx_signal;

SIGNAL(USART1_RX_vect)
{
    5fa2:	1f 92       	push	r1
    5fa4:	0f 92       	push	r0
    5fa6:	0f b6       	in	r0, 0x3f	; 63
    5fa8:	0f 92       	push	r0
    5faa:	0b b6       	in	r0, 0x3b	; 59
    5fac:	0f 92       	push	r0
    5fae:	11 24       	eor	r1, r1
    5fb0:	2f 93       	push	r18
    5fb2:	3f 93       	push	r19
    5fb4:	4f 93       	push	r20
    5fb6:	5f 93       	push	r21
    5fb8:	6f 93       	push	r22
    5fba:	7f 93       	push	r23
    5fbc:	8f 93       	push	r24
    5fbe:	9f 93       	push	r25
    5fc0:	af 93       	push	r26
    5fc2:	bf 93       	push	r27
    5fc4:	ef 93       	push	r30
    5fc6:	ff 93       	push	r31
char c;
uint8_t sig;
//cli();
DISABLE_UART1_RX_INT();
    5fc8:	80 91 c9 00 	lds	r24, 0x00C9
    5fcc:	8f 77       	andi	r24, 0x7F	; 127
    5fce:	80 93 c9 00 	sts	0x00C9, r24
   UART1_WAIT_AND_RECEIVE(c);
    5fd2:	80 91 c8 00 	lds	r24, 0x00C8
    5fd6:	87 ff       	sbrs	r24, 7
    5fd8:	fc cf       	rjmp	.-8      	; 0x5fd2 <__vector_36+0x30>
    5fda:	80 91 c8 00 	lds	r24, 0x00C8
    5fde:	8f 77       	andi	r24, 0x7F	; 127
    5fe0:	80 93 c8 00 	sts	0x00C8, r24
    5fe4:	90 91 ce 00 	lds	r25, 0x00CE
   uart_rx_buf[uart_rx_buf_end]=c;
    5fe8:	80 91 cb 1e 	lds	r24, 0x1ECB
    5fec:	e8 2f       	mov	r30, r24
    5fee:	f0 e0       	ldi	r31, 0x00	; 0
    5ff0:	e4 53       	subi	r30, 0x34	; 52
    5ff2:	f1 4e       	sbci	r31, 0xE1	; 225
    5ff4:	90 83       	st	Z, r25
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    5ff6:	8f 5f       	subi	r24, 0xFF	; 255
    5ff8:	80 93 cb 1e 	sts	0x1ECB, r24
   if(uart_rx_buf_end==MAX_RX_UART_BUF) uart_rx_buf_end=0;
    5ffc:	80 38       	cpi	r24, 0x80	; 128
    5ffe:	11 f4       	brne	.+4      	; 0x6004 <__vector_36+0x62>
    6000:	10 92 cb 1e 	sts	0x1ECB, r1
   nrk_event_signal(uart_rx_signal);
    6004:	80 91 4c 1f 	lds	r24, 0x1F4C
    6008:	0e 94 14 36 	call	0x6c28	; 0x6c28 <nrk_event_signal>
CLEAR_UART1_RX_INT();
    600c:	80 91 c8 00 	lds	r24, 0x00C8
    6010:	8f 77       	andi	r24, 0x7F	; 127
    6012:	80 93 c8 00 	sts	0x00C8, r24
ENABLE_UART1_RX_INT();
    6016:	80 91 c9 00 	lds	r24, 0x00C9
    601a:	80 68       	ori	r24, 0x80	; 128
    601c:	80 93 c9 00 	sts	0x00C9, r24
//sei();
}
    6020:	ff 91       	pop	r31
    6022:	ef 91       	pop	r30
    6024:	bf 91       	pop	r27
    6026:	af 91       	pop	r26
    6028:	9f 91       	pop	r25
    602a:	8f 91       	pop	r24
    602c:	7f 91       	pop	r23
    602e:	6f 91       	pop	r22
    6030:	5f 91       	pop	r21
    6032:	4f 91       	pop	r20
    6034:	3f 91       	pop	r19
    6036:	2f 91       	pop	r18
    6038:	0f 90       	pop	r0
    603a:	0b be       	out	0x3b, r0	; 59
    603c:	0f 90       	pop	r0
    603e:	0f be       	out	0x3f, r0	; 63
    6040:	0f 90       	pop	r0
    6042:	1f 90       	pop	r1
    6044:	18 95       	reti

00006046 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    604e:	01 97       	sbiw	r24, 0x01	; 1
    6050:	d1 f7       	brne	.-12     	; 0x6046 <halWait>

} // halWait
    6052:	08 95       	ret

00006054 <write_eeprom_current_image_checksum>:
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
  return NRK_OK;
}

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    6054:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    6056:	87 e0       	ldi	r24, 0x07	; 7
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	60 81       	ld	r22, Z
    605c:	0e 94 1e 49 	call	0x923c	; 0x923c <__eewr_byte_m1281>
  return NRK_OK;
}
    6060:	81 e0       	ldi	r24, 0x01	; 1
    6062:	08 95       	ret

00006064 <write_eeprom_aes_key>:
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    6064:	0f 93       	push	r16
    6066:	1f 93       	push	r17
    6068:	cf 93       	push	r28
    606a:	df 93       	push	r29
    606c:	08 2f       	mov	r16, r24
    606e:	19 2f       	mov	r17, r25
    6070:	c8 e0       	ldi	r28, 0x08	; 8
    6072:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    6074:	ce 01       	movw	r24, r28
    6076:	f8 01       	movw	r30, r16
    6078:	61 91       	ld	r22, Z+
    607a:	8f 01       	movw	r16, r30
    607c:	0e 94 1e 49 	call	0x923c	; 0x923c <__eewr_byte_m1281>
    6080:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    6082:	c8 31       	cpi	r28, 0x18	; 24
    6084:	d1 05       	cpc	r29, r1
    6086:	b1 f7       	brne	.-20     	; 0x6074 <write_eeprom_aes_key+0x10>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    6088:	81 e0       	ldi	r24, 0x01	; 1
    608a:	df 91       	pop	r29
    608c:	cf 91       	pop	r28
    608e:	1f 91       	pop	r17
    6090:	0f 91       	pop	r16
    6092:	08 95       	ret

00006094 <write_eeprom_load_img_pages>:
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
return NRK_OK;
}

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
    6094:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    6096:	86 e0       	ldi	r24, 0x06	; 6
    6098:	90 e0       	ldi	r25, 0x00	; 0
    609a:	60 81       	ld	r22, Z
    609c:	0e 94 1e 49 	call	0x923c	; 0x923c <__eewr_byte_m1281>
  return NRK_OK;
}
    60a0:	81 e0       	ldi	r24, 0x01	; 1
    60a2:	08 95       	ret

000060a4 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    60a4:	0e 94 1e 49 	call	0x923c	; 0x923c <__eewr_byte_m1281>
}
    60a8:	08 95       	ret

000060aa <read_eeprom_current_image_checksum>:
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    60aa:	cf 93       	push	r28
    60ac:	df 93       	push	r29
    60ae:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    60b0:	87 e0       	ldi	r24, 0x07	; 7
    60b2:	90 e0       	ldi	r25, 0x00	; 0
    60b4:	0e 94 16 49 	call	0x922c	; 0x922c <__eerd_byte_m1281>
    60b8:	88 83       	st	Y, r24
  return NRK_OK;
}
    60ba:	81 e0       	ldi	r24, 0x01	; 1
    60bc:	df 91       	pop	r29
    60be:	cf 91       	pop	r28
    60c0:	08 95       	ret

000060c2 <read_eeprom_aes_key>:
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
  return NRK_OK;
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    60c2:	0f 93       	push	r16
    60c4:	1f 93       	push	r17
    60c6:	cf 93       	push	r28
    60c8:	df 93       	push	r29
    60ca:	08 2f       	mov	r16, r24
    60cc:	19 2f       	mov	r17, r25
    60ce:	c8 e0       	ldi	r28, 0x08	; 8
    60d0:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    60d2:	ce 01       	movw	r24, r28
    60d4:	0e 94 16 49 	call	0x922c	; 0x922c <__eerd_byte_m1281>
    60d8:	f8 01       	movw	r30, r16
    60da:	81 93       	st	Z+, r24
    60dc:	8f 01       	movw	r16, r30
    60de:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    60e0:	c8 31       	cpi	r28, 0x18	; 24
    60e2:	d1 05       	cpc	r29, r1
    60e4:	b1 f7       	brne	.-20     	; 0x60d2 <read_eeprom_aes_key+0x10>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    60e6:	81 e0       	ldi	r24, 0x01	; 1
    60e8:	df 91       	pop	r29
    60ea:	cf 91       	pop	r28
    60ec:	1f 91       	pop	r17
    60ee:	0f 91       	pop	r16
    60f0:	08 95       	ret

000060f2 <read_eeprom_load_img_pages>:
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
  return NRK_OK;
}

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    60f2:	cf 93       	push	r28
    60f4:	df 93       	push	r29
    60f6:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    60f8:	86 e0       	ldi	r24, 0x06	; 6
    60fa:	90 e0       	ldi	r25, 0x00	; 0
    60fc:	0e 94 16 49 	call	0x922c	; 0x922c <__eerd_byte_m1281>
    6100:	88 83       	st	Y, r24
  return NRK_OK;
}
    6102:	81 e0       	ldi	r24, 0x01	; 1
    6104:	df 91       	pop	r29
    6106:	cf 91       	pop	r28
    6108:	08 95       	ret

0000610a <read_eeprom_channel>:

return NRK_ERROR;
}

int8_t read_eeprom_channel(uint8_t *channel)
{
    610a:	cf 93       	push	r28
    610c:	df 93       	push	r29
    610e:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    6110:	85 e0       	ldi	r24, 0x05	; 5
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	0e 94 16 49 	call	0x922c	; 0x922c <__eerd_byte_m1281>
    6118:	88 83       	st	Y, r24
return NRK_OK;
}
    611a:	81 e0       	ldi	r24, 0x01	; 1
    611c:	df 91       	pop	r29
    611e:	cf 91       	pop	r28
    6120:	08 95       	ret

00006122 <read_eeprom_mac_address>:
{
eeprom_write_byte( (uint8_t*)addr, value );
}

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    6122:	ef 92       	push	r14
    6124:	ff 92       	push	r15
    6126:	0f 93       	push	r16
    6128:	1f 93       	push	r17
    612a:	cf 93       	push	r28
    612c:	df 93       	push	r29
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
    612e:	e8 2e       	mov	r14, r24
    6130:	e7 01       	movw	r28, r14
    6132:	7e 01       	movw	r14, r28
    6134:	f9 2e       	mov	r15, r25
    6136:	e7 01       	movw	r28, r14
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    6138:	80 e0       	ldi	r24, 0x00	; 0
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	0e 94 16 49 	call	0x922c	; 0x922c <__eerd_byte_m1281>
    6140:	08 2f       	mov	r16, r24
    6142:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    6144:	81 e0       	ldi	r24, 0x01	; 1
    6146:	90 e0       	ldi	r25, 0x00	; 0
    6148:	0e 94 16 49 	call	0x922c	; 0x922c <__eerd_byte_m1281>
    614c:	e8 2e       	mov	r14, r24
    614e:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    6150:	82 e0       	ldi	r24, 0x02	; 2
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	0e 94 16 49 	call	0x922c	; 0x922c <__eerd_byte_m1281>
    6158:	f8 2e       	mov	r15, r24
    615a:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    615c:	83 e0       	ldi	r24, 0x03	; 3
    615e:	90 e0       	ldi	r25, 0x00	; 0
    6160:	0e 94 16 49 	call	0x922c	; 0x922c <__eerd_byte_m1281>
    6164:	18 2f       	mov	r17, r24
    6166:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    6168:	84 e0       	ldi	r24, 0x04	; 4
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	0e 94 16 49 	call	0x922c	; 0x922c <__eerd_byte_m1281>
ct=buf[0];
ct+=buf[1];
    6170:	fe 0c       	add	r15, r14
ct+=buf[2];
    6172:	f0 0e       	add	r15, r16
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    6174:	f1 0e       	add	r15, r17
    6176:	8f 15       	cp	r24, r15
    6178:	11 f0       	breq	.+4      	; 0x617e <read_eeprom_mac_address+0x5c>
    617a:	8f ef       	ldi	r24, 0xFF	; 255
    617c:	01 c0       	rjmp	.+2      	; 0x6180 <read_eeprom_mac_address+0x5e>
    617e:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    6180:	df 91       	pop	r29
    6182:	cf 91       	pop	r28
    6184:	1f 91       	pop	r17
    6186:	0f 91       	pop	r16
    6188:	ff 90       	pop	r15
    618a:	ef 90       	pop	r14
    618c:	08 95       	ret

0000618e <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    618e:	0e 94 16 49 	call	0x922c	; 0x922c <__eerd_byte_m1281>
return v;
}
    6192:	08 95       	ret

00006194 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    6194:	f8 94       	cli
};
    6196:	08 95       	ret

00006198 <nrk_int_enable>:

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    6198:	78 94       	sei
};
    619a:	08 95       	ret

0000619c <nrk_halt>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    619c:	f8 94       	cli
    619e:	ff cf       	rjmp	.-2      	; 0x619e <nrk_halt+0x2>

000061a0 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    61a0:	85 e6       	ldi	r24, 0x65	; 101
    61a2:	90 e0       	ldi	r25, 0x00	; 0
    61a4:	08 95       	ret

000061a6 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    61a6:	0e 94 fa 3d 	call	0x7bf4	; 0x7bf4 <_nrk_scheduler>

  	return;
}
    61aa:	08 95       	ret

000061ac <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    61ac:	cf 92       	push	r12
    61ae:	df 92       	push	r13
    61b0:	ef 92       	push	r14
    61b2:	ff 92       	push	r15
    61b4:	0f 93       	push	r16
    61b6:	1f 93       	push	r17
    61b8:	cf 93       	push	r28
    61ba:	df 93       	push	r29
    61bc:	ec 01       	movw	r28, r24
    61be:	6b 01       	movw	r12, r22
    61c0:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    61c2:	89 85       	ldd	r24, Y+9	; 0x09
    61c4:	82 30       	cpi	r24, 0x02	; 2
    61c6:	21 f0       	breq	.+8      	; 0x61d0 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    61c8:	80 91 06 20 	lds	r24, 0x2006
    61cc:	88 83       	st	Y, r24
    61ce:	01 c0       	rjmp	.+2      	; 0x61d2 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    61d0:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    61d2:	80 91 06 20 	lds	r24, 0x2006
    61d6:	85 30       	cpi	r24, 0x05	; 5
    61d8:	20 f0       	brcs	.+8      	; 0x61e2 <nrk_TCB_init+0x36>
    61da:	87 e0       	ldi	r24, 0x07	; 7
    61dc:	60 e0       	ldi	r22, 0x00	; 0
    61de:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    61e2:	89 85       	ldd	r24, Y+9	; 0x09
    61e4:	82 30       	cpi	r24, 0x02	; 2
    61e6:	29 f0       	breq	.+10     	; 0x61f2 <nrk_TCB_init+0x46>
    61e8:	80 91 06 20 	lds	r24, 0x2006
    61ec:	8f 5f       	subi	r24, 0xFF	; 255
    61ee:	80 93 06 20 	sts	0x2006, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    61f2:	80 91 06 20 	lds	r24, 0x2006
    61f6:	88 23       	and	r24, r24
    61f8:	19 f4       	brne	.+6      	; 0x6200 <nrk_TCB_init+0x54>
    61fa:	81 e0       	ldi	r24, 0x01	; 1
    61fc:	80 93 06 20 	sts	0x2006, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    6200:	88 81       	ld	r24, Y
    6202:	28 2f       	mov	r18, r24
    6204:	33 27       	eor	r19, r19
    6206:	27 fd       	sbrc	r18, 7
    6208:	30 95       	com	r19
    620a:	89 01       	movw	r16, r18
    620c:	55 e0       	ldi	r21, 0x05	; 5
    620e:	00 0f       	add	r16, r16
    6210:	11 1f       	adc	r17, r17
    6212:	5a 95       	dec	r21
    6214:	e1 f7       	brne	.-8      	; 0x620e <nrk_TCB_init+0x62>
    6216:	02 0f       	add	r16, r18
    6218:	13 1f       	adc	r17, r19
    621a:	00 5b       	subi	r16, 0xB0	; 176
    621c:	10 4e       	sbci	r17, 0xE0	; 224
    621e:	f8 01       	movw	r30, r16
    6220:	d1 82       	std	Z+1, r13	; 0x01
    6222:	c0 82       	st	Z, r12
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    6224:	98 85       	ldd	r25, Y+8	; 0x08
    6226:	92 87       	std	Z+10, r25	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    6228:	93 e0       	ldi	r25, 0x03	; 3
    622a:	91 87       	std	Z+9, r25	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    622c:	80 87       	std	Z+8, r24	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    622e:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( Task->period );
    6230:	2b 85       	ldd	r18, Y+11	; 0x0b
    6232:	3c 85       	ldd	r19, Y+12	; 0x0c
    6234:	4d 85       	ldd	r20, Y+13	; 0x0d
    6236:	5e 85       	ldd	r21, Y+14	; 0x0e
    6238:	6f 85       	ldd	r22, Y+15	; 0x0f
    623a:	78 89       	ldd	r23, Y+16	; 0x10
    623c:	89 89       	ldd	r24, Y+17	; 0x11
    623e:	9a 89       	ldd	r25, Y+18	; 0x12
    6240:	0e 94 44 3c 	call	0x7888	; 0x7888 <_nrk_time_to_ticks>
    6244:	f8 01       	movw	r30, r16
    6246:	94 8f       	std	Z+28, r25	; 0x1c
    6248:	83 8f       	std	Z+27, r24	; 0x1b
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( Task->offset);
    624a:	08 81       	ld	r16, Y
    624c:	11 27       	eor	r17, r17
    624e:	07 fd       	sbrc	r16, 7
    6250:	10 95       	com	r17
    6252:	2b 8d       	ldd	r18, Y+27	; 0x1b
    6254:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6256:	4d 8d       	ldd	r20, Y+29	; 0x1d
    6258:	5e 8d       	ldd	r21, Y+30	; 0x1e
    625a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    625c:	78 a1       	ldd	r23, Y+32	; 0x20
    625e:	89 a1       	ldd	r24, Y+33	; 0x21
    6260:	9a a1       	ldd	r25, Y+34	; 0x22
    6262:	0e 94 44 3c 	call	0x7888	; 0x7888 <_nrk_time_to_ticks>
    6266:	f8 01       	movw	r30, r16
    6268:	45 e0       	ldi	r20, 0x05	; 5
    626a:	ee 0f       	add	r30, r30
    626c:	ff 1f       	adc	r31, r31
    626e:	4a 95       	dec	r20
    6270:	e1 f7       	brne	.-8      	; 0x626a <nrk_TCB_init+0xbe>
    6272:	e0 0f       	add	r30, r16
    6274:	f1 1f       	adc	r31, r17
    6276:	e0 5b       	subi	r30, 0xB0	; 176
    6278:	f0 4e       	sbci	r31, 0xE0	; 224
    627a:	96 8b       	std	Z+22, r25	; 0x16
    627c:	85 8b       	std	Z+21, r24	; 0x15
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    627e:	88 81       	ld	r24, Y
    6280:	99 27       	eor	r25, r25
    6282:	87 fd       	sbrc	r24, 7
    6284:	90 95       	com	r25
    6286:	8c 01       	movw	r16, r24
    6288:	35 e0       	ldi	r19, 0x05	; 5
    628a:	00 0f       	add	r16, r16
    628c:	11 1f       	adc	r17, r17
    628e:	3a 95       	dec	r19
    6290:	e1 f7       	brne	.-8      	; 0x628a <nrk_TCB_init+0xde>
    6292:	08 0f       	add	r16, r24
    6294:	19 1f       	adc	r17, r25
    6296:	00 5b       	subi	r16, 0xB0	; 176
    6298:	10 4e       	sbci	r17, 0xE0	; 224
    629a:	f8 01       	movw	r30, r16
    629c:	85 89       	ldd	r24, Z+21	; 0x15
    629e:	96 89       	ldd	r25, Z+22	; 0x16
    62a0:	23 8d       	ldd	r18, Z+27	; 0x1b
    62a2:	34 8d       	ldd	r19, Z+28	; 0x1c
    62a4:	82 0f       	add	r24, r18
    62a6:	93 1f       	adc	r25, r19
    62a8:	90 8f       	std	Z+24, r25	; 0x18
    62aa:	87 8b       	std	Z+23, r24	; 0x17
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(Task->cpu_reserve);
    62ac:	2b 89       	ldd	r18, Y+19	; 0x13
    62ae:	3c 89       	ldd	r19, Y+20	; 0x14
    62b0:	4d 89       	ldd	r20, Y+21	; 0x15
    62b2:	5e 89       	ldd	r21, Y+22	; 0x16
    62b4:	6f 89       	ldd	r22, Y+23	; 0x17
    62b6:	78 8d       	ldd	r23, Y+24	; 0x18
    62b8:	89 8d       	ldd	r24, Y+25	; 0x19
    62ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    62bc:	0e 94 44 3c 	call	0x7888	; 0x7888 <_nrk_time_to_ticks>
    62c0:	f8 01       	movw	r30, r16
    62c2:	96 8f       	std	Z+30, r25	; 0x1e
    62c4:	85 8f       	std	Z+29, r24	; 0x1d
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    62c6:	88 81       	ld	r24, Y
    62c8:	99 27       	eor	r25, r25
    62ca:	87 fd       	sbrc	r24, 7
    62cc:	90 95       	com	r25
    62ce:	fc 01       	movw	r30, r24
    62d0:	25 e0       	ldi	r18, 0x05	; 5
    62d2:	ee 0f       	add	r30, r30
    62d4:	ff 1f       	adc	r31, r31
    62d6:	2a 95       	dec	r18
    62d8:	e1 f7       	brne	.-8      	; 0x62d2 <nrk_TCB_init+0x126>
    62da:	e8 0f       	add	r30, r24
    62dc:	f9 1f       	adc	r31, r25
    62de:	e0 5b       	subi	r30, 0xB0	; 176
    62e0:	f0 4e       	sbci	r31, 0xE0	; 224
    62e2:	85 8d       	ldd	r24, Z+29	; 0x1d
    62e4:	96 8d       	ldd	r25, Z+30	; 0x1e
    62e6:	92 8f       	std	Z+26, r25	; 0x1a
    62e8:	81 8f       	std	Z+25, r24	; 0x19
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    62ea:	81 e0       	ldi	r24, 0x01	; 1
    62ec:	90 e0       	ldi	r25, 0x00	; 0
    62ee:	90 a3       	std	Z+32, r25	; 0x20
    62f0:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    62f2:	f3 82       	std	Z+3, r15	; 0x03
    62f4:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    62f6:	81 e0       	ldi	r24, 0x01	; 1
    62f8:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    62fa:	df 91       	pop	r29
    62fc:	cf 91       	pop	r28
    62fe:	1f 91       	pop	r17
    6300:	0f 91       	pop	r16
    6302:	ff 90       	pop	r15
    6304:	ef 90       	pop	r14
    6306:	df 90       	pop	r13
    6308:	cf 90       	pop	r12
    630a:	08 95       	ret

0000630c <nrk_start>:




void nrk_start (void)
{
    630c:	df 92       	push	r13
    630e:	ef 92       	push	r14
    6310:	ff 92       	push	r15
    6312:	0f 93       	push	r16
    6314:	1f 93       	push	r17
    6316:	cf 93       	push	r28
    6318:	df 93       	push	r29
    631a:	c8 e5       	ldi	r28, 0x58	; 88
    631c:	df e1       	ldi	r29, 0x1F	; 31
    631e:	10 e0       	ldi	r17, 0x00	; 0
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    6320:	d8 80       	ld	r13, Y
	// only check activated tasks
	if(task_ID!=-1)
    6322:	8f ef       	ldi	r24, 0xFF	; 255
    6324:	d8 16       	cp	r13, r24
    6326:	b1 f0       	breq	.+44     	; 0x6354 <nrk_start+0x48>
    6328:	78 e5       	ldi	r23, 0x58	; 88
    632a:	e7 2e       	mov	r14, r23
    632c:	7f e1       	ldi	r23, 0x1F	; 31
    632e:	f7 2e       	mov	r15, r23
    6330:	00 e0       	ldi	r16, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    6332:	10 17       	cp	r17, r16
    6334:	41 f0       	breq	.+16     	; 0x6346 <nrk_start+0x3a>
    6336:	f7 01       	movw	r30, r14
    6338:	80 81       	ld	r24, Z
    633a:	d8 16       	cp	r13, r24
    633c:	21 f4       	brne	.+8      	; 0x6346 <nrk_start+0x3a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    633e:	85 e0       	ldi	r24, 0x05	; 5
    6340:	6d 2d       	mov	r22, r13
    6342:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    6346:	0f 5f       	subi	r16, 0xFF	; 255
    6348:	81 e2       	ldi	r24, 0x21	; 33
    634a:	90 e0       	ldi	r25, 0x00	; 0
    634c:	e8 0e       	add	r14, r24
    634e:	f9 1e       	adc	r15, r25
    6350:	05 30       	cpi	r16, 0x05	; 5
    6352:	79 f7       	brne	.-34     	; 0x6332 <nrk_start+0x26>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    6354:	1f 5f       	subi	r17, 0xFF	; 255
    6356:	a1 96       	adiw	r28, 0x21	; 33
    6358:	15 30       	cpi	r17, 0x05	; 5
    635a:	11 f7       	brne	.-60     	; 0x6320 <nrk_start+0x14>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    635c:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    6360:	28 2f       	mov	r18, r24
    6362:	33 27       	eor	r19, r19
    6364:	27 fd       	sbrc	r18, 7
    6366:	30 95       	com	r19
    6368:	f9 01       	movw	r30, r18
    636a:	65 e0       	ldi	r22, 0x05	; 5
    636c:	ee 0f       	add	r30, r30
    636e:	ff 1f       	adc	r31, r31
    6370:	6a 95       	dec	r22
    6372:	e1 f7       	brne	.-8      	; 0x636c <nrk_start+0x60>
    6374:	e2 0f       	add	r30, r18
    6376:	f3 1f       	adc	r31, r19
    6378:	e0 5b       	subi	r30, 0xB0	; 176
    637a:	f0 4e       	sbci	r31, 0xE0	; 224
    637c:	22 85       	ldd	r18, Z+10	; 0x0a
    637e:	20 93 19 20 	sts	0x2019, r18
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    6382:	91 e2       	ldi	r25, 0x21	; 33
    6384:	89 02       	muls	r24, r25
    6386:	c0 01       	movw	r24, r0
    6388:	11 24       	eor	r1, r1
    638a:	80 5b       	subi	r24, 0xB0	; 176
    638c:	90 4e       	sbci	r25, 0xE0	; 224
    638e:	90 93 18 20 	sts	0x2018, r25
    6392:	80 93 17 20 	sts	0x2017, r24
    6396:	90 93 09 20 	sts	0x2009, r25
    639a:	80 93 08 20 	sts	0x2008, r24
    nrk_cur_task_prio = nrk_high_ready_prio;
    639e:	20 93 0a 20 	sts	0x200A, r18
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    63a2:	0e 94 b3 44 	call	0x8966	; 0x8966 <nrk_target_start>
    nrk_stack_pointer_init(); 
    63a6:	0e 94 9d 44 	call	0x893a	; 0x893a <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    63aa:	0e 94 d7 44 	call	0x89ae	; 0x89ae <nrk_start_high_ready_task>
    63ae:	ff cf       	rjmp	.-2      	; 0x63ae <nrk_start+0xa2>

000063b0 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    63b0:	0f 93       	push	r16
    63b2:	1f 93       	push	r17
    63b4:	df 93       	push	r29
    63b6:	cf 93       	push	r28
    63b8:	cd b7       	in	r28, 0x3d	; 61
    63ba:	de b7       	in	r29, 0x3e	; 62
    63bc:	a3 97       	sbiw	r28, 0x23	; 35
    63be:	0f b6       	in	r0, 0x3f	; 63
    63c0:	f8 94       	cli
    63c2:	de bf       	out	0x3e, r29	; 62
    63c4:	0f be       	out	0x3f, r0	; 63
    63c6:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    63c8:	0e 94 6a 34 	call	0x68d4	; 0x68d4 <nrk_signal_create>
    63cc:	80 93 07 20 	sts	0x2007, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    63d0:	8f 3f       	cpi	r24, 0xFF	; 255
    63d2:	21 f4       	brne	.+8      	; 0x63dc <nrk_init+0x2c>
    63d4:	8e e0       	ldi	r24, 0x0E	; 14
    63d6:	60 e0       	ldi	r22, 0x00	; 0
    63d8:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>
	
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
   if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
    63dc:	0e 94 26 44 	call	0x884c	; 0x884c <_nrk_startup_ok>
    63e0:	88 23       	and	r24, r24
    63e2:	21 f4       	brne	.+8      	; 0x63ec <nrk_init+0x3c>
    63e4:	86 e0       	ldi	r24, 0x06	; 6
    63e6:	60 e0       	ldi	r22, 0x00	; 0
    63e8:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    63ec:	10 92 0a 20 	sts	0x200A, r1
    nrk_cur_task_TCB = NULL;
    63f0:	10 92 18 20 	sts	0x2018, r1
    63f4:	10 92 17 20 	sts	0x2017, r1
    
    nrk_high_ready_TCB = NULL;
    63f8:	10 92 09 20 	sts	0x2009, r1
    63fc:	10 92 08 20 	sts	0x2008, r1
    nrk_high_ready_prio = 0; 
    6400:	10 92 19 20 	sts	0x2019, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    6404:	10 92 16 20 	sts	0x2016, r1
    6408:	e7 ef       	ldi	r30, 0xF7	; 247
    640a:	ff e1       	ldi	r31, 0x1F	; 31

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    640c:	8f ef       	ldi	r24, 0xFF	; 255
    640e:	80 83       	st	Z, r24
    nrk_sem_list[i].value=-1;
    6410:	82 83       	std	Z+2, r24	; 0x02
    nrk_sem_list[i].resource_ceiling=-1;
    6412:	81 83       	std	Z+1, r24	; 0x01
    6414:	33 96       	adiw	r30, 0x03	; 3
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    6416:	90 e2       	ldi	r25, 0x20	; 32
    6418:	e6 30       	cpi	r30, 0x06	; 6
    641a:	f9 07       	cpc	r31, r25
    641c:	c1 f7       	brne	.-16     	; 0x640e <nrk_init+0x5e>
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    641e:	93 e6       	ldi	r25, 0x63	; 99
    6420:	90 93 5a 1f 	sts	0x1F5A, r25
        nrk_task_TCB[i].task_ID = -1; 
    6424:	80 93 58 1f 	sts	0x1F58, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    6428:	90 93 7b 1f 	sts	0x1F7B, r25
        nrk_task_TCB[i].task_ID = -1; 
    642c:	80 93 79 1f 	sts	0x1F79, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    6430:	90 93 9c 1f 	sts	0x1F9C, r25
        nrk_task_TCB[i].task_ID = -1; 
    6434:	80 93 9a 1f 	sts	0x1F9A, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    6438:	90 93 bd 1f 	sts	0x1FBD, r25
        nrk_task_TCB[i].task_ID = -1; 
    643c:	80 93 bb 1f 	sts	0x1FBB, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    6440:	90 93 de 1f 	sts	0x1FDE, r25
        nrk_task_TCB[i].task_ID = -1; 
    6444:	80 93 dc 1f 	sts	0x1FDC, r24
    6448:	ea e1       	ldi	r30, 0x1A	; 26
    644a:	f0 e2       	ldi	r31, 0x20	; 32
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
    644c:	cf 01       	movw	r24, r30
    644e:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    6450:	94 83       	std	Z+4, r25	; 0x04
    6452:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    6454:	f7 83       	std	Z+7, r31	; 0x07
    6456:	e6 83       	std	Z+6, r30	; 0x06
    6458:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    645a:	80 e2       	ldi	r24, 0x20	; 32
    645c:	e3 33       	cpi	r30, 0x33	; 51
    645e:	f8 07       	cpc	r31, r24
    6460:	a9 f7       	brne	.-22     	; 0x644c <nrk_init+0x9c>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    6462:	10 92 1c 20 	sts	0x201C, r1
    6466:	10 92 1b 20 	sts	0x201B, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    646a:	10 92 37 20 	sts	0x2037, r1
    646e:	10 92 36 20 	sts	0x2036, r1
	_head_node = NULL;
    6472:	10 92 0d 20 	sts	0x200D, r1
    6476:	10 92 0c 20 	sts	0x200C, r1
	_free_node = &_nrk_readyQ[0];
    647a:	79 97       	sbiw	r30, 0x19	; 25
    647c:	f0 93 4f 1f 	sts	0x1F4F, r31
    6480:	e0 93 4e 1f 	sts	0x1F4E, r30
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    6484:	8e 01       	movw	r16, r28
    6486:	0f 5f       	subi	r16, 0xFF	; 255
    6488:	1f 4f       	sbci	r17, 0xFF	; 255
    648a:	c8 01       	movw	r24, r16
    648c:	6f ed       	ldi	r22, 0xDF	; 223
    648e:	7d e3       	ldi	r23, 0x3D	; 61
    6490:	0e 94 6e 44 	call	0x88dc	; 0x88dc <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    6494:	c8 01       	movw	r24, r16
    6496:	6a ed       	ldi	r22, 0xDA	; 218
    6498:	7e e0       	ldi	r23, 0x0E	; 14
    649a:	40 e8       	ldi	r20, 0x80	; 128
    649c:	50 e0       	ldi	r21, 0x00	; 0
    649e:	0e 94 b8 44 	call	0x8970	; 0x8970 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    64a2:	85 e5       	ldi	r24, 0x55	; 85
    64a4:	80 93 da 0e 	sts	0x0EDA, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    64a8:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.offset.secs = 0;
    64aa:	1c 8e       	std	Y+28, r1	; 0x1c
    64ac:	1d 8e       	std	Y+29, r1	; 0x1d
    64ae:	1e 8e       	std	Y+30, r1	; 0x1e
    64b0:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    64b2:	18 a2       	std	Y+32, r1	; 0x20
    64b4:	19 a2       	std	Y+33, r1	; 0x21
    64b6:	1a a2       	std	Y+34, r1	; 0x22
    64b8:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    64ba:	81 e0       	ldi	r24, 0x01	; 1
    64bc:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    64be:	92 e0       	ldi	r25, 0x02	; 2
    64c0:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    64c2:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    64c4:	c8 01       	movw	r24, r16
    64c6:	0e 94 b6 3a 	call	0x756c	; 0x756c <nrk_activate_task>
	
}
    64ca:	a3 96       	adiw	r28, 0x23	; 35
    64cc:	0f b6       	in	r0, 0x3f	; 63
    64ce:	f8 94       	cli
    64d0:	de bf       	out	0x3e, r29	; 62
    64d2:	0f be       	out	0x3f, r0	; 63
    64d4:	cd bf       	out	0x3d, r28	; 61
    64d6:	cf 91       	pop	r28
    64d8:	df 91       	pop	r29
    64da:	1f 91       	pop	r17
    64dc:	0f 91       	pop	r16
    64de:	08 95       	ret

000064e0 <_nrk_errno_set>:
#include <nrk_cfg.h>
#include <nrk_timer.h>

void _nrk_errno_set (NRK_ERRNO error_code) 
{
  nrk_cur_task_TCB->errno = error_code;
    64e0:	e0 91 17 20 	lds	r30, 0x2017
    64e4:	f0 91 18 20 	lds	r31, 0x2018
    64e8:	84 87       	std	Z+12, r24	; 0x0c
} 
    64ea:	08 95       	ret

000064ec <nrk_errno_get>:

uint8_t nrk_errno_get () 
{
    64ec:	e0 91 17 20 	lds	r30, 0x2017
    64f0:	f0 91 18 20 	lds	r31, 0x2018
  return nrk_cur_task_TCB->errno;
}
    64f4:	84 85       	ldd	r24, Z+12	; 0x0c
    64f6:	08 95       	ret

000064f8 <nrk_error_get>:
} 


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code) 
{
  if (error_num == 0)
    64f8:	20 91 d3 0e 	lds	r18, 0x0ED3
    64fc:	22 23       	and	r18, r18
    64fe:	11 f4       	brne	.+4      	; 0x6504 <nrk_error_get+0xc>
    6500:	80 e0       	ldi	r24, 0x00	; 0
    6502:	08 95       	ret
    return 0;
  *code = error_num;
    6504:	fb 01       	movw	r30, r22
    6506:	20 83       	st	Z, r18
  *task_id = error_task;
    6508:	20 91 21 0c 	lds	r18, 0x0C21
    650c:	fc 01       	movw	r30, r24
    650e:	20 83       	st	Z, r18
    6510:	81 e0       	ldi	r24, 0x01	; 1
  return 1;
}
    6512:	08 95       	ret

00006514 <nrk_error_print>:

int8_t nrk_error_print () 
{
    6514:	1f 93       	push	r17
  int8_t t;
  if (error_num == 0)
    6516:	80 91 d3 0e 	lds	r24, 0x0ED3
    651a:	88 23       	and	r24, r24
    651c:	11 f4       	brne	.+4      	; 0x6522 <nrk_error_print+0xe>
    }
  
#endif  /*  */
    error_num = 0;
  return t;
}
    651e:	1f 91       	pop	r17
    6520:	08 95       	ret
  int8_t t;
  if (error_num == 0)
    return 0;
 
   #ifdef NRK_HALT_ON_ERROR
     nrk_int_disable ();
    6522:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>
         nrk_watchdog_disable();
       #endif
   #endif 

   #ifndef NRK_REBOOT_ON_ERROR
      nrk_int_disable ();
    6526:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>
  while (1)
     {
    
#endif  
    
    nrk_kprintf (PSTR ("*NRK ERROR("));
    652a:	80 e6       	ldi	r24, 0x60	; 96
    652c:	94 e0       	ldi	r25, 0x04	; 4
    652e:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
    printf ("%d", error_task);
    6532:	00 d0       	rcall	.+0      	; 0x6534 <nrk_error_print+0x20>
    6534:	00 d0       	rcall	.+0      	; 0x6536 <nrk_error_print+0x22>
    6536:	ed b7       	in	r30, 0x3d	; 61
    6538:	fe b7       	in	r31, 0x3e	; 62
    653a:	31 96       	adiw	r30, 0x01	; 1
    653c:	80 e7       	ldi	r24, 0x70	; 112
    653e:	9b e0       	ldi	r25, 0x0B	; 11
    6540:	ad b7       	in	r26, 0x3d	; 61
    6542:	be b7       	in	r27, 0x3e	; 62
    6544:	12 96       	adiw	r26, 0x02	; 2
    6546:	9c 93       	st	X, r25
    6548:	8e 93       	st	-X, r24
    654a:	11 97       	sbiw	r26, 0x01	; 1
    654c:	80 91 21 0c 	lds	r24, 0x0C21
    6550:	82 83       	std	Z+2, r24	; 0x02
    6552:	13 82       	std	Z+3, r1	; 0x03
    6554:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    nrk_kprintf (PSTR ("): "));
    6558:	0f 90       	pop	r0
    655a:	0f 90       	pop	r0
    655c:	0f 90       	pop	r0
    655e:	0f 90       	pop	r0
    6560:	8c e5       	ldi	r24, 0x5C	; 92
    6562:	94 e0       	ldi	r25, 0x04	; 4
    6564:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
    if (error_num > NRK_NUM_ERRORS)
    6568:	80 91 d3 0e 	lds	r24, 0x0ED3
    656c:	84 31       	cpi	r24, 0x14	; 20
    656e:	10 f0       	brcs	.+4      	; 0x6574 <nrk_error_print+0x60>
      error_num = NRK_UNKOWN;
    6570:	10 92 d3 0e 	sts	0x0ED3, r1
    switch (error_num)
    6574:	e0 91 d3 0e 	lds	r30, 0x0ED3
    6578:	8e 2f       	mov	r24, r30
    657a:	90 e0       	ldi	r25, 0x00	; 0
    657c:	fc 01       	movw	r30, r24
    657e:	31 97       	sbiw	r30, 0x01	; 1
    6580:	e2 31       	cpi	r30, 0x12	; 18
    6582:	f1 05       	cpc	r31, r1
    6584:	f0 f5       	brcc	.+124    	; 0x6602 <nrk_error_print+0xee>
    6586:	ea 59       	subi	r30, 0x9A	; 154
    6588:	ff 4f       	sbci	r31, 0xFF	; 255
    658a:	ee 0f       	add	r30, r30
    658c:	ff 1f       	adc	r31, r31
    658e:	05 90       	lpm	r0, Z+
    6590:	f4 91       	lpm	r31, Z
    6592:	e0 2d       	mov	r30, r0
    6594:	09 94       	ijmp
       {
    case NRK_STACK_TOO_SMALL:
      nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    6596:	85 e3       	ldi	r24, 0x35	; 53
    6598:	94 e0       	ldi	r25, 0x04	; 4
    659a:	35 c0       	rjmp	.+106    	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_STACK_OVERFLOW:
      nrk_kprintf (PSTR ("Task Stack Overflow"));
    659c:	81 e2       	ldi	r24, 0x21	; 33
    659e:	94 e0       	ldi	r25, 0x04	; 4
    65a0:	32 c0       	rjmp	.+100    	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_INVALID_STACK_POINTER:
      nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    65a2:	8b e0       	ldi	r24, 0x0B	; 11
    65a4:	94 e0       	ldi	r25, 0x04	; 4
    65a6:	2f c0       	rjmp	.+94     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_RESERVE_ERROR:
      nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    65a8:	80 ef       	ldi	r24, 0xF0	; 240
    65aa:	93 e0       	ldi	r25, 0x03	; 3
    65ac:	2c c0       	rjmp	.+88     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_RESERVE_VIOLATED:
      nrk_kprintf (PSTR ("Task Reserve Violated"));
    65ae:	8a ed       	ldi	r24, 0xDA	; 218
    65b0:	93 e0       	ldi	r25, 0x03	; 3
    65b2:	29 c0       	rjmp	.+82     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_WAKEUP_MISSED:
      nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    65b4:	82 ec       	ldi	r24, 0xC2	; 194
    65b6:	93 e0       	ldi	r25, 0x03	; 3
    65b8:	26 c0       	rjmp	.+76     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_DUP_TASK_ID:
      nrk_kprintf (PSTR ("Duplicated Task ID"));
    65ba:	8f ea       	ldi	r24, 0xAF	; 175
    65bc:	93 e0       	ldi	r25, 0x03	; 3
    65be:	23 c0       	rjmp	.+70     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_BAD_STARTUP:
      nrk_kprintf (PSTR ("Unexpected Restart"));
    65c0:	8c e9       	ldi	r24, 0x9C	; 156
    65c2:	93 e0       	ldi	r25, 0x03	; 3
    65c4:	20 c0       	rjmp	.+64     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_STACK_SMASH:
      nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    65c6:	8e e7       	ldi	r24, 0x7E	; 126
    65c8:	93 e0       	ldi	r25, 0x03	; 3
    65ca:	1d c0       	rjmp	.+58     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_EXTRA_TASK:
      nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    65cc:	89 e5       	ldi	r24, 0x59	; 89
    65ce:	93 e0       	ldi	r25, 0x03	; 3
    65d0:	1a c0       	rjmp	.+52     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_LOW_VOLTAGE:
      nrk_kprintf (PSTR ("Low Voltage"));
    65d2:	8d e4       	ldi	r24, 0x4D	; 77
    65d4:	93 e0       	ldi	r25, 0x03	; 3
    65d6:	17 c0       	rjmp	.+46     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_SEG_FAULT:
      nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    65d8:	82 e3       	ldi	r24, 0x32	; 50
    65da:	93 e0       	ldi	r25, 0x03	; 3
    65dc:	14 c0       	rjmp	.+40     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_TIMER_OVERFLOW:
      nrk_kprintf (PSTR ("Timer Overflow"));
    65de:	83 e2       	ldi	r24, 0x23	; 35
    65e0:	93 e0       	ldi	r25, 0x03	; 3
    65e2:	11 c0       	rjmp	.+34     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_WATCHDOG_ERROR:
      nrk_kprintf (PSTR ("Watchdog Restart"));
    65e4:	82 e1       	ldi	r24, 0x12	; 18
    65e6:	93 e0       	ldi	r25, 0x03	; 3
    65e8:	0e c0       	rjmp	.+28     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_DEVICE_DRIVER:
      nrk_kprintf (PSTR ("Device Driver Error"));
    65ea:	8e ef       	ldi	r24, 0xFE	; 254
    65ec:	92 e0       	ldi	r25, 0x02	; 2
    65ee:	0b c0       	rjmp	.+22     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_UNIMPLEMENTED:
      nrk_kprintf (PSTR ("Kernel function not implemented"));
    65f0:	8e ed       	ldi	r24, 0xDE	; 222
    65f2:	92 e0       	ldi	r25, 0x02	; 2
    65f4:	08 c0       	rjmp	.+16     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_SIGNAL_CREATE_ERROR:
      nrk_kprintf (PSTR ("Failed to create Signal"));
    65f6:	86 ec       	ldi	r24, 0xC6	; 198
    65f8:	92 e0       	ldi	r25, 0x02	; 2
    65fa:	05 c0       	rjmp	.+10     	; 0x6606 <nrk_error_print+0xf2>
      break;
    case NRK_SEMAPHORE_CREATE_ERROR:
      nrk_kprintf (PSTR ("Failed to create Semaphore"));
    65fc:	8b ea       	ldi	r24, 0xAB	; 171
    65fe:	92 e0       	ldi	r25, 0x02	; 2
    6600:	02 c0       	rjmp	.+4      	; 0x6606 <nrk_error_print+0xf2>
      break;
    default:
      nrk_kprintf (PSTR ("UNKOWN"));
    6602:	84 ea       	ldi	r24, 0xA4	; 164
    6604:	92 e0       	ldi	r25, 0x02	; 2
    6606:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>
      }
    putchar ('\r');
    660a:	60 91 48 20 	lds	r22, 0x2048
    660e:	70 91 49 20 	lds	r23, 0x2049
    6612:	8d e0       	ldi	r24, 0x0D	; 13
    6614:	90 e0       	ldi	r25, 0x00	; 0
    6616:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
    putchar ('\n');
    661a:	60 91 48 20 	lds	r22, 0x2048
    661e:	70 91 49 20 	lds	r23, 0x2049
    6622:	8a e0       	ldi	r24, 0x0A	; 10
    6624:	90 e0       	ldi	r25, 0x00	; 0
    6626:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
#endif  /*  */
    
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    nrk_led_set (2);
    662a:	82 e0       	ldi	r24, 0x02	; 2
    662c:	90 e0       	ldi	r25, 0x00	; 0
    662e:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <nrk_led_set>
    nrk_led_clr (3);
    6632:	83 e0       	ldi	r24, 0x03	; 3
    6634:	90 e0       	ldi	r25, 0x00	; 0
    6636:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <nrk_led_clr>
    663a:	10 e0       	ldi	r17, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    663c:	88 ee       	ldi	r24, 0xE8	; 232
    663e:	93 e0       	ldi	r25, 0x03	; 3
    6640:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    nrk_led_set (2);
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
    6644:	1f 5f       	subi	r17, 0xFF	; 255
    6646:	14 36       	cpi	r17, 0x64	; 100
    6648:	c9 f7       	brne	.-14     	; 0x663c <nrk_error_print+0x128>
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    664a:	83 e0       	ldi	r24, 0x03	; 3
    664c:	90 e0       	ldi	r25, 0x00	; 0
    664e:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <nrk_led_set>
    nrk_led_clr (2);
    6652:	82 e0       	ldi	r24, 0x02	; 2
    6654:	90 e0       	ldi	r25, 0x00	; 0
    6656:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <nrk_led_clr>
    665a:	10 e0       	ldi	r17, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    665c:	88 ee       	ldi	r24, 0xE8	; 232
    665e:	93 e0       	ldi	r25, 0x03	; 3
    6660:	0e 94 f5 40 	call	0x81ea	; 0x81ea <nrk_spin_wait_us>
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    nrk_led_clr (2);
    for (t = 0; t < 100; t++)
    6664:	1f 5f       	subi	r17, 0xFF	; 255
    6666:	14 36       	cpi	r17, 0x64	; 100
    6668:	c9 f7       	brne	.-14     	; 0x665c <nrk_error_print+0x148>
    666a:	df cf       	rjmp	.-66     	; 0x662a <nrk_error_print+0x116>

0000666c <nrk_kernel_error_add>:
    nrk_error_print ();
  
#endif  /*  */
} void nrk_kernel_error_add (uint8_t n, uint8_t task) 
{
  error_num = n;
    666c:	80 93 d3 0e 	sts	0x0ED3, r24
  error_task = task;
    6670:	60 93 21 0c 	sts	0x0C21, r22
  
#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    6674:	0e 94 8a 32 	call	0x6514	; 0x6514 <nrk_error_print>
  
#endif  /*  */
} 
    6678:	08 95       	ret

0000667a <nrk_error_add>:
  return nrk_cur_task_TCB->errno;
}

void nrk_error_add (uint8_t n) 
{
  error_num = n;
    667a:	80 93 d3 0e 	sts	0x0ED3, r24
  error_task = nrk_cur_task_TCB->task_ID;
    667e:	e0 91 17 20 	lds	r30, 0x2017
    6682:	f0 91 18 20 	lds	r31, 0x2018
    6686:	80 85       	ldd	r24, Z+8	; 0x08
    6688:	80 93 21 0c 	sts	0x0C21, r24
  
#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    668c:	0e 94 8a 32 	call	0x6514	; 0x6514 <nrk_error_print>
  
#endif  /*  */
} void nrk_kernel_error_add (uint8_t n, uint8_t task) 
    6690:	08 95       	ret

00006692 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

unsigned int *stk ;  // 2 bytes
unsigned char *stkc; // 1 byte
    
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */ 
    6692:	99 27       	eor	r25, r25
    6694:	87 fd       	sbrc	r24, 7
    6696:	90 95       	com	r25
    6698:	fc 01       	movw	r30, r24
    669a:	25 e0       	ldi	r18, 0x05	; 5
    669c:	ee 0f       	add	r30, r30
    669e:	ff 1f       	adc	r31, r31
    66a0:	2a 95       	dec	r18
    66a2:	e1 f7       	brne	.-8      	; 0x669c <nrk_stack_check_pid+0xa>
    66a4:	e8 0f       	add	r30, r24
    66a6:	f9 1f       	adc	r31, r25
    66a8:	e0 5b       	subi	r30, 0xB0	; 176
    66aa:	f0 4e       	sbci	r31, 0xE0	; 224
    66ac:	a2 81       	ldd	r26, Z+2	; 0x02
    66ae:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL) {
    66b0:	8c 91       	ld	r24, X
    66b2:	85 35       	cpi	r24, 0x55	; 85
    66b4:	21 f0       	breq	.+8      	; 0x66be <nrk_stack_check_pid+0x2c>
		 *stkc=STK_CANARY_VAL; 
    66b6:	85 e5       	ldi	r24, 0x55	; 85
    66b8:	8c 93       	st	X, r24
    66ba:	8f ef       	ldi	r24, 0xFF	; 255
		 return NRK_ERROR;
    66bc:	08 95       	ret
    		  }  
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND ) {
    66be:	80 81       	ld	r24, Z
    66c0:	91 81       	ldd	r25, Z+1	; 0x01
    66c2:	22 e2       	ldi	r18, 0x22	; 34
    66c4:	80 30       	cpi	r24, 0x00	; 0
    66c6:	92 07       	cpc	r25, r18
    66c8:	10 f4       	brcc	.+4      	; 0x66ce <nrk_stack_check_pid+0x3c>
    66ca:	81 e0       	ldi	r24, 0x01	; 1
    66cc:	08 95       	ret
	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
    66ce:	82 e1       	ldi	r24, 0x12	; 18
    66d0:	0e 94 3d 33 	call	0x667a	; 0x667a <nrk_error_add>
    66d4:	8f ef       	ldi	r24, 0xFF	; 255
		 return NRK_ERROR;
    		}
#endif
return NRK_OK;
}
    66d6:	08 95       	ret

000066d8 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    66d8:	6f 92       	push	r6
    66da:	7f 92       	push	r7
    66dc:	8f 92       	push	r8
    66de:	9f 92       	push	r9
    66e0:	af 92       	push	r10
    66e2:	bf 92       	push	r11
    66e4:	cf 92       	push	r12
    66e6:	df 92       	push	r13
    66e8:	ef 92       	push	r14
    66ea:	ff 92       	push	r15
    66ec:	0f 93       	push	r16
    66ee:	1f 93       	push	r17
    66f0:	cf 93       	push	r28
    66f2:	df 93       	push	r29
	unsigned int *stk;
	unsigned char *stkc;
	uint8_t i;

	nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    66f4:	8c e6       	ldi	r24, 0x6C	; 108
    66f6:	94 e0       	ldi	r25, 0x04	; 4
    66f8:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <nrk_kprintf>

	printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    66fc:	00 d0       	rcall	.+0      	; 0x66fe <dump_stack_info+0x26>
    66fe:	00 d0       	rcall	.+0      	; 0x6700 <dump_stack_info+0x28>
    6700:	83 e7       	ldi	r24, 0x73	; 115
    6702:	9b e0       	ldi	r25, 0x0B	; 11
    6704:	ad b7       	in	r26, 0x3d	; 61
    6706:	be b7       	in	r27, 0x3e	; 62
    6708:	12 96       	adiw	r26, 0x02	; 2
    670a:	9c 93       	st	X, r25
    670c:	8e 93       	st	-X, r24
    670e:	11 97       	sbiw	r26, 0x01	; 1
    6710:	e0 91 17 20 	lds	r30, 0x2017
    6714:	f0 91 18 20 	lds	r31, 0x2018
    6718:	80 85       	ldd	r24, Z+8	; 0x08
    671a:	99 27       	eor	r25, r25
    671c:	87 fd       	sbrc	r24, 7
    671e:	90 95       	com	r25
    6720:	14 96       	adiw	r26, 0x04	; 4
    6722:	9c 93       	st	X, r25
    6724:	8e 93       	st	-X, r24
    6726:	13 97       	sbiw	r26, 0x03	; 3
    6728:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
	stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    672c:	e0 91 17 20 	lds	r30, 0x2017
    6730:	f0 91 18 20 	lds	r31, 0x2018
    6734:	c2 81       	ldd	r28, Z+2	; 0x02
    6736:	d3 81       	ldd	r29, Z+3	; 0x03
	stkc = (unsigned char*)stk;
	printf( "bottom = %x ",(uint16_t)stkc );
    6738:	8c e7       	ldi	r24, 0x7C	; 124
    673a:	9b e0       	ldi	r25, 0x0B	; 11
    673c:	ed b7       	in	r30, 0x3d	; 61
    673e:	fe b7       	in	r31, 0x3e	; 62
    6740:	92 83       	std	Z+2, r25	; 0x02
    6742:	81 83       	std	Z+1, r24	; 0x01
    6744:	d4 83       	std	Z+4, r29	; 0x04
    6746:	c3 83       	std	Z+3, r28	; 0x03
    6748:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
	printf( "canary = %x ",*stkc );
    674c:	ed b7       	in	r30, 0x3d	; 61
    674e:	fe b7       	in	r31, 0x3e	; 62
    6750:	31 96       	adiw	r30, 0x01	; 1
    6752:	69 e8       	ldi	r22, 0x89	; 137
    6754:	a6 2e       	mov	r10, r22
    6756:	6b e0       	ldi	r22, 0x0B	; 11
    6758:	b6 2e       	mov	r11, r22
    675a:	ad b7       	in	r26, 0x3d	; 61
    675c:	be b7       	in	r27, 0x3e	; 62
    675e:	12 96       	adiw	r26, 0x02	; 2
    6760:	bc 92       	st	X, r11
    6762:	ae 92       	st	-X, r10
    6764:	11 97       	sbiw	r26, 0x01	; 1
    6766:	88 81       	ld	r24, Y
    6768:	82 83       	std	Z+2, r24	; 0x02
    676a:	13 82       	std	Z+3, r1	; 0x03
    676c:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
	stkc = (unsigned char*)stk;
	printf( "stk = %x ",(uint16_t)stkc );
    6770:	56 e9       	ldi	r21, 0x96	; 150
    6772:	c5 2e       	mov	r12, r21
    6774:	5b e0       	ldi	r21, 0x0B	; 11
    6776:	d5 2e       	mov	r13, r21
    6778:	ed b7       	in	r30, 0x3d	; 61
    677a:	fe b7       	in	r31, 0x3e	; 62
    677c:	d2 82       	std	Z+2, r13	; 0x02
    677e:	c1 82       	std	Z+1, r12	; 0x01
    6780:	e0 91 17 20 	lds	r30, 0x2017
    6784:	f0 91 18 20 	lds	r31, 0x2018
    6788:	80 81       	ld	r24, Z
    678a:	91 81       	ldd	r25, Z+1	; 0x01
    678c:	ad b7       	in	r26, 0x3d	; 61
    678e:	be b7       	in	r27, 0x3e	; 62
    6790:	14 96       	adiw	r26, 0x04	; 4
    6792:	9c 93       	st	X, r25
    6794:	8e 93       	st	-X, r24
    6796:	13 97       	sbiw	r26, 0x03	; 3
    6798:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    679c:	40 ea       	ldi	r20, 0xA0	; 160
    679e:	e4 2e       	mov	r14, r20
    67a0:	4b e0       	ldi	r20, 0x0B	; 11
    67a2:	f4 2e       	mov	r15, r20
    67a4:	ed b7       	in	r30, 0x3d	; 61
    67a6:	fe b7       	in	r31, 0x3e	; 62
    67a8:	f2 82       	std	Z+2, r15	; 0x02
    67aa:	e1 82       	std	Z+1, r14	; 0x01
    67ac:	80 91 17 20 	lds	r24, 0x2017
    67b0:	90 91 18 20 	lds	r25, 0x2018
    67b4:	94 83       	std	Z+4, r25	; 0x04
    67b6:	83 83       	std	Z+3, r24	; 0x03
    67b8:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    67bc:	c0 e5       	ldi	r28, 0x50	; 80
    67be:	df e1       	ldi	r29, 0x1F	; 31
    67c0:	00 e0       	ldi	r16, 0x00	; 0
    67c2:	10 e0       	ldi	r17, 0x00	; 0
    67c4:	0f 90       	pop	r0
    67c6:	0f 90       	pop	r0
    67c8:	0f 90       	pop	r0
    67ca:	0f 90       	pop	r0

	for(i=0; i<NRK_MAX_TASKS; i++ )
	{
		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
		stkc = (unsigned char*)stk;
		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    67cc:	30 eb       	ldi	r19, 0xB0	; 176
    67ce:	83 2e       	mov	r8, r19
    67d0:	3b e0       	ldi	r19, 0x0B	; 11
    67d2:	93 2e       	mov	r9, r19
		printf( "canary = %x ",*stkc );
    67d4:	35 01       	movw	r6, r10
		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
		stkc = (unsigned char*)stk;
		printf( "stk = %x ",(uint16_t)stkc );
    67d6:	bc 2c       	mov	r11, r12
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    67d8:	ae 2c       	mov	r10, r14
    67da:	cf 2c       	mov	r12, r15
	printf( "stk = %x ",(uint16_t)stkc );
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

	for(i=0; i<NRK_MAX_TASKS; i++ )
	{
		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    67dc:	ea 80       	ldd	r14, Y+2	; 0x02
    67de:	fb 80       	ldd	r15, Y+3	; 0x03
		stkc = (unsigned char*)stk;
		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    67e0:	00 d0       	rcall	.+0      	; 0x67e2 <dump_stack_info+0x10a>
    67e2:	00 d0       	rcall	.+0      	; 0x67e4 <dump_stack_info+0x10c>
    67e4:	00 d0       	rcall	.+0      	; 0x67e6 <dump_stack_info+0x10e>
    67e6:	ed b7       	in	r30, 0x3d	; 61
    67e8:	fe b7       	in	r31, 0x3e	; 62
    67ea:	31 96       	adiw	r30, 0x01	; 1
    67ec:	ad b7       	in	r26, 0x3d	; 61
    67ee:	be b7       	in	r27, 0x3e	; 62
    67f0:	12 96       	adiw	r26, 0x02	; 2
    67f2:	9c 92       	st	X, r9
    67f4:	8e 92       	st	-X, r8
    67f6:	11 97       	sbiw	r26, 0x01	; 1
    67f8:	13 83       	std	Z+3, r17	; 0x03
    67fa:	02 83       	std	Z+2, r16	; 0x02
    67fc:	f5 82       	std	Z+5, r15	; 0x05
    67fe:	e4 82       	std	Z+4, r14	; 0x04
    6800:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
		printf( "canary = %x ",*stkc );
    6804:	0f 90       	pop	r0
    6806:	0f 90       	pop	r0
    6808:	ed b7       	in	r30, 0x3d	; 61
    680a:	fe b7       	in	r31, 0x3e	; 62
    680c:	31 96       	adiw	r30, 0x01	; 1
    680e:	ad b7       	in	r26, 0x3d	; 61
    6810:	be b7       	in	r27, 0x3e	; 62
    6812:	11 96       	adiw	r26, 0x01	; 1
    6814:	6c 92       	st	X, r6
    6816:	11 97       	sbiw	r26, 0x01	; 1
    6818:	12 96       	adiw	r26, 0x02	; 2
    681a:	7c 92       	st	X, r7
    681c:	d7 01       	movw	r26, r14
    681e:	8c 91       	ld	r24, X
    6820:	82 83       	std	Z+2, r24	; 0x02
    6822:	13 82       	std	Z+3, r1	; 0x03
    6824:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
		stkc = (unsigned char*)stk;
		printf( "stk = %x ",(uint16_t)stkc );
    6828:	ed b7       	in	r30, 0x3d	; 61
    682a:	fe b7       	in	r31, 0x3e	; 62
    682c:	b1 82       	std	Z+1, r11	; 0x01
    682e:	d2 82       	std	Z+2, r13	; 0x02
    6830:	88 81       	ld	r24, Y
    6832:	99 81       	ldd	r25, Y+1	; 0x01
    6834:	94 83       	std	Z+4, r25	; 0x04
    6836:	83 83       	std	Z+3, r24	; 0x03
    6838:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    683c:	ad b7       	in	r26, 0x3d	; 61
    683e:	be b7       	in	r27, 0x3e	; 62
    6840:	11 96       	adiw	r26, 0x01	; 1
    6842:	ac 92       	st	X, r10
    6844:	11 97       	sbiw	r26, 0x01	; 1
    6846:	12 96       	adiw	r26, 0x02	; 2
    6848:	cc 92       	st	X, r12
    684a:	12 97       	sbiw	r26, 0x02	; 2
    684c:	14 96       	adiw	r26, 0x04	; 4
    684e:	dc 93       	st	X, r29
    6850:	ce 93       	st	-X, r28
    6852:	13 97       	sbiw	r26, 0x03	; 3
    6854:	0e 94 34 48 	call	0x9068	; 0x9068 <printf>
    6858:	0f 5f       	subi	r16, 0xFF	; 255
    685a:	1f 4f       	sbci	r17, 0xFF	; 255
    685c:	a1 96       	adiw	r28, 0x21	; 33
	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
	stkc = (unsigned char*)stk;
	printf( "stk = %x ",(uint16_t)stkc );
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

	for(i=0; i<NRK_MAX_TASKS; i++ )
    685e:	0f 90       	pop	r0
    6860:	0f 90       	pop	r0
    6862:	0f 90       	pop	r0
    6864:	0f 90       	pop	r0
    6866:	05 30       	cpi	r16, 0x05	; 5
    6868:	11 05       	cpc	r17, r1
    686a:	09 f0       	breq	.+2      	; 0x686e <dump_stack_info+0x196>
    686c:	b7 cf       	rjmp	.-146    	; 0x67dc <dump_stack_info+0x104>
		printf( "stk = %x ",(uint16_t)stkc );
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

	}

}
    686e:	df 91       	pop	r29
    6870:	cf 91       	pop	r28
    6872:	1f 91       	pop	r17
    6874:	0f 91       	pop	r16
    6876:	ff 90       	pop	r15
    6878:	ef 90       	pop	r14
    687a:	df 90       	pop	r13
    687c:	cf 90       	pop	r12
    687e:	bf 90       	pop	r11
    6880:	af 90       	pop	r10
    6882:	9f 90       	pop	r9
    6884:	8f 90       	pop	r8
    6886:	7f 90       	pop	r7
    6888:	6f 90       	pop	r6
    688a:	08 95       	ret

0000688c <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    688c:	cf 93       	push	r28
    688e:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

unsigned int *stk ;  // 2 bytes
unsigned char *stkc; // 1 byte
    
    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */ 
    6890:	e0 91 17 20 	lds	r30, 0x2017
    6894:	f0 91 18 20 	lds	r31, 0x2018
    6898:	c2 81       	ldd	r28, Z+2	; 0x02
    689a:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL) {
    689c:	88 81       	ld	r24, Y
    689e:	85 35       	cpi	r24, 0x55	; 85
    68a0:	39 f0       	breq	.+14     	; 0x68b0 <nrk_stack_check+0x24>
	    	#ifdef NRK_REPORT_ERRORS
	    	 dump_stack_info();
    68a2:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <dump_stack_info>
		#endif
	   	 nrk_error_add( NRK_STACK_OVERFLOW ); 
    68a6:	81 e0       	ldi	r24, 0x01	; 1
    68a8:	0e 94 3d 33 	call	0x667a	; 0x667a <nrk_error_add>
		 *stkc=STK_CANARY_VAL; 
    68ac:	85 e5       	ldi	r24, 0x55	; 85
    68ae:	88 83       	st	Y, r24
    		  } 
 
    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */ 
    68b0:	e0 91 17 20 	lds	r30, 0x2017
    68b4:	f0 91 18 20 	lds	r31, 0x2018
    68b8:	80 81       	ld	r24, Z
    68ba:	91 81       	ldd	r25, Z+1	; 0x01
    68bc:	22 e2       	ldi	r18, 0x22	; 34
    68be:	80 30       	cpi	r24, 0x00	; 0
    68c0:	92 07       	cpc	r25, r18
    68c2:	28 f0       	brcs	.+10     	; 0x68ce <nrk_stack_check+0x42>
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND ) {
	    	#ifdef NRK_REPORT_ERRORS
	    	 dump_stack_info();
    68c4:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <dump_stack_info>
		#endif
	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
    68c8:	82 e1       	ldi	r24, 0x12	; 18
    68ca:	0e 94 3d 33 	call	0x667a	; 0x667a <nrk_error_add>




#endif
}
    68ce:	df 91       	pop	r29
    68d0:	cf 91       	pop	r28
    68d2:	08 95       	ret

000068d4 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    68d4:	ef 92       	push	r14
    68d6:	ff 92       	push	r15
    68d8:	0f 93       	push	r16
    68da:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    68dc:	e0 90 45 0d 	lds	r14, 0x0D45
    68e0:	f0 90 46 0d 	lds	r15, 0x0D46
    68e4:	00 91 47 0d 	lds	r16, 0x0D47
    68e8:	10 91 48 0d 	lds	r17, 0x0D48
    68ec:	80 e0       	ldi	r24, 0x00	; 0
    68ee:	90 e0       	ldi	r25, 0x00	; 0
    68f0:	a8 01       	movw	r20, r16
    68f2:	97 01       	movw	r18, r14
    68f4:	08 2e       	mov	r0, r24
    68f6:	04 c0       	rjmp	.+8      	; 0x6900 <nrk_signal_create+0x2c>
    68f8:	56 95       	lsr	r21
    68fa:	47 95       	ror	r20
    68fc:	37 95       	ror	r19
    68fe:	27 95       	ror	r18
    6900:	0a 94       	dec	r0
    6902:	d2 f7       	brpl	.-12     	; 0x68f8 <nrk_signal_create+0x24>
    6904:	21 70       	andi	r18, 0x01	; 1
    6906:	30 70       	andi	r19, 0x00	; 0
    6908:	21 15       	cp	r18, r1
    690a:	31 05       	cpc	r19, r1
    690c:	c9 f4       	brne	.+50     	; 0x6940 <nrk_signal_create+0x6c>
		{    
			_nrk_signal_list|=SIG(i);
    690e:	21 e0       	ldi	r18, 0x01	; 1
    6910:	30 e0       	ldi	r19, 0x00	; 0
    6912:	40 e0       	ldi	r20, 0x00	; 0
    6914:	50 e0       	ldi	r21, 0x00	; 0
    6916:	08 2e       	mov	r0, r24
    6918:	04 c0       	rjmp	.+8      	; 0x6922 <nrk_signal_create+0x4e>
    691a:	22 0f       	add	r18, r18
    691c:	33 1f       	adc	r19, r19
    691e:	44 1f       	adc	r20, r20
    6920:	55 1f       	adc	r21, r21
    6922:	0a 94       	dec	r0
    6924:	d2 f7       	brpl	.-12     	; 0x691a <nrk_signal_create+0x46>
    6926:	2e 29       	or	r18, r14
    6928:	3f 29       	or	r19, r15
    692a:	40 2b       	or	r20, r16
    692c:	51 2b       	or	r21, r17
    692e:	20 93 45 0d 	sts	0x0D45, r18
    6932:	30 93 46 0d 	sts	0x0D46, r19
    6936:	40 93 47 0d 	sts	0x0D47, r20
    693a:	50 93 48 0d 	sts	0x0D48, r21
			return i;
    693e:	05 c0       	rjmp	.+10     	; 0x694a <nrk_signal_create+0x76>
    6940:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    6942:	80 32       	cpi	r24, 0x20	; 32
    6944:	91 05       	cpc	r25, r1
    6946:	a1 f6       	brne	.-88     	; 0x68f0 <nrk_signal_create+0x1c>
    6948:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
	return NRK_ERROR;


}
    694a:	1f 91       	pop	r17
    694c:	0f 91       	pop	r16
    694e:	ff 90       	pop	r15
    6950:	ef 90       	pop	r14
    6952:	08 95       	ret

00006954 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
    6954:	e0 91 17 20 	lds	r30, 0x2017
    6958:	f0 91 18 20 	lds	r31, 0x2018
    695c:	65 85       	ldd	r22, Z+13	; 0x0d
    695e:	76 85       	ldd	r23, Z+14	; 0x0e
        return nrk_cur_task_TCB->registered_signal_mask;
}
    6960:	87 85       	ldd	r24, Z+15	; 0x0f
    6962:	90 89       	ldd	r25, Z+16	; 0x10
    6964:	08 95       	ret

00006966 <nrk_signal_unregister>:
	return NRK_OK;
}


int8_t nrk_signal_unregister(int8_t sig_id)
{
    6966:	ef 92       	push	r14
    6968:	ff 92       	push	r15
    696a:	0f 93       	push	r16
    696c:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    696e:	21 e0       	ldi	r18, 0x01	; 1
    6970:	30 e0       	ldi	r19, 0x00	; 0
    6972:	40 e0       	ldi	r20, 0x00	; 0
    6974:	50 e0       	ldi	r21, 0x00	; 0
    6976:	04 c0       	rjmp	.+8      	; 0x6980 <nrk_signal_unregister+0x1a>
    6978:	22 0f       	add	r18, r18
    697a:	33 1f       	adc	r19, r19
    697c:	44 1f       	adc	r20, r20
    697e:	55 1f       	adc	r21, r21
    6980:	8a 95       	dec	r24
    6982:	d2 f7       	brpl	.-12     	; 0x6978 <nrk_signal_unregister+0x12>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    6984:	e0 91 17 20 	lds	r30, 0x2017
    6988:	f0 91 18 20 	lds	r31, 0x2018
    698c:	85 85       	ldd	r24, Z+13	; 0x0d
    698e:	96 85       	ldd	r25, Z+14	; 0x0e
    6990:	a7 85       	ldd	r26, Z+15	; 0x0f
    6992:	b0 89       	ldd	r27, Z+16	; 0x10
    6994:	79 01       	movw	r14, r18
    6996:	8a 01       	movw	r16, r20
    6998:	e8 22       	and	r14, r24
    699a:	f9 22       	and	r15, r25
    699c:	0a 23       	and	r16, r26
    699e:	1b 23       	and	r17, r27
    69a0:	e1 14       	cp	r14, r1
    69a2:	f1 04       	cpc	r15, r1
    69a4:	01 05       	cpc	r16, r1
    69a6:	11 05       	cpc	r17, r1
    69a8:	11 f4       	brne	.+4      	; 0x69ae <nrk_signal_unregister+0x48>
    69aa:	8f ef       	ldi	r24, 0xFF	; 255
    69ac:	19 c0       	rjmp	.+50     	; 0x69e0 <nrk_signal_unregister+0x7a>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    69ae:	20 95       	com	r18
    69b0:	30 95       	com	r19
    69b2:	40 95       	com	r20
    69b4:	50 95       	com	r21
    69b6:	82 23       	and	r24, r18
    69b8:	93 23       	and	r25, r19
    69ba:	a4 23       	and	r26, r20
    69bc:	b5 23       	and	r27, r21
    69be:	85 87       	std	Z+13, r24	; 0x0d
    69c0:	96 87       	std	Z+14, r25	; 0x0e
    69c2:	a7 87       	std	Z+15, r26	; 0x0f
    69c4:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    69c6:	81 89       	ldd	r24, Z+17	; 0x11
    69c8:	92 89       	ldd	r25, Z+18	; 0x12
    69ca:	a3 89       	ldd	r26, Z+19	; 0x13
    69cc:	b4 89       	ldd	r27, Z+20	; 0x14
    69ce:	82 23       	and	r24, r18
    69d0:	93 23       	and	r25, r19
    69d2:	a4 23       	and	r26, r20
    69d4:	b5 23       	and	r27, r21
    69d6:	81 8b       	std	Z+17, r24	; 0x11
    69d8:	92 8b       	std	Z+18, r25	; 0x12
    69da:	a3 8b       	std	Z+19, r26	; 0x13
    69dc:	b4 8b       	std	Z+20, r27	; 0x14
    69de:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return NRK_ERROR;
return NRK_OK;
}
    69e0:	1f 91       	pop	r17
    69e2:	0f 91       	pop	r16
    69e4:	ff 90       	pop	r15
    69e6:	ef 90       	pop	r14
    69e8:	08 95       	ret

000069ea <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    69ea:	99 27       	eor	r25, r25
    69ec:	87 fd       	sbrc	r24, 7
    69ee:	90 95       	com	r25
    69f0:	20 91 45 0d 	lds	r18, 0x0D45
    69f4:	30 91 46 0d 	lds	r19, 0x0D46
    69f8:	40 91 47 0d 	lds	r20, 0x0D47
    69fc:	50 91 48 0d 	lds	r21, 0x0D48
    6a00:	08 2e       	mov	r0, r24
    6a02:	04 c0       	rjmp	.+8      	; 0x6a0c <nrk_signal_register+0x22>
    6a04:	56 95       	lsr	r21
    6a06:	47 95       	ror	r20
    6a08:	37 95       	ror	r19
    6a0a:	27 95       	ror	r18
    6a0c:	0a 94       	dec	r0
    6a0e:	d2 f7       	brpl	.-12     	; 0x6a04 <nrk_signal_register+0x1a>
    6a10:	21 70       	andi	r18, 0x01	; 1
    6a12:	30 70       	andi	r19, 0x00	; 0
    6a14:	21 15       	cp	r18, r1
    6a16:	31 05       	cpc	r19, r1
    6a18:	11 f4       	brne	.+4      	; 0x6a1e <nrk_signal_register+0x34>
    6a1a:	8f ef       	ldi	r24, 0xFF	; 255
    6a1c:	08 95       	ret
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    6a1e:	e0 91 17 20 	lds	r30, 0x2017
    6a22:	f0 91 18 20 	lds	r31, 0x2018
    6a26:	21 e0       	ldi	r18, 0x01	; 1
    6a28:	30 e0       	ldi	r19, 0x00	; 0
    6a2a:	40 e0       	ldi	r20, 0x00	; 0
    6a2c:	50 e0       	ldi	r21, 0x00	; 0
    6a2e:	04 c0       	rjmp	.+8      	; 0x6a38 <nrk_signal_register+0x4e>
    6a30:	22 0f       	add	r18, r18
    6a32:	33 1f       	adc	r19, r19
    6a34:	44 1f       	adc	r20, r20
    6a36:	55 1f       	adc	r21, r21
    6a38:	8a 95       	dec	r24
    6a3a:	d2 f7       	brpl	.-12     	; 0x6a30 <nrk_signal_register+0x46>
    6a3c:	85 85       	ldd	r24, Z+13	; 0x0d
    6a3e:	96 85       	ldd	r25, Z+14	; 0x0e
    6a40:	a7 85       	ldd	r26, Z+15	; 0x0f
    6a42:	b0 89       	ldd	r27, Z+16	; 0x10
    6a44:	82 2b       	or	r24, r18
    6a46:	93 2b       	or	r25, r19
    6a48:	a4 2b       	or	r26, r20
    6a4a:	b5 2b       	or	r27, r21
    6a4c:	85 87       	std	Z+13, r24	; 0x0d
    6a4e:	96 87       	std	Z+14, r25	; 0x0e
    6a50:	a7 87       	std	Z+15, r26	; 0x0f
    6a52:	b0 8b       	std	Z+16, r27	; 0x10
    6a54:	81 e0       	ldi	r24, 0x01	; 1
		return NRK_OK;
	}
            
	return NRK_ERROR;
}
    6a56:	08 95       	ret

00006a58 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    6a58:	20 91 16 20 	lds	r18, 0x2016
    6a5c:	24 30       	cpi	r18, 0x04	; 4
    6a5e:	18 f0       	brcs	.+6      	; 0x6a66 <nrk_sem_create+0xe>
    6a60:	20 e0       	ldi	r18, 0x00	; 0
    6a62:	30 e0       	ldi	r19, 0x00	; 0
    6a64:	34 c0       	rjmp	.+104    	; 0x6ace <nrk_sem_create+0x76>
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    6a66:	90 91 f7 1f 	lds	r25, 0x1FF7
    6a6a:	9f 3f       	cpi	r25, 0xFF	; 255
    6a6c:	11 f4       	brne	.+4      	; 0x6a72 <nrk_sem_create+0x1a>
    6a6e:	90 e0       	ldi	r25, 0x00	; 0
    6a70:	19 c0       	rjmp	.+50     	; 0x6aa4 <nrk_sem_create+0x4c>
    6a72:	90 91 fa 1f 	lds	r25, 0x1FFA
    6a76:	9f 3f       	cpi	r25, 0xFF	; 255
    6a78:	11 f4       	brne	.+4      	; 0x6a7e <nrk_sem_create+0x26>
    6a7a:	91 e0       	ldi	r25, 0x01	; 1
    6a7c:	13 c0       	rjmp	.+38     	; 0x6aa4 <nrk_sem_create+0x4c>
    6a7e:	90 91 fd 1f 	lds	r25, 0x1FFD
    6a82:	9f 3f       	cpi	r25, 0xFF	; 255
    6a84:	11 f4       	brne	.+4      	; 0x6a8a <nrk_sem_create+0x32>
    6a86:	92 e0       	ldi	r25, 0x02	; 2
    6a88:	0d c0       	rjmp	.+26     	; 0x6aa4 <nrk_sem_create+0x4c>
    6a8a:	90 91 00 20 	lds	r25, 0x2000
    6a8e:	9f 3f       	cpi	r25, 0xFF	; 255
    6a90:	11 f4       	brne	.+4      	; 0x6a96 <nrk_sem_create+0x3e>
    6a92:	93 e0       	ldi	r25, 0x03	; 3
    6a94:	07 c0       	rjmp	.+14     	; 0x6aa4 <nrk_sem_create+0x4c>
    6a96:	90 91 03 20 	lds	r25, 0x2003
    6a9a:	9f 3f       	cpi	r25, 0xFF	; 255
    6a9c:	11 f0       	breq	.+4      	; 0x6aa2 <nrk_sem_create+0x4a>
    6a9e:	95 e0       	ldi	r25, 0x05	; 5
    6aa0:	01 c0       	rjmp	.+2      	; 0x6aa4 <nrk_sem_create+0x4c>
    6aa2:	94 e0       	ldi	r25, 0x04	; 4
		}
	                                              
	nrk_sem_list[i].value=count;
    6aa4:	49 2f       	mov	r20, r25
    6aa6:	50 e0       	ldi	r21, 0x00	; 0
    6aa8:	fa 01       	movw	r30, r20
    6aaa:	ee 0f       	add	r30, r30
    6aac:	ff 1f       	adc	r31, r31
    6aae:	e4 0f       	add	r30, r20
    6ab0:	f5 1f       	adc	r31, r21
    6ab2:	e9 50       	subi	r30, 0x09	; 9
    6ab4:	f0 4e       	sbci	r31, 0xE0	; 224
    6ab6:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    6ab8:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    6aba:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    6abc:	2f 5f       	subi	r18, 0xFF	; 255
    6abe:	20 93 16 20 	sts	0x2016, r18
	return	&nrk_sem_list[i];
    6ac2:	23 e0       	ldi	r18, 0x03	; 3
    6ac4:	92 9f       	mul	r25, r18
    6ac6:	90 01       	movw	r18, r0
    6ac8:	11 24       	eor	r1, r1
    6aca:	29 50       	subi	r18, 0x09	; 9
    6acc:	30 4e       	sbci	r19, 0xE0	; 224
}
    6ace:	c9 01       	movw	r24, r18
    6ad0:	08 95       	ret

00006ad2 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
    6ad2:	ac 01       	movw	r20, r24
    6ad4:	27 ef       	ldi	r18, 0xF7	; 247
    6ad6:	3f e1       	ldi	r19, 0x1F	; 31
    6ad8:	80 e0       	ldi	r24, 0x00	; 0
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    6ada:	42 17       	cp	r20, r18
    6adc:	53 07       	cpc	r21, r19
    6ade:	31 f0       	breq	.+12     	; 0x6aec <nrk_get_resource_index+0x1a>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    6ae0:	8f 5f       	subi	r24, 0xFF	; 255
    6ae2:	2d 5f       	subi	r18, 0xFD	; 253
    6ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ae6:	85 30       	cpi	r24, 0x05	; 5
    6ae8:	c1 f7       	brne	.-16     	; 0x6ada <nrk_get_resource_index+0x8>
    6aea:	8f ef       	ldi	r24, 0xFF	; 255
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
	return NRK_ERROR;
}
    6aec:	08 95       	ret

00006aee <nrk_sem_delete>:
return NRK_OK;
}

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    6aee:	0e 94 69 35 	call	0x6ad2	; 0x6ad2 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    6af2:	8f 3f       	cpi	r24, 0xFF	; 255
    6af4:	11 f4       	brne	.+4      	; 0x6afa <nrk_sem_delete+0xc>
    6af6:	81 e0       	ldi	r24, 0x01	; 1
    6af8:	03 c0       	rjmp	.+6      	; 0x6b00 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    6afa:	85 30       	cpi	r24, 0x05	; 5
    6afc:	29 f4       	brne	.+10     	; 0x6b08 <nrk_sem_delete+0x1a>
    6afe:	82 e0       	ldi	r24, 0x02	; 2
    6b00:	0e 94 70 32 	call	0x64e0	; 0x64e0 <_nrk_errno_set>
    6b04:	8f ef       	ldi	r24, 0xFF	; 255
    6b06:	08 95       	ret

	nrk_sem_list[id].count=-1;
    6b08:	99 27       	eor	r25, r25
    6b0a:	87 fd       	sbrc	r24, 7
    6b0c:	90 95       	com	r25
    6b0e:	fc 01       	movw	r30, r24
    6b10:	ee 0f       	add	r30, r30
    6b12:	ff 1f       	adc	r31, r31
    6b14:	e8 0f       	add	r30, r24
    6b16:	f9 1f       	adc	r31, r25
    6b18:	e9 50       	subi	r30, 0x09	; 9
    6b1a:	f0 4e       	sbci	r31, 0xE0	; 224
    6b1c:	8f ef       	ldi	r24, 0xFF	; 255
    6b1e:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    6b20:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    6b22:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    6b24:	80 91 16 20 	lds	r24, 0x2016
    6b28:	81 50       	subi	r24, 0x01	; 1
    6b2a:	80 93 16 20 	sts	0x2016, r24
    6b2e:	81 e0       	ldi	r24, 0x01	; 1
return NRK_OK;
}
    6b30:	08 95       	ret

00006b32 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    6b32:	0e 94 69 35 	call	0x6ad2	; 0x6ad2 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    6b36:	8f 3f       	cpi	r24, 0xFF	; 255
    6b38:	11 f4       	brne	.+4      	; 0x6b3e <nrk_sem_query+0xc>
    6b3a:	81 e0       	ldi	r24, 0x01	; 1
    6b3c:	03 c0       	rjmp	.+6      	; 0x6b44 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    6b3e:	85 30       	cpi	r24, 0x05	; 5
    6b40:	29 f4       	brne	.+10     	; 0x6b4c <nrk_sem_query+0x1a>
    6b42:	82 e0       	ldi	r24, 0x02	; 2
    6b44:	0e 94 70 32 	call	0x64e0	; 0x64e0 <_nrk_errno_set>
    6b48:	8f ef       	ldi	r24, 0xFF	; 255
    6b4a:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    6b4c:	99 27       	eor	r25, r25
    6b4e:	87 fd       	sbrc	r24, 7
    6b50:	90 95       	com	r25
    6b52:	fc 01       	movw	r30, r24
    6b54:	ee 0f       	add	r30, r30
    6b56:	ff 1f       	adc	r31, r31
    6b58:	e8 0f       	add	r30, r24
    6b5a:	f9 1f       	adc	r31, r25
    6b5c:	e9 50       	subi	r30, 0x09	; 9
    6b5e:	f0 4e       	sbci	r31, 0xE0	; 224
    6b60:	82 81       	ldd	r24, Z+2	; 0x02
}
    6b62:	08 95       	ret

00006b64 <nrk_sem_post>:
}



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    6b64:	ef 92       	push	r14
    6b66:	ff 92       	push	r15
    6b68:	0f 93       	push	r16
    6b6a:	1f 93       	push	r17
    6b6c:	df 93       	push	r29
    6b6e:	cf 93       	push	r28
    6b70:	0f 92       	push	r0
    6b72:	cd b7       	in	r28, 0x3d	; 61
    6b74:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    6b76:	0e 94 69 35 	call	0x6ad2	; 0x6ad2 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    6b7a:	8f 3f       	cpi	r24, 0xFF	; 255
    6b7c:	11 f4       	brne	.+4      	; 0x6b82 <nrk_sem_post+0x1e>
    6b7e:	81 e0       	ldi	r24, 0x01	; 1
    6b80:	03 c0       	rjmp	.+6      	; 0x6b88 <nrk_sem_post+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    6b82:	85 30       	cpi	r24, 0x05	; 5
    6b84:	29 f4       	brne	.+10     	; 0x6b90 <nrk_sem_post+0x2c>
    6b86:	82 e0       	ldi	r24, 0x02	; 2
    6b88:	0e 94 70 32 	call	0x64e0	; 0x64e0 <_nrk_errno_set>
    6b8c:	8f ef       	ldi	r24, 0xFF	; 255
    6b8e:	44 c0       	rjmp	.+136    	; 0x6c18 <nrk_sem_post+0xb4>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    6b90:	28 2f       	mov	r18, r24
    6b92:	33 27       	eor	r19, r19
    6b94:	27 fd       	sbrc	r18, 7
    6b96:	30 95       	com	r19
    6b98:	89 01       	movw	r16, r18
    6b9a:	00 0f       	add	r16, r16
    6b9c:	11 1f       	adc	r17, r17
    6b9e:	02 0f       	add	r16, r18
    6ba0:	13 1f       	adc	r17, r19
    6ba2:	09 50       	subi	r16, 0x09	; 9
    6ba4:	10 4e       	sbci	r17, 0xE0	; 224
    6ba6:	d8 01       	movw	r26, r16
    6ba8:	12 96       	adiw	r26, 0x02	; 2
    6baa:	2c 91       	ld	r18, X
    6bac:	12 97       	sbiw	r26, 0x02	; 2
    6bae:	9c 91       	ld	r25, X
    6bb0:	29 17       	cp	r18, r25
    6bb2:	8c f5       	brge	.+98     	; 0x6c16 <nrk_sem_post+0xb2>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    6bb4:	89 83       	std	Y+1, r24	; 0x01
    6bb6:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>

		nrk_sem_list[id].value++;
    6bba:	f8 01       	movw	r30, r16
    6bbc:	92 81       	ldd	r25, Z+2	; 0x02
    6bbe:	9f 5f       	subi	r25, 0xFF	; 255
    6bc0:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    6bc2:	e0 91 17 20 	lds	r30, 0x2017
    6bc6:	f0 91 18 20 	lds	r31, 0x2018
    6bca:	14 82       	std	Z+4, r1	; 0x04
    6bcc:	e7 e5       	ldi	r30, 0x57	; 87
    6bce:	ff e1       	ldi	r31, 0x1F	; 31

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    6bd0:	89 81       	ldd	r24, Y+1	; 0x01
    6bd2:	28 2f       	mov	r18, r24
    6bd4:	33 27       	eor	r19, r19
    6bd6:	27 fd       	sbrc	r18, 7
    6bd8:	30 95       	com	r19
    6bda:	43 2f       	mov	r20, r19
    6bdc:	53 2f       	mov	r21, r19
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    6bde:	93 e0       	ldi	r25, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    6be0:	80 81       	ld	r24, Z
    6be2:	82 30       	cpi	r24, 0x02	; 2
    6be4:	89 f4       	brne	.+34     	; 0x6c08 <nrk_sem_post+0xa4>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    6be6:	e2 84       	ldd	r14, Z+10	; 0x0a
    6be8:	f3 84       	ldd	r15, Z+11	; 0x0b
    6bea:	04 85       	ldd	r16, Z+12	; 0x0c
    6bec:	15 85       	ldd	r17, Z+13	; 0x0d
    6bee:	e2 16       	cp	r14, r18
    6bf0:	f3 06       	cpc	r15, r19
    6bf2:	04 07       	cpc	r16, r20
    6bf4:	15 07       	cpc	r17, r21
    6bf6:	41 f4       	brne	.+16     	; 0x6c08 <nrk_sem_post+0xa4>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    6bf8:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    6bfa:	17 86       	std	Z+15, r1	; 0x0f
    6bfc:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    6bfe:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    6c00:	12 86       	std	Z+10, r1	; 0x0a
    6c02:	13 86       	std	Z+11, r1	; 0x0b
    6c04:	14 86       	std	Z+12, r1	; 0x0c
    6c06:	15 86       	std	Z+13, r1	; 0x0d
    6c08:	b1 96       	adiw	r30, 0x21	; 33
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    6c0a:	8f e1       	ldi	r24, 0x1F	; 31
    6c0c:	ec 3f       	cpi	r30, 0xFC	; 252
    6c0e:	f8 07       	cpc	r31, r24
    6c10:	39 f7       	brne	.-50     	; 0x6be0 <nrk_sem_post+0x7c>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    6c12:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>
    6c16:	81 e0       	ldi	r24, 0x01	; 1
	}
		
return NRK_OK;
}
    6c18:	0f 90       	pop	r0
    6c1a:	cf 91       	pop	r28
    6c1c:	df 91       	pop	r29
    6c1e:	1f 91       	pop	r17
    6c20:	0f 91       	pop	r16
    6c22:	ff 90       	pop	r15
    6c24:	ef 90       	pop	r14
    6c26:	08 95       	ret

00006c28 <nrk_event_signal>:
            
	return NRK_ERROR;
}

int8_t nrk_event_signal(int8_t sig_id)
{
    6c28:	ef 92       	push	r14
    6c2a:	ff 92       	push	r15
    6c2c:	0f 93       	push	r16
    6c2e:	1f 93       	push	r17
    6c30:	df 93       	push	r29
    6c32:	cf 93       	push	r28
    6c34:	0f 92       	push	r0
    6c36:	cd b7       	in	r28, 0x3d	; 61
    6c38:	de b7       	in	r29, 0x3e	; 62

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    6c3a:	71 e0       	ldi	r23, 0x01	; 1
    6c3c:	e7 2e       	mov	r14, r23
    6c3e:	f1 2c       	mov	r15, r1
    6c40:	01 2d       	mov	r16, r1
    6c42:	11 2d       	mov	r17, r1
    6c44:	04 c0       	rjmp	.+8      	; 0x6c4e <nrk_event_signal+0x26>
    6c46:	ee 0c       	add	r14, r14
    6c48:	ff 1c       	adc	r15, r15
    6c4a:	00 1f       	adc	r16, r16
    6c4c:	11 1f       	adc	r17, r17
    6c4e:	8a 95       	dec	r24
    6c50:	d2 f7       	brpl	.-12     	; 0x6c46 <nrk_event_signal+0x1e>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    6c52:	80 91 45 0d 	lds	r24, 0x0D45
    6c56:	90 91 46 0d 	lds	r25, 0x0D46
    6c5a:	a0 91 47 0d 	lds	r26, 0x0D47
    6c5e:	b0 91 48 0d 	lds	r27, 0x0D48
    6c62:	8e 21       	and	r24, r14
    6c64:	9f 21       	and	r25, r15
    6c66:	a0 23       	and	r26, r16
    6c68:	b1 23       	and	r27, r17
    6c6a:	00 97       	sbiw	r24, 0x00	; 0
    6c6c:	a1 05       	cpc	r26, r1
    6c6e:	b1 05       	cpc	r27, r1
    6c70:	11 f4       	brne	.+4      	; 0x6c76 <nrk_event_signal+0x4e>
    6c72:	81 e0       	ldi	r24, 0x01	; 1
    6c74:	42 c0       	rjmp	.+132    	; 0x6cfa <nrk_event_signal+0xd2>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    6c76:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>
    6c7a:	e7 e5       	ldi	r30, 0x57	; 87
    6c7c:	ff e1       	ldi	r31, 0x1F	; 31
	}
            
	return NRK_ERROR;
}

int8_t nrk_event_signal(int8_t sig_id)
    6c7e:	80 e0       	ldi	r24, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    6c80:	93 e0       	ldi	r25, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    6c82:	20 81       	ld	r18, Z
    6c84:	21 30       	cpi	r18, 0x01	; 1
    6c86:	b1 f4       	brne	.+44     	; 0x6cb4 <nrk_event_signal+0x8c>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    6c88:	22 85       	ldd	r18, Z+10	; 0x0a
    6c8a:	33 85       	ldd	r19, Z+11	; 0x0b
    6c8c:	44 85       	ldd	r20, Z+12	; 0x0c
    6c8e:	55 85       	ldd	r21, Z+13	; 0x0d
    6c90:	2e 21       	and	r18, r14
    6c92:	3f 21       	and	r19, r15
    6c94:	40 23       	and	r20, r16
    6c96:	51 23       	and	r21, r17
    6c98:	21 15       	cp	r18, r1
    6c9a:	31 05       	cpc	r19, r1
    6c9c:	41 05       	cpc	r20, r1
    6c9e:	51 05       	cpc	r21, r1
    6ca0:	49 f0       	breq	.+18     	; 0x6cb4 <nrk_event_signal+0x8c>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    6ca2:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    6ca4:	17 86       	std	Z+15, r1	; 0x0f
    6ca6:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    6ca8:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    6caa:	e2 86       	std	Z+10, r14	; 0x0a
    6cac:	f3 86       	std	Z+11, r15	; 0x0b
    6cae:	04 87       	std	Z+12, r16	; 0x0c
    6cb0:	15 87       	std	Z+13, r17	; 0x0d
    6cb2:	81 e0       	ldi	r24, 0x01	; 1
					event_occured=1;
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    6cb4:	20 81       	ld	r18, Z
    6cb6:	22 30       	cpi	r18, 0x02	; 2
    6cb8:	91 f4       	brne	.+36     	; 0x6cde <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    6cba:	22 85       	ldd	r18, Z+10	; 0x0a
    6cbc:	33 85       	ldd	r19, Z+11	; 0x0b
    6cbe:	44 85       	ldd	r20, Z+12	; 0x0c
    6cc0:	55 85       	ldd	r21, Z+13	; 0x0d
    6cc2:	2e 15       	cp	r18, r14
    6cc4:	3f 05       	cpc	r19, r15
    6cc6:	40 07       	cpc	r20, r16
    6cc8:	51 07       	cpc	r21, r17
    6cca:	49 f4       	brne	.+18     	; 0x6cde <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    6ccc:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    6cce:	17 86       	std	Z+15, r1	; 0x0f
    6cd0:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    6cd2:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    6cd4:	12 86       	std	Z+10, r1	; 0x0a
    6cd6:	13 86       	std	Z+11, r1	; 0x0b
    6cd8:	14 86       	std	Z+12, r1	; 0x0c
    6cda:	15 86       	std	Z+13, r1	; 0x0d
    6cdc:	81 e0       	ldi	r24, 0x01	; 1
    6cde:	b1 96       	adiw	r30, 0x21	; 33
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    6ce0:	2f e1       	ldi	r18, 0x1F	; 31
    6ce2:	ec 3f       	cpi	r30, 0xFC	; 252
    6ce4:	f2 07       	cpc	r31, r18
    6ce6:	69 f6       	brne	.-102    	; 0x6c82 <nrk_event_signal+0x5a>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    6ce8:	89 83       	std	Y+1, r24	; 0x01
    6cea:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>
	if(event_occured)
    6cee:	89 81       	ldd	r24, Y+1	; 0x01
    6cf0:	88 23       	and	r24, r24
    6cf2:	11 f0       	breq	.+4      	; 0x6cf8 <nrk_event_signal+0xd0>
    6cf4:	81 e0       	ldi	r24, 0x01	; 1
    6cf6:	04 c0       	rjmp	.+8      	; 0x6d00 <nrk_event_signal+0xd8>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    6cf8:	82 e0       	ldi	r24, 0x02	; 2
    6cfa:	0e 94 70 32 	call	0x64e0	; 0x64e0 <_nrk_errno_set>
    6cfe:	8f ef       	ldi	r24, 0xFF	; 255
	return NRK_ERROR;
}
    6d00:	0f 90       	pop	r0
    6d02:	cf 91       	pop	r28
    6d04:	df 91       	pop	r29
    6d06:	1f 91       	pop	r17
    6d08:	0f 91       	pop	r16
    6d0a:	ff 90       	pop	r15
    6d0c:	ef 90       	pop	r14
    6d0e:	08 95       	ret

00006d10 <nrk_signal_delete>:
        return nrk_cur_task_TCB->registered_signal_mask;
}

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    6d10:	ef 92       	push	r14
    6d12:	ff 92       	push	r15
    6d14:	0f 93       	push	r16
    6d16:	1f 93       	push	r17
    6d18:	cf 93       	push	r28
    6d1a:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    6d1c:	c8 2f       	mov	r28, r24
    6d1e:	dd 27       	eor	r29, r29
    6d20:	c7 fd       	sbrc	r28, 7
    6d22:	d0 95       	com	r29
    6d24:	e1 e0       	ldi	r30, 0x01	; 1
    6d26:	ee 2e       	mov	r14, r30
    6d28:	f1 2c       	mov	r15, r1
    6d2a:	01 2d       	mov	r16, r1
    6d2c:	11 2d       	mov	r17, r1
    6d2e:	0c 2e       	mov	r0, r28
    6d30:	04 c0       	rjmp	.+8      	; 0x6d3a <nrk_signal_delete+0x2a>
    6d32:	ee 0c       	add	r14, r14
    6d34:	ff 1c       	adc	r15, r15
    6d36:	00 1f       	adc	r16, r16
    6d38:	11 1f       	adc	r17, r17
    6d3a:	0a 94       	dec	r0
    6d3c:	d2 f7       	brpl	.-12     	; 0x6d32 <nrk_signal_delete+0x22>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    6d3e:	80 91 45 0d 	lds	r24, 0x0D45
    6d42:	90 91 46 0d 	lds	r25, 0x0D46
    6d46:	a0 91 47 0d 	lds	r26, 0x0D47
    6d4a:	b0 91 48 0d 	lds	r27, 0x0D48
    6d4e:	8e 21       	and	r24, r14
    6d50:	9f 21       	and	r25, r15
    6d52:	a0 23       	and	r26, r16
    6d54:	b1 23       	and	r27, r17
    6d56:	00 97       	sbiw	r24, 0x00	; 0
    6d58:	a1 05       	cpc	r26, r1
    6d5a:	b1 05       	cpc	r27, r1
    6d5c:	11 f4       	brne	.+4      	; 0x6d62 <nrk_signal_delete+0x52>
    6d5e:	8f ef       	ldi	r24, 0xFF	; 255
    6d60:	5c c0       	rjmp	.+184    	; 0x6e1a <nrk_signal_delete+0x10a>

	nrk_int_disable();
    6d62:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>
    6d66:	e7 e5       	ldi	r30, 0x57	; 87
    6d68:	ff e1       	ldi	r31, 0x1F	; 31
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    6d6a:	a8 01       	movw	r20, r16
    6d6c:	97 01       	movw	r18, r14
    6d6e:	20 95       	com	r18
    6d70:	30 95       	com	r19
    6d72:	40 95       	com	r20
    6d74:	50 95       	com	r21
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    6d76:	63 e0       	ldi	r22, 0x03	; 3

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    6d78:	81 81       	ldd	r24, Z+1	; 0x01
    6d7a:	8f 3f       	cpi	r24, 0xFF	; 255
    6d7c:	39 f1       	breq	.+78     	; 0x6dcc <nrk_signal_delete+0xbc>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    6d7e:	86 81       	ldd	r24, Z+6	; 0x06
    6d80:	97 81       	ldd	r25, Z+7	; 0x07
    6d82:	a0 85       	ldd	r26, Z+8	; 0x08
    6d84:	b1 85       	ldd	r27, Z+9	; 0x09
    6d86:	8e 15       	cp	r24, r14
    6d88:	9f 05       	cpc	r25, r15
    6d8a:	a0 07       	cpc	r26, r16
    6d8c:	b1 07       	cpc	r27, r17
    6d8e:	31 f4       	brne	.+12     	; 0x6d9c <nrk_signal_delete+0x8c>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    6d90:	12 86       	std	Z+10, r1	; 0x0a
    6d92:	13 86       	std	Z+11, r1	; 0x0b
    6d94:	14 86       	std	Z+12, r1	; 0x0c
    6d96:	15 86       	std	Z+13, r1	; 0x0d
			nrk_task_TCB[task_ID].event_suspend=0;
    6d98:	10 82       	st	Z, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    6d9a:	62 83       	std	Z+2, r22	; 0x02
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    6d9c:	86 81       	ldd	r24, Z+6	; 0x06
    6d9e:	97 81       	ldd	r25, Z+7	; 0x07
    6da0:	a0 85       	ldd	r26, Z+8	; 0x08
    6da2:	b1 85       	ldd	r27, Z+9	; 0x09
    6da4:	82 23       	and	r24, r18
    6da6:	93 23       	and	r25, r19
    6da8:	a4 23       	and	r26, r20
    6daa:	b5 23       	and	r27, r21
    6dac:	86 83       	std	Z+6, r24	; 0x06
    6dae:	97 83       	std	Z+7, r25	; 0x07
    6db0:	a0 87       	std	Z+8, r26	; 0x08
    6db2:	b1 87       	std	Z+9, r27	; 0x09
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    6db4:	82 85       	ldd	r24, Z+10	; 0x0a
    6db6:	93 85       	ldd	r25, Z+11	; 0x0b
    6db8:	a4 85       	ldd	r26, Z+12	; 0x0c
    6dba:	b5 85       	ldd	r27, Z+13	; 0x0d
    6dbc:	82 23       	and	r24, r18
    6dbe:	93 23       	and	r25, r19
    6dc0:	a4 23       	and	r26, r20
    6dc2:	b5 23       	and	r27, r21
    6dc4:	82 87       	std	Z+10, r24	; 0x0a
    6dc6:	93 87       	std	Z+11, r25	; 0x0b
    6dc8:	a4 87       	std	Z+12, r26	; 0x0c
    6dca:	b5 87       	std	Z+13, r27	; 0x0d
    6dcc:	b1 96       	adiw	r30, 0x21	; 33
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    6dce:	9f e1       	ldi	r25, 0x1F	; 31
    6dd0:	ec 3f       	cpi	r30, 0xFC	; 252
    6dd2:	f9 07       	cpc	r31, r25
    6dd4:	89 f6       	brne	.-94     	; 0x6d78 <nrk_signal_delete+0x68>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    6dd6:	2e ef       	ldi	r18, 0xFE	; 254
    6dd8:	3f ef       	ldi	r19, 0xFF	; 255
    6dda:	4f ef       	ldi	r20, 0xFF	; 255
    6ddc:	5f ef       	ldi	r21, 0xFF	; 255
    6dde:	04 c0       	rjmp	.+8      	; 0x6de8 <nrk_signal_delete+0xd8>
    6de0:	22 0f       	add	r18, r18
    6de2:	33 1f       	adc	r19, r19
    6de4:	44 1f       	adc	r20, r20
    6de6:	55 1f       	adc	r21, r21
    6de8:	ca 95       	dec	r28
    6dea:	d2 f7       	brpl	.-12     	; 0x6de0 <nrk_signal_delete+0xd0>
    6dec:	80 91 45 0d 	lds	r24, 0x0D45
    6df0:	90 91 46 0d 	lds	r25, 0x0D46
    6df4:	a0 91 47 0d 	lds	r26, 0x0D47
    6df8:	b0 91 48 0d 	lds	r27, 0x0D48
    6dfc:	82 23       	and	r24, r18
    6dfe:	93 23       	and	r25, r19
    6e00:	a4 23       	and	r26, r20
    6e02:	b5 23       	and	r27, r21
    6e04:	80 93 45 0d 	sts	0x0D45, r24
    6e08:	90 93 46 0d 	sts	0x0D46, r25
    6e0c:	a0 93 47 0d 	sts	0x0D47, r26
    6e10:	b0 93 48 0d 	sts	0x0D48, r27
	nrk_int_enable();
    6e14:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>
    6e18:	81 e0       	ldi	r24, 0x01	; 1

	return NRK_OK;
}
    6e1a:	df 91       	pop	r29
    6e1c:	cf 91       	pop	r28
    6e1e:	1f 91       	pop	r17
    6e20:	0f 91       	pop	r16
    6e22:	ff 90       	pop	r15
    6e24:	ef 90       	pop	r14
    6e26:	08 95       	ret

00006e28 <nrk_sem_pend>:
}



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    6e28:	0f 93       	push	r16
    6e2a:	1f 93       	push	r17
    6e2c:	df 93       	push	r29
    6e2e:	cf 93       	push	r28
    6e30:	0f 92       	push	r0
    6e32:	cd b7       	in	r28, 0x3d	; 61
    6e34:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    6e36:	0e 94 69 35 	call	0x6ad2	; 0x6ad2 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    6e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    6e3c:	11 f4       	brne	.+4      	; 0x6e42 <nrk_sem_pend+0x1a>
    6e3e:	81 e0       	ldi	r24, 0x01	; 1
    6e40:	03 c0       	rjmp	.+6      	; 0x6e48 <nrk_sem_pend+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    6e42:	85 30       	cpi	r24, 0x05	; 5
    6e44:	29 f4       	brne	.+10     	; 0x6e50 <nrk_sem_pend+0x28>
    6e46:	82 e0       	ldi	r24, 0x02	; 2
    6e48:	0e 94 70 32 	call	0x64e0	; 0x64e0 <_nrk_errno_set>
    6e4c:	8f ef       	ldi	r24, 0xFF	; 255
    6e4e:	40 c0       	rjmp	.+128    	; 0x6ed0 <nrk_sem_pend+0xa8>
	
	nrk_int_disable();
    6e50:	89 83       	std	Y+1, r24	; 0x01
    6e52:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    6e56:	89 81       	ldd	r24, Y+1	; 0x01
    6e58:	08 2f       	mov	r16, r24
    6e5a:	11 27       	eor	r17, r17
    6e5c:	07 fd       	sbrc	r16, 7
    6e5e:	10 95       	com	r17
    6e60:	f8 01       	movw	r30, r16
    6e62:	ee 0f       	add	r30, r30
    6e64:	ff 1f       	adc	r31, r31
    6e66:	e0 0f       	add	r30, r16
    6e68:	f1 1f       	adc	r31, r17
    6e6a:	e9 50       	subi	r30, 0x09	; 9
    6e6c:	f0 4e       	sbci	r31, 0xE0	; 224
    6e6e:	92 81       	ldd	r25, Z+2	; 0x02
    6e70:	99 23       	and	r25, r25
    6e72:	b1 f4       	brne	.+44     	; 0x6ea0 <nrk_sem_pend+0x78>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    6e74:	e0 91 17 20 	lds	r30, 0x2017
    6e78:	f0 91 18 20 	lds	r31, 0x2018
    6e7c:	97 81       	ldd	r25, Z+7	; 0x07
    6e7e:	92 60       	ori	r25, 0x02	; 2
    6e80:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    6e82:	99 27       	eor	r25, r25
    6e84:	87 fd       	sbrc	r24, 7
    6e86:	90 95       	com	r25
    6e88:	a9 2f       	mov	r26, r25
    6e8a:	b9 2f       	mov	r27, r25
    6e8c:	81 8b       	std	Z+17, r24	; 0x11
    6e8e:	92 8b       	std	Z+18, r25	; 0x12
    6e90:	a3 8b       	std	Z+19, r26	; 0x13
    6e92:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    6e94:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    6e98:	80 e0       	ldi	r24, 0x00	; 0
    6e9a:	90 e0       	ldi	r25, 0x00	; 0
    6e9c:	0e 94 e7 39 	call	0x73ce	; 0x73ce <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    6ea0:	f8 01       	movw	r30, r16
    6ea2:	ee 0f       	add	r30, r30
    6ea4:	ff 1f       	adc	r31, r31
    6ea6:	e0 0f       	add	r30, r16
    6ea8:	f1 1f       	adc	r31, r17
    6eaa:	e9 50       	subi	r30, 0x09	; 9
    6eac:	f0 4e       	sbci	r31, 0xE0	; 224
    6eae:	82 81       	ldd	r24, Z+2	; 0x02
    6eb0:	81 50       	subi	r24, 0x01	; 1
    6eb2:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    6eb4:	a0 91 17 20 	lds	r26, 0x2017
    6eb8:	b0 91 18 20 	lds	r27, 0x2018
    6ebc:	81 81       	ldd	r24, Z+1	; 0x01
    6ebe:	1b 96       	adiw	r26, 0x0b	; 11
    6ec0:	8c 93       	st	X, r24
    6ec2:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    6ec4:	81 e0       	ldi	r24, 0x01	; 1
    6ec6:	14 96       	adiw	r26, 0x04	; 4
    6ec8:	8c 93       	st	X, r24
	nrk_int_enable();
    6eca:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>
    6ece:	81 e0       	ldi	r24, 0x01	; 1

	return NRK_OK;
}
    6ed0:	0f 90       	pop	r0
    6ed2:	cf 91       	pop	r28
    6ed4:	df 91       	pop	r29
    6ed6:	1f 91       	pop	r17
    6ed8:	0f 91       	pop	r16
    6eda:	08 95       	ret

00006edc <nrk_event_wait>:

uint32_t nrk_event_wait(uint32_t event_mask)
{

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    6edc:	e0 91 17 20 	lds	r30, 0x2017
    6ee0:	f0 91 18 20 	lds	r31, 0x2018
    6ee4:	25 85       	ldd	r18, Z+13	; 0x0d
    6ee6:	36 85       	ldd	r19, Z+14	; 0x0e
    6ee8:	47 85       	ldd	r20, Z+15	; 0x0f
    6eea:	50 89       	ldd	r21, Z+16	; 0x10
    6eec:	26 23       	and	r18, r22
    6eee:	37 23       	and	r19, r23
    6ef0:	48 23       	and	r20, r24
    6ef2:	59 23       	and	r21, r25
    6ef4:	21 15       	cp	r18, r1
    6ef6:	31 05       	cpc	r19, r1
    6ef8:	41 05       	cpc	r20, r1
    6efa:	51 05       	cpc	r21, r1
    6efc:	29 f4       	brne	.+10     	; 0x6f08 <nrk_event_wait+0x2c>
    6efe:	20 e0       	ldi	r18, 0x00	; 0
    6f00:	30 e0       	ldi	r19, 0x00	; 0
    6f02:	40 e0       	ldi	r20, 0x00	; 0
    6f04:	50 e0       	ldi	r21, 0x00	; 0
    6f06:	23 c0       	rjmp	.+70     	; 0x6f4e <nrk_event_wait+0x72>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    6f08:	61 8b       	std	Z+17, r22	; 0x11
    6f0a:	72 8b       	std	Z+18, r23	; 0x12
    6f0c:	83 8b       	std	Z+19, r24	; 0x13
    6f0e:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    6f10:	21 e0       	ldi	r18, 0x01	; 1
    6f12:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    6f14:	00 90 07 20 	lds	r0, 0x2007
    6f18:	04 c0       	rjmp	.+8      	; 0x6f22 <nrk_event_wait+0x46>
    6f1a:	96 95       	lsr	r25
    6f1c:	87 95       	ror	r24
    6f1e:	77 95       	ror	r23
    6f20:	67 95       	ror	r22
    6f22:	0a 94       	dec	r0
    6f24:	d2 f7       	brpl	.-12     	; 0x6f1a <nrk_event_wait+0x3e>
    6f26:	61 70       	andi	r22, 0x01	; 1
    6f28:	70 70       	andi	r23, 0x00	; 0
    6f2a:	61 15       	cp	r22, r1
    6f2c:	71 05       	cpc	r23, r1
    6f2e:	19 f0       	breq	.+6      	; 0x6f36 <nrk_event_wait+0x5a>
		nrk_wait_until_nw();
    6f30:	0e 94 85 39 	call	0x730a	; 0x730a <nrk_wait_until_nw>
    6f34:	04 c0       	rjmp	.+8      	; 0x6f3e <nrk_event_wait+0x62>
	else
		nrk_wait_until_ticks(0);
    6f36:	80 e0       	ldi	r24, 0x00	; 0
    6f38:	90 e0       	ldi	r25, 0x00	; 0
    6f3a:	0e 94 e7 39 	call	0x73ce	; 0x73ce <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    6f3e:	e0 91 17 20 	lds	r30, 0x2017
    6f42:	f0 91 18 20 	lds	r31, 0x2018
    6f46:	21 89       	ldd	r18, Z+17	; 0x11
    6f48:	32 89       	ldd	r19, Z+18	; 0x12
    6f4a:	43 89       	ldd	r20, Z+19	; 0x13
    6f4c:	54 89       	ldd	r21, Z+20	; 0x14
}
    6f4e:	b9 01       	movw	r22, r18
    6f50:	ca 01       	movw	r24, r20
    6f52:	08 95       	ret

00006f54 <nrk_get_high_ready_task_ID>:
//#define TIME_PAD  2

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    6f54:	e0 91 0c 20 	lds	r30, 0x200C
    6f58:	f0 91 0d 20 	lds	r31, 0x200D
  return (_head_node->task_ID);
}
    6f5c:	80 81       	ld	r24, Z
    6f5e:	08 95       	ret

00006f60 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
  nrk_queue *ptr;
  ptr = _head_node;
    6f60:	e0 91 0c 20 	lds	r30, 0x200C
    6f64:	f0 91 0d 20 	lds	r31, 0x200D
  //nrk_kprintf (PSTR ("nrk_queue: "));
  while (ptr != NULL) {
    6f68:	03 c0       	rjmp	.+6      	; 0x6f70 <nrk_print_readyQ+0x10>
    //printf ("%d ", ptr->task_ID);
    ptr = ptr->Next;
    6f6a:	03 80       	ldd	r0, Z+3	; 0x03
    6f6c:	f4 81       	ldd	r31, Z+4	; 0x04
    6f6e:	e0 2d       	mov	r30, r0
void nrk_print_readyQ ()
{
  nrk_queue *ptr;
  ptr = _head_node;
  //nrk_kprintf (PSTR ("nrk_queue: "));
  while (ptr != NULL) {
    6f70:	30 97       	sbiw	r30, 0x00	; 0
    6f72:	d9 f7       	brne	.-10     	; 0x6f6a <nrk_print_readyQ+0xa>
    //printf ("%d ", ptr->task_ID);
    ptr = ptr->Next;
  }
  //nrk_kprintf (PSTR ("\n\r"));
}
    6f74:	08 95       	ret

00006f76 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    6f76:	df 92       	push	r13
    6f78:	ef 92       	push	r14
    6f7a:	ff 92       	push	r15
    6f7c:	0f 93       	push	r16
    6f7e:	1f 93       	push	r17
    6f80:	cf 93       	push	r28
    6f82:	df 93       	push	r29
  nrk_queue *NextNode;
  nrk_queue *CurNode;

  //printf( "nrk_add_to_readyQ %d\n",task_ID );
  // nrk_queue full
  if (_free_node == NULL) {
    6f84:	e0 91 4e 1f 	lds	r30, 0x1F4E
    6f88:	f0 91 4f 1f 	lds	r31, 0x1F4F
    6f8c:	30 97       	sbiw	r30, 0x00	; 0
    6f8e:	09 f4       	brne	.+2      	; 0x6f92 <nrk_add_to_readyQ+0x1c>
    6f90:	99 c0       	rjmp	.+306    	; 0x70c4 <nrk_add_to_readyQ+0x14e>
    return;
  }


  NextNode = _head_node;
    6f92:	60 91 0c 20 	lds	r22, 0x200C
    6f96:	70 91 0d 20 	lds	r23, 0x200D
  CurNode = _free_node;

  if (_head_node != NULL) {
    6f9a:	61 15       	cp	r22, r1
    6f9c:	71 05       	cpc	r23, r1
    6f9e:	19 f4       	brne	.+6      	; 0x6fa6 <nrk_add_to_readyQ+0x30>
    6fa0:	a0 e0       	ldi	r26, 0x00	; 0
    6fa2:	b0 e0       	ldi	r27, 0x00	; 0
    6fa4:	55 c0       	rjmp	.+170    	; 0x7050 <nrk_add_to_readyQ+0xda>
    6fa6:	db 01       	movw	r26, r22

    while (NextNode != NULL) {
      if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
        if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    6fa8:	48 2f       	mov	r20, r24
    6faa:	55 27       	eor	r21, r21
    6fac:	47 fd       	sbrc	r20, 7
    6fae:	50 95       	com	r21
    6fb0:	9a 01       	movw	r18, r20
    6fb2:	15 e0       	ldi	r17, 0x05	; 5
    6fb4:	22 0f       	add	r18, r18
    6fb6:	33 1f       	adc	r19, r19
    6fb8:	1a 95       	dec	r17
    6fba:	e1 f7       	brne	.-8      	; 0x6fb4 <nrk_add_to_readyQ+0x3e>
    6fbc:	24 0f       	add	r18, r20
    6fbe:	35 1f       	adc	r19, r21
    6fc0:	20 5b       	subi	r18, 0xB0	; 176
    6fc2:	30 4e       	sbci	r19, 0xE0	; 224
    6fc4:	89 01       	movw	r16, r18
    6fc6:	06 5f       	subi	r16, 0xF6	; 246
    6fc8:	1f 4f       	sbci	r17, 0xFF	; 255
            nrk_task_TCB[task_ID].task_prio)
          break;
      if (nrk_task_TCB[task_ID].elevated_prio_flag)
    6fca:	44 e0       	ldi	r20, 0x04	; 4
    6fcc:	e4 2e       	mov	r14, r20
    6fce:	f1 2c       	mov	r15, r1
    6fd0:	e2 0e       	add	r14, r18
    6fd2:	f3 1e       	adc	r15, r19
        if (nrk_task_TCB[NextNode->task_ID].task_prio <
    6fd4:	25 5f       	subi	r18, 0xF5	; 245
    6fd6:	3f 4f       	sbci	r19, 0xFF	; 255
  CurNode = _free_node;

  if (_head_node != NULL) {

    while (NextNode != NULL) {
      if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    6fd8:	4c 91       	ld	r20, X
    6fda:	50 e0       	ldi	r21, 0x00	; 0
    6fdc:	ea 01       	movw	r28, r20
    6fde:	95 e0       	ldi	r25, 0x05	; 5
    6fe0:	cc 0f       	add	r28, r28
    6fe2:	dd 1f       	adc	r29, r29
    6fe4:	9a 95       	dec	r25
    6fe6:	e1 f7       	brne	.-8      	; 0x6fe0 <nrk_add_to_readyQ+0x6a>
    6fe8:	c4 0f       	add	r28, r20
    6fea:	d5 1f       	adc	r29, r21
    6fec:	c0 5b       	subi	r28, 0xB0	; 176
    6fee:	d0 4e       	sbci	r29, 0xE0	; 224
    6ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    6ff2:	99 23       	and	r25, r25
    6ff4:	29 f0       	breq	.+10     	; 0x7000 <nrk_add_to_readyQ+0x8a>
        if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    6ff6:	db 84       	ldd	r13, Y+11	; 0x0b
    6ff8:	e8 01       	movw	r28, r16
    6ffa:	98 81       	ld	r25, Y
    6ffc:	d9 16       	cp	r13, r25
    6ffe:	40 f1       	brcs	.+80     	; 0x7050 <nrk_add_to_readyQ+0xda>
            nrk_task_TCB[task_ID].task_prio)
          break;
      if (nrk_task_TCB[task_ID].elevated_prio_flag)
    7000:	e7 01       	movw	r28, r14
    7002:	98 81       	ld	r25, Y
    7004:	99 23       	and	r25, r25
    7006:	79 f0       	breq	.+30     	; 0x7026 <nrk_add_to_readyQ+0xb0>
        if (nrk_task_TCB[NextNode->task_ID].task_prio <
    7008:	ea 01       	movw	r28, r20
    700a:	95 e0       	ldi	r25, 0x05	; 5
    700c:	cc 0f       	add	r28, r28
    700e:	dd 1f       	adc	r29, r29
    7010:	9a 95       	dec	r25
    7012:	e1 f7       	brne	.-8      	; 0x700c <nrk_add_to_readyQ+0x96>
    7014:	c4 0f       	add	r28, r20
    7016:	d5 1f       	adc	r29, r21
    7018:	c0 5b       	subi	r28, 0xB0	; 176
    701a:	d0 4e       	sbci	r29, 0xE0	; 224
    701c:	da 84       	ldd	r13, Y+10	; 0x0a
    701e:	e9 01       	movw	r28, r18
    7020:	98 81       	ld	r25, Y
    7022:	d9 16       	cp	r13, r25
    7024:	a8 f0       	brcs	.+42     	; 0x7050 <nrk_add_to_readyQ+0xda>
            nrk_task_TCB[task_ID].task_prio_ceil)
          break;
      if (nrk_task_TCB[NextNode->task_ID].task_prio <
    7026:	ea 01       	movw	r28, r20
    7028:	95 e0       	ldi	r25, 0x05	; 5
    702a:	cc 0f       	add	r28, r28
    702c:	dd 1f       	adc	r29, r29
    702e:	9a 95       	dec	r25
    7030:	e1 f7       	brne	.-8      	; 0x702a <nrk_add_to_readyQ+0xb4>
    7032:	c4 0f       	add	r28, r20
    7034:	d5 1f       	adc	r29, r21
    7036:	c0 5b       	subi	r28, 0xB0	; 176
    7038:	d0 4e       	sbci	r29, 0xE0	; 224
    703a:	4a 85       	ldd	r20, Y+10	; 0x0a
    703c:	e8 01       	movw	r28, r16
    703e:	98 81       	ld	r25, Y
    7040:	49 17       	cp	r20, r25
    7042:	30 f0       	brcs	.+12     	; 0x7050 <nrk_add_to_readyQ+0xda>
          nrk_task_TCB[task_ID].task_prio)
        break;

      NextNode = NextNode->Next;
    7044:	13 96       	adiw	r26, 0x03	; 3
    7046:	0d 90       	ld	r0, X+
    7048:	bc 91       	ld	r27, X
    704a:	a0 2d       	mov	r26, r0
  NextNode = _head_node;
  CurNode = _free_node;

  if (_head_node != NULL) {

    while (NextNode != NULL) {
    704c:	10 97       	sbiw	r26, 0x00	; 0
    704e:	21 f6       	brne	.-120    	; 0x6fd8 <nrk_add_to_readyQ+0x62>
    // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
    // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2 

  }

  CurNode->task_ID = task_ID;
    7050:	80 83       	st	Z, r24
  _free_node = _free_node->Next;
    7052:	c3 81       	ldd	r28, Z+3	; 0x03
    7054:	d4 81       	ldd	r29, Z+4	; 0x04
    7056:	d0 93 4f 1f 	sts	0x1F4F, r29
    705a:	c0 93 4e 1f 	sts	0x1F4E, r28

  if (NextNode == _head_node) {
    705e:	a6 17       	cp	r26, r22
    7060:	b7 07       	cpc	r27, r23
    7062:	b1 f4       	brne	.+44     	; 0x7090 <nrk_add_to_readyQ+0x11a>
    //at start
    if (_head_node != NULL) {
    7064:	10 97       	sbiw	r26, 0x00	; 0
    7066:	49 f0       	breq	.+18     	; 0x707a <nrk_add_to_readyQ+0x104>
      CurNode->Next = _head_node;
    7068:	b4 83       	std	Z+4, r27	; 0x04
    706a:	a3 83       	std	Z+3, r26	; 0x03
      CurNode->Prev = NULL;
    706c:	12 82       	std	Z+2, r1	; 0x02
    706e:	11 82       	std	Z+1, r1	; 0x01
      _head_node->Prev = CurNode;
    7070:	12 96       	adiw	r26, 0x02	; 2
    7072:	fc 93       	st	X, r31
    7074:	ee 93       	st	-X, r30
    7076:	11 97       	sbiw	r26, 0x01	; 1
    7078:	06 c0       	rjmp	.+12     	; 0x7086 <nrk_add_to_readyQ+0x110>
    }
    else {
      CurNode->Next = NULL;
    707a:	14 82       	std	Z+4, r1	; 0x04
    707c:	13 82       	std	Z+3, r1	; 0x03
      CurNode->Prev = NULL;
    707e:	12 82       	std	Z+2, r1	; 0x02
    7080:	11 82       	std	Z+1, r1	; 0x01
      _free_node->Prev = CurNode;
    7082:	fa 83       	std	Y+2, r31	; 0x02
    7084:	e9 83       	std	Y+1, r30	; 0x01
    }
    _head_node = CurNode;
    7086:	f0 93 0d 20 	sts	0x200D, r31
    708a:	e0 93 0c 20 	sts	0x200C, r30
    708e:	1a c0       	rjmp	.+52     	; 0x70c4 <nrk_add_to_readyQ+0x14e>
    7090:	11 96       	adiw	r26, 0x01	; 1
    7092:	8d 91       	ld	r24, X+
    7094:	9c 91       	ld	r25, X
    7096:	12 97       	sbiw	r26, 0x02	; 2

  }
  else {
    if (NextNode != _free_node) {
    7098:	ac 17       	cp	r26, r28
    709a:	bd 07       	cpc	r27, r29
    709c:	59 f0       	breq	.+22     	; 0x70b4 <nrk_add_to_readyQ+0x13e>
      // Insert  in middle

      CurNode->Prev = NextNode->Prev;
    709e:	92 83       	std	Z+2, r25	; 0x02
    70a0:	81 83       	std	Z+1, r24	; 0x01
      CurNode->Next = NextNode;
    70a2:	b4 83       	std	Z+4, r27	; 0x04
    70a4:	a3 83       	std	Z+3, r26	; 0x03
      (NextNode->Prev)->Next = CurNode;
    70a6:	11 96       	adiw	r26, 0x01	; 1
    70a8:	cd 91       	ld	r28, X+
    70aa:	dc 91       	ld	r29, X
    70ac:	12 97       	sbiw	r26, 0x02	; 2
    70ae:	fc 83       	std	Y+4, r31	; 0x04
    70b0:	eb 83       	std	Y+3, r30	; 0x03
    70b2:	04 c0       	rjmp	.+8      	; 0x70bc <nrk_add_to_readyQ+0x146>
      NextNode->Prev = CurNode;
    }
    else {
      //insert at end
      CurNode->Next = NULL;
    70b4:	14 82       	std	Z+4, r1	; 0x04
    70b6:	13 82       	std	Z+3, r1	; 0x03
      CurNode->Prev = _free_node->Prev;
    70b8:	92 83       	std	Z+2, r25	; 0x02
    70ba:	81 83       	std	Z+1, r24	; 0x01
      _free_node->Prev = CurNode;
    70bc:	12 96       	adiw	r26, 0x02	; 2
    70be:	fc 93       	st	X, r31
    70c0:	ee 93       	st	-X, r30
    70c2:	11 97       	sbiw	r26, 0x01	; 1
    }

  }

}
    70c4:	df 91       	pop	r29
    70c6:	cf 91       	pop	r28
    70c8:	1f 91       	pop	r17
    70ca:	0f 91       	pop	r16
    70cc:	ff 90       	pop	r15
    70ce:	ef 90       	pop	r14
    70d0:	df 90       	pop	r13
    70d2:	08 95       	ret

000070d4 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    70d4:	cf 93       	push	r28
    70d6:	df 93       	push	r29
     }
   */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

  if (_head_node == NULL)
    70d8:	e0 91 0c 20 	lds	r30, 0x200C
    70dc:	f0 91 0d 20 	lds	r31, 0x200D
    70e0:	30 97       	sbiw	r30, 0x00	; 0
    70e2:	09 f4       	brne	.+2      	; 0x70e6 <nrk_rem_from_readyQ+0x12>
    70e4:	4d c0       	rjmp	.+154    	; 0x7180 <nrk_rem_from_readyQ+0xac>
    return;

  CurNode = _head_node;

  if (_head_node->task_ID == task_ID) {
    70e6:	48 2f       	mov	r20, r24
    70e8:	55 27       	eor	r21, r21
    70ea:	47 fd       	sbrc	r20, 7
    70ec:	50 95       	com	r21
    70ee:	80 81       	ld	r24, Z
    70f0:	90 e0       	ldi	r25, 0x00	; 0
    70f2:	84 17       	cp	r24, r20
    70f4:	95 07       	cpc	r25, r21
    70f6:	79 f4       	brne	.+30     	; 0x7116 <nrk_rem_from_readyQ+0x42>
    //REmove from start
    _head_node = _head_node->Next;
    70f8:	a3 81       	ldd	r26, Z+3	; 0x03
    70fa:	b4 81       	ldd	r27, Z+4	; 0x04
    70fc:	b0 93 0d 20 	sts	0x200D, r27
    7100:	a0 93 0c 20 	sts	0x200C, r26
    _head_node->Prev = NULL;
    7104:	12 96       	adiw	r26, 0x02	; 2
    7106:	1c 92       	st	X, r1
    7108:	1e 92       	st	-X, r1
    710a:	11 97       	sbiw	r26, 0x01	; 1
    710c:	0e c0       	rjmp	.+28     	; 0x712a <nrk_rem_from_readyQ+0x56>
  }
  else {
    while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
      CurNode = CurNode->Next;
    710e:	e2 2f       	mov	r30, r18
    7110:	f9 2f       	mov	r31, r25
    //REmove from start
    _head_node = _head_node->Next;
    _head_node->Prev = NULL;
  }
  else {
    while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    7112:	30 97       	sbiw	r30, 0x00	; 0
    7114:	a9 f1       	breq	.+106    	; 0x7180 <nrk_rem_from_readyQ+0xac>
    7116:	60 81       	ld	r22, Z
    7118:	70 e0       	ldi	r23, 0x00	; 0
    711a:	23 81       	ldd	r18, Z+3	; 0x03
    711c:	94 81       	ldd	r25, Z+4	; 0x04
    711e:	64 17       	cp	r22, r20
    7120:	75 07       	cpc	r23, r21
    7122:	a9 f7       	brne	.-22     	; 0x710e <nrk_rem_from_readyQ+0x3a>
    7124:	20 c0       	rjmp	.+64     	; 0x7166 <nrk_rem_from_readyQ+0x92>
      return;


    (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    if (CurNode->Next != NULL)
      (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    7126:	ba 83       	std	Y+2, r27	; 0x02
    7128:	a9 83       	std	Y+1, r26	; 0x01
  }



  // Add to free list
  if (_free_node == NULL) {
    712a:	a0 91 4e 1f 	lds	r26, 0x1F4E
    712e:	b0 91 4f 1f 	lds	r27, 0x1F4F
    7132:	10 97       	sbiw	r26, 0x00	; 0
    7134:	39 f4       	brne	.+14     	; 0x7144 <nrk_rem_from_readyQ+0x70>
    _free_node = CurNode;
    7136:	f0 93 4f 1f 	sts	0x1F4F, r31
    713a:	e0 93 4e 1f 	sts	0x1F4E, r30
    _free_node->Next = NULL;
    713e:	14 82       	std	Z+4, r1	; 0x04
    7140:	13 82       	std	Z+3, r1	; 0x03
    7142:	0a c0       	rjmp	.+20     	; 0x7158 <nrk_rem_from_readyQ+0x84>
  }
  else {
    CurNode->Next = _free_node;
    7144:	b4 83       	std	Z+4, r27	; 0x04
    7146:	a3 83       	std	Z+3, r26	; 0x03
    _free_node->Prev = CurNode;
    7148:	12 96       	adiw	r26, 0x02	; 2
    714a:	fc 93       	st	X, r31
    714c:	ee 93       	st	-X, r30
    714e:	11 97       	sbiw	r26, 0x01	; 1
    _free_node = CurNode;
    7150:	f0 93 4f 1f 	sts	0x1F4F, r31
    7154:	e0 93 4e 1f 	sts	0x1F4E, r30
  }
  _free_node->Prev = NULL;
    7158:	e0 91 4e 1f 	lds	r30, 0x1F4E
    715c:	f0 91 4f 1f 	lds	r31, 0x1F4F
    7160:	12 82       	std	Z+2, r1	; 0x02
    7162:	11 82       	std	Z+1, r1	; 0x01
    7164:	0d c0       	rjmp	.+26     	; 0x7180 <nrk_rem_from_readyQ+0xac>
      CurNode = CurNode->Next;
    if (CurNode == NULL)
      return;


    (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    7166:	a1 81       	ldd	r26, Z+1	; 0x01
    7168:	b2 81       	ldd	r27, Z+2	; 0x02
    716a:	13 96       	adiw	r26, 0x03	; 3
    716c:	2c 93       	st	X, r18
    716e:	13 97       	sbiw	r26, 0x03	; 3
    7170:	14 96       	adiw	r26, 0x04	; 4
    7172:	9c 93       	st	X, r25
    7174:	14 97       	sbiw	r26, 0x04	; 4
    if (CurNode->Next != NULL)
    7176:	c3 81       	ldd	r28, Z+3	; 0x03
    7178:	d4 81       	ldd	r29, Z+4	; 0x04
    717a:	20 97       	sbiw	r28, 0x00	; 0
    717c:	a1 f6       	brne	.-88     	; 0x7126 <nrk_rem_from_readyQ+0x52>
    717e:	d5 cf       	rjmp	.-86     	; 0x712a <nrk_rem_from_readyQ+0x56>
    CurNode->Next = _free_node;
    _free_node->Prev = CurNode;
    _free_node = CurNode;
  }
  _free_node->Prev = NULL;
}
    7180:	df 91       	pop	r29
    7182:	cf 91       	pop	r28
    7184:	08 95       	ret

00007186 <nrk_get_pid>:
  return NRK_OK;
}


uint8_t nrk_get_pid ()
{
    7186:	e0 91 17 20 	lds	r30, 0x2017
    718a:	f0 91 18 20 	lds	r31, 0x2018
  return nrk_cur_task_TCB->task_ID;
}
    718e:	80 85       	ldd	r24, Z+8	; 0x08
    7190:	08 95       	ret

00007192 <_nrk_wait_for_scheduler>:
inline void _nrk_wait_for_scheduler ()
{

  //TIMSK = BM (OCIE1A);
  do {
    nrk_idle ();                // wait for the interrupt to tick...
    7192:	0e 94 63 44 	call	0x88c6	; 0x88c6 <nrk_idle>
  } while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1);
    7196:	e0 91 17 20 	lds	r30, 0x2017
    719a:	f0 91 18 20 	lds	r31, 0x2018
    719e:	85 81       	ldd	r24, Z+5	; 0x05
    71a0:	88 23       	and	r24, r24
    71a2:	b9 f7       	brne	.-18     	; 0x7192 <_nrk_wait_for_scheduler>

  //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    71a4:	08 95       	ret

000071a6 <nrk_wait>:
  return NRK_OK;
}


int8_t nrk_wait (nrk_time_t t)
{
    71a6:	ef 92       	push	r14
    71a8:	ff 92       	push	r15
    71aa:	1f 93       	push	r17
    71ac:	df 93       	push	r29
    71ae:	cf 93       	push	r28
    71b0:	cd b7       	in	r28, 0x3d	; 61
    71b2:	de b7       	in	r29, 0x3e	; 62
    71b4:	28 97       	sbiw	r28, 0x08	; 8
    71b6:	0f b6       	in	r0, 0x3f	; 63
    71b8:	f8 94       	cli
    71ba:	de bf       	out	0x3e, r29	; 62
    71bc:	0f be       	out	0x3f, r0	; 63
    71be:	cd bf       	out	0x3d, r28	; 61
    71c0:	29 83       	std	Y+1, r18	; 0x01
    71c2:	3a 83       	std	Y+2, r19	; 0x02
    71c4:	4b 83       	std	Y+3, r20	; 0x03
    71c6:	5c 83       	std	Y+4, r21	; 0x04
    71c8:	6d 83       	std	Y+5, r22	; 0x05
    71ca:	7e 83       	std	Y+6, r23	; 0x06
    71cc:	8f 83       	std	Y+7, r24	; 0x07
    71ce:	98 87       	std	Y+8, r25	; 0x08
  uint8_t timer;
  uint16_t nw;

  nrk_stack_check ();
    71d0:	0e 94 46 34 	call	0x688c	; 0x688c <nrk_stack_check>

  nrk_int_disable ();
    71d4:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    71d8:	e0 91 17 20 	lds	r30, 0x2017
    71dc:	f0 91 18 20 	lds	r31, 0x2018
    71e0:	81 e0       	ldi	r24, 0x01	; 1
    71e2:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->num_periods = 1;
    71e4:	81 e0       	ldi	r24, 0x01	; 1
    71e6:	90 e0       	ldi	r25, 0x00	; 0
    71e8:	90 a3       	std	Z+32, r25	; 0x20
    71ea:	87 8f       	std	Z+31, r24	; 0x1f
  timer = _nrk_os_timer_get ();
    71ec:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    71f0:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);
  nw = _nrk_time_to_ticks (t);
    71f2:	29 81       	ldd	r18, Y+1	; 0x01
    71f4:	3a 81       	ldd	r19, Y+2	; 0x02
    71f6:	4b 81       	ldd	r20, Y+3	; 0x03
    71f8:	5c 81       	ldd	r21, Y+4	; 0x04
    71fa:	6d 81       	ldd	r22, Y+5	; 0x05
    71fc:	7e 81       	ldd	r23, Y+6	; 0x06
    71fe:	8f 81       	ldd	r24, Y+7	; 0x07
    7200:	98 85       	ldd	r25, Y+8	; 0x08
    7202:	0e 94 44 3c 	call	0x7888	; 0x7888 <_nrk_time_to_ticks>
//printf( "t2 %u\n",nw );
  nrk_cur_task_TCB->next_wakeup = nw + timer;
    7206:	e0 91 17 20 	lds	r30, 0x2017
    720a:	f0 91 18 20 	lds	r31, 0x2018
    720e:	e1 2e       	mov	r14, r17
    7210:	ff 24       	eor	r15, r15
    7212:	8e 0d       	add	r24, r14
    7214:	9f 1d       	adc	r25, r15
    7216:	96 8b       	std	Z+22, r25	; 0x16
    7218:	85 8b       	std	Z+21, r24	; 0x15
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    721a:	18 3f       	cpi	r17, 0xF8	; 248
    721c:	78 f4       	brcc	.+30     	; 0x723c <nrk_wait+0x96>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    721e:	0e 94 b8 41 	call	0x8370	; 0x8370 <_nrk_get_next_wakeup>
    7222:	08 94       	sec
    7224:	e1 1c       	adc	r14, r1
    7226:	f1 1c       	adc	r15, r1
    7228:	90 e0       	ldi	r25, 0x00	; 0
    722a:	e8 16       	cp	r14, r24
    722c:	f9 06       	cpc	r15, r25
    722e:	34 f4       	brge	.+12     	; 0x723c <nrk_wait+0x96>
      timer += TIME_PAD;
    7230:	81 2f       	mov	r24, r17
    7232:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    7234:	80 93 c7 1d 	sts	0x1DC7, r24
      _nrk_set_next_wakeup (timer);
    7238:	0e 94 bc 41 	call	0x8378	; 0x8378 <_nrk_set_next_wakeup>
    }
  nrk_int_enable ();
    723c:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>

  _nrk_wait_for_scheduler ();
    7240:	0e 94 c9 38 	call	0x7192	; 0x7192 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    7244:	81 e0       	ldi	r24, 0x01	; 1
    7246:	28 96       	adiw	r28, 0x08	; 8
    7248:	0f b6       	in	r0, 0x3f	; 63
    724a:	f8 94       	cli
    724c:	de bf       	out	0x3e, r29	; 62
    724e:	0f be       	out	0x3f, r0	; 63
    7250:	cd bf       	out	0x3d, r28	; 61
    7252:	cf 91       	pop	r28
    7254:	df 91       	pop	r29
    7256:	1f 91       	pop	r17
    7258:	ff 90       	pop	r15
    725a:	ef 90       	pop	r14
    725c:	08 95       	ret

0000725e <nrk_wait_until>:
  //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    725e:	8f 92       	push	r8
    7260:	9f 92       	push	r9
    7262:	af 92       	push	r10
    7264:	bf 92       	push	r11
    7266:	cf 92       	push	r12
    7268:	df 92       	push	r13
    726a:	ef 92       	push	r14
    726c:	ff 92       	push	r15
    726e:	0f 93       	push	r16
    7270:	1f 93       	push	r17
    7272:	df 93       	push	r29
    7274:	cf 93       	push	r28
    7276:	cd b7       	in	r28, 0x3d	; 61
    7278:	de b7       	in	r29, 0x3e	; 62
    727a:	60 97       	sbiw	r28, 0x10	; 16
    727c:	0f b6       	in	r0, 0x3f	; 63
    727e:	f8 94       	cli
    7280:	de bf       	out	0x3e, r29	; 62
    7282:	0f be       	out	0x3f, r0	; 63
    7284:	cd bf       	out	0x3d, r28	; 61
    7286:	29 87       	std	Y+9, r18	; 0x09
    7288:	3a 87       	std	Y+10, r19	; 0x0a
    728a:	4b 87       	std	Y+11, r20	; 0x0b
    728c:	5c 87       	std	Y+12, r21	; 0x0c
    728e:	6d 87       	std	Y+13, r22	; 0x0d
    7290:	7e 87       	std	Y+14, r23	; 0x0e
    7292:	8f 87       	std	Y+15, r24	; 0x0f
    7294:	98 8b       	std	Y+16, r25	; 0x10
  nrk_time_t ct;
  uint8_t v;

  nrk_time_get (&ct);
    7296:	ce 01       	movw	r24, r28
    7298:	01 96       	adiw	r24, 0x01	; 1
    729a:	0e 94 88 3d 	call	0x7b10	; 0x7b10 <nrk_time_get>

  v = nrk_time_sub (&t, t, ct);
    729e:	ce 01       	movw	r24, r28
    72a0:	09 96       	adiw	r24, 0x09	; 9
    72a2:	09 85       	ldd	r16, Y+9	; 0x09
    72a4:	1a 85       	ldd	r17, Y+10	; 0x0a
    72a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    72a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    72aa:	4d 85       	ldd	r20, Y+13	; 0x0d
    72ac:	5e 85       	ldd	r21, Y+14	; 0x0e
    72ae:	6f 85       	ldd	r22, Y+15	; 0x0f
    72b0:	78 89       	ldd	r23, Y+16	; 0x10
    72b2:	89 80       	ldd	r8, Y+1	; 0x01
    72b4:	9a 80       	ldd	r9, Y+2	; 0x02
    72b6:	ab 80       	ldd	r10, Y+3	; 0x03
    72b8:	bc 80       	ldd	r11, Y+4	; 0x04
    72ba:	cd 80       	ldd	r12, Y+5	; 0x05
    72bc:	de 80       	ldd	r13, Y+6	; 0x06
    72be:	ef 80       	ldd	r14, Y+7	; 0x07
    72c0:	f8 84       	ldd	r15, Y+8	; 0x08
    72c2:	0e 94 0b 3b 	call	0x7616	; 0x7616 <nrk_time_sub>
  if (v == 0)
    72c6:	88 23       	and	r24, r24
    72c8:	11 f4       	brne	.+4      	; 0x72ce <nrk_wait_until+0x70>
    72ca:	8f ef       	ldi	r24, 0xFF	; 255
    72cc:	0b c0       	rjmp	.+22     	; 0x72e4 <nrk_wait_until+0x86>
//if(t.secs<ct.secs) return 0;
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
  nrk_wait (t);
    72ce:	29 85       	ldd	r18, Y+9	; 0x09
    72d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    72d2:	4b 85       	ldd	r20, Y+11	; 0x0b
    72d4:	5c 85       	ldd	r21, Y+12	; 0x0c
    72d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    72d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    72da:	8f 85       	ldd	r24, Y+15	; 0x0f
    72dc:	98 89       	ldd	r25, Y+16	; 0x10
    72de:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <nrk_wait>
    72e2:	81 e0       	ldi	r24, 0x01	; 1

  return NRK_OK;
}
    72e4:	60 96       	adiw	r28, 0x10	; 16
    72e6:	0f b6       	in	r0, 0x3f	; 63
    72e8:	f8 94       	cli
    72ea:	de bf       	out	0x3e, r29	; 62
    72ec:	0f be       	out	0x3f, r0	; 63
    72ee:	cd bf       	out	0x3d, r28	; 61
    72f0:	cf 91       	pop	r28
    72f2:	df 91       	pop	r29
    72f4:	1f 91       	pop	r17
    72f6:	0f 91       	pop	r16
    72f8:	ff 90       	pop	r15
    72fa:	ef 90       	pop	r14
    72fc:	df 90       	pop	r13
    72fe:	cf 90       	pop	r12
    7300:	bf 90       	pop	r11
    7302:	af 90       	pop	r10
    7304:	9f 90       	pop	r9
    7306:	8f 90       	pop	r8
    7308:	08 95       	ret

0000730a <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    730a:	1f 93       	push	r17
  uint8_t timer;
  nrk_int_disable ();
    730c:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    7310:	e0 91 17 20 	lds	r30, 0x2017
    7314:	f0 91 18 20 	lds	r31, 0x2018
    7318:	81 e0       	ldi	r24, 0x01	; 1
    731a:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->nw_flag = 1;
    731c:	86 83       	std	Z+6, r24	; 0x06
  timer = _nrk_os_timer_get ();
    731e:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    7322:	18 2f       	mov	r17, r24

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    7324:	88 3f       	cpi	r24, 0xF8	; 248
    7326:	80 f4       	brcc	.+32     	; 0x7348 <nrk_wait_until_nw+0x3e>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    7328:	0e 94 b8 41 	call	0x8370	; 0x8370 <_nrk_get_next_wakeup>
    732c:	21 2f       	mov	r18, r17
    732e:	30 e0       	ldi	r19, 0x00	; 0
    7330:	2f 5f       	subi	r18, 0xFF	; 255
    7332:	3f 4f       	sbci	r19, 0xFF	; 255
    7334:	90 e0       	ldi	r25, 0x00	; 0
    7336:	28 17       	cp	r18, r24
    7338:	39 07       	cpc	r19, r25
    733a:	34 f4       	brge	.+12     	; 0x7348 <nrk_wait_until_nw+0x3e>
      timer += TIME_PAD;
    733c:	81 2f       	mov	r24, r17
    733e:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    7340:	80 93 c7 1d 	sts	0x1DC7, r24
      _nrk_set_next_wakeup (timer);
    7344:	0e 94 bc 41 	call	0x8378	; 0x8378 <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    7348:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    734c:	0e 94 c9 38 	call	0x7192	; 0x7192 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    7350:	81 e0       	ldi	r24, 0x01	; 1
    7352:	1f 91       	pop	r17
    7354:	08 95       	ret

00007356 <nrk_set_next_wakeup>:
  _nrk_wait_for_scheduler ();
  return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    7356:	1f 93       	push	r17
    7358:	df 93       	push	r29
    735a:	cf 93       	push	r28
    735c:	cd b7       	in	r28, 0x3d	; 61
    735e:	de b7       	in	r29, 0x3e	; 62
    7360:	28 97       	sbiw	r28, 0x08	; 8
    7362:	0f b6       	in	r0, 0x3f	; 63
    7364:	f8 94       	cli
    7366:	de bf       	out	0x3e, r29	; 62
    7368:	0f be       	out	0x3f, r0	; 63
    736a:	cd bf       	out	0x3d, r28	; 61
    736c:	29 83       	std	Y+1, r18	; 0x01
    736e:	3a 83       	std	Y+2, r19	; 0x02
    7370:	4b 83       	std	Y+3, r20	; 0x03
    7372:	5c 83       	std	Y+4, r21	; 0x04
    7374:	6d 83       	std	Y+5, r22	; 0x05
    7376:	7e 83       	std	Y+6, r23	; 0x06
    7378:	8f 83       	std	Y+7, r24	; 0x07
    737a:	98 87       	std	Y+8, r25	; 0x08
  uint8_t timer;
  uint16_t nw;
  nrk_int_disable ();
    737c:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>
  timer = _nrk_os_timer_get ();
    7380:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    7384:	18 2f       	mov	r17, r24
  nw = _nrk_time_to_ticks (t);
    7386:	29 81       	ldd	r18, Y+1	; 0x01
    7388:	3a 81       	ldd	r19, Y+2	; 0x02
    738a:	4b 81       	ldd	r20, Y+3	; 0x03
    738c:	5c 81       	ldd	r21, Y+4	; 0x04
    738e:	6d 81       	ldd	r22, Y+5	; 0x05
    7390:	7e 81       	ldd	r23, Y+6	; 0x06
    7392:	8f 81       	ldd	r24, Y+7	; 0x07
    7394:	98 85       	ldd	r25, Y+8	; 0x08
    7396:	0e 94 44 3c 	call	0x7888	; 0x7888 <_nrk_time_to_ticks>
  if (nw <= TIME_PAD)
    739a:	83 30       	cpi	r24, 0x03	; 3
    739c:	91 05       	cpc	r25, r1
    739e:	10 f4       	brcc	.+4      	; 0x73a4 <nrk_set_next_wakeup+0x4e>
    73a0:	8f ef       	ldi	r24, 0xFF	; 255
    73a2:	0b c0       	rjmp	.+22     	; 0x73ba <nrk_set_next_wakeup+0x64>
    return NRK_ERROR;
  nrk_cur_task_TCB->next_wakeup = nw + timer;
    73a4:	e0 91 17 20 	lds	r30, 0x2017
    73a8:	f0 91 18 20 	lds	r31, 0x2018
    73ac:	81 0f       	add	r24, r17
    73ae:	91 1d       	adc	r25, r1
    73b0:	96 8b       	std	Z+22, r25	; 0x16
    73b2:	85 8b       	std	Z+21, r24	; 0x15
			_nrk_prev_timer_val=timer;
			_nrk_set_next_wakeup(timer);
		}
*/
//      nrk_cur_task_TCB->nw_flag=1;
  nrk_int_enable ();
    73b4:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>
    73b8:	81 e0       	ldi	r24, 0x01	; 1

  return NRK_OK;
}
    73ba:	28 96       	adiw	r28, 0x08	; 8
    73bc:	0f b6       	in	r0, 0x3f	; 63
    73be:	f8 94       	cli
    73c0:	de bf       	out	0x3e, r29	; 62
    73c2:	0f be       	out	0x3f, r0	; 63
    73c4:	cd bf       	out	0x3d, r28	; 61
    73c6:	cf 91       	pop	r28
    73c8:	df 91       	pop	r29
    73ca:	1f 91       	pop	r17
    73cc:	08 95       	ret

000073ce <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    73ce:	1f 93       	push	r17
    73d0:	cf 93       	push	r28
    73d2:	df 93       	push	r29
    73d4:	ec 01       	movw	r28, r24
  uint8_t timer;
  nrk_int_disable ();
    73d6:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    73da:	e0 91 17 20 	lds	r30, 0x2017
    73de:	f0 91 18 20 	lds	r31, 0x2018
    73e2:	81 e0       	ldi	r24, 0x01	; 1
    73e4:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->next_wakeup = ticks;
    73e6:	d6 8b       	std	Z+22, r29	; 0x16
    73e8:	c5 8b       	std	Z+21, r28	; 0x15
  timer = _nrk_os_timer_get ();
    73ea:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    73ee:	18 2f       	mov	r17, r24

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    73f0:	88 3f       	cpi	r24, 0xF8	; 248
    73f2:	80 f4       	brcc	.+32     	; 0x7414 <nrk_wait_until_ticks+0x46>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    73f4:	0e 94 b8 41 	call	0x8370	; 0x8370 <_nrk_get_next_wakeup>
    73f8:	21 2f       	mov	r18, r17
    73fa:	30 e0       	ldi	r19, 0x00	; 0
    73fc:	2f 5f       	subi	r18, 0xFF	; 255
    73fe:	3f 4f       	sbci	r19, 0xFF	; 255
    7400:	90 e0       	ldi	r25, 0x00	; 0
    7402:	28 17       	cp	r18, r24
    7404:	39 07       	cpc	r19, r25
    7406:	34 f4       	brge	.+12     	; 0x7414 <nrk_wait_until_ticks+0x46>
      timer += TIME_PAD;
    7408:	81 2f       	mov	r24, r17
    740a:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    740c:	80 93 c7 1d 	sts	0x1DC7, r24
      _nrk_set_next_wakeup (timer);
    7410:	0e 94 bc 41 	call	0x8378	; 0x8378 <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    7414:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    7418:	0e 94 c9 38 	call	0x7192	; 0x7192 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    741c:	81 e0       	ldi	r24, 0x01	; 1
    741e:	df 91       	pop	r29
    7420:	cf 91       	pop	r28
    7422:	1f 91       	pop	r17
    7424:	08 95       	ret

00007426 <nrk_wait_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    7426:	ef 92       	push	r14
    7428:	ff 92       	push	r15
    742a:	1f 93       	push	r17
    742c:	cf 93       	push	r28
    742e:	df 93       	push	r29
    7430:	7c 01       	movw	r14, r24
  uint8_t timer;
  nrk_int_disable ();
    7432:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    7436:	e0 91 17 20 	lds	r30, 0x2017
    743a:	f0 91 18 20 	lds	r31, 0x2018
    743e:	81 e0       	ldi	r24, 0x01	; 1
    7440:	85 83       	std	Z+5, r24	; 0x05
  timer = _nrk_os_timer_get ();
    7442:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    7446:	18 2f       	mov	r17, r24
  nrk_cur_task_TCB->next_wakeup = ticks + timer;
    7448:	e0 91 17 20 	lds	r30, 0x2017
    744c:	f0 91 18 20 	lds	r31, 0x2018
    7450:	c8 2f       	mov	r28, r24
    7452:	d0 e0       	ldi	r29, 0x00	; 0
    7454:	ec 0e       	add	r14, r28
    7456:	fd 1e       	adc	r15, r29
    7458:	f6 8a       	std	Z+22, r15	; 0x16
    745a:	e5 8a       	std	Z+21, r14	; 0x15

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    745c:	88 3f       	cpi	r24, 0xF8	; 248
    745e:	68 f4       	brcc	.+26     	; 0x747a <nrk_wait_ticks+0x54>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    7460:	0e 94 b8 41 	call	0x8370	; 0x8370 <_nrk_get_next_wakeup>
    7464:	21 96       	adiw	r28, 0x01	; 1
    7466:	90 e0       	ldi	r25, 0x00	; 0
    7468:	c8 17       	cp	r28, r24
    746a:	d9 07       	cpc	r29, r25
    746c:	34 f4       	brge	.+12     	; 0x747a <nrk_wait_ticks+0x54>
      timer += TIME_PAD;
    746e:	81 2f       	mov	r24, r17
    7470:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    7472:	80 93 c7 1d 	sts	0x1DC7, r24
      _nrk_set_next_wakeup (timer);
    7476:	0e 94 bc 41 	call	0x8378	; 0x8378 <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    747a:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    747e:	0e 94 c9 38 	call	0x7192	; 0x7192 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    7482:	81 e0       	ldi	r24, 0x01	; 1
    7484:	df 91       	pop	r29
    7486:	cf 91       	pop	r28
    7488:	1f 91       	pop	r17
    748a:	ff 90       	pop	r15
    748c:	ef 90       	pop	r14
    748e:	08 95       	ret

00007490 <nrk_wait_until_next_n_periods>:
  _nrk_wait_for_scheduler ();
  return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    7490:	1f 93       	push	r17
    7492:	cf 93       	push	r28
    7494:	df 93       	push	r29
    7496:	ec 01       	movw	r28, r24
  uint8_t timer;

  nrk_stack_check ();
    7498:	0e 94 46 34 	call	0x688c	; 0x688c <nrk_stack_check>

  if (p == 0)
    749c:	20 97       	sbiw	r28, 0x00	; 0
    749e:	11 f4       	brne	.+4      	; 0x74a4 <nrk_wait_until_next_n_periods+0x14>
    74a0:	c1 e0       	ldi	r28, 0x01	; 1
    74a2:	d0 e0       	ldi	r29, 0x00	; 0
    p = 1;
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
  nrk_int_disable ();
    74a4:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    74a8:	e0 91 17 20 	lds	r30, 0x2017
    74ac:	f0 91 18 20 	lds	r31, 0x2018
    74b0:	81 e0       	ldi	r24, 0x01	; 1
    74b2:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->num_periods = p;
    74b4:	d0 a3       	std	Z+32, r29	; 0x20
    74b6:	c7 8f       	std	Z+31, r28	; 0x1f
  timer = _nrk_os_timer_get ();
    74b8:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    74bc:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    74be:	88 3f       	cpi	r24, 0xF8	; 248
    74c0:	80 f4       	brcc	.+32     	; 0x74e2 <nrk_wait_until_next_n_periods+0x52>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    74c2:	0e 94 b8 41 	call	0x8370	; 0x8370 <_nrk_get_next_wakeup>
    74c6:	21 2f       	mov	r18, r17
    74c8:	30 e0       	ldi	r19, 0x00	; 0
    74ca:	2f 5f       	subi	r18, 0xFF	; 255
    74cc:	3f 4f       	sbci	r19, 0xFF	; 255
    74ce:	90 e0       	ldi	r25, 0x00	; 0
    74d0:	28 17       	cp	r18, r24
    74d2:	39 07       	cpc	r19, r25
    74d4:	34 f4       	brge	.+12     	; 0x74e2 <nrk_wait_until_next_n_periods+0x52>
      timer += TIME_PAD;
    74d6:	81 2f       	mov	r24, r17
    74d8:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    74da:	80 93 c7 1d 	sts	0x1DC7, r24
      _nrk_set_next_wakeup (timer);
    74de:	0e 94 bc 41 	call	0x8378	; 0x8378 <_nrk_set_next_wakeup>
    }

  nrk_int_enable ();
    74e2:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>

  _nrk_wait_for_scheduler ();
    74e6:	0e 94 c9 38 	call	0x7192	; 0x7192 <_nrk_wait_for_scheduler>

  return NRK_OK;
}
    74ea:	81 e0       	ldi	r24, 0x01	; 1
    74ec:	df 91       	pop	r29
    74ee:	cf 91       	pop	r28
    74f0:	1f 91       	pop	r17
    74f2:	08 95       	ret

000074f4 <nrk_wait_until_next_period>:
  nrk_wait_until_next_period ();
  return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    74f4:	1f 93       	push	r17
  uint8_t timer;

  nrk_stack_check ();
    74f6:	0e 94 46 34 	call	0x688c	; 0x688c <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
  nrk_int_disable ();
    74fa:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>
  nrk_cur_task_TCB->num_periods = 1;
    74fe:	e0 91 17 20 	lds	r30, 0x2017
    7502:	f0 91 18 20 	lds	r31, 0x2018
    7506:	81 e0       	ldi	r24, 0x01	; 1
    7508:	90 e0       	ldi	r25, 0x00	; 0
    750a:	90 a3       	std	Z+32, r25	; 0x20
    750c:	87 8f       	std	Z+31, r24	; 0x1f
  nrk_cur_task_TCB->suspend_flag = 1;
    750e:	81 e0       	ldi	r24, 0x01	; 1
    7510:	85 83       	std	Z+5, r24	; 0x05
  timer = _nrk_os_timer_get ();
    7512:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    7516:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;
//printf("1st next wakeup is %d.\n\r",_nrk_get_next_wakeup ());
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    7518:	88 3f       	cpi	r24, 0xF8	; 248
    751a:	80 f4       	brcc	.+32     	; 0x753c <nrk_wait_until_next_period+0x48>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    751c:	0e 94 b8 41 	call	0x8370	; 0x8370 <_nrk_get_next_wakeup>
    7520:	21 2f       	mov	r18, r17
    7522:	30 e0       	ldi	r19, 0x00	; 0
    7524:	2f 5f       	subi	r18, 0xFF	; 255
    7526:	3f 4f       	sbci	r19, 0xFF	; 255
    7528:	90 e0       	ldi	r25, 0x00	; 0
    752a:	28 17       	cp	r18, r24
    752c:	39 07       	cpc	r19, r25
    752e:	34 f4       	brge	.+12     	; 0x753c <nrk_wait_until_next_period+0x48>
      timer += TIME_PAD;
    7530:	81 2f       	mov	r24, r17
    7532:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    7534:	80 93 c7 1d 	sts	0x1DC7, r24
	//printf("1st timer is %d.\n\r", timer);
      _nrk_set_next_wakeup (timer);
    7538:	0e 94 bc 41 	call	0x8378	; 0x8378 <_nrk_set_next_wakeup>
    }
	//printf("2nd timer is %d. next wakeup is %d.\n\r", _nrk_os_timer_get (),_nrk_get_next_wakeup ());
  nrk_int_enable ();
    753c:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>
  _nrk_wait_for_scheduler ();
    7540:	0e 94 c9 38 	call	0x7192	; 0x7192 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    7544:	81 e0       	ldi	r24, 0x01	; 1
    7546:	1f 91       	pop	r17
    7548:	08 95       	ret

0000754a <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
  nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    754a:	e0 91 17 20 	lds	r30, 0x2017
    754e:	f0 91 18 20 	lds	r31, 0x2018
    7552:	80 85       	ldd	r24, Z+8	; 0x08
    7554:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <nrk_rem_from_readyQ>
  nrk_cur_task_TCB->task_state = FINISHED;
    7558:	e0 91 17 20 	lds	r30, 0x2017
    755c:	f0 91 18 20 	lds	r31, 0x2018
    7560:	84 e0       	ldi	r24, 0x04	; 4
    7562:	81 87       	std	Z+9, r24	; 0x09

  // HAHA, there is NO next period...
  nrk_wait_until_next_period ();
    7564:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <nrk_wait_until_next_period>
  return NRK_OK;
}
    7568:	81 e0       	ldi	r24, 0x01	; 1
    756a:	08 95       	ret

0000756c <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    756c:	ef 92       	push	r14
    756e:	ff 92       	push	r15
    7570:	0f 93       	push	r16
    7572:	1f 93       	push	r17
    7574:	cf 93       	push	r28
    7576:	df 93       	push	r29
    7578:	ec 01       	movw	r28, r24
  uint8_t rtype;
  void *topOfStackPtr;

  topOfStackPtr =
    (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);
    757a:	69 81       	ldd	r22, Y+1	; 0x01
    757c:	7a 81       	ldd	r23, Y+2	; 0x02
    757e:	4b 81       	ldd	r20, Y+3	; 0x03
    7580:	5c 81       	ldd	r21, Y+4	; 0x04
    7582:	8d 81       	ldd	r24, Y+5	; 0x05
    7584:	9e 81       	ldd	r25, Y+6	; 0x06
    7586:	0e 94 72 44 	call	0x88e4	; 0x88e4 <nrk_task_stk_init>
    758a:	bc 01       	movw	r22, r24

  //printf("activate %d\n",(int)Task.task_ID);
  if (Task->FirstActivation == TRUE) {
    758c:	8f 81       	ldd	r24, Y+7	; 0x07
    758e:	88 23       	and	r24, r24
    7590:	69 f0       	breq	.+26     	; 0x75ac <nrk_activate_task+0x40>
    rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    7592:	4b 81       	ldd	r20, Y+3	; 0x03
    7594:	5c 81       	ldd	r21, Y+4	; 0x04
    7596:	ce 01       	movw	r24, r28
    7598:	20 e0       	ldi	r18, 0x00	; 0
    759a:	30 e0       	ldi	r19, 0x00	; 0
    759c:	00 e0       	ldi	r16, 0x00	; 0
    759e:	10 e0       	ldi	r17, 0x00	; 0
    75a0:	ee 24       	eor	r14, r14
    75a2:	ff 24       	eor	r15, r15
    75a4:	0e 94 d6 30 	call	0x61ac	; 0x61ac <nrk_TCB_init>
    Task->FirstActivation = FALSE;
    75a8:	1f 82       	std	Y+7, r1	; 0x07
    75aa:	15 c0       	rjmp	.+42     	; 0x75d6 <nrk_activate_task+0x6a>

  }
  else {
    if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    75ac:	88 81       	ld	r24, Y
    75ae:	99 27       	eor	r25, r25
    75b0:	87 fd       	sbrc	r24, 7
    75b2:	90 95       	com	r25
    75b4:	fc 01       	movw	r30, r24
    75b6:	25 e0       	ldi	r18, 0x05	; 5
    75b8:	ee 0f       	add	r30, r30
    75ba:	ff 1f       	adc	r31, r31
    75bc:	2a 95       	dec	r18
    75be:	e1 f7       	brne	.-8      	; 0x75b8 <nrk_activate_task+0x4c>
    75c0:	e8 0f       	add	r30, r24
    75c2:	f9 1f       	adc	r31, r25
    75c4:	e0 5b       	subi	r30, 0xB0	; 176
    75c6:	f0 4e       	sbci	r31, 0xE0	; 224
    75c8:	81 85       	ldd	r24, Z+9	; 0x09
    75ca:	83 30       	cpi	r24, 0x03	; 3
    75cc:	11 f0       	breq	.+4      	; 0x75d2 <nrk_activate_task+0x66>
    75ce:	8f ef       	ldi	r24, 0xFF	; 255
    75d0:	1b c0       	rjmp	.+54     	; 0x7608 <nrk_activate_task+0x9c>
      return NRK_ERROR;
    //Re-init some parts of TCB

    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    75d2:	71 83       	std	Z+1, r23	; 0x01
    75d4:	60 83       	st	Z, r22
  // If Idle Task then Add to ready Q
  //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
  //nrk_add_to_readyQ(Task->task_ID);
  //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
  //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
  if (nrk_task_TCB[Task->task_ID].next_wakeup == 0) {
    75d6:	88 81       	ld	r24, Y
    75d8:	28 2f       	mov	r18, r24
    75da:	33 27       	eor	r19, r19
    75dc:	27 fd       	sbrc	r18, 7
    75de:	30 95       	com	r19
    75e0:	f9 01       	movw	r30, r18
    75e2:	05 e0       	ldi	r16, 0x05	; 5
    75e4:	ee 0f       	add	r30, r30
    75e6:	ff 1f       	adc	r31, r31
    75e8:	0a 95       	dec	r16
    75ea:	e1 f7       	brne	.-8      	; 0x75e4 <nrk_activate_task+0x78>
    75ec:	e2 0f       	add	r30, r18
    75ee:	f3 1f       	adc	r31, r19
    75f0:	e0 5b       	subi	r30, 0xB0	; 176
    75f2:	f0 4e       	sbci	r31, 0xE0	; 224
    75f4:	25 89       	ldd	r18, Z+21	; 0x15
    75f6:	36 89       	ldd	r19, Z+22	; 0x16
    75f8:	21 15       	cp	r18, r1
    75fa:	31 05       	cpc	r19, r1
    75fc:	21 f4       	brne	.+8      	; 0x7606 <nrk_activate_task+0x9a>
    nrk_task_TCB[Task->task_ID].task_state = READY;
    75fe:	92 e0       	ldi	r25, 0x02	; 2
    7600:	91 87       	std	Z+9, r25	; 0x09
    nrk_add_to_readyQ (Task->task_ID);
    7602:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <nrk_add_to_readyQ>
    7606:	81 e0       	ldi	r24, 0x01	; 1
  }

  return NRK_OK;
}
    7608:	df 91       	pop	r29
    760a:	cf 91       	pop	r28
    760c:	1f 91       	pop	r17
    760e:	0f 91       	pop	r16
    7610:	ff 90       	pop	r15
    7612:	ef 90       	pop	r14
    7614:	08 95       	ret

00007616 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
uint8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    7616:	8f 92       	push	r8
    7618:	9f 92       	push	r9
    761a:	af 92       	push	r10
    761c:	bf 92       	push	r11
    761e:	cf 92       	push	r12
    7620:	df 92       	push	r13
    7622:	ef 92       	push	r14
    7624:	ff 92       	push	r15
    7626:	0f 93       	push	r16
    7628:	1f 93       	push	r17
    762a:	df 93       	push	r29
    762c:	cf 93       	push	r28
    762e:	cd b7       	in	r28, 0x3d	; 61
    7630:	de b7       	in	r29, 0x3e	; 62
    7632:	60 97       	sbiw	r28, 0x10	; 16
    7634:	0f b6       	in	r0, 0x3f	; 63
    7636:	f8 94       	cli
    7638:	de bf       	out	0x3e, r29	; 62
    763a:	0f be       	out	0x3f, r0	; 63
    763c:	cd bf       	out	0x3d, r28	; 61
    763e:	fc 01       	movw	r30, r24
    7640:	09 83       	std	Y+1, r16	; 0x01
    7642:	1a 83       	std	Y+2, r17	; 0x02
    7644:	2b 83       	std	Y+3, r18	; 0x03
    7646:	3c 83       	std	Y+4, r19	; 0x04
    7648:	4d 83       	std	Y+5, r20	; 0x05
    764a:	5e 83       	std	Y+6, r21	; 0x06
    764c:	6f 83       	std	Y+7, r22	; 0x07
    764e:	78 87       	std	Y+8, r23	; 0x08
    7650:	89 86       	std	Y+9, r8	; 0x09
    7652:	9a 86       	std	Y+10, r9	; 0x0a
    7654:	ab 86       	std	Y+11, r10	; 0x0b
    7656:	bc 86       	std	Y+12, r11	; 0x0c
    7658:	cd 86       	std	Y+13, r12	; 0x0d
    765a:	de 86       	std	Y+14, r13	; 0x0e
    765c:	ef 86       	std	Y+15, r14	; 0x0f
    765e:	f8 8a       	std	Y+16, r15	; 0x10
    7660:	a9 80       	ldd	r10, Y+1	; 0x01
    7662:	ba 80       	ldd	r11, Y+2	; 0x02
    7664:	cb 80       	ldd	r12, Y+3	; 0x03
    7666:	dc 80       	ldd	r13, Y+4	; 0x04
    7668:	2d 81       	ldd	r18, Y+5	; 0x05
    766a:	3e 81       	ldd	r19, Y+6	; 0x06
    766c:	4f 81       	ldd	r20, Y+7	; 0x07
    766e:	58 85       	ldd	r21, Y+8	; 0x08
    7670:	e9 84       	ldd	r14, Y+9	; 0x09
    7672:	fa 84       	ldd	r15, Y+10	; 0x0a
    7674:	0b 85       	ldd	r16, Y+11	; 0x0b
    7676:	1c 85       	ldd	r17, Y+12	; 0x0c
    7678:	8d 85       	ldd	r24, Y+13	; 0x0d
    767a:	9e 85       	ldd	r25, Y+14	; 0x0e
    767c:	af 85       	ldd	r26, Y+15	; 0x0f
    767e:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return 0;; 
    7680:	ae 14       	cp	r10, r14
    7682:	bf 04       	cpc	r11, r15
    7684:	c0 06       	cpc	r12, r16
    7686:	d1 06       	cpc	r13, r17
    7688:	08 f4       	brcc	.+2      	; 0x768c <nrk_time_sub+0x76>
    768a:	40 c0       	rjmp	.+128    	; 0x770c <nrk_time_sub+0xf6>
if(low.secs==high.secs)
    768c:	ea 14       	cp	r14, r10
    768e:	fb 04       	cpc	r15, r11
    7690:	0c 05       	cpc	r16, r12
    7692:	1d 05       	cpc	r17, r13
    7694:	91 f4       	brne	.+36     	; 0x76ba <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return 0;  
    7696:	28 17       	cp	r18, r24
    7698:	39 07       	cpc	r19, r25
    769a:	4a 07       	cpc	r20, r26
    769c:	5b 07       	cpc	r21, r27
    769e:	b0 f1       	brcs	.+108    	; 0x770c <nrk_time_sub+0xf6>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    76a0:	28 1b       	sub	r18, r24
    76a2:	39 0b       	sbc	r19, r25
    76a4:	4a 0b       	sbc	r20, r26
    76a6:	5b 0b       	sbc	r21, r27
    76a8:	24 83       	std	Z+4, r18	; 0x04
    76aa:	35 83       	std	Z+5, r19	; 0x05
    76ac:	46 83       	std	Z+6, r20	; 0x06
    76ae:	57 83       	std	Z+7, r21	; 0x07
	result->secs=0;
    76b0:	10 82       	st	Z, r1
    76b2:	11 82       	std	Z+1, r1	; 0x01
    76b4:	12 82       	std	Z+2, r1	; 0x02
    76b6:	13 82       	std	Z+3, r1	; 0x03
    76b8:	1e c0       	rjmp	.+60     	; 0x76f6 <nrk_time_sub+0xe0>
	return 1;
	}
if(low.nano_secs > high.nano_secs)
    76ba:	28 17       	cp	r18, r24
    76bc:	39 07       	cpc	r19, r25
    76be:	4a 07       	cpc	r20, r26
    76c0:	5b 07       	cpc	r21, r27
    76c2:	d8 f4       	brcc	.+54     	; 0x76fa <nrk_time_sub+0xe4>
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    76c4:	08 94       	sec
    76c6:	a1 08       	sbc	r10, r1
    76c8:	b1 08       	sbc	r11, r1
    76ca:	c1 08       	sbc	r12, r1
    76cc:	d1 08       	sbc	r13, r1
    76ce:	ae 18       	sub	r10, r14
    76d0:	bf 08       	sbc	r11, r15
    76d2:	c0 0a       	sbc	r12, r16
    76d4:	d1 0a       	sbc	r13, r17
    76d6:	a0 82       	st	Z, r10
    76d8:	b1 82       	std	Z+1, r11	; 0x01
    76da:	c2 82       	std	Z+2, r12	; 0x02
    76dc:	d3 82       	std	Z+3, r13	; 0x03
	result->nano_secs=high.nano_secs-low.nano_secs;
    76de:	20 50       	subi	r18, 0x00	; 0
    76e0:	36 43       	sbci	r19, 0x36	; 54
    76e2:	45 46       	sbci	r20, 0x65	; 101
    76e4:	54 4c       	sbci	r21, 0xC4	; 196
    76e6:	28 1b       	sub	r18, r24
    76e8:	39 0b       	sbc	r19, r25
    76ea:	4a 0b       	sbc	r20, r26
    76ec:	5b 0b       	sbc	r21, r27
    76ee:	24 83       	std	Z+4, r18	; 0x04
    76f0:	35 83       	std	Z+5, r19	; 0x05
    76f2:	46 83       	std	Z+6, r20	; 0x06
    76f4:	57 83       	std	Z+7, r21	; 0x07
    76f6:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
    76f8:	0a c0       	rjmp	.+20     	; 0x770e <nrk_time_sub+0xf8>
}

result->secs=high.secs-low.secs;
    76fa:	ae 18       	sub	r10, r14
    76fc:	bf 08       	sbc	r11, r15
    76fe:	c0 0a       	sbc	r12, r16
    7700:	d1 0a       	sbc	r13, r17
    7702:	a0 82       	st	Z, r10
    7704:	b1 82       	std	Z+1, r11	; 0x01
    7706:	c2 82       	std	Z+2, r12	; 0x02
    7708:	d3 82       	std	Z+3, r13	; 0x03
    770a:	ed cf       	rjmp	.-38     	; 0x76e6 <nrk_time_sub+0xd0>
result->nano_secs=high.nano_secs-low.nano_secs;
return 1;
    770c:	80 e0       	ldi	r24, 0x00	; 0
}
    770e:	60 96       	adiw	r28, 0x10	; 16
    7710:	0f b6       	in	r0, 0x3f	; 63
    7712:	f8 94       	cli
    7714:	de bf       	out	0x3e, r29	; 62
    7716:	0f be       	out	0x3f, r0	; 63
    7718:	cd bf       	out	0x3d, r28	; 61
    771a:	cf 91       	pop	r28
    771c:	df 91       	pop	r29
    771e:	1f 91       	pop	r17
    7720:	0f 91       	pop	r16
    7722:	ff 90       	pop	r15
    7724:	ef 90       	pop	r14
    7726:	df 90       	pop	r13
    7728:	cf 90       	pop	r12
    772a:	bf 90       	pop	r11
    772c:	af 90       	pop	r10
    772e:	9f 90       	pop	r9
    7730:	8f 90       	pop	r8
    7732:	08 95       	ret

00007734 <nrk_time_add>:
/*
 * result = a+b
 *
 */
uint8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    7734:	8f 92       	push	r8
    7736:	9f 92       	push	r9
    7738:	af 92       	push	r10
    773a:	bf 92       	push	r11
    773c:	cf 92       	push	r12
    773e:	df 92       	push	r13
    7740:	ef 92       	push	r14
    7742:	ff 92       	push	r15
    7744:	0f 93       	push	r16
    7746:	1f 93       	push	r17
    7748:	df 93       	push	r29
    774a:	cf 93       	push	r28
    774c:	cd b7       	in	r28, 0x3d	; 61
    774e:	de b7       	in	r29, 0x3e	; 62
    7750:	60 97       	sbiw	r28, 0x10	; 16
    7752:	0f b6       	in	r0, 0x3f	; 63
    7754:	f8 94       	cli
    7756:	de bf       	out	0x3e, r29	; 62
    7758:	0f be       	out	0x3f, r0	; 63
    775a:	cd bf       	out	0x3d, r28	; 61
    775c:	fc 01       	movw	r30, r24
    775e:	09 83       	std	Y+1, r16	; 0x01
    7760:	1a 83       	std	Y+2, r17	; 0x02
    7762:	2b 83       	std	Y+3, r18	; 0x03
    7764:	3c 83       	std	Y+4, r19	; 0x04
    7766:	4d 83       	std	Y+5, r20	; 0x05
    7768:	5e 83       	std	Y+6, r21	; 0x06
    776a:	6f 83       	std	Y+7, r22	; 0x07
    776c:	78 87       	std	Y+8, r23	; 0x08
    776e:	89 86       	std	Y+9, r8	; 0x09
    7770:	9a 86       	std	Y+10, r9	; 0x0a
    7772:	ab 86       	std	Y+11, r10	; 0x0b
    7774:	bc 86       	std	Y+12, r11	; 0x0c
    7776:	cd 86       	std	Y+13, r12	; 0x0d
    7778:	de 86       	std	Y+14, r13	; 0x0e
    777a:	ef 86       	std	Y+15, r14	; 0x0f
    777c:	f8 8a       	std	Y+16, r15	; 0x10
    777e:	ed 80       	ldd	r14, Y+5	; 0x05
    7780:	fe 80       	ldd	r15, Y+6	; 0x06
    7782:	0f 81       	ldd	r16, Y+7	; 0x07
    7784:	18 85       	ldd	r17, Y+8	; 0x08
    7786:	8d 85       	ldd	r24, Y+13	; 0x0d
    7788:	9e 85       	ldd	r25, Y+14	; 0x0e
    778a:	af 85       	ldd	r26, Y+15	; 0x0f
    778c:	b8 89       	ldd	r27, Y+16	; 0x10
result->secs=a.secs+b.secs;
    778e:	29 85       	ldd	r18, Y+9	; 0x09
    7790:	3a 85       	ldd	r19, Y+10	; 0x0a
    7792:	4b 85       	ldd	r20, Y+11	; 0x0b
    7794:	5c 85       	ldd	r21, Y+12	; 0x0c
    7796:	a9 80       	ldd	r10, Y+1	; 0x01
    7798:	ba 80       	ldd	r11, Y+2	; 0x02
    779a:	cb 80       	ldd	r12, Y+3	; 0x03
    779c:	dc 80       	ldd	r13, Y+4	; 0x04
    779e:	2a 0d       	add	r18, r10
    77a0:	3b 1d       	adc	r19, r11
    77a2:	4c 1d       	adc	r20, r12
    77a4:	5d 1d       	adc	r21, r13
    77a6:	20 83       	st	Z, r18
    77a8:	31 83       	std	Z+1, r19	; 0x01
    77aa:	42 83       	std	Z+2, r20	; 0x02
    77ac:	53 83       	std	Z+3, r21	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    77ae:	8e 0d       	add	r24, r14
    77b0:	9f 1d       	adc	r25, r15
    77b2:	a0 1f       	adc	r26, r16
    77b4:	b1 1f       	adc	r27, r17
    77b6:	84 83       	std	Z+4, r24	; 0x04
    77b8:	95 83       	std	Z+5, r25	; 0x05
    77ba:	a6 83       	std	Z+6, r26	; 0x06
    77bc:	b7 83       	std	Z+7, r27	; 0x07
    77be:	10 c0       	rjmp	.+32     	; 0x77e0 <nrk_time_add+0xac>
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    77c0:	20 81       	ld	r18, Z
    77c2:	31 81       	ldd	r19, Z+1	; 0x01
    77c4:	42 81       	ldd	r20, Z+2	; 0x02
    77c6:	53 81       	ldd	r21, Z+3	; 0x03
    77c8:	2f 5f       	subi	r18, 0xFF	; 255
    77ca:	3f 4f       	sbci	r19, 0xFF	; 255
    77cc:	4f 4f       	sbci	r20, 0xFF	; 255
    77ce:	5f 4f       	sbci	r21, 0xFF	; 255
    77d0:	20 83       	st	Z, r18
    77d2:	31 83       	std	Z+1, r19	; 0x01
    77d4:	42 83       	std	Z+2, r20	; 0x02
    77d6:	53 83       	std	Z+3, r21	; 0x03
    77d8:	80 50       	subi	r24, 0x00	; 0
    77da:	9a 4c       	sbci	r25, 0xCA	; 202
    77dc:	aa 49       	sbci	r26, 0x9A	; 154
    77de:	bb 43       	sbci	r27, 0x3B	; 59
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    77e0:	80 30       	cpi	r24, 0x00	; 0
    77e2:	2a ec       	ldi	r18, 0xCA	; 202
    77e4:	92 07       	cpc	r25, r18
    77e6:	2a e9       	ldi	r18, 0x9A	; 154
    77e8:	a2 07       	cpc	r26, r18
    77ea:	2b e3       	ldi	r18, 0x3B	; 59
    77ec:	b2 07       	cpc	r27, r18
    77ee:	40 f7       	brcc	.-48     	; 0x77c0 <nrk_time_add+0x8c>
    77f0:	84 83       	std	Z+4, r24	; 0x04
    77f2:	95 83       	std	Z+5, r25	; 0x05
    77f4:	a6 83       	std	Z+6, r26	; 0x06
    77f6:	b7 83       	std	Z+7, r27	; 0x07
{
result->secs=a.secs+b.secs;
result->nano_secs=a.nano_secs+b.nano_secs;
nrk_time_compact_nanos(result);
return 1;
}
    77f8:	81 e0       	ldi	r24, 0x01	; 1
    77fa:	60 96       	adiw	r28, 0x10	; 16
    77fc:	0f b6       	in	r0, 0x3f	; 63
    77fe:	f8 94       	cli
    7800:	de bf       	out	0x3e, r29	; 62
    7802:	0f be       	out	0x3f, r0	; 63
    7804:	cd bf       	out	0x3d, r28	; 61
    7806:	cf 91       	pop	r28
    7808:	df 91       	pop	r29
    780a:	1f 91       	pop	r17
    780c:	0f 91       	pop	r16
    780e:	ff 90       	pop	r15
    7810:	ef 90       	pop	r14
    7812:	df 90       	pop	r13
    7814:	cf 90       	pop	r12
    7816:	bf 90       	pop	r11
    7818:	af 90       	pop	r10
    781a:	9f 90       	pop	r9
    781c:	8f 90       	pop	r8
    781e:	08 95       	ret

00007820 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    7820:	fc 01       	movw	r30, r24
    7822:	84 81       	ldd	r24, Z+4	; 0x04
    7824:	95 81       	ldd	r25, Z+5	; 0x05
    7826:	a6 81       	ldd	r26, Z+6	; 0x06
    7828:	b7 81       	ldd	r27, Z+7	; 0x07
  while(t->nano_secs>=NANOS_PER_SEC)
    782a:	10 c0       	rjmp	.+32     	; 0x784c <nrk_time_compact_nanos+0x2c>
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    782c:	20 81       	ld	r18, Z
    782e:	31 81       	ldd	r19, Z+1	; 0x01
    7830:	42 81       	ldd	r20, Z+2	; 0x02
    7832:	53 81       	ldd	r21, Z+3	; 0x03
    7834:	2f 5f       	subi	r18, 0xFF	; 255
    7836:	3f 4f       	sbci	r19, 0xFF	; 255
    7838:	4f 4f       	sbci	r20, 0xFF	; 255
    783a:	5f 4f       	sbci	r21, 0xFF	; 255
    783c:	20 83       	st	Z, r18
    783e:	31 83       	std	Z+1, r19	; 0x01
    7840:	42 83       	std	Z+2, r20	; 0x02
    7842:	53 83       	std	Z+3, r21	; 0x03
    7844:	80 50       	subi	r24, 0x00	; 0
    7846:	9a 4c       	sbci	r25, 0xCA	; 202
    7848:	aa 49       	sbci	r26, 0x9A	; 154
    784a:	bb 43       	sbci	r27, 0x3B	; 59
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    784c:	80 30       	cpi	r24, 0x00	; 0
    784e:	2a ec       	ldi	r18, 0xCA	; 202
    7850:	92 07       	cpc	r25, r18
    7852:	2a e9       	ldi	r18, 0x9A	; 154
    7854:	a2 07       	cpc	r26, r18
    7856:	2b e3       	ldi	r18, 0x3B	; 59
    7858:	b2 07       	cpc	r27, r18
    785a:	40 f7       	brcc	.-48     	; 0x782c <nrk_time_compact_nanos+0xc>
    785c:	84 83       	std	Z+4, r24	; 0x04
    785e:	95 83       	std	Z+5, r25	; 0x05
    7860:	a6 83       	std	Z+6, r26	; 0x06
    7862:	b7 83       	std	Z+7, r27	; 0x07
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    }
}
    7864:	08 95       	ret

00007866 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    7866:	60 93 0e 20 	sts	0x200E, r22
    786a:	70 93 0f 20 	sts	0x200F, r23
    786e:	80 93 10 20 	sts	0x2010, r24
    7872:	90 93 11 20 	sts	0x2011, r25
  nrk_system_time.nano_secs=nano_secs;
    7876:	20 93 12 20 	sts	0x2012, r18
    787a:	30 93 13 20 	sts	0x2013, r19
    787e:	40 93 14 20 	sts	0x2014, r20
    7882:	50 93 15 20 	sts	0x2015, r21
}
    7886:	08 95       	ret

00007888 <_nrk_time_to_ticks>:

uint16_t _nrk_time_to_ticks(nrk_time_t t)
{
    7888:	8f 92       	push	r8
    788a:	9f 92       	push	r9
    788c:	af 92       	push	r10
    788e:	bf 92       	push	r11
    7890:	cf 92       	push	r12
    7892:	df 92       	push	r13
    7894:	ef 92       	push	r14
    7896:	ff 92       	push	r15
    7898:	0f 93       	push	r16
    789a:	1f 93       	push	r17
    789c:	df 93       	push	r29
    789e:	cf 93       	push	r28
    78a0:	cd b7       	in	r28, 0x3d	; 61
    78a2:	de b7       	in	r29, 0x3e	; 62
    78a4:	28 97       	sbiw	r28, 0x08	; 8
    78a6:	0f b6       	in	r0, 0x3f	; 63
    78a8:	f8 94       	cli
    78aa:	de bf       	out	0x3e, r29	; 62
    78ac:	0f be       	out	0x3f, r0	; 63
    78ae:	cd bf       	out	0x3d, r28	; 61
    78b0:	29 83       	std	Y+1, r18	; 0x01
    78b2:	3a 83       	std	Y+2, r19	; 0x02
    78b4:	4b 83       	std	Y+3, r20	; 0x03
    78b6:	5c 83       	std	Y+4, r21	; 0x04
    78b8:	6d 83       	std	Y+5, r22	; 0x05
    78ba:	7e 83       	std	Y+6, r23	; 0x06
    78bc:	8f 83       	std	Y+7, r24	; 0x07
    78be:	98 87       	std	Y+8, r25	; 0x08
    78c0:	89 80       	ldd	r8, Y+1	; 0x01
    78c2:	9a 80       	ldd	r9, Y+2	; 0x02
    78c4:	ab 80       	ldd	r10, Y+3	; 0x03
    78c6:	bc 80       	ldd	r11, Y+4	; 0x04
    78c8:	cd 80       	ldd	r12, Y+5	; 0x05
    78ca:	de 80       	ldd	r13, Y+6	; 0x06
    78cc:	ef 80       	ldd	r14, Y+7	; 0x07
    78ce:	f8 84       	ldd	r15, Y+8	; 0x08
uint16_t ticks;
uint16_t tmp;
// FIXME: This will overflow

if(t.secs>=1)
    78d0:	81 14       	cp	r8, r1
    78d2:	91 04       	cpc	r9, r1
    78d4:	a1 04       	cpc	r10, r1
    78d6:	b1 04       	cpc	r11, r1
    78d8:	e9 f0       	breq	.+58     	; 0x7914 <_nrk_time_to_ticks+0x8c>
{
t.nano_secs+=NANOS_PER_SEC;
    78da:	80 e0       	ldi	r24, 0x00	; 0
    78dc:	9a ec       	ldi	r25, 0xCA	; 202
    78de:	aa e9       	ldi	r26, 0x9A	; 154
    78e0:	bb e3       	ldi	r27, 0x3B	; 59
    78e2:	c8 0e       	add	r12, r24
    78e4:	d9 1e       	adc	r13, r25
    78e6:	ea 1e       	adc	r14, r26
    78e8:	fb 1e       	adc	r15, r27
t.secs--;
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    78ea:	c7 01       	movw	r24, r14
    78ec:	b6 01       	movw	r22, r12
    78ee:	23 eb       	ldi	r18, 0xB3	; 179
    78f0:	36 ee       	ldi	r19, 0xE6	; 230
    78f2:	4e e0       	ldi	r20, 0x0E	; 14
    78f4:	50 e0       	ldi	r21, 0x00	; 0
    78f6:	0e 94 00 47 	call	0x8e00	; 0x8e00 <__udivmodsi4>
ticks+=t.secs*TICKS_PER_SEC;
    78fa:	08 94       	sec
    78fc:	81 08       	sbc	r8, r1
    78fe:	91 08       	sbc	r9, r1
    7900:	a1 08       	sbc	r10, r1
    7902:	b1 08       	sbc	r11, r1
    7904:	84 01       	movw	r16, r8
    7906:	10 2f       	mov	r17, r16
    7908:	00 27       	eor	r16, r16
    790a:	11 0f       	add	r17, r17
    790c:	11 0f       	add	r17, r17
    790e:	02 0f       	add	r16, r18
    7910:	13 1f       	adc	r17, r19
    7912:	09 c0       	rjmp	.+18     	; 0x7926 <_nrk_time_to_ticks+0x9e>
}else
{
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    7914:	c7 01       	movw	r24, r14
    7916:	b6 01       	movw	r22, r12
    7918:	23 eb       	ldi	r18, 0xB3	; 179
    791a:	36 ee       	ldi	r19, 0xE6	; 230
    791c:	4e e0       	ldi	r20, 0x0E	; 14
    791e:	50 e0       	ldi	r21, 0x00	; 0
    7920:	0e 94 00 47 	call	0x8e00	; 0x8e00 <__udivmodsi4>
    7924:	89 01       	movw	r16, r18
    7926:	b8 01       	movw	r22, r16
}

tmp=ticks;
while(tmp>TICKS_PER_SEC)tmp-=TICKS_PER_SEC;
    7928:	02 c0       	rjmp	.+4      	; 0x792e <_nrk_time_to_ticks+0xa6>
    792a:	60 50       	subi	r22, 0x00	; 0
    792c:	74 40       	sbci	r23, 0x04	; 4
    792e:	94 e0       	ldi	r25, 0x04	; 4
    7930:	61 30       	cpi	r22, 0x01	; 1
    7932:	79 07       	cpc	r23, r25
    7934:	d0 f7       	brcc	.-12     	; 0x792a <_nrk_time_to_ticks+0xa2>
t.secs=tmp*NANOS_PER_TICK;

if(t.nano_secs>t.secs+(NANOS_PER_TICK/2))ticks++;
    7936:	80 e0       	ldi	r24, 0x00	; 0
    7938:	90 e0       	ldi	r25, 0x00	; 0
    793a:	23 eb       	ldi	r18, 0xB3	; 179
    793c:	36 ee       	ldi	r19, 0xE6	; 230
    793e:	4e e0       	ldi	r20, 0x0E	; 14
    7940:	50 e0       	ldi	r21, 0x00	; 0
    7942:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <__mulsi3>
    7946:	67 5a       	subi	r22, 0xA7	; 167
    7948:	7c 48       	sbci	r23, 0x8C	; 140
    794a:	88 4f       	sbci	r24, 0xF8	; 248
    794c:	9f 4f       	sbci	r25, 0xFF	; 255
    794e:	6c 15       	cp	r22, r12
    7950:	7d 05       	cpc	r23, r13
    7952:	8e 05       	cpc	r24, r14
    7954:	9f 05       	cpc	r25, r15
    7956:	10 f4       	brcc	.+4      	; 0x795c <_nrk_time_to_ticks+0xd4>
    7958:	0f 5f       	subi	r16, 0xFF	; 255
    795a:	1f 4f       	sbci	r17, 0xFF	; 255

//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    795c:	c8 01       	movw	r24, r16
    795e:	28 96       	adiw	r28, 0x08	; 8
    7960:	0f b6       	in	r0, 0x3f	; 63
    7962:	f8 94       	cli
    7964:	de bf       	out	0x3e, r29	; 62
    7966:	0f be       	out	0x3f, r0	; 63
    7968:	cd bf       	out	0x3d, r28	; 61
    796a:	cf 91       	pop	r28
    796c:	df 91       	pop	r29
    796e:	1f 91       	pop	r17
    7970:	0f 91       	pop	r16
    7972:	ff 90       	pop	r15
    7974:	ef 90       	pop	r14
    7976:	df 90       	pop	r13
    7978:	cf 90       	pop	r12
    797a:	bf 90       	pop	r11
    797c:	af 90       	pop	r10
    797e:	9f 90       	pop	r9
    7980:	8f 90       	pop	r8
    7982:	08 95       	ret

00007984 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    7984:	ef 92       	push	r14
    7986:	ff 92       	push	r15
    7988:	0f 93       	push	r16
    798a:	1f 93       	push	r17
    798c:	df 93       	push	r29
    798e:	cf 93       	push	r28
    7990:	cd b7       	in	r28, 0x3d	; 61
    7992:	de b7       	in	r29, 0x3e	; 62
    7994:	28 97       	sbiw	r28, 0x08	; 8
    7996:	0f b6       	in	r0, 0x3f	; 63
    7998:	f8 94       	cli
    799a:	de bf       	out	0x3e, r29	; 62
    799c:	0f be       	out	0x3f, r0	; 63
    799e:	cd bf       	out	0x3d, r28	; 61
    79a0:	7b 01       	movw	r14, r22
    79a2:	8c 01       	movw	r16, r24
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    79a4:	73 70       	andi	r23, 0x03	; 3
    79a6:	80 70       	andi	r24, 0x00	; 0
    79a8:	90 70       	andi	r25, 0x00	; 0
    79aa:	23 eb       	ldi	r18, 0xB3	; 179
    79ac:	36 ee       	ldi	r19, 0xE6	; 230
    79ae:	4e e0       	ldi	r20, 0x0E	; 14
    79b0:	50 e0       	ldi	r21, 0x00	; 0
    79b2:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <__mulsi3>
    79b6:	6d 83       	std	Y+5, r22	; 0x05
    79b8:	7e 83       	std	Y+6, r23	; 0x06
    79ba:	8f 83       	std	Y+7, r24	; 0x07
    79bc:	98 87       	std	Y+8, r25	; 0x08
    79be:	a8 01       	movw	r20, r16
    79c0:	97 01       	movw	r18, r14
    79c2:	ea e0       	ldi	r30, 0x0A	; 10
    79c4:	56 95       	lsr	r21
    79c6:	47 95       	ror	r20
    79c8:	37 95       	ror	r19
    79ca:	27 95       	ror	r18
    79cc:	ea 95       	dec	r30
    79ce:	d1 f7       	brne	.-12     	; 0x79c4 <_nrk_ticks_to_time+0x40>
    79d0:	29 83       	std	Y+1, r18	; 0x01
    79d2:	3a 83       	std	Y+2, r19	; 0x02
    79d4:	4b 83       	std	Y+3, r20	; 0x03
    79d6:	5c 83       	std	Y+4, r21	; 0x04
    79d8:	3a 81       	ldd	r19, Y+2	; 0x02
    79da:	4b 81       	ldd	r20, Y+3	; 0x03
    79dc:	5c 81       	ldd	r21, Y+4	; 0x04
}
    79de:	28 96       	adiw	r28, 0x08	; 8
    79e0:	0f b6       	in	r0, 0x3f	; 63
    79e2:	f8 94       	cli
    79e4:	de bf       	out	0x3e, r29	; 62
    79e6:	0f be       	out	0x3f, r0	; 63
    79e8:	cd bf       	out	0x3d, r28	; 61
    79ea:	cf 91       	pop	r28
    79ec:	df 91       	pop	r29
    79ee:	1f 91       	pop	r17
    79f0:	0f 91       	pop	r16
    79f2:	ff 90       	pop	r15
    79f4:	ef 90       	pop	r14
    79f6:	08 95       	ret

000079f8 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t t)
{
    79f8:	af 92       	push	r10
    79fa:	bf 92       	push	r11
    79fc:	cf 92       	push	r12
    79fe:	df 92       	push	r13
    7a00:	ef 92       	push	r14
    7a02:	ff 92       	push	r15
    7a04:	0f 93       	push	r16
    7a06:	1f 93       	push	r17
    7a08:	df 93       	push	r29
    7a0a:	cf 93       	push	r28
    7a0c:	cd b7       	in	r28, 0x3d	; 61
    7a0e:	de b7       	in	r29, 0x3e	; 62
    7a10:	28 97       	sbiw	r28, 0x08	; 8
    7a12:	0f b6       	in	r0, 0x3f	; 63
    7a14:	f8 94       	cli
    7a16:	de bf       	out	0x3e, r29	; 62
    7a18:	0f be       	out	0x3f, r0	; 63
    7a1a:	cd bf       	out	0x3d, r28	; 61
    7a1c:	29 83       	std	Y+1, r18	; 0x01
    7a1e:	3a 83       	std	Y+2, r19	; 0x02
    7a20:	4b 83       	std	Y+3, r20	; 0x03
    7a22:	5c 83       	std	Y+4, r21	; 0x04
    7a24:	6d 83       	std	Y+5, r22	; 0x05
    7a26:	7e 83       	std	Y+6, r23	; 0x06
    7a28:	8f 83       	std	Y+7, r24	; 0x07
    7a2a:	98 87       	std	Y+8, r25	; 0x08
    7a2c:	e9 80       	ldd	r14, Y+1	; 0x01
    7a2e:	fa 80       	ldd	r15, Y+2	; 0x02
    7a30:	0b 81       	ldd	r16, Y+3	; 0x03
    7a32:	1c 81       	ldd	r17, Y+4	; 0x04
    7a34:	ad 80       	ldd	r10, Y+5	; 0x05
    7a36:	be 80       	ldd	r11, Y+6	; 0x06
    7a38:	cf 80       	ldd	r12, Y+7	; 0x07
    7a3a:	d8 84       	ldd	r13, Y+8	; 0x08
uint32_t ticks;
uint32_t tmp;

if(t.secs>=1)
    7a3c:	e1 14       	cp	r14, r1
    7a3e:	f1 04       	cpc	r15, r1
    7a40:	01 05       	cpc	r16, r1
    7a42:	11 05       	cpc	r17, r1
    7a44:	19 f1       	breq	.+70     	; 0x7a8c <_nrk_time_to_ticks_long+0x94>
{
t.nano_secs+=NANOS_PER_SEC;
    7a46:	80 e0       	ldi	r24, 0x00	; 0
    7a48:	9a ec       	ldi	r25, 0xCA	; 202
    7a4a:	aa e9       	ldi	r26, 0x9A	; 154
    7a4c:	bb e3       	ldi	r27, 0x3B	; 59
    7a4e:	a8 0e       	add	r10, r24
    7a50:	b9 1e       	adc	r11, r25
    7a52:	ca 1e       	adc	r12, r26
    7a54:	db 1e       	adc	r13, r27
t.secs--;
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    7a56:	c6 01       	movw	r24, r12
    7a58:	b5 01       	movw	r22, r10
    7a5a:	23 eb       	ldi	r18, 0xB3	; 179
    7a5c:	36 ee       	ldi	r19, 0xE6	; 230
    7a5e:	4e e0       	ldi	r20, 0x0E	; 14
    7a60:	50 e0       	ldi	r21, 0x00	; 0
    7a62:	0e 94 00 47 	call	0x8e00	; 0x8e00 <__udivmodsi4>
    7a66:	c9 01       	movw	r24, r18
    7a68:	da 01       	movw	r26, r20
ticks+=t.secs*TICKS_PER_SEC;
    7a6a:	08 94       	sec
    7a6c:	e1 08       	sbc	r14, r1
    7a6e:	f1 08       	sbc	r15, r1
    7a70:	01 09       	sbc	r16, r1
    7a72:	11 09       	sbc	r17, r1
    7a74:	fa e0       	ldi	r31, 0x0A	; 10
    7a76:	ee 0c       	add	r14, r14
    7a78:	ff 1c       	adc	r15, r15
    7a7a:	00 1f       	adc	r16, r16
    7a7c:	11 1f       	adc	r17, r17
    7a7e:	fa 95       	dec	r31
    7a80:	d1 f7       	brne	.-12     	; 0x7a76 <_nrk_time_to_ticks_long+0x7e>
    7a82:	e8 0e       	add	r14, r24
    7a84:	f9 1e       	adc	r15, r25
    7a86:	0a 1f       	adc	r16, r26
    7a88:	1b 1f       	adc	r17, r27
    7a8a:	0c c0       	rjmp	.+24     	; 0x7aa4 <_nrk_time_to_ticks_long+0xac>
}else
{
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    7a8c:	c6 01       	movw	r24, r12
    7a8e:	b5 01       	movw	r22, r10
    7a90:	23 eb       	ldi	r18, 0xB3	; 179
    7a92:	36 ee       	ldi	r19, 0xE6	; 230
    7a94:	4e e0       	ldi	r20, 0x0E	; 14
    7a96:	50 e0       	ldi	r21, 0x00	; 0
    7a98:	0e 94 00 47 	call	0x8e00	; 0x8e00 <__udivmodsi4>
    7a9c:	e2 2e       	mov	r14, r18
    7a9e:	f3 2e       	mov	r15, r19
    7aa0:	04 2f       	mov	r16, r20
    7aa2:	15 2f       	mov	r17, r21
    7aa4:	c8 01       	movw	r24, r16
    7aa6:	b7 01       	movw	r22, r14
}

tmp=ticks;
while(tmp>TICKS_PER_SEC)tmp-=TICKS_PER_SEC;
    7aa8:	04 c0       	rjmp	.+8      	; 0x7ab2 <_nrk_time_to_ticks_long+0xba>
    7aaa:	60 50       	subi	r22, 0x00	; 0
    7aac:	74 40       	sbci	r23, 0x04	; 4
    7aae:	80 40       	sbci	r24, 0x00	; 0
    7ab0:	90 40       	sbci	r25, 0x00	; 0
    7ab2:	61 30       	cpi	r22, 0x01	; 1
    7ab4:	a4 e0       	ldi	r26, 0x04	; 4
    7ab6:	7a 07       	cpc	r23, r26
    7ab8:	a0 e0       	ldi	r26, 0x00	; 0
    7aba:	8a 07       	cpc	r24, r26
    7abc:	a0 e0       	ldi	r26, 0x00	; 0
    7abe:	9a 07       	cpc	r25, r26
    7ac0:	a0 f7       	brcc	.-24     	; 0x7aaa <_nrk_time_to_ticks_long+0xb2>
t.secs=tmp*NANOS_PER_TICK;

if(t.nano_secs>t.secs+(NANOS_PER_TICK/2))ticks++;
    7ac2:	23 eb       	ldi	r18, 0xB3	; 179
    7ac4:	36 ee       	ldi	r19, 0xE6	; 230
    7ac6:	4e e0       	ldi	r20, 0x0E	; 14
    7ac8:	50 e0       	ldi	r21, 0x00	; 0
    7aca:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <__mulsi3>
    7ace:	67 5a       	subi	r22, 0xA7	; 167
    7ad0:	7c 48       	sbci	r23, 0x8C	; 140
    7ad2:	88 4f       	sbci	r24, 0xF8	; 248
    7ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ad6:	6a 15       	cp	r22, r10
    7ad8:	7b 05       	cpc	r23, r11
    7ada:	8c 05       	cpc	r24, r12
    7adc:	9d 05       	cpc	r25, r13
    7ade:	28 f4       	brcc	.+10     	; 0x7aea <_nrk_time_to_ticks_long+0xf2>
    7ae0:	08 94       	sec
    7ae2:	e1 1c       	adc	r14, r1
    7ae4:	f1 1c       	adc	r15, r1
    7ae6:	01 1d       	adc	r16, r1
    7ae8:	11 1d       	adc	r17, r1

//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    7aea:	b7 01       	movw	r22, r14
    7aec:	c8 01       	movw	r24, r16
    7aee:	28 96       	adiw	r28, 0x08	; 8
    7af0:	0f b6       	in	r0, 0x3f	; 63
    7af2:	f8 94       	cli
    7af4:	de bf       	out	0x3e, r29	; 62
    7af6:	0f be       	out	0x3f, r0	; 63
    7af8:	cd bf       	out	0x3d, r28	; 61
    7afa:	cf 91       	pop	r28
    7afc:	df 91       	pop	r29
    7afe:	1f 91       	pop	r17
    7b00:	0f 91       	pop	r16
    7b02:	ff 90       	pop	r15
    7b04:	ef 90       	pop	r14
    7b06:	df 90       	pop	r13
    7b08:	cf 90       	pop	r12
    7b0a:	bf 90       	pop	r11
    7b0c:	af 90       	pop	r10
    7b0e:	08 95       	ret

00007b10 <nrk_time_get>:
*******************************************************************************/
#include <nrk.h>
#include <nrk_timer.h>

void nrk_time_get(nrk_time_t *t)
{
    7b10:	ef 92       	push	r14
    7b12:	ff 92       	push	r15
    7b14:	0f 93       	push	r16
    7b16:	1f 93       	push	r17
    7b18:	cf 93       	push	r28
    7b1a:	df 93       	push	r29
    7b1c:	ec 01       	movw	r28, r24
 t->secs=nrk_system_time.secs;
    7b1e:	80 91 0e 20 	lds	r24, 0x200E
    7b22:	90 91 0f 20 	lds	r25, 0x200F
    7b26:	a0 91 10 20 	lds	r26, 0x2010
    7b2a:	b0 91 11 20 	lds	r27, 0x2011
    7b2e:	88 83       	st	Y, r24
    7b30:	99 83       	std	Y+1, r25	; 0x01
    7b32:	aa 83       	std	Y+2, r26	; 0x02
    7b34:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs=nrk_system_time.nano_secs;
    7b36:	e0 90 12 20 	lds	r14, 0x2012
    7b3a:	f0 90 13 20 	lds	r15, 0x2013
    7b3e:	00 91 14 20 	lds	r16, 0x2014
    7b42:	10 91 15 20 	lds	r17, 0x2015
    7b46:	ec 82       	std	Y+4, r14	; 0x04
    7b48:	fd 82       	std	Y+5, r15	; 0x05
    7b4a:	0e 83       	std	Y+6, r16	; 0x06
    7b4c:	1f 83       	std	Y+7, r17	; 0x07

   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    7b4e:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    7b52:	68 2f       	mov	r22, r24
    7b54:	70 e0       	ldi	r23, 0x00	; 0
    7b56:	80 e0       	ldi	r24, 0x00	; 0
    7b58:	90 e0       	ldi	r25, 0x00	; 0
    7b5a:	23 eb       	ldi	r18, 0xB3	; 179
    7b5c:	36 ee       	ldi	r19, 0xE6	; 230
    7b5e:	4e e0       	ldi	r20, 0x0E	; 14
    7b60:	50 e0       	ldi	r21, 0x00	; 0
    7b62:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <__mulsi3>
    7b66:	6e 0d       	add	r22, r14
    7b68:	7f 1d       	adc	r23, r15
    7b6a:	80 1f       	adc	r24, r16
    7b6c:	91 1f       	adc	r25, r17
    7b6e:	6c 83       	std	Y+4, r22	; 0x04
    7b70:	7d 83       	std	Y+5, r23	; 0x05
    7b72:	8e 83       	std	Y+6, r24	; 0x06
    7b74:	9f 83       	std	Y+7, r25	; 0x07
    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    7b76:	10 c0       	rjmp	.+32     	; 0x7b98 <nrk_time_get+0x88>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    7b78:	28 81       	ld	r18, Y
    7b7a:	39 81       	ldd	r19, Y+1	; 0x01
    7b7c:	4a 81       	ldd	r20, Y+2	; 0x02
    7b7e:	5b 81       	ldd	r21, Y+3	; 0x03
    7b80:	2f 5f       	subi	r18, 0xFF	; 255
    7b82:	3f 4f       	sbci	r19, 0xFF	; 255
    7b84:	4f 4f       	sbci	r20, 0xFF	; 255
    7b86:	5f 4f       	sbci	r21, 0xFF	; 255
    7b88:	28 83       	st	Y, r18
    7b8a:	39 83       	std	Y+1, r19	; 0x01
    7b8c:	4a 83       	std	Y+2, r20	; 0x02
    7b8e:	5b 83       	std	Y+3, r21	; 0x03
    7b90:	60 50       	subi	r22, 0x00	; 0
    7b92:	7a 4c       	sbci	r23, 0xCA	; 202
    7b94:	8a 49       	sbci	r24, 0x9A	; 154
    7b96:	9b 43       	sbci	r25, 0x3B	; 59
{
 t->secs=nrk_system_time.secs;
 t->nano_secs=nrk_system_time.nano_secs;

   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    7b98:	60 30       	cpi	r22, 0x00	; 0
    7b9a:	2a ec       	ldi	r18, 0xCA	; 202
    7b9c:	72 07       	cpc	r23, r18
    7b9e:	2a e9       	ldi	r18, 0x9A	; 154
    7ba0:	82 07       	cpc	r24, r18
    7ba2:	2b e3       	ldi	r18, 0x3B	; 59
    7ba4:	92 07       	cpc	r25, r18
    7ba6:	40 f7       	brcc	.-48     	; 0x7b78 <nrk_time_get+0x68>
    7ba8:	6c 83       	std	Y+4, r22	; 0x04
    7baa:	7d 83       	std	Y+5, r23	; 0x05
    7bac:	8e 83       	std	Y+6, r24	; 0x06
    7bae:	9f 83       	std	Y+7, r25	; 0x07
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    }
}
    7bb0:	df 91       	pop	r29
    7bb2:	cf 91       	pop	r28
    7bb4:	1f 91       	pop	r17
    7bb6:	0f 91       	pop	r16
    7bb8:	ff 90       	pop	r15
    7bba:	ef 90       	pop	r14
    7bbc:	08 95       	ret

00007bbe <nrk_idle_task>:
#include <nrk_platform_time.h>
#include <nrk_scheduler.h>
#include <stdio.h>

void nrk_idle_task()
{
    7bbe:	1f 93       	push	r17

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=1;
    7bc0:	11 e0       	ldi	r17, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    7bc2:	0e 94 46 34 	call	0x688c	; 0x688c <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    7bc6:	0e 94 b8 41 	call	0x8370	; 0x8370 <_nrk_get_next_wakeup>
    7bca:	8b 30       	cpi	r24, 0x0B	; 11
    7bcc:	10 f4       	brcc	.+4      	; 0x7bd2 <nrk_idle_task+0x14>
    {
	    _nrk_cpu_state=1;
    7bce:	10 93 0b 20 	sts	0x200B, r17
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=2;
	    nrk_sleep();
	#else
	    nrk_idle();
    7bd2:	0e 94 63 44 	call	0x88c6	; 0x88c6 <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    7bd6:	80 91 da 0e 	lds	r24, 0x0EDA
    7bda:	85 35       	cpi	r24, 0x55	; 85
    7bdc:	19 f0       	breq	.+6      	; 0x7be4 <nrk_idle_task+0x26>
    7bde:	88 e0       	ldi	r24, 0x08	; 8
    7be0:	0e 94 3d 33 	call	0x667a	; 0x667a <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    7be4:	80 91 7e 21 	lds	r24, 0x217E
    7be8:	85 35       	cpi	r24, 0x55	; 85
    7bea:	59 f3       	breq	.-42     	; 0x7bc2 <nrk_idle_task+0x4>
    7bec:	88 e0       	ldi	r24, 0x08	; 8
    7bee:	0e 94 3d 33 	call	0x667a	; 0x667a <nrk_error_add>
    7bf2:	e7 cf       	rjmp	.-50     	; 0x7bc2 <nrk_idle_task+0x4>

00007bf4 <_nrk_scheduler>:
// 750 measure to 100uS
// 800 * .125 = 100us
#define CONTEXT_SWAP_TIME_BOUND    750

void inline _nrk_scheduler()
{	   
    7bf4:	4f 92       	push	r4
    7bf6:	5f 92       	push	r5
    7bf8:	6f 92       	push	r6
    7bfa:	7f 92       	push	r7
    7bfc:	8f 92       	push	r8
    7bfe:	9f 92       	push	r9
    7c00:	af 92       	push	r10
    7c02:	bf 92       	push	r11
    7c04:	cf 92       	push	r12
    7c06:	df 92       	push	r13
    7c08:	ef 92       	push	r14
    7c0a:	ff 92       	push	r15
    7c0c:	0f 93       	push	r16
    7c0e:	1f 93       	push	r17
    7c10:	cf 93       	push	r28
    7c12:	df 93       	push	r29
	int8_t task_ID;
	uint16_t next_wake;
	uint16_t start_time_stamp;

nrk_int_disable();   // this should be removed...  Not needed
    7c14:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
	_nrk_high_speed_timer_reset();
    7c18:	0e 94 38 41 	call	0x8270	; 0x8270 <_nrk_high_speed_timer_reset>
	start_time_stamp=_nrk_high_speed_timer_get();
    7c1c:	0e 94 84 41 	call	0x8308	; 0x8308 <_nrk_high_speed_timer_get>
    7c20:	3c 01       	movw	r6, r24
#endif
	_nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    7c22:	8a ef       	ldi	r24, 0xFA	; 250
    7c24:	0e 94 bc 41 	call	0x8378	; 0x8378 <_nrk_set_next_wakeup>
	if(_nrk_cpu_state && _nrk_os_timer_get()>nrk_max_sleep_wakeup_time)
		nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
	#endif
	//while(_nrk_time_trigger>0)
	//{
	nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    7c28:	60 91 c7 1d 	lds	r22, 0x1DC7
    7c2c:	70 e0       	ldi	r23, 0x00	; 0
    7c2e:	80 e0       	ldi	r24, 0x00	; 0
    7c30:	90 e0       	ldi	r25, 0x00	; 0
    7c32:	23 eb       	ldi	r18, 0xB3	; 179
    7c34:	36 ee       	ldi	r19, 0xE6	; 230
    7c36:	4e e0       	ldi	r20, 0x0E	; 14
    7c38:	50 e0       	ldi	r21, 0x00	; 0
    7c3a:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <__mulsi3>
    7c3e:	7b 01       	movw	r14, r22
    7c40:	8c 01       	movw	r16, r24
    7c42:	80 91 12 20 	lds	r24, 0x2012
    7c46:	90 91 13 20 	lds	r25, 0x2013
    7c4a:	a0 91 14 20 	lds	r26, 0x2014
    7c4e:	b0 91 15 20 	lds	r27, 0x2015
    7c52:	e8 0e       	add	r14, r24
    7c54:	f9 1e       	adc	r15, r25
    7c56:	0a 1f       	adc	r16, r26
    7c58:	1b 1f       	adc	r17, r27
	nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    7c5a:	c8 01       	movw	r24, r16
    7c5c:	b7 01       	movw	r22, r14
    7c5e:	0e 94 00 47 	call	0x8e00	; 0x8e00 <__udivmodsi4>
    7c62:	e6 1a       	sub	r14, r22
    7c64:	f7 0a       	sbc	r15, r23
    7c66:	08 0b       	sbc	r16, r24
    7c68:	19 0b       	sbc	r17, r25
    7c6a:	80 91 0e 20 	lds	r24, 0x200E
    7c6e:	90 91 0f 20 	lds	r25, 0x200F
    7c72:	a0 91 10 20 	lds	r26, 0x2010
    7c76:	b0 91 11 20 	lds	r27, 0x2011
	  else
		_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
	}
	#endif
	
	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    7c7a:	16 c0       	rjmp	.+44     	; 0x7ca8 <_nrk_scheduler+0xb4>
	{
		nrk_system_time.nano_secs-=NANOS_PER_SEC;
    7c7c:	80 e0       	ldi	r24, 0x00	; 0
    7c7e:	96 e3       	ldi	r25, 0x36	; 54
    7c80:	a5 e6       	ldi	r26, 0x65	; 101
    7c82:	b4 ec       	ldi	r27, 0xC4	; 196
    7c84:	e8 0e       	add	r14, r24
    7c86:	f9 1e       	adc	r15, r25
    7c88:	0a 1f       	adc	r16, r26
    7c8a:	1b 1f       	adc	r17, r27
		nrk_system_time.secs++;
		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    7c8c:	c8 01       	movw	r24, r16
    7c8e:	b7 01       	movw	r22, r14
    7c90:	23 eb       	ldi	r18, 0xB3	; 179
    7c92:	36 ee       	ldi	r19, 0xE6	; 230
    7c94:	4e e0       	ldi	r20, 0x0E	; 14
    7c96:	50 e0       	ldi	r21, 0x00	; 0
    7c98:	0e 94 00 47 	call	0x8e00	; 0x8e00 <__udivmodsi4>
    7c9c:	e6 1a       	sub	r14, r22
    7c9e:	f7 0a       	sbc	r15, r23
    7ca0:	08 0b       	sbc	r16, r24
    7ca2:	19 0b       	sbc	r17, r25
    7ca4:	d6 01       	movw	r26, r12
    7ca6:	c5 01       	movw	r24, r10
    7ca8:	5c 01       	movw	r10, r24
    7caa:	6d 01       	movw	r12, r26
    7cac:	08 94       	sec
    7cae:	a1 1c       	adc	r10, r1
    7cb0:	b1 1c       	adc	r11, r1
    7cb2:	c1 1c       	adc	r12, r1
    7cb4:	d1 1c       	adc	r13, r1
	  else
		_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
	}
	#endif
	
	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    7cb6:	20 e0       	ldi	r18, 0x00	; 0
    7cb8:	e2 16       	cp	r14, r18
    7cba:	2a ec       	ldi	r18, 0xCA	; 202
    7cbc:	f2 06       	cpc	r15, r18
    7cbe:	2a e9       	ldi	r18, 0x9A	; 154
    7cc0:	02 07       	cpc	r16, r18
    7cc2:	2b e3       	ldi	r18, 0x3B	; 59
    7cc4:	12 07       	cpc	r17, r18
    7cc6:	d0 f6       	brcc	.-76     	; 0x7c7c <_nrk_scheduler+0x88>
    7cc8:	e0 92 12 20 	sts	0x2012, r14
    7ccc:	f0 92 13 20 	sts	0x2013, r15
    7cd0:	00 93 14 20 	sts	0x2014, r16
    7cd4:	10 93 15 20 	sts	0x2015, r17
    7cd8:	80 93 0e 20 	sts	0x200E, r24
    7cdc:	90 93 0f 20 	sts	0x200F, r25
    7ce0:	a0 93 10 20 	sts	0x2010, r26
    7ce4:	b0 93 11 20 	sts	0x2011, r27
		nrk_system_time.secs++;
		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
	}
	//  _nrk_time_trigger--;
	//}  
	if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    7ce8:	e0 91 17 20 	lds	r30, 0x2017
    7cec:	f0 91 18 20 	lds	r31, 0x2018
    7cf0:	85 81       	ldd	r24, Z+5	; 0x05
    7cf2:	88 23       	and	r24, r24
    7cf4:	b9 f0       	breq	.+46     	; 0x7d24 <_nrk_scheduler+0x130>
    7cf6:	81 85       	ldd	r24, Z+9	; 0x09
    7cf8:	84 30       	cpi	r24, 0x04	; 4
    7cfa:	a1 f0       	breq	.+40     	; 0x7d24 <_nrk_scheduler+0x130>
	{
	//	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		
		if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)  
    7cfc:	87 81       	ldd	r24, Z+7	; 0x07
    7cfe:	82 30       	cpi	r24, 0x02	; 2
    7d00:	29 f0       	breq	.+10     	; 0x7d0c <_nrk_scheduler+0x118>
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0) 
    7d02:	88 23       	and	r24, r24
    7d04:	41 f0       	breq	.+16     	; 0x7d16 <_nrk_scheduler+0x122>
    7d06:	86 81       	ldd	r24, Z+6	; 0x06
    7d08:	88 23       	and	r24, r24
    7d0a:	11 f4       	brne	.+4      	; 0x7d10 <_nrk_scheduler+0x11c>
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    7d0c:	85 e0       	ldi	r24, 0x05	; 5
    7d0e:	01 c0       	rjmp	.+2      	; 0x7d12 <_nrk_scheduler+0x11e>
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1) 
			nrk_cur_task_TCB->task_state = SUSPENDED;
    7d10:	83 e0       	ldi	r24, 0x03	; 3
    7d12:	81 87       	std	Z+9, r24	; 0x09
		
		if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)  
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0) 
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1) 
    7d14:	04 c0       	rjmp	.+8      	; 0x7d1e <_nrk_scheduler+0x12a>
			nrk_cur_task_TCB->task_state = SUSPENDED;
		else	
		{
			nrk_cur_task_TCB->task_state = SUSPENDED;
    7d16:	83 e0       	ldi	r24, 0x03	; 3
    7d18:	81 87       	std	Z+9, r24	; 0x09
			nrk_cur_task_TCB->event_suspend=0;
    7d1a:	17 82       	std	Z+7, r1	; 0x07
			nrk_cur_task_TCB->nw_flag=0;
    7d1c:	16 82       	std	Z+6, r1	; 0x06
		}
		nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    7d1e:	80 85       	ldd	r24, Z+8	; 0x08
    7d20:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <nrk_rem_from_readyQ>

	// Update cpu used value for ended task
	// If the task has used its reserve, suspend task
	// Don't disable IdleTask which is 0
	// Don't decrease cpu_remaining if reserve is 0 and hence disabled
	if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    7d24:	e0 91 17 20 	lds	r30, 0x2017
    7d28:	f0 91 18 20 	lds	r31, 0x2018
    7d2c:	85 8d       	ldd	r24, Z+29	; 0x1d
    7d2e:	96 8d       	ldd	r25, Z+30	; 0x1e
    7d30:	00 97       	sbiw	r24, 0x00	; 0
    7d32:	91 f1       	breq	.+100    	; 0x7d98 <_nrk_scheduler+0x1a4>
    7d34:	60 85       	ldd	r22, Z+8	; 0x08
    7d36:	66 23       	and	r22, r22
    7d38:	79 f1       	breq	.+94     	; 0x7d98 <_nrk_scheduler+0x1a4>
    7d3a:	81 85       	ldd	r24, Z+9	; 0x09
    7d3c:	84 30       	cpi	r24, 0x04	; 4
    7d3e:	61 f1       	breq	.+88     	; 0x7d98 <_nrk_scheduler+0x1a4>
	{
		if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    7d40:	21 8d       	ldd	r18, Z+25	; 0x19
    7d42:	32 8d       	ldd	r19, Z+26	; 0x1a
    7d44:	80 91 c7 1d 	lds	r24, 0x1DC7
    7d48:	90 e0       	ldi	r25, 0x00	; 0
    7d4a:	28 17       	cp	r18, r24
    7d4c:	39 07       	cpc	r19, r25
    7d4e:	50 f4       	brcc	.+20     	; 0x7d64 <_nrk_scheduler+0x170>
		{
			#ifdef NRK_STATS_TRACKER
			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
			#endif
			nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    7d50:	82 e0       	ldi	r24, 0x02	; 2
    7d52:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>
			nrk_cur_task_TCB->cpu_remaining=0;
    7d56:	e0 91 17 20 	lds	r30, 0x2017
    7d5a:	f0 91 18 20 	lds	r31, 0x2018
    7d5e:	12 8e       	std	Z+26, r1	; 0x1a
    7d60:	11 8e       	std	Z+25, r1	; 0x19
    7d62:	04 c0       	rjmp	.+8      	; 0x7d6c <_nrk_scheduler+0x178>
		}else
			nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    7d64:	28 1b       	sub	r18, r24
    7d66:	39 0b       	sbc	r19, r25
    7d68:	32 8f       	std	Z+26, r19	; 0x1a
    7d6a:	21 8f       	std	Z+25, r18	; 0x19

		task_ID= nrk_cur_task_TCB->task_ID;
    7d6c:	e0 91 17 20 	lds	r30, 0x2017
    7d70:	f0 91 18 20 	lds	r31, 0x2018
    7d74:	10 85       	ldd	r17, Z+8	; 0x08

		if (nrk_cur_task_TCB->cpu_remaining ==0 ) {
    7d76:	81 8d       	ldd	r24, Z+25	; 0x19
    7d78:	92 8d       	ldd	r25, Z+26	; 0x1a
    7d7a:	00 97       	sbiw	r24, 0x00	; 0
    7d7c:	69 f4       	brne	.+26     	; 0x7d98 <_nrk_scheduler+0x1a4>
			#ifdef NRK_STATS_TRACKER
			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
			#endif
			nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    7d7e:	83 e0       	ldi	r24, 0x03	; 3
    7d80:	61 2f       	mov	r22, r17
    7d82:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>
			nrk_cur_task_TCB->task_state = SUSPENDED;
    7d86:	e0 91 17 20 	lds	r30, 0x2017
    7d8a:	f0 91 18 20 	lds	r31, 0x2018
    7d8e:	83 e0       	ldi	r24, 0x03	; 3
    7d90:	81 87       	std	Z+9, r24	; 0x09
			nrk_rem_from_readyQ(task_ID);
    7d92:	81 2f       	mov	r24, r17
    7d94:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <nrk_rem_from_readyQ>
    7d98:	c5 e5       	ldi	r28, 0x55	; 85
    7d9a:	df e1       	ldi	r29, 0x1F	; 31
    7d9c:	f0 e6       	ldi	r31, 0x60	; 96
    7d9e:	ef 2e       	mov	r14, r31
    7da0:	fa ee       	ldi	r31, 0xEA	; 234
    7da2:	ff 2e       	mov	r15, r31
    7da4:	10 e0       	ldi	r17, 0x00	; 0
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					nrk_task_TCB[task_ID].num_periods=1;
    7da6:	e1 e0       	ldi	r30, 0x01	; 1
    7da8:	8e 2e       	mov	r8, r30
    7daa:	91 2c       	mov	r9, r1
				nrk_task_TCB[task_ID].nw_flag=0;
				nrk_task_TCB[task_ID].suspend_flag=0;
				if(nrk_task_TCB[task_ID].num_periods==1) 
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
					nrk_task_TCB[task_ID].task_state = READY;
    7dac:	02 e0       	ldi	r16, 0x02	; 2
		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
			// If a task needs to become READY, make it ready
			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
				// printf( "Adding back %d\n",task_ID );
				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    7dae:	71 e0       	ldi	r23, 0x01	; 1
    7db0:	a7 2e       	mov	r10, r23
    7db2:	b1 2c       	mov	r11, r1
    7db4:	c1 2c       	mov	r12, r1
    7db6:	d1 2c       	mov	r13, r1
	// Check I/O nrk_queues to add tasks with remaining cpu back...

	// Add eligable tasks back to the ready Queue
	// At the same time find the next earliest wakeup
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    7db8:	8b 81       	ldd	r24, Y+3	; 0x03
    7dba:	8f 3f       	cpi	r24, 0xFF	; 255
    7dbc:	09 f4       	brne	.+2      	; 0x7dc0 <_nrk_scheduler+0x1cc>
    7dbe:	7d c0       	rjmp	.+250    	; 0x7eba <_nrk_scheduler+0x2c6>
		nrk_task_TCB[task_ID].suspend_flag=0;
    7dc0:	18 82       	st	Y, r1
		if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    7dc2:	88 23       	and	r24, r24
    7dc4:	69 f1       	breq	.+90     	; 0x7e20 <_nrk_scheduler+0x22c>
    7dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    7dc8:	84 30       	cpi	r24, 0x04	; 4
    7dca:	51 f1       	breq	.+84     	; 0x7e20 <_nrk_scheduler+0x22c>
		{
			if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    7dcc:	28 89       	ldd	r18, Y+16	; 0x10
    7dce:	39 89       	ldd	r19, Y+17	; 0x11
    7dd0:	80 91 c7 1d 	lds	r24, 0x1DC7
    7dd4:	90 e0       	ldi	r25, 0x00	; 0
    7dd6:	28 17       	cp	r18, r24
    7dd8:	39 07       	cpc	r19, r25
    7dda:	28 f0       	brcs	.+10     	; 0x7de6 <_nrk_scheduler+0x1f2>
				nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    7ddc:	28 1b       	sub	r18, r24
    7dde:	39 0b       	sbc	r19, r25
    7de0:	39 8b       	std	Y+17, r19	; 0x11
    7de2:	28 8b       	std	Y+16, r18	; 0x10
    7de4:	02 c0       	rjmp	.+4      	; 0x7dea <_nrk_scheduler+0x1f6>
			else 
				nrk_task_TCB[task_ID].next_wakeup=0;
    7de6:	19 8a       	std	Y+17, r1	; 0x11
    7de8:	18 8a       	std	Y+16, r1	; 0x10
		
			// Do next period book keeping.
			// next_period needs to be set such that the period is kept consistent even if other
			// wait until functions are called.
			if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    7dea:	6a 89       	ldd	r22, Y+18	; 0x12
    7dec:	7b 89       	ldd	r23, Y+19	; 0x13
    7dee:	68 17       	cp	r22, r24
    7df0:	79 07       	cpc	r23, r25
    7df2:	28 f4       	brcc	.+10     	; 0x7dfe <_nrk_scheduler+0x20a>
				nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
			else {
				if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    7df4:	6e 89       	ldd	r22, Y+22	; 0x16
    7df6:	7f 89       	ldd	r23, Y+23	; 0x17
    7df8:	86 17       	cp	r24, r22
    7dfa:	97 07       	cpc	r25, r23
    7dfc:	28 f4       	brcc	.+10     	; 0x7e08 <_nrk_scheduler+0x214>
					nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    7dfe:	68 1b       	sub	r22, r24
    7e00:	79 0b       	sbc	r23, r25
    7e02:	7b 8b       	std	Y+19, r23	; 0x13
    7e04:	6a 8b       	std	Y+18, r22	; 0x12
    7e06:	04 c0       	rjmp	.+8      	; 0x7e10 <_nrk_scheduler+0x21c>
				else
					nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    7e08:	0e 94 d9 46 	call	0x8db2	; 0x8db2 <__udivmodhi4>
    7e0c:	9b 8b       	std	Y+19, r25	; 0x13
    7e0e:	8a 8b       	std	Y+18, r24	; 0x12
			}
			if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    7e10:	8a 89       	ldd	r24, Y+18	; 0x12
    7e12:	9b 89       	ldd	r25, Y+19	; 0x13
    7e14:	00 97       	sbiw	r24, 0x00	; 0
    7e16:	21 f4       	brne	.+8      	; 0x7e20 <_nrk_scheduler+0x22c>
    7e18:	8e 89       	ldd	r24, Y+22	; 0x16
    7e1a:	9f 89       	ldd	r25, Y+23	; 0x17
    7e1c:	9b 8b       	std	Y+19, r25	; 0x13
    7e1e:	8a 8b       	std	Y+18, r24	; 0x12
					
		}


		// Look for Next Task that Might Wakeup to interrupt current task
		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
    7e20:	8c 81       	ldd	r24, Y+4	; 0x04
    7e22:	83 30       	cpi	r24, 0x03	; 3
    7e24:	09 f0       	breq	.+2      	; 0x7e28 <_nrk_scheduler+0x234>
    7e26:	49 c0       	rjmp	.+146    	; 0x7eba <_nrk_scheduler+0x2c6>
			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
			// If a task needs to become READY, make it ready
			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
    7e28:	88 89       	ldd	r24, Y+16	; 0x10
    7e2a:	99 89       	ldd	r25, Y+17	; 0x11
    7e2c:	00 97       	sbiw	r24, 0x00	; 0
    7e2e:	e9 f5       	brne	.+122    	; 0x7eaa <_nrk_scheduler+0x2b6>
				// printf( "Adding back %d\n",task_ID );
				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    7e30:	8a 81       	ldd	r24, Y+2	; 0x02
    7e32:	88 23       	and	r24, r24
    7e34:	91 f0       	breq	.+36     	; 0x7e5a <_nrk_scheduler+0x266>
    7e36:	89 81       	ldd	r24, Y+1	; 0x01
    7e38:	88 23       	and	r24, r24
    7e3a:	79 f0       	breq	.+30     	; 0x7e5a <_nrk_scheduler+0x266>
    7e3c:	d6 01       	movw	r26, r12
    7e3e:	c5 01       	movw	r24, r10
    7e40:	00 90 07 20 	lds	r0, 0x2007
    7e44:	04 c0       	rjmp	.+8      	; 0x7e4e <_nrk_scheduler+0x25a>
    7e46:	88 0f       	add	r24, r24
    7e48:	99 1f       	adc	r25, r25
    7e4a:	aa 1f       	adc	r26, r26
    7e4c:	bb 1f       	adc	r27, r27
    7e4e:	0a 94       	dec	r0
    7e50:	d2 f7       	brpl	.-12     	; 0x7e46 <_nrk_scheduler+0x252>
    7e52:	8c 87       	std	Y+12, r24	; 0x0c
    7e54:	9d 87       	std	Y+13, r25	; 0x0d
    7e56:	ae 87       	std	Y+14, r26	; 0x0e
    7e58:	bf 87       	std	Y+15, r27	; 0x0f
				//if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
				nrk_task_TCB[task_ID].event_suspend=0;
    7e5a:	1a 82       	std	Y+2, r1	; 0x02
				nrk_task_TCB[task_ID].nw_flag=0;
    7e5c:	19 82       	std	Y+1, r1	; 0x01
				nrk_task_TCB[task_ID].suspend_flag=0;
    7e5e:	18 82       	st	Y, r1
				if(nrk_task_TCB[task_ID].num_periods==1) 
    7e60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7e62:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7e64:	28 8d       	ldd	r18, Y+24	; 0x18
    7e66:	39 8d       	ldd	r19, Y+25	; 0x19
    7e68:	81 30       	cpi	r24, 0x01	; 1
    7e6a:	91 05       	cpc	r25, r1
    7e6c:	59 f4       	brne	.+22     	; 0x7e84 <_nrk_scheduler+0x290>
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    7e6e:	3d 8b       	std	Y+21, r19	; 0x15
    7e70:	2c 8b       	std	Y+20, r18	; 0x14
					nrk_task_TCB[task_ID].task_state = READY;
    7e72:	0c 83       	std	Y+4, r16	; 0x04
					nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    7e74:	8a 89       	ldd	r24, Y+18	; 0x12
    7e76:	9b 89       	ldd	r25, Y+19	; 0x13
    7e78:	99 8b       	std	Y+17, r25	; 0x11
    7e7a:	88 8b       	std	Y+16, r24	; 0x10
					nrk_add_to_readyQ(task_ID);				
    7e7c:	81 2f       	mov	r24, r17
    7e7e:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <nrk_add_to_readyQ>
    7e82:	13 c0       	rjmp	.+38     	; 0x7eaa <_nrk_scheduler+0x2b6>
				} else 
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    7e84:	3d 8b       	std	Y+21, r19	; 0x15
    7e86:	2c 8b       	std	Y+20, r18	; 0x14
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    7e88:	01 97       	sbiw	r24, 0x01	; 1
    7e8a:	2e 89       	ldd	r18, Y+22	; 0x16
    7e8c:	3f 89       	ldd	r19, Y+23	; 0x17
    7e8e:	ac 01       	movw	r20, r24
    7e90:	42 9f       	mul	r20, r18
    7e92:	c0 01       	movw	r24, r0
    7e94:	43 9f       	mul	r20, r19
    7e96:	90 0d       	add	r25, r0
    7e98:	52 9f       	mul	r21, r18
    7e9a:	90 0d       	add	r25, r0
    7e9c:	11 24       	eor	r1, r1
    7e9e:	99 8b       	std	Y+17, r25	; 0x11
    7ea0:	88 8b       	std	Y+16, r24	; 0x10
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    7ea2:	9b 8b       	std	Y+19, r25	; 0x13
    7ea4:	8a 8b       	std	Y+18, r24	; 0x12
					nrk_task_TCB[task_ID].num_periods=1;
    7ea6:	9b 8e       	std	Y+27, r9	; 0x1b
    7ea8:	8a 8e       	std	Y+26, r8	; 0x1a
		//			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
		//			nrk_task_TCB[task_ID].num_periods=1; 
				}
			}

			if(nrk_task_TCB[task_ID].next_wakeup!=0 && 
    7eaa:	48 88       	ldd	r4, Y+16	; 0x10
    7eac:	59 88       	ldd	r5, Y+17	; 0x11
    7eae:	41 14       	cp	r4, r1
    7eb0:	51 04       	cpc	r5, r1
    7eb2:	19 f0       	breq	.+6      	; 0x7eba <_nrk_scheduler+0x2c6>
    7eb4:	4e 14       	cp	r4, r14
    7eb6:	5f 04       	cpc	r5, r15
    7eb8:	08 f0       	brcs	.+2      	; 0x7ebc <_nrk_scheduler+0x2c8>
    7eba:	27 01       	movw	r4, r14

	// Check I/O nrk_queues to add tasks with remaining cpu back...

	// Add eligable tasks back to the ready Queue
	// At the same time find the next earliest wakeup
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    7ebc:	1f 5f       	subi	r17, 0xFF	; 255
    7ebe:	a1 96       	adiw	r28, 0x21	; 33
    7ec0:	15 30       	cpi	r17, 0x05	; 5
    7ec2:	11 f0       	breq	.+4      	; 0x7ec8 <_nrk_scheduler+0x2d4>
    7ec4:	72 01       	movw	r14, r4
    7ec6:	78 cf       	rjmp	.-272    	; 0x7db8 <_nrk_scheduler+0x1c4>


	#ifdef NRK_STATS_TRACKER
		_nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
	#endif
	task_ID = nrk_get_high_ready_task_ID();  
    7ec8:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <nrk_get_high_ready_task_ID>
    7ecc:	18 2f       	mov	r17, r24
	nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    7ece:	99 27       	eor	r25, r25
    7ed0:	87 fd       	sbrc	r24, 7
    7ed2:	90 95       	com	r25
    7ed4:	fc 01       	movw	r30, r24
    7ed6:	65 e0       	ldi	r22, 0x05	; 5
    7ed8:	ee 0f       	add	r30, r30
    7eda:	ff 1f       	adc	r31, r31
    7edc:	6a 95       	dec	r22
    7ede:	e1 f7       	brne	.-8      	; 0x7ed8 <_nrk_scheduler+0x2e4>
    7ee0:	e8 0f       	add	r30, r24
    7ee2:	f9 1f       	adc	r31, r25
    7ee4:	e0 5b       	subi	r30, 0xB0	; 176
    7ee6:	f0 4e       	sbci	r31, 0xE0	; 224
    7ee8:	42 85       	ldd	r20, Z+10	; 0x0a
    7eea:	40 93 19 20 	sts	0x2019, r20
	nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    7eee:	81 e2       	ldi	r24, 0x21	; 33
    7ef0:	18 02       	muls	r17, r24
    7ef2:	c0 01       	movw	r24, r0
    7ef4:	11 24       	eor	r1, r1
    7ef6:	80 5b       	subi	r24, 0xB0	; 176
    7ef8:	90 4e       	sbci	r25, 0xE0	; 224
    7efa:	90 93 09 20 	sts	0x2009, r25
    7efe:	80 93 08 20 	sts	0x2008, r24
	// task_ID holds the highest priority READY task ID
	// So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time 

	// Now we pick the next wakeup (either the end of the current task, or the possible resume
	// of a suspended task) 
	if(task_ID!=NRK_IDLE_TASK_ID) 
    7f02:	11 23       	and	r17, r17
    7f04:	a1 f0       	breq	.+40     	; 0x7f2e <_nrk_scheduler+0x33a>
	{
		// You are a non-Idle Task
		if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    7f06:	25 8d       	ldd	r18, Z+29	; 0x1d
    7f08:	36 8d       	ldd	r19, Z+30	; 0x1e
    7f0a:	21 15       	cp	r18, r1
    7f0c:	31 05       	cpc	r19, r1
    7f0e:	51 f0       	breq	.+20     	; 0x7f24 <_nrk_scheduler+0x330>
    7f10:	21 8d       	ldd	r18, Z+25	; 0x19
    7f12:	32 8d       	ldd	r19, Z+26	; 0x1a
    7f14:	2a 3f       	cpi	r18, 0xFA	; 250
    7f16:	31 05       	cpc	r19, r1
    7f18:	28 f4       	brcc	.+10     	; 0x7f24 <_nrk_scheduler+0x330>
    7f1a:	24 15       	cp	r18, r4
    7f1c:	35 05       	cpc	r19, r5
    7f1e:	28 f5       	brcc	.+74     	; 0x7f6a <_nrk_scheduler+0x376>
    7f20:	29 01       	movw	r4, r18
    7f22:	23 c0       	rjmp	.+70     	; 0x7f6a <_nrk_scheduler+0x376>
    7f24:	5b ef       	ldi	r21, 0xFB	; 251
    7f26:	45 16       	cp	r4, r21
    7f28:	51 04       	cpc	r5, r1
    7f2a:	f8 f0       	brcs	.+62     	; 0x7f6a <_nrk_scheduler+0x376>
    7f2c:	17 c0       	rjmp	.+46     	; 0x7f5c <_nrk_scheduler+0x368>
		// Make sure you wake up from the idle task a little earlier
		// if you would go into deep sleep...
		// After waking from deep sleep, the next context swap must be at least
  		// NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time. 
			
		if(next_wake>NRK_SLEEP_WAKEUP_TIME) 
    7f2e:	ab e0       	ldi	r26, 0x0B	; 11
    7f30:	4a 16       	cp	r4, r26
    7f32:	51 04       	cpc	r5, r1
    7f34:	d0 f0       	brcs	.+52     	; 0x7f6a <_nrk_scheduler+0x376>
		{
			if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    7f36:	92 01       	movw	r18, r4
    7f38:	2a 50       	subi	r18, 0x0A	; 10
    7f3a:	30 40       	sbci	r19, 0x00	; 0
    7f3c:	2a 3f       	cpi	r18, 0xFA	; 250
    7f3e:	31 05       	cpc	r19, r1
    7f40:	40 f4       	brcc	.+16     	; 0x7f52 <_nrk_scheduler+0x35e>
    7f42:	29 01       	movw	r4, r18
    7f44:	29 30       	cpi	r18, 0x09	; 9
    7f46:	31 05       	cpc	r19, r1
    7f48:	80 f4       	brcc	.+32     	; 0x7f6a <_nrk_scheduler+0x376>
    7f4a:	59 e0       	ldi	r21, 0x09	; 9
    7f4c:	45 2e       	mov	r4, r21
    7f4e:	51 2c       	mov	r5, r1
    7f50:	0c c0       	rjmp	.+24     	; 0x7f6a <_nrk_scheduler+0x376>
					next_wake=NRK_SLEEP_WAKEUP_TIME-1;
				}
				else {
					next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
				}
			} else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME){ 
    7f52:	24 e0       	ldi	r18, 0x04	; 4
    7f54:	42 16       	cp	r4, r18
    7f56:	21 e0       	ldi	r18, 0x01	; 1
    7f58:	52 06       	cpc	r5, r18
    7f5a:	21 f0       	breq	.+8      	; 0x7f64 <_nrk_scheduler+0x370>
    7f5c:	3a ef       	ldi	r19, 0xFA	; 250
    7f5e:	43 2e       	mov	r4, r19
    7f60:	51 2c       	mov	r5, r1
    7f62:	03 c0       	rjmp	.+6      	; 0x7f6a <_nrk_scheduler+0x376>
    7f64:	20 ef       	ldi	r18, 0xF0	; 240
    7f66:	42 2e       	mov	r4, r18
    7f68:	51 2c       	mov	r5, r1
		printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
		}
	}*/

	//printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
	nrk_cur_task_prio = nrk_high_ready_prio;
    7f6a:	40 93 0a 20 	sts	0x200A, r20
	nrk_cur_task_TCB  = nrk_high_ready_TCB;
    7f6e:	90 93 18 20 	sts	0x2018, r25
    7f72:	80 93 17 20 	sts	0x2017, r24
	if(nrk_high_ready_TCB==NULL)
		{
		nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
		}
	#endif
	_nrk_prev_timer_val=next_wake;
    7f76:	40 92 c7 1d 	sts	0x1DC7, r4


	if(_nrk_os_timer_get()>=next_wake)  // just bigger then, or equal? 
    7f7a:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    7f7e:	90 e0       	ldi	r25, 0x00	; 0
    7f80:	84 15       	cp	r24, r4
    7f82:	95 05       	cpc	r25, r5
    7f84:	50 f0       	brcs	.+20     	; 0x7f9a <_nrk_scheduler+0x3a6>
			nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
		#endif

		// This is bad news, but keeps things running
		// +2 just in case we are on the edge of the last tick
		next_wake=_nrk_os_timer_get()+2;
    7f86:	0e 94 23 42 	call	0x8446	; 0x8446 <_nrk_os_timer_get>
    7f8a:	48 2e       	mov	r4, r24
    7f8c:	55 24       	eor	r5, r5
    7f8e:	42 e0       	ldi	r20, 0x02	; 2
    7f90:	50 e0       	ldi	r21, 0x00	; 0
    7f92:	44 0e       	add	r4, r20
    7f94:	55 1e       	adc	r5, r21
		_nrk_prev_timer_val=next_wake;
    7f96:	40 92 c7 1d 	sts	0x1DC7, r4
	} 

	if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=0;
    7f9a:	11 23       	and	r17, r17
    7f9c:	11 f0       	breq	.+4      	; 0x7fa2 <_nrk_scheduler+0x3ae>
    7f9e:	10 92 0b 20 	sts	0x200B, r1
	//printf("next wakeup is %d\n\r", next_wake);
	_nrk_set_next_wakeup(next_wake);
    7fa2:	84 2d       	mov	r24, r4
    7fa4:	0e 94 bc 41 	call	0x8378	; 0x8378 <_nrk_set_next_wakeup>
	
#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
	// Bound Context Swap to 100us 
	nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    7fa8:	c3 01       	movw	r24, r6
    7faa:	6e ee       	ldi	r22, 0xEE	; 238
    7fac:	72 e0       	ldi	r23, 0x02	; 2
    7fae:	0e 94 40 41 	call	0x8280	; 0x8280 <nrk_high_speed_timer_wait>
#endif	
	nrk_stack_pointer_restore();
    7fb2:	0e 94 ac 44 	call	0x8958	; 0x8958 <nrk_stack_pointer_restore>
	//nrk_int_enable();
	nrk_start_high_ready_task();
    7fb6:	0e 94 d7 44 	call	0x89ae	; 0x89ae <nrk_start_high_ready_task>

}
    7fba:	df 91       	pop	r29
    7fbc:	cf 91       	pop	r28
    7fbe:	1f 91       	pop	r17
    7fc0:	0f 91       	pop	r16
    7fc2:	ff 90       	pop	r15
    7fc4:	ef 90       	pop	r14
    7fc6:	df 90       	pop	r13
    7fc8:	cf 90       	pop	r12
    7fca:	bf 90       	pop	r11
    7fcc:	af 90       	pop	r10
    7fce:	9f 90       	pop	r9
    7fd0:	8f 90       	pop	r8
    7fd2:	7f 90       	pop	r7
    7fd4:	6f 90       	pop	r6
    7fd6:	5f 90       	pop	r5
    7fd8:	4f 90       	pop	r4
    7fda:	08 95       	ret

00007fdc <nrk_register_driver>:
 *
 */

int8_t nrk_register_driver(void *devicemanager,uint8_t dev_index)
{
		if(_nrk_driver_count<NRK_MAX_DRIVER_CNT)
    7fdc:	20 91 38 20 	lds	r18, 0x2038
    7fe0:	12 16       	cp	r1, r18
    7fe2:	14 f4       	brge	.+4      	; 0x7fe8 <nrk_register_driver+0xc>
    7fe4:	8f ef       	ldi	r24, 0xFF	; 255
    7fe6:	08 95       	ret
		{
                 nrk_drivers[_nrk_driver_count].dev_id=dev_index; 
    7fe8:	e2 2f       	mov	r30, r18
    7fea:	ff 27       	eor	r31, r31
    7fec:	e7 fd       	sbrc	r30, 7
    7fee:	f0 95       	com	r31
    7ff0:	df 01       	movw	r26, r30
    7ff2:	aa 0f       	add	r26, r26
    7ff4:	bb 1f       	adc	r27, r27
    7ff6:	aa 0f       	add	r26, r26
    7ff8:	bb 1f       	adc	r27, r27
    7ffa:	a7 5c       	subi	r26, 0xC7	; 199
    7ffc:	bf 4d       	sbci	r27, 0xDF	; 223
    7ffe:	6c 93       	st	X, r22
                 nrk_drivers[_nrk_driver_count].devicemanager=(void*)devicemanager;
    8000:	ee 0f       	add	r30, r30
    8002:	ff 1f       	adc	r31, r31
    8004:	ee 0f       	add	r30, r30
    8006:	ff 1f       	adc	r31, r31
    8008:	e5 5c       	subi	r30, 0xC5	; 197
    800a:	ff 4d       	sbci	r31, 0xDF	; 223
    800c:	91 83       	std	Z+1, r25	; 0x01
    800e:	80 83       	st	Z, r24
		 _nrk_driver_count++;
    8010:	2f 5f       	subi	r18, 0xFF	; 255
    8012:	20 93 38 20 	sts	0x2038, r18
    8016:	81 e0       	ldi	r24, 0x01	; 1
		 return NRK_OK;
	        }
		 else
			 return NRK_ERROR;
}
    8018:	08 95       	ret

0000801a <nrk_open>:


int8_t nrk_open(uint8_t dev_index,uint8_t opt) 
{
    801a:	0f 93       	push	r16
    801c:	1f 93       	push	r17
    801e:	cf 93       	push	r28
    8020:	df 93       	push	r29
    8022:	06 2f       	mov	r16, r22
uint8_t cnt;


		for(cnt=0;cnt<_nrk_driver_count;cnt++)
    8024:	20 91 38 20 	lds	r18, 0x2038
    8028:	33 27       	eor	r19, r19
    802a:	27 fd       	sbrc	r18, 7
    802c:	30 95       	com	r19
    802e:	10 e0       	ldi	r17, 0x00	; 0
		{
		      if(nrk_drivers[cnt].dev_id==dev_index)  
    8030:	90 e0       	ldi	r25, 0x00	; 0
int8_t nrk_open(uint8_t dev_index,uint8_t opt) 
{
uint8_t cnt;


		for(cnt=0;cnt<_nrk_driver_count;cnt++)
    8032:	37 c0       	rjmp	.+110    	; 0x80a2 <nrk_open+0x88>
		{
		      if(nrk_drivers[cnt].dev_id==dev_index)  
    8034:	fe 01       	movw	r30, r28
    8036:	ee 0f       	add	r30, r30
    8038:	ff 1f       	adc	r31, r31
    803a:	ee 0f       	add	r30, r30
    803c:	ff 1f       	adc	r31, r31
    803e:	e7 5c       	subi	r30, 0xC7	; 199
    8040:	ff 4d       	sbci	r31, 0xDF	; 223
    8042:	40 81       	ld	r20, Z
    8044:	55 27       	eor	r21, r21
    8046:	47 fd       	sbrc	r20, 7
    8048:	50 95       	com	r21
    804a:	48 17       	cp	r20, r24
    804c:	59 07       	cpc	r21, r25
    804e:	41 f5       	brne	.+80     	; 0x80a0 <nrk_open+0x86>
		      {
				if(nrk_driver_init[cnt]==WAS_NOT_OPEN)
    8050:	fe 01       	movw	r30, r28
    8052:	e3 5c       	subi	r30, 0xC3	; 195
    8054:	ff 4d       	sbci	r31, 0xDF	; 223
    8056:	80 81       	ld	r24, Z
    8058:	88 23       	and	r24, r24
    805a:	91 f4       	brne	.+36     	; 0x8080 <nrk_open+0x66>
				      {
					// Only call init the first time driver is opened
                                        nrk_driver_init[cnt]=WAS_OPEN;
    805c:	81 e0       	ldi	r24, 0x01	; 1
    805e:	80 83       	st	Z, r24
        				nrk_drivers[cnt].devicemanager(INIT,opt,NULL,0);
    8060:	fe 01       	movw	r30, r28
    8062:	ee 0f       	add	r30, r30
    8064:	ff 1f       	adc	r31, r31
    8066:	ee 0f       	add	r30, r30
    8068:	ff 1f       	adc	r31, r31
    806a:	e5 5c       	subi	r30, 0xC5	; 197
    806c:	ff 4d       	sbci	r31, 0xDF	; 223
    806e:	01 90       	ld	r0, Z+
    8070:	f0 81       	ld	r31, Z
    8072:	e0 2d       	mov	r30, r0
    8074:	80 e0       	ldi	r24, 0x00	; 0
    8076:	60 2f       	mov	r22, r16
    8078:	40 e0       	ldi	r20, 0x00	; 0
    807a:	50 e0       	ldi	r21, 0x00	; 0
    807c:	20 e0       	ldi	r18, 0x00	; 0
    807e:	09 95       	icall
				      }
        		nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);
    8080:	cc 0f       	add	r28, r28
    8082:	dd 1f       	adc	r29, r29
    8084:	cc 0f       	add	r28, r28
    8086:	dd 1f       	adc	r29, r29
    8088:	c5 5c       	subi	r28, 0xC5	; 197
    808a:	df 4d       	sbci	r29, 0xDF	; 223
    808c:	e8 81       	ld	r30, Y
    808e:	f9 81       	ldd	r31, Y+1	; 0x01
    8090:	81 e0       	ldi	r24, 0x01	; 1
    8092:	60 2f       	mov	r22, r16
    8094:	40 e0       	ldi	r20, 0x00	; 0
    8096:	50 e0       	ldi	r21, 0x00	; 0
    8098:	20 e0       	ldi	r18, 0x00	; 0
    809a:	09 95       	icall
		        return cnt;
    809c:	81 2f       	mov	r24, r17
    809e:	07 c0       	rjmp	.+14     	; 0x80ae <nrk_open+0x94>
int8_t nrk_open(uint8_t dev_index,uint8_t opt) 
{
uint8_t cnt;


		for(cnt=0;cnt<_nrk_driver_count;cnt++)
    80a0:	1f 5f       	subi	r17, 0xFF	; 255
    80a2:	c1 2f       	mov	r28, r17
    80a4:	d0 e0       	ldi	r29, 0x00	; 0
    80a6:	c2 17       	cp	r28, r18
    80a8:	d3 07       	cpc	r29, r19
    80aa:	24 f2       	brlt	.-120    	; 0x8034 <nrk_open+0x1a>
    80ac:	8f ef       	ldi	r24, 0xFF	; 255
		        return cnt;
		      }
		}

 return NRK_ERROR;
}
    80ae:	df 91       	pop	r29
    80b0:	cf 91       	pop	r28
    80b2:	1f 91       	pop	r17
    80b4:	0f 91       	pop	r16
    80b6:	08 95       	ret

000080b8 <nrk_get_status>:
         return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
} 

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
	if(dev_fd>_nrk_driver_count)
    80b8:	90 e0       	ldi	r25, 0x00	; 0
    80ba:	20 91 38 20 	lds	r18, 0x2038
    80be:	33 27       	eor	r19, r19
    80c0:	27 fd       	sbrc	r18, 7
    80c2:	30 95       	com	r19
    80c4:	28 17       	cp	r18, r24
    80c6:	39 07       	cpc	r19, r25
    80c8:	2c f4       	brge	.+10     	; 0x80d4 <nrk_get_status+0x1c>
		{
		_nrk_errno_set(1);  // invalid device
    80ca:	81 e0       	ldi	r24, 0x01	; 1
    80cc:	0e 94 70 32 	call	0x64e0	; 0x64e0 <_nrk_errno_set>
    80d0:	8f ef       	ldi	r24, 0xFF	; 255
		return NRK_ERROR;
    80d2:	08 95       	ret
		}

   	return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
    80d4:	fc 01       	movw	r30, r24
    80d6:	ee 0f       	add	r30, r30
    80d8:	ff 1f       	adc	r31, r31
    80da:	ee 0f       	add	r30, r30
    80dc:	ff 1f       	adc	r31, r31
    80de:	e5 5c       	subi	r30, 0xC5	; 197
    80e0:	ff 4d       	sbci	r31, 0xDF	; 223
    80e2:	01 90       	ld	r0, Z+
    80e4:	f0 81       	ld	r31, Z
    80e6:	e0 2d       	mov	r30, r0
    80e8:	83 e0       	ldi	r24, 0x03	; 3
    80ea:	40 e0       	ldi	r20, 0x00	; 0
    80ec:	50 e0       	ldi	r21, 0x00	; 0
    80ee:	20 e0       	ldi	r18, 0x00	; 0
    80f0:	09 95       	icall
}
    80f2:	08 95       	ret

000080f4 <nrk_set_status>:
         return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);

}
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    80f4:	24 2f       	mov	r18, r20
	if(dev_fd<0 || dev_fd>_nrk_driver_count)
    80f6:	90 e0       	ldi	r25, 0x00	; 0
    80f8:	40 91 38 20 	lds	r20, 0x2038
    80fc:	55 27       	eor	r21, r21
    80fe:	47 fd       	sbrc	r20, 7
    8100:	50 95       	com	r21
    8102:	48 17       	cp	r20, r24
    8104:	59 07       	cpc	r21, r25
    8106:	2c f4       	brge	.+10     	; 0x8112 <nrk_set_status+0x1e>
		{
		_nrk_errno_set(1);  // invalid device
    8108:	81 e0       	ldi	r24, 0x01	; 1
    810a:	0e 94 70 32 	call	0x64e0	; 0x64e0 <_nrk_errno_set>
    810e:	8f ef       	ldi	r24, 0xFF	; 255
		return NRK_ERROR;
    8110:	08 95       	ret
		}
         return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
    8112:	fc 01       	movw	r30, r24
    8114:	ee 0f       	add	r30, r30
    8116:	ff 1f       	adc	r31, r31
    8118:	ee 0f       	add	r30, r30
    811a:	ff 1f       	adc	r31, r31
    811c:	e5 5c       	subi	r30, 0xC5	; 197
    811e:	ff 4d       	sbci	r31, 0xDF	; 223
    8120:	01 90       	ld	r0, Z+
    8122:	f0 81       	ld	r31, Z
    8124:	e0 2d       	mov	r30, r0
    8126:	84 e0       	ldi	r24, 0x04	; 4
    8128:	40 e0       	ldi	r20, 0x00	; 0
    812a:	50 e0       	ldi	r21, 0x00	; 0
    812c:	09 95       	icall
} 
    812e:	08 95       	ret

00008130 <nrk_read>:
         return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);

}

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    8130:	db 01       	movw	r26, r22
    8132:	24 2f       	mov	r18, r20
	if(dev_fd>_nrk_driver_count)
    8134:	90 e0       	ldi	r25, 0x00	; 0
    8136:	40 91 38 20 	lds	r20, 0x2038
    813a:	55 27       	eor	r21, r21
    813c:	47 fd       	sbrc	r20, 7
    813e:	50 95       	com	r21
    8140:	48 17       	cp	r20, r24
    8142:	59 07       	cpc	r21, r25
    8144:	2c f4       	brge	.+10     	; 0x8150 <nrk_read+0x20>
		{
		_nrk_errno_set(1);  // invalid device
    8146:	81 e0       	ldi	r24, 0x01	; 1
    8148:	0e 94 70 32 	call	0x64e0	; 0x64e0 <_nrk_errno_set>
    814c:	8f ef       	ldi	r24, 0xFF	; 255
		return NRK_ERROR;
    814e:	08 95       	ret
		}

         return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);
    8150:	fc 01       	movw	r30, r24
    8152:	ee 0f       	add	r30, r30
    8154:	ff 1f       	adc	r31, r31
    8156:	ee 0f       	add	r30, r30
    8158:	ff 1f       	adc	r31, r31
    815a:	e5 5c       	subi	r30, 0xC5	; 197
    815c:	ff 4d       	sbci	r31, 0xDF	; 223
    815e:	01 90       	ld	r0, Z+
    8160:	f0 81       	ld	r31, Z
    8162:	e0 2d       	mov	r30, r0
    8164:	85 e0       	ldi	r24, 0x05	; 5
    8166:	60 e0       	ldi	r22, 0x00	; 0
    8168:	ad 01       	movw	r20, r26
    816a:	09 95       	icall

}
    816c:	08 95       	ret

0000816e <nrk_write>:
return error;
} 


int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    816e:	db 01       	movw	r26, r22
    8170:	24 2f       	mov	r18, r20
	if(dev_fd>_nrk_driver_count)
    8172:	90 e0       	ldi	r25, 0x00	; 0
    8174:	40 91 38 20 	lds	r20, 0x2038
    8178:	55 27       	eor	r21, r21
    817a:	47 fd       	sbrc	r20, 7
    817c:	50 95       	com	r21
    817e:	48 17       	cp	r20, r24
    8180:	59 07       	cpc	r21, r25
    8182:	2c f4       	brge	.+10     	; 0x818e <nrk_write+0x20>
		{
		_nrk_errno_set(1);  // invalid device
    8184:	81 e0       	ldi	r24, 0x01	; 1
    8186:	0e 94 70 32 	call	0x64e0	; 0x64e0 <_nrk_errno_set>
    818a:	8f ef       	ldi	r24, 0xFF	; 255
		return NRK_ERROR;
    818c:	08 95       	ret
		}

         return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);
    818e:	fc 01       	movw	r30, r24
    8190:	ee 0f       	add	r30, r30
    8192:	ff 1f       	adc	r31, r31
    8194:	ee 0f       	add	r30, r30
    8196:	ff 1f       	adc	r31, r31
    8198:	e5 5c       	subi	r30, 0xC5	; 197
    819a:	ff 4d       	sbci	r31, 0xDF	; 223
    819c:	01 90       	ld	r0, Z+
    819e:	f0 81       	ld	r31, Z
    81a0:	e0 2d       	mov	r30, r0
    81a2:	86 e0       	ldi	r24, 0x06	; 6
    81a4:	60 e0       	ldi	r22, 0x00	; 0
    81a6:	ad 01       	movw	r20, r26
    81a8:	09 95       	icall

}
    81aa:	08 95       	ret

000081ac <nrk_close>:
 
int8_t nrk_close(uint8_t dev_fd)
{
uint8_t error;

	if(dev_fd>_nrk_driver_count)
    81ac:	90 e0       	ldi	r25, 0x00	; 0
    81ae:	20 91 38 20 	lds	r18, 0x2038
    81b2:	33 27       	eor	r19, r19
    81b4:	27 fd       	sbrc	r18, 7
    81b6:	30 95       	com	r19
    81b8:	28 17       	cp	r18, r24
    81ba:	39 07       	cpc	r19, r25
    81bc:	2c f4       	brge	.+10     	; 0x81c8 <nrk_close+0x1c>
		{
		_nrk_errno_set(1);  // invalid device
    81be:	81 e0       	ldi	r24, 0x01	; 1
    81c0:	0e 94 70 32 	call	0x64e0	; 0x64e0 <_nrk_errno_set>
    81c4:	8f ef       	ldi	r24, 0xFF	; 255
		return NRK_ERROR;
    81c6:	08 95       	ret
		}

error=nrk_drivers[dev_fd].devicemanager(CLOSE,0,NULL,0);
    81c8:	fc 01       	movw	r30, r24
    81ca:	ee 0f       	add	r30, r30
    81cc:	ff 1f       	adc	r31, r31
    81ce:	ee 0f       	add	r30, r30
    81d0:	ff 1f       	adc	r31, r31
    81d2:	e5 5c       	subi	r30, 0xC5	; 197
    81d4:	ff 4d       	sbci	r31, 0xDF	; 223
    81d6:	01 90       	ld	r0, Z+
    81d8:	f0 81       	ld	r31, Z
    81da:	e0 2d       	mov	r30, r0
    81dc:	82 e0       	ldi	r24, 0x02	; 2
    81de:	60 e0       	ldi	r22, 0x00	; 0
    81e0:	40 e0       	ldi	r20, 0x00	; 0
    81e2:	50 e0       	ldi	r21, 0x00	; 0
    81e4:	20 e0       	ldi	r18, 0x00	; 0
    81e6:	09 95       	icall
// Do we need to do init on a second reopen?
//if(!error)
//	driver_record_init[dev_fd]=0;

return error;
} 
    81e8:	08 95       	ret

000081ea <nrk_spin_wait_us>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    81f2:	01 97       	sbiw	r24, 0x01	; 1
    81f4:	d1 f7       	brne	.-12     	; 0x81ea <nrk_spin_wait_us>

}
    81f6:	08 95       	ret

000081f8 <_nrk_setup_timer>:

void _nrk_setup_timer() {
  _nrk_prev_timer_val=254;
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    81f8:	80 e2       	ldi	r24, 0x20	; 32
    81fa:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    81fe:	8e ef       	ldi	r24, 0xFE	; 254
    8200:	80 93 b3 00 	sts	0x00B3, r24
  TIFR2 =   BM(OCF2A) | BM(TOV2);       // Clear interrupt flag
    8204:	83 e0       	ldi	r24, 0x03	; 3
    8206:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    8208:	92 e0       	ldi	r25, 0x02	; 2
    820a:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    820e:	e1 eb       	ldi	r30, 0xB1	; 177
    8210:	f0 e0       	ldi	r31, 0x00	; 0
    8212:	80 83       	st	Z, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    8214:	93 b5       	in	r25, 0x23	; 35
    8216:	92 60       	ori	r25, 0x02	; 2
    8218:	93 bd       	out	0x23, r25	; 35
  // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);       
    821a:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    821c:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    821e:	93 b5       	in	r25, 0x23	; 35
    8220:	92 60       	ori	r25, 0x02	; 2
    8222:	93 bd       	out	0x23, r25	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    8224:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    8228:	91 e0       	ldi	r25, 0x01	; 1
    822a:	90 93 81 00 	sts	0x0081, r25
  TCNT1=0;  // 16 bit
    822e:	10 92 85 00 	sts	0x0085, r1
    8232:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    8236:	93 b5       	in	r25, 0x23	; 35
    8238:	92 60       	ori	r25, 0x02	; 2
    823a:	93 bd       	out	0x23, r25	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    823c:	93 b5       	in	r25, 0x23	; 35
    823e:	91 60       	ori	r25, 0x01	; 1
    8240:	93 bd       	out	0x23, r25	; 35
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    8242:	93 b5       	in	r25, 0x23	; 35
    8244:	92 60       	ori	r25, 0x02	; 2
    8246:	93 bd       	out	0x23, r25	; 35
    TCNT2 = 0;                  // reset counter
    8248:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    _nrk_prev_timer_val=0;
    824c:	10 92 c7 1d 	sts	0x1DC7, r1
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A) | BM(TOIE2) ;//| BM(TICIE1);    // Enable interrupt
    8250:	a0 e7       	ldi	r26, 0x70	; 112
    8252:	b0 e0       	ldi	r27, 0x00	; 0
    8254:	9c 91       	ld	r25, X
    8256:	93 60       	ori	r25, 0x03	; 3
    8258:	9c 93       	st	X, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    825a:	80 83       	st	Z, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_os_timer_start();
  _nrk_time_trigger=0;
    825c:	10 92 bd 11 	sts	0x11BD, r1
}
    8260:	08 95       	ret

00008262 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    8262:	10 92 81 00 	sts	0x0081, r1
}
    8266:	08 95       	ret

00008268 <_nrk_high_speed_timer_start>:

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    8268:	81 e0       	ldi	r24, 0x01	; 1
    826a:	80 93 81 00 	sts	0x0081, r24
}
    826e:	08 95       	ret

00008270 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    8270:	83 b5       	in	r24, 0x23	; 35
    8272:	81 60       	ori	r24, 0x01	; 1
    8274:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    8276:	10 92 85 00 	sts	0x0085, r1
    827a:	10 92 84 00 	sts	0x0084, r1
//  nrk_int_enable();
}
    827e:	08 95       	ret

00008280 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    8280:	ef 92       	push	r14
    8282:	ff 92       	push	r15
    8284:	0f 93       	push	r16
    8286:	1f 93       	push	r17
    8288:	df 93       	push	r29
    828a:	cf 93       	push	r28
    828c:	00 d0       	rcall	.+0      	; 0x828e <nrk_high_speed_timer_wait+0xe>
    828e:	cd b7       	in	r28, 0x3d	; 61
    8290:	de b7       	in	r29, 0x3e	; 62
uint32_t tmp;
if(start>65400) start=0;
    8292:	2f ef       	ldi	r18, 0xFF	; 255
    8294:	89 37       	cpi	r24, 0x79	; 121
    8296:	92 07       	cpc	r25, r18
    8298:	10 f0       	brcs	.+4      	; 0x829e <nrk_high_speed_timer_wait+0x1e>
    829a:	80 e0       	ldi	r24, 0x00	; 0
    829c:	90 e0       	ldi	r25, 0x00	; 0
tmp=(uint32_t)start+(uint32_t)ticks;
    829e:	9c 01       	movw	r18, r24
    82a0:	40 e0       	ldi	r20, 0x00	; 0
    82a2:	50 e0       	ldi	r21, 0x00	; 0
    82a4:	7b 01       	movw	r14, r22
    82a6:	00 e0       	ldi	r16, 0x00	; 0
    82a8:	10 e0       	ldi	r17, 0x00	; 0
    82aa:	2e 0d       	add	r18, r14
    82ac:	3f 1d       	adc	r19, r15
    82ae:	40 1f       	adc	r20, r16
    82b0:	51 1f       	adc	r21, r17
//printf("tmp is %d.\n\r", tmp);
if(tmp>65536) 
    82b2:	21 30       	cpi	r18, 0x01	; 1
    82b4:	60 e0       	ldi	r22, 0x00	; 0
    82b6:	36 07       	cpc	r19, r22
    82b8:	61 e0       	ldi	r22, 0x01	; 1
    82ba:	46 07       	cpc	r20, r22
    82bc:	60 e0       	ldi	r22, 0x00	; 0
    82be:	56 07       	cpc	r21, r22
    82c0:	78 f0       	brcs	.+30     	; 0x82e0 <nrk_high_speed_timer_wait+0x60>

inline uint16_t _nrk_high_speed_timer_get()
{
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    82c2:	60 91 84 00 	lds	r22, 0x0084
    82c6:	70 91 85 00 	lds	r23, 0x0085
    82ca:	7a 83       	std	Y+2, r23	; 0x02
    82cc:	69 83       	std	Y+1, r22	; 0x01
  //nrk_int_enable();
  return tmp;
    82ce:	69 81       	ldd	r22, Y+1	; 0x01
    82d0:	7a 81       	ldd	r23, Y+2	; 0x02
//printf("tmp is %d.\n\r", tmp);
if(tmp>65536) 
	{
//	printf("tmp>65536\n\r");
	tmp-=65536;
	do{}while(_nrk_high_speed_timer_get()>start);
    82d2:	86 17       	cp	r24, r22
    82d4:	97 07       	cpc	r25, r23
    82d6:	a8 f3       	brcs	.-22     	; 0x82c2 <nrk_high_speed_timer_wait+0x42>
tmp=(uint32_t)start+(uint32_t)ticks;
//printf("tmp is %d.\n\r", tmp);
if(tmp>65536) 
	{
//	printf("tmp>65536\n\r");
	tmp-=65536;
    82d8:	20 50       	subi	r18, 0x00	; 0
    82da:	30 40       	sbci	r19, 0x00	; 0
    82dc:	41 40       	sbci	r20, 0x01	; 1
    82de:	50 40       	sbci	r21, 0x00	; 0

inline uint16_t _nrk_high_speed_timer_get()
{
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    82e0:	80 91 84 00 	lds	r24, 0x0084
    82e4:	90 91 85 00 	lds	r25, 0x0085
    82e8:	9a 83       	std	Y+2, r25	; 0x02
    82ea:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    82ec:	89 81       	ldd	r24, Y+1	; 0x01
    82ee:	9a 81       	ldd	r25, Y+2	; 0x02
	tmp-=65536;
	do{}while(_nrk_high_speed_timer_get()>start);
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    82f0:	82 17       	cp	r24, r18
    82f2:	93 07       	cpc	r25, r19
    82f4:	a8 f3       	brcs	.-22     	; 0x82e0 <nrk_high_speed_timer_wait+0x60>
}
    82f6:	0f 90       	pop	r0
    82f8:	0f 90       	pop	r0
    82fa:	cf 91       	pop	r28
    82fc:	df 91       	pop	r29
    82fe:	1f 91       	pop	r17
    8300:	0f 91       	pop	r16
    8302:	ff 90       	pop	r15
    8304:	ef 90       	pop	r14
    8306:	08 95       	ret

00008308 <_nrk_high_speed_timer_get>:

inline uint16_t _nrk_high_speed_timer_get()
{
    8308:	df 93       	push	r29
    830a:	cf 93       	push	r28
    830c:	00 d0       	rcall	.+0      	; 0x830e <_nrk_high_speed_timer_get+0x6>
    830e:	cd b7       	in	r28, 0x3d	; 61
    8310:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    8312:	80 91 84 00 	lds	r24, 0x0084
    8316:	90 91 85 00 	lds	r25, 0x0085
    831a:	9a 83       	std	Y+2, r25	; 0x02
    831c:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    831e:	29 81       	ldd	r18, Y+1	; 0x01
    8320:	3a 81       	ldd	r19, Y+2	; 0x02
}
    8322:	c9 01       	movw	r24, r18
    8324:	0f 90       	pop	r0
    8326:	0f 90       	pop	r0
    8328:	cf 91       	pop	r28
    832a:	df 91       	pop	r29
    832c:	08 95       	ret

0000832e <_nrk_os_timer_stop>:

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    832e:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    8332:	e0 e7       	ldi	r30, 0x70	; 112
    8334:	f0 e0       	ldi	r31, 0x00	; 0
    8336:	80 81       	ld	r24, Z
    8338:	8d 7f       	andi	r24, 0xFD	; 253
    833a:	80 83       	st	Z, r24
  TIMSK2 &=  ~BM(TOIE2) ;
    833c:	80 81       	ld	r24, Z
    833e:	8e 7f       	andi	r24, 0xFE	; 254
    8340:	80 83       	st	Z, r24
}
    8342:	08 95       	ret

00008344 <_nrk_os_timer_set>:

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    8344:	80 93 b2 00 	sts	0x00B2, r24
}
    8348:	08 95       	ret

0000834a <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A) | BM(TOIE2) ;//| BM(TICIE1);    // Enable interrupt
    834a:	e0 e7       	ldi	r30, 0x70	; 112
    834c:	f0 e0       	ldi	r31, 0x00	; 0
    834e:	80 81       	ld	r24, Z
    8350:	83 60       	ori	r24, 0x03	; 3
    8352:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    8354:	83 e0       	ldi	r24, 0x03	; 3
    8356:	80 93 b1 00 	sts	0x00B1, r24
}
    835a:	08 95       	ret

0000835c <_nrk_os_timer_reset>:

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    835c:	83 b5       	in	r24, 0x23	; 35
    835e:	82 60       	ori	r24, 0x02	; 2
    8360:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    8362:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    8366:	10 92 bd 11 	sts	0x11BD, r1
    _nrk_prev_timer_val=0;
    836a:	10 92 c7 1d 	sts	0x1DC7, r1
}
    836e:	08 95       	ret

00008370 <_nrk_get_next_wakeup>:


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    8370:	80 91 b3 00 	lds	r24, 0x00B3
}
    8374:	8f 5f       	subi	r24, 0xFF	; 255
    8376:	08 95       	ret

00008378 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    8378:	81 50       	subi	r24, 0x01	; 1
    837a:	80 93 b3 00 	sts	0x00B3, r24
   //printf("value of TCNT2 is %d.\n\r",TCNT2);
}
    837e:	08 95       	ret

00008380 <nrk_timer_int_stop>:

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    8380:	88 23       	and	r24, r24
    8382:	11 f4       	brne	.+4      	; 0x8388 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    8384:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    8388:	8f ef       	ldi	r24, 0xFF	; 255
    838a:	08 95       	ret

0000838c <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    838c:	88 23       	and	r24, r24
    838e:	11 f0       	breq	.+4      	; 0x8394 <nrk_timer_int_reset+0x8>
    8390:	8f ef       	ldi	r24, 0xFF	; 255
    8392:	08 95       	ret
	{
	TCNT3=0;
    8394:	10 92 95 00 	sts	0x0095, r1
    8398:	10 92 94 00 	sts	0x0094, r1
    839c:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
	}
return NRK_ERROR;
}
    839e:	08 95       	ret

000083a0 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    83a0:	88 23       	and	r24, r24
    83a2:	19 f0       	breq	.+6      	; 0x83aa <nrk_timer_int_read+0xa>
    83a4:	20 e0       	ldi	r18, 0x00	; 0
    83a6:	30 e0       	ldi	r19, 0x00	; 0
    83a8:	04 c0       	rjmp	.+8      	; 0x83b2 <nrk_timer_int_read+0x12>
	{
	return TCNT3;
    83aa:	20 91 94 00 	lds	r18, 0x0094
    83ae:	30 91 95 00 	lds	r19, 0x0095
	}
return 0;

}
    83b2:	c9 01       	movw	r24, r18
    83b4:	08 95       	ret

000083b6 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    83b6:	88 23       	and	r24, r24
    83b8:	11 f0       	breq	.+4      	; 0x83be <nrk_timer_int_start+0x8>
    83ba:	8f ef       	ldi	r24, 0xFF	; 255
    83bc:	08 95       	ret
	{
		TIMSK3 = BM(OCIE3A);
    83be:	82 e0       	ldi	r24, 0x02	; 2
    83c0:	80 93 71 00 	sts	0x0071, r24
    83c4:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
	}
return NRK_ERROR;
}
    83c6:	08 95       	ret

000083c8 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    83c8:	88 23       	and	r24, r24
    83ca:	11 f0       	breq	.+4      	; 0x83d0 <nrk_timer_int_configure+0x8>
    83cc:	8f ef       	ldi	r24, 0xFF	; 255
    83ce:	08 95       	ret
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    83d0:	cb 01       	movw	r24, r22
    83d2:	01 97       	sbiw	r24, 0x01	; 1
    83d4:	85 30       	cpi	r24, 0x05	; 5
    83d6:	91 05       	cpc	r25, r1
    83d8:	10 f4       	brcc	.+4      	; 0x83de <nrk_timer_int_configure+0x16>
    83da:	60 93 75 1d 	sts	0x1D75, r22
	TCCR3A = 0;  
    83de:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    83e2:	88 e0       	ldi	r24, 0x08	; 8
    83e4:	80 93 91 00 	sts	0x0091, r24
  	OCR3AH = (compare_value >> 8) & 0xFF;	
    83e8:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    83ec:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    83f0:	30 93 68 0f 	sts	0x0F68, r19
    83f4:	20 93 67 0f 	sts	0x0F67, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    83f8:	80 91 75 1d 	lds	r24, 0x1D75
    83fc:	81 30       	cpi	r24, 0x01	; 1
    83fe:	21 f4       	brne	.+8      	; 0x8408 <nrk_timer_int_configure+0x40>
    8400:	80 91 91 00 	lds	r24, 0x0091
    8404:	81 60       	ori	r24, 0x01	; 1
    8406:	0b c0       	rjmp	.+22     	; 0x841e <nrk_timer_int_configure+0x56>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    8408:	82 30       	cpi	r24, 0x02	; 2
    840a:	21 f4       	brne	.+8      	; 0x8414 <nrk_timer_int_configure+0x4c>
    840c:	80 91 91 00 	lds	r24, 0x0091
    8410:	82 60       	ori	r24, 0x02	; 2
    8412:	05 c0       	rjmp	.+10     	; 0x841e <nrk_timer_int_configure+0x56>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    8414:	83 30       	cpi	r24, 0x03	; 3
    8416:	31 f4       	brne	.+12     	; 0x8424 <nrk_timer_int_configure+0x5c>
    8418:	80 91 91 00 	lds	r24, 0x0091
    841c:	83 60       	ori	r24, 0x03	; 3
    841e:	80 93 91 00 	sts	0x0091, r24
    8422:	08 c0       	rjmp	.+16     	; 0x8434 <nrk_timer_int_configure+0x6c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    8424:	84 30       	cpi	r24, 0x04	; 4
    8426:	21 f4       	brne	.+8      	; 0x8430 <nrk_timer_int_configure+0x68>
    8428:	80 91 91 00 	lds	r24, 0x0091
    842c:	84 60       	ori	r24, 0x04	; 4
    842e:	f7 cf       	rjmp	.-18     	; 0x841e <nrk_timer_int_configure+0x56>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    8430:	85 30       	cpi	r24, 0x05	; 5
    8432:	11 f0       	breq	.+4      	; 0x8438 <nrk_timer_int_configure+0x70>
    8434:	81 e0       	ldi	r24, 0x01	; 1
    8436:	08 95       	ret
    8438:	80 91 91 00 	lds	r24, 0x0091
    843c:	85 60       	ori	r24, 0x05	; 5
    843e:	80 93 91 00 	sts	0x0091, r24
    8442:	81 e0       	ldi	r24, 0x01	; 1
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
}
    8444:	08 95       	ret

00008446 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    8446:	80 91 b2 00 	lds	r24, 0x00B2
}
    844a:	08 95       	ret

0000844c <__vector_13>:


// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {
asm volatile (
    844c:	0f 92       	push	r0
    844e:	0f b6       	in	r0, 0x3f	; 63
    8450:	0f 92       	push	r0
    8452:	1f 92       	push	r1
    8454:	2f 92       	push	r2
    8456:	3f 92       	push	r3
    8458:	4f 92       	push	r4
    845a:	5f 92       	push	r5
    845c:	6f 92       	push	r6
    845e:	7f 92       	push	r7
    8460:	8f 92       	push	r8
    8462:	9f 92       	push	r9
    8464:	af 92       	push	r10
    8466:	bf 92       	push	r11
    8468:	cf 92       	push	r12
    846a:	df 92       	push	r13
    846c:	ef 92       	push	r14
    846e:	ff 92       	push	r15
    8470:	0f 93       	push	r16
    8472:	1f 93       	push	r17
    8474:	2f 93       	push	r18
    8476:	3f 93       	push	r19
    8478:	4f 93       	push	r20
    847a:	5f 93       	push	r21
    847c:	6f 93       	push	r22
    847e:	7f 93       	push	r23
    8480:	8f 93       	push	r24
    8482:	9f 93       	push	r25
    8484:	af 93       	push	r26
    8486:	bf 93       	push	r27
    8488:	cf 93       	push	r28
    848a:	df 93       	push	r29
    848c:	ef 93       	push	r30
    848e:	ff 93       	push	r31
    8490:	a0 91 17 20 	lds	r26, 0x2017
    8494:	b0 91 18 20 	lds	r27, 0x2018
    8498:	0d b6       	in	r0, 0x3d	; 61
    849a:	0d 92       	st	X+, r0
    849c:	0e b6       	in	r0, 0x3e	; 62
    849e:	0d 92       	st	X+, r0
    84a0:	1f 92       	push	r1
    84a2:	a0 91 54 0e 	lds	r26, 0x0E54
    84a6:	b0 91 55 0e 	lds	r27, 0x0E55
    84aa:	1e 90       	ld	r1, -X
    84ac:	be bf       	out	0x3e, r27	; 62
    84ae:	ad bf       	out	0x3d, r26	; 61
    84b0:	08 95       	ret

000084b2 <__vector_17>:
}

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    84b2:	1f 92       	push	r1
    84b4:	0f 92       	push	r0
    84b6:	0f b6       	in	r0, 0x3f	; 63
    84b8:	0f 92       	push	r0
    84ba:	11 24       	eor	r1, r1

	return;  	
} 
    84bc:	0f 90       	pop	r0
    84be:	0f be       	out	0x3f, r0	; 63
    84c0:	0f 90       	pop	r0
    84c2:	1f 90       	pop	r1
    84c4:	18 95       	reti

000084c6 <__vector_32>:
);

} 


SIGNAL(TIMER3_COMPA_vect) {
    84c6:	1f 92       	push	r1
    84c8:	0f 92       	push	r0
    84ca:	0f b6       	in	r0, 0x3f	; 63
    84cc:	0f 92       	push	r0
    84ce:	0b b6       	in	r0, 0x3b	; 59
    84d0:	0f 92       	push	r0
    84d2:	11 24       	eor	r1, r1
    84d4:	2f 93       	push	r18
    84d6:	3f 93       	push	r19
    84d8:	4f 93       	push	r20
    84da:	5f 93       	push	r21
    84dc:	6f 93       	push	r22
    84de:	7f 93       	push	r23
    84e0:	8f 93       	push	r24
    84e2:	9f 93       	push	r25
    84e4:	af 93       	push	r26
    84e6:	bf 93       	push	r27
    84e8:	ef 93       	push	r30
    84ea:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    84ec:	e0 91 67 0f 	lds	r30, 0x0F67
    84f0:	f0 91 68 0f 	lds	r31, 0x0F68
    84f4:	30 97       	sbiw	r30, 0x00	; 0
    84f6:	11 f0       	breq	.+4      	; 0x84fc <__vector_32+0x36>
    84f8:	09 95       	icall
    84fa:	04 c0       	rjmp	.+8      	; 0x8504 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    84fc:	8a e0       	ldi	r24, 0x0A	; 10
    84fe:	60 e0       	ldi	r22, 0x00	; 0
    8500:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>
//printf("TIMER3_COMPA_vect\n\r");
	return;  	
}
    8504:	ff 91       	pop	r31
    8506:	ef 91       	pop	r30
    8508:	bf 91       	pop	r27
    850a:	af 91       	pop	r26
    850c:	9f 91       	pop	r25
    850e:	8f 91       	pop	r24
    8510:	7f 91       	pop	r23
    8512:	6f 91       	pop	r22
    8514:	5f 91       	pop	r21
    8516:	4f 91       	pop	r20
    8518:	3f 91       	pop	r19
    851a:	2f 91       	pop	r18
    851c:	0f 90       	pop	r0
    851e:	0b be       	out	0x3b, r0	; 59
    8520:	0f 90       	pop	r0
    8522:	0f be       	out	0x3f, r0	; 63
    8524:	0f 90       	pop	r0
    8526:	1f 90       	pop	r1
    8528:	18 95       	reti

0000852a <__vector_default>:
}

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    852a:	1f 92       	push	r1
    852c:	0f 92       	push	r0
    852e:	0f b6       	in	r0, 0x3f	; 63
    8530:	0f 92       	push	r0
    8532:	0b b6       	in	r0, 0x3b	; 59
    8534:	0f 92       	push	r0
    8536:	11 24       	eor	r1, r1
    8538:	2f 93       	push	r18
    853a:	3f 93       	push	r19
    853c:	4f 93       	push	r20
    853e:	5f 93       	push	r21
    8540:	6f 93       	push	r22
    8542:	7f 93       	push	r23
    8544:	8f 93       	push	r24
    8546:	9f 93       	push	r25
    8548:	af 93       	push	r26
    854a:	bf 93       	push	r27
    854c:	ef 93       	push	r30
    854e:	ff 93       	push	r31
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    8550:	8a e0       	ldi	r24, 0x0A	; 10
    8552:	60 e0       	ldi	r22, 0x00	; 0
    8554:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>
    8558:	ff cf       	rjmp	.-2      	; 0x8558 <__vector_default+0x2e>

0000855a <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    855a:	88 23       	and	r24, r24
    855c:	11 f4       	brne	.+4      	; 0x8562 <nrk_ext_int_enable+0x8>
    855e:	e8 9a       	sbi	0x1d, 0	; 29
    8560:	33 c0       	rjmp	.+102    	; 0x85c8 <nrk_ext_int_enable+0x6e>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    8562:	81 30       	cpi	r24, 0x01	; 1
    8564:	11 f4       	brne	.+4      	; 0x856a <nrk_ext_int_enable+0x10>
    8566:	e9 9a       	sbi	0x1d, 1	; 29
    8568:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    856a:	82 30       	cpi	r24, 0x02	; 2
    856c:	11 f4       	brne	.+4      	; 0x8572 <nrk_ext_int_enable+0x18>
    856e:	ea 9a       	sbi	0x1d, 2	; 29
    8570:	2b c0       	rjmp	.+86     	; 0x85c8 <nrk_ext_int_enable+0x6e>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    8572:	83 30       	cpi	r24, 0x03	; 3
    8574:	21 f4       	brne	.+8      	; 0x857e <nrk_ext_int_enable+0x24>
    8576:	80 91 6b 00 	lds	r24, 0x006B
    857a:	81 60       	ori	r24, 0x01	; 1
    857c:	23 c0       	rjmp	.+70     	; 0x85c4 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    857e:	84 30       	cpi	r24, 0x04	; 4
    8580:	21 f4       	brne	.+8      	; 0x858a <nrk_ext_int_enable+0x30>
    8582:	80 91 6b 00 	lds	r24, 0x006B
    8586:	82 60       	ori	r24, 0x02	; 2
    8588:	1d c0       	rjmp	.+58     	; 0x85c4 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    858a:	85 30       	cpi	r24, 0x05	; 5
    858c:	21 f4       	brne	.+8      	; 0x8596 <nrk_ext_int_enable+0x3c>
    858e:	80 91 6b 00 	lds	r24, 0x006B
    8592:	84 60       	ori	r24, 0x04	; 4
    8594:	17 c0       	rjmp	.+46     	; 0x85c4 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    8596:	86 30       	cpi	r24, 0x06	; 6
    8598:	21 f4       	brne	.+8      	; 0x85a2 <nrk_ext_int_enable+0x48>
    859a:	80 91 6b 00 	lds	r24, 0x006B
    859e:	88 60       	ori	r24, 0x08	; 8
    85a0:	11 c0       	rjmp	.+34     	; 0x85c4 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    85a2:	87 30       	cpi	r24, 0x07	; 7
    85a4:	21 f4       	brne	.+8      	; 0x85ae <nrk_ext_int_enable+0x54>
    85a6:	80 91 6b 00 	lds	r24, 0x006B
    85aa:	80 61       	ori	r24, 0x10	; 16
    85ac:	0b c0       	rjmp	.+22     	; 0x85c4 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    85ae:	88 30       	cpi	r24, 0x08	; 8
    85b0:	21 f4       	brne	.+8      	; 0x85ba <nrk_ext_int_enable+0x60>
    85b2:	80 91 6b 00 	lds	r24, 0x006B
    85b6:	80 62       	ori	r24, 0x20	; 32
    85b8:	05 c0       	rjmp	.+10     	; 0x85c4 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    85ba:	89 30       	cpi	r24, 0x09	; 9
    85bc:	39 f4       	brne	.+14     	; 0x85cc <nrk_ext_int_enable+0x72>
    85be:	80 91 6b 00 	lds	r24, 0x006B
    85c2:	80 64       	ori	r24, 0x40	; 64
    85c4:	80 93 6b 00 	sts	0x006B, r24
    85c8:	81 e0       	ldi	r24, 0x01	; 1
    85ca:	08 95       	ret
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    85cc:	8a 30       	cpi	r24, 0x0A	; 10
    85ce:	11 f0       	breq	.+4      	; 0x85d4 <nrk_ext_int_enable+0x7a>
    85d0:	8f ef       	ldi	r24, 0xFF	; 255
    85d2:	08 95       	ret
    85d4:	80 91 6b 00 	lds	r24, 0x006B
    85d8:	80 68       	ori	r24, 0x80	; 128
    85da:	80 93 6b 00 	sts	0x006B, r24
    85de:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    85e0:	08 95       	ret

000085e2 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    85e2:	88 23       	and	r24, r24
    85e4:	11 f4       	brne	.+4      	; 0x85ea <nrk_ext_int_disable+0x8>
    85e6:	e8 98       	cbi	0x1d, 0	; 29
    85e8:	33 c0       	rjmp	.+102    	; 0x8650 <nrk_ext_int_disable+0x6e>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    85ea:	81 30       	cpi	r24, 0x01	; 1
    85ec:	11 f4       	brne	.+4      	; 0x85f2 <nrk_ext_int_disable+0x10>
    85ee:	e9 98       	cbi	0x1d, 1	; 29
    85f0:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    85f2:	82 30       	cpi	r24, 0x02	; 2
    85f4:	11 f4       	brne	.+4      	; 0x85fa <nrk_ext_int_disable+0x18>
    85f6:	e9 98       	cbi	0x1d, 1	; 29
    85f8:	2b c0       	rjmp	.+86     	; 0x8650 <nrk_ext_int_disable+0x6e>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    85fa:	83 30       	cpi	r24, 0x03	; 3
    85fc:	21 f4       	brne	.+8      	; 0x8606 <nrk_ext_int_disable+0x24>
    85fe:	80 91 6b 00 	lds	r24, 0x006B
    8602:	8e 7f       	andi	r24, 0xFE	; 254
    8604:	23 c0       	rjmp	.+70     	; 0x864c <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    8606:	84 30       	cpi	r24, 0x04	; 4
    8608:	21 f4       	brne	.+8      	; 0x8612 <nrk_ext_int_disable+0x30>
    860a:	80 91 6b 00 	lds	r24, 0x006B
    860e:	8d 7f       	andi	r24, 0xFD	; 253
    8610:	1d c0       	rjmp	.+58     	; 0x864c <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    8612:	85 30       	cpi	r24, 0x05	; 5
    8614:	21 f4       	brne	.+8      	; 0x861e <nrk_ext_int_disable+0x3c>
    8616:	80 91 6b 00 	lds	r24, 0x006B
    861a:	8b 7f       	andi	r24, 0xFB	; 251
    861c:	17 c0       	rjmp	.+46     	; 0x864c <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    861e:	86 30       	cpi	r24, 0x06	; 6
    8620:	21 f4       	brne	.+8      	; 0x862a <nrk_ext_int_disable+0x48>
    8622:	80 91 6b 00 	lds	r24, 0x006B
    8626:	87 7f       	andi	r24, 0xF7	; 247
    8628:	11 c0       	rjmp	.+34     	; 0x864c <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    862a:	87 30       	cpi	r24, 0x07	; 7
    862c:	21 f4       	brne	.+8      	; 0x8636 <nrk_ext_int_disable+0x54>
    862e:	80 91 6b 00 	lds	r24, 0x006B
    8632:	8f 7e       	andi	r24, 0xEF	; 239
    8634:	0b c0       	rjmp	.+22     	; 0x864c <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    8636:	88 30       	cpi	r24, 0x08	; 8
    8638:	21 f4       	brne	.+8      	; 0x8642 <nrk_ext_int_disable+0x60>
    863a:	80 91 6b 00 	lds	r24, 0x006B
    863e:	8f 7d       	andi	r24, 0xDF	; 223
    8640:	05 c0       	rjmp	.+10     	; 0x864c <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    8642:	89 30       	cpi	r24, 0x09	; 9
    8644:	39 f4       	brne	.+14     	; 0x8654 <nrk_ext_int_disable+0x72>
    8646:	80 91 6b 00 	lds	r24, 0x006B
    864a:	8f 7b       	andi	r24, 0xBF	; 191
    864c:	80 93 6b 00 	sts	0x006B, r24
    8650:	81 e0       	ldi	r24, 0x01	; 1
    8652:	08 95       	ret
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    8654:	8a 30       	cpi	r24, 0x0A	; 10
    8656:	11 f0       	breq	.+4      	; 0x865c <nrk_ext_int_disable+0x7a>
    8658:	8f ef       	ldi	r24, 0xFF	; 255
    865a:	08 95       	ret
    865c:	80 91 6b 00 	lds	r24, 0x006B
    8660:	8f 77       	andi	r24, 0x7F	; 127
    8662:	80 93 6b 00 	sts	0x006B, r24
    8666:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    8668:	08 95       	ret

0000866a <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    866a:	88 23       	and	r24, r24
    866c:	39 f5       	brne	.+78     	; 0x86bc <nrk_ext_int_configure+0x52>
	{
	ext_int0_callback=callback_func;
    866e:	50 93 41 20 	sts	0x2041, r21
    8672:	40 93 40 20 	sts	0x2040, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    8676:	66 23       	and	r22, r22
    8678:	21 f4       	brne	.+8      	; 0x8682 <nrk_ext_int_configure+0x18>
    867a:	80 91 69 00 	lds	r24, 0x0069
    867e:	8c 7f       	andi	r24, 0xFC	; 252
    8680:	44 c0       	rjmp	.+136    	; 0x870a <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    8682:	61 30       	cpi	r22, 0x01	; 1
    8684:	49 f4       	brne	.+18     	; 0x8698 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    8686:	80 91 69 00 	lds	r24, 0x0069
    868a:	8d 7f       	andi	r24, 0xFD	; 253
    868c:	80 93 69 00 	sts	0x0069, r24
    8690:	80 91 69 00 	lds	r24, 0x0069
    8694:	81 60       	ori	r24, 0x01	; 1
    8696:	39 c0       	rjmp	.+114    	; 0x870a <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    8698:	62 30       	cpi	r22, 0x02	; 2
    869a:	49 f4       	brne	.+18     	; 0x86ae <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    869c:	80 91 69 00 	lds	r24, 0x0069
    86a0:	82 60       	ori	r24, 0x02	; 2
    86a2:	80 93 69 00 	sts	0x0069, r24
    86a6:	80 91 69 00 	lds	r24, 0x0069
    86aa:	8e 7f       	andi	r24, 0xFE	; 254
    86ac:	2e c0       	rjmp	.+92     	; 0x870a <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    86ae:	63 30       	cpi	r22, 0x03	; 3
    86b0:	09 f0       	breq	.+2      	; 0x86b4 <nrk_ext_int_configure+0x4a>
    86b2:	66 c0       	rjmp	.+204    	; 0x8780 <nrk_ext_int_configure+0x116>
    86b4:	80 91 69 00 	lds	r24, 0x0069
    86b8:	83 60       	ori	r24, 0x03	; 3
    86ba:	27 c0       	rjmp	.+78     	; 0x870a <nrk_ext_int_configure+0xa0>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    86bc:	81 30       	cpi	r24, 0x01	; 1
    86be:	41 f5       	brne	.+80     	; 0x8710 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    86c0:	50 93 3f 20 	sts	0x203F, r21
    86c4:	40 93 3e 20 	sts	0x203E, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    86c8:	66 23       	and	r22, r22
    86ca:	21 f4       	brne	.+8      	; 0x86d4 <nrk_ext_int_configure+0x6a>
    86cc:	80 91 69 00 	lds	r24, 0x0069
    86d0:	83 7f       	andi	r24, 0xF3	; 243
    86d2:	1b c0       	rjmp	.+54     	; 0x870a <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    86d4:	61 30       	cpi	r22, 0x01	; 1
    86d6:	49 f4       	brne	.+18     	; 0x86ea <nrk_ext_int_configure+0x80>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    86d8:	80 91 69 00 	lds	r24, 0x0069
    86dc:	87 7f       	andi	r24, 0xF7	; 247
    86de:	80 93 69 00 	sts	0x0069, r24
    86e2:	80 91 69 00 	lds	r24, 0x0069
    86e6:	84 60       	ori	r24, 0x04	; 4
    86e8:	10 c0       	rjmp	.+32     	; 0x870a <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    86ea:	62 30       	cpi	r22, 0x02	; 2
    86ec:	49 f4       	brne	.+18     	; 0x8700 <nrk_ext_int_configure+0x96>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    86ee:	80 91 69 00 	lds	r24, 0x0069
    86f2:	88 60       	ori	r24, 0x08	; 8
    86f4:	80 93 69 00 	sts	0x0069, r24
    86f8:	80 91 69 00 	lds	r24, 0x0069
    86fc:	8b 7f       	andi	r24, 0xFB	; 251
    86fe:	05 c0       	rjmp	.+10     	; 0x870a <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    8700:	63 30       	cpi	r22, 0x03	; 3
    8702:	f1 f5       	brne	.+124    	; 0x8780 <nrk_ext_int_configure+0x116>
    8704:	80 91 69 00 	lds	r24, 0x0069
    8708:	8c 60       	ori	r24, 0x0C	; 12
    870a:	80 93 69 00 	sts	0x0069, r24
    870e:	36 c0       	rjmp	.+108    	; 0x877c <nrk_ext_int_configure+0x112>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    8710:	82 30       	cpi	r24, 0x02	; 2
    8712:	31 f5       	brne	.+76     	; 0x8760 <nrk_ext_int_configure+0xf6>
	{
	ext_int1_callback=callback_func;
    8714:	50 93 3f 20 	sts	0x203F, r21
    8718:	40 93 3e 20 	sts	0x203E, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    871c:	66 23       	and	r22, r22
    871e:	21 f4       	brne	.+8      	; 0x8728 <nrk_ext_int_configure+0xbe>
    8720:	80 91 69 00 	lds	r24, 0x0069
    8724:	8f 7c       	andi	r24, 0xCF	; 207
    8726:	f1 cf       	rjmp	.-30     	; 0x870a <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    8728:	61 30       	cpi	r22, 0x01	; 1
    872a:	49 f4       	brne	.+18     	; 0x873e <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    872c:	80 91 69 00 	lds	r24, 0x0069
    8730:	8f 7d       	andi	r24, 0xDF	; 223
    8732:	80 93 69 00 	sts	0x0069, r24
    8736:	80 91 69 00 	lds	r24, 0x0069
    873a:	80 61       	ori	r24, 0x10	; 16
    873c:	e6 cf       	rjmp	.-52     	; 0x870a <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    873e:	62 30       	cpi	r22, 0x02	; 2
    8740:	49 f4       	brne	.+18     	; 0x8754 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    8742:	80 91 69 00 	lds	r24, 0x0069
    8746:	80 62       	ori	r24, 0x20	; 32
    8748:	80 93 69 00 	sts	0x0069, r24
    874c:	80 91 69 00 	lds	r24, 0x0069
    8750:	8f 7e       	andi	r24, 0xEF	; 239
    8752:	db cf       	rjmp	.-74     	; 0x870a <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    8754:	63 30       	cpi	r22, 0x03	; 3
    8756:	a1 f4       	brne	.+40     	; 0x8780 <nrk_ext_int_configure+0x116>
    8758:	80 91 69 00 	lds	r24, 0x0069
    875c:	80 63       	ori	r24, 0x30	; 48
    875e:	d5 cf       	rjmp	.-86     	; 0x870a <nrk_ext_int_configure+0xa0>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    8760:	83 50       	subi	r24, 0x03	; 3
    8762:	88 30       	cpi	r24, 0x08	; 8
    8764:	10 f0       	brcs	.+4      	; 0x876a <nrk_ext_int_configure+0x100>
    8766:	8f ef       	ldi	r24, 0xFF	; 255
    8768:	08 95       	ret
	PCICR |= BM(PCIE0);	
    876a:	80 91 68 00 	lds	r24, 0x0068
    876e:	81 60       	ori	r24, 0x01	; 1
    8770:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    8774:	50 93 45 20 	sts	0x2045, r21
    8778:	40 93 44 20 	sts	0x2044, r20
    877c:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
    877e:	08 95       	ret
    8780:	81 e0       	ldi	r24, 0x01	; 1
	}
return NRK_ERROR;
}
    8782:	08 95       	ret

00008784 <__vector_1>:
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
	return;  	
}


SIGNAL(INT0_vect) {
    8784:	1f 92       	push	r1
    8786:	0f 92       	push	r0
    8788:	0f b6       	in	r0, 0x3f	; 63
    878a:	0f 92       	push	r0
    878c:	0b b6       	in	r0, 0x3b	; 59
    878e:	0f 92       	push	r0
    8790:	11 24       	eor	r1, r1
    8792:	2f 93       	push	r18
    8794:	3f 93       	push	r19
    8796:	4f 93       	push	r20
    8798:	5f 93       	push	r21
    879a:	6f 93       	push	r22
    879c:	7f 93       	push	r23
    879e:	8f 93       	push	r24
    87a0:	9f 93       	push	r25
    87a2:	af 93       	push	r26
    87a4:	bf 93       	push	r27
    87a6:	ef 93       	push	r30
    87a8:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    87aa:	e0 91 40 20 	lds	r30, 0x2040
    87ae:	f0 91 41 20 	lds	r31, 0x2041
    87b2:	30 97       	sbiw	r30, 0x00	; 0
    87b4:	11 f0       	breq	.+4      	; 0x87ba <__vector_1+0x36>
    87b6:	09 95       	icall
    87b8:	04 c0       	rjmp	.+8      	; 0x87c2 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    87ba:	8a e0       	ldi	r24, 0x0A	; 10
    87bc:	60 e0       	ldi	r22, 0x00	; 0
    87be:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>
	return;  	
}
    87c2:	ff 91       	pop	r31
    87c4:	ef 91       	pop	r30
    87c6:	bf 91       	pop	r27
    87c8:	af 91       	pop	r26
    87ca:	9f 91       	pop	r25
    87cc:	8f 91       	pop	r24
    87ce:	7f 91       	pop	r23
    87d0:	6f 91       	pop	r22
    87d2:	5f 91       	pop	r21
    87d4:	4f 91       	pop	r20
    87d6:	3f 91       	pop	r19
    87d8:	2f 91       	pop	r18
    87da:	0f 90       	pop	r0
    87dc:	0b be       	out	0x3b, r0	; 59
    87de:	0f 90       	pop	r0
    87e0:	0f be       	out	0x3f, r0	; 63
    87e2:	0f 90       	pop	r0
    87e4:	1f 90       	pop	r1
    87e6:	18 95       	reti

000087e8 <__vector_9>:
	}
return NRK_ERROR;
}


SIGNAL(PCINT0_vect) {
    87e8:	1f 92       	push	r1
    87ea:	0f 92       	push	r0
    87ec:	0f b6       	in	r0, 0x3f	; 63
    87ee:	0f 92       	push	r0
    87f0:	0b b6       	in	r0, 0x3b	; 59
    87f2:	0f 92       	push	r0
    87f4:	11 24       	eor	r1, r1
    87f6:	2f 93       	push	r18
    87f8:	3f 93       	push	r19
    87fa:	4f 93       	push	r20
    87fc:	5f 93       	push	r21
    87fe:	6f 93       	push	r22
    8800:	7f 93       	push	r23
    8802:	8f 93       	push	r24
    8804:	9f 93       	push	r25
    8806:	af 93       	push	r26
    8808:	bf 93       	push	r27
    880a:	ef 93       	push	r30
    880c:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    880e:	e0 91 44 20 	lds	r30, 0x2044
    8812:	f0 91 45 20 	lds	r31, 0x2045
    8816:	30 97       	sbiw	r30, 0x00	; 0
    8818:	11 f0       	breq	.+4      	; 0x881e <__vector_9+0x36>
    881a:	09 95       	icall
    881c:	04 c0       	rjmp	.+8      	; 0x8826 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    881e:	8a e0       	ldi	r24, 0x0A	; 10
    8820:	60 e0       	ldi	r22, 0x00	; 0
    8822:	0e 94 36 33 	call	0x666c	; 0x666c <nrk_kernel_error_add>
	return;  	
}
    8826:	ff 91       	pop	r31
    8828:	ef 91       	pop	r30
    882a:	bf 91       	pop	r27
    882c:	af 91       	pop	r26
    882e:	9f 91       	pop	r25
    8830:	8f 91       	pop	r24
    8832:	7f 91       	pop	r23
    8834:	6f 91       	pop	r22
    8836:	5f 91       	pop	r21
    8838:	4f 91       	pop	r20
    883a:	3f 91       	pop	r19
    883c:	2f 91       	pop	r18
    883e:	0f 90       	pop	r0
    8840:	0b be       	out	0x3b, r0	; 59
    8842:	0f 90       	pop	r0
    8844:	0f be       	out	0x3f, r0	; 63
    8846:	0f 90       	pop	r0
    8848:	1f 90       	pop	r1
    884a:	18 95       	reti

0000884c <_nrk_startup_ok>:

uint8_t _nrk_startup_ok()
{
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident
if((volatile uint8_t)TCCR2A!=0) return 0;
    884c:	90 91 b0 00 	lds	r25, 0x00B0
    8850:	80 e0       	ldi	r24, 0x00	; 0
    8852:	99 23       	and	r25, r25
    8854:	09 f4       	brne	.+2      	; 0x8858 <_nrk_startup_ok+0xc>
    8856:	81 e0       	ldi	r24, 0x01	; 1
return 1;
}
    8858:	08 95       	ret

0000885a <update_watchdog>:

inline void update_watchdog()
{


}
    885a:	08 95       	ret

0000885c <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    885c:	04 b6       	in	r0, 0x34	; 52
    885e:	03 fe       	sbrs	r0, 3
    8860:	02 c0       	rjmp	.+4      	; 0x8866 <nrk_watchdog_check+0xa>
    8862:	8f ef       	ldi	r24, 0xFF	; 255
    8864:	08 95       	ret
    8866:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    8868:	08 95       	ret

0000886a <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    886a:	a8 95       	wdr

}
    886c:	08 95       	ret

0000886e <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    886e:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>
MCUSR &= ~(1<<WDRF);
    8872:	84 b7       	in	r24, 0x34	; 52
    8874:	87 7f       	andi	r24, 0xF7	; 247
    8876:	84 bf       	out	0x34, r24	; 52
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    8878:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
MCUSR &= ~(1<<WDRF);
nrk_watchdog_reset();
WDTCSR |= (1<<WDCE) | (1<<WDE);
    887a:	e0 e6       	ldi	r30, 0x60	; 96
    887c:	f0 e0       	ldi	r31, 0x00	; 0
    887e:	80 81       	ld	r24, Z
    8880:	88 61       	ori	r24, 0x18	; 24
    8882:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    8884:	8d e0       	ldi	r24, 0x0D	; 13
    8886:	80 83       	st	Z, r24
nrk_int_enable();
    8888:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>

}
    888c:	08 95       	ret

0000888e <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    888e:	0e 94 ca 30 	call	0x6194	; 0x6194 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    8892:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    8894:	84 b7       	in	r24, 0x34	; 52
    8896:	87 7f       	andi	r24, 0xF7	; 247
    8898:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    889a:	e0 e6       	ldi	r30, 0x60	; 96
    889c:	f0 e0       	ldi	r31, 0x00	; 0
    889e:	80 81       	ld	r24, Z
    88a0:	88 61       	ori	r24, 0x18	; 24
    88a2:	80 83       	st	Z, r24
WDTCSR = 0;
    88a4:	10 82       	st	Z, r1
nrk_int_enable();
    88a6:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>
}
    88aa:	08 95       	ret

000088ac <nrk_battery_save>:
        nrk_led_clr(2);
        nrk_led_clr(3);
        SET_VREG_INACTIVE();
        nrk_sleep();
#endif
}
    88ac:	08 95       	ret

000088ae <nrk_sleep>:

void nrk_sleep()
{

    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    88ae:	83 b7       	in	r24, 0x33	; 51
    88b0:	81 7f       	andi	r24, 0xF1	; 241
    88b2:	86 60       	ori	r24, 0x06	; 6
    88b4:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    88b6:	83 b7       	in	r24, 0x33	; 51
    88b8:	81 60       	ori	r24, 0x01	; 1
    88ba:	83 bf       	out	0x33, r24	; 51
    88bc:	88 95       	sleep
    88be:	83 b7       	in	r24, 0x33	; 51
    88c0:	8e 7f       	andi	r24, 0xFE	; 254
    88c2:	83 bf       	out	0x33, r24	; 51

}
    88c4:	08 95       	ret

000088c6 <nrk_idle>:

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    88c6:	83 b7       	in	r24, 0x33	; 51
    88c8:	81 7f       	andi	r24, 0xF1	; 241
    88ca:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    88cc:	83 b7       	in	r24, 0x33	; 51
    88ce:	81 60       	ori	r24, 0x01	; 1
    88d0:	83 bf       	out	0x33, r24	; 51
    88d2:	88 95       	sleep
    88d4:	83 b7       	in	r24, 0x33	; 51
    88d6:	8e 7f       	andi	r24, 0xFE	; 254
    88d8:	83 bf       	out	0x33, r24	; 51

}
    88da:	08 95       	ret

000088dc <nrk_task_set_entry_function>:

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    88dc:	fc 01       	movw	r30, r24
    88de:	76 83       	std	Z+6, r23	; 0x06
    88e0:	65 83       	std	Z+5, r22	; 0x05
}
    88e2:	08 95       	ret

000088e4 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    88e4:	25 e5       	ldi	r18, 0x55	; 85
    88e6:	fa 01       	movw	r30, r20
    88e8:	20 83       	st	Z, r18
    stk    = (unsigned int *)ptos;          /* Load stack pointer */
    88ea:	fb 01       	movw	r30, r22
    *(--stk) = 0x4748;   // G H                      
    *(--stk) = 0x4546;   // E F                    
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    88ec:	32 97       	sbiw	r30, 0x02	; 2
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    88ee:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    88f0:	81 83       	std	Z+1, r24	; 0x01
	
    *(--stk) = 0;
    88f2:	12 92       	st	-Z, r1
    88f4:	12 92       	st	-Z, r1
    *(--stk) = 0;       
    88f6:	12 92       	st	-Z, r1
    88f8:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    88fa:	12 92       	st	-Z, r1
    88fc:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    88fe:	12 92       	st	-Z, r1
    8900:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    8902:	12 92       	st	-Z, r1
    8904:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    8906:	12 92       	st	-Z, r1
    8908:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    890a:	12 92       	st	-Z, r1
    890c:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    890e:	12 92       	st	-Z, r1
    8910:	12 92       	st	-Z, r1

    *(--stk) = 0; 
    8912:	12 92       	st	-Z, r1
    8914:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    8916:	12 92       	st	-Z, r1
    8918:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    891a:	12 92       	st	-Z, r1
    891c:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    891e:	12 92       	st	-Z, r1
    8920:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    8922:	12 92       	st	-Z, r1
    8924:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    8926:	12 92       	st	-Z, r1
    8928:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    892a:	12 92       	st	-Z, r1
    892c:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    892e:	12 92       	st	-Z, r1
    8930:	12 92       	st	-Z, r1
    *(--stk) = 0;
    8932:	12 92       	st	-Z, r1
    8934:	12 92       	st	-Z, r1


    return ((void *)stk);
}
    8936:	cf 01       	movw	r24, r30
    8938:	08 95       	ret

0000893a <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    893a:	85 e5       	ldi	r24, 0x55	; 85
    893c:	80 93 7e 21 	sts	0x217E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    8940:	ee ef       	ldi	r30, 0xFE	; 254
    8942:	f1 e2       	ldi	r31, 0x21	; 33
    8944:	f0 93 55 0e 	sts	0x0E55, r31
    8948:	e0 93 54 0e 	sts	0x0E54, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    894c:	83 ed       	ldi	r24, 0xD3	; 211
    894e:	90 e3       	ldi	r25, 0x30	; 48
    8950:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    8952:	80 93 ff 21 	sts	0x21FF, r24

}
    8956:	08 95       	ret

00008958 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    8958:	83 ed       	ldi	r24, 0xD3	; 211
    895a:	90 e3       	ldi	r25, 0x30	; 48
    895c:	90 93 fe 21 	sts	0x21FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    8960:	80 93 ff 21 	sts	0x21FF, r24
}
    8964:	08 95       	ret

00008966 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    8966:	0e 94 fc 40 	call	0x81f8	; 0x81f8 <_nrk_setup_timer>
  nrk_int_enable();  
    896a:	0e 94 cc 30 	call	0x6198	; 0x6198 <nrk_int_enable>
	
}
    896e:	08 95       	ret

00008970 <nrk_task_set_stk>:
{
task->task=func;
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    8970:	ef 92       	push	r14
    8972:	ff 92       	push	r15
    8974:	0f 93       	push	r16
    8976:	1f 93       	push	r17
    8978:	cf 93       	push	r28
    897a:	df 93       	push	r29
    897c:	ec 01       	movw	r28, r24
    897e:	8b 01       	movw	r16, r22
    8980:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    8982:	40 32       	cpi	r20, 0x20	; 32
    8984:	51 05       	cpc	r21, r1
    8986:	18 f4       	brcc	.+6      	; 0x898e <nrk_task_set_stk+0x1e>
    8988:	81 e1       	ldi	r24, 0x11	; 17
    898a:	0e 94 3d 33 	call	0x667a	; 0x667a <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    898e:	08 94       	sec
    8990:	e1 08       	sbc	r14, r1
    8992:	f1 08       	sbc	r15, r1
    8994:	e0 0e       	add	r14, r16
    8996:	f1 1e       	adc	r15, r17
    8998:	fa 82       	std	Y+2, r15	; 0x02
    899a:	e9 82       	std	Y+1, r14	; 0x01
task->Pbos = (void *) &stk_base[0];
    899c:	1c 83       	std	Y+4, r17	; 0x04
    899e:	0b 83       	std	Y+3, r16	; 0x03

}
    89a0:	df 91       	pop	r29
    89a2:	cf 91       	pop	r28
    89a4:	1f 91       	pop	r17
    89a6:	0f 91       	pop	r16
    89a8:	ff 90       	pop	r15
    89aa:	ef 90       	pop	r14
    89ac:	08 95       	ret

000089ae <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    89ae:	a0 91 08 20 	lds	r26, 0x2008
	lds r27,nrk_high_ready_TCB+1
    89b2:	b0 91 09 20 	lds	r27, 0x2009

    	;x points to &OSTCB[x]
    
	ld r28,x+
    89b6:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    89b8:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    89ba:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    89bc:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    89be:	ff 91       	pop	r31
	pop r30
    89c0:	ef 91       	pop	r30
	pop r29
    89c2:	df 91       	pop	r29
	pop r28
    89c4:	cf 91       	pop	r28
	pop r27
    89c6:	bf 91       	pop	r27
	pop r26
    89c8:	af 91       	pop	r26
	pop r25
    89ca:	9f 91       	pop	r25
	pop r24			
    89cc:	8f 91       	pop	r24
	pop r23
    89ce:	7f 91       	pop	r23
	pop r22
    89d0:	6f 91       	pop	r22
	pop r21
    89d2:	5f 91       	pop	r21
	pop r20	
    89d4:	4f 91       	pop	r20
	pop r19
    89d6:	3f 91       	pop	r19
	pop r18	
    89d8:	2f 91       	pop	r18
	pop r17
    89da:	1f 91       	pop	r17
	pop r16
    89dc:	0f 91       	pop	r16
	pop r15
    89de:	ff 90       	pop	r15
	pop r14
    89e0:	ef 90       	pop	r14
	pop r13
    89e2:	df 90       	pop	r13
	pop r12
    89e4:	cf 90       	pop	r12
	pop r11
    89e6:	bf 90       	pop	r11
	pop r10
    89e8:	af 90       	pop	r10
	pop r9
    89ea:	9f 90       	pop	r9
	pop r8
    89ec:	8f 90       	pop	r8
	pop r7
    89ee:	7f 90       	pop	r7
	pop r6
    89f0:	6f 90       	pop	r6
	pop r5
    89f2:	5f 90       	pop	r5
	pop r4
    89f4:	4f 90       	pop	r4
	pop r3
    89f6:	3f 90       	pop	r3
	pop r2
    89f8:	2f 90       	pop	r2
	pop r1
    89fa:	1f 90       	pop	r1
	pop r0
    89fc:	0f 90       	pop	r0
	out __SREG__, r0
    89fe:	0f be       	out	0x3f, r0	; 63
	pop r0	
    8a00:	0f 90       	pop	r0
	   
    	reti 
    8a02:	18 95       	reti

00008a04 <__ashldi3>:
    8a04:	a0 e1       	ldi	r26, 0x10	; 16
    8a06:	b0 e0       	ldi	r27, 0x00	; 0
    8a08:	e8 e0       	ldi	r30, 0x08	; 8
    8a0a:	f5 e4       	ldi	r31, 0x45	; 69
    8a0c:	0c 94 2e 47 	jmp	0x8e5c	; 0x8e5c <__prologue_saves__+0x18>
    8a10:	00 23       	and	r16, r16
    8a12:	09 f4       	brne	.+2      	; 0x8a16 <__ashldi3+0x12>
    8a14:	65 c0       	rjmp	.+202    	; 0x8ae0 <__ashldi3+0xdc>
    8a16:	7e 01       	movw	r14, r28
    8a18:	08 94       	sec
    8a1a:	e1 1c       	adc	r14, r1
    8a1c:	f1 1c       	adc	r15, r1
    8a1e:	a8 e0       	ldi	r26, 0x08	; 8
    8a20:	f7 01       	movw	r30, r14
    8a22:	11 92       	st	Z+, r1
    8a24:	aa 95       	dec	r26
    8a26:	e9 f7       	brne	.-6      	; 0x8a22 <__ashldi3+0x1e>
    8a28:	29 83       	std	Y+1, r18	; 0x01
    8a2a:	3a 83       	std	Y+2, r19	; 0x02
    8a2c:	4b 83       	std	Y+3, r20	; 0x03
    8a2e:	5c 83       	std	Y+4, r21	; 0x04
    8a30:	6d 83       	std	Y+5, r22	; 0x05
    8a32:	7e 83       	std	Y+6, r23	; 0x06
    8a34:	8f 83       	std	Y+7, r24	; 0x07
    8a36:	98 87       	std	Y+8, r25	; 0x08
    8a38:	80 e2       	ldi	r24, 0x20	; 32
    8a3a:	80 1b       	sub	r24, r16
    8a3c:	68 2f       	mov	r22, r24
    8a3e:	77 27       	eor	r23, r23
    8a40:	67 fd       	sbrc	r22, 7
    8a42:	70 95       	com	r23
    8a44:	29 81       	ldd	r18, Y+1	; 0x01
    8a46:	3a 81       	ldd	r19, Y+2	; 0x02
    8a48:	4b 81       	ldd	r20, Y+3	; 0x03
    8a4a:	5c 81       	ldd	r21, Y+4	; 0x04
    8a4c:	18 16       	cp	r1, r24
    8a4e:	9c f0       	brlt	.+38     	; 0x8a76 <__ashldi3+0x72>
    8a50:	19 86       	std	Y+9, r1	; 0x09
    8a52:	1a 86       	std	Y+10, r1	; 0x0a
    8a54:	1b 86       	std	Y+11, r1	; 0x0b
    8a56:	1c 86       	std	Y+12, r1	; 0x0c
    8a58:	70 95       	com	r23
    8a5a:	61 95       	neg	r22
    8a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    8a5e:	04 c0       	rjmp	.+8      	; 0x8a68 <__ashldi3+0x64>
    8a60:	22 0f       	add	r18, r18
    8a62:	33 1f       	adc	r19, r19
    8a64:	44 1f       	adc	r20, r20
    8a66:	55 1f       	adc	r21, r21
    8a68:	6a 95       	dec	r22
    8a6a:	d2 f7       	brpl	.-12     	; 0x8a60 <__ashldi3+0x5c>
    8a6c:	2d 87       	std	Y+13, r18	; 0x0d
    8a6e:	3e 87       	std	Y+14, r19	; 0x0e
    8a70:	4f 87       	std	Y+15, r20	; 0x0f
    8a72:	58 8b       	std	Y+16, r21	; 0x10
    8a74:	2d c0       	rjmp	.+90     	; 0x8ad0 <__ashldi3+0xcc>
    8a76:	11 27       	eor	r17, r17
    8a78:	07 fd       	sbrc	r16, 7
    8a7a:	10 95       	com	r17
    8a7c:	da 01       	movw	r26, r20
    8a7e:	c9 01       	movw	r24, r18
    8a80:	00 2e       	mov	r0, r16
    8a82:	04 c0       	rjmp	.+8      	; 0x8a8c <__ashldi3+0x88>
    8a84:	88 0f       	add	r24, r24
    8a86:	99 1f       	adc	r25, r25
    8a88:	aa 1f       	adc	r26, r26
    8a8a:	bb 1f       	adc	r27, r27
    8a8c:	0a 94       	dec	r0
    8a8e:	d2 f7       	brpl	.-12     	; 0x8a84 <__ashldi3+0x80>
    8a90:	89 87       	std	Y+9, r24	; 0x09
    8a92:	9a 87       	std	Y+10, r25	; 0x0a
    8a94:	ab 87       	std	Y+11, r26	; 0x0b
    8a96:	bc 87       	std	Y+12, r27	; 0x0c
    8a98:	da 01       	movw	r26, r20
    8a9a:	c9 01       	movw	r24, r18
    8a9c:	04 c0       	rjmp	.+8      	; 0x8aa6 <__ashldi3+0xa2>
    8a9e:	b6 95       	lsr	r27
    8aa0:	a7 95       	ror	r26
    8aa2:	97 95       	ror	r25
    8aa4:	87 95       	ror	r24
    8aa6:	6a 95       	dec	r22
    8aa8:	d2 f7       	brpl	.-12     	; 0x8a9e <__ashldi3+0x9a>
    8aaa:	2d 81       	ldd	r18, Y+5	; 0x05
    8aac:	3e 81       	ldd	r19, Y+6	; 0x06
    8aae:	4f 81       	ldd	r20, Y+7	; 0x07
    8ab0:	58 85       	ldd	r21, Y+8	; 0x08
    8ab2:	04 c0       	rjmp	.+8      	; 0x8abc <__ashldi3+0xb8>
    8ab4:	22 0f       	add	r18, r18
    8ab6:	33 1f       	adc	r19, r19
    8ab8:	44 1f       	adc	r20, r20
    8aba:	55 1f       	adc	r21, r21
    8abc:	0a 95       	dec	r16
    8abe:	d2 f7       	brpl	.-12     	; 0x8ab4 <__ashldi3+0xb0>
    8ac0:	82 2b       	or	r24, r18
    8ac2:	93 2b       	or	r25, r19
    8ac4:	a4 2b       	or	r26, r20
    8ac6:	b5 2b       	or	r27, r21
    8ac8:	8d 87       	std	Y+13, r24	; 0x0d
    8aca:	9e 87       	std	Y+14, r25	; 0x0e
    8acc:	af 87       	std	Y+15, r26	; 0x0f
    8ace:	b8 8b       	std	Y+16, r27	; 0x10
    8ad0:	29 85       	ldd	r18, Y+9	; 0x09
    8ad2:	3a 85       	ldd	r19, Y+10	; 0x0a
    8ad4:	4b 85       	ldd	r20, Y+11	; 0x0b
    8ad6:	5c 85       	ldd	r21, Y+12	; 0x0c
    8ad8:	6d 85       	ldd	r22, Y+13	; 0x0d
    8ada:	7e 85       	ldd	r23, Y+14	; 0x0e
    8adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    8ade:	98 89       	ldd	r25, Y+16	; 0x10
    8ae0:	60 96       	adiw	r28, 0x10	; 16
    8ae2:	e6 e0       	ldi	r30, 0x06	; 6
    8ae4:	0c 94 4a 47 	jmp	0x8e94	; 0x8e94 <__epilogue_restores__+0x18>

00008ae8 <vfprintf>:
    8ae8:	6f 92       	push	r6
    8aea:	7f 92       	push	r7
    8aec:	8f 92       	push	r8
    8aee:	9f 92       	push	r9
    8af0:	af 92       	push	r10
    8af2:	bf 92       	push	r11
    8af4:	cf 92       	push	r12
    8af6:	df 92       	push	r13
    8af8:	ef 92       	push	r14
    8afa:	ff 92       	push	r15
    8afc:	0f 93       	push	r16
    8afe:	1f 93       	push	r17
    8b00:	df 93       	push	r29
    8b02:	cf 93       	push	r28
    8b04:	cd b7       	in	r28, 0x3d	; 61
    8b06:	de b7       	in	r29, 0x3e	; 62
    8b08:	2d 97       	sbiw	r28, 0x0d	; 13
    8b0a:	0f b6       	in	r0, 0x3f	; 63
    8b0c:	f8 94       	cli
    8b0e:	de bf       	out	0x3e, r29	; 62
    8b10:	0f be       	out	0x3f, r0	; 63
    8b12:	cd bf       	out	0x3d, r28	; 61
    8b14:	6c 01       	movw	r12, r24
    8b16:	4b 01       	movw	r8, r22
    8b18:	8a 01       	movw	r16, r20
    8b1a:	fc 01       	movw	r30, r24
    8b1c:	17 82       	std	Z+7, r1	; 0x07
    8b1e:	16 82       	std	Z+6, r1	; 0x06
    8b20:	83 81       	ldd	r24, Z+3	; 0x03
    8b22:	81 fd       	sbrc	r24, 1
    8b24:	06 c0       	rjmp	.+12     	; 0x8b32 <vfprintf+0x4a>
    8b26:	2f ef       	ldi	r18, 0xFF	; 255
    8b28:	3f ef       	ldi	r19, 0xFF	; 255
    8b2a:	0e c1       	rjmp	.+540    	; 0x8d48 <vfprintf+0x260>
    8b2c:	0e 5f       	subi	r16, 0xFE	; 254
    8b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    8b30:	04 c0       	rjmp	.+8      	; 0x8b3a <vfprintf+0x52>
    8b32:	5e 01       	movw	r10, r28
    8b34:	08 94       	sec
    8b36:	a1 1c       	adc	r10, r1
    8b38:	b1 1c       	adc	r11, r1
    8b3a:	f6 01       	movw	r30, r12
    8b3c:	f3 80       	ldd	r15, Z+3	; 0x03
    8b3e:	f4 01       	movw	r30, r8
    8b40:	f3 fc       	sbrc	r15, 3
    8b42:	85 91       	lpm	r24, Z+
    8b44:	f3 fe       	sbrs	r15, 3
    8b46:	81 91       	ld	r24, Z+
    8b48:	4f 01       	movw	r8, r30
    8b4a:	88 23       	and	r24, r24
    8b4c:	09 f4       	brne	.+2      	; 0x8b50 <vfprintf+0x68>
    8b4e:	f9 c0       	rjmp	.+498    	; 0x8d42 <vfprintf+0x25a>
    8b50:	85 32       	cpi	r24, 0x25	; 37
    8b52:	51 f4       	brne	.+20     	; 0x8b68 <vfprintf+0x80>
    8b54:	f3 fc       	sbrc	r15, 3
    8b56:	25 91       	lpm	r18, Z+
    8b58:	f3 fe       	sbrs	r15, 3
    8b5a:	21 91       	ld	r18, Z+
    8b5c:	4f 01       	movw	r8, r30
    8b5e:	25 32       	cpi	r18, 0x25	; 37
    8b60:	11 f0       	breq	.+4      	; 0x8b66 <vfprintf+0x7e>
    8b62:	30 e0       	ldi	r19, 0x00	; 0
    8b64:	1f c0       	rjmp	.+62     	; 0x8ba4 <vfprintf+0xbc>
    8b66:	85 e2       	ldi	r24, 0x25	; 37
    8b68:	90 e0       	ldi	r25, 0x00	; 0
    8b6a:	32 c0       	rjmp	.+100    	; 0x8bd0 <vfprintf+0xe8>
    8b6c:	22 23       	and	r18, r18
    8b6e:	09 f4       	brne	.+2      	; 0x8b72 <vfprintf+0x8a>
    8b70:	e8 c0       	rjmp	.+464    	; 0x8d42 <vfprintf+0x25a>
    8b72:	82 e8       	ldi	r24, 0x82	; 130
    8b74:	94 e0       	ldi	r25, 0x04	; 4
    8b76:	62 2f       	mov	r22, r18
    8b78:	70 e0       	ldi	r23, 0x00	; 0
    8b7a:	2c 87       	std	Y+12, r18	; 0x0c
    8b7c:	3d 87       	std	Y+13, r19	; 0x0d
    8b7e:	0e 94 59 47 	call	0x8eb2	; 0x8eb2 <strchr_P>
    8b82:	2c 85       	ldd	r18, Y+12	; 0x0c
    8b84:	3d 85       	ldd	r19, Y+13	; 0x0d
    8b86:	00 97       	sbiw	r24, 0x00	; 0
    8b88:	39 f4       	brne	.+14     	; 0x8b98 <vfprintf+0xb0>
    8b8a:	23 32       	cpi	r18, 0x23	; 35
    8b8c:	11 f4       	brne	.+4      	; 0x8b92 <vfprintf+0xaa>
    8b8e:	30 61       	ori	r19, 0x10	; 16
    8b90:	03 c0       	rjmp	.+6      	; 0x8b98 <vfprintf+0xb0>
    8b92:	2c 36       	cpi	r18, 0x6C	; 108
    8b94:	61 f4       	brne	.+24     	; 0x8bae <vfprintf+0xc6>
    8b96:	30 68       	ori	r19, 0x80	; 128
    8b98:	f4 01       	movw	r30, r8
    8b9a:	f3 fc       	sbrc	r15, 3
    8b9c:	25 91       	lpm	r18, Z+
    8b9e:	f3 fe       	sbrs	r15, 3
    8ba0:	21 91       	ld	r18, Z+
    8ba2:	4f 01       	movw	r8, r30
    8ba4:	37 ff       	sbrs	r19, 7
    8ba6:	e2 cf       	rjmp	.-60     	; 0x8b6c <vfprintf+0x84>
    8ba8:	22 23       	and	r18, r18
    8baa:	09 f4       	brne	.+2      	; 0x8bae <vfprintf+0xc6>
    8bac:	ca c0       	rjmp	.+404    	; 0x8d42 <vfprintf+0x25a>
    8bae:	f3 2e       	mov	r15, r19
    8bb0:	8b e7       	ldi	r24, 0x7B	; 123
    8bb2:	94 e0       	ldi	r25, 0x04	; 4
    8bb4:	62 2f       	mov	r22, r18
    8bb6:	70 e0       	ldi	r23, 0x00	; 0
    8bb8:	2c 87       	std	Y+12, r18	; 0x0c
    8bba:	3d 87       	std	Y+13, r19	; 0x0d
    8bbc:	0e 94 59 47 	call	0x8eb2	; 0x8eb2 <strchr_P>
    8bc0:	2c 85       	ldd	r18, Y+12	; 0x0c
    8bc2:	3f 2d       	mov	r19, r15
    8bc4:	00 97       	sbiw	r24, 0x00	; 0
    8bc6:	41 f0       	breq	.+16     	; 0x8bd8 <vfprintf+0xf0>
    8bc8:	0c 5f       	subi	r16, 0xFC	; 252
    8bca:	1f 4f       	sbci	r17, 0xFF	; 255
    8bcc:	8f e3       	ldi	r24, 0x3F	; 63
    8bce:	90 e0       	ldi	r25, 0x00	; 0
    8bd0:	b6 01       	movw	r22, r12
    8bd2:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
    8bd6:	b1 cf       	rjmp	.-158    	; 0x8b3a <vfprintf+0x52>
    8bd8:	23 36       	cpi	r18, 0x63	; 99
    8bda:	29 f0       	breq	.+10     	; 0x8be6 <vfprintf+0xfe>
    8bdc:	23 37       	cpi	r18, 0x73	; 115
    8bde:	91 f0       	breq	.+36     	; 0x8c04 <vfprintf+0x11c>
    8be0:	23 35       	cpi	r18, 0x53	; 83
    8be2:	09 f5       	brne	.+66     	; 0x8c26 <vfprintf+0x13e>
    8be4:	0d c0       	rjmp	.+26     	; 0x8c00 <vfprintf+0x118>
    8be6:	32 e0       	ldi	r19, 0x02	; 2
    8be8:	e3 2e       	mov	r14, r19
    8bea:	f1 2c       	mov	r15, r1
    8bec:	e0 0e       	add	r14, r16
    8bee:	f1 1e       	adc	r15, r17
    8bf0:	f8 01       	movw	r30, r16
    8bf2:	80 81       	ld	r24, Z
    8bf4:	91 81       	ldd	r25, Z+1	; 0x01
    8bf6:	b6 01       	movw	r22, r12
    8bf8:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
    8bfc:	87 01       	movw	r16, r14
    8bfe:	9d cf       	rjmp	.-198    	; 0x8b3a <vfprintf+0x52>
    8c00:	f1 e0       	ldi	r31, 0x01	; 1
    8c02:	ff 2a       	or	r15, r31
    8c04:	f8 01       	movw	r30, r16
    8c06:	60 80       	ld	r6, Z
    8c08:	71 80       	ldd	r7, Z+1	; 0x01
    8c0a:	04 c0       	rjmp	.+8      	; 0x8c14 <vfprintf+0x12c>
    8c0c:	90 e0       	ldi	r25, 0x00	; 0
    8c0e:	b6 01       	movw	r22, r12
    8c10:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
    8c14:	f3 01       	movw	r30, r6
    8c16:	f0 fc       	sbrc	r15, 0
    8c18:	85 91       	lpm	r24, Z+
    8c1a:	f0 fe       	sbrs	r15, 0
    8c1c:	81 91       	ld	r24, Z+
    8c1e:	3f 01       	movw	r6, r30
    8c20:	88 23       	and	r24, r24
    8c22:	a1 f7       	brne	.-24     	; 0x8c0c <vfprintf+0x124>
    8c24:	83 cf       	rjmp	.-250    	; 0x8b2c <vfprintf+0x44>
    8c26:	24 36       	cpi	r18, 0x64	; 100
    8c28:	11 f0       	breq	.+4      	; 0x8c2e <vfprintf+0x146>
    8c2a:	29 36       	cpi	r18, 0x69	; 105
    8c2c:	29 f5       	brne	.+74     	; 0x8c78 <vfprintf+0x190>
    8c2e:	37 ff       	sbrs	r19, 7
    8c30:	08 c0       	rjmp	.+16     	; 0x8c42 <vfprintf+0x15a>
    8c32:	f8 01       	movw	r30, r16
    8c34:	60 81       	ld	r22, Z
    8c36:	71 81       	ldd	r23, Z+1	; 0x01
    8c38:	82 81       	ldd	r24, Z+2	; 0x02
    8c3a:	93 81       	ldd	r25, Z+3	; 0x03
    8c3c:	0c 5f       	subi	r16, 0xFC	; 252
    8c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    8c40:	09 c0       	rjmp	.+18     	; 0x8c54 <vfprintf+0x16c>
    8c42:	f8 01       	movw	r30, r16
    8c44:	60 81       	ld	r22, Z
    8c46:	71 81       	ldd	r23, Z+1	; 0x01
    8c48:	88 27       	eor	r24, r24
    8c4a:	77 fd       	sbrc	r23, 7
    8c4c:	80 95       	com	r24
    8c4e:	98 2f       	mov	r25, r24
    8c50:	0e 5f       	subi	r16, 0xFE	; 254
    8c52:	1f 4f       	sbci	r17, 0xFF	; 255
    8c54:	2f ee       	ldi	r18, 0xEF	; 239
    8c56:	f2 2e       	mov	r15, r18
    8c58:	f3 22       	and	r15, r19
    8c5a:	97 ff       	sbrs	r25, 7
    8c5c:	09 c0       	rjmp	.+18     	; 0x8c70 <vfprintf+0x188>
    8c5e:	90 95       	com	r25
    8c60:	80 95       	com	r24
    8c62:	70 95       	com	r23
    8c64:	61 95       	neg	r22
    8c66:	7f 4f       	sbci	r23, 0xFF	; 255
    8c68:	8f 4f       	sbci	r24, 0xFF	; 255
    8c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    8c6c:	f0 e4       	ldi	r31, 0x40	; 64
    8c6e:	ff 2a       	or	r15, r31
    8c70:	a5 01       	movw	r20, r10
    8c72:	2a e0       	ldi	r18, 0x0A	; 10
    8c74:	30 e0       	ldi	r19, 0x00	; 0
    8c76:	35 c0       	rjmp	.+106    	; 0x8ce2 <vfprintf+0x1fa>
    8c78:	20 37       	cpi	r18, 0x70	; 112
    8c7a:	b1 f0       	breq	.+44     	; 0x8ca8 <vfprintf+0x1c0>
    8c7c:	21 37       	cpi	r18, 0x71	; 113
    8c7e:	30 f4       	brcc	.+12     	; 0x8c8c <vfprintf+0x1a4>
    8c80:	28 35       	cpi	r18, 0x58	; 88
    8c82:	c9 f0       	breq	.+50     	; 0x8cb6 <vfprintf+0x1ce>
    8c84:	2f 36       	cpi	r18, 0x6F	; 111
    8c86:	09 f0       	breq	.+2      	; 0x8c8a <vfprintf+0x1a2>
    8c88:	5c c0       	rjmp	.+184    	; 0x8d42 <vfprintf+0x25a>
    8c8a:	06 c0       	rjmp	.+12     	; 0x8c98 <vfprintf+0x1b0>
    8c8c:	25 37       	cpi	r18, 0x75	; 117
    8c8e:	39 f0       	breq	.+14     	; 0x8c9e <vfprintf+0x1b6>
    8c90:	28 37       	cpi	r18, 0x78	; 120
    8c92:	09 f0       	breq	.+2      	; 0x8c96 <vfprintf+0x1ae>
    8c94:	56 c0       	rjmp	.+172    	; 0x8d42 <vfprintf+0x25a>
    8c96:	0a c0       	rjmp	.+20     	; 0x8cac <vfprintf+0x1c4>
    8c98:	28 e0       	ldi	r18, 0x08	; 8
    8c9a:	30 e0       	ldi	r19, 0x00	; 0
    8c9c:	10 c0       	rjmp	.+32     	; 0x8cbe <vfprintf+0x1d6>
    8c9e:	2f ee       	ldi	r18, 0xEF	; 239
    8ca0:	f2 22       	and	r15, r18
    8ca2:	2a e0       	ldi	r18, 0x0A	; 10
    8ca4:	30 e0       	ldi	r19, 0x00	; 0
    8ca6:	0b c0       	rjmp	.+22     	; 0x8cbe <vfprintf+0x1d6>
    8ca8:	80 e1       	ldi	r24, 0x10	; 16
    8caa:	f8 2a       	or	r15, r24
    8cac:	e4 e2       	ldi	r30, 0x24	; 36
    8cae:	fe 2a       	or	r15, r30
    8cb0:	20 e1       	ldi	r18, 0x10	; 16
    8cb2:	30 e0       	ldi	r19, 0x00	; 0
    8cb4:	04 c0       	rjmp	.+8      	; 0x8cbe <vfprintf+0x1d6>
    8cb6:	f4 e0       	ldi	r31, 0x04	; 4
    8cb8:	ff 2a       	or	r15, r31
    8cba:	20 e1       	ldi	r18, 0x10	; 16
    8cbc:	32 e0       	ldi	r19, 0x02	; 2
    8cbe:	f7 fe       	sbrs	r15, 7
    8cc0:	08 c0       	rjmp	.+16     	; 0x8cd2 <vfprintf+0x1ea>
    8cc2:	f8 01       	movw	r30, r16
    8cc4:	60 81       	ld	r22, Z
    8cc6:	71 81       	ldd	r23, Z+1	; 0x01
    8cc8:	82 81       	ldd	r24, Z+2	; 0x02
    8cca:	93 81       	ldd	r25, Z+3	; 0x03
    8ccc:	0c 5f       	subi	r16, 0xFC	; 252
    8cce:	1f 4f       	sbci	r17, 0xFF	; 255
    8cd0:	07 c0       	rjmp	.+14     	; 0x8ce0 <vfprintf+0x1f8>
    8cd2:	f8 01       	movw	r30, r16
    8cd4:	60 81       	ld	r22, Z
    8cd6:	71 81       	ldd	r23, Z+1	; 0x01
    8cd8:	80 e0       	ldi	r24, 0x00	; 0
    8cda:	90 e0       	ldi	r25, 0x00	; 0
    8cdc:	0e 5f       	subi	r16, 0xFE	; 254
    8cde:	1f 4f       	sbci	r17, 0xFF	; 255
    8ce0:	a5 01       	movw	r20, r10
    8ce2:	0e 94 b8 48 	call	0x9170	; 0x9170 <__ultoa_invert>
    8ce6:	e8 2e       	mov	r14, r24
    8ce8:	ea 18       	sub	r14, r10
    8cea:	6f 2c       	mov	r6, r15
    8cec:	77 24       	eor	r7, r7
    8cee:	f6 fe       	sbrs	r15, 6
    8cf0:	05 c0       	rjmp	.+10     	; 0x8cfc <vfprintf+0x214>
    8cf2:	8d e2       	ldi	r24, 0x2D	; 45
    8cf4:	90 e0       	ldi	r25, 0x00	; 0
    8cf6:	b6 01       	movw	r22, r12
    8cf8:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
    8cfc:	64 fe       	sbrs	r6, 4
    8cfe:	15 c0       	rjmp	.+42     	; 0x8d2a <vfprintf+0x242>
    8d00:	fe 01       	movw	r30, r28
    8d02:	ee 0d       	add	r30, r14
    8d04:	f1 1d       	adc	r31, r1
    8d06:	80 81       	ld	r24, Z
    8d08:	80 33       	cpi	r24, 0x30	; 48
    8d0a:	79 f0       	breq	.+30     	; 0x8d2a <vfprintf+0x242>
    8d0c:	80 e3       	ldi	r24, 0x30	; 48
    8d0e:	90 e0       	ldi	r25, 0x00	; 0
    8d10:	b6 01       	movw	r22, r12
    8d12:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
    8d16:	62 fe       	sbrs	r6, 2
    8d18:	08 c0       	rjmp	.+16     	; 0x8d2a <vfprintf+0x242>
    8d1a:	c3 01       	movw	r24, r6
    8d1c:	80 72       	andi	r24, 0x20	; 32
    8d1e:	90 70       	andi	r25, 0x00	; 0
    8d20:	88 5a       	subi	r24, 0xA8	; 168
    8d22:	9f 4f       	sbci	r25, 0xFF	; 255
    8d24:	b6 01       	movw	r22, r12
    8d26:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
    8d2a:	ea 94       	dec	r14
    8d2c:	f5 01       	movw	r30, r10
    8d2e:	ee 0d       	add	r30, r14
    8d30:	f1 1d       	adc	r31, r1
    8d32:	80 81       	ld	r24, Z
    8d34:	90 e0       	ldi	r25, 0x00	; 0
    8d36:	b6 01       	movw	r22, r12
    8d38:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
    8d3c:	ee 20       	and	r14, r14
    8d3e:	a9 f7       	brne	.-22     	; 0x8d2a <vfprintf+0x242>
    8d40:	fc ce       	rjmp	.-520    	; 0x8b3a <vfprintf+0x52>
    8d42:	f6 01       	movw	r30, r12
    8d44:	26 81       	ldd	r18, Z+6	; 0x06
    8d46:	37 81       	ldd	r19, Z+7	; 0x07
    8d48:	c9 01       	movw	r24, r18
    8d4a:	2d 96       	adiw	r28, 0x0d	; 13
    8d4c:	0f b6       	in	r0, 0x3f	; 63
    8d4e:	f8 94       	cli
    8d50:	de bf       	out	0x3e, r29	; 62
    8d52:	0f be       	out	0x3f, r0	; 63
    8d54:	cd bf       	out	0x3d, r28	; 61
    8d56:	cf 91       	pop	r28
    8d58:	df 91       	pop	r29
    8d5a:	1f 91       	pop	r17
    8d5c:	0f 91       	pop	r16
    8d5e:	ff 90       	pop	r15
    8d60:	ef 90       	pop	r14
    8d62:	df 90       	pop	r13
    8d64:	cf 90       	pop	r12
    8d66:	bf 90       	pop	r11
    8d68:	af 90       	pop	r10
    8d6a:	9f 90       	pop	r9
    8d6c:	8f 90       	pop	r8
    8d6e:	7f 90       	pop	r7
    8d70:	6f 90       	pop	r6
    8d72:	08 95       	ret

00008d74 <__mulsi3>:
    8d74:	62 9f       	mul	r22, r18
    8d76:	d0 01       	movw	r26, r0
    8d78:	73 9f       	mul	r23, r19
    8d7a:	f0 01       	movw	r30, r0
    8d7c:	82 9f       	mul	r24, r18
    8d7e:	e0 0d       	add	r30, r0
    8d80:	f1 1d       	adc	r31, r1
    8d82:	64 9f       	mul	r22, r20
    8d84:	e0 0d       	add	r30, r0
    8d86:	f1 1d       	adc	r31, r1
    8d88:	92 9f       	mul	r25, r18
    8d8a:	f0 0d       	add	r31, r0
    8d8c:	83 9f       	mul	r24, r19
    8d8e:	f0 0d       	add	r31, r0
    8d90:	74 9f       	mul	r23, r20
    8d92:	f0 0d       	add	r31, r0
    8d94:	65 9f       	mul	r22, r21
    8d96:	f0 0d       	add	r31, r0
    8d98:	99 27       	eor	r25, r25
    8d9a:	72 9f       	mul	r23, r18
    8d9c:	b0 0d       	add	r27, r0
    8d9e:	e1 1d       	adc	r30, r1
    8da0:	f9 1f       	adc	r31, r25
    8da2:	63 9f       	mul	r22, r19
    8da4:	b0 0d       	add	r27, r0
    8da6:	e1 1d       	adc	r30, r1
    8da8:	f9 1f       	adc	r31, r25
    8daa:	bd 01       	movw	r22, r26
    8dac:	cf 01       	movw	r24, r30
    8dae:	11 24       	eor	r1, r1
    8db0:	08 95       	ret

00008db2 <__udivmodhi4>:
    8db2:	aa 1b       	sub	r26, r26
    8db4:	bb 1b       	sub	r27, r27
    8db6:	51 e1       	ldi	r21, 0x11	; 17
    8db8:	07 c0       	rjmp	.+14     	; 0x8dc8 <__udivmodhi4_ep>

00008dba <__udivmodhi4_loop>:
    8dba:	aa 1f       	adc	r26, r26
    8dbc:	bb 1f       	adc	r27, r27
    8dbe:	a6 17       	cp	r26, r22
    8dc0:	b7 07       	cpc	r27, r23
    8dc2:	10 f0       	brcs	.+4      	; 0x8dc8 <__udivmodhi4_ep>
    8dc4:	a6 1b       	sub	r26, r22
    8dc6:	b7 0b       	sbc	r27, r23

00008dc8 <__udivmodhi4_ep>:
    8dc8:	88 1f       	adc	r24, r24
    8dca:	99 1f       	adc	r25, r25
    8dcc:	5a 95       	dec	r21
    8dce:	a9 f7       	brne	.-22     	; 0x8dba <__udivmodhi4_loop>
    8dd0:	80 95       	com	r24
    8dd2:	90 95       	com	r25
    8dd4:	bc 01       	movw	r22, r24
    8dd6:	cd 01       	movw	r24, r26
    8dd8:	08 95       	ret

00008dda <__divmodhi4>:
    8dda:	97 fb       	bst	r25, 7
    8ddc:	09 2e       	mov	r0, r25
    8dde:	07 26       	eor	r0, r23
    8de0:	0a d0       	rcall	.+20     	; 0x8df6 <__divmodhi4_neg1>
    8de2:	77 fd       	sbrc	r23, 7
    8de4:	04 d0       	rcall	.+8      	; 0x8dee <__divmodhi4_neg2>
    8de6:	e5 df       	rcall	.-54     	; 0x8db2 <__udivmodhi4>
    8de8:	06 d0       	rcall	.+12     	; 0x8df6 <__divmodhi4_neg1>
    8dea:	00 20       	and	r0, r0
    8dec:	1a f4       	brpl	.+6      	; 0x8df4 <__divmodhi4_exit>

00008dee <__divmodhi4_neg2>:
    8dee:	70 95       	com	r23
    8df0:	61 95       	neg	r22
    8df2:	7f 4f       	sbci	r23, 0xFF	; 255

00008df4 <__divmodhi4_exit>:
    8df4:	08 95       	ret

00008df6 <__divmodhi4_neg1>:
    8df6:	f6 f7       	brtc	.-4      	; 0x8df4 <__divmodhi4_exit>
    8df8:	90 95       	com	r25
    8dfa:	81 95       	neg	r24
    8dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    8dfe:	08 95       	ret

00008e00 <__udivmodsi4>:
    8e00:	a1 e2       	ldi	r26, 0x21	; 33
    8e02:	1a 2e       	mov	r1, r26
    8e04:	aa 1b       	sub	r26, r26
    8e06:	bb 1b       	sub	r27, r27
    8e08:	fd 01       	movw	r30, r26
    8e0a:	0d c0       	rjmp	.+26     	; 0x8e26 <__udivmodsi4_ep>

00008e0c <__udivmodsi4_loop>:
    8e0c:	aa 1f       	adc	r26, r26
    8e0e:	bb 1f       	adc	r27, r27
    8e10:	ee 1f       	adc	r30, r30
    8e12:	ff 1f       	adc	r31, r31
    8e14:	a2 17       	cp	r26, r18
    8e16:	b3 07       	cpc	r27, r19
    8e18:	e4 07       	cpc	r30, r20
    8e1a:	f5 07       	cpc	r31, r21
    8e1c:	20 f0       	brcs	.+8      	; 0x8e26 <__udivmodsi4_ep>
    8e1e:	a2 1b       	sub	r26, r18
    8e20:	b3 0b       	sbc	r27, r19
    8e22:	e4 0b       	sbc	r30, r20
    8e24:	f5 0b       	sbc	r31, r21

00008e26 <__udivmodsi4_ep>:
    8e26:	66 1f       	adc	r22, r22
    8e28:	77 1f       	adc	r23, r23
    8e2a:	88 1f       	adc	r24, r24
    8e2c:	99 1f       	adc	r25, r25
    8e2e:	1a 94       	dec	r1
    8e30:	69 f7       	brne	.-38     	; 0x8e0c <__udivmodsi4_loop>
    8e32:	60 95       	com	r22
    8e34:	70 95       	com	r23
    8e36:	80 95       	com	r24
    8e38:	90 95       	com	r25
    8e3a:	9b 01       	movw	r18, r22
    8e3c:	ac 01       	movw	r20, r24
    8e3e:	bd 01       	movw	r22, r26
    8e40:	cf 01       	movw	r24, r30
    8e42:	08 95       	ret

00008e44 <__prologue_saves__>:
    8e44:	2f 92       	push	r2
    8e46:	3f 92       	push	r3
    8e48:	4f 92       	push	r4
    8e4a:	5f 92       	push	r5
    8e4c:	6f 92       	push	r6
    8e4e:	7f 92       	push	r7
    8e50:	8f 92       	push	r8
    8e52:	9f 92       	push	r9
    8e54:	af 92       	push	r10
    8e56:	bf 92       	push	r11
    8e58:	cf 92       	push	r12
    8e5a:	df 92       	push	r13
    8e5c:	ef 92       	push	r14
    8e5e:	ff 92       	push	r15
    8e60:	0f 93       	push	r16
    8e62:	1f 93       	push	r17
    8e64:	cf 93       	push	r28
    8e66:	df 93       	push	r29
    8e68:	cd b7       	in	r28, 0x3d	; 61
    8e6a:	de b7       	in	r29, 0x3e	; 62
    8e6c:	ca 1b       	sub	r28, r26
    8e6e:	db 0b       	sbc	r29, r27
    8e70:	0f b6       	in	r0, 0x3f	; 63
    8e72:	f8 94       	cli
    8e74:	de bf       	out	0x3e, r29	; 62
    8e76:	0f be       	out	0x3f, r0	; 63
    8e78:	cd bf       	out	0x3d, r28	; 61
    8e7a:	09 94       	ijmp

00008e7c <__epilogue_restores__>:
    8e7c:	2a 88       	ldd	r2, Y+18	; 0x12
    8e7e:	39 88       	ldd	r3, Y+17	; 0x11
    8e80:	48 88       	ldd	r4, Y+16	; 0x10
    8e82:	5f 84       	ldd	r5, Y+15	; 0x0f
    8e84:	6e 84       	ldd	r6, Y+14	; 0x0e
    8e86:	7d 84       	ldd	r7, Y+13	; 0x0d
    8e88:	8c 84       	ldd	r8, Y+12	; 0x0c
    8e8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    8e8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    8e8e:	b9 84       	ldd	r11, Y+9	; 0x09
    8e90:	c8 84       	ldd	r12, Y+8	; 0x08
    8e92:	df 80       	ldd	r13, Y+7	; 0x07
    8e94:	ee 80       	ldd	r14, Y+6	; 0x06
    8e96:	fd 80       	ldd	r15, Y+5	; 0x05
    8e98:	0c 81       	ldd	r16, Y+4	; 0x04
    8e9a:	1b 81       	ldd	r17, Y+3	; 0x03
    8e9c:	aa 81       	ldd	r26, Y+2	; 0x02
    8e9e:	b9 81       	ldd	r27, Y+1	; 0x01
    8ea0:	ce 0f       	add	r28, r30
    8ea2:	d1 1d       	adc	r29, r1
    8ea4:	0f b6       	in	r0, 0x3f	; 63
    8ea6:	f8 94       	cli
    8ea8:	de bf       	out	0x3e, r29	; 62
    8eaa:	0f be       	out	0x3f, r0	; 63
    8eac:	cd bf       	out	0x3d, r28	; 61
    8eae:	ed 01       	movw	r28, r26
    8eb0:	08 95       	ret

00008eb2 <strchr_P>:
    8eb2:	fc 01       	movw	r30, r24
    8eb4:	05 90       	lpm	r0, Z+
    8eb6:	06 16       	cp	r0, r22
    8eb8:	21 f0       	breq	.+8      	; 0x8ec2 <strchr_P+0x10>
    8eba:	00 20       	and	r0, r0
    8ebc:	d9 f7       	brne	.-10     	; 0x8eb4 <strchr_P+0x2>
    8ebe:	c0 01       	movw	r24, r0
    8ec0:	08 95       	ret
    8ec2:	31 97       	sbiw	r30, 0x01	; 1
    8ec4:	cf 01       	movw	r24, r30
    8ec6:	08 95       	ret

00008ec8 <memcpy>:
    8ec8:	fb 01       	movw	r30, r22
    8eca:	dc 01       	movw	r26, r24
    8ecc:	02 c0       	rjmp	.+4      	; 0x8ed2 <memcpy+0xa>
    8ece:	01 90       	ld	r0, Z+
    8ed0:	0d 92       	st	X+, r0
    8ed2:	41 50       	subi	r20, 0x01	; 1
    8ed4:	50 40       	sbci	r21, 0x00	; 0
    8ed6:	d8 f7       	brcc	.-10     	; 0x8ece <memcpy+0x6>
    8ed8:	08 95       	ret

00008eda <memset>:
    8eda:	dc 01       	movw	r26, r24
    8edc:	01 c0       	rjmp	.+2      	; 0x8ee0 <memset+0x6>
    8ede:	6d 93       	st	X+, r22
    8ee0:	41 50       	subi	r20, 0x01	; 1
    8ee2:	50 40       	sbci	r21, 0x00	; 0
    8ee4:	e0 f7       	brcc	.-8      	; 0x8ede <memset+0x4>
    8ee6:	08 95       	ret

00008ee8 <strcpy>:
    8ee8:	fb 01       	movw	r30, r22
    8eea:	dc 01       	movw	r26, r24
    8eec:	01 90       	ld	r0, Z+
    8eee:	0d 92       	st	X+, r0
    8ef0:	00 20       	and	r0, r0
    8ef2:	e1 f7       	brne	.-8      	; 0x8eec <strcpy+0x4>
    8ef4:	08 95       	ret

00008ef6 <fdevopen>:
    8ef6:	0f 93       	push	r16
    8ef8:	1f 93       	push	r17
    8efa:	cf 93       	push	r28
    8efc:	df 93       	push	r29
    8efe:	ec 01       	movw	r28, r24
    8f00:	8b 01       	movw	r16, r22
    8f02:	00 97       	sbiw	r24, 0x00	; 0
    8f04:	31 f4       	brne	.+12     	; 0x8f12 <fdevopen+0x1c>
    8f06:	61 15       	cp	r22, r1
    8f08:	71 05       	cpc	r23, r1
    8f0a:	19 f4       	brne	.+6      	; 0x8f12 <fdevopen+0x1c>
    8f0c:	20 e0       	ldi	r18, 0x00	; 0
    8f0e:	30 e0       	ldi	r19, 0x00	; 0
    8f10:	38 c0       	rjmp	.+112    	; 0x8f82 <fdevopen+0x8c>
    8f12:	81 e0       	ldi	r24, 0x01	; 1
    8f14:	90 e0       	ldi	r25, 0x00	; 0
    8f16:	6e e0       	ldi	r22, 0x0E	; 14
    8f18:	70 e0       	ldi	r23, 0x00	; 0
    8f1a:	0e 94 2c 49 	call	0x9258	; 0x9258 <calloc>
    8f1e:	fc 01       	movw	r30, r24
    8f20:	9c 01       	movw	r18, r24
    8f22:	00 97       	sbiw	r24, 0x00	; 0
    8f24:	71 f1       	breq	.+92     	; 0x8f82 <fdevopen+0x8c>
    8f26:	80 e8       	ldi	r24, 0x80	; 128
    8f28:	83 83       	std	Z+3, r24	; 0x03
    8f2a:	01 15       	cp	r16, r1
    8f2c:	11 05       	cpc	r17, r1
    8f2e:	71 f0       	breq	.+28     	; 0x8f4c <fdevopen+0x56>
    8f30:	13 87       	std	Z+11, r17	; 0x0b
    8f32:	02 87       	std	Z+10, r16	; 0x0a
    8f34:	81 e8       	ldi	r24, 0x81	; 129
    8f36:	83 83       	std	Z+3, r24	; 0x03
    8f38:	80 91 46 20 	lds	r24, 0x2046
    8f3c:	90 91 47 20 	lds	r25, 0x2047
    8f40:	00 97       	sbiw	r24, 0x00	; 0
    8f42:	21 f4       	brne	.+8      	; 0x8f4c <fdevopen+0x56>
    8f44:	f0 93 47 20 	sts	0x2047, r31
    8f48:	e0 93 46 20 	sts	0x2046, r30
    8f4c:	20 97       	sbiw	r28, 0x00	; 0
    8f4e:	c9 f0       	breq	.+50     	; 0x8f82 <fdevopen+0x8c>
    8f50:	d1 87       	std	Z+9, r29	; 0x09
    8f52:	c0 87       	std	Z+8, r28	; 0x08
    8f54:	83 81       	ldd	r24, Z+3	; 0x03
    8f56:	82 60       	ori	r24, 0x02	; 2
    8f58:	83 83       	std	Z+3, r24	; 0x03
    8f5a:	80 91 48 20 	lds	r24, 0x2048
    8f5e:	90 91 49 20 	lds	r25, 0x2049
    8f62:	00 97       	sbiw	r24, 0x00	; 0
    8f64:	71 f4       	brne	.+28     	; 0x8f82 <fdevopen+0x8c>
    8f66:	f0 93 49 20 	sts	0x2049, r31
    8f6a:	e0 93 48 20 	sts	0x2048, r30
    8f6e:	80 91 4a 20 	lds	r24, 0x204A
    8f72:	90 91 4b 20 	lds	r25, 0x204B
    8f76:	00 97       	sbiw	r24, 0x00	; 0
    8f78:	21 f4       	brne	.+8      	; 0x8f82 <fdevopen+0x8c>
    8f7a:	f0 93 4b 20 	sts	0x204B, r31
    8f7e:	e0 93 4a 20 	sts	0x204A, r30
    8f82:	c9 01       	movw	r24, r18
    8f84:	df 91       	pop	r29
    8f86:	cf 91       	pop	r28
    8f88:	1f 91       	pop	r17
    8f8a:	0f 91       	pop	r16
    8f8c:	08 95       	ret

00008f8e <fgetc>:
    8f8e:	cf 93       	push	r28
    8f90:	df 93       	push	r29
    8f92:	ec 01       	movw	r28, r24
    8f94:	3b 81       	ldd	r19, Y+3	; 0x03
    8f96:	30 ff       	sbrs	r19, 0
    8f98:	17 c0       	rjmp	.+46     	; 0x8fc8 <fgetc+0x3a>
    8f9a:	36 ff       	sbrs	r19, 6
    8f9c:	09 c0       	rjmp	.+18     	; 0x8fb0 <fgetc+0x22>
    8f9e:	3f 7b       	andi	r19, 0xBF	; 191
    8fa0:	3b 83       	std	Y+3, r19	; 0x03
    8fa2:	8e 81       	ldd	r24, Y+6	; 0x06
    8fa4:	9f 81       	ldd	r25, Y+7	; 0x07
    8fa6:	01 96       	adiw	r24, 0x01	; 1
    8fa8:	9f 83       	std	Y+7, r25	; 0x07
    8faa:	8e 83       	std	Y+6, r24	; 0x06
    8fac:	2a 81       	ldd	r18, Y+2	; 0x02
    8fae:	2b c0       	rjmp	.+86     	; 0x9006 <fgetc+0x78>
    8fb0:	32 ff       	sbrs	r19, 2
    8fb2:	11 c0       	rjmp	.+34     	; 0x8fd6 <fgetc+0x48>
    8fb4:	e8 81       	ld	r30, Y
    8fb6:	f9 81       	ldd	r31, Y+1	; 0x01
    8fb8:	80 81       	ld	r24, Z
    8fba:	99 27       	eor	r25, r25
    8fbc:	87 fd       	sbrc	r24, 7
    8fbe:	90 95       	com	r25
    8fc0:	00 97       	sbiw	r24, 0x00	; 0
    8fc2:	29 f4       	brne	.+10     	; 0x8fce <fgetc+0x40>
    8fc4:	30 62       	ori	r19, 0x20	; 32
    8fc6:	3b 83       	std	Y+3, r19	; 0x03
    8fc8:	2f ef       	ldi	r18, 0xFF	; 255
    8fca:	3f ef       	ldi	r19, 0xFF	; 255
    8fcc:	1d c0       	rjmp	.+58     	; 0x9008 <fgetc+0x7a>
    8fce:	31 96       	adiw	r30, 0x01	; 1
    8fd0:	f9 83       	std	Y+1, r31	; 0x01
    8fd2:	e8 83       	st	Y, r30
    8fd4:	11 c0       	rjmp	.+34     	; 0x8ff8 <fgetc+0x6a>
    8fd6:	ea 85       	ldd	r30, Y+10	; 0x0a
    8fd8:	fb 85       	ldd	r31, Y+11	; 0x0b
    8fda:	ce 01       	movw	r24, r28
    8fdc:	09 95       	icall
    8fde:	97 ff       	sbrs	r25, 7
    8fe0:	0b c0       	rjmp	.+22     	; 0x8ff8 <fgetc+0x6a>
    8fe2:	2b 81       	ldd	r18, Y+3	; 0x03
    8fe4:	3f ef       	ldi	r19, 0xFF	; 255
    8fe6:	8f 3f       	cpi	r24, 0xFF	; 255
    8fe8:	93 07       	cpc	r25, r19
    8fea:	11 f0       	breq	.+4      	; 0x8ff0 <fgetc+0x62>
    8fec:	80 e2       	ldi	r24, 0x20	; 32
    8fee:	01 c0       	rjmp	.+2      	; 0x8ff2 <fgetc+0x64>
    8ff0:	80 e1       	ldi	r24, 0x10	; 16
    8ff2:	82 2b       	or	r24, r18
    8ff4:	8b 83       	std	Y+3, r24	; 0x03
    8ff6:	e8 cf       	rjmp	.-48     	; 0x8fc8 <fgetc+0x3a>
    8ff8:	2e 81       	ldd	r18, Y+6	; 0x06
    8ffa:	3f 81       	ldd	r19, Y+7	; 0x07
    8ffc:	2f 5f       	subi	r18, 0xFF	; 255
    8ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    9000:	3f 83       	std	Y+7, r19	; 0x07
    9002:	2e 83       	std	Y+6, r18	; 0x06
    9004:	28 2f       	mov	r18, r24
    9006:	30 e0       	ldi	r19, 0x00	; 0
    9008:	c9 01       	movw	r24, r18
    900a:	df 91       	pop	r29
    900c:	cf 91       	pop	r28
    900e:	08 95       	ret

00009010 <fputc>:
    9010:	0f 93       	push	r16
    9012:	1f 93       	push	r17
    9014:	cf 93       	push	r28
    9016:	df 93       	push	r29
    9018:	8c 01       	movw	r16, r24
    901a:	eb 01       	movw	r28, r22
    901c:	8b 81       	ldd	r24, Y+3	; 0x03
    901e:	81 ff       	sbrs	r24, 1
    9020:	1b c0       	rjmp	.+54     	; 0x9058 <fputc+0x48>
    9022:	82 ff       	sbrs	r24, 2
    9024:	0d c0       	rjmp	.+26     	; 0x9040 <fputc+0x30>
    9026:	2e 81       	ldd	r18, Y+6	; 0x06
    9028:	3f 81       	ldd	r19, Y+7	; 0x07
    902a:	8c 81       	ldd	r24, Y+4	; 0x04
    902c:	9d 81       	ldd	r25, Y+5	; 0x05
    902e:	28 17       	cp	r18, r24
    9030:	39 07       	cpc	r19, r25
    9032:	64 f4       	brge	.+24     	; 0x904c <fputc+0x3c>
    9034:	e8 81       	ld	r30, Y
    9036:	f9 81       	ldd	r31, Y+1	; 0x01
    9038:	01 93       	st	Z+, r16
    903a:	f9 83       	std	Y+1, r31	; 0x01
    903c:	e8 83       	st	Y, r30
    903e:	06 c0       	rjmp	.+12     	; 0x904c <fputc+0x3c>
    9040:	e8 85       	ldd	r30, Y+8	; 0x08
    9042:	f9 85       	ldd	r31, Y+9	; 0x09
    9044:	80 2f       	mov	r24, r16
    9046:	09 95       	icall
    9048:	00 97       	sbiw	r24, 0x00	; 0
    904a:	31 f4       	brne	.+12     	; 0x9058 <fputc+0x48>
    904c:	8e 81       	ldd	r24, Y+6	; 0x06
    904e:	9f 81       	ldd	r25, Y+7	; 0x07
    9050:	01 96       	adiw	r24, 0x01	; 1
    9052:	9f 83       	std	Y+7, r25	; 0x07
    9054:	8e 83       	std	Y+6, r24	; 0x06
    9056:	02 c0       	rjmp	.+4      	; 0x905c <fputc+0x4c>
    9058:	0f ef       	ldi	r16, 0xFF	; 255
    905a:	1f ef       	ldi	r17, 0xFF	; 255
    905c:	c8 01       	movw	r24, r16
    905e:	df 91       	pop	r29
    9060:	cf 91       	pop	r28
    9062:	1f 91       	pop	r17
    9064:	0f 91       	pop	r16
    9066:	08 95       	ret

00009068 <printf>:
    9068:	df 93       	push	r29
    906a:	cf 93       	push	r28
    906c:	cd b7       	in	r28, 0x3d	; 61
    906e:	de b7       	in	r29, 0x3e	; 62
    9070:	fe 01       	movw	r30, r28
    9072:	35 96       	adiw	r30, 0x05	; 5
    9074:	61 91       	ld	r22, Z+
    9076:	71 91       	ld	r23, Z+
    9078:	80 91 48 20 	lds	r24, 0x2048
    907c:	90 91 49 20 	lds	r25, 0x2049
    9080:	af 01       	movw	r20, r30
    9082:	0e 94 74 45 	call	0x8ae8	; 0x8ae8 <vfprintf>
    9086:	cf 91       	pop	r28
    9088:	df 91       	pop	r29
    908a:	08 95       	ret

0000908c <putchar>:
    908c:	60 91 48 20 	lds	r22, 0x2048
    9090:	70 91 49 20 	lds	r23, 0x2049
    9094:	0e 94 08 48 	call	0x9010	; 0x9010 <fputc>
    9098:	08 95       	ret

0000909a <puts>:
    909a:	ef 92       	push	r14
    909c:	ff 92       	push	r15
    909e:	0f 93       	push	r16
    90a0:	1f 93       	push	r17
    90a2:	cf 93       	push	r28
    90a4:	df 93       	push	r29
    90a6:	8c 01       	movw	r16, r24
    90a8:	e0 91 48 20 	lds	r30, 0x2048
    90ac:	f0 91 49 20 	lds	r31, 0x2049
    90b0:	83 81       	ldd	r24, Z+3	; 0x03
    90b2:	81 ff       	sbrs	r24, 1
    90b4:	23 c0       	rjmp	.+70     	; 0x90fc <puts+0x62>
    90b6:	c0 e0       	ldi	r28, 0x00	; 0
    90b8:	d0 e0       	ldi	r29, 0x00	; 0
    90ba:	0e c0       	rjmp	.+28     	; 0x90d8 <puts+0x3e>
    90bc:	60 91 48 20 	lds	r22, 0x2048
    90c0:	70 91 49 20 	lds	r23, 0x2049
    90c4:	db 01       	movw	r26, r22
    90c6:	18 96       	adiw	r26, 0x08	; 8
    90c8:	ed 91       	ld	r30, X+
    90ca:	fc 91       	ld	r31, X
    90cc:	19 97       	sbiw	r26, 0x09	; 9
    90ce:	09 95       	icall
    90d0:	00 97       	sbiw	r24, 0x00	; 0
    90d2:	11 f0       	breq	.+4      	; 0x90d8 <puts+0x3e>
    90d4:	cf ef       	ldi	r28, 0xFF	; 255
    90d6:	df ef       	ldi	r29, 0xFF	; 255
    90d8:	f8 01       	movw	r30, r16
    90da:	81 91       	ld	r24, Z+
    90dc:	8f 01       	movw	r16, r30
    90de:	88 23       	and	r24, r24
    90e0:	69 f7       	brne	.-38     	; 0x90bc <puts+0x22>
    90e2:	60 91 48 20 	lds	r22, 0x2048
    90e6:	70 91 49 20 	lds	r23, 0x2049
    90ea:	db 01       	movw	r26, r22
    90ec:	18 96       	adiw	r26, 0x08	; 8
    90ee:	ed 91       	ld	r30, X+
    90f0:	fc 91       	ld	r31, X
    90f2:	19 97       	sbiw	r26, 0x09	; 9
    90f4:	8a e0       	ldi	r24, 0x0A	; 10
    90f6:	09 95       	icall
    90f8:	00 97       	sbiw	r24, 0x00	; 0
    90fa:	11 f0       	breq	.+4      	; 0x9100 <puts+0x66>
    90fc:	cf ef       	ldi	r28, 0xFF	; 255
    90fe:	df ef       	ldi	r29, 0xFF	; 255
    9100:	ce 01       	movw	r24, r28
    9102:	df 91       	pop	r29
    9104:	cf 91       	pop	r28
    9106:	1f 91       	pop	r17
    9108:	0f 91       	pop	r16
    910a:	ff 90       	pop	r15
    910c:	ef 90       	pop	r14
    910e:	08 95       	ret

00009110 <sprintf>:
    9110:	0f 93       	push	r16
    9112:	1f 93       	push	r17
    9114:	df 93       	push	r29
    9116:	cf 93       	push	r28
    9118:	cd b7       	in	r28, 0x3d	; 61
    911a:	de b7       	in	r29, 0x3e	; 62
    911c:	2e 97       	sbiw	r28, 0x0e	; 14
    911e:	0f b6       	in	r0, 0x3f	; 63
    9120:	f8 94       	cli
    9122:	de bf       	out	0x3e, r29	; 62
    9124:	0f be       	out	0x3f, r0	; 63
    9126:	cd bf       	out	0x3d, r28	; 61
    9128:	0d 89       	ldd	r16, Y+21	; 0x15
    912a:	1e 89       	ldd	r17, Y+22	; 0x16
    912c:	86 e0       	ldi	r24, 0x06	; 6
    912e:	8c 83       	std	Y+4, r24	; 0x04
    9130:	1a 83       	std	Y+2, r17	; 0x02
    9132:	09 83       	std	Y+1, r16	; 0x01
    9134:	8f ef       	ldi	r24, 0xFF	; 255
    9136:	9f e7       	ldi	r25, 0x7F	; 127
    9138:	9e 83       	std	Y+6, r25	; 0x06
    913a:	8d 83       	std	Y+5, r24	; 0x05
    913c:	9e 01       	movw	r18, r28
    913e:	27 5e       	subi	r18, 0xE7	; 231
    9140:	3f 4f       	sbci	r19, 0xFF	; 255
    9142:	ce 01       	movw	r24, r28
    9144:	01 96       	adiw	r24, 0x01	; 1
    9146:	6f 89       	ldd	r22, Y+23	; 0x17
    9148:	78 8d       	ldd	r23, Y+24	; 0x18
    914a:	a9 01       	movw	r20, r18
    914c:	0e 94 74 45 	call	0x8ae8	; 0x8ae8 <vfprintf>
    9150:	ef 81       	ldd	r30, Y+7	; 0x07
    9152:	f8 85       	ldd	r31, Y+8	; 0x08
    9154:	e0 0f       	add	r30, r16
    9156:	f1 1f       	adc	r31, r17
    9158:	10 82       	st	Z, r1
    915a:	2e 96       	adiw	r28, 0x0e	; 14
    915c:	0f b6       	in	r0, 0x3f	; 63
    915e:	f8 94       	cli
    9160:	de bf       	out	0x3e, r29	; 62
    9162:	0f be       	out	0x3f, r0	; 63
    9164:	cd bf       	out	0x3d, r28	; 61
    9166:	cf 91       	pop	r28
    9168:	df 91       	pop	r29
    916a:	1f 91       	pop	r17
    916c:	0f 91       	pop	r16
    916e:	08 95       	ret

00009170 <__ultoa_invert>:
    9170:	fa 01       	movw	r30, r20
    9172:	aa 27       	eor	r26, r26
    9174:	28 30       	cpi	r18, 0x08	; 8
    9176:	51 f1       	breq	.+84     	; 0x91cc <__ultoa_invert+0x5c>
    9178:	20 31       	cpi	r18, 0x10	; 16
    917a:	81 f1       	breq	.+96     	; 0x91dc <__ultoa_invert+0x6c>
    917c:	e8 94       	clt
    917e:	6f 93       	push	r22
    9180:	6e 7f       	andi	r22, 0xFE	; 254
    9182:	6e 5f       	subi	r22, 0xFE	; 254
    9184:	7f 4f       	sbci	r23, 0xFF	; 255
    9186:	8f 4f       	sbci	r24, 0xFF	; 255
    9188:	9f 4f       	sbci	r25, 0xFF	; 255
    918a:	af 4f       	sbci	r26, 0xFF	; 255
    918c:	b1 e0       	ldi	r27, 0x01	; 1
    918e:	3e d0       	rcall	.+124    	; 0x920c <__ultoa_invert+0x9c>
    9190:	b4 e0       	ldi	r27, 0x04	; 4
    9192:	3c d0       	rcall	.+120    	; 0x920c <__ultoa_invert+0x9c>
    9194:	67 0f       	add	r22, r23
    9196:	78 1f       	adc	r23, r24
    9198:	89 1f       	adc	r24, r25
    919a:	9a 1f       	adc	r25, r26
    919c:	a1 1d       	adc	r26, r1
    919e:	68 0f       	add	r22, r24
    91a0:	79 1f       	adc	r23, r25
    91a2:	8a 1f       	adc	r24, r26
    91a4:	91 1d       	adc	r25, r1
    91a6:	a1 1d       	adc	r26, r1
    91a8:	6a 0f       	add	r22, r26
    91aa:	71 1d       	adc	r23, r1
    91ac:	81 1d       	adc	r24, r1
    91ae:	91 1d       	adc	r25, r1
    91b0:	a1 1d       	adc	r26, r1
    91b2:	20 d0       	rcall	.+64     	; 0x91f4 <__ultoa_invert+0x84>
    91b4:	09 f4       	brne	.+2      	; 0x91b8 <__ultoa_invert+0x48>
    91b6:	68 94       	set
    91b8:	3f 91       	pop	r19
    91ba:	2a e0       	ldi	r18, 0x0A	; 10
    91bc:	26 9f       	mul	r18, r22
    91be:	11 24       	eor	r1, r1
    91c0:	30 19       	sub	r19, r0
    91c2:	30 5d       	subi	r19, 0xD0	; 208
    91c4:	31 93       	st	Z+, r19
    91c6:	de f6       	brtc	.-74     	; 0x917e <__ultoa_invert+0xe>
    91c8:	cf 01       	movw	r24, r30
    91ca:	08 95       	ret
    91cc:	46 2f       	mov	r20, r22
    91ce:	47 70       	andi	r20, 0x07	; 7
    91d0:	40 5d       	subi	r20, 0xD0	; 208
    91d2:	41 93       	st	Z+, r20
    91d4:	b3 e0       	ldi	r27, 0x03	; 3
    91d6:	0f d0       	rcall	.+30     	; 0x91f6 <__ultoa_invert+0x86>
    91d8:	c9 f7       	brne	.-14     	; 0x91cc <__ultoa_invert+0x5c>
    91da:	f6 cf       	rjmp	.-20     	; 0x91c8 <__ultoa_invert+0x58>
    91dc:	46 2f       	mov	r20, r22
    91de:	4f 70       	andi	r20, 0x0F	; 15
    91e0:	40 5d       	subi	r20, 0xD0	; 208
    91e2:	4a 33       	cpi	r20, 0x3A	; 58
    91e4:	18 f0       	brcs	.+6      	; 0x91ec <__ultoa_invert+0x7c>
    91e6:	49 5d       	subi	r20, 0xD9	; 217
    91e8:	31 fd       	sbrc	r19, 1
    91ea:	40 52       	subi	r20, 0x20	; 32
    91ec:	41 93       	st	Z+, r20
    91ee:	02 d0       	rcall	.+4      	; 0x91f4 <__ultoa_invert+0x84>
    91f0:	a9 f7       	brne	.-22     	; 0x91dc <__ultoa_invert+0x6c>
    91f2:	ea cf       	rjmp	.-44     	; 0x91c8 <__ultoa_invert+0x58>
    91f4:	b4 e0       	ldi	r27, 0x04	; 4
    91f6:	a6 95       	lsr	r26
    91f8:	97 95       	ror	r25
    91fa:	87 95       	ror	r24
    91fc:	77 95       	ror	r23
    91fe:	67 95       	ror	r22
    9200:	ba 95       	dec	r27
    9202:	c9 f7       	brne	.-14     	; 0x91f6 <__ultoa_invert+0x86>
    9204:	00 97       	sbiw	r24, 0x00	; 0
    9206:	61 05       	cpc	r22, r1
    9208:	71 05       	cpc	r23, r1
    920a:	08 95       	ret
    920c:	9b 01       	movw	r18, r22
    920e:	ac 01       	movw	r20, r24
    9210:	0a 2e       	mov	r0, r26
    9212:	06 94       	lsr	r0
    9214:	57 95       	ror	r21
    9216:	47 95       	ror	r20
    9218:	37 95       	ror	r19
    921a:	27 95       	ror	r18
    921c:	ba 95       	dec	r27
    921e:	c9 f7       	brne	.-14     	; 0x9212 <__ultoa_invert+0xa2>
    9220:	62 0f       	add	r22, r18
    9222:	73 1f       	adc	r23, r19
    9224:	84 1f       	adc	r24, r20
    9226:	95 1f       	adc	r25, r21
    9228:	a0 1d       	adc	r26, r0
    922a:	08 95       	ret

0000922c <__eerd_byte_m1281>:
    922c:	f9 99       	sbic	0x1f, 1	; 31
    922e:	fe cf       	rjmp	.-4      	; 0x922c <__eerd_byte_m1281>
    9230:	92 bd       	out	0x22, r25	; 34
    9232:	81 bd       	out	0x21, r24	; 33
    9234:	f8 9a       	sbi	0x1f, 0	; 31
    9236:	99 27       	eor	r25, r25
    9238:	80 b5       	in	r24, 0x20	; 32
    923a:	08 95       	ret

0000923c <__eewr_byte_m1281>:
    923c:	26 2f       	mov	r18, r22

0000923e <__eewr_r18_m1281>:
    923e:	f9 99       	sbic	0x1f, 1	; 31
    9240:	fe cf       	rjmp	.-4      	; 0x923e <__eewr_r18_m1281>
    9242:	1f ba       	out	0x1f, r1	; 31
    9244:	92 bd       	out	0x22, r25	; 34
    9246:	81 bd       	out	0x21, r24	; 33
    9248:	20 bd       	out	0x20, r18	; 32
    924a:	0f b6       	in	r0, 0x3f	; 63
    924c:	f8 94       	cli
    924e:	fa 9a       	sbi	0x1f, 2	; 31
    9250:	f9 9a       	sbi	0x1f, 1	; 31
    9252:	0f be       	out	0x3f, r0	; 63
    9254:	01 96       	adiw	r24, 0x01	; 1
    9256:	08 95       	ret

00009258 <calloc>:
    9258:	ef 92       	push	r14
    925a:	ff 92       	push	r15
    925c:	0f 93       	push	r16
    925e:	1f 93       	push	r17
    9260:	cf 93       	push	r28
    9262:	df 93       	push	r29
    9264:	68 9f       	mul	r22, r24
    9266:	80 01       	movw	r16, r0
    9268:	69 9f       	mul	r22, r25
    926a:	10 0d       	add	r17, r0
    926c:	78 9f       	mul	r23, r24
    926e:	10 0d       	add	r17, r0
    9270:	11 24       	eor	r1, r1
    9272:	c8 01       	movw	r24, r16
    9274:	0e 94 52 49 	call	0x92a4	; 0x92a4 <malloc>
    9278:	e8 2e       	mov	r14, r24
    927a:	e7 01       	movw	r28, r14
    927c:	7e 01       	movw	r14, r28
    927e:	f9 2e       	mov	r15, r25
    9280:	e7 01       	movw	r28, r14
    9282:	e1 14       	cp	r14, r1
    9284:	f1 04       	cpc	r15, r1
    9286:	31 f0       	breq	.+12     	; 0x9294 <calloc+0x3c>
    9288:	8e 2d       	mov	r24, r14
    928a:	60 e0       	ldi	r22, 0x00	; 0
    928c:	70 e0       	ldi	r23, 0x00	; 0
    928e:	a8 01       	movw	r20, r16
    9290:	0e 94 6d 47 	call	0x8eda	; 0x8eda <memset>
    9294:	ce 01       	movw	r24, r28
    9296:	df 91       	pop	r29
    9298:	cf 91       	pop	r28
    929a:	1f 91       	pop	r17
    929c:	0f 91       	pop	r16
    929e:	ff 90       	pop	r15
    92a0:	ef 90       	pop	r14
    92a2:	08 95       	ret

000092a4 <malloc>:
    92a4:	ef 92       	push	r14
    92a6:	ff 92       	push	r15
    92a8:	0f 93       	push	r16
    92aa:	1f 93       	push	r17
    92ac:	cf 93       	push	r28
    92ae:	df 93       	push	r29
    92b0:	82 30       	cpi	r24, 0x02	; 2
    92b2:	91 05       	cpc	r25, r1
    92b4:	10 f4       	brcc	.+4      	; 0x92ba <malloc+0x16>
    92b6:	82 e0       	ldi	r24, 0x02	; 2
    92b8:	90 e0       	ldi	r25, 0x00	; 0
    92ba:	c0 91 4e 20 	lds	r28, 0x204E
    92be:	d0 91 4f 20 	lds	r29, 0x204F
    92c2:	40 e0       	ldi	r20, 0x00	; 0
    92c4:	50 e0       	ldi	r21, 0x00	; 0
    92c6:	20 e0       	ldi	r18, 0x00	; 0
    92c8:	30 e0       	ldi	r19, 0x00	; 0
    92ca:	28 c0       	rjmp	.+80     	; 0x931c <malloc+0x78>
    92cc:	68 81       	ld	r22, Y
    92ce:	79 81       	ldd	r23, Y+1	; 0x01
    92d0:	68 17       	cp	r22, r24
    92d2:	79 07       	cpc	r23, r25
    92d4:	d8 f0       	brcs	.+54     	; 0x930c <malloc+0x68>
    92d6:	68 17       	cp	r22, r24
    92d8:	79 07       	cpc	r23, r25
    92da:	79 f4       	brne	.+30     	; 0x92fa <malloc+0x56>
    92dc:	8a 81       	ldd	r24, Y+2	; 0x02
    92de:	9b 81       	ldd	r25, Y+3	; 0x03
    92e0:	21 15       	cp	r18, r1
    92e2:	31 05       	cpc	r19, r1
    92e4:	21 f0       	breq	.+8      	; 0x92ee <malloc+0x4a>
    92e6:	f9 01       	movw	r30, r18
    92e8:	93 83       	std	Z+3, r25	; 0x03
    92ea:	82 83       	std	Z+2, r24	; 0x02
    92ec:	04 c0       	rjmp	.+8      	; 0x92f6 <malloc+0x52>
    92ee:	90 93 4f 20 	sts	0x204F, r25
    92f2:	80 93 4e 20 	sts	0x204E, r24
    92f6:	de 01       	movw	r26, r28
    92f8:	29 c0       	rjmp	.+82     	; 0x934c <malloc+0xa8>
    92fa:	41 15       	cp	r20, r1
    92fc:	51 05       	cpc	r21, r1
    92fe:	19 f0       	breq	.+6      	; 0x9306 <malloc+0x62>
    9300:	64 17       	cp	r22, r20
    9302:	75 07       	cpc	r23, r21
    9304:	18 f4       	brcc	.+6      	; 0x930c <malloc+0x68>
    9306:	ab 01       	movw	r20, r22
    9308:	d9 01       	movw	r26, r18
    930a:	fe 01       	movw	r30, r28
    930c:	9e 01       	movw	r18, r28
    930e:	7a 81       	ldd	r23, Y+2	; 0x02
    9310:	6b 81       	ldd	r22, Y+3	; 0x03
    9312:	e7 2e       	mov	r14, r23
    9314:	e7 01       	movw	r28, r14
    9316:	7e 01       	movw	r14, r28
    9318:	f6 2e       	mov	r15, r22
    931a:	e7 01       	movw	r28, r14
    931c:	20 97       	sbiw	r28, 0x00	; 0
    931e:	b1 f6       	brne	.-84     	; 0x92cc <malloc+0x28>
    9320:	41 15       	cp	r20, r1
    9322:	51 05       	cpc	r21, r1
    9324:	f9 f0       	breq	.+62     	; 0x9364 <malloc+0xc0>
    9326:	48 1b       	sub	r20, r24
    9328:	59 0b       	sbc	r21, r25
    932a:	44 30       	cpi	r20, 0x04	; 4
    932c:	51 05       	cpc	r21, r1
    932e:	80 f4       	brcc	.+32     	; 0x9350 <malloc+0xac>
    9330:	82 81       	ldd	r24, Z+2	; 0x02
    9332:	93 81       	ldd	r25, Z+3	; 0x03
    9334:	10 97       	sbiw	r26, 0x00	; 0
    9336:	29 f0       	breq	.+10     	; 0x9342 <malloc+0x9e>
    9338:	13 96       	adiw	r26, 0x03	; 3
    933a:	9c 93       	st	X, r25
    933c:	8e 93       	st	-X, r24
    933e:	12 97       	sbiw	r26, 0x02	; 2
    9340:	04 c0       	rjmp	.+8      	; 0x934a <malloc+0xa6>
    9342:	90 93 4f 20 	sts	0x204F, r25
    9346:	80 93 4e 20 	sts	0x204E, r24
    934a:	df 01       	movw	r26, r30
    934c:	12 96       	adiw	r26, 0x02	; 2
    934e:	45 c0       	rjmp	.+138    	; 0x93da <malloc+0x136>
    9350:	df 01       	movw	r26, r30
    9352:	a4 0f       	add	r26, r20
    9354:	b5 1f       	adc	r27, r21
    9356:	8d 93       	st	X+, r24
    9358:	9d 93       	st	X+, r25
    935a:	42 50       	subi	r20, 0x02	; 2
    935c:	50 40       	sbci	r21, 0x00	; 0
    935e:	51 83       	std	Z+1, r21	; 0x01
    9360:	40 83       	st	Z, r20
    9362:	3b c0       	rjmp	.+118    	; 0x93da <malloc+0x136>
    9364:	20 91 4c 20 	lds	r18, 0x204C
    9368:	30 91 4d 20 	lds	r19, 0x204D
    936c:	21 15       	cp	r18, r1
    936e:	31 05       	cpc	r19, r1
    9370:	41 f4       	brne	.+16     	; 0x9382 <malloc+0xde>
    9372:	20 91 c3 0b 	lds	r18, 0x0BC3
    9376:	30 91 c4 0b 	lds	r19, 0x0BC4
    937a:	30 93 4d 20 	sts	0x204D, r19
    937e:	20 93 4c 20 	sts	0x204C, r18
    9382:	20 91 c5 0b 	lds	r18, 0x0BC5
    9386:	30 91 c6 0b 	lds	r19, 0x0BC6
    938a:	21 15       	cp	r18, r1
    938c:	31 05       	cpc	r19, r1
    938e:	41 f4       	brne	.+16     	; 0x93a0 <malloc+0xfc>
    9390:	2d b7       	in	r18, 0x3d	; 61
    9392:	3e b7       	in	r19, 0x3e	; 62
    9394:	40 91 c1 0b 	lds	r20, 0x0BC1
    9398:	50 91 c2 0b 	lds	r21, 0x0BC2
    939c:	24 1b       	sub	r18, r20
    939e:	35 0b       	sbc	r19, r21
    93a0:	a0 91 4c 20 	lds	r26, 0x204C
    93a4:	b0 91 4d 20 	lds	r27, 0x204D
    93a8:	a2 17       	cp	r26, r18
    93aa:	b3 07       	cpc	r27, r19
    93ac:	a0 f4       	brcc	.+40     	; 0x93d6 <malloc+0x132>
    93ae:	2a 1b       	sub	r18, r26
    93b0:	3b 0b       	sbc	r19, r27
    93b2:	28 17       	cp	r18, r24
    93b4:	39 07       	cpc	r19, r25
    93b6:	78 f0       	brcs	.+30     	; 0x93d6 <malloc+0x132>
    93b8:	ac 01       	movw	r20, r24
    93ba:	4e 5f       	subi	r20, 0xFE	; 254
    93bc:	5f 4f       	sbci	r21, 0xFF	; 255
    93be:	24 17       	cp	r18, r20
    93c0:	35 07       	cpc	r19, r21
    93c2:	48 f0       	brcs	.+18     	; 0x93d6 <malloc+0x132>
    93c4:	4a 0f       	add	r20, r26
    93c6:	5b 1f       	adc	r21, r27
    93c8:	50 93 4d 20 	sts	0x204D, r21
    93cc:	40 93 4c 20 	sts	0x204C, r20
    93d0:	8d 93       	st	X+, r24
    93d2:	9d 93       	st	X+, r25
    93d4:	02 c0       	rjmp	.+4      	; 0x93da <malloc+0x136>
    93d6:	a0 e0       	ldi	r26, 0x00	; 0
    93d8:	b0 e0       	ldi	r27, 0x00	; 0
    93da:	cd 01       	movw	r24, r26
    93dc:	df 91       	pop	r29
    93de:	cf 91       	pop	r28
    93e0:	1f 91       	pop	r17
    93e2:	0f 91       	pop	r16
    93e4:	ff 90       	pop	r15
    93e6:	ef 90       	pop	r14
    93e8:	08 95       	ret

000093ea <free>:
    93ea:	cf 93       	push	r28
    93ec:	df 93       	push	r29
    93ee:	00 97       	sbiw	r24, 0x00	; 0
    93f0:	09 f4       	brne	.+2      	; 0x93f4 <free+0xa>
    93f2:	8f c0       	rjmp	.+286    	; 0x9512 <free+0x128>
    93f4:	fc 01       	movw	r30, r24
    93f6:	32 97       	sbiw	r30, 0x02	; 2
    93f8:	13 82       	std	Z+3, r1	; 0x03
    93fa:	12 82       	std	Z+2, r1	; 0x02
    93fc:	60 91 4e 20 	lds	r22, 0x204E
    9400:	70 91 4f 20 	lds	r23, 0x204F
    9404:	61 15       	cp	r22, r1
    9406:	71 05       	cpc	r23, r1
    9408:	81 f4       	brne	.+32     	; 0x942a <free+0x40>
    940a:	20 81       	ld	r18, Z
    940c:	31 81       	ldd	r19, Z+1	; 0x01
    940e:	28 0f       	add	r18, r24
    9410:	39 1f       	adc	r19, r25
    9412:	80 91 4c 20 	lds	r24, 0x204C
    9416:	90 91 4d 20 	lds	r25, 0x204D
    941a:	82 17       	cp	r24, r18
    941c:	93 07       	cpc	r25, r19
    941e:	61 f5       	brne	.+88     	; 0x9478 <free+0x8e>
    9420:	f0 93 4d 20 	sts	0x204D, r31
    9424:	e0 93 4c 20 	sts	0x204C, r30
    9428:	74 c0       	rjmp	.+232    	; 0x9512 <free+0x128>
    942a:	eb 01       	movw	r28, r22
    942c:	80 e0       	ldi	r24, 0x00	; 0
    942e:	90 e0       	ldi	r25, 0x00	; 0
    9430:	ce 17       	cp	r28, r30
    9432:	df 07       	cpc	r29, r31
    9434:	40 f4       	brcc	.+16     	; 0x9446 <free+0x5c>
    9436:	2a 81       	ldd	r18, Y+2	; 0x02
    9438:	3b 81       	ldd	r19, Y+3	; 0x03
    943a:	ce 01       	movw	r24, r28
    943c:	21 15       	cp	r18, r1
    943e:	31 05       	cpc	r19, r1
    9440:	01 f1       	breq	.+64     	; 0x9482 <free+0x98>
    9442:	e9 01       	movw	r28, r18
    9444:	f5 cf       	rjmp	.-22     	; 0x9430 <free+0x46>
    9446:	d3 83       	std	Z+3, r29	; 0x03
    9448:	c2 83       	std	Z+2, r28	; 0x02
    944a:	df 01       	movw	r26, r30
    944c:	4d 91       	ld	r20, X+
    944e:	5d 91       	ld	r21, X+
    9450:	9d 01       	movw	r18, r26
    9452:	24 0f       	add	r18, r20
    9454:	35 1f       	adc	r19, r21
    9456:	c2 17       	cp	r28, r18
    9458:	d3 07       	cpc	r29, r19
    945a:	61 f4       	brne	.+24     	; 0x9474 <free+0x8a>
    945c:	28 81       	ld	r18, Y
    945e:	39 81       	ldd	r19, Y+1	; 0x01
    9460:	24 0f       	add	r18, r20
    9462:	35 1f       	adc	r19, r21
    9464:	2e 5f       	subi	r18, 0xFE	; 254
    9466:	3f 4f       	sbci	r19, 0xFF	; 255
    9468:	31 83       	std	Z+1, r19	; 0x01
    946a:	20 83       	st	Z, r18
    946c:	2a 81       	ldd	r18, Y+2	; 0x02
    946e:	3b 81       	ldd	r19, Y+3	; 0x03
    9470:	33 83       	std	Z+3, r19	; 0x03
    9472:	22 83       	std	Z+2, r18	; 0x02
    9474:	00 97       	sbiw	r24, 0x00	; 0
    9476:	29 f4       	brne	.+10     	; 0x9482 <free+0x98>
    9478:	f0 93 4f 20 	sts	0x204F, r31
    947c:	e0 93 4e 20 	sts	0x204E, r30
    9480:	48 c0       	rjmp	.+144    	; 0x9512 <free+0x128>
    9482:	dc 01       	movw	r26, r24
    9484:	13 96       	adiw	r26, 0x03	; 3
    9486:	fc 93       	st	X, r31
    9488:	ee 93       	st	-X, r30
    948a:	12 97       	sbiw	r26, 0x02	; 2
    948c:	ec 01       	movw	r28, r24
    948e:	49 91       	ld	r20, Y+
    9490:	59 91       	ld	r21, Y+
    9492:	c4 0f       	add	r28, r20
    9494:	d5 1f       	adc	r29, r21
    9496:	ec 17       	cp	r30, r28
    9498:	fd 07       	cpc	r31, r29
    949a:	79 f4       	brne	.+30     	; 0x94ba <free+0xd0>
    949c:	20 81       	ld	r18, Z
    949e:	31 81       	ldd	r19, Z+1	; 0x01
    94a0:	24 0f       	add	r18, r20
    94a2:	35 1f       	adc	r19, r21
    94a4:	2e 5f       	subi	r18, 0xFE	; 254
    94a6:	3f 4f       	sbci	r19, 0xFF	; 255
    94a8:	11 96       	adiw	r26, 0x01	; 1
    94aa:	3c 93       	st	X, r19
    94ac:	2e 93       	st	-X, r18
    94ae:	22 81       	ldd	r18, Z+2	; 0x02
    94b0:	33 81       	ldd	r19, Z+3	; 0x03
    94b2:	13 96       	adiw	r26, 0x03	; 3
    94b4:	3c 93       	st	X, r19
    94b6:	2e 93       	st	-X, r18
    94b8:	12 97       	sbiw	r26, 0x02	; 2
    94ba:	e0 e0       	ldi	r30, 0x00	; 0
    94bc:	f0 e0       	ldi	r31, 0x00	; 0
    94be:	db 01       	movw	r26, r22
    94c0:	12 96       	adiw	r26, 0x02	; 2
    94c2:	8d 91       	ld	r24, X+
    94c4:	9c 91       	ld	r25, X
    94c6:	13 97       	sbiw	r26, 0x03	; 3
    94c8:	00 97       	sbiw	r24, 0x00	; 0
    94ca:	21 f0       	breq	.+8      	; 0x94d4 <free+0xea>
    94cc:	e6 2f       	mov	r30, r22
    94ce:	f7 2f       	mov	r31, r23
    94d0:	bc 01       	movw	r22, r24
    94d2:	f5 cf       	rjmp	.-22     	; 0x94be <free+0xd4>
    94d4:	9b 01       	movw	r18, r22
    94d6:	2e 5f       	subi	r18, 0xFE	; 254
    94d8:	3f 4f       	sbci	r19, 0xFF	; 255
    94da:	db 01       	movw	r26, r22
    94dc:	8d 91       	ld	r24, X+
    94de:	9c 91       	ld	r25, X
    94e0:	11 97       	sbiw	r26, 0x01	; 1
    94e2:	82 0f       	add	r24, r18
    94e4:	93 1f       	adc	r25, r19
    94e6:	40 91 4c 20 	lds	r20, 0x204C
    94ea:	50 91 4d 20 	lds	r21, 0x204D
    94ee:	48 17       	cp	r20, r24
    94f0:	59 07       	cpc	r21, r25
    94f2:	79 f4       	brne	.+30     	; 0x9512 <free+0x128>
    94f4:	30 97       	sbiw	r30, 0x00	; 0
    94f6:	29 f4       	brne	.+10     	; 0x9502 <free+0x118>
    94f8:	10 92 4f 20 	sts	0x204F, r1
    94fc:	10 92 4e 20 	sts	0x204E, r1
    9500:	02 c0       	rjmp	.+4      	; 0x9506 <free+0x11c>
    9502:	13 82       	std	Z+3, r1	; 0x03
    9504:	12 82       	std	Z+2, r1	; 0x02
    9506:	22 50       	subi	r18, 0x02	; 2
    9508:	30 40       	sbci	r19, 0x00	; 0
    950a:	30 93 4d 20 	sts	0x204D, r19
    950e:	20 93 4c 20 	sts	0x204C, r18
    9512:	df 91       	pop	r29
    9514:	cf 91       	pop	r28
    9516:	08 95       	ret

00009518 <_exit>:
    9518:	f8 94       	cli

0000951a <__stop_program>:
    951a:	ff cf       	rjmp	.-2      	; 0x951a <__stop_program>
