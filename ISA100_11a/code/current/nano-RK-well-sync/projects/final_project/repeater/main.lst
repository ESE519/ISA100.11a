   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 147               	.global	nrk_create_taskset
 149               	nrk_create_taskset:
 150               		.stabd	46,0,0
   1:main.c        **** #include <nrk.h>
   2:main.c        **** #include <include.h>
   3:main.c        **** #include <ulib.h>
   4:main.c        **** #include <stdio.h>
   5:main.c        **** #include <avr/sleep.h>
   6:main.c        **** #include <hal.h>
   7:main.c        **** #include <isa.h>
   8:main.c        **** #include <nrk_error.h>
   9:main.c        **** //#include <sys/time.h>
  10:main.c        **** 
  11:main.c        **** 
  12:main.c        **** #define MY_CHANNEL 19 
  13:main.c        **** #define MY_ID 4 //change
  14:main.c        **** 
  15:main.c        **** //#define MY_TX_SLOT_SYNC  2
  16:main.c        **** //#define s  17
  17:main.c        **** //#define MY_RX_SLOT  2
  18:main.c        **** //#define MY_TX_SLOT  7
  19:main.c        **** //#define MY_TX_SLOT1  8
  20:main.c        **** 
  21:main.c        **** 
  22:main.c        **** #define MY_CLK_SRC_ID  3
  23:main.c        **** 
  24:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  25:main.c        **** nrk_task_type TaskOne;
  26:main.c        **** void Task1(void);
  27:main.c        **** 
  28:main.c        **** 
  29:main.c        **** void nrk_create_taskset();
  30:main.c        **** 
  31:main.c        **** uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
  32:main.c        **** //uint8_t tx_buf2[RF_MAX_PAYLOAD_SIZE];
  33:main.c        **** uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
  34:main.c        **** 
  35:main.c        **** nrk_time_t timestart;
  36:main.c        **** nrk_time_t timeend;
  37:main.c        **** nrk_time_t newtime;
  38:main.c        **** nrk_time_t timeout;
  39:main.c        **** 
  40:main.c        **** //*********************Making a callback function***************************************
  41:main.c        **** 
  42:main.c        **** void transmitCallback1(ISA_QUEUE *entry , bool status){
  43:main.c        **** uint8_t length;
  44:main.c        **** 	 isaFreePacket(entry);
  45:main.c        **** 	  sprintf( &tx_buf[PKT_DATA_START],"node" );
  46:main.c        **** 	  length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+1;
  47:main.c        **** 	  	sendPacket(3, length, tx_buf, transmitCallback1);
  48:main.c        **** }
  49:main.c        **** //*******************************************************************************
  50:main.c        **** 
  51:main.c        **** int main ()
  52:main.c        **** {
  53:main.c        ****   nrk_setup_ports();
  54:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  55:main.c        **** 
  56:main.c        ****   nrk_kprintf( PSTR("Starting up...\r\n") );
  57:main.c        **** 	
  58:main.c        ****   nrk_init();
  59:main.c        **** 
  60:main.c        ****   nrk_led_clr(0);
  61:main.c        ****   nrk_led_clr(1);
  62:main.c        ****   nrk_led_clr(2);
  63:main.c        ****   nrk_led_clr(3);
  64:main.c        ****   
  65:main.c        ****   nrk_time_set(0,0);
  66:main.c        ****   
  67:main.c        ****   isa_task_config();
  68:main.c        ****   
  69:main.c        ****   nrk_create_taskset ();
  70:main.c        **** 
  71:main.c        ****   nrk_start();
  72:main.c        ****   
  73:main.c        ****   return 0;
  74:main.c        **** }
  75:main.c        **** 
  76:main.c        **** 
  77:main.c        **** void Task1()
  78:main.c        **** {
  79:main.c        **** 
  80:main.c        ****   uint8_t j, i;
  81:main.c        ****   uint8_t length,slot;
  82:main.c        ****   uint8_t *local_rx_buf;
  83:main.c        ****   uint32_t Score = 0;
  84:main.c        ****   int8_t rssi;
  85:main.c        ****   uint8_t cnt=0;
  86:main.c        ****   //uint8_t tx[3]={2,15,16};
  87:main.c        ****   //uint8_t rx[3]={3,18,19};
  88:main.c        ****   //uint8_t my_tx_slot[4];
  89:main.c        **** 
  90:main.c        **** 
  91:main.c        ****   char c = -1;
  92:main.c        ****   nrk_sig_t uart_rx_signal;
  93:main.c        ****   uint8_t finished = 0;
  94:main.c        **** 
  95:main.c        ****   printf( "Task1 PID=%d\r\n",nrk_get_pid());
  96:main.c        ****   
  97:main.c        ****   nrk_led_set(RED_LED);
  98:main.c        ****   
  99:main.c        ****   isa_set_channel_pattern(1);
 100:main.c        **** 
 101:main.c        ****   isa_init (ISA_REPEATER, MY_ID, MY_CLK_SRC_ID);//change
 102:main.c        ****   
 103:main.c        ****   dlmoInit(); 	//Initialize the Data Link Management Object
 104:main.c        **** 
 105:main.c        ****   configureSlot(8,1, RX, false);
 106:main.c        ****   //configureSlot(9,1, RX, false);
 107:main.c        ****   configureSlot(9, 3, TX_NO_ADV, true);
 108:main.c        ****   //configureSlot(8, 4, TX_NO_ADV, false);
 109:main.c        ****  // isa_set_schedule(ISA_REPEATER, MY_CLK_SRC_ID);
 110:main.c        **** 
 111:main.c        ****  // isa_set_channel(MY_CHANNEL);
 112:main.c        **** 
 113:main.c        ****   isa_start();
 114:main.c        ****   
 115:main.c        ****   isa_rx_pkt_set_buffer(rx_buf, RF_MAX_PAYLOAD_SIZE);
 116:main.c        ****   
 117:main.c        ****   while(!isa_ready())  nrk_wait_until_next_period(); 
 118:main.c        **** 
 119:main.c        ****   /*while(isa_join_ready()!=1) nrk_wait_until_next_period();
 120:main.c        ****     
 121:main.c        ****     for(i=0;i<4;i++){  // set tx slots
 122:main.c        **** 	if(tx_slot_from_join[i]==0)
 123:main.c        **** 		break;
 124:main.c        **** 	else
 125:main.c        **** 	    my_tx_slot[i]=tx_slot_from_join[i];
 126:main.c        ****     }	   
 127:main.c        ****   printf("MAIN_TX:%d\r\n",my_tx_slot[0]);*/
 128:main.c        **** 
 129:main.c        ****   printf("isa start!\n\r");
 130:main.c        **** 
 131:main.c        ****   //i=0;
 132:main.c        ****   while(1){
 133:main.c        **** 
 134:main.c        **** 
 135:main.c        **** //Spit out log info
 136:main.c        **** 
 137:main.c        **** 	  	  if (txCount % 1000 == 0){
 138:main.c        **** 	  	printf ("Tx: %d\r\nRX: %d\r\nPL:%d", txCount,rxCount, packetsLost);
 139:main.c        **** 	  	  }
 140:main.c        **** 
 141:main.c        **** //nrk_gpio_toggle(NRK_DEBUG_0);
 142:main.c        ****        if( isa_rx_pkt_check()!=0 ) {
 143:main.c        **** 
 144:main.c        **** 	    local_rx_buf=isa_rx_pkt_get(&length, &rssi);
 145:main.c        **** 
 146:main.c        **** 	    //printf("length is %d, rssi is %d.\n\r",length,rssi);
 147:main.c        **** 	    //local_rx_buf[PKT_DATA_START+length-2]='\0';
 148:main.c        **** 	    //printf("RX[%d]",slot);
 149:main.c        **** 	    /*for(i=PKT_DATA_START; i<length-1; i++ )
 150:main.c        **** 		printf( "%c",local_rx_buf[i]);*/
 151:main.c        **** 	    //printf("\r\n");
 152:main.c        **** 	    //sprintf( &tx_buf[PKT_DATA_START],"Hello Mingzhe!");
 153:main.c        **** 	    //length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+1;
 154:main.c        **** 	    //isa_tx_pkt(tx_buf,length,configDHDR(),MY_TX_SLOT);
 155:main.c        **** /*
 156:main.c        **** 	    length=strlen(&rx_buf[PKT_DATA_START])+PKT_DATA_START+1; //change
 157:main.c        **** 	    isa_tx_pkt(rx_buf,length,configDHDR(8),MY_TX_SLOT1);//change forward the message from recipien
 158:main.c        **** */
 159:main.c        **** 	    //printf(" Forward message is sent.\n\r");
 160:main.c        ****  	    //printf("pkt length:%d",length);
 161:main.c        **** 	    //printf("%d\r\n",cnt++);
 162:main.c        **** 	  //  printf( "%c",local_rx_buf[PKT_DATA_START]);
 163:main.c        **** 	    isa_rx_pkt_release();
 164:main.c        **** 	   // printf("\r\n");
 165:main.c        **** 
 166:main.c        **** 	}
 167:main.c        **** 
 168:main.c        ****     //   if(isa_tx_pkt_check(MY_TX_SLOT)!=0){
 169:main.c        ****        	  // printf("Pending TX\r\n");
 170:main.c        ****     //   	}
 171:main.c        ****    //    else{
 172:main.c        **** 	/*sprintf( &tx_buf[PKT_DATA_START],local_rx_buf+PKT_DATA_START);
 173:main.c        **** 	length=strlen(&rx_buf[PKT_DATA_START])+PKT_DATA_START+1; //change
 174:main.c        **** 	//isa_tx_pkt(rx_buf,length,configDHDR(),my_tx_slot[0]);//change forward the message from recipient
 175:main.c        **** 	isa_tx_pkt(rx_buf,length,configDHDR(),MY_TX_SLOT);
 176:main.c        **** 	isa_wait_until_rx_or_tx ();*/
 177:main.c        ****     	   if (cnt ==0 ){
 178:main.c        **** 
 179:main.c        **** 
 180:main.c        **** 	sprintf( &tx_buf[PKT_DATA_START],"2");
 181:main.c        **** 	length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+1;
 182:main.c        **** 	sendPacket(3, length, tx_buf, transmitCallback1);
 183:main.c        ****     	cnt++;
 184:main.c        ****     	   }
 185:main.c        **** 
 186:main.c        **** 	/*sprintf( &tx_buf2[PKT_DATA_START],"Hello from slot 2!");
 187:main.c        **** 	length=strlen(&tx_buf2[PKT_DATA_START])+PKT_DATA_START+1;
 188:main.c        **** 	isa_tx_pkt(tx_buf2,length,configDHDR(),2);
 189:main.c        **** 	isa_wait_until_rx_or_tx ();*/
 190:main.c        **** 
 191:main.c        ****     //   }
 192:main.c        ****     	   nrk_terminate_task();
 193:main.c        ****      //  isa_wait_until_rx_or_tx ();
 194:main.c        ****       // 	putchar('\n');
 195:main.c        ****       // 	putchar('\r');
 196:main.c        ****   }
 197:main.c        ****   
 198:main.c        **** 
 199:main.c        **** }
 200:main.c        **** 
 201:main.c        **** 
 202:main.c        **** void
 203:main.c        **** nrk_create_taskset()
 204:main.c        **** {
 152               	.LM0:
 153               	.LFBB1:
 154               	/* prologue: frame size=0 */
 155               	/* prologue end (size=0) */
 205:main.c        ****   TaskOne.task = Task1;
 157               	.LM1:
 158 0000 80E0      		ldi r24,lo8(pm(Task1))
 159 0002 90E0      		ldi r25,hi8(pm(Task1))
 160 0004 9093 0000 		sts (TaskOne+5)+1,r25
 161 0008 8093 0000 		sts TaskOne+5,r24
 206:main.c        ****   TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE-1];
 163               	.LM2:
 164 000c 80E0      		ldi r24,lo8(Stack1+255)
 165 000e 90E0      		ldi r25,hi8(Stack1+255)
 166 0010 9093 0000 		sts (TaskOne+1)+1,r25
 167 0014 8093 0000 		sts TaskOne+1,r24
 207:main.c        ****   TaskOne.Pbos = (void *) &Stack1[0];
 169               	.LM3:
 170 0018 80E0      		ldi r24,lo8(Stack1)
 171 001a 90E0      		ldi r25,hi8(Stack1)
 172 001c 9093 0000 		sts (TaskOne+3)+1,r25
 173 0020 8093 0000 		sts TaskOne+3,r24
 208:main.c        ****   TaskOne.prio = 2;
 175               	.LM4:
 176 0024 82E0      		ldi r24,lo8(2)
 177 0026 8093 0000 		sts TaskOne+8,r24
 209:main.c        ****   TaskOne.FirstActivation = TRUE;
 179               	.LM5:
 180 002a 81E0      		ldi r24,lo8(1)
 181 002c 8093 0000 		sts TaskOne+7,r24
 210:main.c        ****   TaskOne.Type = BASIC_TASK;
 183               	.LM6:
 184 0030 8093 0000 		sts TaskOne+9,r24
 211:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 186               	.LM7:
 187 0034 8093 0000 		sts TaskOne+10,r24
 212:main.c        ****   TaskOne.period.secs = 0;
 189               	.LM8:
 190 0038 1092 0000 		sts TaskOne+11,__zero_reg__
 191 003c 1092 0000 		sts (TaskOne+11)+1,__zero_reg__
 192 0040 1092 0000 		sts (TaskOne+11)+2,__zero_reg__
 193 0044 1092 0000 		sts (TaskOne+11)+3,__zero_reg__
 213:main.c        ****   TaskOne.period.nano_secs = 20*NANOS_PER_MS;
 195               	.LM9:
 196 0048 80E0      		ldi r24,lo8(20000000)
 197 004a 9DE2      		ldi r25,hi8(20000000)
 198 004c A1E3      		ldi r26,hlo8(20000000)
 199 004e B1E0      		ldi r27,hhi8(20000000)
 200 0050 8093 0000 		sts TaskOne+15,r24
 201 0054 9093 0000 		sts (TaskOne+15)+1,r25
 202 0058 A093 0000 		sts (TaskOne+15)+2,r26
 203 005c B093 0000 		sts (TaskOne+15)+3,r27
 214:main.c        ****   TaskOne.cpu_reserve.secs = 0;
 205               	.LM10:
 206 0060 1092 0000 		sts TaskOne+19,__zero_reg__
 207 0064 1092 0000 		sts (TaskOne+19)+1,__zero_reg__
 208 0068 1092 0000 		sts (TaskOne+19)+2,__zero_reg__
 209 006c 1092 0000 		sts (TaskOne+19)+3,__zero_reg__
 215:main.c        ****   TaskOne.cpu_reserve.nano_secs = 20*NANOS_PER_MS;
 211               	.LM11:
 212 0070 8093 0000 		sts TaskOne+23,r24
 213 0074 9093 0000 		sts (TaskOne+23)+1,r25
 214 0078 A093 0000 		sts (TaskOne+23)+2,r26
 215 007c B093 0000 		sts (TaskOne+23)+3,r27
 216:main.c        ****   TaskOne.offset.secs = 0;
 217               	.LM12:
 218 0080 1092 0000 		sts TaskOne+27,__zero_reg__
 219 0084 1092 0000 		sts (TaskOne+27)+1,__zero_reg__
 220 0088 1092 0000 		sts (TaskOne+27)+2,__zero_reg__
 221 008c 1092 0000 		sts (TaskOne+27)+3,__zero_reg__
 217:main.c        ****   TaskOne.offset.nano_secs= 50*NANOS_PER_MS;
 223               	.LM13:
 224 0090 80E8      		ldi r24,lo8(50000000)
 225 0092 90EF      		ldi r25,hi8(50000000)
 226 0094 AAEF      		ldi r26,hlo8(50000000)
 227 0096 B2E0      		ldi r27,hhi8(50000000)
 228 0098 8093 0000 		sts TaskOne+31,r24
 229 009c 9093 0000 		sts (TaskOne+31)+1,r25
 230 00a0 A093 0000 		sts (TaskOne+31)+2,r26
 231 00a4 B093 0000 		sts (TaskOne+31)+3,r27
 218:main.c        ****   nrk_activate_task (&TaskOne);
 233               	.LM14:
 234 00a8 80E0      		ldi r24,lo8(TaskOne)
 235 00aa 90E0      		ldi r25,hi8(TaskOne)
 236 00ac 0E94 0000 		call nrk_activate_task
 219:main.c        **** 
 220:main.c        **** 
 221:main.c        ****   nrk_kprintf( PSTR("Create Done\r\n") );
 238               	.LM15:
 239 00b0 80E0      		ldi r24,lo8(__c.2496)
 240 00b2 90E0      		ldi r25,hi8(__c.2496)
 241 00b4 0E94 0000 		call nrk_kprintf
 242               	/* epilogue: frame size=0 */
 243 00b8 0895      		ret
 244               	/* epilogue end (size=1) */
 245               	/* function nrk_create_taskset size 93 (92) */
 247               	.Lscope1:
 249               		.stabd	78,0,0
 250               		.data
 251               	.LC0:
 252 0000 5461 736B 		.string	"Task1 PID=%d\r\n"
 252      3120 5049 
 252      443D 2564 
 252      0D0A 00
 253               	.LC1:
 254 000f 6973 6120 		.string	"isa start!\n\r"
 254      7374 6172 
 254      7421 0A0D 
 254      00
 255               	.LC2:
 256 001c 5478 3A20 		.string	"Tx: %d\r\nRX: %d\r\nPL:%d"
 256      2564 0D0A 
 256      5258 3A20 
 256      2564 0D0A 
 256      504C 3A25 
 257               	.LC3:
 258 0032 3200      		.string	"2"
 259               		.text
 261               	.global	Task1
 263               	Task1:
 264               		.stabd	46,0,0
 266               	.LM16:
 267               	.LFBB2:
 268               	/* prologue: frame size=2 */
 269 00ba 3F92      		push r3
 270 00bc 4F92      		push r4
 271 00be 5F92      		push r5
 272 00c0 6F92      		push r6
 273 00c2 7F92      		push r7
 274 00c4 8F92      		push r8
 275 00c6 9F92      		push r9
 276 00c8 AF92      		push r10
 277 00ca BF92      		push r11
 278 00cc CF92      		push r12
 279 00ce DF92      		push r13
 280 00d0 EF92      		push r14
 281 00d2 FF92      		push r15
 282 00d4 0F93      		push r16
 283 00d6 1F93      		push r17
 284 00d8 CF93      		push r28
 285 00da DF93      		push r29
 286 00dc CDB7      		in r28,__SP_L__
 287 00de DEB7      		in r29,__SP_H__
 288 00e0 2297      		sbiw r28,2
 289 00e2 0FB6      		in __tmp_reg__,__SREG__
 290 00e4 F894      		cli
 291 00e6 DEBF      		out __SP_H__,r29
 292 00e8 0FBE      		out __SREG__,__tmp_reg__
 293 00ea CDBF      		out __SP_L__,r28
 294               	/* prologue end (size=25) */
 296               	.LM17:
 297 00ec 0E94 0000 		call nrk_get_pid
 298 00f0 9927      		clr r25
 299 00f2 9F93      		push r25
 300 00f4 8F93      		push r24
 301 00f6 80E0      		ldi r24,lo8(.LC0)
 302 00f8 90E0      		ldi r25,hi8(.LC0)
 303 00fa 9F93      		push r25
 304 00fc 8F93      		push r24
 305 00fe 0E94 0000 		call printf
 307               	.LM18:
 308 0102 83E0      		ldi r24,lo8(3)
 309 0104 90E0      		ldi r25,hi8(3)
 310 0106 0E94 0000 		call nrk_led_set
 312               	.LM19:
 313 010a 81E0      		ldi r24,lo8(1)
 314 010c 90E0      		ldi r25,hi8(1)
 315 010e 0E94 0000 		call isa_set_channel_pattern
 317               	.LM20:
 318 0112 43E0      		ldi r20,lo8(3)
 319 0114 64E0      		ldi r22,lo8(4)
 320 0116 81E0      		ldi r24,lo8(1)
 321 0118 0E94 0000 		call isa_init
 323               	.LM21:
 324 011c 0E94 0000 		call dlmoInit
 326               	.LM22:
 327 0120 20E0      		ldi r18,lo8(0)
 328 0122 48E0      		ldi r20,lo8(8)
 329 0124 61E0      		ldi r22,lo8(1)
 330 0126 70E0      		ldi r23,hi8(1)
 331 0128 88E0      		ldi r24,lo8(8)
 332 012a 0E94 0000 		call configureSlot
 334               	.LM23:
 335 012e 21E0      		ldi r18,lo8(1)
 336 0130 41E0      		ldi r20,lo8(1)
 337 0132 63E0      		ldi r22,lo8(3)
 338 0134 70E0      		ldi r23,hi8(3)
 339 0136 89E0      		ldi r24,lo8(9)
 340 0138 0E94 0000 		call configureSlot
 342               	.LM24:
 343 013c 0E94 0000 		call isa_start
 345               	.LM25:
 346 0140 64E7      		ldi r22,lo8(116)
 347 0142 80E0      		ldi r24,lo8(rx_buf)
 348 0144 90E0      		ldi r25,hi8(rx_buf)
 349 0146 0E94 0000 		call isa_rx_pkt_set_buffer
 351               	.LM26:
 352 014a 0F90      		pop __tmp_reg__
 353 014c 0F90      		pop __tmp_reg__
 354 014e 0F90      		pop __tmp_reg__
 355 0150 0F90      		pop __tmp_reg__
 356 0152 00C0      		rjmp .L4
 357               	.L5:
 359               	.LM27:
 360 0154 0E94 0000 		call nrk_wait_until_next_period
 361               	.L4:
 362 0158 0E94 0000 		call isa_ready
 363 015c 8823      		tst r24
 364 015e 01F0      		breq .L5
 366               	.LM28:
 367 0160 80E0      		ldi r24,lo8(.LC1)
 368 0162 90E0      		ldi r25,hi8(.LC1)
 369 0164 9F93      		push r25
 370 0166 8F93      		push r24
 371 0168 0E94 0000 		call printf
 372 016c 3324      		clr r3
 373 016e 0F90      		pop __tmp_reg__
 374 0170 0F90      		pop __tmp_reg__
 376               	.LM29:
 377 0172 40E0      		ldi r20,lo8(.LC2)
 378 0174 442E      		mov r4,r20
 379 0176 40E0      		ldi r20,hi8(.LC2)
 380 0178 542E      		mov r5,r20
 382               	.LM30:
 383 017a 32E0      		ldi r19,lo8(2)
 384 017c 632E      		mov r6,r19
 385 017e 712C      		mov r7,__zero_reg__
 386 0180 6C0E      		add r6,r28
 387 0182 7D1E      		adc r7,r29
 388 0184 4E01      		movw r8,r28
 389 0186 0894      		sec
 390 0188 811C      		adc r8,__zero_reg__
 391 018a 911C      		adc r9,__zero_reg__
 393               	.LM31:
 394 018c 00E0      		ldi r16,lo8(tx_buf+4)
 395 018e 10E0      		ldi r17,hi8(tx_buf+4)
 396 0190 20E0      		ldi r18,lo8(.LC3)
 397 0192 A22E      		mov r10,r18
 398 0194 20E0      		ldi r18,hi8(.LC3)
 399 0196 B22E      		mov r11,r18
 400 0198 90E0      		ldi r25,lo8(pm(transmitCallback1))
 401 019a C92E      		mov r12,r25
 402 019c 90E0      		ldi r25,hi8(pm(transmitCallback1))
 403 019e D92E      		mov r13,r25
 404 01a0 8CEF      		ldi r24,lo8(-4)
 405 01a2 E82E      		mov r14,r24
 406 01a4 8FEF      		ldi r24,hi8(-4)
 407 01a6 F82E      		mov r15,r24
 408 01a8 E00E      		add r14,r16
 409 01aa F11E      		adc r15,r17
 410               	.L7:
 412               	.LM32:
 413 01ac 2091 0000 		lds r18,txCount
 414 01b0 3091 0000 		lds r19,(txCount)+1
 415 01b4 C901      		movw r24,r18
 416 01b6 68EE      		ldi r22,lo8(1000)
 417 01b8 73E0      		ldi r23,hi8(1000)
 418 01ba 0E94 0000 		call __udivmodhi4
 419 01be 892B      		or r24,r25
 420 01c0 01F4      		brne .L8
 422               	.LM33:
 423 01c2 8091 0000 		lds r24,packetsLost
 424 01c6 9091 0000 		lds r25,(packetsLost)+1
 425 01ca 9F93      		push r25
 426 01cc 8F93      		push r24
 427 01ce 8091 0000 		lds r24,rxCount
 428 01d2 9091 0000 		lds r25,(rxCount)+1
 429 01d6 9F93      		push r25
 430 01d8 8F93      		push r24
 431 01da 3F93      		push r19
 432 01dc 2F93      		push r18
 433 01de 5F92      		push r5
 434 01e0 4F92      		push r4
 435 01e2 0E94 0000 		call printf
 436 01e6 8DB7      		in r24,__SP_L__
 437 01e8 9EB7      		in r25,__SP_H__
 438 01ea 0896      		adiw r24,8
 439 01ec 0FB6      		in __tmp_reg__,__SREG__
 440 01ee F894      		cli
 441 01f0 9EBF      		out __SP_H__,r25
 442 01f2 0FBE      		out __SREG__,__tmp_reg__
 443 01f4 8DBF      		out __SP_L__,r24
 444               	.L8:
 446               	.LM34:
 447 01f6 0E94 0000 		call isa_rx_pkt_check
 448 01fa 8823      		tst r24
 449 01fc 01F0      		breq .L10
 451               	.LM35:
 452 01fe B301      		movw r22,r6
 453 0200 C401      		movw r24,r8
 454 0202 0E94 0000 		call isa_rx_pkt_get
 456               	.LM36:
 457 0206 0E94 0000 		call isa_rx_pkt_release
 458               	.L10:
 460               	.LM37:
 461 020a 3320      		tst r3
 462 020c 01F4      		brne .L12
 464               	.LM38:
 465 020e B501      		movw r22,r10
 466 0210 C801      		movw r24,r16
 467 0212 0E94 0000 		call strcpy
 469               	.LM39:
 470 0216 F801      		movw r30,r16
 471 0218 0190      		ld __tmp_reg__,Z+
 472 021a 0020      		tst __tmp_reg__
 473 021c 01F4      		brne .-6
 474 021e E050      		subi r30,lo8(tx_buf+5)
 475 0220 F040      		sbci r31,hi8(tx_buf+5)
 476 0222 EB5F      		subi r30,lo8(-(5))
 477 0224 E983      		std Y+1,r30
 479               	.LM40:
 480 0226 9601      		movw r18,r12
 481 0228 A701      		movw r20,r14
 482 022a 6E2F      		mov r22,r30
 483 022c 83E0      		ldi r24,lo8(3)
 484 022e 90E0      		ldi r25,hi8(3)
 485 0230 0E94 0000 		call sendPacket
 486 0234 3324      		clr r3
 487 0236 3394      		inc r3
 488               	.L12:
 490               	.LM41:
 491 0238 0E94 0000 		call nrk_terminate_task
 492 023c 00C0      		rjmp .L7
 493               	/* epilogue: frame size=2 */
 494               	/* epilogue: noreturn */
 495               	/* epilogue end (size=0) */
 496               	/* function Task1 size 194 (169) */
 503               	.Lscope2:
 505               		.stabd	78,0,0
 507               	.global	main
 509               	main:
 510               		.stabd	46,0,0
 512               	.LM42:
 513               	.LFBB3:
 514               	/* prologue: frame size=0 */
 515 023e C0E0      		ldi r28,lo8(__stack - 0)
 516 0240 D0E0      		ldi r29,hi8(__stack - 0)
 517 0242 DEBF      		out __SP_H__,r29
 518 0244 CDBF      		out __SP_L__,r28
 519               	/* prologue end (size=4) */
 521               	.LM43:
 522 0246 0E94 0000 		call nrk_setup_ports
 524               	.LM44:
 525 024a 87E0      		ldi r24,lo8(7)
 526 024c 90E0      		ldi r25,hi8(7)
 527 024e 0E94 0000 		call nrk_setup_uart
 529               	.LM45:
 530 0252 80E0      		ldi r24,lo8(__c.2456)
 531 0254 90E0      		ldi r25,hi8(__c.2456)
 532 0256 0E94 0000 		call nrk_kprintf
 534               	.LM46:
 535 025a 0E94 0000 		call nrk_init
 537               	.LM47:
 538 025e 80E0      		ldi r24,lo8(0)
 539 0260 90E0      		ldi r25,hi8(0)
 540 0262 0E94 0000 		call nrk_led_clr
 542               	.LM48:
 543 0266 81E0      		ldi r24,lo8(1)
 544 0268 90E0      		ldi r25,hi8(1)
 545 026a 0E94 0000 		call nrk_led_clr
 547               	.LM49:
 548 026e 82E0      		ldi r24,lo8(2)
 549 0270 90E0      		ldi r25,hi8(2)
 550 0272 0E94 0000 		call nrk_led_clr
 552               	.LM50:
 553 0276 83E0      		ldi r24,lo8(3)
 554 0278 90E0      		ldi r25,hi8(3)
 555 027a 0E94 0000 		call nrk_led_clr
 557               	.LM51:
 558 027e 20E0      		ldi r18,lo8(0)
 559 0280 30E0      		ldi r19,hi8(0)
 560 0282 40E0      		ldi r20,hlo8(0)
 561 0284 50E0      		ldi r21,hhi8(0)
 562 0286 60E0      		ldi r22,lo8(0)
 563 0288 70E0      		ldi r23,hi8(0)
 564 028a 80E0      		ldi r24,hlo8(0)
 565 028c 90E0      		ldi r25,hhi8(0)
 566 028e 0E94 0000 		call nrk_time_set
 568               	.LM52:
 569 0292 0E94 0000 		call isa_task_config
 571               	.LM53:
 572 0296 0E94 0000 		call nrk_create_taskset
 574               	.LM54:
 575 029a 0E94 0000 		call nrk_start
 577               	.LM55:
 578 029e 80E0      		ldi r24,lo8(0)
 579 02a0 90E0      		ldi r25,hi8(0)
 580               	/* epilogue: frame size=0 */
 581 02a2 0C94 0000 		jmp exit
 582               	/* epilogue end (size=2) */
 583               	/* function main size 52 (46) */
 585               	.Lscope3:
 587               		.stabd	78,0,0
 588               		.data
 589               	.LC4:
 590 0034 6E6F 6465 		.string	"node"
 590      00
 591               		.text
 595               	.global	transmitCallback1
 597               	transmitCallback1:
 598               		.stabd	46,0,0
 600               	.LM56:
 601               	.LFBB4:
 602               	/* prologue: frame size=0 */
 603 02a6 0F93      		push r16
 604 02a8 1F93      		push r17
 605               	/* prologue end (size=2) */
 607               	.LM57:
 608 02aa 0E94 0000 		call isaFreePacket
 610               	.LM58:
 611 02ae 00E0      		ldi r16,lo8(tx_buf+4)
 612 02b0 10E0      		ldi r17,hi8(tx_buf+4)
 613 02b2 60E0      		ldi r22,lo8(.LC4)
 614 02b4 70E0      		ldi r23,hi8(.LC4)
 615 02b6 C801      		movw r24,r16
 616 02b8 0E94 0000 		call strcpy
 618               	.LM59:
 619 02bc F801      		movw r30,r16
 620 02be 0190      		ld __tmp_reg__,Z+
 621 02c0 0020      		tst __tmp_reg__
 622 02c2 01F4      		brne .-6
 623 02c4 E01B      		sub r30,r16
 624 02c6 EC5F      		subi r30,lo8(-(4))
 625 02c8 20E0      		ldi r18,lo8(pm(transmitCallback1))
 626 02ca 30E0      		ldi r19,hi8(pm(transmitCallback1))
 627 02cc 0450      		subi r16,lo8(-(-4))
 628 02ce 1040      		sbci r17,hi8(-(-4))
 629 02d0 A801      		movw r20,r16
 630 02d2 6E2F      		mov r22,r30
 631 02d4 83E0      		ldi r24,lo8(3)
 632 02d6 90E0      		ldi r25,hi8(3)
 633 02d8 0E94 0000 		call sendPacket
 634               	/* epilogue: frame size=0 */
 635 02dc 1F91      		pop r17
 636 02de 0F91      		pop r16
 637 02e0 0895      		ret
 638               	/* epilogue end (size=3) */
 639               	/* function transmitCallback1 size 30 (25) */
 641               	.Lscope4:
 643               		.stabd	78,0,0
 644               		.section	.progmem.data,"a",@progbits
 647               	__c.2496:
 648 0000 4372 6561 		.string	"Create Done\r\n"
 648      7465 2044 
 648      6F6E 650D 
 648      0A00 
 651               	__c.2456:
 652 000e 5374 6172 		.string	"Starting up...\r\n"
 652      7469 6E67 
 652      2075 702E 
 652      2E2E 0D0A 
 652      00
 653               		.comm _nrk_signal_list,4,1
 654               		.comm nrk_idle_task_stk,128,1
 655               		.comm nrk_kernel_stk_ptr,2,1
 656               		.comm isa_id,1,1
 657               		.comm isa_clk_src_id,1,1
 658               		.comm tx_slot_from_join,4,1
 659               		.comm isa_rx_data_ready,4,1
 660               		.comm child_list,4,1
 661               		.comm DHDR,1,1
 662               		.comm last_slot,2,1
 663               		.comm resync_times,2,1
 664               		.comm isa_param,9,1
 665               		.comm isa_node_mode,1,1
 666               		.comm isa_task,35,1
 667               		.comm isa_task_stack,128,1
 668               		.comm isa_rfRxInfo,9,1
 669               		.comm isa_ack_tx,7,1
 670               		.comm isa_ack_buf,4,1
 671               		.comm isa_rfTxInfo,7,1
 672               		.comm _isa_ready,1,1
 673               		.comm _isa_join_ok,1,1
 674               		.comm error_task,1,1
 675               		.comm error_num,1,1
 676               		.comm Stack1,256,1
 677               		.comm TaskOne,35,1
 678               		.comm tx_buf,116,1
 679               		.comm rx_buf,116,1
 680               		.comm timestart,8,1
 681               		.comm timeend,8,1
 682               		.comm newtime,8,1
 683               		.comm timeout,8,1
 717               		.text
 719               	.Letext0:
 720               	/* File "main.c": code  369 = 0x0171 ( 332), prologues  31, epilogues   6 */
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccOFiliA.s:2      *ABS*:0000003f __SREG__
     /tmp/ccOFiliA.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccOFiliA.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccOFiliA.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccOFiliA.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccOFiliA.s:149    .text:00000000 nrk_create_taskset
     /tmp/ccOFiliA.s:263    .text:000000ba Task1
                            *COM*:00000023 TaskOne
                            *COM*:00000100 Stack1
     /tmp/ccOFiliA.s:647    .progmem.data:00000000 __c.2496
                            *COM*:00000074 rx_buf
                            *COM*:00000074 tx_buf
     /tmp/ccOFiliA.s:597    .text:000002a6 transmitCallback1
     /tmp/ccOFiliA.s:509    .text:0000023e main
     /tmp/ccOFiliA.s:651    .progmem.data:0000000e __c.2456
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 isa_id
                            *COM*:00000001 isa_clk_src_id
                            *COM*:00000004 tx_slot_from_join
                            *COM*:00000004 isa_rx_data_ready
                            *COM*:00000004 child_list
                            *COM*:00000001 DHDR
                            *COM*:00000002 last_slot
                            *COM*:00000002 resync_times
                            *COM*:00000009 isa_param
                            *COM*:00000001 isa_node_mode
                            *COM*:00000023 isa_task
                            *COM*:00000080 isa_task_stack
                            *COM*:00000009 isa_rfRxInfo
                            *COM*:00000007 isa_ack_tx
                            *COM*:00000004 isa_ack_buf
                            *COM*:00000007 isa_rfTxInfo
                            *COM*:00000001 _isa_ready
                            *COM*:00000001 _isa_join_ok
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000008 timestart
                            *COM*:00000008 timeend
                            *COM*:00000008 newtime
                            *COM*:00000008 timeout

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
nrk_activate_task
nrk_kprintf
nrk_get_pid
printf
nrk_led_set
isa_set_channel_pattern
isa_init
dlmoInit
configureSlot
isa_start
isa_rx_pkt_set_buffer
nrk_wait_until_next_period
isa_ready
txCount
__udivmodhi4
packetsLost
rxCount
isa_rx_pkt_check
isa_rx_pkt_get
isa_rx_pkt_release
strcpy
sendPacket
nrk_terminate_task
__stack
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_led_clr
nrk_time_set
isa_task_config
nrk_start
exit
isaFreePacket
