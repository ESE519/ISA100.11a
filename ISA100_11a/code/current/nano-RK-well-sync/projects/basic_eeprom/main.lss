
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800200  00005112  000051a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005112  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e2  008002ce  008002ce  00005274  2**0
                  ALLOC
  3 .stab         0000d044  00000000  00000000  00005274  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004e0c  00000000  00000000  000122b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8b 01 	jmp	0x316	; 0x316 <__ctors_end>
       4:	0c 94 3c 23 	jmp	0x4678	; 0x4678 <__vector_1>
       8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      10:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      14:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      18:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      1c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      20:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      24:	0c 94 6e 23 	jmp	0x46dc	; 0x46dc <__vector_9>
      28:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      2c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      30:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      34:	0c 94 a0 21 	jmp	0x4340	; 0x4340 <__vector_13>
      38:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      3c:	0c 94 a0 21 	jmp	0x4340	; 0x4340 <__vector_13>
      40:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      44:	0c 94 d3 21 	jmp	0x43a6	; 0x43a6 <__vector_17>
      48:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      4c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      50:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      54:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      58:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      5c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      60:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      64:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      68:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      6c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      70:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      74:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      78:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      7c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      80:	0c 94 dd 21 	jmp	0x43ba	; 0x43ba <__vector_32>
      84:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      88:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      8c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      90:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      94:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      98:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      9c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      ac:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      bc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      cc:	82 13       	cpse	r24, r18
      ce:	88 13       	cpse	r24, r24
      d0:	8b 13       	cpse	r24, r27
      d2:	8e 13       	cpse	r24, r30
      d4:	91 13       	cpse	r25, r17
      d6:	94 13       	cpse	r25, r20
      d8:	9a 13       	cpse	r25, r26
      da:	97 13       	cpse	r25, r23
      dc:	9d 13       	cpse	r25, r29
      de:	a0 13       	cpse	r26, r16
      e0:	a3 13       	cpse	r26, r19
      e2:	a9 13       	cpse	r26, r25
      e4:	ac 13       	cpse	r26, r28
      e6:	af 13       	cpse	r26, r31
      e8:	b2 13       	cpse	r27, r18
      ea:	a6 13       	cpse	r26, r22
      ec:	7f 13       	cpse	r23, r31
      ee:	85 13       	cpse	r24, r21

000000f0 <__c.2113>:
      f0:	2a 20 45 52 52 4f 52 20 72 65 61 64 69 6e 67 20     * ERROR reading 
     100:	4d 41 43 20 61 64 64 72 65 73 73 0d 0a 00           MAC address...

0000010e <__c.2111>:
     10e:	4d 41 43 20 3d 20 30 78 00                          MAC = 0x.

00000117 <__c.2102>:
     117:	53 74 61 72 74 69 6e 67 20 75 70 2e 2e 2e 0d 0a     Starting up.....
	...

00000128 <__c.2112>:
     128:	55 4e 4b 4f 57 4e 00                                UNKOWN.

0000012f <__c.2109>:
     12f:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     13f:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

0000014a <__c.2106>:
     14a:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     15a:	20 53 69 67 6e 61 6c 00                              Signal.

00000162 <__c.2103>:
     162:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     172:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000182 <__c.2100>:
     182:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     192:	72 6f 72 00                                         ror.

00000196 <__c.2097>:
     196:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

000001a7 <__c.2094>:
     1a7:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

000001b6 <__c.2091>:
     1b6:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     1c6:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000001d1 <__c.2088>:
     1d1:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000001dd <__c.2085>:
     1dd:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     1ed:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     1fd:	20 6f 6b 3f 00                                       ok?.

00000202 <__c.2082>:
     202:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     212:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

00000220 <__c.2079>:
     220:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     230:	72 74 00                                            rt.

00000233 <__c.2076>:
     233:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     243:	49 44 00                                            ID.

00000246 <__c.2073>:
     246:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     256:	20 57 61 6b 65 75 70 00                              Wakeup.

0000025e <__c.2070>:
     25e:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     26e:	6c 61 74 65 64 00                                   lated.

00000274 <__c.2067>:
     274:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     284:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000028f <__c.2064>:
     28f:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     29f:	69 6e 74 65 72 00                                   inter.

000002a5 <__c.2061>:
     2a5:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     2b5:	6c 6f 77 00                                         low.

000002b9 <__c.2057>:
     2b9:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     2c9:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     2d9:	6e 6f 75 67 68 21 00                                nough!.

000002e0 <__c.2054>:
     2e0:	29 3a 20 00                                         ): .

000002e4 <__c.2052>:
     2e4:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000002f0 <__c.1984>:
     2f0:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000002ff <__c.1839>:
     2ff:	45 46 47 65 66 67 00                                EFGefg.

00000306 <__c.1833>:
     306:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000316 <__ctors_end>:
     316:	11 24       	eor	r1, r1
     318:	1f be       	out	0x3f, r1	; 63
     31a:	cf ef       	ldi	r28, 0xFF	; 255
     31c:	d1 e2       	ldi	r29, 0x21	; 33
     31e:	de bf       	out	0x3e, r29	; 62
     320:	cd bf       	out	0x3d, r28	; 61

00000322 <__do_copy_data>:
     322:	12 e0       	ldi	r17, 0x02	; 2
     324:	a0 e0       	ldi	r26, 0x00	; 0
     326:	b2 e0       	ldi	r27, 0x02	; 2
     328:	e2 e1       	ldi	r30, 0x12	; 18
     32a:	f1 e5       	ldi	r31, 0x51	; 81
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	0b bf       	out	0x3b, r16	; 59
     330:	02 c0       	rjmp	.+4      	; 0x336 <__do_copy_data+0x14>
     332:	07 90       	elpm	r0, Z+
     334:	0d 92       	st	X+, r0
     336:	ae 3c       	cpi	r26, 0xCE	; 206
     338:	b1 07       	cpc	r27, r17
     33a:	d9 f7       	brne	.-10     	; 0x332 <__do_copy_data+0x10>

0000033c <__do_clear_bss>:
     33c:	15 e0       	ldi	r17, 0x05	; 5
     33e:	ae ec       	ldi	r26, 0xCE	; 206
     340:	b2 e0       	ldi	r27, 0x02	; 2
     342:	01 c0       	rjmp	.+2      	; 0x346 <.do_clear_bss_start>

00000344 <.do_clear_bss_loop>:
     344:	1d 92       	st	X+, r1

00000346 <.do_clear_bss_start>:
     346:	a0 3b       	cpi	r26, 0xB0	; 176
     348:	b1 07       	cpc	r27, r17
     34a:	e1 f7       	brne	.-8      	; 0x344 <.do_clear_bss_loop>
     34c:	0e 94 36 03 	call	0x66c	; 0x66c <main>
     350:	0c 94 87 28 	jmp	0x510e	; 0x510e <_exit>

00000354 <__bad_interrupt>:
     354:	0c 94 0f 22 	jmp	0x441e	; 0x441e <__vector_default>

00000358 <nrk_create_taskset>:
}


void
nrk_create_taskset()
{
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
  TaskOne.task = Task1;
     35e:	81 e4       	ldi	r24, 0x41	; 65
     360:	92 e0       	ldi	r25, 0x02	; 2
     362:	90 93 dc 02 	sts	0x02DC, r25
     366:	80 93 db 02 	sts	0x02DB, r24
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
     36a:	c6 ed       	ldi	r28, 0xD6	; 214
     36c:	d2 e0       	ldi	r29, 0x02	; 2
     36e:	ce 01       	movw	r24, r28
     370:	6d e7       	ldi	r22, 0x7D	; 125
     372:	73 e0       	ldi	r23, 0x03	; 3
     374:	40 e8       	ldi	r20, 0x80	; 128
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	0e 94 32 24 	call	0x4864	; 0x4864 <nrk_task_set_stk>
  TaskOne.prio = 1;
     37c:	11 e0       	ldi	r17, 0x01	; 1
     37e:	18 87       	std	Y+8, r17	; 0x08
  TaskOne.FirstActivation = TRUE;
     380:	1f 83       	std	Y+7, r17	; 0x07
  TaskOne.Type = BASIC_TASK;
     382:	19 87       	std	Y+9, r17	; 0x09
  TaskOne.SchType = PREEMPTIVE;
     384:	1a 87       	std	Y+10, r17	; 0x0a
  TaskOne.period.secs = 0;
     386:	1b 86       	std	Y+11, r1	; 0x0b
     388:	1c 86       	std	Y+12, r1	; 0x0c
     38a:	1d 86       	std	Y+13, r1	; 0x0d
     38c:	1e 86       	std	Y+14, r1	; 0x0e
  TaskOne.period.nano_secs = 250*NANOS_PER_MS;
     38e:	80 e8       	ldi	r24, 0x80	; 128
     390:	92 eb       	ldi	r25, 0xB2	; 178
     392:	a6 ee       	ldi	r26, 0xE6	; 230
     394:	be e0       	ldi	r27, 0x0E	; 14
     396:	8f 87       	std	Y+15, r24	; 0x0f
     398:	98 8b       	std	Y+16, r25	; 0x10
     39a:	a9 8b       	std	Y+17, r26	; 0x11
     39c:	ba 8b       	std	Y+18, r27	; 0x12
  TaskOne.cpu_reserve.secs = 0;
     39e:	1b 8a       	std	Y+19, r1	; 0x13
     3a0:	1c 8a       	std	Y+20, r1	; 0x14
     3a2:	1d 8a       	std	Y+21, r1	; 0x15
     3a4:	1e 8a       	std	Y+22, r1	; 0x16
  TaskOne.cpu_reserve.nano_secs =  0;
     3a6:	1f 8a       	std	Y+23, r1	; 0x17
     3a8:	18 8e       	std	Y+24, r1	; 0x18
     3aa:	19 8e       	std	Y+25, r1	; 0x19
     3ac:	1a 8e       	std	Y+26, r1	; 0x1a
  TaskOne.offset.secs = 0;
     3ae:	1b 8e       	std	Y+27, r1	; 0x1b
     3b0:	1c 8e       	std	Y+28, r1	; 0x1c
     3b2:	1d 8e       	std	Y+29, r1	; 0x1d
     3b4:	1e 8e       	std	Y+30, r1	; 0x1e
  TaskOne.offset.nano_secs= 0;
     3b6:	1f 8e       	std	Y+31, r1	; 0x1f
     3b8:	18 a2       	std	Y+32, r1	; 0x20
     3ba:	19 a2       	std	Y+33, r1	; 0x21
     3bc:	1a a2       	std	Y+34, r1	; 0x22
  nrk_activate_task (&TaskOne);
     3be:	ce 01       	movw	r24, r28
     3c0:	0e 94 2a 1b 	call	0x3654	; 0x3654 <nrk_activate_task>

  TaskTwo.task = Task2;
     3c4:	8d e1       	ldi	r24, 0x1D	; 29
     3c6:	92 e0       	ldi	r25, 0x02	; 2
     3c8:	90 93 88 04 	sts	0x0488, r25
     3cc:	80 93 87 04 	sts	0x0487, r24
  nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
     3d0:	c2 e8       	ldi	r28, 0x82	; 130
     3d2:	d4 e0       	ldi	r29, 0x04	; 4
     3d4:	ce 01       	movw	r24, r28
     3d6:	69 ef       	ldi	r22, 0xF9	; 249
     3d8:	72 e0       	ldi	r23, 0x02	; 2
     3da:	40 e8       	ldi	r20, 0x80	; 128
     3dc:	50 e0       	ldi	r21, 0x00	; 0
     3de:	0e 94 32 24 	call	0x4864	; 0x4864 <nrk_task_set_stk>
  TaskTwo.prio = 2;
     3e2:	82 e0       	ldi	r24, 0x02	; 2
     3e4:	88 87       	std	Y+8, r24	; 0x08
  TaskTwo.FirstActivation = TRUE;
     3e6:	1f 83       	std	Y+7, r17	; 0x07
  TaskTwo.Type = BASIC_TASK;
     3e8:	19 87       	std	Y+9, r17	; 0x09
  TaskTwo.SchType = PREEMPTIVE;
     3ea:	1a 87       	std	Y+10, r17	; 0x0a
  TaskTwo.period.secs = 0;
     3ec:	1b 86       	std	Y+11, r1	; 0x0b
     3ee:	1c 86       	std	Y+12, r1	; 0x0c
     3f0:	1d 86       	std	Y+13, r1	; 0x0d
     3f2:	1e 86       	std	Y+14, r1	; 0x0e
  TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	95 e6       	ldi	r25, 0x65	; 101
     3f8:	ad ec       	ldi	r26, 0xCD	; 205
     3fa:	bd e1       	ldi	r27, 0x1D	; 29
     3fc:	8f 87       	std	Y+15, r24	; 0x0f
     3fe:	98 8b       	std	Y+16, r25	; 0x10
     400:	a9 8b       	std	Y+17, r26	; 0x11
     402:	ba 8b       	std	Y+18, r27	; 0x12
  TaskTwo.cpu_reserve.secs = 0;
     404:	1b 8a       	std	Y+19, r1	; 0x13
     406:	1c 8a       	std	Y+20, r1	; 0x14
     408:	1d 8a       	std	Y+21, r1	; 0x15
     40a:	1e 8a       	std	Y+22, r1	; 0x16
  TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	91 ee       	ldi	r25, 0xE1	; 225
     410:	a5 ef       	ldi	r26, 0xF5	; 245
     412:	b5 e0       	ldi	r27, 0x05	; 5
     414:	8f 8b       	std	Y+23, r24	; 0x17
     416:	98 8f       	std	Y+24, r25	; 0x18
     418:	a9 8f       	std	Y+25, r26	; 0x19
     41a:	ba 8f       	std	Y+26, r27	; 0x1a
  TaskTwo.offset.secs = 0;
     41c:	1b 8e       	std	Y+27, r1	; 0x1b
     41e:	1c 8e       	std	Y+28, r1	; 0x1c
     420:	1d 8e       	std	Y+29, r1	; 0x1d
     422:	1e 8e       	std	Y+30, r1	; 0x1e
  TaskTwo.offset.nano_secs= 0;
     424:	1f 8e       	std	Y+31, r1	; 0x1f
     426:	18 a2       	std	Y+32, r1	; 0x20
     428:	19 a2       	std	Y+33, r1	; 0x21
     42a:	1a a2       	std	Y+34, r1	; 0x22
  nrk_activate_task (&TaskTwo);
     42c:	ce 01       	movw	r24, r28
     42e:	0e 94 2a 1b 	call	0x3654	; 0x3654 <nrk_activate_task>

}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	08 95       	ret

0000043a <Task2>:
	cnt++;
	}
}

void Task2()
{
     43a:	1f 93       	push	r17
  uint8_t cnt;
  printf( "Task2 PID=%d\r\n",nrk_get_pid());
     43c:	0e 94 37 19 	call	0x326e	; 0x326e <nrk_get_pid>
     440:	00 d0       	rcall	.+0      	; 0x442 <Task2+0x8>
     442:	00 d0       	rcall	.+0      	; 0x444 <Task2+0xa>
     444:	ed b7       	in	r30, 0x3d	; 61
     446:	fe b7       	in	r31, 0x3e	; 62
     448:	31 96       	adiw	r30, 0x01	; 1
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	32 e0       	ldi	r19, 0x02	; 2
     44e:	ad b7       	in	r26, 0x3d	; 61
     450:	be b7       	in	r27, 0x3e	; 62
     452:	12 96       	adiw	r26, 0x02	; 2
     454:	3c 93       	st	X, r19
     456:	2e 93       	st	-X, r18
     458:	11 97       	sbiw	r26, 0x01	; 1
     45a:	82 83       	std	Z+2, r24	; 0x02
     45c:	13 82       	std	Z+3, r1	; 0x03
     45e:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
  cnt=0;
  while(1) {
	nrk_led_toggle(BLUE_LED);
	nrk_gpio_toggle(NRK_DEBUG_1);
     462:	10 91 56 02 	lds	r17, 0x0256
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
{
  uint8_t cnt;
  printf( "Task2 PID=%d\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
	nrk_led_toggle(BLUE_LED);
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <nrk_led_toggle>
	nrk_gpio_toggle(NRK_DEBUG_1);
     476:	81 2f       	mov	r24, r17
     478:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <nrk_gpio_toggle>
	//printf( "Task2 cnt=%d\r\n",cnt );
	nrk_wait_until_next_period();
     47c:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <nrk_wait_until_next_period>
     480:	f6 cf       	rjmp	.-20     	; 0x46e <Task2+0x34>

00000482 <Task1>:
}



void Task1()
{
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	df 93       	push	r29
     48c:	cf 93       	push	r28
     48e:	0f 92       	push	r0
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
uint16_t cnt;
int8_t val;
uint8_t chan;
uint8_t i;

val=read_eeprom_mac_address(&mac_address);
     494:	81 ed       	ldi	r24, 0xD1	; 209
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	0e 94 3b 11 	call	0x2276	; 0x2276 <read_eeprom_mac_address>
if(val==NRK_OK)
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	09 f0       	breq	.+2      	; 0x4a2 <Task1+0x20>
     4a0:	82 c0       	rjmp	.+260    	; 0x5a6 <Task1+0x124>
	{
	nrk_kprintf( PSTR("MAC = 0x"));
     4a2:	8e e0       	ldi	r24, 0x0E	; 14
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 ba 10 	call	0x2174	; 0x2174 <nrk_kprintf>
	printf( "%x",(uint8_t)((mac_address>>24)&0xff));
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <Task1+0x2a>
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <Task1+0x2c>
     4ae:	ed b7       	in	r30, 0x3d	; 61
     4b0:	fe b7       	in	r31, 0x3e	; 62
     4b2:	31 96       	adiw	r30, 0x01	; 1
     4b4:	0f e0       	ldi	r16, 0x0F	; 15
     4b6:	12 e0       	ldi	r17, 0x02	; 2
     4b8:	ad b7       	in	r26, 0x3d	; 61
     4ba:	be b7       	in	r27, 0x3e	; 62
     4bc:	12 96       	adiw	r26, 0x02	; 2
     4be:	1c 93       	st	X, r17
     4c0:	0e 93       	st	-X, r16
     4c2:	11 97       	sbiw	r26, 0x01	; 1
     4c4:	80 91 d4 02 	lds	r24, 0x02D4
     4c8:	82 83       	std	Z+2, r24	; 0x02
     4ca:	13 82       	std	Z+3, r1	; 0x03
     4cc:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
	printf( "%x",(uint8_t)((mac_address>>16)&0xff));
     4d0:	ed b7       	in	r30, 0x3d	; 61
     4d2:	fe b7       	in	r31, 0x3e	; 62
     4d4:	31 96       	adiw	r30, 0x01	; 1
     4d6:	ad b7       	in	r26, 0x3d	; 61
     4d8:	be b7       	in	r27, 0x3e	; 62
     4da:	12 96       	adiw	r26, 0x02	; 2
     4dc:	1c 93       	st	X, r17
     4de:	0e 93       	st	-X, r16
     4e0:	11 97       	sbiw	r26, 0x01	; 1
     4e2:	80 91 d3 02 	lds	r24, 0x02D3
     4e6:	82 83       	std	Z+2, r24	; 0x02
     4e8:	13 82       	std	Z+3, r1	; 0x03
     4ea:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
	printf( "%x",(uint8_t)((mac_address>>8)&0xff));
     4ee:	ed b7       	in	r30, 0x3d	; 61
     4f0:	fe b7       	in	r31, 0x3e	; 62
     4f2:	31 96       	adiw	r30, 0x01	; 1
     4f4:	ad b7       	in	r26, 0x3d	; 61
     4f6:	be b7       	in	r27, 0x3e	; 62
     4f8:	12 96       	adiw	r26, 0x02	; 2
     4fa:	1c 93       	st	X, r17
     4fc:	0e 93       	st	-X, r16
     4fe:	11 97       	sbiw	r26, 0x01	; 1
     500:	80 91 d2 02 	lds	r24, 0x02D2
     504:	82 83       	std	Z+2, r24	; 0x02
     506:	13 82       	std	Z+3, r1	; 0x03
     508:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
	printf( "%x\r\n",(uint8_t)((mac_address & 0xff)));
     50c:	ed b7       	in	r30, 0x3d	; 61
     50e:	fe b7       	in	r31, 0x3e	; 62
     510:	31 96       	adiw	r30, 0x01	; 1
     512:	82 e1       	ldi	r24, 0x12	; 18
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	ad b7       	in	r26, 0x3d	; 61
     518:	be b7       	in	r27, 0x3e	; 62
     51a:	12 96       	adiw	r26, 0x02	; 2
     51c:	9c 93       	st	X, r25
     51e:	8e 93       	st	-X, r24
     520:	11 97       	sbiw	r26, 0x01	; 1
     522:	80 91 d1 02 	lds	r24, 0x02D1
     526:	82 83       	std	Z+2, r24	; 0x02
     528:	13 82       	std	Z+3, r1	; 0x03
     52a:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
		nrk_kprintf( PSTR( "* ERROR reading MAC address\r\n" ));
		nrk_wait_until_next_period();
		}
	}

val=read_eeprom_channel(&chan);
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	0e 94 2f 11 	call	0x225e	; 0x225e <read_eeprom_channel>
printf( "chan = %d\r\n",chan );
     53e:	00 d0       	rcall	.+0      	; 0x540 <Task1+0xbe>
     540:	00 d0       	rcall	.+0      	; 0x542 <Task1+0xc0>
     542:	ed b7       	in	r30, 0x3d	; 61
     544:	fe b7       	in	r31, 0x3e	; 62
     546:	31 96       	adiw	r30, 0x01	; 1
     548:	87 e1       	ldi	r24, 0x17	; 23
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	ad b7       	in	r26, 0x3d	; 61
     54e:	be b7       	in	r27, 0x3e	; 62
     550:	12 96       	adiw	r26, 0x02	; 2
     552:	9c 93       	st	X, r25
     554:	8e 93       	st	-X, r24
     556:	11 97       	sbiw	r26, 0x01	; 1
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	82 83       	std	Z+2, r24	; 0x02
     55c:	13 82       	std	Z+3, r1	; 0x03
     55e:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>

  printf( "Task1 PID=%d\r\n",nrk_get_pid());
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0e 94 37 19 	call	0x326e	; 0x326e <nrk_get_pid>
     56e:	00 d0       	rcall	.+0      	; 0x570 <Task1+0xee>
     570:	00 d0       	rcall	.+0      	; 0x572 <Task1+0xf0>
     572:	ed b7       	in	r30, 0x3d	; 61
     574:	fe b7       	in	r31, 0x3e	; 62
     576:	31 96       	adiw	r30, 0x01	; 1
     578:	23 e2       	ldi	r18, 0x23	; 35
     57a:	32 e0       	ldi	r19, 0x02	; 2
     57c:	ad b7       	in	r26, 0x3d	; 61
     57e:	be b7       	in	r27, 0x3e	; 62
     580:	12 96       	adiw	r26, 0x02	; 2
     582:	3c 93       	st	X, r19
     584:	2e 93       	st	-X, r18
     586:	11 97       	sbiw	r26, 0x01	; 1
     588:	82 83       	std	Z+2, r24	; 0x02
     58a:	13 82       	std	Z+3, r1	; 0x03
     58c:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
     590:	00 e0       	ldi	r16, 0x00	; 0
     592:	11 e0       	ldi	r17, 0x01	; 1
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
  val=0;
  i=0;
  for(cnt=0x100; cnt<0x110; cnt++ )
	{
	nrk_eeprom_write_byte(cnt,i);
	printf( "Wrote %u to %d\r\n",i,cnt);
     59c:	92 e3       	ldi	r25, 0x32	; 50
     59e:	e9 2e       	mov	r14, r25
     5a0:	92 e0       	ldi	r25, 0x02	; 2
     5a2:	f9 2e       	mov	r15, r25
     5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <Task1+0x132>
	}
else
	{
	while(1)	
		{
		nrk_kprintf( PSTR( "* ERROR reading MAC address\r\n" ));
     5a6:	80 ef       	ldi	r24, 0xF0	; 240
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 ba 10 	call	0x2174	; 0x2174 <nrk_kprintf>
		nrk_wait_until_next_period();
     5ae:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <nrk_wait_until_next_period>
     5b2:	f9 cf       	rjmp	.-14     	; 0x5a6 <Task1+0x124>
  printf( "Task1 PID=%d\r\n",nrk_get_pid());
  val=0;
  i=0;
  for(cnt=0x100; cnt<0x110; cnt++ )
	{
	nrk_eeprom_write_byte(cnt,i);
     5b4:	c8 01       	movw	r24, r16
     5b6:	60 2f       	mov	r22, r16
     5b8:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_eeprom_write_byte>
	printf( "Wrote %u to %d\r\n",i,cnt);
     5bc:	00 d0       	rcall	.+0      	; 0x5be <Task1+0x13c>
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <Task1+0x13e>
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <Task1+0x140>
     5c2:	ed b7       	in	r30, 0x3d	; 61
     5c4:	fe b7       	in	r31, 0x3e	; 62
     5c6:	31 96       	adiw	r30, 0x01	; 1
     5c8:	ad b7       	in	r26, 0x3d	; 61
     5ca:	be b7       	in	r27, 0x3e	; 62
     5cc:	12 96       	adiw	r26, 0x02	; 2
     5ce:	fc 92       	st	X, r15
     5d0:	ee 92       	st	-X, r14
     5d2:	11 97       	sbiw	r26, 0x01	; 1
     5d4:	c8 01       	movw	r24, r16
     5d6:	80 50       	subi	r24, 0x00	; 0
     5d8:	91 40       	sbci	r25, 0x01	; 1
     5da:	93 83       	std	Z+3, r25	; 0x03
     5dc:	82 83       	std	Z+2, r24	; 0x02
     5de:	15 83       	std	Z+5, r17	; 0x05
     5e0:	04 83       	std	Z+4, r16	; 0x04
     5e2:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
printf( "chan = %d\r\n",chan );

  printf( "Task1 PID=%d\r\n",nrk_get_pid());
  val=0;
  i=0;
  for(cnt=0x100; cnt<0x110; cnt++ )
     5e6:	0f 5f       	subi	r16, 0xFF	; 255
     5e8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ea:	8d b7       	in	r24, 0x3d	; 61
     5ec:	9e b7       	in	r25, 0x3e	; 62
     5ee:	06 96       	adiw	r24, 0x06	; 6
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	9e bf       	out	0x3e, r25	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	8d bf       	out	0x3d, r24	; 61
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	00 31       	cpi	r16, 0x10	; 16
     5fe:	19 07       	cpc	r17, r25
     600:	c9 f6       	brne	.-78     	; 0x5b4 <Task1+0x132>
     602:	00 e0       	ldi	r16, 0x00	; 0
     604:	11 e0       	ldi	r17, 0x01	; 1
	i++;
	}
  for(cnt=0x100; cnt<0x110; cnt++ )
	{
	i=nrk_eeprom_read_byte(cnt);
	printf( "Read %u from %d\r\n",i,cnt);
     606:	83 e4       	ldi	r24, 0x43	; 67
     608:	e8 2e       	mov	r14, r24
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	f8 2e       	mov	r15, r24
	printf( "Wrote %u to %d\r\n",i,cnt);
	i++;
	}
  for(cnt=0x100; cnt<0x110; cnt++ )
	{
	i=nrk_eeprom_read_byte(cnt);
     60e:	c8 01       	movw	r24, r16
     610:	0e 94 71 11 	call	0x22e2	; 0x22e2 <nrk_eeprom_read_byte>
	printf( "Read %u from %d\r\n",i,cnt);
     614:	00 d0       	rcall	.+0      	; 0x616 <Task1+0x194>
     616:	00 d0       	rcall	.+0      	; 0x618 <Task1+0x196>
     618:	00 d0       	rcall	.+0      	; 0x61a <Task1+0x198>
     61a:	ed b7       	in	r30, 0x3d	; 61
     61c:	fe b7       	in	r31, 0x3e	; 62
     61e:	31 96       	adiw	r30, 0x01	; 1
     620:	ad b7       	in	r26, 0x3d	; 61
     622:	be b7       	in	r27, 0x3e	; 62
     624:	12 96       	adiw	r26, 0x02	; 2
     626:	fc 92       	st	X, r15
     628:	ee 92       	st	-X, r14
     62a:	11 97       	sbiw	r26, 0x01	; 1
     62c:	82 83       	std	Z+2, r24	; 0x02
     62e:	13 82       	std	Z+3, r1	; 0x03
     630:	15 83       	std	Z+5, r17	; 0x05
     632:	04 83       	std	Z+4, r16	; 0x04
     634:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
	{
	nrk_eeprom_write_byte(cnt,i);
	printf( "Wrote %u to %d\r\n",i,cnt);
	i++;
	}
  for(cnt=0x100; cnt<0x110; cnt++ )
     638:	0f 5f       	subi	r16, 0xFF	; 255
     63a:	1f 4f       	sbci	r17, 0xFF	; 255
     63c:	8d b7       	in	r24, 0x3d	; 61
     63e:	9e b7       	in	r25, 0x3e	; 62
     640:	06 96       	adiw	r24, 0x06	; 6
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	9e bf       	out	0x3e, r25	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	8d bf       	out	0x3d, r24	; 61
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	00 31       	cpi	r16, 0x10	; 16
     650:	19 07       	cpc	r17, r25
     652:	e9 f6       	brne	.-70     	; 0x60e <Task1+0x18c>


  cnt=0;
  while(1) {
	nrk_led_toggle(ORANGE_LED);
	nrk_gpio_toggle(NRK_DEBUG_0);
     654:	00 91 55 02 	lds	r16, 0x0255
	}


  cnt=0;
  while(1) {
	nrk_led_toggle(ORANGE_LED);
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <nrk_led_toggle>
	nrk_gpio_toggle(NRK_DEBUG_0);
     660:	80 2f       	mov	r24, r16
     662:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <nrk_gpio_toggle>
	//printf( "Task1 cnt=%d\r\n",cnt );
	nrk_wait_until_next_period();
     666:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <nrk_wait_until_next_period>
     66a:	f6 cf       	rjmp	.-20     	; 0x658 <Task1+0x1d6>

0000066c <main>:

int
main ()
{
  uint8_t t;
  nrk_setup_ports();
     66c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
     670:	87 e0       	ldi	r24, 0x07	; 7
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 9b 10 	call	0x2136	; 0x2136 <nrk_setup_uart>
  
  nrk_kprintf( PSTR("Starting up...\r\n") );
     678:	87 e1       	ldi	r24, 0x17	; 23
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	0e 94 ba 10 	call	0x2174	; 0x2174 <nrk_kprintf>

  nrk_init();
     680:	0e 94 82 12 	call	0x2504	; 0x2504 <nrk_init>

  nrk_led_clr(ORANGE_LED);
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 12 10 	call	0x2024	; 0x2024 <nrk_led_clr>
  nrk_led_clr(BLUE_LED);
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	0e 94 12 10 	call	0x2024	; 0x2024 <nrk_led_clr>
  nrk_led_clr(GREEN_LED);
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 12 10 	call	0x2024	; 0x2024 <nrk_led_clr>
  nrk_led_clr(RED_LED);
     69c:	83 e0       	ldi	r24, 0x03	; 3
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 12 10 	call	0x2024	; 0x2024 <nrk_led_clr>
 
  nrk_time_set(0,0);
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	0e 94 a7 1c 	call	0x394e	; 0x394e <nrk_time_set>
  nrk_create_taskset ();
     6b8:	0e 94 ac 01 	call	0x358	; 0x358 <nrk_create_taskset>
  nrk_start();
     6bc:	0e 94 30 12 	call	0x2460	; 0x2460 <nrk_start>
  
  return 0;
}
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	08 95       	ret

000006c6 <halRfSetChannel>:
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	9c 01       	movw	r18, r24
     6ca:	2b 50       	subi	r18, 0x0B	; 11
     6cc:	30 40       	sbci	r19, 0x00	; 0
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
     6ce:	22 0f       	add	r18, r18
     6d0:	33 1f       	adc	r19, r19
     6d2:	22 0f       	add	r18, r18
     6d4:	33 1f       	adc	r19, r19
     6d6:	86 5a       	subi	r24, 0xA6	; 166
     6d8:	9e 4b       	sbci	r25, 0xBE	; 190
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
     6da:	82 0f       	add	r24, r18
     6dc:	93 1f       	adc	r25, r19
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
     6de:	f8 94       	cli
	FASTSPI_SETREG(CC2420_FSCTRL, f);
     6e0:	40 98       	cbi	0x08, 0	; 8
     6e2:	28 e1       	ldi	r18, 0x18	; 24
     6e4:	2e bd       	out	0x2e, r18	; 46
     6e6:	0d b4       	in	r0, 0x2d	; 45
     6e8:	07 fe       	sbrs	r0, 7
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <halRfSetChannel+0x20>
     6ec:	9e bd       	out	0x2e, r25	; 46
     6ee:	0d b4       	in	r0, 0x2d	; 45
     6f0:	07 fe       	sbrs	r0, 7
     6f2:	fd cf       	rjmp	.-6      	; 0x6ee <halRfSetChannel+0x28>
     6f4:	8e bd       	out	0x2e, r24	; 46
     6f6:	0d b4       	in	r0, 0x2d	; 45
     6f8:	07 fe       	sbrs	r0, 7
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <halRfSetChannel+0x30>
     6fc:	40 9a       	sbi	0x08, 0	; 8
	ENABLE_GLOBAL_INT();
     6fe:	78 94       	sei

} // rfSetChannel
     700:	08 95       	ret

00000702 <halRfWaitForCrystalOscillator>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
     702:	f8 94       	cli
	    FASTSPI_UPD_STATUS(spiStatusByte);
     704:	40 98       	cbi	0x08, 0	; 8
     706:	1e bc       	out	0x2e, r1	; 46
     708:	0d b4       	in	r0, 0x2d	; 45
     70a:	07 fe       	sbrs	r0, 7
     70c:	fd cf       	rjmp	.-6      	; 0x708 <halRfWaitForCrystalOscillator+0x6>
     70e:	8e b5       	in	r24, 0x2e	; 46
     710:	40 9a       	sbi	0x08, 0	; 8
	    ENABLE_GLOBAL_INT();
     712:	78 94       	sei
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
     714:	86 ff       	sbrs	r24, 6
     716:	f5 cf       	rjmp	.-22     	; 0x702 <halRfWaitForCrystalOscillator>

} // halRfWaitForCrystalOscillator
     718:	08 95       	ret

0000071a <rf_security_last_pkt_status>:

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
}
     71a:	80 91 ba 04 	lds	r24, 0x04BA
     71e:	08 95       	ret

00000720 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
     720:	fc 01       	movw	r30, r24
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
     722:	40 98       	cbi	0x08, 0	; 8
     724:	89 ec       	ldi	r24, 0xC9	; 201
     726:	8e bd       	out	0x2e, r24	; 46
     728:	0d b4       	in	r0, 0x2d	; 45
     72a:	07 fe       	sbrs	r0, 7
     72c:	fd cf       	rjmp	.-6      	; 0x728 <rf_security_set_ctr_counter+0x8>
     72e:	80 e8       	ldi	r24, 0x80	; 128
     730:	8e bd       	out	0x2e, r24	; 46
     732:	0d b4       	in	r0, 0x2d	; 45
     734:	07 fe       	sbrs	r0, 7
     736:	fd cf       	rjmp	.-6      	; 0x732 <rf_security_set_ctr_counter+0x12>
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	81 50       	subi	r24, 0x01	; 1
     73c:	df 01       	movw	r26, r30
     73e:	a8 0f       	add	r26, r24
     740:	b1 1d       	adc	r27, r1
     742:	9c 91       	ld	r25, X
     744:	9e bd       	out	0x2e, r25	; 46
     746:	0d b4       	in	r0, 0x2d	; 45
     748:	07 fe       	sbrs	r0, 7
     74a:	fd cf       	rjmp	.-6      	; 0x746 <rf_security_set_ctr_counter+0x26>
     74c:	88 23       	and	r24, r24
     74e:	a9 f7       	brne	.-22     	; 0x73a <rf_security_set_ctr_counter+0x1a>
     750:	40 9a       	sbi	0x08, 0	; 8
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
     752:	40 98       	cbi	0x08, 0	; 8
     754:	8b ec       	ldi	r24, 0xCB	; 203
     756:	8e bd       	out	0x2e, r24	; 46
     758:	0d b4       	in	r0, 0x2d	; 45
     75a:	07 fe       	sbrs	r0, 7
     75c:	fd cf       	rjmp	.-6      	; 0x758 <rf_security_set_ctr_counter+0x38>
     75e:	80 e8       	ldi	r24, 0x80	; 128
     760:	8e bd       	out	0x2e, r24	; 46
     762:	0d b4       	in	r0, 0x2d	; 45
     764:	07 fe       	sbrs	r0, 7
     766:	fd cf       	rjmp	.-6      	; 0x762 <rf_security_set_ctr_counter+0x42>
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	81 50       	subi	r24, 0x01	; 1
     76c:	df 01       	movw	r26, r30
     76e:	a8 0f       	add	r26, r24
     770:	b1 1d       	adc	r27, r1
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	9c 91       	ld	r25, X
     776:	12 97       	sbiw	r26, 0x02	; 2
     778:	9e bd       	out	0x2e, r25	; 46
     77a:	0d b4       	in	r0, 0x2d	; 45
     77c:	07 fe       	sbrs	r0, 7
     77e:	fd cf       	rjmp	.-6      	; 0x77a <rf_security_set_ctr_counter+0x5a>
     780:	88 23       	and	r24, r24
     782:	99 f7       	brne	.-26     	; 0x76a <rf_security_set_ctr_counter+0x4a>
     784:	40 9a       	sbi	0x08, 0	; 8
tx_ctr[0]=counter[0];
     786:	80 81       	ld	r24, Z
     788:	80 93 bb 04 	sts	0x04BB, r24
tx_ctr[1]=counter[1];
     78c:	81 81       	ldd	r24, Z+1	; 0x01
     78e:	80 93 bc 04 	sts	0x04BC, r24
tx_ctr[2]=counter[2];
     792:	82 81       	ldd	r24, Z+2	; 0x02
     794:	80 93 bd 04 	sts	0x04BD, r24
tx_ctr[3]=counter[3];
     798:	83 81       	ldd	r24, Z+3	; 0x03
     79a:	80 93 be 04 	sts	0x04BE, r24
}
     79e:	08 95       	ret

000007a0 <rf_security_enable>:
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
     7a0:	40 98       	cbi	0x08, 0	; 8
     7a2:	89 e1       	ldi	r24, 0x19	; 25
     7a4:	8e bd       	out	0x2e, r24	; 46
     7a6:	0d b4       	in	r0, 0x2d	; 45
     7a8:	07 fe       	sbrs	r0, 7
     7aa:	fd cf       	rjmp	.-6      	; 0x7a6 <rf_security_enable+0x6>
     7ac:	83 e0       	ldi	r24, 0x03	; 3
     7ae:	8e bd       	out	0x2e, r24	; 46
     7b0:	0d b4       	in	r0, 0x2d	; 45
     7b2:	07 fe       	sbrs	r0, 7
     7b4:	fd cf       	rjmp	.-6      	; 0x7b0 <rf_security_enable+0x10>
     7b6:	86 e0       	ldi	r24, 0x06	; 6
     7b8:	8e bd       	out	0x2e, r24	; 46
     7ba:	0d b4       	in	r0, 0x2d	; 45
     7bc:	07 fe       	sbrs	r0, 7
     7be:	fd cf       	rjmp	.-6      	; 0x7ba <rf_security_enable+0x1a>
     7c0:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
     7c2:	40 98       	cbi	0x08, 0	; 8
     7c4:	8a e1       	ldi	r24, 0x1A	; 26
     7c6:	8e bd       	out	0x2e, r24	; 46
     7c8:	0d b4       	in	r0, 0x2d	; 45
     7ca:	07 fe       	sbrs	r0, 7
     7cc:	fd cf       	rjmp	.-6      	; 0x7c8 <rf_security_enable+0x28>
     7ce:	8e e0       	ldi	r24, 0x0E	; 14
     7d0:	8e bd       	out	0x2e, r24	; 46
     7d2:	0d b4       	in	r0, 0x2d	; 45
     7d4:	07 fe       	sbrs	r0, 7
     7d6:	fd cf       	rjmp	.-6      	; 0x7d2 <rf_security_enable+0x32>
     7d8:	8e e0       	ldi	r24, 0x0E	; 14
     7da:	8e bd       	out	0x2e, r24	; 46
     7dc:	0d b4       	in	r0, 0x2d	; 45
     7de:	07 fe       	sbrs	r0, 7
     7e0:	fd cf       	rjmp	.-6      	; 0x7dc <rf_security_enable+0x3c>
     7e2:	40 9a       	sbi	0x08, 0	; 8

security_enable=1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	80 93 ab 04 	sts	0x04AB, r24
}
     7ea:	08 95       	ret

000007ec <rf_security_disable>:



void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
     7ec:	40 98       	cbi	0x08, 0	; 8
     7ee:	89 e1       	ldi	r24, 0x19	; 25
     7f0:	8e bd       	out	0x2e, r24	; 46
     7f2:	0d b4       	in	r0, 0x2d	; 45
     7f4:	07 fe       	sbrs	r0, 7
     7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <rf_security_disable+0x6>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	8e bd       	out	0x2e, r24	; 46
     7fc:	0d b4       	in	r0, 0x2d	; 45
     7fe:	07 fe       	sbrs	r0, 7
     800:	fd cf       	rjmp	.-6      	; 0x7fc <rf_security_disable+0x10>
     802:	84 ec       	ldi	r24, 0xC4	; 196
     804:	8e bd       	out	0x2e, r24	; 46
     806:	0d b4       	in	r0, 0x2d	; 45
     808:	07 fe       	sbrs	r0, 7
     80a:	fd cf       	rjmp	.-6      	; 0x806 <rf_security_disable+0x1a>
     80c:	40 9a       	sbi	0x08, 0	; 8
  security_enable=0;
     80e:	10 92 ab 04 	sts	0x04AB, r1
}
     812:	08 95       	ret

00000814 <rf_get_sem>:
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     814:	80 91 a9 04 	lds	r24, 0x04A9
     818:	90 91 aa 04 	lds	r25, 0x04AA
     81c:	08 95       	ret

0000081e <rf_tx_power>:
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	8f 71       	andi	r24, 0x1F	; 31
     822:	90 70       	andi	r25, 0x00	; 0
     824:	80 6e       	ori	r24, 0xE0	; 224
     826:	90 6a       	ori	r25, 0xA0	; 160
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
     828:	40 98       	cbi	0x08, 0	; 8
     82a:	25 e1       	ldi	r18, 0x15	; 21
     82c:	2e bd       	out	0x2e, r18	; 46
     82e:	0d b4       	in	r0, 0x2d	; 45
     830:	07 fe       	sbrs	r0, 7
     832:	fd cf       	rjmp	.-6      	; 0x82e <rf_tx_power+0x10>
     834:	9e bd       	out	0x2e, r25	; 46
     836:	0d b4       	in	r0, 0x2d	; 45
     838:	07 fe       	sbrs	r0, 7
     83a:	fd cf       	rjmp	.-6      	; 0x836 <rf_tx_power+0x18>
     83c:	8e bd       	out	0x2e, r24	; 46
     83e:	0d b4       	in	r0, 0x2d	; 45
     840:	07 fe       	sbrs	r0, 7
     842:	fd cf       	rjmp	.-6      	; 0x83e <rf_tx_power+0x20>
     844:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
     846:	08 95       	ret

00000848 <rf_addr_decode_enable>:
}


void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
     848:	80 91 ac 04 	lds	r24, 0x04AC
     84c:	90 91 ad 04 	lds	r25, 0x04AD
     850:	98 60       	ori	r25, 0x08	; 8
     852:	90 93 ad 04 	sts	0x04AD, r25
     856:	80 93 ac 04 	sts	0x04AC, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
     85a:	40 98       	cbi	0x08, 0	; 8
     85c:	21 e1       	ldi	r18, 0x11	; 17
     85e:	2e bd       	out	0x2e, r18	; 46
     860:	0d b4       	in	r0, 0x2d	; 45
     862:	07 fe       	sbrs	r0, 7
     864:	fd cf       	rjmp	.-6      	; 0x860 <rf_addr_decode_enable+0x18>
     866:	9e bd       	out	0x2e, r25	; 46
     868:	0d b4       	in	r0, 0x2d	; 45
     86a:	07 fe       	sbrs	r0, 7
     86c:	fd cf       	rjmp	.-6      	; 0x868 <rf_addr_decode_enable+0x20>
     86e:	8e bd       	out	0x2e, r24	; 46
     870:	0d b4       	in	r0, 0x2d	; 45
     872:	07 fe       	sbrs	r0, 7
     874:	fd cf       	rjmp	.-6      	; 0x870 <rf_addr_decode_enable+0x28>
     876:	40 9a       	sbi	0x08, 0	; 8
}
     878:	08 95       	ret

0000087a <rf_addr_decode_disable>:

void rf_addr_decode_disable()
{
    mdmctrl0 &= (~0x0800);
     87a:	80 91 ac 04 	lds	r24, 0x04AC
     87e:	90 91 ad 04 	lds	r25, 0x04AD
     882:	97 7f       	andi	r25, 0xF7	; 247
     884:	90 93 ad 04 	sts	0x04AD, r25
     888:	80 93 ac 04 	sts	0x04AC, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
     88c:	40 98       	cbi	0x08, 0	; 8
     88e:	21 e1       	ldi	r18, 0x11	; 17
     890:	2e bd       	out	0x2e, r18	; 46
     892:	0d b4       	in	r0, 0x2d	; 45
     894:	07 fe       	sbrs	r0, 7
     896:	fd cf       	rjmp	.-6      	; 0x892 <rf_addr_decode_disable+0x18>
     898:	9e bd       	out	0x2e, r25	; 46
     89a:	0d b4       	in	r0, 0x2d	; 45
     89c:	07 fe       	sbrs	r0, 7
     89e:	fd cf       	rjmp	.-6      	; 0x89a <rf_addr_decode_disable+0x20>
     8a0:	8e bd       	out	0x2e, r24	; 46
     8a2:	0d b4       	in	r0, 0x2d	; 45
     8a4:	07 fe       	sbrs	r0, 7
     8a6:	fd cf       	rjmp	.-6      	; 0x8a2 <rf_addr_decode_disable+0x28>
     8a8:	40 9a       	sbi	0x08, 0	; 8
}
     8aa:	08 95       	ret

000008ac <rf_auto_ack_enable>:


void rf_auto_ack_enable()
{
    auto_ack_enable=1;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 93 b9 04 	sts	0x04B9, r24
    mdmctrl0 |= 0x0010;
     8b2:	80 91 ac 04 	lds	r24, 0x04AC
     8b6:	90 91 ad 04 	lds	r25, 0x04AD
     8ba:	80 61       	ori	r24, 0x10	; 16
     8bc:	90 93 ad 04 	sts	0x04AD, r25
     8c0:	80 93 ac 04 	sts	0x04AC, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
     8c4:	40 98       	cbi	0x08, 0	; 8
     8c6:	21 e1       	ldi	r18, 0x11	; 17
     8c8:	2e bd       	out	0x2e, r18	; 46
     8ca:	0d b4       	in	r0, 0x2d	; 45
     8cc:	07 fe       	sbrs	r0, 7
     8ce:	fd cf       	rjmp	.-6      	; 0x8ca <rf_auto_ack_enable+0x1e>
     8d0:	9e bd       	out	0x2e, r25	; 46
     8d2:	0d b4       	in	r0, 0x2d	; 45
     8d4:	07 fe       	sbrs	r0, 7
     8d6:	fd cf       	rjmp	.-6      	; 0x8d2 <rf_auto_ack_enable+0x26>
     8d8:	8e bd       	out	0x2e, r24	; 46
     8da:	0d b4       	in	r0, 0x2d	; 45
     8dc:	07 fe       	sbrs	r0, 7
     8de:	fd cf       	rjmp	.-6      	; 0x8da <rf_auto_ack_enable+0x2e>
     8e0:	40 9a       	sbi	0x08, 0	; 8
}
     8e2:	08 95       	ret

000008e4 <rf_auto_ack_disable>:

void rf_auto_ack_disable()
{
    auto_ack_enable=0;
     8e4:	10 92 b9 04 	sts	0x04B9, r1
    mdmctrl0 &= (~0x0010);
     8e8:	80 91 ac 04 	lds	r24, 0x04AC
     8ec:	90 91 ad 04 	lds	r25, 0x04AD
     8f0:	8f 7e       	andi	r24, 0xEF	; 239
     8f2:	90 93 ad 04 	sts	0x04AD, r25
     8f6:	80 93 ac 04 	sts	0x04AC, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
     8fa:	40 98       	cbi	0x08, 0	; 8
     8fc:	21 e1       	ldi	r18, 0x11	; 17
     8fe:	2e bd       	out	0x2e, r18	; 46
     900:	0d b4       	in	r0, 0x2d	; 45
     902:	07 fe       	sbrs	r0, 7
     904:	fd cf       	rjmp	.-6      	; 0x900 <rf_auto_ack_disable+0x1c>
     906:	9e bd       	out	0x2e, r25	; 46
     908:	0d b4       	in	r0, 0x2d	; 45
     90a:	07 fe       	sbrs	r0, 7
     90c:	fd cf       	rjmp	.-6      	; 0x908 <rf_auto_ack_disable+0x24>
     90e:	8e bd       	out	0x2e, r24	; 46
     910:	0d b4       	in	r0, 0x2d	; 45
     912:	07 fe       	sbrs	r0, 7
     914:	fd cf       	rjmp	.-6      	; 0x910 <rf_auto_ack_disable+0x2c>
     916:	40 9a       	sbi	0x08, 0	; 8
}
     918:	08 95       	ret

0000091a <rf_rx_on>:
//-------------------------------------------------------------------------------------------------------
void rf_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    	rfSettings.receiveOn = TRUE;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	80 93 b6 04 	sts	0x04B6, r24
	FASTSPI_STROBE(CC2420_SRXON);
     920:	40 98       	cbi	0x08, 0	; 8
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	8e bd       	out	0x2e, r24	; 46
     926:	0d b4       	in	r0, 0x2d	; 45
     928:	07 fe       	sbrs	r0, 7
     92a:	fd cf       	rjmp	.-6      	; 0x926 <rf_rx_on+0xc>
     92c:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
     92e:	40 98       	cbi	0x08, 0	; 8
     930:	88 e0       	ldi	r24, 0x08	; 8
     932:	8e bd       	out	0x2e, r24	; 46
     934:	0d b4       	in	r0, 0x2d	; 45
     936:	07 fe       	sbrs	r0, 7
     938:	fd cf       	rjmp	.-6      	; 0x934 <rf_rx_on+0x1a>
     93a:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
     93c:	10 92 bf 04 	sts	0x04BF, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
    //	ENABLE_FIFOP_INT();
} // rf_rx_on() 
     940:	08 95       	ret

00000942 <rf_polling_rx_on>:

void rf_polling_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    	rfSettings.receiveOn = TRUE;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 b6 04 	sts	0x04B6, r24
	FASTSPI_STROBE(CC2420_SRXON);
     948:	40 98       	cbi	0x08, 0	; 8
     94a:	83 e0       	ldi	r24, 0x03	; 3
     94c:	8e bd       	out	0x2e, r24	; 46
     94e:	0d b4       	in	r0, 0x2d	; 45
     950:	07 fe       	sbrs	r0, 7
     952:	fd cf       	rjmp	.-6      	; 0x94e <rf_polling_rx_on+0xc>
     954:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
     956:	40 98       	cbi	0x08, 0	; 8
     958:	88 e0       	ldi	r24, 0x08	; 8
     95a:	8e bd       	out	0x2e, r24	; 46
     95c:	0d b4       	in	r0, 0x2d	; 45
     95e:	07 fe       	sbrs	r0, 7
     960:	fd cf       	rjmp	.-6      	; 0x95c <rf_polling_rx_on+0x1a>
     962:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
     964:	10 92 bf 04 	sts	0x04BF, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
} // rf_rx_on() 
     968:	08 95       	ret

0000096a <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
	// XXX
    	//SET_VREG_INACTIVE();	
	rfSettings.receiveOn = FALSE;
     96a:	10 92 b6 04 	sts	0x04B6, r1
	FASTSPI_STROBE(CC2420_SRFOFF);
     96e:	40 98       	cbi	0x08, 0	; 8
     970:	86 e0       	ldi	r24, 0x06	; 6
     972:	8e bd       	out	0x2e, r24	; 46
     974:	0d b4       	in	r0, 0x2d	; 45
     976:	07 fe       	sbrs	r0, 7
     978:	fd cf       	rjmp	.-6      	; 0x974 <rf_rx_off+0xa>
     97a:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
     97c:	10 92 bf 04 	sts	0x04BF, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
    //	DISABLE_FIFOP_INT();
} // rf_rx_off() 
     980:	08 95       	ret

00000982 <rf_busy>:

}

uint8_t rf_busy()
{
return SFD_IS_1;
     982:	89 b1       	in	r24, 0x09	; 9
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	26 e0       	ldi	r18, 0x06	; 6
     988:	96 95       	lsr	r25
     98a:	87 95       	ror	r24
     98c:	2a 95       	dec	r18
     98e:	e1 f7       	brne	.-8      	; 0x988 <rf_busy+0x6>
}
     990:	81 70       	andi	r24, 0x01	; 1
     992:	08 95       	ret

00000994 <rf_rx_check_fifop>:

uint8_t rf_rx_check_fifop()
{
return FIFOP_IS_1;
     994:	8c b1       	in	r24, 0x0c	; 12
}
     996:	88 1f       	adc	r24, r24
     998:	88 27       	eor	r24, r24
     99a:	88 1f       	adc	r24, r24
     99c:	08 95       	ret

0000099e <rf_rx_check_sfd>:


uint8_t rf_rx_check_sfd()
{
return SFD_IS_1;
     99e:	89 b1       	in	r24, 0x09	; 9
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	36 e0       	ldi	r19, 0x06	; 6
     9a4:	96 95       	lsr	r25
     9a6:	87 95       	ror	r24
     9a8:	3a 95       	dec	r19
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <rf_rx_check_sfd+0x6>
}
     9ac:	81 70       	andi	r24, 0x01	; 1
     9ae:	08 95       	ret

000009b0 <rf_polling_rx_packet>:
uint16_t tmp_blah;

int8_t rf_polling_rx_packet(bool ack,uint8_t len)
{
     9b0:	df 93       	push	r29
     9b2:	cf 93       	push	r28
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <rf_polling_rx_packet+0x6>
     9b6:	00 d0       	rcall	.+0      	; 0x9b8 <rf_polling_rx_packet+0x8>
     9b8:	0f 92       	push	r0
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif

    if(FIFOP_IS_1 )
     9be:	67 99       	sbic	0x0c, 7	; 12
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <rf_polling_rx_packet+0x16>
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0d c2       	rjmp	.+1050   	; 0xde0 <rf_polling_rx_packet+0x430>
	uint16_t frameControlField;
	int8_t length;
	uint8_t pFooter[2];
	uint8_t checksum,rx_checksum,i;
			
	last_pkt_encrypted=0;
     9c6:	10 92 ba 04 	sts	0x04BA, r1
    
//	while(!SFD_IS_1);
//  XXX Need to make sure SFD has gone down to be sure packet finished!
//	while(SFD_IS_1);
    // Clean up and exit in case of FIFO overflow, which is indicated by FIFOP = 1 and FIFO = 0
	if((FIFOP_IS_1) && (!(FIFO_IS_1))) {	   
     9ca:	67 9b       	sbis	0x0c, 7	; 12
     9cc:	1e c0       	rjmp	.+60     	; 0xa0a <rf_polling_rx_packet+0x5a>
     9ce:	31 99       	sbic	0x06, 1	; 6
     9d0:	1c c0       	rjmp	.+56     	; 0xa0a <rf_polling_rx_packet+0x5a>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
     9d2:	40 98       	cbi	0x08, 0	; 8
     9d4:	8f e7       	ldi	r24, 0x7F	; 127
     9d6:	8e bd       	out	0x2e, r24	; 46
     9d8:	0d b4       	in	r0, 0x2d	; 45
     9da:	07 fe       	sbrs	r0, 7
     9dc:	fd cf       	rjmp	.-6      	; 0x9d8 <rf_polling_rx_packet+0x28>
     9de:	1e bc       	out	0x2e, r1	; 46
     9e0:	0d b4       	in	r0, 0x2d	; 45
     9e2:	07 fe       	sbrs	r0, 7
     9e4:	fd cf       	rjmp	.-6      	; 0x9e0 <rf_polling_rx_packet+0x30>
     9e6:	8e b5       	in	r24, 0x2e	; 46
     9e8:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
     9ea:	40 98       	cbi	0x08, 0	; 8
     9ec:	88 e0       	ldi	r24, 0x08	; 8
     9ee:	8e bd       	out	0x2e, r24	; 46
     9f0:	0d b4       	in	r0, 0x2d	; 45
     9f2:	07 fe       	sbrs	r0, 7
     9f4:	fd cf       	rjmp	.-6      	; 0x9f0 <rf_polling_rx_packet+0x40>
     9f6:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
     9f8:	40 98       	cbi	0x08, 0	; 8
     9fa:	88 e0       	ldi	r24, 0x08	; 8
     9fc:	8e bd       	out	0x2e, r24	; 46
     9fe:	0d b4       	in	r0, 0x2d	; 45
     a00:	07 fe       	sbrs	r0, 7
     a02:	fd cf       	rjmp	.-6      	; 0x9fe <rf_polling_rx_packet+0x4e>
     a04:	40 9a       	sbi	0x08, 0	; 8
     a06:	8f ef       	ldi	r24, 0xFF	; 255
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
#endif
	    return -1;
     a08:	eb c1       	rjmp	.+982    	; 0xde0 <rf_polling_rx_packet+0x430>
	}

	// Payload length
	FASTSPI_READ_FIFO_BYTE(length);
     a0a:	40 98       	cbi	0x08, 0	; 8
     a0c:	9f e7       	ldi	r25, 0x7F	; 127
     a0e:	9e bd       	out	0x2e, r25	; 46
     a10:	0d b4       	in	r0, 0x2d	; 45
     a12:	07 fe       	sbrs	r0, 7
     a14:	fd cf       	rjmp	.-6      	; 0xa10 <rf_polling_rx_packet+0x60>
     a16:	1e bc       	out	0x2e, r1	; 46
     a18:	0d b4       	in	r0, 0x2d	; 45
     a1a:	07 fe       	sbrs	r0, 7
     a1c:	fd cf       	rjmp	.-6      	; 0xa18 <rf_polling_rx_packet+0x68>
     a1e:	9e b5       	in	r25, 0x2e	; 46
     a20:	40 9a       	sbi	0x08, 0	; 8
	length &= RF_LENGTH_MASK; // Ignore MSB
     a22:	9f 77       	andi	r25, 0x7F	; 127
    // Ignore the packet if the length is too short
    if(length==0){  
     a24:	e1 f4       	brne	.+56     	; 0xa5e <rf_polling_rx_packet+0xae>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
     a26:	40 98       	cbi	0x08, 0	; 8
     a28:	8f e7       	ldi	r24, 0x7F	; 127
     a2a:	8e bd       	out	0x2e, r24	; 46
     a2c:	0d b4       	in	r0, 0x2d	; 45
     a2e:	07 fe       	sbrs	r0, 7
     a30:	fd cf       	rjmp	.-6      	; 0xa2c <rf_polling_rx_packet+0x7c>
     a32:	1e bc       	out	0x2e, r1	; 46
     a34:	0d b4       	in	r0, 0x2d	; 45
     a36:	07 fe       	sbrs	r0, 7
     a38:	fd cf       	rjmp	.-6      	; 0xa34 <rf_polling_rx_packet+0x84>
     a3a:	8e b5       	in	r24, 0x2e	; 46
     a3c:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
     a3e:	40 98       	cbi	0x08, 0	; 8
     a40:	88 e0       	ldi	r24, 0x08	; 8
     a42:	8e bd       	out	0x2e, r24	; 46
     a44:	0d b4       	in	r0, 0x2d	; 45
     a46:	07 fe       	sbrs	r0, 7
     a48:	fd cf       	rjmp	.-6      	; 0xa44 <rf_polling_rx_packet+0x94>
     a4a:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
     a4c:	40 98       	cbi	0x08, 0	; 8
     a4e:	88 e0       	ldi	r24, 0x08	; 8
     a50:	8e bd       	out	0x2e, r24	; 46
     a52:	0d b4       	in	r0, 0x2d	; 45
     a54:	07 fe       	sbrs	r0, 7
     a56:	fd cf       	rjmp	.-6      	; 0xa52 <rf_polling_rx_packet+0xa2>
     a58:	40 9a       	sbi	0x08, 0	; 8
     a5a:	8e ef       	ldi	r24, 0xFE	; 254
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
#endif
	return -2;
     a5c:	c1 c1       	rjmp	.+898    	; 0xde0 <rf_polling_rx_packet+0x430>
	}
    if (length < RF_ACK_PACKET_SIZE || (length-RF_PACKET_OVERHEAD_SIZE)> rfSettings.pRxInfo->max_length) {
     a5e:	95 30       	cpi	r25, 0x05	; 5
     a60:	8c f0       	brlt	.+34     	; 0xa84 <rf_polling_rx_packet+0xd4>
     a62:	e0 91 ae 04 	lds	r30, 0x04AE
     a66:	f0 91 af 04 	lds	r31, 0x04AF
     a6a:	29 2f       	mov	r18, r25
     a6c:	33 27       	eor	r19, r19
     a6e:	27 fd       	sbrc	r18, 7
     a70:	30 95       	com	r19
     a72:	2b 50       	subi	r18, 0x0B	; 11
     a74:	30 40       	sbci	r19, 0x00	; 0
     a76:	44 81       	ldd	r20, Z+4	; 0x04
     a78:	55 27       	eor	r21, r21
     a7a:	47 fd       	sbrc	r20, 7
     a7c:	50 95       	com	r21
     a7e:	42 17       	cp	r20, r18
     a80:	53 07       	cpc	r21, r19
     a82:	ac f5       	brge	.+106    	; 0xaee <rf_polling_rx_packet+0x13e>
    	FASTSPI_READ_FIFO_GARBAGE(length);
     a84:	40 98       	cbi	0x08, 0	; 8
     a86:	8f e7       	ldi	r24, 0x7F	; 127
     a88:	8e bd       	out	0x2e, r24	; 46
     a8a:	0d b4       	in	r0, 0x2d	; 45
     a8c:	07 fe       	sbrs	r0, 7
     a8e:	fd cf       	rjmp	.-6      	; 0xa8a <rf_polling_rx_packet+0xda>
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	29 2f       	mov	r18, r25
     a94:	33 27       	eor	r19, r19
     a96:	27 fd       	sbrc	r18, 7
     a98:	30 95       	com	r19
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <rf_polling_rx_packet+0xf6>
     a9c:	1e bc       	out	0x2e, r1	; 46
     a9e:	0d b4       	in	r0, 0x2d	; 45
     aa0:	07 fe       	sbrs	r0, 7
     aa2:	fd cf       	rjmp	.-6      	; 0xa9e <rf_polling_rx_packet+0xee>
     aa4:	8f 5f       	subi	r24, 0xFF	; 255
     aa6:	48 2f       	mov	r20, r24
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	42 17       	cp	r20, r18
     aac:	53 07       	cpc	r21, r19
     aae:	14 f4       	brge	.+4      	; 0xab4 <rf_polling_rx_packet+0x104>
     ab0:	31 99       	sbic	0x06, 1	; 6
     ab2:	f4 cf       	rjmp	.-24     	; 0xa9c <rf_polling_rx_packet+0xec>
     ab4:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_READ_FIFO_BYTE(tmp);  
     ab6:	40 98       	cbi	0x08, 0	; 8
     ab8:	8f e7       	ldi	r24, 0x7F	; 127
     aba:	8e bd       	out	0x2e, r24	; 46
     abc:	0d b4       	in	r0, 0x2d	; 45
     abe:	07 fe       	sbrs	r0, 7
     ac0:	fd cf       	rjmp	.-6      	; 0xabc <rf_polling_rx_packet+0x10c>
     ac2:	1e bc       	out	0x2e, r1	; 46
     ac4:	0d b4       	in	r0, 0x2d	; 45
     ac6:	07 fe       	sbrs	r0, 7
     ac8:	fd cf       	rjmp	.-6      	; 0xac4 <rf_polling_rx_packet+0x114>
     aca:	8e b5       	in	r24, 0x2e	; 46
     acc:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
     ace:	40 98       	cbi	0x08, 0	; 8
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	8e bd       	out	0x2e, r24	; 46
     ad4:	0d b4       	in	r0, 0x2d	; 45
     ad6:	07 fe       	sbrs	r0, 7
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <rf_polling_rx_packet+0x124>
     ada:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
     adc:	40 98       	cbi	0x08, 0	; 8
     ade:	88 e0       	ldi	r24, 0x08	; 8
     ae0:	8e bd       	out	0x2e, r24	; 46
     ae2:	0d b4       	in	r0, 0x2d	; 45
     ae4:	07 fe       	sbrs	r0, 7
     ae6:	fd cf       	rjmp	.-6      	; 0xae2 <rf_polling_rx_packet+0x132>
     ae8:	40 9a       	sbi	0x08, 0	; 8
     aea:	8d ef       	ldi	r24, 0xFD	; 253
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
#endif
	return -3;
     aec:	79 c1       	rjmp	.+754    	; 0xde0 <rf_polling_rx_packet+0x430>
	//printf_u( "Bad length: %d %d\n",length, rfSettings.pRxInfo->max_length );
    // Otherwise, if the length is valid, then proceed with the rest of the packet
    } else {
        // Register the payload length
        rfSettings.pRxInfo->length = length - RF_PACKET_OVERHEAD_SIZE - CHECKSUM_OVERHEAD;
     aee:	e0 91 ae 04 	lds	r30, 0x04AE
     af2:	f0 91 af 04 	lds	r31, 0x04AF
     af6:	9c 50       	subi	r25, 0x0C	; 12
     af8:	93 83       	std	Z+3, r25	; 0x03
	if(ack==true&&rfSettings.pRxInfo->length!=len){
     afa:	88 23       	and	r24, r24
     afc:	71 f0       	breq	.+28     	; 0xb1a <rf_polling_rx_packet+0x16a>
     afe:	e0 91 ae 04 	lds	r30, 0x04AE
     b02:	f0 91 af 04 	lds	r31, 0x04AF
     b06:	83 81       	ldd	r24, Z+3	; 0x03
     b08:	99 27       	eor	r25, r25
     b0a:	87 fd       	sbrc	r24, 7
     b0c:	90 95       	com	r25
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	86 17       	cp	r24, r22
     b12:	97 07       	cpc	r25, r23
     b14:	11 f0       	breq	.+4      	; 0xb1a <rf_polling_rx_packet+0x16a>
     b16:	8a ef       	ldi	r24, 0xFA	; 250
     b18:	63 c1       	rjmp	.+710    	; 0xde0 <rf_polling_rx_packet+0x430>
	    nrk_sem_post(radio_sem);
#endif
	    return -6;
}
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
     b1a:	40 98       	cbi	0x08, 0	; 8
     b1c:	8f e7       	ldi	r24, 0x7F	; 127
     b1e:	8e bd       	out	0x2e, r24	; 46
     b20:	0d b4       	in	r0, 0x2d	; 45
     b22:	07 fe       	sbrs	r0, 7
     b24:	fd cf       	rjmp	.-6      	; 0xb20 <rf_polling_rx_packet+0x170>
     b26:	fe 01       	movw	r30, r28
     b28:	32 96       	adiw	r30, 0x02	; 2
{
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet(bool ack,uint8_t len)
     b2a:	cf 01       	movw	r24, r30
     b2c:	02 96       	adiw	r24, 0x02	; 2
	    nrk_sem_post(radio_sem);
#endif
	    return -6;
}
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
     b2e:	1e bc       	out	0x2e, r1	; 46
     b30:	0d b4       	in	r0, 0x2d	; 45
     b32:	07 fe       	sbrs	r0, 7
     b34:	fd cf       	rjmp	.-6      	; 0xb30 <rf_polling_rx_packet+0x180>
     b36:	2e b5       	in	r18, 0x2e	; 46
     b38:	21 93       	st	Z+, r18
     b3a:	e8 17       	cp	r30, r24
     b3c:	f9 07       	cpc	r31, r25
     b3e:	b9 f7       	brne	.-18     	; 0xb2e <rf_polling_rx_packet+0x17e>
     b40:	40 9a       	sbi	0x08, 0	; 8
        rfSettings.pRxInfo->ackRequest = !!(frameControlField & RF_FCF_ACK_BM);
     b42:	e0 91 ae 04 	lds	r30, 0x04AE
     b46:	f0 91 af 04 	lds	r31, 0x04AF
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	9b 81       	ldd	r25, Y+3	; 0x03
     b4e:	45 e0       	ldi	r20, 0x05	; 5
     b50:	96 95       	lsr	r25
     b52:	87 95       	ror	r24
     b54:	4a 95       	dec	r20
     b56:	e1 f7       	brne	.-8      	; 0xb50 <rf_polling_rx_packet+0x1a0>
     b58:	81 70       	andi	r24, 0x01	; 1
     b5a:	87 83       	std	Z+7, r24	; 0x07
    	FASTSPI_READ_FIFO_BYTE(rfSettings.pRxInfo->seqNumber);
     b5c:	40 98       	cbi	0x08, 0	; 8
     b5e:	8f e7       	ldi	r24, 0x7F	; 127
     b60:	8e bd       	out	0x2e, r24	; 46
     b62:	0d b4       	in	r0, 0x2d	; 45
     b64:	07 fe       	sbrs	r0, 7
     b66:	fd cf       	rjmp	.-6      	; 0xb62 <rf_polling_rx_packet+0x1b2>
     b68:	1e bc       	out	0x2e, r1	; 46
     b6a:	0d b4       	in	r0, 0x2d	; 45
     b6c:	07 fe       	sbrs	r0, 7
     b6e:	fd cf       	rjmp	.-6      	; 0xb6a <rf_polling_rx_packet+0x1ba>
     b70:	e0 91 ae 04 	lds	r30, 0x04AE
     b74:	f0 91 af 04 	lds	r31, 0x04AF
     b78:	8e b5       	in	r24, 0x2e	; 46
     b7a:	80 83       	st	Z, r24
     b7c:	40 9a       	sbi	0x08, 0	; 8

		// Receive the rest of the packet
		} else {
*/
			// Skip the destination PAN and address (that's taken care of by harware address recognition!)
		FASTSPI_READ_FIFO_GARBAGE(4);
     b7e:	40 98       	cbi	0x08, 0	; 8
     b80:	8f e7       	ldi	r24, 0x7F	; 127
     b82:	8e bd       	out	0x2e, r24	; 46
     b84:	0d b4       	in	r0, 0x2d	; 45
     b86:	07 fe       	sbrs	r0, 7
     b88:	fd cf       	rjmp	.-6      	; 0xb84 <rf_polling_rx_packet+0x1d4>
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	07 c0       	rjmp	.+14     	; 0xb9c <rf_polling_rx_packet+0x1ec>
     b8e:	1e bc       	out	0x2e, r1	; 46
     b90:	0d b4       	in	r0, 0x2d	; 45
     b92:	07 fe       	sbrs	r0, 7
     b94:	fd cf       	rjmp	.-6      	; 0xb90 <rf_polling_rx_packet+0x1e0>
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	84 30       	cpi	r24, 0x04	; 4
     b9a:	11 f0       	breq	.+4      	; 0xba0 <rf_polling_rx_packet+0x1f0>
     b9c:	31 99       	sbic	0x06, 1	; 6
     b9e:	f7 cf       	rjmp	.-18     	; 0xb8e <rf_polling_rx_packet+0x1de>
     ba0:	40 9a       	sbi	0x08, 0	; 8

			// Read the source address
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rfSettings.pRxInfo->srcAddr, 2);
     ba2:	40 98       	cbi	0x08, 0	; 8
     ba4:	8f e7       	ldi	r24, 0x7F	; 127
     ba6:	8e bd       	out	0x2e, r24	; 46
     ba8:	0d b4       	in	r0, 0x2d	; 45
     baa:	07 fe       	sbrs	r0, 7
     bac:	fd cf       	rjmp	.-6      	; 0xba8 <rf_polling_rx_packet+0x1f8>
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	1e bc       	out	0x2e, r1	; 46
     bb4:	0d b4       	in	r0, 0x2d	; 45
     bb6:	07 fe       	sbrs	r0, 7
     bb8:	fd cf       	rjmp	.-6      	; 0xbb4 <rf_polling_rx_packet+0x204>
     bba:	e0 91 ae 04 	lds	r30, 0x04AE
     bbe:	f0 91 af 04 	lds	r31, 0x04AF
     bc2:	2e b5       	in	r18, 0x2e	; 46
     bc4:	e8 0f       	add	r30, r24
     bc6:	f9 1f       	adc	r31, r25
     bc8:	21 83       	std	Z+1, r18	; 0x01
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	82 30       	cpi	r24, 0x02	; 2
     bce:	91 05       	cpc	r25, r1
     bd0:	81 f7       	brne	.-32     	; 0xbb2 <rf_polling_rx_packet+0x202>
     bd2:	40 9a       	sbi	0x08, 0	; 8

		        if(frameControlField & RF_SEC_BM)
     bd4:	8a 81       	ldd	r24, Y+2	; 0x02
     bd6:	83 ff       	sbrs	r24, 3
     bd8:	56 c0       	rjmp	.+172    	; 0xc86 <rf_polling_rx_packet+0x2d6>
			{
				uint8_t n;
				// READ rx_ctr and set it
				FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rx_ctr, 4);
     bda:	40 98       	cbi	0x08, 0	; 8
     bdc:	8f e7       	ldi	r24, 0x7F	; 127
     bde:	8e bd       	out	0x2e, r24	; 46
     be0:	0d b4       	in	r0, 0x2d	; 45
     be2:	07 fe       	sbrs	r0, 7
     be4:	fd cf       	rjmp	.-6      	; 0xbe0 <rf_polling_rx_packet+0x230>
     be6:	e5 ea       	ldi	r30, 0xA5	; 165
     be8:	f4 e0       	ldi	r31, 0x04	; 4
     bea:	1e bc       	out	0x2e, r1	; 46
     bec:	0d b4       	in	r0, 0x2d	; 45
     bee:	07 fe       	sbrs	r0, 7
     bf0:	fd cf       	rjmp	.-6      	; 0xbec <rf_polling_rx_packet+0x23c>
     bf2:	8e b5       	in	r24, 0x2e	; 46
     bf4:	81 93       	st	Z+, r24
     bf6:	84 e0       	ldi	r24, 0x04	; 4
     bf8:	e9 3a       	cpi	r30, 0xA9	; 169
     bfa:	f8 07       	cpc	r31, r24
     bfc:	b1 f7       	brne	.-20     	; 0xbea <rf_polling_rx_packet+0x23a>
     bfe:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[0],(CC2420RAM_RXNONCE+9),2,n); 
     c00:	40 98       	cbi	0x08, 0	; 8
     c02:	89 e9       	ldi	r24, 0x99	; 153
     c04:	8e bd       	out	0x2e, r24	; 46
     c06:	0d b4       	in	r0, 0x2d	; 45
     c08:	07 fe       	sbrs	r0, 7
     c0a:	fd cf       	rjmp	.-6      	; 0xc06 <rf_polling_rx_packet+0x256>
     c0c:	80 e8       	ldi	r24, 0x80	; 128
     c0e:	8e bd       	out	0x2e, r24	; 46
     c10:	0d b4       	in	r0, 0x2d	; 45
     c12:	07 fe       	sbrs	r0, 7
     c14:	fd cf       	rjmp	.-6      	; 0xc10 <rf_polling_rx_packet+0x260>
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	81 50       	subi	r24, 0x01	; 1
     c1a:	e8 2f       	mov	r30, r24
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	eb 55       	subi	r30, 0x5B	; 91
     c20:	fb 4f       	sbci	r31, 0xFB	; 251
     c22:	90 81       	ld	r25, Z
     c24:	9e bd       	out	0x2e, r25	; 46
     c26:	0d b4       	in	r0, 0x2d	; 45
     c28:	07 fe       	sbrs	r0, 7
     c2a:	fd cf       	rjmp	.-6      	; 0xc26 <rf_polling_rx_packet+0x276>
     c2c:	88 23       	and	r24, r24
     c2e:	a1 f7       	brne	.-24     	; 0xc18 <rf_polling_rx_packet+0x268>
     c30:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[2],(CC2420RAM_RXNONCE+11),2,n); 
     c32:	40 98       	cbi	0x08, 0	; 8
     c34:	8b e9       	ldi	r24, 0x9B	; 155
     c36:	8e bd       	out	0x2e, r24	; 46
     c38:	0d b4       	in	r0, 0x2d	; 45
     c3a:	07 fe       	sbrs	r0, 7
     c3c:	fd cf       	rjmp	.-6      	; 0xc38 <rf_polling_rx_packet+0x288>
     c3e:	80 e8       	ldi	r24, 0x80	; 128
     c40:	8e bd       	out	0x2e, r24	; 46
     c42:	0d b4       	in	r0, 0x2d	; 45
     c44:	07 fe       	sbrs	r0, 7
     c46:	fd cf       	rjmp	.-6      	; 0xc42 <rf_polling_rx_packet+0x292>
     c48:	82 e0       	ldi	r24, 0x02	; 2
     c4a:	81 50       	subi	r24, 0x01	; 1
     c4c:	e8 2f       	mov	r30, r24
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	e9 55       	subi	r30, 0x59	; 89
     c52:	fb 4f       	sbci	r31, 0xFB	; 251
     c54:	90 81       	ld	r25, Z
     c56:	9e bd       	out	0x2e, r25	; 46
     c58:	0d b4       	in	r0, 0x2d	; 45
     c5a:	07 fe       	sbrs	r0, 7
     c5c:	fd cf       	rjmp	.-6      	; 0xc58 <rf_polling_rx_packet+0x2a8>
     c5e:	88 23       	and	r24, r24
     c60:	a1 f7       	brne	.-24     	; 0xc4a <rf_polling_rx_packet+0x29a>
     c62:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_STROBE(CC2420_SRXDEC);  // if packet is encrypted then decrypt 
     c64:	40 98       	cbi	0x08, 0	; 8
     c66:	8c e0       	ldi	r24, 0x0C	; 12
     c68:	8e bd       	out	0x2e, r24	; 46
     c6a:	0d b4       	in	r0, 0x2d	; 45
     c6c:	07 fe       	sbrs	r0, 7
     c6e:	fd cf       	rjmp	.-6      	; 0xc6a <rf_polling_rx_packet+0x2ba>
     c70:	40 9a       	sbi	0x08, 0	; 8
				last_pkt_encrypted=1;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	80 93 ba 04 	sts	0x04BA, r24
        			rfSettings.pRxInfo->length -= 4;
     c78:	e0 91 ae 04 	lds	r30, 0x04AE
     c7c:	f0 91 af 04 	lds	r31, 0x04AF
     c80:	83 81       	ldd	r24, Z+3	; 0x03
     c82:	84 50       	subi	r24, 0x04	; 4
     c84:	83 83       	std	Z+3, r24	; 0x03
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
     c86:	40 98       	cbi	0x08, 0	; 8
     c88:	8f e7       	ldi	r24, 0x7F	; 127
     c8a:	8e bd       	out	0x2e, r24	; 46
     c8c:	0d b4       	in	r0, 0x2d	; 45
     c8e:	07 fe       	sbrs	r0, 7
     c90:	fd cf       	rjmp	.-6      	; 0xc8c <rf_polling_rx_packet+0x2dc>
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	10 c0       	rjmp	.+32     	; 0xcb6 <rf_polling_rx_packet+0x306>
     c96:	1e bc       	out	0x2e, r1	; 46
     c98:	0d b4       	in	r0, 0x2d	; 45
     c9a:	07 fe       	sbrs	r0, 7
     c9c:	fd cf       	rjmp	.-6      	; 0xc98 <rf_polling_rx_packet+0x2e8>
     c9e:	e0 91 ae 04 	lds	r30, 0x04AE
     ca2:	f0 91 af 04 	lds	r31, 0x04AF
     ca6:	9e b5       	in	r25, 0x2e	; 46
     ca8:	05 80       	ldd	r0, Z+5	; 0x05
     caa:	f6 81       	ldd	r31, Z+6	; 0x06
     cac:	e0 2d       	mov	r30, r0
     cae:	e8 0f       	add	r30, r24
     cb0:	f1 1d       	adc	r31, r1
     cb2:	90 83       	st	Z, r25
     cb4:	8f 5f       	subi	r24, 0xFF	; 255
     cb6:	e0 91 ae 04 	lds	r30, 0x04AE
     cba:	f0 91 af 04 	lds	r31, 0x04AF
     cbe:	48 2f       	mov	r20, r24
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	23 81       	ldd	r18, Z+3	; 0x03
     cc4:	33 27       	eor	r19, r19
     cc6:	27 fd       	sbrc	r18, 7
     cc8:	30 95       	com	r19
     cca:	42 17       	cp	r20, r18
     ccc:	53 07       	cpc	r21, r19
     cce:	1c f3       	brlt	.-58     	; 0xc96 <rf_polling_rx_packet+0x2e6>
     cd0:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
     cd2:	40 98       	cbi	0x08, 0	; 8
     cd4:	8f e7       	ldi	r24, 0x7F	; 127
     cd6:	8e bd       	out	0x2e, r24	; 46
     cd8:	0d b4       	in	r0, 0x2d	; 45
     cda:	07 fe       	sbrs	r0, 7
     cdc:	fd cf       	rjmp	.-6      	; 0xcd8 <rf_polling_rx_packet+0x328>
     cde:	1e bc       	out	0x2e, r1	; 46
     ce0:	0d b4       	in	r0, 0x2d	; 45
     ce2:	07 fe       	sbrs	r0, 7
     ce4:	fd cf       	rjmp	.-6      	; 0xce0 <rf_polling_rx_packet+0x330>
     ce6:	8e b5       	in	r24, 0x2e	; 46
     ce8:	40 9a       	sbi	0x08, 0	; 8

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
     cea:	40 98       	cbi	0x08, 0	; 8
     cec:	9f e7       	ldi	r25, 0x7F	; 127
     cee:	9e bd       	out	0x2e, r25	; 46
     cf0:	0d b4       	in	r0, 0x2d	; 45
     cf2:	07 fe       	sbrs	r0, 7
     cf4:	fd cf       	rjmp	.-6      	; 0xcf0 <rf_polling_rx_packet+0x340>
        			rfSettings.pRxInfo->length -= 4;
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
     cf6:	89 83       	std	Y+1, r24	; 0x01
     cf8:	fe 01       	movw	r30, r28
     cfa:	34 96       	adiw	r30, 0x04	; 4
{
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet(bool ack,uint8_t len)
     cfc:	ce 01       	movw	r24, r28
     cfe:	06 96       	adiw	r24, 0x06	; 6
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
     d00:	1e bc       	out	0x2e, r1	; 46
     d02:	0d b4       	in	r0, 0x2d	; 45
     d04:	07 fe       	sbrs	r0, 7
     d06:	fd cf       	rjmp	.-6      	; 0xd02 <rf_polling_rx_packet+0x352>
     d08:	2e b5       	in	r18, 0x2e	; 46
     d0a:	21 93       	st	Z+, r18
     d0c:	e8 17       	cp	r30, r24
     d0e:	f9 07       	cpc	r31, r25
     d10:	b9 f7       	brne	.-18     	; 0xd00 <rf_polling_rx_packet+0x350>
     d12:	40 9a       	sbi	0x08, 0	; 8
			rfSettings.pRxInfo->rssi = pFooter[0];
     d14:	e0 91 ae 04 	lds	r30, 0x04AE
     d18:	f0 91 af 04 	lds	r31, 0x04AF
     d1c:	8c 81       	ldd	r24, Y+4	; 0x04
     d1e:	80 87       	std	Z+8, r24	; 0x08
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	80 e0       	ldi	r24, 0x00	; 0
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
     d24:	0c c0       	rjmp	.+24     	; 0xd3e <rf_polling_rx_packet+0x38e>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
     d26:	e0 91 ae 04 	lds	r30, 0x04AE
     d2a:	f0 91 af 04 	lds	r31, 0x04AF
     d2e:	05 80       	ldd	r0, Z+5	; 0x05
     d30:	f6 81       	ldd	r31, Z+6	; 0x06
     d32:	e0 2d       	mov	r30, r0
     d34:	e2 0f       	add	r30, r18
     d36:	f3 1f       	adc	r31, r19
     d38:	20 81       	ld	r18, Z
     d3a:	82 0f       	add	r24, r18

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
			rfSettings.pRxInfo->rssi = pFooter[0];
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
     d3c:	9f 5f       	subi	r25, 0xFF	; 255
     d3e:	e0 91 ae 04 	lds	r30, 0x04AE
     d42:	f0 91 af 04 	lds	r31, 0x04AF
     d46:	29 2f       	mov	r18, r25
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	43 81       	ldd	r20, Z+3	; 0x03
     d4c:	55 27       	eor	r21, r21
     d4e:	47 fd       	sbrc	r20, 7
     d50:	50 95       	com	r21
     d52:	24 17       	cp	r18, r20
     d54:	35 07       	cpc	r19, r21
     d56:	3c f3       	brlt	.-50     	; 0xd26 <rf_polling_rx_packet+0x376>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
				//printf( "%d ", rfSettings.pRxInfo->pPayload[i]);
			}

			if(checksum!=rx_checksum) {
     d58:	99 81       	ldd	r25, Y+1	; 0x01
     d5a:	89 17       	cp	r24, r25
     d5c:	e1 f0       	breq	.+56     	; 0xd96 <rf_polling_rx_packet+0x3e6>
				//printf( "Checksum failed %d %d\r",rx_checksum, checksum );
	    			// always read 1 byte before flush (data sheet pg 62)
	   			FASTSPI_READ_FIFO_BYTE(tmp);  
     d5e:	40 98       	cbi	0x08, 0	; 8
     d60:	8f e7       	ldi	r24, 0x7F	; 127
     d62:	8e bd       	out	0x2e, r24	; 46
     d64:	0d b4       	in	r0, 0x2d	; 45
     d66:	07 fe       	sbrs	r0, 7
     d68:	fd cf       	rjmp	.-6      	; 0xd64 <rf_polling_rx_packet+0x3b4>
     d6a:	1e bc       	out	0x2e, r1	; 46
     d6c:	0d b4       	in	r0, 0x2d	; 45
     d6e:	07 fe       	sbrs	r0, 7
     d70:	fd cf       	rjmp	.-6      	; 0xd6c <rf_polling_rx_packet+0x3bc>
     d72:	8e b5       	in	r24, 0x2e	; 46
     d74:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
     d76:	40 98       	cbi	0x08, 0	; 8
     d78:	88 e0       	ldi	r24, 0x08	; 8
     d7a:	8e bd       	out	0x2e, r24	; 46
     d7c:	0d b4       	in	r0, 0x2d	; 45
     d7e:	07 fe       	sbrs	r0, 7
     d80:	fd cf       	rjmp	.-6      	; 0xd7c <rf_polling_rx_packet+0x3cc>
     d82:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
     d84:	40 98       	cbi	0x08, 0	; 8
     d86:	88 e0       	ldi	r24, 0x08	; 8
     d88:	8e bd       	out	0x2e, r24	; 46
     d8a:	0d b4       	in	r0, 0x2d	; 45
     d8c:	07 fe       	sbrs	r0, 7
     d8e:	fd cf       	rjmp	.-6      	; 0xd8a <rf_polling_rx_packet+0x3da>
     d90:	40 9a       	sbi	0x08, 0	; 8
     d92:	8c ef       	ldi	r24, 0xFC	; 252
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
#endif
				return -4;
     d94:	25 c0       	rjmp	.+74     	; 0xde0 <rf_polling_rx_packet+0x430>
			}	
			if (pFooter[1] & RF_CRC_OK_BM) {
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	87 ff       	sbrs	r24, 7
     d9a:	07 c0       	rjmp	.+14     	; 0xdaa <rf_polling_rx_packet+0x3fa>
				//rfSettings.pRxInfo = rf_rx_callback(rfSettings.pRxInfo);
				rx_ready++;
     d9c:	80 91 bf 04 	lds	r24, 0x04BF
     da0:	8f 5f       	subi	r24, 0xFF	; 255
     da2:	80 93 bf 04 	sts	0x04BF, r24
     da6:	81 e0       	ldi	r24, 0x01	; 1
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
#endif
				return 1;
     da8:	1b c0       	rjmp	.+54     	; 0xde0 <rf_polling_rx_packet+0x430>
			} else
	    		{
	    		// always read 1 byte before flush (data sheet pg 62)
	   		FASTSPI_READ_FIFO_BYTE(tmp);  
     daa:	40 98       	cbi	0x08, 0	; 8
     dac:	8f e7       	ldi	r24, 0x7F	; 127
     dae:	8e bd       	out	0x2e, r24	; 46
     db0:	0d b4       	in	r0, 0x2d	; 45
     db2:	07 fe       	sbrs	r0, 7
     db4:	fd cf       	rjmp	.-6      	; 0xdb0 <rf_polling_rx_packet+0x400>
     db6:	1e bc       	out	0x2e, r1	; 46
     db8:	0d b4       	in	r0, 0x2d	; 45
     dba:	07 fe       	sbrs	r0, 7
     dbc:	fd cf       	rjmp	.-6      	; 0xdb8 <rf_polling_rx_packet+0x408>
     dbe:	8e b5       	in	r24, 0x2e	; 46
     dc0:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_STROBE(CC2420_SFLUSHRX);
     dc2:	40 98       	cbi	0x08, 0	; 8
     dc4:	88 e0       	ldi	r24, 0x08	; 8
     dc6:	8e bd       	out	0x2e, r24	; 46
     dc8:	0d b4       	in	r0, 0x2d	; 45
     dca:	07 fe       	sbrs	r0, 7
     dcc:	fd cf       	rjmp	.-6      	; 0xdc8 <rf_polling_rx_packet+0x418>
     dce:	40 9a       	sbi	0x08, 0	; 8
	    		FASTSPI_STROBE(CC2420_SFLUSHRX);
     dd0:	40 98       	cbi	0x08, 0	; 8
     dd2:	88 e0       	ldi	r24, 0x08	; 8
     dd4:	8e bd       	out	0x2e, r24	; 46
     dd6:	0d b4       	in	r0, 0x2d	; 45
     dd8:	07 fe       	sbrs	r0, 7
     dda:	fd cf       	rjmp	.-6      	; 0xdd6 <rf_polling_rx_packet+0x426>
     ddc:	40 9a       	sbi	0x08, 0	; 8
     dde:	8b ef       	ldi	r24, 0xFB	; 251
    }
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
return 0;
}
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <rf_rx_packet>:

int8_t rf_rx_packet()
{
int8_t tmp;
if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
     df0:	80 91 bf 04 	lds	r24, 0x04BF
     df4:	88 23       	and	r24, r24
     df6:	21 f0       	breq	.+8      	; 0xe00 <rf_rx_packet+0x10>
     df8:	80 91 bf 04 	lds	r24, 0x04BF
     dfc:	10 92 bf 04 	sts	0x04BF, r1
return 0;
}
     e00:	08 95       	ret

00000e02 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
        FASTSPI_STROBE(CC2420_SFLUSHRX);
     e02:	40 98       	cbi	0x08, 0	; 8
     e04:	88 e0       	ldi	r24, 0x08	; 8
     e06:	8e bd       	out	0x2e, r24	; 46
     e08:	0d b4       	in	r0, 0x2d	; 45
     e0a:	07 fe       	sbrs	r0, 7
     e0c:	fd cf       	rjmp	.-6      	; 0xe08 <rf_flush_rx_fifo+0x6>
     e0e:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_STROBE(CC2420_SFLUSHRX);
     e10:	40 98       	cbi	0x08, 0	; 8
     e12:	88 e0       	ldi	r24, 0x08	; 8
     e14:	8e bd       	out	0x2e, r24	; 46
     e16:	0d b4       	in	r0, 0x2d	; 45
     e18:	07 fe       	sbrs	r0, 7
     e1a:	fd cf       	rjmp	.-6      	; 0xe16 <rf_flush_rx_fifo+0x14>
     e1c:	40 9a       	sbi	0x08, 0	; 8
}
     e1e:	08 95       	ret

00000e20 <rf_set_cca_thresh>:
uint16_t val;
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif

val=(t<<8) | 0x80;
     e20:	99 27       	eor	r25, r25
     e22:	87 fd       	sbrc	r24, 7
     e24:	90 95       	com	r25
     e26:	98 2f       	mov	r25, r24
     e28:	88 27       	eor	r24, r24
     e2a:	80 68       	ori	r24, 0x80	; 128
FASTSPI_SETREG(CC2420_RSSI, val); 
     e2c:	40 98       	cbi	0x08, 0	; 8
     e2e:	23 e1       	ldi	r18, 0x13	; 19
     e30:	2e bd       	out	0x2e, r18	; 46
     e32:	0d b4       	in	r0, 0x2d	; 45
     e34:	07 fe       	sbrs	r0, 7
     e36:	fd cf       	rjmp	.-6      	; 0xe32 <rf_set_cca_thresh+0x12>
     e38:	9e bd       	out	0x2e, r25	; 46
     e3a:	0d b4       	in	r0, 0x2d	; 45
     e3c:	07 fe       	sbrs	r0, 7
     e3e:	fd cf       	rjmp	.-6      	; 0xe3a <rf_set_cca_thresh+0x1a>
     e40:	8e bd       	out	0x2e, r24	; 46
     e42:	0d b4       	in	r0, 0x2d	; 45
     e44:	07 fe       	sbrs	r0, 7
     e46:	fd cf       	rjmp	.-6      	; 0xe42 <rf_set_cca_thresh+0x22>
     e48:	40 9a       	sbi	0x08, 0	; 8

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
     e4a:	08 95       	ret

00000e4c <rf_test_mode>:
{

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
     e4c:	40 98       	cbi	0x08, 0	; 8
     e4e:	86 e0       	ldi	r24, 0x06	; 6
     e50:	8e bd       	out	0x2e, r24	; 46
     e52:	0d b4       	in	r0, 0x2d	; 45
     e54:	07 fe       	sbrs	r0, 7
     e56:	fd cf       	rjmp	.-6      	; 0xe52 <rf_test_mode+0x6>
     e58:	40 9a       	sbi	0x08, 0	; 8
	// RF studio" uses TX_MODE=3 (CC2420_MDMCTRL1=0x050C)
	// to send an unmodulated carrier; data sheet says TX_MODE 
	// can be 2 or 3. So it should not matter...
	// HOWEVER, using (TX_MODE=3) sometimes causes problems when 
	// going back to "data" mode!
	FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0508); // MDMCTRL1 with TX_MODE=2
     e5a:	40 98       	cbi	0x08, 0	; 8
     e5c:	82 e1       	ldi	r24, 0x12	; 18
     e5e:	8e bd       	out	0x2e, r24	; 46
     e60:	0d b4       	in	r0, 0x2d	; 45
     e62:	07 fe       	sbrs	r0, 7
     e64:	fd cf       	rjmp	.-6      	; 0xe60 <rf_test_mode+0x14>
     e66:	85 e0       	ldi	r24, 0x05	; 5
     e68:	8e bd       	out	0x2e, r24	; 46
     e6a:	0d b4       	in	r0, 0x2d	; 45
     e6c:	07 fe       	sbrs	r0, 7
     e6e:	fd cf       	rjmp	.-6      	; 0xe6a <rf_test_mode+0x1e>
     e70:	88 e0       	ldi	r24, 0x08	; 8
     e72:	8e bd       	out	0x2e, r24	; 46
     e74:	0d b4       	in	r0, 0x2d	; 45
     e76:	07 fe       	sbrs	r0, 7
     e78:	fd cf       	rjmp	.-6      	; 0xe74 <rf_test_mode+0x28>
     e7a:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_SETREG(CC2420_DACTST, 0x1800); // send unmodulated carrier
     e7c:	40 98       	cbi	0x08, 0	; 8
     e7e:	8e e2       	ldi	r24, 0x2E	; 46
     e80:	8e bd       	out	0x2e, r24	; 46
     e82:	0d b4       	in	r0, 0x2d	; 45
     e84:	07 fe       	sbrs	r0, 7
     e86:	fd cf       	rjmp	.-6      	; 0xe82 <rf_test_mode+0x36>
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	8e bd       	out	0x2e, r24	; 46
     e8c:	0d b4       	in	r0, 0x2d	; 45
     e8e:	07 fe       	sbrs	r0, 7
     e90:	fd cf       	rjmp	.-6      	; 0xe8c <rf_test_mode+0x40>
     e92:	1e bc       	out	0x2e, r1	; 46
     e94:	0d b4       	in	r0, 0x2d	; 45
     e96:	07 fe       	sbrs	r0, 7
     e98:	fd cf       	rjmp	.-6      	; 0xe94 <rf_test_mode+0x48>
     e9a:	40 9a       	sbi	0x08, 0	; 8
	rf_flush_rx_fifo();
     e9c:	0e 94 01 07 	call	0xe02	; 0xe02 <rf_flush_rx_fifo>

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
     ea0:	08 95       	ret

00000ea2 <rf_data_mode>:
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode() {
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
     ea2:	40 98       	cbi	0x08, 0	; 8
     ea4:	86 e0       	ldi	r24, 0x06	; 6
     ea6:	8e bd       	out	0x2e, r24	; 46
     ea8:	0d b4       	in	r0, 0x2d	; 45
     eaa:	07 fe       	sbrs	r0, 7
     eac:	fd cf       	rjmp	.-6      	; 0xea8 <rf_data_mode+0x6>
     eae:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // default MDMCTRL1 value
     eb0:	40 98       	cbi	0x08, 0	; 8
     eb2:	82 e1       	ldi	r24, 0x12	; 18
     eb4:	8e bd       	out	0x2e, r24	; 46
     eb6:	0d b4       	in	r0, 0x2d	; 45
     eb8:	07 fe       	sbrs	r0, 7
     eba:	fd cf       	rjmp	.-6      	; 0xeb6 <rf_data_mode+0x14>
     ebc:	85 e0       	ldi	r24, 0x05	; 5
     ebe:	8e bd       	out	0x2e, r24	; 46
     ec0:	0d b4       	in	r0, 0x2d	; 45
     ec2:	07 fe       	sbrs	r0, 7
     ec4:	fd cf       	rjmp	.-6      	; 0xec0 <rf_data_mode+0x1e>
     ec6:	1e bc       	out	0x2e, r1	; 46
     ec8:	0d b4       	in	r0, 0x2d	; 45
     eca:	07 fe       	sbrs	r0, 7
     ecc:	fd cf       	rjmp	.-6      	; 0xec8 <rf_data_mode+0x26>
     ece:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_DACTST, 0); // default value
     ed0:	40 98       	cbi	0x08, 0	; 8
     ed2:	8e e2       	ldi	r24, 0x2E	; 46
     ed4:	8e bd       	out	0x2e, r24	; 46
     ed6:	0d b4       	in	r0, 0x2d	; 45
     ed8:	07 fe       	sbrs	r0, 7
     eda:	fd cf       	rjmp	.-6      	; 0xed6 <rf_data_mode+0x34>
     edc:	1e bc       	out	0x2e, r1	; 46
     ede:	0d b4       	in	r0, 0x2d	; 45
     ee0:	07 fe       	sbrs	r0, 7
     ee2:	fd cf       	rjmp	.-6      	; 0xede <rf_data_mode+0x3c>
     ee4:	1e bc       	out	0x2e, r1	; 46
     ee6:	0d b4       	in	r0, 0x2d	; 45
     ee8:	07 fe       	sbrs	r0, 7
     eea:	fd cf       	rjmp	.-6      	; 0xee6 <rf_data_mode+0x44>
     eec:	40 9a       	sbi	0x08, 0	; 8
        rf_flush_rx_fifo();
     eee:	0e 94 01 07 	call	0xe02	; 0xe02 <rf_flush_rx_fifo>
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
     ef2:	08 95       	ret

00000ef4 <rf_carrier_on>:
void rf_carrier_on()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif
        FASTSPI_STROBE(CC2420_STXON); // tell radio to start sending
     ef4:	40 98       	cbi	0x08, 0	; 8
     ef6:	84 e0       	ldi	r24, 0x04	; 4
     ef8:	8e bd       	out	0x2e, r24	; 46
     efa:	0d b4       	in	r0, 0x2d	; 45
     efc:	07 fe       	sbrs	r0, 7
     efe:	fd cf       	rjmp	.-6      	; 0xefa <rf_carrier_on+0x6>
     f00:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
     f02:	08 95       	ret

00000f04 <rf_carrier_off>:
void rf_carrier_off()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); // stop radio
     f04:	40 98       	cbi	0x08, 0	; 8
     f06:	86 e0       	ldi	r24, 0x06	; 6
     f08:	8e bd       	out	0x2e, r24	; 46
     f0a:	0d b4       	in	r0, 0x2d	; 45
     f0c:	07 fe       	sbrs	r0, 7
     f0e:	fd cf       	rjmp	.-6      	; 0xf0a <rf_carrier_off+0x6>
     f10:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
     f12:	08 95       	ret

00000f14 <rf_tx_packet>:
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
     f14:	ff 92       	push	r15
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <rf_tx_packet+0xc>
     f20:	00 d0       	rcall	.+0      	; 0xf22 <rf_tx_packet+0xe>
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	fc 01       	movw	r30, r24
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif

if(security_enable)
     f28:	80 91 ab 04 	lds	r24, 0x04AB
     f2c:	88 23       	and	r24, r24
     f2e:	39 f0       	breq	.+14     	; 0xf3e <rf_tx_packet+0x2a>
    FASTSPI_STROBE(CC2420_STXENC);
     f30:	40 98       	cbi	0x08, 0	; 8
     f32:	9d e0       	ldi	r25, 0x0D	; 13
     f34:	9e bd       	out	0x2e, r25	; 46
     f36:	0d b4       	in	r0, 0x2d	; 45
     f38:	07 fe       	sbrs	r0, 7
     f3a:	fd cf       	rjmp	.-6      	; 0xf36 <rf_tx_packet+0x22>
     f3c:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
     f3e:	1a 82       	std	Y+2, r1	; 0x02
    for(i=0; i<pRTI->length; i++ )
     f40:	92 81       	ldd	r25, Z+2	; 0x02
     f42:	49 2f       	mov	r20, r25
     f44:	55 27       	eor	r21, r21
     f46:	47 fd       	sbrc	r20, 7
     f48:	50 95       	com	r21
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	09 c0       	rjmp	.+18     	; 0xf60 <rf_tx_packet+0x4c>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
     f4e:	a3 81       	ldd	r26, Z+3	; 0x03
     f50:	b4 81       	ldd	r27, Z+4	; 0x04
     f52:	a6 0f       	add	r26, r22
     f54:	b7 1f       	adc	r27, r23
     f56:	3a 81       	ldd	r19, Y+2	; 0x02
     f58:	6c 91       	ld	r22, X
     f5a:	36 0f       	add	r19, r22
     f5c:	3a 83       	std	Y+2, r19	; 0x02

if(security_enable)
    FASTSPI_STROBE(CC2420_STXENC);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
     f5e:	2f 5f       	subi	r18, 0xFF	; 255
     f60:	62 2f       	mov	r22, r18
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	64 17       	cp	r22, r20
     f66:	75 07       	cpc	r23, r21
     f68:	94 f3       	brlt	.-28     	; 0xf4e <rf_tx_packet+0x3a>
    }
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)

    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a slighly higher later since they assume TDMA
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
     f6a:	29 2f       	mov	r18, r25
     f6c:	24 5f       	subi	r18, 0xF4	; 244
     f6e:	29 83       	std	Y+1, r18	; 0x01
    if(security_enable) packetLength+=4;  // for CTR counter
     f70:	88 23       	and	r24, r24
     f72:	11 f0       	breq	.+4      	; 0xf78 <rf_tx_packet+0x64>
     f74:	90 5f       	subi	r25, 0xF0	; 240
     f76:	99 83       	std	Y+1, r25	; 0x01

   	// XXX 2 below are hacks...
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
    // Wait until the transceiver is idle
    while (FIFOP_IS_1 || SFD_IS_1);
     f78:	67 99       	sbic	0x0c, 7	; 12
     f7a:	fe cf       	rjmp	.-4      	; 0xf78 <rf_tx_packet+0x64>
     f7c:	4e 99       	sbic	0x09, 6	; 9
     f7e:	fc cf       	rjmp	.-8      	; 0xf78 <rf_tx_packet+0x64>
    // Turn off global interrupts to avoid interference on the SPI interface
    DISABLE_GLOBAL_INT();
     f80:	f8 94       	cli
	// Flush the TX FIFO just in case...
    FASTSPI_STROBE(CC2420_SFLUSHTX);
     f82:	40 98       	cbi	0x08, 0	; 8
     f84:	99 e0       	ldi	r25, 0x09	; 9
     f86:	9e bd       	out	0x2e, r25	; 46
     f88:	0d b4       	in	r0, 0x2d	; 45
     f8a:	07 fe       	sbrs	r0, 7
     f8c:	fd cf       	rjmp	.-6      	; 0xf88 <rf_tx_packet+0x74>
     f8e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHTX);
     f90:	40 98       	cbi	0x08, 0	; 8
     f92:	99 e0       	ldi	r25, 0x09	; 9
     f94:	9e bd       	out	0x2e, r25	; 46
     f96:	0d b4       	in	r0, 0x2d	; 45
     f98:	07 fe       	sbrs	r0, 7
     f9a:	fd cf       	rjmp	.-6      	; 0xf96 <rf_tx_packet+0x82>
     f9c:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/

    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
     f9e:	40 98       	cbi	0x08, 0	; 8
     fa0:	9e e3       	ldi	r25, 0x3E	; 62
     fa2:	9e bd       	out	0x2e, r25	; 46
     fa4:	0d b4       	in	r0, 0x2d	; 45
     fa6:	07 fe       	sbrs	r0, 7
     fa8:	fd cf       	rjmp	.-6      	; 0xfa4 <rf_tx_packet+0x90>
     faa:	99 81       	ldd	r25, Y+1	; 0x01
     fac:	9e bd       	out	0x2e, r25	; 46
     fae:	0d b4       	in	r0, 0x2d	; 45
     fb0:	07 fe       	sbrs	r0, 7
     fb2:	fd cf       	rjmp	.-6      	; 0xfae <rf_tx_packet+0x9a>
     fb4:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = RF_FCF_NOACK;   // default
     fb6:	21 e4       	ldi	r18, 0x41	; 65
     fb8:	38 e8       	ldi	r19, 0x88	; 136
     fba:	3c 83       	std	Y+4, r19	; 0x04
     fbc:	2b 83       	std	Y+3, r18	; 0x03
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
     fbe:	90 91 b9 04 	lds	r25, 0x04B9
     fc2:	99 23       	and	r25, r25
     fc4:	21 f0       	breq	.+8      	; 0xfce <rf_tx_packet+0xba>
     fc6:	21 e6       	ldi	r18, 0x61	; 97
     fc8:	38 e8       	ldi	r19, 0x88	; 136
     fca:	3c 83       	std	Y+4, r19	; 0x04
     fcc:	2b 83       	std	Y+3, r18	; 0x03
    if(security_enable) frameControlField |= RF_SEC_BM;
     fce:	88 23       	and	r24, r24
     fd0:	29 f0       	breq	.+10     	; 0xfdc <rf_tx_packet+0xc8>
     fd2:	2b 81       	ldd	r18, Y+3	; 0x03
     fd4:	3c 81       	ldd	r19, Y+4	; 0x04
     fd6:	28 60       	ori	r18, 0x08	; 8
     fd8:	3c 83       	std	Y+4, r19	; 0x04
     fda:	2b 83       	std	Y+3, r18	; 0x03
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
     fdc:	40 98       	cbi	0x08, 0	; 8
     fde:	9e e3       	ldi	r25, 0x3E	; 62
     fe0:	9e bd       	out	0x2e, r25	; 46
     fe2:	0d b4       	in	r0, 0x2d	; 45
     fe4:	07 fe       	sbrs	r0, 7
     fe6:	fd cf       	rjmp	.-6      	; 0xfe2 <rf_tx_packet+0xce>
     fe8:	de 01       	movw	r26, r28
     fea:	13 96       	adiw	r26, 0x03	; 3
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
     fec:	9e 01       	movw	r18, r28
     fee:	2b 5f       	subi	r18, 0xFB	; 251
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255

    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = RF_FCF_NOACK;   // default
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    if(security_enable) frameControlField |= RF_SEC_BM;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
     ff2:	9c 91       	ld	r25, X
     ff4:	9e bd       	out	0x2e, r25	; 46
     ff6:	0d b4       	in	r0, 0x2d	; 45
     ff8:	07 fe       	sbrs	r0, 7
     ffa:	fd cf       	rjmp	.-6      	; 0xff6 <rf_tx_packet+0xe2>
     ffc:	11 96       	adiw	r26, 0x01	; 1
     ffe:	a2 17       	cp	r26, r18
    1000:	b3 07       	cpc	r27, r19
    1002:	b9 f7       	brne	.-18     	; 0xff2 <rf_tx_packet+0xde>
    1004:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    1006:	40 98       	cbi	0x08, 0	; 8
    1008:	9e e3       	ldi	r25, 0x3E	; 62
    100a:	9e bd       	out	0x2e, r25	; 46
    100c:	0d b4       	in	r0, 0x2d	; 45
    100e:	07 fe       	sbrs	r0, 7
    1010:	fd cf       	rjmp	.-6      	; 0x100c <rf_tx_packet+0xf8>
    1012:	90 91 b0 04 	lds	r25, 0x04B0
    1016:	9e bd       	out	0x2e, r25	; 46
    1018:	0d b4       	in	r0, 0x2d	; 45
    101a:	07 fe       	sbrs	r0, 7
    101c:	fd cf       	rjmp	.-6      	; 0x1018 <rf_tx_packet+0x104>
    101e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    1020:	40 98       	cbi	0x08, 0	; 8
    1022:	9e e3       	ldi	r25, 0x3E	; 62
    1024:	9e bd       	out	0x2e, r25	; 46
    1026:	0d b4       	in	r0, 0x2d	; 45
    1028:	07 fe       	sbrs	r0, 7
    102a:	fd cf       	rjmp	.-6      	; 0x1026 <rf_tx_packet+0x112>
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	d9 01       	movw	r26, r18
    1032:	a2 55       	subi	r26, 0x52	; 82
    1034:	bb 4f       	sbci	r27, 0xFB	; 251
    1036:	14 96       	adiw	r26, 0x04	; 4
    1038:	9c 91       	ld	r25, X
    103a:	14 97       	sbiw	r26, 0x04	; 4
    103c:	9e bd       	out	0x2e, r25	; 46
    103e:	0d b4       	in	r0, 0x2d	; 45
    1040:	07 fe       	sbrs	r0, 7
    1042:	fd cf       	rjmp	.-6      	; 0x103e <rf_tx_packet+0x12a>
    1044:	2f 5f       	subi	r18, 0xFF	; 255
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	22 30       	cpi	r18, 0x02	; 2
    104a:	31 05       	cpc	r19, r1
    104c:	89 f7       	brne	.-30     	; 0x1030 <rf_tx_packet+0x11c>
    104e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    1050:	40 98       	cbi	0x08, 0	; 8
    1052:	9e e3       	ldi	r25, 0x3E	; 62
    1054:	9e bd       	out	0x2e, r25	; 46
    1056:	0d b4       	in	r0, 0x2d	; 45
    1058:	07 fe       	sbrs	r0, 7
    105a:	fd cf       	rjmp	.-6      	; 0x1056 <rf_tx_packet+0x142>
    105c:	df 01       	movw	r26, r30
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    105e:	9f 01       	movw	r18, r30
    1060:	2e 5f       	subi	r18, 0xFE	; 254
    1062:	3f 4f       	sbci	r19, 0xFF	; 255
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    if(security_enable) frameControlField |= RF_SEC_BM;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    1064:	9c 91       	ld	r25, X
    1066:	9e bd       	out	0x2e, r25	; 46
    1068:	0d b4       	in	r0, 0x2d	; 45
    106a:	07 fe       	sbrs	r0, 7
    106c:	fd cf       	rjmp	.-6      	; 0x1068 <rf_tx_packet+0x154>
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	a2 17       	cp	r26, r18
    1072:	b3 07       	cpc	r27, r19
    1074:	b9 f7       	brne	.-18     	; 0x1064 <rf_tx_packet+0x150>
    1076:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    1078:	40 98       	cbi	0x08, 0	; 8
    107a:	9e e3       	ldi	r25, 0x3E	; 62
    107c:	9e bd       	out	0x2e, r25	; 46
    107e:	0d b4       	in	r0, 0x2d	; 45
    1080:	07 fe       	sbrs	r0, 7
    1082:	fd cf       	rjmp	.-6      	; 0x107e <rf_tx_packet+0x16a>
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	d9 01       	movw	r26, r18
    108a:	a2 55       	subi	r26, 0x52	; 82
    108c:	bb 4f       	sbci	r27, 0xFB	; 251
    108e:	16 96       	adiw	r26, 0x06	; 6
    1090:	9c 91       	ld	r25, X
    1092:	16 97       	sbiw	r26, 0x06	; 6
    1094:	9e bd       	out	0x2e, r25	; 46
    1096:	0d b4       	in	r0, 0x2d	; 45
    1098:	07 fe       	sbrs	r0, 7
    109a:	fd cf       	rjmp	.-6      	; 0x1096 <rf_tx_packet+0x182>
    109c:	2f 5f       	subi	r18, 0xFF	; 255
    109e:	3f 4f       	sbci	r19, 0xFF	; 255
    10a0:	22 30       	cpi	r18, 0x02	; 2
    10a2:	31 05       	cpc	r19, r1
    10a4:	89 f7       	brne	.-30     	; 0x1088 <rf_tx_packet+0x174>
    10a6:	40 9a       	sbi	0x08, 0	; 8
    if(security_enable)
    10a8:	88 23       	and	r24, r24
    10aa:	99 f0       	breq	.+38     	; 0x10d2 <rf_tx_packet+0x1be>
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
    10ac:	40 98       	cbi	0x08, 0	; 8
    10ae:	8e e3       	ldi	r24, 0x3E	; 62
    10b0:	8e bd       	out	0x2e, r24	; 46
    10b2:	0d b4       	in	r0, 0x2d	; 45
    10b4:	07 fe       	sbrs	r0, 7
    10b6:	fd cf       	rjmp	.-6      	; 0x10b2 <rf_tx_packet+0x19e>
    10b8:	ab eb       	ldi	r26, 0xBB	; 187
    10ba:	b4 e0       	ldi	r27, 0x04	; 4
    10bc:	8c 91       	ld	r24, X
    10be:	8e bd       	out	0x2e, r24	; 46
    10c0:	0d b4       	in	r0, 0x2d	; 45
    10c2:	07 fe       	sbrs	r0, 7
    10c4:	fd cf       	rjmp	.-6      	; 0x10c0 <rf_tx_packet+0x1ac>
    10c6:	11 96       	adiw	r26, 0x01	; 1
    10c8:	84 e0       	ldi	r24, 0x04	; 4
    10ca:	af 3b       	cpi	r26, 0xBF	; 191
    10cc:	b8 07       	cpc	r27, r24
    10ce:	b1 f7       	brne	.-20     	; 0x10bc <rf_tx_packet+0x1a8>
    10d0:	40 9a       	sbi	0x08, 0	; 8
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    10d2:	40 98       	cbi	0x08, 0	; 8
    10d4:	8e e3       	ldi	r24, 0x3E	; 62
    10d6:	8e bd       	out	0x2e, r24	; 46
    10d8:	0d b4       	in	r0, 0x2d	; 45
    10da:	07 fe       	sbrs	r0, 7
    10dc:	fd cf       	rjmp	.-6      	; 0x10d8 <rf_tx_packet+0x1c4>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	0a c0       	rjmp	.+20     	; 0x10f6 <rf_tx_packet+0x1e2>
    10e2:	a3 81       	ldd	r26, Z+3	; 0x03
    10e4:	b4 81       	ldd	r27, Z+4	; 0x04
    10e6:	a2 0f       	add	r26, r18
    10e8:	b3 1f       	adc	r27, r19
    10ea:	9c 91       	ld	r25, X
    10ec:	9e bd       	out	0x2e, r25	; 46
    10ee:	0d b4       	in	r0, 0x2d	; 45
    10f0:	07 fe       	sbrs	r0, 7
    10f2:	fd cf       	rjmp	.-6      	; 0x10ee <rf_tx_packet+0x1da>
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	24 17       	cp	r18, r20
    10fc:	35 07       	cpc	r19, r21
    10fe:	8c f3       	brlt	.-30     	; 0x10e2 <rf_tx_packet+0x1ce>
    1100:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    1102:	40 98       	cbi	0x08, 0	; 8
    1104:	8e e3       	ldi	r24, 0x3E	; 62
    1106:	8e bd       	out	0x2e, r24	; 46
    1108:	0d b4       	in	r0, 0x2d	; 45
    110a:	07 fe       	sbrs	r0, 7
    110c:	fd cf       	rjmp	.-6      	; 0x1108 <rf_tx_packet+0x1f4>
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	8e bd       	out	0x2e, r24	; 46
    1112:	0d b4       	in	r0, 0x2d	; 45
    1114:	07 fe       	sbrs	r0, 7
    1116:	fd cf       	rjmp	.-6      	; 0x1112 <rf_tx_packet+0x1fe>
    1118:	40 9a       	sbi	0x08, 0	; 8

if (pRTI->cca == TRUE)
    111a:	85 81       	ldd	r24, Z+5	; 0x05
    111c:	88 23       	and	r24, r24
    111e:	b1 f1       	breq	.+108    	; 0x118c <rf_tx_packet+0x278>
{
    uint8_t cnt;
     if (!rfSettings.receiveOn)
    1120:	80 91 b6 04 	lds	r24, 0x04B6
    1124:	88 23       	and	r24, r24
    1126:	39 f4       	brne	.+14     	; 0x1136 <rf_tx_packet+0x222>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    1128:	40 98       	cbi	0x08, 0	; 8
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	8e bd       	out	0x2e, r24	; 46
    112e:	0d b4       	in	r0, 0x2d	; 45
    1130:	07 fe       	sbrs	r0, 7
    1132:	fd cf       	rjmp	.-6      	; 0x112e <rf_tx_packet+0x21a>
    1134:	40 9a       	sbi	0x08, 0	; 8
	}
      
      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    1136:	40 98       	cbi	0x08, 0	; 8
    1138:	1e bc       	out	0x2e, r1	; 46
    113a:	0d b4       	in	r0, 0x2d	; 45
    113c:	07 fe       	sbrs	r0, 7
    113e:	fd cf       	rjmp	.-6      	; 0x113a <rf_tx_packet+0x226>
    1140:	8e b5       	in	r24, 0x2e	; 46
    1142:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));      
    1144:	81 ff       	sbrs	r24, 1
    1146:	f7 cf       	rjmp	.-18     	; 0x1136 <rf_tx_packet+0x222>
    1148:	10 e0       	ldi	r17, 0x00	; 0
      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    114a:	05 e0       	ldi	r16, 0x05	; 5
    114c:	40 98       	cbi	0x08, 0	; 8
    114e:	0e bd       	out	0x2e, r16	; 46
    1150:	0d b4       	in	r0, 0x2d	; 45
    1152:	07 fe       	sbrs	r0, 7
    1154:	fd cf       	rjmp	.-6      	; 0x1150 <rf_tx_packet+0x23c>
    1156:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    1158:	40 98       	cbi	0x08, 0	; 8
    115a:	1e bc       	out	0x2e, r1	; 46
    115c:	0d b4       	in	r0, 0x2d	; 45
    115e:	07 fe       	sbrs	r0, 7
    1160:	fd cf       	rjmp	.-6      	; 0x115c <rf_tx_packet+0x248>
    1162:	fe b4       	in	r15, 0x2e	; 46
    1164:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    1166:	1f 5f       	subi	r17, 0xFF	; 255
	  if (cnt > 100)
    1168:	15 36       	cpi	r17, 0x65	; 101
    116a:	49 f4       	brne	.+18     	; 0x117e <rf_tx_packet+0x26a>
	    {
	      ENABLE_GLOBAL_INT ();
    116c:	78 94       	sei
	      nrk_sem_post(radio_sem);
    116e:	80 91 a9 04 	lds	r24, 0x04A9
    1172:	90 91 aa 04 	lds	r25, 0x04AA
    1176:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <nrk_sem_post>
    117a:	80 e0       	ldi	r24, 0x00	; 0
	      return FALSE;
    117c:	48 c0       	rjmp	.+144    	; 0x120e <rf_tx_packet+0x2fa>
	    }
	  halWait (100);
    117e:	84 e6       	ldi	r24, 0x64	; 100
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 cd 10 	call	0x219a	; 0x219a <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    1186:	f3 fe       	sbrs	r15, 3
    1188:	e1 cf       	rjmp	.-62     	; 0x114c <rf_tx_packet+0x238>
    118a:	07 c0       	rjmp	.+14     	; 0x119a <rf_tx_packet+0x286>
    }
  else
    FASTSPI_STROBE (CC2420_STXON); 
    118c:	40 98       	cbi	0x08, 0	; 8
    118e:	84 e0       	ldi	r24, 0x04	; 4
    1190:	8e bd       	out	0x2e, r24	; 46
    1192:	0d b4       	in	r0, 0x2d	; 45
    1194:	07 fe       	sbrs	r0, 7
    1196:	fd cf       	rjmp	.-6      	; 0x1192 <rf_tx_packet+0x27e>
    1198:	40 9a       	sbi	0x08, 0	; 8


  ENABLE_GLOBAL_INT();
    119a:	78 94       	sei
	// Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
  while (!SFD_IS_1);
    119c:	4e 9b       	sbis	0x09, 6	; 9
    119e:	fe cf       	rjmp	.-4      	; 0x119c <rf_tx_packet+0x288>
  success = TRUE;

	// Turn interrupts back on
//	ENABLE_GLOBAL_INT();

    while (SFD_IS_1); // wait for packet to finish
    11a0:	4e 99       	sbic	0x09, 6	; 9
    11a2:	fe cf       	rjmp	.-4      	; 0x11a0 <rf_tx_packet+0x28c>

    // Wait for the acknowledge to be received, if any
    if (auto_ack_enable) {
    11a4:	80 91 b9 04 	lds	r24, 0x04B9
    11a8:	88 23       	and	r24, r24
    11aa:	91 f0       	breq	.+36     	; 0x11d0 <rf_tx_packet+0x2bc>
		//	while (SFD_IS_1);
        // We'll enter RX automatically, so just wait until we can be sure that the 
	// ack reception should have finished
        // The timeout consists of a 12-symbol turnaround time, the ack packet duration, 
	// and a small margin
        halWait((12 * RF_SYMBOL_DURATION) + (RF_ACK_DURATION) + (2 * RF_SYMBOL_DURATION) + 100);
    11ac:	84 ea       	ldi	r24, 0xA4	; 164
    11ae:	92 e0       	ldi	r25, 0x02	; 2
    11b0:	0e 94 cd 10 	call	0x219a	; 0x219a <halWait>

	if(FIFO_IS_1)
    11b4:	31 9b       	sbis	0x06, 1	; 6
    11b6:	0e c0       	rjmp	.+28     	; 0x11d4 <rf_tx_packet+0x2c0>
	{
	FASTSPI_READ_FIFO_BYTE(length);
    11b8:	40 98       	cbi	0x08, 0	; 8
    11ba:	8f e7       	ldi	r24, 0x7F	; 127
    11bc:	8e bd       	out	0x2e, r24	; 46
    11be:	0d b4       	in	r0, 0x2d	; 45
    11c0:	07 fe       	sbrs	r0, 7
    11c2:	fd cf       	rjmp	.-6      	; 0x11be <rf_tx_packet+0x2aa>
    11c4:	1e bc       	out	0x2e, r1	; 46
    11c6:	0d b4       	in	r0, 0x2d	; 45
    11c8:	07 fe       	sbrs	r0, 7
    11ca:	fd cf       	rjmp	.-6      	; 0x11c6 <rf_tx_packet+0x2b2>
    11cc:	8e b5       	in	r24, 0x2e	; 46
    11ce:	40 9a       	sbi	0x08, 0	; 8
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <rf_tx_packet+0x2de>
	length &= RF_LENGTH_MASK; // Ignore MSB
	    success = TRUE;

	}else
	{
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    11d4:	40 98       	cbi	0x08, 0	; 8
    11d6:	88 e0       	ldi	r24, 0x08	; 8
    11d8:	8e bd       	out	0x2e, r24	; 46
    11da:	0d b4       	in	r0, 0x2d	; 45
    11dc:	07 fe       	sbrs	r0, 7
    11de:	fd cf       	rjmp	.-6      	; 0x11da <rf_tx_packet+0x2c6>
    11e0:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    11e2:	40 98       	cbi	0x08, 0	; 8
    11e4:	88 e0       	ldi	r24, 0x08	; 8
    11e6:	8e bd       	out	0x2e, r24	; 46
    11e8:	0d b4       	in	r0, 0x2d	; 45
    11ea:	07 fe       	sbrs	r0, 7
    11ec:	fd cf       	rjmp	.-6      	; 0x11e8 <rf_tx_packet+0x2d4>
    11ee:	40 9a       	sbi	0x08, 0	; 8
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    }

    
	// Turn off the receiver if it should not continue to be enabled
    
    DISABLE_GLOBAL_INT();	
    11f2:	f8 94       	cli
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
    
	FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    11f4:	40 98       	cbi	0x08, 0	; 8
    11f6:	96 e0       	ldi	r25, 0x06	; 6
    11f8:	9e bd       	out	0x2e, r25	; 46
    11fa:	0d b4       	in	r0, 0x2d	; 45
    11fc:	07 fe       	sbrs	r0, 7
    11fe:	fd cf       	rjmp	.-6      	; 0x11fa <rf_tx_packet+0x2e6>
    1200:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    1202:	78 94       	sei

    // agr XXX hack to test time issue
    //rf_rx_on(); 

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    1204:	90 91 b0 04 	lds	r25, 0x04B0
    1208:	9f 5f       	subi	r25, 0xFF	; 255
    120a:	90 93 b0 04 	sts	0x04B0, r25
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
    return success;

}
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	ff 90       	pop	r15
    1220:	08 95       	ret

00001222 <rf_tx_tdma_packet>:

/**************************************************************************
This function is the same as normal TX, only it records actual transmission
starting time for calculating offset for SYNC
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time, uint16_t *tx_start_time) {
    1222:	af 92       	push	r10
    1224:	bf 92       	push	r11
    1226:	cf 92       	push	r12
    1228:	df 92       	push	r13
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <rf_tx_tdma_packet+0x16>
    1238:	00 d0       	rcall	.+0      	; 0x123a <rf_tx_tdma_packet+0x18>
    123a:	0f 92       	push	r0
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	8c 01       	movw	r16, r24
    1242:	7b 01       	movw	r14, r22
    1244:	5a 01       	movw	r10, r20
    1246:	69 01       	movw	r12, r18
	uint8_t timestamp;

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend (radio_sem);
#endif
	timestamp=_nrk_os_timer_get();
    1248:	0e 94 9d 21 	call	0x433a	; 0x433a <_nrk_os_timer_get>
	// XXX 2 below are hacks...
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    124c:	40 98       	cbi	0x08, 0	; 8
    124e:	88 e0       	ldi	r24, 0x08	; 8
    1250:	8e bd       	out	0x2e, r24	; 46
    1252:	0d b4       	in	r0, 0x2d	; 45
    1254:	07 fe       	sbrs	r0, 7
    1256:	fd cf       	rjmp	.-6      	; 0x1252 <rf_tx_tdma_packet+0x30>
    1258:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    125a:	40 98       	cbi	0x08, 0	; 8
    125c:	88 e0       	ldi	r24, 0x08	; 8
    125e:	8e bd       	out	0x2e, r24	; 46
    1260:	0d b4       	in	r0, 0x2d	; 45
    1262:	07 fe       	sbrs	r0, 7
    1264:	fd cf       	rjmp	.-6      	; 0x1260 <rf_tx_tdma_packet+0x3e>
    1266:	40 9a       	sbi	0x08, 0	; 8
    // Wait until the transceiver is idle
     while (FIFOP_IS_1 || SFD_IS_1);
    1268:	67 99       	sbic	0x0c, 7	; 12
    126a:	fe cf       	rjmp	.-4      	; 0x1268 <rf_tx_tdma_packet+0x46>
    126c:	4e 99       	sbic	0x09, 6	; 9
    126e:	fc cf       	rjmp	.-8      	; 0x1268 <rf_tx_tdma_packet+0x46>
    // Turn off global interrupts to avoid interference on the SPI interface
      DISABLE_GLOBAL_INT();
    1270:	f8 94       	cli
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    1272:	40 98       	cbi	0x08, 0	; 8
    1274:	89 e0       	ldi	r24, 0x09	; 9
    1276:	8e bd       	out	0x2e, r24	; 46
    1278:	0d b4       	in	r0, 0x2d	; 45
    127a:	07 fe       	sbrs	r0, 7
    127c:	fd cf       	rjmp	.-6      	; 0x1278 <rf_tx_tdma_packet+0x56>
    127e:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    1280:	40 98       	cbi	0x08, 0	; 8
    1282:	89 e0       	ldi	r24, 0x09	; 9
    1284:	8e bd       	out	0x2e, r24	; 46
    1286:	0d b4       	in	r0, 0x2d	; 45
    1288:	07 fe       	sbrs	r0, 7
    128a:	fd cf       	rjmp	.-6      	; 0x1286 <rf_tx_tdma_packet+0x64>
    128c:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    128e:	1a 82       	std	Y+2, r1	; 0x02
    for(i=0; i<pRTI->length; i++ )
    1290:	d8 01       	movw	r26, r16
    1292:	12 96       	adiw	r26, 0x02	; 2
    1294:	2c 91       	ld	r18, X
    1296:	12 97       	sbiw	r26, 0x02	; 2
    1298:	62 2f       	mov	r22, r18
    129a:	77 27       	eor	r23, r23
    129c:	67 fd       	sbrc	r22, 7
    129e:	70 95       	com	r23
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	0c c0       	rjmp	.+24     	; 0x12bc <rf_tx_tdma_packet+0x9a>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    12a4:	d8 01       	movw	r26, r16
    12a6:	13 96       	adiw	r26, 0x03	; 3
    12a8:	ed 91       	ld	r30, X+
    12aa:	fc 91       	ld	r31, X
    12ac:	14 97       	sbiw	r26, 0x04	; 4
    12ae:	e4 0f       	add	r30, r20
    12b0:	f5 1f       	adc	r31, r21
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	30 81       	ld	r19, Z
    12b6:	93 0f       	add	r25, r19
    12b8:	9a 83       	std	Y+2, r25	; 0x02
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
	FASTSPI_STROBE(CC2420_SFLUSHTX);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    12ba:	8f 5f       	subi	r24, 0xFF	; 255
    12bc:	48 2f       	mov	r20, r24
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	46 17       	cp	r20, r22
    12c2:	57 07       	cpc	r21, r23
    12c4:	7c f3       	brlt	.-34     	; 0x12a4 <rf_tx_tdma_packet+0x82>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    }
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    12c6:	82 2f       	mov	r24, r18
    12c8:	84 5f       	subi	r24, 0xF4	; 244
    12ca:	89 83       	std	Y+1, r24	; 0x01
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    12cc:	40 98       	cbi	0x08, 0	; 8
    12ce:	9e e3       	ldi	r25, 0x3E	; 62
    12d0:	9e bd       	out	0x2e, r25	; 46
    12d2:	0d b4       	in	r0, 0x2d	; 45
    12d4:	07 fe       	sbrs	r0, 7
    12d6:	fd cf       	rjmp	.-6      	; 0x12d2 <rf_tx_tdma_packet+0xb0>
    12d8:	8e bd       	out	0x2e, r24	; 46
    12da:	0d b4       	in	r0, 0x2d	; 45
    12dc:	07 fe       	sbrs	r0, 7
    12de:	fd cf       	rjmp	.-6      	; 0x12da <rf_tx_tdma_packet+0xb8>
    12e0:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    12e2:	f8 01       	movw	r30, r16
    12e4:	86 81       	ldd	r24, Z+6	; 0x06
    12e6:	88 23       	and	r24, r24
    12e8:	19 f4       	brne	.+6      	; 0x12f0 <rf_tx_tdma_packet+0xce>
    12ea:	81 e4       	ldi	r24, 0x41	; 65
    12ec:	98 e8       	ldi	r25, 0x88	; 136
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <rf_tx_tdma_packet+0xd2>
    12f0:	81 e6       	ldi	r24, 0x61	; 97
    12f2:	98 e8       	ldi	r25, 0x88	; 136
    12f4:	9c 83       	std	Y+4, r25	; 0x04
    12f6:	8b 83       	std	Y+3, r24	; 0x03
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    12f8:	40 98       	cbi	0x08, 0	; 8
    12fa:	8e e3       	ldi	r24, 0x3E	; 62
    12fc:	8e bd       	out	0x2e, r24	; 46
    12fe:	0d b4       	in	r0, 0x2d	; 45
    1300:	07 fe       	sbrs	r0, 7
    1302:	fd cf       	rjmp	.-6      	; 0x12fe <rf_tx_tdma_packet+0xdc>
    1304:	fe 01       	movw	r30, r28
    1306:	33 96       	adiw	r30, 0x03	; 3

/**************************************************************************
This function is the same as normal TX, only it records actual transmission
starting time for calculating offset for SYNC
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time, uint16_t *tx_start_time) {
    1308:	ce 01       	movw	r24, r28
    130a:	05 96       	adiw	r24, 0x05	; 5
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    130c:	20 81       	ld	r18, Z
    130e:	2e bd       	out	0x2e, r18	; 46
    1310:	0d b4       	in	r0, 0x2d	; 45
    1312:	07 fe       	sbrs	r0, 7
    1314:	fd cf       	rjmp	.-6      	; 0x1310 <rf_tx_tdma_packet+0xee>
    1316:	31 96       	adiw	r30, 0x01	; 1
    1318:	e8 17       	cp	r30, r24
    131a:	f9 07       	cpc	r31, r25
    131c:	b9 f7       	brne	.-18     	; 0x130c <rf_tx_tdma_packet+0xea>
    131e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    1320:	40 98       	cbi	0x08, 0	; 8
    1322:	8e e3       	ldi	r24, 0x3E	; 62
    1324:	8e bd       	out	0x2e, r24	; 46
    1326:	0d b4       	in	r0, 0x2d	; 45
    1328:	07 fe       	sbrs	r0, 7
    132a:	fd cf       	rjmp	.-6      	; 0x1326 <rf_tx_tdma_packet+0x104>
    132c:	80 91 b0 04 	lds	r24, 0x04B0
    1330:	8e bd       	out	0x2e, r24	; 46
    1332:	0d b4       	in	r0, 0x2d	; 45
    1334:	07 fe       	sbrs	r0, 7
    1336:	fd cf       	rjmp	.-6      	; 0x1332 <rf_tx_tdma_packet+0x110>
    1338:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    133a:	40 98       	cbi	0x08, 0	; 8
    133c:	8e e3       	ldi	r24, 0x3E	; 62
    133e:	8e bd       	out	0x2e, r24	; 46
    1340:	0d b4       	in	r0, 0x2d	; 45
    1342:	07 fe       	sbrs	r0, 7
    1344:	fd cf       	rjmp	.-6      	; 0x1340 <rf_tx_tdma_packet+0x11e>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	fc 01       	movw	r30, r24
    134c:	e2 55       	subi	r30, 0x52	; 82
    134e:	fb 4f       	sbci	r31, 0xFB	; 251
    1350:	24 81       	ldd	r18, Z+4	; 0x04
    1352:	2e bd       	out	0x2e, r18	; 46
    1354:	0d b4       	in	r0, 0x2d	; 45
    1356:	07 fe       	sbrs	r0, 7
    1358:	fd cf       	rjmp	.-6      	; 0x1354 <rf_tx_tdma_packet+0x132>
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	91 05       	cpc	r25, r1
    1360:	a1 f7       	brne	.-24     	; 0x134a <rf_tx_tdma_packet+0x128>
    1362:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    1364:	40 98       	cbi	0x08, 0	; 8
    1366:	8e e3       	ldi	r24, 0x3E	; 62
    1368:	8e bd       	out	0x2e, r24	; 46
    136a:	0d b4       	in	r0, 0x2d	; 45
    136c:	07 fe       	sbrs	r0, 7
    136e:	fd cf       	rjmp	.-6      	; 0x136a <rf_tx_tdma_packet+0x148>
    1370:	f8 01       	movw	r30, r16

/**************************************************************************
This function is the same as normal TX, only it records actual transmission
starting time for calculating offset for SYNC
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time, uint16_t *tx_start_time) {
    1372:	c8 01       	movw	r24, r16
    1374:	02 96       	adiw	r24, 0x02	; 2
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    1376:	20 81       	ld	r18, Z
    1378:	2e bd       	out	0x2e, r18	; 46
    137a:	0d b4       	in	r0, 0x2d	; 45
    137c:	07 fe       	sbrs	r0, 7
    137e:	fd cf       	rjmp	.-6      	; 0x137a <rf_tx_tdma_packet+0x158>
    1380:	31 96       	adiw	r30, 0x01	; 1
    1382:	e8 17       	cp	r30, r24
    1384:	f9 07       	cpc	r31, r25
    1386:	b9 f7       	brne	.-18     	; 0x1376 <rf_tx_tdma_packet+0x154>
    1388:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    138a:	40 98       	cbi	0x08, 0	; 8
    138c:	8e e3       	ldi	r24, 0x3E	; 62
    138e:	8e bd       	out	0x2e, r24	; 46
    1390:	0d b4       	in	r0, 0x2d	; 45
    1392:	07 fe       	sbrs	r0, 7
    1394:	fd cf       	rjmp	.-6      	; 0x1390 <rf_tx_tdma_packet+0x16e>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	fc 01       	movw	r30, r24
    139c:	e2 55       	subi	r30, 0x52	; 82
    139e:	fb 4f       	sbci	r31, 0xFB	; 251
    13a0:	26 81       	ldd	r18, Z+6	; 0x06
    13a2:	2e bd       	out	0x2e, r18	; 46
    13a4:	0d b4       	in	r0, 0x2d	; 45
    13a6:	07 fe       	sbrs	r0, 7
    13a8:	fd cf       	rjmp	.-6      	; 0x13a4 <rf_tx_tdma_packet+0x182>
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	a1 f7       	brne	.-24     	; 0x139a <rf_tx_tdma_packet+0x178>
    13b2:	40 9a       	sbi	0x08, 0	; 8

    nrk_high_speed_timer_wait(slot_start_time,tx_guard_time);
    13b4:	c7 01       	movw	r24, r14
    13b6:	b5 01       	movw	r22, r10
    13b8:	0e 94 ba 20 	call	0x4174	; 0x4174 <nrk_high_speed_timer_wait>
    
if (pRTI->cca == TRUE)
    13bc:	d8 01       	movw	r26, r16
    13be:	15 96       	adiw	r26, 0x05	; 5
    13c0:	8c 91       	ld	r24, X
    13c2:	15 97       	sbiw	r26, 0x05	; 5
    13c4:	88 23       	and	r24, r24
    13c6:	81 f1       	breq	.+96     	; 0x1428 <rf_tx_tdma_packet+0x206>
    {
    uint8_t cnt;
      if (!rfSettings.receiveOn)
    13c8:	80 91 b6 04 	lds	r24, 0x04B6
    13cc:	88 23       	and	r24, r24
    13ce:	39 f4       	brne	.+14     	; 0x13de <rf_tx_tdma_packet+0x1bc>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    13d0:	40 98       	cbi	0x08, 0	; 8
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	8e bd       	out	0x2e, r24	; 46
    13d6:	0d b4       	in	r0, 0x2d	; 45
    13d8:	07 fe       	sbrs	r0, 7
    13da:	fd cf       	rjmp	.-6      	; 0x13d6 <rf_tx_tdma_packet+0x1b4>
    13dc:	40 9a       	sbi	0x08, 0	; 8
    13de:	20 e0       	ldi	r18, 0x00	; 0

      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    13e0:	65 e0       	ldi	r22, 0x05	; 5
    13e2:	e6 2e       	mov	r14, r22
    13e4:	40 98       	cbi	0x08, 0	; 8
    13e6:	ee bc       	out	0x2e, r14	; 46
    13e8:	0d b4       	in	r0, 0x2d	; 45
    13ea:	07 fe       	sbrs	r0, 7
    13ec:	fd cf       	rjmp	.-6      	; 0x13e8 <rf_tx_tdma_packet+0x1c6>
    13ee:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    13f0:	40 98       	cbi	0x08, 0	; 8
    13f2:	1e bc       	out	0x2e, r1	; 46
    13f4:	0d b4       	in	r0, 0x2d	; 45
    13f6:	07 fe       	sbrs	r0, 7
    13f8:	fd cf       	rjmp	.-6      	; 0x13f4 <rf_tx_tdma_packet+0x1d2>
    13fa:	ae b4       	in	r10, 0x2e	; 46
    13fc:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    13fe:	2f 5f       	subi	r18, 0xFF	; 255
	  if (cnt > 100)
    1400:	25 36       	cpi	r18, 0x65	; 101
    1402:	49 f4       	brne	.+18     	; 0x1416 <rf_tx_tdma_packet+0x1f4>
	    {
	      ENABLE_GLOBAL_INT ();
    1404:	78 94       	sei
		nrk_sem_post(radio_sem);
    1406:	80 91 a9 04 	lds	r24, 0x04A9
    140a:	90 91 aa 04 	lds	r25, 0x04AA
    140e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <nrk_sem_post>
    1412:	80 e0       	ldi	r24, 0x00	; 0
		//printf("transmission fail.\n\r");
	      return FALSE;
    1414:	78 c0       	rjmp	.+240    	; 0x1506 <rf_tx_tdma_packet+0x2e4>
	    }
	  halWait (100);
    1416:	84 e6       	ldi	r24, 0x64	; 100
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	2d 83       	std	Y+5, r18	; 0x05
    141c:	0e 94 cd 10 	call	0x219a	; 0x219a <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    1420:	2d 81       	ldd	r18, Y+5	; 0x05
    1422:	a3 fe       	sbrs	r10, 3
    1424:	df cf       	rjmp	.-66     	; 0x13e4 <rf_tx_tdma_packet+0x1c2>
    1426:	07 c0       	rjmp	.+14     	; 0x1436 <rf_tx_tdma_packet+0x214>
	//printf("In basic_rf.c: cnt is %d\n\r", cnt);
    }
  else
    FASTSPI_STROBE (CC2420_STXON);
    1428:	40 98       	cbi	0x08, 0	; 8
    142a:	84 e0       	ldi	r24, 0x04	; 4
    142c:	8e bd       	out	0x2e, r24	; 46
    142e:	0d b4       	in	r0, 0x2d	; 45
    1430:	07 fe       	sbrs	r0, 7
    1432:	fd cf       	rjmp	.-6      	; 0x142e <rf_tx_tdma_packet+0x20c>
    1434:	40 9a       	sbi	0x08, 0	; 8
	 //nrk_gpio_set(DEBUG_0);

    // get the high speed timer value
nrk_gpio_set(NRK_DEBUG_0);
    1436:	80 91 55 02 	lds	r24, 0x0255
    143a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <nrk_gpio_set>
    *tx_start_time = (volatile)TCNT1;
    143e:	80 91 84 00 	lds	r24, 0x0084
    1442:	90 91 85 00 	lds	r25, 0x0085
    1446:	f6 01       	movw	r30, r12
    1448:	91 83       	std	Z+1, r25	; 0x01
    144a:	80 83       	st	Z, r24
    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    144c:	40 98       	cbi	0x08, 0	; 8
    144e:	8e e3       	ldi	r24, 0x3E	; 62
    1450:	8e bd       	out	0x2e, r24	; 46
    1452:	0d b4       	in	r0, 0x2d	; 45
    1454:	07 fe       	sbrs	r0, 7
    1456:	fd cf       	rjmp	.-6      	; 0x1452 <rf_tx_tdma_packet+0x230>
    1458:	d8 01       	movw	r26, r16
    145a:	12 96       	adiw	r26, 0x02	; 2
    145c:	4c 91       	ld	r20, X
    145e:	12 97       	sbiw	r26, 0x02	; 2
    1460:	55 27       	eor	r21, r21
    1462:	47 fd       	sbrc	r20, 7
    1464:	50 95       	com	r21
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	0d c0       	rjmp	.+26     	; 0x1484 <rf_tx_tdma_packet+0x262>
    146a:	d8 01       	movw	r26, r16
    146c:	13 96       	adiw	r26, 0x03	; 3
    146e:	ed 91       	ld	r30, X+
    1470:	fc 91       	ld	r31, X
    1472:	14 97       	sbiw	r26, 0x04	; 4
    1474:	e2 0f       	add	r30, r18
    1476:	f3 1f       	adc	r31, r19
    1478:	90 81       	ld	r25, Z
    147a:	9e bd       	out	0x2e, r25	; 46
    147c:	0d b4       	in	r0, 0x2d	; 45
    147e:	07 fe       	sbrs	r0, 7
    1480:	fd cf       	rjmp	.-6      	; 0x147c <rf_tx_tdma_packet+0x25a>
    1482:	8f 5f       	subi	r24, 0xFF	; 255
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	24 17       	cp	r18, r20
    148a:	35 07       	cpc	r19, r21
    148c:	74 f3       	brlt	.-36     	; 0x146a <rf_tx_tdma_packet+0x248>
    148e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    1490:	40 98       	cbi	0x08, 0	; 8
    1492:	8e e3       	ldi	r24, 0x3E	; 62
    1494:	8e bd       	out	0x2e, r24	; 46
    1496:	0d b4       	in	r0, 0x2d	; 45
    1498:	07 fe       	sbrs	r0, 7
    149a:	fd cf       	rjmp	.-6      	; 0x1496 <rf_tx_tdma_packet+0x274>
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	8e bd       	out	0x2e, r24	; 46
    14a0:	0d b4       	in	r0, 0x2d	; 45
    14a2:	07 fe       	sbrs	r0, 7
    14a4:	fd cf       	rjmp	.-6      	; 0x14a0 <rf_tx_tdma_packet+0x27e>
    14a6:	40 9a       	sbi	0x08, 0	; 8

    //nrk_spin_wait_us(200);
//  FASTSPI_STROBE(CC2420_STXON);
   // Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
	while (!SFD_IS_1);
    14a8:	4e 9b       	sbis	0x09, 6	; 9
    14aa:	fe cf       	rjmp	.-4      	; 0x14a8 <rf_tx_tdma_packet+0x286>
		success = rfSettings.ackReceived;
    }*/

    
	// Turn off the receiver if it should not continue to be enabled
    DISABLE_GLOBAL_INT();
    14ac:	f8 94       	cli
    // XXX hack, temp out
    //if (!rfSettings.receiveOn) { while (SFD_IS_1); /*FASTSPI_STROBE(CC2420_SRFOFF);*/ }
    // while (SFD_IS_1); 
    while (SFD_IS_1); // wait for packet to finish
    14ae:	4e 99       	sbic	0x09, 6	; 9
    14b0:	fe cf       	rjmp	.-4      	; 0x14ae <rf_tx_tdma_packet+0x28c>
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    14b2:	40 98       	cbi	0x08, 0	; 8
    14b4:	88 e0       	ldi	r24, 0x08	; 8
    14b6:	8e bd       	out	0x2e, r24	; 46
    14b8:	0d b4       	in	r0, 0x2d	; 45
    14ba:	07 fe       	sbrs	r0, 7
    14bc:	fd cf       	rjmp	.-6      	; 0x14b8 <rf_tx_tdma_packet+0x296>
    14be:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    14c0:	40 98       	cbi	0x08, 0	; 8
    14c2:	88 e0       	ldi	r24, 0x08	; 8
    14c4:	8e bd       	out	0x2e, r24	; 46
    14c6:	0d b4       	in	r0, 0x2d	; 45
    14c8:	07 fe       	sbrs	r0, 7
    14ca:	fd cf       	rjmp	.-6      	; 0x14c6 <rf_tx_tdma_packet+0x2a4>
    14cc:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    14ce:	40 98       	cbi	0x08, 0	; 8
    14d0:	89 e0       	ldi	r24, 0x09	; 9
    14d2:	8e bd       	out	0x2e, r24	; 46
    14d4:	0d b4       	in	r0, 0x2d	; 45
    14d6:	07 fe       	sbrs	r0, 7
    14d8:	fd cf       	rjmp	.-6      	; 0x14d4 <rf_tx_tdma_packet+0x2b2>
    14da:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    14dc:	40 98       	cbi	0x08, 0	; 8
    14de:	89 e0       	ldi	r24, 0x09	; 9
    14e0:	8e bd       	out	0x2e, r24	; 46
    14e2:	0d b4       	in	r0, 0x2d	; 45
    14e4:	07 fe       	sbrs	r0, 7
    14e6:	fd cf       	rjmp	.-6      	; 0x14e2 <rf_tx_tdma_packet+0x2c0>
    14e8:	40 9a       	sbi	0x08, 0	; 8

FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    14ea:	40 98       	cbi	0x08, 0	; 8
    14ec:	86 e0       	ldi	r24, 0x06	; 6
    14ee:	8e bd       	out	0x2e, r24	; 46
    14f0:	0d b4       	in	r0, 0x2d	; 45
    14f2:	07 fe       	sbrs	r0, 7
    14f4:	fd cf       	rjmp	.-6      	; 0x14f0 <rf_tx_tdma_packet+0x2ce>
    14f6:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    14f8:	78 94       	sei
    

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    14fa:	80 91 b0 04 	lds	r24, 0x04B0
    14fe:	8f 5f       	subi	r24, 0xFF	; 255
    1500:	80 93 b0 04 	sts	0x04B0, r24
    1504:	81 e0       	ldi	r24, 0x01	; 1
nrk_sem_post(radio_sem);
#endif
	//printf("sent success? %d.\n\r",success);
    return success;

}
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	df 90       	pop	r13
    151e:	cf 90       	pop	r12
    1520:	bf 90       	pop	r11
    1522:	af 90       	pop	r10
    1524:	08 95       	ret

00001526 <rf_addr_decode_set_my_mac>:
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <rf_addr_decode_set_my_mac+0x6>
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
uint8_t n;
    rfSettings.myAddr = my_mac;
    1534:	90 93 b5 04 	sts	0x04B5, r25
    1538:	80 93 b4 04 	sts	0x04B4, r24
    nrk_spin_wait_us(500);
    153c:	84 ef       	ldi	r24, 0xF4	; 244
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	0e 94 6f 20 	call	0x40de	; 0x40de <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    1544:	40 98       	cbi	0x08, 0	; 8
    1546:	8a ee       	ldi	r24, 0xEA	; 234
    1548:	8e bd       	out	0x2e, r24	; 46
    154a:	0d b4       	in	r0, 0x2d	; 45
    154c:	07 fe       	sbrs	r0, 7
    154e:	fd cf       	rjmp	.-6      	; 0x154a <rf_addr_decode_set_my_mac+0x24>
    1550:	80 e8       	ldi	r24, 0x80	; 128
    1552:	8e bd       	out	0x2e, r24	; 46
    1554:	0d b4       	in	r0, 0x2d	; 45
    1556:	07 fe       	sbrs	r0, 7
    1558:	fd cf       	rjmp	.-6      	; 0x1554 <rf_addr_decode_set_my_mac+0x2e>
    155a:	fe 01       	movw	r30, r28
    155c:	31 96       	adiw	r30, 0x01	; 1
    mdmctrl0 &= (~0x0010);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
    155e:	ce 01       	movw	r24, r28
    1560:	03 96       	adiw	r24, 0x03	; 3
{
uint8_t n;
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    1562:	20 81       	ld	r18, Z
    1564:	2e bd       	out	0x2e, r18	; 46
    1566:	0d b4       	in	r0, 0x2d	; 45
    1568:	07 fe       	sbrs	r0, 7
    156a:	fd cf       	rjmp	.-6      	; 0x1566 <rf_addr_decode_set_my_mac+0x40>
    156c:	31 96       	adiw	r30, 0x01	; 1
    156e:	e8 17       	cp	r30, r24
    1570:	f9 07       	cpc	r31, r25
    1572:	b9 f7       	brne	.-18     	; 0x1562 <rf_addr_decode_set_my_mac+0x3c>
    1574:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    1576:	84 ef       	ldi	r24, 0xF4	; 244
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	0e 94 6f 20 	call	0x40de	; 0x40de <nrk_spin_wait_us>
}
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <rf_security_set_key>:
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    1588:	8f 92       	push	r8
    158a:	9f 92       	push	r9
    158c:	af 92       	push	r10
    158e:	bf 92       	push	r11
    1590:	cf 92       	push	r12
    1592:	df 92       	push	r13
    1594:	ef 92       	push	r14
    1596:	ff 92       	push	r15
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <rf_security_set_key+0x1a>
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <rf_security_set_key+0x1c>
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	e8 2e       	mov	r14, r24
    15aa:	09 2f       	mov	r16, r25
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    15ac:	84 e6       	ldi	r24, 0x64	; 100
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 6f 20 	call	0x40de	; 0x40de <nrk_spin_wait_us>
    15b4:	ce 2c       	mov	r12, r14
    15b6:	d0 2e       	mov	r13, r16
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	31 e0       	ldi	r19, 0x01	; 1
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    15bc:	8e 01       	movw	r16, r28
    15be:	0f 5f       	subi	r16, 0xFF	; 255
    15c0:	1f 4f       	sbci	r17, 0xFF	; 255
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    15c2:	a3 e0       	ldi	r26, 0x03	; 3
    15c4:	aa 2e       	mov	r10, r26
    15c6:	b1 2c       	mov	r11, r1
    15c8:	ac 0e       	add	r10, r28
    15ca:	bd 1e       	adc	r11, r29

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    15cc:	f6 01       	movw	r30, r12
    15ce:	90 80       	ld	r9, Z
    15d0:	88 24       	eor	r8, r8
    15d2:	81 81       	ldd	r24, Z+1	; 0x01
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	88 29       	or	r24, r8
    15d8:	99 29       	or	r25, r9
    15da:	9a 83       	std	Y+2, r25	; 0x02
    15dc:	89 83       	std	Y+1, r24	; 0x01
   	nrk_spin_wait_us(100); 
    15de:	84 e6       	ldi	r24, 0x64	; 100
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	2b 83       	std	Y+3, r18	; 0x03
    15e4:	3c 83       	std	Y+4, r19	; 0x04
    15e6:	0e 94 6f 20 	call	0x40de	; 0x40de <nrk_spin_wait_us>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    15ea:	40 98       	cbi	0x08, 0	; 8
    15ec:	2b 81       	ldd	r18, Y+3	; 0x03
    15ee:	3c 81       	ldd	r19, Y+4	; 0x04
    15f0:	82 2f       	mov	r24, r18
    15f2:	80 68       	ori	r24, 0x80	; 128
    15f4:	8e bd       	out	0x2e, r24	; 46
    15f6:	0d b4       	in	r0, 0x2d	; 45
    15f8:	07 fe       	sbrs	r0, 7
    15fa:	fd cf       	rjmp	.-6      	; 0x15f6 <rf_security_set_key+0x6e>
    15fc:	c9 01       	movw	r24, r18
    15fe:	95 95       	asr	r25
    1600:	87 95       	ror	r24
    1602:	80 7c       	andi	r24, 0xC0	; 192
    1604:	8e bd       	out	0x2e, r24	; 46
    1606:	0d b4       	in	r0, 0x2d	; 45
    1608:	07 fe       	sbrs	r0, 7
    160a:	fd cf       	rjmp	.-6      	; 0x1606 <rf_security_set_key+0x7e>
    160c:	78 01       	movw	r14, r16
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    160e:	f8 01       	movw	r30, r16
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    1610:	80 81       	ld	r24, Z
    1612:	8e bd       	out	0x2e, r24	; 46
    1614:	0d b4       	in	r0, 0x2d	; 45
    1616:	07 fe       	sbrs	r0, 7
    1618:	fd cf       	rjmp	.-6      	; 0x1614 <rf_security_set_key+0x8c>
    161a:	31 96       	adiw	r30, 0x01	; 1
    161c:	ea 15       	cp	r30, r10
    161e:	fb 05       	cpc	r31, r11
    1620:	b9 f7       	brne	.-18     	; 0x1610 <rf_security_set_key+0x88>
    1622:	40 9a       	sbi	0x08, 0	; 8
    1624:	08 94       	sec
    1626:	c1 1c       	adc	r12, r1
    1628:	d1 1c       	adc	r13, r1
    162a:	2e 5f       	subi	r18, 0xFE	; 254
    162c:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    162e:	f1 e0       	ldi	r31, 0x01	; 1
    1630:	20 31       	cpi	r18, 0x10	; 16
    1632:	3f 07       	cpc	r19, r31
    1634:	59 f6       	brne	.-106    	; 0x15cc <rf_security_set_key+0x44>
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
    1636:	84 e6       	ldi	r24, 0x64	; 100
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0e 94 6f 20 	call	0x40de	; 0x40de <nrk_spin_wait_us>
    163e:	20 e4       	ldi	r18, 0x40	; 64
    1640:	31 e0       	ldi	r19, 0x01	; 1
    1642:	80 e1       	ldi	r24, 0x10	; 16
    1644:	91 e0       	ldi	r25, 0x01	; 1
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    1646:	1a 82       	std	Y+2, r1	; 0x02
    1648:	19 82       	std	Y+1, r1	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    164a:	40 98       	cbi	0x08, 0	; 8
    164c:	42 2f       	mov	r20, r18
    164e:	40 68       	ori	r20, 0x80	; 128
    1650:	4e bd       	out	0x2e, r20	; 46
    1652:	0d b4       	in	r0, 0x2d	; 45
    1654:	07 fe       	sbrs	r0, 7
    1656:	fd cf       	rjmp	.-6      	; 0x1652 <rf_security_set_key+0xca>
    1658:	a9 01       	movw	r20, r18
    165a:	55 95       	asr	r21
    165c:	47 95       	ror	r20
    165e:	40 7c       	andi	r20, 0xC0	; 192
    1660:	4e bd       	out	0x2e, r20	; 46
    1662:	0d b4       	in	r0, 0x2d	; 45
    1664:	07 fe       	sbrs	r0, 7
    1666:	fd cf       	rjmp	.-6      	; 0x1662 <rf_security_set_key+0xda>
    1668:	f8 01       	movw	r30, r16
    166a:	40 81       	ld	r20, Z
    166c:	4e bd       	out	0x2e, r20	; 46
    166e:	0d b4       	in	r0, 0x2d	; 45
    1670:	07 fe       	sbrs	r0, 7
    1672:	fd cf       	rjmp	.-6      	; 0x166e <rf_security_set_key+0xe6>
    1674:	31 96       	adiw	r30, 0x01	; 1
    1676:	ea 15       	cp	r30, r10
    1678:	fb 05       	cpc	r31, r11
    167a:	b9 f7       	brne	.-18     	; 0x166a <rf_security_set_key+0xe2>
    167c:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    167e:	40 98       	cbi	0x08, 0	; 8
    1680:	48 2f       	mov	r20, r24
    1682:	40 68       	ori	r20, 0x80	; 128
    1684:	4e bd       	out	0x2e, r20	; 46
    1686:	0d b4       	in	r0, 0x2d	; 45
    1688:	07 fe       	sbrs	r0, 7
    168a:	fd cf       	rjmp	.-6      	; 0x1686 <rf_security_set_key+0xfe>
    168c:	ac 01       	movw	r20, r24
    168e:	55 95       	asr	r21
    1690:	47 95       	ror	r20
    1692:	40 7c       	andi	r20, 0xC0	; 192
    1694:	4e bd       	out	0x2e, r20	; 46
    1696:	0d b4       	in	r0, 0x2d	; 45
    1698:	07 fe       	sbrs	r0, 7
    169a:	fd cf       	rjmp	.-6      	; 0x1696 <rf_security_set_key+0x10e>
    169c:	f8 01       	movw	r30, r16
    169e:	40 81       	ld	r20, Z
    16a0:	4e bd       	out	0x2e, r20	; 46
    16a2:	0d b4       	in	r0, 0x2d	; 45
    16a4:	07 fe       	sbrs	r0, 7
    16a6:	fd cf       	rjmp	.-6      	; 0x16a2 <rf_security_set_key+0x11a>
    16a8:	31 96       	adiw	r30, 0x01	; 1
    16aa:	ea 15       	cp	r30, r10
    16ac:	fb 05       	cpc	r31, r11
    16ae:	b9 f7       	brne	.-18     	; 0x169e <rf_security_set_key+0x116>
    16b0:	40 9a       	sbi	0x08, 0	; 8
    16b2:	02 96       	adiw	r24, 0x02	; 2
    16b4:	2e 5f       	subi	r18, 0xFE	; 254
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	8e 31       	cpi	r24, 0x1E	; 30
    16bc:	94 07       	cpc	r25, r20
    16be:	19 f6       	brne	.-122    	; 0x1646 <rf_security_set_key+0xbe>
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9a 83       	std	Y+2, r25	; 0x02
    16c6:	89 83       	std	Y+1, r24	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    16c8:	40 98       	cbi	0x08, 0	; 8
    16ca:	8e ec       	ldi	r24, 0xCE	; 206
    16cc:	8e bd       	out	0x2e, r24	; 46
    16ce:	0d b4       	in	r0, 0x2d	; 45
    16d0:	07 fe       	sbrs	r0, 7
    16d2:	fd cf       	rjmp	.-6      	; 0x16ce <rf_security_set_key+0x146>
    16d4:	80 e8       	ldi	r24, 0x80	; 128
    16d6:	8e bd       	out	0x2e, r24	; 46
    16d8:	0d b4       	in	r0, 0x2d	; 45
    16da:	07 fe       	sbrs	r0, 7
    16dc:	fd cf       	rjmp	.-6      	; 0x16d8 <rf_security_set_key+0x150>
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    16de:	c8 01       	movw	r24, r16
    16e0:	02 96       	adiw	r24, 0x02	; 2
    16e2:	f8 01       	movw	r30, r16
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    16e4:	20 81       	ld	r18, Z
    16e6:	2e bd       	out	0x2e, r18	; 46
    16e8:	0d b4       	in	r0, 0x2d	; 45
    16ea:	07 fe       	sbrs	r0, 7
    16ec:	fd cf       	rjmp	.-6      	; 0x16e8 <rf_security_set_key+0x160>
    16ee:	31 96       	adiw	r30, 0x01	; 1
    16f0:	e8 17       	cp	r30, r24
    16f2:	f9 07       	cpc	r31, r25
    16f4:	b9 f7       	brne	.-18     	; 0x16e4 <rf_security_set_key+0x15c>
    16f6:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    16f8:	40 98       	cbi	0x08, 0	; 8
    16fa:	8e e9       	ldi	r24, 0x9E	; 158
    16fc:	8e bd       	out	0x2e, r24	; 46
    16fe:	0d b4       	in	r0, 0x2d	; 45
    1700:	07 fe       	sbrs	r0, 7
    1702:	fd cf       	rjmp	.-6      	; 0x16fe <rf_security_set_key+0x176>
    1704:	80 e8       	ldi	r24, 0x80	; 128
    1706:	8e bd       	out	0x2e, r24	; 46
    1708:	0d b4       	in	r0, 0x2d	; 45
    170a:	07 fe       	sbrs	r0, 7
    170c:	fd cf       	rjmp	.-6      	; 0x1708 <rf_security_set_key+0x180>
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    170e:	0e 5f       	subi	r16, 0xFE	; 254
    1710:	1f 4f       	sbci	r17, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    1712:	f7 01       	movw	r30, r14
    1714:	80 81       	ld	r24, Z
    1716:	8e bd       	out	0x2e, r24	; 46
    1718:	0d b4       	in	r0, 0x2d	; 45
    171a:	07 fe       	sbrs	r0, 7
    171c:	fd cf       	rjmp	.-6      	; 0x1718 <rf_security_set_key+0x190>
    171e:	08 94       	sec
    1720:	e1 1c       	adc	r14, r1
    1722:	f1 1c       	adc	r15, r1
    1724:	e0 16       	cp	r14, r16
    1726:	f1 06       	cpc	r15, r17
    1728:	a1 f7       	brne	.-24     	; 0x1712 <rf_security_set_key+0x18a>
    172a:	40 9a       	sbi	0x08, 0	; 8
}
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	df 90       	pop	r13
    1742:	cf 90       	pop	r12
    1744:	bf 90       	pop	r11
    1746:	af 90       	pop	r10
    1748:	9f 90       	pop	r9
    174a:	8f 90       	pop	r8
    174c:	08 95       	ret

0000174e <rf_set_rx>:
}



void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	ec 01       	movw	r28, r24
    1754:	86 2f       	mov	r24, r22

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1756:	40 98       	cbi	0x08, 0	; 8
    1758:	98 e0       	ldi	r25, 0x08	; 8
    175a:	9e bd       	out	0x2e, r25	; 46
    175c:	0d b4       	in	r0, 0x2d	; 45
    175e:	07 fe       	sbrs	r0, 7
    1760:	fd cf       	rjmp	.-6      	; 0x175c <rf_set_rx+0xe>
    1762:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1764:	40 98       	cbi	0x08, 0	; 8
    1766:	98 e0       	ldi	r25, 0x08	; 8
    1768:	9e bd       	out	0x2e, r25	; 46
    176a:	0d b4       	in	r0, 0x2d	; 45
    176c:	07 fe       	sbrs	r0, 7
    176e:	fd cf       	rjmp	.-6      	; 0x176a <rf_set_rx+0x1c>
    1770:	40 9a       	sbi	0x08, 0	; 8
    halRfSetChannel(channel);
    1772:	0e 94 63 03 	call	0x6c6	; 0x6c6 <halRfSetChannel>
    rfSettings.pRxInfo = pRRI;
    1776:	d0 93 af 04 	sts	0x04AF, r29
    177a:	c0 93 ae 04 	sts	0x04AE, r28

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	08 95       	ret

00001784 <rf_set_channel>:
void rf_set_channel( uint8_t channel )
{
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    halRfSetChannel(channel);
    1784:	0e 94 63 03 	call	0x6c6	; 0x6c6 <halRfSetChannel>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
    1788:	08 95       	ret

0000178a <rf_init>:
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <rf_init+0x10>
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	8c 01       	movw	r16, r24
    17a0:	f6 2e       	mov	r15, r22
    17a2:	5a 83       	std	Y+2, r21	; 0x02
    17a4:	49 83       	std	Y+1, r20	; 0x01
    17a6:	69 01       	movw	r12, r18
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
  }
#endif

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    SET_VREG_ACTIVE();
    17a8:	15 9a       	sbi	0x02, 5	; 2
    halWait(1000);
    17aa:	88 ee       	ldi	r24, 0xE8	; 232
    17ac:	93 e0       	ldi	r25, 0x03	; 3
    17ae:	0e 94 cd 10 	call	0x219a	; 0x219a <halWait>
    SET_RESET_ACTIVE();
    17b2:	16 98       	cbi	0x02, 6	; 2
    halWait(1);
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 cd 10 	call	0x219a	; 0x219a <halWait>
    SET_RESET_INACTIVE();
    17bc:	16 9a       	sbi	0x02, 6	; 2
    halWait(100);
    17be:	84 e6       	ldi	r24, 0x64	; 100
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 cd 10 	call	0x219a	; 0x219a <halWait>
    // Initialize the FIFOP external interrupt
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();
    17c6:	f8 94       	cli

    // Register modifications
    FASTSPI_STROBE(CC2420_SXOSCON);
    17c8:	40 98       	cbi	0x08, 0	; 8
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	8e bd       	out	0x2e, r24	; 46
    17ce:	0d b4       	in	r0, 0x2d	; 45
    17d0:	07 fe       	sbrs	r0, 7
    17d2:	fd cf       	rjmp	.-6      	; 0x17ce <rf_init+0x44>
    17d4:	40 9a       	sbi	0x08, 0	; 8
    mdmctrl0=0x02E2;
    17d6:	82 ee       	ldi	r24, 0xE2	; 226
    17d8:	92 e0       	ldi	r25, 0x02	; 2
    17da:	90 93 ad 04 	sts	0x04AD, r25
    17de:	80 93 ac 04 	sts	0x04AC, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    17e2:	40 98       	cbi	0x08, 0	; 8
    17e4:	81 e1       	ldi	r24, 0x11	; 17
    17e6:	8e bd       	out	0x2e, r24	; 46
    17e8:	0d b4       	in	r0, 0x2d	; 45
    17ea:	07 fe       	sbrs	r0, 7
    17ec:	fd cf       	rjmp	.-6      	; 0x17e8 <rf_init+0x5e>
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	8e bd       	out	0x2e, r24	; 46
    17f2:	0d b4       	in	r0, 0x2d	; 45
    17f4:	07 fe       	sbrs	r0, 7
    17f6:	fd cf       	rjmp	.-6      	; 0x17f2 <rf_init+0x68>
    17f8:	82 ee       	ldi	r24, 0xE2	; 226
    17fa:	8e bd       	out	0x2e, r24	; 46
    17fc:	0d b4       	in	r0, 0x2d	; 45
    17fe:	07 fe       	sbrs	r0, 7
    1800:	fd cf       	rjmp	.-6      	; 0x17fc <rf_init+0x72>
    1802:	40 9a       	sbi	0x08, 0	; 8
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    1804:	40 98       	cbi	0x08, 0	; 8
    1806:	82 e1       	ldi	r24, 0x12	; 18
    1808:	8e bd       	out	0x2e, r24	; 46
    180a:	0d b4       	in	r0, 0x2d	; 45
    180c:	07 fe       	sbrs	r0, 7
    180e:	fd cf       	rjmp	.-6      	; 0x180a <rf_init+0x80>
    1810:	85 e0       	ldi	r24, 0x05	; 5
    1812:	8e bd       	out	0x2e, r24	; 46
    1814:	0d b4       	in	r0, 0x2d	; 45
    1816:	07 fe       	sbrs	r0, 7
    1818:	fd cf       	rjmp	.-6      	; 0x1814 <rf_init+0x8a>
    181a:	1e bc       	out	0x2e, r1	; 46
    181c:	0d b4       	in	r0, 0x2d	; 45
    181e:	07 fe       	sbrs	r0, 7
    1820:	fd cf       	rjmp	.-6      	; 0x181c <rf_init+0x92>
    1822:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    1824:	40 98       	cbi	0x08, 0	; 8
    1826:	8c e1       	ldi	r24, 0x1C	; 28
    1828:	8e bd       	out	0x2e, r24	; 46
    182a:	0d b4       	in	r0, 0x2d	; 45
    182c:	07 fe       	sbrs	r0, 7
    182e:	fd cf       	rjmp	.-6      	; 0x182a <rf_init+0xa0>
    1830:	1e bc       	out	0x2e, r1	; 46
    1832:	0d b4       	in	r0, 0x2d	; 45
    1834:	07 fe       	sbrs	r0, 7
    1836:	fd cf       	rjmp	.-6      	; 0x1832 <rf_init+0xa8>
    1838:	8f e7       	ldi	r24, 0x7F	; 127
    183a:	8e bd       	out	0x2e, r24	; 46
    183c:	0d b4       	in	r0, 0x2d	; 45
    183e:	07 fe       	sbrs	r0, 7
    1840:	fd cf       	rjmp	.-6      	; 0x183c <rf_init+0xb2>
    1842:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    1844:	40 98       	cbi	0x08, 0	; 8
    1846:	89 e1       	ldi	r24, 0x19	; 25
    1848:	8e bd       	out	0x2e, r24	; 46
    184a:	0d b4       	in	r0, 0x2d	; 45
    184c:	07 fe       	sbrs	r0, 7
    184e:	fd cf       	rjmp	.-6      	; 0x184a <rf_init+0xc0>
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	8e bd       	out	0x2e, r24	; 46
    1854:	0d b4       	in	r0, 0x2d	; 45
    1856:	07 fe       	sbrs	r0, 7
    1858:	fd cf       	rjmp	.-6      	; 0x1854 <rf_init+0xca>
    185a:	84 ec       	ldi	r24, 0xC4	; 196
    185c:	8e bd       	out	0x2e, r24	; 46
    185e:	0d b4       	in	r0, 0x2d	; 45
    1860:	07 fe       	sbrs	r0, 7
    1862:	fd cf       	rjmp	.-6      	; 0x185e <rf_init+0xd4>
    1864:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
    1866:	40 98       	cbi	0x08, 0	; 8
    1868:	87 e1       	ldi	r24, 0x17	; 23
    186a:	8e bd       	out	0x2e, r24	; 46
    186c:	0d b4       	in	r0, 0x2d	; 45
    186e:	07 fe       	sbrs	r0, 7
    1870:	fd cf       	rjmp	.-6      	; 0x186c <rf_init+0xe2>
    1872:	8a e1       	ldi	r24, 0x1A	; 26
    1874:	8e bd       	out	0x2e, r24	; 46
    1876:	0d b4       	in	r0, 0x2d	; 45
    1878:	07 fe       	sbrs	r0, 7
    187a:	fd cf       	rjmp	.-6      	; 0x1876 <rf_init+0xec>
    187c:	86 e5       	ldi	r24, 0x56	; 86
    187e:	8e bd       	out	0x2e, r24	; 46
    1880:	0d b4       	in	r0, 0x2d	; 45
    1882:	07 fe       	sbrs	r0, 7
    1884:	fd cf       	rjmp	.-6      	; 0x1880 <rf_init+0xf6>
    1886:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    1888:	84 ef       	ldi	r24, 0xF4	; 244
    188a:	91 e0       	ldi	r25, 0x01	; 1
    188c:	0e 94 6f 20 	call	0x40de	; 0x40de <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    1890:	40 98       	cbi	0x08, 0	; 8
    1892:	88 ee       	ldi	r24, 0xE8	; 232
    1894:	8e bd       	out	0x2e, r24	; 46
    1896:	0d b4       	in	r0, 0x2d	; 45
    1898:	07 fe       	sbrs	r0, 7
    189a:	fd cf       	rjmp	.-6      	; 0x1896 <rf_init+0x10c>
    189c:	80 e8       	ldi	r24, 0x80	; 128
    189e:	8e bd       	out	0x2e, r24	; 46
    18a0:	0d b4       	in	r0, 0x2d	; 45
    18a2:	07 fe       	sbrs	r0, 7
    18a4:	fd cf       	rjmp	.-6      	; 0x18a0 <rf_init+0x116>
    18a6:	fe 01       	movw	r30, r28
    18a8:	31 96       	adiw	r30, 0x01	; 1
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    18aa:	ce 01       	movw	r24, r28
    18ac:	03 96       	adiw	r24, 0x03	; 3
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    18ae:	20 81       	ld	r18, Z
    18b0:	2e bd       	out	0x2e, r18	; 46
    18b2:	0d b4       	in	r0, 0x2d	; 45
    18b4:	07 fe       	sbrs	r0, 7
    18b6:	fd cf       	rjmp	.-6      	; 0x18b2 <rf_init+0x128>
    18b8:	31 96       	adiw	r30, 0x01	; 1
    18ba:	e8 17       	cp	r30, r24
    18bc:	f9 07       	cpc	r31, r25
    18be:	b9 f7       	brne	.-18     	; 0x18ae <rf_init+0x124>
    18c0:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    18c2:	84 ef       	ldi	r24, 0xF4	; 244
    18c4:	91 e0       	ldi	r25, 0x01	; 1
    18c6:	0e 94 6f 20 	call	0x40de	; 0x40de <nrk_spin_wait_us>

  	ENABLE_GLOBAL_INT();
    18ca:	78 94       	sei

    // Set the RF channel
    halRfSetChannel(channel);
    18cc:	8f 2d       	mov	r24, r15
    18ce:	0e 94 63 03 	call	0x6c6	; 0x6c6 <halRfSetChannel>

    // Turn interrupts back on
	ENABLE_GLOBAL_INT();
    18d2:	78 94       	sei

	// Set the protocol configuration
	rfSettings.pRxInfo = pRRI;
    18d4:	10 93 af 04 	sts	0x04AF, r17
    18d8:	00 93 ae 04 	sts	0x04AE, r16
	rfSettings.panId = panId;
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	90 93 b3 04 	sts	0x04B3, r25
    18e4:	80 93 b2 04 	sts	0x04B2, r24
	rfSettings.myAddr = myAddr;
    18e8:	d0 92 b5 04 	sts	0x04B5, r13
    18ec:	c0 92 b4 04 	sts	0x04B4, r12
	rfSettings.txSeqNumber = 0;
    18f0:	10 92 b0 04 	sts	0x04B0, r1
        rfSettings.receiveOn = FALSE;
    18f4:	10 92 b6 04 	sts	0x04B6, r1

	// Wait for the crystal oscillator to become stable
    halRfWaitForCrystalOscillator();
    18f8:	0e 94 81 03 	call	0x702	; 0x702 <halRfWaitForCrystalOscillator>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    _nrk_errno_set (2);
  }
#endif

auto_ack_enable=0;
    18fc:	10 92 b9 04 	sts	0x04B9, r1
security_enable=0;
    1900:	10 92 ab 04 	sts	0x04AB, r1
last_pkt_encrypted=0;
    1904:	10 92 ba 04 	sts	0x04BA, r1
} // rf_init() 
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	ff 90       	pop	r15
    1916:	df 90       	pop	r13
    1918:	cf 90       	pop	r12
    191a:	08 95       	ret

0000191c <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    191c:	8f ef       	ldi	r24, 0xFF	; 255
    191e:	08 95       	ret

00001920 <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	31 f4       	brne	.+12     	; 0x1930 <nrk_uart_data_ready+0x10>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1924:	80 91 c8 00 	lds	r24, 0x00C8
    1928:	88 1f       	adc	r24, r24
    192a:	88 27       	eor	r24, r24
    192c:	88 1f       	adc	r24, r24
    192e:	08 95       	ret
        }
if(uart_num==0)
    1930:	88 23       	and	r24, r24
    1932:	11 f0       	breq	.+4      	; 0x1938 <nrk_uart_data_ready+0x18>
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	08 95       	ret
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    1938:	80 91 c0 00 	lds	r24, 0x00C0
    193c:	88 1f       	adc	r24, r24
    193e:	88 27       	eor	r24, r24
    1940:	88 1f       	adc	r24, r24
        }
return 0;
}
    1942:	08 95       	ret

00001944 <getc1>:

char getc1(void){
        unsigned char tmp;
        UART1_WAIT_AND_RECEIVE(tmp);
    1944:	80 91 c8 00 	lds	r24, 0x00C8
    1948:	87 ff       	sbrs	r24, 7
    194a:	fc cf       	rjmp	.-8      	; 0x1944 <getc1>
    194c:	80 91 c8 00 	lds	r24, 0x00C8
    1950:	8f 77       	andi	r24, 0x7F	; 127
    1952:	80 93 c8 00 	sts	0x00C8, r24
    1956:	80 91 ce 00 	lds	r24, 0x00CE
        return tmp;
}
    195a:	08 95       	ret

0000195c <PORT_INIT>:
NRK_PIN( ADC_INPUT_6, ADC_INPUT_6, NRK_PORTF )
NRK_PIN( ADC_INPUT_7, ADC_INPUT_7, NRK_PORTF )

void PORT_INIT(void) 
{
        MCUCR |= BM(PUD); 
    195c:	85 b7       	in	r24, 0x35	; 53
    195e:	80 61       	ori	r24, 0x10	; 16
    1960:	85 bf       	out	0x35, r24	; 53
        DDRB  = BM(MOSI) | BM(SCK);  
    1962:	86 e0       	ldi	r24, 0x06	; 6
    1964:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
    1966:	87 e0       	ldi	r24, 0x07	; 7
    1968:	85 b9       	out	0x05, r24	; 5
        DDRC  = BM(CSN); 
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	87 b9       	out	0x07, r24	; 7
        PORTC = BM(CSN); 
    196e:	88 b9       	out	0x08, r24	; 8
        DDRE  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    1970:	8c e3       	ldi	r24, 0x3C	; 60
    1972:	8d b9       	out	0x0d, r24	; 13
        DDRD  = BM(UART1_TXD) | BM(DEBUG_2) | BM(DEBUG_3); 
    1974:	8b e0       	ldi	r24, 0x0B	; 11
    1976:	8a b9       	out	0x0a, r24	; 10
        PORTE  = BM(UART0_TXD) | BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    1978:	8e e3       	ldi	r24, 0x3E	; 62
    197a:	8e b9       	out	0x0e, r24	; 14
        DDRA  = BM(VREG_EN) | BM(RESET_N) | BM(DEBUG_0) | BM(DEBUG_1); 
    197c:	88 e7       	ldi	r24, 0x78	; 120
    197e:	81 b9       	out	0x01, r24	; 1
        PORTA = BM(RESET_N); 
    1980:	80 e4       	ldi	r24, 0x40	; 64
    1982:	82 b9       	out	0x02, r24	; 2
} 
    1984:	08 95       	ret

00001986 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    1986:	0e 94 ae 0c 	call	0x195c	; 0x195c <PORT_INIT>
SPI_INIT();
    198a:	80 e5       	ldi	r24, 0x50	; 80
    198c:	8c bd       	out	0x2c, r24	; 44
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	8d bd       	out	0x2d, r24	; 45
}
    1992:	08 95       	ret

00001994 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1994:	8f 3f       	cpi	r24, 0xFF	; 255
    1996:	09 f4       	brne	.+2      	; 0x199a <nrk_gpio_set+0x6>
    1998:	71 c0       	rjmp	.+226    	; 0x1a7c <nrk_gpio_set+0xe8>
        switch (pin & 0x07) {
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	27 70       	andi	r18, 0x07	; 7
    19a0:	30 70       	andi	r19, 0x00	; 0
    19a2:	22 30       	cpi	r18, 0x02	; 2
    19a4:	31 05       	cpc	r19, r1
    19a6:	89 f1       	breq	.+98     	; 0x1a0a <nrk_gpio_set+0x76>
    19a8:	23 30       	cpi	r18, 0x03	; 3
    19aa:	31 05       	cpc	r19, r1
    19ac:	44 f4       	brge	.+16     	; 0x19be <nrk_gpio_set+0x2a>
    19ae:	21 15       	cp	r18, r1
    19b0:	31 05       	cpc	r19, r1
    19b2:	89 f0       	breq	.+34     	; 0x19d6 <nrk_gpio_set+0x42>
    19b4:	21 30       	cpi	r18, 0x01	; 1
    19b6:	31 05       	cpc	r19, r1
    19b8:	09 f0       	breq	.+2      	; 0x19bc <nrk_gpio_set+0x28>
    19ba:	60 c0       	rjmp	.+192    	; 0x1a7c <nrk_gpio_set+0xe8>
    19bc:	1a c0       	rjmp	.+52     	; 0x19f2 <nrk_gpio_set+0x5e>
    19be:	24 30       	cpi	r18, 0x04	; 4
    19c0:	31 05       	cpc	r19, r1
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <nrk_gpio_set+0x32>
    19c4:	3e c0       	rjmp	.+124    	; 0x1a42 <nrk_gpio_set+0xae>
    19c6:	24 30       	cpi	r18, 0x04	; 4
    19c8:	31 05       	cpc	r19, r1
    19ca:	6c f1       	brlt	.+90     	; 0x1a26 <nrk_gpio_set+0x92>
    19cc:	25 30       	cpi	r18, 0x05	; 5
    19ce:	31 05       	cpc	r19, r1
    19d0:	09 f0       	breq	.+2      	; 0x19d4 <nrk_gpio_set+0x40>
    19d2:	54 c0       	rjmp	.+168    	; 0x1a7c <nrk_gpio_set+0xe8>
    19d4:	44 c0       	rjmp	.+136    	; 0x1a5e <nrk_gpio_set+0xca>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    19d6:	92 b1       	in	r25, 0x02	; 2
    19d8:	86 95       	lsr	r24
    19da:	86 95       	lsr	r24
    19dc:	86 95       	lsr	r24
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <nrk_gpio_set+0x54>
    19e4:	44 0f       	add	r20, r20
    19e6:	55 1f       	adc	r21, r21
    19e8:	8a 95       	dec	r24
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <nrk_gpio_set+0x50>
    19ec:	94 2b       	or	r25, r20
    19ee:	92 b9       	out	0x02, r25	; 2
    19f0:	43 c0       	rjmp	.+134    	; 0x1a78 <nrk_gpio_set+0xe4>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    19f2:	95 b1       	in	r25, 0x05	; 5
    19f4:	86 95       	lsr	r24
    19f6:	86 95       	lsr	r24
    19f8:	86 95       	lsr	r24
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <nrk_gpio_set+0x6c>
    19fc:	22 0f       	add	r18, r18
    19fe:	33 1f       	adc	r19, r19
    1a00:	8a 95       	dec	r24
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <nrk_gpio_set+0x68>
    1a04:	92 2b       	or	r25, r18
    1a06:	95 b9       	out	0x05, r25	; 5
    1a08:	37 c0       	rjmp	.+110    	; 0x1a78 <nrk_gpio_set+0xe4>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1a0a:	98 b1       	in	r25, 0x08	; 8
    1a0c:	86 95       	lsr	r24
    1a0e:	86 95       	lsr	r24
    1a10:	86 95       	lsr	r24
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <nrk_gpio_set+0x88>
    1a18:	44 0f       	add	r20, r20
    1a1a:	55 1f       	adc	r21, r21
    1a1c:	8a 95       	dec	r24
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <nrk_gpio_set+0x84>
    1a20:	94 2b       	or	r25, r20
    1a22:	98 b9       	out	0x08, r25	; 8
    1a24:	29 c0       	rjmp	.+82     	; 0x1a78 <nrk_gpio_set+0xe4>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1a26:	9b b1       	in	r25, 0x0b	; 11
    1a28:	86 95       	lsr	r24
    1a2a:	86 95       	lsr	r24
    1a2c:	86 95       	lsr	r24
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <nrk_gpio_set+0xa4>
    1a34:	44 0f       	add	r20, r20
    1a36:	55 1f       	adc	r21, r21
    1a38:	8a 95       	dec	r24
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <nrk_gpio_set+0xa0>
    1a3c:	94 2b       	or	r25, r20
    1a3e:	9b b9       	out	0x0b, r25	; 11
    1a40:	1b c0       	rjmp	.+54     	; 0x1a78 <nrk_gpio_set+0xe4>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1a42:	9e b1       	in	r25, 0x0e	; 14
    1a44:	86 95       	lsr	r24
    1a46:	86 95       	lsr	r24
    1a48:	86 95       	lsr	r24
    1a4a:	41 e0       	ldi	r20, 0x01	; 1
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <nrk_gpio_set+0xc0>
    1a50:	44 0f       	add	r20, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	8a 95       	dec	r24
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <nrk_gpio_set+0xbc>
    1a58:	94 2b       	or	r25, r20
    1a5a:	9e b9       	out	0x0e, r25	; 14
    1a5c:	0d c0       	rjmp	.+26     	; 0x1a78 <nrk_gpio_set+0xe4>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1a5e:	91 b3       	in	r25, 0x11	; 17
    1a60:	86 95       	lsr	r24
    1a62:	86 95       	lsr	r24
    1a64:	86 95       	lsr	r24
    1a66:	41 e0       	ldi	r20, 0x01	; 1
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <nrk_gpio_set+0xdc>
    1a6c:	44 0f       	add	r20, r20
    1a6e:	55 1f       	adc	r21, r21
    1a70:	8a 95       	dec	r24
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <nrk_gpio_set+0xd8>
    1a74:	94 2b       	or	r25, r20
    1a76:	91 bb       	out	0x11, r25	; 17
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	08 95       	ret
    1a7c:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    1a7e:	08 95       	ret

00001a80 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1a80:	8f 3f       	cpi	r24, 0xFF	; 255
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <nrk_gpio_clr+0x6>
    1a84:	7c c0       	rjmp	.+248    	; 0x1b7e <nrk_gpio_clr+0xfe>
        switch (pin & 0x07) {
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	27 70       	andi	r18, 0x07	; 7
    1a8c:	30 70       	andi	r19, 0x00	; 0
    1a8e:	22 30       	cpi	r18, 0x02	; 2
    1a90:	31 05       	cpc	r19, r1
    1a92:	a1 f1       	breq	.+104    	; 0x1afc <nrk_gpio_clr+0x7c>
    1a94:	23 30       	cpi	r18, 0x03	; 3
    1a96:	31 05       	cpc	r19, r1
    1a98:	44 f4       	brge	.+16     	; 0x1aaa <nrk_gpio_clr+0x2a>
    1a9a:	21 15       	cp	r18, r1
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	89 f0       	breq	.+34     	; 0x1ac2 <nrk_gpio_clr+0x42>
    1aa0:	21 30       	cpi	r18, 0x01	; 1
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <nrk_gpio_clr+0x28>
    1aa6:	6b c0       	rjmp	.+214    	; 0x1b7e <nrk_gpio_clr+0xfe>
    1aa8:	1c c0       	rjmp	.+56     	; 0x1ae2 <nrk_gpio_clr+0x62>
    1aaa:	24 30       	cpi	r18, 0x04	; 4
    1aac:	31 05       	cpc	r19, r1
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <nrk_gpio_clr+0x32>
    1ab0:	45 c0       	rjmp	.+138    	; 0x1b3c <nrk_gpio_clr+0xbc>
    1ab2:	24 30       	cpi	r18, 0x04	; 4
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	94 f1       	brlt	.+100    	; 0x1b1c <nrk_gpio_clr+0x9c>
    1ab8:	25 30       	cpi	r18, 0x05	; 5
    1aba:	31 05       	cpc	r19, r1
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <nrk_gpio_clr+0x40>
    1abe:	5f c0       	rjmp	.+190    	; 0x1b7e <nrk_gpio_clr+0xfe>
    1ac0:	4d c0       	rjmp	.+154    	; 0x1b5c <nrk_gpio_clr+0xdc>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1ac2:	32 b1       	in	r19, 0x02	; 2
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	26 95       	lsr	r18
    1ac8:	26 95       	lsr	r18
    1aca:	26 95       	lsr	r18
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <nrk_gpio_clr+0x56>
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	2a 95       	dec	r18
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <nrk_gpio_clr+0x52>
    1ada:	80 95       	com	r24
    1adc:	83 23       	and	r24, r19
    1ade:	82 b9       	out	0x02, r24	; 2
    1ae0:	4c c0       	rjmp	.+152    	; 0x1b7a <nrk_gpio_clr+0xfa>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1ae2:	95 b1       	in	r25, 0x05	; 5
    1ae4:	86 95       	lsr	r24
    1ae6:	86 95       	lsr	r24
    1ae8:	86 95       	lsr	r24
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <nrk_gpio_clr+0x70>
    1aec:	22 0f       	add	r18, r18
    1aee:	33 1f       	adc	r19, r19
    1af0:	8a 95       	dec	r24
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <nrk_gpio_clr+0x6c>
    1af4:	20 95       	com	r18
    1af6:	29 23       	and	r18, r25
    1af8:	25 b9       	out	0x05, r18	; 5
    1afa:	3f c0       	rjmp	.+126    	; 0x1b7a <nrk_gpio_clr+0xfa>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1afc:	38 b1       	in	r19, 0x08	; 8
    1afe:	28 2f       	mov	r18, r24
    1b00:	26 95       	lsr	r18
    1b02:	26 95       	lsr	r18
    1b04:	26 95       	lsr	r18
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <nrk_gpio_clr+0x90>
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	2a 95       	dec	r18
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <nrk_gpio_clr+0x8c>
    1b14:	80 95       	com	r24
    1b16:	83 23       	and	r24, r19
    1b18:	88 b9       	out	0x08, r24	; 8
    1b1a:	2f c0       	rjmp	.+94     	; 0x1b7a <nrk_gpio_clr+0xfa>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1b1c:	3b b1       	in	r19, 0x0b	; 11
    1b1e:	28 2f       	mov	r18, r24
    1b20:	26 95       	lsr	r18
    1b22:	26 95       	lsr	r18
    1b24:	26 95       	lsr	r18
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <nrk_gpio_clr+0xb0>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	2a 95       	dec	r18
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <nrk_gpio_clr+0xac>
    1b34:	80 95       	com	r24
    1b36:	83 23       	and	r24, r19
    1b38:	8b b9       	out	0x0b, r24	; 11
    1b3a:	1f c0       	rjmp	.+62     	; 0x1b7a <nrk_gpio_clr+0xfa>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1b3c:	3e b1       	in	r19, 0x0e	; 14
    1b3e:	28 2f       	mov	r18, r24
    1b40:	26 95       	lsr	r18
    1b42:	26 95       	lsr	r18
    1b44:	26 95       	lsr	r18
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <nrk_gpio_clr+0xd0>
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	2a 95       	dec	r18
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <nrk_gpio_clr+0xcc>
    1b54:	80 95       	com	r24
    1b56:	83 23       	and	r24, r19
    1b58:	8e b9       	out	0x0e, r24	; 14
    1b5a:	0f c0       	rjmp	.+30     	; 0x1b7a <nrk_gpio_clr+0xfa>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1b5c:	31 b3       	in	r19, 0x11	; 17
    1b5e:	28 2f       	mov	r18, r24
    1b60:	26 95       	lsr	r18
    1b62:	26 95       	lsr	r18
    1b64:	26 95       	lsr	r18
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <nrk_gpio_clr+0xf0>
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	2a 95       	dec	r18
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <nrk_gpio_clr+0xec>
    1b74:	80 95       	com	r24
    1b76:	83 23       	and	r24, r19
    1b78:	81 bb       	out	0x11, r24	; 17
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	08 95       	ret
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    1b80:	08 95       	ret

00001b82 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1b82:	8f 3f       	cpi	r24, 0xFF	; 255
    1b84:	91 f1       	breq	.+100    	; 0x1bea <nrk_gpio_get+0x68>
        switch (pin & 0x07) {
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	27 70       	andi	r18, 0x07	; 7
    1b8c:	30 70       	andi	r19, 0x00	; 0
    1b8e:	22 30       	cpi	r18, 0x02	; 2
    1b90:	31 05       	cpc	r19, r1
    1b92:	c1 f0       	breq	.+48     	; 0x1bc4 <nrk_gpio_get+0x42>
    1b94:	23 30       	cpi	r18, 0x03	; 3
    1b96:	31 05       	cpc	r19, r1
    1b98:	3c f4       	brge	.+14     	; 0x1ba8 <nrk_gpio_get+0x26>
    1b9a:	21 15       	cp	r18, r1
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	71 f0       	breq	.+28     	; 0x1bbc <nrk_gpio_get+0x3a>
    1ba0:	21 30       	cpi	r18, 0x01	; 1
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	11 f5       	brne	.+68     	; 0x1bea <nrk_gpio_get+0x68>
    1ba6:	0c c0       	rjmp	.+24     	; 0x1bc0 <nrk_gpio_get+0x3e>
    1ba8:	24 30       	cpi	r18, 0x04	; 4
    1baa:	31 05       	cpc	r19, r1
    1bac:	79 f0       	breq	.+30     	; 0x1bcc <nrk_gpio_get+0x4a>
    1bae:	24 30       	cpi	r18, 0x04	; 4
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	54 f0       	brlt	.+20     	; 0x1bc8 <nrk_gpio_get+0x46>
    1bb4:	25 30       	cpi	r18, 0x05	; 5
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	c1 f4       	brne	.+48     	; 0x1bea <nrk_gpio_get+0x68>
    1bba:	0a c0       	rjmp	.+20     	; 0x1bd0 <nrk_gpio_get+0x4e>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    1bbc:	20 b1       	in	r18, 0x00	; 0
    1bbe:	09 c0       	rjmp	.+18     	; 0x1bd2 <nrk_gpio_get+0x50>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    1bc0:	23 b1       	in	r18, 0x03	; 3
    1bc2:	07 c0       	rjmp	.+14     	; 0x1bd2 <nrk_gpio_get+0x50>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1bc4:	26 b1       	in	r18, 0x06	; 6
    1bc6:	05 c0       	rjmp	.+10     	; 0x1bd2 <nrk_gpio_get+0x50>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    1bc8:	29 b1       	in	r18, 0x09	; 9
    1bca:	03 c0       	rjmp	.+6      	; 0x1bd2 <nrk_gpio_get+0x50>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    1bcc:	2c b1       	in	r18, 0x0c	; 12
    1bce:	01 c0       	rjmp	.+2      	; 0x1bd2 <nrk_gpio_get+0x50>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    1bd0:	2f b1       	in	r18, 0x0f	; 15
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	86 95       	lsr	r24
    1bd6:	86 95       	lsr	r24
    1bd8:	86 95       	lsr	r24
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <nrk_gpio_get+0x5e>
    1bdc:	35 95       	asr	r19
    1bde:	27 95       	ror	r18
    1be0:	8a 95       	dec	r24
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <nrk_gpio_get+0x5a>
    1be4:	82 2f       	mov	r24, r18
    1be6:	81 70       	andi	r24, 0x01	; 1
    1be8:	08 95       	ret
    1bea:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    1bec:	08 95       	ret

00001bee <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1bee:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <nrk_gpio_toggle+0x6>
    1bf2:	f5 c0       	rjmp	.+490    	; 0x1dde <nrk_gpio_toggle+0x1f0>
        switch (pin & 0x07) {
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	27 70       	andi	r18, 0x07	; 7
    1bfa:	30 70       	andi	r19, 0x00	; 0
    1bfc:	22 30       	cpi	r18, 0x02	; 2
    1bfe:	31 05       	cpc	r19, r1
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <nrk_gpio_toggle+0x16>
    1c02:	58 c0       	rjmp	.+176    	; 0x1cb4 <nrk_gpio_toggle+0xc6>
    1c04:	23 30       	cpi	r18, 0x03	; 3
    1c06:	31 05       	cpc	r19, r1
    1c08:	44 f4       	brge	.+16     	; 0x1c1a <nrk_gpio_toggle+0x2c>
    1c0a:	21 15       	cp	r18, r1
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	91 f0       	breq	.+36     	; 0x1c34 <nrk_gpio_toggle+0x46>
    1c10:	21 30       	cpi	r18, 0x01	; 1
    1c12:	31 05       	cpc	r19, r1
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <nrk_gpio_toggle+0x2a>
    1c16:	e3 c0       	rjmp	.+454    	; 0x1dde <nrk_gpio_toggle+0x1f0>
    1c18:	32 c0       	rjmp	.+100    	; 0x1c7e <nrk_gpio_toggle+0x90>
    1c1a:	24 30       	cpi	r18, 0x04	; 4
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <nrk_gpio_toggle+0x34>
    1c20:	93 c0       	rjmp	.+294    	; 0x1d48 <nrk_gpio_toggle+0x15a>
    1c22:	24 30       	cpi	r18, 0x04	; 4
    1c24:	31 05       	cpc	r19, r1
    1c26:	0c f4       	brge	.+2      	; 0x1c2a <nrk_gpio_toggle+0x3c>
    1c28:	6a c0       	rjmp	.+212    	; 0x1cfe <nrk_gpio_toggle+0x110>
    1c2a:	25 30       	cpi	r18, 0x05	; 5
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <nrk_gpio_toggle+0x44>
    1c30:	d6 c0       	rjmp	.+428    	; 0x1dde <nrk_gpio_toggle+0x1f0>
    1c32:	af c0       	rjmp	.+350    	; 0x1d92 <nrk_gpio_toggle+0x1a4>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1c34:	90 b1       	in	r25, 0x00	; 0
    1c36:	86 95       	lsr	r24
    1c38:	86 95       	lsr	r24
    1c3a:	86 95       	lsr	r24
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	89 2f       	mov	r24, r25
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	02 2e       	mov	r0, r18
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <nrk_gpio_toggle+0x5c>
    1c46:	95 95       	asr	r25
    1c48:	87 95       	ror	r24
    1c4a:	0a 94       	dec	r0
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <nrk_gpio_toggle+0x58>
    1c4e:	80 fd       	sbrc	r24, 0
    1c50:	0a c0       	rjmp	.+20     	; 0x1c66 <nrk_gpio_toggle+0x78>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    1c52:	82 b1       	in	r24, 0x02	; 2
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <nrk_gpio_toggle+0x70>
    1c5a:	44 0f       	add	r20, r20
    1c5c:	55 1f       	adc	r21, r21
    1c5e:	2a 95       	dec	r18
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <nrk_gpio_toggle+0x6c>
    1c62:	84 2b       	or	r24, r20
    1c64:	0a c0       	rjmp	.+20     	; 0x1c7a <nrk_gpio_toggle+0x8c>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    1c66:	32 b1       	in	r19, 0x02	; 2
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <nrk_gpio_toggle+0x84>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	2a 95       	dec	r18
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <nrk_gpio_toggle+0x80>
    1c76:	80 95       	com	r24
    1c78:	83 23       	and	r24, r19
    1c7a:	82 b9       	out	0x02, r24	; 2
    1c7c:	ae c0       	rjmp	.+348    	; 0x1dda <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1c7e:	43 b1       	in	r20, 0x03	; 3
    1c80:	86 95       	lsr	r24
    1c82:	86 95       	lsr	r24
    1c84:	86 95       	lsr	r24
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	08 2e       	mov	r0, r24
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <nrk_gpio_toggle+0xa2>
    1c8c:	55 95       	asr	r21
    1c8e:	47 95       	ror	r20
    1c90:	0a 94       	dec	r0
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <nrk_gpio_toggle+0x9e>
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <nrk_gpio_toggle+0xac>
    1c96:	22 0f       	add	r18, r18
    1c98:	33 1f       	adc	r19, r19
    1c9a:	8a 95       	dec	r24
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <nrk_gpio_toggle+0xa8>
    1c9e:	40 fd       	sbrc	r20, 0
    1ca0:	04 c0       	rjmp	.+8      	; 0x1caa <nrk_gpio_toggle+0xbc>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1ca2:	95 b1       	in	r25, 0x05	; 5
    1ca4:	92 2b       	or	r25, r18
    1ca6:	95 b9       	out	0x05, r25	; 5
    1ca8:	98 c0       	rjmp	.+304    	; 0x1dda <nrk_gpio_toggle+0x1ec>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    1caa:	85 b1       	in	r24, 0x05	; 5
    1cac:	20 95       	com	r18
    1cae:	28 23       	and	r18, r24
    1cb0:	25 b9       	out	0x05, r18	; 5
    1cb2:	93 c0       	rjmp	.+294    	; 0x1dda <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1cb4:	96 b1       	in	r25, 0x06	; 6
    1cb6:	86 95       	lsr	r24
    1cb8:	86 95       	lsr	r24
    1cba:	86 95       	lsr	r24
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	89 2f       	mov	r24, r25
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 2e       	mov	r0, r18
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <nrk_gpio_toggle+0xdc>
    1cc6:	95 95       	asr	r25
    1cc8:	87 95       	ror	r24
    1cca:	0a 94       	dec	r0
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <nrk_gpio_toggle+0xd8>
    1cce:	80 fd       	sbrc	r24, 0
    1cd0:	0a c0       	rjmp	.+20     	; 0x1ce6 <nrk_gpio_toggle+0xf8>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1cd2:	88 b1       	in	r24, 0x08	; 8
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	50 e0       	ldi	r21, 0x00	; 0
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <nrk_gpio_toggle+0xf0>
    1cda:	44 0f       	add	r20, r20
    1cdc:	55 1f       	adc	r21, r21
    1cde:	2a 95       	dec	r18
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <nrk_gpio_toggle+0xec>
    1ce2:	84 2b       	or	r24, r20
    1ce4:	0a c0       	rjmp	.+20     	; 0x1cfa <nrk_gpio_toggle+0x10c>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    1ce6:	38 b1       	in	r19, 0x08	; 8
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <nrk_gpio_toggle+0x104>
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	2a 95       	dec	r18
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <nrk_gpio_toggle+0x100>
    1cf6:	80 95       	com	r24
    1cf8:	83 23       	and	r24, r19
    1cfa:	88 b9       	out	0x08, r24	; 8
    1cfc:	6e c0       	rjmp	.+220    	; 0x1dda <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1cfe:	99 b1       	in	r25, 0x09	; 9
    1d00:	86 95       	lsr	r24
    1d02:	86 95       	lsr	r24
    1d04:	86 95       	lsr	r24
    1d06:	28 2f       	mov	r18, r24
    1d08:	89 2f       	mov	r24, r25
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <nrk_gpio_toggle+0x126>
    1d10:	95 95       	asr	r25
    1d12:	87 95       	ror	r24
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <nrk_gpio_toggle+0x122>
    1d18:	80 fd       	sbrc	r24, 0
    1d1a:	0a c0       	rjmp	.+20     	; 0x1d30 <nrk_gpio_toggle+0x142>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1d1c:	8b b1       	in	r24, 0x0b	; 11
    1d1e:	41 e0       	ldi	r20, 0x01	; 1
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <nrk_gpio_toggle+0x13a>
    1d24:	44 0f       	add	r20, r20
    1d26:	55 1f       	adc	r21, r21
    1d28:	2a 95       	dec	r18
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <nrk_gpio_toggle+0x136>
    1d2c:	84 2b       	or	r24, r20
    1d2e:	0a c0       	rjmp	.+20     	; 0x1d44 <nrk_gpio_toggle+0x156>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    1d30:	3b b1       	in	r19, 0x0b	; 11
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <nrk_gpio_toggle+0x14e>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	2a 95       	dec	r18
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <nrk_gpio_toggle+0x14a>
    1d40:	80 95       	com	r24
    1d42:	83 23       	and	r24, r19
    1d44:	8b b9       	out	0x0b, r24	; 11
    1d46:	49 c0       	rjmp	.+146    	; 0x1dda <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    1d48:	9c b1       	in	r25, 0x0c	; 12
    1d4a:	86 95       	lsr	r24
    1d4c:	86 95       	lsr	r24
    1d4e:	86 95       	lsr	r24
    1d50:	28 2f       	mov	r18, r24
    1d52:	89 2f       	mov	r24, r25
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	02 2e       	mov	r0, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <nrk_gpio_toggle+0x170>
    1d5a:	95 95       	asr	r25
    1d5c:	87 95       	ror	r24
    1d5e:	0a 94       	dec	r0
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <nrk_gpio_toggle+0x16c>
    1d62:	80 fd       	sbrc	r24, 0
    1d64:	0a c0       	rjmp	.+20     	; 0x1d7a <nrk_gpio_toggle+0x18c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    1d66:	8e b1       	in	r24, 0x0e	; 14
    1d68:	41 e0       	ldi	r20, 0x01	; 1
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <nrk_gpio_toggle+0x184>
    1d6e:	44 0f       	add	r20, r20
    1d70:	55 1f       	adc	r21, r21
    1d72:	2a 95       	dec	r18
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <nrk_gpio_toggle+0x180>
    1d76:	84 2b       	or	r24, r20
    1d78:	0a c0       	rjmp	.+20     	; 0x1d8e <nrk_gpio_toggle+0x1a0>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    1d7a:	3e b1       	in	r19, 0x0e	; 14
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <nrk_gpio_toggle+0x198>
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	2a 95       	dec	r18
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <nrk_gpio_toggle+0x194>
    1d8a:	80 95       	com	r24
    1d8c:	83 23       	and	r24, r19
    1d8e:	8e b9       	out	0x0e, r24	; 14
    1d90:	24 c0       	rjmp	.+72     	; 0x1dda <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1d92:	9f b1       	in	r25, 0x0f	; 15
    1d94:	86 95       	lsr	r24
    1d96:	86 95       	lsr	r24
    1d98:	86 95       	lsr	r24
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	89 2f       	mov	r24, r25
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	02 2e       	mov	r0, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <nrk_gpio_toggle+0x1ba>
    1da4:	95 95       	asr	r25
    1da6:	87 95       	ror	r24
    1da8:	0a 94       	dec	r0
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <nrk_gpio_toggle+0x1b6>
    1dac:	80 fd       	sbrc	r24, 0
    1dae:	0a c0       	rjmp	.+20     	; 0x1dc4 <nrk_gpio_toggle+0x1d6>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1db0:	81 b3       	in	r24, 0x11	; 17
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <nrk_gpio_toggle+0x1ce>
    1db8:	44 0f       	add	r20, r20
    1dba:	55 1f       	adc	r21, r21
    1dbc:	2a 95       	dec	r18
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <nrk_gpio_toggle+0x1ca>
    1dc0:	84 2b       	or	r24, r20
    1dc2:	0a c0       	rjmp	.+20     	; 0x1dd8 <nrk_gpio_toggle+0x1ea>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    1dc4:	31 b3       	in	r19, 0x11	; 17
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <nrk_gpio_toggle+0x1e2>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	2a 95       	dec	r18
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <nrk_gpio_toggle+0x1de>
    1dd4:	80 95       	com	r24
    1dd6:	83 23       	and	r24, r19
    1dd8:	81 bb       	out	0x11, r24	; 17
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	08 95       	ret
    1dde:	8f ef       	ldi	r24, 0xFF	; 255
                        }
                        break;
                default: return -1;
        }
        return 1;
}
    1de0:	08 95       	ret

00001de2 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1de2:	8f 3f       	cpi	r24, 0xFF	; 255
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <nrk_gpio_direction+0x6>
    1de6:	f7 c0       	rjmp	.+494    	; 0x1fd6 <nrk_gpio_direction+0x1f4>
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
        if (pin_direction == NRK_PIN_INPUT) {
    1dec:	66 23       	and	r22, r22
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <nrk_gpio_direction+0x10>
    1df0:	83 c0       	rjmp	.+262    	; 0x1ef8 <nrk_gpio_direction+0x116>
                switch (pin & 0x07) {
    1df2:	27 70       	andi	r18, 0x07	; 7
    1df4:	30 70       	andi	r19, 0x00	; 0
    1df6:	22 30       	cpi	r18, 0x02	; 2
    1df8:	31 05       	cpc	r19, r1
    1dfa:	d9 f1       	breq	.+118    	; 0x1e72 <nrk_gpio_direction+0x90>
    1dfc:	23 30       	cpi	r18, 0x03	; 3
    1dfe:	31 05       	cpc	r19, r1
    1e00:	44 f4       	brge	.+16     	; 0x1e12 <nrk_gpio_direction+0x30>
    1e02:	21 15       	cp	r18, r1
    1e04:	31 05       	cpc	r19, r1
    1e06:	89 f0       	breq	.+34     	; 0x1e2a <nrk_gpio_direction+0x48>
    1e08:	21 30       	cpi	r18, 0x01	; 1
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <nrk_gpio_direction+0x2e>
    1e0e:	e3 c0       	rjmp	.+454    	; 0x1fd6 <nrk_gpio_direction+0x1f4>
    1e10:	1f c0       	rjmp	.+62     	; 0x1e50 <nrk_gpio_direction+0x6e>
    1e12:	24 30       	cpi	r18, 0x04	; 4
    1e14:	31 05       	cpc	r19, r1
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <nrk_gpio_direction+0x38>
    1e18:	4c c0       	rjmp	.+152    	; 0x1eb2 <nrk_gpio_direction+0xd0>
    1e1a:	24 30       	cpi	r18, 0x04	; 4
    1e1c:	31 05       	cpc	r19, r1
    1e1e:	cc f1       	brlt	.+114    	; 0x1e92 <nrk_gpio_direction+0xb0>
    1e20:	25 30       	cpi	r18, 0x05	; 5
    1e22:	31 05       	cpc	r19, r1
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <nrk_gpio_direction+0x46>
    1e26:	d7 c0       	rjmp	.+430    	; 0x1fd6 <nrk_gpio_direction+0x1f4>
    1e28:	54 c0       	rjmp	.+168    	; 0x1ed2 <nrk_gpio_direction+0xf0>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    1e2a:	91 b1       	in	r25, 0x01	; 1
    1e2c:	86 95       	lsr	r24
    1e2e:	86 95       	lsr	r24
    1e30:	86 95       	lsr	r24
    1e32:	21 e0       	ldi	r18, 0x01	; 1
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <nrk_gpio_direction+0x5a>
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	8a 95       	dec	r24
    1e3e:	e2 f7       	brpl	.-8      	; 0x1e38 <nrk_gpio_direction+0x56>
    1e40:	82 2f       	mov	r24, r18
    1e42:	80 95       	com	r24
    1e44:	89 23       	and	r24, r25
    1e46:	81 b9       	out	0x01, r24	; 1
                                PORTA |= BM((pin & 0xF8) >> 3); 
    1e48:	82 b1       	in	r24, 0x02	; 2
    1e4a:	82 2b       	or	r24, r18
    1e4c:	82 b9       	out	0x02, r24	; 2
    1e4e:	c1 c0       	rjmp	.+386    	; 0x1fd2 <nrk_gpio_direction+0x1f0>
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    1e50:	44 b1       	in	r20, 0x04	; 4
    1e52:	86 95       	lsr	r24
    1e54:	86 95       	lsr	r24
    1e56:	86 95       	lsr	r24
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <nrk_gpio_direction+0x7c>
    1e5a:	22 0f       	add	r18, r18
    1e5c:	33 1f       	adc	r19, r19
    1e5e:	8a 95       	dec	r24
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <nrk_gpio_direction+0x78>
    1e62:	92 2f       	mov	r25, r18
    1e64:	90 95       	com	r25
    1e66:	94 23       	and	r25, r20
    1e68:	94 b9       	out	0x04, r25	; 4
                                PORTB |= BM((pin & 0xF8) >> 3); 
    1e6a:	95 b1       	in	r25, 0x05	; 5
    1e6c:	92 2b       	or	r25, r18
    1e6e:	95 b9       	out	0x05, r25	; 5
    1e70:	b0 c0       	rjmp	.+352    	; 0x1fd2 <nrk_gpio_direction+0x1f0>
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    1e72:	97 b1       	in	r25, 0x07	; 7
    1e74:	86 95       	lsr	r24
    1e76:	86 95       	lsr	r24
    1e78:	86 95       	lsr	r24
    1e7a:	21 e0       	ldi	r18, 0x01	; 1
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <nrk_gpio_direction+0xa2>
    1e80:	22 0f       	add	r18, r18
    1e82:	33 1f       	adc	r19, r19
    1e84:	8a 95       	dec	r24
    1e86:	e2 f7       	brpl	.-8      	; 0x1e80 <nrk_gpio_direction+0x9e>
    1e88:	82 2f       	mov	r24, r18
    1e8a:	80 95       	com	r24
    1e8c:	89 23       	and	r24, r25
    1e8e:	87 b9       	out	0x07, r24	; 7
    1e90:	2f c0       	rjmp	.+94     	; 0x1ef0 <nrk_gpio_direction+0x10e>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    1e92:	9a b1       	in	r25, 0x0a	; 10
    1e94:	86 95       	lsr	r24
    1e96:	86 95       	lsr	r24
    1e98:	86 95       	lsr	r24
    1e9a:	21 e0       	ldi	r18, 0x01	; 1
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <nrk_gpio_direction+0xc2>
    1ea0:	22 0f       	add	r18, r18
    1ea2:	33 1f       	adc	r19, r19
    1ea4:	8a 95       	dec	r24
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <nrk_gpio_direction+0xbe>
    1ea8:	82 2f       	mov	r24, r18
    1eaa:	80 95       	com	r24
    1eac:	89 23       	and	r24, r25
    1eae:	8a b9       	out	0x0a, r24	; 10
    1eb0:	1f c0       	rjmp	.+62     	; 0x1ef0 <nrk_gpio_direction+0x10e>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    1eb2:	9d b1       	in	r25, 0x0d	; 13
    1eb4:	86 95       	lsr	r24
    1eb6:	86 95       	lsr	r24
    1eb8:	86 95       	lsr	r24
    1eba:	21 e0       	ldi	r18, 0x01	; 1
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <nrk_gpio_direction+0xe2>
    1ec0:	22 0f       	add	r18, r18
    1ec2:	33 1f       	adc	r19, r19
    1ec4:	8a 95       	dec	r24
    1ec6:	e2 f7       	brpl	.-8      	; 0x1ec0 <nrk_gpio_direction+0xde>
    1ec8:	82 2f       	mov	r24, r18
    1eca:	80 95       	com	r24
    1ecc:	89 23       	and	r24, r25
    1ece:	8d b9       	out	0x0d, r24	; 13
    1ed0:	0f c0       	rjmp	.+30     	; 0x1ef0 <nrk_gpio_direction+0x10e>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    1ed2:	90 b3       	in	r25, 0x10	; 16
    1ed4:	86 95       	lsr	r24
    1ed6:	86 95       	lsr	r24
    1ed8:	86 95       	lsr	r24
    1eda:	21 e0       	ldi	r18, 0x01	; 1
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <nrk_gpio_direction+0x102>
    1ee0:	22 0f       	add	r18, r18
    1ee2:	33 1f       	adc	r19, r19
    1ee4:	8a 95       	dec	r24
    1ee6:	e2 f7       	brpl	.-8      	; 0x1ee0 <nrk_gpio_direction+0xfe>
    1ee8:	82 2f       	mov	r24, r18
    1eea:	80 95       	com	r24
    1eec:	89 23       	and	r24, r25
    1eee:	80 bb       	out	0x10, r24	; 16
                                PORTB |= BM((pin & 0xF8) >> 3); 
    1ef0:	85 b1       	in	r24, 0x05	; 5
    1ef2:	82 2b       	or	r24, r18
    1ef4:	85 b9       	out	0x05, r24	; 5
    1ef6:	6d c0       	rjmp	.+218    	; 0x1fd2 <nrk_gpio_direction+0x1f0>
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    1ef8:	27 70       	andi	r18, 0x07	; 7
    1efa:	30 70       	andi	r19, 0x00	; 0
    1efc:	22 30       	cpi	r18, 0x02	; 2
    1efe:	31 05       	cpc	r19, r1
    1f00:	89 f1       	breq	.+98     	; 0x1f64 <nrk_gpio_direction+0x182>
    1f02:	23 30       	cpi	r18, 0x03	; 3
    1f04:	31 05       	cpc	r19, r1
    1f06:	44 f4       	brge	.+16     	; 0x1f18 <nrk_gpio_direction+0x136>
    1f08:	21 15       	cp	r18, r1
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	89 f0       	breq	.+34     	; 0x1f30 <nrk_gpio_direction+0x14e>
    1f0e:	21 30       	cpi	r18, 0x01	; 1
    1f10:	31 05       	cpc	r19, r1
    1f12:	09 f0       	breq	.+2      	; 0x1f16 <nrk_gpio_direction+0x134>
    1f14:	60 c0       	rjmp	.+192    	; 0x1fd6 <nrk_gpio_direction+0x1f4>
    1f16:	1a c0       	rjmp	.+52     	; 0x1f4c <nrk_gpio_direction+0x16a>
    1f18:	24 30       	cpi	r18, 0x04	; 4
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <nrk_gpio_direction+0x13e>
    1f1e:	3e c0       	rjmp	.+124    	; 0x1f9c <nrk_gpio_direction+0x1ba>
    1f20:	24 30       	cpi	r18, 0x04	; 4
    1f22:	31 05       	cpc	r19, r1
    1f24:	6c f1       	brlt	.+90     	; 0x1f80 <nrk_gpio_direction+0x19e>
    1f26:	25 30       	cpi	r18, 0x05	; 5
    1f28:	31 05       	cpc	r19, r1
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <nrk_gpio_direction+0x14c>
    1f2c:	54 c0       	rjmp	.+168    	; 0x1fd6 <nrk_gpio_direction+0x1f4>
    1f2e:	44 c0       	rjmp	.+136    	; 0x1fb8 <nrk_gpio_direction+0x1d6>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    1f30:	91 b1       	in	r25, 0x01	; 1
    1f32:	86 95       	lsr	r24
    1f34:	86 95       	lsr	r24
    1f36:	86 95       	lsr	r24
    1f38:	21 e0       	ldi	r18, 0x01	; 1
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <nrk_gpio_direction+0x160>
    1f3e:	22 0f       	add	r18, r18
    1f40:	33 1f       	adc	r19, r19
    1f42:	8a 95       	dec	r24
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <nrk_gpio_direction+0x15c>
    1f46:	92 2b       	or	r25, r18
    1f48:	91 b9       	out	0x01, r25	; 1
    1f4a:	43 c0       	rjmp	.+134    	; 0x1fd2 <nrk_gpio_direction+0x1f0>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    1f4c:	94 b1       	in	r25, 0x04	; 4
    1f4e:	86 95       	lsr	r24
    1f50:	86 95       	lsr	r24
    1f52:	86 95       	lsr	r24
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <nrk_gpio_direction+0x178>
    1f56:	22 0f       	add	r18, r18
    1f58:	33 1f       	adc	r19, r19
    1f5a:	8a 95       	dec	r24
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <nrk_gpio_direction+0x174>
    1f5e:	92 2b       	or	r25, r18
    1f60:	94 b9       	out	0x04, r25	; 4
    1f62:	37 c0       	rjmp	.+110    	; 0x1fd2 <nrk_gpio_direction+0x1f0>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    1f64:	97 b1       	in	r25, 0x07	; 7
    1f66:	86 95       	lsr	r24
    1f68:	86 95       	lsr	r24
    1f6a:	86 95       	lsr	r24
    1f6c:	21 e0       	ldi	r18, 0x01	; 1
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <nrk_gpio_direction+0x194>
    1f72:	22 0f       	add	r18, r18
    1f74:	33 1f       	adc	r19, r19
    1f76:	8a 95       	dec	r24
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <nrk_gpio_direction+0x190>
    1f7a:	92 2b       	or	r25, r18
    1f7c:	97 b9       	out	0x07, r25	; 7
    1f7e:	29 c0       	rjmp	.+82     	; 0x1fd2 <nrk_gpio_direction+0x1f0>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    1f80:	9a b1       	in	r25, 0x0a	; 10
    1f82:	86 95       	lsr	r24
    1f84:	86 95       	lsr	r24
    1f86:	86 95       	lsr	r24
    1f88:	21 e0       	ldi	r18, 0x01	; 1
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <nrk_gpio_direction+0x1b0>
    1f8e:	22 0f       	add	r18, r18
    1f90:	33 1f       	adc	r19, r19
    1f92:	8a 95       	dec	r24
    1f94:	e2 f7       	brpl	.-8      	; 0x1f8e <nrk_gpio_direction+0x1ac>
    1f96:	92 2b       	or	r25, r18
    1f98:	9a b9       	out	0x0a, r25	; 10
    1f9a:	1b c0       	rjmp	.+54     	; 0x1fd2 <nrk_gpio_direction+0x1f0>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    1f9c:	9d b1       	in	r25, 0x0d	; 13
    1f9e:	86 95       	lsr	r24
    1fa0:	86 95       	lsr	r24
    1fa2:	86 95       	lsr	r24
    1fa4:	21 e0       	ldi	r18, 0x01	; 1
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <nrk_gpio_direction+0x1cc>
    1faa:	22 0f       	add	r18, r18
    1fac:	33 1f       	adc	r19, r19
    1fae:	8a 95       	dec	r24
    1fb0:	e2 f7       	brpl	.-8      	; 0x1faa <nrk_gpio_direction+0x1c8>
    1fb2:	92 2b       	or	r25, r18
    1fb4:	9d b9       	out	0x0d, r25	; 13
    1fb6:	0d c0       	rjmp	.+26     	; 0x1fd2 <nrk_gpio_direction+0x1f0>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    1fb8:	90 b3       	in	r25, 0x10	; 16
    1fba:	86 95       	lsr	r24
    1fbc:	86 95       	lsr	r24
    1fbe:	86 95       	lsr	r24
    1fc0:	21 e0       	ldi	r18, 0x01	; 1
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <nrk_gpio_direction+0x1e8>
    1fc6:	22 0f       	add	r18, r18
    1fc8:	33 1f       	adc	r19, r19
    1fca:	8a 95       	dec	r24
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <nrk_gpio_direction+0x1e4>
    1fce:	92 2b       	or	r25, r18
    1fd0:	90 bb       	out	0x10, r25	; 16
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	08 95       	ret
    1fd6:	8f ef       	ldi	r24, 0xFF	; 255
                        default: return -1;
                }
        }
        return 1;
}
    1fd8:	08 95       	ret

00001fda <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    1fda:	88 23       	and	r24, r24
    1fdc:	11 f0       	breq	.+4      	; 0x1fe2 <nrk_get_button+0x8>
    1fde:	8f ef       	ldi	r24, 0xFF	; 255
    1fe0:	08 95       	ret
	 return( !(PINA & BM(BUTTON))); 
    1fe2:	80 b1       	in	r24, 0x00	; 0
    1fe4:	80 95       	com	r24
    1fe6:	88 1f       	adc	r24, r24
    1fe8:	88 27       	eor	r24, r24
    1fea:	88 1f       	adc	r24, r24
	} 
return -1;
}
    1fec:	08 95       	ret

00001fee <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	11 f4       	brne	.+4      	; 0x1ff6 <nrk_led_toggle+0x8>
    1ff2:	84 e1       	ldi	r24, 0x14	; 20
    1ff4:	09 c0       	rjmp	.+18     	; 0x2008 <nrk_led_toggle+0x1a>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	11 f4       	brne	.+4      	; 0x2000 <nrk_led_toggle+0x12>
    1ffc:	8c e1       	ldi	r24, 0x1C	; 28
    1ffe:	04 c0       	rjmp	.+8      	; 0x2008 <nrk_led_toggle+0x1a>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    2000:	82 30       	cpi	r24, 0x02	; 2
    2002:	91 05       	cpc	r25, r1
    2004:	29 f4       	brne	.+10     	; 0x2010 <nrk_led_toggle+0x22>
    2006:	84 e2       	ldi	r24, 0x24	; 36
    2008:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <nrk_gpio_toggle>
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	08 95       	ret
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    2010:	83 30       	cpi	r24, 0x03	; 3
    2012:	91 05       	cpc	r25, r1
    2014:	11 f0       	breq	.+4      	; 0x201a <nrk_led_toggle+0x2c>
    2016:	8f ef       	ldi	r24, 0xFF	; 255
    2018:	08 95       	ret
    201a:	8c e2       	ldi	r24, 0x2C	; 44
    201c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <nrk_gpio_toggle>
    2020:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    2022:	08 95       	ret

00002024 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	11 f4       	brne	.+4      	; 0x202c <nrk_led_clr+0x8>
    2028:	84 e1       	ldi	r24, 0x14	; 20
    202a:	09 c0       	rjmp	.+18     	; 0x203e <nrk_led_clr+0x1a>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	91 05       	cpc	r25, r1
    2030:	11 f4       	brne	.+4      	; 0x2036 <nrk_led_clr+0x12>
    2032:	8c e1       	ldi	r24, 0x1C	; 28
    2034:	04 c0       	rjmp	.+8      	; 0x203e <nrk_led_clr+0x1a>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    2036:	82 30       	cpi	r24, 0x02	; 2
    2038:	91 05       	cpc	r25, r1
    203a:	29 f4       	brne	.+10     	; 0x2046 <nrk_led_clr+0x22>
    203c:	84 e2       	ldi	r24, 0x24	; 36
    203e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <nrk_gpio_set>
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	08 95       	ret
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    2046:	83 30       	cpi	r24, 0x03	; 3
    2048:	91 05       	cpc	r25, r1
    204a:	11 f0       	breq	.+4      	; 0x2050 <nrk_led_clr+0x2c>
    204c:	8f ef       	ldi	r24, 0xFF	; 255
    204e:	08 95       	ret
    2050:	8c e2       	ldi	r24, 0x2C	; 44
    2052:	0e 94 ca 0c 	call	0x1994	; 0x1994 <nrk_gpio_set>
    2056:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    2058:	08 95       	ret

0000205a <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	11 f4       	brne	.+4      	; 0x2062 <nrk_led_set+0x8>
    205e:	84 e1       	ldi	r24, 0x14	; 20
    2060:	09 c0       	rjmp	.+18     	; 0x2074 <nrk_led_set+0x1a>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    2062:	81 30       	cpi	r24, 0x01	; 1
    2064:	91 05       	cpc	r25, r1
    2066:	11 f4       	brne	.+4      	; 0x206c <nrk_led_set+0x12>
    2068:	8c e1       	ldi	r24, 0x1C	; 28
    206a:	04 c0       	rjmp	.+8      	; 0x2074 <nrk_led_set+0x1a>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    206c:	82 30       	cpi	r24, 0x02	; 2
    206e:	91 05       	cpc	r25, r1
    2070:	29 f4       	brne	.+10     	; 0x207c <nrk_led_set+0x22>
    2072:	84 e2       	ldi	r24, 0x24	; 36
    2074:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <nrk_gpio_clr>
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	08 95       	ret
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    207c:	83 30       	cpi	r24, 0x03	; 3
    207e:	91 05       	cpc	r25, r1
    2080:	11 f0       	breq	.+4      	; 0x2086 <nrk_led_set+0x2c>
    2082:	8f ef       	ldi	r24, 0xFF	; 255
    2084:	08 95       	ret
    2086:	8c e2       	ldi	r24, 0x2C	; 44
    2088:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <nrk_gpio_clr>
    208c:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    208e:	08 95       	ret

00002090 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    2090:	88 23       	and	r24, r24
    2092:	19 f0       	breq	.+6      	; 0x209a <nrk_gpio_pullups+0xa>
    2094:	85 b7       	in	r24, 0x35	; 53
    2096:	8f 7e       	andi	r24, 0xEF	; 239
    2098:	02 c0       	rjmp	.+4      	; 0x209e <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    209a:	85 b7       	in	r24, 0x35	; 53
    209c:	80 61       	ori	r24, 0x10	; 16
    209e:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	08 95       	ret

000020a4 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    20a4:	90 91 c0 00 	lds	r25, 0x00C0
    20a8:	95 ff       	sbrs	r25, 5
    20aa:	fc cf       	rjmp	.-8      	; 0x20a4 <putc0>
    20ac:	90 91 c0 00 	lds	r25, 0x00C0
    20b0:	9f 7d       	andi	r25, 0xDF	; 223
    20b2:	90 93 c0 00 	sts	0x00C0, r25
    20b6:	80 93 c6 00 	sts	0x00C6, r24
}
    20ba:	08 95       	ret

000020bc <putc1>:

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    20bc:	90 91 c8 00 	lds	r25, 0x00C8
    20c0:	95 ff       	sbrs	r25, 5
    20c2:	fc cf       	rjmp	.-8      	; 0x20bc <putc1>
    20c4:	80 93 ce 00 	sts	0x00CE, r24
}
    20c8:	08 95       	ret

000020ca <setup_uart0>:

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    20ca:	90 93 c5 00 	sts	0x00C5, r25
    20ce:	80 93 c4 00 	sts	0x00C4, r24
    20d2:	86 e0       	ldi	r24, 0x06	; 6
    20d4:	80 93 c2 00 	sts	0x00C2, r24
    20d8:	e1 ec       	ldi	r30, 0xC1	; 193
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	8b 7f       	andi	r24, 0xFB	; 251
    20e0:	80 83       	st	Z, r24
    20e2:	a0 ec       	ldi	r26, 0xC0	; 192
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	8c 91       	ld	r24, X
    20e8:	82 60       	ori	r24, 0x02	; 2
    20ea:	8c 93       	st	X, r24
ENABLE_UART0();
    20ec:	80 81       	ld	r24, Z
    20ee:	88 61       	ori	r24, 0x18	; 24
    20f0:	80 83       	st	Z, r24
}
    20f2:	08 95       	ret

000020f4 <setup_uart1>:

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    20f4:	90 93 cd 00 	sts	0x00CD, r25
    20f8:	80 93 cc 00 	sts	0x00CC, r24
    20fc:	86 e0       	ldi	r24, 0x06	; 6
    20fe:	80 93 ca 00 	sts	0x00CA, r24
    2102:	e9 ec       	ldi	r30, 0xC9	; 201
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	8b 7f       	andi	r24, 0xFB	; 251
    210a:	80 83       	st	Z, r24
    210c:	a8 ec       	ldi	r26, 0xC8	; 200
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	8c 91       	ld	r24, X
    2112:	82 60       	ori	r24, 0x02	; 2
    2114:	8c 93       	st	X, r24
ENABLE_UART1();
    2116:	80 81       	ld	r24, Z
    2118:	88 61       	ori	r24, 0x18	; 24
    211a:	80 83       	st	Z, r24
}
    211c:	08 95       	ret

0000211e <getc0>:


/* get one char from uart */
char getc0(void){
	unsigned char tmp;
	UART0_WAIT_AND_RECEIVE(tmp);
    211e:	80 91 c0 00 	lds	r24, 0x00C0
    2122:	87 ff       	sbrs	r24, 7
    2124:	fc cf       	rjmp	.-8      	; 0x211e <getc0>
    2126:	80 91 c0 00 	lds	r24, 0x00C0
    212a:	8f 77       	andi	r24, 0x7F	; 127
    212c:	80 93 c0 00 	sts	0x00C0, r24
    2130:	80 91 c6 00 	lds	r24, 0x00C6
	return tmp;
}
    2134:	08 95       	ret

00002136 <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29

  setup_uart1(baudrate);
    213e:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <setup_uart1>
  //setup_uart0(baudrate);

  stdout = fdevopen( (void *)putc1, (void *)getc1);
    2142:	0e e5       	ldi	r16, 0x5E	; 94
    2144:	10 e1       	ldi	r17, 0x10	; 16
    2146:	c2 ea       	ldi	r28, 0xA2	; 162
    2148:	dc e0       	ldi	r29, 0x0C	; 12
    214a:	c8 01       	movw	r24, r16
    214c:	be 01       	movw	r22, r28
    214e:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fdevopen>
    2152:	90 93 a9 05 	sts	0x05A9, r25
    2156:	80 93 a8 05 	sts	0x05A8, r24
  stdin = fdevopen( (void *)putc1, (void *)getc1);
    215a:	c8 01       	movw	r24, r16
    215c:	be 01       	movw	r22, r28
    215e:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fdevopen>
    2162:	90 93 a7 05 	sts	0x05A7, r25
    2166:	80 93 a6 05 	sts	0x05A6, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART1_RX_INT();
#endif

}
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	1f 91       	pop	r17
    2170:	0f 91       	pop	r16
    2172:	08 95       	ret

00002174 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	ec 01       	movw	r28, r24
 char c;
   while((c=pgm_read_byte(addr++)))
    217a:	07 c0       	rjmp	.+14     	; 0x218a <nrk_kprintf+0x16>
        putchar(c);
    217c:	60 91 a8 05 	lds	r22, 0x05A8
    2180:	70 91 a9 05 	lds	r23, 0x05A9
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <fputc>
    218a:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
    218c:	21 96       	adiw	r28, 0x01	; 1
    218e:	84 91       	lpm	r24, Z
    2190:	88 23       	and	r24, r24
    2192:	a1 f7       	brne	.-24     	; 0x217c <nrk_kprintf+0x8>
        putchar(c);
}
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	08 95       	ret

0000219a <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	d1 f7       	brne	.-12     	; 0x219a <halWait>

} // halWait
    21a6:	08 95       	ret

000021a8 <write_eeprom_current_image_checksum>:
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
  return NRK_OK;
}

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    21a8:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    21aa:	87 e0       	ldi	r24, 0x07	; 7
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	60 81       	ld	r22, Z
    21b0:	0e 94 12 27 	call	0x4e24	; 0x4e24 <__eewr_byte_m1281>
  return NRK_OK;
}
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	08 95       	ret

000021b8 <write_eeprom_aes_key>:
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    21b8:	0f 93       	push	r16
    21ba:	1f 93       	push	r17
    21bc:	cf 93       	push	r28
    21be:	df 93       	push	r29
    21c0:	08 2f       	mov	r16, r24
    21c2:	19 2f       	mov	r17, r25
    21c4:	c8 e0       	ldi	r28, 0x08	; 8
    21c6:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    21c8:	ce 01       	movw	r24, r28
    21ca:	f8 01       	movw	r30, r16
    21cc:	61 91       	ld	r22, Z+
    21ce:	8f 01       	movw	r16, r30
    21d0:	0e 94 12 27 	call	0x4e24	; 0x4e24 <__eewr_byte_m1281>
    21d4:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    21d6:	c8 31       	cpi	r28, 0x18	; 24
    21d8:	d1 05       	cpc	r29, r1
    21da:	b1 f7       	brne	.-20     	; 0x21c8 <write_eeprom_aes_key+0x10>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	0f 91       	pop	r16
    21e6:	08 95       	ret

000021e8 <write_eeprom_load_img_pages>:
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
return NRK_OK;
}

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
    21e8:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    21ea:	86 e0       	ldi	r24, 0x06	; 6
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	60 81       	ld	r22, Z
    21f0:	0e 94 12 27 	call	0x4e24	; 0x4e24 <__eewr_byte_m1281>
  return NRK_OK;
}
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	08 95       	ret

000021f8 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    21f8:	0e 94 12 27 	call	0x4e24	; 0x4e24 <__eewr_byte_m1281>
}
    21fc:	08 95       	ret

000021fe <read_eeprom_current_image_checksum>:
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    2204:	87 e0       	ldi	r24, 0x07	; 7
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__eerd_byte_m1281>
    220c:	88 83       	st	Y, r24
  return NRK_OK;
}
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	df 91       	pop	r29
    2212:	cf 91       	pop	r28
    2214:	08 95       	ret

00002216 <read_eeprom_aes_key>:
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
  return NRK_OK;
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    2216:	0f 93       	push	r16
    2218:	1f 93       	push	r17
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	08 2f       	mov	r16, r24
    2220:	19 2f       	mov	r17, r25
    2222:	c8 e0       	ldi	r28, 0x08	; 8
    2224:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    2226:	ce 01       	movw	r24, r28
    2228:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__eerd_byte_m1281>
    222c:	f8 01       	movw	r30, r16
    222e:	81 93       	st	Z+, r24
    2230:	8f 01       	movw	r16, r30
    2232:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2234:	c8 31       	cpi	r28, 0x18	; 24
    2236:	d1 05       	cpc	r29, r1
    2238:	b1 f7       	brne	.-20     	; 0x2226 <read_eeprom_aes_key+0x10>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	08 95       	ret

00002246 <read_eeprom_load_img_pages>:
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
  return NRK_OK;
}

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    224c:	86 e0       	ldi	r24, 0x06	; 6
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__eerd_byte_m1281>
    2254:	88 83       	st	Y, r24
  return NRK_OK;
}
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	df 91       	pop	r29
    225a:	cf 91       	pop	r28
    225c:	08 95       	ret

0000225e <read_eeprom_channel>:

return NRK_ERROR;
}

int8_t read_eeprom_channel(uint8_t *channel)
{
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    2264:	85 e0       	ldi	r24, 0x05	; 5
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__eerd_byte_m1281>
    226c:	88 83       	st	Y, r24
return NRK_OK;
}
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
    2274:	08 95       	ret

00002276 <read_eeprom_mac_address>:
{
eeprom_write_byte( (uint8_t*)addr, value );
}

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    2276:	ef 92       	push	r14
    2278:	ff 92       	push	r15
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
    2282:	e8 2e       	mov	r14, r24
    2284:	e7 01       	movw	r28, r14
    2286:	7e 01       	movw	r14, r28
    2288:	f9 2e       	mov	r15, r25
    228a:	e7 01       	movw	r28, r14
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__eerd_byte_m1281>
    2294:	08 2f       	mov	r16, r24
    2296:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__eerd_byte_m1281>
    22a0:	e8 2e       	mov	r14, r24
    22a2:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__eerd_byte_m1281>
    22ac:	f8 2e       	mov	r15, r24
    22ae:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    22b0:	83 e0       	ldi	r24, 0x03	; 3
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__eerd_byte_m1281>
    22b8:	18 2f       	mov	r17, r24
    22ba:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    22bc:	84 e0       	ldi	r24, 0x04	; 4
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__eerd_byte_m1281>
ct=buf[0];
ct+=buf[1];
    22c4:	fe 0c       	add	r15, r14
ct+=buf[2];
    22c6:	f0 0e       	add	r15, r16
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    22c8:	f1 0e       	add	r15, r17
    22ca:	8f 15       	cp	r24, r15
    22cc:	11 f0       	breq	.+4      	; 0x22d2 <read_eeprom_mac_address+0x5c>
    22ce:	8f ef       	ldi	r24, 0xFF	; 255
    22d0:	01 c0       	rjmp	.+2      	; 0x22d4 <read_eeprom_mac_address+0x5e>
    22d2:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    22d4:	df 91       	pop	r29
    22d6:	cf 91       	pop	r28
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	ff 90       	pop	r15
    22de:	ef 90       	pop	r14
    22e0:	08 95       	ret

000022e2 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    22e2:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <__eerd_byte_m1281>
return v;
}
    22e6:	08 95       	ret

000022e8 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    22e8:	f8 94       	cli
};
    22ea:	08 95       	ret

000022ec <nrk_int_enable>:

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    22ec:	78 94       	sei
};
    22ee:	08 95       	ret

000022f0 <nrk_halt>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    22f0:	f8 94       	cli
    22f2:	ff cf       	rjmp	.-2      	; 0x22f2 <nrk_halt+0x2>

000022f4 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    22f4:	85 e6       	ldi	r24, 0x65	; 101
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	08 95       	ret

000022fa <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    22fa:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <_nrk_scheduler>

  	return;
}
    22fe:	08 95       	ret

00002300 <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2300:	cf 92       	push	r12
    2302:	df 92       	push	r13
    2304:	ef 92       	push	r14
    2306:	ff 92       	push	r15
    2308:	0f 93       	push	r16
    230a:	1f 93       	push	r17
    230c:	cf 93       	push	r28
    230e:	df 93       	push	r29
    2310:	ec 01       	movw	r28, r24
    2312:	6b 01       	movw	r12, r22
    2314:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	82 30       	cpi	r24, 0x02	; 2
    231a:	21 f0       	breq	.+8      	; 0x2324 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    231c:	80 91 6c 05 	lds	r24, 0x056C
    2320:	88 83       	st	Y, r24
    2322:	01 c0       	rjmp	.+2      	; 0x2326 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    2324:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    2326:	80 91 6c 05 	lds	r24, 0x056C
    232a:	85 30       	cpi	r24, 0x05	; 5
    232c:	20 f0       	brcs	.+8      	; 0x2336 <nrk_TCB_init+0x36>
    232e:	87 e0       	ldi	r24, 0x07	; 7
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    2336:	89 85       	ldd	r24, Y+9	; 0x09
    2338:	82 30       	cpi	r24, 0x02	; 2
    233a:	29 f0       	breq	.+10     	; 0x2346 <nrk_TCB_init+0x46>
    233c:	80 91 6c 05 	lds	r24, 0x056C
    2340:	8f 5f       	subi	r24, 0xFF	; 255
    2342:	80 93 6c 05 	sts	0x056C, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    2346:	80 91 6c 05 	lds	r24, 0x056C
    234a:	88 23       	and	r24, r24
    234c:	19 f4       	brne	.+6      	; 0x2354 <nrk_TCB_init+0x54>
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	80 93 6c 05 	sts	0x056C, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    2354:	88 81       	ld	r24, Y
    2356:	28 2f       	mov	r18, r24
    2358:	33 27       	eor	r19, r19
    235a:	27 fd       	sbrc	r18, 7
    235c:	30 95       	com	r19
    235e:	89 01       	movw	r16, r18
    2360:	55 e0       	ldi	r21, 0x05	; 5
    2362:	00 0f       	add	r16, r16
    2364:	11 1f       	adc	r17, r17
    2366:	5a 95       	dec	r21
    2368:	e1 f7       	brne	.-8      	; 0x2362 <nrk_TCB_init+0x62>
    236a:	02 0f       	add	r16, r18
    236c:	13 1f       	adc	r17, r19
    236e:	0e 53       	subi	r16, 0x3E	; 62
    2370:	1b 4f       	sbci	r17, 0xFB	; 251
    2372:	f8 01       	movw	r30, r16
    2374:	d1 82       	std	Z+1, r13	; 0x01
    2376:	c0 82       	st	Z, r12
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    2378:	98 85       	ldd	r25, Y+8	; 0x08
    237a:	92 87       	std	Z+10, r25	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    237c:	93 e0       	ldi	r25, 0x03	; 3
    237e:	91 87       	std	Z+9, r25	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    2380:	80 87       	std	Z+8, r24	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    2382:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( Task->period );
    2384:	2b 85       	ldd	r18, Y+11	; 0x0b
    2386:	3c 85       	ldd	r19, Y+12	; 0x0c
    2388:	4d 85       	ldd	r20, Y+13	; 0x0d
    238a:	5e 85       	ldd	r21, Y+14	; 0x0e
    238c:	6f 85       	ldd	r22, Y+15	; 0x0f
    238e:	78 89       	ldd	r23, Y+16	; 0x10
    2390:	89 89       	ldd	r24, Y+17	; 0x11
    2392:	9a 89       	ldd	r25, Y+18	; 0x12
    2394:	0e 94 b8 1c 	call	0x3970	; 0x3970 <_nrk_time_to_ticks>
    2398:	f8 01       	movw	r30, r16
    239a:	94 8f       	std	Z+28, r25	; 0x1c
    239c:	83 8f       	std	Z+27, r24	; 0x1b
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( Task->offset);
    239e:	08 81       	ld	r16, Y
    23a0:	11 27       	eor	r17, r17
    23a2:	07 fd       	sbrc	r16, 7
    23a4:	10 95       	com	r17
    23a6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    23a8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    23aa:	4d 8d       	ldd	r20, Y+29	; 0x1d
    23ac:	5e 8d       	ldd	r21, Y+30	; 0x1e
    23ae:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23b0:	78 a1       	ldd	r23, Y+32	; 0x20
    23b2:	89 a1       	ldd	r24, Y+33	; 0x21
    23b4:	9a a1       	ldd	r25, Y+34	; 0x22
    23b6:	0e 94 b8 1c 	call	0x3970	; 0x3970 <_nrk_time_to_ticks>
    23ba:	f8 01       	movw	r30, r16
    23bc:	45 e0       	ldi	r20, 0x05	; 5
    23be:	ee 0f       	add	r30, r30
    23c0:	ff 1f       	adc	r31, r31
    23c2:	4a 95       	dec	r20
    23c4:	e1 f7       	brne	.-8      	; 0x23be <nrk_TCB_init+0xbe>
    23c6:	e0 0f       	add	r30, r16
    23c8:	f1 1f       	adc	r31, r17
    23ca:	ee 53       	subi	r30, 0x3E	; 62
    23cc:	fb 4f       	sbci	r31, 0xFB	; 251
    23ce:	96 8b       	std	Z+22, r25	; 0x16
    23d0:	85 8b       	std	Z+21, r24	; 0x15
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    23d2:	88 81       	ld	r24, Y
    23d4:	99 27       	eor	r25, r25
    23d6:	87 fd       	sbrc	r24, 7
    23d8:	90 95       	com	r25
    23da:	8c 01       	movw	r16, r24
    23dc:	35 e0       	ldi	r19, 0x05	; 5
    23de:	00 0f       	add	r16, r16
    23e0:	11 1f       	adc	r17, r17
    23e2:	3a 95       	dec	r19
    23e4:	e1 f7       	brne	.-8      	; 0x23de <nrk_TCB_init+0xde>
    23e6:	08 0f       	add	r16, r24
    23e8:	19 1f       	adc	r17, r25
    23ea:	0e 53       	subi	r16, 0x3E	; 62
    23ec:	1b 4f       	sbci	r17, 0xFB	; 251
    23ee:	f8 01       	movw	r30, r16
    23f0:	85 89       	ldd	r24, Z+21	; 0x15
    23f2:	96 89       	ldd	r25, Z+22	; 0x16
    23f4:	23 8d       	ldd	r18, Z+27	; 0x1b
    23f6:	34 8d       	ldd	r19, Z+28	; 0x1c
    23f8:	82 0f       	add	r24, r18
    23fa:	93 1f       	adc	r25, r19
    23fc:	90 8f       	std	Z+24, r25	; 0x18
    23fe:	87 8b       	std	Z+23, r24	; 0x17
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(Task->cpu_reserve);
    2400:	2b 89       	ldd	r18, Y+19	; 0x13
    2402:	3c 89       	ldd	r19, Y+20	; 0x14
    2404:	4d 89       	ldd	r20, Y+21	; 0x15
    2406:	5e 89       	ldd	r21, Y+22	; 0x16
    2408:	6f 89       	ldd	r22, Y+23	; 0x17
    240a:	78 8d       	ldd	r23, Y+24	; 0x18
    240c:	89 8d       	ldd	r24, Y+25	; 0x19
    240e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2410:	0e 94 b8 1c 	call	0x3970	; 0x3970 <_nrk_time_to_ticks>
    2414:	f8 01       	movw	r30, r16
    2416:	96 8f       	std	Z+30, r25	; 0x1e
    2418:	85 8f       	std	Z+29, r24	; 0x1d
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    241a:	88 81       	ld	r24, Y
    241c:	99 27       	eor	r25, r25
    241e:	87 fd       	sbrc	r24, 7
    2420:	90 95       	com	r25
    2422:	fc 01       	movw	r30, r24
    2424:	25 e0       	ldi	r18, 0x05	; 5
    2426:	ee 0f       	add	r30, r30
    2428:	ff 1f       	adc	r31, r31
    242a:	2a 95       	dec	r18
    242c:	e1 f7       	brne	.-8      	; 0x2426 <nrk_TCB_init+0x126>
    242e:	e8 0f       	add	r30, r24
    2430:	f9 1f       	adc	r31, r25
    2432:	ee 53       	subi	r30, 0x3E	; 62
    2434:	fb 4f       	sbci	r31, 0xFB	; 251
    2436:	85 8d       	ldd	r24, Z+29	; 0x1d
    2438:	96 8d       	ldd	r25, Z+30	; 0x1e
    243a:	92 8f       	std	Z+26, r25	; 0x1a
    243c:	81 8f       	std	Z+25, r24	; 0x19
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	90 a3       	std	Z+32, r25	; 0x20
    2444:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    2446:	f3 82       	std	Z+3, r15	; 0x03
    2448:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	1f 91       	pop	r17
    2454:	0f 91       	pop	r16
    2456:	ff 90       	pop	r15
    2458:	ef 90       	pop	r14
    245a:	df 90       	pop	r13
    245c:	cf 90       	pop	r12
    245e:	08 95       	ret

00002460 <nrk_start>:




void nrk_start (void)
{
    2460:	df 92       	push	r13
    2462:	ef 92       	push	r14
    2464:	ff 92       	push	r15
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	ca ec       	ldi	r28, 0xCA	; 202
    2470:	d4 e0       	ldi	r29, 0x04	; 4
    2472:	10 e0       	ldi	r17, 0x00	; 0
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2474:	d8 80       	ld	r13, Y
	// only check activated tasks
	if(task_ID!=-1)
    2476:	8f ef       	ldi	r24, 0xFF	; 255
    2478:	d8 16       	cp	r13, r24
    247a:	b1 f0       	breq	.+44     	; 0x24a8 <nrk_start+0x48>
    247c:	7a ec       	ldi	r23, 0xCA	; 202
    247e:	e7 2e       	mov	r14, r23
    2480:	74 e0       	ldi	r23, 0x04	; 4
    2482:	f7 2e       	mov	r15, r23
    2484:	00 e0       	ldi	r16, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2486:	10 17       	cp	r17, r16
    2488:	41 f0       	breq	.+16     	; 0x249a <nrk_start+0x3a>
    248a:	f7 01       	movw	r30, r14
    248c:	80 81       	ld	r24, Z
    248e:	d8 16       	cp	r13, r24
    2490:	21 f4       	brne	.+8      	; 0x249a <nrk_start+0x3a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    2492:	85 e0       	ldi	r24, 0x05	; 5
    2494:	6d 2d       	mov	r22, r13
    2496:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    249a:	0f 5f       	subi	r16, 0xFF	; 255
    249c:	81 e2       	ldi	r24, 0x21	; 33
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	e8 0e       	add	r14, r24
    24a2:	f9 1e       	adc	r15, r25
    24a4:	05 30       	cpi	r16, 0x05	; 5
    24a6:	79 f7       	brne	.-34     	; 0x2486 <nrk_start+0x26>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    24a8:	1f 5f       	subi	r17, 0xFF	; 255
    24aa:	a1 96       	adiw	r28, 0x21	; 33
    24ac:	15 30       	cpi	r17, 0x05	; 5
    24ae:	11 f7       	brne	.-60     	; 0x2474 <nrk_start+0x14>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    24b0:	0e 94 1e 18 	call	0x303c	; 0x303c <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    24b4:	28 2f       	mov	r18, r24
    24b6:	33 27       	eor	r19, r19
    24b8:	27 fd       	sbrc	r18, 7
    24ba:	30 95       	com	r19
    24bc:	f9 01       	movw	r30, r18
    24be:	65 e0       	ldi	r22, 0x05	; 5
    24c0:	ee 0f       	add	r30, r30
    24c2:	ff 1f       	adc	r31, r31
    24c4:	6a 95       	dec	r22
    24c6:	e1 f7       	brne	.-8      	; 0x24c0 <nrk_start+0x60>
    24c8:	e2 0f       	add	r30, r18
    24ca:	f3 1f       	adc	r31, r19
    24cc:	ee 53       	subi	r30, 0x3E	; 62
    24ce:	fb 4f       	sbci	r31, 0xFB	; 251
    24d0:	22 85       	ldd	r18, Z+10	; 0x0a
    24d2:	20 93 7f 05 	sts	0x057F, r18
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    24d6:	91 e2       	ldi	r25, 0x21	; 33
    24d8:	89 02       	muls	r24, r25
    24da:	c0 01       	movw	r24, r0
    24dc:	11 24       	eor	r1, r1
    24de:	8e 53       	subi	r24, 0x3E	; 62
    24e0:	9b 4f       	sbci	r25, 0xFB	; 251
    24e2:	90 93 7e 05 	sts	0x057E, r25
    24e6:	80 93 7d 05 	sts	0x057D, r24
    24ea:	90 93 6f 05 	sts	0x056F, r25
    24ee:	80 93 6e 05 	sts	0x056E, r24
    nrk_cur_task_prio = nrk_high_ready_prio;
    24f2:	20 93 70 05 	sts	0x0570, r18
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    24f6:	0e 94 2d 24 	call	0x485a	; 0x485a <nrk_target_start>
    nrk_stack_pointer_init(); 
    24fa:	0e 94 17 24 	call	0x482e	; 0x482e <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    24fe:	0e 94 51 24 	call	0x48a2	; 0x48a2 <nrk_start_high_ready_task>
    2502:	ff cf       	rjmp	.-2      	; 0x2502 <nrk_start+0xa2>

00002504 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	a3 97       	sbiw	r28, 0x23	; 35
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    251c:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <nrk_signal_create>
    2520:	80 93 6d 05 	sts	0x056D, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    2524:	8f 3f       	cpi	r24, 0xFF	; 255
    2526:	21 f4       	brne	.+8      	; 0x2530 <nrk_init+0x2c>
    2528:	8e e0       	ldi	r24, 0x0E	; 14
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <nrk_kernel_error_add>
	
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
   if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
    2530:	0e 94 a0 23 	call	0x4740	; 0x4740 <_nrk_startup_ok>
    2534:	88 23       	and	r24, r24
    2536:	21 f4       	brne	.+8      	; 0x2540 <nrk_init+0x3c>
    2538:	86 e0       	ldi	r24, 0x06	; 6
    253a:	60 e0       	ldi	r22, 0x00	; 0
    253c:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <nrk_kernel_error_add>
	   }
   #endif
   #endif

    #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
    2540:	0e 94 a8 23 	call	0x4750	; 0x4750 <nrk_watchdog_check>
    2544:	8f 3f       	cpi	r24, 0xFF	; 255
    2546:	31 f4       	brne	.+12     	; 0x2554 <nrk_init+0x50>
	{
    	nrk_watchdog_disable();
    2548:	0e 94 c1 23 	call	0x4782	; 0x4782 <nrk_watchdog_disable>
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
    254c:	80 e1       	ldi	r24, 0x10	; 16
    254e:	60 e0       	ldi	r22, 0x00	; 0
    2550:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <nrk_kernel_error_add>
	}
    nrk_watchdog_enable();
    2554:	0e 94 b1 23 	call	0x4762	; 0x4762 <nrk_watchdog_enable>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    2558:	10 92 70 05 	sts	0x0570, r1
    nrk_cur_task_TCB = NULL;
    255c:	10 92 7e 05 	sts	0x057E, r1
    2560:	10 92 7d 05 	sts	0x057D, r1
    
    nrk_high_ready_TCB = NULL;
    2564:	10 92 6f 05 	sts	0x056F, r1
    2568:	10 92 6e 05 	sts	0x056E, r1
    nrk_high_ready_prio = 0; 
    256c:	10 92 7f 05 	sts	0x057F, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    2570:	10 92 7c 05 	sts	0x057C, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2574:	8f ef       	ldi	r24, 0xFF	; 255
    2576:	80 93 69 05 	sts	0x0569, r24
    nrk_sem_list[i].value=-1;
    257a:	80 93 6b 05 	sts	0x056B, r24
    nrk_sem_list[i].resource_ceiling=-1;
    257e:	80 93 6a 05 	sts	0x056A, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2582:	93 e6       	ldi	r25, 0x63	; 99
    2584:	90 93 cc 04 	sts	0x04CC, r25
        nrk_task_TCB[i].task_ID = -1; 
    2588:	80 93 ca 04 	sts	0x04CA, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    258c:	90 93 ed 04 	sts	0x04ED, r25
        nrk_task_TCB[i].task_ID = -1; 
    2590:	80 93 eb 04 	sts	0x04EB, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2594:	90 93 0e 05 	sts	0x050E, r25
        nrk_task_TCB[i].task_ID = -1; 
    2598:	80 93 0c 05 	sts	0x050C, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    259c:	90 93 2f 05 	sts	0x052F, r25
        nrk_task_TCB[i].task_ID = -1; 
    25a0:	80 93 2d 05 	sts	0x052D, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    25a4:	90 93 50 05 	sts	0x0550, r25
        nrk_task_TCB[i].task_ID = -1; 
    25a8:	80 93 4e 05 	sts	0x054E, r24
    25ac:	e0 e8       	ldi	r30, 0x80	; 128
    25ae:	f5 e0       	ldi	r31, 0x05	; 5
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
    25b0:	cf 01       	movw	r24, r30
    25b2:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    25b4:	94 83       	std	Z+4, r25	; 0x04
    25b6:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    25b8:	f7 83       	std	Z+7, r31	; 0x07
    25ba:	e6 83       	std	Z+6, r30	; 0x06
    25bc:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    25be:	85 e0       	ldi	r24, 0x05	; 5
    25c0:	e9 39       	cpi	r30, 0x99	; 153
    25c2:	f8 07       	cpc	r31, r24
    25c4:	a9 f7       	brne	.-22     	; 0x25b0 <nrk_init+0xac>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    25c6:	10 92 82 05 	sts	0x0582, r1
    25ca:	10 92 81 05 	sts	0x0581, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    25ce:	10 92 9d 05 	sts	0x059D, r1
    25d2:	10 92 9c 05 	sts	0x059C, r1
	_head_node = NULL;
    25d6:	10 92 73 05 	sts	0x0573, r1
    25da:	10 92 72 05 	sts	0x0572, r1
	_free_node = &_nrk_readyQ[0];
    25de:	79 97       	sbiw	r30, 0x19	; 25
    25e0:	f0 93 c1 04 	sts	0x04C1, r31
    25e4:	e0 93 c0 04 	sts	0x04C0, r30
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    25e8:	8e 01       	movw	r16, r28
    25ea:	0f 5f       	subi	r16, 0xFF	; 255
    25ec:	1f 4f       	sbci	r17, 0xFF	; 255
    25ee:	c8 01       	movw	r24, r16
    25f0:	63 e5       	ldi	r22, 0x53	; 83
    25f2:	7e e1       	ldi	r23, 0x1E	; 30
    25f4:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    25f8:	c8 01       	movw	r24, r16
    25fa:	62 e0       	ldi	r22, 0x02	; 2
    25fc:	74 e0       	ldi	r23, 0x04	; 4
    25fe:	40 e8       	ldi	r20, 0x80	; 128
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	0e 94 32 24 	call	0x4864	; 0x4864 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    2606:	85 e5       	ldi	r24, 0x55	; 85
    2608:	80 93 02 04 	sts	0x0402, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    260c:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.offset.secs = 0;
    260e:	1c 8e       	std	Y+28, r1	; 0x1c
    2610:	1d 8e       	std	Y+29, r1	; 0x1d
    2612:	1e 8e       	std	Y+30, r1	; 0x1e
    2614:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    2616:	18 a2       	std	Y+32, r1	; 0x20
    2618:	19 a2       	std	Y+33, r1	; 0x21
    261a:	1a a2       	std	Y+34, r1	; 0x22
    261c:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2622:	92 e0       	ldi	r25, 0x02	; 2
    2624:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    2626:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    2628:	c8 01       	movw	r24, r16
    262a:	0e 94 2a 1b 	call	0x3654	; 0x3654 <nrk_activate_task>
	
}
    262e:	a3 96       	adiw	r28, 0x23	; 35
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	1f 91       	pop	r17
    2640:	0f 91       	pop	r16
    2642:	08 95       	ret

00002644 <_nrk_errno_set>:
#include <nrk_cfg.h>
#include <nrk_timer.h>

void _nrk_errno_set (NRK_ERRNO error_code) 
{
  nrk_cur_task_TCB->errno = error_code;
    2644:	e0 91 7d 05 	lds	r30, 0x057D
    2648:	f0 91 7e 05 	lds	r31, 0x057E
    264c:	84 87       	std	Z+12, r24	; 0x0c
} 
    264e:	08 95       	ret

00002650 <nrk_errno_get>:

uint8_t nrk_errno_get () 
{
    2650:	e0 91 7d 05 	lds	r30, 0x057D
    2654:	f0 91 7e 05 	lds	r31, 0x057E
  return nrk_cur_task_TCB->errno;
}
    2658:	84 85       	ldd	r24, Z+12	; 0x0c
    265a:	08 95       	ret

0000265c <nrk_error_get>:
} 


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code) 
{
  if (error_num == 0)
    265c:	20 91 01 04 	lds	r18, 0x0401
    2660:	22 23       	and	r18, r18
    2662:	11 f4       	brne	.+4      	; 0x2668 <nrk_error_get+0xc>
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	08 95       	ret
    return 0;
  *code = error_num;
    2668:	fb 01       	movw	r30, r22
    266a:	20 83       	st	Z, r18
  *task_id = error_task;
    266c:	20 91 d0 02 	lds	r18, 0x02D0
    2670:	fc 01       	movw	r30, r24
    2672:	20 83       	st	Z, r18
    2674:	81 e0       	ldi	r24, 0x01	; 1
  return 1;
}
    2676:	08 95       	ret

00002678 <nrk_error_print>:

int8_t nrk_error_print () 
{
    2678:	1f 93       	push	r17
  int8_t t;
  if (error_num == 0)
    267a:	80 91 01 04 	lds	r24, 0x0401
    267e:	88 23       	and	r24, r24
    2680:	11 f4       	brne	.+4      	; 0x2686 <nrk_error_print+0xe>
    }
  
#endif  /*  */
    error_num = 0;
  return t;
}
    2682:	1f 91       	pop	r17
    2684:	08 95       	ret
  int8_t t;
  if (error_num == 0)
    return 0;
 
   #ifdef NRK_HALT_ON_ERROR
     nrk_int_disable ();
    2686:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>
       #ifdef NRK_WATCHDOG
         nrk_watchdog_disable();
    268a:	0e 94 c1 23 	call	0x4782	; 0x4782 <nrk_watchdog_disable>
       #endif
   #endif 

   #ifndef NRK_REBOOT_ON_ERROR
      nrk_int_disable ();
    268e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>
  while (1)
     {
    
#endif  
    
    nrk_kprintf (PSTR ("*NRK ERROR("));
    2692:	84 ee       	ldi	r24, 0xE4	; 228
    2694:	92 e0       	ldi	r25, 0x02	; 2
    2696:	0e 94 ba 10 	call	0x2174	; 0x2174 <nrk_kprintf>
    printf ("%d", error_task);
    269a:	00 d0       	rcall	.+0      	; 0x269c <nrk_error_print+0x24>
    269c:	00 d0       	rcall	.+0      	; 0x269e <nrk_error_print+0x26>
    269e:	ed b7       	in	r30, 0x3d	; 61
    26a0:	fe b7       	in	r31, 0x3e	; 62
    26a2:	31 96       	adiw	r30, 0x01	; 1
    26a4:	86 e7       	ldi	r24, 0x76	; 118
    26a6:	92 e0       	ldi	r25, 0x02	; 2
    26a8:	ad b7       	in	r26, 0x3d	; 61
    26aa:	be b7       	in	r27, 0x3e	; 62
    26ac:	12 96       	adiw	r26, 0x02	; 2
    26ae:	9c 93       	st	X, r25
    26b0:	8e 93       	st	-X, r24
    26b2:	11 97       	sbiw	r26, 0x01	; 1
    26b4:	80 91 d0 02 	lds	r24, 0x02D0
    26b8:	82 83       	std	Z+2, r24	; 0x02
    26ba:	13 82       	std	Z+3, r1	; 0x03
    26bc:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
    nrk_kprintf (PSTR ("): "));
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	80 ee       	ldi	r24, 0xE0	; 224
    26ca:	92 e0       	ldi	r25, 0x02	; 2
    26cc:	0e 94 ba 10 	call	0x2174	; 0x2174 <nrk_kprintf>
    if (error_num > NRK_NUM_ERRORS)
    26d0:	80 91 01 04 	lds	r24, 0x0401
    26d4:	84 31       	cpi	r24, 0x14	; 20
    26d6:	10 f0       	brcs	.+4      	; 0x26dc <nrk_error_print+0x64>
      error_num = NRK_UNKOWN;
    26d8:	10 92 01 04 	sts	0x0401, r1
    switch (error_num)
    26dc:	e0 91 01 04 	lds	r30, 0x0401
    26e0:	8e 2f       	mov	r24, r30
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	fc 01       	movw	r30, r24
    26e6:	31 97       	sbiw	r30, 0x01	; 1
    26e8:	e2 31       	cpi	r30, 0x12	; 18
    26ea:	f1 05       	cpc	r31, r1
    26ec:	f0 f5       	brcc	.+124    	; 0x276a <nrk_error_print+0xf2>
    26ee:	ea 59       	subi	r30, 0x9A	; 154
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	ee 0f       	add	r30, r30
    26f4:	ff 1f       	adc	r31, r31
    26f6:	05 90       	lpm	r0, Z+
    26f8:	f4 91       	lpm	r31, Z
    26fa:	e0 2d       	mov	r30, r0
    26fc:	09 94       	ijmp
       {
    case NRK_STACK_TOO_SMALL:
      nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    26fe:	89 eb       	ldi	r24, 0xB9	; 185
    2700:	92 e0       	ldi	r25, 0x02	; 2
    2702:	35 c0       	rjmp	.+106    	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_STACK_OVERFLOW:
      nrk_kprintf (PSTR ("Task Stack Overflow"));
    2704:	85 ea       	ldi	r24, 0xA5	; 165
    2706:	92 e0       	ldi	r25, 0x02	; 2
    2708:	32 c0       	rjmp	.+100    	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_INVALID_STACK_POINTER:
      nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    270a:	8f e8       	ldi	r24, 0x8F	; 143
    270c:	92 e0       	ldi	r25, 0x02	; 2
    270e:	2f c0       	rjmp	.+94     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_RESERVE_ERROR:
      nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    2710:	84 e7       	ldi	r24, 0x74	; 116
    2712:	92 e0       	ldi	r25, 0x02	; 2
    2714:	2c c0       	rjmp	.+88     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_RESERVE_VIOLATED:
      nrk_kprintf (PSTR ("Task Reserve Violated"));
    2716:	8e e5       	ldi	r24, 0x5E	; 94
    2718:	92 e0       	ldi	r25, 0x02	; 2
    271a:	29 c0       	rjmp	.+82     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_WAKEUP_MISSED:
      nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    271c:	86 e4       	ldi	r24, 0x46	; 70
    271e:	92 e0       	ldi	r25, 0x02	; 2
    2720:	26 c0       	rjmp	.+76     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_DUP_TASK_ID:
      nrk_kprintf (PSTR ("Duplicated Task ID"));
    2722:	83 e3       	ldi	r24, 0x33	; 51
    2724:	92 e0       	ldi	r25, 0x02	; 2
    2726:	23 c0       	rjmp	.+70     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_BAD_STARTUP:
      nrk_kprintf (PSTR ("Unexpected Restart"));
    2728:	80 e2       	ldi	r24, 0x20	; 32
    272a:	92 e0       	ldi	r25, 0x02	; 2
    272c:	20 c0       	rjmp	.+64     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_STACK_SMASH:
      nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    272e:	82 e0       	ldi	r24, 0x02	; 2
    2730:	92 e0       	ldi	r25, 0x02	; 2
    2732:	1d c0       	rjmp	.+58     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_EXTRA_TASK:
      nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    2734:	8d ed       	ldi	r24, 0xDD	; 221
    2736:	91 e0       	ldi	r25, 0x01	; 1
    2738:	1a c0       	rjmp	.+52     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_LOW_VOLTAGE:
      nrk_kprintf (PSTR ("Low Voltage"));
    273a:	81 ed       	ldi	r24, 0xD1	; 209
    273c:	91 e0       	ldi	r25, 0x01	; 1
    273e:	17 c0       	rjmp	.+46     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_SEG_FAULT:
      nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    2740:	86 eb       	ldi	r24, 0xB6	; 182
    2742:	91 e0       	ldi	r25, 0x01	; 1
    2744:	14 c0       	rjmp	.+40     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_TIMER_OVERFLOW:
      nrk_kprintf (PSTR ("Timer Overflow"));
    2746:	87 ea       	ldi	r24, 0xA7	; 167
    2748:	91 e0       	ldi	r25, 0x01	; 1
    274a:	11 c0       	rjmp	.+34     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_WATCHDOG_ERROR:
      nrk_kprintf (PSTR ("Watchdog Restart"));
    274c:	86 e9       	ldi	r24, 0x96	; 150
    274e:	91 e0       	ldi	r25, 0x01	; 1
    2750:	0e c0       	rjmp	.+28     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_DEVICE_DRIVER:
      nrk_kprintf (PSTR ("Device Driver Error"));
    2752:	82 e8       	ldi	r24, 0x82	; 130
    2754:	91 e0       	ldi	r25, 0x01	; 1
    2756:	0b c0       	rjmp	.+22     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_UNIMPLEMENTED:
      nrk_kprintf (PSTR ("Kernel function not implemented"));
    2758:	82 e6       	ldi	r24, 0x62	; 98
    275a:	91 e0       	ldi	r25, 0x01	; 1
    275c:	08 c0       	rjmp	.+16     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_SIGNAL_CREATE_ERROR:
      nrk_kprintf (PSTR ("Failed to create Signal"));
    275e:	8a e4       	ldi	r24, 0x4A	; 74
    2760:	91 e0       	ldi	r25, 0x01	; 1
    2762:	05 c0       	rjmp	.+10     	; 0x276e <nrk_error_print+0xf6>
      break;
    case NRK_SEMAPHORE_CREATE_ERROR:
      nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2764:	8f e2       	ldi	r24, 0x2F	; 47
    2766:	91 e0       	ldi	r25, 0x01	; 1
    2768:	02 c0       	rjmp	.+4      	; 0x276e <nrk_error_print+0xf6>
      break;
    default:
      nrk_kprintf (PSTR ("UNKOWN"));
    276a:	88 e2       	ldi	r24, 0x28	; 40
    276c:	91 e0       	ldi	r25, 0x01	; 1
    276e:	0e 94 ba 10 	call	0x2174	; 0x2174 <nrk_kprintf>
      }
    putchar ('\r');
    2772:	60 91 a8 05 	lds	r22, 0x05A8
    2776:	70 91 a9 05 	lds	r23, 0x05A9
    277a:	8d e0       	ldi	r24, 0x0D	; 13
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <fputc>
    putchar ('\n');
    2782:	60 91 a8 05 	lds	r22, 0x05A8
    2786:	70 91 a9 05 	lds	r23, 0x05A9
    278a:	8a e0       	ldi	r24, 0x0A	; 10
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <fputc>
#endif  /*  */
    
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    nrk_led_set (2);
    2792:	82 e0       	ldi	r24, 0x02	; 2
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	0e 94 2d 10 	call	0x205a	; 0x205a <nrk_led_set>
    nrk_led_clr (3);
    279a:	83 e0       	ldi	r24, 0x03	; 3
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	0e 94 12 10 	call	0x2024	; 0x2024 <nrk_led_clr>
    27a2:	10 e0       	ldi	r17, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    27a4:	88 ee       	ldi	r24, 0xE8	; 232
    27a6:	93 e0       	ldi	r25, 0x03	; 3
    27a8:	0e 94 6f 20 	call	0x40de	; 0x40de <nrk_spin_wait_us>
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    nrk_led_set (2);
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
    27ac:	1f 5f       	subi	r17, 0xFF	; 255
    27ae:	14 36       	cpi	r17, 0x64	; 100
    27b0:	c9 f7       	brne	.-14     	; 0x27a4 <nrk_error_print+0x12c>
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    27b2:	83 e0       	ldi	r24, 0x03	; 3
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	0e 94 2d 10 	call	0x205a	; 0x205a <nrk_led_set>
    nrk_led_clr (2);
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	0e 94 12 10 	call	0x2024	; 0x2024 <nrk_led_clr>
    27c2:	10 e0       	ldi	r17, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    27c4:	88 ee       	ldi	r24, 0xE8	; 232
    27c6:	93 e0       	ldi	r25, 0x03	; 3
    27c8:	0e 94 6f 20 	call	0x40de	; 0x40de <nrk_spin_wait_us>
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    nrk_led_clr (2);
    for (t = 0; t < 100; t++)
    27cc:	1f 5f       	subi	r17, 0xFF	; 255
    27ce:	14 36       	cpi	r17, 0x64	; 100
    27d0:	c9 f7       	brne	.-14     	; 0x27c4 <nrk_error_print+0x14c>
    27d2:	df cf       	rjmp	.-66     	; 0x2792 <nrk_error_print+0x11a>

000027d4 <nrk_kernel_error_add>:
    nrk_error_print ();
  
#endif  /*  */
} void nrk_kernel_error_add (uint8_t n, uint8_t task) 
{
  error_num = n;
    27d4:	80 93 01 04 	sts	0x0401, r24
  error_task = task;
    27d8:	60 93 d0 02 	sts	0x02D0, r22
  
#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    27dc:	0e 94 3c 13 	call	0x2678	; 0x2678 <nrk_error_print>
  
#endif  /*  */
} 
    27e0:	08 95       	ret

000027e2 <nrk_error_add>:
  return nrk_cur_task_TCB->errno;
}

void nrk_error_add (uint8_t n) 
{
  error_num = n;
    27e2:	80 93 01 04 	sts	0x0401, r24
  error_task = nrk_cur_task_TCB->task_ID;
    27e6:	e0 91 7d 05 	lds	r30, 0x057D
    27ea:	f0 91 7e 05 	lds	r31, 0x057E
    27ee:	80 85       	ldd	r24, Z+8	; 0x08
    27f0:	80 93 d0 02 	sts	0x02D0, r24
  
#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    27f4:	0e 94 3c 13 	call	0x2678	; 0x2678 <nrk_error_print>
  
#endif  /*  */
} void nrk_kernel_error_add (uint8_t n, uint8_t task) 
    27f8:	08 95       	ret

000027fa <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

unsigned int *stk ;  // 2 bytes
unsigned char *stkc; // 1 byte
    
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */ 
    27fa:	99 27       	eor	r25, r25
    27fc:	87 fd       	sbrc	r24, 7
    27fe:	90 95       	com	r25
    2800:	fc 01       	movw	r30, r24
    2802:	25 e0       	ldi	r18, 0x05	; 5
    2804:	ee 0f       	add	r30, r30
    2806:	ff 1f       	adc	r31, r31
    2808:	2a 95       	dec	r18
    280a:	e1 f7       	brne	.-8      	; 0x2804 <nrk_stack_check_pid+0xa>
    280c:	e8 0f       	add	r30, r24
    280e:	f9 1f       	adc	r31, r25
    2810:	ee 53       	subi	r30, 0x3E	; 62
    2812:	fb 4f       	sbci	r31, 0xFB	; 251
    2814:	a2 81       	ldd	r26, Z+2	; 0x02
    2816:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL) {
    2818:	8c 91       	ld	r24, X
    281a:	85 35       	cpi	r24, 0x55	; 85
    281c:	21 f0       	breq	.+8      	; 0x2826 <nrk_stack_check_pid+0x2c>
		 *stkc=STK_CANARY_VAL; 
    281e:	85 e5       	ldi	r24, 0x55	; 85
    2820:	8c 93       	st	X, r24
    2822:	8f ef       	ldi	r24, 0xFF	; 255
		 return NRK_ERROR;
    2824:	08 95       	ret
    		  }  
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND ) {
    2826:	80 81       	ld	r24, Z
    2828:	91 81       	ldd	r25, Z+1	; 0x01
    282a:	22 e2       	ldi	r18, 0x22	; 34
    282c:	80 30       	cpi	r24, 0x00	; 0
    282e:	92 07       	cpc	r25, r18
    2830:	10 f4       	brcc	.+4      	; 0x2836 <nrk_stack_check_pid+0x3c>
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	08 95       	ret
	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
    2836:	82 e1       	ldi	r24, 0x12	; 18
    2838:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <nrk_error_add>
    283c:	8f ef       	ldi	r24, 0xFF	; 255
		 return NRK_ERROR;
    		}
#endif
return NRK_OK;
}
    283e:	08 95       	ret

00002840 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2840:	6f 92       	push	r6
    2842:	7f 92       	push	r7
    2844:	8f 92       	push	r8
    2846:	9f 92       	push	r9
    2848:	af 92       	push	r10
    284a:	bf 92       	push	r11
    284c:	cf 92       	push	r12
    284e:	df 92       	push	r13
    2850:	ef 92       	push	r14
    2852:	ff 92       	push	r15
    2854:	0f 93       	push	r16
    2856:	1f 93       	push	r17
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29
	unsigned int *stk;
	unsigned char *stkc;
	uint8_t i;

	nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    285c:	80 ef       	ldi	r24, 0xF0	; 240
    285e:	92 e0       	ldi	r25, 0x02	; 2
    2860:	0e 94 ba 10 	call	0x2174	; 0x2174 <nrk_kprintf>

	printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    2864:	00 d0       	rcall	.+0      	; 0x2866 <dump_stack_info+0x26>
    2866:	00 d0       	rcall	.+0      	; 0x2868 <dump_stack_info+0x28>
    2868:	89 e7       	ldi	r24, 0x79	; 121
    286a:	92 e0       	ldi	r25, 0x02	; 2
    286c:	ad b7       	in	r26, 0x3d	; 61
    286e:	be b7       	in	r27, 0x3e	; 62
    2870:	12 96       	adiw	r26, 0x02	; 2
    2872:	9c 93       	st	X, r25
    2874:	8e 93       	st	-X, r24
    2876:	11 97       	sbiw	r26, 0x01	; 1
    2878:	e0 91 7d 05 	lds	r30, 0x057D
    287c:	f0 91 7e 05 	lds	r31, 0x057E
    2880:	80 85       	ldd	r24, Z+8	; 0x08
    2882:	99 27       	eor	r25, r25
    2884:	87 fd       	sbrc	r24, 7
    2886:	90 95       	com	r25
    2888:	14 96       	adiw	r26, 0x04	; 4
    288a:	9c 93       	st	X, r25
    288c:	8e 93       	st	-X, r24
    288e:	13 97       	sbiw	r26, 0x03	; 3
    2890:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
	stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    2894:	e0 91 7d 05 	lds	r30, 0x057D
    2898:	f0 91 7e 05 	lds	r31, 0x057E
    289c:	c2 81       	ldd	r28, Z+2	; 0x02
    289e:	d3 81       	ldd	r29, Z+3	; 0x03
	stkc = (unsigned char*)stk;
	printf( "bottom = %x ",(uint16_t)stkc );
    28a0:	82 e8       	ldi	r24, 0x82	; 130
    28a2:	92 e0       	ldi	r25, 0x02	; 2
    28a4:	ed b7       	in	r30, 0x3d	; 61
    28a6:	fe b7       	in	r31, 0x3e	; 62
    28a8:	92 83       	std	Z+2, r25	; 0x02
    28aa:	81 83       	std	Z+1, r24	; 0x01
    28ac:	d4 83       	std	Z+4, r29	; 0x04
    28ae:	c3 83       	std	Z+3, r28	; 0x03
    28b0:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
	printf( "canary = %x ",*stkc );
    28b4:	ed b7       	in	r30, 0x3d	; 61
    28b6:	fe b7       	in	r31, 0x3e	; 62
    28b8:	31 96       	adiw	r30, 0x01	; 1
    28ba:	6f e8       	ldi	r22, 0x8F	; 143
    28bc:	a6 2e       	mov	r10, r22
    28be:	62 e0       	ldi	r22, 0x02	; 2
    28c0:	b6 2e       	mov	r11, r22
    28c2:	ad b7       	in	r26, 0x3d	; 61
    28c4:	be b7       	in	r27, 0x3e	; 62
    28c6:	12 96       	adiw	r26, 0x02	; 2
    28c8:	bc 92       	st	X, r11
    28ca:	ae 92       	st	-X, r10
    28cc:	11 97       	sbiw	r26, 0x01	; 1
    28ce:	88 81       	ld	r24, Y
    28d0:	82 83       	std	Z+2, r24	; 0x02
    28d2:	13 82       	std	Z+3, r1	; 0x03
    28d4:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
	stkc = (unsigned char*)stk;
	printf( "stk = %x ",(uint16_t)stkc );
    28d8:	5c e9       	ldi	r21, 0x9C	; 156
    28da:	c5 2e       	mov	r12, r21
    28dc:	52 e0       	ldi	r21, 0x02	; 2
    28de:	d5 2e       	mov	r13, r21
    28e0:	ed b7       	in	r30, 0x3d	; 61
    28e2:	fe b7       	in	r31, 0x3e	; 62
    28e4:	d2 82       	std	Z+2, r13	; 0x02
    28e6:	c1 82       	std	Z+1, r12	; 0x01
    28e8:	e0 91 7d 05 	lds	r30, 0x057D
    28ec:	f0 91 7e 05 	lds	r31, 0x057E
    28f0:	80 81       	ld	r24, Z
    28f2:	91 81       	ldd	r25, Z+1	; 0x01
    28f4:	ad b7       	in	r26, 0x3d	; 61
    28f6:	be b7       	in	r27, 0x3e	; 62
    28f8:	14 96       	adiw	r26, 0x04	; 4
    28fa:	9c 93       	st	X, r25
    28fc:	8e 93       	st	-X, r24
    28fe:	13 97       	sbiw	r26, 0x03	; 3
    2900:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    2904:	46 ea       	ldi	r20, 0xA6	; 166
    2906:	e4 2e       	mov	r14, r20
    2908:	42 e0       	ldi	r20, 0x02	; 2
    290a:	f4 2e       	mov	r15, r20
    290c:	ed b7       	in	r30, 0x3d	; 61
    290e:	fe b7       	in	r31, 0x3e	; 62
    2910:	f2 82       	std	Z+2, r15	; 0x02
    2912:	e1 82       	std	Z+1, r14	; 0x01
    2914:	80 91 7d 05 	lds	r24, 0x057D
    2918:	90 91 7e 05 	lds	r25, 0x057E
    291c:	94 83       	std	Z+4, r25	; 0x04
    291e:	83 83       	std	Z+3, r24	; 0x03
    2920:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
    2924:	c2 ec       	ldi	r28, 0xC2	; 194
    2926:	d4 e0       	ldi	r29, 0x04	; 4
    2928:	00 e0       	ldi	r16, 0x00	; 0
    292a:	10 e0       	ldi	r17, 0x00	; 0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0

	for(i=0; i<NRK_MAX_TASKS; i++ )
	{
		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
		stkc = (unsigned char*)stk;
		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2934:	36 eb       	ldi	r19, 0xB6	; 182
    2936:	83 2e       	mov	r8, r19
    2938:	32 e0       	ldi	r19, 0x02	; 2
    293a:	93 2e       	mov	r9, r19
		printf( "canary = %x ",*stkc );
    293c:	35 01       	movw	r6, r10
		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
		stkc = (unsigned char*)stk;
		printf( "stk = %x ",(uint16_t)stkc );
    293e:	bc 2c       	mov	r11, r12
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2940:	ae 2c       	mov	r10, r14
    2942:	cf 2c       	mov	r12, r15
	printf( "stk = %x ",(uint16_t)stkc );
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

	for(i=0; i<NRK_MAX_TASKS; i++ )
	{
		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2944:	ea 80       	ldd	r14, Y+2	; 0x02
    2946:	fb 80       	ldd	r15, Y+3	; 0x03
		stkc = (unsigned char*)stk;
		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2948:	00 d0       	rcall	.+0      	; 0x294a <dump_stack_info+0x10a>
    294a:	00 d0       	rcall	.+0      	; 0x294c <dump_stack_info+0x10c>
    294c:	00 d0       	rcall	.+0      	; 0x294e <dump_stack_info+0x10e>
    294e:	ed b7       	in	r30, 0x3d	; 61
    2950:	fe b7       	in	r31, 0x3e	; 62
    2952:	31 96       	adiw	r30, 0x01	; 1
    2954:	ad b7       	in	r26, 0x3d	; 61
    2956:	be b7       	in	r27, 0x3e	; 62
    2958:	12 96       	adiw	r26, 0x02	; 2
    295a:	9c 92       	st	X, r9
    295c:	8e 92       	st	-X, r8
    295e:	11 97       	sbiw	r26, 0x01	; 1
    2960:	13 83       	std	Z+3, r17	; 0x03
    2962:	02 83       	std	Z+2, r16	; 0x02
    2964:	f5 82       	std	Z+5, r15	; 0x05
    2966:	e4 82       	std	Z+4, r14	; 0x04
    2968:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
		printf( "canary = %x ",*stkc );
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	ed b7       	in	r30, 0x3d	; 61
    2972:	fe b7       	in	r31, 0x3e	; 62
    2974:	31 96       	adiw	r30, 0x01	; 1
    2976:	ad b7       	in	r26, 0x3d	; 61
    2978:	be b7       	in	r27, 0x3e	; 62
    297a:	11 96       	adiw	r26, 0x01	; 1
    297c:	6c 92       	st	X, r6
    297e:	11 97       	sbiw	r26, 0x01	; 1
    2980:	12 96       	adiw	r26, 0x02	; 2
    2982:	7c 92       	st	X, r7
    2984:	d7 01       	movw	r26, r14
    2986:	8c 91       	ld	r24, X
    2988:	82 83       	std	Z+2, r24	; 0x02
    298a:	13 82       	std	Z+3, r1	; 0x03
    298c:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
		stkc = (unsigned char*)stk;
		printf( "stk = %x ",(uint16_t)stkc );
    2990:	ed b7       	in	r30, 0x3d	; 61
    2992:	fe b7       	in	r31, 0x3e	; 62
    2994:	b1 82       	std	Z+1, r11	; 0x01
    2996:	d2 82       	std	Z+2, r13	; 0x02
    2998:	88 81       	ld	r24, Y
    299a:	99 81       	ldd	r25, Y+1	; 0x01
    299c:	94 83       	std	Z+4, r25	; 0x04
    299e:	83 83       	std	Z+3, r24	; 0x03
    29a0:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    29a4:	ad b7       	in	r26, 0x3d	; 61
    29a6:	be b7       	in	r27, 0x3e	; 62
    29a8:	11 96       	adiw	r26, 0x01	; 1
    29aa:	ac 92       	st	X, r10
    29ac:	11 97       	sbiw	r26, 0x01	; 1
    29ae:	12 96       	adiw	r26, 0x02	; 2
    29b0:	cc 92       	st	X, r12
    29b2:	12 97       	sbiw	r26, 0x02	; 2
    29b4:	14 96       	adiw	r26, 0x04	; 4
    29b6:	dc 93       	st	X, r29
    29b8:	ce 93       	st	-X, r28
    29ba:	13 97       	sbiw	r26, 0x03	; 3
    29bc:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <printf>
    29c0:	0f 5f       	subi	r16, 0xFF	; 255
    29c2:	1f 4f       	sbci	r17, 0xFF	; 255
    29c4:	a1 96       	adiw	r28, 0x21	; 33
	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
	stkc = (unsigned char*)stk;
	printf( "stk = %x ",(uint16_t)stkc );
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

	for(i=0; i<NRK_MAX_TASKS; i++ )
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	05 30       	cpi	r16, 0x05	; 5
    29d0:	11 05       	cpc	r17, r1
    29d2:	09 f0       	breq	.+2      	; 0x29d6 <dump_stack_info+0x196>
    29d4:	b7 cf       	rjmp	.-146    	; 0x2944 <dump_stack_info+0x104>
		printf( "stk = %x ",(uint16_t)stkc );
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

	}

}
    29d6:	df 91       	pop	r29
    29d8:	cf 91       	pop	r28
    29da:	1f 91       	pop	r17
    29dc:	0f 91       	pop	r16
    29de:	ff 90       	pop	r15
    29e0:	ef 90       	pop	r14
    29e2:	df 90       	pop	r13
    29e4:	cf 90       	pop	r12
    29e6:	bf 90       	pop	r11
    29e8:	af 90       	pop	r10
    29ea:	9f 90       	pop	r9
    29ec:	8f 90       	pop	r8
    29ee:	7f 90       	pop	r7
    29f0:	6f 90       	pop	r6
    29f2:	08 95       	ret

000029f4 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

unsigned int *stk ;  // 2 bytes
unsigned char *stkc; // 1 byte
    
    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */ 
    29f8:	e0 91 7d 05 	lds	r30, 0x057D
    29fc:	f0 91 7e 05 	lds	r31, 0x057E
    2a00:	c2 81       	ldd	r28, Z+2	; 0x02
    2a02:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL) {
    2a04:	88 81       	ld	r24, Y
    2a06:	85 35       	cpi	r24, 0x55	; 85
    2a08:	39 f0       	breq	.+14     	; 0x2a18 <nrk_stack_check+0x24>
	    	#ifdef NRK_REPORT_ERRORS
	    	 dump_stack_info();
    2a0a:	0e 94 20 14 	call	0x2840	; 0x2840 <dump_stack_info>
		#endif
	   	 nrk_error_add( NRK_STACK_OVERFLOW ); 
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <nrk_error_add>
		 *stkc=STK_CANARY_VAL; 
    2a14:	85 e5       	ldi	r24, 0x55	; 85
    2a16:	88 83       	st	Y, r24
    		  } 
 
    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */ 
    2a18:	e0 91 7d 05 	lds	r30, 0x057D
    2a1c:	f0 91 7e 05 	lds	r31, 0x057E
    2a20:	80 81       	ld	r24, Z
    2a22:	91 81       	ldd	r25, Z+1	; 0x01
    2a24:	22 e2       	ldi	r18, 0x22	; 34
    2a26:	80 30       	cpi	r24, 0x00	; 0
    2a28:	92 07       	cpc	r25, r18
    2a2a:	28 f0       	brcs	.+10     	; 0x2a36 <nrk_stack_check+0x42>
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND ) {
	    	#ifdef NRK_REPORT_ERRORS
	    	 dump_stack_info();
    2a2c:	0e 94 20 14 	call	0x2840	; 0x2840 <dump_stack_info>
		#endif
	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
    2a30:	82 e1       	ldi	r24, 0x12	; 18
    2a32:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <nrk_error_add>




#endif
}
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	08 95       	ret

00002a3c <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    2a3c:	ef 92       	push	r14
    2a3e:	ff 92       	push	r15
    2a40:	0f 93       	push	r16
    2a42:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    2a44:	e0 90 79 03 	lds	r14, 0x0379
    2a48:	f0 90 7a 03 	lds	r15, 0x037A
    2a4c:	00 91 7b 03 	lds	r16, 0x037B
    2a50:	10 91 7c 03 	lds	r17, 0x037C
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	a8 01       	movw	r20, r16
    2a5a:	97 01       	movw	r18, r14
    2a5c:	08 2e       	mov	r0, r24
    2a5e:	04 c0       	rjmp	.+8      	; 0x2a68 <nrk_signal_create+0x2c>
    2a60:	56 95       	lsr	r21
    2a62:	47 95       	ror	r20
    2a64:	37 95       	ror	r19
    2a66:	27 95       	ror	r18
    2a68:	0a 94       	dec	r0
    2a6a:	d2 f7       	brpl	.-12     	; 0x2a60 <nrk_signal_create+0x24>
    2a6c:	21 70       	andi	r18, 0x01	; 1
    2a6e:	30 70       	andi	r19, 0x00	; 0
    2a70:	21 15       	cp	r18, r1
    2a72:	31 05       	cpc	r19, r1
    2a74:	c9 f4       	brne	.+50     	; 0x2aa8 <nrk_signal_create+0x6c>
		{    
			_nrk_signal_list|=SIG(i);
    2a76:	21 e0       	ldi	r18, 0x01	; 1
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e0       	ldi	r20, 0x00	; 0
    2a7c:	50 e0       	ldi	r21, 0x00	; 0
    2a7e:	08 2e       	mov	r0, r24
    2a80:	04 c0       	rjmp	.+8      	; 0x2a8a <nrk_signal_create+0x4e>
    2a82:	22 0f       	add	r18, r18
    2a84:	33 1f       	adc	r19, r19
    2a86:	44 1f       	adc	r20, r20
    2a88:	55 1f       	adc	r21, r21
    2a8a:	0a 94       	dec	r0
    2a8c:	d2 f7       	brpl	.-12     	; 0x2a82 <nrk_signal_create+0x46>
    2a8e:	2e 29       	or	r18, r14
    2a90:	3f 29       	or	r19, r15
    2a92:	40 2b       	or	r20, r16
    2a94:	51 2b       	or	r21, r17
    2a96:	20 93 79 03 	sts	0x0379, r18
    2a9a:	30 93 7a 03 	sts	0x037A, r19
    2a9e:	40 93 7b 03 	sts	0x037B, r20
    2aa2:	50 93 7c 03 	sts	0x037C, r21
			return i;
    2aa6:	05 c0       	rjmp	.+10     	; 0x2ab2 <nrk_signal_create+0x76>
    2aa8:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    2aaa:	80 32       	cpi	r24, 0x20	; 32
    2aac:	91 05       	cpc	r25, r1
    2aae:	a1 f6       	brne	.-88     	; 0x2a58 <nrk_signal_create+0x1c>
    2ab0:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
	return NRK_ERROR;


}
    2ab2:	1f 91       	pop	r17
    2ab4:	0f 91       	pop	r16
    2ab6:	ff 90       	pop	r15
    2ab8:	ef 90       	pop	r14
    2aba:	08 95       	ret

00002abc <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
    2abc:	e0 91 7d 05 	lds	r30, 0x057D
    2ac0:	f0 91 7e 05 	lds	r31, 0x057E
    2ac4:	65 85       	ldd	r22, Z+13	; 0x0d
    2ac6:	76 85       	ldd	r23, Z+14	; 0x0e
        return nrk_cur_task_TCB->registered_signal_mask;
}
    2ac8:	87 85       	ldd	r24, Z+15	; 0x0f
    2aca:	90 89       	ldd	r25, Z+16	; 0x10
    2acc:	08 95       	ret

00002ace <nrk_signal_unregister>:
	return NRK_OK;
}


int8_t nrk_signal_unregister(int8_t sig_id)
{
    2ace:	ef 92       	push	r14
    2ad0:	ff 92       	push	r15
    2ad2:	0f 93       	push	r16
    2ad4:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    2ad6:	21 e0       	ldi	r18, 0x01	; 1
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e0       	ldi	r20, 0x00	; 0
    2adc:	50 e0       	ldi	r21, 0x00	; 0
    2ade:	04 c0       	rjmp	.+8      	; 0x2ae8 <nrk_signal_unregister+0x1a>
    2ae0:	22 0f       	add	r18, r18
    2ae2:	33 1f       	adc	r19, r19
    2ae4:	44 1f       	adc	r20, r20
    2ae6:	55 1f       	adc	r21, r21
    2ae8:	8a 95       	dec	r24
    2aea:	d2 f7       	brpl	.-12     	; 0x2ae0 <nrk_signal_unregister+0x12>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    2aec:	e0 91 7d 05 	lds	r30, 0x057D
    2af0:	f0 91 7e 05 	lds	r31, 0x057E
    2af4:	85 85       	ldd	r24, Z+13	; 0x0d
    2af6:	96 85       	ldd	r25, Z+14	; 0x0e
    2af8:	a7 85       	ldd	r26, Z+15	; 0x0f
    2afa:	b0 89       	ldd	r27, Z+16	; 0x10
    2afc:	79 01       	movw	r14, r18
    2afe:	8a 01       	movw	r16, r20
    2b00:	e8 22       	and	r14, r24
    2b02:	f9 22       	and	r15, r25
    2b04:	0a 23       	and	r16, r26
    2b06:	1b 23       	and	r17, r27
    2b08:	e1 14       	cp	r14, r1
    2b0a:	f1 04       	cpc	r15, r1
    2b0c:	01 05       	cpc	r16, r1
    2b0e:	11 05       	cpc	r17, r1
    2b10:	11 f4       	brne	.+4      	; 0x2b16 <nrk_signal_unregister+0x48>
    2b12:	8f ef       	ldi	r24, 0xFF	; 255
    2b14:	19 c0       	rjmp	.+50     	; 0x2b48 <nrk_signal_unregister+0x7a>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    2b16:	20 95       	com	r18
    2b18:	30 95       	com	r19
    2b1a:	40 95       	com	r20
    2b1c:	50 95       	com	r21
    2b1e:	82 23       	and	r24, r18
    2b20:	93 23       	and	r25, r19
    2b22:	a4 23       	and	r26, r20
    2b24:	b5 23       	and	r27, r21
    2b26:	85 87       	std	Z+13, r24	; 0x0d
    2b28:	96 87       	std	Z+14, r25	; 0x0e
    2b2a:	a7 87       	std	Z+15, r26	; 0x0f
    2b2c:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    2b2e:	81 89       	ldd	r24, Z+17	; 0x11
    2b30:	92 89       	ldd	r25, Z+18	; 0x12
    2b32:	a3 89       	ldd	r26, Z+19	; 0x13
    2b34:	b4 89       	ldd	r27, Z+20	; 0x14
    2b36:	82 23       	and	r24, r18
    2b38:	93 23       	and	r25, r19
    2b3a:	a4 23       	and	r26, r20
    2b3c:	b5 23       	and	r27, r21
    2b3e:	81 8b       	std	Z+17, r24	; 0x11
    2b40:	92 8b       	std	Z+18, r25	; 0x12
    2b42:	a3 8b       	std	Z+19, r26	; 0x13
    2b44:	b4 8b       	std	Z+20, r27	; 0x14
    2b46:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return NRK_ERROR;
return NRK_OK;
}
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	ff 90       	pop	r15
    2b4e:	ef 90       	pop	r14
    2b50:	08 95       	ret

00002b52 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    2b52:	99 27       	eor	r25, r25
    2b54:	87 fd       	sbrc	r24, 7
    2b56:	90 95       	com	r25
    2b58:	20 91 79 03 	lds	r18, 0x0379
    2b5c:	30 91 7a 03 	lds	r19, 0x037A
    2b60:	40 91 7b 03 	lds	r20, 0x037B
    2b64:	50 91 7c 03 	lds	r21, 0x037C
    2b68:	08 2e       	mov	r0, r24
    2b6a:	04 c0       	rjmp	.+8      	; 0x2b74 <nrk_signal_register+0x22>
    2b6c:	56 95       	lsr	r21
    2b6e:	47 95       	ror	r20
    2b70:	37 95       	ror	r19
    2b72:	27 95       	ror	r18
    2b74:	0a 94       	dec	r0
    2b76:	d2 f7       	brpl	.-12     	; 0x2b6c <nrk_signal_register+0x1a>
    2b78:	21 70       	andi	r18, 0x01	; 1
    2b7a:	30 70       	andi	r19, 0x00	; 0
    2b7c:	21 15       	cp	r18, r1
    2b7e:	31 05       	cpc	r19, r1
    2b80:	11 f4       	brne	.+4      	; 0x2b86 <nrk_signal_register+0x34>
    2b82:	8f ef       	ldi	r24, 0xFF	; 255
    2b84:	08 95       	ret
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    2b86:	e0 91 7d 05 	lds	r30, 0x057D
    2b8a:	f0 91 7e 05 	lds	r31, 0x057E
    2b8e:	21 e0       	ldi	r18, 0x01	; 1
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	40 e0       	ldi	r20, 0x00	; 0
    2b94:	50 e0       	ldi	r21, 0x00	; 0
    2b96:	04 c0       	rjmp	.+8      	; 0x2ba0 <nrk_signal_register+0x4e>
    2b98:	22 0f       	add	r18, r18
    2b9a:	33 1f       	adc	r19, r19
    2b9c:	44 1f       	adc	r20, r20
    2b9e:	55 1f       	adc	r21, r21
    2ba0:	8a 95       	dec	r24
    2ba2:	d2 f7       	brpl	.-12     	; 0x2b98 <nrk_signal_register+0x46>
    2ba4:	85 85       	ldd	r24, Z+13	; 0x0d
    2ba6:	96 85       	ldd	r25, Z+14	; 0x0e
    2ba8:	a7 85       	ldd	r26, Z+15	; 0x0f
    2baa:	b0 89       	ldd	r27, Z+16	; 0x10
    2bac:	82 2b       	or	r24, r18
    2bae:	93 2b       	or	r25, r19
    2bb0:	a4 2b       	or	r26, r20
    2bb2:	b5 2b       	or	r27, r21
    2bb4:	85 87       	std	Z+13, r24	; 0x0d
    2bb6:	96 87       	std	Z+14, r25	; 0x0e
    2bb8:	a7 87       	std	Z+15, r26	; 0x0f
    2bba:	b0 8b       	std	Z+16, r27	; 0x10
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
		return NRK_OK;
	}
            
	return NRK_ERROR;
}
    2bbe:	08 95       	ret

00002bc0 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	08 95       	ret

00002bc6 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    2bc6:	25 e0       	ldi	r18, 0x05	; 5
    2bc8:	89 36       	cpi	r24, 0x69	; 105
    2bca:	92 07       	cpc	r25, r18
    2bcc:	11 f0       	breq	.+4      	; 0x2bd2 <nrk_get_resource_index+0xc>
    2bce:	8f ef       	ldi	r24, 0xFF	; 255
    2bd0:	08 95       	ret
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
				return id;
	return NRK_ERROR;
}
    2bd4:	08 95       	ret

00002bd6 <nrk_sem_delete>:
return NRK_OK;
}

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    2bd6:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2bda:	8f 3f       	cpi	r24, 0xFF	; 255
    2bdc:	11 f4       	brne	.+4      	; 0x2be2 <nrk_sem_delete+0xc>
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	03 c0       	rjmp	.+6      	; 0x2be8 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2be2:	81 30       	cpi	r24, 0x01	; 1
    2be4:	29 f4       	brne	.+10     	; 0x2bf0 <nrk_sem_delete+0x1a>
    2be6:	82 e0       	ldi	r24, 0x02	; 2
    2be8:	0e 94 22 13 	call	0x2644	; 0x2644 <_nrk_errno_set>
    2bec:	8f ef       	ldi	r24, 0xFF	; 255
    2bee:	08 95       	ret

	nrk_sem_list[id].count=-1;
    2bf0:	99 27       	eor	r25, r25
    2bf2:	87 fd       	sbrc	r24, 7
    2bf4:	90 95       	com	r25
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	ee 0f       	add	r30, r30
    2bfa:	ff 1f       	adc	r31, r31
    2bfc:	e8 0f       	add	r30, r24
    2bfe:	f9 1f       	adc	r31, r25
    2c00:	e7 59       	subi	r30, 0x97	; 151
    2c02:	fa 4f       	sbci	r31, 0xFA	; 250
    2c04:	8f ef       	ldi	r24, 0xFF	; 255
    2c06:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    2c08:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    2c0a:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    2c0c:	80 91 7c 05 	lds	r24, 0x057C
    2c10:	81 50       	subi	r24, 0x01	; 1
    2c12:	80 93 7c 05 	sts	0x057C, r24
    2c16:	81 e0       	ldi	r24, 0x01	; 1
return NRK_OK;
}
    2c18:	08 95       	ret

00002c1a <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2c1a:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c20:	11 f4       	brne	.+4      	; 0x2c26 <nrk_sem_query+0xc>
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	03 c0       	rjmp	.+6      	; 0x2c2c <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2c26:	81 30       	cpi	r24, 0x01	; 1
    2c28:	29 f4       	brne	.+10     	; 0x2c34 <nrk_sem_query+0x1a>
    2c2a:	82 e0       	ldi	r24, 0x02	; 2
    2c2c:	0e 94 22 13 	call	0x2644	; 0x2644 <_nrk_errno_set>
    2c30:	8f ef       	ldi	r24, 0xFF	; 255
    2c32:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    2c34:	99 27       	eor	r25, r25
    2c36:	87 fd       	sbrc	r24, 7
    2c38:	90 95       	com	r25
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	ee 0f       	add	r30, r30
    2c3e:	ff 1f       	adc	r31, r31
    2c40:	e8 0f       	add	r30, r24
    2c42:	f9 1f       	adc	r31, r25
    2c44:	e7 59       	subi	r30, 0x97	; 151
    2c46:	fa 4f       	sbci	r31, 0xFA	; 250
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
}
    2c4a:	08 95       	ret

00002c4c <nrk_sem_post>:
}



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    2c4c:	ef 92       	push	r14
    2c4e:	ff 92       	push	r15
    2c50:	0f 93       	push	r16
    2c52:	1f 93       	push	r17
    2c54:	df 93       	push	r29
    2c56:	cf 93       	push	r28
    2c58:	0f 92       	push	r0
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    2c5e:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2c62:	8f 3f       	cpi	r24, 0xFF	; 255
    2c64:	11 f4       	brne	.+4      	; 0x2c6a <nrk_sem_post+0x1e>
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	03 c0       	rjmp	.+6      	; 0x2c70 <nrk_sem_post+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2c6a:	81 30       	cpi	r24, 0x01	; 1
    2c6c:	29 f4       	brne	.+10     	; 0x2c78 <nrk_sem_post+0x2c>
    2c6e:	82 e0       	ldi	r24, 0x02	; 2
    2c70:	0e 94 22 13 	call	0x2644	; 0x2644 <_nrk_errno_set>
    2c74:	8f ef       	ldi	r24, 0xFF	; 255
    2c76:	44 c0       	rjmp	.+136    	; 0x2d00 <nrk_sem_post+0xb4>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    2c78:	28 2f       	mov	r18, r24
    2c7a:	33 27       	eor	r19, r19
    2c7c:	27 fd       	sbrc	r18, 7
    2c7e:	30 95       	com	r19
    2c80:	89 01       	movw	r16, r18
    2c82:	00 0f       	add	r16, r16
    2c84:	11 1f       	adc	r17, r17
    2c86:	02 0f       	add	r16, r18
    2c88:	13 1f       	adc	r17, r19
    2c8a:	07 59       	subi	r16, 0x97	; 151
    2c8c:	1a 4f       	sbci	r17, 0xFA	; 250
    2c8e:	d8 01       	movw	r26, r16
    2c90:	12 96       	adiw	r26, 0x02	; 2
    2c92:	2c 91       	ld	r18, X
    2c94:	12 97       	sbiw	r26, 0x02	; 2
    2c96:	9c 91       	ld	r25, X
    2c98:	29 17       	cp	r18, r25
    2c9a:	8c f5       	brge	.+98     	; 0x2cfe <nrk_sem_post+0xb2>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>

		nrk_sem_list[id].value++;
    2ca2:	f8 01       	movw	r30, r16
    2ca4:	92 81       	ldd	r25, Z+2	; 0x02
    2ca6:	9f 5f       	subi	r25, 0xFF	; 255
    2ca8:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    2caa:	e0 91 7d 05 	lds	r30, 0x057D
    2cae:	f0 91 7e 05 	lds	r31, 0x057E
    2cb2:	14 82       	std	Z+4, r1	; 0x04
    2cb4:	e9 ec       	ldi	r30, 0xC9	; 201
    2cb6:	f4 e0       	ldi	r31, 0x04	; 4

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	28 2f       	mov	r18, r24
    2cbc:	33 27       	eor	r19, r19
    2cbe:	27 fd       	sbrc	r18, 7
    2cc0:	30 95       	com	r19
    2cc2:	43 2f       	mov	r20, r19
    2cc4:	53 2f       	mov	r21, r19
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2cc6:	93 e0       	ldi	r25, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2cc8:	80 81       	ld	r24, Z
    2cca:	82 30       	cpi	r24, 0x02	; 2
    2ccc:	89 f4       	brne	.+34     	; 0x2cf0 <nrk_sem_post+0xa4>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    2cce:	e2 84       	ldd	r14, Z+10	; 0x0a
    2cd0:	f3 84       	ldd	r15, Z+11	; 0x0b
    2cd2:	04 85       	ldd	r16, Z+12	; 0x0c
    2cd4:	15 85       	ldd	r17, Z+13	; 0x0d
    2cd6:	e2 16       	cp	r14, r18
    2cd8:	f3 06       	cpc	r15, r19
    2cda:	04 07       	cpc	r16, r20
    2cdc:	15 07       	cpc	r17, r21
    2cde:	41 f4       	brne	.+16     	; 0x2cf0 <nrk_sem_post+0xa4>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2ce0:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    2ce2:	17 86       	std	Z+15, r1	; 0x0f
    2ce4:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    2ce6:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2ce8:	12 86       	std	Z+10, r1	; 0x0a
    2cea:	13 86       	std	Z+11, r1	; 0x0b
    2cec:	14 86       	std	Z+12, r1	; 0x0c
    2cee:	15 86       	std	Z+13, r1	; 0x0d
    2cf0:	b1 96       	adiw	r30, 0x21	; 33
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2cf2:	85 e0       	ldi	r24, 0x05	; 5
    2cf4:	ee 36       	cpi	r30, 0x6E	; 110
    2cf6:	f8 07       	cpc	r31, r24
    2cf8:	39 f7       	brne	.-50     	; 0x2cc8 <nrk_sem_post+0x7c>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    2cfa:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
	}
		
return NRK_OK;
}
    2d00:	0f 90       	pop	r0
    2d02:	cf 91       	pop	r28
    2d04:	df 91       	pop	r29
    2d06:	1f 91       	pop	r17
    2d08:	0f 91       	pop	r16
    2d0a:	ff 90       	pop	r15
    2d0c:	ef 90       	pop	r14
    2d0e:	08 95       	ret

00002d10 <nrk_event_signal>:
            
	return NRK_ERROR;
}

int8_t nrk_event_signal(int8_t sig_id)
{
    2d10:	ef 92       	push	r14
    2d12:	ff 92       	push	r15
    2d14:	0f 93       	push	r16
    2d16:	1f 93       	push	r17
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	0f 92       	push	r0
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    2d22:	51 e0       	ldi	r21, 0x01	; 1
    2d24:	e5 2e       	mov	r14, r21
    2d26:	f1 2c       	mov	r15, r1
    2d28:	01 2d       	mov	r16, r1
    2d2a:	11 2d       	mov	r17, r1
    2d2c:	04 c0       	rjmp	.+8      	; 0x2d36 <nrk_event_signal+0x26>
    2d2e:	ee 0c       	add	r14, r14
    2d30:	ff 1c       	adc	r15, r15
    2d32:	00 1f       	adc	r16, r16
    2d34:	11 1f       	adc	r17, r17
    2d36:	8a 95       	dec	r24
    2d38:	d2 f7       	brpl	.-12     	; 0x2d2e <nrk_event_signal+0x1e>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    2d3a:	80 91 79 03 	lds	r24, 0x0379
    2d3e:	90 91 7a 03 	lds	r25, 0x037A
    2d42:	a0 91 7b 03 	lds	r26, 0x037B
    2d46:	b0 91 7c 03 	lds	r27, 0x037C
    2d4a:	8e 21       	and	r24, r14
    2d4c:	9f 21       	and	r25, r15
    2d4e:	a0 23       	and	r26, r16
    2d50:	b1 23       	and	r27, r17
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	a1 05       	cpc	r26, r1
    2d56:	b1 05       	cpc	r27, r1
    2d58:	11 f4       	brne	.+4      	; 0x2d5e <nrk_event_signal+0x4e>
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	42 c0       	rjmp	.+132    	; 0x2de2 <nrk_event_signal+0xd2>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    2d5e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>
    2d62:	e9 ec       	ldi	r30, 0xC9	; 201
    2d64:	f4 e0       	ldi	r31, 0x04	; 4
	}
            
	return NRK_ERROR;
}

int8_t nrk_event_signal(int8_t sig_id)
    2d66:	80 e0       	ldi	r24, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2d68:	93 e0       	ldi	r25, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    2d6a:	20 81       	ld	r18, Z
    2d6c:	21 30       	cpi	r18, 0x01	; 1
    2d6e:	b1 f4       	brne	.+44     	; 0x2d9c <nrk_event_signal+0x8c>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    2d70:	22 85       	ldd	r18, Z+10	; 0x0a
    2d72:	33 85       	ldd	r19, Z+11	; 0x0b
    2d74:	44 85       	ldd	r20, Z+12	; 0x0c
    2d76:	55 85       	ldd	r21, Z+13	; 0x0d
    2d78:	2e 21       	and	r18, r14
    2d7a:	3f 21       	and	r19, r15
    2d7c:	40 23       	and	r20, r16
    2d7e:	51 23       	and	r21, r17
    2d80:	21 15       	cp	r18, r1
    2d82:	31 05       	cpc	r19, r1
    2d84:	41 05       	cpc	r20, r1
    2d86:	51 05       	cpc	r21, r1
    2d88:	49 f0       	breq	.+18     	; 0x2d9c <nrk_event_signal+0x8c>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2d8a:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    2d8c:	17 86       	std	Z+15, r1	; 0x0f
    2d8e:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    2d90:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    2d92:	e2 86       	std	Z+10, r14	; 0x0a
    2d94:	f3 86       	std	Z+11, r15	; 0x0b
    2d96:	04 87       	std	Z+12, r16	; 0x0c
    2d98:	15 87       	std	Z+13, r17	; 0x0d
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
					event_occured=1;
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2d9c:	20 81       	ld	r18, Z
    2d9e:	22 30       	cpi	r18, 0x02	; 2
    2da0:	91 f4       	brne	.+36     	; 0x2dc6 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    2da2:	22 85       	ldd	r18, Z+10	; 0x0a
    2da4:	33 85       	ldd	r19, Z+11	; 0x0b
    2da6:	44 85       	ldd	r20, Z+12	; 0x0c
    2da8:	55 85       	ldd	r21, Z+13	; 0x0d
    2daa:	2e 15       	cp	r18, r14
    2dac:	3f 05       	cpc	r19, r15
    2dae:	40 07       	cpc	r20, r16
    2db0:	51 07       	cpc	r21, r17
    2db2:	49 f4       	brne	.+18     	; 0x2dc6 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2db4:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    2db6:	17 86       	std	Z+15, r1	; 0x0f
    2db8:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    2dba:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2dbc:	12 86       	std	Z+10, r1	; 0x0a
    2dbe:	13 86       	std	Z+11, r1	; 0x0b
    2dc0:	14 86       	std	Z+12, r1	; 0x0c
    2dc2:	15 86       	std	Z+13, r1	; 0x0d
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	b1 96       	adiw	r30, 0x21	; 33
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2dc8:	25 e0       	ldi	r18, 0x05	; 5
    2dca:	ee 36       	cpi	r30, 0x6E	; 110
    2dcc:	f2 07       	cpc	r31, r18
    2dce:	69 f6       	brne	.-102    	; 0x2d6a <nrk_event_signal+0x5a>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    2dd0:	89 83       	std	Y+1, r24	; 0x01
    2dd2:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>
	if(event_occured)
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	88 23       	and	r24, r24
    2dda:	11 f0       	breq	.+4      	; 0x2de0 <nrk_event_signal+0xd0>
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	04 c0       	rjmp	.+8      	; 0x2de8 <nrk_event_signal+0xd8>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    2de0:	82 e0       	ldi	r24, 0x02	; 2
    2de2:	0e 94 22 13 	call	0x2644	; 0x2644 <_nrk_errno_set>
    2de6:	8f ef       	ldi	r24, 0xFF	; 255
	return NRK_ERROR;
}
    2de8:	0f 90       	pop	r0
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	1f 91       	pop	r17
    2df0:	0f 91       	pop	r16
    2df2:	ff 90       	pop	r15
    2df4:	ef 90       	pop	r14
    2df6:	08 95       	ret

00002df8 <nrk_signal_delete>:
        return nrk_cur_task_TCB->registered_signal_mask;
}

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    2df8:	ef 92       	push	r14
    2dfa:	ff 92       	push	r15
    2dfc:	0f 93       	push	r16
    2dfe:	1f 93       	push	r17
    2e00:	cf 93       	push	r28
    2e02:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    2e04:	c8 2f       	mov	r28, r24
    2e06:	dd 27       	eor	r29, r29
    2e08:	c7 fd       	sbrc	r28, 7
    2e0a:	d0 95       	com	r29
    2e0c:	61 e0       	ldi	r22, 0x01	; 1
    2e0e:	e6 2e       	mov	r14, r22
    2e10:	f1 2c       	mov	r15, r1
    2e12:	01 2d       	mov	r16, r1
    2e14:	11 2d       	mov	r17, r1
    2e16:	0c 2e       	mov	r0, r28
    2e18:	04 c0       	rjmp	.+8      	; 0x2e22 <nrk_signal_delete+0x2a>
    2e1a:	ee 0c       	add	r14, r14
    2e1c:	ff 1c       	adc	r15, r15
    2e1e:	00 1f       	adc	r16, r16
    2e20:	11 1f       	adc	r17, r17
    2e22:	0a 94       	dec	r0
    2e24:	d2 f7       	brpl	.-12     	; 0x2e1a <nrk_signal_delete+0x22>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2e26:	80 91 79 03 	lds	r24, 0x0379
    2e2a:	90 91 7a 03 	lds	r25, 0x037A
    2e2e:	a0 91 7b 03 	lds	r26, 0x037B
    2e32:	b0 91 7c 03 	lds	r27, 0x037C
    2e36:	8e 21       	and	r24, r14
    2e38:	9f 21       	and	r25, r15
    2e3a:	a0 23       	and	r26, r16
    2e3c:	b1 23       	and	r27, r17
    2e3e:	00 97       	sbiw	r24, 0x00	; 0
    2e40:	a1 05       	cpc	r26, r1
    2e42:	b1 05       	cpc	r27, r1
    2e44:	11 f4       	brne	.+4      	; 0x2e4a <nrk_signal_delete+0x52>
    2e46:	8f ef       	ldi	r24, 0xFF	; 255
    2e48:	5c c0       	rjmp	.+184    	; 0x2f02 <nrk_signal_delete+0x10a>

	nrk_int_disable();
    2e4a:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>
    2e4e:	e9 ec       	ldi	r30, 0xC9	; 201
    2e50:	f4 e0       	ldi	r31, 0x04	; 4
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2e52:	a8 01       	movw	r20, r16
    2e54:	97 01       	movw	r18, r14
    2e56:	20 95       	com	r18
    2e58:	30 95       	com	r19
    2e5a:	40 95       	com	r20
    2e5c:	50 95       	com	r21
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2e5e:	63 e0       	ldi	r22, 0x03	; 3

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    2e60:	81 81       	ldd	r24, Z+1	; 0x01
    2e62:	8f 3f       	cpi	r24, 0xFF	; 255
    2e64:	39 f1       	breq	.+78     	; 0x2eb4 <nrk_signal_delete+0xbc>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    2e66:	86 81       	ldd	r24, Z+6	; 0x06
    2e68:	97 81       	ldd	r25, Z+7	; 0x07
    2e6a:	a0 85       	ldd	r26, Z+8	; 0x08
    2e6c:	b1 85       	ldd	r27, Z+9	; 0x09
    2e6e:	8e 15       	cp	r24, r14
    2e70:	9f 05       	cpc	r25, r15
    2e72:	a0 07       	cpc	r26, r16
    2e74:	b1 07       	cpc	r27, r17
    2e76:	31 f4       	brne	.+12     	; 0x2e84 <nrk_signal_delete+0x8c>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    2e78:	12 86       	std	Z+10, r1	; 0x0a
    2e7a:	13 86       	std	Z+11, r1	; 0x0b
    2e7c:	14 86       	std	Z+12, r1	; 0x0c
    2e7e:	15 86       	std	Z+13, r1	; 0x0d
			nrk_task_TCB[task_ID].event_suspend=0;
    2e80:	10 82       	st	Z, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2e82:	62 83       	std	Z+2, r22	; 0x02
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2e84:	86 81       	ldd	r24, Z+6	; 0x06
    2e86:	97 81       	ldd	r25, Z+7	; 0x07
    2e88:	a0 85       	ldd	r26, Z+8	; 0x08
    2e8a:	b1 85       	ldd	r27, Z+9	; 0x09
    2e8c:	82 23       	and	r24, r18
    2e8e:	93 23       	and	r25, r19
    2e90:	a4 23       	and	r26, r20
    2e92:	b5 23       	and	r27, r21
    2e94:	86 83       	std	Z+6, r24	; 0x06
    2e96:	97 83       	std	Z+7, r25	; 0x07
    2e98:	a0 87       	std	Z+8, r26	; 0x08
    2e9a:	b1 87       	std	Z+9, r27	; 0x09
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2e9c:	82 85       	ldd	r24, Z+10	; 0x0a
    2e9e:	93 85       	ldd	r25, Z+11	; 0x0b
    2ea0:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ea2:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ea4:	82 23       	and	r24, r18
    2ea6:	93 23       	and	r25, r19
    2ea8:	a4 23       	and	r26, r20
    2eaa:	b5 23       	and	r27, r21
    2eac:	82 87       	std	Z+10, r24	; 0x0a
    2eae:	93 87       	std	Z+11, r25	; 0x0b
    2eb0:	a4 87       	std	Z+12, r26	; 0x0c
    2eb2:	b5 87       	std	Z+13, r27	; 0x0d
    2eb4:	b1 96       	adiw	r30, 0x21	; 33
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2eb6:	95 e0       	ldi	r25, 0x05	; 5
    2eb8:	ee 36       	cpi	r30, 0x6E	; 110
    2eba:	f9 07       	cpc	r31, r25
    2ebc:	89 f6       	brne	.-94     	; 0x2e60 <nrk_signal_delete+0x68>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    2ebe:	2e ef       	ldi	r18, 0xFE	; 254
    2ec0:	3f ef       	ldi	r19, 0xFF	; 255
    2ec2:	4f ef       	ldi	r20, 0xFF	; 255
    2ec4:	5f ef       	ldi	r21, 0xFF	; 255
    2ec6:	04 c0       	rjmp	.+8      	; 0x2ed0 <nrk_signal_delete+0xd8>
    2ec8:	22 0f       	add	r18, r18
    2eca:	33 1f       	adc	r19, r19
    2ecc:	44 1f       	adc	r20, r20
    2ece:	55 1f       	adc	r21, r21
    2ed0:	ca 95       	dec	r28
    2ed2:	d2 f7       	brpl	.-12     	; 0x2ec8 <nrk_signal_delete+0xd0>
    2ed4:	80 91 79 03 	lds	r24, 0x0379
    2ed8:	90 91 7a 03 	lds	r25, 0x037A
    2edc:	a0 91 7b 03 	lds	r26, 0x037B
    2ee0:	b0 91 7c 03 	lds	r27, 0x037C
    2ee4:	82 23       	and	r24, r18
    2ee6:	93 23       	and	r25, r19
    2ee8:	a4 23       	and	r26, r20
    2eea:	b5 23       	and	r27, r21
    2eec:	80 93 79 03 	sts	0x0379, r24
    2ef0:	90 93 7a 03 	sts	0x037A, r25
    2ef4:	a0 93 7b 03 	sts	0x037B, r26
    2ef8:	b0 93 7c 03 	sts	0x037C, r27
	nrk_int_enable();
    2efc:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>
    2f00:	81 e0       	ldi	r24, 0x01	; 1

	return NRK_OK;
}
    2f02:	df 91       	pop	r29
    2f04:	cf 91       	pop	r28
    2f06:	1f 91       	pop	r17
    2f08:	0f 91       	pop	r16
    2f0a:	ff 90       	pop	r15
    2f0c:	ef 90       	pop	r14
    2f0e:	08 95       	ret

00002f10 <nrk_sem_pend>:
}



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	df 93       	push	r29
    2f16:	cf 93       	push	r28
    2f18:	0f 92       	push	r0
    2f1a:	cd b7       	in	r28, 0x3d	; 61
    2f1c:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2f1e:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2f22:	8f 3f       	cpi	r24, 0xFF	; 255
    2f24:	11 f4       	brne	.+4      	; 0x2f2a <nrk_sem_pend+0x1a>
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	03 c0       	rjmp	.+6      	; 0x2f30 <nrk_sem_pend+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2f2a:	81 30       	cpi	r24, 0x01	; 1
    2f2c:	29 f4       	brne	.+10     	; 0x2f38 <nrk_sem_pend+0x28>
    2f2e:	82 e0       	ldi	r24, 0x02	; 2
    2f30:	0e 94 22 13 	call	0x2644	; 0x2644 <_nrk_errno_set>
    2f34:	8f ef       	ldi	r24, 0xFF	; 255
    2f36:	40 c0       	rjmp	.+128    	; 0x2fb8 <nrk_sem_pend+0xa8>
	
	nrk_int_disable();
    2f38:	89 83       	std	Y+1, r24	; 0x01
    2f3a:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	08 2f       	mov	r16, r24
    2f42:	11 27       	eor	r17, r17
    2f44:	07 fd       	sbrc	r16, 7
    2f46:	10 95       	com	r17
    2f48:	f8 01       	movw	r30, r16
    2f4a:	ee 0f       	add	r30, r30
    2f4c:	ff 1f       	adc	r31, r31
    2f4e:	e0 0f       	add	r30, r16
    2f50:	f1 1f       	adc	r31, r17
    2f52:	e7 59       	subi	r30, 0x97	; 151
    2f54:	fa 4f       	sbci	r31, 0xFA	; 250
    2f56:	92 81       	ldd	r25, Z+2	; 0x02
    2f58:	99 23       	and	r25, r25
    2f5a:	b1 f4       	brne	.+44     	; 0x2f88 <nrk_sem_pend+0x78>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    2f5c:	e0 91 7d 05 	lds	r30, 0x057D
    2f60:	f0 91 7e 05 	lds	r31, 0x057E
    2f64:	97 81       	ldd	r25, Z+7	; 0x07
    2f66:	92 60       	ori	r25, 0x02	; 2
    2f68:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    2f6a:	99 27       	eor	r25, r25
    2f6c:	87 fd       	sbrc	r24, 7
    2f6e:	90 95       	com	r25
    2f70:	a9 2f       	mov	r26, r25
    2f72:	b9 2f       	mov	r27, r25
    2f74:	81 8b       	std	Z+17, r24	; 0x11
    2f76:	92 8b       	std	Z+18, r25	; 0x12
    2f78:	a3 8b       	std	Z+19, r26	; 0x13
    2f7a:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    2f7c:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>
		nrk_wait_until_ticks(0);
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    2f88:	f8 01       	movw	r30, r16
    2f8a:	ee 0f       	add	r30, r30
    2f8c:	ff 1f       	adc	r31, r31
    2f8e:	e0 0f       	add	r30, r16
    2f90:	f1 1f       	adc	r31, r17
    2f92:	e7 59       	subi	r30, 0x97	; 151
    2f94:	fa 4f       	sbci	r31, 0xFA	; 250
    2f96:	82 81       	ldd	r24, Z+2	; 0x02
    2f98:	81 50       	subi	r24, 0x01	; 1
    2f9a:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    2f9c:	a0 91 7d 05 	lds	r26, 0x057D
    2fa0:	b0 91 7e 05 	lds	r27, 0x057E
    2fa4:	81 81       	ldd	r24, Z+1	; 0x01
    2fa6:	1b 96       	adiw	r26, 0x0b	; 11
    2fa8:	8c 93       	st	X, r24
    2faa:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	14 96       	adiw	r26, 0x04	; 4
    2fb0:	8c 93       	st	X, r24
	nrk_int_enable();
    2fb2:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>
    2fb6:	81 e0       	ldi	r24, 0x01	; 1

	return NRK_OK;
}
    2fb8:	0f 90       	pop	r0
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	1f 91       	pop	r17
    2fc0:	0f 91       	pop	r16
    2fc2:	08 95       	ret

00002fc4 <nrk_event_wait>:

uint32_t nrk_event_wait(uint32_t event_mask)
{

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    2fc4:	e0 91 7d 05 	lds	r30, 0x057D
    2fc8:	f0 91 7e 05 	lds	r31, 0x057E
    2fcc:	25 85       	ldd	r18, Z+13	; 0x0d
    2fce:	36 85       	ldd	r19, Z+14	; 0x0e
    2fd0:	47 85       	ldd	r20, Z+15	; 0x0f
    2fd2:	50 89       	ldd	r21, Z+16	; 0x10
    2fd4:	26 23       	and	r18, r22
    2fd6:	37 23       	and	r19, r23
    2fd8:	48 23       	and	r20, r24
    2fda:	59 23       	and	r21, r25
    2fdc:	21 15       	cp	r18, r1
    2fde:	31 05       	cpc	r19, r1
    2fe0:	41 05       	cpc	r20, r1
    2fe2:	51 05       	cpc	r21, r1
    2fe4:	29 f4       	brne	.+10     	; 0x2ff0 <nrk_event_wait+0x2c>
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	40 e0       	ldi	r20, 0x00	; 0
    2fec:	50 e0       	ldi	r21, 0x00	; 0
    2fee:	23 c0       	rjmp	.+70     	; 0x3036 <nrk_event_wait+0x72>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    2ff0:	61 8b       	std	Z+17, r22	; 0x11
    2ff2:	72 8b       	std	Z+18, r23	; 0x12
    2ff4:	83 8b       	std	Z+19, r24	; 0x13
    2ff6:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    2ff8:	21 e0       	ldi	r18, 0x01	; 1
    2ffa:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    2ffc:	00 90 6d 05 	lds	r0, 0x056D
    3000:	04 c0       	rjmp	.+8      	; 0x300a <nrk_event_wait+0x46>
    3002:	96 95       	lsr	r25
    3004:	87 95       	ror	r24
    3006:	77 95       	ror	r23
    3008:	67 95       	ror	r22
    300a:	0a 94       	dec	r0
    300c:	d2 f7       	brpl	.-12     	; 0x3002 <nrk_event_wait+0x3e>
    300e:	61 70       	andi	r22, 0x01	; 1
    3010:	70 70       	andi	r23, 0x00	; 0
    3012:	61 15       	cp	r22, r1
    3014:	71 05       	cpc	r23, r1
    3016:	19 f0       	breq	.+6      	; 0x301e <nrk_event_wait+0x5a>
		nrk_wait_until_nw();
    3018:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <nrk_wait_until_nw>
    301c:	04 c0       	rjmp	.+8      	; 0x3026 <nrk_event_wait+0x62>
	else
		nrk_wait_until_ticks(0);
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    3026:	e0 91 7d 05 	lds	r30, 0x057D
    302a:	f0 91 7e 05 	lds	r31, 0x057E
    302e:	21 89       	ldd	r18, Z+17	; 0x11
    3030:	32 89       	ldd	r19, Z+18	; 0x12
    3032:	43 89       	ldd	r20, Z+19	; 0x13
    3034:	54 89       	ldd	r21, Z+20	; 0x14
}
    3036:	b9 01       	movw	r22, r18
    3038:	ca 01       	movw	r24, r20
    303a:	08 95       	ret

0000303c <nrk_get_high_ready_task_ID>:
//#define TIME_PAD  2

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    303c:	e0 91 72 05 	lds	r30, 0x0572
    3040:	f0 91 73 05 	lds	r31, 0x0573
  return (_head_node->task_ID);
}
    3044:	80 81       	ld	r24, Z
    3046:	08 95       	ret

00003048 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
  nrk_queue *ptr;
  ptr = _head_node;
    3048:	e0 91 72 05 	lds	r30, 0x0572
    304c:	f0 91 73 05 	lds	r31, 0x0573
  //nrk_kprintf (PSTR ("nrk_queue: "));
  while (ptr != NULL) {
    3050:	03 c0       	rjmp	.+6      	; 0x3058 <nrk_print_readyQ+0x10>
    //printf ("%d ", ptr->task_ID);
    ptr = ptr->Next;
    3052:	03 80       	ldd	r0, Z+3	; 0x03
    3054:	f4 81       	ldd	r31, Z+4	; 0x04
    3056:	e0 2d       	mov	r30, r0
void nrk_print_readyQ ()
{
  nrk_queue *ptr;
  ptr = _head_node;
  //nrk_kprintf (PSTR ("nrk_queue: "));
  while (ptr != NULL) {
    3058:	30 97       	sbiw	r30, 0x00	; 0
    305a:	d9 f7       	brne	.-10     	; 0x3052 <nrk_print_readyQ+0xa>
    //printf ("%d ", ptr->task_ID);
    ptr = ptr->Next;
  }
  //nrk_kprintf (PSTR ("\n\r"));
}
    305c:	08 95       	ret

0000305e <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    305e:	df 92       	push	r13
    3060:	ef 92       	push	r14
    3062:	ff 92       	push	r15
    3064:	0f 93       	push	r16
    3066:	1f 93       	push	r17
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
  nrk_queue *NextNode;
  nrk_queue *CurNode;

  //printf( "nrk_add_to_readyQ %d\n",task_ID );
  // nrk_queue full
  if (_free_node == NULL) {
    306c:	e0 91 c0 04 	lds	r30, 0x04C0
    3070:	f0 91 c1 04 	lds	r31, 0x04C1
    3074:	30 97       	sbiw	r30, 0x00	; 0
    3076:	09 f4       	brne	.+2      	; 0x307a <nrk_add_to_readyQ+0x1c>
    3078:	99 c0       	rjmp	.+306    	; 0x31ac <nrk_add_to_readyQ+0x14e>
    return;
  }


  NextNode = _head_node;
    307a:	60 91 72 05 	lds	r22, 0x0572
    307e:	70 91 73 05 	lds	r23, 0x0573
  CurNode = _free_node;

  if (_head_node != NULL) {
    3082:	61 15       	cp	r22, r1
    3084:	71 05       	cpc	r23, r1
    3086:	19 f4       	brne	.+6      	; 0x308e <nrk_add_to_readyQ+0x30>
    3088:	a0 e0       	ldi	r26, 0x00	; 0
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	55 c0       	rjmp	.+170    	; 0x3138 <nrk_add_to_readyQ+0xda>
    308e:	db 01       	movw	r26, r22

    while (NextNode != NULL) {
      if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
        if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    3090:	48 2f       	mov	r20, r24
    3092:	55 27       	eor	r21, r21
    3094:	47 fd       	sbrc	r20, 7
    3096:	50 95       	com	r21
    3098:	9a 01       	movw	r18, r20
    309a:	15 e0       	ldi	r17, 0x05	; 5
    309c:	22 0f       	add	r18, r18
    309e:	33 1f       	adc	r19, r19
    30a0:	1a 95       	dec	r17
    30a2:	e1 f7       	brne	.-8      	; 0x309c <nrk_add_to_readyQ+0x3e>
    30a4:	24 0f       	add	r18, r20
    30a6:	35 1f       	adc	r19, r21
    30a8:	2e 53       	subi	r18, 0x3E	; 62
    30aa:	3b 4f       	sbci	r19, 0xFB	; 251
    30ac:	89 01       	movw	r16, r18
    30ae:	06 5f       	subi	r16, 0xF6	; 246
    30b0:	1f 4f       	sbci	r17, 0xFF	; 255
            nrk_task_TCB[task_ID].task_prio)
          break;
      if (nrk_task_TCB[task_ID].elevated_prio_flag)
    30b2:	44 e0       	ldi	r20, 0x04	; 4
    30b4:	e4 2e       	mov	r14, r20
    30b6:	f1 2c       	mov	r15, r1
    30b8:	e2 0e       	add	r14, r18
    30ba:	f3 1e       	adc	r15, r19
        if (nrk_task_TCB[NextNode->task_ID].task_prio <
    30bc:	25 5f       	subi	r18, 0xF5	; 245
    30be:	3f 4f       	sbci	r19, 0xFF	; 255
  CurNode = _free_node;

  if (_head_node != NULL) {

    while (NextNode != NULL) {
      if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    30c0:	4c 91       	ld	r20, X
    30c2:	50 e0       	ldi	r21, 0x00	; 0
    30c4:	ea 01       	movw	r28, r20
    30c6:	95 e0       	ldi	r25, 0x05	; 5
    30c8:	cc 0f       	add	r28, r28
    30ca:	dd 1f       	adc	r29, r29
    30cc:	9a 95       	dec	r25
    30ce:	e1 f7       	brne	.-8      	; 0x30c8 <nrk_add_to_readyQ+0x6a>
    30d0:	c4 0f       	add	r28, r20
    30d2:	d5 1f       	adc	r29, r21
    30d4:	ce 53       	subi	r28, 0x3E	; 62
    30d6:	db 4f       	sbci	r29, 0xFB	; 251
    30d8:	9c 81       	ldd	r25, Y+4	; 0x04
    30da:	99 23       	and	r25, r25
    30dc:	29 f0       	breq	.+10     	; 0x30e8 <nrk_add_to_readyQ+0x8a>
        if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    30de:	db 84       	ldd	r13, Y+11	; 0x0b
    30e0:	e8 01       	movw	r28, r16
    30e2:	98 81       	ld	r25, Y
    30e4:	d9 16       	cp	r13, r25
    30e6:	40 f1       	brcs	.+80     	; 0x3138 <nrk_add_to_readyQ+0xda>
            nrk_task_TCB[task_ID].task_prio)
          break;
      if (nrk_task_TCB[task_ID].elevated_prio_flag)
    30e8:	e7 01       	movw	r28, r14
    30ea:	98 81       	ld	r25, Y
    30ec:	99 23       	and	r25, r25
    30ee:	79 f0       	breq	.+30     	; 0x310e <nrk_add_to_readyQ+0xb0>
        if (nrk_task_TCB[NextNode->task_ID].task_prio <
    30f0:	ea 01       	movw	r28, r20
    30f2:	95 e0       	ldi	r25, 0x05	; 5
    30f4:	cc 0f       	add	r28, r28
    30f6:	dd 1f       	adc	r29, r29
    30f8:	9a 95       	dec	r25
    30fa:	e1 f7       	brne	.-8      	; 0x30f4 <nrk_add_to_readyQ+0x96>
    30fc:	c4 0f       	add	r28, r20
    30fe:	d5 1f       	adc	r29, r21
    3100:	ce 53       	subi	r28, 0x3E	; 62
    3102:	db 4f       	sbci	r29, 0xFB	; 251
    3104:	da 84       	ldd	r13, Y+10	; 0x0a
    3106:	e9 01       	movw	r28, r18
    3108:	98 81       	ld	r25, Y
    310a:	d9 16       	cp	r13, r25
    310c:	a8 f0       	brcs	.+42     	; 0x3138 <nrk_add_to_readyQ+0xda>
            nrk_task_TCB[task_ID].task_prio_ceil)
          break;
      if (nrk_task_TCB[NextNode->task_ID].task_prio <
    310e:	ea 01       	movw	r28, r20
    3110:	95 e0       	ldi	r25, 0x05	; 5
    3112:	cc 0f       	add	r28, r28
    3114:	dd 1f       	adc	r29, r29
    3116:	9a 95       	dec	r25
    3118:	e1 f7       	brne	.-8      	; 0x3112 <nrk_add_to_readyQ+0xb4>
    311a:	c4 0f       	add	r28, r20
    311c:	d5 1f       	adc	r29, r21
    311e:	ce 53       	subi	r28, 0x3E	; 62
    3120:	db 4f       	sbci	r29, 0xFB	; 251
    3122:	4a 85       	ldd	r20, Y+10	; 0x0a
    3124:	e8 01       	movw	r28, r16
    3126:	98 81       	ld	r25, Y
    3128:	49 17       	cp	r20, r25
    312a:	30 f0       	brcs	.+12     	; 0x3138 <nrk_add_to_readyQ+0xda>
          nrk_task_TCB[task_ID].task_prio)
        break;

      NextNode = NextNode->Next;
    312c:	13 96       	adiw	r26, 0x03	; 3
    312e:	0d 90       	ld	r0, X+
    3130:	bc 91       	ld	r27, X
    3132:	a0 2d       	mov	r26, r0
  NextNode = _head_node;
  CurNode = _free_node;

  if (_head_node != NULL) {

    while (NextNode != NULL) {
    3134:	10 97       	sbiw	r26, 0x00	; 0
    3136:	21 f6       	brne	.-120    	; 0x30c0 <nrk_add_to_readyQ+0x62>
    // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
    // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2 

  }

  CurNode->task_ID = task_ID;
    3138:	80 83       	st	Z, r24
  _free_node = _free_node->Next;
    313a:	c3 81       	ldd	r28, Z+3	; 0x03
    313c:	d4 81       	ldd	r29, Z+4	; 0x04
    313e:	d0 93 c1 04 	sts	0x04C1, r29
    3142:	c0 93 c0 04 	sts	0x04C0, r28

  if (NextNode == _head_node) {
    3146:	a6 17       	cp	r26, r22
    3148:	b7 07       	cpc	r27, r23
    314a:	b1 f4       	brne	.+44     	; 0x3178 <nrk_add_to_readyQ+0x11a>
    //at start
    if (_head_node != NULL) {
    314c:	10 97       	sbiw	r26, 0x00	; 0
    314e:	49 f0       	breq	.+18     	; 0x3162 <nrk_add_to_readyQ+0x104>
      CurNode->Next = _head_node;
    3150:	b4 83       	std	Z+4, r27	; 0x04
    3152:	a3 83       	std	Z+3, r26	; 0x03
      CurNode->Prev = NULL;
    3154:	12 82       	std	Z+2, r1	; 0x02
    3156:	11 82       	std	Z+1, r1	; 0x01
      _head_node->Prev = CurNode;
    3158:	12 96       	adiw	r26, 0x02	; 2
    315a:	fc 93       	st	X, r31
    315c:	ee 93       	st	-X, r30
    315e:	11 97       	sbiw	r26, 0x01	; 1
    3160:	06 c0       	rjmp	.+12     	; 0x316e <nrk_add_to_readyQ+0x110>
    }
    else {
      CurNode->Next = NULL;
    3162:	14 82       	std	Z+4, r1	; 0x04
    3164:	13 82       	std	Z+3, r1	; 0x03
      CurNode->Prev = NULL;
    3166:	12 82       	std	Z+2, r1	; 0x02
    3168:	11 82       	std	Z+1, r1	; 0x01
      _free_node->Prev = CurNode;
    316a:	fa 83       	std	Y+2, r31	; 0x02
    316c:	e9 83       	std	Y+1, r30	; 0x01
    }
    _head_node = CurNode;
    316e:	f0 93 73 05 	sts	0x0573, r31
    3172:	e0 93 72 05 	sts	0x0572, r30
    3176:	1a c0       	rjmp	.+52     	; 0x31ac <nrk_add_to_readyQ+0x14e>
    3178:	11 96       	adiw	r26, 0x01	; 1
    317a:	8d 91       	ld	r24, X+
    317c:	9c 91       	ld	r25, X
    317e:	12 97       	sbiw	r26, 0x02	; 2

  }
  else {
    if (NextNode != _free_node) {
    3180:	ac 17       	cp	r26, r28
    3182:	bd 07       	cpc	r27, r29
    3184:	59 f0       	breq	.+22     	; 0x319c <nrk_add_to_readyQ+0x13e>
      // Insert  in middle

      CurNode->Prev = NextNode->Prev;
    3186:	92 83       	std	Z+2, r25	; 0x02
    3188:	81 83       	std	Z+1, r24	; 0x01
      CurNode->Next = NextNode;
    318a:	b4 83       	std	Z+4, r27	; 0x04
    318c:	a3 83       	std	Z+3, r26	; 0x03
      (NextNode->Prev)->Next = CurNode;
    318e:	11 96       	adiw	r26, 0x01	; 1
    3190:	cd 91       	ld	r28, X+
    3192:	dc 91       	ld	r29, X
    3194:	12 97       	sbiw	r26, 0x02	; 2
    3196:	fc 83       	std	Y+4, r31	; 0x04
    3198:	eb 83       	std	Y+3, r30	; 0x03
    319a:	04 c0       	rjmp	.+8      	; 0x31a4 <nrk_add_to_readyQ+0x146>
      NextNode->Prev = CurNode;
    }
    else {
      //insert at end
      CurNode->Next = NULL;
    319c:	14 82       	std	Z+4, r1	; 0x04
    319e:	13 82       	std	Z+3, r1	; 0x03
      CurNode->Prev = _free_node->Prev;
    31a0:	92 83       	std	Z+2, r25	; 0x02
    31a2:	81 83       	std	Z+1, r24	; 0x01
      _free_node->Prev = CurNode;
    31a4:	12 96       	adiw	r26, 0x02	; 2
    31a6:	fc 93       	st	X, r31
    31a8:	ee 93       	st	-X, r30
    31aa:	11 97       	sbiw	r26, 0x01	; 1
    }

  }

}
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	1f 91       	pop	r17
    31b2:	0f 91       	pop	r16
    31b4:	ff 90       	pop	r15
    31b6:	ef 90       	pop	r14
    31b8:	df 90       	pop	r13
    31ba:	08 95       	ret

000031bc <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    31bc:	cf 93       	push	r28
    31be:	df 93       	push	r29
     }
   */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

  if (_head_node == NULL)
    31c0:	e0 91 72 05 	lds	r30, 0x0572
    31c4:	f0 91 73 05 	lds	r31, 0x0573
    31c8:	30 97       	sbiw	r30, 0x00	; 0
    31ca:	09 f4       	brne	.+2      	; 0x31ce <nrk_rem_from_readyQ+0x12>
    31cc:	4d c0       	rjmp	.+154    	; 0x3268 <nrk_rem_from_readyQ+0xac>
    return;

  CurNode = _head_node;

  if (_head_node->task_ID == task_ID) {
    31ce:	48 2f       	mov	r20, r24
    31d0:	55 27       	eor	r21, r21
    31d2:	47 fd       	sbrc	r20, 7
    31d4:	50 95       	com	r21
    31d6:	80 81       	ld	r24, Z
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	84 17       	cp	r24, r20
    31dc:	95 07       	cpc	r25, r21
    31de:	79 f4       	brne	.+30     	; 0x31fe <nrk_rem_from_readyQ+0x42>
    //REmove from start
    _head_node = _head_node->Next;
    31e0:	a3 81       	ldd	r26, Z+3	; 0x03
    31e2:	b4 81       	ldd	r27, Z+4	; 0x04
    31e4:	b0 93 73 05 	sts	0x0573, r27
    31e8:	a0 93 72 05 	sts	0x0572, r26
    _head_node->Prev = NULL;
    31ec:	12 96       	adiw	r26, 0x02	; 2
    31ee:	1c 92       	st	X, r1
    31f0:	1e 92       	st	-X, r1
    31f2:	11 97       	sbiw	r26, 0x01	; 1
    31f4:	0e c0       	rjmp	.+28     	; 0x3212 <nrk_rem_from_readyQ+0x56>
  }
  else {
    while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
      CurNode = CurNode->Next;
    31f6:	e2 2f       	mov	r30, r18
    31f8:	f9 2f       	mov	r31, r25
    //REmove from start
    _head_node = _head_node->Next;
    _head_node->Prev = NULL;
  }
  else {
    while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    31fa:	30 97       	sbiw	r30, 0x00	; 0
    31fc:	a9 f1       	breq	.+106    	; 0x3268 <nrk_rem_from_readyQ+0xac>
    31fe:	60 81       	ld	r22, Z
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	23 81       	ldd	r18, Z+3	; 0x03
    3204:	94 81       	ldd	r25, Z+4	; 0x04
    3206:	64 17       	cp	r22, r20
    3208:	75 07       	cpc	r23, r21
    320a:	a9 f7       	brne	.-22     	; 0x31f6 <nrk_rem_from_readyQ+0x3a>
    320c:	20 c0       	rjmp	.+64     	; 0x324e <nrk_rem_from_readyQ+0x92>
      return;


    (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    if (CurNode->Next != NULL)
      (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    320e:	ba 83       	std	Y+2, r27	; 0x02
    3210:	a9 83       	std	Y+1, r26	; 0x01
  }



  // Add to free list
  if (_free_node == NULL) {
    3212:	a0 91 c0 04 	lds	r26, 0x04C0
    3216:	b0 91 c1 04 	lds	r27, 0x04C1
    321a:	10 97       	sbiw	r26, 0x00	; 0
    321c:	39 f4       	brne	.+14     	; 0x322c <nrk_rem_from_readyQ+0x70>
    _free_node = CurNode;
    321e:	f0 93 c1 04 	sts	0x04C1, r31
    3222:	e0 93 c0 04 	sts	0x04C0, r30
    _free_node->Next = NULL;
    3226:	14 82       	std	Z+4, r1	; 0x04
    3228:	13 82       	std	Z+3, r1	; 0x03
    322a:	0a c0       	rjmp	.+20     	; 0x3240 <nrk_rem_from_readyQ+0x84>
  }
  else {
    CurNode->Next = _free_node;
    322c:	b4 83       	std	Z+4, r27	; 0x04
    322e:	a3 83       	std	Z+3, r26	; 0x03
    _free_node->Prev = CurNode;
    3230:	12 96       	adiw	r26, 0x02	; 2
    3232:	fc 93       	st	X, r31
    3234:	ee 93       	st	-X, r30
    3236:	11 97       	sbiw	r26, 0x01	; 1
    _free_node = CurNode;
    3238:	f0 93 c1 04 	sts	0x04C1, r31
    323c:	e0 93 c0 04 	sts	0x04C0, r30
  }
  _free_node->Prev = NULL;
    3240:	e0 91 c0 04 	lds	r30, 0x04C0
    3244:	f0 91 c1 04 	lds	r31, 0x04C1
    3248:	12 82       	std	Z+2, r1	; 0x02
    324a:	11 82       	std	Z+1, r1	; 0x01
    324c:	0d c0       	rjmp	.+26     	; 0x3268 <nrk_rem_from_readyQ+0xac>
      CurNode = CurNode->Next;
    if (CurNode == NULL)
      return;


    (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    324e:	a1 81       	ldd	r26, Z+1	; 0x01
    3250:	b2 81       	ldd	r27, Z+2	; 0x02
    3252:	13 96       	adiw	r26, 0x03	; 3
    3254:	2c 93       	st	X, r18
    3256:	13 97       	sbiw	r26, 0x03	; 3
    3258:	14 96       	adiw	r26, 0x04	; 4
    325a:	9c 93       	st	X, r25
    325c:	14 97       	sbiw	r26, 0x04	; 4
    if (CurNode->Next != NULL)
    325e:	c3 81       	ldd	r28, Z+3	; 0x03
    3260:	d4 81       	ldd	r29, Z+4	; 0x04
    3262:	20 97       	sbiw	r28, 0x00	; 0
    3264:	a1 f6       	brne	.-88     	; 0x320e <nrk_rem_from_readyQ+0x52>
    3266:	d5 cf       	rjmp	.-86     	; 0x3212 <nrk_rem_from_readyQ+0x56>
    CurNode->Next = _free_node;
    _free_node->Prev = CurNode;
    _free_node = CurNode;
  }
  _free_node->Prev = NULL;
}
    3268:	df 91       	pop	r29
    326a:	cf 91       	pop	r28
    326c:	08 95       	ret

0000326e <nrk_get_pid>:
  return NRK_OK;
}


uint8_t nrk_get_pid ()
{
    326e:	e0 91 7d 05 	lds	r30, 0x057D
    3272:	f0 91 7e 05 	lds	r31, 0x057E
  return nrk_cur_task_TCB->task_ID;
}
    3276:	80 85       	ldd	r24, Z+8	; 0x08
    3278:	08 95       	ret

0000327a <_nrk_wait_for_scheduler>:
inline void _nrk_wait_for_scheduler ()
{

  //TIMSK = BM (OCIE1A);
  do {
    nrk_idle ();                // wait for the interrupt to tick...
    327a:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_idle>
  } while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1);
    327e:	e0 91 7d 05 	lds	r30, 0x057D
    3282:	f0 91 7e 05 	lds	r31, 0x057E
    3286:	85 81       	ldd	r24, Z+5	; 0x05
    3288:	88 23       	and	r24, r24
    328a:	b9 f7       	brne	.-18     	; 0x327a <_nrk_wait_for_scheduler>

  //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    328c:	08 95       	ret

0000328e <nrk_wait>:
  return NRK_OK;
}


int8_t nrk_wait (nrk_time_t t)
{
    328e:	ef 92       	push	r14
    3290:	ff 92       	push	r15
    3292:	1f 93       	push	r17
    3294:	df 93       	push	r29
    3296:	cf 93       	push	r28
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	28 97       	sbiw	r28, 0x08	; 8
    329e:	0f b6       	in	r0, 0x3f	; 63
    32a0:	f8 94       	cli
    32a2:	de bf       	out	0x3e, r29	; 62
    32a4:	0f be       	out	0x3f, r0	; 63
    32a6:	cd bf       	out	0x3d, r28	; 61
    32a8:	29 83       	std	Y+1, r18	; 0x01
    32aa:	3a 83       	std	Y+2, r19	; 0x02
    32ac:	4b 83       	std	Y+3, r20	; 0x03
    32ae:	5c 83       	std	Y+4, r21	; 0x04
    32b0:	6d 83       	std	Y+5, r22	; 0x05
    32b2:	7e 83       	std	Y+6, r23	; 0x06
    32b4:	8f 83       	std	Y+7, r24	; 0x07
    32b6:	98 87       	std	Y+8, r25	; 0x08
  uint8_t timer;
  uint16_t nw;

  nrk_stack_check ();
    32b8:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <nrk_stack_check>

  nrk_int_disable ();
    32bc:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    32c0:	e0 91 7d 05 	lds	r30, 0x057D
    32c4:	f0 91 7e 05 	lds	r31, 0x057E
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->num_periods = 1;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	90 a3       	std	Z+32, r25	; 0x20
    32d2:	87 8f       	std	Z+31, r24	; 0x1f
  timer = _nrk_os_timer_get ();
    32d4:	0e 94 9d 21 	call	0x433a	; 0x433a <_nrk_os_timer_get>
    32d8:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);
  nw = _nrk_time_to_ticks (t);
    32da:	29 81       	ldd	r18, Y+1	; 0x01
    32dc:	3a 81       	ldd	r19, Y+2	; 0x02
    32de:	4b 81       	ldd	r20, Y+3	; 0x03
    32e0:	5c 81       	ldd	r21, Y+4	; 0x04
    32e2:	6d 81       	ldd	r22, Y+5	; 0x05
    32e4:	7e 81       	ldd	r23, Y+6	; 0x06
    32e6:	8f 81       	ldd	r24, Y+7	; 0x07
    32e8:	98 85       	ldd	r25, Y+8	; 0x08
    32ea:	0e 94 b8 1c 	call	0x3970	; 0x3970 <_nrk_time_to_ticks>
//printf( "t2 %u\n",nw );
  nrk_cur_task_TCB->next_wakeup = nw + timer;
    32ee:	e0 91 7d 05 	lds	r30, 0x057D
    32f2:	f0 91 7e 05 	lds	r31, 0x057E
    32f6:	e1 2e       	mov	r14, r17
    32f8:	ff 24       	eor	r15, r15
    32fa:	8e 0d       	add	r24, r14
    32fc:	9f 1d       	adc	r25, r15
    32fe:	96 8b       	std	Z+22, r25	; 0x16
    3300:	85 8b       	std	Z+21, r24	; 0x15
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3302:	18 3f       	cpi	r17, 0xF8	; 248
    3304:	78 f4       	brcc	.+30     	; 0x3324 <nrk_wait+0x96>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3306:	0e 94 32 21 	call	0x4264	; 0x4264 <_nrk_get_next_wakeup>
    330a:	08 94       	sec
    330c:	e1 1c       	adc	r14, r1
    330e:	f1 1c       	adc	r15, r1
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	e8 16       	cp	r14, r24
    3314:	f9 06       	cpc	r15, r25
    3316:	34 f4       	brge	.+12     	; 0x3324 <nrk_wait+0x96>
      timer += TIME_PAD;
    3318:	81 2f       	mov	r24, r17
    331a:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    331c:	80 93 00 04 	sts	0x0400, r24
      _nrk_set_next_wakeup (timer);
    3320:	0e 94 36 21 	call	0x426c	; 0x426c <_nrk_set_next_wakeup>
    }
  nrk_int_enable ();
    3324:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>

  _nrk_wait_for_scheduler ();
    3328:	0e 94 3d 19 	call	0x327a	; 0x327a <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	28 96       	adiw	r28, 0x08	; 8
    3330:	0f b6       	in	r0, 0x3f	; 63
    3332:	f8 94       	cli
    3334:	de bf       	out	0x3e, r29	; 62
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	cd bf       	out	0x3d, r28	; 61
    333a:	cf 91       	pop	r28
    333c:	df 91       	pop	r29
    333e:	1f 91       	pop	r17
    3340:	ff 90       	pop	r15
    3342:	ef 90       	pop	r14
    3344:	08 95       	ret

00003346 <nrk_wait_until>:
  //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    3346:	8f 92       	push	r8
    3348:	9f 92       	push	r9
    334a:	af 92       	push	r10
    334c:	bf 92       	push	r11
    334e:	cf 92       	push	r12
    3350:	df 92       	push	r13
    3352:	ef 92       	push	r14
    3354:	ff 92       	push	r15
    3356:	0f 93       	push	r16
    3358:	1f 93       	push	r17
    335a:	df 93       	push	r29
    335c:	cf 93       	push	r28
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
    3362:	60 97       	sbiw	r28, 0x10	; 16
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	de bf       	out	0x3e, r29	; 62
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	cd bf       	out	0x3d, r28	; 61
    336e:	29 87       	std	Y+9, r18	; 0x09
    3370:	3a 87       	std	Y+10, r19	; 0x0a
    3372:	4b 87       	std	Y+11, r20	; 0x0b
    3374:	5c 87       	std	Y+12, r21	; 0x0c
    3376:	6d 87       	std	Y+13, r22	; 0x0d
    3378:	7e 87       	std	Y+14, r23	; 0x0e
    337a:	8f 87       	std	Y+15, r24	; 0x0f
    337c:	98 8b       	std	Y+16, r25	; 0x10
  nrk_time_t ct;
  uint8_t v;

  nrk_time_get (&ct);
    337e:	ce 01       	movw	r24, r28
    3380:	01 96       	adiw	r24, 0x01	; 1
    3382:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <nrk_time_get>

  v = nrk_time_sub (&t, t, ct);
    3386:	ce 01       	movw	r24, r28
    3388:	09 96       	adiw	r24, 0x09	; 9
    338a:	09 85       	ldd	r16, Y+9	; 0x09
    338c:	1a 85       	ldd	r17, Y+10	; 0x0a
    338e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3390:	3c 85       	ldd	r19, Y+12	; 0x0c
    3392:	4d 85       	ldd	r20, Y+13	; 0x0d
    3394:	5e 85       	ldd	r21, Y+14	; 0x0e
    3396:	6f 85       	ldd	r22, Y+15	; 0x0f
    3398:	78 89       	ldd	r23, Y+16	; 0x10
    339a:	89 80       	ldd	r8, Y+1	; 0x01
    339c:	9a 80       	ldd	r9, Y+2	; 0x02
    339e:	ab 80       	ldd	r10, Y+3	; 0x03
    33a0:	bc 80       	ldd	r11, Y+4	; 0x04
    33a2:	cd 80       	ldd	r12, Y+5	; 0x05
    33a4:	de 80       	ldd	r13, Y+6	; 0x06
    33a6:	ef 80       	ldd	r14, Y+7	; 0x07
    33a8:	f8 84       	ldd	r15, Y+8	; 0x08
    33aa:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <nrk_time_sub>
  if (v == 0)
    33ae:	88 23       	and	r24, r24
    33b0:	11 f4       	brne	.+4      	; 0x33b6 <nrk_wait_until+0x70>
    33b2:	8f ef       	ldi	r24, 0xFF	; 255
    33b4:	0b c0       	rjmp	.+22     	; 0x33cc <nrk_wait_until+0x86>
//if(t.secs<ct.secs) return 0;
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
  nrk_wait (t);
    33b6:	29 85       	ldd	r18, Y+9	; 0x09
    33b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    33ba:	4b 85       	ldd	r20, Y+11	; 0x0b
    33bc:	5c 85       	ldd	r21, Y+12	; 0x0c
    33be:	6d 85       	ldd	r22, Y+13	; 0x0d
    33c0:	7e 85       	ldd	r23, Y+14	; 0x0e
    33c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c4:	98 89       	ldd	r25, Y+16	; 0x10
    33c6:	0e 94 47 19 	call	0x328e	; 0x328e <nrk_wait>
    33ca:	81 e0       	ldi	r24, 0x01	; 1

  return NRK_OK;
}
    33cc:	60 96       	adiw	r28, 0x10	; 16
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	f8 94       	cli
    33d2:	de bf       	out	0x3e, r29	; 62
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	cd bf       	out	0x3d, r28	; 61
    33d8:	cf 91       	pop	r28
    33da:	df 91       	pop	r29
    33dc:	1f 91       	pop	r17
    33de:	0f 91       	pop	r16
    33e0:	ff 90       	pop	r15
    33e2:	ef 90       	pop	r14
    33e4:	df 90       	pop	r13
    33e6:	cf 90       	pop	r12
    33e8:	bf 90       	pop	r11
    33ea:	af 90       	pop	r10
    33ec:	9f 90       	pop	r9
    33ee:	8f 90       	pop	r8
    33f0:	08 95       	ret

000033f2 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    33f2:	1f 93       	push	r17
  uint8_t timer;
  nrk_int_disable ();
    33f4:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    33f8:	e0 91 7d 05 	lds	r30, 0x057D
    33fc:	f0 91 7e 05 	lds	r31, 0x057E
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->nw_flag = 1;
    3404:	86 83       	std	Z+6, r24	; 0x06
  timer = _nrk_os_timer_get ();
    3406:	0e 94 9d 21 	call	0x433a	; 0x433a <_nrk_os_timer_get>
    340a:	18 2f       	mov	r17, r24

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    340c:	88 3f       	cpi	r24, 0xF8	; 248
    340e:	80 f4       	brcc	.+32     	; 0x3430 <nrk_wait_until_nw+0x3e>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3410:	0e 94 32 21 	call	0x4264	; 0x4264 <_nrk_get_next_wakeup>
    3414:	21 2f       	mov	r18, r17
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	2f 5f       	subi	r18, 0xFF	; 255
    341a:	3f 4f       	sbci	r19, 0xFF	; 255
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	28 17       	cp	r18, r24
    3420:	39 07       	cpc	r19, r25
    3422:	34 f4       	brge	.+12     	; 0x3430 <nrk_wait_until_nw+0x3e>
      timer += TIME_PAD;
    3424:	81 2f       	mov	r24, r17
    3426:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3428:	80 93 00 04 	sts	0x0400, r24
      _nrk_set_next_wakeup (timer);
    342c:	0e 94 36 21 	call	0x426c	; 0x426c <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    3430:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    3434:	0e 94 3d 19 	call	0x327a	; 0x327a <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	1f 91       	pop	r17
    343c:	08 95       	ret

0000343e <nrk_set_next_wakeup>:
  _nrk_wait_for_scheduler ();
  return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    343e:	1f 93       	push	r17
    3440:	df 93       	push	r29
    3442:	cf 93       	push	r28
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    3448:	28 97       	sbiw	r28, 0x08	; 8
    344a:	0f b6       	in	r0, 0x3f	; 63
    344c:	f8 94       	cli
    344e:	de bf       	out	0x3e, r29	; 62
    3450:	0f be       	out	0x3f, r0	; 63
    3452:	cd bf       	out	0x3d, r28	; 61
    3454:	29 83       	std	Y+1, r18	; 0x01
    3456:	3a 83       	std	Y+2, r19	; 0x02
    3458:	4b 83       	std	Y+3, r20	; 0x03
    345a:	5c 83       	std	Y+4, r21	; 0x04
    345c:	6d 83       	std	Y+5, r22	; 0x05
    345e:	7e 83       	std	Y+6, r23	; 0x06
    3460:	8f 83       	std	Y+7, r24	; 0x07
    3462:	98 87       	std	Y+8, r25	; 0x08
  uint8_t timer;
  uint16_t nw;
  nrk_int_disable ();
    3464:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>
  timer = _nrk_os_timer_get ();
    3468:	0e 94 9d 21 	call	0x433a	; 0x433a <_nrk_os_timer_get>
    346c:	18 2f       	mov	r17, r24
  nw = _nrk_time_to_ticks (t);
    346e:	29 81       	ldd	r18, Y+1	; 0x01
    3470:	3a 81       	ldd	r19, Y+2	; 0x02
    3472:	4b 81       	ldd	r20, Y+3	; 0x03
    3474:	5c 81       	ldd	r21, Y+4	; 0x04
    3476:	6d 81       	ldd	r22, Y+5	; 0x05
    3478:	7e 81       	ldd	r23, Y+6	; 0x06
    347a:	8f 81       	ldd	r24, Y+7	; 0x07
    347c:	98 85       	ldd	r25, Y+8	; 0x08
    347e:	0e 94 b8 1c 	call	0x3970	; 0x3970 <_nrk_time_to_ticks>
  if (nw <= TIME_PAD)
    3482:	83 30       	cpi	r24, 0x03	; 3
    3484:	91 05       	cpc	r25, r1
    3486:	10 f4       	brcc	.+4      	; 0x348c <nrk_set_next_wakeup+0x4e>
    3488:	8f ef       	ldi	r24, 0xFF	; 255
    348a:	0b c0       	rjmp	.+22     	; 0x34a2 <nrk_set_next_wakeup+0x64>
    return NRK_ERROR;
  nrk_cur_task_TCB->next_wakeup = nw + timer;
    348c:	e0 91 7d 05 	lds	r30, 0x057D
    3490:	f0 91 7e 05 	lds	r31, 0x057E
    3494:	81 0f       	add	r24, r17
    3496:	91 1d       	adc	r25, r1
    3498:	96 8b       	std	Z+22, r25	; 0x16
    349a:	85 8b       	std	Z+21, r24	; 0x15
			_nrk_prev_timer_val=timer;
			_nrk_set_next_wakeup(timer);
		}
*/
//      nrk_cur_task_TCB->nw_flag=1;
  nrk_int_enable ();
    349c:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>
    34a0:	81 e0       	ldi	r24, 0x01	; 1

  return NRK_OK;
}
    34a2:	28 96       	adiw	r28, 0x08	; 8
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	cf 91       	pop	r28
    34b0:	df 91       	pop	r29
    34b2:	1f 91       	pop	r17
    34b4:	08 95       	ret

000034b6 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    34b6:	1f 93       	push	r17
    34b8:	cf 93       	push	r28
    34ba:	df 93       	push	r29
    34bc:	ec 01       	movw	r28, r24
  uint8_t timer;
  nrk_int_disable ();
    34be:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    34c2:	e0 91 7d 05 	lds	r30, 0x057D
    34c6:	f0 91 7e 05 	lds	r31, 0x057E
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->next_wakeup = ticks;
    34ce:	d6 8b       	std	Z+22, r29	; 0x16
    34d0:	c5 8b       	std	Z+21, r28	; 0x15
  timer = _nrk_os_timer_get ();
    34d2:	0e 94 9d 21 	call	0x433a	; 0x433a <_nrk_os_timer_get>
    34d6:	18 2f       	mov	r17, r24

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    34d8:	88 3f       	cpi	r24, 0xF8	; 248
    34da:	80 f4       	brcc	.+32     	; 0x34fc <nrk_wait_until_ticks+0x46>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    34dc:	0e 94 32 21 	call	0x4264	; 0x4264 <_nrk_get_next_wakeup>
    34e0:	21 2f       	mov	r18, r17
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	2f 5f       	subi	r18, 0xFF	; 255
    34e6:	3f 4f       	sbci	r19, 0xFF	; 255
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	28 17       	cp	r18, r24
    34ec:	39 07       	cpc	r19, r25
    34ee:	34 f4       	brge	.+12     	; 0x34fc <nrk_wait_until_ticks+0x46>
      timer += TIME_PAD;
    34f0:	81 2f       	mov	r24, r17
    34f2:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    34f4:	80 93 00 04 	sts	0x0400, r24
      _nrk_set_next_wakeup (timer);
    34f8:	0e 94 36 21 	call	0x426c	; 0x426c <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    34fc:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    3500:	0e 94 3d 19 	call	0x327a	; 0x327a <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	1f 91       	pop	r17
    350c:	08 95       	ret

0000350e <nrk_wait_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    350e:	ef 92       	push	r14
    3510:	ff 92       	push	r15
    3512:	1f 93       	push	r17
    3514:	cf 93       	push	r28
    3516:	df 93       	push	r29
    3518:	7c 01       	movw	r14, r24
  uint8_t timer;
  nrk_int_disable ();
    351a:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    351e:	e0 91 7d 05 	lds	r30, 0x057D
    3522:	f0 91 7e 05 	lds	r31, 0x057E
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	85 83       	std	Z+5, r24	; 0x05
  timer = _nrk_os_timer_get ();
    352a:	0e 94 9d 21 	call	0x433a	; 0x433a <_nrk_os_timer_get>
    352e:	18 2f       	mov	r17, r24
  nrk_cur_task_TCB->next_wakeup = ticks + timer;
    3530:	e0 91 7d 05 	lds	r30, 0x057D
    3534:	f0 91 7e 05 	lds	r31, 0x057E
    3538:	c8 2f       	mov	r28, r24
    353a:	d0 e0       	ldi	r29, 0x00	; 0
    353c:	ec 0e       	add	r14, r28
    353e:	fd 1e       	adc	r15, r29
    3540:	f6 8a       	std	Z+22, r15	; 0x16
    3542:	e5 8a       	std	Z+21, r14	; 0x15

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3544:	88 3f       	cpi	r24, 0xF8	; 248
    3546:	68 f4       	brcc	.+26     	; 0x3562 <nrk_wait_ticks+0x54>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3548:	0e 94 32 21 	call	0x4264	; 0x4264 <_nrk_get_next_wakeup>
    354c:	21 96       	adiw	r28, 0x01	; 1
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	c8 17       	cp	r28, r24
    3552:	d9 07       	cpc	r29, r25
    3554:	34 f4       	brge	.+12     	; 0x3562 <nrk_wait_ticks+0x54>
      timer += TIME_PAD;
    3556:	81 2f       	mov	r24, r17
    3558:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    355a:	80 93 00 04 	sts	0x0400, r24
      _nrk_set_next_wakeup (timer);
    355e:	0e 94 36 21 	call	0x426c	; 0x426c <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    3562:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    3566:	0e 94 3d 19 	call	0x327a	; 0x327a <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	df 91       	pop	r29
    356e:	cf 91       	pop	r28
    3570:	1f 91       	pop	r17
    3572:	ff 90       	pop	r15
    3574:	ef 90       	pop	r14
    3576:	08 95       	ret

00003578 <nrk_wait_until_next_n_periods>:
  _nrk_wait_for_scheduler ();
  return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    3578:	1f 93       	push	r17
    357a:	cf 93       	push	r28
    357c:	df 93       	push	r29
    357e:	ec 01       	movw	r28, r24
  uint8_t timer;

  nrk_stack_check ();
    3580:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <nrk_stack_check>

  if (p == 0)
    3584:	20 97       	sbiw	r28, 0x00	; 0
    3586:	11 f4       	brne	.+4      	; 0x358c <nrk_wait_until_next_n_periods+0x14>
    3588:	c1 e0       	ldi	r28, 0x01	; 1
    358a:	d0 e0       	ldi	r29, 0x00	; 0
    p = 1;
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
  nrk_int_disable ();
    358c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    3590:	e0 91 7d 05 	lds	r30, 0x057D
    3594:	f0 91 7e 05 	lds	r31, 0x057E
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->num_periods = p;
    359c:	d0 a3       	std	Z+32, r29	; 0x20
    359e:	c7 8f       	std	Z+31, r28	; 0x1f
  timer = _nrk_os_timer_get ();
    35a0:	0e 94 9d 21 	call	0x433a	; 0x433a <_nrk_os_timer_get>
    35a4:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    35a6:	88 3f       	cpi	r24, 0xF8	; 248
    35a8:	80 f4       	brcc	.+32     	; 0x35ca <nrk_wait_until_next_n_periods+0x52>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    35aa:	0e 94 32 21 	call	0x4264	; 0x4264 <_nrk_get_next_wakeup>
    35ae:	21 2f       	mov	r18, r17
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	2f 5f       	subi	r18, 0xFF	; 255
    35b4:	3f 4f       	sbci	r19, 0xFF	; 255
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	28 17       	cp	r18, r24
    35ba:	39 07       	cpc	r19, r25
    35bc:	34 f4       	brge	.+12     	; 0x35ca <nrk_wait_until_next_n_periods+0x52>
      timer += TIME_PAD;
    35be:	81 2f       	mov	r24, r17
    35c0:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    35c2:	80 93 00 04 	sts	0x0400, r24
      _nrk_set_next_wakeup (timer);
    35c6:	0e 94 36 21 	call	0x426c	; 0x426c <_nrk_set_next_wakeup>
    }

  nrk_int_enable ();
    35ca:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>

  _nrk_wait_for_scheduler ();
    35ce:	0e 94 3d 19 	call	0x327a	; 0x327a <_nrk_wait_for_scheduler>

  return NRK_OK;
}
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	df 91       	pop	r29
    35d6:	cf 91       	pop	r28
    35d8:	1f 91       	pop	r17
    35da:	08 95       	ret

000035dc <nrk_wait_until_next_period>:
  nrk_wait_until_next_period ();
  return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    35dc:	1f 93       	push	r17
  uint8_t timer;

  nrk_stack_check ();
    35de:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
  nrk_int_disable ();
    35e2:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>
  nrk_cur_task_TCB->num_periods = 1;
    35e6:	e0 91 7d 05 	lds	r30, 0x057D
    35ea:	f0 91 7e 05 	lds	r31, 0x057E
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	90 a3       	std	Z+32, r25	; 0x20
    35f4:	87 8f       	std	Z+31, r24	; 0x1f
  nrk_cur_task_TCB->suspend_flag = 1;
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	85 83       	std	Z+5, r24	; 0x05
  timer = _nrk_os_timer_get ();
    35fa:	0e 94 9d 21 	call	0x433a	; 0x433a <_nrk_os_timer_get>
    35fe:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;
//printf("1st next wakeup is %d.\n\r",_nrk_get_next_wakeup ());
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3600:	88 3f       	cpi	r24, 0xF8	; 248
    3602:	80 f4       	brcc	.+32     	; 0x3624 <nrk_wait_until_next_period+0x48>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3604:	0e 94 32 21 	call	0x4264	; 0x4264 <_nrk_get_next_wakeup>
    3608:	21 2f       	mov	r18, r17
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	2f 5f       	subi	r18, 0xFF	; 255
    360e:	3f 4f       	sbci	r19, 0xFF	; 255
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	28 17       	cp	r18, r24
    3614:	39 07       	cpc	r19, r25
    3616:	34 f4       	brge	.+12     	; 0x3624 <nrk_wait_until_next_period+0x48>
      timer += TIME_PAD;
    3618:	81 2f       	mov	r24, r17
    361a:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    361c:	80 93 00 04 	sts	0x0400, r24
	//printf("1st timer is %d.\n\r", timer);
      _nrk_set_next_wakeup (timer);
    3620:	0e 94 36 21 	call	0x426c	; 0x426c <_nrk_set_next_wakeup>
    }
	//printf("2nd timer is %d. next wakeup is %d.\n\r", _nrk_os_timer_get (),_nrk_get_next_wakeup ());
  nrk_int_enable ();
    3624:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>
  _nrk_wait_for_scheduler ();
    3628:	0e 94 3d 19 	call	0x327a	; 0x327a <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	1f 91       	pop	r17
    3630:	08 95       	ret

00003632 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
  nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    3632:	e0 91 7d 05 	lds	r30, 0x057D
    3636:	f0 91 7e 05 	lds	r31, 0x057E
    363a:	80 85       	ldd	r24, Z+8	; 0x08
    363c:	0e 94 de 18 	call	0x31bc	; 0x31bc <nrk_rem_from_readyQ>
  nrk_cur_task_TCB->task_state = FINISHED;
    3640:	e0 91 7d 05 	lds	r30, 0x057D
    3644:	f0 91 7e 05 	lds	r31, 0x057E
    3648:	84 e0       	ldi	r24, 0x04	; 4
    364a:	81 87       	std	Z+9, r24	; 0x09

  // HAHA, there is NO next period...
  nrk_wait_until_next_period ();
    364c:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <nrk_wait_until_next_period>
  return NRK_OK;
}
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	08 95       	ret

00003654 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3654:	ef 92       	push	r14
    3656:	ff 92       	push	r15
    3658:	0f 93       	push	r16
    365a:	1f 93       	push	r17
    365c:	cf 93       	push	r28
    365e:	df 93       	push	r29
    3660:	ec 01       	movw	r28, r24
  uint8_t rtype;
  void *topOfStackPtr;

  topOfStackPtr =
    (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);
    3662:	69 81       	ldd	r22, Y+1	; 0x01
    3664:	7a 81       	ldd	r23, Y+2	; 0x02
    3666:	4b 81       	ldd	r20, Y+3	; 0x03
    3668:	5c 81       	ldd	r21, Y+4	; 0x04
    366a:	8d 81       	ldd	r24, Y+5	; 0x05
    366c:	9e 81       	ldd	r25, Y+6	; 0x06
    366e:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <nrk_task_stk_init>
    3672:	bc 01       	movw	r22, r24

  //printf("activate %d\n",(int)Task.task_ID);
  if (Task->FirstActivation == TRUE) {
    3674:	8f 81       	ldd	r24, Y+7	; 0x07
    3676:	88 23       	and	r24, r24
    3678:	69 f0       	breq	.+26     	; 0x3694 <nrk_activate_task+0x40>
    rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    367a:	4b 81       	ldd	r20, Y+3	; 0x03
    367c:	5c 81       	ldd	r21, Y+4	; 0x04
    367e:	ce 01       	movw	r24, r28
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	00 e0       	ldi	r16, 0x00	; 0
    3686:	10 e0       	ldi	r17, 0x00	; 0
    3688:	ee 24       	eor	r14, r14
    368a:	ff 24       	eor	r15, r15
    368c:	0e 94 80 11 	call	0x2300	; 0x2300 <nrk_TCB_init>
    Task->FirstActivation = FALSE;
    3690:	1f 82       	std	Y+7, r1	; 0x07
    3692:	15 c0       	rjmp	.+42     	; 0x36be <nrk_activate_task+0x6a>

  }
  else {
    if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    3694:	88 81       	ld	r24, Y
    3696:	99 27       	eor	r25, r25
    3698:	87 fd       	sbrc	r24, 7
    369a:	90 95       	com	r25
    369c:	fc 01       	movw	r30, r24
    369e:	25 e0       	ldi	r18, 0x05	; 5
    36a0:	ee 0f       	add	r30, r30
    36a2:	ff 1f       	adc	r31, r31
    36a4:	2a 95       	dec	r18
    36a6:	e1 f7       	brne	.-8      	; 0x36a0 <nrk_activate_task+0x4c>
    36a8:	e8 0f       	add	r30, r24
    36aa:	f9 1f       	adc	r31, r25
    36ac:	ee 53       	subi	r30, 0x3E	; 62
    36ae:	fb 4f       	sbci	r31, 0xFB	; 251
    36b0:	81 85       	ldd	r24, Z+9	; 0x09
    36b2:	83 30       	cpi	r24, 0x03	; 3
    36b4:	11 f0       	breq	.+4      	; 0x36ba <nrk_activate_task+0x66>
    36b6:	8f ef       	ldi	r24, 0xFF	; 255
    36b8:	1b c0       	rjmp	.+54     	; 0x36f0 <nrk_activate_task+0x9c>
      return NRK_ERROR;
    //Re-init some parts of TCB

    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    36ba:	71 83       	std	Z+1, r23	; 0x01
    36bc:	60 83       	st	Z, r22
  // If Idle Task then Add to ready Q
  //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
  //nrk_add_to_readyQ(Task->task_ID);
  //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
  //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
  if (nrk_task_TCB[Task->task_ID].next_wakeup == 0) {
    36be:	88 81       	ld	r24, Y
    36c0:	28 2f       	mov	r18, r24
    36c2:	33 27       	eor	r19, r19
    36c4:	27 fd       	sbrc	r18, 7
    36c6:	30 95       	com	r19
    36c8:	f9 01       	movw	r30, r18
    36ca:	05 e0       	ldi	r16, 0x05	; 5
    36cc:	ee 0f       	add	r30, r30
    36ce:	ff 1f       	adc	r31, r31
    36d0:	0a 95       	dec	r16
    36d2:	e1 f7       	brne	.-8      	; 0x36cc <nrk_activate_task+0x78>
    36d4:	e2 0f       	add	r30, r18
    36d6:	f3 1f       	adc	r31, r19
    36d8:	ee 53       	subi	r30, 0x3E	; 62
    36da:	fb 4f       	sbci	r31, 0xFB	; 251
    36dc:	25 89       	ldd	r18, Z+21	; 0x15
    36de:	36 89       	ldd	r19, Z+22	; 0x16
    36e0:	21 15       	cp	r18, r1
    36e2:	31 05       	cpc	r19, r1
    36e4:	21 f4       	brne	.+8      	; 0x36ee <nrk_activate_task+0x9a>
    nrk_task_TCB[Task->task_ID].task_state = READY;
    36e6:	92 e0       	ldi	r25, 0x02	; 2
    36e8:	91 87       	std	Z+9, r25	; 0x09
    nrk_add_to_readyQ (Task->task_ID);
    36ea:	0e 94 2f 18 	call	0x305e	; 0x305e <nrk_add_to_readyQ>
    36ee:	81 e0       	ldi	r24, 0x01	; 1
  }

  return NRK_OK;
}
    36f0:	df 91       	pop	r29
    36f2:	cf 91       	pop	r28
    36f4:	1f 91       	pop	r17
    36f6:	0f 91       	pop	r16
    36f8:	ff 90       	pop	r15
    36fa:	ef 90       	pop	r14
    36fc:	08 95       	ret

000036fe <nrk_time_sub>:
/*
 * result = high-low
 *
 */
uint8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    36fe:	8f 92       	push	r8
    3700:	9f 92       	push	r9
    3702:	af 92       	push	r10
    3704:	bf 92       	push	r11
    3706:	cf 92       	push	r12
    3708:	df 92       	push	r13
    370a:	ef 92       	push	r14
    370c:	ff 92       	push	r15
    370e:	0f 93       	push	r16
    3710:	1f 93       	push	r17
    3712:	df 93       	push	r29
    3714:	cf 93       	push	r28
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	60 97       	sbiw	r28, 0x10	; 16
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	f8 94       	cli
    3720:	de bf       	out	0x3e, r29	; 62
    3722:	0f be       	out	0x3f, r0	; 63
    3724:	cd bf       	out	0x3d, r28	; 61
    3726:	fc 01       	movw	r30, r24
    3728:	09 83       	std	Y+1, r16	; 0x01
    372a:	1a 83       	std	Y+2, r17	; 0x02
    372c:	2b 83       	std	Y+3, r18	; 0x03
    372e:	3c 83       	std	Y+4, r19	; 0x04
    3730:	4d 83       	std	Y+5, r20	; 0x05
    3732:	5e 83       	std	Y+6, r21	; 0x06
    3734:	6f 83       	std	Y+7, r22	; 0x07
    3736:	78 87       	std	Y+8, r23	; 0x08
    3738:	89 86       	std	Y+9, r8	; 0x09
    373a:	9a 86       	std	Y+10, r9	; 0x0a
    373c:	ab 86       	std	Y+11, r10	; 0x0b
    373e:	bc 86       	std	Y+12, r11	; 0x0c
    3740:	cd 86       	std	Y+13, r12	; 0x0d
    3742:	de 86       	std	Y+14, r13	; 0x0e
    3744:	ef 86       	std	Y+15, r14	; 0x0f
    3746:	f8 8a       	std	Y+16, r15	; 0x10
    3748:	a9 80       	ldd	r10, Y+1	; 0x01
    374a:	ba 80       	ldd	r11, Y+2	; 0x02
    374c:	cb 80       	ldd	r12, Y+3	; 0x03
    374e:	dc 80       	ldd	r13, Y+4	; 0x04
    3750:	2d 81       	ldd	r18, Y+5	; 0x05
    3752:	3e 81       	ldd	r19, Y+6	; 0x06
    3754:	4f 81       	ldd	r20, Y+7	; 0x07
    3756:	58 85       	ldd	r21, Y+8	; 0x08
    3758:	e9 84       	ldd	r14, Y+9	; 0x09
    375a:	fa 84       	ldd	r15, Y+10	; 0x0a
    375c:	0b 85       	ldd	r16, Y+11	; 0x0b
    375e:	1c 85       	ldd	r17, Y+12	; 0x0c
    3760:	8d 85       	ldd	r24, Y+13	; 0x0d
    3762:	9e 85       	ldd	r25, Y+14	; 0x0e
    3764:	af 85       	ldd	r26, Y+15	; 0x0f
    3766:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return 0;; 
    3768:	ae 14       	cp	r10, r14
    376a:	bf 04       	cpc	r11, r15
    376c:	c0 06       	cpc	r12, r16
    376e:	d1 06       	cpc	r13, r17
    3770:	08 f4       	brcc	.+2      	; 0x3774 <nrk_time_sub+0x76>
    3772:	40 c0       	rjmp	.+128    	; 0x37f4 <nrk_time_sub+0xf6>
if(low.secs==high.secs)
    3774:	ea 14       	cp	r14, r10
    3776:	fb 04       	cpc	r15, r11
    3778:	0c 05       	cpc	r16, r12
    377a:	1d 05       	cpc	r17, r13
    377c:	91 f4       	brne	.+36     	; 0x37a2 <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return 0;  
    377e:	28 17       	cp	r18, r24
    3780:	39 07       	cpc	r19, r25
    3782:	4a 07       	cpc	r20, r26
    3784:	5b 07       	cpc	r21, r27
    3786:	b0 f1       	brcs	.+108    	; 0x37f4 <nrk_time_sub+0xf6>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3788:	28 1b       	sub	r18, r24
    378a:	39 0b       	sbc	r19, r25
    378c:	4a 0b       	sbc	r20, r26
    378e:	5b 0b       	sbc	r21, r27
    3790:	24 83       	std	Z+4, r18	; 0x04
    3792:	35 83       	std	Z+5, r19	; 0x05
    3794:	46 83       	std	Z+6, r20	; 0x06
    3796:	57 83       	std	Z+7, r21	; 0x07
	result->secs=0;
    3798:	10 82       	st	Z, r1
    379a:	11 82       	std	Z+1, r1	; 0x01
    379c:	12 82       	std	Z+2, r1	; 0x02
    379e:	13 82       	std	Z+3, r1	; 0x03
    37a0:	1e c0       	rjmp	.+60     	; 0x37de <nrk_time_sub+0xe0>
	return 1;
	}
if(low.nano_secs > high.nano_secs)
    37a2:	28 17       	cp	r18, r24
    37a4:	39 07       	cpc	r19, r25
    37a6:	4a 07       	cpc	r20, r26
    37a8:	5b 07       	cpc	r21, r27
    37aa:	d8 f4       	brcc	.+54     	; 0x37e2 <nrk_time_sub+0xe4>
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    37ac:	08 94       	sec
    37ae:	a1 08       	sbc	r10, r1
    37b0:	b1 08       	sbc	r11, r1
    37b2:	c1 08       	sbc	r12, r1
    37b4:	d1 08       	sbc	r13, r1
    37b6:	ae 18       	sub	r10, r14
    37b8:	bf 08       	sbc	r11, r15
    37ba:	c0 0a       	sbc	r12, r16
    37bc:	d1 0a       	sbc	r13, r17
    37be:	a0 82       	st	Z, r10
    37c0:	b1 82       	std	Z+1, r11	; 0x01
    37c2:	c2 82       	std	Z+2, r12	; 0x02
    37c4:	d3 82       	std	Z+3, r13	; 0x03
	result->nano_secs=high.nano_secs-low.nano_secs;
    37c6:	20 50       	subi	r18, 0x00	; 0
    37c8:	36 43       	sbci	r19, 0x36	; 54
    37ca:	45 46       	sbci	r20, 0x65	; 101
    37cc:	54 4c       	sbci	r21, 0xC4	; 196
    37ce:	28 1b       	sub	r18, r24
    37d0:	39 0b       	sbc	r19, r25
    37d2:	4a 0b       	sbc	r20, r26
    37d4:	5b 0b       	sbc	r21, r27
    37d6:	24 83       	std	Z+4, r18	; 0x04
    37d8:	35 83       	std	Z+5, r19	; 0x05
    37da:	46 83       	std	Z+6, r20	; 0x06
    37dc:	57 83       	std	Z+7, r21	; 0x07
    37de:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
    37e0:	0a c0       	rjmp	.+20     	; 0x37f6 <nrk_time_sub+0xf8>
}

result->secs=high.secs-low.secs;
    37e2:	ae 18       	sub	r10, r14
    37e4:	bf 08       	sbc	r11, r15
    37e6:	c0 0a       	sbc	r12, r16
    37e8:	d1 0a       	sbc	r13, r17
    37ea:	a0 82       	st	Z, r10
    37ec:	b1 82       	std	Z+1, r11	; 0x01
    37ee:	c2 82       	std	Z+2, r12	; 0x02
    37f0:	d3 82       	std	Z+3, r13	; 0x03
    37f2:	ed cf       	rjmp	.-38     	; 0x37ce <nrk_time_sub+0xd0>
result->nano_secs=high.nano_secs-low.nano_secs;
return 1;
    37f4:	80 e0       	ldi	r24, 0x00	; 0
}
    37f6:	60 96       	adiw	r28, 0x10	; 16
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	f8 94       	cli
    37fc:	de bf       	out	0x3e, r29	; 62
    37fe:	0f be       	out	0x3f, r0	; 63
    3800:	cd bf       	out	0x3d, r28	; 61
    3802:	cf 91       	pop	r28
    3804:	df 91       	pop	r29
    3806:	1f 91       	pop	r17
    3808:	0f 91       	pop	r16
    380a:	ff 90       	pop	r15
    380c:	ef 90       	pop	r14
    380e:	df 90       	pop	r13
    3810:	cf 90       	pop	r12
    3812:	bf 90       	pop	r11
    3814:	af 90       	pop	r10
    3816:	9f 90       	pop	r9
    3818:	8f 90       	pop	r8
    381a:	08 95       	ret

0000381c <nrk_time_add>:
/*
 * result = a+b
 *
 */
uint8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    381c:	8f 92       	push	r8
    381e:	9f 92       	push	r9
    3820:	af 92       	push	r10
    3822:	bf 92       	push	r11
    3824:	cf 92       	push	r12
    3826:	df 92       	push	r13
    3828:	ef 92       	push	r14
    382a:	ff 92       	push	r15
    382c:	0f 93       	push	r16
    382e:	1f 93       	push	r17
    3830:	df 93       	push	r29
    3832:	cf 93       	push	r28
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
    3838:	60 97       	sbiw	r28, 0x10	; 16
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	de bf       	out	0x3e, r29	; 62
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	fc 01       	movw	r30, r24
    3846:	09 83       	std	Y+1, r16	; 0x01
    3848:	1a 83       	std	Y+2, r17	; 0x02
    384a:	2b 83       	std	Y+3, r18	; 0x03
    384c:	3c 83       	std	Y+4, r19	; 0x04
    384e:	4d 83       	std	Y+5, r20	; 0x05
    3850:	5e 83       	std	Y+6, r21	; 0x06
    3852:	6f 83       	std	Y+7, r22	; 0x07
    3854:	78 87       	std	Y+8, r23	; 0x08
    3856:	89 86       	std	Y+9, r8	; 0x09
    3858:	9a 86       	std	Y+10, r9	; 0x0a
    385a:	ab 86       	std	Y+11, r10	; 0x0b
    385c:	bc 86       	std	Y+12, r11	; 0x0c
    385e:	cd 86       	std	Y+13, r12	; 0x0d
    3860:	de 86       	std	Y+14, r13	; 0x0e
    3862:	ef 86       	std	Y+15, r14	; 0x0f
    3864:	f8 8a       	std	Y+16, r15	; 0x10
    3866:	ed 80       	ldd	r14, Y+5	; 0x05
    3868:	fe 80       	ldd	r15, Y+6	; 0x06
    386a:	0f 81       	ldd	r16, Y+7	; 0x07
    386c:	18 85       	ldd	r17, Y+8	; 0x08
    386e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3870:	9e 85       	ldd	r25, Y+14	; 0x0e
    3872:	af 85       	ldd	r26, Y+15	; 0x0f
    3874:	b8 89       	ldd	r27, Y+16	; 0x10
result->secs=a.secs+b.secs;
    3876:	29 85       	ldd	r18, Y+9	; 0x09
    3878:	3a 85       	ldd	r19, Y+10	; 0x0a
    387a:	4b 85       	ldd	r20, Y+11	; 0x0b
    387c:	5c 85       	ldd	r21, Y+12	; 0x0c
    387e:	a9 80       	ldd	r10, Y+1	; 0x01
    3880:	ba 80       	ldd	r11, Y+2	; 0x02
    3882:	cb 80       	ldd	r12, Y+3	; 0x03
    3884:	dc 80       	ldd	r13, Y+4	; 0x04
    3886:	2a 0d       	add	r18, r10
    3888:	3b 1d       	adc	r19, r11
    388a:	4c 1d       	adc	r20, r12
    388c:	5d 1d       	adc	r21, r13
    388e:	20 83       	st	Z, r18
    3890:	31 83       	std	Z+1, r19	; 0x01
    3892:	42 83       	std	Z+2, r20	; 0x02
    3894:	53 83       	std	Z+3, r21	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3896:	8e 0d       	add	r24, r14
    3898:	9f 1d       	adc	r25, r15
    389a:	a0 1f       	adc	r26, r16
    389c:	b1 1f       	adc	r27, r17
    389e:	84 83       	std	Z+4, r24	; 0x04
    38a0:	95 83       	std	Z+5, r25	; 0x05
    38a2:	a6 83       	std	Z+6, r26	; 0x06
    38a4:	b7 83       	std	Z+7, r27	; 0x07
    38a6:	10 c0       	rjmp	.+32     	; 0x38c8 <nrk_time_add+0xac>
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    38a8:	20 81       	ld	r18, Z
    38aa:	31 81       	ldd	r19, Z+1	; 0x01
    38ac:	42 81       	ldd	r20, Z+2	; 0x02
    38ae:	53 81       	ldd	r21, Z+3	; 0x03
    38b0:	2f 5f       	subi	r18, 0xFF	; 255
    38b2:	3f 4f       	sbci	r19, 0xFF	; 255
    38b4:	4f 4f       	sbci	r20, 0xFF	; 255
    38b6:	5f 4f       	sbci	r21, 0xFF	; 255
    38b8:	20 83       	st	Z, r18
    38ba:	31 83       	std	Z+1, r19	; 0x01
    38bc:	42 83       	std	Z+2, r20	; 0x02
    38be:	53 83       	std	Z+3, r21	; 0x03
    38c0:	80 50       	subi	r24, 0x00	; 0
    38c2:	9a 4c       	sbci	r25, 0xCA	; 202
    38c4:	aa 49       	sbci	r26, 0x9A	; 154
    38c6:	bb 43       	sbci	r27, 0x3B	; 59
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    38c8:	80 30       	cpi	r24, 0x00	; 0
    38ca:	2a ec       	ldi	r18, 0xCA	; 202
    38cc:	92 07       	cpc	r25, r18
    38ce:	2a e9       	ldi	r18, 0x9A	; 154
    38d0:	a2 07       	cpc	r26, r18
    38d2:	2b e3       	ldi	r18, 0x3B	; 59
    38d4:	b2 07       	cpc	r27, r18
    38d6:	40 f7       	brcc	.-48     	; 0x38a8 <nrk_time_add+0x8c>
    38d8:	84 83       	std	Z+4, r24	; 0x04
    38da:	95 83       	std	Z+5, r25	; 0x05
    38dc:	a6 83       	std	Z+6, r26	; 0x06
    38de:	b7 83       	std	Z+7, r27	; 0x07
{
result->secs=a.secs+b.secs;
result->nano_secs=a.nano_secs+b.nano_secs;
nrk_time_compact_nanos(result);
return 1;
}
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	60 96       	adiw	r28, 0x10	; 16
    38e4:	0f b6       	in	r0, 0x3f	; 63
    38e6:	f8 94       	cli
    38e8:	de bf       	out	0x3e, r29	; 62
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	cd bf       	out	0x3d, r28	; 61
    38ee:	cf 91       	pop	r28
    38f0:	df 91       	pop	r29
    38f2:	1f 91       	pop	r17
    38f4:	0f 91       	pop	r16
    38f6:	ff 90       	pop	r15
    38f8:	ef 90       	pop	r14
    38fa:	df 90       	pop	r13
    38fc:	cf 90       	pop	r12
    38fe:	bf 90       	pop	r11
    3900:	af 90       	pop	r10
    3902:	9f 90       	pop	r9
    3904:	8f 90       	pop	r8
    3906:	08 95       	ret

00003908 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    3908:	fc 01       	movw	r30, r24
    390a:	84 81       	ldd	r24, Z+4	; 0x04
    390c:	95 81       	ldd	r25, Z+5	; 0x05
    390e:	a6 81       	ldd	r26, Z+6	; 0x06
    3910:	b7 81       	ldd	r27, Z+7	; 0x07
  while(t->nano_secs>=NANOS_PER_SEC)
    3912:	10 c0       	rjmp	.+32     	; 0x3934 <nrk_time_compact_nanos+0x2c>
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    3914:	20 81       	ld	r18, Z
    3916:	31 81       	ldd	r19, Z+1	; 0x01
    3918:	42 81       	ldd	r20, Z+2	; 0x02
    391a:	53 81       	ldd	r21, Z+3	; 0x03
    391c:	2f 5f       	subi	r18, 0xFF	; 255
    391e:	3f 4f       	sbci	r19, 0xFF	; 255
    3920:	4f 4f       	sbci	r20, 0xFF	; 255
    3922:	5f 4f       	sbci	r21, 0xFF	; 255
    3924:	20 83       	st	Z, r18
    3926:	31 83       	std	Z+1, r19	; 0x01
    3928:	42 83       	std	Z+2, r20	; 0x02
    392a:	53 83       	std	Z+3, r21	; 0x03
    392c:	80 50       	subi	r24, 0x00	; 0
    392e:	9a 4c       	sbci	r25, 0xCA	; 202
    3930:	aa 49       	sbci	r26, 0x9A	; 154
    3932:	bb 43       	sbci	r27, 0x3B	; 59
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    3934:	80 30       	cpi	r24, 0x00	; 0
    3936:	2a ec       	ldi	r18, 0xCA	; 202
    3938:	92 07       	cpc	r25, r18
    393a:	2a e9       	ldi	r18, 0x9A	; 154
    393c:	a2 07       	cpc	r26, r18
    393e:	2b e3       	ldi	r18, 0x3B	; 59
    3940:	b2 07       	cpc	r27, r18
    3942:	40 f7       	brcc	.-48     	; 0x3914 <nrk_time_compact_nanos+0xc>
    3944:	84 83       	std	Z+4, r24	; 0x04
    3946:	95 83       	std	Z+5, r25	; 0x05
    3948:	a6 83       	std	Z+6, r26	; 0x06
    394a:	b7 83       	std	Z+7, r27	; 0x07
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    }
}
    394c:	08 95       	ret

0000394e <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    394e:	60 93 74 05 	sts	0x0574, r22
    3952:	70 93 75 05 	sts	0x0575, r23
    3956:	80 93 76 05 	sts	0x0576, r24
    395a:	90 93 77 05 	sts	0x0577, r25
  nrk_system_time.nano_secs=nano_secs;
    395e:	20 93 78 05 	sts	0x0578, r18
    3962:	30 93 79 05 	sts	0x0579, r19
    3966:	40 93 7a 05 	sts	0x057A, r20
    396a:	50 93 7b 05 	sts	0x057B, r21
}
    396e:	08 95       	ret

00003970 <_nrk_time_to_ticks>:

uint16_t _nrk_time_to_ticks(nrk_time_t t)
{
    3970:	8f 92       	push	r8
    3972:	9f 92       	push	r9
    3974:	af 92       	push	r10
    3976:	bf 92       	push	r11
    3978:	cf 92       	push	r12
    397a:	df 92       	push	r13
    397c:	ef 92       	push	r14
    397e:	ff 92       	push	r15
    3980:	0f 93       	push	r16
    3982:	1f 93       	push	r17
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	cd b7       	in	r28, 0x3d	; 61
    398a:	de b7       	in	r29, 0x3e	; 62
    398c:	28 97       	sbiw	r28, 0x08	; 8
    398e:	0f b6       	in	r0, 0x3f	; 63
    3990:	f8 94       	cli
    3992:	de bf       	out	0x3e, r29	; 62
    3994:	0f be       	out	0x3f, r0	; 63
    3996:	cd bf       	out	0x3d, r28	; 61
    3998:	29 83       	std	Y+1, r18	; 0x01
    399a:	3a 83       	std	Y+2, r19	; 0x02
    399c:	4b 83       	std	Y+3, r20	; 0x03
    399e:	5c 83       	std	Y+4, r21	; 0x04
    39a0:	6d 83       	std	Y+5, r22	; 0x05
    39a2:	7e 83       	std	Y+6, r23	; 0x06
    39a4:	8f 83       	std	Y+7, r24	; 0x07
    39a6:	98 87       	std	Y+8, r25	; 0x08
    39a8:	89 80       	ldd	r8, Y+1	; 0x01
    39aa:	9a 80       	ldd	r9, Y+2	; 0x02
    39ac:	ab 80       	ldd	r10, Y+3	; 0x03
    39ae:	bc 80       	ldd	r11, Y+4	; 0x04
    39b0:	cd 80       	ldd	r12, Y+5	; 0x05
    39b2:	de 80       	ldd	r13, Y+6	; 0x06
    39b4:	ef 80       	ldd	r14, Y+7	; 0x07
    39b6:	f8 84       	ldd	r15, Y+8	; 0x08
uint16_t ticks;
uint16_t tmp;
// FIXME: This will overflow

if(t.secs>=1)
    39b8:	81 14       	cp	r8, r1
    39ba:	91 04       	cpc	r9, r1
    39bc:	a1 04       	cpc	r10, r1
    39be:	b1 04       	cpc	r11, r1
    39c0:	e9 f0       	breq	.+58     	; 0x39fc <_nrk_time_to_ticks+0x8c>
{
t.nano_secs+=NANOS_PER_SEC;
    39c2:	80 e0       	ldi	r24, 0x00	; 0
    39c4:	9a ec       	ldi	r25, 0xCA	; 202
    39c6:	aa e9       	ldi	r26, 0x9A	; 154
    39c8:	bb e3       	ldi	r27, 0x3B	; 59
    39ca:	c8 0e       	add	r12, r24
    39cc:	d9 1e       	adc	r13, r25
    39ce:	ea 1e       	adc	r14, r26
    39d0:	fb 1e       	adc	r15, r27
t.secs--;
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    39d2:	c7 01       	movw	r24, r14
    39d4:	b6 01       	movw	r22, r12
    39d6:	23 eb       	ldi	r18, 0xB3	; 179
    39d8:	36 ee       	ldi	r19, 0xE6	; 230
    39da:	4e e0       	ldi	r20, 0x0E	; 14
    39dc:	50 e0       	ldi	r21, 0x00	; 0
    39de:	0e 94 f5 25 	call	0x4bea	; 0x4bea <__udivmodsi4>
ticks+=t.secs*TICKS_PER_SEC;
    39e2:	08 94       	sec
    39e4:	81 08       	sbc	r8, r1
    39e6:	91 08       	sbc	r9, r1
    39e8:	a1 08       	sbc	r10, r1
    39ea:	b1 08       	sbc	r11, r1
    39ec:	84 01       	movw	r16, r8
    39ee:	10 2f       	mov	r17, r16
    39f0:	00 27       	eor	r16, r16
    39f2:	11 0f       	add	r17, r17
    39f4:	11 0f       	add	r17, r17
    39f6:	02 0f       	add	r16, r18
    39f8:	13 1f       	adc	r17, r19
    39fa:	09 c0       	rjmp	.+18     	; 0x3a0e <_nrk_time_to_ticks+0x9e>
}else
{
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    39fc:	c7 01       	movw	r24, r14
    39fe:	b6 01       	movw	r22, r12
    3a00:	23 eb       	ldi	r18, 0xB3	; 179
    3a02:	36 ee       	ldi	r19, 0xE6	; 230
    3a04:	4e e0       	ldi	r20, 0x0E	; 14
    3a06:	50 e0       	ldi	r21, 0x00	; 0
    3a08:	0e 94 f5 25 	call	0x4bea	; 0x4bea <__udivmodsi4>
    3a0c:	89 01       	movw	r16, r18
    3a0e:	b8 01       	movw	r22, r16
}

tmp=ticks;
while(tmp>TICKS_PER_SEC)tmp-=TICKS_PER_SEC;
    3a10:	02 c0       	rjmp	.+4      	; 0x3a16 <_nrk_time_to_ticks+0xa6>
    3a12:	60 50       	subi	r22, 0x00	; 0
    3a14:	74 40       	sbci	r23, 0x04	; 4
    3a16:	94 e0       	ldi	r25, 0x04	; 4
    3a18:	61 30       	cpi	r22, 0x01	; 1
    3a1a:	79 07       	cpc	r23, r25
    3a1c:	d0 f7       	brcc	.-12     	; 0x3a12 <_nrk_time_to_ticks+0xa2>
t.secs=tmp*NANOS_PER_TICK;

if(t.nano_secs>t.secs+(NANOS_PER_TICK/2))ticks++;
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	23 eb       	ldi	r18, 0xB3	; 179
    3a24:	36 ee       	ldi	r19, 0xE6	; 230
    3a26:	4e e0       	ldi	r20, 0x0E	; 14
    3a28:	50 e0       	ldi	r21, 0x00	; 0
    3a2a:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__mulsi3>
    3a2e:	67 5a       	subi	r22, 0xA7	; 167
    3a30:	7c 48       	sbci	r23, 0x8C	; 140
    3a32:	88 4f       	sbci	r24, 0xF8	; 248
    3a34:	9f 4f       	sbci	r25, 0xFF	; 255
    3a36:	6c 15       	cp	r22, r12
    3a38:	7d 05       	cpc	r23, r13
    3a3a:	8e 05       	cpc	r24, r14
    3a3c:	9f 05       	cpc	r25, r15
    3a3e:	10 f4       	brcc	.+4      	; 0x3a44 <_nrk_time_to_ticks+0xd4>
    3a40:	0f 5f       	subi	r16, 0xFF	; 255
    3a42:	1f 4f       	sbci	r17, 0xFF	; 255

//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3a44:	c8 01       	movw	r24, r16
    3a46:	28 96       	adiw	r28, 0x08	; 8
    3a48:	0f b6       	in	r0, 0x3f	; 63
    3a4a:	f8 94       	cli
    3a4c:	de bf       	out	0x3e, r29	; 62
    3a4e:	0f be       	out	0x3f, r0	; 63
    3a50:	cd bf       	out	0x3d, r28	; 61
    3a52:	cf 91       	pop	r28
    3a54:	df 91       	pop	r29
    3a56:	1f 91       	pop	r17
    3a58:	0f 91       	pop	r16
    3a5a:	ff 90       	pop	r15
    3a5c:	ef 90       	pop	r14
    3a5e:	df 90       	pop	r13
    3a60:	cf 90       	pop	r12
    3a62:	bf 90       	pop	r11
    3a64:	af 90       	pop	r10
    3a66:	9f 90       	pop	r9
    3a68:	8f 90       	pop	r8
    3a6a:	08 95       	ret

00003a6c <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3a6c:	ef 92       	push	r14
    3a6e:	ff 92       	push	r15
    3a70:	0f 93       	push	r16
    3a72:	1f 93       	push	r17
    3a74:	df 93       	push	r29
    3a76:	cf 93       	push	r28
    3a78:	cd b7       	in	r28, 0x3d	; 61
    3a7a:	de b7       	in	r29, 0x3e	; 62
    3a7c:	28 97       	sbiw	r28, 0x08	; 8
    3a7e:	0f b6       	in	r0, 0x3f	; 63
    3a80:	f8 94       	cli
    3a82:	de bf       	out	0x3e, r29	; 62
    3a84:	0f be       	out	0x3f, r0	; 63
    3a86:	cd bf       	out	0x3d, r28	; 61
    3a88:	7b 01       	movw	r14, r22
    3a8a:	8c 01       	movw	r16, r24
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    3a8c:	73 70       	andi	r23, 0x03	; 3
    3a8e:	80 70       	andi	r24, 0x00	; 0
    3a90:	90 70       	andi	r25, 0x00	; 0
    3a92:	23 eb       	ldi	r18, 0xB3	; 179
    3a94:	36 ee       	ldi	r19, 0xE6	; 230
    3a96:	4e e0       	ldi	r20, 0x0E	; 14
    3a98:	50 e0       	ldi	r21, 0x00	; 0
    3a9a:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__mulsi3>
    3a9e:	6d 83       	std	Y+5, r22	; 0x05
    3aa0:	7e 83       	std	Y+6, r23	; 0x06
    3aa2:	8f 83       	std	Y+7, r24	; 0x07
    3aa4:	98 87       	std	Y+8, r25	; 0x08
    3aa6:	a8 01       	movw	r20, r16
    3aa8:	97 01       	movw	r18, r14
    3aaa:	ea e0       	ldi	r30, 0x0A	; 10
    3aac:	56 95       	lsr	r21
    3aae:	47 95       	ror	r20
    3ab0:	37 95       	ror	r19
    3ab2:	27 95       	ror	r18
    3ab4:	ea 95       	dec	r30
    3ab6:	d1 f7       	brne	.-12     	; 0x3aac <_nrk_ticks_to_time+0x40>
    3ab8:	29 83       	std	Y+1, r18	; 0x01
    3aba:	3a 83       	std	Y+2, r19	; 0x02
    3abc:	4b 83       	std	Y+3, r20	; 0x03
    3abe:	5c 83       	std	Y+4, r21	; 0x04
    3ac0:	3a 81       	ldd	r19, Y+2	; 0x02
    3ac2:	4b 81       	ldd	r20, Y+3	; 0x03
    3ac4:	5c 81       	ldd	r21, Y+4	; 0x04
}
    3ac6:	28 96       	adiw	r28, 0x08	; 8
    3ac8:	0f b6       	in	r0, 0x3f	; 63
    3aca:	f8 94       	cli
    3acc:	de bf       	out	0x3e, r29	; 62
    3ace:	0f be       	out	0x3f, r0	; 63
    3ad0:	cd bf       	out	0x3d, r28	; 61
    3ad2:	cf 91       	pop	r28
    3ad4:	df 91       	pop	r29
    3ad6:	1f 91       	pop	r17
    3ad8:	0f 91       	pop	r16
    3ada:	ff 90       	pop	r15
    3adc:	ef 90       	pop	r14
    3ade:	08 95       	ret

00003ae0 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t t)
{
    3ae0:	af 92       	push	r10
    3ae2:	bf 92       	push	r11
    3ae4:	cf 92       	push	r12
    3ae6:	df 92       	push	r13
    3ae8:	ef 92       	push	r14
    3aea:	ff 92       	push	r15
    3aec:	0f 93       	push	r16
    3aee:	1f 93       	push	r17
    3af0:	df 93       	push	r29
    3af2:	cf 93       	push	r28
    3af4:	cd b7       	in	r28, 0x3d	; 61
    3af6:	de b7       	in	r29, 0x3e	; 62
    3af8:	28 97       	sbiw	r28, 0x08	; 8
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	f8 94       	cli
    3afe:	de bf       	out	0x3e, r29	; 62
    3b00:	0f be       	out	0x3f, r0	; 63
    3b02:	cd bf       	out	0x3d, r28	; 61
    3b04:	29 83       	std	Y+1, r18	; 0x01
    3b06:	3a 83       	std	Y+2, r19	; 0x02
    3b08:	4b 83       	std	Y+3, r20	; 0x03
    3b0a:	5c 83       	std	Y+4, r21	; 0x04
    3b0c:	6d 83       	std	Y+5, r22	; 0x05
    3b0e:	7e 83       	std	Y+6, r23	; 0x06
    3b10:	8f 83       	std	Y+7, r24	; 0x07
    3b12:	98 87       	std	Y+8, r25	; 0x08
    3b14:	e9 80       	ldd	r14, Y+1	; 0x01
    3b16:	fa 80       	ldd	r15, Y+2	; 0x02
    3b18:	0b 81       	ldd	r16, Y+3	; 0x03
    3b1a:	1c 81       	ldd	r17, Y+4	; 0x04
    3b1c:	ad 80       	ldd	r10, Y+5	; 0x05
    3b1e:	be 80       	ldd	r11, Y+6	; 0x06
    3b20:	cf 80       	ldd	r12, Y+7	; 0x07
    3b22:	d8 84       	ldd	r13, Y+8	; 0x08
uint32_t ticks;
uint32_t tmp;

if(t.secs>=1)
    3b24:	e1 14       	cp	r14, r1
    3b26:	f1 04       	cpc	r15, r1
    3b28:	01 05       	cpc	r16, r1
    3b2a:	11 05       	cpc	r17, r1
    3b2c:	19 f1       	breq	.+70     	; 0x3b74 <_nrk_time_to_ticks_long+0x94>
{
t.nano_secs+=NANOS_PER_SEC;
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	9a ec       	ldi	r25, 0xCA	; 202
    3b32:	aa e9       	ldi	r26, 0x9A	; 154
    3b34:	bb e3       	ldi	r27, 0x3B	; 59
    3b36:	a8 0e       	add	r10, r24
    3b38:	b9 1e       	adc	r11, r25
    3b3a:	ca 1e       	adc	r12, r26
    3b3c:	db 1e       	adc	r13, r27
t.secs--;
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    3b3e:	c6 01       	movw	r24, r12
    3b40:	b5 01       	movw	r22, r10
    3b42:	23 eb       	ldi	r18, 0xB3	; 179
    3b44:	36 ee       	ldi	r19, 0xE6	; 230
    3b46:	4e e0       	ldi	r20, 0x0E	; 14
    3b48:	50 e0       	ldi	r21, 0x00	; 0
    3b4a:	0e 94 f5 25 	call	0x4bea	; 0x4bea <__udivmodsi4>
    3b4e:	c9 01       	movw	r24, r18
    3b50:	da 01       	movw	r26, r20
ticks+=t.secs*TICKS_PER_SEC;
    3b52:	08 94       	sec
    3b54:	e1 08       	sbc	r14, r1
    3b56:	f1 08       	sbc	r15, r1
    3b58:	01 09       	sbc	r16, r1
    3b5a:	11 09       	sbc	r17, r1
    3b5c:	fa e0       	ldi	r31, 0x0A	; 10
    3b5e:	ee 0c       	add	r14, r14
    3b60:	ff 1c       	adc	r15, r15
    3b62:	00 1f       	adc	r16, r16
    3b64:	11 1f       	adc	r17, r17
    3b66:	fa 95       	dec	r31
    3b68:	d1 f7       	brne	.-12     	; 0x3b5e <_nrk_time_to_ticks_long+0x7e>
    3b6a:	e8 0e       	add	r14, r24
    3b6c:	f9 1e       	adc	r15, r25
    3b6e:	0a 1f       	adc	r16, r26
    3b70:	1b 1f       	adc	r17, r27
    3b72:	0c c0       	rjmp	.+24     	; 0x3b8c <_nrk_time_to_ticks_long+0xac>
}else
{
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    3b74:	c6 01       	movw	r24, r12
    3b76:	b5 01       	movw	r22, r10
    3b78:	23 eb       	ldi	r18, 0xB3	; 179
    3b7a:	36 ee       	ldi	r19, 0xE6	; 230
    3b7c:	4e e0       	ldi	r20, 0x0E	; 14
    3b7e:	50 e0       	ldi	r21, 0x00	; 0
    3b80:	0e 94 f5 25 	call	0x4bea	; 0x4bea <__udivmodsi4>
    3b84:	e2 2e       	mov	r14, r18
    3b86:	f3 2e       	mov	r15, r19
    3b88:	04 2f       	mov	r16, r20
    3b8a:	15 2f       	mov	r17, r21
    3b8c:	c8 01       	movw	r24, r16
    3b8e:	b7 01       	movw	r22, r14
}

tmp=ticks;
while(tmp>TICKS_PER_SEC)tmp-=TICKS_PER_SEC;
    3b90:	04 c0       	rjmp	.+8      	; 0x3b9a <_nrk_time_to_ticks_long+0xba>
    3b92:	60 50       	subi	r22, 0x00	; 0
    3b94:	74 40       	sbci	r23, 0x04	; 4
    3b96:	80 40       	sbci	r24, 0x00	; 0
    3b98:	90 40       	sbci	r25, 0x00	; 0
    3b9a:	61 30       	cpi	r22, 0x01	; 1
    3b9c:	a4 e0       	ldi	r26, 0x04	; 4
    3b9e:	7a 07       	cpc	r23, r26
    3ba0:	a0 e0       	ldi	r26, 0x00	; 0
    3ba2:	8a 07       	cpc	r24, r26
    3ba4:	a0 e0       	ldi	r26, 0x00	; 0
    3ba6:	9a 07       	cpc	r25, r26
    3ba8:	a0 f7       	brcc	.-24     	; 0x3b92 <_nrk_time_to_ticks_long+0xb2>
t.secs=tmp*NANOS_PER_TICK;

if(t.nano_secs>t.secs+(NANOS_PER_TICK/2))ticks++;
    3baa:	23 eb       	ldi	r18, 0xB3	; 179
    3bac:	36 ee       	ldi	r19, 0xE6	; 230
    3bae:	4e e0       	ldi	r20, 0x0E	; 14
    3bb0:	50 e0       	ldi	r21, 0x00	; 0
    3bb2:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__mulsi3>
    3bb6:	67 5a       	subi	r22, 0xA7	; 167
    3bb8:	7c 48       	sbci	r23, 0x8C	; 140
    3bba:	88 4f       	sbci	r24, 0xF8	; 248
    3bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3bbe:	6a 15       	cp	r22, r10
    3bc0:	7b 05       	cpc	r23, r11
    3bc2:	8c 05       	cpc	r24, r12
    3bc4:	9d 05       	cpc	r25, r13
    3bc6:	28 f4       	brcc	.+10     	; 0x3bd2 <_nrk_time_to_ticks_long+0xf2>
    3bc8:	08 94       	sec
    3bca:	e1 1c       	adc	r14, r1
    3bcc:	f1 1c       	adc	r15, r1
    3bce:	01 1d       	adc	r16, r1
    3bd0:	11 1d       	adc	r17, r1

//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3bd2:	b7 01       	movw	r22, r14
    3bd4:	c8 01       	movw	r24, r16
    3bd6:	28 96       	adiw	r28, 0x08	; 8
    3bd8:	0f b6       	in	r0, 0x3f	; 63
    3bda:	f8 94       	cli
    3bdc:	de bf       	out	0x3e, r29	; 62
    3bde:	0f be       	out	0x3f, r0	; 63
    3be0:	cd bf       	out	0x3d, r28	; 61
    3be2:	cf 91       	pop	r28
    3be4:	df 91       	pop	r29
    3be6:	1f 91       	pop	r17
    3be8:	0f 91       	pop	r16
    3bea:	ff 90       	pop	r15
    3bec:	ef 90       	pop	r14
    3bee:	df 90       	pop	r13
    3bf0:	cf 90       	pop	r12
    3bf2:	bf 90       	pop	r11
    3bf4:	af 90       	pop	r10
    3bf6:	08 95       	ret

00003bf8 <nrk_time_get>:
*******************************************************************************/
#include <nrk.h>
#include <nrk_timer.h>

void nrk_time_get(nrk_time_t *t)
{
    3bf8:	ef 92       	push	r14
    3bfa:	ff 92       	push	r15
    3bfc:	0f 93       	push	r16
    3bfe:	1f 93       	push	r17
    3c00:	cf 93       	push	r28
    3c02:	df 93       	push	r29
    3c04:	ec 01       	movw	r28, r24
 t->secs=nrk_system_time.secs;
    3c06:	80 91 74 05 	lds	r24, 0x0574
    3c0a:	90 91 75 05 	lds	r25, 0x0575
    3c0e:	a0 91 76 05 	lds	r26, 0x0576
    3c12:	b0 91 77 05 	lds	r27, 0x0577
    3c16:	88 83       	st	Y, r24
    3c18:	99 83       	std	Y+1, r25	; 0x01
    3c1a:	aa 83       	std	Y+2, r26	; 0x02
    3c1c:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs=nrk_system_time.nano_secs;
    3c1e:	e0 90 78 05 	lds	r14, 0x0578
    3c22:	f0 90 79 05 	lds	r15, 0x0579
    3c26:	00 91 7a 05 	lds	r16, 0x057A
    3c2a:	10 91 7b 05 	lds	r17, 0x057B
    3c2e:	ec 82       	std	Y+4, r14	; 0x04
    3c30:	fd 82       	std	Y+5, r15	; 0x05
    3c32:	0e 83       	std	Y+6, r16	; 0x06
    3c34:	1f 83       	std	Y+7, r17	; 0x07

   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    3c36:	0e 94 9d 21 	call	0x433a	; 0x433a <_nrk_os_timer_get>
    3c3a:	68 2f       	mov	r22, r24
    3c3c:	70 e0       	ldi	r23, 0x00	; 0
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	23 eb       	ldi	r18, 0xB3	; 179
    3c44:	36 ee       	ldi	r19, 0xE6	; 230
    3c46:	4e e0       	ldi	r20, 0x0E	; 14
    3c48:	50 e0       	ldi	r21, 0x00	; 0
    3c4a:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__mulsi3>
    3c4e:	6e 0d       	add	r22, r14
    3c50:	7f 1d       	adc	r23, r15
    3c52:	80 1f       	adc	r24, r16
    3c54:	91 1f       	adc	r25, r17
    3c56:	6c 83       	std	Y+4, r22	; 0x04
    3c58:	7d 83       	std	Y+5, r23	; 0x05
    3c5a:	8e 83       	std	Y+6, r24	; 0x06
    3c5c:	9f 83       	std	Y+7, r25	; 0x07
    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3c5e:	10 c0       	rjmp	.+32     	; 0x3c80 <nrk_time_get+0x88>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    3c60:	28 81       	ld	r18, Y
    3c62:	39 81       	ldd	r19, Y+1	; 0x01
    3c64:	4a 81       	ldd	r20, Y+2	; 0x02
    3c66:	5b 81       	ldd	r21, Y+3	; 0x03
    3c68:	2f 5f       	subi	r18, 0xFF	; 255
    3c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6c:	4f 4f       	sbci	r20, 0xFF	; 255
    3c6e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c70:	28 83       	st	Y, r18
    3c72:	39 83       	std	Y+1, r19	; 0x01
    3c74:	4a 83       	std	Y+2, r20	; 0x02
    3c76:	5b 83       	std	Y+3, r21	; 0x03
    3c78:	60 50       	subi	r22, 0x00	; 0
    3c7a:	7a 4c       	sbci	r23, 0xCA	; 202
    3c7c:	8a 49       	sbci	r24, 0x9A	; 154
    3c7e:	9b 43       	sbci	r25, 0x3B	; 59
{
 t->secs=nrk_system_time.secs;
 t->nano_secs=nrk_system_time.nano_secs;

   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3c80:	60 30       	cpi	r22, 0x00	; 0
    3c82:	2a ec       	ldi	r18, 0xCA	; 202
    3c84:	72 07       	cpc	r23, r18
    3c86:	2a e9       	ldi	r18, 0x9A	; 154
    3c88:	82 07       	cpc	r24, r18
    3c8a:	2b e3       	ldi	r18, 0x3B	; 59
    3c8c:	92 07       	cpc	r25, r18
    3c8e:	40 f7       	brcc	.-48     	; 0x3c60 <nrk_time_get+0x68>
    3c90:	6c 83       	std	Y+4, r22	; 0x04
    3c92:	7d 83       	std	Y+5, r23	; 0x05
    3c94:	8e 83       	std	Y+6, r24	; 0x06
    3c96:	9f 83       	std	Y+7, r25	; 0x07
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    }
}
    3c98:	df 91       	pop	r29
    3c9a:	cf 91       	pop	r28
    3c9c:	1f 91       	pop	r17
    3c9e:	0f 91       	pop	r16
    3ca0:	ff 90       	pop	r15
    3ca2:	ef 90       	pop	r14
    3ca4:	08 95       	ret

00003ca6 <nrk_idle_task>:
#include <nrk_platform_time.h>
#include <nrk_scheduler.h>
#include <stdio.h>

void nrk_idle_task()
{
    3ca6:	0f 93       	push	r16
    3ca8:	1f 93       	push	r17

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=1;
    3caa:	01 e0       	ldi	r16, 0x01	; 1
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=2;
    3cac:	12 e0       	ldi	r17, 0x02	; 2
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    3cae:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    3cb2:	0e 94 32 21 	call	0x4264	; 0x4264 <_nrk_get_next_wakeup>
    3cb6:	8b 30       	cpi	r24, 0x0B	; 11
    3cb8:	28 f4       	brcc	.+10     	; 0x3cc4 <nrk_idle_task+0x1e>
    {
	    _nrk_cpu_state=1;
    3cba:	00 93 71 05 	sts	0x0571, r16
	    nrk_idle();
    3cbe:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_idle>
    3cc2:	08 c0       	rjmp	.+16     	; 0x3cd4 <nrk_idle_task+0x2e>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    3cc4:	8a e0       	ldi	r24, 0x0A	; 10
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	0e 94 6f 20 	call	0x40de	; 0x40de <nrk_spin_wait_us>
	    _nrk_cpu_state=2;
    3ccc:	10 93 71 05 	sts	0x0571, r17
	    nrk_sleep();
    3cd0:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3cd4:	80 91 02 04 	lds	r24, 0x0402
    3cd8:	85 35       	cpi	r24, 0x55	; 85
    3cda:	19 f0       	breq	.+6      	; 0x3ce2 <nrk_idle_task+0x3c>
    3cdc:	88 e0       	ldi	r24, 0x08	; 8
    3cde:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3ce2:	80 91 7e 21 	lds	r24, 0x217E
    3ce6:	85 35       	cpi	r24, 0x55	; 85
    3ce8:	11 f3       	breq	.-60     	; 0x3cae <nrk_idle_task+0x8>
    3cea:	88 e0       	ldi	r24, 0x08	; 8
    3cec:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <nrk_error_add>
    3cf0:	de cf       	rjmp	.-68     	; 0x3cae <nrk_idle_task+0x8>

00003cf2 <_nrk_scheduler>:
// 750 measure to 100uS
// 800 * .125 = 100us
#define CONTEXT_SWAP_TIME_BOUND    750

void inline _nrk_scheduler()
{	   
    3cf2:	4f 92       	push	r4
    3cf4:	5f 92       	push	r5
    3cf6:	6f 92       	push	r6
    3cf8:	7f 92       	push	r7
    3cfa:	8f 92       	push	r8
    3cfc:	9f 92       	push	r9
    3cfe:	af 92       	push	r10
    3d00:	bf 92       	push	r11
    3d02:	cf 92       	push	r12
    3d04:	df 92       	push	r13
    3d06:	ef 92       	push	r14
    3d08:	ff 92       	push	r15
    3d0a:	0f 93       	push	r16
    3d0c:	1f 93       	push	r17
    3d0e:	cf 93       	push	r28
    3d10:	df 93       	push	r29
	int8_t task_ID;
	uint16_t next_wake;
	uint16_t start_time_stamp;

nrk_int_disable();   // this should be removed...  Not needed
    3d12:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
	_nrk_high_speed_timer_reset();
    3d16:	0e 94 b2 20 	call	0x4164	; 0x4164 <_nrk_high_speed_timer_reset>
	start_time_stamp=_nrk_high_speed_timer_get();
    3d1a:	0e 94 fe 20 	call	0x41fc	; 0x41fc <_nrk_high_speed_timer_get>
    3d1e:	3c 01       	movw	r6, r24
#endif
	_nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    3d20:	8a ef       	ldi	r24, 0xFA	; 250
    3d22:	0e 94 36 21 	call	0x426c	; 0x426c <_nrk_set_next_wakeup>
	// Set to huge number which will later get set to min
	next_wake=60000;
	// Safety zone starts here....
	#ifdef NRK_WATCHDOG
	nrk_watchdog_reset();
    3d26:	0e 94 af 23 	call	0x475e	; 0x475e <nrk_watchdog_reset>
	if(_nrk_cpu_state && _nrk_os_timer_get()>nrk_max_sleep_wakeup_time)
		nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
	#endif
	//while(_nrk_time_trigger>0)
	//{
	nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    3d2a:	60 91 00 04 	lds	r22, 0x0400
    3d2e:	70 e0       	ldi	r23, 0x00	; 0
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	23 eb       	ldi	r18, 0xB3	; 179
    3d36:	36 ee       	ldi	r19, 0xE6	; 230
    3d38:	4e e0       	ldi	r20, 0x0E	; 14
    3d3a:	50 e0       	ldi	r21, 0x00	; 0
    3d3c:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__mulsi3>
    3d40:	7b 01       	movw	r14, r22
    3d42:	8c 01       	movw	r16, r24
    3d44:	80 91 78 05 	lds	r24, 0x0578
    3d48:	90 91 79 05 	lds	r25, 0x0579
    3d4c:	a0 91 7a 05 	lds	r26, 0x057A
    3d50:	b0 91 7b 05 	lds	r27, 0x057B
    3d54:	e8 0e       	add	r14, r24
    3d56:	f9 1e       	adc	r15, r25
    3d58:	0a 1f       	adc	r16, r26
    3d5a:	1b 1f       	adc	r17, r27
	nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3d5c:	c8 01       	movw	r24, r16
    3d5e:	b7 01       	movw	r22, r14
    3d60:	0e 94 f5 25 	call	0x4bea	; 0x4bea <__udivmodsi4>
    3d64:	e6 1a       	sub	r14, r22
    3d66:	f7 0a       	sbc	r15, r23
    3d68:	08 0b       	sbc	r16, r24
    3d6a:	19 0b       	sbc	r17, r25
    3d6c:	80 91 74 05 	lds	r24, 0x0574
    3d70:	90 91 75 05 	lds	r25, 0x0575
    3d74:	a0 91 76 05 	lds	r26, 0x0576
    3d78:	b0 91 77 05 	lds	r27, 0x0577
	  else
		_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
	}
	#endif
	
	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    3d7c:	16 c0       	rjmp	.+44     	; 0x3daa <_nrk_scheduler+0xb8>
	{
		nrk_system_time.nano_secs-=NANOS_PER_SEC;
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
    3d80:	96 e3       	ldi	r25, 0x36	; 54
    3d82:	a5 e6       	ldi	r26, 0x65	; 101
    3d84:	b4 ec       	ldi	r27, 0xC4	; 196
    3d86:	e8 0e       	add	r14, r24
    3d88:	f9 1e       	adc	r15, r25
    3d8a:	0a 1f       	adc	r16, r26
    3d8c:	1b 1f       	adc	r17, r27
		nrk_system_time.secs++;
		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3d8e:	c8 01       	movw	r24, r16
    3d90:	b7 01       	movw	r22, r14
    3d92:	23 eb       	ldi	r18, 0xB3	; 179
    3d94:	36 ee       	ldi	r19, 0xE6	; 230
    3d96:	4e e0       	ldi	r20, 0x0E	; 14
    3d98:	50 e0       	ldi	r21, 0x00	; 0
    3d9a:	0e 94 f5 25 	call	0x4bea	; 0x4bea <__udivmodsi4>
    3d9e:	e6 1a       	sub	r14, r22
    3da0:	f7 0a       	sbc	r15, r23
    3da2:	08 0b       	sbc	r16, r24
    3da4:	19 0b       	sbc	r17, r25
    3da6:	d6 01       	movw	r26, r12
    3da8:	c5 01       	movw	r24, r10
    3daa:	5c 01       	movw	r10, r24
    3dac:	6d 01       	movw	r12, r26
    3dae:	08 94       	sec
    3db0:	a1 1c       	adc	r10, r1
    3db2:	b1 1c       	adc	r11, r1
    3db4:	c1 1c       	adc	r12, r1
    3db6:	d1 1c       	adc	r13, r1
	  else
		_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
	}
	#endif
	
	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    3db8:	20 e0       	ldi	r18, 0x00	; 0
    3dba:	e2 16       	cp	r14, r18
    3dbc:	2a ec       	ldi	r18, 0xCA	; 202
    3dbe:	f2 06       	cpc	r15, r18
    3dc0:	2a e9       	ldi	r18, 0x9A	; 154
    3dc2:	02 07       	cpc	r16, r18
    3dc4:	2b e3       	ldi	r18, 0x3B	; 59
    3dc6:	12 07       	cpc	r17, r18
    3dc8:	d0 f6       	brcc	.-76     	; 0x3d7e <_nrk_scheduler+0x8c>
    3dca:	e0 92 78 05 	sts	0x0578, r14
    3dce:	f0 92 79 05 	sts	0x0579, r15
    3dd2:	00 93 7a 05 	sts	0x057A, r16
    3dd6:	10 93 7b 05 	sts	0x057B, r17
    3dda:	80 93 74 05 	sts	0x0574, r24
    3dde:	90 93 75 05 	sts	0x0575, r25
    3de2:	a0 93 76 05 	sts	0x0576, r26
    3de6:	b0 93 77 05 	sts	0x0577, r27
		nrk_system_time.secs++;
		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
	}
	//  _nrk_time_trigger--;
	//}  
	if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    3dea:	e0 91 7d 05 	lds	r30, 0x057D
    3dee:	f0 91 7e 05 	lds	r31, 0x057E
    3df2:	85 81       	ldd	r24, Z+5	; 0x05
    3df4:	88 23       	and	r24, r24
    3df6:	b9 f0       	breq	.+46     	; 0x3e26 <_nrk_scheduler+0x134>
    3df8:	81 85       	ldd	r24, Z+9	; 0x09
    3dfa:	84 30       	cpi	r24, 0x04	; 4
    3dfc:	a1 f0       	breq	.+40     	; 0x3e26 <_nrk_scheduler+0x134>
	{
	//	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		
		if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)  
    3dfe:	87 81       	ldd	r24, Z+7	; 0x07
    3e00:	82 30       	cpi	r24, 0x02	; 2
    3e02:	29 f0       	breq	.+10     	; 0x3e0e <_nrk_scheduler+0x11c>
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0) 
    3e04:	88 23       	and	r24, r24
    3e06:	41 f0       	breq	.+16     	; 0x3e18 <_nrk_scheduler+0x126>
    3e08:	86 81       	ldd	r24, Z+6	; 0x06
    3e0a:	88 23       	and	r24, r24
    3e0c:	11 f4       	brne	.+4      	; 0x3e12 <_nrk_scheduler+0x120>
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    3e0e:	85 e0       	ldi	r24, 0x05	; 5
    3e10:	01 c0       	rjmp	.+2      	; 0x3e14 <_nrk_scheduler+0x122>
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1) 
			nrk_cur_task_TCB->task_state = SUSPENDED;
    3e12:	83 e0       	ldi	r24, 0x03	; 3
    3e14:	81 87       	std	Z+9, r24	; 0x09
		
		if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)  
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0) 
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1) 
    3e16:	04 c0       	rjmp	.+8      	; 0x3e20 <_nrk_scheduler+0x12e>
			nrk_cur_task_TCB->task_state = SUSPENDED;
		else	
		{
			nrk_cur_task_TCB->task_state = SUSPENDED;
    3e18:	83 e0       	ldi	r24, 0x03	; 3
    3e1a:	81 87       	std	Z+9, r24	; 0x09
			nrk_cur_task_TCB->event_suspend=0;
    3e1c:	17 82       	std	Z+7, r1	; 0x07
			nrk_cur_task_TCB->nw_flag=0;
    3e1e:	16 82       	std	Z+6, r1	; 0x06
		}
		nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    3e20:	80 85       	ldd	r24, Z+8	; 0x08
    3e22:	0e 94 de 18 	call	0x31bc	; 0x31bc <nrk_rem_from_readyQ>

	// Update cpu used value for ended task
	// If the task has used its reserve, suspend task
	// Don't disable IdleTask which is 0
	// Don't decrease cpu_remaining if reserve is 0 and hence disabled
	if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    3e26:	e0 91 7d 05 	lds	r30, 0x057D
    3e2a:	f0 91 7e 05 	lds	r31, 0x057E
    3e2e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e30:	96 8d       	ldd	r25, Z+30	; 0x1e
    3e32:	00 97       	sbiw	r24, 0x00	; 0
    3e34:	91 f1       	breq	.+100    	; 0x3e9a <_nrk_scheduler+0x1a8>
    3e36:	60 85       	ldd	r22, Z+8	; 0x08
    3e38:	66 23       	and	r22, r22
    3e3a:	79 f1       	breq	.+94     	; 0x3e9a <_nrk_scheduler+0x1a8>
    3e3c:	81 85       	ldd	r24, Z+9	; 0x09
    3e3e:	84 30       	cpi	r24, 0x04	; 4
    3e40:	61 f1       	breq	.+88     	; 0x3e9a <_nrk_scheduler+0x1a8>
	{
		if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    3e42:	21 8d       	ldd	r18, Z+25	; 0x19
    3e44:	32 8d       	ldd	r19, Z+26	; 0x1a
    3e46:	80 91 00 04 	lds	r24, 0x0400
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	28 17       	cp	r18, r24
    3e4e:	39 07       	cpc	r19, r25
    3e50:	50 f4       	brcc	.+20     	; 0x3e66 <_nrk_scheduler+0x174>
		{
			#ifdef NRK_STATS_TRACKER
			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
			#endif
			nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    3e52:	82 e0       	ldi	r24, 0x02	; 2
    3e54:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <nrk_kernel_error_add>
			nrk_cur_task_TCB->cpu_remaining=0;
    3e58:	e0 91 7d 05 	lds	r30, 0x057D
    3e5c:	f0 91 7e 05 	lds	r31, 0x057E
    3e60:	12 8e       	std	Z+26, r1	; 0x1a
    3e62:	11 8e       	std	Z+25, r1	; 0x19
    3e64:	04 c0       	rjmp	.+8      	; 0x3e6e <_nrk_scheduler+0x17c>
		}else
			nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    3e66:	28 1b       	sub	r18, r24
    3e68:	39 0b       	sbc	r19, r25
    3e6a:	32 8f       	std	Z+26, r19	; 0x1a
    3e6c:	21 8f       	std	Z+25, r18	; 0x19

		task_ID= nrk_cur_task_TCB->task_ID;
    3e6e:	e0 91 7d 05 	lds	r30, 0x057D
    3e72:	f0 91 7e 05 	lds	r31, 0x057E
    3e76:	10 85       	ldd	r17, Z+8	; 0x08

		if (nrk_cur_task_TCB->cpu_remaining ==0 ) {
    3e78:	81 8d       	ldd	r24, Z+25	; 0x19
    3e7a:	92 8d       	ldd	r25, Z+26	; 0x1a
    3e7c:	00 97       	sbiw	r24, 0x00	; 0
    3e7e:	69 f4       	brne	.+26     	; 0x3e9a <_nrk_scheduler+0x1a8>
			#ifdef NRK_STATS_TRACKER
			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
			#endif
			nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    3e80:	83 e0       	ldi	r24, 0x03	; 3
    3e82:	61 2f       	mov	r22, r17
    3e84:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <nrk_kernel_error_add>
			nrk_cur_task_TCB->task_state = SUSPENDED;
    3e88:	e0 91 7d 05 	lds	r30, 0x057D
    3e8c:	f0 91 7e 05 	lds	r31, 0x057E
    3e90:	83 e0       	ldi	r24, 0x03	; 3
    3e92:	81 87       	std	Z+9, r24	; 0x09
			nrk_rem_from_readyQ(task_ID);
    3e94:	81 2f       	mov	r24, r17
    3e96:	0e 94 de 18 	call	0x31bc	; 0x31bc <nrk_rem_from_readyQ>
    3e9a:	c7 ec       	ldi	r28, 0xC7	; 199
    3e9c:	d4 e0       	ldi	r29, 0x04	; 4
    3e9e:	f0 e6       	ldi	r31, 0x60	; 96
    3ea0:	ef 2e       	mov	r14, r31
    3ea2:	fa ee       	ldi	r31, 0xEA	; 234
    3ea4:	ff 2e       	mov	r15, r31
    3ea6:	10 e0       	ldi	r17, 0x00	; 0
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					nrk_task_TCB[task_ID].num_periods=1;
    3ea8:	e1 e0       	ldi	r30, 0x01	; 1
    3eaa:	8e 2e       	mov	r8, r30
    3eac:	91 2c       	mov	r9, r1
				nrk_task_TCB[task_ID].nw_flag=0;
				nrk_task_TCB[task_ID].suspend_flag=0;
				if(nrk_task_TCB[task_ID].num_periods==1) 
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
					nrk_task_TCB[task_ID].task_state = READY;
    3eae:	02 e0       	ldi	r16, 0x02	; 2
		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
			// If a task needs to become READY, make it ready
			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
				// printf( "Adding back %d\n",task_ID );
				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3eb0:	71 e0       	ldi	r23, 0x01	; 1
    3eb2:	a7 2e       	mov	r10, r23
    3eb4:	b1 2c       	mov	r11, r1
    3eb6:	c1 2c       	mov	r12, r1
    3eb8:	d1 2c       	mov	r13, r1
	// Check I/O nrk_queues to add tasks with remaining cpu back...

	// Add eligable tasks back to the ready Queue
	// At the same time find the next earliest wakeup
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3eba:	8b 81       	ldd	r24, Y+3	; 0x03
    3ebc:	8f 3f       	cpi	r24, 0xFF	; 255
    3ebe:	09 f4       	brne	.+2      	; 0x3ec2 <_nrk_scheduler+0x1d0>
    3ec0:	7d c0       	rjmp	.+250    	; 0x3fbc <_nrk_scheduler+0x2ca>
		nrk_task_TCB[task_ID].suspend_flag=0;
    3ec2:	18 82       	st	Y, r1
		if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    3ec4:	88 23       	and	r24, r24
    3ec6:	69 f1       	breq	.+90     	; 0x3f22 <_nrk_scheduler+0x230>
    3ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    3eca:	84 30       	cpi	r24, 0x04	; 4
    3ecc:	51 f1       	breq	.+84     	; 0x3f22 <_nrk_scheduler+0x230>
		{
			if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    3ece:	28 89       	ldd	r18, Y+16	; 0x10
    3ed0:	39 89       	ldd	r19, Y+17	; 0x11
    3ed2:	80 91 00 04 	lds	r24, 0x0400
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	28 17       	cp	r18, r24
    3eda:	39 07       	cpc	r19, r25
    3edc:	28 f0       	brcs	.+10     	; 0x3ee8 <_nrk_scheduler+0x1f6>
				nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    3ede:	28 1b       	sub	r18, r24
    3ee0:	39 0b       	sbc	r19, r25
    3ee2:	39 8b       	std	Y+17, r19	; 0x11
    3ee4:	28 8b       	std	Y+16, r18	; 0x10
    3ee6:	02 c0       	rjmp	.+4      	; 0x3eec <_nrk_scheduler+0x1fa>
			else 
				nrk_task_TCB[task_ID].next_wakeup=0;
    3ee8:	19 8a       	std	Y+17, r1	; 0x11
    3eea:	18 8a       	std	Y+16, r1	; 0x10
		
			// Do next period book keeping.
			// next_period needs to be set such that the period is kept consistent even if other
			// wait until functions are called.
			if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    3eec:	6a 89       	ldd	r22, Y+18	; 0x12
    3eee:	7b 89       	ldd	r23, Y+19	; 0x13
    3ef0:	68 17       	cp	r22, r24
    3ef2:	79 07       	cpc	r23, r25
    3ef4:	28 f4       	brcc	.+10     	; 0x3f00 <_nrk_scheduler+0x20e>
				nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
			else {
				if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    3ef6:	6e 89       	ldd	r22, Y+22	; 0x16
    3ef8:	7f 89       	ldd	r23, Y+23	; 0x17
    3efa:	86 17       	cp	r24, r22
    3efc:	97 07       	cpc	r25, r23
    3efe:	28 f4       	brcc	.+10     	; 0x3f0a <_nrk_scheduler+0x218>
					nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    3f00:	68 1b       	sub	r22, r24
    3f02:	79 0b       	sbc	r23, r25
    3f04:	7b 8b       	std	Y+19, r23	; 0x13
    3f06:	6a 8b       	std	Y+18, r22	; 0x12
    3f08:	04 c0       	rjmp	.+8      	; 0x3f12 <_nrk_scheduler+0x220>
				else
					nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    3f0a:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <__udivmodhi4>
    3f0e:	9b 8b       	std	Y+19, r25	; 0x13
    3f10:	8a 8b       	std	Y+18, r24	; 0x12
			}
			if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    3f12:	8a 89       	ldd	r24, Y+18	; 0x12
    3f14:	9b 89       	ldd	r25, Y+19	; 0x13
    3f16:	00 97       	sbiw	r24, 0x00	; 0
    3f18:	21 f4       	brne	.+8      	; 0x3f22 <_nrk_scheduler+0x230>
    3f1a:	8e 89       	ldd	r24, Y+22	; 0x16
    3f1c:	9f 89       	ldd	r25, Y+23	; 0x17
    3f1e:	9b 8b       	std	Y+19, r25	; 0x13
    3f20:	8a 8b       	std	Y+18, r24	; 0x12
					
		}


		// Look for Next Task that Might Wakeup to interrupt current task
		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
    3f22:	8c 81       	ldd	r24, Y+4	; 0x04
    3f24:	83 30       	cpi	r24, 0x03	; 3
    3f26:	09 f0       	breq	.+2      	; 0x3f2a <_nrk_scheduler+0x238>
    3f28:	49 c0       	rjmp	.+146    	; 0x3fbc <_nrk_scheduler+0x2ca>
			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
			// If a task needs to become READY, make it ready
			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
    3f2a:	88 89       	ldd	r24, Y+16	; 0x10
    3f2c:	99 89       	ldd	r25, Y+17	; 0x11
    3f2e:	00 97       	sbiw	r24, 0x00	; 0
    3f30:	e9 f5       	brne	.+122    	; 0x3fac <_nrk_scheduler+0x2ba>
				// printf( "Adding back %d\n",task_ID );
				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3f32:	8a 81       	ldd	r24, Y+2	; 0x02
    3f34:	88 23       	and	r24, r24
    3f36:	91 f0       	breq	.+36     	; 0x3f5c <_nrk_scheduler+0x26a>
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	88 23       	and	r24, r24
    3f3c:	79 f0       	breq	.+30     	; 0x3f5c <_nrk_scheduler+0x26a>
    3f3e:	d6 01       	movw	r26, r12
    3f40:	c5 01       	movw	r24, r10
    3f42:	00 90 6d 05 	lds	r0, 0x056D
    3f46:	04 c0       	rjmp	.+8      	; 0x3f50 <_nrk_scheduler+0x25e>
    3f48:	88 0f       	add	r24, r24
    3f4a:	99 1f       	adc	r25, r25
    3f4c:	aa 1f       	adc	r26, r26
    3f4e:	bb 1f       	adc	r27, r27
    3f50:	0a 94       	dec	r0
    3f52:	d2 f7       	brpl	.-12     	; 0x3f48 <_nrk_scheduler+0x256>
    3f54:	8c 87       	std	Y+12, r24	; 0x0c
    3f56:	9d 87       	std	Y+13, r25	; 0x0d
    3f58:	ae 87       	std	Y+14, r26	; 0x0e
    3f5a:	bf 87       	std	Y+15, r27	; 0x0f
				//if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
				nrk_task_TCB[task_ID].event_suspend=0;
    3f5c:	1a 82       	std	Y+2, r1	; 0x02
				nrk_task_TCB[task_ID].nw_flag=0;
    3f5e:	19 82       	std	Y+1, r1	; 0x01
				nrk_task_TCB[task_ID].suspend_flag=0;
    3f60:	18 82       	st	Y, r1
				if(nrk_task_TCB[task_ID].num_periods==1) 
    3f62:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f64:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3f66:	28 8d       	ldd	r18, Y+24	; 0x18
    3f68:	39 8d       	ldd	r19, Y+25	; 0x19
    3f6a:	81 30       	cpi	r24, 0x01	; 1
    3f6c:	91 05       	cpc	r25, r1
    3f6e:	59 f4       	brne	.+22     	; 0x3f86 <_nrk_scheduler+0x294>
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    3f70:	3d 8b       	std	Y+21, r19	; 0x15
    3f72:	2c 8b       	std	Y+20, r18	; 0x14
					nrk_task_TCB[task_ID].task_state = READY;
    3f74:	0c 83       	std	Y+4, r16	; 0x04
					nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    3f76:	8a 89       	ldd	r24, Y+18	; 0x12
    3f78:	9b 89       	ldd	r25, Y+19	; 0x13
    3f7a:	99 8b       	std	Y+17, r25	; 0x11
    3f7c:	88 8b       	std	Y+16, r24	; 0x10
					nrk_add_to_readyQ(task_ID);				
    3f7e:	81 2f       	mov	r24, r17
    3f80:	0e 94 2f 18 	call	0x305e	; 0x305e <nrk_add_to_readyQ>
    3f84:	13 c0       	rjmp	.+38     	; 0x3fac <_nrk_scheduler+0x2ba>
				} else 
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    3f86:	3d 8b       	std	Y+21, r19	; 0x15
    3f88:	2c 8b       	std	Y+20, r18	; 0x14
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3f8a:	01 97       	sbiw	r24, 0x01	; 1
    3f8c:	2e 89       	ldd	r18, Y+22	; 0x16
    3f8e:	3f 89       	ldd	r19, Y+23	; 0x17
    3f90:	ac 01       	movw	r20, r24
    3f92:	42 9f       	mul	r20, r18
    3f94:	c0 01       	movw	r24, r0
    3f96:	43 9f       	mul	r20, r19
    3f98:	90 0d       	add	r25, r0
    3f9a:	52 9f       	mul	r21, r18
    3f9c:	90 0d       	add	r25, r0
    3f9e:	11 24       	eor	r1, r1
    3fa0:	99 8b       	std	Y+17, r25	; 0x11
    3fa2:	88 8b       	std	Y+16, r24	; 0x10
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3fa4:	9b 8b       	std	Y+19, r25	; 0x13
    3fa6:	8a 8b       	std	Y+18, r24	; 0x12
					nrk_task_TCB[task_ID].num_periods=1;
    3fa8:	9b 8e       	std	Y+27, r9	; 0x1b
    3faa:	8a 8e       	std	Y+26, r8	; 0x1a
		//			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
		//			nrk_task_TCB[task_ID].num_periods=1; 
				}
			}

			if(nrk_task_TCB[task_ID].next_wakeup!=0 && 
    3fac:	48 88       	ldd	r4, Y+16	; 0x10
    3fae:	59 88       	ldd	r5, Y+17	; 0x11
    3fb0:	41 14       	cp	r4, r1
    3fb2:	51 04       	cpc	r5, r1
    3fb4:	19 f0       	breq	.+6      	; 0x3fbc <_nrk_scheduler+0x2ca>
    3fb6:	4e 14       	cp	r4, r14
    3fb8:	5f 04       	cpc	r5, r15
    3fba:	08 f0       	brcs	.+2      	; 0x3fbe <_nrk_scheduler+0x2cc>
    3fbc:	27 01       	movw	r4, r14

	// Check I/O nrk_queues to add tasks with remaining cpu back...

	// Add eligable tasks back to the ready Queue
	// At the same time find the next earliest wakeup
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3fbe:	1f 5f       	subi	r17, 0xFF	; 255
    3fc0:	a1 96       	adiw	r28, 0x21	; 33
    3fc2:	15 30       	cpi	r17, 0x05	; 5
    3fc4:	11 f0       	breq	.+4      	; 0x3fca <_nrk_scheduler+0x2d8>
    3fc6:	72 01       	movw	r14, r4
    3fc8:	78 cf       	rjmp	.-272    	; 0x3eba <_nrk_scheduler+0x1c8>


	#ifdef NRK_STATS_TRACKER
		_nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
	#endif
	task_ID = nrk_get_high_ready_task_ID();  
    3fca:	0e 94 1e 18 	call	0x303c	; 0x303c <nrk_get_high_ready_task_ID>
    3fce:	18 2f       	mov	r17, r24
	nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3fd0:	99 27       	eor	r25, r25
    3fd2:	87 fd       	sbrc	r24, 7
    3fd4:	90 95       	com	r25
    3fd6:	fc 01       	movw	r30, r24
    3fd8:	65 e0       	ldi	r22, 0x05	; 5
    3fda:	ee 0f       	add	r30, r30
    3fdc:	ff 1f       	adc	r31, r31
    3fde:	6a 95       	dec	r22
    3fe0:	e1 f7       	brne	.-8      	; 0x3fda <_nrk_scheduler+0x2e8>
    3fe2:	e8 0f       	add	r30, r24
    3fe4:	f9 1f       	adc	r31, r25
    3fe6:	ee 53       	subi	r30, 0x3E	; 62
    3fe8:	fb 4f       	sbci	r31, 0xFB	; 251
    3fea:	42 85       	ldd	r20, Z+10	; 0x0a
    3fec:	40 93 7f 05 	sts	0x057F, r20
	nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    3ff0:	81 e2       	ldi	r24, 0x21	; 33
    3ff2:	18 02       	muls	r17, r24
    3ff4:	c0 01       	movw	r24, r0
    3ff6:	11 24       	eor	r1, r1
    3ff8:	8e 53       	subi	r24, 0x3E	; 62
    3ffa:	9b 4f       	sbci	r25, 0xFB	; 251
    3ffc:	90 93 6f 05 	sts	0x056F, r25
    4000:	80 93 6e 05 	sts	0x056E, r24
	// task_ID holds the highest priority READY task ID
	// So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time 

	// Now we pick the next wakeup (either the end of the current task, or the possible resume
	// of a suspended task) 
	if(task_ID!=NRK_IDLE_TASK_ID) 
    4004:	11 23       	and	r17, r17
    4006:	a1 f0       	breq	.+40     	; 0x4030 <_nrk_scheduler+0x33e>
	{
		// You are a non-Idle Task
		if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    4008:	25 8d       	ldd	r18, Z+29	; 0x1d
    400a:	36 8d       	ldd	r19, Z+30	; 0x1e
    400c:	21 15       	cp	r18, r1
    400e:	31 05       	cpc	r19, r1
    4010:	51 f0       	breq	.+20     	; 0x4026 <_nrk_scheduler+0x334>
    4012:	21 8d       	ldd	r18, Z+25	; 0x19
    4014:	32 8d       	ldd	r19, Z+26	; 0x1a
    4016:	2a 3f       	cpi	r18, 0xFA	; 250
    4018:	31 05       	cpc	r19, r1
    401a:	28 f4       	brcc	.+10     	; 0x4026 <_nrk_scheduler+0x334>
    401c:	24 15       	cp	r18, r4
    401e:	35 05       	cpc	r19, r5
    4020:	28 f5       	brcc	.+74     	; 0x406c <_nrk_scheduler+0x37a>
    4022:	29 01       	movw	r4, r18
    4024:	23 c0       	rjmp	.+70     	; 0x406c <_nrk_scheduler+0x37a>
    4026:	5b ef       	ldi	r21, 0xFB	; 251
    4028:	45 16       	cp	r4, r21
    402a:	51 04       	cpc	r5, r1
    402c:	f8 f0       	brcs	.+62     	; 0x406c <_nrk_scheduler+0x37a>
    402e:	17 c0       	rjmp	.+46     	; 0x405e <_nrk_scheduler+0x36c>
		// Make sure you wake up from the idle task a little earlier
		// if you would go into deep sleep...
		// After waking from deep sleep, the next context swap must be at least
  		// NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time. 
			
		if(next_wake>NRK_SLEEP_WAKEUP_TIME) 
    4030:	ab e0       	ldi	r26, 0x0B	; 11
    4032:	4a 16       	cp	r4, r26
    4034:	51 04       	cpc	r5, r1
    4036:	d0 f0       	brcs	.+52     	; 0x406c <_nrk_scheduler+0x37a>
		{
			if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    4038:	92 01       	movw	r18, r4
    403a:	2a 50       	subi	r18, 0x0A	; 10
    403c:	30 40       	sbci	r19, 0x00	; 0
    403e:	2a 3f       	cpi	r18, 0xFA	; 250
    4040:	31 05       	cpc	r19, r1
    4042:	40 f4       	brcc	.+16     	; 0x4054 <_nrk_scheduler+0x362>
    4044:	29 01       	movw	r4, r18
    4046:	29 30       	cpi	r18, 0x09	; 9
    4048:	31 05       	cpc	r19, r1
    404a:	80 f4       	brcc	.+32     	; 0x406c <_nrk_scheduler+0x37a>
    404c:	59 e0       	ldi	r21, 0x09	; 9
    404e:	45 2e       	mov	r4, r21
    4050:	51 2c       	mov	r5, r1
    4052:	0c c0       	rjmp	.+24     	; 0x406c <_nrk_scheduler+0x37a>
					next_wake=NRK_SLEEP_WAKEUP_TIME-1;
				}
				else {
					next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
				}
			} else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME){ 
    4054:	24 e0       	ldi	r18, 0x04	; 4
    4056:	42 16       	cp	r4, r18
    4058:	21 e0       	ldi	r18, 0x01	; 1
    405a:	52 06       	cpc	r5, r18
    405c:	21 f0       	breq	.+8      	; 0x4066 <_nrk_scheduler+0x374>
    405e:	3a ef       	ldi	r19, 0xFA	; 250
    4060:	43 2e       	mov	r4, r19
    4062:	51 2c       	mov	r5, r1
    4064:	03 c0       	rjmp	.+6      	; 0x406c <_nrk_scheduler+0x37a>
    4066:	20 ef       	ldi	r18, 0xF0	; 240
    4068:	42 2e       	mov	r4, r18
    406a:	51 2c       	mov	r5, r1
		printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
		}
	}*/

	//printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
	nrk_cur_task_prio = nrk_high_ready_prio;
    406c:	40 93 70 05 	sts	0x0570, r20
	nrk_cur_task_TCB  = nrk_high_ready_TCB;
    4070:	90 93 7e 05 	sts	0x057E, r25
    4074:	80 93 7d 05 	sts	0x057D, r24
	if(nrk_high_ready_TCB==NULL)
		{
		nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
		}
	#endif
	_nrk_prev_timer_val=next_wake;
    4078:	40 92 00 04 	sts	0x0400, r4


	if(_nrk_os_timer_get()>=next_wake)  // just bigger then, or equal? 
    407c:	0e 94 9d 21 	call	0x433a	; 0x433a <_nrk_os_timer_get>
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	84 15       	cp	r24, r4
    4084:	95 05       	cpc	r25, r5
    4086:	50 f0       	brcs	.+20     	; 0x409c <_nrk_scheduler+0x3aa>
			nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
		#endif

		// This is bad news, but keeps things running
		// +2 just in case we are on the edge of the last tick
		next_wake=_nrk_os_timer_get()+2;
    4088:	0e 94 9d 21 	call	0x433a	; 0x433a <_nrk_os_timer_get>
    408c:	48 2e       	mov	r4, r24
    408e:	55 24       	eor	r5, r5
    4090:	42 e0       	ldi	r20, 0x02	; 2
    4092:	50 e0       	ldi	r21, 0x00	; 0
    4094:	44 0e       	add	r4, r20
    4096:	55 1e       	adc	r5, r21
		_nrk_prev_timer_val=next_wake;
    4098:	40 92 00 04 	sts	0x0400, r4
	} 

	if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=0;
    409c:	11 23       	and	r17, r17
    409e:	11 f0       	breq	.+4      	; 0x40a4 <_nrk_scheduler+0x3b2>
    40a0:	10 92 71 05 	sts	0x0571, r1
	//printf("next wakeup is %d\n\r", next_wake);
	_nrk_set_next_wakeup(next_wake);
    40a4:	84 2d       	mov	r24, r4
    40a6:	0e 94 36 21 	call	0x426c	; 0x426c <_nrk_set_next_wakeup>
	
#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
	// Bound Context Swap to 100us 
	nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    40aa:	c3 01       	movw	r24, r6
    40ac:	6e ee       	ldi	r22, 0xEE	; 238
    40ae:	72 e0       	ldi	r23, 0x02	; 2
    40b0:	0e 94 ba 20 	call	0x4174	; 0x4174 <nrk_high_speed_timer_wait>
#endif	
	nrk_stack_pointer_restore();
    40b4:	0e 94 26 24 	call	0x484c	; 0x484c <nrk_stack_pointer_restore>
	//nrk_int_enable();
	nrk_start_high_ready_task();
    40b8:	0e 94 51 24 	call	0x48a2	; 0x48a2 <nrk_start_high_ready_task>

}
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
    40c0:	1f 91       	pop	r17
    40c2:	0f 91       	pop	r16
    40c4:	ff 90       	pop	r15
    40c6:	ef 90       	pop	r14
    40c8:	df 90       	pop	r13
    40ca:	cf 90       	pop	r12
    40cc:	bf 90       	pop	r11
    40ce:	af 90       	pop	r10
    40d0:	9f 90       	pop	r9
    40d2:	8f 90       	pop	r8
    40d4:	7f 90       	pop	r7
    40d6:	6f 90       	pop	r6
    40d8:	5f 90       	pop	r5
    40da:	4f 90       	pop	r4
    40dc:	08 95       	ret

000040de <nrk_spin_wait_us>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    40e6:	01 97       	sbiw	r24, 0x01	; 1
    40e8:	d1 f7       	brne	.-12     	; 0x40de <nrk_spin_wait_us>

}
    40ea:	08 95       	ret

000040ec <_nrk_setup_timer>:

void _nrk_setup_timer() {
  _nrk_prev_timer_val=254;
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    40ec:	80 e2       	ldi	r24, 0x20	; 32
    40ee:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    40f2:	8e ef       	ldi	r24, 0xFE	; 254
    40f4:	80 93 b3 00 	sts	0x00B3, r24
  TIFR2 =   BM(OCF2A) | BM(TOV2);       // Clear interrupt flag
    40f8:	83 e0       	ldi	r24, 0x03	; 3
    40fa:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    40fc:	92 e0       	ldi	r25, 0x02	; 2
    40fe:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    4102:	e1 eb       	ldi	r30, 0xB1	; 177
    4104:	f0 e0       	ldi	r31, 0x00	; 0
    4106:	80 83       	st	Z, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    4108:	93 b5       	in	r25, 0x23	; 35
    410a:	92 60       	ori	r25, 0x02	; 2
    410c:	93 bd       	out	0x23, r25	; 35
  // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);       
    410e:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    4110:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    4112:	93 b5       	in	r25, 0x23	; 35
    4114:	92 60       	ori	r25, 0x02	; 2
    4116:	93 bd       	out	0x23, r25	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    4118:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    411c:	91 e0       	ldi	r25, 0x01	; 1
    411e:	90 93 81 00 	sts	0x0081, r25
  TCNT1=0;  // 16 bit
    4122:	10 92 85 00 	sts	0x0085, r1
    4126:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    412a:	93 b5       	in	r25, 0x23	; 35
    412c:	92 60       	ori	r25, 0x02	; 2
    412e:	93 bd       	out	0x23, r25	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4130:	93 b5       	in	r25, 0x23	; 35
    4132:	91 60       	ori	r25, 0x01	; 1
    4134:	93 bd       	out	0x23, r25	; 35
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    4136:	93 b5       	in	r25, 0x23	; 35
    4138:	92 60       	ori	r25, 0x02	; 2
    413a:	93 bd       	out	0x23, r25	; 35
    TCNT2 = 0;                  // reset counter
    413c:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    _nrk_prev_timer_val=0;
    4140:	10 92 00 04 	sts	0x0400, r1
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A) | BM(TOIE2) ;//| BM(TICIE1);    // Enable interrupt
    4144:	a0 e7       	ldi	r26, 0x70	; 112
    4146:	b0 e0       	ldi	r27, 0x00	; 0
    4148:	9c 91       	ld	r25, X
    414a:	93 60       	ori	r25, 0x03	; 3
    414c:	9c 93       	st	X, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    414e:	80 83       	st	Z, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_os_timer_start();
  _nrk_time_trigger=0;
    4150:	10 92 d5 02 	sts	0x02D5, r1
}
    4154:	08 95       	ret

00004156 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    4156:	10 92 81 00 	sts	0x0081, r1
}
    415a:	08 95       	ret

0000415c <_nrk_high_speed_timer_start>:

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	80 93 81 00 	sts	0x0081, r24
}
    4162:	08 95       	ret

00004164 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4164:	83 b5       	in	r24, 0x23	; 35
    4166:	81 60       	ori	r24, 0x01	; 1
    4168:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    416a:	10 92 85 00 	sts	0x0085, r1
    416e:	10 92 84 00 	sts	0x0084, r1
//  nrk_int_enable();
}
    4172:	08 95       	ret

00004174 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    4174:	ef 92       	push	r14
    4176:	ff 92       	push	r15
    4178:	0f 93       	push	r16
    417a:	1f 93       	push	r17
    417c:	df 93       	push	r29
    417e:	cf 93       	push	r28
    4180:	00 d0       	rcall	.+0      	; 0x4182 <nrk_high_speed_timer_wait+0xe>
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
uint32_t tmp;
if(start>65400) start=0;
    4186:	2f ef       	ldi	r18, 0xFF	; 255
    4188:	89 37       	cpi	r24, 0x79	; 121
    418a:	92 07       	cpc	r25, r18
    418c:	10 f0       	brcs	.+4      	; 0x4192 <nrk_high_speed_timer_wait+0x1e>
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	90 e0       	ldi	r25, 0x00	; 0
tmp=(uint32_t)start+(uint32_t)ticks;
    4192:	9c 01       	movw	r18, r24
    4194:	40 e0       	ldi	r20, 0x00	; 0
    4196:	50 e0       	ldi	r21, 0x00	; 0
    4198:	7b 01       	movw	r14, r22
    419a:	00 e0       	ldi	r16, 0x00	; 0
    419c:	10 e0       	ldi	r17, 0x00	; 0
    419e:	2e 0d       	add	r18, r14
    41a0:	3f 1d       	adc	r19, r15
    41a2:	40 1f       	adc	r20, r16
    41a4:	51 1f       	adc	r21, r17
//printf("tmp is %d.\n\r", tmp);
if(tmp>65536) 
    41a6:	21 30       	cpi	r18, 0x01	; 1
    41a8:	60 e0       	ldi	r22, 0x00	; 0
    41aa:	36 07       	cpc	r19, r22
    41ac:	61 e0       	ldi	r22, 0x01	; 1
    41ae:	46 07       	cpc	r20, r22
    41b0:	60 e0       	ldi	r22, 0x00	; 0
    41b2:	56 07       	cpc	r21, r22
    41b4:	78 f0       	brcs	.+30     	; 0x41d4 <nrk_high_speed_timer_wait+0x60>

inline uint16_t _nrk_high_speed_timer_get()
{
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    41b6:	60 91 84 00 	lds	r22, 0x0084
    41ba:	70 91 85 00 	lds	r23, 0x0085
    41be:	7a 83       	std	Y+2, r23	; 0x02
    41c0:	69 83       	std	Y+1, r22	; 0x01
  //nrk_int_enable();
  return tmp;
    41c2:	69 81       	ldd	r22, Y+1	; 0x01
    41c4:	7a 81       	ldd	r23, Y+2	; 0x02
//printf("tmp is %d.\n\r", tmp);
if(tmp>65536) 
	{
//	printf("tmp>65536\n\r");
	tmp-=65536;
	do{}while(_nrk_high_speed_timer_get()>start);
    41c6:	86 17       	cp	r24, r22
    41c8:	97 07       	cpc	r25, r23
    41ca:	a8 f3       	brcs	.-22     	; 0x41b6 <nrk_high_speed_timer_wait+0x42>
tmp=(uint32_t)start+(uint32_t)ticks;
//printf("tmp is %d.\n\r", tmp);
if(tmp>65536) 
	{
//	printf("tmp>65536\n\r");
	tmp-=65536;
    41cc:	20 50       	subi	r18, 0x00	; 0
    41ce:	30 40       	sbci	r19, 0x00	; 0
    41d0:	41 40       	sbci	r20, 0x01	; 1
    41d2:	50 40       	sbci	r21, 0x00	; 0

inline uint16_t _nrk_high_speed_timer_get()
{
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    41d4:	80 91 84 00 	lds	r24, 0x0084
    41d8:	90 91 85 00 	lds	r25, 0x0085
    41dc:	9a 83       	std	Y+2, r25	; 0x02
    41de:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    41e0:	89 81       	ldd	r24, Y+1	; 0x01
    41e2:	9a 81       	ldd	r25, Y+2	; 0x02
	tmp-=65536;
	do{}while(_nrk_high_speed_timer_get()>start);
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    41e4:	82 17       	cp	r24, r18
    41e6:	93 07       	cpc	r25, r19
    41e8:	a8 f3       	brcs	.-22     	; 0x41d4 <nrk_high_speed_timer_wait+0x60>
}
    41ea:	0f 90       	pop	r0
    41ec:	0f 90       	pop	r0
    41ee:	cf 91       	pop	r28
    41f0:	df 91       	pop	r29
    41f2:	1f 91       	pop	r17
    41f4:	0f 91       	pop	r16
    41f6:	ff 90       	pop	r15
    41f8:	ef 90       	pop	r14
    41fa:	08 95       	ret

000041fc <_nrk_high_speed_timer_get>:

inline uint16_t _nrk_high_speed_timer_get()
{
    41fc:	df 93       	push	r29
    41fe:	cf 93       	push	r28
    4200:	00 d0       	rcall	.+0      	; 0x4202 <_nrk_high_speed_timer_get+0x6>
    4202:	cd b7       	in	r28, 0x3d	; 61
    4204:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    4206:	80 91 84 00 	lds	r24, 0x0084
    420a:	90 91 85 00 	lds	r25, 0x0085
    420e:	9a 83       	std	Y+2, r25	; 0x02
    4210:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    4212:	29 81       	ldd	r18, Y+1	; 0x01
    4214:	3a 81       	ldd	r19, Y+2	; 0x02
}
    4216:	c9 01       	movw	r24, r18
    4218:	0f 90       	pop	r0
    421a:	0f 90       	pop	r0
    421c:	cf 91       	pop	r28
    421e:	df 91       	pop	r29
    4220:	08 95       	ret

00004222 <_nrk_os_timer_stop>:

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    4222:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    4226:	e0 e7       	ldi	r30, 0x70	; 112
    4228:	f0 e0       	ldi	r31, 0x00	; 0
    422a:	80 81       	ld	r24, Z
    422c:	8d 7f       	andi	r24, 0xFD	; 253
    422e:	80 83       	st	Z, r24
  TIMSK2 &=  ~BM(TOIE2) ;
    4230:	80 81       	ld	r24, Z
    4232:	8e 7f       	andi	r24, 0xFE	; 254
    4234:	80 83       	st	Z, r24
}
    4236:	08 95       	ret

00004238 <_nrk_os_timer_set>:

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    4238:	80 93 b2 00 	sts	0x00B2, r24
}
    423c:	08 95       	ret

0000423e <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A) | BM(TOIE2) ;//| BM(TICIE1);    // Enable interrupt
    423e:	e0 e7       	ldi	r30, 0x70	; 112
    4240:	f0 e0       	ldi	r31, 0x00	; 0
    4242:	80 81       	ld	r24, Z
    4244:	83 60       	ori	r24, 0x03	; 3
    4246:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    4248:	83 e0       	ldi	r24, 0x03	; 3
    424a:	80 93 b1 00 	sts	0x00B1, r24
}
    424e:	08 95       	ret

00004250 <_nrk_os_timer_reset>:

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    4250:	83 b5       	in	r24, 0x23	; 35
    4252:	82 60       	ori	r24, 0x02	; 2
    4254:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    4256:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    425a:	10 92 d5 02 	sts	0x02D5, r1
    _nrk_prev_timer_val=0;
    425e:	10 92 00 04 	sts	0x0400, r1
}
    4262:	08 95       	ret

00004264 <_nrk_get_next_wakeup>:


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    4264:	80 91 b3 00 	lds	r24, 0x00B3
}
    4268:	8f 5f       	subi	r24, 0xFF	; 255
    426a:	08 95       	ret

0000426c <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    426c:	81 50       	subi	r24, 0x01	; 1
    426e:	80 93 b3 00 	sts	0x00B3, r24
   //printf("value of TCNT2 is %d.\n\r",TCNT2);
}
    4272:	08 95       	ret

00004274 <nrk_timer_int_stop>:

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4274:	88 23       	and	r24, r24
    4276:	11 f4       	brne	.+4      	; 0x427c <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    4278:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    427c:	8f ef       	ldi	r24, 0xFF	; 255
    427e:	08 95       	ret

00004280 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4280:	88 23       	and	r24, r24
    4282:	11 f0       	breq	.+4      	; 0x4288 <nrk_timer_int_reset+0x8>
    4284:	8f ef       	ldi	r24, 0xFF	; 255
    4286:	08 95       	ret
	{
	TCNT3=0;
    4288:	10 92 95 00 	sts	0x0095, r1
    428c:	10 92 94 00 	sts	0x0094, r1
    4290:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
	}
return NRK_ERROR;
}
    4292:	08 95       	ret

00004294 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4294:	88 23       	and	r24, r24
    4296:	19 f0       	breq	.+6      	; 0x429e <nrk_timer_int_read+0xa>
    4298:	20 e0       	ldi	r18, 0x00	; 0
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	04 c0       	rjmp	.+8      	; 0x42a6 <nrk_timer_int_read+0x12>
	{
	return TCNT3;
    429e:	20 91 94 00 	lds	r18, 0x0094
    42a2:	30 91 95 00 	lds	r19, 0x0095
	}
return 0;

}
    42a6:	c9 01       	movw	r24, r18
    42a8:	08 95       	ret

000042aa <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    42aa:	88 23       	and	r24, r24
    42ac:	11 f0       	breq	.+4      	; 0x42b2 <nrk_timer_int_start+0x8>
    42ae:	8f ef       	ldi	r24, 0xFF	; 255
    42b0:	08 95       	ret
	{
		TIMSK3 = BM(OCIE3A);
    42b2:	82 e0       	ldi	r24, 0x02	; 2
    42b4:	80 93 71 00 	sts	0x0071, r24
    42b8:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
	}
return NRK_ERROR;
}
    42ba:	08 95       	ret

000042bc <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    42bc:	88 23       	and	r24, r24
    42be:	11 f0       	breq	.+4      	; 0x42c4 <nrk_timer_int_configure+0x8>
    42c0:	8f ef       	ldi	r24, 0xFF	; 255
    42c2:	08 95       	ret
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    42c4:	cb 01       	movw	r24, r22
    42c6:	01 97       	sbiw	r24, 0x01	; 1
    42c8:	85 30       	cpi	r24, 0x05	; 5
    42ca:	91 05       	cpc	r25, r1
    42cc:	10 f4       	brcc	.+4      	; 0x42d2 <nrk_timer_int_configure+0x16>
    42ce:	60 93 ff 03 	sts	0x03FF, r22
	TCCR3A = 0;  
    42d2:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    42d6:	88 e0       	ldi	r24, 0x08	; 8
    42d8:	80 93 91 00 	sts	0x0091, r24
  	OCR3AH = (compare_value >> 8) & 0xFF;	
    42dc:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    42e0:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    42e4:	30 93 cf 02 	sts	0x02CF, r19
    42e8:	20 93 ce 02 	sts	0x02CE, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    42ec:	80 91 ff 03 	lds	r24, 0x03FF
    42f0:	81 30       	cpi	r24, 0x01	; 1
    42f2:	21 f4       	brne	.+8      	; 0x42fc <nrk_timer_int_configure+0x40>
    42f4:	80 91 91 00 	lds	r24, 0x0091
    42f8:	81 60       	ori	r24, 0x01	; 1
    42fa:	0b c0       	rjmp	.+22     	; 0x4312 <nrk_timer_int_configure+0x56>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    42fc:	82 30       	cpi	r24, 0x02	; 2
    42fe:	21 f4       	brne	.+8      	; 0x4308 <nrk_timer_int_configure+0x4c>
    4300:	80 91 91 00 	lds	r24, 0x0091
    4304:	82 60       	ori	r24, 0x02	; 2
    4306:	05 c0       	rjmp	.+10     	; 0x4312 <nrk_timer_int_configure+0x56>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    4308:	83 30       	cpi	r24, 0x03	; 3
    430a:	31 f4       	brne	.+12     	; 0x4318 <nrk_timer_int_configure+0x5c>
    430c:	80 91 91 00 	lds	r24, 0x0091
    4310:	83 60       	ori	r24, 0x03	; 3
    4312:	80 93 91 00 	sts	0x0091, r24
    4316:	08 c0       	rjmp	.+16     	; 0x4328 <nrk_timer_int_configure+0x6c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    4318:	84 30       	cpi	r24, 0x04	; 4
    431a:	21 f4       	brne	.+8      	; 0x4324 <nrk_timer_int_configure+0x68>
    431c:	80 91 91 00 	lds	r24, 0x0091
    4320:	84 60       	ori	r24, 0x04	; 4
    4322:	f7 cf       	rjmp	.-18     	; 0x4312 <nrk_timer_int_configure+0x56>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    4324:	85 30       	cpi	r24, 0x05	; 5
    4326:	11 f0       	breq	.+4      	; 0x432c <nrk_timer_int_configure+0x70>
    4328:	81 e0       	ldi	r24, 0x01	; 1
    432a:	08 95       	ret
    432c:	80 91 91 00 	lds	r24, 0x0091
    4330:	85 60       	ori	r24, 0x05	; 5
    4332:	80 93 91 00 	sts	0x0091, r24
    4336:	81 e0       	ldi	r24, 0x01	; 1
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
}
    4338:	08 95       	ret

0000433a <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    433a:	80 91 b2 00 	lds	r24, 0x00B2
}
    433e:	08 95       	ret

00004340 <__vector_13>:


// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {
asm volatile (
    4340:	0f 92       	push	r0
    4342:	0f b6       	in	r0, 0x3f	; 63
    4344:	0f 92       	push	r0
    4346:	1f 92       	push	r1
    4348:	2f 92       	push	r2
    434a:	3f 92       	push	r3
    434c:	4f 92       	push	r4
    434e:	5f 92       	push	r5
    4350:	6f 92       	push	r6
    4352:	7f 92       	push	r7
    4354:	8f 92       	push	r8
    4356:	9f 92       	push	r9
    4358:	af 92       	push	r10
    435a:	bf 92       	push	r11
    435c:	cf 92       	push	r12
    435e:	df 92       	push	r13
    4360:	ef 92       	push	r14
    4362:	ff 92       	push	r15
    4364:	0f 93       	push	r16
    4366:	1f 93       	push	r17
    4368:	2f 93       	push	r18
    436a:	3f 93       	push	r19
    436c:	4f 93       	push	r20
    436e:	5f 93       	push	r21
    4370:	6f 93       	push	r22
    4372:	7f 93       	push	r23
    4374:	8f 93       	push	r24
    4376:	9f 93       	push	r25
    4378:	af 93       	push	r26
    437a:	bf 93       	push	r27
    437c:	cf 93       	push	r28
    437e:	df 93       	push	r29
    4380:	ef 93       	push	r30
    4382:	ff 93       	push	r31
    4384:	a0 91 7d 05 	lds	r26, 0x057D
    4388:	b0 91 7e 05 	lds	r27, 0x057E
    438c:	0d b6       	in	r0, 0x3d	; 61
    438e:	0d 92       	st	X+, r0
    4390:	0e b6       	in	r0, 0x3e	; 62
    4392:	0d 92       	st	X+, r0
    4394:	1f 92       	push	r1
    4396:	a0 91 fd 03 	lds	r26, 0x03FD
    439a:	b0 91 fe 03 	lds	r27, 0x03FE
    439e:	1e 90       	ld	r1, -X
    43a0:	be bf       	out	0x3e, r27	; 62
    43a2:	ad bf       	out	0x3d, r26	; 61
    43a4:	08 95       	ret

000043a6 <__vector_17>:
}

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    43a6:	1f 92       	push	r1
    43a8:	0f 92       	push	r0
    43aa:	0f b6       	in	r0, 0x3f	; 63
    43ac:	0f 92       	push	r0
    43ae:	11 24       	eor	r1, r1

	return;  	
} 
    43b0:	0f 90       	pop	r0
    43b2:	0f be       	out	0x3f, r0	; 63
    43b4:	0f 90       	pop	r0
    43b6:	1f 90       	pop	r1
    43b8:	18 95       	reti

000043ba <__vector_32>:
);

} 


SIGNAL(TIMER3_COMPA_vect) {
    43ba:	1f 92       	push	r1
    43bc:	0f 92       	push	r0
    43be:	0f b6       	in	r0, 0x3f	; 63
    43c0:	0f 92       	push	r0
    43c2:	0b b6       	in	r0, 0x3b	; 59
    43c4:	0f 92       	push	r0
    43c6:	11 24       	eor	r1, r1
    43c8:	2f 93       	push	r18
    43ca:	3f 93       	push	r19
    43cc:	4f 93       	push	r20
    43ce:	5f 93       	push	r21
    43d0:	6f 93       	push	r22
    43d2:	7f 93       	push	r23
    43d4:	8f 93       	push	r24
    43d6:	9f 93       	push	r25
    43d8:	af 93       	push	r26
    43da:	bf 93       	push	r27
    43dc:	ef 93       	push	r30
    43de:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    43e0:	e0 91 ce 02 	lds	r30, 0x02CE
    43e4:	f0 91 cf 02 	lds	r31, 0x02CF
    43e8:	30 97       	sbiw	r30, 0x00	; 0
    43ea:	11 f0       	breq	.+4      	; 0x43f0 <__vector_32+0x36>
    43ec:	09 95       	icall
    43ee:	04 c0       	rjmp	.+8      	; 0x43f8 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    43f0:	8a e0       	ldi	r24, 0x0A	; 10
    43f2:	60 e0       	ldi	r22, 0x00	; 0
    43f4:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <nrk_kernel_error_add>
//printf("TIMER3_COMPA_vect\n\r");
	return;  	
}
    43f8:	ff 91       	pop	r31
    43fa:	ef 91       	pop	r30
    43fc:	bf 91       	pop	r27
    43fe:	af 91       	pop	r26
    4400:	9f 91       	pop	r25
    4402:	8f 91       	pop	r24
    4404:	7f 91       	pop	r23
    4406:	6f 91       	pop	r22
    4408:	5f 91       	pop	r21
    440a:	4f 91       	pop	r20
    440c:	3f 91       	pop	r19
    440e:	2f 91       	pop	r18
    4410:	0f 90       	pop	r0
    4412:	0b be       	out	0x3b, r0	; 59
    4414:	0f 90       	pop	r0
    4416:	0f be       	out	0x3f, r0	; 63
    4418:	0f 90       	pop	r0
    441a:	1f 90       	pop	r1
    441c:	18 95       	reti

0000441e <__vector_default>:
}

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    441e:	1f 92       	push	r1
    4420:	0f 92       	push	r0
    4422:	0f b6       	in	r0, 0x3f	; 63
    4424:	0f 92       	push	r0
    4426:	0b b6       	in	r0, 0x3b	; 59
    4428:	0f 92       	push	r0
    442a:	11 24       	eor	r1, r1
    442c:	2f 93       	push	r18
    442e:	3f 93       	push	r19
    4430:	4f 93       	push	r20
    4432:	5f 93       	push	r21
    4434:	6f 93       	push	r22
    4436:	7f 93       	push	r23
    4438:	8f 93       	push	r24
    443a:	9f 93       	push	r25
    443c:	af 93       	push	r26
    443e:	bf 93       	push	r27
    4440:	ef 93       	push	r30
    4442:	ff 93       	push	r31
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4444:	8a e0       	ldi	r24, 0x0A	; 10
    4446:	60 e0       	ldi	r22, 0x00	; 0
    4448:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <nrk_kernel_error_add>
    444c:	ff cf       	rjmp	.-2      	; 0x444c <__vector_default+0x2e>

0000444e <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    444e:	88 23       	and	r24, r24
    4450:	11 f4       	brne	.+4      	; 0x4456 <nrk_ext_int_enable+0x8>
    4452:	e8 9a       	sbi	0x1d, 0	; 29
    4454:	33 c0       	rjmp	.+102    	; 0x44bc <nrk_ext_int_enable+0x6e>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    4456:	81 30       	cpi	r24, 0x01	; 1
    4458:	11 f4       	brne	.+4      	; 0x445e <nrk_ext_int_enable+0x10>
    445a:	e9 9a       	sbi	0x1d, 1	; 29
    445c:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    445e:	82 30       	cpi	r24, 0x02	; 2
    4460:	11 f4       	brne	.+4      	; 0x4466 <nrk_ext_int_enable+0x18>
    4462:	ea 9a       	sbi	0x1d, 2	; 29
    4464:	2b c0       	rjmp	.+86     	; 0x44bc <nrk_ext_int_enable+0x6e>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    4466:	83 30       	cpi	r24, 0x03	; 3
    4468:	21 f4       	brne	.+8      	; 0x4472 <nrk_ext_int_enable+0x24>
    446a:	80 91 6b 00 	lds	r24, 0x006B
    446e:	81 60       	ori	r24, 0x01	; 1
    4470:	23 c0       	rjmp	.+70     	; 0x44b8 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    4472:	84 30       	cpi	r24, 0x04	; 4
    4474:	21 f4       	brne	.+8      	; 0x447e <nrk_ext_int_enable+0x30>
    4476:	80 91 6b 00 	lds	r24, 0x006B
    447a:	82 60       	ori	r24, 0x02	; 2
    447c:	1d c0       	rjmp	.+58     	; 0x44b8 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    447e:	85 30       	cpi	r24, 0x05	; 5
    4480:	21 f4       	brne	.+8      	; 0x448a <nrk_ext_int_enable+0x3c>
    4482:	80 91 6b 00 	lds	r24, 0x006B
    4486:	84 60       	ori	r24, 0x04	; 4
    4488:	17 c0       	rjmp	.+46     	; 0x44b8 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    448a:	86 30       	cpi	r24, 0x06	; 6
    448c:	21 f4       	brne	.+8      	; 0x4496 <nrk_ext_int_enable+0x48>
    448e:	80 91 6b 00 	lds	r24, 0x006B
    4492:	88 60       	ori	r24, 0x08	; 8
    4494:	11 c0       	rjmp	.+34     	; 0x44b8 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    4496:	87 30       	cpi	r24, 0x07	; 7
    4498:	21 f4       	brne	.+8      	; 0x44a2 <nrk_ext_int_enable+0x54>
    449a:	80 91 6b 00 	lds	r24, 0x006B
    449e:	80 61       	ori	r24, 0x10	; 16
    44a0:	0b c0       	rjmp	.+22     	; 0x44b8 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    44a2:	88 30       	cpi	r24, 0x08	; 8
    44a4:	21 f4       	brne	.+8      	; 0x44ae <nrk_ext_int_enable+0x60>
    44a6:	80 91 6b 00 	lds	r24, 0x006B
    44aa:	80 62       	ori	r24, 0x20	; 32
    44ac:	05 c0       	rjmp	.+10     	; 0x44b8 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    44ae:	89 30       	cpi	r24, 0x09	; 9
    44b0:	39 f4       	brne	.+14     	; 0x44c0 <nrk_ext_int_enable+0x72>
    44b2:	80 91 6b 00 	lds	r24, 0x006B
    44b6:	80 64       	ori	r24, 0x40	; 64
    44b8:	80 93 6b 00 	sts	0x006B, r24
    44bc:	81 e0       	ldi	r24, 0x01	; 1
    44be:	08 95       	ret
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    44c0:	8a 30       	cpi	r24, 0x0A	; 10
    44c2:	11 f0       	breq	.+4      	; 0x44c8 <nrk_ext_int_enable+0x7a>
    44c4:	8f ef       	ldi	r24, 0xFF	; 255
    44c6:	08 95       	ret
    44c8:	80 91 6b 00 	lds	r24, 0x006B
    44cc:	80 68       	ori	r24, 0x80	; 128
    44ce:	80 93 6b 00 	sts	0x006B, r24
    44d2:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    44d4:	08 95       	ret

000044d6 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    44d6:	88 23       	and	r24, r24
    44d8:	11 f4       	brne	.+4      	; 0x44de <nrk_ext_int_disable+0x8>
    44da:	e8 98       	cbi	0x1d, 0	; 29
    44dc:	33 c0       	rjmp	.+102    	; 0x4544 <nrk_ext_int_disable+0x6e>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    44de:	81 30       	cpi	r24, 0x01	; 1
    44e0:	11 f4       	brne	.+4      	; 0x44e6 <nrk_ext_int_disable+0x10>
    44e2:	e9 98       	cbi	0x1d, 1	; 29
    44e4:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    44e6:	82 30       	cpi	r24, 0x02	; 2
    44e8:	11 f4       	brne	.+4      	; 0x44ee <nrk_ext_int_disable+0x18>
    44ea:	e9 98       	cbi	0x1d, 1	; 29
    44ec:	2b c0       	rjmp	.+86     	; 0x4544 <nrk_ext_int_disable+0x6e>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    44ee:	83 30       	cpi	r24, 0x03	; 3
    44f0:	21 f4       	brne	.+8      	; 0x44fa <nrk_ext_int_disable+0x24>
    44f2:	80 91 6b 00 	lds	r24, 0x006B
    44f6:	8e 7f       	andi	r24, 0xFE	; 254
    44f8:	23 c0       	rjmp	.+70     	; 0x4540 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    44fa:	84 30       	cpi	r24, 0x04	; 4
    44fc:	21 f4       	brne	.+8      	; 0x4506 <nrk_ext_int_disable+0x30>
    44fe:	80 91 6b 00 	lds	r24, 0x006B
    4502:	8d 7f       	andi	r24, 0xFD	; 253
    4504:	1d c0       	rjmp	.+58     	; 0x4540 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    4506:	85 30       	cpi	r24, 0x05	; 5
    4508:	21 f4       	brne	.+8      	; 0x4512 <nrk_ext_int_disable+0x3c>
    450a:	80 91 6b 00 	lds	r24, 0x006B
    450e:	8b 7f       	andi	r24, 0xFB	; 251
    4510:	17 c0       	rjmp	.+46     	; 0x4540 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    4512:	86 30       	cpi	r24, 0x06	; 6
    4514:	21 f4       	brne	.+8      	; 0x451e <nrk_ext_int_disable+0x48>
    4516:	80 91 6b 00 	lds	r24, 0x006B
    451a:	87 7f       	andi	r24, 0xF7	; 247
    451c:	11 c0       	rjmp	.+34     	; 0x4540 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    451e:	87 30       	cpi	r24, 0x07	; 7
    4520:	21 f4       	brne	.+8      	; 0x452a <nrk_ext_int_disable+0x54>
    4522:	80 91 6b 00 	lds	r24, 0x006B
    4526:	8f 7e       	andi	r24, 0xEF	; 239
    4528:	0b c0       	rjmp	.+22     	; 0x4540 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    452a:	88 30       	cpi	r24, 0x08	; 8
    452c:	21 f4       	brne	.+8      	; 0x4536 <nrk_ext_int_disable+0x60>
    452e:	80 91 6b 00 	lds	r24, 0x006B
    4532:	8f 7d       	andi	r24, 0xDF	; 223
    4534:	05 c0       	rjmp	.+10     	; 0x4540 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    4536:	89 30       	cpi	r24, 0x09	; 9
    4538:	39 f4       	brne	.+14     	; 0x4548 <nrk_ext_int_disable+0x72>
    453a:	80 91 6b 00 	lds	r24, 0x006B
    453e:	8f 7b       	andi	r24, 0xBF	; 191
    4540:	80 93 6b 00 	sts	0x006B, r24
    4544:	81 e0       	ldi	r24, 0x01	; 1
    4546:	08 95       	ret
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    4548:	8a 30       	cpi	r24, 0x0A	; 10
    454a:	11 f0       	breq	.+4      	; 0x4550 <nrk_ext_int_disable+0x7a>
    454c:	8f ef       	ldi	r24, 0xFF	; 255
    454e:	08 95       	ret
    4550:	80 91 6b 00 	lds	r24, 0x006B
    4554:	8f 77       	andi	r24, 0x7F	; 127
    4556:	80 93 6b 00 	sts	0x006B, r24
    455a:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    455c:	08 95       	ret

0000455e <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    455e:	88 23       	and	r24, r24
    4560:	39 f5       	brne	.+78     	; 0x45b0 <nrk_ext_int_configure+0x52>
	{
	ext_int0_callback=callback_func;
    4562:	50 93 a1 05 	sts	0x05A1, r21
    4566:	40 93 a0 05 	sts	0x05A0, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    456a:	66 23       	and	r22, r22
    456c:	21 f4       	brne	.+8      	; 0x4576 <nrk_ext_int_configure+0x18>
    456e:	80 91 69 00 	lds	r24, 0x0069
    4572:	8c 7f       	andi	r24, 0xFC	; 252
    4574:	44 c0       	rjmp	.+136    	; 0x45fe <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    4576:	61 30       	cpi	r22, 0x01	; 1
    4578:	49 f4       	brne	.+18     	; 0x458c <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    457a:	80 91 69 00 	lds	r24, 0x0069
    457e:	8d 7f       	andi	r24, 0xFD	; 253
    4580:	80 93 69 00 	sts	0x0069, r24
    4584:	80 91 69 00 	lds	r24, 0x0069
    4588:	81 60       	ori	r24, 0x01	; 1
    458a:	39 c0       	rjmp	.+114    	; 0x45fe <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    458c:	62 30       	cpi	r22, 0x02	; 2
    458e:	49 f4       	brne	.+18     	; 0x45a2 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    4590:	80 91 69 00 	lds	r24, 0x0069
    4594:	82 60       	ori	r24, 0x02	; 2
    4596:	80 93 69 00 	sts	0x0069, r24
    459a:	80 91 69 00 	lds	r24, 0x0069
    459e:	8e 7f       	andi	r24, 0xFE	; 254
    45a0:	2e c0       	rjmp	.+92     	; 0x45fe <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    45a2:	63 30       	cpi	r22, 0x03	; 3
    45a4:	09 f0       	breq	.+2      	; 0x45a8 <nrk_ext_int_configure+0x4a>
    45a6:	66 c0       	rjmp	.+204    	; 0x4674 <nrk_ext_int_configure+0x116>
    45a8:	80 91 69 00 	lds	r24, 0x0069
    45ac:	83 60       	ori	r24, 0x03	; 3
    45ae:	27 c0       	rjmp	.+78     	; 0x45fe <nrk_ext_int_configure+0xa0>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    45b0:	81 30       	cpi	r24, 0x01	; 1
    45b2:	41 f5       	brne	.+80     	; 0x4604 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    45b4:	50 93 9f 05 	sts	0x059F, r21
    45b8:	40 93 9e 05 	sts	0x059E, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    45bc:	66 23       	and	r22, r22
    45be:	21 f4       	brne	.+8      	; 0x45c8 <nrk_ext_int_configure+0x6a>
    45c0:	80 91 69 00 	lds	r24, 0x0069
    45c4:	83 7f       	andi	r24, 0xF3	; 243
    45c6:	1b c0       	rjmp	.+54     	; 0x45fe <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    45c8:	61 30       	cpi	r22, 0x01	; 1
    45ca:	49 f4       	brne	.+18     	; 0x45de <nrk_ext_int_configure+0x80>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    45cc:	80 91 69 00 	lds	r24, 0x0069
    45d0:	87 7f       	andi	r24, 0xF7	; 247
    45d2:	80 93 69 00 	sts	0x0069, r24
    45d6:	80 91 69 00 	lds	r24, 0x0069
    45da:	84 60       	ori	r24, 0x04	; 4
    45dc:	10 c0       	rjmp	.+32     	; 0x45fe <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    45de:	62 30       	cpi	r22, 0x02	; 2
    45e0:	49 f4       	brne	.+18     	; 0x45f4 <nrk_ext_int_configure+0x96>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    45e2:	80 91 69 00 	lds	r24, 0x0069
    45e6:	88 60       	ori	r24, 0x08	; 8
    45e8:	80 93 69 00 	sts	0x0069, r24
    45ec:	80 91 69 00 	lds	r24, 0x0069
    45f0:	8b 7f       	andi	r24, 0xFB	; 251
    45f2:	05 c0       	rjmp	.+10     	; 0x45fe <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    45f4:	63 30       	cpi	r22, 0x03	; 3
    45f6:	f1 f5       	brne	.+124    	; 0x4674 <nrk_ext_int_configure+0x116>
    45f8:	80 91 69 00 	lds	r24, 0x0069
    45fc:	8c 60       	ori	r24, 0x0C	; 12
    45fe:	80 93 69 00 	sts	0x0069, r24
    4602:	36 c0       	rjmp	.+108    	; 0x4670 <nrk_ext_int_configure+0x112>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    4604:	82 30       	cpi	r24, 0x02	; 2
    4606:	31 f5       	brne	.+76     	; 0x4654 <nrk_ext_int_configure+0xf6>
	{
	ext_int1_callback=callback_func;
    4608:	50 93 9f 05 	sts	0x059F, r21
    460c:	40 93 9e 05 	sts	0x059E, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    4610:	66 23       	and	r22, r22
    4612:	21 f4       	brne	.+8      	; 0x461c <nrk_ext_int_configure+0xbe>
    4614:	80 91 69 00 	lds	r24, 0x0069
    4618:	8f 7c       	andi	r24, 0xCF	; 207
    461a:	f1 cf       	rjmp	.-30     	; 0x45fe <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    461c:	61 30       	cpi	r22, 0x01	; 1
    461e:	49 f4       	brne	.+18     	; 0x4632 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    4620:	80 91 69 00 	lds	r24, 0x0069
    4624:	8f 7d       	andi	r24, 0xDF	; 223
    4626:	80 93 69 00 	sts	0x0069, r24
    462a:	80 91 69 00 	lds	r24, 0x0069
    462e:	80 61       	ori	r24, 0x10	; 16
    4630:	e6 cf       	rjmp	.-52     	; 0x45fe <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    4632:	62 30       	cpi	r22, 0x02	; 2
    4634:	49 f4       	brne	.+18     	; 0x4648 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    4636:	80 91 69 00 	lds	r24, 0x0069
    463a:	80 62       	ori	r24, 0x20	; 32
    463c:	80 93 69 00 	sts	0x0069, r24
    4640:	80 91 69 00 	lds	r24, 0x0069
    4644:	8f 7e       	andi	r24, 0xEF	; 239
    4646:	db cf       	rjmp	.-74     	; 0x45fe <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    4648:	63 30       	cpi	r22, 0x03	; 3
    464a:	a1 f4       	brne	.+40     	; 0x4674 <nrk_ext_int_configure+0x116>
    464c:	80 91 69 00 	lds	r24, 0x0069
    4650:	80 63       	ori	r24, 0x30	; 48
    4652:	d5 cf       	rjmp	.-86     	; 0x45fe <nrk_ext_int_configure+0xa0>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4654:	83 50       	subi	r24, 0x03	; 3
    4656:	88 30       	cpi	r24, 0x08	; 8
    4658:	10 f0       	brcs	.+4      	; 0x465e <nrk_ext_int_configure+0x100>
    465a:	8f ef       	ldi	r24, 0xFF	; 255
    465c:	08 95       	ret
	PCICR |= BM(PCIE0);	
    465e:	80 91 68 00 	lds	r24, 0x0068
    4662:	81 60       	ori	r24, 0x01	; 1
    4664:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4668:	50 93 a5 05 	sts	0x05A5, r21
    466c:	40 93 a4 05 	sts	0x05A4, r20
    4670:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
    4672:	08 95       	ret
    4674:	81 e0       	ldi	r24, 0x01	; 1
	}
return NRK_ERROR;
}
    4676:	08 95       	ret

00004678 <__vector_1>:
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
	return;  	
}


SIGNAL(INT0_vect) {
    4678:	1f 92       	push	r1
    467a:	0f 92       	push	r0
    467c:	0f b6       	in	r0, 0x3f	; 63
    467e:	0f 92       	push	r0
    4680:	0b b6       	in	r0, 0x3b	; 59
    4682:	0f 92       	push	r0
    4684:	11 24       	eor	r1, r1
    4686:	2f 93       	push	r18
    4688:	3f 93       	push	r19
    468a:	4f 93       	push	r20
    468c:	5f 93       	push	r21
    468e:	6f 93       	push	r22
    4690:	7f 93       	push	r23
    4692:	8f 93       	push	r24
    4694:	9f 93       	push	r25
    4696:	af 93       	push	r26
    4698:	bf 93       	push	r27
    469a:	ef 93       	push	r30
    469c:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    469e:	e0 91 a0 05 	lds	r30, 0x05A0
    46a2:	f0 91 a1 05 	lds	r31, 0x05A1
    46a6:	30 97       	sbiw	r30, 0x00	; 0
    46a8:	11 f0       	breq	.+4      	; 0x46ae <__vector_1+0x36>
    46aa:	09 95       	icall
    46ac:	04 c0       	rjmp	.+8      	; 0x46b6 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    46ae:	8a e0       	ldi	r24, 0x0A	; 10
    46b0:	60 e0       	ldi	r22, 0x00	; 0
    46b2:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <nrk_kernel_error_add>
	return;  	
}
    46b6:	ff 91       	pop	r31
    46b8:	ef 91       	pop	r30
    46ba:	bf 91       	pop	r27
    46bc:	af 91       	pop	r26
    46be:	9f 91       	pop	r25
    46c0:	8f 91       	pop	r24
    46c2:	7f 91       	pop	r23
    46c4:	6f 91       	pop	r22
    46c6:	5f 91       	pop	r21
    46c8:	4f 91       	pop	r20
    46ca:	3f 91       	pop	r19
    46cc:	2f 91       	pop	r18
    46ce:	0f 90       	pop	r0
    46d0:	0b be       	out	0x3b, r0	; 59
    46d2:	0f 90       	pop	r0
    46d4:	0f be       	out	0x3f, r0	; 63
    46d6:	0f 90       	pop	r0
    46d8:	1f 90       	pop	r1
    46da:	18 95       	reti

000046dc <__vector_9>:
	}
return NRK_ERROR;
}


SIGNAL(PCINT0_vect) {
    46dc:	1f 92       	push	r1
    46de:	0f 92       	push	r0
    46e0:	0f b6       	in	r0, 0x3f	; 63
    46e2:	0f 92       	push	r0
    46e4:	0b b6       	in	r0, 0x3b	; 59
    46e6:	0f 92       	push	r0
    46e8:	11 24       	eor	r1, r1
    46ea:	2f 93       	push	r18
    46ec:	3f 93       	push	r19
    46ee:	4f 93       	push	r20
    46f0:	5f 93       	push	r21
    46f2:	6f 93       	push	r22
    46f4:	7f 93       	push	r23
    46f6:	8f 93       	push	r24
    46f8:	9f 93       	push	r25
    46fa:	af 93       	push	r26
    46fc:	bf 93       	push	r27
    46fe:	ef 93       	push	r30
    4700:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    4702:	e0 91 a4 05 	lds	r30, 0x05A4
    4706:	f0 91 a5 05 	lds	r31, 0x05A5
    470a:	30 97       	sbiw	r30, 0x00	; 0
    470c:	11 f0       	breq	.+4      	; 0x4712 <__vector_9+0x36>
    470e:	09 95       	icall
    4710:	04 c0       	rjmp	.+8      	; 0x471a <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4712:	8a e0       	ldi	r24, 0x0A	; 10
    4714:	60 e0       	ldi	r22, 0x00	; 0
    4716:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <nrk_kernel_error_add>
	return;  	
}
    471a:	ff 91       	pop	r31
    471c:	ef 91       	pop	r30
    471e:	bf 91       	pop	r27
    4720:	af 91       	pop	r26
    4722:	9f 91       	pop	r25
    4724:	8f 91       	pop	r24
    4726:	7f 91       	pop	r23
    4728:	6f 91       	pop	r22
    472a:	5f 91       	pop	r21
    472c:	4f 91       	pop	r20
    472e:	3f 91       	pop	r19
    4730:	2f 91       	pop	r18
    4732:	0f 90       	pop	r0
    4734:	0b be       	out	0x3b, r0	; 59
    4736:	0f 90       	pop	r0
    4738:	0f be       	out	0x3f, r0	; 63
    473a:	0f 90       	pop	r0
    473c:	1f 90       	pop	r1
    473e:	18 95       	reti

00004740 <_nrk_startup_ok>:

uint8_t _nrk_startup_ok()
{
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident
if((volatile uint8_t)TCCR2A!=0) return 0;
    4740:	90 91 b0 00 	lds	r25, 0x00B0
    4744:	80 e0       	ldi	r24, 0x00	; 0
    4746:	99 23       	and	r25, r25
    4748:	09 f4       	brne	.+2      	; 0x474c <_nrk_startup_ok+0xc>
    474a:	81 e0       	ldi	r24, 0x01	; 1
return 1;
}
    474c:	08 95       	ret

0000474e <update_watchdog>:

inline void update_watchdog()
{


}
    474e:	08 95       	ret

00004750 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4750:	04 b6       	in	r0, 0x34	; 52
    4752:	03 fe       	sbrs	r0, 3
    4754:	02 c0       	rjmp	.+4      	; 0x475a <nrk_watchdog_check+0xa>
    4756:	8f ef       	ldi	r24, 0xFF	; 255
    4758:	08 95       	ret
    475a:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    475c:	08 95       	ret

0000475e <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    475e:	a8 95       	wdr

}
    4760:	08 95       	ret

00004762 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    4762:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>
MCUSR &= ~(1<<WDRF);
    4766:	84 b7       	in	r24, 0x34	; 52
    4768:	87 7f       	andi	r24, 0xF7	; 247
    476a:	84 bf       	out	0x34, r24	; 52
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    476c:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
MCUSR &= ~(1<<WDRF);
nrk_watchdog_reset();
WDTCSR |= (1<<WDCE) | (1<<WDE);
    476e:	e0 e6       	ldi	r30, 0x60	; 96
    4770:	f0 e0       	ldi	r31, 0x00	; 0
    4772:	80 81       	ld	r24, Z
    4774:	88 61       	ori	r24, 0x18	; 24
    4776:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    4778:	8d e0       	ldi	r24, 0x0D	; 13
    477a:	80 83       	st	Z, r24
nrk_int_enable();
    477c:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>

}
    4780:	08 95       	ret

00004782 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    4782:	0e 94 74 11 	call	0x22e8	; 0x22e8 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4786:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4788:	84 b7       	in	r24, 0x34	; 52
    478a:	87 7f       	andi	r24, 0xF7	; 247
    478c:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    478e:	e0 e6       	ldi	r30, 0x60	; 96
    4790:	f0 e0       	ldi	r31, 0x00	; 0
    4792:	80 81       	ld	r24, Z
    4794:	88 61       	ori	r24, 0x18	; 24
    4796:	80 83       	st	Z, r24
WDTCSR = 0;
    4798:	10 82       	st	Z, r1
nrk_int_enable();
    479a:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>
}
    479e:	08 95       	ret

000047a0 <nrk_battery_save>:
        nrk_led_clr(2);
        nrk_led_clr(3);
        SET_VREG_INACTIVE();
        nrk_sleep();
#endif
}
    47a0:	08 95       	ret

000047a2 <nrk_sleep>:

void nrk_sleep()
{

    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    47a2:	83 b7       	in	r24, 0x33	; 51
    47a4:	81 7f       	andi	r24, 0xF1	; 241
    47a6:	86 60       	ori	r24, 0x06	; 6
    47a8:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    47aa:	83 b7       	in	r24, 0x33	; 51
    47ac:	81 60       	ori	r24, 0x01	; 1
    47ae:	83 bf       	out	0x33, r24	; 51
    47b0:	88 95       	sleep
    47b2:	83 b7       	in	r24, 0x33	; 51
    47b4:	8e 7f       	andi	r24, 0xFE	; 254
    47b6:	83 bf       	out	0x33, r24	; 51

}
    47b8:	08 95       	ret

000047ba <nrk_idle>:

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    47ba:	83 b7       	in	r24, 0x33	; 51
    47bc:	81 7f       	andi	r24, 0xF1	; 241
    47be:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    47c0:	83 b7       	in	r24, 0x33	; 51
    47c2:	81 60       	ori	r24, 0x01	; 1
    47c4:	83 bf       	out	0x33, r24	; 51
    47c6:	88 95       	sleep
    47c8:	83 b7       	in	r24, 0x33	; 51
    47ca:	8e 7f       	andi	r24, 0xFE	; 254
    47cc:	83 bf       	out	0x33, r24	; 51

}
    47ce:	08 95       	ret

000047d0 <nrk_task_set_entry_function>:

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    47d0:	fc 01       	movw	r30, r24
    47d2:	76 83       	std	Z+6, r23	; 0x06
    47d4:	65 83       	std	Z+5, r22	; 0x05
}
    47d6:	08 95       	ret

000047d8 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    47d8:	25 e5       	ldi	r18, 0x55	; 85
    47da:	fa 01       	movw	r30, r20
    47dc:	20 83       	st	Z, r18
    stk    = (unsigned int *)ptos;          /* Load stack pointer */
    47de:	fb 01       	movw	r30, r22
    *(--stk) = 0x4748;   // G H                      
    *(--stk) = 0x4546;   // E F                    
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    47e0:	32 97       	sbiw	r30, 0x02	; 2
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    47e2:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    47e4:	81 83       	std	Z+1, r24	; 0x01
	
    *(--stk) = 0;
    47e6:	12 92       	st	-Z, r1
    47e8:	12 92       	st	-Z, r1
    *(--stk) = 0;       
    47ea:	12 92       	st	-Z, r1
    47ec:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    47ee:	12 92       	st	-Z, r1
    47f0:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    47f2:	12 92       	st	-Z, r1
    47f4:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    47f6:	12 92       	st	-Z, r1
    47f8:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    47fa:	12 92       	st	-Z, r1
    47fc:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    47fe:	12 92       	st	-Z, r1
    4800:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4802:	12 92       	st	-Z, r1
    4804:	12 92       	st	-Z, r1

    *(--stk) = 0; 
    4806:	12 92       	st	-Z, r1
    4808:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    480a:	12 92       	st	-Z, r1
    480c:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    480e:	12 92       	st	-Z, r1
    4810:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4812:	12 92       	st	-Z, r1
    4814:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4816:	12 92       	st	-Z, r1
    4818:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    481a:	12 92       	st	-Z, r1
    481c:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    481e:	12 92       	st	-Z, r1
    4820:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4822:	12 92       	st	-Z, r1
    4824:	12 92       	st	-Z, r1
    *(--stk) = 0;
    4826:	12 92       	st	-Z, r1
    4828:	12 92       	st	-Z, r1


    return ((void *)stk);
}
    482a:	cf 01       	movw	r24, r30
    482c:	08 95       	ret

0000482e <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    482e:	85 e5       	ldi	r24, 0x55	; 85
    4830:	80 93 7e 21 	sts	0x217E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    4834:	ee ef       	ldi	r30, 0xFE	; 254
    4836:	f1 e2       	ldi	r31, 0x21	; 33
    4838:	f0 93 fe 03 	sts	0x03FE, r31
    483c:	e0 93 fd 03 	sts	0x03FD, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4840:	8d e7       	ldi	r24, 0x7D	; 125
    4842:	91 e1       	ldi	r25, 0x11	; 17
    4844:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4846:	80 93 ff 21 	sts	0x21FF, r24

}
    484a:	08 95       	ret

0000484c <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    484c:	8d e7       	ldi	r24, 0x7D	; 125
    484e:	91 e1       	ldi	r25, 0x11	; 17
    4850:	90 93 fe 21 	sts	0x21FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4854:	80 93 ff 21 	sts	0x21FF, r24
}
    4858:	08 95       	ret

0000485a <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    485a:	0e 94 76 20 	call	0x40ec	; 0x40ec <_nrk_setup_timer>
  nrk_int_enable();  
    485e:	0e 94 76 11 	call	0x22ec	; 0x22ec <nrk_int_enable>
	
}
    4862:	08 95       	ret

00004864 <nrk_task_set_stk>:
{
task->task=func;
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    4864:	ef 92       	push	r14
    4866:	ff 92       	push	r15
    4868:	0f 93       	push	r16
    486a:	1f 93       	push	r17
    486c:	cf 93       	push	r28
    486e:	df 93       	push	r29
    4870:	ec 01       	movw	r28, r24
    4872:	8b 01       	movw	r16, r22
    4874:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4876:	40 32       	cpi	r20, 0x20	; 32
    4878:	51 05       	cpc	r21, r1
    487a:	18 f4       	brcc	.+6      	; 0x4882 <nrk_task_set_stk+0x1e>
    487c:	81 e1       	ldi	r24, 0x11	; 17
    487e:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4882:	08 94       	sec
    4884:	e1 08       	sbc	r14, r1
    4886:	f1 08       	sbc	r15, r1
    4888:	e0 0e       	add	r14, r16
    488a:	f1 1e       	adc	r15, r17
    488c:	fa 82       	std	Y+2, r15	; 0x02
    488e:	e9 82       	std	Y+1, r14	; 0x01
task->Pbos = (void *) &stk_base[0];
    4890:	1c 83       	std	Y+4, r17	; 0x04
    4892:	0b 83       	std	Y+3, r16	; 0x03

}
    4894:	df 91       	pop	r29
    4896:	cf 91       	pop	r28
    4898:	1f 91       	pop	r17
    489a:	0f 91       	pop	r16
    489c:	ff 90       	pop	r15
    489e:	ef 90       	pop	r14
    48a0:	08 95       	ret

000048a2 <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    48a2:	a0 91 6e 05 	lds	r26, 0x056E
	lds r27,nrk_high_ready_TCB+1
    48a6:	b0 91 6f 05 	lds	r27, 0x056F

    	;x points to &OSTCB[x]
    
	ld r28,x+
    48aa:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    48ac:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    48ae:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    48b0:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    48b2:	ff 91       	pop	r31
	pop r30
    48b4:	ef 91       	pop	r30
	pop r29
    48b6:	df 91       	pop	r29
	pop r28
    48b8:	cf 91       	pop	r28
	pop r27
    48ba:	bf 91       	pop	r27
	pop r26
    48bc:	af 91       	pop	r26
	pop r25
    48be:	9f 91       	pop	r25
	pop r24			
    48c0:	8f 91       	pop	r24
	pop r23
    48c2:	7f 91       	pop	r23
	pop r22
    48c4:	6f 91       	pop	r22
	pop r21
    48c6:	5f 91       	pop	r21
	pop r20	
    48c8:	4f 91       	pop	r20
	pop r19
    48ca:	3f 91       	pop	r19
	pop r18	
    48cc:	2f 91       	pop	r18
	pop r17
    48ce:	1f 91       	pop	r17
	pop r16
    48d0:	0f 91       	pop	r16
	pop r15
    48d2:	ff 90       	pop	r15
	pop r14
    48d4:	ef 90       	pop	r14
	pop r13
    48d6:	df 90       	pop	r13
	pop r12
    48d8:	cf 90       	pop	r12
	pop r11
    48da:	bf 90       	pop	r11
	pop r10
    48dc:	af 90       	pop	r10
	pop r9
    48de:	9f 90       	pop	r9
	pop r8
    48e0:	8f 90       	pop	r8
	pop r7
    48e2:	7f 90       	pop	r7
	pop r6
    48e4:	6f 90       	pop	r6
	pop r5
    48e6:	5f 90       	pop	r5
	pop r4
    48e8:	4f 90       	pop	r4
	pop r3
    48ea:	3f 90       	pop	r3
	pop r2
    48ec:	2f 90       	pop	r2
	pop r1
    48ee:	1f 90       	pop	r1
	pop r0
    48f0:	0f 90       	pop	r0
	out __SREG__, r0
    48f2:	0f be       	out	0x3f, r0	; 63
	pop r0	
    48f4:	0f 90       	pop	r0
	   
    	reti 
    48f6:	18 95       	reti

000048f8 <vfprintf>:
    48f8:	6f 92       	push	r6
    48fa:	7f 92       	push	r7
    48fc:	8f 92       	push	r8
    48fe:	9f 92       	push	r9
    4900:	af 92       	push	r10
    4902:	bf 92       	push	r11
    4904:	cf 92       	push	r12
    4906:	df 92       	push	r13
    4908:	ef 92       	push	r14
    490a:	ff 92       	push	r15
    490c:	0f 93       	push	r16
    490e:	1f 93       	push	r17
    4910:	df 93       	push	r29
    4912:	cf 93       	push	r28
    4914:	cd b7       	in	r28, 0x3d	; 61
    4916:	de b7       	in	r29, 0x3e	; 62
    4918:	2d 97       	sbiw	r28, 0x0d	; 13
    491a:	0f b6       	in	r0, 0x3f	; 63
    491c:	f8 94       	cli
    491e:	de bf       	out	0x3e, r29	; 62
    4920:	0f be       	out	0x3f, r0	; 63
    4922:	cd bf       	out	0x3d, r28	; 61
    4924:	6c 01       	movw	r12, r24
    4926:	4b 01       	movw	r8, r22
    4928:	8a 01       	movw	r16, r20
    492a:	fc 01       	movw	r30, r24
    492c:	17 82       	std	Z+7, r1	; 0x07
    492e:	16 82       	std	Z+6, r1	; 0x06
    4930:	83 81       	ldd	r24, Z+3	; 0x03
    4932:	81 fd       	sbrc	r24, 1
    4934:	06 c0       	rjmp	.+12     	; 0x4942 <vfprintf+0x4a>
    4936:	2f ef       	ldi	r18, 0xFF	; 255
    4938:	3f ef       	ldi	r19, 0xFF	; 255
    493a:	0e c1       	rjmp	.+540    	; 0x4b58 <vfprintf+0x260>
    493c:	0e 5f       	subi	r16, 0xFE	; 254
    493e:	1f 4f       	sbci	r17, 0xFF	; 255
    4940:	04 c0       	rjmp	.+8      	; 0x494a <vfprintf+0x52>
    4942:	5e 01       	movw	r10, r28
    4944:	08 94       	sec
    4946:	a1 1c       	adc	r10, r1
    4948:	b1 1c       	adc	r11, r1
    494a:	f6 01       	movw	r30, r12
    494c:	f3 80       	ldd	r15, Z+3	; 0x03
    494e:	f4 01       	movw	r30, r8
    4950:	f3 fc       	sbrc	r15, 3
    4952:	85 91       	lpm	r24, Z+
    4954:	f3 fe       	sbrs	r15, 3
    4956:	81 91       	ld	r24, Z+
    4958:	4f 01       	movw	r8, r30
    495a:	88 23       	and	r24, r24
    495c:	09 f4       	brne	.+2      	; 0x4960 <vfprintf+0x68>
    495e:	f9 c0       	rjmp	.+498    	; 0x4b52 <vfprintf+0x25a>
    4960:	85 32       	cpi	r24, 0x25	; 37
    4962:	51 f4       	brne	.+20     	; 0x4978 <vfprintf+0x80>
    4964:	f3 fc       	sbrc	r15, 3
    4966:	25 91       	lpm	r18, Z+
    4968:	f3 fe       	sbrs	r15, 3
    496a:	21 91       	ld	r18, Z+
    496c:	4f 01       	movw	r8, r30
    496e:	25 32       	cpi	r18, 0x25	; 37
    4970:	11 f0       	breq	.+4      	; 0x4976 <vfprintf+0x7e>
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	1f c0       	rjmp	.+62     	; 0x49b4 <vfprintf+0xbc>
    4976:	85 e2       	ldi	r24, 0x25	; 37
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	32 c0       	rjmp	.+100    	; 0x49e0 <vfprintf+0xe8>
    497c:	22 23       	and	r18, r18
    497e:	09 f4       	brne	.+2      	; 0x4982 <vfprintf+0x8a>
    4980:	e8 c0       	rjmp	.+464    	; 0x4b52 <vfprintf+0x25a>
    4982:	86 e0       	ldi	r24, 0x06	; 6
    4984:	93 e0       	ldi	r25, 0x03	; 3
    4986:	62 2f       	mov	r22, r18
    4988:	70 e0       	ldi	r23, 0x00	; 0
    498a:	2c 87       	std	Y+12, r18	; 0x0c
    498c:	3d 87       	std	Y+13, r19	; 0x0d
    498e:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <strchr_P>
    4992:	2c 85       	ldd	r18, Y+12	; 0x0c
    4994:	3d 85       	ldd	r19, Y+13	; 0x0d
    4996:	00 97       	sbiw	r24, 0x00	; 0
    4998:	39 f4       	brne	.+14     	; 0x49a8 <vfprintf+0xb0>
    499a:	23 32       	cpi	r18, 0x23	; 35
    499c:	11 f4       	brne	.+4      	; 0x49a2 <vfprintf+0xaa>
    499e:	30 61       	ori	r19, 0x10	; 16
    49a0:	03 c0       	rjmp	.+6      	; 0x49a8 <vfprintf+0xb0>
    49a2:	2c 36       	cpi	r18, 0x6C	; 108
    49a4:	61 f4       	brne	.+24     	; 0x49be <vfprintf+0xc6>
    49a6:	30 68       	ori	r19, 0x80	; 128
    49a8:	f4 01       	movw	r30, r8
    49aa:	f3 fc       	sbrc	r15, 3
    49ac:	25 91       	lpm	r18, Z+
    49ae:	f3 fe       	sbrs	r15, 3
    49b0:	21 91       	ld	r18, Z+
    49b2:	4f 01       	movw	r8, r30
    49b4:	37 ff       	sbrs	r19, 7
    49b6:	e2 cf       	rjmp	.-60     	; 0x497c <vfprintf+0x84>
    49b8:	22 23       	and	r18, r18
    49ba:	09 f4       	brne	.+2      	; 0x49be <vfprintf+0xc6>
    49bc:	ca c0       	rjmp	.+404    	; 0x4b52 <vfprintf+0x25a>
    49be:	f3 2e       	mov	r15, r19
    49c0:	8f ef       	ldi	r24, 0xFF	; 255
    49c2:	92 e0       	ldi	r25, 0x02	; 2
    49c4:	62 2f       	mov	r22, r18
    49c6:	70 e0       	ldi	r23, 0x00	; 0
    49c8:	2c 87       	std	Y+12, r18	; 0x0c
    49ca:	3d 87       	std	Y+13, r19	; 0x0d
    49cc:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <strchr_P>
    49d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    49d2:	3f 2d       	mov	r19, r15
    49d4:	00 97       	sbiw	r24, 0x00	; 0
    49d6:	41 f0       	breq	.+16     	; 0x49e8 <vfprintf+0xf0>
    49d8:	0c 5f       	subi	r16, 0xFC	; 252
    49da:	1f 4f       	sbci	r17, 0xFF	; 255
    49dc:	8f e3       	ldi	r24, 0x3F	; 63
    49de:	90 e0       	ldi	r25, 0x00	; 0
    49e0:	b6 01       	movw	r22, r12
    49e2:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <fputc>
    49e6:	b1 cf       	rjmp	.-158    	; 0x494a <vfprintf+0x52>
    49e8:	23 36       	cpi	r18, 0x63	; 99
    49ea:	29 f0       	breq	.+10     	; 0x49f6 <vfprintf+0xfe>
    49ec:	23 37       	cpi	r18, 0x73	; 115
    49ee:	91 f0       	breq	.+36     	; 0x4a14 <vfprintf+0x11c>
    49f0:	23 35       	cpi	r18, 0x53	; 83
    49f2:	09 f5       	brne	.+66     	; 0x4a36 <vfprintf+0x13e>
    49f4:	0d c0       	rjmp	.+26     	; 0x4a10 <vfprintf+0x118>
    49f6:	32 e0       	ldi	r19, 0x02	; 2
    49f8:	e3 2e       	mov	r14, r19
    49fa:	f1 2c       	mov	r15, r1
    49fc:	e0 0e       	add	r14, r16
    49fe:	f1 1e       	adc	r15, r17
    4a00:	f8 01       	movw	r30, r16
    4a02:	80 81       	ld	r24, Z
    4a04:	91 81       	ldd	r25, Z+1	; 0x01
    4a06:	b6 01       	movw	r22, r12
    4a08:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <fputc>
    4a0c:	87 01       	movw	r16, r14
    4a0e:	9d cf       	rjmp	.-198    	; 0x494a <vfprintf+0x52>
    4a10:	f1 e0       	ldi	r31, 0x01	; 1
    4a12:	ff 2a       	or	r15, r31
    4a14:	f8 01       	movw	r30, r16
    4a16:	60 80       	ld	r6, Z
    4a18:	71 80       	ldd	r7, Z+1	; 0x01
    4a1a:	04 c0       	rjmp	.+8      	; 0x4a24 <vfprintf+0x12c>
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	b6 01       	movw	r22, r12
    4a20:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <fputc>
    4a24:	f3 01       	movw	r30, r6
    4a26:	f0 fc       	sbrc	r15, 0
    4a28:	85 91       	lpm	r24, Z+
    4a2a:	f0 fe       	sbrs	r15, 0
    4a2c:	81 91       	ld	r24, Z+
    4a2e:	3f 01       	movw	r6, r30
    4a30:	88 23       	and	r24, r24
    4a32:	a1 f7       	brne	.-24     	; 0x4a1c <vfprintf+0x124>
    4a34:	83 cf       	rjmp	.-250    	; 0x493c <vfprintf+0x44>
    4a36:	24 36       	cpi	r18, 0x64	; 100
    4a38:	11 f0       	breq	.+4      	; 0x4a3e <vfprintf+0x146>
    4a3a:	29 36       	cpi	r18, 0x69	; 105
    4a3c:	29 f5       	brne	.+74     	; 0x4a88 <vfprintf+0x190>
    4a3e:	37 ff       	sbrs	r19, 7
    4a40:	08 c0       	rjmp	.+16     	; 0x4a52 <vfprintf+0x15a>
    4a42:	f8 01       	movw	r30, r16
    4a44:	60 81       	ld	r22, Z
    4a46:	71 81       	ldd	r23, Z+1	; 0x01
    4a48:	82 81       	ldd	r24, Z+2	; 0x02
    4a4a:	93 81       	ldd	r25, Z+3	; 0x03
    4a4c:	0c 5f       	subi	r16, 0xFC	; 252
    4a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a50:	09 c0       	rjmp	.+18     	; 0x4a64 <vfprintf+0x16c>
    4a52:	f8 01       	movw	r30, r16
    4a54:	60 81       	ld	r22, Z
    4a56:	71 81       	ldd	r23, Z+1	; 0x01
    4a58:	88 27       	eor	r24, r24
    4a5a:	77 fd       	sbrc	r23, 7
    4a5c:	80 95       	com	r24
    4a5e:	98 2f       	mov	r25, r24
    4a60:	0e 5f       	subi	r16, 0xFE	; 254
    4a62:	1f 4f       	sbci	r17, 0xFF	; 255
    4a64:	2f ee       	ldi	r18, 0xEF	; 239
    4a66:	f2 2e       	mov	r15, r18
    4a68:	f3 22       	and	r15, r19
    4a6a:	97 ff       	sbrs	r25, 7
    4a6c:	09 c0       	rjmp	.+18     	; 0x4a80 <vfprintf+0x188>
    4a6e:	90 95       	com	r25
    4a70:	80 95       	com	r24
    4a72:	70 95       	com	r23
    4a74:	61 95       	neg	r22
    4a76:	7f 4f       	sbci	r23, 0xFF	; 255
    4a78:	8f 4f       	sbci	r24, 0xFF	; 255
    4a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a7c:	f0 e4       	ldi	r31, 0x40	; 64
    4a7e:	ff 2a       	or	r15, r31
    4a80:	a5 01       	movw	r20, r10
    4a82:	2a e0       	ldi	r18, 0x0A	; 10
    4a84:	30 e0       	ldi	r19, 0x00	; 0
    4a86:	35 c0       	rjmp	.+106    	; 0x4af2 <vfprintf+0x1fa>
    4a88:	20 37       	cpi	r18, 0x70	; 112
    4a8a:	b1 f0       	breq	.+44     	; 0x4ab8 <vfprintf+0x1c0>
    4a8c:	21 37       	cpi	r18, 0x71	; 113
    4a8e:	30 f4       	brcc	.+12     	; 0x4a9c <vfprintf+0x1a4>
    4a90:	28 35       	cpi	r18, 0x58	; 88
    4a92:	c9 f0       	breq	.+50     	; 0x4ac6 <vfprintf+0x1ce>
    4a94:	2f 36       	cpi	r18, 0x6F	; 111
    4a96:	09 f0       	breq	.+2      	; 0x4a9a <vfprintf+0x1a2>
    4a98:	5c c0       	rjmp	.+184    	; 0x4b52 <vfprintf+0x25a>
    4a9a:	06 c0       	rjmp	.+12     	; 0x4aa8 <vfprintf+0x1b0>
    4a9c:	25 37       	cpi	r18, 0x75	; 117
    4a9e:	39 f0       	breq	.+14     	; 0x4aae <vfprintf+0x1b6>
    4aa0:	28 37       	cpi	r18, 0x78	; 120
    4aa2:	09 f0       	breq	.+2      	; 0x4aa6 <vfprintf+0x1ae>
    4aa4:	56 c0       	rjmp	.+172    	; 0x4b52 <vfprintf+0x25a>
    4aa6:	0a c0       	rjmp	.+20     	; 0x4abc <vfprintf+0x1c4>
    4aa8:	28 e0       	ldi	r18, 0x08	; 8
    4aaa:	30 e0       	ldi	r19, 0x00	; 0
    4aac:	10 c0       	rjmp	.+32     	; 0x4ace <vfprintf+0x1d6>
    4aae:	2f ee       	ldi	r18, 0xEF	; 239
    4ab0:	f2 22       	and	r15, r18
    4ab2:	2a e0       	ldi	r18, 0x0A	; 10
    4ab4:	30 e0       	ldi	r19, 0x00	; 0
    4ab6:	0b c0       	rjmp	.+22     	; 0x4ace <vfprintf+0x1d6>
    4ab8:	80 e1       	ldi	r24, 0x10	; 16
    4aba:	f8 2a       	or	r15, r24
    4abc:	e4 e2       	ldi	r30, 0x24	; 36
    4abe:	fe 2a       	or	r15, r30
    4ac0:	20 e1       	ldi	r18, 0x10	; 16
    4ac2:	30 e0       	ldi	r19, 0x00	; 0
    4ac4:	04 c0       	rjmp	.+8      	; 0x4ace <vfprintf+0x1d6>
    4ac6:	f4 e0       	ldi	r31, 0x04	; 4
    4ac8:	ff 2a       	or	r15, r31
    4aca:	20 e1       	ldi	r18, 0x10	; 16
    4acc:	32 e0       	ldi	r19, 0x02	; 2
    4ace:	f7 fe       	sbrs	r15, 7
    4ad0:	08 c0       	rjmp	.+16     	; 0x4ae2 <vfprintf+0x1ea>
    4ad2:	f8 01       	movw	r30, r16
    4ad4:	60 81       	ld	r22, Z
    4ad6:	71 81       	ldd	r23, Z+1	; 0x01
    4ad8:	82 81       	ldd	r24, Z+2	; 0x02
    4ada:	93 81       	ldd	r25, Z+3	; 0x03
    4adc:	0c 5f       	subi	r16, 0xFC	; 252
    4ade:	1f 4f       	sbci	r17, 0xFF	; 255
    4ae0:	07 c0       	rjmp	.+14     	; 0x4af0 <vfprintf+0x1f8>
    4ae2:	f8 01       	movw	r30, r16
    4ae4:	60 81       	ld	r22, Z
    4ae6:	71 81       	ldd	r23, Z+1	; 0x01
    4ae8:	80 e0       	ldi	r24, 0x00	; 0
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	0e 5f       	subi	r16, 0xFE	; 254
    4aee:	1f 4f       	sbci	r17, 0xFF	; 255
    4af0:	a5 01       	movw	r20, r10
    4af2:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <__ultoa_invert>
    4af6:	e8 2e       	mov	r14, r24
    4af8:	ea 18       	sub	r14, r10
    4afa:	6f 2c       	mov	r6, r15
    4afc:	77 24       	eor	r7, r7
    4afe:	f6 fe       	sbrs	r15, 6
    4b00:	05 c0       	rjmp	.+10     	; 0x4b0c <vfprintf+0x214>
    4b02:	8d e2       	ldi	r24, 0x2D	; 45
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	b6 01       	movw	r22, r12
    4b08:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <fputc>
    4b0c:	64 fe       	sbrs	r6, 4
    4b0e:	15 c0       	rjmp	.+42     	; 0x4b3a <vfprintf+0x242>
    4b10:	fe 01       	movw	r30, r28
    4b12:	ee 0d       	add	r30, r14
    4b14:	f1 1d       	adc	r31, r1
    4b16:	80 81       	ld	r24, Z
    4b18:	80 33       	cpi	r24, 0x30	; 48
    4b1a:	79 f0       	breq	.+30     	; 0x4b3a <vfprintf+0x242>
    4b1c:	80 e3       	ldi	r24, 0x30	; 48
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	b6 01       	movw	r22, r12
    4b22:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <fputc>
    4b26:	62 fe       	sbrs	r6, 2
    4b28:	08 c0       	rjmp	.+16     	; 0x4b3a <vfprintf+0x242>
    4b2a:	c3 01       	movw	r24, r6
    4b2c:	80 72       	andi	r24, 0x20	; 32
    4b2e:	90 70       	andi	r25, 0x00	; 0
    4b30:	88 5a       	subi	r24, 0xA8	; 168
    4b32:	9f 4f       	sbci	r25, 0xFF	; 255
    4b34:	b6 01       	movw	r22, r12
    4b36:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <fputc>
    4b3a:	ea 94       	dec	r14
    4b3c:	f5 01       	movw	r30, r10
    4b3e:	ee 0d       	add	r30, r14
    4b40:	f1 1d       	adc	r31, r1
    4b42:	80 81       	ld	r24, Z
    4b44:	90 e0       	ldi	r25, 0x00	; 0
    4b46:	b6 01       	movw	r22, r12
    4b48:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <fputc>
    4b4c:	ee 20       	and	r14, r14
    4b4e:	a9 f7       	brne	.-22     	; 0x4b3a <vfprintf+0x242>
    4b50:	fc ce       	rjmp	.-520    	; 0x494a <vfprintf+0x52>
    4b52:	f6 01       	movw	r30, r12
    4b54:	26 81       	ldd	r18, Z+6	; 0x06
    4b56:	37 81       	ldd	r19, Z+7	; 0x07
    4b58:	c9 01       	movw	r24, r18
    4b5a:	2d 96       	adiw	r28, 0x0d	; 13
    4b5c:	0f b6       	in	r0, 0x3f	; 63
    4b5e:	f8 94       	cli
    4b60:	de bf       	out	0x3e, r29	; 62
    4b62:	0f be       	out	0x3f, r0	; 63
    4b64:	cd bf       	out	0x3d, r28	; 61
    4b66:	cf 91       	pop	r28
    4b68:	df 91       	pop	r29
    4b6a:	1f 91       	pop	r17
    4b6c:	0f 91       	pop	r16
    4b6e:	ff 90       	pop	r15
    4b70:	ef 90       	pop	r14
    4b72:	df 90       	pop	r13
    4b74:	cf 90       	pop	r12
    4b76:	bf 90       	pop	r11
    4b78:	af 90       	pop	r10
    4b7a:	9f 90       	pop	r9
    4b7c:	8f 90       	pop	r8
    4b7e:	7f 90       	pop	r7
    4b80:	6f 90       	pop	r6
    4b82:	08 95       	ret

00004b84 <__mulsi3>:
    4b84:	62 9f       	mul	r22, r18
    4b86:	d0 01       	movw	r26, r0
    4b88:	73 9f       	mul	r23, r19
    4b8a:	f0 01       	movw	r30, r0
    4b8c:	82 9f       	mul	r24, r18
    4b8e:	e0 0d       	add	r30, r0
    4b90:	f1 1d       	adc	r31, r1
    4b92:	64 9f       	mul	r22, r20
    4b94:	e0 0d       	add	r30, r0
    4b96:	f1 1d       	adc	r31, r1
    4b98:	92 9f       	mul	r25, r18
    4b9a:	f0 0d       	add	r31, r0
    4b9c:	83 9f       	mul	r24, r19
    4b9e:	f0 0d       	add	r31, r0
    4ba0:	74 9f       	mul	r23, r20
    4ba2:	f0 0d       	add	r31, r0
    4ba4:	65 9f       	mul	r22, r21
    4ba6:	f0 0d       	add	r31, r0
    4ba8:	99 27       	eor	r25, r25
    4baa:	72 9f       	mul	r23, r18
    4bac:	b0 0d       	add	r27, r0
    4bae:	e1 1d       	adc	r30, r1
    4bb0:	f9 1f       	adc	r31, r25
    4bb2:	63 9f       	mul	r22, r19
    4bb4:	b0 0d       	add	r27, r0
    4bb6:	e1 1d       	adc	r30, r1
    4bb8:	f9 1f       	adc	r31, r25
    4bba:	bd 01       	movw	r22, r26
    4bbc:	cf 01       	movw	r24, r30
    4bbe:	11 24       	eor	r1, r1
    4bc0:	08 95       	ret

00004bc2 <__udivmodhi4>:
    4bc2:	aa 1b       	sub	r26, r26
    4bc4:	bb 1b       	sub	r27, r27
    4bc6:	51 e1       	ldi	r21, 0x11	; 17
    4bc8:	07 c0       	rjmp	.+14     	; 0x4bd8 <__udivmodhi4_ep>

00004bca <__udivmodhi4_loop>:
    4bca:	aa 1f       	adc	r26, r26
    4bcc:	bb 1f       	adc	r27, r27
    4bce:	a6 17       	cp	r26, r22
    4bd0:	b7 07       	cpc	r27, r23
    4bd2:	10 f0       	brcs	.+4      	; 0x4bd8 <__udivmodhi4_ep>
    4bd4:	a6 1b       	sub	r26, r22
    4bd6:	b7 0b       	sbc	r27, r23

00004bd8 <__udivmodhi4_ep>:
    4bd8:	88 1f       	adc	r24, r24
    4bda:	99 1f       	adc	r25, r25
    4bdc:	5a 95       	dec	r21
    4bde:	a9 f7       	brne	.-22     	; 0x4bca <__udivmodhi4_loop>
    4be0:	80 95       	com	r24
    4be2:	90 95       	com	r25
    4be4:	bc 01       	movw	r22, r24
    4be6:	cd 01       	movw	r24, r26
    4be8:	08 95       	ret

00004bea <__udivmodsi4>:
    4bea:	a1 e2       	ldi	r26, 0x21	; 33
    4bec:	1a 2e       	mov	r1, r26
    4bee:	aa 1b       	sub	r26, r26
    4bf0:	bb 1b       	sub	r27, r27
    4bf2:	fd 01       	movw	r30, r26
    4bf4:	0d c0       	rjmp	.+26     	; 0x4c10 <__udivmodsi4_ep>

00004bf6 <__udivmodsi4_loop>:
    4bf6:	aa 1f       	adc	r26, r26
    4bf8:	bb 1f       	adc	r27, r27
    4bfa:	ee 1f       	adc	r30, r30
    4bfc:	ff 1f       	adc	r31, r31
    4bfe:	a2 17       	cp	r26, r18
    4c00:	b3 07       	cpc	r27, r19
    4c02:	e4 07       	cpc	r30, r20
    4c04:	f5 07       	cpc	r31, r21
    4c06:	20 f0       	brcs	.+8      	; 0x4c10 <__udivmodsi4_ep>
    4c08:	a2 1b       	sub	r26, r18
    4c0a:	b3 0b       	sbc	r27, r19
    4c0c:	e4 0b       	sbc	r30, r20
    4c0e:	f5 0b       	sbc	r31, r21

00004c10 <__udivmodsi4_ep>:
    4c10:	66 1f       	adc	r22, r22
    4c12:	77 1f       	adc	r23, r23
    4c14:	88 1f       	adc	r24, r24
    4c16:	99 1f       	adc	r25, r25
    4c18:	1a 94       	dec	r1
    4c1a:	69 f7       	brne	.-38     	; 0x4bf6 <__udivmodsi4_loop>
    4c1c:	60 95       	com	r22
    4c1e:	70 95       	com	r23
    4c20:	80 95       	com	r24
    4c22:	90 95       	com	r25
    4c24:	9b 01       	movw	r18, r22
    4c26:	ac 01       	movw	r20, r24
    4c28:	bd 01       	movw	r22, r26
    4c2a:	cf 01       	movw	r24, r30
    4c2c:	08 95       	ret

00004c2e <strchr_P>:
    4c2e:	fc 01       	movw	r30, r24
    4c30:	05 90       	lpm	r0, Z+
    4c32:	06 16       	cp	r0, r22
    4c34:	21 f0       	breq	.+8      	; 0x4c3e <strchr_P+0x10>
    4c36:	00 20       	and	r0, r0
    4c38:	d9 f7       	brne	.-10     	; 0x4c30 <strchr_P+0x2>
    4c3a:	c0 01       	movw	r24, r0
    4c3c:	08 95       	ret
    4c3e:	31 97       	sbiw	r30, 0x01	; 1
    4c40:	cf 01       	movw	r24, r30
    4c42:	08 95       	ret

00004c44 <fdevopen>:
    4c44:	0f 93       	push	r16
    4c46:	1f 93       	push	r17
    4c48:	cf 93       	push	r28
    4c4a:	df 93       	push	r29
    4c4c:	ec 01       	movw	r28, r24
    4c4e:	8b 01       	movw	r16, r22
    4c50:	00 97       	sbiw	r24, 0x00	; 0
    4c52:	31 f4       	brne	.+12     	; 0x4c60 <fdevopen+0x1c>
    4c54:	61 15       	cp	r22, r1
    4c56:	71 05       	cpc	r23, r1
    4c58:	19 f4       	brne	.+6      	; 0x4c60 <fdevopen+0x1c>
    4c5a:	20 e0       	ldi	r18, 0x00	; 0
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
    4c5e:	38 c0       	rjmp	.+112    	; 0x4cd0 <fdevopen+0x8c>
    4c60:	81 e0       	ldi	r24, 0x01	; 1
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	6e e0       	ldi	r22, 0x0E	; 14
    4c66:	70 e0       	ldi	r23, 0x00	; 0
    4c68:	0e 94 20 27 	call	0x4e40	; 0x4e40 <calloc>
    4c6c:	fc 01       	movw	r30, r24
    4c6e:	9c 01       	movw	r18, r24
    4c70:	00 97       	sbiw	r24, 0x00	; 0
    4c72:	71 f1       	breq	.+92     	; 0x4cd0 <fdevopen+0x8c>
    4c74:	80 e8       	ldi	r24, 0x80	; 128
    4c76:	83 83       	std	Z+3, r24	; 0x03
    4c78:	01 15       	cp	r16, r1
    4c7a:	11 05       	cpc	r17, r1
    4c7c:	71 f0       	breq	.+28     	; 0x4c9a <fdevopen+0x56>
    4c7e:	13 87       	std	Z+11, r17	; 0x0b
    4c80:	02 87       	std	Z+10, r16	; 0x0a
    4c82:	81 e8       	ldi	r24, 0x81	; 129
    4c84:	83 83       	std	Z+3, r24	; 0x03
    4c86:	80 91 a6 05 	lds	r24, 0x05A6
    4c8a:	90 91 a7 05 	lds	r25, 0x05A7
    4c8e:	00 97       	sbiw	r24, 0x00	; 0
    4c90:	21 f4       	brne	.+8      	; 0x4c9a <fdevopen+0x56>
    4c92:	f0 93 a7 05 	sts	0x05A7, r31
    4c96:	e0 93 a6 05 	sts	0x05A6, r30
    4c9a:	20 97       	sbiw	r28, 0x00	; 0
    4c9c:	c9 f0       	breq	.+50     	; 0x4cd0 <fdevopen+0x8c>
    4c9e:	d1 87       	std	Z+9, r29	; 0x09
    4ca0:	c0 87       	std	Z+8, r28	; 0x08
    4ca2:	83 81       	ldd	r24, Z+3	; 0x03
    4ca4:	82 60       	ori	r24, 0x02	; 2
    4ca6:	83 83       	std	Z+3, r24	; 0x03
    4ca8:	80 91 a8 05 	lds	r24, 0x05A8
    4cac:	90 91 a9 05 	lds	r25, 0x05A9
    4cb0:	00 97       	sbiw	r24, 0x00	; 0
    4cb2:	71 f4       	brne	.+28     	; 0x4cd0 <fdevopen+0x8c>
    4cb4:	f0 93 a9 05 	sts	0x05A9, r31
    4cb8:	e0 93 a8 05 	sts	0x05A8, r30
    4cbc:	80 91 aa 05 	lds	r24, 0x05AA
    4cc0:	90 91 ab 05 	lds	r25, 0x05AB
    4cc4:	00 97       	sbiw	r24, 0x00	; 0
    4cc6:	21 f4       	brne	.+8      	; 0x4cd0 <fdevopen+0x8c>
    4cc8:	f0 93 ab 05 	sts	0x05AB, r31
    4ccc:	e0 93 aa 05 	sts	0x05AA, r30
    4cd0:	c9 01       	movw	r24, r18
    4cd2:	df 91       	pop	r29
    4cd4:	cf 91       	pop	r28
    4cd6:	1f 91       	pop	r17
    4cd8:	0f 91       	pop	r16
    4cda:	08 95       	ret

00004cdc <fputc>:
    4cdc:	0f 93       	push	r16
    4cde:	1f 93       	push	r17
    4ce0:	cf 93       	push	r28
    4ce2:	df 93       	push	r29
    4ce4:	8c 01       	movw	r16, r24
    4ce6:	eb 01       	movw	r28, r22
    4ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cea:	81 ff       	sbrs	r24, 1
    4cec:	1b c0       	rjmp	.+54     	; 0x4d24 <fputc+0x48>
    4cee:	82 ff       	sbrs	r24, 2
    4cf0:	0d c0       	rjmp	.+26     	; 0x4d0c <fputc+0x30>
    4cf2:	2e 81       	ldd	r18, Y+6	; 0x06
    4cf4:	3f 81       	ldd	r19, Y+7	; 0x07
    4cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    4cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    4cfa:	28 17       	cp	r18, r24
    4cfc:	39 07       	cpc	r19, r25
    4cfe:	64 f4       	brge	.+24     	; 0x4d18 <fputc+0x3c>
    4d00:	e8 81       	ld	r30, Y
    4d02:	f9 81       	ldd	r31, Y+1	; 0x01
    4d04:	01 93       	st	Z+, r16
    4d06:	f9 83       	std	Y+1, r31	; 0x01
    4d08:	e8 83       	st	Y, r30
    4d0a:	06 c0       	rjmp	.+12     	; 0x4d18 <fputc+0x3c>
    4d0c:	e8 85       	ldd	r30, Y+8	; 0x08
    4d0e:	f9 85       	ldd	r31, Y+9	; 0x09
    4d10:	80 2f       	mov	r24, r16
    4d12:	09 95       	icall
    4d14:	00 97       	sbiw	r24, 0x00	; 0
    4d16:	31 f4       	brne	.+12     	; 0x4d24 <fputc+0x48>
    4d18:	8e 81       	ldd	r24, Y+6	; 0x06
    4d1a:	9f 81       	ldd	r25, Y+7	; 0x07
    4d1c:	01 96       	adiw	r24, 0x01	; 1
    4d1e:	9f 83       	std	Y+7, r25	; 0x07
    4d20:	8e 83       	std	Y+6, r24	; 0x06
    4d22:	02 c0       	rjmp	.+4      	; 0x4d28 <fputc+0x4c>
    4d24:	0f ef       	ldi	r16, 0xFF	; 255
    4d26:	1f ef       	ldi	r17, 0xFF	; 255
    4d28:	c8 01       	movw	r24, r16
    4d2a:	df 91       	pop	r29
    4d2c:	cf 91       	pop	r28
    4d2e:	1f 91       	pop	r17
    4d30:	0f 91       	pop	r16
    4d32:	08 95       	ret

00004d34 <printf>:
    4d34:	df 93       	push	r29
    4d36:	cf 93       	push	r28
    4d38:	cd b7       	in	r28, 0x3d	; 61
    4d3a:	de b7       	in	r29, 0x3e	; 62
    4d3c:	fe 01       	movw	r30, r28
    4d3e:	35 96       	adiw	r30, 0x05	; 5
    4d40:	61 91       	ld	r22, Z+
    4d42:	71 91       	ld	r23, Z+
    4d44:	80 91 a8 05 	lds	r24, 0x05A8
    4d48:	90 91 a9 05 	lds	r25, 0x05A9
    4d4c:	af 01       	movw	r20, r30
    4d4e:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <vfprintf>
    4d52:	cf 91       	pop	r28
    4d54:	df 91       	pop	r29
    4d56:	08 95       	ret

00004d58 <__ultoa_invert>:
    4d58:	fa 01       	movw	r30, r20
    4d5a:	aa 27       	eor	r26, r26
    4d5c:	28 30       	cpi	r18, 0x08	; 8
    4d5e:	51 f1       	breq	.+84     	; 0x4db4 <__ultoa_invert+0x5c>
    4d60:	20 31       	cpi	r18, 0x10	; 16
    4d62:	81 f1       	breq	.+96     	; 0x4dc4 <__ultoa_invert+0x6c>
    4d64:	e8 94       	clt
    4d66:	6f 93       	push	r22
    4d68:	6e 7f       	andi	r22, 0xFE	; 254
    4d6a:	6e 5f       	subi	r22, 0xFE	; 254
    4d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    4d70:	9f 4f       	sbci	r25, 0xFF	; 255
    4d72:	af 4f       	sbci	r26, 0xFF	; 255
    4d74:	b1 e0       	ldi	r27, 0x01	; 1
    4d76:	3e d0       	rcall	.+124    	; 0x4df4 <__ultoa_invert+0x9c>
    4d78:	b4 e0       	ldi	r27, 0x04	; 4
    4d7a:	3c d0       	rcall	.+120    	; 0x4df4 <__ultoa_invert+0x9c>
    4d7c:	67 0f       	add	r22, r23
    4d7e:	78 1f       	adc	r23, r24
    4d80:	89 1f       	adc	r24, r25
    4d82:	9a 1f       	adc	r25, r26
    4d84:	a1 1d       	adc	r26, r1
    4d86:	68 0f       	add	r22, r24
    4d88:	79 1f       	adc	r23, r25
    4d8a:	8a 1f       	adc	r24, r26
    4d8c:	91 1d       	adc	r25, r1
    4d8e:	a1 1d       	adc	r26, r1
    4d90:	6a 0f       	add	r22, r26
    4d92:	71 1d       	adc	r23, r1
    4d94:	81 1d       	adc	r24, r1
    4d96:	91 1d       	adc	r25, r1
    4d98:	a1 1d       	adc	r26, r1
    4d9a:	20 d0       	rcall	.+64     	; 0x4ddc <__ultoa_invert+0x84>
    4d9c:	09 f4       	brne	.+2      	; 0x4da0 <__ultoa_invert+0x48>
    4d9e:	68 94       	set
    4da0:	3f 91       	pop	r19
    4da2:	2a e0       	ldi	r18, 0x0A	; 10
    4da4:	26 9f       	mul	r18, r22
    4da6:	11 24       	eor	r1, r1
    4da8:	30 19       	sub	r19, r0
    4daa:	30 5d       	subi	r19, 0xD0	; 208
    4dac:	31 93       	st	Z+, r19
    4dae:	de f6       	brtc	.-74     	; 0x4d66 <__ultoa_invert+0xe>
    4db0:	cf 01       	movw	r24, r30
    4db2:	08 95       	ret
    4db4:	46 2f       	mov	r20, r22
    4db6:	47 70       	andi	r20, 0x07	; 7
    4db8:	40 5d       	subi	r20, 0xD0	; 208
    4dba:	41 93       	st	Z+, r20
    4dbc:	b3 e0       	ldi	r27, 0x03	; 3
    4dbe:	0f d0       	rcall	.+30     	; 0x4dde <__ultoa_invert+0x86>
    4dc0:	c9 f7       	brne	.-14     	; 0x4db4 <__ultoa_invert+0x5c>
    4dc2:	f6 cf       	rjmp	.-20     	; 0x4db0 <__ultoa_invert+0x58>
    4dc4:	46 2f       	mov	r20, r22
    4dc6:	4f 70       	andi	r20, 0x0F	; 15
    4dc8:	40 5d       	subi	r20, 0xD0	; 208
    4dca:	4a 33       	cpi	r20, 0x3A	; 58
    4dcc:	18 f0       	brcs	.+6      	; 0x4dd4 <__ultoa_invert+0x7c>
    4dce:	49 5d       	subi	r20, 0xD9	; 217
    4dd0:	31 fd       	sbrc	r19, 1
    4dd2:	40 52       	subi	r20, 0x20	; 32
    4dd4:	41 93       	st	Z+, r20
    4dd6:	02 d0       	rcall	.+4      	; 0x4ddc <__ultoa_invert+0x84>
    4dd8:	a9 f7       	brne	.-22     	; 0x4dc4 <__ultoa_invert+0x6c>
    4dda:	ea cf       	rjmp	.-44     	; 0x4db0 <__ultoa_invert+0x58>
    4ddc:	b4 e0       	ldi	r27, 0x04	; 4
    4dde:	a6 95       	lsr	r26
    4de0:	97 95       	ror	r25
    4de2:	87 95       	ror	r24
    4de4:	77 95       	ror	r23
    4de6:	67 95       	ror	r22
    4de8:	ba 95       	dec	r27
    4dea:	c9 f7       	brne	.-14     	; 0x4dde <__ultoa_invert+0x86>
    4dec:	00 97       	sbiw	r24, 0x00	; 0
    4dee:	61 05       	cpc	r22, r1
    4df0:	71 05       	cpc	r23, r1
    4df2:	08 95       	ret
    4df4:	9b 01       	movw	r18, r22
    4df6:	ac 01       	movw	r20, r24
    4df8:	0a 2e       	mov	r0, r26
    4dfa:	06 94       	lsr	r0
    4dfc:	57 95       	ror	r21
    4dfe:	47 95       	ror	r20
    4e00:	37 95       	ror	r19
    4e02:	27 95       	ror	r18
    4e04:	ba 95       	dec	r27
    4e06:	c9 f7       	brne	.-14     	; 0x4dfa <__ultoa_invert+0xa2>
    4e08:	62 0f       	add	r22, r18
    4e0a:	73 1f       	adc	r23, r19
    4e0c:	84 1f       	adc	r24, r20
    4e0e:	95 1f       	adc	r25, r21
    4e10:	a0 1d       	adc	r26, r0
    4e12:	08 95       	ret

00004e14 <__eerd_byte_m1281>:
    4e14:	f9 99       	sbic	0x1f, 1	; 31
    4e16:	fe cf       	rjmp	.-4      	; 0x4e14 <__eerd_byte_m1281>
    4e18:	92 bd       	out	0x22, r25	; 34
    4e1a:	81 bd       	out	0x21, r24	; 33
    4e1c:	f8 9a       	sbi	0x1f, 0	; 31
    4e1e:	99 27       	eor	r25, r25
    4e20:	80 b5       	in	r24, 0x20	; 32
    4e22:	08 95       	ret

00004e24 <__eewr_byte_m1281>:
    4e24:	26 2f       	mov	r18, r22

00004e26 <__eewr_r18_m1281>:
    4e26:	f9 99       	sbic	0x1f, 1	; 31
    4e28:	fe cf       	rjmp	.-4      	; 0x4e26 <__eewr_r18_m1281>
    4e2a:	1f ba       	out	0x1f, r1	; 31
    4e2c:	92 bd       	out	0x22, r25	; 34
    4e2e:	81 bd       	out	0x21, r24	; 33
    4e30:	20 bd       	out	0x20, r18	; 32
    4e32:	0f b6       	in	r0, 0x3f	; 63
    4e34:	f8 94       	cli
    4e36:	fa 9a       	sbi	0x1f, 2	; 31
    4e38:	f9 9a       	sbi	0x1f, 1	; 31
    4e3a:	0f be       	out	0x3f, r0	; 63
    4e3c:	01 96       	adiw	r24, 0x01	; 1
    4e3e:	08 95       	ret

00004e40 <calloc>:
    4e40:	ef 92       	push	r14
    4e42:	ff 92       	push	r15
    4e44:	0f 93       	push	r16
    4e46:	1f 93       	push	r17
    4e48:	cf 93       	push	r28
    4e4a:	df 93       	push	r29
    4e4c:	68 9f       	mul	r22, r24
    4e4e:	80 01       	movw	r16, r0
    4e50:	69 9f       	mul	r22, r25
    4e52:	10 0d       	add	r17, r0
    4e54:	78 9f       	mul	r23, r24
    4e56:	10 0d       	add	r17, r0
    4e58:	11 24       	eor	r1, r1
    4e5a:	c8 01       	movw	r24, r16
    4e5c:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <malloc>
    4e60:	e8 2e       	mov	r14, r24
    4e62:	e7 01       	movw	r28, r14
    4e64:	7e 01       	movw	r14, r28
    4e66:	f9 2e       	mov	r15, r25
    4e68:	e7 01       	movw	r28, r14
    4e6a:	e1 14       	cp	r14, r1
    4e6c:	f1 04       	cpc	r15, r1
    4e6e:	31 f0       	breq	.+12     	; 0x4e7c <calloc+0x3c>
    4e70:	8e 2d       	mov	r24, r14
    4e72:	60 e0       	ldi	r22, 0x00	; 0
    4e74:	70 e0       	ldi	r23, 0x00	; 0
    4e76:	a8 01       	movw	r20, r16
    4e78:	0e 94 80 28 	call	0x5100	; 0x5100 <memset>
    4e7c:	ce 01       	movw	r24, r28
    4e7e:	df 91       	pop	r29
    4e80:	cf 91       	pop	r28
    4e82:	1f 91       	pop	r17
    4e84:	0f 91       	pop	r16
    4e86:	ff 90       	pop	r15
    4e88:	ef 90       	pop	r14
    4e8a:	08 95       	ret

00004e8c <malloc>:
    4e8c:	ef 92       	push	r14
    4e8e:	ff 92       	push	r15
    4e90:	0f 93       	push	r16
    4e92:	1f 93       	push	r17
    4e94:	cf 93       	push	r28
    4e96:	df 93       	push	r29
    4e98:	82 30       	cpi	r24, 0x02	; 2
    4e9a:	91 05       	cpc	r25, r1
    4e9c:	10 f4       	brcc	.+4      	; 0x4ea2 <malloc+0x16>
    4e9e:	82 e0       	ldi	r24, 0x02	; 2
    4ea0:	90 e0       	ldi	r25, 0x00	; 0
    4ea2:	c0 91 ae 05 	lds	r28, 0x05AE
    4ea6:	d0 91 af 05 	lds	r29, 0x05AF
    4eaa:	40 e0       	ldi	r20, 0x00	; 0
    4eac:	50 e0       	ldi	r21, 0x00	; 0
    4eae:	20 e0       	ldi	r18, 0x00	; 0
    4eb0:	30 e0       	ldi	r19, 0x00	; 0
    4eb2:	28 c0       	rjmp	.+80     	; 0x4f04 <malloc+0x78>
    4eb4:	68 81       	ld	r22, Y
    4eb6:	79 81       	ldd	r23, Y+1	; 0x01
    4eb8:	68 17       	cp	r22, r24
    4eba:	79 07       	cpc	r23, r25
    4ebc:	d8 f0       	brcs	.+54     	; 0x4ef4 <malloc+0x68>
    4ebe:	68 17       	cp	r22, r24
    4ec0:	79 07       	cpc	r23, r25
    4ec2:	79 f4       	brne	.+30     	; 0x4ee2 <malloc+0x56>
    4ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ec8:	21 15       	cp	r18, r1
    4eca:	31 05       	cpc	r19, r1
    4ecc:	21 f0       	breq	.+8      	; 0x4ed6 <malloc+0x4a>
    4ece:	f9 01       	movw	r30, r18
    4ed0:	93 83       	std	Z+3, r25	; 0x03
    4ed2:	82 83       	std	Z+2, r24	; 0x02
    4ed4:	04 c0       	rjmp	.+8      	; 0x4ede <malloc+0x52>
    4ed6:	90 93 af 05 	sts	0x05AF, r25
    4eda:	80 93 ae 05 	sts	0x05AE, r24
    4ede:	de 01       	movw	r26, r28
    4ee0:	29 c0       	rjmp	.+82     	; 0x4f34 <malloc+0xa8>
    4ee2:	41 15       	cp	r20, r1
    4ee4:	51 05       	cpc	r21, r1
    4ee6:	19 f0       	breq	.+6      	; 0x4eee <malloc+0x62>
    4ee8:	64 17       	cp	r22, r20
    4eea:	75 07       	cpc	r23, r21
    4eec:	18 f4       	brcc	.+6      	; 0x4ef4 <malloc+0x68>
    4eee:	ab 01       	movw	r20, r22
    4ef0:	d9 01       	movw	r26, r18
    4ef2:	fe 01       	movw	r30, r28
    4ef4:	9e 01       	movw	r18, r28
    4ef6:	7a 81       	ldd	r23, Y+2	; 0x02
    4ef8:	6b 81       	ldd	r22, Y+3	; 0x03
    4efa:	e7 2e       	mov	r14, r23
    4efc:	e7 01       	movw	r28, r14
    4efe:	7e 01       	movw	r14, r28
    4f00:	f6 2e       	mov	r15, r22
    4f02:	e7 01       	movw	r28, r14
    4f04:	20 97       	sbiw	r28, 0x00	; 0
    4f06:	b1 f6       	brne	.-84     	; 0x4eb4 <malloc+0x28>
    4f08:	41 15       	cp	r20, r1
    4f0a:	51 05       	cpc	r21, r1
    4f0c:	f9 f0       	breq	.+62     	; 0x4f4c <malloc+0xc0>
    4f0e:	48 1b       	sub	r20, r24
    4f10:	59 0b       	sbc	r21, r25
    4f12:	44 30       	cpi	r20, 0x04	; 4
    4f14:	51 05       	cpc	r21, r1
    4f16:	80 f4       	brcc	.+32     	; 0x4f38 <malloc+0xac>
    4f18:	82 81       	ldd	r24, Z+2	; 0x02
    4f1a:	93 81       	ldd	r25, Z+3	; 0x03
    4f1c:	10 97       	sbiw	r26, 0x00	; 0
    4f1e:	29 f0       	breq	.+10     	; 0x4f2a <malloc+0x9e>
    4f20:	13 96       	adiw	r26, 0x03	; 3
    4f22:	9c 93       	st	X, r25
    4f24:	8e 93       	st	-X, r24
    4f26:	12 97       	sbiw	r26, 0x02	; 2
    4f28:	04 c0       	rjmp	.+8      	; 0x4f32 <malloc+0xa6>
    4f2a:	90 93 af 05 	sts	0x05AF, r25
    4f2e:	80 93 ae 05 	sts	0x05AE, r24
    4f32:	df 01       	movw	r26, r30
    4f34:	12 96       	adiw	r26, 0x02	; 2
    4f36:	45 c0       	rjmp	.+138    	; 0x4fc2 <malloc+0x136>
    4f38:	df 01       	movw	r26, r30
    4f3a:	a4 0f       	add	r26, r20
    4f3c:	b5 1f       	adc	r27, r21
    4f3e:	8d 93       	st	X+, r24
    4f40:	9d 93       	st	X+, r25
    4f42:	42 50       	subi	r20, 0x02	; 2
    4f44:	50 40       	sbci	r21, 0x00	; 0
    4f46:	51 83       	std	Z+1, r21	; 0x01
    4f48:	40 83       	st	Z, r20
    4f4a:	3b c0       	rjmp	.+118    	; 0x4fc2 <malloc+0x136>
    4f4c:	20 91 ac 05 	lds	r18, 0x05AC
    4f50:	30 91 ad 05 	lds	r19, 0x05AD
    4f54:	21 15       	cp	r18, r1
    4f56:	31 05       	cpc	r19, r1
    4f58:	41 f4       	brne	.+16     	; 0x4f6a <malloc+0xde>
    4f5a:	20 91 c9 02 	lds	r18, 0x02C9
    4f5e:	30 91 ca 02 	lds	r19, 0x02CA
    4f62:	30 93 ad 05 	sts	0x05AD, r19
    4f66:	20 93 ac 05 	sts	0x05AC, r18
    4f6a:	20 91 cb 02 	lds	r18, 0x02CB
    4f6e:	30 91 cc 02 	lds	r19, 0x02CC
    4f72:	21 15       	cp	r18, r1
    4f74:	31 05       	cpc	r19, r1
    4f76:	41 f4       	brne	.+16     	; 0x4f88 <malloc+0xfc>
    4f78:	2d b7       	in	r18, 0x3d	; 61
    4f7a:	3e b7       	in	r19, 0x3e	; 62
    4f7c:	40 91 c7 02 	lds	r20, 0x02C7
    4f80:	50 91 c8 02 	lds	r21, 0x02C8
    4f84:	24 1b       	sub	r18, r20
    4f86:	35 0b       	sbc	r19, r21
    4f88:	a0 91 ac 05 	lds	r26, 0x05AC
    4f8c:	b0 91 ad 05 	lds	r27, 0x05AD
    4f90:	a2 17       	cp	r26, r18
    4f92:	b3 07       	cpc	r27, r19
    4f94:	a0 f4       	brcc	.+40     	; 0x4fbe <malloc+0x132>
    4f96:	2a 1b       	sub	r18, r26
    4f98:	3b 0b       	sbc	r19, r27
    4f9a:	28 17       	cp	r18, r24
    4f9c:	39 07       	cpc	r19, r25
    4f9e:	78 f0       	brcs	.+30     	; 0x4fbe <malloc+0x132>
    4fa0:	ac 01       	movw	r20, r24
    4fa2:	4e 5f       	subi	r20, 0xFE	; 254
    4fa4:	5f 4f       	sbci	r21, 0xFF	; 255
    4fa6:	24 17       	cp	r18, r20
    4fa8:	35 07       	cpc	r19, r21
    4faa:	48 f0       	brcs	.+18     	; 0x4fbe <malloc+0x132>
    4fac:	4a 0f       	add	r20, r26
    4fae:	5b 1f       	adc	r21, r27
    4fb0:	50 93 ad 05 	sts	0x05AD, r21
    4fb4:	40 93 ac 05 	sts	0x05AC, r20
    4fb8:	8d 93       	st	X+, r24
    4fba:	9d 93       	st	X+, r25
    4fbc:	02 c0       	rjmp	.+4      	; 0x4fc2 <malloc+0x136>
    4fbe:	a0 e0       	ldi	r26, 0x00	; 0
    4fc0:	b0 e0       	ldi	r27, 0x00	; 0
    4fc2:	cd 01       	movw	r24, r26
    4fc4:	df 91       	pop	r29
    4fc6:	cf 91       	pop	r28
    4fc8:	1f 91       	pop	r17
    4fca:	0f 91       	pop	r16
    4fcc:	ff 90       	pop	r15
    4fce:	ef 90       	pop	r14
    4fd0:	08 95       	ret

00004fd2 <free>:
    4fd2:	cf 93       	push	r28
    4fd4:	df 93       	push	r29
    4fd6:	00 97       	sbiw	r24, 0x00	; 0
    4fd8:	09 f4       	brne	.+2      	; 0x4fdc <free+0xa>
    4fda:	8f c0       	rjmp	.+286    	; 0x50fa <free+0x128>
    4fdc:	fc 01       	movw	r30, r24
    4fde:	32 97       	sbiw	r30, 0x02	; 2
    4fe0:	13 82       	std	Z+3, r1	; 0x03
    4fe2:	12 82       	std	Z+2, r1	; 0x02
    4fe4:	60 91 ae 05 	lds	r22, 0x05AE
    4fe8:	70 91 af 05 	lds	r23, 0x05AF
    4fec:	61 15       	cp	r22, r1
    4fee:	71 05       	cpc	r23, r1
    4ff0:	81 f4       	brne	.+32     	; 0x5012 <free+0x40>
    4ff2:	20 81       	ld	r18, Z
    4ff4:	31 81       	ldd	r19, Z+1	; 0x01
    4ff6:	28 0f       	add	r18, r24
    4ff8:	39 1f       	adc	r19, r25
    4ffa:	80 91 ac 05 	lds	r24, 0x05AC
    4ffe:	90 91 ad 05 	lds	r25, 0x05AD
    5002:	82 17       	cp	r24, r18
    5004:	93 07       	cpc	r25, r19
    5006:	61 f5       	brne	.+88     	; 0x5060 <free+0x8e>
    5008:	f0 93 ad 05 	sts	0x05AD, r31
    500c:	e0 93 ac 05 	sts	0x05AC, r30
    5010:	74 c0       	rjmp	.+232    	; 0x50fa <free+0x128>
    5012:	eb 01       	movw	r28, r22
    5014:	80 e0       	ldi	r24, 0x00	; 0
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	ce 17       	cp	r28, r30
    501a:	df 07       	cpc	r29, r31
    501c:	40 f4       	brcc	.+16     	; 0x502e <free+0x5c>
    501e:	2a 81       	ldd	r18, Y+2	; 0x02
    5020:	3b 81       	ldd	r19, Y+3	; 0x03
    5022:	ce 01       	movw	r24, r28
    5024:	21 15       	cp	r18, r1
    5026:	31 05       	cpc	r19, r1
    5028:	01 f1       	breq	.+64     	; 0x506a <free+0x98>
    502a:	e9 01       	movw	r28, r18
    502c:	f5 cf       	rjmp	.-22     	; 0x5018 <free+0x46>
    502e:	d3 83       	std	Z+3, r29	; 0x03
    5030:	c2 83       	std	Z+2, r28	; 0x02
    5032:	df 01       	movw	r26, r30
    5034:	4d 91       	ld	r20, X+
    5036:	5d 91       	ld	r21, X+
    5038:	9d 01       	movw	r18, r26
    503a:	24 0f       	add	r18, r20
    503c:	35 1f       	adc	r19, r21
    503e:	c2 17       	cp	r28, r18
    5040:	d3 07       	cpc	r29, r19
    5042:	61 f4       	brne	.+24     	; 0x505c <free+0x8a>
    5044:	28 81       	ld	r18, Y
    5046:	39 81       	ldd	r19, Y+1	; 0x01
    5048:	24 0f       	add	r18, r20
    504a:	35 1f       	adc	r19, r21
    504c:	2e 5f       	subi	r18, 0xFE	; 254
    504e:	3f 4f       	sbci	r19, 0xFF	; 255
    5050:	31 83       	std	Z+1, r19	; 0x01
    5052:	20 83       	st	Z, r18
    5054:	2a 81       	ldd	r18, Y+2	; 0x02
    5056:	3b 81       	ldd	r19, Y+3	; 0x03
    5058:	33 83       	std	Z+3, r19	; 0x03
    505a:	22 83       	std	Z+2, r18	; 0x02
    505c:	00 97       	sbiw	r24, 0x00	; 0
    505e:	29 f4       	brne	.+10     	; 0x506a <free+0x98>
    5060:	f0 93 af 05 	sts	0x05AF, r31
    5064:	e0 93 ae 05 	sts	0x05AE, r30
    5068:	48 c0       	rjmp	.+144    	; 0x50fa <free+0x128>
    506a:	dc 01       	movw	r26, r24
    506c:	13 96       	adiw	r26, 0x03	; 3
    506e:	fc 93       	st	X, r31
    5070:	ee 93       	st	-X, r30
    5072:	12 97       	sbiw	r26, 0x02	; 2
    5074:	ec 01       	movw	r28, r24
    5076:	49 91       	ld	r20, Y+
    5078:	59 91       	ld	r21, Y+
    507a:	c4 0f       	add	r28, r20
    507c:	d5 1f       	adc	r29, r21
    507e:	ec 17       	cp	r30, r28
    5080:	fd 07       	cpc	r31, r29
    5082:	79 f4       	brne	.+30     	; 0x50a2 <free+0xd0>
    5084:	20 81       	ld	r18, Z
    5086:	31 81       	ldd	r19, Z+1	; 0x01
    5088:	24 0f       	add	r18, r20
    508a:	35 1f       	adc	r19, r21
    508c:	2e 5f       	subi	r18, 0xFE	; 254
    508e:	3f 4f       	sbci	r19, 0xFF	; 255
    5090:	11 96       	adiw	r26, 0x01	; 1
    5092:	3c 93       	st	X, r19
    5094:	2e 93       	st	-X, r18
    5096:	22 81       	ldd	r18, Z+2	; 0x02
    5098:	33 81       	ldd	r19, Z+3	; 0x03
    509a:	13 96       	adiw	r26, 0x03	; 3
    509c:	3c 93       	st	X, r19
    509e:	2e 93       	st	-X, r18
    50a0:	12 97       	sbiw	r26, 0x02	; 2
    50a2:	e0 e0       	ldi	r30, 0x00	; 0
    50a4:	f0 e0       	ldi	r31, 0x00	; 0
    50a6:	db 01       	movw	r26, r22
    50a8:	12 96       	adiw	r26, 0x02	; 2
    50aa:	8d 91       	ld	r24, X+
    50ac:	9c 91       	ld	r25, X
    50ae:	13 97       	sbiw	r26, 0x03	; 3
    50b0:	00 97       	sbiw	r24, 0x00	; 0
    50b2:	21 f0       	breq	.+8      	; 0x50bc <free+0xea>
    50b4:	e6 2f       	mov	r30, r22
    50b6:	f7 2f       	mov	r31, r23
    50b8:	bc 01       	movw	r22, r24
    50ba:	f5 cf       	rjmp	.-22     	; 0x50a6 <free+0xd4>
    50bc:	9b 01       	movw	r18, r22
    50be:	2e 5f       	subi	r18, 0xFE	; 254
    50c0:	3f 4f       	sbci	r19, 0xFF	; 255
    50c2:	db 01       	movw	r26, r22
    50c4:	8d 91       	ld	r24, X+
    50c6:	9c 91       	ld	r25, X
    50c8:	11 97       	sbiw	r26, 0x01	; 1
    50ca:	82 0f       	add	r24, r18
    50cc:	93 1f       	adc	r25, r19
    50ce:	40 91 ac 05 	lds	r20, 0x05AC
    50d2:	50 91 ad 05 	lds	r21, 0x05AD
    50d6:	48 17       	cp	r20, r24
    50d8:	59 07       	cpc	r21, r25
    50da:	79 f4       	brne	.+30     	; 0x50fa <free+0x128>
    50dc:	30 97       	sbiw	r30, 0x00	; 0
    50de:	29 f4       	brne	.+10     	; 0x50ea <free+0x118>
    50e0:	10 92 af 05 	sts	0x05AF, r1
    50e4:	10 92 ae 05 	sts	0x05AE, r1
    50e8:	02 c0       	rjmp	.+4      	; 0x50ee <free+0x11c>
    50ea:	13 82       	std	Z+3, r1	; 0x03
    50ec:	12 82       	std	Z+2, r1	; 0x02
    50ee:	22 50       	subi	r18, 0x02	; 2
    50f0:	30 40       	sbci	r19, 0x00	; 0
    50f2:	30 93 ad 05 	sts	0x05AD, r19
    50f6:	20 93 ac 05 	sts	0x05AC, r18
    50fa:	df 91       	pop	r29
    50fc:	cf 91       	pop	r28
    50fe:	08 95       	ret

00005100 <memset>:
    5100:	dc 01       	movw	r26, r24
    5102:	01 c0       	rjmp	.+2      	; 0x5106 <memset+0x6>
    5104:	6d 93       	st	X+, r22
    5106:	41 50       	subi	r20, 0x01	; 1
    5108:	50 40       	sbci	r21, 0x00	; 0
    510a:	e0 f7       	brcc	.-8      	; 0x5104 <memset+0x4>
    510c:	08 95       	ret

0000510e <_exit>:
    510e:	f8 94       	cli

00005110 <__stop_program>:
    5110:	ff cf       	rjmp	.-2      	; 0x5110 <__stop_program>
