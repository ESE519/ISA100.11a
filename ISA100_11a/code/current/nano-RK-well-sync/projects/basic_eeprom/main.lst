   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 139               	.global	nrk_create_taskset
 141               	nrk_create_taskset:
 142               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** 
  25:main.c        **** #include <nrk.h>
  26:main.c        **** #include <include.h>
  27:main.c        **** #include <ulib.h>
  28:main.c        **** #include <stdio.h>
  29:main.c        **** #include <avr/sleep.h>
  30:main.c        **** #include <hal.h>
  31:main.c        **** #include <nrk_error.h>
  32:main.c        **** #include <nrk_timer.h>
  33:main.c        **** #include <nrk_stack_check.h>
  34:main.c        **** #include <avr/eeprom.h>
  35:main.c        **** #include <nrk_eeprom.h>
  36:main.c        **** 
  37:main.c        **** 
  38:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  39:main.c        **** nrk_task_type TaskOne;
  40:main.c        **** void Task1(void);
  41:main.c        **** 
  42:main.c        **** NRK_STK Stack2[NRK_APP_STACKSIZE];
  43:main.c        **** nrk_task_type TaskTwo;
  44:main.c        **** void Task2 (void);
  45:main.c        **** 
  46:main.c        **** 
  47:main.c        **** void nrk_create_taskset();
  48:main.c        **** 
  49:main.c        **** uint32_t mac_address;
  50:main.c        **** 
  51:main.c        **** int
  52:main.c        **** main ()
  53:main.c        **** {
  54:main.c        ****   uint8_t t;
  55:main.c        ****   nrk_setup_ports();
  56:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  57:main.c        ****   
  58:main.c        ****   nrk_kprintf( PSTR("Starting up...\r\n") );
  59:main.c        **** 
  60:main.c        ****   nrk_init();
  61:main.c        **** 
  62:main.c        ****   nrk_led_clr(ORANGE_LED);
  63:main.c        ****   nrk_led_clr(BLUE_LED);
  64:main.c        ****   nrk_led_clr(GREEN_LED);
  65:main.c        ****   nrk_led_clr(RED_LED);
  66:main.c        ****  
  67:main.c        ****   nrk_time_set(0,0);
  68:main.c        ****   nrk_create_taskset ();
  69:main.c        ****   nrk_start();
  70:main.c        ****   
  71:main.c        ****   return 0;
  72:main.c        **** }
  73:main.c        **** 
  74:main.c        **** 
  75:main.c        **** 
  76:main.c        **** void Task1()
  77:main.c        **** {
  78:main.c        **** uint16_t cnt;
  79:main.c        **** int8_t val;
  80:main.c        **** uint8_t chan;
  81:main.c        **** uint8_t i;
  82:main.c        **** 
  83:main.c        **** val=read_eeprom_mac_address(&mac_address);
  84:main.c        **** if(val==NRK_OK)
  85:main.c        **** 	{
  86:main.c        **** 	nrk_kprintf( PSTR("MAC = 0x"));
  87:main.c        **** 	printf( "%x",(uint8_t)((mac_address>>24)&0xff));
  88:main.c        **** 	printf( "%x",(uint8_t)((mac_address>>16)&0xff));
  89:main.c        **** 	printf( "%x",(uint8_t)((mac_address>>8)&0xff));
  90:main.c        **** 	printf( "%x\r\n",(uint8_t)((mac_address & 0xff)));
  91:main.c        **** 	}
  92:main.c        **** else
  93:main.c        **** 	{
  94:main.c        **** 	while(1)	
  95:main.c        **** 		{
  96:main.c        **** 		nrk_kprintf( PSTR( "* ERROR reading MAC address\r\n" ));
  97:main.c        **** 		nrk_wait_until_next_period();
  98:main.c        **** 		}
  99:main.c        **** 	}
 100:main.c        **** 
 101:main.c        **** val=read_eeprom_channel(&chan);
 102:main.c        **** printf( "chan = %d\r\n",chan );
 103:main.c        **** 
 104:main.c        ****   printf( "Task1 PID=%d\r\n",nrk_get_pid());
 105:main.c        ****   val=0;
 106:main.c        ****   i=0;
 107:main.c        ****   for(cnt=0x100; cnt<0x110; cnt++ )
 108:main.c        **** 	{
 109:main.c        **** 	nrk_eeprom_write_byte(cnt,i);
 110:main.c        **** 	printf( "Wrote %u to %d\r\n",i,cnt);
 111:main.c        **** 	i++;
 112:main.c        **** 	}
 113:main.c        ****   for(cnt=0x100; cnt<0x110; cnt++ )
 114:main.c        **** 	{
 115:main.c        **** 	i=nrk_eeprom_read_byte(cnt);
 116:main.c        **** 	printf( "Read %u from %d\r\n",i,cnt);
 117:main.c        **** 	}
 118:main.c        **** 
 119:main.c        **** 
 120:main.c        ****   cnt=0;
 121:main.c        ****   while(1) {
 122:main.c        **** 	nrk_led_toggle(ORANGE_LED);
 123:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_0);
 124:main.c        **** 	//printf( "Task1 cnt=%d\r\n",cnt );
 125:main.c        **** 	nrk_wait_until_next_period();
 126:main.c        **** 	cnt++;
 127:main.c        **** 	}
 128:main.c        **** }
 129:main.c        **** 
 130:main.c        **** void Task2()
 131:main.c        **** {
 132:main.c        ****   uint8_t cnt;
 133:main.c        ****   printf( "Task2 PID=%d\r\n",nrk_get_pid());
 134:main.c        ****   cnt=0;
 135:main.c        ****   while(1) {
 136:main.c        **** 	nrk_led_toggle(BLUE_LED);
 137:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_1);
 138:main.c        **** 	//printf( "Task2 cnt=%d\r\n",cnt );
 139:main.c        **** 	nrk_wait_until_next_period();
 140:main.c        **** 	cnt++;
 141:main.c        **** 	}
 142:main.c        **** }
 143:main.c        **** 
 144:main.c        **** 
 145:main.c        **** void
 146:main.c        **** nrk_create_taskset()
 147:main.c        **** {
 144               	.LM0:
 145               	.LFBB1:
 146 0000 1F93      		push r17
 147 0002 CF93      		push r28
 148 0004 DF93      		push r29
 149               	/* prologue: function */
 150               	/* frame size = 0 */
 148:main.c        ****   TaskOne.task = Task1;
 152               	.LM1:
 153 0006 80E0      		ldi r24,lo8(gs(Task1))
 154 0008 90E0      		ldi r25,hi8(gs(Task1))
 155 000a 9093 0000 		sts (TaskOne+5)+1,r25
 156 000e 8093 0000 		sts TaskOne+5,r24
 149:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 158               	.LM2:
 159 0012 C0E0      		ldi r28,lo8(TaskOne)
 160 0014 D0E0      		ldi r29,hi8(TaskOne)
 161 0016 CE01      		movw r24,r28
 162 0018 60E0      		ldi r22,lo8(Stack1)
 163 001a 70E0      		ldi r23,hi8(Stack1)
 164 001c 40E8      		ldi r20,lo8(128)
 165 001e 50E0      		ldi r21,hi8(128)
 166 0020 0E94 0000 		call nrk_task_set_stk
 150:main.c        ****   TaskOne.prio = 1;
 168               	.LM3:
 169 0024 11E0      		ldi r17,lo8(1)
 170 0026 1887      		std Y+8,r17
 151:main.c        ****   TaskOne.FirstActivation = TRUE;
 172               	.LM4:
 173 0028 1F83      		std Y+7,r17
 152:main.c        ****   TaskOne.Type = BASIC_TASK;
 175               	.LM5:
 176 002a 1987      		std Y+9,r17
 153:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 178               	.LM6:
 179 002c 1A87      		std Y+10,r17
 154:main.c        ****   TaskOne.period.secs = 0;
 181               	.LM7:
 182 002e 1B86      		std Y+11,__zero_reg__
 183 0030 1C86      		std Y+12,__zero_reg__
 184 0032 1D86      		std Y+13,__zero_reg__
 185 0034 1E86      		std Y+14,__zero_reg__
 155:main.c        ****   TaskOne.period.nano_secs = 250*NANOS_PER_MS;
 187               	.LM8:
 188 0036 80E8      		ldi r24,lo8(250000000)
 189 0038 92EB      		ldi r25,hi8(250000000)
 190 003a A6EE      		ldi r26,hlo8(250000000)
 191 003c BEE0      		ldi r27,hhi8(250000000)
 192 003e 8F87      		std Y+15,r24
 193 0040 988B      		std Y+16,r25
 194 0042 A98B      		std Y+17,r26
 195 0044 BA8B      		std Y+18,r27
 156:main.c        ****   TaskOne.cpu_reserve.secs = 0;
 197               	.LM9:
 198 0046 1B8A      		std Y+19,__zero_reg__
 199 0048 1C8A      		std Y+20,__zero_reg__
 200 004a 1D8A      		std Y+21,__zero_reg__
 201 004c 1E8A      		std Y+22,__zero_reg__
 157:main.c        ****   TaskOne.cpu_reserve.nano_secs =  0;
 203               	.LM10:
 204 004e 1F8A      		std Y+23,__zero_reg__
 205 0050 188E      		std Y+24,__zero_reg__
 206 0052 198E      		std Y+25,__zero_reg__
 207 0054 1A8E      		std Y+26,__zero_reg__
 158:main.c        ****   TaskOne.offset.secs = 0;
 209               	.LM11:
 210 0056 1B8E      		std Y+27,__zero_reg__
 211 0058 1C8E      		std Y+28,__zero_reg__
 212 005a 1D8E      		std Y+29,__zero_reg__
 213 005c 1E8E      		std Y+30,__zero_reg__
 159:main.c        ****   TaskOne.offset.nano_secs= 0;
 215               	.LM12:
 216 005e 1F8E      		std Y+31,__zero_reg__
 217 0060 18A2      		std Y+32,__zero_reg__
 218 0062 19A2      		std Y+33,__zero_reg__
 219 0064 1AA2      		std Y+34,__zero_reg__
 160:main.c        ****   nrk_activate_task (&TaskOne);
 221               	.LM13:
 222 0066 CE01      		movw r24,r28
 223 0068 0E94 0000 		call nrk_activate_task
 161:main.c        **** 
 162:main.c        ****   TaskTwo.task = Task2;
 225               	.LM14:
 226 006c 80E0      		ldi r24,lo8(gs(Task2))
 227 006e 90E0      		ldi r25,hi8(gs(Task2))
 228 0070 9093 0000 		sts (TaskTwo+5)+1,r25
 229 0074 8093 0000 		sts TaskTwo+5,r24
 163:main.c        ****   nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
 231               	.LM15:
 232 0078 C0E0      		ldi r28,lo8(TaskTwo)
 233 007a D0E0      		ldi r29,hi8(TaskTwo)
 234 007c CE01      		movw r24,r28
 235 007e 60E0      		ldi r22,lo8(Stack2)
 236 0080 70E0      		ldi r23,hi8(Stack2)
 237 0082 40E8      		ldi r20,lo8(128)
 238 0084 50E0      		ldi r21,hi8(128)
 239 0086 0E94 0000 		call nrk_task_set_stk
 164:main.c        ****   TaskTwo.prio = 2;
 241               	.LM16:
 242 008a 82E0      		ldi r24,lo8(2)
 243 008c 8887      		std Y+8,r24
 165:main.c        ****   TaskTwo.FirstActivation = TRUE;
 245               	.LM17:
 246 008e 1F83      		std Y+7,r17
 166:main.c        ****   TaskTwo.Type = BASIC_TASK;
 248               	.LM18:
 249 0090 1987      		std Y+9,r17
 167:main.c        ****   TaskTwo.SchType = PREEMPTIVE;
 251               	.LM19:
 252 0092 1A87      		std Y+10,r17
 168:main.c        ****   TaskTwo.period.secs = 0;
 254               	.LM20:
 255 0094 1B86      		std Y+11,__zero_reg__
 256 0096 1C86      		std Y+12,__zero_reg__
 257 0098 1D86      		std Y+13,__zero_reg__
 258 009a 1E86      		std Y+14,__zero_reg__
 169:main.c        ****   TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
 260               	.LM21:
 261 009c 80E0      		ldi r24,lo8(500000000)
 262 009e 95E6      		ldi r25,hi8(500000000)
 263 00a0 ADEC      		ldi r26,hlo8(500000000)
 264 00a2 BDE1      		ldi r27,hhi8(500000000)
 265 00a4 8F87      		std Y+15,r24
 266 00a6 988B      		std Y+16,r25
 267 00a8 A98B      		std Y+17,r26
 268 00aa BA8B      		std Y+18,r27
 170:main.c        ****   TaskTwo.cpu_reserve.secs = 0;
 270               	.LM22:
 271 00ac 1B8A      		std Y+19,__zero_reg__
 272 00ae 1C8A      		std Y+20,__zero_reg__
 273 00b0 1D8A      		std Y+21,__zero_reg__
 274 00b2 1E8A      		std Y+22,__zero_reg__
 171:main.c        ****   TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 276               	.LM23:
 277 00b4 80E0      		ldi r24,lo8(100000000)
 278 00b6 91EE      		ldi r25,hi8(100000000)
 279 00b8 A5EF      		ldi r26,hlo8(100000000)
 280 00ba B5E0      		ldi r27,hhi8(100000000)
 281 00bc 8F8B      		std Y+23,r24
 282 00be 988F      		std Y+24,r25
 283 00c0 A98F      		std Y+25,r26
 284 00c2 BA8F      		std Y+26,r27
 172:main.c        ****   TaskTwo.offset.secs = 0;
 286               	.LM24:
 287 00c4 1B8E      		std Y+27,__zero_reg__
 288 00c6 1C8E      		std Y+28,__zero_reg__
 289 00c8 1D8E      		std Y+29,__zero_reg__
 290 00ca 1E8E      		std Y+30,__zero_reg__
 173:main.c        ****   TaskTwo.offset.nano_secs= 0;
 292               	.LM25:
 293 00cc 1F8E      		std Y+31,__zero_reg__
 294 00ce 18A2      		std Y+32,__zero_reg__
 295 00d0 19A2      		std Y+33,__zero_reg__
 296 00d2 1AA2      		std Y+34,__zero_reg__
 174:main.c        ****   nrk_activate_task (&TaskTwo);
 298               	.LM26:
 299 00d4 CE01      		movw r24,r28
 300 00d6 0E94 0000 		call nrk_activate_task
 301               	/* epilogue start */
 175:main.c        **** 
 176:main.c        **** }
 303               	.LM27:
 304 00da DF91      		pop r29
 305 00dc CF91      		pop r28
 306 00de 1F91      		pop r17
 307 00e0 0895      		ret
 309               	.Lscope1:
 311               		.stabd	78,0,0
 312               		.data
 313               	.LC0:
 314 0000 5461 736B 		.string	"Task2 PID=%d\r\n"
 314      3220 5049 
 314      443D 2564 
 314      0D0A 00
 315               		.text
 317               	.global	Task2
 319               	Task2:
 320               		.stabd	46,0,0
 131:main.c        **** {
 322               	.LM28:
 323               	.LFBB2:
 324 00e2 1F93      		push r17
 325               	/* prologue: function */
 326               	/* frame size = 0 */
 133:main.c        ****   printf( "Task2 PID=%d\r\n",nrk_get_pid());
 328               	.LM29:
 329 00e4 0E94 0000 		call nrk_get_pid
 330 00e8 00D0      		rcall .
 331 00ea 00D0      		rcall .
 332 00ec EDB7      		in r30,__SP_L__
 333 00ee FEB7      		in r31,__SP_H__
 334 00f0 3196      		adiw r30,1
 335 00f2 20E0      		ldi r18,lo8(.LC0)
 336 00f4 30E0      		ldi r19,hi8(.LC0)
 337 00f6 ADB7      		in r26,__SP_L__
 338 00f8 BEB7      		in r27,__SP_H__
 339 00fa 1296      		adiw r26,1+1
 340 00fc 3C93      		st X,r19
 341 00fe 2E93      		st -X,r18
 342 0100 1197      		sbiw r26,1
 343 0102 8283      		std Z+2,r24
 344 0104 1382      		std Z+3,__zero_reg__
 345 0106 0E94 0000 		call printf
 137:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_1);
 347               	.LM30:
 348 010a 1091 0000 		lds r17,NRK_DEBUG_1
 349 010e 0F90      		pop __tmp_reg__
 350 0110 0F90      		pop __tmp_reg__
 351 0112 0F90      		pop __tmp_reg__
 352 0114 0F90      		pop __tmp_reg__
 353               	.L4:
 136:main.c        **** 	nrk_led_toggle(BLUE_LED);
 355               	.LM31:
 356 0116 81E0      		ldi r24,lo8(1)
 357 0118 90E0      		ldi r25,hi8(1)
 358 011a 0E94 0000 		call nrk_led_toggle
 137:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_1);
 360               	.LM32:
 361 011e 812F      		mov r24,r17
 362 0120 0E94 0000 		call nrk_gpio_toggle
 139:main.c        **** 	nrk_wait_until_next_period();
 364               	.LM33:
 365 0124 0E94 0000 		call nrk_wait_until_next_period
 366 0128 00C0      		rjmp .L4
 368               	.Lscope2:
 370               		.stabd	78,0,0
 371               		.data
 372               	.LC1:
 373 000f 2578 00   		.string	"%x"
 374               	.LC2:
 375 0012 2578 0D0A 		.string	"%x\r\n"
 375      00
 376               	.LC3:
 377 0017 6368 616E 		.string	"chan = %d\r\n"
 377      203D 2025 
 377      640D 0A00 
 378               	.LC4:
 379 0023 5461 736B 		.string	"Task1 PID=%d\r\n"
 379      3120 5049 
 379      443D 2564 
 379      0D0A 00
 380               	.LC5:
 381 0032 5772 6F74 		.string	"Wrote %u to %d\r\n"
 381      6520 2575 
 381      2074 6F20 
 381      2564 0D0A 
 381      00
 382               	.LC6:
 383 0043 5265 6164 		.string	"Read %u from %d\r\n"
 383      2025 7520 
 383      6672 6F6D 
 383      2025 640D 
 383      0A00 
 384               		.text
 386               	.global	Task1
 388               	Task1:
 389               		.stabd	46,0,0
  77:main.c        **** {
 391               	.LM34:
 392               	.LFBB3:
 393 012a EF92      		push r14
 394 012c FF92      		push r15
 395 012e 0F93      		push r16
 396 0130 1F93      		push r17
 397 0132 DF93      		push r29
 398 0134 CF93      		push r28
 399 0136 0F92      		push __tmp_reg__
 400 0138 CDB7      		in r28,__SP_L__
 401 013a DEB7      		in r29,__SP_H__
 402               	/* prologue: function */
 403               	/* frame size = 1 */
  83:main.c        **** val=read_eeprom_mac_address(&mac_address);
 405               	.LM35:
 406 013c 80E0      		ldi r24,lo8(mac_address)
 407 013e 90E0      		ldi r25,hi8(mac_address)
 408 0140 0E94 0000 		call read_eeprom_mac_address
  84:main.c        **** if(val==NRK_OK)
 410               	.LM36:
 411 0144 8130      		cpi r24,lo8(1)
 412 0146 01F0      		breq .+2
 413 0148 00C0      		rjmp .L15
  86:main.c        **** 	nrk_kprintf( PSTR("MAC = 0x"));
 415               	.LM37:
 416 014a 80E0      		ldi r24,lo8(__c.2111)
 417 014c 90E0      		ldi r25,hi8(__c.2111)
 418 014e 0E94 0000 		call nrk_kprintf
  87:main.c        **** 	printf( "%x",(uint8_t)((mac_address>>24)&0xff));
 420               	.LM38:
 421 0152 00D0      		rcall .
 422 0154 00D0      		rcall .
 423 0156 EDB7      		in r30,__SP_L__
 424 0158 FEB7      		in r31,__SP_H__
 425 015a 3196      		adiw r30,1
 426 015c 00E0      		ldi r16,lo8(.LC1)
 427 015e 10E0      		ldi r17,hi8(.LC1)
 428 0160 ADB7      		in r26,__SP_L__
 429 0162 BEB7      		in r27,__SP_H__
 430 0164 1296      		adiw r26,1+1
 431 0166 1C93      		st X,r17
 432 0168 0E93      		st -X,r16
 433 016a 1197      		sbiw r26,1
 434 016c 8091 0000 		lds r24,mac_address+3
 435 0170 8283      		std Z+2,r24
 436 0172 1382      		std Z+3,__zero_reg__
 437 0174 0E94 0000 		call printf
  88:main.c        **** 	printf( "%x",(uint8_t)((mac_address>>16)&0xff));
 439               	.LM39:
 440 0178 EDB7      		in r30,__SP_L__
 441 017a FEB7      		in r31,__SP_H__
 442 017c 3196      		adiw r30,1
 443 017e ADB7      		in r26,__SP_L__
 444 0180 BEB7      		in r27,__SP_H__
 445 0182 1296      		adiw r26,1+1
 446 0184 1C93      		st X,r17
 447 0186 0E93      		st -X,r16
 448 0188 1197      		sbiw r26,1
 449 018a 8091 0000 		lds r24,mac_address+2
 450 018e 8283      		std Z+2,r24
 451 0190 1382      		std Z+3,__zero_reg__
 452 0192 0E94 0000 		call printf
  89:main.c        **** 	printf( "%x",(uint8_t)((mac_address>>8)&0xff));
 454               	.LM40:
 455 0196 EDB7      		in r30,__SP_L__
 456 0198 FEB7      		in r31,__SP_H__
 457 019a 3196      		adiw r30,1
 458 019c ADB7      		in r26,__SP_L__
 459 019e BEB7      		in r27,__SP_H__
 460 01a0 1296      		adiw r26,1+1
 461 01a2 1C93      		st X,r17
 462 01a4 0E93      		st -X,r16
 463 01a6 1197      		sbiw r26,1
 464 01a8 8091 0000 		lds r24,mac_address+1
 465 01ac 8283      		std Z+2,r24
 466 01ae 1382      		std Z+3,__zero_reg__
 467 01b0 0E94 0000 		call printf
  90:main.c        **** 	printf( "%x\r\n",(uint8_t)((mac_address & 0xff)));
 469               	.LM41:
 470 01b4 EDB7      		in r30,__SP_L__
 471 01b6 FEB7      		in r31,__SP_H__
 472 01b8 3196      		adiw r30,1
 473 01ba 80E0      		ldi r24,lo8(.LC2)
 474 01bc 90E0      		ldi r25,hi8(.LC2)
 475 01be ADB7      		in r26,__SP_L__
 476 01c0 BEB7      		in r27,__SP_H__
 477 01c2 1296      		adiw r26,1+1
 478 01c4 9C93      		st X,r25
 479 01c6 8E93      		st -X,r24
 480 01c8 1197      		sbiw r26,1
 481 01ca 8091 0000 		lds r24,mac_address
 482 01ce 8283      		std Z+2,r24
 483 01d0 1382      		std Z+3,__zero_reg__
 484 01d2 0E94 0000 		call printf
 101:main.c        **** val=read_eeprom_channel(&chan);
 486               	.LM42:
 487 01d6 0F90      		pop __tmp_reg__
 488 01d8 0F90      		pop __tmp_reg__
 489 01da 0F90      		pop __tmp_reg__
 490 01dc 0F90      		pop __tmp_reg__
 491 01de CE01      		movw r24,r28
 492 01e0 0196      		adiw r24,1
 493 01e2 0E94 0000 		call read_eeprom_channel
 102:main.c        **** printf( "chan = %d\r\n",chan );
 495               	.LM43:
 496 01e6 00D0      		rcall .
 497 01e8 00D0      		rcall .
 498 01ea EDB7      		in r30,__SP_L__
 499 01ec FEB7      		in r31,__SP_H__
 500 01ee 3196      		adiw r30,1
 501 01f0 80E0      		ldi r24,lo8(.LC3)
 502 01f2 90E0      		ldi r25,hi8(.LC3)
 503 01f4 ADB7      		in r26,__SP_L__
 504 01f6 BEB7      		in r27,__SP_H__
 505 01f8 1296      		adiw r26,1+1
 506 01fa 9C93      		st X,r25
 507 01fc 8E93      		st -X,r24
 508 01fe 1197      		sbiw r26,1
 509 0200 8981      		ldd r24,Y+1
 510 0202 8283      		std Z+2,r24
 511 0204 1382      		std Z+3,__zero_reg__
 512 0206 0E94 0000 		call printf
 104:main.c        ****   printf( "Task1 PID=%d\r\n",nrk_get_pid());
 514               	.LM44:
 515 020a 0F90      		pop __tmp_reg__
 516 020c 0F90      		pop __tmp_reg__
 517 020e 0F90      		pop __tmp_reg__
 518 0210 0F90      		pop __tmp_reg__
 519 0212 0E94 0000 		call nrk_get_pid
 520 0216 00D0      		rcall .
 521 0218 00D0      		rcall .
 522 021a EDB7      		in r30,__SP_L__
 523 021c FEB7      		in r31,__SP_H__
 524 021e 3196      		adiw r30,1
 525 0220 20E0      		ldi r18,lo8(.LC4)
 526 0222 30E0      		ldi r19,hi8(.LC4)
 527 0224 ADB7      		in r26,__SP_L__
 528 0226 BEB7      		in r27,__SP_H__
 529 0228 1296      		adiw r26,1+1
 530 022a 3C93      		st X,r19
 531 022c 2E93      		st -X,r18
 532 022e 1197      		sbiw r26,1
 533 0230 8283      		std Z+2,r24
 534 0232 1382      		std Z+3,__zero_reg__
 535 0234 0E94 0000 		call printf
 536 0238 00E0      		ldi r16,lo8(256)
 537 023a 11E0      		ldi r17,hi8(256)
 538 023c 0F90      		pop __tmp_reg__
 539 023e 0F90      		pop __tmp_reg__
 540 0240 0F90      		pop __tmp_reg__
 541 0242 0F90      		pop __tmp_reg__
 110:main.c        **** 	printf( "Wrote %u to %d\r\n",i,cnt);
 543               	.LM45:
 544 0244 90E0      		ldi r25,lo8(.LC5)
 545 0246 E92E      		mov r14,r25
 546 0248 90E0      		ldi r25,hi8(.LC5)
 547 024a F92E      		mov r15,r25
 548 024c 00C0      		rjmp .L9
 549               	.L15:
  96:main.c        **** 		nrk_kprintf( PSTR( "* ERROR reading MAC address\r\n" ));
 551               	.LM46:
 552 024e 80E0      		ldi r24,lo8(__c.2113)
 553 0250 90E0      		ldi r25,hi8(__c.2113)
 554 0252 0E94 0000 		call nrk_kprintf
  97:main.c        **** 		nrk_wait_until_next_period();
 556               	.LM47:
 557 0256 0E94 0000 		call nrk_wait_until_next_period
 558 025a 00C0      		rjmp .L15
 559               	.L9:
 109:main.c        **** 	nrk_eeprom_write_byte(cnt,i);
 561               	.LM48:
 562 025c C801      		movw r24,r16
 563 025e 602F      		mov r22,r16
 564 0260 0E94 0000 		call nrk_eeprom_write_byte
 110:main.c        **** 	printf( "Wrote %u to %d\r\n",i,cnt);
 566               	.LM49:
 567 0264 00D0      		rcall .
 568 0266 00D0      		rcall .
 569 0268 00D0      		rcall .
 570 026a EDB7      		in r30,__SP_L__
 571 026c FEB7      		in r31,__SP_H__
 572 026e 3196      		adiw r30,1
 573 0270 ADB7      		in r26,__SP_L__
 574 0272 BEB7      		in r27,__SP_H__
 575 0274 1296      		adiw r26,1+1
 576 0276 FC92      		st X,r15
 577 0278 EE92      		st -X,r14
 578 027a 1197      		sbiw r26,1
 579 027c C801      		movw r24,r16
 580 027e 8050      		subi r24,lo8(-(-256))
 581 0280 9140      		sbci r25,hi8(-(-256))
 582 0282 9383      		std Z+3,r25
 583 0284 8283      		std Z+2,r24
 584 0286 1583      		std Z+5,r17
 585 0288 0483      		std Z+4,r16
 586 028a 0E94 0000 		call printf
 107:main.c        ****   for(cnt=0x100; cnt<0x110; cnt++ )
 588               	.LM50:
 589 028e 0F5F      		subi r16,lo8(-(1))
 590 0290 1F4F      		sbci r17,hi8(-(1))
 591 0292 8DB7      		in r24,__SP_L__
 592 0294 9EB7      		in r25,__SP_H__
 593 0296 0696      		adiw r24,6
 594 0298 0FB6      		in __tmp_reg__,__SREG__
 595 029a F894      		cli
 596 029c 9EBF      		out __SP_H__,r25
 597 029e 0FBE      		out __SREG__,__tmp_reg__
 598 02a0 8DBF      		out __SP_L__,r24
 599 02a2 91E0      		ldi r25,hi8(272)
 600 02a4 0031      		cpi r16,lo8(272)
 601 02a6 1907      		cpc r17,r25
 602 02a8 01F4      		brne .L9
 603 02aa 00E0      		ldi r16,lo8(256)
 604 02ac 11E0      		ldi r17,hi8(256)
 116:main.c        **** 	printf( "Read %u from %d\r\n",i,cnt);
 606               	.LM51:
 607 02ae 80E0      		ldi r24,lo8(.LC6)
 608 02b0 E82E      		mov r14,r24
 609 02b2 80E0      		ldi r24,hi8(.LC6)
 610 02b4 F82E      		mov r15,r24
 611               	.L10:
 115:main.c        **** 	i=nrk_eeprom_read_byte(cnt);
 613               	.LM52:
 614 02b6 C801      		movw r24,r16
 615 02b8 0E94 0000 		call nrk_eeprom_read_byte
 116:main.c        **** 	printf( "Read %u from %d\r\n",i,cnt);
 617               	.LM53:
 618 02bc 00D0      		rcall .
 619 02be 00D0      		rcall .
 620 02c0 00D0      		rcall .
 621 02c2 EDB7      		in r30,__SP_L__
 622 02c4 FEB7      		in r31,__SP_H__
 623 02c6 3196      		adiw r30,1
 624 02c8 ADB7      		in r26,__SP_L__
 625 02ca BEB7      		in r27,__SP_H__
 626 02cc 1296      		adiw r26,1+1
 627 02ce FC92      		st X,r15
 628 02d0 EE92      		st -X,r14
 629 02d2 1197      		sbiw r26,1
 630 02d4 8283      		std Z+2,r24
 631 02d6 1382      		std Z+3,__zero_reg__
 632 02d8 1583      		std Z+5,r17
 633 02da 0483      		std Z+4,r16
 634 02dc 0E94 0000 		call printf
 113:main.c        ****   for(cnt=0x100; cnt<0x110; cnt++ )
 636               	.LM54:
 637 02e0 0F5F      		subi r16,lo8(-(1))
 638 02e2 1F4F      		sbci r17,hi8(-(1))
 639 02e4 8DB7      		in r24,__SP_L__
 640 02e6 9EB7      		in r25,__SP_H__
 641 02e8 0696      		adiw r24,6
 642 02ea 0FB6      		in __tmp_reg__,__SREG__
 643 02ec F894      		cli
 644 02ee 9EBF      		out __SP_H__,r25
 645 02f0 0FBE      		out __SREG__,__tmp_reg__
 646 02f2 8DBF      		out __SP_L__,r24
 647 02f4 91E0      		ldi r25,hi8(272)
 648 02f6 0031      		cpi r16,lo8(272)
 649 02f8 1907      		cpc r17,r25
 650 02fa 01F4      		brne .L10
 123:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_0);
 652               	.LM55:
 653 02fc 0091 0000 		lds r16,NRK_DEBUG_0
 654               	.L11:
 122:main.c        **** 	nrk_led_toggle(ORANGE_LED);
 656               	.LM56:
 657 0300 80E0      		ldi r24,lo8(0)
 658 0302 90E0      		ldi r25,hi8(0)
 659 0304 0E94 0000 		call nrk_led_toggle
 123:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_0);
 661               	.LM57:
 662 0308 802F      		mov r24,r16
 663 030a 0E94 0000 		call nrk_gpio_toggle
 125:main.c        **** 	nrk_wait_until_next_period();
 665               	.LM58:
 666 030e 0E94 0000 		call nrk_wait_until_next_period
 667 0312 00C0      		rjmp .L11
 673               	.Lscope3:
 675               		.stabd	78,0,0
 677               	.global	main
 679               	main:
 680               		.stabd	46,0,0
  53:main.c        **** {
 682               	.LM59:
 683               	.LFBB4:
 684               	/* prologue: function */
 685               	/* frame size = 0 */
  55:main.c        ****   nrk_setup_ports();
 687               	.LM60:
 688 0314 0E94 0000 		call nrk_setup_ports
  56:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 690               	.LM61:
 691 0318 87E0      		ldi r24,lo8(7)
 692 031a 90E0      		ldi r25,hi8(7)
 693 031c 0E94 0000 		call nrk_setup_uart
  58:main.c        ****   nrk_kprintf( PSTR("Starting up...\r\n") );
 695               	.LM62:
 696 0320 80E0      		ldi r24,lo8(__c.2102)
 697 0322 90E0      		ldi r25,hi8(__c.2102)
 698 0324 0E94 0000 		call nrk_kprintf
  60:main.c        ****   nrk_init();
 700               	.LM63:
 701 0328 0E94 0000 		call nrk_init
  62:main.c        ****   nrk_led_clr(ORANGE_LED);
 703               	.LM64:
 704 032c 80E0      		ldi r24,lo8(0)
 705 032e 90E0      		ldi r25,hi8(0)
 706 0330 0E94 0000 		call nrk_led_clr
  63:main.c        ****   nrk_led_clr(BLUE_LED);
 708               	.LM65:
 709 0334 81E0      		ldi r24,lo8(1)
 710 0336 90E0      		ldi r25,hi8(1)
 711 0338 0E94 0000 		call nrk_led_clr
  64:main.c        ****   nrk_led_clr(GREEN_LED);
 713               	.LM66:
 714 033c 82E0      		ldi r24,lo8(2)
 715 033e 90E0      		ldi r25,hi8(2)
 716 0340 0E94 0000 		call nrk_led_clr
  65:main.c        ****   nrk_led_clr(RED_LED);
 718               	.LM67:
 719 0344 83E0      		ldi r24,lo8(3)
 720 0346 90E0      		ldi r25,hi8(3)
 721 0348 0E94 0000 		call nrk_led_clr
  67:main.c        ****   nrk_time_set(0,0);
 723               	.LM68:
 724 034c 60E0      		ldi r22,lo8(0)
 725 034e 70E0      		ldi r23,hi8(0)
 726 0350 80E0      		ldi r24,hlo8(0)
 727 0352 90E0      		ldi r25,hhi8(0)
 728 0354 20E0      		ldi r18,lo8(0)
 729 0356 30E0      		ldi r19,hi8(0)
 730 0358 40E0      		ldi r20,hlo8(0)
 731 035a 50E0      		ldi r21,hhi8(0)
 732 035c 0E94 0000 		call nrk_time_set
  68:main.c        ****   nrk_create_taskset ();
 734               	.LM69:
 735 0360 0E94 0000 		call nrk_create_taskset
  69:main.c        ****   nrk_start();
 737               	.LM70:
 738 0364 0E94 0000 		call nrk_start
  72:main.c        **** }
 740               	.LM71:
 741 0368 80E0      		ldi r24,lo8(0)
 742 036a 90E0      		ldi r25,hi8(0)
 743               	/* epilogue start */
 744 036c 0895      		ret
 746               	.Lscope4:
 748               		.stabd	78,0,0
 749               		.section	.progmem.data,"a",@progbits
 752               	__c.2113:
 753 0000 2A20 4552 		.string	"* ERROR reading MAC address\r\n"
 753      524F 5220 
 753      7265 6164 
 753      696E 6720 
 753      4D41 4320 
 756               	__c.2111:
 757 001e 4D41 4320 		.string	"MAC = 0x"
 757      3D20 3078 
 757      00
 760               	__c.2102:
 761 0027 5374 6172 		.string	"Starting up...\r\n"
 761      7469 6E67 
 761      2075 702E 
 761      2E2E 0D0A 
 761      00
 762               		.comm _nrk_signal_list,4,1
 763               		.comm nrk_idle_task_stk,128,1
 764               		.comm nrk_kernel_stk_ptr,2,1
 765               		.comm error_task,1,1
 766               		.comm error_num,1,1
 767               		.comm _nrk_prev_timer_val,1,1
 768               		.comm _nrk_time_trigger,1,1
 769               		.comm app_timer0_callback,2,1
 770               		.comm app_timer0_prescale,1,1
 771               		.comm Stack1,128,1
 772               		.comm TaskOne,35,1
 773               		.comm Stack2,128,1
 774               		.comm TaskTwo,35,1
 775               		.comm mac_address,4,1
 790               		.text
 792               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccK8dDO0.s:2      *ABS*:0000003f __SREG__
     /tmp/ccK8dDO0.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccK8dDO0.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccK8dDO0.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccK8dDO0.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccK8dDO0.s:141    .text:00000000 nrk_create_taskset
     /tmp/ccK8dDO0.s:388    .text:0000012a Task1
                            *COM*:00000023 TaskOne
                            *COM*:00000080 Stack1
     /tmp/ccK8dDO0.s:319    .text:000000e2 Task2
                            *COM*:00000023 TaskTwo
                            *COM*:00000080 Stack2
                            *COM*:00000004 mac_address
     /tmp/ccK8dDO0.s:756    .progmem.data:0000001e __c.2111
     /tmp/ccK8dDO0.s:752    .progmem.data:00000000 __c.2113
     /tmp/ccK8dDO0.s:679    .text:00000314 main
     /tmp/ccK8dDO0.s:760    .progmem.data:00000027 __c.2102
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
nrk_task_set_stk
nrk_activate_task
nrk_get_pid
printf
NRK_DEBUG_1
nrk_led_toggle
nrk_gpio_toggle
nrk_wait_until_next_period
read_eeprom_mac_address
nrk_kprintf
read_eeprom_channel
nrk_eeprom_write_byte
nrk_eeprom_read_byte
NRK_DEBUG_0
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_led_clr
nrk_time_set
nrk_start
