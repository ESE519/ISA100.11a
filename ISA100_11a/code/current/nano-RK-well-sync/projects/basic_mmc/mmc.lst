   1               		.file	"mmc.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  89               	.global	spi_byte
  91               	spi_byte:
  92               		.stabd	46,0,0
   1:mmc.c         **** /* ***********************************************************************
   2:mmc.c         **** **
   3:mmc.c         **** **  Copyright (C) 2006  Jesper Hansen <jesper@redegg.net> 
   4:mmc.c         **** **
   5:mmc.c         **** **
   6:mmc.c         **** **  Interface functions for MMC/SD cards
   7:mmc.c         **** **
   8:mmc.c         **** **  File mmc_if.h
   9:mmc.c         **** **
  10:mmc.c         **** *************************************************************************
  11:mmc.c         **** **
  12:mmc.c         **** **  This program is free software; you can redistribute it and/or
  13:mmc.c         **** **  modify it under the terms of the GNU General Public License
  14:mmc.c         **** **  as published by the Free Software Foundation; either version 2
  15:mmc.c         **** **  of the License, or (at your option) any later version.
  16:mmc.c         **** **
  17:mmc.c         **** **  This program is distributed in the hope that it will be useful,
  18:mmc.c         **** **  but WITHOUT ANY WARRANTY; without even the implied warranty of
  19:mmc.c         **** **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  20:mmc.c         **** **  GNU General Public License for more details.
  21:mmc.c         **** **
  22:mmc.c         **** **  You should have received a copy of the GNU General Public License
  23:mmc.c         **** **  along with this program; if not, write to the Free Software Foundation, 
  24:mmc.c         **** **  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  25:mmc.c         **** **
  26:mmc.c         **** *************************************************************************/
  27:mmc.c         **** 
  28:mmc.c         **** 
  29:mmc.c         **** #include <avr/io.h>
  30:mmc.c         **** #include <inttypes.h>
  31:mmc.c         **** #include <stdio.h>
  32:mmc.c         **** #include "mmc.h"
  33:mmc.c         **** 
  34:mmc.c         **** 
  35:mmc.c         **** void putlong(uint8_t x)
  36:mmc.c         **** {
  37:mmc.c         **** 	 if (x > 10) putlong(x / 10);
  38:mmc.c         **** 	putchar(x % 10+'0');
  39:mmc.c         **** 
  40:mmc.c         **** }
  41:mmc.c         **** /** Hardware SPI I/O. 
  42:mmc.c         **** 	\param byte Data to send over SPI bus
  43:mmc.c         **** 	\return Received data from SPI bus
  44:mmc.c         **** */
  45:mmc.c         **** uint8_t spi_byte(uint8_t byte)
  46:mmc.c         **** {
  94               	.LM0:
  95               	.LFBB1:
  96               	/* prologue: function */
  97               	/* frame size = 0 */
  47:mmc.c         **** 	//putlong(byte);
  48:mmc.c         **** 	//printf("\t");
  49:mmc.c         **** 	SPDR = byte;
  99               	.LM1:
 100 0000 8EBD      		out 78-0x20,r24
 101               	.L2:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 103               	.LM2:
 104 0002 0DB4      		in __tmp_reg__,77-0x20
 105 0004 07FE      		sbrs __tmp_reg__,7
 106 0006 00C0      		rjmp .L2
  51:mmc.c         **** 	{}
  52:mmc.c         **** 	return SPDR;
 108               	.LM3:
 109 0008 8EB5      		in r24,78-0x20
 110               	/* epilogue start */
  53:mmc.c         **** }
 112               	.LM4:
 113 000a 0895      		ret
 115               	.Lscope1:
 117               		.stabd	78,0,0
 120               	.global	mmc_send_command
 122               	mmc_send_command:
 123               		.stabd	46,0,0
  54:mmc.c         **** 
  55:mmc.c         **** 
  56:mmc.c         **** 
  57:mmc.c         **** 
  58:mmc.c         **** /** Send a command to the MMC/SD card.
  59:mmc.c         **** 	\param command	Command to send
  60:mmc.c         **** 	\param px	Command parameter 1
  61:mmc.c         **** 	\param py	Command parameter 2
  62:mmc.c         **** */
  63:mmc.c         **** void mmc_send_command(uint8_t command, uint16_t px, uint16_t py)
  64:mmc.c         **** {
 125               	.LM5:
 126               	.LFBB2:
 127               	/* prologue: function */
 128               	/* frame size = 0 */
  65:mmc.c         **** 
  66:mmc.c         **** 	register union u16convert r;
  67:mmc.c         **** 
  68:mmc.c         **** 	MMC_CS_PORT &= ~(1 << MMC_CS);	// enable CS
 130               	.LM6:
 131 000c 7698      		cbi 46-0x20,6
 132               	.LBB42:
 133               	.LBB43:
  49:mmc.c         **** 	SPDR = byte;
 135               	.LM7:
 136 000e 9FEF      		ldi r25,lo8(-1)
 137 0010 9EBD      		out 78-0x20,r25
 138               	.L7:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 140               	.LM8:
 141 0012 0DB4      		in __tmp_reg__,77-0x20
 142 0014 07FE      		sbrs __tmp_reg__,7
 143 0016 00C0      		rjmp .L7
  52:mmc.c         **** 	return SPDR;
 145               	.LM9:
 146 0018 9EB5      		in r25,78-0x20
 147               	.LBE43:
 148               	.LBE42:
  69:mmc.c         **** 
  70:mmc.c         **** 	spi_byte(0xff);			// dummy byte
  71:mmc.c         **** 
  72:mmc.c         **** 	spi_byte(command | 0x40);
 150               	.LM10:
 151 001a 8064      		ori r24,lo8(64)
 152               	.LBB44:
 153               	.LBB45:
  49:mmc.c         **** 	SPDR = byte;
 155               	.LM11:
 156 001c 8EBD      		out 78-0x20,r24
 157               	.L8:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 159               	.LM12:
 160 001e 0DB4      		in __tmp_reg__,77-0x20
 161 0020 07FE      		sbrs __tmp_reg__,7
 162 0022 00C0      		rjmp .L8
  52:mmc.c         **** 	return SPDR;
 164               	.LM13:
 165 0024 8EB5      		in r24,78-0x20
 166               	.LBE45:
 167               	.LBE44:
 168               	.LBB46:
 169               	.LBB47:
  49:mmc.c         **** 	SPDR = byte;
 171               	.LM14:
 172 0026 7EBD      		out 78-0x20,r23
 173               	.L9:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 175               	.LM15:
 176 0028 0DB4      		in __tmp_reg__,77-0x20
 177 002a 07FE      		sbrs __tmp_reg__,7
 178 002c 00C0      		rjmp .L9
  52:mmc.c         **** 	return SPDR;
 180               	.LM16:
 181 002e 8EB5      		in r24,78-0x20
 182               	.LBE47:
 183               	.LBE46:
 184               	.LBB48:
 185               	.LBB49:
  49:mmc.c         **** 	SPDR = byte;
 187               	.LM17:
 188 0030 6EBD      		out 78-0x20,r22
 189               	.L10:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 191               	.LM18:
 192 0032 0DB4      		in __tmp_reg__,77-0x20
 193 0034 07FE      		sbrs __tmp_reg__,7
 194 0036 00C0      		rjmp .L10
  52:mmc.c         **** 	return SPDR;
 196               	.LM19:
 197 0038 8EB5      		in r24,78-0x20
 198               	.LBE49:
 199               	.LBE48:
 200               	.LBB50:
 201               	.LBB51:
  49:mmc.c         **** 	SPDR = byte;
 203               	.LM20:
 204 003a 5EBD      		out 78-0x20,r21
 205               	.L11:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 207               	.LM21:
 208 003c 0DB4      		in __tmp_reg__,77-0x20
 209 003e 07FE      		sbrs __tmp_reg__,7
 210 0040 00C0      		rjmp .L11
  52:mmc.c         **** 	return SPDR;
 212               	.LM22:
 213 0042 8EB5      		in r24,78-0x20
 214               	.LBE51:
 215               	.LBE50:
 216               	.LBB52:
 217               	.LBB53:
  49:mmc.c         **** 	SPDR = byte;
 219               	.LM23:
 220 0044 4EBD      		out 78-0x20,r20
 221               	.L12:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 223               	.LM24:
 224 0046 0DB4      		in __tmp_reg__,77-0x20
 225 0048 07FE      		sbrs __tmp_reg__,7
 226 004a 00C0      		rjmp .L12
  52:mmc.c         **** 	return SPDR;
 228               	.LM25:
 229 004c 8EB5      		in r24,78-0x20
 230               	.LBE53:
 231               	.LBE52:
 232               	.LBB54:
 233               	.LBB55:
  49:mmc.c         **** 	SPDR = byte;
 235               	.LM26:
 236 004e 85E9      		ldi r24,lo8(-107)
 237 0050 8EBD      		out 78-0x20,r24
 238               	.L13:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 240               	.LM27:
 241 0052 0DB4      		in __tmp_reg__,77-0x20
 242 0054 07FE      		sbrs __tmp_reg__,7
 243 0056 00C0      		rjmp .L13
  52:mmc.c         **** 	return SPDR;
 245               	.LM28:
 246 0058 8EB5      		in r24,78-0x20
 247               	.LBE55:
 248               	.LBE54:
 249               	.LBB56:
 250               	.LBB57:
  49:mmc.c         **** 	SPDR = byte;
 252               	.LM29:
 253 005a 8FEF      		ldi r24,lo8(-1)
 254 005c 8EBD      		out 78-0x20,r24
 255               	.L14:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 257               	.LM30:
 258 005e 0DB4      		in __tmp_reg__,77-0x20
 259 0060 07FE      		sbrs __tmp_reg__,7
 260 0062 00C0      		rjmp .L14
  52:mmc.c         **** 	return SPDR;
 262               	.LM31:
 263 0064 8EB5      		in r24,78-0x20
 264               	/* epilogue start */
 265               	.LBE57:
 266               	.LBE56:
  73:mmc.c         **** 
  74:mmc.c         **** 	r.value = px;
  75:mmc.c         **** 	spi_byte(r.bytes.high);	// high byte of param x
  76:mmc.c         **** 	spi_byte(r.bytes.low);	// low byte of param x
  77:mmc.c         **** 
  78:mmc.c         **** 	r.value = py;
  79:mmc.c         **** 	spi_byte(r.bytes.high);	// high byte of param y
  80:mmc.c         **** 	spi_byte(r.bytes.low);	// low byte of param y
  81:mmc.c         **** 
  82:mmc.c         **** 	spi_byte(0x95);			// correct CRC for first command in SPI          
  83:mmc.c         **** 							// after that CRC is ignored, so no problem with 
  84:mmc.c         **** 							// always sending 0x95                           
  85:mmc.c         **** 	spi_byte(0xff);			// ignore return byte
  86:mmc.c         **** 
  87:mmc.c         **** }
 268               	.LM32:
 269 0066 0895      		ret
 271               	.Lscope2:
 273               		.stabd	78,0,0
 275               	.global	mmc_get
 277               	mmc_get:
 278               		.stabd	46,0,0
  88:mmc.c         **** 
  89:mmc.c         **** 
  90:mmc.c         **** /** Get Token.
  91:mmc.c         **** 	Wait for and return a non-ff token from the MMC/SD card
  92:mmc.c         **** 	\return The received token or 0xFF if timeout
  93:mmc.c         **** */
  94:mmc.c         **** uint8_t mmc_get(void)
  95:mmc.c         **** {
 280               	.LM33:
 281               	.LFBB3:
 282               	/* prologue: function */
 283               	/* frame size = 0 */
 285               	.LM34:
 286 0068 2FEF      		ldi r18,lo8(-1)
 287 006a 3FEF      		ldi r19,hi8(-1)
 288               	.LBB58:
 289               	.LBB59:
  49:mmc.c         **** 	SPDR = byte;
 291               	.LM35:
 292 006c 9FEF      		ldi r25,lo8(-1)
 293 006e 00C0      		rjmp .L25
 294               	.L28:
 295 0070 9EBD      		out 78-0x20,r25
 296               	.L26:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 298               	.LM36:
 299 0072 0DB4      		in __tmp_reg__,77-0x20
 300 0074 07FE      		sbrs __tmp_reg__,7
 301 0076 00C0      		rjmp .L26
  52:mmc.c         **** 	return SPDR;
 303               	.LM37:
 304 0078 8EB5      		in r24,78-0x20
 305               	.LBE59:
 306               	.LBE58:
  96:mmc.c         **** 	uint16_t i = 0xffff;
  97:mmc.c         **** 	uint8_t b = 0xff;
  98:mmc.c         **** 
  99:mmc.c         **** 	while ((b == 0xff) && (--i)) 
 308               	.LM38:
 309 007a 8F3F      		cpi r24,lo8(-1)
 310 007c 01F4      		brne .L27
 311               	.L25:
 312 007e 2150      		subi r18,lo8(-(-1))
 313 0080 3040      		sbci r19,hi8(-(-1))
 314 0082 01F4      		brne .L28
 315 0084 8FEF      		ldi r24,lo8(-1)
 316               	.L27:
 100:mmc.c         **** 	{
 101:mmc.c         **** 		b = spi_byte(0xff);
 102:mmc.c         **** 	}
 103:mmc.c         **** 	return b;
 104:mmc.c         **** 
 105:mmc.c         **** }
 318               	.LM39:
 319 0086 0895      		ret
 325               	.Lscope3:
 327               		.stabd	78,0,0
 329               	.global	mmc_datatoken
 331               	mmc_datatoken:
 332               		.stabd	46,0,0
 106:mmc.c         **** 
 107:mmc.c         **** /** Get Datatoken.
 108:mmc.c         **** 	Wait for and return a data token from the MMC/SD card
 109:mmc.c         **** 	\return The received token or 0xFF if timeout
 110:mmc.c         **** */
 111:mmc.c         **** uint8_t mmc_datatoken(void)
 112:mmc.c         **** {
 334               	.LM40:
 335               	.LFBB4:
 336               	/* prologue: function */
 337               	/* frame size = 0 */
 339               	.LM41:
 340 0088 2FEF      		ldi r18,lo8(-1)
 341 008a 3FEF      		ldi r19,hi8(-1)
 342 008c 8FEF      		ldi r24,lo8(-1)
 343               	.LBB60:
 344               	.LBB61:
  49:mmc.c         **** 	SPDR = byte;
 346               	.LM42:
 347 008e 9FEF      		ldi r25,lo8(-1)
 348 0090 00C0      		rjmp .L32
 349               	.L35:
 350 0092 9EBD      		out 78-0x20,r25
 351               	.L33:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 353               	.LM43:
 354 0094 0DB4      		in __tmp_reg__,77-0x20
 355 0096 07FE      		sbrs __tmp_reg__,7
 356 0098 00C0      		rjmp .L33
  52:mmc.c         **** 	return SPDR;
 358               	.LM44:
 359 009a 8EB5      		in r24,78-0x20
 360               	.LBE61:
 361               	.LBE60:
 113:mmc.c         **** 	uint16_t i = 0xffff;
 114:mmc.c         **** 	uint8_t b = 0xff;
 115:mmc.c         **** 
 116:mmc.c         **** 	while ((b != 0xfe) && (--i)) 
 363               	.LM45:
 364 009c 8E3F      		cpi r24,lo8(-2)
 365 009e 01F0      		breq .L34
 366               	.L32:
 367 00a0 2150      		subi r18,lo8(-(-1))
 368 00a2 3040      		sbci r19,hi8(-(-1))
 369 00a4 01F4      		brne .L35
 370               	.L34:
 117:mmc.c         **** 	{
 118:mmc.c         **** 		b = spi_byte(0xff);
 119:mmc.c         **** 	}
 120:mmc.c         **** 	return b;
 121:mmc.c         **** }
 372               	.LM46:
 373 00a6 0895      		ret
 379               	.Lscope4:
 381               		.stabd	78,0,0
 383               	.global	mmc_clock_and_release
 385               	mmc_clock_and_release:
 386               		.stabd	46,0,0
 122:mmc.c         **** 
 123:mmc.c         **** 
 124:mmc.c         **** /** Finish Clocking and Release card.
 125:mmc.c         **** 	Send 10 clocks to the MMC/SD card
 126:mmc.c         ****  	and release the CS line 
 127:mmc.c         **** */
 128:mmc.c         **** void mmc_clock_and_release(void)
 129:mmc.c         **** {
 388               	.LM47:
 389               	.LFBB5:
 390               	/* prologue: function */
 391               	/* frame size = 0 */
 393               	.LM48:
 394 00a8 80E0      		ldi r24,lo8(0)
 395               	.LBB62:
 396               	.LBB63:
  49:mmc.c         **** 	SPDR = byte;
 398               	.LM49:
 399 00aa 9FEF      		ldi r25,lo8(-1)
 400               	.L40:
 401 00ac 9EBD      		out 78-0x20,r25
 402               	.L39:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 404               	.LM50:
 405 00ae 0DB4      		in __tmp_reg__,77-0x20
 406 00b0 07FE      		sbrs __tmp_reg__,7
 407 00b2 00C0      		rjmp .L39
  52:mmc.c         **** 	return SPDR;
 409               	.LM51:
 410 00b4 2EB5      		in r18,78-0x20
 411               	.LBE63:
 412               	.LBE62:
 130:mmc.c         **** 	uint8_t i;
 131:mmc.c         **** 
 132:mmc.c         **** 	// SD cards require at least 8 final clocks
 133:mmc.c         **** 	for(i=0;i<10;i++)
 414               	.LM52:
 415 00b6 8F5F      		subi r24,lo8(-(1))
 416 00b8 8A30      		cpi r24,lo8(10)
 417 00ba 01F4      		brne .L40
 134:mmc.c         **** 		spi_byte(0xff);	
 135:mmc.c         **** 
 136:mmc.c         ****     MMC_CS_PORT |= (1 << MMC_CS);	// release CS
 419               	.LM53:
 420 00bc 769A      		sbi 46-0x20,6
 421               	/* epilogue start */
 137:mmc.c         **** }
 423               	.LM54:
 424 00be 0895      		ret
 429               	.Lscope5:
 431               		.stabd	78,0,0
 435               	.global	mmc_readsector
 437               	mmc_readsector:
 438               		.stabd	46,0,0
 138:mmc.c         **** 
 139:mmc.c         **** 
 140:mmc.c         **** 
 141:mmc.c         **** /** Read MMC/SD sector.
 142:mmc.c         ****  	Read a single 512 byte sector from the MMC/SD card
 143:mmc.c         **** 	\param lba	Logical sectornumber to read
 144:mmc.c         **** 	\param buffer	Pointer to buffer for received data
 145:mmc.c         **** 	\return 0 on success, -1 on error
 146:mmc.c         **** */
 147:mmc.c         **** int mmc_readsector(uint32_t lba, uint8_t *buffer)
 148:mmc.c         **** {
 440               	.LM55:
 441               	.LFBB6:
 442 00c0 0F93      		push r16
 443 00c2 1F93      		push r17
 444 00c4 CF93      		push r28
 445 00c6 DF93      		push r29
 446               	/* prologue: function */
 447               	/* frame size = 0 */
 448 00c8 DC01      		movw r26,r24
 449 00ca CB01      		movw r24,r22
 450 00cc EA01      		movw r28,r20
 149:mmc.c         **** 	uint16_t i;
 150:mmc.c         **** 
 151:mmc.c         **** 	// send read command and logical sector address
 152:mmc.c         **** 	mmc_send_command(17,(lba>>7) & 0xffff, (lba<<9) & 0xffff);
 452               	.LM56:
 453 00ce 8C01      		movw r16,r24
 454 00d0 9D01      		movw r18,r26
 455 00d2 47E0      		ldi r20,7
 456 00d4 3695      	1:	lsr r19
 457 00d6 2795      		ror r18
 458 00d8 1795      		ror r17
 459 00da 0795      		ror r16
 460 00dc 4A95      		dec r20
 461 00de 01F4      		brne 1b
 462 00e0 AC01      		movw r20,r24
 463 00e2 542F      		mov r21,r20
 464 00e4 4427      		clr r20
 465 00e6 550F      		lsl r21
 466 00e8 81E1      		ldi r24,lo8(17)
 467 00ea B801      		movw r22,r16
 468 00ec 0E94 0000 		call mmc_send_command
 153:mmc.c         **** 
 154:mmc.c         **** 	if (mmc_datatoken() != 0xfe)	// if no valid token
 470               	.LM57:
 471 00f0 0E94 0000 		call mmc_datatoken
 472 00f4 8E3F      		cpi r24,lo8(-2)
 473 00f6 01F0      		breq .L45
 155:mmc.c         **** 	{
 156:mmc.c         **** 	    mmc_clock_and_release();	// cleanup and	
 475               	.LM58:
 476 00f8 0E94 0000 		call mmc_clock_and_release
 477 00fc 2FEF      		ldi r18,lo8(-1)
 478 00fe 3FEF      		ldi r19,hi8(-1)
 157:mmc.c         ****    		return -1;					// return error code
 480               	.LM59:
 481 0100 00C0      		rjmp .L46
 482               	.L45:
 483 0102 80E0      		ldi r24,lo8(0)
 484 0104 90E0      		ldi r25,hi8(0)
 485               	.LBB64:
 486               	.LBB65:
  49:mmc.c         **** 	SPDR = byte;
 488               	.LM60:
 489 0106 2FEF      		ldi r18,lo8(-1)
 490               	.L49:
 491 0108 2EBD      		out 78-0x20,r18
 492               	.L47:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 494               	.LM61:
 495 010a 0DB4      		in __tmp_reg__,77-0x20
 496 010c 07FE      		sbrs __tmp_reg__,7
 497 010e 00C0      		rjmp .L47
  52:mmc.c         **** 	return SPDR;
 499               	.LM62:
 500 0110 3EB5      		in r19,78-0x20
 501               	.LBE65:
 502               	.LBE64:
 158:mmc.c         **** 	}
 159:mmc.c         **** 
 160:mmc.c         **** 	for (i=0;i<512;i++)				// read sector data
 161:mmc.c         ****     	*buffer++ = spi_byte(0xff);
 504               	.LM63:
 505 0112 3883      		st Y,r19
 160:mmc.c         **** 	for (i=0;i<512;i++)				// read sector data
 507               	.LM64:
 508 0114 0196      		adiw r24,1
 509 0116 32E0      		ldi r19,hi8(512)
 510 0118 8030      		cpi r24,lo8(512)
 511 011a 9307      		cpc r25,r19
 512 011c 01F0      		breq .L48
 514               	.LM65:
 515 011e 2196      		adiw r28,1
 516 0120 00C0      		rjmp .L49
 517               	.L48:
 518               	.LBB66:
 519               	.LBB67:
  49:mmc.c         **** 	SPDR = byte;
 521               	.LM66:
 522 0122 8FEF      		ldi r24,lo8(-1)
 523 0124 8EBD      		out 78-0x20,r24
 524               	.L50:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 526               	.LM67:
 527 0126 0DB4      		in __tmp_reg__,77-0x20
 528 0128 07FE      		sbrs __tmp_reg__,7
 529 012a 00C0      		rjmp .L50
  52:mmc.c         **** 	return SPDR;
 531               	.LM68:
 532 012c 8EB5      		in r24,78-0x20
 533               	.LBE67:
 534               	.LBE66:
 535               	.LBB68:
 536               	.LBB69:
  49:mmc.c         **** 	SPDR = byte;
 538               	.LM69:
 539 012e 8FEF      		ldi r24,lo8(-1)
 540 0130 8EBD      		out 78-0x20,r24
 541               	.L51:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 543               	.LM70:
 544 0132 0DB4      		in __tmp_reg__,77-0x20
 545 0134 07FE      		sbrs __tmp_reg__,7
 546 0136 00C0      		rjmp .L51
  52:mmc.c         **** 	return SPDR;
 548               	.LM71:
 549 0138 8EB5      		in r24,78-0x20
 550               	.LBE69:
 551               	.LBE68:
 162:mmc.c         **** 
 163:mmc.c         **** 	spi_byte(0xff);					// ignore dummy checksum
 164:mmc.c         **** 	spi_byte(0xff);					// ignore dummy checksum
 165:mmc.c         **** 
 166:mmc.c         ****     mmc_clock_and_release();		// cleanup
 553               	.LM72:
 554 013a 0E94 0000 		call mmc_clock_and_release
 555 013e 20E0      		ldi r18,lo8(0)
 556 0140 30E0      		ldi r19,hi8(0)
 557               	.L46:
 167:mmc.c         **** 
 168:mmc.c         **** 	return 0;						// return success		
 169:mmc.c         **** }
 559               	.LM73:
 560 0142 C901      		movw r24,r18
 561               	/* epilogue start */
 562 0144 DF91      		pop r29
 563 0146 CF91      		pop r28
 564 0148 1F91      		pop r17
 565 014a 0F91      		pop r16
 566 014c 0895      		ret
 571               	.Lscope6:
 573               		.stabd	78,0,0
 577               	.global	mmc_writesector
 579               	mmc_writesector:
 580               		.stabd	46,0,0
 170:mmc.c         **** 
 171:mmc.c         **** 
 172:mmc.c         **** /** Write MMC/SD sector.
 173:mmc.c         ****  	Read a single 512 byte sector from the MMC/SD card
 174:mmc.c         **** 	\param lba	Logical sectornumber to read
 175:mmc.c         **** 	\param buffer	Pointer to buffer for received data
 176:mmc.c         **** 	\return 0 on success, -1 on error
 177:mmc.c         **** */
 178:mmc.c         **** int mmc_writesector(uint32_t lba, uint8_t *buffer)
 179:mmc.c         **** {
 582               	.LM74:
 583               	.LFBB7:
 584 014e 0F93      		push r16
 585 0150 1F93      		push r17
 586 0152 CF93      		push r28
 587 0154 DF93      		push r29
 588               	/* prologue: function */
 589               	/* frame size = 0 */
 590 0156 DC01      		movw r26,r24
 591 0158 CB01      		movw r24,r22
 592 015a EA01      		movw r28,r20
 180:mmc.c         **** 	uint16_t i;
 181:mmc.c         **** 	uint8_t t,b,j;
 182:mmc.c         **** 	// send read command and logical sector address
 183:mmc.c         **** 	mmc_send_command(24,(lba>>7) & 0xffff, (lba<<9) & 0xffff);
 594               	.LM75:
 595 015c 8C01      		movw r16,r24
 596 015e 9D01      		movw r18,r26
 597 0160 77E0      		ldi r23,7
 598 0162 3695      	1:	lsr r19
 599 0164 2795      		ror r18
 600 0166 1795      		ror r17
 601 0168 0795      		ror r16
 602 016a 7A95      		dec r23
 603 016c 01F4      		brne 1b
 604 016e AC01      		movw r20,r24
 605 0170 542F      		mov r21,r20
 606 0172 4427      		clr r20
 607 0174 550F      		lsl r21
 608 0176 88E1      		ldi r24,lo8(24)
 609 0178 B801      		movw r22,r16
 610 017a 0E94 0000 		call mmc_send_command
 184:mmc.c         **** 
 185:mmc.c         **** 	/*if (mmc_datatoken() != 0xfe)	// if no valid token
 186:mmc.c         **** 	{
 187:mmc.c         **** 	    printf( "no valid data token\r\n" );
 188:mmc.c         **** 	    mmc_clock_and_release();	// cleanup and	
 189:mmc.c         ****    		return -1;					// return error code
 190:mmc.c         **** 	}*/
 191:mmc.c         **** 	mmc_get();
 612               	.LM76:
 613 017e 0E94 0000 		call mmc_get
 614               	.LBB70:
 615               	.LBB71:
  49:mmc.c         **** 	SPDR = byte;
 617               	.LM77:
 618 0182 8EEF      		ldi r24,lo8(-2)
 619 0184 8EBD      		out 78-0x20,r24
 620               	.L57:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 622               	.LM78:
 623 0186 0DB4      		in __tmp_reg__,77-0x20
 624 0188 07FE      		sbrs __tmp_reg__,7
 625 018a 00C0      		rjmp .L57
  52:mmc.c         **** 	return SPDR;
 627               	.LM79:
 628 018c 8EB5      		in r24,78-0x20
 629 018e 80E0      		ldi r24,lo8(0)
 630 0190 90E0      		ldi r25,hi8(0)
 631               	.L59:
 632               	.LBE71:
 633               	.LBE70:
 192:mmc.c         **** 	spi_byte(0xFE);
 193:mmc.c         **** 	for (i=0;i<512;i++)				// read sector data
 194:mmc.c         ****     		{
 195:mmc.c         **** 		spi_byte(buffer[i]);
 635               	.LM80:
 636 0192 FE01      		movw r30,r28
 637 0194 E80F      		add r30,r24
 638 0196 F91F      		adc r31,r25
 639 0198 2081      		ld r18,Z
 640               	.LBB72:
 641               	.LBB73:
  49:mmc.c         **** 	SPDR = byte;
 643               	.LM81:
 644 019a 2EBD      		out 78-0x20,r18
 645               	.L58:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 647               	.LM82:
 648 019c 0DB4      		in __tmp_reg__,77-0x20
 649 019e 07FE      		sbrs __tmp_reg__,7
 650 01a0 00C0      		rjmp .L58
  52:mmc.c         **** 	return SPDR;
 652               	.LM83:
 653 01a2 2EB5      		in r18,78-0x20
 654               	.LBE73:
 655               	.LBE72:
 193:mmc.c         **** 	for (i=0;i<512;i++)				// read sector data
 657               	.LM84:
 658 01a4 0196      		adiw r24,1
 659 01a6 22E0      		ldi r18,hi8(512)
 660 01a8 8030      		cpi r24,lo8(512)
 661 01aa 9207      		cpc r25,r18
 662 01ac 01F4      		brne .L59
 663               	.LBB74:
 664               	.LBB75:
  49:mmc.c         **** 	SPDR = byte;
 666               	.LM85:
 667 01ae 8FEF      		ldi r24,lo8(-1)
 668 01b0 8EBD      		out 78-0x20,r24
 669               	.L60:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 671               	.LM86:
 672 01b2 0DB4      		in __tmp_reg__,77-0x20
 673 01b4 07FE      		sbrs __tmp_reg__,7
 674 01b6 00C0      		rjmp .L60
  52:mmc.c         **** 	return SPDR;
 676               	.LM87:
 677 01b8 8EB5      		in r24,78-0x20
 678               	.LBE75:
 679               	.LBE74:
 680               	.LBB76:
 681               	.LBB77:
  49:mmc.c         **** 	SPDR = byte;
 683               	.LM88:
 684 01ba 8FEF      		ldi r24,lo8(-1)
 685 01bc 8EBD      		out 78-0x20,r24
 686               	.L61:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 688               	.LM89:
 689 01be 0DB4      		in __tmp_reg__,77-0x20
 690 01c0 07FE      		sbrs __tmp_reg__,7
 691 01c2 00C0      		rjmp .L61
  52:mmc.c         **** 	return SPDR;
 693               	.LM90:
 694 01c4 8EB5      		in r24,78-0x20
 695               	.LBE77:
 696               	.LBE76:
 196:mmc.c         **** 		}
 197:mmc.c         **** 
 198:mmc.c         **** 	spi_byte(0xff);					// ignore dummy checksum
 199:mmc.c         **** 	spi_byte(0xff);					// ignore dummy checksum
 200:mmc.c         **** 
 201:mmc.c         ****     mmc_clock_and_release();		// cleanup
 698               	.LM91:
 699 01c6 0E94 0000 		call mmc_clock_and_release
 202:mmc.c         **** 
 203:mmc.c         **** 	return 0;						// return success		
 204:mmc.c         **** }
 701               	.LM92:
 702 01ca 80E0      		ldi r24,lo8(0)
 703 01cc 90E0      		ldi r25,hi8(0)
 704               	/* epilogue start */
 705 01ce DF91      		pop r29
 706 01d0 CF91      		pop r28
 707 01d2 1F91      		pop r17
 708 01d4 0F91      		pop r16
 709 01d6 0895      		ret
 714               	.Lscope7:
 716               		.stabd	78,0,0
 718               	.global	mmc_card_detect
 720               	mmc_card_detect:
 721               		.stabd	46,0,0
 205:mmc.c         **** 
 206:mmc.c         **** uint8_t mmc_card_detect()
 207:mmc.c         **** {
 723               	.LM93:
 724               	.LFBB8:
 725               	/* prologue: function */
 726               	/* frame size = 0 */
 208:mmc.c         **** return (!(MMC_DETECT_PIN & (1<<MMC_DETECT)));
 728               	.LM94:
 729 01d8 83B1      		in r24,35-0x20
 730 01da 8295      		swap r24
 731 01dc 8F70      		andi r24,lo8(15)
 732 01de 8095      		com r24
 209:mmc.c         **** 
 210:mmc.c         **** }
 734               	.LM95:
 735 01e0 8170      		andi r24,lo8(1)
 736               	/* epilogue start */
 737 01e2 0895      		ret
 739               	.Lscope8:
 741               		.stabd	78,0,0
 743               	.global	mmc_init
 745               	mmc_init:
 746               		.stabd	46,0,0
 211:mmc.c         **** 
 212:mmc.c         **** 
 213:mmc.c         **** 
 214:mmc.c         **** /** Init MMC/SD card.
 215:mmc.c         **** 	Initialize I/O ports for the MMC/SD interface and 
 216:mmc.c         **** 	send init commands to the MMC/SD card
 217:mmc.c         **** 	\return 0 on success, other values on error 
 218:mmc.c         **** */
 219:mmc.c         **** uint8_t mmc_init(void)
 220:mmc.c         **** {
 748               	.LM96:
 749               	.LFBB9:
 750 01e4 1F93      		push r17
 751               	/* prologue: function */
 752               	/* frame size = 0 */
 221:mmc.c         **** 	int i;
 222:mmc.c         **** 
 223:mmc.c         **** 
 224:mmc.c         **** 	// setup I/O ports 
 225:mmc.c         **** 
 226:mmc.c         **** 	SPI_PORT &= ~((1 << MMC_SCK) | (1 << MMC_MOSI));	// low bits
 754               	.LM97:
 755 01e6 85B1      		in r24,37-0x20
 756 01e8 897F      		andi r24,lo8(-7)
 757 01ea 85B9      		out 37-0x20,r24
 227:mmc.c         **** 	SPI_PORT |= (1 << MMC_MISO);						// high bits
 759               	.LM98:
 760 01ec 2B9A      		sbi 37-0x20,3
 228:mmc.c         **** 	SPI_DDR  |= (1<<MMC_SCK) | (1<<MMC_MOSI);			// direction
 762               	.LM99:
 763 01ee 84B1      		in r24,36-0x20
 764 01f0 8660      		ori r24,lo8(6)
 765 01f2 84B9      		out 36-0x20,r24
 229:mmc.c         **** 
 230:mmc.c         **** 
 231:mmc.c         **** 	MMC_DETECT_PORT |= (1 << MMC_DETECT);	// Initial level is high	
 767               	.LM100:
 768 01f4 2C9A      		sbi 37-0x20,4
 232:mmc.c         **** 	MMC_DETECT_DDR  &= ~(1 << MMC_DETECT);	// Direction is input 
 770               	.LM101:
 771 01f6 2498      		cbi 36-0x20,4
 233:mmc.c         **** 	
 234:mmc.c         **** 	MMC_CS_PORT |= (1 << MMC_CS);	// Initial level is high	
 773               	.LM102:
 774 01f8 769A      		sbi 46-0x20,6
 235:mmc.c         **** 	MMC_CS_DIR  |= (1 << MMC_CS);	// Direction is output
 776               	.LM103:
 777 01fa 6E9A      		sbi 45-0x20,6
 236:mmc.c         **** 
 237:mmc.c         **** 
 238:mmc.c         **** //	SPI_DDR |= (1<<0);			// assume it's bit0 (mega128, portB and others)
 239:mmc.c         **** 
 240:mmc.c         **** 	SPCR = (1<<MSTR)|(1<<SPE);	// enable SPI interface
 779               	.LM104:
 780 01fc 80E5      		ldi r24,lo8(80)
 781 01fe 8CBD      		out 76-0x20,r24
 241:mmc.c         **** 	SPSR = 1;					// set double speed	
 783               	.LM105:
 784 0200 81E0      		ldi r24,lo8(1)
 785 0202 8DBD      		out 77-0x20,r24
 786 0204 80E0      		ldi r24,lo8(0)
 787 0206 90E0      		ldi r25,hi8(0)
 788               	.LBB78:
 789               	.LBB79:
  49:mmc.c         **** 	SPDR = byte;
 791               	.LM106:
 792 0208 2FEF      		ldi r18,lo8(-1)
 793               	.L72:
 794 020a 2EBD      		out 78-0x20,r18
 795               	.L71:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 797               	.LM107:
 798 020c 0DB4      		in __tmp_reg__,77-0x20
 799 020e 07FE      		sbrs __tmp_reg__,7
 800 0210 00C0      		rjmp .L71
  52:mmc.c         **** 	return SPDR;
 802               	.LM108:
 803 0212 3EB5      		in r19,78-0x20
 804               	.LBE79:
 805               	.LBE78:
 242:mmc.c         **** 
 243:mmc.c         **** 
 244:mmc.c         **** 	for(i=0;i<10;i++)			// send 80 clocks while card power stabilizes
 807               	.LM109:
 808 0214 0196      		adiw r24,1
 809 0216 8A30      		cpi r24,10
 810 0218 9105      		cpc r25,__zero_reg__
 811 021a 01F4      		brne .L72
 245:mmc.c         **** 		spi_byte(0xff);
 246:mmc.c         **** 
 247:mmc.c         **** 	mmc_send_command(0,0,0);	// send CMD0 - reset card
 813               	.LM110:
 814 021c 80E0      		ldi r24,lo8(0)
 815 021e 60E0      		ldi r22,lo8(0)
 816 0220 70E0      		ldi r23,hi8(0)
 817 0222 40E0      		ldi r20,lo8(0)
 818 0224 50E0      		ldi r21,hi8(0)
 819 0226 0E94 0000 		call mmc_send_command
 248:mmc.c         **** 
 249:mmc.c         **** 	if (mmc_get() != 1)			// if no valid response code
 821               	.LM111:
 822 022a 0E94 0000 		call mmc_get
 823 022e 8130      		cpi r24,lo8(1)
 824 0230 01F0      		breq .L73
 250:mmc.c         **** 	{
 251:mmc.c         **** 	   mmc_clock_and_release();
 826               	.LM112:
 827 0232 0E94 0000 		call mmc_clock_and_release
 828 0236 81E0      		ldi r24,lo8(1)
 252:mmc.c         **** 	   //putchar('a');
 253:mmc.c         **** 	   return 1;  				// card cannot be detected
 830               	.LM113:
 831 0238 00C0      		rjmp .L74
 832               	.L73:
 833               	.LBB80:
 834               	.LBB81:
  49:mmc.c         **** 	SPDR = byte;
 836               	.LM114:
 837 023a 1FEF      		ldi r17,lo8(-1)
 838               	.L81:
 839 023c 1EBD      		out 78-0x20,r17
 840               	.L75:
  50:mmc.c         **** 	while(!(SPSR & (1<<SPIF)))
 842               	.LM115:
 843 023e 0DB4      		in __tmp_reg__,77-0x20
 844 0240 07FE      		sbrs __tmp_reg__,7
 845 0242 00C0      		rjmp .L75
  52:mmc.c         **** 	return SPDR;
 847               	.LM116:
 848 0244 8EB5      		in r24,78-0x20
 849               	.LBE81:
 850               	.LBE80:
 254:mmc.c         **** 	}
 255:mmc.c         **** 
 256:mmc.c         **** 	//
 257:mmc.c         **** 	// send CMD1 until we get a 0 back, indicating card is done initializing 
 258:mmc.c         **** 	//
 259:mmc.c         **** 	i = 0xffff;						// max timeout
 260:mmc.c         **** 	while ((spi_byte(0xff) != 0) && (--i))	// wait for it
 852               	.LM117:
 853 0246 8823      		tst r24
 854 0248 01F0      		breq .L76
 261:mmc.c         **** 	{
 262:mmc.c         **** 		//putchar('b');
 263:mmc.c         **** 	     mmc_send_command(1,0,0);	// send CMD1 - activate card init
 856               	.LM118:
 857 024a 81E0      		ldi r24,lo8(1)
 858 024c 60E0      		ldi r22,lo8(0)
 859 024e 70E0      		ldi r23,hi8(0)
 860 0250 40E0      		ldi r20,lo8(0)
 861 0252 50E0      		ldi r21,hi8(0)
 862 0254 0E94 0000 		call mmc_send_command
 863 0258 00C0      		rjmp .L81
 864               	.L76:
 264:mmc.c         **** 
 265:mmc.c         **** 	}
 266:mmc.c         **** 	   putchar('v');
 866               	.LM119:
 867 025a 6091 0000 		lds r22,__iob+2
 868 025e 7091 0000 		lds r23,(__iob+2)+1
 869 0262 86E7      		ldi r24,lo8(118)
 870 0264 90E0      		ldi r25,hi8(118)
 871 0266 0E94 0000 		call fputc
 267:mmc.c         ****     mmc_clock_and_release();		// clean up
 873               	.LM120:
 874 026a 0E94 0000 		call mmc_clock_and_release
 875 026e 80E0      		ldi r24,lo8(0)
 876               	.L74:
 877               	/* epilogue start */
 268:mmc.c         **** 
 269:mmc.c         **** 	if (i == 0)						// if we timed out above
 270:mmc.c         **** 	   return 2;					// return failure code
 271:mmc.c         **** 
 272:mmc.c         **** 
 273:mmc.c         **** 	return 0;
 274:mmc.c         **** }
 879               	.LM121:
 880 0270 1F91      		pop r17
 881 0272 0895      		ret
 886               	.Lscope9:
 888               		.stabd	78,0,0
 891               	.global	putlong
 893               	putlong:
 894               		.stabd	46,0,0
  36:mmc.c         **** {
 896               	.LM122:
 897               	.LFBB10:
 898 0274 1F93      		push r17
 899               	/* prologue: function */
 900               	/* frame size = 0 */
 901 0276 182F      		mov r17,r24
  37:mmc.c         **** 	 if (x > 10) putlong(x / 10);
 903               	.LM123:
 904 0278 8B30      		cpi r24,lo8(11)
 905 027a 00F0      		brlo .L83
 906 027c 6AE0      		ldi r22,lo8(10)
 907 027e 0E94 0000 		call __udivmodqi4
 908 0282 0E94 0000 		call putlong
 909               	.L83:
  38:mmc.c         **** 	putchar(x % 10+'0');
 911               	.LM124:
 912 0286 812F      		mov r24,r17
 913 0288 6AE0      		ldi r22,lo8(10)
 914 028a 0E94 0000 		call __udivmodqi4
 915 028e 892F      		mov r24,r25
 916 0290 90E0      		ldi r25,lo8(0)
 917 0292 6091 0000 		lds r22,__iob+2
 918 0296 7091 0000 		lds r23,(__iob+2)+1
 919 029a C096      		adiw r24,48
 920 029c 0E94 0000 		call fputc
 921               	/* epilogue start */
  40:mmc.c         **** }
 923               	.LM125:
 924 02a0 1F91      		pop r17
 925 02a2 0895      		ret
 927               	.Lscope10:
 929               		.stabd	78,0,0
 931               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 mmc.c
     /tmp/ccaZvwug.s:2      *ABS*:0000003f __SREG__
     /tmp/ccaZvwug.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccaZvwug.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccaZvwug.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccaZvwug.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccaZvwug.s:91     .text:00000000 spi_byte
     /tmp/ccaZvwug.s:122    .text:0000000c mmc_send_command
     /tmp/ccaZvwug.s:277    .text:00000068 mmc_get
     /tmp/ccaZvwug.s:331    .text:00000088 mmc_datatoken
     /tmp/ccaZvwug.s:385    .text:000000a8 mmc_clock_and_release
     /tmp/ccaZvwug.s:437    .text:000000c0 mmc_readsector
     /tmp/ccaZvwug.s:579    .text:0000014e mmc_writesector
     /tmp/ccaZvwug.s:720    .text:000001d8 mmc_card_detect
     /tmp/ccaZvwug.s:745    .text:000001e4 mmc_init
     /tmp/ccaZvwug.s:893    .text:00000274 putlong

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__iob
fputc
__udivmodqi4
