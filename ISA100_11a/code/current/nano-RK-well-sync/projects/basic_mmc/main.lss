
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000164  00800200  00005806  0000589a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005806  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000850  00800364  00800364  000059fe  2**0
                  ALLOC
  3 .stab         0000e04c  00000000  00000000  00005a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000051f5  00000000  00000000  00013a4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__ctors_end>
       4:	0c 94 6f 26 	jmp	0x4cde	; 0x4cde <__vector_1>
       8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
       c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      10:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      14:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      18:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      1c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      20:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      24:	0c 94 a1 26 	jmp	0x4d42	; 0x4d42 <__vector_9>
      28:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      2c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      30:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      34:	0c 94 d3 24 	jmp	0x49a6	; 0x49a6 <__vector_13>
      38:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      3c:	0c 94 d3 24 	jmp	0x49a6	; 0x49a6 <__vector_13>
      40:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      44:	0c 94 06 25 	jmp	0x4a0c	; 0x4a0c <__vector_17>
      48:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      4c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      50:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      54:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      58:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      5c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      60:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      64:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      68:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      6c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      70:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      74:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      78:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      7c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      80:	0c 94 10 25 	jmp	0x4a20	; 0x4a20 <__vector_32>
      84:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      88:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      8c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      90:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      94:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      98:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      9c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a0:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      a8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      ac:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      b0:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      b4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      b8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      bc:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      c0:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      c4:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      c8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__bad_interrupt>
      cc:	c2 16       	cp	r12, r18
      ce:	c8 16       	cp	r12, r24
      d0:	cb 16       	cp	r12, r27
      d2:	ce 16       	cp	r12, r30
      d4:	d1 16       	cp	r13, r17
      d6:	d4 16       	cp	r13, r20
      d8:	da 16       	cp	r13, r26
      da:	d7 16       	cp	r13, r23
      dc:	dd 16       	cp	r13, r29
      de:	e0 16       	cp	r14, r16
      e0:	e3 16       	cp	r14, r19
      e2:	e9 16       	cp	r14, r25
      e4:	ec 16       	cp	r14, r28
      e6:	ef 16       	cp	r14, r31
      e8:	f2 16       	cp	r15, r18
      ea:	e6 16       	cp	r14, r22
      ec:	bf 16       	cp	r11, r31
      ee:	c5 16       	cp	r12, r21

000000f0 <__c.2112>:
      f0:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000000f7 <__c.2109>:
      f7:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     107:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

00000112 <__c.2106>:
     112:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     122:	20 53 69 67 6e 61 6c 00                              Signal.

0000012a <__c.2103>:
     12a:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     13a:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

0000014a <__c.2100>:
     14a:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     15a:	72 6f 72 00                                         ror.

0000015e <__c.2097>:
     15e:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

0000016f <__c.2094>:
     16f:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000017e <__c.2091>:
     17e:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     18e:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000199 <__c.2088>:
     199:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000001a5 <__c.2085>:
     1a5:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     1b5:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     1c5:	20 6f 6b 3f 00                                       ok?.

000001ca <__c.2082>:
     1ca:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     1da:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000001e8 <__c.2079>:
     1e8:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     1f8:	72 74 00                                            rt.

000001fb <__c.2076>:
     1fb:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     20b:	49 44 00                                            ID.

0000020e <__c.2073>:
     20e:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     21e:	20 57 61 6b 65 75 70 00                              Wakeup.

00000226 <__c.2070>:
     226:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     236:	6c 61 74 65 64 00                                   lated.

0000023c <__c.2067>:
     23c:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     24c:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000257 <__c.2064>:
     257:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     267:	69 6e 74 65 72 00                                   inter.

0000026d <__c.2061>:
     26d:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     27d:	6c 6f 77 00                                         low.

00000281 <__c.2057>:
     281:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     291:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     2a1:	6e 6f 75 67 68 21 00                                nough!.

000002a8 <__c.2054>:
     2a8:	29 3a 20 00                                         ): .

000002ac <__c.2052>:
     2ac:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000002b8 <__c.1984>:
     2b8:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000002c7 <__c.1839>:
     2c7:	45 46 47 65 66 67 00                                EFGefg.

000002ce <__c.1833>:
     2ce:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000002de <__ctors_end>:
     2de:	11 24       	eor	r1, r1
     2e0:	1f be       	out	0x3f, r1	; 63
     2e2:	cf ef       	ldi	r28, 0xFF	; 255
     2e4:	d1 e2       	ldi	r29, 0x21	; 33
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	cd bf       	out	0x3d, r28	; 61

000002ea <__do_copy_data>:
     2ea:	13 e0       	ldi	r17, 0x03	; 3
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	b2 e0       	ldi	r27, 0x02	; 2
     2f0:	e6 e0       	ldi	r30, 0x06	; 6
     2f2:	f8 e5       	ldi	r31, 0x58	; 88
     2f4:	00 e0       	ldi	r16, 0x00	; 0
     2f6:	0b bf       	out	0x3b, r16	; 59
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <__do_copy_data+0x14>
     2fa:	07 90       	elpm	r0, Z+
     2fc:	0d 92       	st	X+, r0
     2fe:	a4 36       	cpi	r26, 0x64	; 100
     300:	b1 07       	cpc	r27, r17
     302:	d9 f7       	brne	.-10     	; 0x2fa <__do_copy_data+0x10>

00000304 <__do_clear_bss>:
     304:	1b e0       	ldi	r17, 0x0B	; 11
     306:	a4 e6       	ldi	r26, 0x64	; 100
     308:	b3 e0       	ldi	r27, 0x03	; 3
     30a:	01 c0       	rjmp	.+2      	; 0x30e <.do_clear_bss_start>

0000030c <.do_clear_bss_loop>:
     30c:	1d 92       	st	X+, r1

0000030e <.do_clear_bss_start>:
     30e:	a4 3b       	cpi	r26, 0xB4	; 180
     310:	b1 07       	cpc	r27, r17
     312:	e1 f7       	brne	.-8      	; 0x30c <.do_clear_bss_loop>
     314:	0e 94 32 05 	call	0xa64	; 0xa64 <main>
     318:	0c 94 01 2c 	jmp	0x5802	; 0x5802 <_exit>

0000031c <__bad_interrupt>:
     31c:	0c 94 42 25 	jmp	0x4a84	; 0x4a84 <__vector_default>

00000320 <kill_stack>:
  //printf ("Create done\r\n");
}


uint8_t kill_stack(uint8_t val)
{
     320:	af 92       	push	r10
     322:	bf 92       	push	r11
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	df 93       	push	r29
     330:	cf 93       	push	r28
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	2a 97       	sbiw	r28, 0x0a	; 10
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	cd bf       	out	0x3d, r28	; 61
     342:	f8 2e       	mov	r15, r24
     344:	8e 01       	movw	r16, r28
     346:	0f 5f       	subi	r16, 0xFF	; 255
     348:	1f 4f       	sbci	r17, 0xFF	; 255
     34a:	f8 01       	movw	r30, r16
     34c:	80 e0       	ldi	r24, 0x00	; 0
char bad_memory[10];
uint8_t i;
for(i=0; i<10; i++ ) bad_memory[i]=i;
     34e:	81 93       	st	Z+, r24
     350:	8f 5f       	subi	r24, 0xFF	; 255
     352:	8a 30       	cpi	r24, 0x0A	; 10
     354:	e1 f7       	brne	.-8      	; 0x34e <kill_stack+0x2e>

  //printf ("Create done\r\n");
}


uint8_t kill_stack(uint8_t val)
     356:	9b e0       	ldi	r25, 0x0B	; 11
     358:	a9 2e       	mov	r10, r25
     35a:	b1 2c       	mov	r11, r1
     35c:	ac 0e       	add	r10, r28
     35e:	bd 1e       	adc	r11, r29
{
char bad_memory[10];
uint8_t i;
for(i=0; i<10; i++ ) bad_memory[i]=i;
for(i=0; i<10; i++ ) printf( "%d ", bad_memory[i]);
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	c8 2e       	mov	r12, r24
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	d8 2e       	mov	r13, r24
     368:	00 d0       	rcall	.+0      	; 0x36a <kill_stack+0x4a>
     36a:	00 d0       	rcall	.+0      	; 0x36c <kill_stack+0x4c>
     36c:	ed b7       	in	r30, 0x3d	; 61
     36e:	fe b7       	in	r31, 0x3e	; 62
     370:	31 96       	adiw	r30, 0x01	; 1
     372:	ad b7       	in	r26, 0x3d	; 61
     374:	be b7       	in	r27, 0x3e	; 62
     376:	12 96       	adiw	r26, 0x02	; 2
     378:	dc 92       	st	X, r13
     37a:	ce 92       	st	-X, r12
     37c:	11 97       	sbiw	r26, 0x01	; 1
     37e:	d8 01       	movw	r26, r16
     380:	8d 91       	ld	r24, X+
     382:	8d 01       	movw	r16, r26
     384:	82 83       	std	Z+2, r24	; 0x02
     386:	13 82       	std	Z+3, r1	; 0x03
     388:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0a 15       	cp	r16, r10
     396:	1b 05       	cpc	r17, r11
     398:	39 f7       	brne	.-50     	; 0x368 <kill_stack+0x48>
   printf( "Die Stack %d\r\n",val );
     39a:	00 d0       	rcall	.+0      	; 0x39c <kill_stack+0x7c>
     39c:	00 d0       	rcall	.+0      	; 0x39e <kill_stack+0x7e>
     39e:	ed b7       	in	r30, 0x3d	; 61
     3a0:	fe b7       	in	r31, 0x3e	; 62
     3a2:	31 96       	adiw	r30, 0x01	; 1
     3a4:	84 e0       	ldi	r24, 0x04	; 4
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	ad b7       	in	r26, 0x3d	; 61
     3aa:	be b7       	in	r27, 0x3e	; 62
     3ac:	12 96       	adiw	r26, 0x02	; 2
     3ae:	9c 93       	st	X, r25
     3b0:	8e 93       	st	-X, r24
     3b2:	11 97       	sbiw	r26, 0x01	; 1
     3b4:	f2 82       	std	Z+2, r15	; 0x02
     3b6:	13 82       	std	Z+3, r1	; 0x03
     3b8:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
if(val>1) kill_stack(val-1);
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	b1 e0       	ldi	r27, 0x01	; 1
     3c6:	bf 15       	cp	r27, r15
     3c8:	20 f4       	brcc	.+8      	; 0x3d2 <kill_stack+0xb2>
     3ca:	8f 2d       	mov	r24, r15
     3cc:	81 50       	subi	r24, 0x01	; 1
     3ce:	0e 94 90 01 	call	0x320	; 0x320 <kill_stack>
return 0;
}
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	2a 96       	adiw	r28, 0x0a	; 10
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	cf 91       	pop	r28
     3e2:	df 91       	pop	r29
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	df 90       	pop	r13
     3ec:	cf 90       	pop	r12
     3ee:	bf 90       	pop	r11
     3f0:	af 90       	pop	r10
     3f2:	08 95       	ret

000003f4 <nrk_create_taskset>:



void
nrk_create_taskset()
{
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29


  nrk_task_set_entry_function( &TaskOne, Task1);
     402:	cb e8       	ldi	r28, 0x8B	; 139
     404:	d4 e0       	ldi	r29, 0x04	; 4
     406:	ce 01       	movw	r24, r28
     408:	68 e2       	ldi	r22, 0x28	; 40
     40a:	74 e0       	ldi	r23, 0x04	; 4
     40c:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <nrk_task_set_entry_function>
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
     410:	ce 01       	movw	r24, r28
     412:	65 ed       	ldi	r22, 0xD5	; 213
     414:	77 e0       	ldi	r23, 0x07	; 7
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	51 e0       	ldi	r21, 0x01	; 1
     41a:	0e 94 65 27 	call	0x4eca	; 0x4eca <nrk_task_set_stk>
  TaskOne.prio = 4;
     41e:	84 e0       	ldi	r24, 0x04	; 4
     420:	80 93 93 04 	sts	0x0493, r24
  TaskOne.FirstActivation = TRUE;
     424:	11 e0       	ldi	r17, 0x01	; 1
     426:	10 93 92 04 	sts	0x0492, r17
  TaskOne.Type = BASIC_TASK;
     42a:	10 93 94 04 	sts	0x0494, r17
  TaskOne.SchType = PREEMPTIVE;
     42e:	10 93 95 04 	sts	0x0495, r17
  TaskOne.period.secs = 10;
     432:	8a e0       	ldi	r24, 0x0A	; 10
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	a0 e0       	ldi	r26, 0x00	; 0
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	80 93 96 04 	sts	0x0496, r24
     43e:	90 93 97 04 	sts	0x0497, r25
     442:	a0 93 98 04 	sts	0x0498, r26
     446:	b0 93 99 04 	sts	0x0499, r27
  TaskOne.period.nano_secs = 0;
     44a:	10 92 9a 04 	sts	0x049A, r1
     44e:	10 92 9b 04 	sts	0x049B, r1
     452:	10 92 9c 04 	sts	0x049C, r1
     456:	10 92 9d 04 	sts	0x049D, r1
  TaskOne.cpu_reserve.secs = 10;
     45a:	80 93 9e 04 	sts	0x049E, r24
     45e:	90 93 9f 04 	sts	0x049F, r25
     462:	a0 93 a0 04 	sts	0x04A0, r26
     466:	b0 93 a1 04 	sts	0x04A1, r27
  TaskOne.cpu_reserve.nano_secs =  0;
     46a:	10 92 a2 04 	sts	0x04A2, r1
     46e:	10 92 a3 04 	sts	0x04A3, r1
     472:	10 92 a4 04 	sts	0x04A4, r1
     476:	10 92 a5 04 	sts	0x04A5, r1
  TaskOne.offset.secs = 0;
     47a:	10 92 a6 04 	sts	0x04A6, r1
     47e:	10 92 a7 04 	sts	0x04A7, r1
     482:	10 92 a8 04 	sts	0x04A8, r1
     486:	10 92 a9 04 	sts	0x04A9, r1
  TaskOne.offset.nano_secs= 0;
     48a:	10 92 aa 04 	sts	0x04AA, r1
     48e:	10 92 ab 04 	sts	0x04AB, r1
     492:	10 92 ac 04 	sts	0x04AC, r1
     496:	10 92 ad 04 	sts	0x04AD, r1
  nrk_activate_task (&TaskOne);
     49a:	ce 01       	movw	r24, r28
     49c:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <nrk_activate_task>

  nrk_task_set_entry_function( &TaskTwo, Task2);
     4a0:	c6 e8       	ldi	r28, 0x86	; 134
     4a2:	da e0       	ldi	r29, 0x0A	; 10
     4a4:	ce 01       	movw	r24, r28
     4a6:	6a ee       	ldi	r22, 0xEA	; 234
     4a8:	73 e0       	ldi	r23, 0x03	; 3
     4aa:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <nrk_task_set_entry_function>
  nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
     4ae:	ce 01       	movw	r24, r28
     4b0:	6e ea       	ldi	r22, 0xAE	; 174
     4b2:	76 e0       	ldi	r23, 0x06	; 6
     4b4:	40 e0       	ldi	r20, 0x00	; 0
     4b6:	51 e0       	ldi	r21, 0x01	; 1
     4b8:	0e 94 65 27 	call	0x4eca	; 0x4eca <nrk_task_set_stk>
  TaskTwo.prio = 3;
     4bc:	83 e0       	ldi	r24, 0x03	; 3
     4be:	80 93 8e 0a 	sts	0x0A8E, r24
  TaskTwo.FirstActivation = TRUE;
     4c2:	10 93 8d 0a 	sts	0x0A8D, r17
  TaskTwo.Type = BASIC_TASK;
     4c6:	10 93 8f 0a 	sts	0x0A8F, r17
  TaskTwo.SchType = PREEMPTIVE;
     4ca:	10 93 90 0a 	sts	0x0A90, r17
  TaskTwo.period.secs = 0;
     4ce:	10 92 91 0a 	sts	0x0A91, r1
     4d2:	10 92 92 0a 	sts	0x0A92, r1
     4d6:	10 92 93 0a 	sts	0x0A93, r1
     4da:	10 92 94 0a 	sts	0x0A94, r1
  TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	95 e6       	ldi	r25, 0x65	; 101
     4e2:	ad ec       	ldi	r26, 0xCD	; 205
     4e4:	bd e1       	ldi	r27, 0x1D	; 29
     4e6:	80 93 95 0a 	sts	0x0A95, r24
     4ea:	90 93 96 0a 	sts	0x0A96, r25
     4ee:	a0 93 97 0a 	sts	0x0A97, r26
     4f2:	b0 93 98 0a 	sts	0x0A98, r27
  TaskTwo.cpu_reserve.secs = 0;
     4f6:	10 92 99 0a 	sts	0x0A99, r1
     4fa:	10 92 9a 0a 	sts	0x0A9A, r1
     4fe:	10 92 9b 0a 	sts	0x0A9B, r1
     502:	10 92 9c 0a 	sts	0x0A9C, r1
  TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     506:	c1 2c       	mov	r12, r1
     508:	21 ee       	ldi	r18, 0xE1	; 225
     50a:	d2 2e       	mov	r13, r18
     50c:	25 ef       	ldi	r18, 0xF5	; 245
     50e:	e2 2e       	mov	r14, r18
     510:	25 e0       	ldi	r18, 0x05	; 5
     512:	f2 2e       	mov	r15, r18
     514:	c0 92 9d 0a 	sts	0x0A9D, r12
     518:	d0 92 9e 0a 	sts	0x0A9E, r13
     51c:	e0 92 9f 0a 	sts	0x0A9F, r14
     520:	f0 92 a0 0a 	sts	0x0AA0, r15
  TaskTwo.offset.secs = 0;
     524:	10 92 a1 0a 	sts	0x0AA1, r1
     528:	10 92 a2 0a 	sts	0x0AA2, r1
     52c:	10 92 a3 0a 	sts	0x0AA3, r1
     530:	10 92 a4 0a 	sts	0x0AA4, r1
  TaskTwo.offset.nano_secs= 0;
     534:	10 92 a5 0a 	sts	0x0AA5, r1
     538:	10 92 a6 0a 	sts	0x0AA6, r1
     53c:	10 92 a7 0a 	sts	0x0AA7, r1
     540:	10 92 a8 0a 	sts	0x0AA8, r1
  nrk_activate_task (&TaskTwo);
     544:	ce 01       	movw	r24, r28
     546:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <nrk_activate_task>


  nrk_task_set_entry_function( &TaskThree, Task3);
     54a:	c2 eb       	ldi	r28, 0xB2	; 178
     54c:	d7 e0       	ldi	r29, 0x07	; 7
     54e:	ce 01       	movw	r24, r28
     550:	69 e9       	ldi	r22, 0x99	; 153
     552:	73 e0       	ldi	r23, 0x03	; 3
     554:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <nrk_task_set_entry_function>
  nrk_task_set_stk( &TaskThree, Stack3, NRK_APP_STACKSIZE);
     558:	ce 01       	movw	r24, r28
     55a:	69 e8       	ldi	r22, 0x89	; 137
     55c:	73 e0       	ldi	r23, 0x03	; 3
     55e:	40 e0       	ldi	r20, 0x00	; 0
     560:	51 e0       	ldi	r21, 0x01	; 1
     562:	0e 94 65 27 	call	0x4eca	; 0x4eca <nrk_task_set_stk>
  TaskThree.prio = 2;
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	80 93 ba 07 	sts	0x07BA, r24
  TaskThree.FirstActivation = TRUE;
     56c:	10 93 b9 07 	sts	0x07B9, r17
  TaskThree.Type = BASIC_TASK;
     570:	10 93 bb 07 	sts	0x07BB, r17
  TaskThree.SchType = PREEMPTIVE;
     574:	10 93 bc 07 	sts	0x07BC, r17
  TaskThree.period.secs = 0;
     578:	10 92 bd 07 	sts	0x07BD, r1
     57c:	10 92 be 07 	sts	0x07BE, r1
     580:	10 92 bf 07 	sts	0x07BF, r1
     584:	10 92 c0 07 	sts	0x07C0, r1
  TaskThree.period.nano_secs = 750*NANOS_PER_MS;
     588:	80 e8       	ldi	r24, 0x80	; 128
     58a:	97 e1       	ldi	r25, 0x17	; 23
     58c:	a4 eb       	ldi	r26, 0xB4	; 180
     58e:	bc e2       	ldi	r27, 0x2C	; 44
     590:	80 93 c1 07 	sts	0x07C1, r24
     594:	90 93 c2 07 	sts	0x07C2, r25
     598:	a0 93 c3 07 	sts	0x07C3, r26
     59c:	b0 93 c4 07 	sts	0x07C4, r27
  TaskThree.cpu_reserve.secs = 0;
     5a0:	10 92 c5 07 	sts	0x07C5, r1
     5a4:	10 92 c6 07 	sts	0x07C6, r1
     5a8:	10 92 c7 07 	sts	0x07C7, r1
     5ac:	10 92 c8 07 	sts	0x07C8, r1
  TaskThree.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     5b0:	c0 92 c9 07 	sts	0x07C9, r12
     5b4:	d0 92 ca 07 	sts	0x07CA, r13
     5b8:	e0 92 cb 07 	sts	0x07CB, r14
     5bc:	f0 92 cc 07 	sts	0x07CC, r15
  TaskThree.offset.secs = 0;
     5c0:	10 92 cd 07 	sts	0x07CD, r1
     5c4:	10 92 ce 07 	sts	0x07CE, r1
     5c8:	10 92 cf 07 	sts	0x07CF, r1
     5cc:	10 92 d0 07 	sts	0x07D0, r1
  TaskThree.offset.nano_secs= 0;
     5d0:	10 92 d1 07 	sts	0x07D1, r1
     5d4:	10 92 d2 07 	sts	0x07D2, r1
     5d8:	10 92 d3 07 	sts	0x07D3, r1
     5dc:	10 92 d4 07 	sts	0x07D4, r1
  nrk_activate_task (&TaskThree);
     5e0:	ce 01       	movw	r24, r28
     5e2:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <nrk_activate_task>


  nrk_task_set_entry_function( &TaskFour, Task4);
     5e6:	c4 e6       	ldi	r28, 0x64	; 100
     5e8:	d3 e0       	ldi	r29, 0x03	; 3
     5ea:	ce 01       	movw	r24, r28
     5ec:	68 e4       	ldi	r22, 0x48	; 72
     5ee:	73 e0       	ldi	r23, 0x03	; 3
     5f0:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <nrk_task_set_entry_function>
  nrk_task_set_stk( &TaskFour, Stack4, NRK_APP_STACKSIZE);
     5f4:	ce 01       	movw	r24, r28
     5f6:	66 e8       	ldi	r22, 0x86	; 134
     5f8:	79 e0       	ldi	r23, 0x09	; 9
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	51 e0       	ldi	r21, 0x01	; 1
     5fe:	0e 94 65 27 	call	0x4eca	; 0x4eca <nrk_task_set_stk>
  TaskFour.prio = 1;
     602:	10 93 6c 03 	sts	0x036C, r17
  TaskFour.FirstActivation = TRUE;
     606:	10 93 6b 03 	sts	0x036B, r17
  TaskFour.Type = BASIC_TASK;
     60a:	10 93 6d 03 	sts	0x036D, r17
  TaskFour.SchType = PREEMPTIVE;
     60e:	10 93 6e 03 	sts	0x036E, r17
  TaskFour.period.secs = 1;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	a0 e0       	ldi	r26, 0x00	; 0
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	80 93 6f 03 	sts	0x036F, r24
     61e:	90 93 70 03 	sts	0x0370, r25
     622:	a0 93 71 03 	sts	0x0371, r26
     626:	b0 93 72 03 	sts	0x0372, r27
  TaskFour.period.nano_secs = 0;
     62a:	10 92 73 03 	sts	0x0373, r1
     62e:	10 92 74 03 	sts	0x0374, r1
     632:	10 92 75 03 	sts	0x0375, r1
     636:	10 92 76 03 	sts	0x0376, r1
  TaskFour.cpu_reserve.secs = 0;
     63a:	10 92 77 03 	sts	0x0377, r1
     63e:	10 92 78 03 	sts	0x0378, r1
     642:	10 92 79 03 	sts	0x0379, r1
     646:	10 92 7a 03 	sts	0x037A, r1
  TaskFour.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     64a:	c0 92 7b 03 	sts	0x037B, r12
     64e:	d0 92 7c 03 	sts	0x037C, r13
     652:	e0 92 7d 03 	sts	0x037D, r14
     656:	f0 92 7e 03 	sts	0x037E, r15
  TaskFour.offset.secs = 0;
     65a:	10 92 7f 03 	sts	0x037F, r1
     65e:	10 92 80 03 	sts	0x0380, r1
     662:	10 92 81 03 	sts	0x0381, r1
     666:	10 92 82 03 	sts	0x0382, r1
  TaskFour.offset.nano_secs= 0;
     66a:	10 92 83 03 	sts	0x0383, r1
     66e:	10 92 84 03 	sts	0x0384, r1
     672:	10 92 85 03 	sts	0x0385, r1
     676:	10 92 86 03 	sts	0x0386, r1
  nrk_activate_task (&TaskFour);
     67a:	ce 01       	movw	r24, r28
     67c:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <nrk_activate_task>



  //printf ("Create done\r\n");
}
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	08 95       	ret

00000690 <Task4>:
	nrk_wait_until_next_period();
	}
}

void Task4()
{
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	df 93       	push	r29
     69e:	cf 93       	push	r28
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	28 97       	sbiw	r28, 0x08	; 8
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	cd bf       	out	0x3d, r28	; 61
uint16_t cnt;
nrk_time_t my_time;

  printf( "Task4 PID=%d\r\n",nrk_get_pid());
     6b0:	0e 94 77 1c 	call	0x38ee	; 0x38ee <nrk_get_pid>
     6b4:	00 d0       	rcall	.+0      	; 0x6b6 <Task4+0x26>
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <Task4+0x28>
     6b8:	ed b7       	in	r30, 0x3d	; 61
     6ba:	fe b7       	in	r31, 0x3e	; 62
     6bc:	31 96       	adiw	r30, 0x01	; 1
     6be:	23 e1       	ldi	r18, 0x13	; 19
     6c0:	32 e0       	ldi	r19, 0x02	; 2
     6c2:	ad b7       	in	r26, 0x3d	; 61
     6c4:	be b7       	in	r27, 0x3e	; 62
     6c6:	12 96       	adiw	r26, 0x02	; 2
     6c8:	3c 93       	st	X, r19
     6ca:	2e 93       	st	-X, r18
     6cc:	11 97       	sbiw	r26, 0x01	; 1
     6ce:	82 83       	std	Z+2, r24	; 0x02
     6d0:	13 82       	std	Z+3, r1	; 0x03
     6d2:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
     6d6:	00 e0       	ldi	r16, 0x00	; 0
     6d8:	10 e0       	ldi	r17, 0x00	; 0
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
  cnt=0;
  while(1) {
	
	nrk_led_set(RED_LED);
	nrk_time_get(&my_time);
     6e2:	6e 01       	movw	r12, r28
     6e4:	08 94       	sec
     6e6:	c1 1c       	adc	r12, r1
     6e8:	d1 1c       	adc	r13, r1
	printf( "Task4 cnt=%d\r\n",cnt );
     6ea:	32 e2       	ldi	r19, 0x22	; 34
     6ec:	e3 2e       	mov	r14, r19
     6ee:	32 e0       	ldi	r19, 0x02	; 2
     6f0:	f3 2e       	mov	r15, r19

  printf( "Task4 PID=%d\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
	
	nrk_led_set(RED_LED);
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <nrk_led_set>
	nrk_time_get(&my_time);
     6fa:	c6 01       	movw	r24, r12
     6fc:	0e 94 3c 21 	call	0x4278	; 0x4278 <nrk_time_get>
	printf( "Task4 cnt=%d\r\n",cnt );
     700:	00 d0       	rcall	.+0      	; 0x702 <Task4+0x72>
     702:	00 d0       	rcall	.+0      	; 0x704 <Task4+0x74>
     704:	ed b7       	in	r30, 0x3d	; 61
     706:	fe b7       	in	r31, 0x3e	; 62
     708:	f2 82       	std	Z+2, r15	; 0x02
     70a:	e1 82       	std	Z+1, r14	; 0x01
     70c:	14 83       	std	Z+4, r17	; 0x04
     70e:	03 83       	std	Z+3, r16	; 0x03
     710:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
	nrk_wait_until_next_period();
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <nrk_wait_until_next_period>
	nrk_led_clr(RED_LED);
     720:	83 e0       	ldi	r24, 0x03	; 3
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 60 13 	call	0x26c0	; 0x26c0 <nrk_led_clr>
	cnt++;
     728:	0f 5f       	subi	r16, 0xFF	; 255
     72a:	1f 4f       	sbci	r17, 0xFF	; 255
	nrk_wait_until_next_period();
     72c:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <nrk_wait_until_next_period>
     730:	e0 cf       	rjmp	.-64     	; 0x6f2 <Task4+0x62>

00000732 <Task3>:
}



void Task3()
{
     732:	cf 92       	push	r12
     734:	df 92       	push	r13
     736:	ef 92       	push	r14
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	df 93       	push	r29
     740:	cf 93       	push	r28
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	28 97       	sbiw	r28, 0x08	; 8
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
uint16_t cnt;
nrk_time_t my_time;

  printf( "Task3 PID=%d\r\n",nrk_get_pid());
     752:	0e 94 77 1c 	call	0x38ee	; 0x38ee <nrk_get_pid>
     756:	00 d0       	rcall	.+0      	; 0x758 <Task3+0x26>
     758:	00 d0       	rcall	.+0      	; 0x75a <Task3+0x28>
     75a:	ed b7       	in	r30, 0x3d	; 61
     75c:	fe b7       	in	r31, 0x3e	; 62
     75e:	31 96       	adiw	r30, 0x01	; 1
     760:	21 e3       	ldi	r18, 0x31	; 49
     762:	32 e0       	ldi	r19, 0x02	; 2
     764:	ad b7       	in	r26, 0x3d	; 61
     766:	be b7       	in	r27, 0x3e	; 62
     768:	12 96       	adiw	r26, 0x02	; 2
     76a:	3c 93       	st	X, r19
     76c:	2e 93       	st	-X, r18
     76e:	11 97       	sbiw	r26, 0x01	; 1
     770:	82 83       	std	Z+2, r24	; 0x02
     772:	13 82       	std	Z+3, r1	; 0x03
     774:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
     778:	00 e0       	ldi	r16, 0x00	; 0
     77a:	10 e0       	ldi	r17, 0x00	; 0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
  cnt=0;
  while(1) {
	
	nrk_led_set(GREEN_LED);
	nrk_time_get(&my_time);
     784:	6e 01       	movw	r12, r28
     786:	08 94       	sec
     788:	c1 1c       	adc	r12, r1
     78a:	d1 1c       	adc	r13, r1
	printf( "Task3 cnt=%d\r\n",cnt );
     78c:	40 e4       	ldi	r20, 0x40	; 64
     78e:	e4 2e       	mov	r14, r20
     790:	42 e0       	ldi	r20, 0x02	; 2
     792:	f4 2e       	mov	r15, r20

  printf( "Task3 PID=%d\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
	
	nrk_led_set(GREEN_LED);
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <nrk_led_set>
	nrk_time_get(&my_time);
     79c:	c6 01       	movw	r24, r12
     79e:	0e 94 3c 21 	call	0x4278	; 0x4278 <nrk_time_get>
	printf( "Task3 cnt=%d\r\n",cnt );
     7a2:	00 d0       	rcall	.+0      	; 0x7a4 <Task3+0x72>
     7a4:	00 d0       	rcall	.+0      	; 0x7a6 <Task3+0x74>
     7a6:	ed b7       	in	r30, 0x3d	; 61
     7a8:	fe b7       	in	r31, 0x3e	; 62
     7aa:	f2 82       	std	Z+2, r15	; 0x02
     7ac:	e1 82       	std	Z+1, r14	; 0x01
     7ae:	14 83       	std	Z+4, r17	; 0x04
     7b0:	03 83       	std	Z+3, r16	; 0x03
     7b2:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
	nrk_wait_until_next_period();
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <nrk_wait_until_next_period>
	nrk_led_clr(GREEN_LED);
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 60 13 	call	0x26c0	; 0x26c0 <nrk_led_clr>
	cnt++;
     7ca:	0f 5f       	subi	r16, 0xFF	; 255
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
	nrk_wait_until_next_period();
     7ce:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <nrk_wait_until_next_period>
     7d2:	e0 cf       	rjmp	.-64     	; 0x794 <Task3+0x62>

000007d4 <Task2>:
	nrk_wait_until_next_period();
	}
}

void Task2()
{
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
  uint8_t cnt;
  printf( "Task2 PID=%d\r\n",nrk_get_pid());
     7da:	0e 94 77 1c 	call	0x38ee	; 0x38ee <nrk_get_pid>
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <Task2+0xc>
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <Task2+0xe>
     7e2:	ed b7       	in	r30, 0x3d	; 61
     7e4:	fe b7       	in	r31, 0x3e	; 62
     7e6:	31 96       	adiw	r30, 0x01	; 1
     7e8:	2f e4       	ldi	r18, 0x4F	; 79
     7ea:	32 e0       	ldi	r19, 0x02	; 2
     7ec:	ad b7       	in	r26, 0x3d	; 61
     7ee:	be b7       	in	r27, 0x3e	; 62
     7f0:	12 96       	adiw	r26, 0x02	; 2
     7f2:	3c 93       	st	X, r19
     7f4:	2e 93       	st	-X, r18
     7f6:	11 97       	sbiw	r26, 0x01	; 1
     7f8:	82 83       	std	Z+2, r24	; 0x02
     7fa:	13 82       	std	Z+3, r1	; 0x03
     7fc:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
     800:	10 e0       	ldi	r17, 0x00	; 0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
  cnt=0;
  while(1) {
	nrk_led_set(BLUE_LED);
	printf( "Task2 cnt=%d\r\n",cnt );
     80a:	ce e5       	ldi	r28, 0x5E	; 94
     80c:	d2 e0       	ldi	r29, 0x02	; 2
{
  uint8_t cnt;
  printf( "Task2 PID=%d\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
	nrk_led_set(BLUE_LED);
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <nrk_led_set>
	printf( "Task2 cnt=%d\r\n",cnt );
     816:	00 d0       	rcall	.+0      	; 0x818 <Task2+0x44>
     818:	00 d0       	rcall	.+0      	; 0x81a <Task2+0x46>
     81a:	ed b7       	in	r30, 0x3d	; 61
     81c:	fe b7       	in	r31, 0x3e	; 62
     81e:	31 96       	adiw	r30, 0x01	; 1
     820:	ad b7       	in	r26, 0x3d	; 61
     822:	be b7       	in	r27, 0x3e	; 62
     824:	12 96       	adiw	r26, 0x02	; 2
     826:	dc 93       	st	X, r29
     828:	ce 93       	st	-X, r28
     82a:	11 97       	sbiw	r26, 0x01	; 1
     82c:	12 83       	std	Z+2, r17	; 0x02
     82e:	13 82       	std	Z+3, r1	; 0x03
     830:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
	cnt++;
     834:	1f 5f       	subi	r17, 0xFF	; 255
	//if(cnt>=10) while(1);   // This will test the reservation
	//if(cnt>=10) kill_stack(100);
	nrk_wait_until_next_period();
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <nrk_wait_until_next_period>
        nrk_led_clr(BLUE_LED);
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 60 13 	call	0x26c0	; 0x26c0 <nrk_led_clr>
	nrk_wait_until_next_period();
     84a:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <nrk_wait_until_next_period>
     84e:	df cf       	rjmp	.-66     	; 0x80e <Task2+0x3a>

00000850 <Task1>:
  return 0;
}


void Task1()
{
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
uint16_t cnt;
int8_t val;
uint32_t sector = 0;


  printf( "Task1 PID=%d\r\n",nrk_get_pid());
     85c:	0e 94 77 1c 	call	0x38ee	; 0x38ee <nrk_get_pid>
     860:	00 d0       	rcall	.+0      	; 0x862 <Task1+0x12>
     862:	00 d0       	rcall	.+0      	; 0x864 <Task1+0x14>
     864:	ed b7       	in	r30, 0x3d	; 61
     866:	fe b7       	in	r31, 0x3e	; 62
     868:	31 96       	adiw	r30, 0x01	; 1
     86a:	2d e6       	ldi	r18, 0x6D	; 109
     86c:	32 e0       	ldi	r19, 0x02	; 2
     86e:	ad b7       	in	r26, 0x3d	; 61
     870:	be b7       	in	r27, 0x3e	; 62
     872:	12 96       	adiw	r26, 0x02	; 2
     874:	3c 93       	st	X, r19
     876:	2e 93       	st	-X, r18
     878:	11 97       	sbiw	r26, 0x01	; 1
     87a:	82 83       	std	Z+2, r24	; 0x02
     87c:	13 82       	std	Z+3, r1	; 0x03
     87e:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
  cnt=0;
  val=mmc_init();
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0e 94 51 06 	call	0xca2	; 0xca2 <mmc_init>
     88e:	08 2f       	mov	r16, r24
  printf("mmc_init returns %d\n\r", val );
     890:	00 d0       	rcall	.+0      	; 0x892 <Task1+0x42>
     892:	00 d0       	rcall	.+0      	; 0x894 <Task1+0x44>
     894:	8c e7       	ldi	r24, 0x7C	; 124
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	ed b7       	in	r30, 0x3d	; 61
     89a:	fe b7       	in	r31, 0x3e	; 62
     89c:	92 83       	std	Z+2, r25	; 0x02
     89e:	81 83       	std	Z+1, r24	; 0x01
     8a0:	80 2f       	mov	r24, r16
     8a2:	99 27       	eor	r25, r25
     8a4:	87 fd       	sbrc	r24, 7
     8a6:	90 95       	com	r25
     8a8:	94 83       	std	Z+4, r25	; 0x04
     8aa:	83 83       	std	Z+3, r24	; 0x03
     8ac:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
  if(val!=0 ) {
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	00 23       	and	r16, r16
     8ba:	29 f0       	breq	.+10     	; 0x8c6 <Task1+0x76>
	printf( "card init failed\r\n" );
     8bc:	82 e9       	ldi	r24, 0x92	; 146
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <puts>
     8c4:	ff cf       	rjmp	.-2      	; 0x8c4 <Task1+0x74>
	while(1);
	}
  putchar('s');
     8c6:	60 91 ac 0b 	lds	r22, 0x0BAC
     8ca:	70 91 ad 0b 	lds	r23, 0x0BAD
     8ce:	83 e7       	ldi	r24, 0x73	; 115
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 ad 29 	call	0x535a	; 0x535a <fputc>
	printf("\nsector %ld\n\r",sector);                // show sector number
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <Task1+0x88>
     8d8:	00 d0       	rcall	.+0      	; 0x8da <Task1+0x8a>
     8da:	00 d0       	rcall	.+0      	; 0x8dc <Task1+0x8c>
     8dc:	84 ea       	ldi	r24, 0xA4	; 164
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	ad b7       	in	r26, 0x3d	; 61
     8e2:	be b7       	in	r27, 0x3e	; 62
     8e4:	12 96       	adiw	r26, 0x02	; 2
     8e6:	9c 93       	st	X, r25
     8e8:	8e 93       	st	-X, r24
     8ea:	11 97       	sbiw	r26, 0x01	; 1
     8ec:	ed b7       	in	r30, 0x3d	; 61
     8ee:	fe b7       	in	r31, 0x3e	; 62
     8f0:	13 82       	std	Z+3, r1	; 0x03
     8f2:	14 82       	std	Z+4, r1	; 0x04
     8f4:	15 82       	std	Z+5, r1	; 0x05
     8f6:	16 82       	std	Z+6, r1	; 0x06
     8f8:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
        val=mmc_readsector(sector,sectorbuffer);    // read a data sector
     8fc:	8d b7       	in	r24, 0x3d	; 61
     8fe:	9e b7       	in	r25, 0x3e	; 62
     900:	06 96       	adiw	r24, 0x06	; 6
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	9e bf       	out	0x3e, r25	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	8d bf       	out	0x3d, r24	; 61
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	4e ea       	ldi	r20, 0xAE	; 174
     916:	54 e0       	ldi	r21, 0x04	; 4
     918:	0e 94 bf 05 	call	0xb7e	; 0xb7e <mmc_readsector>
       	printf( "readsector returned %d\n",val );
     91c:	00 d0       	rcall	.+0      	; 0x91e <Task1+0xce>
     91e:	00 d0       	rcall	.+0      	; 0x920 <Task1+0xd0>
     920:	22 eb       	ldi	r18, 0xB2	; 178
     922:	32 e0       	ldi	r19, 0x02	; 2
     924:	ad b7       	in	r26, 0x3d	; 61
     926:	be b7       	in	r27, 0x3e	; 62
     928:	12 96       	adiw	r26, 0x02	; 2
     92a:	3c 93       	st	X, r19
     92c:	2e 93       	st	-X, r18
     92e:	11 97       	sbiw	r26, 0x01	; 1
     930:	99 27       	eor	r25, r25
     932:	87 fd       	sbrc	r24, 7
     934:	90 95       	com	r25
     936:	14 96       	adiw	r26, 0x04	; 4
     938:	9c 93       	st	X, r25
     93a:	8e 93       	st	-X, r24
     93c:	13 97       	sbiw	r26, 0x03	; 3
     93e:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
     942:	ce ea       	ldi	r28, 0xAE	; 174
     944:	d4 e0       	ldi	r29, 0x04	; 4
  
  return 0;
}


void Task1()
     946:	8e 01       	movw	r16, r28
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
  putchar('s');
	printf("\nsector %ld\n\r",sector);                // show sector number
        val=mmc_readsector(sector,sectorbuffer);    // read a data sector
       	printf( "readsector returned %d\n",val );
	for(cnt=0; cnt<32; cnt++ )
		printf( "%d ",sectorbuffer[cnt] );
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	e5 2e       	mov	r14, r21
     954:	52 e0       	ldi	r21, 0x02	; 2
     956:	f5 2e       	mov	r15, r21
     958:	00 d0       	rcall	.+0      	; 0x95a <Task1+0x10a>
     95a:	00 d0       	rcall	.+0      	; 0x95c <Task1+0x10c>
     95c:	ed b7       	in	r30, 0x3d	; 61
     95e:	fe b7       	in	r31, 0x3e	; 62
     960:	31 96       	adiw	r30, 0x01	; 1
     962:	ad b7       	in	r26, 0x3d	; 61
     964:	be b7       	in	r27, 0x3e	; 62
     966:	12 96       	adiw	r26, 0x02	; 2
     968:	fc 92       	st	X, r15
     96a:	ee 92       	st	-X, r14
     96c:	11 97       	sbiw	r26, 0x01	; 1
     96e:	d8 01       	movw	r26, r16
     970:	8d 91       	ld	r24, X+
     972:	8d 01       	movw	r16, r26
     974:	82 83       	std	Z+2, r24	; 0x02
     976:	13 82       	std	Z+3, r1	; 0x03
     978:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
	}
  putchar('s');
	printf("\nsector %ld\n\r",sector);                // show sector number
        val=mmc_readsector(sector,sectorbuffer);    // read a data sector
       	printf( "readsector returned %d\n",val );
	for(cnt=0; cnt<32; cnt++ )
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	b4 e0       	ldi	r27, 0x04	; 4
     986:	0e 3c       	cpi	r16, 0xCE	; 206
     988:	1b 07       	cpc	r17, r27
     98a:	31 f7       	brne	.-52     	; 0x958 <Task1+0x108>
		printf( "%d ",sectorbuffer[cnt] );
	printf( "\n\r" ); 
     98c:	00 d0       	rcall	.+0      	; 0x98e <Task1+0x13e>
     98e:	8a ec       	ldi	r24, 0xCA	; 202
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	ed b7       	in	r30, 0x3d	; 61
     994:	fe b7       	in	r31, 0x3e	; 62
     996:	92 83       	std	Z+2, r25	; 0x02
     998:	81 83       	std	Z+1, r24	; 0x01
     99a:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>

	val=sectorbuffer[0];
     99e:	80 91 ae 04 	lds	r24, 0x04AE
	val++;
     9a2:	8f 5f       	subi	r24, 0xFF	; 255
  
  return 0;
}


void Task1()
     9a4:	f8 01       	movw	r30, r16
     9a6:	b0 97       	sbiw	r30, 0x20	; 32
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0

	val=sectorbuffer[0];
	val++;
	for(cnt=0; cnt<512; cnt++ )
	{
	sectorbuffer[cnt]=val;
     9ac:	81 93       	st	Z+, r24
		printf( "%d ",sectorbuffer[cnt] );
	printf( "\n\r" ); 

	val=sectorbuffer[0];
	val++;
	for(cnt=0; cnt<512; cnt++ )
     9ae:	96 e0       	ldi	r25, 0x06	; 6
     9b0:	ee 3a       	cpi	r30, 0xAE	; 174
     9b2:	f9 07       	cpc	r31, r25
     9b4:	d9 f7       	brne	.-10     	; 0x9ac <Task1+0x15c>
	{
	sectorbuffer[cnt]=val;
	}

	//printf( "Writting\r\n" );
	val=mmc_writesector(sector,sectorbuffer);    // read a data sector
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	4e ea       	ldi	r20, 0xAE	; 174
     9c0:	54 e0       	ldi	r21, 0x04	; 4
     9c2:	0e 94 06 06 	call	0xc0c	; 0xc0c <mmc_writesector>
       //	printf( "writesector returned %d\n",val );
	printf( "After write:\r\n" );
     9c6:	8d ec       	ldi	r24, 0xCD	; 205
     9c8:	92 e0       	ldi	r25, 0x02	; 2
     9ca:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <puts>
	val=mmc_readsector(sector,sectorbuffer);    // read a data sector
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	4e ea       	ldi	r20, 0xAE	; 174
     9d8:	54 e0       	ldi	r21, 0x04	; 4
     9da:	0e 94 bf 05 	call	0xb7e	; 0xb7e <mmc_readsector>
     9de:	08 2f       	mov	r16, r24
       	printf( "readsector returned %d\n",val );
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <Task1+0x192>
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <Task1+0x194>
     9e4:	82 eb       	ldi	r24, 0xB2	; 178
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	ad b7       	in	r26, 0x3d	; 61
     9ea:	be b7       	in	r27, 0x3e	; 62
     9ec:	12 96       	adiw	r26, 0x02	; 2
     9ee:	9c 93       	st	X, r25
     9f0:	8e 93       	st	-X, r24
     9f2:	11 97       	sbiw	r26, 0x01	; 1
     9f4:	80 2f       	mov	r24, r16
     9f6:	99 27       	eor	r25, r25
     9f8:	87 fd       	sbrc	r24, 7
     9fa:	90 95       	com	r25
     9fc:	14 96       	adiw	r26, 0x04	; 4
     9fe:	9c 93       	st	X, r25
     a00:	8e 93       	st	-X, r24
     a02:	13 97       	sbiw	r26, 0x03	; 3
     a04:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
       	if(val==0)
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	00 23       	and	r16, r16
     a12:	29 f5       	brne	.+74     	; 0xa5e <Task1+0x20e>
	{
	 for(cnt=0; cnt<32; cnt++ )
		printf( "%d ",sectorbuffer[cnt] );
     a14:	00 e0       	ldi	r16, 0x00	; 0
     a16:	12 e0       	ldi	r17, 0x02	; 2
     a18:	00 d0       	rcall	.+0      	; 0xa1a <Task1+0x1ca>
     a1a:	00 d0       	rcall	.+0      	; 0xa1c <Task1+0x1cc>
     a1c:	ed b7       	in	r30, 0x3d	; 61
     a1e:	fe b7       	in	r31, 0x3e	; 62
     a20:	31 96       	adiw	r30, 0x01	; 1
     a22:	ad b7       	in	r26, 0x3d	; 61
     a24:	be b7       	in	r27, 0x3e	; 62
     a26:	12 96       	adiw	r26, 0x02	; 2
     a28:	1c 93       	st	X, r17
     a2a:	0e 93       	st	-X, r16
     a2c:	11 97       	sbiw	r26, 0x01	; 1
     a2e:	89 91       	ld	r24, Y+
     a30:	82 83       	std	Z+2, r24	; 0x02
     a32:	13 82       	std	Z+3, r1	; 0x03
     a34:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
	printf( "After write:\r\n" );
	val=mmc_readsector(sector,sectorbuffer);    // read a data sector
       	printf( "readsector returned %d\n",val );
       	if(val==0)
	{
	 for(cnt=0; cnt<32; cnt++ )
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	b4 e0       	ldi	r27, 0x04	; 4
     a42:	ce 3c       	cpi	r28, 0xCE	; 206
     a44:	db 07       	cpc	r29, r27
     a46:	41 f7       	brne	.-48     	; 0xa18 <Task1+0x1c8>
		printf( "%d ",sectorbuffer[cnt] );
	printf( "\n\r" ); 
     a48:	00 d0       	rcall	.+0      	; 0xa4a <Task1+0x1fa>
     a4a:	8a ec       	ldi	r24, 0xCA	; 202
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	ed b7       	in	r30, 0x3d	; 61
     a50:	fe b7       	in	r31, 0x3e	; 62
     a52:	92 83       	std	Z+2, r25	; 0x02
     a54:	81 83       	std	Z+1, r24	; 0x01
     a56:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
	}


  	while(1) {
	nrk_wait_until_next_period();
     a5e:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <nrk_wait_until_next_period>
     a62:	fd cf       	rjmp	.-6      	; 0xa5e <Task1+0x20e>

00000a64 <main>:

int
main ()
{
  uint16_t div;
  nrk_setup_ports();
     a64:	0e 94 11 10 	call	0x2022	; 0x2022 <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
     a68:	87 e0       	ldi	r24, 0x07	; 7
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <nrk_setup_uart>

  printf( "Starting up...\r\n" );
     a70:	8b ed       	ldi	r24, 0xDB	; 219
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <puts>

  nrk_init();
     a78:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <nrk_init>

  nrk_led_clr(0);
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 60 13 	call	0x26c0	; 0x26c0 <nrk_led_clr>
  nrk_led_clr(1);
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 60 13 	call	0x26c0	; 0x26c0 <nrk_led_clr>
  nrk_led_clr(2);
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 60 13 	call	0x26c0	; 0x26c0 <nrk_led_clr>
  nrk_led_clr(3);
     a94:	83 e0       	ldi	r24, 0x03	; 3
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 60 13 	call	0x26c0	; 0x26c0 <nrk_led_clr>
  
  nrk_time_set(0,0);
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <nrk_time_set>
  nrk_create_taskset ();
     ab0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <nrk_create_taskset>
  nrk_start();
     ab4:	0e 94 7e 15 	call	0x2afc	; 0x2afc <nrk_start>
  
  return 0;
}
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	08 95       	ret

00000abe <spi_byte>:
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     abe:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)))
     ac0:	0d b4       	in	r0, 0x2d	; 45
     ac2:	07 fe       	sbrs	r0, 7
     ac4:	fd cf       	rjmp	.-6      	; 0xac0 <spi_byte+0x2>
	{}
	return SPDR;
     ac6:	8e b5       	in	r24, 0x2e	; 46
}
     ac8:	08 95       	ret

00000aca <mmc_send_command>:
void mmc_send_command(uint8_t command, uint16_t px, uint16_t py)
{

	register union u16convert r;

	MMC_CS_PORT &= ~(1 << MMC_CS);	// enable CS
     aca:	76 98       	cbi	0x0e, 6	; 14
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     acc:	9f ef       	ldi	r25, 0xFF	; 255
     ace:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)))
     ad0:	0d b4       	in	r0, 0x2d	; 45
     ad2:	07 fe       	sbrs	r0, 7
     ad4:	fd cf       	rjmp	.-6      	; 0xad0 <mmc_send_command+0x6>
	{}
	return SPDR;
     ad6:	9e b5       	in	r25, 0x2e	; 46

	MMC_CS_PORT &= ~(1 << MMC_CS);	// enable CS

	spi_byte(0xff);			// dummy byte

	spi_byte(command | 0x40);
     ad8:	80 64       	ori	r24, 0x40	; 64
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     ada:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)))
     adc:	0d b4       	in	r0, 0x2d	; 45
     ade:	07 fe       	sbrs	r0, 7
     ae0:	fd cf       	rjmp	.-6      	; 0xadc <mmc_send_command+0x12>
	{}
	return SPDR;
     ae2:	8e b5       	in	r24, 0x2e	; 46
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     ae4:	7e bd       	out	0x2e, r23	; 46
	while(!(SPSR & (1<<SPIF)))
     ae6:	0d b4       	in	r0, 0x2d	; 45
     ae8:	07 fe       	sbrs	r0, 7
     aea:	fd cf       	rjmp	.-6      	; 0xae6 <mmc_send_command+0x1c>
	{}
	return SPDR;
     aec:	8e b5       	in	r24, 0x2e	; 46
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     aee:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF)))
     af0:	0d b4       	in	r0, 0x2d	; 45
     af2:	07 fe       	sbrs	r0, 7
     af4:	fd cf       	rjmp	.-6      	; 0xaf0 <mmc_send_command+0x26>
	{}
	return SPDR;
     af6:	8e b5       	in	r24, 0x2e	; 46
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     af8:	5e bd       	out	0x2e, r21	; 46
	while(!(SPSR & (1<<SPIF)))
     afa:	0d b4       	in	r0, 0x2d	; 45
     afc:	07 fe       	sbrs	r0, 7
     afe:	fd cf       	rjmp	.-6      	; 0xafa <mmc_send_command+0x30>
	{}
	return SPDR;
     b00:	8e b5       	in	r24, 0x2e	; 46
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     b02:	4e bd       	out	0x2e, r20	; 46
	while(!(SPSR & (1<<SPIF)))
     b04:	0d b4       	in	r0, 0x2d	; 45
     b06:	07 fe       	sbrs	r0, 7
     b08:	fd cf       	rjmp	.-6      	; 0xb04 <mmc_send_command+0x3a>
	{}
	return SPDR;
     b0a:	8e b5       	in	r24, 0x2e	; 46
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     b0c:	85 e9       	ldi	r24, 0x95	; 149
     b0e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)))
     b10:	0d b4       	in	r0, 0x2d	; 45
     b12:	07 fe       	sbrs	r0, 7
     b14:	fd cf       	rjmp	.-6      	; 0xb10 <mmc_send_command+0x46>
	{}
	return SPDR;
     b16:	8e b5       	in	r24, 0x2e	; 46
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     b18:	8f ef       	ldi	r24, 0xFF	; 255
     b1a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)))
     b1c:	0d b4       	in	r0, 0x2d	; 45
     b1e:	07 fe       	sbrs	r0, 7
     b20:	fd cf       	rjmp	.-6      	; 0xb1c <mmc_send_command+0x52>
	{}
	return SPDR;
     b22:	8e b5       	in	r24, 0x2e	; 46
	spi_byte(0x95);			// correct CRC for first command in SPI          
							// after that CRC is ignored, so no problem with 
							// always sending 0x95                           
	spi_byte(0xff);			// ignore return byte

}
     b24:	08 95       	ret

00000b26 <mmc_get>:
/** Get Token.
	Wait for and return a non-ff token from the MMC/SD card
	\return The received token or 0xFF if timeout
*/
uint8_t mmc_get(void)
{
     b26:	2f ef       	ldi	r18, 0xFF	; 255
     b28:	3f ef       	ldi	r19, 0xFF	; 255
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     b2a:	9f ef       	ldi	r25, 0xFF	; 255
     b2c:	07 c0       	rjmp	.+14     	; 0xb3c <mmc_get+0x16>
     b2e:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)))
     b30:	0d b4       	in	r0, 0x2d	; 45
     b32:	07 fe       	sbrs	r0, 7
     b34:	fd cf       	rjmp	.-6      	; 0xb30 <mmc_get+0xa>
	{}
	return SPDR;
     b36:	8e b5       	in	r24, 0x2e	; 46
uint8_t mmc_get(void)
{
	uint16_t i = 0xffff;
	uint8_t b = 0xff;

	while ((b == 0xff) && (--i)) 
     b38:	8f 3f       	cpi	r24, 0xFF	; 255
     b3a:	21 f4       	brne	.+8      	; 0xb44 <mmc_get+0x1e>
     b3c:	21 50       	subi	r18, 0x01	; 1
     b3e:	30 40       	sbci	r19, 0x00	; 0
     b40:	b1 f7       	brne	.-20     	; 0xb2e <mmc_get+0x8>
     b42:	8f ef       	ldi	r24, 0xFF	; 255
	{
		b = spi_byte(0xff);
	}
	return b;

}
     b44:	08 95       	ret

00000b46 <mmc_datatoken>:
/** Get Datatoken.
	Wait for and return a data token from the MMC/SD card
	\return The received token or 0xFF if timeout
*/
uint8_t mmc_datatoken(void)
{
     b46:	2f ef       	ldi	r18, 0xFF	; 255
     b48:	3f ef       	ldi	r19, 0xFF	; 255
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     b4c:	9f ef       	ldi	r25, 0xFF	; 255
     b4e:	07 c0       	rjmp	.+14     	; 0xb5e <mmc_datatoken+0x18>
     b50:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)))
     b52:	0d b4       	in	r0, 0x2d	; 45
     b54:	07 fe       	sbrs	r0, 7
     b56:	fd cf       	rjmp	.-6      	; 0xb52 <mmc_datatoken+0xc>
	{}
	return SPDR;
     b58:	8e b5       	in	r24, 0x2e	; 46
uint8_t mmc_datatoken(void)
{
	uint16_t i = 0xffff;
	uint8_t b = 0xff;

	while ((b != 0xfe) && (--i)) 
     b5a:	8e 3f       	cpi	r24, 0xFE	; 254
     b5c:	19 f0       	breq	.+6      	; 0xb64 <mmc_datatoken+0x1e>
     b5e:	21 50       	subi	r18, 0x01	; 1
     b60:	30 40       	sbci	r19, 0x00	; 0
     b62:	b1 f7       	brne	.-20     	; 0xb50 <mmc_datatoken+0xa>
	{
		b = spi_byte(0xff);
	}
	return b;
}
     b64:	08 95       	ret

00000b66 <mmc_clock_and_release>:
/** Finish Clocking and Release card.
	Send 10 clocks to the MMC/SD card
 	and release the CS line 
*/
void mmc_clock_and_release(void)
{
     b66:	80 e0       	ldi	r24, 0x00	; 0
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)))
     b6c:	0d b4       	in	r0, 0x2d	; 45
     b6e:	07 fe       	sbrs	r0, 7
     b70:	fd cf       	rjmp	.-6      	; 0xb6c <mmc_clock_and_release+0x6>
	{}
	return SPDR;
     b72:	2e b5       	in	r18, 0x2e	; 46
void mmc_clock_and_release(void)
{
	uint8_t i;

	// SD cards require at least 8 final clocks
	for(i=0;i<10;i++)
     b74:	8f 5f       	subi	r24, 0xFF	; 255
     b76:	8a 30       	cpi	r24, 0x0A	; 10
     b78:	c1 f7       	brne	.-16     	; 0xb6a <mmc_clock_and_release+0x4>
		spi_byte(0xff);	

    MMC_CS_PORT |= (1 << MMC_CS);	// release CS
     b7a:	76 9a       	sbi	0x0e, 6	; 14
}
     b7c:	08 95       	ret

00000b7e <mmc_readsector>:
	\param lba	Logical sectornumber to read
	\param buffer	Pointer to buffer for received data
	\return 0 on success, -1 on error
*/
int mmc_readsector(uint32_t lba, uint8_t *buffer)
{
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	ea 01       	movw	r28, r20
	uint16_t i;

	// send read command and logical sector address
	mmc_send_command(17,(lba>>7) & 0xffff, (lba<<9) & 0xffff);
     b8c:	8c 01       	movw	r16, r24
     b8e:	9d 01       	movw	r18, r26
     b90:	47 e0       	ldi	r20, 0x07	; 7
     b92:	36 95       	lsr	r19
     b94:	27 95       	ror	r18
     b96:	17 95       	ror	r17
     b98:	07 95       	ror	r16
     b9a:	4a 95       	dec	r20
     b9c:	d1 f7       	brne	.-12     	; 0xb92 <mmc_readsector+0x14>
     b9e:	ac 01       	movw	r20, r24
     ba0:	54 2f       	mov	r21, r20
     ba2:	44 27       	eor	r20, r20
     ba4:	55 0f       	add	r21, r21
     ba6:	81 e1       	ldi	r24, 0x11	; 17
     ba8:	b8 01       	movw	r22, r16
     baa:	0e 94 65 05 	call	0xaca	; 0xaca <mmc_send_command>

	if (mmc_datatoken() != 0xfe)	// if no valid token
     bae:	0e 94 a3 05 	call	0xb46	; 0xb46 <mmc_datatoken>
     bb2:	8e 3f       	cpi	r24, 0xFE	; 254
     bb4:	29 f0       	breq	.+10     	; 0xbc0 <mmc_readsector+0x42>
	{
	    mmc_clock_and_release();	// cleanup and	
     bb6:	0e 94 b3 05 	call	0xb66	; 0xb66 <mmc_clock_and_release>
     bba:	2f ef       	ldi	r18, 0xFF	; 255
     bbc:	3f ef       	ldi	r19, 0xFF	; 255
   		return -1;					// return error code
     bbe:	20 c0       	rjmp	.+64     	; 0xc00 <mmc_readsector+0x82>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     bc4:	2f ef       	ldi	r18, 0xFF	; 255
     bc6:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & (1<<SPIF)))
     bc8:	0d b4       	in	r0, 0x2d	; 45
     bca:	07 fe       	sbrs	r0, 7
     bcc:	fd cf       	rjmp	.-6      	; 0xbc8 <mmc_readsector+0x4a>
	{}
	return SPDR;
     bce:	3e b5       	in	r19, 0x2e	; 46
	    mmc_clock_and_release();	// cleanup and	
   		return -1;					// return error code
	}

	for (i=0;i<512;i++)				// read sector data
    	*buffer++ = spi_byte(0xff);
     bd0:	38 83       	st	Y, r19
	{
	    mmc_clock_and_release();	// cleanup and	
   		return -1;					// return error code
	}

	for (i=0;i<512;i++)				// read sector data
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	32 e0       	ldi	r19, 0x02	; 2
     bd6:	80 30       	cpi	r24, 0x00	; 0
     bd8:	93 07       	cpc	r25, r19
     bda:	11 f0       	breq	.+4      	; 0xbe0 <mmc_readsector+0x62>
    	*buffer++ = spi_byte(0xff);
     bdc:	21 96       	adiw	r28, 0x01	; 1
     bde:	f3 cf       	rjmp	.-26     	; 0xbc6 <mmc_readsector+0x48>
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)))
     be4:	0d b4       	in	r0, 0x2d	; 45
     be6:	07 fe       	sbrs	r0, 7
     be8:	fd cf       	rjmp	.-6      	; 0xbe4 <mmc_readsector+0x66>
	{}
	return SPDR;
     bea:	8e b5       	in	r24, 0x2e	; 46
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)))
     bf0:	0d b4       	in	r0, 0x2d	; 45
     bf2:	07 fe       	sbrs	r0, 7
     bf4:	fd cf       	rjmp	.-6      	; 0xbf0 <mmc_readsector+0x72>
	{}
	return SPDR;
     bf6:	8e b5       	in	r24, 0x2e	; 46
    	*buffer++ = spi_byte(0xff);

	spi_byte(0xff);					// ignore dummy checksum
	spi_byte(0xff);					// ignore dummy checksum

    mmc_clock_and_release();		// cleanup
     bf8:	0e 94 b3 05 	call	0xb66	; 0xb66 <mmc_clock_and_release>
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0

	return 0;						// return success		
}
     c00:	c9 01       	movw	r24, r18
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	08 95       	ret

00000c0c <mmc_writesector>:
	\param lba	Logical sectornumber to read
	\param buffer	Pointer to buffer for received data
	\return 0 on success, -1 on error
*/
int mmc_writesector(uint32_t lba, uint8_t *buffer)
{
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	ea 01       	movw	r28, r20
	uint16_t i;
	uint8_t t,b,j;
	// send read command and logical sector address
	mmc_send_command(24,(lba>>7) & 0xffff, (lba<<9) & 0xffff);
     c1a:	8c 01       	movw	r16, r24
     c1c:	9d 01       	movw	r18, r26
     c1e:	77 e0       	ldi	r23, 0x07	; 7
     c20:	36 95       	lsr	r19
     c22:	27 95       	ror	r18
     c24:	17 95       	ror	r17
     c26:	07 95       	ror	r16
     c28:	7a 95       	dec	r23
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <mmc_writesector+0x14>
     c2c:	ac 01       	movw	r20, r24
     c2e:	54 2f       	mov	r21, r20
     c30:	44 27       	eor	r20, r20
     c32:	55 0f       	add	r21, r21
     c34:	88 e1       	ldi	r24, 0x18	; 24
     c36:	b8 01       	movw	r22, r16
     c38:	0e 94 65 05 	call	0xaca	; 0xaca <mmc_send_command>
	{
	    printf( "no valid data token\r\n" );
	    mmc_clock_and_release();	// cleanup and	
   		return -1;					// return error code
	}*/
	mmc_get();
     c3c:	0e 94 93 05 	call	0xb26	; 0xb26 <mmc_get>
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     c40:	8e ef       	ldi	r24, 0xFE	; 254
     c42:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)))
     c44:	0d b4       	in	r0, 0x2d	; 45
     c46:	07 fe       	sbrs	r0, 7
     c48:	fd cf       	rjmp	.-6      	; 0xc44 <mmc_writesector+0x38>
	{}
	return SPDR;
     c4a:	8e b5       	in	r24, 0x2e	; 46
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
	}*/
	mmc_get();
	spi_byte(0xFE);
	for (i=0;i<512;i++)				// read sector data
    		{
		spi_byte(buffer[i]);
     c50:	fe 01       	movw	r30, r28
     c52:	e8 0f       	add	r30, r24
     c54:	f9 1f       	adc	r31, r25
     c56:	20 81       	ld	r18, Z
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     c58:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & (1<<SPIF)))
     c5a:	0d b4       	in	r0, 0x2d	; 45
     c5c:	07 fe       	sbrs	r0, 7
     c5e:	fd cf       	rjmp	.-6      	; 0xc5a <mmc_writesector+0x4e>
	{}
	return SPDR;
     c60:	2e b5       	in	r18, 0x2e	; 46
	    mmc_clock_and_release();	// cleanup and	
   		return -1;					// return error code
	}*/
	mmc_get();
	spi_byte(0xFE);
	for (i=0;i<512;i++)				// read sector data
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	22 e0       	ldi	r18, 0x02	; 2
     c66:	80 30       	cpi	r24, 0x00	; 0
     c68:	92 07       	cpc	r25, r18
     c6a:	91 f7       	brne	.-28     	; 0xc50 <mmc_writesector+0x44>
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     c6c:	8f ef       	ldi	r24, 0xFF	; 255
     c6e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)))
     c70:	0d b4       	in	r0, 0x2d	; 45
     c72:	07 fe       	sbrs	r0, 7
     c74:	fd cf       	rjmp	.-6      	; 0xc70 <mmc_writesector+0x64>
	{}
	return SPDR;
     c76:	8e b5       	in	r24, 0x2e	; 46
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     c78:	8f ef       	ldi	r24, 0xFF	; 255
     c7a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)))
     c7c:	0d b4       	in	r0, 0x2d	; 45
     c7e:	07 fe       	sbrs	r0, 7
     c80:	fd cf       	rjmp	.-6      	; 0xc7c <mmc_writesector+0x70>
	{}
	return SPDR;
     c82:	8e b5       	in	r24, 0x2e	; 46
		}

	spi_byte(0xff);					// ignore dummy checksum
	spi_byte(0xff);					// ignore dummy checksum

    mmc_clock_and_release();		// cleanup
     c84:	0e 94 b3 05 	call	0xb66	; 0xb66 <mmc_clock_and_release>

	return 0;						// return success		
}
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	08 95       	ret

00000c96 <mmc_card_detect>:

uint8_t mmc_card_detect()
{
return (!(MMC_DETECT_PIN & (1<<MMC_DETECT)));
     c96:	83 b1       	in	r24, 0x03	; 3
     c98:	82 95       	swap	r24
     c9a:	8f 70       	andi	r24, 0x0F	; 15
     c9c:	80 95       	com	r24

}
     c9e:	81 70       	andi	r24, 0x01	; 1
     ca0:	08 95       	ret

00000ca2 <mmc_init>:
	Initialize I/O ports for the MMC/SD interface and 
	send init commands to the MMC/SD card
	\return 0 on success, other values on error 
*/
uint8_t mmc_init(void)
{
     ca2:	1f 93       	push	r17
	int i;


	// setup I/O ports 

	SPI_PORT &= ~((1 << MMC_SCK) | (1 << MMC_MOSI));	// low bits
     ca4:	85 b1       	in	r24, 0x05	; 5
     ca6:	89 7f       	andi	r24, 0xF9	; 249
     ca8:	85 b9       	out	0x05, r24	; 5
	SPI_PORT |= (1 << MMC_MISO);						// high bits
     caa:	2b 9a       	sbi	0x05, 3	; 5
	SPI_DDR  |= (1<<MMC_SCK) | (1<<MMC_MOSI);			// direction
     cac:	84 b1       	in	r24, 0x04	; 4
     cae:	86 60       	ori	r24, 0x06	; 6
     cb0:	84 b9       	out	0x04, r24	; 4


	MMC_DETECT_PORT |= (1 << MMC_DETECT);	// Initial level is high	
     cb2:	2c 9a       	sbi	0x05, 4	; 5
	MMC_DETECT_DDR  &= ~(1 << MMC_DETECT);	// Direction is input 
     cb4:	24 98       	cbi	0x04, 4	; 4
	
	MMC_CS_PORT |= (1 << MMC_CS);	// Initial level is high	
     cb6:	76 9a       	sbi	0x0e, 6	; 14
	MMC_CS_DIR  |= (1 << MMC_CS);	// Direction is output
     cb8:	6e 9a       	sbi	0x0d, 6	; 13


//	SPI_DDR |= (1<<0);			// assume it's bit0 (mega128, portB and others)

	SPCR = (1<<MSTR)|(1<<SPE);	// enable SPI interface
     cba:	80 e5       	ldi	r24, 0x50	; 80
     cbc:	8c bd       	out	0x2c, r24	; 44
	SPSR = 1;					// set double speed	
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	8d bd       	out	0x2d, r24	; 45
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     cc6:	2f ef       	ldi	r18, 0xFF	; 255
     cc8:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & (1<<SPIF)))
     cca:	0d b4       	in	r0, 0x2d	; 45
     ccc:	07 fe       	sbrs	r0, 7
     cce:	fd cf       	rjmp	.-6      	; 0xcca <mmc_init+0x28>
	{}
	return SPDR;
     cd0:	3e b5       	in	r19, 0x2e	; 46

	SPCR = (1<<MSTR)|(1<<SPE);	// enable SPI interface
	SPSR = 1;					// set double speed	


	for(i=0;i<10;i++)			// send 80 clocks while card power stabilizes
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	8a 30       	cpi	r24, 0x0A	; 10
     cd6:	91 05       	cpc	r25, r1
     cd8:	b9 f7       	brne	.-18     	; 0xcc8 <mmc_init+0x26>
		spi_byte(0xff);

	mmc_send_command(0,0,0);	// send CMD0 - reset card
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	50 e0       	ldi	r21, 0x00	; 0
     ce4:	0e 94 65 05 	call	0xaca	; 0xaca <mmc_send_command>

	if (mmc_get() != 1)			// if no valid response code
     ce8:	0e 94 93 05 	call	0xb26	; 0xb26 <mmc_get>
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	21 f0       	breq	.+8      	; 0xcf8 <mmc_init+0x56>
	{
	   mmc_clock_and_release();
     cf0:	0e 94 b3 05 	call	0xb66	; 0xb66 <mmc_clock_and_release>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
	   //putchar('a');
	   return 1;  				// card cannot be detected
     cf6:	1b c0       	rjmp	.+54     	; 0xd2e <mmc_init+0x8c>
*/
uint8_t spi_byte(uint8_t byte)
{
	//putlong(byte);
	//printf("\t");
	SPDR = byte;
     cf8:	1f ef       	ldi	r17, 0xFF	; 255
     cfa:	1e bd       	out	0x2e, r17	; 46
	while(!(SPSR & (1<<SPIF)))
     cfc:	0d b4       	in	r0, 0x2d	; 45
     cfe:	07 fe       	sbrs	r0, 7
     d00:	fd cf       	rjmp	.-6      	; 0xcfc <mmc_init+0x5a>
	{}
	return SPDR;
     d02:	8e b5       	in	r24, 0x2e	; 46

	//
	// send CMD1 until we get a 0 back, indicating card is done initializing 
	//
	i = 0xffff;						// max timeout
	while ((spi_byte(0xff) != 0) && (--i))	// wait for it
     d04:	88 23       	and	r24, r24
     d06:	41 f0       	breq	.+16     	; 0xd18 <mmc_init+0x76>
	{
		//putchar('b');
	     mmc_send_command(1,0,0);	// send CMD1 - activate card init
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	0e 94 65 05 	call	0xaca	; 0xaca <mmc_send_command>
     d16:	f1 cf       	rjmp	.-30     	; 0xcfa <mmc_init+0x58>

	}
	   putchar('v');
     d18:	60 91 ac 0b 	lds	r22, 0x0BAC
     d1c:	70 91 ad 0b 	lds	r23, 0x0BAD
     d20:	86 e7       	ldi	r24, 0x76	; 118
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 ad 29 	call	0x535a	; 0x535a <fputc>
    mmc_clock_and_release();		// clean up
     d28:	0e 94 b3 05 	call	0xb66	; 0xb66 <mmc_clock_and_release>
     d2c:	80 e0       	ldi	r24, 0x00	; 0
	if (i == 0)						// if we timed out above
	   return 2;					// return failure code


	return 0;
}
     d2e:	1f 91       	pop	r17
     d30:	08 95       	ret

00000d32 <putlong>:
#include <stdio.h>
#include "mmc.h"


void putlong(uint8_t x)
{
     d32:	1f 93       	push	r17
     d34:	18 2f       	mov	r17, r24
	 if (x > 10) putlong(x / 10);
     d36:	8b 30       	cpi	r24, 0x0B	; 11
     d38:	28 f0       	brcs	.+10     	; 0xd44 <putlong+0x12>
     d3a:	6a e0       	ldi	r22, 0x0A	; 10
     d3c:	0e 94 14 29 	call	0x5228	; 0x5228 <__udivmodqi4>
     d40:	0e 94 99 06 	call	0xd32	; 0xd32 <putlong>
	putchar(x % 10+'0');
     d44:	81 2f       	mov	r24, r17
     d46:	6a e0       	ldi	r22, 0x0A	; 10
     d48:	0e 94 14 29 	call	0x5228	; 0x5228 <__udivmodqi4>
     d4c:	89 2f       	mov	r24, r25
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	60 91 ac 0b 	lds	r22, 0x0BAC
     d54:	70 91 ad 0b 	lds	r23, 0x0BAD
     d58:	c0 96       	adiw	r24, 0x30	; 48
     d5a:	0e 94 ad 29 	call	0x535a	; 0x535a <fputc>

}
     d5e:	1f 91       	pop	r17
     d60:	08 95       	ret

00000d62 <halRfSetChannel>:
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	9c 01       	movw	r18, r24
     d66:	2b 50       	subi	r18, 0x0B	; 11
     d68:	30 40       	sbci	r19, 0x00	; 0
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
     d6a:	22 0f       	add	r18, r18
     d6c:	33 1f       	adc	r19, r19
     d6e:	22 0f       	add	r18, r18
     d70:	33 1f       	adc	r19, r19
     d72:	86 5a       	subi	r24, 0xA6	; 166
     d74:	9e 4b       	sbci	r25, 0xBE	; 190
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
     d76:	82 0f       	add	r24, r18
     d78:	93 1f       	adc	r25, r19
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
     d7a:	f8 94       	cli
	FASTSPI_SETREG(CC2420_FSCTRL, f);
     d7c:	40 98       	cbi	0x08, 0	; 8
     d7e:	28 e1       	ldi	r18, 0x18	; 24
     d80:	2e bd       	out	0x2e, r18	; 46
     d82:	0d b4       	in	r0, 0x2d	; 45
     d84:	07 fe       	sbrs	r0, 7
     d86:	fd cf       	rjmp	.-6      	; 0xd82 <halRfSetChannel+0x20>
     d88:	9e bd       	out	0x2e, r25	; 46
     d8a:	0d b4       	in	r0, 0x2d	; 45
     d8c:	07 fe       	sbrs	r0, 7
     d8e:	fd cf       	rjmp	.-6      	; 0xd8a <halRfSetChannel+0x28>
     d90:	8e bd       	out	0x2e, r24	; 46
     d92:	0d b4       	in	r0, 0x2d	; 45
     d94:	07 fe       	sbrs	r0, 7
     d96:	fd cf       	rjmp	.-6      	; 0xd92 <halRfSetChannel+0x30>
     d98:	40 9a       	sbi	0x08, 0	; 8
	ENABLE_GLOBAL_INT();
     d9a:	78 94       	sei

} // rfSetChannel
     d9c:	08 95       	ret

00000d9e <halRfWaitForCrystalOscillator>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
     d9e:	f8 94       	cli
	    FASTSPI_UPD_STATUS(spiStatusByte);
     da0:	40 98       	cbi	0x08, 0	; 8
     da2:	1e bc       	out	0x2e, r1	; 46
     da4:	0d b4       	in	r0, 0x2d	; 45
     da6:	07 fe       	sbrs	r0, 7
     da8:	fd cf       	rjmp	.-6      	; 0xda4 <halRfWaitForCrystalOscillator+0x6>
     daa:	8e b5       	in	r24, 0x2e	; 46
     dac:	40 9a       	sbi	0x08, 0	; 8
	    ENABLE_GLOBAL_INT();
     dae:	78 94       	sei
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
     db0:	86 ff       	sbrs	r24, 6
     db2:	f5 cf       	rjmp	.-22     	; 0xd9e <halRfWaitForCrystalOscillator>

} // halRfWaitForCrystalOscillator
     db4:	08 95       	ret

00000db6 <rf_security_last_pkt_status>:

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
}
     db6:	80 91 be 0a 	lds	r24, 0x0ABE
     dba:	08 95       	ret

00000dbc <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
     dbc:	fc 01       	movw	r30, r24
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
     dbe:	40 98       	cbi	0x08, 0	; 8
     dc0:	89 ec       	ldi	r24, 0xC9	; 201
     dc2:	8e bd       	out	0x2e, r24	; 46
     dc4:	0d b4       	in	r0, 0x2d	; 45
     dc6:	07 fe       	sbrs	r0, 7
     dc8:	fd cf       	rjmp	.-6      	; 0xdc4 <rf_security_set_ctr_counter+0x8>
     dca:	80 e8       	ldi	r24, 0x80	; 128
     dcc:	8e bd       	out	0x2e, r24	; 46
     dce:	0d b4       	in	r0, 0x2d	; 45
     dd0:	07 fe       	sbrs	r0, 7
     dd2:	fd cf       	rjmp	.-6      	; 0xdce <rf_security_set_ctr_counter+0x12>
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	81 50       	subi	r24, 0x01	; 1
     dd8:	df 01       	movw	r26, r30
     dda:	a8 0f       	add	r26, r24
     ddc:	b1 1d       	adc	r27, r1
     dde:	9c 91       	ld	r25, X
     de0:	9e bd       	out	0x2e, r25	; 46
     de2:	0d b4       	in	r0, 0x2d	; 45
     de4:	07 fe       	sbrs	r0, 7
     de6:	fd cf       	rjmp	.-6      	; 0xde2 <rf_security_set_ctr_counter+0x26>
     de8:	88 23       	and	r24, r24
     dea:	a9 f7       	brne	.-22     	; 0xdd6 <rf_security_set_ctr_counter+0x1a>
     dec:	40 9a       	sbi	0x08, 0	; 8
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
     dee:	40 98       	cbi	0x08, 0	; 8
     df0:	8b ec       	ldi	r24, 0xCB	; 203
     df2:	8e bd       	out	0x2e, r24	; 46
     df4:	0d b4       	in	r0, 0x2d	; 45
     df6:	07 fe       	sbrs	r0, 7
     df8:	fd cf       	rjmp	.-6      	; 0xdf4 <rf_security_set_ctr_counter+0x38>
     dfa:	80 e8       	ldi	r24, 0x80	; 128
     dfc:	8e bd       	out	0x2e, r24	; 46
     dfe:	0d b4       	in	r0, 0x2d	; 45
     e00:	07 fe       	sbrs	r0, 7
     e02:	fd cf       	rjmp	.-6      	; 0xdfe <rf_security_set_ctr_counter+0x42>
     e04:	82 e0       	ldi	r24, 0x02	; 2
     e06:	81 50       	subi	r24, 0x01	; 1
     e08:	df 01       	movw	r26, r30
     e0a:	a8 0f       	add	r26, r24
     e0c:	b1 1d       	adc	r27, r1
     e0e:	12 96       	adiw	r26, 0x02	; 2
     e10:	9c 91       	ld	r25, X
     e12:	12 97       	sbiw	r26, 0x02	; 2
     e14:	9e bd       	out	0x2e, r25	; 46
     e16:	0d b4       	in	r0, 0x2d	; 45
     e18:	07 fe       	sbrs	r0, 7
     e1a:	fd cf       	rjmp	.-6      	; 0xe16 <rf_security_set_ctr_counter+0x5a>
     e1c:	88 23       	and	r24, r24
     e1e:	99 f7       	brne	.-26     	; 0xe06 <rf_security_set_ctr_counter+0x4a>
     e20:	40 9a       	sbi	0x08, 0	; 8
tx_ctr[0]=counter[0];
     e22:	80 81       	ld	r24, Z
     e24:	80 93 bf 0a 	sts	0x0ABF, r24
tx_ctr[1]=counter[1];
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	80 93 c0 0a 	sts	0x0AC0, r24
tx_ctr[2]=counter[2];
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	80 93 c1 0a 	sts	0x0AC1, r24
tx_ctr[3]=counter[3];
     e34:	83 81       	ldd	r24, Z+3	; 0x03
     e36:	80 93 c2 0a 	sts	0x0AC2, r24
}
     e3a:	08 95       	ret

00000e3c <rf_security_enable>:
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
     e3c:	40 98       	cbi	0x08, 0	; 8
     e3e:	89 e1       	ldi	r24, 0x19	; 25
     e40:	8e bd       	out	0x2e, r24	; 46
     e42:	0d b4       	in	r0, 0x2d	; 45
     e44:	07 fe       	sbrs	r0, 7
     e46:	fd cf       	rjmp	.-6      	; 0xe42 <rf_security_enable+0x6>
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	8e bd       	out	0x2e, r24	; 46
     e4c:	0d b4       	in	r0, 0x2d	; 45
     e4e:	07 fe       	sbrs	r0, 7
     e50:	fd cf       	rjmp	.-6      	; 0xe4c <rf_security_enable+0x10>
     e52:	86 e0       	ldi	r24, 0x06	; 6
     e54:	8e bd       	out	0x2e, r24	; 46
     e56:	0d b4       	in	r0, 0x2d	; 45
     e58:	07 fe       	sbrs	r0, 7
     e5a:	fd cf       	rjmp	.-6      	; 0xe56 <rf_security_enable+0x1a>
     e5c:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
     e5e:	40 98       	cbi	0x08, 0	; 8
     e60:	8a e1       	ldi	r24, 0x1A	; 26
     e62:	8e bd       	out	0x2e, r24	; 46
     e64:	0d b4       	in	r0, 0x2d	; 45
     e66:	07 fe       	sbrs	r0, 7
     e68:	fd cf       	rjmp	.-6      	; 0xe64 <rf_security_enable+0x28>
     e6a:	8e e0       	ldi	r24, 0x0E	; 14
     e6c:	8e bd       	out	0x2e, r24	; 46
     e6e:	0d b4       	in	r0, 0x2d	; 45
     e70:	07 fe       	sbrs	r0, 7
     e72:	fd cf       	rjmp	.-6      	; 0xe6e <rf_security_enable+0x32>
     e74:	8e e0       	ldi	r24, 0x0E	; 14
     e76:	8e bd       	out	0x2e, r24	; 46
     e78:	0d b4       	in	r0, 0x2d	; 45
     e7a:	07 fe       	sbrs	r0, 7
     e7c:	fd cf       	rjmp	.-6      	; 0xe78 <rf_security_enable+0x3c>
     e7e:	40 9a       	sbi	0x08, 0	; 8

security_enable=1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	80 93 af 0a 	sts	0x0AAF, r24
}
     e86:	08 95       	ret

00000e88 <rf_security_disable>:



void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
     e88:	40 98       	cbi	0x08, 0	; 8
     e8a:	89 e1       	ldi	r24, 0x19	; 25
     e8c:	8e bd       	out	0x2e, r24	; 46
     e8e:	0d b4       	in	r0, 0x2d	; 45
     e90:	07 fe       	sbrs	r0, 7
     e92:	fd cf       	rjmp	.-6      	; 0xe8e <rf_security_disable+0x6>
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	8e bd       	out	0x2e, r24	; 46
     e98:	0d b4       	in	r0, 0x2d	; 45
     e9a:	07 fe       	sbrs	r0, 7
     e9c:	fd cf       	rjmp	.-6      	; 0xe98 <rf_security_disable+0x10>
     e9e:	84 ec       	ldi	r24, 0xC4	; 196
     ea0:	8e bd       	out	0x2e, r24	; 46
     ea2:	0d b4       	in	r0, 0x2d	; 45
     ea4:	07 fe       	sbrs	r0, 7
     ea6:	fd cf       	rjmp	.-6      	; 0xea2 <rf_security_disable+0x1a>
     ea8:	40 9a       	sbi	0x08, 0	; 8
  security_enable=0;
     eaa:	10 92 af 0a 	sts	0x0AAF, r1
}
     eae:	08 95       	ret

00000eb0 <rf_get_sem>:
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     eb0:	80 91 ad 0a 	lds	r24, 0x0AAD
     eb4:	90 91 ae 0a 	lds	r25, 0x0AAE
     eb8:	08 95       	ret

00000eba <rf_tx_power>:
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	8f 71       	andi	r24, 0x1F	; 31
     ebe:	90 70       	andi	r25, 0x00	; 0
     ec0:	80 6e       	ori	r24, 0xE0	; 224
     ec2:	90 6a       	ori	r25, 0xA0	; 160
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
     ec4:	40 98       	cbi	0x08, 0	; 8
     ec6:	25 e1       	ldi	r18, 0x15	; 21
     ec8:	2e bd       	out	0x2e, r18	; 46
     eca:	0d b4       	in	r0, 0x2d	; 45
     ecc:	07 fe       	sbrs	r0, 7
     ece:	fd cf       	rjmp	.-6      	; 0xeca <rf_tx_power+0x10>
     ed0:	9e bd       	out	0x2e, r25	; 46
     ed2:	0d b4       	in	r0, 0x2d	; 45
     ed4:	07 fe       	sbrs	r0, 7
     ed6:	fd cf       	rjmp	.-6      	; 0xed2 <rf_tx_power+0x18>
     ed8:	8e bd       	out	0x2e, r24	; 46
     eda:	0d b4       	in	r0, 0x2d	; 45
     edc:	07 fe       	sbrs	r0, 7
     ede:	fd cf       	rjmp	.-6      	; 0xeda <rf_tx_power+0x20>
     ee0:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
     ee2:	08 95       	ret

00000ee4 <rf_addr_decode_enable>:
}


void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
     ee4:	80 91 b0 0a 	lds	r24, 0x0AB0
     ee8:	90 91 b1 0a 	lds	r25, 0x0AB1
     eec:	98 60       	ori	r25, 0x08	; 8
     eee:	90 93 b1 0a 	sts	0x0AB1, r25
     ef2:	80 93 b0 0a 	sts	0x0AB0, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
     ef6:	40 98       	cbi	0x08, 0	; 8
     ef8:	21 e1       	ldi	r18, 0x11	; 17
     efa:	2e bd       	out	0x2e, r18	; 46
     efc:	0d b4       	in	r0, 0x2d	; 45
     efe:	07 fe       	sbrs	r0, 7
     f00:	fd cf       	rjmp	.-6      	; 0xefc <rf_addr_decode_enable+0x18>
     f02:	9e bd       	out	0x2e, r25	; 46
     f04:	0d b4       	in	r0, 0x2d	; 45
     f06:	07 fe       	sbrs	r0, 7
     f08:	fd cf       	rjmp	.-6      	; 0xf04 <rf_addr_decode_enable+0x20>
     f0a:	8e bd       	out	0x2e, r24	; 46
     f0c:	0d b4       	in	r0, 0x2d	; 45
     f0e:	07 fe       	sbrs	r0, 7
     f10:	fd cf       	rjmp	.-6      	; 0xf0c <rf_addr_decode_enable+0x28>
     f12:	40 9a       	sbi	0x08, 0	; 8
}
     f14:	08 95       	ret

00000f16 <rf_addr_decode_disable>:

void rf_addr_decode_disable()
{
    mdmctrl0 &= (~0x0800);
     f16:	80 91 b0 0a 	lds	r24, 0x0AB0
     f1a:	90 91 b1 0a 	lds	r25, 0x0AB1
     f1e:	97 7f       	andi	r25, 0xF7	; 247
     f20:	90 93 b1 0a 	sts	0x0AB1, r25
     f24:	80 93 b0 0a 	sts	0x0AB0, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
     f28:	40 98       	cbi	0x08, 0	; 8
     f2a:	21 e1       	ldi	r18, 0x11	; 17
     f2c:	2e bd       	out	0x2e, r18	; 46
     f2e:	0d b4       	in	r0, 0x2d	; 45
     f30:	07 fe       	sbrs	r0, 7
     f32:	fd cf       	rjmp	.-6      	; 0xf2e <rf_addr_decode_disable+0x18>
     f34:	9e bd       	out	0x2e, r25	; 46
     f36:	0d b4       	in	r0, 0x2d	; 45
     f38:	07 fe       	sbrs	r0, 7
     f3a:	fd cf       	rjmp	.-6      	; 0xf36 <rf_addr_decode_disable+0x20>
     f3c:	8e bd       	out	0x2e, r24	; 46
     f3e:	0d b4       	in	r0, 0x2d	; 45
     f40:	07 fe       	sbrs	r0, 7
     f42:	fd cf       	rjmp	.-6      	; 0xf3e <rf_addr_decode_disable+0x28>
     f44:	40 9a       	sbi	0x08, 0	; 8
}
     f46:	08 95       	ret

00000f48 <rf_auto_ack_enable>:


void rf_auto_ack_enable()
{
    auto_ack_enable=1;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	80 93 bd 0a 	sts	0x0ABD, r24
    mdmctrl0 |= 0x0010;
     f4e:	80 91 b0 0a 	lds	r24, 0x0AB0
     f52:	90 91 b1 0a 	lds	r25, 0x0AB1
     f56:	80 61       	ori	r24, 0x10	; 16
     f58:	90 93 b1 0a 	sts	0x0AB1, r25
     f5c:	80 93 b0 0a 	sts	0x0AB0, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
     f60:	40 98       	cbi	0x08, 0	; 8
     f62:	21 e1       	ldi	r18, 0x11	; 17
     f64:	2e bd       	out	0x2e, r18	; 46
     f66:	0d b4       	in	r0, 0x2d	; 45
     f68:	07 fe       	sbrs	r0, 7
     f6a:	fd cf       	rjmp	.-6      	; 0xf66 <rf_auto_ack_enable+0x1e>
     f6c:	9e bd       	out	0x2e, r25	; 46
     f6e:	0d b4       	in	r0, 0x2d	; 45
     f70:	07 fe       	sbrs	r0, 7
     f72:	fd cf       	rjmp	.-6      	; 0xf6e <rf_auto_ack_enable+0x26>
     f74:	8e bd       	out	0x2e, r24	; 46
     f76:	0d b4       	in	r0, 0x2d	; 45
     f78:	07 fe       	sbrs	r0, 7
     f7a:	fd cf       	rjmp	.-6      	; 0xf76 <rf_auto_ack_enable+0x2e>
     f7c:	40 9a       	sbi	0x08, 0	; 8
}
     f7e:	08 95       	ret

00000f80 <rf_auto_ack_disable>:

void rf_auto_ack_disable()
{
    auto_ack_enable=0;
     f80:	10 92 bd 0a 	sts	0x0ABD, r1
    mdmctrl0 &= (~0x0010);
     f84:	80 91 b0 0a 	lds	r24, 0x0AB0
     f88:	90 91 b1 0a 	lds	r25, 0x0AB1
     f8c:	8f 7e       	andi	r24, 0xEF	; 239
     f8e:	90 93 b1 0a 	sts	0x0AB1, r25
     f92:	80 93 b0 0a 	sts	0x0AB0, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
     f96:	40 98       	cbi	0x08, 0	; 8
     f98:	21 e1       	ldi	r18, 0x11	; 17
     f9a:	2e bd       	out	0x2e, r18	; 46
     f9c:	0d b4       	in	r0, 0x2d	; 45
     f9e:	07 fe       	sbrs	r0, 7
     fa0:	fd cf       	rjmp	.-6      	; 0xf9c <rf_auto_ack_disable+0x1c>
     fa2:	9e bd       	out	0x2e, r25	; 46
     fa4:	0d b4       	in	r0, 0x2d	; 45
     fa6:	07 fe       	sbrs	r0, 7
     fa8:	fd cf       	rjmp	.-6      	; 0xfa4 <rf_auto_ack_disable+0x24>
     faa:	8e bd       	out	0x2e, r24	; 46
     fac:	0d b4       	in	r0, 0x2d	; 45
     fae:	07 fe       	sbrs	r0, 7
     fb0:	fd cf       	rjmp	.-6      	; 0xfac <rf_auto_ack_disable+0x2c>
     fb2:	40 9a       	sbi	0x08, 0	; 8
}
     fb4:	08 95       	ret

00000fb6 <rf_rx_on>:
//-------------------------------------------------------------------------------------------------------
void rf_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    	rfSettings.receiveOn = TRUE;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	80 93 ba 0a 	sts	0x0ABA, r24
	FASTSPI_STROBE(CC2420_SRXON);
     fbc:	40 98       	cbi	0x08, 0	; 8
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	8e bd       	out	0x2e, r24	; 46
     fc2:	0d b4       	in	r0, 0x2d	; 45
     fc4:	07 fe       	sbrs	r0, 7
     fc6:	fd cf       	rjmp	.-6      	; 0xfc2 <rf_rx_on+0xc>
     fc8:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
     fca:	40 98       	cbi	0x08, 0	; 8
     fcc:	88 e0       	ldi	r24, 0x08	; 8
     fce:	8e bd       	out	0x2e, r24	; 46
     fd0:	0d b4       	in	r0, 0x2d	; 45
     fd2:	07 fe       	sbrs	r0, 7
     fd4:	fd cf       	rjmp	.-6      	; 0xfd0 <rf_rx_on+0x1a>
     fd6:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
     fd8:	10 92 c3 0a 	sts	0x0AC3, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
    //	ENABLE_FIFOP_INT();
} // rf_rx_on() 
     fdc:	08 95       	ret

00000fde <rf_polling_rx_on>:

void rf_polling_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    	rfSettings.receiveOn = TRUE;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	80 93 ba 0a 	sts	0x0ABA, r24
	FASTSPI_STROBE(CC2420_SRXON);
     fe4:	40 98       	cbi	0x08, 0	; 8
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	8e bd       	out	0x2e, r24	; 46
     fea:	0d b4       	in	r0, 0x2d	; 45
     fec:	07 fe       	sbrs	r0, 7
     fee:	fd cf       	rjmp	.-6      	; 0xfea <rf_polling_rx_on+0xc>
     ff0:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
     ff2:	40 98       	cbi	0x08, 0	; 8
     ff4:	88 e0       	ldi	r24, 0x08	; 8
     ff6:	8e bd       	out	0x2e, r24	; 46
     ff8:	0d b4       	in	r0, 0x2d	; 45
     ffa:	07 fe       	sbrs	r0, 7
     ffc:	fd cf       	rjmp	.-6      	; 0xff8 <rf_polling_rx_on+0x1a>
     ffe:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    1000:	10 92 c3 0a 	sts	0x0AC3, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
} // rf_rx_on() 
    1004:	08 95       	ret

00001006 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
	// XXX
    	//SET_VREG_INACTIVE();	
	rfSettings.receiveOn = FALSE;
    1006:	10 92 ba 0a 	sts	0x0ABA, r1
	FASTSPI_STROBE(CC2420_SRFOFF);
    100a:	40 98       	cbi	0x08, 0	; 8
    100c:	86 e0       	ldi	r24, 0x06	; 6
    100e:	8e bd       	out	0x2e, r24	; 46
    1010:	0d b4       	in	r0, 0x2d	; 45
    1012:	07 fe       	sbrs	r0, 7
    1014:	fd cf       	rjmp	.-6      	; 0x1010 <rf_rx_off+0xa>
    1016:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    1018:	10 92 c3 0a 	sts	0x0AC3, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
    //	DISABLE_FIFOP_INT();
} // rf_rx_off() 
    101c:	08 95       	ret

0000101e <rf_busy>:

}

uint8_t rf_busy()
{
return SFD_IS_1;
    101e:	89 b1       	in	r24, 0x09	; 9
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	26 e0       	ldi	r18, 0x06	; 6
    1024:	96 95       	lsr	r25
    1026:	87 95       	ror	r24
    1028:	2a 95       	dec	r18
    102a:	e1 f7       	brne	.-8      	; 0x1024 <rf_busy+0x6>
}
    102c:	81 70       	andi	r24, 0x01	; 1
    102e:	08 95       	ret

00001030 <rf_rx_check_fifop>:

uint8_t rf_rx_check_fifop()
{
return FIFOP_IS_1;
    1030:	8c b1       	in	r24, 0x0c	; 12
}
    1032:	88 1f       	adc	r24, r24
    1034:	88 27       	eor	r24, r24
    1036:	88 1f       	adc	r24, r24
    1038:	08 95       	ret

0000103a <rf_rx_check_sfd>:


uint8_t rf_rx_check_sfd()
{
return SFD_IS_1;
    103a:	89 b1       	in	r24, 0x09	; 9
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	36 e0       	ldi	r19, 0x06	; 6
    1040:	96 95       	lsr	r25
    1042:	87 95       	ror	r24
    1044:	3a 95       	dec	r19
    1046:	e1 f7       	brne	.-8      	; 0x1040 <rf_rx_check_sfd+0x6>
}
    1048:	81 70       	andi	r24, 0x01	; 1
    104a:	08 95       	ret

0000104c <rf_polling_rx_packet>:
uint16_t tmp_blah;

int8_t rf_polling_rx_packet(bool ack,uint8_t len)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <rf_polling_rx_packet+0x6>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <rf_polling_rx_packet+0x8>
    1054:	0f 92       	push	r0
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif

    if(FIFOP_IS_1 )
    105a:	67 99       	sbic	0x0c, 7	; 12
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <rf_polling_rx_packet+0x16>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	0d c2       	rjmp	.+1050   	; 0x147c <rf_polling_rx_packet+0x430>
	uint16_t frameControlField;
	int8_t length;
	uint8_t pFooter[2];
	uint8_t checksum,rx_checksum,i;
			
	last_pkt_encrypted=0;
    1062:	10 92 be 0a 	sts	0x0ABE, r1
    
//	while(!SFD_IS_1);
//  XXX Need to make sure SFD has gone down to be sure packet finished!
//	while(SFD_IS_1);
    // Clean up and exit in case of FIFO overflow, which is indicated by FIFOP = 1 and FIFO = 0
	if((FIFOP_IS_1) && (!(FIFO_IS_1))) {	   
    1066:	67 9b       	sbis	0x0c, 7	; 12
    1068:	1e c0       	rjmp	.+60     	; 0x10a6 <rf_polling_rx_packet+0x5a>
    106a:	31 99       	sbic	0x06, 1	; 6
    106c:	1c c0       	rjmp	.+56     	; 0x10a6 <rf_polling_rx_packet+0x5a>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    106e:	40 98       	cbi	0x08, 0	; 8
    1070:	8f e7       	ldi	r24, 0x7F	; 127
    1072:	8e bd       	out	0x2e, r24	; 46
    1074:	0d b4       	in	r0, 0x2d	; 45
    1076:	07 fe       	sbrs	r0, 7
    1078:	fd cf       	rjmp	.-6      	; 0x1074 <rf_polling_rx_packet+0x28>
    107a:	1e bc       	out	0x2e, r1	; 46
    107c:	0d b4       	in	r0, 0x2d	; 45
    107e:	07 fe       	sbrs	r0, 7
    1080:	fd cf       	rjmp	.-6      	; 0x107c <rf_polling_rx_packet+0x30>
    1082:	8e b5       	in	r24, 0x2e	; 46
    1084:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1086:	40 98       	cbi	0x08, 0	; 8
    1088:	88 e0       	ldi	r24, 0x08	; 8
    108a:	8e bd       	out	0x2e, r24	; 46
    108c:	0d b4       	in	r0, 0x2d	; 45
    108e:	07 fe       	sbrs	r0, 7
    1090:	fd cf       	rjmp	.-6      	; 0x108c <rf_polling_rx_packet+0x40>
    1092:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1094:	40 98       	cbi	0x08, 0	; 8
    1096:	88 e0       	ldi	r24, 0x08	; 8
    1098:	8e bd       	out	0x2e, r24	; 46
    109a:	0d b4       	in	r0, 0x2d	; 45
    109c:	07 fe       	sbrs	r0, 7
    109e:	fd cf       	rjmp	.-6      	; 0x109a <rf_polling_rx_packet+0x4e>
    10a0:	40 9a       	sbi	0x08, 0	; 8
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
#endif
	    return -1;
    10a4:	eb c1       	rjmp	.+982    	; 0x147c <rf_polling_rx_packet+0x430>
	}

	// Payload length
	FASTSPI_READ_FIFO_BYTE(length);
    10a6:	40 98       	cbi	0x08, 0	; 8
    10a8:	9f e7       	ldi	r25, 0x7F	; 127
    10aa:	9e bd       	out	0x2e, r25	; 46
    10ac:	0d b4       	in	r0, 0x2d	; 45
    10ae:	07 fe       	sbrs	r0, 7
    10b0:	fd cf       	rjmp	.-6      	; 0x10ac <rf_polling_rx_packet+0x60>
    10b2:	1e bc       	out	0x2e, r1	; 46
    10b4:	0d b4       	in	r0, 0x2d	; 45
    10b6:	07 fe       	sbrs	r0, 7
    10b8:	fd cf       	rjmp	.-6      	; 0x10b4 <rf_polling_rx_packet+0x68>
    10ba:	9e b5       	in	r25, 0x2e	; 46
    10bc:	40 9a       	sbi	0x08, 0	; 8
	length &= RF_LENGTH_MASK; // Ignore MSB
    10be:	9f 77       	andi	r25, 0x7F	; 127
    // Ignore the packet if the length is too short
    if(length==0){  
    10c0:	e1 f4       	brne	.+56     	; 0x10fa <rf_polling_rx_packet+0xae>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    10c2:	40 98       	cbi	0x08, 0	; 8
    10c4:	8f e7       	ldi	r24, 0x7F	; 127
    10c6:	8e bd       	out	0x2e, r24	; 46
    10c8:	0d b4       	in	r0, 0x2d	; 45
    10ca:	07 fe       	sbrs	r0, 7
    10cc:	fd cf       	rjmp	.-6      	; 0x10c8 <rf_polling_rx_packet+0x7c>
    10ce:	1e bc       	out	0x2e, r1	; 46
    10d0:	0d b4       	in	r0, 0x2d	; 45
    10d2:	07 fe       	sbrs	r0, 7
    10d4:	fd cf       	rjmp	.-6      	; 0x10d0 <rf_polling_rx_packet+0x84>
    10d6:	8e b5       	in	r24, 0x2e	; 46
    10d8:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    10da:	40 98       	cbi	0x08, 0	; 8
    10dc:	88 e0       	ldi	r24, 0x08	; 8
    10de:	8e bd       	out	0x2e, r24	; 46
    10e0:	0d b4       	in	r0, 0x2d	; 45
    10e2:	07 fe       	sbrs	r0, 7
    10e4:	fd cf       	rjmp	.-6      	; 0x10e0 <rf_polling_rx_packet+0x94>
    10e6:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    10e8:	40 98       	cbi	0x08, 0	; 8
    10ea:	88 e0       	ldi	r24, 0x08	; 8
    10ec:	8e bd       	out	0x2e, r24	; 46
    10ee:	0d b4       	in	r0, 0x2d	; 45
    10f0:	07 fe       	sbrs	r0, 7
    10f2:	fd cf       	rjmp	.-6      	; 0x10ee <rf_polling_rx_packet+0xa2>
    10f4:	40 9a       	sbi	0x08, 0	; 8
    10f6:	8e ef       	ldi	r24, 0xFE	; 254
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
#endif
	return -2;
    10f8:	c1 c1       	rjmp	.+898    	; 0x147c <rf_polling_rx_packet+0x430>
	}
    if (length < RF_ACK_PACKET_SIZE || (length-RF_PACKET_OVERHEAD_SIZE)> rfSettings.pRxInfo->max_length) {
    10fa:	95 30       	cpi	r25, 0x05	; 5
    10fc:	8c f0       	brlt	.+34     	; 0x1120 <rf_polling_rx_packet+0xd4>
    10fe:	e0 91 b2 0a 	lds	r30, 0x0AB2
    1102:	f0 91 b3 0a 	lds	r31, 0x0AB3
    1106:	29 2f       	mov	r18, r25
    1108:	33 27       	eor	r19, r19
    110a:	27 fd       	sbrc	r18, 7
    110c:	30 95       	com	r19
    110e:	2b 50       	subi	r18, 0x0B	; 11
    1110:	30 40       	sbci	r19, 0x00	; 0
    1112:	44 81       	ldd	r20, Z+4	; 0x04
    1114:	55 27       	eor	r21, r21
    1116:	47 fd       	sbrc	r20, 7
    1118:	50 95       	com	r21
    111a:	42 17       	cp	r20, r18
    111c:	53 07       	cpc	r21, r19
    111e:	ac f5       	brge	.+106    	; 0x118a <rf_polling_rx_packet+0x13e>
    	FASTSPI_READ_FIFO_GARBAGE(length);
    1120:	40 98       	cbi	0x08, 0	; 8
    1122:	8f e7       	ldi	r24, 0x7F	; 127
    1124:	8e bd       	out	0x2e, r24	; 46
    1126:	0d b4       	in	r0, 0x2d	; 45
    1128:	07 fe       	sbrs	r0, 7
    112a:	fd cf       	rjmp	.-6      	; 0x1126 <rf_polling_rx_packet+0xda>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	29 2f       	mov	r18, r25
    1130:	33 27       	eor	r19, r19
    1132:	27 fd       	sbrc	r18, 7
    1134:	30 95       	com	r19
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <rf_polling_rx_packet+0xf6>
    1138:	1e bc       	out	0x2e, r1	; 46
    113a:	0d b4       	in	r0, 0x2d	; 45
    113c:	07 fe       	sbrs	r0, 7
    113e:	fd cf       	rjmp	.-6      	; 0x113a <rf_polling_rx_packet+0xee>
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	48 2f       	mov	r20, r24
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	42 17       	cp	r20, r18
    1148:	53 07       	cpc	r21, r19
    114a:	14 f4       	brge	.+4      	; 0x1150 <rf_polling_rx_packet+0x104>
    114c:	31 99       	sbic	0x06, 1	; 6
    114e:	f4 cf       	rjmp	.-24     	; 0x1138 <rf_polling_rx_packet+0xec>
    1150:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    1152:	40 98       	cbi	0x08, 0	; 8
    1154:	8f e7       	ldi	r24, 0x7F	; 127
    1156:	8e bd       	out	0x2e, r24	; 46
    1158:	0d b4       	in	r0, 0x2d	; 45
    115a:	07 fe       	sbrs	r0, 7
    115c:	fd cf       	rjmp	.-6      	; 0x1158 <rf_polling_rx_packet+0x10c>
    115e:	1e bc       	out	0x2e, r1	; 46
    1160:	0d b4       	in	r0, 0x2d	; 45
    1162:	07 fe       	sbrs	r0, 7
    1164:	fd cf       	rjmp	.-6      	; 0x1160 <rf_polling_rx_packet+0x114>
    1166:	8e b5       	in	r24, 0x2e	; 46
    1168:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    116a:	40 98       	cbi	0x08, 0	; 8
    116c:	88 e0       	ldi	r24, 0x08	; 8
    116e:	8e bd       	out	0x2e, r24	; 46
    1170:	0d b4       	in	r0, 0x2d	; 45
    1172:	07 fe       	sbrs	r0, 7
    1174:	fd cf       	rjmp	.-6      	; 0x1170 <rf_polling_rx_packet+0x124>
    1176:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1178:	40 98       	cbi	0x08, 0	; 8
    117a:	88 e0       	ldi	r24, 0x08	; 8
    117c:	8e bd       	out	0x2e, r24	; 46
    117e:	0d b4       	in	r0, 0x2d	; 45
    1180:	07 fe       	sbrs	r0, 7
    1182:	fd cf       	rjmp	.-6      	; 0x117e <rf_polling_rx_packet+0x132>
    1184:	40 9a       	sbi	0x08, 0	; 8
    1186:	8d ef       	ldi	r24, 0xFD	; 253
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
#endif
	return -3;
    1188:	79 c1       	rjmp	.+754    	; 0x147c <rf_polling_rx_packet+0x430>
	//printf_u( "Bad length: %d %d\n",length, rfSettings.pRxInfo->max_length );
    // Otherwise, if the length is valid, then proceed with the rest of the packet
    } else {
        // Register the payload length
        rfSettings.pRxInfo->length = length - RF_PACKET_OVERHEAD_SIZE - CHECKSUM_OVERHEAD;
    118a:	e0 91 b2 0a 	lds	r30, 0x0AB2
    118e:	f0 91 b3 0a 	lds	r31, 0x0AB3
    1192:	9c 50       	subi	r25, 0x0C	; 12
    1194:	93 83       	std	Z+3, r25	; 0x03
	if(ack==true&&rfSettings.pRxInfo->length!=len){
    1196:	88 23       	and	r24, r24
    1198:	71 f0       	breq	.+28     	; 0x11b6 <rf_polling_rx_packet+0x16a>
    119a:	e0 91 b2 0a 	lds	r30, 0x0AB2
    119e:	f0 91 b3 0a 	lds	r31, 0x0AB3
    11a2:	83 81       	ldd	r24, Z+3	; 0x03
    11a4:	99 27       	eor	r25, r25
    11a6:	87 fd       	sbrc	r24, 7
    11a8:	90 95       	com	r25
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	86 17       	cp	r24, r22
    11ae:	97 07       	cpc	r25, r23
    11b0:	11 f0       	breq	.+4      	; 0x11b6 <rf_polling_rx_packet+0x16a>
    11b2:	8a ef       	ldi	r24, 0xFA	; 250
    11b4:	63 c1       	rjmp	.+710    	; 0x147c <rf_polling_rx_packet+0x430>
	    nrk_sem_post(radio_sem);
#endif
	    return -6;
}
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
    11b6:	40 98       	cbi	0x08, 0	; 8
    11b8:	8f e7       	ldi	r24, 0x7F	; 127
    11ba:	8e bd       	out	0x2e, r24	; 46
    11bc:	0d b4       	in	r0, 0x2d	; 45
    11be:	07 fe       	sbrs	r0, 7
    11c0:	fd cf       	rjmp	.-6      	; 0x11bc <rf_polling_rx_packet+0x170>
    11c2:	fe 01       	movw	r30, r28
    11c4:	32 96       	adiw	r30, 0x02	; 2
{
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet(bool ack,uint8_t len)
    11c6:	cf 01       	movw	r24, r30
    11c8:	02 96       	adiw	r24, 0x02	; 2
	    nrk_sem_post(radio_sem);
#endif
	    return -6;
}
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
    11ca:	1e bc       	out	0x2e, r1	; 46
    11cc:	0d b4       	in	r0, 0x2d	; 45
    11ce:	07 fe       	sbrs	r0, 7
    11d0:	fd cf       	rjmp	.-6      	; 0x11cc <rf_polling_rx_packet+0x180>
    11d2:	2e b5       	in	r18, 0x2e	; 46
    11d4:	21 93       	st	Z+, r18
    11d6:	e8 17       	cp	r30, r24
    11d8:	f9 07       	cpc	r31, r25
    11da:	b9 f7       	brne	.-18     	; 0x11ca <rf_polling_rx_packet+0x17e>
    11dc:	40 9a       	sbi	0x08, 0	; 8
        rfSettings.pRxInfo->ackRequest = !!(frameControlField & RF_FCF_ACK_BM);
    11de:	e0 91 b2 0a 	lds	r30, 0x0AB2
    11e2:	f0 91 b3 0a 	lds	r31, 0x0AB3
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ea:	45 e0       	ldi	r20, 0x05	; 5
    11ec:	96 95       	lsr	r25
    11ee:	87 95       	ror	r24
    11f0:	4a 95       	dec	r20
    11f2:	e1 f7       	brne	.-8      	; 0x11ec <rf_polling_rx_packet+0x1a0>
    11f4:	81 70       	andi	r24, 0x01	; 1
    11f6:	87 83       	std	Z+7, r24	; 0x07
    	FASTSPI_READ_FIFO_BYTE(rfSettings.pRxInfo->seqNumber);
    11f8:	40 98       	cbi	0x08, 0	; 8
    11fa:	8f e7       	ldi	r24, 0x7F	; 127
    11fc:	8e bd       	out	0x2e, r24	; 46
    11fe:	0d b4       	in	r0, 0x2d	; 45
    1200:	07 fe       	sbrs	r0, 7
    1202:	fd cf       	rjmp	.-6      	; 0x11fe <rf_polling_rx_packet+0x1b2>
    1204:	1e bc       	out	0x2e, r1	; 46
    1206:	0d b4       	in	r0, 0x2d	; 45
    1208:	07 fe       	sbrs	r0, 7
    120a:	fd cf       	rjmp	.-6      	; 0x1206 <rf_polling_rx_packet+0x1ba>
    120c:	e0 91 b2 0a 	lds	r30, 0x0AB2
    1210:	f0 91 b3 0a 	lds	r31, 0x0AB3
    1214:	8e b5       	in	r24, 0x2e	; 46
    1216:	80 83       	st	Z, r24
    1218:	40 9a       	sbi	0x08, 0	; 8

		// Receive the rest of the packet
		} else {
*/
			// Skip the destination PAN and address (that's taken care of by harware address recognition!)
		FASTSPI_READ_FIFO_GARBAGE(4);
    121a:	40 98       	cbi	0x08, 0	; 8
    121c:	8f e7       	ldi	r24, 0x7F	; 127
    121e:	8e bd       	out	0x2e, r24	; 46
    1220:	0d b4       	in	r0, 0x2d	; 45
    1222:	07 fe       	sbrs	r0, 7
    1224:	fd cf       	rjmp	.-6      	; 0x1220 <rf_polling_rx_packet+0x1d4>
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <rf_polling_rx_packet+0x1ec>
    122a:	1e bc       	out	0x2e, r1	; 46
    122c:	0d b4       	in	r0, 0x2d	; 45
    122e:	07 fe       	sbrs	r0, 7
    1230:	fd cf       	rjmp	.-6      	; 0x122c <rf_polling_rx_packet+0x1e0>
    1232:	8f 5f       	subi	r24, 0xFF	; 255
    1234:	84 30       	cpi	r24, 0x04	; 4
    1236:	11 f0       	breq	.+4      	; 0x123c <rf_polling_rx_packet+0x1f0>
    1238:	31 99       	sbic	0x06, 1	; 6
    123a:	f7 cf       	rjmp	.-18     	; 0x122a <rf_polling_rx_packet+0x1de>
    123c:	40 9a       	sbi	0x08, 0	; 8

			// Read the source address
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rfSettings.pRxInfo->srcAddr, 2);
    123e:	40 98       	cbi	0x08, 0	; 8
    1240:	8f e7       	ldi	r24, 0x7F	; 127
    1242:	8e bd       	out	0x2e, r24	; 46
    1244:	0d b4       	in	r0, 0x2d	; 45
    1246:	07 fe       	sbrs	r0, 7
    1248:	fd cf       	rjmp	.-6      	; 0x1244 <rf_polling_rx_packet+0x1f8>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	1e bc       	out	0x2e, r1	; 46
    1250:	0d b4       	in	r0, 0x2d	; 45
    1252:	07 fe       	sbrs	r0, 7
    1254:	fd cf       	rjmp	.-6      	; 0x1250 <rf_polling_rx_packet+0x204>
    1256:	e0 91 b2 0a 	lds	r30, 0x0AB2
    125a:	f0 91 b3 0a 	lds	r31, 0x0AB3
    125e:	2e b5       	in	r18, 0x2e	; 46
    1260:	e8 0f       	add	r30, r24
    1262:	f9 1f       	adc	r31, r25
    1264:	21 83       	std	Z+1, r18	; 0x01
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	91 05       	cpc	r25, r1
    126c:	81 f7       	brne	.-32     	; 0x124e <rf_polling_rx_packet+0x202>
    126e:	40 9a       	sbi	0x08, 0	; 8

		        if(frameControlField & RF_SEC_BM)
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	83 ff       	sbrs	r24, 3
    1274:	56 c0       	rjmp	.+172    	; 0x1322 <rf_polling_rx_packet+0x2d6>
			{
				uint8_t n;
				// READ rx_ctr and set it
				FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rx_ctr, 4);
    1276:	40 98       	cbi	0x08, 0	; 8
    1278:	8f e7       	ldi	r24, 0x7F	; 127
    127a:	8e bd       	out	0x2e, r24	; 46
    127c:	0d b4       	in	r0, 0x2d	; 45
    127e:	07 fe       	sbrs	r0, 7
    1280:	fd cf       	rjmp	.-6      	; 0x127c <rf_polling_rx_packet+0x230>
    1282:	e9 ea       	ldi	r30, 0xA9	; 169
    1284:	fa e0       	ldi	r31, 0x0A	; 10
    1286:	1e bc       	out	0x2e, r1	; 46
    1288:	0d b4       	in	r0, 0x2d	; 45
    128a:	07 fe       	sbrs	r0, 7
    128c:	fd cf       	rjmp	.-6      	; 0x1288 <rf_polling_rx_packet+0x23c>
    128e:	8e b5       	in	r24, 0x2e	; 46
    1290:	81 93       	st	Z+, r24
    1292:	8a e0       	ldi	r24, 0x0A	; 10
    1294:	ed 3a       	cpi	r30, 0xAD	; 173
    1296:	f8 07       	cpc	r31, r24
    1298:	b1 f7       	brne	.-20     	; 0x1286 <rf_polling_rx_packet+0x23a>
    129a:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[0],(CC2420RAM_RXNONCE+9),2,n); 
    129c:	40 98       	cbi	0x08, 0	; 8
    129e:	89 e9       	ldi	r24, 0x99	; 153
    12a0:	8e bd       	out	0x2e, r24	; 46
    12a2:	0d b4       	in	r0, 0x2d	; 45
    12a4:	07 fe       	sbrs	r0, 7
    12a6:	fd cf       	rjmp	.-6      	; 0x12a2 <rf_polling_rx_packet+0x256>
    12a8:	80 e8       	ldi	r24, 0x80	; 128
    12aa:	8e bd       	out	0x2e, r24	; 46
    12ac:	0d b4       	in	r0, 0x2d	; 45
    12ae:	07 fe       	sbrs	r0, 7
    12b0:	fd cf       	rjmp	.-6      	; 0x12ac <rf_polling_rx_packet+0x260>
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	81 50       	subi	r24, 0x01	; 1
    12b6:	e8 2f       	mov	r30, r24
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	e7 55       	subi	r30, 0x57	; 87
    12bc:	f5 4f       	sbci	r31, 0xF5	; 245
    12be:	90 81       	ld	r25, Z
    12c0:	9e bd       	out	0x2e, r25	; 46
    12c2:	0d b4       	in	r0, 0x2d	; 45
    12c4:	07 fe       	sbrs	r0, 7
    12c6:	fd cf       	rjmp	.-6      	; 0x12c2 <rf_polling_rx_packet+0x276>
    12c8:	88 23       	and	r24, r24
    12ca:	a1 f7       	brne	.-24     	; 0x12b4 <rf_polling_rx_packet+0x268>
    12cc:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[2],(CC2420RAM_RXNONCE+11),2,n); 
    12ce:	40 98       	cbi	0x08, 0	; 8
    12d0:	8b e9       	ldi	r24, 0x9B	; 155
    12d2:	8e bd       	out	0x2e, r24	; 46
    12d4:	0d b4       	in	r0, 0x2d	; 45
    12d6:	07 fe       	sbrs	r0, 7
    12d8:	fd cf       	rjmp	.-6      	; 0x12d4 <rf_polling_rx_packet+0x288>
    12da:	80 e8       	ldi	r24, 0x80	; 128
    12dc:	8e bd       	out	0x2e, r24	; 46
    12de:	0d b4       	in	r0, 0x2d	; 45
    12e0:	07 fe       	sbrs	r0, 7
    12e2:	fd cf       	rjmp	.-6      	; 0x12de <rf_polling_rx_packet+0x292>
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	81 50       	subi	r24, 0x01	; 1
    12e8:	e8 2f       	mov	r30, r24
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	e5 55       	subi	r30, 0x55	; 85
    12ee:	f5 4f       	sbci	r31, 0xF5	; 245
    12f0:	90 81       	ld	r25, Z
    12f2:	9e bd       	out	0x2e, r25	; 46
    12f4:	0d b4       	in	r0, 0x2d	; 45
    12f6:	07 fe       	sbrs	r0, 7
    12f8:	fd cf       	rjmp	.-6      	; 0x12f4 <rf_polling_rx_packet+0x2a8>
    12fa:	88 23       	and	r24, r24
    12fc:	a1 f7       	brne	.-24     	; 0x12e6 <rf_polling_rx_packet+0x29a>
    12fe:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_STROBE(CC2420_SRXDEC);  // if packet is encrypted then decrypt 
    1300:	40 98       	cbi	0x08, 0	; 8
    1302:	8c e0       	ldi	r24, 0x0C	; 12
    1304:	8e bd       	out	0x2e, r24	; 46
    1306:	0d b4       	in	r0, 0x2d	; 45
    1308:	07 fe       	sbrs	r0, 7
    130a:	fd cf       	rjmp	.-6      	; 0x1306 <rf_polling_rx_packet+0x2ba>
    130c:	40 9a       	sbi	0x08, 0	; 8
				last_pkt_encrypted=1;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	80 93 be 0a 	sts	0x0ABE, r24
        			rfSettings.pRxInfo->length -= 4;
    1314:	e0 91 b2 0a 	lds	r30, 0x0AB2
    1318:	f0 91 b3 0a 	lds	r31, 0x0AB3
    131c:	83 81       	ldd	r24, Z+3	; 0x03
    131e:	84 50       	subi	r24, 0x04	; 4
    1320:	83 83       	std	Z+3, r24	; 0x03
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
    1322:	40 98       	cbi	0x08, 0	; 8
    1324:	8f e7       	ldi	r24, 0x7F	; 127
    1326:	8e bd       	out	0x2e, r24	; 46
    1328:	0d b4       	in	r0, 0x2d	; 45
    132a:	07 fe       	sbrs	r0, 7
    132c:	fd cf       	rjmp	.-6      	; 0x1328 <rf_polling_rx_packet+0x2dc>
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	10 c0       	rjmp	.+32     	; 0x1352 <rf_polling_rx_packet+0x306>
    1332:	1e bc       	out	0x2e, r1	; 46
    1334:	0d b4       	in	r0, 0x2d	; 45
    1336:	07 fe       	sbrs	r0, 7
    1338:	fd cf       	rjmp	.-6      	; 0x1334 <rf_polling_rx_packet+0x2e8>
    133a:	e0 91 b2 0a 	lds	r30, 0x0AB2
    133e:	f0 91 b3 0a 	lds	r31, 0x0AB3
    1342:	9e b5       	in	r25, 0x2e	; 46
    1344:	05 80       	ldd	r0, Z+5	; 0x05
    1346:	f6 81       	ldd	r31, Z+6	; 0x06
    1348:	e0 2d       	mov	r30, r0
    134a:	e8 0f       	add	r30, r24
    134c:	f1 1d       	adc	r31, r1
    134e:	90 83       	st	Z, r25
    1350:	8f 5f       	subi	r24, 0xFF	; 255
    1352:	e0 91 b2 0a 	lds	r30, 0x0AB2
    1356:	f0 91 b3 0a 	lds	r31, 0x0AB3
    135a:	48 2f       	mov	r20, r24
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	23 81       	ldd	r18, Z+3	; 0x03
    1360:	33 27       	eor	r19, r19
    1362:	27 fd       	sbrc	r18, 7
    1364:	30 95       	com	r19
    1366:	42 17       	cp	r20, r18
    1368:	53 07       	cpc	r21, r19
    136a:	1c f3       	brlt	.-58     	; 0x1332 <rf_polling_rx_packet+0x2e6>
    136c:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    136e:	40 98       	cbi	0x08, 0	; 8
    1370:	8f e7       	ldi	r24, 0x7F	; 127
    1372:	8e bd       	out	0x2e, r24	; 46
    1374:	0d b4       	in	r0, 0x2d	; 45
    1376:	07 fe       	sbrs	r0, 7
    1378:	fd cf       	rjmp	.-6      	; 0x1374 <rf_polling_rx_packet+0x328>
    137a:	1e bc       	out	0x2e, r1	; 46
    137c:	0d b4       	in	r0, 0x2d	; 45
    137e:	07 fe       	sbrs	r0, 7
    1380:	fd cf       	rjmp	.-6      	; 0x137c <rf_polling_rx_packet+0x330>
    1382:	8e b5       	in	r24, 0x2e	; 46
    1384:	40 9a       	sbi	0x08, 0	; 8

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    1386:	40 98       	cbi	0x08, 0	; 8
    1388:	9f e7       	ldi	r25, 0x7F	; 127
    138a:	9e bd       	out	0x2e, r25	; 46
    138c:	0d b4       	in	r0, 0x2d	; 45
    138e:	07 fe       	sbrs	r0, 7
    1390:	fd cf       	rjmp	.-6      	; 0x138c <rf_polling_rx_packet+0x340>
        			rfSettings.pRxInfo->length -= 4;
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	fe 01       	movw	r30, r28
    1396:	34 96       	adiw	r30, 0x04	; 4
{
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet(bool ack,uint8_t len)
    1398:	ce 01       	movw	r24, r28
    139a:	06 96       	adiw	r24, 0x06	; 6
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    139c:	1e bc       	out	0x2e, r1	; 46
    139e:	0d b4       	in	r0, 0x2d	; 45
    13a0:	07 fe       	sbrs	r0, 7
    13a2:	fd cf       	rjmp	.-6      	; 0x139e <rf_polling_rx_packet+0x352>
    13a4:	2e b5       	in	r18, 0x2e	; 46
    13a6:	21 93       	st	Z+, r18
    13a8:	e8 17       	cp	r30, r24
    13aa:	f9 07       	cpc	r31, r25
    13ac:	b9 f7       	brne	.-18     	; 0x139c <rf_polling_rx_packet+0x350>
    13ae:	40 9a       	sbi	0x08, 0	; 8
			rfSettings.pRxInfo->rssi = pFooter[0];
    13b0:	e0 91 b2 0a 	lds	r30, 0x0AB2
    13b4:	f0 91 b3 0a 	lds	r31, 0x0AB3
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	80 87       	std	Z+8, r24	; 0x08
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	80 e0       	ldi	r24, 0x00	; 0
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
    13c0:	0c c0       	rjmp	.+24     	; 0x13da <rf_polling_rx_packet+0x38e>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
    13c2:	e0 91 b2 0a 	lds	r30, 0x0AB2
    13c6:	f0 91 b3 0a 	lds	r31, 0x0AB3
    13ca:	05 80       	ldd	r0, Z+5	; 0x05
    13cc:	f6 81       	ldd	r31, Z+6	; 0x06
    13ce:	e0 2d       	mov	r30, r0
    13d0:	e2 0f       	add	r30, r18
    13d2:	f3 1f       	adc	r31, r19
    13d4:	20 81       	ld	r18, Z
    13d6:	82 0f       	add	r24, r18

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
			rfSettings.pRxInfo->rssi = pFooter[0];
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
    13d8:	9f 5f       	subi	r25, 0xFF	; 255
    13da:	e0 91 b2 0a 	lds	r30, 0x0AB2
    13de:	f0 91 b3 0a 	lds	r31, 0x0AB3
    13e2:	29 2f       	mov	r18, r25
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	43 81       	ldd	r20, Z+3	; 0x03
    13e8:	55 27       	eor	r21, r21
    13ea:	47 fd       	sbrc	r20, 7
    13ec:	50 95       	com	r21
    13ee:	24 17       	cp	r18, r20
    13f0:	35 07       	cpc	r19, r21
    13f2:	3c f3       	brlt	.-50     	; 0x13c2 <rf_polling_rx_packet+0x376>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
				//printf( "%d ", rfSettings.pRxInfo->pPayload[i]);
			}

			if(checksum!=rx_checksum) {
    13f4:	99 81       	ldd	r25, Y+1	; 0x01
    13f6:	89 17       	cp	r24, r25
    13f8:	e1 f0       	breq	.+56     	; 0x1432 <rf_polling_rx_packet+0x3e6>
				//printf( "Checksum failed %d %d\r",rx_checksum, checksum );
	    			// always read 1 byte before flush (data sheet pg 62)
	   			FASTSPI_READ_FIFO_BYTE(tmp);  
    13fa:	40 98       	cbi	0x08, 0	; 8
    13fc:	8f e7       	ldi	r24, 0x7F	; 127
    13fe:	8e bd       	out	0x2e, r24	; 46
    1400:	0d b4       	in	r0, 0x2d	; 45
    1402:	07 fe       	sbrs	r0, 7
    1404:	fd cf       	rjmp	.-6      	; 0x1400 <rf_polling_rx_packet+0x3b4>
    1406:	1e bc       	out	0x2e, r1	; 46
    1408:	0d b4       	in	r0, 0x2d	; 45
    140a:	07 fe       	sbrs	r0, 7
    140c:	fd cf       	rjmp	.-6      	; 0x1408 <rf_polling_rx_packet+0x3bc>
    140e:	8e b5       	in	r24, 0x2e	; 46
    1410:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    1412:	40 98       	cbi	0x08, 0	; 8
    1414:	88 e0       	ldi	r24, 0x08	; 8
    1416:	8e bd       	out	0x2e, r24	; 46
    1418:	0d b4       	in	r0, 0x2d	; 45
    141a:	07 fe       	sbrs	r0, 7
    141c:	fd cf       	rjmp	.-6      	; 0x1418 <rf_polling_rx_packet+0x3cc>
    141e:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    1420:	40 98       	cbi	0x08, 0	; 8
    1422:	88 e0       	ldi	r24, 0x08	; 8
    1424:	8e bd       	out	0x2e, r24	; 46
    1426:	0d b4       	in	r0, 0x2d	; 45
    1428:	07 fe       	sbrs	r0, 7
    142a:	fd cf       	rjmp	.-6      	; 0x1426 <rf_polling_rx_packet+0x3da>
    142c:	40 9a       	sbi	0x08, 0	; 8
    142e:	8c ef       	ldi	r24, 0xFC	; 252
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
#endif
				return -4;
    1430:	25 c0       	rjmp	.+74     	; 0x147c <rf_polling_rx_packet+0x430>
			}	
			if (pFooter[1] & RF_CRC_OK_BM) {
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	87 ff       	sbrs	r24, 7
    1436:	07 c0       	rjmp	.+14     	; 0x1446 <rf_polling_rx_packet+0x3fa>
				//rfSettings.pRxInfo = rf_rx_callback(rfSettings.pRxInfo);
				rx_ready++;
    1438:	80 91 c3 0a 	lds	r24, 0x0AC3
    143c:	8f 5f       	subi	r24, 0xFF	; 255
    143e:	80 93 c3 0a 	sts	0x0AC3, r24
    1442:	81 e0       	ldi	r24, 0x01	; 1
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
#endif
				return 1;
    1444:	1b c0       	rjmp	.+54     	; 0x147c <rf_polling_rx_packet+0x430>
			} else
	    		{
	    		// always read 1 byte before flush (data sheet pg 62)
	   		FASTSPI_READ_FIFO_BYTE(tmp);  
    1446:	40 98       	cbi	0x08, 0	; 8
    1448:	8f e7       	ldi	r24, 0x7F	; 127
    144a:	8e bd       	out	0x2e, r24	; 46
    144c:	0d b4       	in	r0, 0x2d	; 45
    144e:	07 fe       	sbrs	r0, 7
    1450:	fd cf       	rjmp	.-6      	; 0x144c <rf_polling_rx_packet+0x400>
    1452:	1e bc       	out	0x2e, r1	; 46
    1454:	0d b4       	in	r0, 0x2d	; 45
    1456:	07 fe       	sbrs	r0, 7
    1458:	fd cf       	rjmp	.-6      	; 0x1454 <rf_polling_rx_packet+0x408>
    145a:	8e b5       	in	r24, 0x2e	; 46
    145c:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_STROBE(CC2420_SFLUSHRX);
    145e:	40 98       	cbi	0x08, 0	; 8
    1460:	88 e0       	ldi	r24, 0x08	; 8
    1462:	8e bd       	out	0x2e, r24	; 46
    1464:	0d b4       	in	r0, 0x2d	; 45
    1466:	07 fe       	sbrs	r0, 7
    1468:	fd cf       	rjmp	.-6      	; 0x1464 <rf_polling_rx_packet+0x418>
    146a:	40 9a       	sbi	0x08, 0	; 8
	    		FASTSPI_STROBE(CC2420_SFLUSHRX);
    146c:	40 98       	cbi	0x08, 0	; 8
    146e:	88 e0       	ldi	r24, 0x08	; 8
    1470:	8e bd       	out	0x2e, r24	; 46
    1472:	0d b4       	in	r0, 0x2d	; 45
    1474:	07 fe       	sbrs	r0, 7
    1476:	fd cf       	rjmp	.-6      	; 0x1472 <rf_polling_rx_packet+0x426>
    1478:	40 9a       	sbi	0x08, 0	; 8
    147a:	8b ef       	ldi	r24, 0xFB	; 251
    }
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
return 0;
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <rf_rx_packet>:

int8_t rf_rx_packet()
{
int8_t tmp;
if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
    148c:	80 91 c3 0a 	lds	r24, 0x0AC3
    1490:	88 23       	and	r24, r24
    1492:	21 f0       	breq	.+8      	; 0x149c <rf_rx_packet+0x10>
    1494:	80 91 c3 0a 	lds	r24, 0x0AC3
    1498:	10 92 c3 0a 	sts	0x0AC3, r1
return 0;
}
    149c:	08 95       	ret

0000149e <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    149e:	40 98       	cbi	0x08, 0	; 8
    14a0:	88 e0       	ldi	r24, 0x08	; 8
    14a2:	8e bd       	out	0x2e, r24	; 46
    14a4:	0d b4       	in	r0, 0x2d	; 45
    14a6:	07 fe       	sbrs	r0, 7
    14a8:	fd cf       	rjmp	.-6      	; 0x14a4 <rf_flush_rx_fifo+0x6>
    14aa:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    14ac:	40 98       	cbi	0x08, 0	; 8
    14ae:	88 e0       	ldi	r24, 0x08	; 8
    14b0:	8e bd       	out	0x2e, r24	; 46
    14b2:	0d b4       	in	r0, 0x2d	; 45
    14b4:	07 fe       	sbrs	r0, 7
    14b6:	fd cf       	rjmp	.-6      	; 0x14b2 <rf_flush_rx_fifo+0x14>
    14b8:	40 9a       	sbi	0x08, 0	; 8
}
    14ba:	08 95       	ret

000014bc <rf_set_cca_thresh>:
uint16_t val;
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif

val=(t<<8) | 0x80;
    14bc:	99 27       	eor	r25, r25
    14be:	87 fd       	sbrc	r24, 7
    14c0:	90 95       	com	r25
    14c2:	98 2f       	mov	r25, r24
    14c4:	88 27       	eor	r24, r24
    14c6:	80 68       	ori	r24, 0x80	; 128
FASTSPI_SETREG(CC2420_RSSI, val); 
    14c8:	40 98       	cbi	0x08, 0	; 8
    14ca:	23 e1       	ldi	r18, 0x13	; 19
    14cc:	2e bd       	out	0x2e, r18	; 46
    14ce:	0d b4       	in	r0, 0x2d	; 45
    14d0:	07 fe       	sbrs	r0, 7
    14d2:	fd cf       	rjmp	.-6      	; 0x14ce <rf_set_cca_thresh+0x12>
    14d4:	9e bd       	out	0x2e, r25	; 46
    14d6:	0d b4       	in	r0, 0x2d	; 45
    14d8:	07 fe       	sbrs	r0, 7
    14da:	fd cf       	rjmp	.-6      	; 0x14d6 <rf_set_cca_thresh+0x1a>
    14dc:	8e bd       	out	0x2e, r24	; 46
    14de:	0d b4       	in	r0, 0x2d	; 45
    14e0:	07 fe       	sbrs	r0, 7
    14e2:	fd cf       	rjmp	.-6      	; 0x14de <rf_set_cca_thresh+0x22>
    14e4:	40 9a       	sbi	0x08, 0	; 8

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
    14e6:	08 95       	ret

000014e8 <rf_test_mode>:
{

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    14e8:	40 98       	cbi	0x08, 0	; 8
    14ea:	86 e0       	ldi	r24, 0x06	; 6
    14ec:	8e bd       	out	0x2e, r24	; 46
    14ee:	0d b4       	in	r0, 0x2d	; 45
    14f0:	07 fe       	sbrs	r0, 7
    14f2:	fd cf       	rjmp	.-6      	; 0x14ee <rf_test_mode+0x6>
    14f4:	40 9a       	sbi	0x08, 0	; 8
	// RF studio" uses TX_MODE=3 (CC2420_MDMCTRL1=0x050C)
	// to send an unmodulated carrier; data sheet says TX_MODE 
	// can be 2 or 3. So it should not matter...
	// HOWEVER, using (TX_MODE=3) sometimes causes problems when 
	// going back to "data" mode!
	FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0508); // MDMCTRL1 with TX_MODE=2
    14f6:	40 98       	cbi	0x08, 0	; 8
    14f8:	82 e1       	ldi	r24, 0x12	; 18
    14fa:	8e bd       	out	0x2e, r24	; 46
    14fc:	0d b4       	in	r0, 0x2d	; 45
    14fe:	07 fe       	sbrs	r0, 7
    1500:	fd cf       	rjmp	.-6      	; 0x14fc <rf_test_mode+0x14>
    1502:	85 e0       	ldi	r24, 0x05	; 5
    1504:	8e bd       	out	0x2e, r24	; 46
    1506:	0d b4       	in	r0, 0x2d	; 45
    1508:	07 fe       	sbrs	r0, 7
    150a:	fd cf       	rjmp	.-6      	; 0x1506 <rf_test_mode+0x1e>
    150c:	88 e0       	ldi	r24, 0x08	; 8
    150e:	8e bd       	out	0x2e, r24	; 46
    1510:	0d b4       	in	r0, 0x2d	; 45
    1512:	07 fe       	sbrs	r0, 7
    1514:	fd cf       	rjmp	.-6      	; 0x1510 <rf_test_mode+0x28>
    1516:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_SETREG(CC2420_DACTST, 0x1800); // send unmodulated carrier
    1518:	40 98       	cbi	0x08, 0	; 8
    151a:	8e e2       	ldi	r24, 0x2E	; 46
    151c:	8e bd       	out	0x2e, r24	; 46
    151e:	0d b4       	in	r0, 0x2d	; 45
    1520:	07 fe       	sbrs	r0, 7
    1522:	fd cf       	rjmp	.-6      	; 0x151e <rf_test_mode+0x36>
    1524:	88 e1       	ldi	r24, 0x18	; 24
    1526:	8e bd       	out	0x2e, r24	; 46
    1528:	0d b4       	in	r0, 0x2d	; 45
    152a:	07 fe       	sbrs	r0, 7
    152c:	fd cf       	rjmp	.-6      	; 0x1528 <rf_test_mode+0x40>
    152e:	1e bc       	out	0x2e, r1	; 46
    1530:	0d b4       	in	r0, 0x2d	; 45
    1532:	07 fe       	sbrs	r0, 7
    1534:	fd cf       	rjmp	.-6      	; 0x1530 <rf_test_mode+0x48>
    1536:	40 9a       	sbi	0x08, 0	; 8
	rf_flush_rx_fifo();
    1538:	0e 94 4f 0a 	call	0x149e	; 0x149e <rf_flush_rx_fifo>

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
    153c:	08 95       	ret

0000153e <rf_data_mode>:
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode() {
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    153e:	40 98       	cbi	0x08, 0	; 8
    1540:	86 e0       	ldi	r24, 0x06	; 6
    1542:	8e bd       	out	0x2e, r24	; 46
    1544:	0d b4       	in	r0, 0x2d	; 45
    1546:	07 fe       	sbrs	r0, 7
    1548:	fd cf       	rjmp	.-6      	; 0x1544 <rf_data_mode+0x6>
    154a:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // default MDMCTRL1 value
    154c:	40 98       	cbi	0x08, 0	; 8
    154e:	82 e1       	ldi	r24, 0x12	; 18
    1550:	8e bd       	out	0x2e, r24	; 46
    1552:	0d b4       	in	r0, 0x2d	; 45
    1554:	07 fe       	sbrs	r0, 7
    1556:	fd cf       	rjmp	.-6      	; 0x1552 <rf_data_mode+0x14>
    1558:	85 e0       	ldi	r24, 0x05	; 5
    155a:	8e bd       	out	0x2e, r24	; 46
    155c:	0d b4       	in	r0, 0x2d	; 45
    155e:	07 fe       	sbrs	r0, 7
    1560:	fd cf       	rjmp	.-6      	; 0x155c <rf_data_mode+0x1e>
    1562:	1e bc       	out	0x2e, r1	; 46
    1564:	0d b4       	in	r0, 0x2d	; 45
    1566:	07 fe       	sbrs	r0, 7
    1568:	fd cf       	rjmp	.-6      	; 0x1564 <rf_data_mode+0x26>
    156a:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_DACTST, 0); // default value
    156c:	40 98       	cbi	0x08, 0	; 8
    156e:	8e e2       	ldi	r24, 0x2E	; 46
    1570:	8e bd       	out	0x2e, r24	; 46
    1572:	0d b4       	in	r0, 0x2d	; 45
    1574:	07 fe       	sbrs	r0, 7
    1576:	fd cf       	rjmp	.-6      	; 0x1572 <rf_data_mode+0x34>
    1578:	1e bc       	out	0x2e, r1	; 46
    157a:	0d b4       	in	r0, 0x2d	; 45
    157c:	07 fe       	sbrs	r0, 7
    157e:	fd cf       	rjmp	.-6      	; 0x157a <rf_data_mode+0x3c>
    1580:	1e bc       	out	0x2e, r1	; 46
    1582:	0d b4       	in	r0, 0x2d	; 45
    1584:	07 fe       	sbrs	r0, 7
    1586:	fd cf       	rjmp	.-6      	; 0x1582 <rf_data_mode+0x44>
    1588:	40 9a       	sbi	0x08, 0	; 8
        rf_flush_rx_fifo();
    158a:	0e 94 4f 0a 	call	0x149e	; 0x149e <rf_flush_rx_fifo>
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
    158e:	08 95       	ret

00001590 <rf_carrier_on>:
void rf_carrier_on()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif
        FASTSPI_STROBE(CC2420_STXON); // tell radio to start sending
    1590:	40 98       	cbi	0x08, 0	; 8
    1592:	84 e0       	ldi	r24, 0x04	; 4
    1594:	8e bd       	out	0x2e, r24	; 46
    1596:	0d b4       	in	r0, 0x2d	; 45
    1598:	07 fe       	sbrs	r0, 7
    159a:	fd cf       	rjmp	.-6      	; 0x1596 <rf_carrier_on+0x6>
    159c:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
    159e:	08 95       	ret

000015a0 <rf_carrier_off>:
void rf_carrier_off()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); // stop radio
    15a0:	40 98       	cbi	0x08, 0	; 8
    15a2:	86 e0       	ldi	r24, 0x06	; 6
    15a4:	8e bd       	out	0x2e, r24	; 46
    15a6:	0d b4       	in	r0, 0x2d	; 45
    15a8:	07 fe       	sbrs	r0, 7
    15aa:	fd cf       	rjmp	.-6      	; 0x15a6 <rf_carrier_off+0x6>
    15ac:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
    15ae:	08 95       	ret

000015b0 <rf_tx_packet>:
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    15b0:	ff 92       	push	r15
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <rf_tx_packet+0xc>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <rf_tx_packet+0xe>
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	fc 01       	movw	r30, r24
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif

if(security_enable)
    15c4:	80 91 af 0a 	lds	r24, 0x0AAF
    15c8:	88 23       	and	r24, r24
    15ca:	39 f0       	breq	.+14     	; 0x15da <rf_tx_packet+0x2a>
    FASTSPI_STROBE(CC2420_STXENC);
    15cc:	40 98       	cbi	0x08, 0	; 8
    15ce:	9d e0       	ldi	r25, 0x0D	; 13
    15d0:	9e bd       	out	0x2e, r25	; 46
    15d2:	0d b4       	in	r0, 0x2d	; 45
    15d4:	07 fe       	sbrs	r0, 7
    15d6:	fd cf       	rjmp	.-6      	; 0x15d2 <rf_tx_packet+0x22>
    15d8:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    15da:	1a 82       	std	Y+2, r1	; 0x02
    for(i=0; i<pRTI->length; i++ )
    15dc:	92 81       	ldd	r25, Z+2	; 0x02
    15de:	49 2f       	mov	r20, r25
    15e0:	55 27       	eor	r21, r21
    15e2:	47 fd       	sbrc	r20, 7
    15e4:	50 95       	com	r21
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	09 c0       	rjmp	.+18     	; 0x15fc <rf_tx_packet+0x4c>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    15ea:	a3 81       	ldd	r26, Z+3	; 0x03
    15ec:	b4 81       	ldd	r27, Z+4	; 0x04
    15ee:	a6 0f       	add	r26, r22
    15f0:	b7 1f       	adc	r27, r23
    15f2:	3a 81       	ldd	r19, Y+2	; 0x02
    15f4:	6c 91       	ld	r22, X
    15f6:	36 0f       	add	r19, r22
    15f8:	3a 83       	std	Y+2, r19	; 0x02

if(security_enable)
    FASTSPI_STROBE(CC2420_STXENC);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    15fa:	2f 5f       	subi	r18, 0xFF	; 255
    15fc:	62 2f       	mov	r22, r18
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	64 17       	cp	r22, r20
    1602:	75 07       	cpc	r23, r21
    1604:	94 f3       	brlt	.-28     	; 0x15ea <rf_tx_packet+0x3a>
    }
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)

    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a slighly higher later since they assume TDMA
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    1606:	29 2f       	mov	r18, r25
    1608:	24 5f       	subi	r18, 0xF4	; 244
    160a:	29 83       	std	Y+1, r18	; 0x01
    if(security_enable) packetLength+=4;  // for CTR counter
    160c:	88 23       	and	r24, r24
    160e:	11 f0       	breq	.+4      	; 0x1614 <rf_tx_packet+0x64>
    1610:	90 5f       	subi	r25, 0xF0	; 240
    1612:	99 83       	std	Y+1, r25	; 0x01

   	// XXX 2 below are hacks...
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
    // Wait until the transceiver is idle
    while (FIFOP_IS_1 || SFD_IS_1);
    1614:	67 99       	sbic	0x0c, 7	; 12
    1616:	fe cf       	rjmp	.-4      	; 0x1614 <rf_tx_packet+0x64>
    1618:	4e 99       	sbic	0x09, 6	; 9
    161a:	fc cf       	rjmp	.-8      	; 0x1614 <rf_tx_packet+0x64>
    // Turn off global interrupts to avoid interference on the SPI interface
    DISABLE_GLOBAL_INT();
    161c:	f8 94       	cli
	// Flush the TX FIFO just in case...
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    161e:	40 98       	cbi	0x08, 0	; 8
    1620:	99 e0       	ldi	r25, 0x09	; 9
    1622:	9e bd       	out	0x2e, r25	; 46
    1624:	0d b4       	in	r0, 0x2d	; 45
    1626:	07 fe       	sbrs	r0, 7
    1628:	fd cf       	rjmp	.-6      	; 0x1624 <rf_tx_packet+0x74>
    162a:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    162c:	40 98       	cbi	0x08, 0	; 8
    162e:	99 e0       	ldi	r25, 0x09	; 9
    1630:	9e bd       	out	0x2e, r25	; 46
    1632:	0d b4       	in	r0, 0x2d	; 45
    1634:	07 fe       	sbrs	r0, 7
    1636:	fd cf       	rjmp	.-6      	; 0x1632 <rf_tx_packet+0x82>
    1638:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/

    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    163a:	40 98       	cbi	0x08, 0	; 8
    163c:	9e e3       	ldi	r25, 0x3E	; 62
    163e:	9e bd       	out	0x2e, r25	; 46
    1640:	0d b4       	in	r0, 0x2d	; 45
    1642:	07 fe       	sbrs	r0, 7
    1644:	fd cf       	rjmp	.-6      	; 0x1640 <rf_tx_packet+0x90>
    1646:	99 81       	ldd	r25, Y+1	; 0x01
    1648:	9e bd       	out	0x2e, r25	; 46
    164a:	0d b4       	in	r0, 0x2d	; 45
    164c:	07 fe       	sbrs	r0, 7
    164e:	fd cf       	rjmp	.-6      	; 0x164a <rf_tx_packet+0x9a>
    1650:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = RF_FCF_NOACK;   // default
    1652:	21 e4       	ldi	r18, 0x41	; 65
    1654:	38 e8       	ldi	r19, 0x88	; 136
    1656:	3c 83       	std	Y+4, r19	; 0x04
    1658:	2b 83       	std	Y+3, r18	; 0x03
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    165a:	90 91 bd 0a 	lds	r25, 0x0ABD
    165e:	99 23       	and	r25, r25
    1660:	21 f0       	breq	.+8      	; 0x166a <rf_tx_packet+0xba>
    1662:	21 e6       	ldi	r18, 0x61	; 97
    1664:	38 e8       	ldi	r19, 0x88	; 136
    1666:	3c 83       	std	Y+4, r19	; 0x04
    1668:	2b 83       	std	Y+3, r18	; 0x03
    if(security_enable) frameControlField |= RF_SEC_BM;
    166a:	88 23       	and	r24, r24
    166c:	29 f0       	breq	.+10     	; 0x1678 <rf_tx_packet+0xc8>
    166e:	2b 81       	ldd	r18, Y+3	; 0x03
    1670:	3c 81       	ldd	r19, Y+4	; 0x04
    1672:	28 60       	ori	r18, 0x08	; 8
    1674:	3c 83       	std	Y+4, r19	; 0x04
    1676:	2b 83       	std	Y+3, r18	; 0x03
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    1678:	40 98       	cbi	0x08, 0	; 8
    167a:	9e e3       	ldi	r25, 0x3E	; 62
    167c:	9e bd       	out	0x2e, r25	; 46
    167e:	0d b4       	in	r0, 0x2d	; 45
    1680:	07 fe       	sbrs	r0, 7
    1682:	fd cf       	rjmp	.-6      	; 0x167e <rf_tx_packet+0xce>
    1684:	de 01       	movw	r26, r28
    1686:	13 96       	adiw	r26, 0x03	; 3
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    1688:	9e 01       	movw	r18, r28
    168a:	2b 5f       	subi	r18, 0xFB	; 251
    168c:	3f 4f       	sbci	r19, 0xFF	; 255

    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = RF_FCF_NOACK;   // default
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    if(security_enable) frameControlField |= RF_SEC_BM;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    168e:	9c 91       	ld	r25, X
    1690:	9e bd       	out	0x2e, r25	; 46
    1692:	0d b4       	in	r0, 0x2d	; 45
    1694:	07 fe       	sbrs	r0, 7
    1696:	fd cf       	rjmp	.-6      	; 0x1692 <rf_tx_packet+0xe2>
    1698:	11 96       	adiw	r26, 0x01	; 1
    169a:	a2 17       	cp	r26, r18
    169c:	b3 07       	cpc	r27, r19
    169e:	b9 f7       	brne	.-18     	; 0x168e <rf_tx_packet+0xde>
    16a0:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    16a2:	40 98       	cbi	0x08, 0	; 8
    16a4:	9e e3       	ldi	r25, 0x3E	; 62
    16a6:	9e bd       	out	0x2e, r25	; 46
    16a8:	0d b4       	in	r0, 0x2d	; 45
    16aa:	07 fe       	sbrs	r0, 7
    16ac:	fd cf       	rjmp	.-6      	; 0x16a8 <rf_tx_packet+0xf8>
    16ae:	90 91 b4 0a 	lds	r25, 0x0AB4
    16b2:	9e bd       	out	0x2e, r25	; 46
    16b4:	0d b4       	in	r0, 0x2d	; 45
    16b6:	07 fe       	sbrs	r0, 7
    16b8:	fd cf       	rjmp	.-6      	; 0x16b4 <rf_tx_packet+0x104>
    16ba:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    16bc:	40 98       	cbi	0x08, 0	; 8
    16be:	9e e3       	ldi	r25, 0x3E	; 62
    16c0:	9e bd       	out	0x2e, r25	; 46
    16c2:	0d b4       	in	r0, 0x2d	; 45
    16c4:	07 fe       	sbrs	r0, 7
    16c6:	fd cf       	rjmp	.-6      	; 0x16c2 <rf_tx_packet+0x112>
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	d9 01       	movw	r26, r18
    16ce:	ae 54       	subi	r26, 0x4E	; 78
    16d0:	b5 4f       	sbci	r27, 0xF5	; 245
    16d2:	14 96       	adiw	r26, 0x04	; 4
    16d4:	9c 91       	ld	r25, X
    16d6:	14 97       	sbiw	r26, 0x04	; 4
    16d8:	9e bd       	out	0x2e, r25	; 46
    16da:	0d b4       	in	r0, 0x2d	; 45
    16dc:	07 fe       	sbrs	r0, 7
    16de:	fd cf       	rjmp	.-6      	; 0x16da <rf_tx_packet+0x12a>
    16e0:	2f 5f       	subi	r18, 0xFF	; 255
    16e2:	3f 4f       	sbci	r19, 0xFF	; 255
    16e4:	22 30       	cpi	r18, 0x02	; 2
    16e6:	31 05       	cpc	r19, r1
    16e8:	89 f7       	brne	.-30     	; 0x16cc <rf_tx_packet+0x11c>
    16ea:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    16ec:	40 98       	cbi	0x08, 0	; 8
    16ee:	9e e3       	ldi	r25, 0x3E	; 62
    16f0:	9e bd       	out	0x2e, r25	; 46
    16f2:	0d b4       	in	r0, 0x2d	; 45
    16f4:	07 fe       	sbrs	r0, 7
    16f6:	fd cf       	rjmp	.-6      	; 0x16f2 <rf_tx_packet+0x142>
    16f8:	df 01       	movw	r26, r30
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    16fa:	9f 01       	movw	r18, r30
    16fc:	2e 5f       	subi	r18, 0xFE	; 254
    16fe:	3f 4f       	sbci	r19, 0xFF	; 255
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    if(security_enable) frameControlField |= RF_SEC_BM;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    1700:	9c 91       	ld	r25, X
    1702:	9e bd       	out	0x2e, r25	; 46
    1704:	0d b4       	in	r0, 0x2d	; 45
    1706:	07 fe       	sbrs	r0, 7
    1708:	fd cf       	rjmp	.-6      	; 0x1704 <rf_tx_packet+0x154>
    170a:	11 96       	adiw	r26, 0x01	; 1
    170c:	a2 17       	cp	r26, r18
    170e:	b3 07       	cpc	r27, r19
    1710:	b9 f7       	brne	.-18     	; 0x1700 <rf_tx_packet+0x150>
    1712:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    1714:	40 98       	cbi	0x08, 0	; 8
    1716:	9e e3       	ldi	r25, 0x3E	; 62
    1718:	9e bd       	out	0x2e, r25	; 46
    171a:	0d b4       	in	r0, 0x2d	; 45
    171c:	07 fe       	sbrs	r0, 7
    171e:	fd cf       	rjmp	.-6      	; 0x171a <rf_tx_packet+0x16a>
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	d9 01       	movw	r26, r18
    1726:	ae 54       	subi	r26, 0x4E	; 78
    1728:	b5 4f       	sbci	r27, 0xF5	; 245
    172a:	16 96       	adiw	r26, 0x06	; 6
    172c:	9c 91       	ld	r25, X
    172e:	16 97       	sbiw	r26, 0x06	; 6
    1730:	9e bd       	out	0x2e, r25	; 46
    1732:	0d b4       	in	r0, 0x2d	; 45
    1734:	07 fe       	sbrs	r0, 7
    1736:	fd cf       	rjmp	.-6      	; 0x1732 <rf_tx_packet+0x182>
    1738:	2f 5f       	subi	r18, 0xFF	; 255
    173a:	3f 4f       	sbci	r19, 0xFF	; 255
    173c:	22 30       	cpi	r18, 0x02	; 2
    173e:	31 05       	cpc	r19, r1
    1740:	89 f7       	brne	.-30     	; 0x1724 <rf_tx_packet+0x174>
    1742:	40 9a       	sbi	0x08, 0	; 8
    if(security_enable)
    1744:	88 23       	and	r24, r24
    1746:	99 f0       	breq	.+38     	; 0x176e <rf_tx_packet+0x1be>
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
    1748:	40 98       	cbi	0x08, 0	; 8
    174a:	8e e3       	ldi	r24, 0x3E	; 62
    174c:	8e bd       	out	0x2e, r24	; 46
    174e:	0d b4       	in	r0, 0x2d	; 45
    1750:	07 fe       	sbrs	r0, 7
    1752:	fd cf       	rjmp	.-6      	; 0x174e <rf_tx_packet+0x19e>
    1754:	af eb       	ldi	r26, 0xBF	; 191
    1756:	ba e0       	ldi	r27, 0x0A	; 10
    1758:	8c 91       	ld	r24, X
    175a:	8e bd       	out	0x2e, r24	; 46
    175c:	0d b4       	in	r0, 0x2d	; 45
    175e:	07 fe       	sbrs	r0, 7
    1760:	fd cf       	rjmp	.-6      	; 0x175c <rf_tx_packet+0x1ac>
    1762:	11 96       	adiw	r26, 0x01	; 1
    1764:	8a e0       	ldi	r24, 0x0A	; 10
    1766:	a3 3c       	cpi	r26, 0xC3	; 195
    1768:	b8 07       	cpc	r27, r24
    176a:	b1 f7       	brne	.-20     	; 0x1758 <rf_tx_packet+0x1a8>
    176c:	40 9a       	sbi	0x08, 0	; 8
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    176e:	40 98       	cbi	0x08, 0	; 8
    1770:	8e e3       	ldi	r24, 0x3E	; 62
    1772:	8e bd       	out	0x2e, r24	; 46
    1774:	0d b4       	in	r0, 0x2d	; 45
    1776:	07 fe       	sbrs	r0, 7
    1778:	fd cf       	rjmp	.-6      	; 0x1774 <rf_tx_packet+0x1c4>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	0a c0       	rjmp	.+20     	; 0x1792 <rf_tx_packet+0x1e2>
    177e:	a3 81       	ldd	r26, Z+3	; 0x03
    1780:	b4 81       	ldd	r27, Z+4	; 0x04
    1782:	a2 0f       	add	r26, r18
    1784:	b3 1f       	adc	r27, r19
    1786:	9c 91       	ld	r25, X
    1788:	9e bd       	out	0x2e, r25	; 46
    178a:	0d b4       	in	r0, 0x2d	; 45
    178c:	07 fe       	sbrs	r0, 7
    178e:	fd cf       	rjmp	.-6      	; 0x178a <rf_tx_packet+0x1da>
    1790:	8f 5f       	subi	r24, 0xFF	; 255
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	24 17       	cp	r18, r20
    1798:	35 07       	cpc	r19, r21
    179a:	8c f3       	brlt	.-30     	; 0x177e <rf_tx_packet+0x1ce>
    179c:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    179e:	40 98       	cbi	0x08, 0	; 8
    17a0:	8e e3       	ldi	r24, 0x3E	; 62
    17a2:	8e bd       	out	0x2e, r24	; 46
    17a4:	0d b4       	in	r0, 0x2d	; 45
    17a6:	07 fe       	sbrs	r0, 7
    17a8:	fd cf       	rjmp	.-6      	; 0x17a4 <rf_tx_packet+0x1f4>
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	8e bd       	out	0x2e, r24	; 46
    17ae:	0d b4       	in	r0, 0x2d	; 45
    17b0:	07 fe       	sbrs	r0, 7
    17b2:	fd cf       	rjmp	.-6      	; 0x17ae <rf_tx_packet+0x1fe>
    17b4:	40 9a       	sbi	0x08, 0	; 8

if (pRTI->cca == TRUE)
    17b6:	85 81       	ldd	r24, Z+5	; 0x05
    17b8:	88 23       	and	r24, r24
    17ba:	b1 f1       	breq	.+108    	; 0x1828 <rf_tx_packet+0x278>
{
    uint8_t cnt;
     if (!rfSettings.receiveOn)
    17bc:	80 91 ba 0a 	lds	r24, 0x0ABA
    17c0:	88 23       	and	r24, r24
    17c2:	39 f4       	brne	.+14     	; 0x17d2 <rf_tx_packet+0x222>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    17c4:	40 98       	cbi	0x08, 0	; 8
    17c6:	83 e0       	ldi	r24, 0x03	; 3
    17c8:	8e bd       	out	0x2e, r24	; 46
    17ca:	0d b4       	in	r0, 0x2d	; 45
    17cc:	07 fe       	sbrs	r0, 7
    17ce:	fd cf       	rjmp	.-6      	; 0x17ca <rf_tx_packet+0x21a>
    17d0:	40 9a       	sbi	0x08, 0	; 8
	}
      
      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    17d2:	40 98       	cbi	0x08, 0	; 8
    17d4:	1e bc       	out	0x2e, r1	; 46
    17d6:	0d b4       	in	r0, 0x2d	; 45
    17d8:	07 fe       	sbrs	r0, 7
    17da:	fd cf       	rjmp	.-6      	; 0x17d6 <rf_tx_packet+0x226>
    17dc:	8e b5       	in	r24, 0x2e	; 46
    17de:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));      
    17e0:	81 ff       	sbrs	r24, 1
    17e2:	f7 cf       	rjmp	.-18     	; 0x17d2 <rf_tx_packet+0x222>
    17e4:	10 e0       	ldi	r17, 0x00	; 0
      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    17e6:	05 e0       	ldi	r16, 0x05	; 5
    17e8:	40 98       	cbi	0x08, 0	; 8
    17ea:	0e bd       	out	0x2e, r16	; 46
    17ec:	0d b4       	in	r0, 0x2d	; 45
    17ee:	07 fe       	sbrs	r0, 7
    17f0:	fd cf       	rjmp	.-6      	; 0x17ec <rf_tx_packet+0x23c>
    17f2:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    17f4:	40 98       	cbi	0x08, 0	; 8
    17f6:	1e bc       	out	0x2e, r1	; 46
    17f8:	0d b4       	in	r0, 0x2d	; 45
    17fa:	07 fe       	sbrs	r0, 7
    17fc:	fd cf       	rjmp	.-6      	; 0x17f8 <rf_tx_packet+0x248>
    17fe:	fe b4       	in	r15, 0x2e	; 46
    1800:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    1802:	1f 5f       	subi	r17, 0xFF	; 255
	  if (cnt > 100)
    1804:	15 36       	cpi	r17, 0x65	; 101
    1806:	49 f4       	brne	.+18     	; 0x181a <rf_tx_packet+0x26a>
	    {
	      ENABLE_GLOBAL_INT ();
    1808:	78 94       	sei
	      nrk_sem_post(radio_sem);
    180a:	80 91 ad 0a 	lds	r24, 0x0AAD
    180e:	90 91 ae 0a 	lds	r25, 0x0AAE
    1812:	0e 94 66 19 	call	0x32cc	; 0x32cc <nrk_sem_post>
    1816:	80 e0       	ldi	r24, 0x00	; 0
	      return FALSE;
    1818:	48 c0       	rjmp	.+144    	; 0x18aa <rf_tx_packet+0x2fa>
	    }
	  halWait (100);
    181a:	84 e6       	ldi	r24, 0x64	; 100
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 1b 14 	call	0x2836	; 0x2836 <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    1822:	f3 fe       	sbrs	r15, 3
    1824:	e1 cf       	rjmp	.-62     	; 0x17e8 <rf_tx_packet+0x238>
    1826:	07 c0       	rjmp	.+14     	; 0x1836 <rf_tx_packet+0x286>
    }
  else
    FASTSPI_STROBE (CC2420_STXON); 
    1828:	40 98       	cbi	0x08, 0	; 8
    182a:	84 e0       	ldi	r24, 0x04	; 4
    182c:	8e bd       	out	0x2e, r24	; 46
    182e:	0d b4       	in	r0, 0x2d	; 45
    1830:	07 fe       	sbrs	r0, 7
    1832:	fd cf       	rjmp	.-6      	; 0x182e <rf_tx_packet+0x27e>
    1834:	40 9a       	sbi	0x08, 0	; 8


  ENABLE_GLOBAL_INT();
    1836:	78 94       	sei
	// Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
  while (!SFD_IS_1);
    1838:	4e 9b       	sbis	0x09, 6	; 9
    183a:	fe cf       	rjmp	.-4      	; 0x1838 <rf_tx_packet+0x288>
  success = TRUE;

	// Turn interrupts back on
//	ENABLE_GLOBAL_INT();

    while (SFD_IS_1); // wait for packet to finish
    183c:	4e 99       	sbic	0x09, 6	; 9
    183e:	fe cf       	rjmp	.-4      	; 0x183c <rf_tx_packet+0x28c>

    // Wait for the acknowledge to be received, if any
    if (auto_ack_enable) {
    1840:	80 91 bd 0a 	lds	r24, 0x0ABD
    1844:	88 23       	and	r24, r24
    1846:	91 f0       	breq	.+36     	; 0x186c <rf_tx_packet+0x2bc>
		//	while (SFD_IS_1);
        // We'll enter RX automatically, so just wait until we can be sure that the 
	// ack reception should have finished
        // The timeout consists of a 12-symbol turnaround time, the ack packet duration, 
	// and a small margin
        halWait((12 * RF_SYMBOL_DURATION) + (RF_ACK_DURATION) + (2 * RF_SYMBOL_DURATION) + 100);
    1848:	84 ea       	ldi	r24, 0xA4	; 164
    184a:	92 e0       	ldi	r25, 0x02	; 2
    184c:	0e 94 1b 14 	call	0x2836	; 0x2836 <halWait>

	if(FIFO_IS_1)
    1850:	31 9b       	sbis	0x06, 1	; 6
    1852:	0e c0       	rjmp	.+28     	; 0x1870 <rf_tx_packet+0x2c0>
	{
	FASTSPI_READ_FIFO_BYTE(length);
    1854:	40 98       	cbi	0x08, 0	; 8
    1856:	8f e7       	ldi	r24, 0x7F	; 127
    1858:	8e bd       	out	0x2e, r24	; 46
    185a:	0d b4       	in	r0, 0x2d	; 45
    185c:	07 fe       	sbrs	r0, 7
    185e:	fd cf       	rjmp	.-6      	; 0x185a <rf_tx_packet+0x2aa>
    1860:	1e bc       	out	0x2e, r1	; 46
    1862:	0d b4       	in	r0, 0x2d	; 45
    1864:	07 fe       	sbrs	r0, 7
    1866:	fd cf       	rjmp	.-6      	; 0x1862 <rf_tx_packet+0x2b2>
    1868:	8e b5       	in	r24, 0x2e	; 46
    186a:	40 9a       	sbi	0x08, 0	; 8
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	0f c0       	rjmp	.+30     	; 0x188e <rf_tx_packet+0x2de>
	length &= RF_LENGTH_MASK; // Ignore MSB
	    success = TRUE;

	}else
	{
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1870:	40 98       	cbi	0x08, 0	; 8
    1872:	88 e0       	ldi	r24, 0x08	; 8
    1874:	8e bd       	out	0x2e, r24	; 46
    1876:	0d b4       	in	r0, 0x2d	; 45
    1878:	07 fe       	sbrs	r0, 7
    187a:	fd cf       	rjmp	.-6      	; 0x1876 <rf_tx_packet+0x2c6>
    187c:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    187e:	40 98       	cbi	0x08, 0	; 8
    1880:	88 e0       	ldi	r24, 0x08	; 8
    1882:	8e bd       	out	0x2e, r24	; 46
    1884:	0d b4       	in	r0, 0x2d	; 45
    1886:	07 fe       	sbrs	r0, 7
    1888:	fd cf       	rjmp	.-6      	; 0x1884 <rf_tx_packet+0x2d4>
    188a:	40 9a       	sbi	0x08, 0	; 8
    188c:	80 e0       	ldi	r24, 0x00	; 0
    }

    
	// Turn off the receiver if it should not continue to be enabled
    
    DISABLE_GLOBAL_INT();	
    188e:	f8 94       	cli
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
    
	FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    1890:	40 98       	cbi	0x08, 0	; 8
    1892:	96 e0       	ldi	r25, 0x06	; 6
    1894:	9e bd       	out	0x2e, r25	; 46
    1896:	0d b4       	in	r0, 0x2d	; 45
    1898:	07 fe       	sbrs	r0, 7
    189a:	fd cf       	rjmp	.-6      	; 0x1896 <rf_tx_packet+0x2e6>
    189c:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    189e:	78 94       	sei

    // agr XXX hack to test time issue
    //rf_rx_on(); 

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    18a0:	90 91 b4 0a 	lds	r25, 0x0AB4
    18a4:	9f 5f       	subi	r25, 0xFF	; 255
    18a6:	90 93 b4 0a 	sts	0x0AB4, r25
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
    return success;

}
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	ff 90       	pop	r15
    18bc:	08 95       	ret

000018be <rf_tx_tdma_packet>:

/**************************************************************************
This function is the same as normal TX, only it records actual transmission
starting time for calculating offset for SYNC
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time, uint16_t *tx_start_time) {
    18be:	af 92       	push	r10
    18c0:	bf 92       	push	r11
    18c2:	cf 92       	push	r12
    18c4:	df 92       	push	r13
    18c6:	ef 92       	push	r14
    18c8:	ff 92       	push	r15
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <rf_tx_tdma_packet+0x16>
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <rf_tx_tdma_packet+0x18>
    18d6:	0f 92       	push	r0
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	8c 01       	movw	r16, r24
    18de:	7b 01       	movw	r14, r22
    18e0:	5a 01       	movw	r10, r20
    18e2:	69 01       	movw	r12, r18
	uint8_t timestamp;

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend (radio_sem);
#endif
	timestamp=_nrk_os_timer_get();
    18e4:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_nrk_os_timer_get>
	// XXX 2 below are hacks...
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    18e8:	40 98       	cbi	0x08, 0	; 8
    18ea:	88 e0       	ldi	r24, 0x08	; 8
    18ec:	8e bd       	out	0x2e, r24	; 46
    18ee:	0d b4       	in	r0, 0x2d	; 45
    18f0:	07 fe       	sbrs	r0, 7
    18f2:	fd cf       	rjmp	.-6      	; 0x18ee <rf_tx_tdma_packet+0x30>
    18f4:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    18f6:	40 98       	cbi	0x08, 0	; 8
    18f8:	88 e0       	ldi	r24, 0x08	; 8
    18fa:	8e bd       	out	0x2e, r24	; 46
    18fc:	0d b4       	in	r0, 0x2d	; 45
    18fe:	07 fe       	sbrs	r0, 7
    1900:	fd cf       	rjmp	.-6      	; 0x18fc <rf_tx_tdma_packet+0x3e>
    1902:	40 9a       	sbi	0x08, 0	; 8
    // Wait until the transceiver is idle
     while (FIFOP_IS_1 || SFD_IS_1);
    1904:	67 99       	sbic	0x0c, 7	; 12
    1906:	fe cf       	rjmp	.-4      	; 0x1904 <rf_tx_tdma_packet+0x46>
    1908:	4e 99       	sbic	0x09, 6	; 9
    190a:	fc cf       	rjmp	.-8      	; 0x1904 <rf_tx_tdma_packet+0x46>
    // Turn off global interrupts to avoid interference on the SPI interface
      DISABLE_GLOBAL_INT();
    190c:	f8 94       	cli
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    190e:	40 98       	cbi	0x08, 0	; 8
    1910:	89 e0       	ldi	r24, 0x09	; 9
    1912:	8e bd       	out	0x2e, r24	; 46
    1914:	0d b4       	in	r0, 0x2d	; 45
    1916:	07 fe       	sbrs	r0, 7
    1918:	fd cf       	rjmp	.-6      	; 0x1914 <rf_tx_tdma_packet+0x56>
    191a:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    191c:	40 98       	cbi	0x08, 0	; 8
    191e:	89 e0       	ldi	r24, 0x09	; 9
    1920:	8e bd       	out	0x2e, r24	; 46
    1922:	0d b4       	in	r0, 0x2d	; 45
    1924:	07 fe       	sbrs	r0, 7
    1926:	fd cf       	rjmp	.-6      	; 0x1922 <rf_tx_tdma_packet+0x64>
    1928:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    192a:	1a 82       	std	Y+2, r1	; 0x02
    for(i=0; i<pRTI->length; i++ )
    192c:	d8 01       	movw	r26, r16
    192e:	12 96       	adiw	r26, 0x02	; 2
    1930:	2c 91       	ld	r18, X
    1932:	12 97       	sbiw	r26, 0x02	; 2
    1934:	62 2f       	mov	r22, r18
    1936:	77 27       	eor	r23, r23
    1938:	67 fd       	sbrc	r22, 7
    193a:	70 95       	com	r23
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	0c c0       	rjmp	.+24     	; 0x1958 <rf_tx_tdma_packet+0x9a>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    1940:	d8 01       	movw	r26, r16
    1942:	13 96       	adiw	r26, 0x03	; 3
    1944:	ed 91       	ld	r30, X+
    1946:	fc 91       	ld	r31, X
    1948:	14 97       	sbiw	r26, 0x04	; 4
    194a:	e4 0f       	add	r30, r20
    194c:	f5 1f       	adc	r31, r21
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	30 81       	ld	r19, Z
    1952:	93 0f       	add	r25, r19
    1954:	9a 83       	std	Y+2, r25	; 0x02
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
	FASTSPI_STROBE(CC2420_SFLUSHTX);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    1956:	8f 5f       	subi	r24, 0xFF	; 255
    1958:	48 2f       	mov	r20, r24
    195a:	50 e0       	ldi	r21, 0x00	; 0
    195c:	46 17       	cp	r20, r22
    195e:	57 07       	cpc	r21, r23
    1960:	7c f3       	brlt	.-34     	; 0x1940 <rf_tx_tdma_packet+0x82>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    }
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    1962:	82 2f       	mov	r24, r18
    1964:	84 5f       	subi	r24, 0xF4	; 244
    1966:	89 83       	std	Y+1, r24	; 0x01
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    1968:	40 98       	cbi	0x08, 0	; 8
    196a:	9e e3       	ldi	r25, 0x3E	; 62
    196c:	9e bd       	out	0x2e, r25	; 46
    196e:	0d b4       	in	r0, 0x2d	; 45
    1970:	07 fe       	sbrs	r0, 7
    1972:	fd cf       	rjmp	.-6      	; 0x196e <rf_tx_tdma_packet+0xb0>
    1974:	8e bd       	out	0x2e, r24	; 46
    1976:	0d b4       	in	r0, 0x2d	; 45
    1978:	07 fe       	sbrs	r0, 7
    197a:	fd cf       	rjmp	.-6      	; 0x1976 <rf_tx_tdma_packet+0xb8>
    197c:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    197e:	f8 01       	movw	r30, r16
    1980:	86 81       	ldd	r24, Z+6	; 0x06
    1982:	88 23       	and	r24, r24
    1984:	19 f4       	brne	.+6      	; 0x198c <rf_tx_tdma_packet+0xce>
    1986:	81 e4       	ldi	r24, 0x41	; 65
    1988:	98 e8       	ldi	r25, 0x88	; 136
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <rf_tx_tdma_packet+0xd2>
    198c:	81 e6       	ldi	r24, 0x61	; 97
    198e:	98 e8       	ldi	r25, 0x88	; 136
    1990:	9c 83       	std	Y+4, r25	; 0x04
    1992:	8b 83       	std	Y+3, r24	; 0x03
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    1994:	40 98       	cbi	0x08, 0	; 8
    1996:	8e e3       	ldi	r24, 0x3E	; 62
    1998:	8e bd       	out	0x2e, r24	; 46
    199a:	0d b4       	in	r0, 0x2d	; 45
    199c:	07 fe       	sbrs	r0, 7
    199e:	fd cf       	rjmp	.-6      	; 0x199a <rf_tx_tdma_packet+0xdc>
    19a0:	fe 01       	movw	r30, r28
    19a2:	33 96       	adiw	r30, 0x03	; 3

/**************************************************************************
This function is the same as normal TX, only it records actual transmission
starting time for calculating offset for SYNC
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time, uint16_t *tx_start_time) {
    19a4:	ce 01       	movw	r24, r28
    19a6:	05 96       	adiw	r24, 0x05	; 5
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    19a8:	20 81       	ld	r18, Z
    19aa:	2e bd       	out	0x2e, r18	; 46
    19ac:	0d b4       	in	r0, 0x2d	; 45
    19ae:	07 fe       	sbrs	r0, 7
    19b0:	fd cf       	rjmp	.-6      	; 0x19ac <rf_tx_tdma_packet+0xee>
    19b2:	31 96       	adiw	r30, 0x01	; 1
    19b4:	e8 17       	cp	r30, r24
    19b6:	f9 07       	cpc	r31, r25
    19b8:	b9 f7       	brne	.-18     	; 0x19a8 <rf_tx_tdma_packet+0xea>
    19ba:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    19bc:	40 98       	cbi	0x08, 0	; 8
    19be:	8e e3       	ldi	r24, 0x3E	; 62
    19c0:	8e bd       	out	0x2e, r24	; 46
    19c2:	0d b4       	in	r0, 0x2d	; 45
    19c4:	07 fe       	sbrs	r0, 7
    19c6:	fd cf       	rjmp	.-6      	; 0x19c2 <rf_tx_tdma_packet+0x104>
    19c8:	80 91 b4 0a 	lds	r24, 0x0AB4
    19cc:	8e bd       	out	0x2e, r24	; 46
    19ce:	0d b4       	in	r0, 0x2d	; 45
    19d0:	07 fe       	sbrs	r0, 7
    19d2:	fd cf       	rjmp	.-6      	; 0x19ce <rf_tx_tdma_packet+0x110>
    19d4:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    19d6:	40 98       	cbi	0x08, 0	; 8
    19d8:	8e e3       	ldi	r24, 0x3E	; 62
    19da:	8e bd       	out	0x2e, r24	; 46
    19dc:	0d b4       	in	r0, 0x2d	; 45
    19de:	07 fe       	sbrs	r0, 7
    19e0:	fd cf       	rjmp	.-6      	; 0x19dc <rf_tx_tdma_packet+0x11e>
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	fc 01       	movw	r30, r24
    19e8:	ee 54       	subi	r30, 0x4E	; 78
    19ea:	f5 4f       	sbci	r31, 0xF5	; 245
    19ec:	24 81       	ldd	r18, Z+4	; 0x04
    19ee:	2e bd       	out	0x2e, r18	; 46
    19f0:	0d b4       	in	r0, 0x2d	; 45
    19f2:	07 fe       	sbrs	r0, 7
    19f4:	fd cf       	rjmp	.-6      	; 0x19f0 <rf_tx_tdma_packet+0x132>
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	91 05       	cpc	r25, r1
    19fc:	a1 f7       	brne	.-24     	; 0x19e6 <rf_tx_tdma_packet+0x128>
    19fe:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    1a00:	40 98       	cbi	0x08, 0	; 8
    1a02:	8e e3       	ldi	r24, 0x3E	; 62
    1a04:	8e bd       	out	0x2e, r24	; 46
    1a06:	0d b4       	in	r0, 0x2d	; 45
    1a08:	07 fe       	sbrs	r0, 7
    1a0a:	fd cf       	rjmp	.-6      	; 0x1a06 <rf_tx_tdma_packet+0x148>
    1a0c:	f8 01       	movw	r30, r16

/**************************************************************************
This function is the same as normal TX, only it records actual transmission
starting time for calculating offset for SYNC
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time, uint16_t *tx_start_time) {
    1a0e:	c8 01       	movw	r24, r16
    1a10:	02 96       	adiw	r24, 0x02	; 2
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    1a12:	20 81       	ld	r18, Z
    1a14:	2e bd       	out	0x2e, r18	; 46
    1a16:	0d b4       	in	r0, 0x2d	; 45
    1a18:	07 fe       	sbrs	r0, 7
    1a1a:	fd cf       	rjmp	.-6      	; 0x1a16 <rf_tx_tdma_packet+0x158>
    1a1c:	31 96       	adiw	r30, 0x01	; 1
    1a1e:	e8 17       	cp	r30, r24
    1a20:	f9 07       	cpc	r31, r25
    1a22:	b9 f7       	brne	.-18     	; 0x1a12 <rf_tx_tdma_packet+0x154>
    1a24:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    1a26:	40 98       	cbi	0x08, 0	; 8
    1a28:	8e e3       	ldi	r24, 0x3E	; 62
    1a2a:	8e bd       	out	0x2e, r24	; 46
    1a2c:	0d b4       	in	r0, 0x2d	; 45
    1a2e:	07 fe       	sbrs	r0, 7
    1a30:	fd cf       	rjmp	.-6      	; 0x1a2c <rf_tx_tdma_packet+0x16e>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	fc 01       	movw	r30, r24
    1a38:	ee 54       	subi	r30, 0x4E	; 78
    1a3a:	f5 4f       	sbci	r31, 0xF5	; 245
    1a3c:	26 81       	ldd	r18, Z+6	; 0x06
    1a3e:	2e bd       	out	0x2e, r18	; 46
    1a40:	0d b4       	in	r0, 0x2d	; 45
    1a42:	07 fe       	sbrs	r0, 7
    1a44:	fd cf       	rjmp	.-6      	; 0x1a40 <rf_tx_tdma_packet+0x182>
    1a46:	01 96       	adiw	r24, 0x01	; 1
    1a48:	82 30       	cpi	r24, 0x02	; 2
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	a1 f7       	brne	.-24     	; 0x1a36 <rf_tx_tdma_packet+0x178>
    1a4e:	40 9a       	sbi	0x08, 0	; 8

    nrk_high_speed_timer_wait(slot_start_time,tx_guard_time);
    1a50:	c7 01       	movw	r24, r14
    1a52:	b5 01       	movw	r22, r10
    1a54:	0e 94 ed 23 	call	0x47da	; 0x47da <nrk_high_speed_timer_wait>
    
if (pRTI->cca == TRUE)
    1a58:	d8 01       	movw	r26, r16
    1a5a:	15 96       	adiw	r26, 0x05	; 5
    1a5c:	8c 91       	ld	r24, X
    1a5e:	15 97       	sbiw	r26, 0x05	; 5
    1a60:	88 23       	and	r24, r24
    1a62:	81 f1       	breq	.+96     	; 0x1ac4 <rf_tx_tdma_packet+0x206>
    {
    uint8_t cnt;
      if (!rfSettings.receiveOn)
    1a64:	80 91 ba 0a 	lds	r24, 0x0ABA
    1a68:	88 23       	and	r24, r24
    1a6a:	39 f4       	brne	.+14     	; 0x1a7a <rf_tx_tdma_packet+0x1bc>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    1a6c:	40 98       	cbi	0x08, 0	; 8
    1a6e:	83 e0       	ldi	r24, 0x03	; 3
    1a70:	8e bd       	out	0x2e, r24	; 46
    1a72:	0d b4       	in	r0, 0x2d	; 45
    1a74:	07 fe       	sbrs	r0, 7
    1a76:	fd cf       	rjmp	.-6      	; 0x1a72 <rf_tx_tdma_packet+0x1b4>
    1a78:	40 9a       	sbi	0x08, 0	; 8
    1a7a:	20 e0       	ldi	r18, 0x00	; 0

      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    1a7c:	65 e0       	ldi	r22, 0x05	; 5
    1a7e:	e6 2e       	mov	r14, r22
    1a80:	40 98       	cbi	0x08, 0	; 8
    1a82:	ee bc       	out	0x2e, r14	; 46
    1a84:	0d b4       	in	r0, 0x2d	; 45
    1a86:	07 fe       	sbrs	r0, 7
    1a88:	fd cf       	rjmp	.-6      	; 0x1a84 <rf_tx_tdma_packet+0x1c6>
    1a8a:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    1a8c:	40 98       	cbi	0x08, 0	; 8
    1a8e:	1e bc       	out	0x2e, r1	; 46
    1a90:	0d b4       	in	r0, 0x2d	; 45
    1a92:	07 fe       	sbrs	r0, 7
    1a94:	fd cf       	rjmp	.-6      	; 0x1a90 <rf_tx_tdma_packet+0x1d2>
    1a96:	ae b4       	in	r10, 0x2e	; 46
    1a98:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    1a9a:	2f 5f       	subi	r18, 0xFF	; 255
	  if (cnt > 100)
    1a9c:	25 36       	cpi	r18, 0x65	; 101
    1a9e:	49 f4       	brne	.+18     	; 0x1ab2 <rf_tx_tdma_packet+0x1f4>
	    {
	      ENABLE_GLOBAL_INT ();
    1aa0:	78 94       	sei
		nrk_sem_post(radio_sem);
    1aa2:	80 91 ad 0a 	lds	r24, 0x0AAD
    1aa6:	90 91 ae 0a 	lds	r25, 0x0AAE
    1aaa:	0e 94 66 19 	call	0x32cc	; 0x32cc <nrk_sem_post>
    1aae:	80 e0       	ldi	r24, 0x00	; 0
		//printf("transmission fail.\n\r");
	      return FALSE;
    1ab0:	78 c0       	rjmp	.+240    	; 0x1ba2 <rf_tx_tdma_packet+0x2e4>
	    }
	  halWait (100);
    1ab2:	84 e6       	ldi	r24, 0x64	; 100
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	2d 83       	std	Y+5, r18	; 0x05
    1ab8:	0e 94 1b 14 	call	0x2836	; 0x2836 <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    1abc:	2d 81       	ldd	r18, Y+5	; 0x05
    1abe:	a3 fe       	sbrs	r10, 3
    1ac0:	df cf       	rjmp	.-66     	; 0x1a80 <rf_tx_tdma_packet+0x1c2>
    1ac2:	07 c0       	rjmp	.+14     	; 0x1ad2 <rf_tx_tdma_packet+0x214>
	//printf("In basic_rf.c: cnt is %d\n\r", cnt);
    }
  else
    FASTSPI_STROBE (CC2420_STXON);
    1ac4:	40 98       	cbi	0x08, 0	; 8
    1ac6:	84 e0       	ldi	r24, 0x04	; 4
    1ac8:	8e bd       	out	0x2e, r24	; 46
    1aca:	0d b4       	in	r0, 0x2d	; 45
    1acc:	07 fe       	sbrs	r0, 7
    1ace:	fd cf       	rjmp	.-6      	; 0x1aca <rf_tx_tdma_packet+0x20c>
    1ad0:	40 9a       	sbi	0x08, 0	; 8
	 //nrk_gpio_set(DEBUG_0);

    // get the high speed timer value
nrk_gpio_set(NRK_DEBUG_0);
    1ad2:	80 91 eb 02 	lds	r24, 0x02EB
    1ad6:	0e 94 18 10 	call	0x2030	; 0x2030 <nrk_gpio_set>
    *tx_start_time = (volatile)TCNT1;
    1ada:	80 91 84 00 	lds	r24, 0x0084
    1ade:	90 91 85 00 	lds	r25, 0x0085
    1ae2:	f6 01       	movw	r30, r12
    1ae4:	91 83       	std	Z+1, r25	; 0x01
    1ae6:	80 83       	st	Z, r24
    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    1ae8:	40 98       	cbi	0x08, 0	; 8
    1aea:	8e e3       	ldi	r24, 0x3E	; 62
    1aec:	8e bd       	out	0x2e, r24	; 46
    1aee:	0d b4       	in	r0, 0x2d	; 45
    1af0:	07 fe       	sbrs	r0, 7
    1af2:	fd cf       	rjmp	.-6      	; 0x1aee <rf_tx_tdma_packet+0x230>
    1af4:	d8 01       	movw	r26, r16
    1af6:	12 96       	adiw	r26, 0x02	; 2
    1af8:	4c 91       	ld	r20, X
    1afa:	12 97       	sbiw	r26, 0x02	; 2
    1afc:	55 27       	eor	r21, r21
    1afe:	47 fd       	sbrc	r20, 7
    1b00:	50 95       	com	r21
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	0d c0       	rjmp	.+26     	; 0x1b20 <rf_tx_tdma_packet+0x262>
    1b06:	d8 01       	movw	r26, r16
    1b08:	13 96       	adiw	r26, 0x03	; 3
    1b0a:	ed 91       	ld	r30, X+
    1b0c:	fc 91       	ld	r31, X
    1b0e:	14 97       	sbiw	r26, 0x04	; 4
    1b10:	e2 0f       	add	r30, r18
    1b12:	f3 1f       	adc	r31, r19
    1b14:	90 81       	ld	r25, Z
    1b16:	9e bd       	out	0x2e, r25	; 46
    1b18:	0d b4       	in	r0, 0x2d	; 45
    1b1a:	07 fe       	sbrs	r0, 7
    1b1c:	fd cf       	rjmp	.-6      	; 0x1b18 <rf_tx_tdma_packet+0x25a>
    1b1e:	8f 5f       	subi	r24, 0xFF	; 255
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	24 17       	cp	r18, r20
    1b26:	35 07       	cpc	r19, r21
    1b28:	74 f3       	brlt	.-36     	; 0x1b06 <rf_tx_tdma_packet+0x248>
    1b2a:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    1b2c:	40 98       	cbi	0x08, 0	; 8
    1b2e:	8e e3       	ldi	r24, 0x3E	; 62
    1b30:	8e bd       	out	0x2e, r24	; 46
    1b32:	0d b4       	in	r0, 0x2d	; 45
    1b34:	07 fe       	sbrs	r0, 7
    1b36:	fd cf       	rjmp	.-6      	; 0x1b32 <rf_tx_tdma_packet+0x274>
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	8e bd       	out	0x2e, r24	; 46
    1b3c:	0d b4       	in	r0, 0x2d	; 45
    1b3e:	07 fe       	sbrs	r0, 7
    1b40:	fd cf       	rjmp	.-6      	; 0x1b3c <rf_tx_tdma_packet+0x27e>
    1b42:	40 9a       	sbi	0x08, 0	; 8

    //nrk_spin_wait_us(200);
//  FASTSPI_STROBE(CC2420_STXON);
   // Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
	while (!SFD_IS_1);
    1b44:	4e 9b       	sbis	0x09, 6	; 9
    1b46:	fe cf       	rjmp	.-4      	; 0x1b44 <rf_tx_tdma_packet+0x286>
		success = rfSettings.ackReceived;
    }*/

    
	// Turn off the receiver if it should not continue to be enabled
    DISABLE_GLOBAL_INT();
    1b48:	f8 94       	cli
    // XXX hack, temp out
    //if (!rfSettings.receiveOn) { while (SFD_IS_1); /*FASTSPI_STROBE(CC2420_SRFOFF);*/ }
    // while (SFD_IS_1); 
    while (SFD_IS_1); // wait for packet to finish
    1b4a:	4e 99       	sbic	0x09, 6	; 9
    1b4c:	fe cf       	rjmp	.-4      	; 0x1b4a <rf_tx_tdma_packet+0x28c>
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1b4e:	40 98       	cbi	0x08, 0	; 8
    1b50:	88 e0       	ldi	r24, 0x08	; 8
    1b52:	8e bd       	out	0x2e, r24	; 46
    1b54:	0d b4       	in	r0, 0x2d	; 45
    1b56:	07 fe       	sbrs	r0, 7
    1b58:	fd cf       	rjmp	.-6      	; 0x1b54 <rf_tx_tdma_packet+0x296>
    1b5a:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1b5c:	40 98       	cbi	0x08, 0	; 8
    1b5e:	88 e0       	ldi	r24, 0x08	; 8
    1b60:	8e bd       	out	0x2e, r24	; 46
    1b62:	0d b4       	in	r0, 0x2d	; 45
    1b64:	07 fe       	sbrs	r0, 7
    1b66:	fd cf       	rjmp	.-6      	; 0x1b62 <rf_tx_tdma_packet+0x2a4>
    1b68:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    1b6a:	40 98       	cbi	0x08, 0	; 8
    1b6c:	89 e0       	ldi	r24, 0x09	; 9
    1b6e:	8e bd       	out	0x2e, r24	; 46
    1b70:	0d b4       	in	r0, 0x2d	; 45
    1b72:	07 fe       	sbrs	r0, 7
    1b74:	fd cf       	rjmp	.-6      	; 0x1b70 <rf_tx_tdma_packet+0x2b2>
    1b76:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    1b78:	40 98       	cbi	0x08, 0	; 8
    1b7a:	89 e0       	ldi	r24, 0x09	; 9
    1b7c:	8e bd       	out	0x2e, r24	; 46
    1b7e:	0d b4       	in	r0, 0x2d	; 45
    1b80:	07 fe       	sbrs	r0, 7
    1b82:	fd cf       	rjmp	.-6      	; 0x1b7e <rf_tx_tdma_packet+0x2c0>
    1b84:	40 9a       	sbi	0x08, 0	; 8

FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    1b86:	40 98       	cbi	0x08, 0	; 8
    1b88:	86 e0       	ldi	r24, 0x06	; 6
    1b8a:	8e bd       	out	0x2e, r24	; 46
    1b8c:	0d b4       	in	r0, 0x2d	; 45
    1b8e:	07 fe       	sbrs	r0, 7
    1b90:	fd cf       	rjmp	.-6      	; 0x1b8c <rf_tx_tdma_packet+0x2ce>
    1b92:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    1b94:	78 94       	sei
    

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    1b96:	80 91 b4 0a 	lds	r24, 0x0AB4
    1b9a:	8f 5f       	subi	r24, 0xFF	; 255
    1b9c:	80 93 b4 0a 	sts	0x0AB4, r24
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
nrk_sem_post(radio_sem);
#endif
	//printf("sent success? %d.\n\r",success);
    return success;

}
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	ff 90       	pop	r15
    1bb6:	ef 90       	pop	r14
    1bb8:	df 90       	pop	r13
    1bba:	cf 90       	pop	r12
    1bbc:	bf 90       	pop	r11
    1bbe:	af 90       	pop	r10
    1bc0:	08 95       	ret

00001bc2 <rf_addr_decode_set_my_mac>:
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <rf_addr_decode_set_my_mac+0x6>
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
uint8_t n;
    rfSettings.myAddr = my_mac;
    1bd0:	90 93 b9 0a 	sts	0x0AB9, r25
    1bd4:	80 93 b8 0a 	sts	0x0AB8, r24
    nrk_spin_wait_us(500);
    1bd8:	84 ef       	ldi	r24, 0xF4	; 244
    1bda:	91 e0       	ldi	r25, 0x01	; 1
    1bdc:	0e 94 a2 23 	call	0x4744	; 0x4744 <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    1be0:	40 98       	cbi	0x08, 0	; 8
    1be2:	8a ee       	ldi	r24, 0xEA	; 234
    1be4:	8e bd       	out	0x2e, r24	; 46
    1be6:	0d b4       	in	r0, 0x2d	; 45
    1be8:	07 fe       	sbrs	r0, 7
    1bea:	fd cf       	rjmp	.-6      	; 0x1be6 <rf_addr_decode_set_my_mac+0x24>
    1bec:	80 e8       	ldi	r24, 0x80	; 128
    1bee:	8e bd       	out	0x2e, r24	; 46
    1bf0:	0d b4       	in	r0, 0x2d	; 45
    1bf2:	07 fe       	sbrs	r0, 7
    1bf4:	fd cf       	rjmp	.-6      	; 0x1bf0 <rf_addr_decode_set_my_mac+0x2e>
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	31 96       	adiw	r30, 0x01	; 1
    mdmctrl0 &= (~0x0010);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	03 96       	adiw	r24, 0x03	; 3
{
uint8_t n;
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    1bfe:	20 81       	ld	r18, Z
    1c00:	2e bd       	out	0x2e, r18	; 46
    1c02:	0d b4       	in	r0, 0x2d	; 45
    1c04:	07 fe       	sbrs	r0, 7
    1c06:	fd cf       	rjmp	.-6      	; 0x1c02 <rf_addr_decode_set_my_mac+0x40>
    1c08:	31 96       	adiw	r30, 0x01	; 1
    1c0a:	e8 17       	cp	r30, r24
    1c0c:	f9 07       	cpc	r31, r25
    1c0e:	b9 f7       	brne	.-18     	; 0x1bfe <rf_addr_decode_set_my_mac+0x3c>
    1c10:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    1c12:	84 ef       	ldi	r24, 0xF4	; 244
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	0e 94 a2 23 	call	0x4744	; 0x4744 <nrk_spin_wait_us>
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <rf_security_set_key>:
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    1c24:	8f 92       	push	r8
    1c26:	9f 92       	push	r9
    1c28:	af 92       	push	r10
    1c2a:	bf 92       	push	r11
    1c2c:	cf 92       	push	r12
    1c2e:	df 92       	push	r13
    1c30:	ef 92       	push	r14
    1c32:	ff 92       	push	r15
    1c34:	0f 93       	push	r16
    1c36:	1f 93       	push	r17
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <rf_security_set_key+0x1a>
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <rf_security_set_key+0x1c>
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	e8 2e       	mov	r14, r24
    1c46:	09 2f       	mov	r16, r25
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    1c48:	84 e6       	ldi	r24, 0x64	; 100
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 a2 23 	call	0x4744	; 0x4744 <nrk_spin_wait_us>
    1c50:	ce 2c       	mov	r12, r14
    1c52:	d0 2e       	mov	r13, r16
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	31 e0       	ldi	r19, 0x01	; 1
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    1c58:	8e 01       	movw	r16, r28
    1c5a:	0f 5f       	subi	r16, 0xFF	; 255
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    1c5e:	a3 e0       	ldi	r26, 0x03	; 3
    1c60:	aa 2e       	mov	r10, r26
    1c62:	b1 2c       	mov	r11, r1
    1c64:	ac 0e       	add	r10, r28
    1c66:	bd 1e       	adc	r11, r29

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    1c68:	f6 01       	movw	r30, r12
    1c6a:	90 80       	ld	r9, Z
    1c6c:	88 24       	eor	r8, r8
    1c6e:	81 81       	ldd	r24, Z+1	; 0x01
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	88 29       	or	r24, r8
    1c74:	99 29       	or	r25, r9
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
   	nrk_spin_wait_us(100); 
    1c7a:	84 e6       	ldi	r24, 0x64	; 100
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	2b 83       	std	Y+3, r18	; 0x03
    1c80:	3c 83       	std	Y+4, r19	; 0x04
    1c82:	0e 94 a2 23 	call	0x4744	; 0x4744 <nrk_spin_wait_us>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    1c86:	40 98       	cbi	0x08, 0	; 8
    1c88:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8c:	82 2f       	mov	r24, r18
    1c8e:	80 68       	ori	r24, 0x80	; 128
    1c90:	8e bd       	out	0x2e, r24	; 46
    1c92:	0d b4       	in	r0, 0x2d	; 45
    1c94:	07 fe       	sbrs	r0, 7
    1c96:	fd cf       	rjmp	.-6      	; 0x1c92 <rf_security_set_key+0x6e>
    1c98:	c9 01       	movw	r24, r18
    1c9a:	95 95       	asr	r25
    1c9c:	87 95       	ror	r24
    1c9e:	80 7c       	andi	r24, 0xC0	; 192
    1ca0:	8e bd       	out	0x2e, r24	; 46
    1ca2:	0d b4       	in	r0, 0x2d	; 45
    1ca4:	07 fe       	sbrs	r0, 7
    1ca6:	fd cf       	rjmp	.-6      	; 0x1ca2 <rf_security_set_key+0x7e>
    1ca8:	78 01       	movw	r14, r16
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    1caa:	f8 01       	movw	r30, r16
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    1cac:	80 81       	ld	r24, Z
    1cae:	8e bd       	out	0x2e, r24	; 46
    1cb0:	0d b4       	in	r0, 0x2d	; 45
    1cb2:	07 fe       	sbrs	r0, 7
    1cb4:	fd cf       	rjmp	.-6      	; 0x1cb0 <rf_security_set_key+0x8c>
    1cb6:	31 96       	adiw	r30, 0x01	; 1
    1cb8:	ea 15       	cp	r30, r10
    1cba:	fb 05       	cpc	r31, r11
    1cbc:	b9 f7       	brne	.-18     	; 0x1cac <rf_security_set_key+0x88>
    1cbe:	40 9a       	sbi	0x08, 0	; 8
    1cc0:	08 94       	sec
    1cc2:	c1 1c       	adc	r12, r1
    1cc4:	d1 1c       	adc	r13, r1
    1cc6:	2e 5f       	subi	r18, 0xFE	; 254
    1cc8:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    1cca:	f1 e0       	ldi	r31, 0x01	; 1
    1ccc:	20 31       	cpi	r18, 0x10	; 16
    1cce:	3f 07       	cpc	r19, r31
    1cd0:	59 f6       	brne	.-106    	; 0x1c68 <rf_security_set_key+0x44>
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
    1cd2:	84 e6       	ldi	r24, 0x64	; 100
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 a2 23 	call	0x4744	; 0x4744 <nrk_spin_wait_us>
    1cda:	20 e4       	ldi	r18, 0x40	; 64
    1cdc:	31 e0       	ldi	r19, 0x01	; 1
    1cde:	80 e1       	ldi	r24, 0x10	; 16
    1ce0:	91 e0       	ldi	r25, 0x01	; 1
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    1ce2:	1a 82       	std	Y+2, r1	; 0x02
    1ce4:	19 82       	std	Y+1, r1	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    1ce6:	40 98       	cbi	0x08, 0	; 8
    1ce8:	42 2f       	mov	r20, r18
    1cea:	40 68       	ori	r20, 0x80	; 128
    1cec:	4e bd       	out	0x2e, r20	; 46
    1cee:	0d b4       	in	r0, 0x2d	; 45
    1cf0:	07 fe       	sbrs	r0, 7
    1cf2:	fd cf       	rjmp	.-6      	; 0x1cee <rf_security_set_key+0xca>
    1cf4:	a9 01       	movw	r20, r18
    1cf6:	55 95       	asr	r21
    1cf8:	47 95       	ror	r20
    1cfa:	40 7c       	andi	r20, 0xC0	; 192
    1cfc:	4e bd       	out	0x2e, r20	; 46
    1cfe:	0d b4       	in	r0, 0x2d	; 45
    1d00:	07 fe       	sbrs	r0, 7
    1d02:	fd cf       	rjmp	.-6      	; 0x1cfe <rf_security_set_key+0xda>
    1d04:	f8 01       	movw	r30, r16
    1d06:	40 81       	ld	r20, Z
    1d08:	4e bd       	out	0x2e, r20	; 46
    1d0a:	0d b4       	in	r0, 0x2d	; 45
    1d0c:	07 fe       	sbrs	r0, 7
    1d0e:	fd cf       	rjmp	.-6      	; 0x1d0a <rf_security_set_key+0xe6>
    1d10:	31 96       	adiw	r30, 0x01	; 1
    1d12:	ea 15       	cp	r30, r10
    1d14:	fb 05       	cpc	r31, r11
    1d16:	b9 f7       	brne	.-18     	; 0x1d06 <rf_security_set_key+0xe2>
    1d18:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    1d1a:	40 98       	cbi	0x08, 0	; 8
    1d1c:	48 2f       	mov	r20, r24
    1d1e:	40 68       	ori	r20, 0x80	; 128
    1d20:	4e bd       	out	0x2e, r20	; 46
    1d22:	0d b4       	in	r0, 0x2d	; 45
    1d24:	07 fe       	sbrs	r0, 7
    1d26:	fd cf       	rjmp	.-6      	; 0x1d22 <rf_security_set_key+0xfe>
    1d28:	ac 01       	movw	r20, r24
    1d2a:	55 95       	asr	r21
    1d2c:	47 95       	ror	r20
    1d2e:	40 7c       	andi	r20, 0xC0	; 192
    1d30:	4e bd       	out	0x2e, r20	; 46
    1d32:	0d b4       	in	r0, 0x2d	; 45
    1d34:	07 fe       	sbrs	r0, 7
    1d36:	fd cf       	rjmp	.-6      	; 0x1d32 <rf_security_set_key+0x10e>
    1d38:	f8 01       	movw	r30, r16
    1d3a:	40 81       	ld	r20, Z
    1d3c:	4e bd       	out	0x2e, r20	; 46
    1d3e:	0d b4       	in	r0, 0x2d	; 45
    1d40:	07 fe       	sbrs	r0, 7
    1d42:	fd cf       	rjmp	.-6      	; 0x1d3e <rf_security_set_key+0x11a>
    1d44:	31 96       	adiw	r30, 0x01	; 1
    1d46:	ea 15       	cp	r30, r10
    1d48:	fb 05       	cpc	r31, r11
    1d4a:	b9 f7       	brne	.-18     	; 0x1d3a <rf_security_set_key+0x116>
    1d4c:	40 9a       	sbi	0x08, 0	; 8
    1d4e:	02 96       	adiw	r24, 0x02	; 2
    1d50:	2e 5f       	subi	r18, 0xFE	; 254
    1d52:	3f 4f       	sbci	r19, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
    1d54:	41 e0       	ldi	r20, 0x01	; 1
    1d56:	8e 31       	cpi	r24, 0x1E	; 30
    1d58:	94 07       	cpc	r25, r20
    1d5a:	19 f6       	brne	.-122    	; 0x1ce2 <rf_security_set_key+0xbe>
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    1d64:	40 98       	cbi	0x08, 0	; 8
    1d66:	8e ec       	ldi	r24, 0xCE	; 206
    1d68:	8e bd       	out	0x2e, r24	; 46
    1d6a:	0d b4       	in	r0, 0x2d	; 45
    1d6c:	07 fe       	sbrs	r0, 7
    1d6e:	fd cf       	rjmp	.-6      	; 0x1d6a <rf_security_set_key+0x146>
    1d70:	80 e8       	ldi	r24, 0x80	; 128
    1d72:	8e bd       	out	0x2e, r24	; 46
    1d74:	0d b4       	in	r0, 0x2d	; 45
    1d76:	07 fe       	sbrs	r0, 7
    1d78:	fd cf       	rjmp	.-6      	; 0x1d74 <rf_security_set_key+0x150>
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    1d7a:	c8 01       	movw	r24, r16
    1d7c:	02 96       	adiw	r24, 0x02	; 2
    1d7e:	f8 01       	movw	r30, r16
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    1d80:	20 81       	ld	r18, Z
    1d82:	2e bd       	out	0x2e, r18	; 46
    1d84:	0d b4       	in	r0, 0x2d	; 45
    1d86:	07 fe       	sbrs	r0, 7
    1d88:	fd cf       	rjmp	.-6      	; 0x1d84 <rf_security_set_key+0x160>
    1d8a:	31 96       	adiw	r30, 0x01	; 1
    1d8c:	e8 17       	cp	r30, r24
    1d8e:	f9 07       	cpc	r31, r25
    1d90:	b9 f7       	brne	.-18     	; 0x1d80 <rf_security_set_key+0x15c>
    1d92:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    1d94:	40 98       	cbi	0x08, 0	; 8
    1d96:	8e e9       	ldi	r24, 0x9E	; 158
    1d98:	8e bd       	out	0x2e, r24	; 46
    1d9a:	0d b4       	in	r0, 0x2d	; 45
    1d9c:	07 fe       	sbrs	r0, 7
    1d9e:	fd cf       	rjmp	.-6      	; 0x1d9a <rf_security_set_key+0x176>
    1da0:	80 e8       	ldi	r24, 0x80	; 128
    1da2:	8e bd       	out	0x2e, r24	; 46
    1da4:	0d b4       	in	r0, 0x2d	; 45
    1da6:	07 fe       	sbrs	r0, 7
    1da8:	fd cf       	rjmp	.-6      	; 0x1da4 <rf_security_set_key+0x180>
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    1daa:	0e 5f       	subi	r16, 0xFE	; 254
    1dac:	1f 4f       	sbci	r17, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    1dae:	f7 01       	movw	r30, r14
    1db0:	80 81       	ld	r24, Z
    1db2:	8e bd       	out	0x2e, r24	; 46
    1db4:	0d b4       	in	r0, 0x2d	; 45
    1db6:	07 fe       	sbrs	r0, 7
    1db8:	fd cf       	rjmp	.-6      	; 0x1db4 <rf_security_set_key+0x190>
    1dba:	08 94       	sec
    1dbc:	e1 1c       	adc	r14, r1
    1dbe:	f1 1c       	adc	r15, r1
    1dc0:	e0 16       	cp	r14, r16
    1dc2:	f1 06       	cpc	r15, r17
    1dc4:	a1 f7       	brne	.-24     	; 0x1dae <rf_security_set_key+0x18a>
    1dc6:	40 9a       	sbi	0x08, 0	; 8
}
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	ff 90       	pop	r15
    1dda:	ef 90       	pop	r14
    1ddc:	df 90       	pop	r13
    1dde:	cf 90       	pop	r12
    1de0:	bf 90       	pop	r11
    1de2:	af 90       	pop	r10
    1de4:	9f 90       	pop	r9
    1de6:	8f 90       	pop	r8
    1de8:	08 95       	ret

00001dea <rf_set_rx>:
}



void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	ec 01       	movw	r28, r24
    1df0:	86 2f       	mov	r24, r22

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1df2:	40 98       	cbi	0x08, 0	; 8
    1df4:	98 e0       	ldi	r25, 0x08	; 8
    1df6:	9e bd       	out	0x2e, r25	; 46
    1df8:	0d b4       	in	r0, 0x2d	; 45
    1dfa:	07 fe       	sbrs	r0, 7
    1dfc:	fd cf       	rjmp	.-6      	; 0x1df8 <rf_set_rx+0xe>
    1dfe:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1e00:	40 98       	cbi	0x08, 0	; 8
    1e02:	98 e0       	ldi	r25, 0x08	; 8
    1e04:	9e bd       	out	0x2e, r25	; 46
    1e06:	0d b4       	in	r0, 0x2d	; 45
    1e08:	07 fe       	sbrs	r0, 7
    1e0a:	fd cf       	rjmp	.-6      	; 0x1e06 <rf_set_rx+0x1c>
    1e0c:	40 9a       	sbi	0x08, 0	; 8
    halRfSetChannel(channel);
    1e0e:	0e 94 b1 06 	call	0xd62	; 0xd62 <halRfSetChannel>
    rfSettings.pRxInfo = pRRI;
    1e12:	d0 93 b3 0a 	sts	0x0AB3, r29
    1e16:	c0 93 b2 0a 	sts	0x0AB2, r28

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	08 95       	ret

00001e20 <rf_set_channel>:
void rf_set_channel( uint8_t channel )
{
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    halRfSetChannel(channel);
    1e20:	0e 94 b1 06 	call	0xd62	; 0xd62 <halRfSetChannel>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
    1e24:	08 95       	ret

00001e26 <rf_init>:
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    1e26:	cf 92       	push	r12
    1e28:	df 92       	push	r13
    1e2a:	ff 92       	push	r15
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <rf_init+0x10>
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	8c 01       	movw	r16, r24
    1e3c:	f6 2e       	mov	r15, r22
    1e3e:	5a 83       	std	Y+2, r21	; 0x02
    1e40:	49 83       	std	Y+1, r20	; 0x01
    1e42:	69 01       	movw	r12, r18
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
  }
#endif

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    SET_VREG_ACTIVE();
    1e44:	15 9a       	sbi	0x02, 5	; 2
    halWait(1000);
    1e46:	88 ee       	ldi	r24, 0xE8	; 232
    1e48:	93 e0       	ldi	r25, 0x03	; 3
    1e4a:	0e 94 1b 14 	call	0x2836	; 0x2836 <halWait>
    SET_RESET_ACTIVE();
    1e4e:	16 98       	cbi	0x02, 6	; 2
    halWait(1);
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 1b 14 	call	0x2836	; 0x2836 <halWait>
    SET_RESET_INACTIVE();
    1e58:	16 9a       	sbi	0x02, 6	; 2
    halWait(100);
    1e5a:	84 e6       	ldi	r24, 0x64	; 100
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	0e 94 1b 14 	call	0x2836	; 0x2836 <halWait>
    // Initialize the FIFOP external interrupt
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();
    1e62:	f8 94       	cli

    // Register modifications
    FASTSPI_STROBE(CC2420_SXOSCON);
    1e64:	40 98       	cbi	0x08, 0	; 8
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	8e bd       	out	0x2e, r24	; 46
    1e6a:	0d b4       	in	r0, 0x2d	; 45
    1e6c:	07 fe       	sbrs	r0, 7
    1e6e:	fd cf       	rjmp	.-6      	; 0x1e6a <rf_init+0x44>
    1e70:	40 9a       	sbi	0x08, 0	; 8
    mdmctrl0=0x02E2;
    1e72:	82 ee       	ldi	r24, 0xE2	; 226
    1e74:	92 e0       	ldi	r25, 0x02	; 2
    1e76:	90 93 b1 0a 	sts	0x0AB1, r25
    1e7a:	80 93 b0 0a 	sts	0x0AB0, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    1e7e:	40 98       	cbi	0x08, 0	; 8
    1e80:	81 e1       	ldi	r24, 0x11	; 17
    1e82:	8e bd       	out	0x2e, r24	; 46
    1e84:	0d b4       	in	r0, 0x2d	; 45
    1e86:	07 fe       	sbrs	r0, 7
    1e88:	fd cf       	rjmp	.-6      	; 0x1e84 <rf_init+0x5e>
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	8e bd       	out	0x2e, r24	; 46
    1e8e:	0d b4       	in	r0, 0x2d	; 45
    1e90:	07 fe       	sbrs	r0, 7
    1e92:	fd cf       	rjmp	.-6      	; 0x1e8e <rf_init+0x68>
    1e94:	82 ee       	ldi	r24, 0xE2	; 226
    1e96:	8e bd       	out	0x2e, r24	; 46
    1e98:	0d b4       	in	r0, 0x2d	; 45
    1e9a:	07 fe       	sbrs	r0, 7
    1e9c:	fd cf       	rjmp	.-6      	; 0x1e98 <rf_init+0x72>
    1e9e:	40 9a       	sbi	0x08, 0	; 8
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    1ea0:	40 98       	cbi	0x08, 0	; 8
    1ea2:	82 e1       	ldi	r24, 0x12	; 18
    1ea4:	8e bd       	out	0x2e, r24	; 46
    1ea6:	0d b4       	in	r0, 0x2d	; 45
    1ea8:	07 fe       	sbrs	r0, 7
    1eaa:	fd cf       	rjmp	.-6      	; 0x1ea6 <rf_init+0x80>
    1eac:	85 e0       	ldi	r24, 0x05	; 5
    1eae:	8e bd       	out	0x2e, r24	; 46
    1eb0:	0d b4       	in	r0, 0x2d	; 45
    1eb2:	07 fe       	sbrs	r0, 7
    1eb4:	fd cf       	rjmp	.-6      	; 0x1eb0 <rf_init+0x8a>
    1eb6:	1e bc       	out	0x2e, r1	; 46
    1eb8:	0d b4       	in	r0, 0x2d	; 45
    1eba:	07 fe       	sbrs	r0, 7
    1ebc:	fd cf       	rjmp	.-6      	; 0x1eb8 <rf_init+0x92>
    1ebe:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    1ec0:	40 98       	cbi	0x08, 0	; 8
    1ec2:	8c e1       	ldi	r24, 0x1C	; 28
    1ec4:	8e bd       	out	0x2e, r24	; 46
    1ec6:	0d b4       	in	r0, 0x2d	; 45
    1ec8:	07 fe       	sbrs	r0, 7
    1eca:	fd cf       	rjmp	.-6      	; 0x1ec6 <rf_init+0xa0>
    1ecc:	1e bc       	out	0x2e, r1	; 46
    1ece:	0d b4       	in	r0, 0x2d	; 45
    1ed0:	07 fe       	sbrs	r0, 7
    1ed2:	fd cf       	rjmp	.-6      	; 0x1ece <rf_init+0xa8>
    1ed4:	8f e7       	ldi	r24, 0x7F	; 127
    1ed6:	8e bd       	out	0x2e, r24	; 46
    1ed8:	0d b4       	in	r0, 0x2d	; 45
    1eda:	07 fe       	sbrs	r0, 7
    1edc:	fd cf       	rjmp	.-6      	; 0x1ed8 <rf_init+0xb2>
    1ede:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    1ee0:	40 98       	cbi	0x08, 0	; 8
    1ee2:	89 e1       	ldi	r24, 0x19	; 25
    1ee4:	8e bd       	out	0x2e, r24	; 46
    1ee6:	0d b4       	in	r0, 0x2d	; 45
    1ee8:	07 fe       	sbrs	r0, 7
    1eea:	fd cf       	rjmp	.-6      	; 0x1ee6 <rf_init+0xc0>
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	8e bd       	out	0x2e, r24	; 46
    1ef0:	0d b4       	in	r0, 0x2d	; 45
    1ef2:	07 fe       	sbrs	r0, 7
    1ef4:	fd cf       	rjmp	.-6      	; 0x1ef0 <rf_init+0xca>
    1ef6:	84 ec       	ldi	r24, 0xC4	; 196
    1ef8:	8e bd       	out	0x2e, r24	; 46
    1efa:	0d b4       	in	r0, 0x2d	; 45
    1efc:	07 fe       	sbrs	r0, 7
    1efe:	fd cf       	rjmp	.-6      	; 0x1efa <rf_init+0xd4>
    1f00:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
    1f02:	40 98       	cbi	0x08, 0	; 8
    1f04:	87 e1       	ldi	r24, 0x17	; 23
    1f06:	8e bd       	out	0x2e, r24	; 46
    1f08:	0d b4       	in	r0, 0x2d	; 45
    1f0a:	07 fe       	sbrs	r0, 7
    1f0c:	fd cf       	rjmp	.-6      	; 0x1f08 <rf_init+0xe2>
    1f0e:	8a e1       	ldi	r24, 0x1A	; 26
    1f10:	8e bd       	out	0x2e, r24	; 46
    1f12:	0d b4       	in	r0, 0x2d	; 45
    1f14:	07 fe       	sbrs	r0, 7
    1f16:	fd cf       	rjmp	.-6      	; 0x1f12 <rf_init+0xec>
    1f18:	86 e5       	ldi	r24, 0x56	; 86
    1f1a:	8e bd       	out	0x2e, r24	; 46
    1f1c:	0d b4       	in	r0, 0x2d	; 45
    1f1e:	07 fe       	sbrs	r0, 7
    1f20:	fd cf       	rjmp	.-6      	; 0x1f1c <rf_init+0xf6>
    1f22:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    1f24:	84 ef       	ldi	r24, 0xF4	; 244
    1f26:	91 e0       	ldi	r25, 0x01	; 1
    1f28:	0e 94 a2 23 	call	0x4744	; 0x4744 <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    1f2c:	40 98       	cbi	0x08, 0	; 8
    1f2e:	88 ee       	ldi	r24, 0xE8	; 232
    1f30:	8e bd       	out	0x2e, r24	; 46
    1f32:	0d b4       	in	r0, 0x2d	; 45
    1f34:	07 fe       	sbrs	r0, 7
    1f36:	fd cf       	rjmp	.-6      	; 0x1f32 <rf_init+0x10c>
    1f38:	80 e8       	ldi	r24, 0x80	; 128
    1f3a:	8e bd       	out	0x2e, r24	; 46
    1f3c:	0d b4       	in	r0, 0x2d	; 45
    1f3e:	07 fe       	sbrs	r0, 7
    1f40:	fd cf       	rjmp	.-6      	; 0x1f3c <rf_init+0x116>
    1f42:	fe 01       	movw	r30, r28
    1f44:	31 96       	adiw	r30, 0x01	; 1
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    1f46:	ce 01       	movw	r24, r28
    1f48:	03 96       	adiw	r24, 0x03	; 3
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    1f4a:	20 81       	ld	r18, Z
    1f4c:	2e bd       	out	0x2e, r18	; 46
    1f4e:	0d b4       	in	r0, 0x2d	; 45
    1f50:	07 fe       	sbrs	r0, 7
    1f52:	fd cf       	rjmp	.-6      	; 0x1f4e <rf_init+0x128>
    1f54:	31 96       	adiw	r30, 0x01	; 1
    1f56:	e8 17       	cp	r30, r24
    1f58:	f9 07       	cpc	r31, r25
    1f5a:	b9 f7       	brne	.-18     	; 0x1f4a <rf_init+0x124>
    1f5c:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    1f5e:	84 ef       	ldi	r24, 0xF4	; 244
    1f60:	91 e0       	ldi	r25, 0x01	; 1
    1f62:	0e 94 a2 23 	call	0x4744	; 0x4744 <nrk_spin_wait_us>

  	ENABLE_GLOBAL_INT();
    1f66:	78 94       	sei

    // Set the RF channel
    halRfSetChannel(channel);
    1f68:	8f 2d       	mov	r24, r15
    1f6a:	0e 94 b1 06 	call	0xd62	; 0xd62 <halRfSetChannel>

    // Turn interrupts back on
	ENABLE_GLOBAL_INT();
    1f6e:	78 94       	sei

	// Set the protocol configuration
	rfSettings.pRxInfo = pRRI;
    1f70:	10 93 b3 0a 	sts	0x0AB3, r17
    1f74:	00 93 b2 0a 	sts	0x0AB2, r16
	rfSettings.panId = panId;
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	90 93 b7 0a 	sts	0x0AB7, r25
    1f80:	80 93 b6 0a 	sts	0x0AB6, r24
	rfSettings.myAddr = myAddr;
    1f84:	d0 92 b9 0a 	sts	0x0AB9, r13
    1f88:	c0 92 b8 0a 	sts	0x0AB8, r12
	rfSettings.txSeqNumber = 0;
    1f8c:	10 92 b4 0a 	sts	0x0AB4, r1
        rfSettings.receiveOn = FALSE;
    1f90:	10 92 ba 0a 	sts	0x0ABA, r1

	// Wait for the crystal oscillator to become stable
    halRfWaitForCrystalOscillator();
    1f94:	0e 94 cf 06 	call	0xd9e	; 0xd9e <halRfWaitForCrystalOscillator>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    _nrk_errno_set (2);
  }
#endif

auto_ack_enable=0;
    1f98:	10 92 bd 0a 	sts	0x0ABD, r1
security_enable=0;
    1f9c:	10 92 af 0a 	sts	0x0AAF, r1
last_pkt_encrypted=0;
    1fa0:	10 92 be 0a 	sts	0x0ABE, r1
} // rf_init() 
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	1f 91       	pop	r17
    1fae:	0f 91       	pop	r16
    1fb0:	ff 90       	pop	r15
    1fb2:	df 90       	pop	r13
    1fb4:	cf 90       	pop	r12
    1fb6:	08 95       	ret

00001fb8 <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    1fb8:	8f ef       	ldi	r24, 0xFF	; 255
    1fba:	08 95       	ret

00001fbc <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	31 f4       	brne	.+12     	; 0x1fcc <nrk_uart_data_ready+0x10>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1fc0:	80 91 c8 00 	lds	r24, 0x00C8
    1fc4:	88 1f       	adc	r24, r24
    1fc6:	88 27       	eor	r24, r24
    1fc8:	88 1f       	adc	r24, r24
    1fca:	08 95       	ret
        }
if(uart_num==0)
    1fcc:	88 23       	and	r24, r24
    1fce:	11 f0       	breq	.+4      	; 0x1fd4 <nrk_uart_data_ready+0x18>
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	08 95       	ret
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    1fd4:	80 91 c0 00 	lds	r24, 0x00C0
    1fd8:	88 1f       	adc	r24, r24
    1fda:	88 27       	eor	r24, r24
    1fdc:	88 1f       	adc	r24, r24
        }
return 0;
}
    1fde:	08 95       	ret

00001fe0 <getc1>:

char getc1(void){
        unsigned char tmp;
        UART1_WAIT_AND_RECEIVE(tmp);
    1fe0:	80 91 c8 00 	lds	r24, 0x00C8
    1fe4:	87 ff       	sbrs	r24, 7
    1fe6:	fc cf       	rjmp	.-8      	; 0x1fe0 <getc1>
    1fe8:	80 91 c8 00 	lds	r24, 0x00C8
    1fec:	8f 77       	andi	r24, 0x7F	; 127
    1fee:	80 93 c8 00 	sts	0x00C8, r24
    1ff2:	80 91 ce 00 	lds	r24, 0x00CE
        return tmp;
}
    1ff6:	08 95       	ret

00001ff8 <PORT_INIT>:
NRK_PIN( ADC_INPUT_6, ADC_INPUT_6, NRK_PORTF )
NRK_PIN( ADC_INPUT_7, ADC_INPUT_7, NRK_PORTF )

void PORT_INIT(void) 
{
        MCUCR |= BM(PUD); 
    1ff8:	85 b7       	in	r24, 0x35	; 53
    1ffa:	80 61       	ori	r24, 0x10	; 16
    1ffc:	85 bf       	out	0x35, r24	; 53
        DDRB  = BM(MOSI) | BM(SCK);  
    1ffe:	86 e0       	ldi	r24, 0x06	; 6
    2000:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
    2002:	87 e0       	ldi	r24, 0x07	; 7
    2004:	85 b9       	out	0x05, r24	; 5
        DDRC  = BM(CSN); 
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	87 b9       	out	0x07, r24	; 7
        PORTC = BM(CSN); 
    200a:	88 b9       	out	0x08, r24	; 8
        DDRE  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    200c:	8c e3       	ldi	r24, 0x3C	; 60
    200e:	8d b9       	out	0x0d, r24	; 13
        DDRD  = BM(UART1_TXD) | BM(DEBUG_2) | BM(DEBUG_3); 
    2010:	8b e0       	ldi	r24, 0x0B	; 11
    2012:	8a b9       	out	0x0a, r24	; 10
        PORTE  = BM(UART0_TXD) | BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    2014:	8e e3       	ldi	r24, 0x3E	; 62
    2016:	8e b9       	out	0x0e, r24	; 14
        DDRA  = BM(VREG_EN) | BM(RESET_N) | BM(DEBUG_0) | BM(DEBUG_1); 
    2018:	88 e7       	ldi	r24, 0x78	; 120
    201a:	81 b9       	out	0x01, r24	; 1
        PORTA = BM(RESET_N); 
    201c:	80 e4       	ldi	r24, 0x40	; 64
    201e:	82 b9       	out	0x02, r24	; 2
} 
    2020:	08 95       	ret

00002022 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    2022:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <PORT_INIT>
SPI_INIT();
    2026:	80 e5       	ldi	r24, 0x50	; 80
    2028:	8c bd       	out	0x2c, r24	; 44
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	8d bd       	out	0x2d, r24	; 45
}
    202e:	08 95       	ret

00002030 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2030:	8f 3f       	cpi	r24, 0xFF	; 255
    2032:	09 f4       	brne	.+2      	; 0x2036 <nrk_gpio_set+0x6>
    2034:	71 c0       	rjmp	.+226    	; 0x2118 <nrk_gpio_set+0xe8>
        switch (pin & 0x07) {
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	27 70       	andi	r18, 0x07	; 7
    203c:	30 70       	andi	r19, 0x00	; 0
    203e:	22 30       	cpi	r18, 0x02	; 2
    2040:	31 05       	cpc	r19, r1
    2042:	89 f1       	breq	.+98     	; 0x20a6 <nrk_gpio_set+0x76>
    2044:	23 30       	cpi	r18, 0x03	; 3
    2046:	31 05       	cpc	r19, r1
    2048:	44 f4       	brge	.+16     	; 0x205a <nrk_gpio_set+0x2a>
    204a:	21 15       	cp	r18, r1
    204c:	31 05       	cpc	r19, r1
    204e:	89 f0       	breq	.+34     	; 0x2072 <nrk_gpio_set+0x42>
    2050:	21 30       	cpi	r18, 0x01	; 1
    2052:	31 05       	cpc	r19, r1
    2054:	09 f0       	breq	.+2      	; 0x2058 <nrk_gpio_set+0x28>
    2056:	60 c0       	rjmp	.+192    	; 0x2118 <nrk_gpio_set+0xe8>
    2058:	1a c0       	rjmp	.+52     	; 0x208e <nrk_gpio_set+0x5e>
    205a:	24 30       	cpi	r18, 0x04	; 4
    205c:	31 05       	cpc	r19, r1
    205e:	09 f4       	brne	.+2      	; 0x2062 <nrk_gpio_set+0x32>
    2060:	3e c0       	rjmp	.+124    	; 0x20de <nrk_gpio_set+0xae>
    2062:	24 30       	cpi	r18, 0x04	; 4
    2064:	31 05       	cpc	r19, r1
    2066:	6c f1       	brlt	.+90     	; 0x20c2 <nrk_gpio_set+0x92>
    2068:	25 30       	cpi	r18, 0x05	; 5
    206a:	31 05       	cpc	r19, r1
    206c:	09 f0       	breq	.+2      	; 0x2070 <nrk_gpio_set+0x40>
    206e:	54 c0       	rjmp	.+168    	; 0x2118 <nrk_gpio_set+0xe8>
    2070:	44 c0       	rjmp	.+136    	; 0x20fa <nrk_gpio_set+0xca>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2072:	92 b1       	in	r25, 0x02	; 2
    2074:	86 95       	lsr	r24
    2076:	86 95       	lsr	r24
    2078:	86 95       	lsr	r24
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <nrk_gpio_set+0x54>
    2080:	44 0f       	add	r20, r20
    2082:	55 1f       	adc	r21, r21
    2084:	8a 95       	dec	r24
    2086:	e2 f7       	brpl	.-8      	; 0x2080 <nrk_gpio_set+0x50>
    2088:	94 2b       	or	r25, r20
    208a:	92 b9       	out	0x02, r25	; 2
    208c:	43 c0       	rjmp	.+134    	; 0x2114 <nrk_gpio_set+0xe4>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    208e:	95 b1       	in	r25, 0x05	; 5
    2090:	86 95       	lsr	r24
    2092:	86 95       	lsr	r24
    2094:	86 95       	lsr	r24
    2096:	02 c0       	rjmp	.+4      	; 0x209c <nrk_gpio_set+0x6c>
    2098:	22 0f       	add	r18, r18
    209a:	33 1f       	adc	r19, r19
    209c:	8a 95       	dec	r24
    209e:	e2 f7       	brpl	.-8      	; 0x2098 <nrk_gpio_set+0x68>
    20a0:	92 2b       	or	r25, r18
    20a2:	95 b9       	out	0x05, r25	; 5
    20a4:	37 c0       	rjmp	.+110    	; 0x2114 <nrk_gpio_set+0xe4>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20a6:	98 b1       	in	r25, 0x08	; 8
    20a8:	86 95       	lsr	r24
    20aa:	86 95       	lsr	r24
    20ac:	86 95       	lsr	r24
    20ae:	41 e0       	ldi	r20, 0x01	; 1
    20b0:	50 e0       	ldi	r21, 0x00	; 0
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <nrk_gpio_set+0x88>
    20b4:	44 0f       	add	r20, r20
    20b6:	55 1f       	adc	r21, r21
    20b8:	8a 95       	dec	r24
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <nrk_gpio_set+0x84>
    20bc:	94 2b       	or	r25, r20
    20be:	98 b9       	out	0x08, r25	; 8
    20c0:	29 c0       	rjmp	.+82     	; 0x2114 <nrk_gpio_set+0xe4>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20c2:	9b b1       	in	r25, 0x0b	; 11
    20c4:	86 95       	lsr	r24
    20c6:	86 95       	lsr	r24
    20c8:	86 95       	lsr	r24
    20ca:	41 e0       	ldi	r20, 0x01	; 1
    20cc:	50 e0       	ldi	r21, 0x00	; 0
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <nrk_gpio_set+0xa4>
    20d0:	44 0f       	add	r20, r20
    20d2:	55 1f       	adc	r21, r21
    20d4:	8a 95       	dec	r24
    20d6:	e2 f7       	brpl	.-8      	; 0x20d0 <nrk_gpio_set+0xa0>
    20d8:	94 2b       	or	r25, r20
    20da:	9b b9       	out	0x0b, r25	; 11
    20dc:	1b c0       	rjmp	.+54     	; 0x2114 <nrk_gpio_set+0xe4>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20de:	9e b1       	in	r25, 0x0e	; 14
    20e0:	86 95       	lsr	r24
    20e2:	86 95       	lsr	r24
    20e4:	86 95       	lsr	r24
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	50 e0       	ldi	r21, 0x00	; 0
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <nrk_gpio_set+0xc0>
    20ec:	44 0f       	add	r20, r20
    20ee:	55 1f       	adc	r21, r21
    20f0:	8a 95       	dec	r24
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <nrk_gpio_set+0xbc>
    20f4:	94 2b       	or	r25, r20
    20f6:	9e b9       	out	0x0e, r25	; 14
    20f8:	0d c0       	rjmp	.+26     	; 0x2114 <nrk_gpio_set+0xe4>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    20fa:	91 b3       	in	r25, 0x11	; 17
    20fc:	86 95       	lsr	r24
    20fe:	86 95       	lsr	r24
    2100:	86 95       	lsr	r24
    2102:	41 e0       	ldi	r20, 0x01	; 1
    2104:	50 e0       	ldi	r21, 0x00	; 0
    2106:	02 c0       	rjmp	.+4      	; 0x210c <nrk_gpio_set+0xdc>
    2108:	44 0f       	add	r20, r20
    210a:	55 1f       	adc	r21, r21
    210c:	8a 95       	dec	r24
    210e:	e2 f7       	brpl	.-8      	; 0x2108 <nrk_gpio_set+0xd8>
    2110:	94 2b       	or	r25, r20
    2112:	91 bb       	out	0x11, r25	; 17
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	08 95       	ret
    2118:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    211a:	08 95       	ret

0000211c <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    211c:	8f 3f       	cpi	r24, 0xFF	; 255
    211e:	09 f4       	brne	.+2      	; 0x2122 <nrk_gpio_clr+0x6>
    2120:	7c c0       	rjmp	.+248    	; 0x221a <__stack+0x1b>
        switch (pin & 0x07) {
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	27 70       	andi	r18, 0x07	; 7
    2128:	30 70       	andi	r19, 0x00	; 0
    212a:	22 30       	cpi	r18, 0x02	; 2
    212c:	31 05       	cpc	r19, r1
    212e:	a1 f1       	breq	.+104    	; 0x2198 <nrk_gpio_clr+0x7c>
    2130:	23 30       	cpi	r18, 0x03	; 3
    2132:	31 05       	cpc	r19, r1
    2134:	44 f4       	brge	.+16     	; 0x2146 <nrk_gpio_clr+0x2a>
    2136:	21 15       	cp	r18, r1
    2138:	31 05       	cpc	r19, r1
    213a:	89 f0       	breq	.+34     	; 0x215e <nrk_gpio_clr+0x42>
    213c:	21 30       	cpi	r18, 0x01	; 1
    213e:	31 05       	cpc	r19, r1
    2140:	09 f0       	breq	.+2      	; 0x2144 <nrk_gpio_clr+0x28>
    2142:	6b c0       	rjmp	.+214    	; 0x221a <__stack+0x1b>
    2144:	1c c0       	rjmp	.+56     	; 0x217e <nrk_gpio_clr+0x62>
    2146:	24 30       	cpi	r18, 0x04	; 4
    2148:	31 05       	cpc	r19, r1
    214a:	09 f4       	brne	.+2      	; 0x214e <nrk_gpio_clr+0x32>
    214c:	45 c0       	rjmp	.+138    	; 0x21d8 <nrk_gpio_clr+0xbc>
    214e:	24 30       	cpi	r18, 0x04	; 4
    2150:	31 05       	cpc	r19, r1
    2152:	94 f1       	brlt	.+100    	; 0x21b8 <nrk_gpio_clr+0x9c>
    2154:	25 30       	cpi	r18, 0x05	; 5
    2156:	31 05       	cpc	r19, r1
    2158:	09 f0       	breq	.+2      	; 0x215c <nrk_gpio_clr+0x40>
    215a:	5f c0       	rjmp	.+190    	; 0x221a <__stack+0x1b>
    215c:	4d c0       	rjmp	.+154    	; 0x21f8 <nrk_gpio_clr+0xdc>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    215e:	32 b1       	in	r19, 0x02	; 2
    2160:	28 2f       	mov	r18, r24
    2162:	26 95       	lsr	r18
    2164:	26 95       	lsr	r18
    2166:	26 95       	lsr	r18
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <nrk_gpio_clr+0x56>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	2a 95       	dec	r18
    2174:	e2 f7       	brpl	.-8      	; 0x216e <nrk_gpio_clr+0x52>
    2176:	80 95       	com	r24
    2178:	83 23       	and	r24, r19
    217a:	82 b9       	out	0x02, r24	; 2
    217c:	4c c0       	rjmp	.+152    	; 0x2216 <__stack+0x17>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    217e:	95 b1       	in	r25, 0x05	; 5
    2180:	86 95       	lsr	r24
    2182:	86 95       	lsr	r24
    2184:	86 95       	lsr	r24
    2186:	02 c0       	rjmp	.+4      	; 0x218c <nrk_gpio_clr+0x70>
    2188:	22 0f       	add	r18, r18
    218a:	33 1f       	adc	r19, r19
    218c:	8a 95       	dec	r24
    218e:	e2 f7       	brpl	.-8      	; 0x2188 <nrk_gpio_clr+0x6c>
    2190:	20 95       	com	r18
    2192:	29 23       	and	r18, r25
    2194:	25 b9       	out	0x05, r18	; 5
    2196:	3f c0       	rjmp	.+126    	; 0x2216 <__stack+0x17>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2198:	38 b1       	in	r19, 0x08	; 8
    219a:	28 2f       	mov	r18, r24
    219c:	26 95       	lsr	r18
    219e:	26 95       	lsr	r18
    21a0:	26 95       	lsr	r18
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <nrk_gpio_clr+0x90>
    21a8:	88 0f       	add	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	2a 95       	dec	r18
    21ae:	e2 f7       	brpl	.-8      	; 0x21a8 <nrk_gpio_clr+0x8c>
    21b0:	80 95       	com	r24
    21b2:	83 23       	and	r24, r19
    21b4:	88 b9       	out	0x08, r24	; 8
    21b6:	2f c0       	rjmp	.+94     	; 0x2216 <__stack+0x17>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    21b8:	3b b1       	in	r19, 0x0b	; 11
    21ba:	28 2f       	mov	r18, r24
    21bc:	26 95       	lsr	r18
    21be:	26 95       	lsr	r18
    21c0:	26 95       	lsr	r18
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <nrk_gpio_clr+0xb0>
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	2a 95       	dec	r18
    21ce:	e2 f7       	brpl	.-8      	; 0x21c8 <nrk_gpio_clr+0xac>
    21d0:	80 95       	com	r24
    21d2:	83 23       	and	r24, r19
    21d4:	8b b9       	out	0x0b, r24	; 11
    21d6:	1f c0       	rjmp	.+62     	; 0x2216 <__stack+0x17>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    21d8:	3e b1       	in	r19, 0x0e	; 14
    21da:	28 2f       	mov	r18, r24
    21dc:	26 95       	lsr	r18
    21de:	26 95       	lsr	r18
    21e0:	26 95       	lsr	r18
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <nrk_gpio_clr+0xd0>
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	2a 95       	dec	r18
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <nrk_gpio_clr+0xcc>
    21f0:	80 95       	com	r24
    21f2:	83 23       	and	r24, r19
    21f4:	8e b9       	out	0x0e, r24	; 14
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <__stack+0x17>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    21f8:	31 b3       	in	r19, 0x11	; 17
    21fa:	28 2f       	mov	r18, r24
    21fc:	26 95       	lsr	r18
    21fe:	26 95       	lsr	r18
    2200:	26 95       	lsr	r18
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	02 c0       	rjmp	.+4      	; 0x220c <__stack+0xd>
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	2a 95       	dec	r18
    220e:	e2 f7       	brpl	.-8      	; 0x2208 <__stack+0x9>
    2210:	80 95       	com	r24
    2212:	83 23       	and	r24, r19
    2214:	81 bb       	out	0x11, r24	; 17
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	08 95       	ret
    221a:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    221c:	08 95       	ret

0000221e <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    221e:	8f 3f       	cpi	r24, 0xFF	; 255
    2220:	91 f1       	breq	.+100    	; 0x2286 <nrk_gpio_get+0x68>
        switch (pin & 0x07) {
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	27 70       	andi	r18, 0x07	; 7
    2228:	30 70       	andi	r19, 0x00	; 0
    222a:	22 30       	cpi	r18, 0x02	; 2
    222c:	31 05       	cpc	r19, r1
    222e:	c1 f0       	breq	.+48     	; 0x2260 <nrk_gpio_get+0x42>
    2230:	23 30       	cpi	r18, 0x03	; 3
    2232:	31 05       	cpc	r19, r1
    2234:	3c f4       	brge	.+14     	; 0x2244 <nrk_gpio_get+0x26>
    2236:	21 15       	cp	r18, r1
    2238:	31 05       	cpc	r19, r1
    223a:	71 f0       	breq	.+28     	; 0x2258 <nrk_gpio_get+0x3a>
    223c:	21 30       	cpi	r18, 0x01	; 1
    223e:	31 05       	cpc	r19, r1
    2240:	11 f5       	brne	.+68     	; 0x2286 <nrk_gpio_get+0x68>
    2242:	0c c0       	rjmp	.+24     	; 0x225c <nrk_gpio_get+0x3e>
    2244:	24 30       	cpi	r18, 0x04	; 4
    2246:	31 05       	cpc	r19, r1
    2248:	79 f0       	breq	.+30     	; 0x2268 <nrk_gpio_get+0x4a>
    224a:	24 30       	cpi	r18, 0x04	; 4
    224c:	31 05       	cpc	r19, r1
    224e:	54 f0       	brlt	.+20     	; 0x2264 <nrk_gpio_get+0x46>
    2250:	25 30       	cpi	r18, 0x05	; 5
    2252:	31 05       	cpc	r19, r1
    2254:	c1 f4       	brne	.+48     	; 0x2286 <nrk_gpio_get+0x68>
    2256:	0a c0       	rjmp	.+20     	; 0x226c <nrk_gpio_get+0x4e>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    2258:	20 b1       	in	r18, 0x00	; 0
    225a:	09 c0       	rjmp	.+18     	; 0x226e <nrk_gpio_get+0x50>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    225c:	23 b1       	in	r18, 0x03	; 3
    225e:	07 c0       	rjmp	.+14     	; 0x226e <nrk_gpio_get+0x50>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    2260:	26 b1       	in	r18, 0x06	; 6
    2262:	05 c0       	rjmp	.+10     	; 0x226e <nrk_gpio_get+0x50>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    2264:	29 b1       	in	r18, 0x09	; 9
    2266:	03 c0       	rjmp	.+6      	; 0x226e <nrk_gpio_get+0x50>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    2268:	2c b1       	in	r18, 0x0c	; 12
    226a:	01 c0       	rjmp	.+2      	; 0x226e <nrk_gpio_get+0x50>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    226c:	2f b1       	in	r18, 0x0f	; 15
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	86 95       	lsr	r24
    2272:	86 95       	lsr	r24
    2274:	86 95       	lsr	r24
    2276:	02 c0       	rjmp	.+4      	; 0x227c <nrk_gpio_get+0x5e>
    2278:	35 95       	asr	r19
    227a:	27 95       	ror	r18
    227c:	8a 95       	dec	r24
    227e:	e2 f7       	brpl	.-8      	; 0x2278 <nrk_gpio_get+0x5a>
    2280:	82 2f       	mov	r24, r18
    2282:	81 70       	andi	r24, 0x01	; 1
    2284:	08 95       	ret
    2286:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    2288:	08 95       	ret

0000228a <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    228a:	8f 3f       	cpi	r24, 0xFF	; 255
    228c:	09 f4       	brne	.+2      	; 0x2290 <nrk_gpio_toggle+0x6>
    228e:	f5 c0       	rjmp	.+490    	; 0x247a <nrk_gpio_toggle+0x1f0>
        switch (pin & 0x07) {
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	27 70       	andi	r18, 0x07	; 7
    2296:	30 70       	andi	r19, 0x00	; 0
    2298:	22 30       	cpi	r18, 0x02	; 2
    229a:	31 05       	cpc	r19, r1
    229c:	09 f4       	brne	.+2      	; 0x22a0 <nrk_gpio_toggle+0x16>
    229e:	58 c0       	rjmp	.+176    	; 0x2350 <nrk_gpio_toggle+0xc6>
    22a0:	23 30       	cpi	r18, 0x03	; 3
    22a2:	31 05       	cpc	r19, r1
    22a4:	44 f4       	brge	.+16     	; 0x22b6 <nrk_gpio_toggle+0x2c>
    22a6:	21 15       	cp	r18, r1
    22a8:	31 05       	cpc	r19, r1
    22aa:	91 f0       	breq	.+36     	; 0x22d0 <nrk_gpio_toggle+0x46>
    22ac:	21 30       	cpi	r18, 0x01	; 1
    22ae:	31 05       	cpc	r19, r1
    22b0:	09 f0       	breq	.+2      	; 0x22b4 <nrk_gpio_toggle+0x2a>
    22b2:	e3 c0       	rjmp	.+454    	; 0x247a <nrk_gpio_toggle+0x1f0>
    22b4:	32 c0       	rjmp	.+100    	; 0x231a <nrk_gpio_toggle+0x90>
    22b6:	24 30       	cpi	r18, 0x04	; 4
    22b8:	31 05       	cpc	r19, r1
    22ba:	09 f4       	brne	.+2      	; 0x22be <nrk_gpio_toggle+0x34>
    22bc:	93 c0       	rjmp	.+294    	; 0x23e4 <nrk_gpio_toggle+0x15a>
    22be:	24 30       	cpi	r18, 0x04	; 4
    22c0:	31 05       	cpc	r19, r1
    22c2:	0c f4       	brge	.+2      	; 0x22c6 <nrk_gpio_toggle+0x3c>
    22c4:	6a c0       	rjmp	.+212    	; 0x239a <nrk_gpio_toggle+0x110>
    22c6:	25 30       	cpi	r18, 0x05	; 5
    22c8:	31 05       	cpc	r19, r1
    22ca:	09 f0       	breq	.+2      	; 0x22ce <nrk_gpio_toggle+0x44>
    22cc:	d6 c0       	rjmp	.+428    	; 0x247a <nrk_gpio_toggle+0x1f0>
    22ce:	af c0       	rjmp	.+350    	; 0x242e <nrk_gpio_toggle+0x1a4>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    22d0:	90 b1       	in	r25, 0x00	; 0
    22d2:	86 95       	lsr	r24
    22d4:	86 95       	lsr	r24
    22d6:	86 95       	lsr	r24
    22d8:	28 2f       	mov	r18, r24
    22da:	89 2f       	mov	r24, r25
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	02 2e       	mov	r0, r18
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <nrk_gpio_toggle+0x5c>
    22e2:	95 95       	asr	r25
    22e4:	87 95       	ror	r24
    22e6:	0a 94       	dec	r0
    22e8:	e2 f7       	brpl	.-8      	; 0x22e2 <nrk_gpio_toggle+0x58>
    22ea:	80 fd       	sbrc	r24, 0
    22ec:	0a c0       	rjmp	.+20     	; 0x2302 <nrk_gpio_toggle+0x78>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    22ee:	82 b1       	in	r24, 0x02	; 2
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	50 e0       	ldi	r21, 0x00	; 0
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <nrk_gpio_toggle+0x70>
    22f6:	44 0f       	add	r20, r20
    22f8:	55 1f       	adc	r21, r21
    22fa:	2a 95       	dec	r18
    22fc:	e2 f7       	brpl	.-8      	; 0x22f6 <nrk_gpio_toggle+0x6c>
    22fe:	84 2b       	or	r24, r20
    2300:	0a c0       	rjmp	.+20     	; 0x2316 <nrk_gpio_toggle+0x8c>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    2302:	32 b1       	in	r19, 0x02	; 2
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	02 c0       	rjmp	.+4      	; 0x230e <nrk_gpio_toggle+0x84>
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	2a 95       	dec	r18
    2310:	e2 f7       	brpl	.-8      	; 0x230a <nrk_gpio_toggle+0x80>
    2312:	80 95       	com	r24
    2314:	83 23       	and	r24, r19
    2316:	82 b9       	out	0x02, r24	; 2
    2318:	ae c0       	rjmp	.+348    	; 0x2476 <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    231a:	43 b1       	in	r20, 0x03	; 3
    231c:	86 95       	lsr	r24
    231e:	86 95       	lsr	r24
    2320:	86 95       	lsr	r24
    2322:	50 e0       	ldi	r21, 0x00	; 0
    2324:	08 2e       	mov	r0, r24
    2326:	02 c0       	rjmp	.+4      	; 0x232c <nrk_gpio_toggle+0xa2>
    2328:	55 95       	asr	r21
    232a:	47 95       	ror	r20
    232c:	0a 94       	dec	r0
    232e:	e2 f7       	brpl	.-8      	; 0x2328 <nrk_gpio_toggle+0x9e>
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <nrk_gpio_toggle+0xac>
    2332:	22 0f       	add	r18, r18
    2334:	33 1f       	adc	r19, r19
    2336:	8a 95       	dec	r24
    2338:	e2 f7       	brpl	.-8      	; 0x2332 <nrk_gpio_toggle+0xa8>
    233a:	40 fd       	sbrc	r20, 0
    233c:	04 c0       	rjmp	.+8      	; 0x2346 <nrk_gpio_toggle+0xbc>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    233e:	95 b1       	in	r25, 0x05	; 5
    2340:	92 2b       	or	r25, r18
    2342:	95 b9       	out	0x05, r25	; 5
    2344:	98 c0       	rjmp	.+304    	; 0x2476 <nrk_gpio_toggle+0x1ec>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    2346:	85 b1       	in	r24, 0x05	; 5
    2348:	20 95       	com	r18
    234a:	28 23       	and	r18, r24
    234c:	25 b9       	out	0x05, r18	; 5
    234e:	93 c0       	rjmp	.+294    	; 0x2476 <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2350:	96 b1       	in	r25, 0x06	; 6
    2352:	86 95       	lsr	r24
    2354:	86 95       	lsr	r24
    2356:	86 95       	lsr	r24
    2358:	28 2f       	mov	r18, r24
    235a:	89 2f       	mov	r24, r25
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	02 2e       	mov	r0, r18
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <nrk_gpio_toggle+0xdc>
    2362:	95 95       	asr	r25
    2364:	87 95       	ror	r24
    2366:	0a 94       	dec	r0
    2368:	e2 f7       	brpl	.-8      	; 0x2362 <nrk_gpio_toggle+0xd8>
    236a:	80 fd       	sbrc	r24, 0
    236c:	0a c0       	rjmp	.+20     	; 0x2382 <nrk_gpio_toggle+0xf8>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    236e:	88 b1       	in	r24, 0x08	; 8
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	02 c0       	rjmp	.+4      	; 0x237a <nrk_gpio_toggle+0xf0>
    2376:	44 0f       	add	r20, r20
    2378:	55 1f       	adc	r21, r21
    237a:	2a 95       	dec	r18
    237c:	e2 f7       	brpl	.-8      	; 0x2376 <nrk_gpio_toggle+0xec>
    237e:	84 2b       	or	r24, r20
    2380:	0a c0       	rjmp	.+20     	; 0x2396 <nrk_gpio_toggle+0x10c>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    2382:	38 b1       	in	r19, 0x08	; 8
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	02 c0       	rjmp	.+4      	; 0x238e <nrk_gpio_toggle+0x104>
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	2a 95       	dec	r18
    2390:	e2 f7       	brpl	.-8      	; 0x238a <nrk_gpio_toggle+0x100>
    2392:	80 95       	com	r24
    2394:	83 23       	and	r24, r19
    2396:	88 b9       	out	0x08, r24	; 8
    2398:	6e c0       	rjmp	.+220    	; 0x2476 <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    239a:	99 b1       	in	r25, 0x09	; 9
    239c:	86 95       	lsr	r24
    239e:	86 95       	lsr	r24
    23a0:	86 95       	lsr	r24
    23a2:	28 2f       	mov	r18, r24
    23a4:	89 2f       	mov	r24, r25
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	02 2e       	mov	r0, r18
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <nrk_gpio_toggle+0x126>
    23ac:	95 95       	asr	r25
    23ae:	87 95       	ror	r24
    23b0:	0a 94       	dec	r0
    23b2:	e2 f7       	brpl	.-8      	; 0x23ac <nrk_gpio_toggle+0x122>
    23b4:	80 fd       	sbrc	r24, 0
    23b6:	0a c0       	rjmp	.+20     	; 0x23cc <nrk_gpio_toggle+0x142>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    23b8:	8b b1       	in	r24, 0x0b	; 11
    23ba:	41 e0       	ldi	r20, 0x01	; 1
    23bc:	50 e0       	ldi	r21, 0x00	; 0
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <nrk_gpio_toggle+0x13a>
    23c0:	44 0f       	add	r20, r20
    23c2:	55 1f       	adc	r21, r21
    23c4:	2a 95       	dec	r18
    23c6:	e2 f7       	brpl	.-8      	; 0x23c0 <nrk_gpio_toggle+0x136>
    23c8:	84 2b       	or	r24, r20
    23ca:	0a c0       	rjmp	.+20     	; 0x23e0 <nrk_gpio_toggle+0x156>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    23cc:	3b b1       	in	r19, 0x0b	; 11
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <nrk_gpio_toggle+0x14e>
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	2a 95       	dec	r18
    23da:	e2 f7       	brpl	.-8      	; 0x23d4 <nrk_gpio_toggle+0x14a>
    23dc:	80 95       	com	r24
    23de:	83 23       	and	r24, r19
    23e0:	8b b9       	out	0x0b, r24	; 11
    23e2:	49 c0       	rjmp	.+146    	; 0x2476 <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    23e4:	9c b1       	in	r25, 0x0c	; 12
    23e6:	86 95       	lsr	r24
    23e8:	86 95       	lsr	r24
    23ea:	86 95       	lsr	r24
    23ec:	28 2f       	mov	r18, r24
    23ee:	89 2f       	mov	r24, r25
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	02 2e       	mov	r0, r18
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <nrk_gpio_toggle+0x170>
    23f6:	95 95       	asr	r25
    23f8:	87 95       	ror	r24
    23fa:	0a 94       	dec	r0
    23fc:	e2 f7       	brpl	.-8      	; 0x23f6 <nrk_gpio_toggle+0x16c>
    23fe:	80 fd       	sbrc	r24, 0
    2400:	0a c0       	rjmp	.+20     	; 0x2416 <nrk_gpio_toggle+0x18c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    2402:	8e b1       	in	r24, 0x0e	; 14
    2404:	41 e0       	ldi	r20, 0x01	; 1
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	02 c0       	rjmp	.+4      	; 0x240e <nrk_gpio_toggle+0x184>
    240a:	44 0f       	add	r20, r20
    240c:	55 1f       	adc	r21, r21
    240e:	2a 95       	dec	r18
    2410:	e2 f7       	brpl	.-8      	; 0x240a <nrk_gpio_toggle+0x180>
    2412:	84 2b       	or	r24, r20
    2414:	0a c0       	rjmp	.+20     	; 0x242a <nrk_gpio_toggle+0x1a0>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    2416:	3e b1       	in	r19, 0x0e	; 14
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <nrk_gpio_toggle+0x198>
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	2a 95       	dec	r18
    2424:	e2 f7       	brpl	.-8      	; 0x241e <nrk_gpio_toggle+0x194>
    2426:	80 95       	com	r24
    2428:	83 23       	and	r24, r19
    242a:	8e b9       	out	0x0e, r24	; 14
    242c:	24 c0       	rjmp	.+72     	; 0x2476 <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    242e:	9f b1       	in	r25, 0x0f	; 15
    2430:	86 95       	lsr	r24
    2432:	86 95       	lsr	r24
    2434:	86 95       	lsr	r24
    2436:	28 2f       	mov	r18, r24
    2438:	89 2f       	mov	r24, r25
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	02 2e       	mov	r0, r18
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <nrk_gpio_toggle+0x1ba>
    2440:	95 95       	asr	r25
    2442:	87 95       	ror	r24
    2444:	0a 94       	dec	r0
    2446:	e2 f7       	brpl	.-8      	; 0x2440 <nrk_gpio_toggle+0x1b6>
    2448:	80 fd       	sbrc	r24, 0
    244a:	0a c0       	rjmp	.+20     	; 0x2460 <nrk_gpio_toggle+0x1d6>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    244c:	81 b3       	in	r24, 0x11	; 17
    244e:	41 e0       	ldi	r20, 0x01	; 1
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <nrk_gpio_toggle+0x1ce>
    2454:	44 0f       	add	r20, r20
    2456:	55 1f       	adc	r21, r21
    2458:	2a 95       	dec	r18
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <nrk_gpio_toggle+0x1ca>
    245c:	84 2b       	or	r24, r20
    245e:	0a c0       	rjmp	.+20     	; 0x2474 <nrk_gpio_toggle+0x1ea>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    2460:	31 b3       	in	r19, 0x11	; 17
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	02 c0       	rjmp	.+4      	; 0x246c <nrk_gpio_toggle+0x1e2>
    2468:	88 0f       	add	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	2a 95       	dec	r18
    246e:	e2 f7       	brpl	.-8      	; 0x2468 <nrk_gpio_toggle+0x1de>
    2470:	80 95       	com	r24
    2472:	83 23       	and	r24, r19
    2474:	81 bb       	out	0x11, r24	; 17
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	08 95       	ret
    247a:	8f ef       	ldi	r24, 0xFF	; 255
                        }
                        break;
                default: return -1;
        }
        return 1;
}
    247c:	08 95       	ret

0000247e <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    247e:	8f 3f       	cpi	r24, 0xFF	; 255
    2480:	09 f4       	brne	.+2      	; 0x2484 <nrk_gpio_direction+0x6>
    2482:	f7 c0       	rjmp	.+494    	; 0x2672 <nrk_gpio_direction+0x1f4>
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
        if (pin_direction == NRK_PIN_INPUT) {
    2488:	66 23       	and	r22, r22
    248a:	09 f0       	breq	.+2      	; 0x248e <nrk_gpio_direction+0x10>
    248c:	83 c0       	rjmp	.+262    	; 0x2594 <nrk_gpio_direction+0x116>
                switch (pin & 0x07) {
    248e:	27 70       	andi	r18, 0x07	; 7
    2490:	30 70       	andi	r19, 0x00	; 0
    2492:	22 30       	cpi	r18, 0x02	; 2
    2494:	31 05       	cpc	r19, r1
    2496:	d9 f1       	breq	.+118    	; 0x250e <nrk_gpio_direction+0x90>
    2498:	23 30       	cpi	r18, 0x03	; 3
    249a:	31 05       	cpc	r19, r1
    249c:	44 f4       	brge	.+16     	; 0x24ae <nrk_gpio_direction+0x30>
    249e:	21 15       	cp	r18, r1
    24a0:	31 05       	cpc	r19, r1
    24a2:	89 f0       	breq	.+34     	; 0x24c6 <nrk_gpio_direction+0x48>
    24a4:	21 30       	cpi	r18, 0x01	; 1
    24a6:	31 05       	cpc	r19, r1
    24a8:	09 f0       	breq	.+2      	; 0x24ac <nrk_gpio_direction+0x2e>
    24aa:	e3 c0       	rjmp	.+454    	; 0x2672 <nrk_gpio_direction+0x1f4>
    24ac:	1f c0       	rjmp	.+62     	; 0x24ec <nrk_gpio_direction+0x6e>
    24ae:	24 30       	cpi	r18, 0x04	; 4
    24b0:	31 05       	cpc	r19, r1
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <nrk_gpio_direction+0x38>
    24b4:	4c c0       	rjmp	.+152    	; 0x254e <nrk_gpio_direction+0xd0>
    24b6:	24 30       	cpi	r18, 0x04	; 4
    24b8:	31 05       	cpc	r19, r1
    24ba:	cc f1       	brlt	.+114    	; 0x252e <nrk_gpio_direction+0xb0>
    24bc:	25 30       	cpi	r18, 0x05	; 5
    24be:	31 05       	cpc	r19, r1
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <nrk_gpio_direction+0x46>
    24c2:	d7 c0       	rjmp	.+430    	; 0x2672 <nrk_gpio_direction+0x1f4>
    24c4:	54 c0       	rjmp	.+168    	; 0x256e <nrk_gpio_direction+0xf0>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    24c6:	91 b1       	in	r25, 0x01	; 1
    24c8:	86 95       	lsr	r24
    24ca:	86 95       	lsr	r24
    24cc:	86 95       	lsr	r24
    24ce:	21 e0       	ldi	r18, 0x01	; 1
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <nrk_gpio_direction+0x5a>
    24d4:	22 0f       	add	r18, r18
    24d6:	33 1f       	adc	r19, r19
    24d8:	8a 95       	dec	r24
    24da:	e2 f7       	brpl	.-8      	; 0x24d4 <nrk_gpio_direction+0x56>
    24dc:	82 2f       	mov	r24, r18
    24de:	80 95       	com	r24
    24e0:	89 23       	and	r24, r25
    24e2:	81 b9       	out	0x01, r24	; 1
                                PORTA |= BM((pin & 0xF8) >> 3); 
    24e4:	82 b1       	in	r24, 0x02	; 2
    24e6:	82 2b       	or	r24, r18
    24e8:	82 b9       	out	0x02, r24	; 2
    24ea:	c1 c0       	rjmp	.+386    	; 0x266e <nrk_gpio_direction+0x1f0>
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    24ec:	44 b1       	in	r20, 0x04	; 4
    24ee:	86 95       	lsr	r24
    24f0:	86 95       	lsr	r24
    24f2:	86 95       	lsr	r24
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <nrk_gpio_direction+0x7c>
    24f6:	22 0f       	add	r18, r18
    24f8:	33 1f       	adc	r19, r19
    24fa:	8a 95       	dec	r24
    24fc:	e2 f7       	brpl	.-8      	; 0x24f6 <nrk_gpio_direction+0x78>
    24fe:	92 2f       	mov	r25, r18
    2500:	90 95       	com	r25
    2502:	94 23       	and	r25, r20
    2504:	94 b9       	out	0x04, r25	; 4
                                PORTB |= BM((pin & 0xF8) >> 3); 
    2506:	95 b1       	in	r25, 0x05	; 5
    2508:	92 2b       	or	r25, r18
    250a:	95 b9       	out	0x05, r25	; 5
    250c:	b0 c0       	rjmp	.+352    	; 0x266e <nrk_gpio_direction+0x1f0>
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    250e:	97 b1       	in	r25, 0x07	; 7
    2510:	86 95       	lsr	r24
    2512:	86 95       	lsr	r24
    2514:	86 95       	lsr	r24
    2516:	21 e0       	ldi	r18, 0x01	; 1
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <nrk_gpio_direction+0xa2>
    251c:	22 0f       	add	r18, r18
    251e:	33 1f       	adc	r19, r19
    2520:	8a 95       	dec	r24
    2522:	e2 f7       	brpl	.-8      	; 0x251c <nrk_gpio_direction+0x9e>
    2524:	82 2f       	mov	r24, r18
    2526:	80 95       	com	r24
    2528:	89 23       	and	r24, r25
    252a:	87 b9       	out	0x07, r24	; 7
    252c:	2f c0       	rjmp	.+94     	; 0x258c <nrk_gpio_direction+0x10e>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    252e:	9a b1       	in	r25, 0x0a	; 10
    2530:	86 95       	lsr	r24
    2532:	86 95       	lsr	r24
    2534:	86 95       	lsr	r24
    2536:	21 e0       	ldi	r18, 0x01	; 1
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <nrk_gpio_direction+0xc2>
    253c:	22 0f       	add	r18, r18
    253e:	33 1f       	adc	r19, r19
    2540:	8a 95       	dec	r24
    2542:	e2 f7       	brpl	.-8      	; 0x253c <nrk_gpio_direction+0xbe>
    2544:	82 2f       	mov	r24, r18
    2546:	80 95       	com	r24
    2548:	89 23       	and	r24, r25
    254a:	8a b9       	out	0x0a, r24	; 10
    254c:	1f c0       	rjmp	.+62     	; 0x258c <nrk_gpio_direction+0x10e>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    254e:	9d b1       	in	r25, 0x0d	; 13
    2550:	86 95       	lsr	r24
    2552:	86 95       	lsr	r24
    2554:	86 95       	lsr	r24
    2556:	21 e0       	ldi	r18, 0x01	; 1
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <nrk_gpio_direction+0xe2>
    255c:	22 0f       	add	r18, r18
    255e:	33 1f       	adc	r19, r19
    2560:	8a 95       	dec	r24
    2562:	e2 f7       	brpl	.-8      	; 0x255c <nrk_gpio_direction+0xde>
    2564:	82 2f       	mov	r24, r18
    2566:	80 95       	com	r24
    2568:	89 23       	and	r24, r25
    256a:	8d b9       	out	0x0d, r24	; 13
    256c:	0f c0       	rjmp	.+30     	; 0x258c <nrk_gpio_direction+0x10e>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    256e:	90 b3       	in	r25, 0x10	; 16
    2570:	86 95       	lsr	r24
    2572:	86 95       	lsr	r24
    2574:	86 95       	lsr	r24
    2576:	21 e0       	ldi	r18, 0x01	; 1
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <nrk_gpio_direction+0x102>
    257c:	22 0f       	add	r18, r18
    257e:	33 1f       	adc	r19, r19
    2580:	8a 95       	dec	r24
    2582:	e2 f7       	brpl	.-8      	; 0x257c <nrk_gpio_direction+0xfe>
    2584:	82 2f       	mov	r24, r18
    2586:	80 95       	com	r24
    2588:	89 23       	and	r24, r25
    258a:	80 bb       	out	0x10, r24	; 16
                                PORTB |= BM((pin & 0xF8) >> 3); 
    258c:	85 b1       	in	r24, 0x05	; 5
    258e:	82 2b       	or	r24, r18
    2590:	85 b9       	out	0x05, r24	; 5
    2592:	6d c0       	rjmp	.+218    	; 0x266e <nrk_gpio_direction+0x1f0>
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    2594:	27 70       	andi	r18, 0x07	; 7
    2596:	30 70       	andi	r19, 0x00	; 0
    2598:	22 30       	cpi	r18, 0x02	; 2
    259a:	31 05       	cpc	r19, r1
    259c:	89 f1       	breq	.+98     	; 0x2600 <nrk_gpio_direction+0x182>
    259e:	23 30       	cpi	r18, 0x03	; 3
    25a0:	31 05       	cpc	r19, r1
    25a2:	44 f4       	brge	.+16     	; 0x25b4 <nrk_gpio_direction+0x136>
    25a4:	21 15       	cp	r18, r1
    25a6:	31 05       	cpc	r19, r1
    25a8:	89 f0       	breq	.+34     	; 0x25cc <nrk_gpio_direction+0x14e>
    25aa:	21 30       	cpi	r18, 0x01	; 1
    25ac:	31 05       	cpc	r19, r1
    25ae:	09 f0       	breq	.+2      	; 0x25b2 <nrk_gpio_direction+0x134>
    25b0:	60 c0       	rjmp	.+192    	; 0x2672 <nrk_gpio_direction+0x1f4>
    25b2:	1a c0       	rjmp	.+52     	; 0x25e8 <nrk_gpio_direction+0x16a>
    25b4:	24 30       	cpi	r18, 0x04	; 4
    25b6:	31 05       	cpc	r19, r1
    25b8:	09 f4       	brne	.+2      	; 0x25bc <nrk_gpio_direction+0x13e>
    25ba:	3e c0       	rjmp	.+124    	; 0x2638 <nrk_gpio_direction+0x1ba>
    25bc:	24 30       	cpi	r18, 0x04	; 4
    25be:	31 05       	cpc	r19, r1
    25c0:	6c f1       	brlt	.+90     	; 0x261c <nrk_gpio_direction+0x19e>
    25c2:	25 30       	cpi	r18, 0x05	; 5
    25c4:	31 05       	cpc	r19, r1
    25c6:	09 f0       	breq	.+2      	; 0x25ca <nrk_gpio_direction+0x14c>
    25c8:	54 c0       	rjmp	.+168    	; 0x2672 <nrk_gpio_direction+0x1f4>
    25ca:	44 c0       	rjmp	.+136    	; 0x2654 <nrk_gpio_direction+0x1d6>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    25cc:	91 b1       	in	r25, 0x01	; 1
    25ce:	86 95       	lsr	r24
    25d0:	86 95       	lsr	r24
    25d2:	86 95       	lsr	r24
    25d4:	21 e0       	ldi	r18, 0x01	; 1
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <nrk_gpio_direction+0x160>
    25da:	22 0f       	add	r18, r18
    25dc:	33 1f       	adc	r19, r19
    25de:	8a 95       	dec	r24
    25e0:	e2 f7       	brpl	.-8      	; 0x25da <nrk_gpio_direction+0x15c>
    25e2:	92 2b       	or	r25, r18
    25e4:	91 b9       	out	0x01, r25	; 1
    25e6:	43 c0       	rjmp	.+134    	; 0x266e <nrk_gpio_direction+0x1f0>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    25e8:	94 b1       	in	r25, 0x04	; 4
    25ea:	86 95       	lsr	r24
    25ec:	86 95       	lsr	r24
    25ee:	86 95       	lsr	r24
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <nrk_gpio_direction+0x178>
    25f2:	22 0f       	add	r18, r18
    25f4:	33 1f       	adc	r19, r19
    25f6:	8a 95       	dec	r24
    25f8:	e2 f7       	brpl	.-8      	; 0x25f2 <nrk_gpio_direction+0x174>
    25fa:	92 2b       	or	r25, r18
    25fc:	94 b9       	out	0x04, r25	; 4
    25fe:	37 c0       	rjmp	.+110    	; 0x266e <nrk_gpio_direction+0x1f0>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    2600:	97 b1       	in	r25, 0x07	; 7
    2602:	86 95       	lsr	r24
    2604:	86 95       	lsr	r24
    2606:	86 95       	lsr	r24
    2608:	21 e0       	ldi	r18, 0x01	; 1
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <nrk_gpio_direction+0x194>
    260e:	22 0f       	add	r18, r18
    2610:	33 1f       	adc	r19, r19
    2612:	8a 95       	dec	r24
    2614:	e2 f7       	brpl	.-8      	; 0x260e <nrk_gpio_direction+0x190>
    2616:	92 2b       	or	r25, r18
    2618:	97 b9       	out	0x07, r25	; 7
    261a:	29 c0       	rjmp	.+82     	; 0x266e <nrk_gpio_direction+0x1f0>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    261c:	9a b1       	in	r25, 0x0a	; 10
    261e:	86 95       	lsr	r24
    2620:	86 95       	lsr	r24
    2622:	86 95       	lsr	r24
    2624:	21 e0       	ldi	r18, 0x01	; 1
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	02 c0       	rjmp	.+4      	; 0x262e <nrk_gpio_direction+0x1b0>
    262a:	22 0f       	add	r18, r18
    262c:	33 1f       	adc	r19, r19
    262e:	8a 95       	dec	r24
    2630:	e2 f7       	brpl	.-8      	; 0x262a <nrk_gpio_direction+0x1ac>
    2632:	92 2b       	or	r25, r18
    2634:	9a b9       	out	0x0a, r25	; 10
    2636:	1b c0       	rjmp	.+54     	; 0x266e <nrk_gpio_direction+0x1f0>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    2638:	9d b1       	in	r25, 0x0d	; 13
    263a:	86 95       	lsr	r24
    263c:	86 95       	lsr	r24
    263e:	86 95       	lsr	r24
    2640:	21 e0       	ldi	r18, 0x01	; 1
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	02 c0       	rjmp	.+4      	; 0x264a <nrk_gpio_direction+0x1cc>
    2646:	22 0f       	add	r18, r18
    2648:	33 1f       	adc	r19, r19
    264a:	8a 95       	dec	r24
    264c:	e2 f7       	brpl	.-8      	; 0x2646 <nrk_gpio_direction+0x1c8>
    264e:	92 2b       	or	r25, r18
    2650:	9d b9       	out	0x0d, r25	; 13
    2652:	0d c0       	rjmp	.+26     	; 0x266e <nrk_gpio_direction+0x1f0>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    2654:	90 b3       	in	r25, 0x10	; 16
    2656:	86 95       	lsr	r24
    2658:	86 95       	lsr	r24
    265a:	86 95       	lsr	r24
    265c:	21 e0       	ldi	r18, 0x01	; 1
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <nrk_gpio_direction+0x1e8>
    2662:	22 0f       	add	r18, r18
    2664:	33 1f       	adc	r19, r19
    2666:	8a 95       	dec	r24
    2668:	e2 f7       	brpl	.-8      	; 0x2662 <nrk_gpio_direction+0x1e4>
    266a:	92 2b       	or	r25, r18
    266c:	90 bb       	out	0x10, r25	; 16
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	08 95       	ret
    2672:	8f ef       	ldi	r24, 0xFF	; 255
                        default: return -1;
                }
        }
        return 1;
}
    2674:	08 95       	ret

00002676 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    2676:	88 23       	and	r24, r24
    2678:	11 f0       	breq	.+4      	; 0x267e <nrk_get_button+0x8>
    267a:	8f ef       	ldi	r24, 0xFF	; 255
    267c:	08 95       	ret
	 return( !(PINA & BM(BUTTON))); 
    267e:	80 b1       	in	r24, 0x00	; 0
    2680:	80 95       	com	r24
    2682:	88 1f       	adc	r24, r24
    2684:	88 27       	eor	r24, r24
    2686:	88 1f       	adc	r24, r24
	} 
return -1;
}
    2688:	08 95       	ret

0000268a <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	11 f4       	brne	.+4      	; 0x2692 <nrk_led_toggle+0x8>
    268e:	84 e1       	ldi	r24, 0x14	; 20
    2690:	09 c0       	rjmp	.+18     	; 0x26a4 <nrk_led_toggle+0x1a>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    2692:	81 30       	cpi	r24, 0x01	; 1
    2694:	91 05       	cpc	r25, r1
    2696:	11 f4       	brne	.+4      	; 0x269c <nrk_led_toggle+0x12>
    2698:	8c e1       	ldi	r24, 0x1C	; 28
    269a:	04 c0       	rjmp	.+8      	; 0x26a4 <nrk_led_toggle+0x1a>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    269c:	82 30       	cpi	r24, 0x02	; 2
    269e:	91 05       	cpc	r25, r1
    26a0:	29 f4       	brne	.+10     	; 0x26ac <nrk_led_toggle+0x22>
    26a2:	84 e2       	ldi	r24, 0x24	; 36
    26a4:	0e 94 45 11 	call	0x228a	; 0x228a <nrk_gpio_toggle>
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	08 95       	ret
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    26ac:	83 30       	cpi	r24, 0x03	; 3
    26ae:	91 05       	cpc	r25, r1
    26b0:	11 f0       	breq	.+4      	; 0x26b6 <nrk_led_toggle+0x2c>
    26b2:	8f ef       	ldi	r24, 0xFF	; 255
    26b4:	08 95       	ret
    26b6:	8c e2       	ldi	r24, 0x2C	; 44
    26b8:	0e 94 45 11 	call	0x228a	; 0x228a <nrk_gpio_toggle>
    26bc:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    26be:	08 95       	ret

000026c0 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	11 f4       	brne	.+4      	; 0x26c8 <nrk_led_clr+0x8>
    26c4:	84 e1       	ldi	r24, 0x14	; 20
    26c6:	09 c0       	rjmp	.+18     	; 0x26da <nrk_led_clr+0x1a>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    26c8:	81 30       	cpi	r24, 0x01	; 1
    26ca:	91 05       	cpc	r25, r1
    26cc:	11 f4       	brne	.+4      	; 0x26d2 <nrk_led_clr+0x12>
    26ce:	8c e1       	ldi	r24, 0x1C	; 28
    26d0:	04 c0       	rjmp	.+8      	; 0x26da <nrk_led_clr+0x1a>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    26d2:	82 30       	cpi	r24, 0x02	; 2
    26d4:	91 05       	cpc	r25, r1
    26d6:	29 f4       	brne	.+10     	; 0x26e2 <nrk_led_clr+0x22>
    26d8:	84 e2       	ldi	r24, 0x24	; 36
    26da:	0e 94 18 10 	call	0x2030	; 0x2030 <nrk_gpio_set>
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	08 95       	ret
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    26e2:	83 30       	cpi	r24, 0x03	; 3
    26e4:	91 05       	cpc	r25, r1
    26e6:	11 f0       	breq	.+4      	; 0x26ec <nrk_led_clr+0x2c>
    26e8:	8f ef       	ldi	r24, 0xFF	; 255
    26ea:	08 95       	ret
    26ec:	8c e2       	ldi	r24, 0x2C	; 44
    26ee:	0e 94 18 10 	call	0x2030	; 0x2030 <nrk_gpio_set>
    26f2:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    26f4:	08 95       	ret

000026f6 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	11 f4       	brne	.+4      	; 0x26fe <nrk_led_set+0x8>
    26fa:	84 e1       	ldi	r24, 0x14	; 20
    26fc:	09 c0       	rjmp	.+18     	; 0x2710 <nrk_led_set+0x1a>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    26fe:	81 30       	cpi	r24, 0x01	; 1
    2700:	91 05       	cpc	r25, r1
    2702:	11 f4       	brne	.+4      	; 0x2708 <nrk_led_set+0x12>
    2704:	8c e1       	ldi	r24, 0x1C	; 28
    2706:	04 c0       	rjmp	.+8      	; 0x2710 <nrk_led_set+0x1a>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    2708:	82 30       	cpi	r24, 0x02	; 2
    270a:	91 05       	cpc	r25, r1
    270c:	29 f4       	brne	.+10     	; 0x2718 <nrk_led_set+0x22>
    270e:	84 e2       	ldi	r24, 0x24	; 36
    2710:	0e 94 8e 10 	call	0x211c	; 0x211c <nrk_gpio_clr>
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	08 95       	ret
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    2718:	83 30       	cpi	r24, 0x03	; 3
    271a:	91 05       	cpc	r25, r1
    271c:	11 f0       	breq	.+4      	; 0x2722 <nrk_led_set+0x2c>
    271e:	8f ef       	ldi	r24, 0xFF	; 255
    2720:	08 95       	ret
    2722:	8c e2       	ldi	r24, 0x2C	; 44
    2724:	0e 94 8e 10 	call	0x211c	; 0x211c <nrk_gpio_clr>
    2728:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    272a:	08 95       	ret

0000272c <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    272c:	88 23       	and	r24, r24
    272e:	19 f0       	breq	.+6      	; 0x2736 <nrk_gpio_pullups+0xa>
    2730:	85 b7       	in	r24, 0x35	; 53
    2732:	8f 7e       	andi	r24, 0xEF	; 239
    2734:	02 c0       	rjmp	.+4      	; 0x273a <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    2736:	85 b7       	in	r24, 0x35	; 53
    2738:	80 61       	ori	r24, 0x10	; 16
    273a:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	08 95       	ret

00002740 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    2740:	90 91 c0 00 	lds	r25, 0x00C0
    2744:	95 ff       	sbrs	r25, 5
    2746:	fc cf       	rjmp	.-8      	; 0x2740 <putc0>
    2748:	90 91 c0 00 	lds	r25, 0x00C0
    274c:	9f 7d       	andi	r25, 0xDF	; 223
    274e:	90 93 c0 00 	sts	0x00C0, r25
    2752:	80 93 c6 00 	sts	0x00C6, r24
}
    2756:	08 95       	ret

00002758 <putc1>:

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    2758:	90 91 c8 00 	lds	r25, 0x00C8
    275c:	95 ff       	sbrs	r25, 5
    275e:	fc cf       	rjmp	.-8      	; 0x2758 <putc1>
    2760:	80 93 ce 00 	sts	0x00CE, r24
}
    2764:	08 95       	ret

00002766 <setup_uart0>:

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2766:	90 93 c5 00 	sts	0x00C5, r25
    276a:	80 93 c4 00 	sts	0x00C4, r24
    276e:	86 e0       	ldi	r24, 0x06	; 6
    2770:	80 93 c2 00 	sts	0x00C2, r24
    2774:	e1 ec       	ldi	r30, 0xC1	; 193
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	8b 7f       	andi	r24, 0xFB	; 251
    277c:	80 83       	st	Z, r24
    277e:	a0 ec       	ldi	r26, 0xC0	; 192
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	8c 91       	ld	r24, X
    2784:	82 60       	ori	r24, 0x02	; 2
    2786:	8c 93       	st	X, r24
ENABLE_UART0();
    2788:	80 81       	ld	r24, Z
    278a:	88 61       	ori	r24, 0x18	; 24
    278c:	80 83       	st	Z, r24
}
    278e:	08 95       	ret

00002790 <setup_uart1>:

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2790:	90 93 cd 00 	sts	0x00CD, r25
    2794:	80 93 cc 00 	sts	0x00CC, r24
    2798:	86 e0       	ldi	r24, 0x06	; 6
    279a:	80 93 ca 00 	sts	0x00CA, r24
    279e:	e9 ec       	ldi	r30, 0xC9	; 201
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	8b 7f       	andi	r24, 0xFB	; 251
    27a6:	80 83       	st	Z, r24
    27a8:	a8 ec       	ldi	r26, 0xC8	; 200
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	8c 91       	ld	r24, X
    27ae:	82 60       	ori	r24, 0x02	; 2
    27b0:	8c 93       	st	X, r24
ENABLE_UART1();
    27b2:	80 81       	ld	r24, Z
    27b4:	88 61       	ori	r24, 0x18	; 24
    27b6:	80 83       	st	Z, r24
}
    27b8:	08 95       	ret

000027ba <getc0>:


/* get one char from uart */
char getc0(void){
	unsigned char tmp;
	UART0_WAIT_AND_RECEIVE(tmp);
    27ba:	80 91 c0 00 	lds	r24, 0x00C0
    27be:	87 ff       	sbrs	r24, 7
    27c0:	fc cf       	rjmp	.-8      	; 0x27ba <getc0>
    27c2:	80 91 c0 00 	lds	r24, 0x00C0
    27c6:	8f 77       	andi	r24, 0x7F	; 127
    27c8:	80 93 c0 00 	sts	0x00C0, r24
    27cc:	80 91 c6 00 	lds	r24, 0x00C6
	return tmp;
}
    27d0:	08 95       	ret

000027d2 <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29

  setup_uart1(baudrate);
    27da:	0e 94 c8 13 	call	0x2790	; 0x2790 <setup_uart1>
  //setup_uart0(baudrate);

  stdout = fdevopen( (void *)putc1, (void *)getc1);
    27de:	0c ea       	ldi	r16, 0xAC	; 172
    27e0:	13 e1       	ldi	r17, 0x13	; 19
    27e2:	c0 ef       	ldi	r28, 0xF0	; 240
    27e4:	df e0       	ldi	r29, 0x0F	; 15
    27e6:	c8 01       	movw	r24, r16
    27e8:	be 01       	movw	r22, r28
    27ea:	0e 94 61 29 	call	0x52c2	; 0x52c2 <fdevopen>
    27ee:	90 93 ad 0b 	sts	0x0BAD, r25
    27f2:	80 93 ac 0b 	sts	0x0BAC, r24
  stdin = fdevopen( (void *)putc1, (void *)getc1);
    27f6:	c8 01       	movw	r24, r16
    27f8:	be 01       	movw	r22, r28
    27fa:	0e 94 61 29 	call	0x52c2	; 0x52c2 <fdevopen>
    27fe:	90 93 ab 0b 	sts	0x0BAB, r25
    2802:	80 93 aa 0b 	sts	0x0BAA, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART1_RX_INT();
#endif

}
    2806:	df 91       	pop	r29
    2808:	cf 91       	pop	r28
    280a:	1f 91       	pop	r17
    280c:	0f 91       	pop	r16
    280e:	08 95       	ret

00002810 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	ec 01       	movw	r28, r24
 char c;
   while((c=pgm_read_byte(addr++)))
    2816:	07 c0       	rjmp	.+14     	; 0x2826 <nrk_kprintf+0x16>
        putchar(c);
    2818:	60 91 ac 0b 	lds	r22, 0x0BAC
    281c:	70 91 ad 0b 	lds	r23, 0x0BAD
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	0e 94 ad 29 	call	0x535a	; 0x535a <fputc>
    2826:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
    2828:	21 96       	adiw	r28, 0x01	; 1
    282a:	84 91       	lpm	r24, Z
    282c:	88 23       	and	r24, r24
    282e:	a1 f7       	brne	.-24     	; 0x2818 <nrk_kprintf+0x8>
        putchar(c);
}
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	08 95       	ret

00002836 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	d1 f7       	brne	.-12     	; 0x2836 <halWait>

} // halWait
    2842:	08 95       	ret

00002844 <write_eeprom_current_image_checksum>:
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
  return NRK_OK;
}

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    2844:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    2846:	87 e0       	ldi	r24, 0x07	; 7
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	60 81       	ld	r22, Z
    284c:	0e 94 8c 2a 	call	0x5518	; 0x5518 <__eewr_byte_m1281>
  return NRK_OK;
}
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	08 95       	ret

00002854 <write_eeprom_aes_key>:
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    2854:	0f 93       	push	r16
    2856:	1f 93       	push	r17
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29
    285c:	08 2f       	mov	r16, r24
    285e:	19 2f       	mov	r17, r25
    2860:	c8 e0       	ldi	r28, 0x08	; 8
    2862:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    2864:	ce 01       	movw	r24, r28
    2866:	f8 01       	movw	r30, r16
    2868:	61 91       	ld	r22, Z+
    286a:	8f 01       	movw	r16, r30
    286c:	0e 94 8c 2a 	call	0x5518	; 0x5518 <__eewr_byte_m1281>
    2870:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2872:	c8 31       	cpi	r28, 0x18	; 24
    2874:	d1 05       	cpc	r29, r1
    2876:	b1 f7       	brne	.-20     	; 0x2864 <write_eeprom_aes_key+0x10>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	df 91       	pop	r29
    287c:	cf 91       	pop	r28
    287e:	1f 91       	pop	r17
    2880:	0f 91       	pop	r16
    2882:	08 95       	ret

00002884 <write_eeprom_load_img_pages>:
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
return NRK_OK;
}

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
    2884:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    2886:	86 e0       	ldi	r24, 0x06	; 6
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	60 81       	ld	r22, Z
    288c:	0e 94 8c 2a 	call	0x5518	; 0x5518 <__eewr_byte_m1281>
  return NRK_OK;
}
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	08 95       	ret

00002894 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    2894:	0e 94 8c 2a 	call	0x5518	; 0x5518 <__eewr_byte_m1281>
}
    2898:	08 95       	ret

0000289a <read_eeprom_current_image_checksum>:
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    28a0:	87 e0       	ldi	r24, 0x07	; 7
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 84 2a 	call	0x5508	; 0x5508 <__eerd_byte_m1281>
    28a8:	88 83       	st	Y, r24
  return NRK_OK;
}
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	08 95       	ret

000028b2 <read_eeprom_aes_key>:
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
  return NRK_OK;
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    28b2:	0f 93       	push	r16
    28b4:	1f 93       	push	r17
    28b6:	cf 93       	push	r28
    28b8:	df 93       	push	r29
    28ba:	08 2f       	mov	r16, r24
    28bc:	19 2f       	mov	r17, r25
    28be:	c8 e0       	ldi	r28, 0x08	; 8
    28c0:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    28c2:	ce 01       	movw	r24, r28
    28c4:	0e 94 84 2a 	call	0x5508	; 0x5508 <__eerd_byte_m1281>
    28c8:	f8 01       	movw	r30, r16
    28ca:	81 93       	st	Z+, r24
    28cc:	8f 01       	movw	r16, r30
    28ce:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    28d0:	c8 31       	cpi	r28, 0x18	; 24
    28d2:	d1 05       	cpc	r29, r1
    28d4:	b1 f7       	brne	.-20     	; 0x28c2 <read_eeprom_aes_key+0x10>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	1f 91       	pop	r17
    28de:	0f 91       	pop	r16
    28e0:	08 95       	ret

000028e2 <read_eeprom_load_img_pages>:
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
  return NRK_OK;
}

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    28e8:	86 e0       	ldi	r24, 0x06	; 6
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	0e 94 84 2a 	call	0x5508	; 0x5508 <__eerd_byte_m1281>
    28f0:	88 83       	st	Y, r24
  return NRK_OK;
}
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	08 95       	ret

000028fa <read_eeprom_channel>:

return NRK_ERROR;
}

int8_t read_eeprom_channel(uint8_t *channel)
{
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    2900:	85 e0       	ldi	r24, 0x05	; 5
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	0e 94 84 2a 	call	0x5508	; 0x5508 <__eerd_byte_m1281>
    2908:	88 83       	st	Y, r24
return NRK_OK;
}
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	df 91       	pop	r29
    290e:	cf 91       	pop	r28
    2910:	08 95       	ret

00002912 <read_eeprom_mac_address>:
{
eeprom_write_byte( (uint8_t*)addr, value );
}

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    2912:	ef 92       	push	r14
    2914:	ff 92       	push	r15
    2916:	0f 93       	push	r16
    2918:	1f 93       	push	r17
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
    291e:	e8 2e       	mov	r14, r24
    2920:	e7 01       	movw	r28, r14
    2922:	7e 01       	movw	r14, r28
    2924:	f9 2e       	mov	r15, r25
    2926:	e7 01       	movw	r28, r14
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	0e 94 84 2a 	call	0x5508	; 0x5508 <__eerd_byte_m1281>
    2930:	08 2f       	mov	r16, r24
    2932:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 84 2a 	call	0x5508	; 0x5508 <__eerd_byte_m1281>
    293c:	e8 2e       	mov	r14, r24
    293e:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	0e 94 84 2a 	call	0x5508	; 0x5508 <__eerd_byte_m1281>
    2948:	f8 2e       	mov	r15, r24
    294a:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    294c:	83 e0       	ldi	r24, 0x03	; 3
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	0e 94 84 2a 	call	0x5508	; 0x5508 <__eerd_byte_m1281>
    2954:	18 2f       	mov	r17, r24
    2956:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    2958:	84 e0       	ldi	r24, 0x04	; 4
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0e 94 84 2a 	call	0x5508	; 0x5508 <__eerd_byte_m1281>
ct=buf[0];
ct+=buf[1];
    2960:	fe 0c       	add	r15, r14
ct+=buf[2];
    2962:	f0 0e       	add	r15, r16
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    2964:	f1 0e       	add	r15, r17
    2966:	8f 15       	cp	r24, r15
    2968:	11 f0       	breq	.+4      	; 0x296e <read_eeprom_mac_address+0x5c>
    296a:	8f ef       	ldi	r24, 0xFF	; 255
    296c:	01 c0       	rjmp	.+2      	; 0x2970 <read_eeprom_mac_address+0x5e>
    296e:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	ff 90       	pop	r15
    297a:	ef 90       	pop	r14
    297c:	08 95       	ret

0000297e <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    297e:	0e 94 84 2a 	call	0x5508	; 0x5508 <__eerd_byte_m1281>
return v;
}
    2982:	08 95       	ret

00002984 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    2984:	f8 94       	cli
};
    2986:	08 95       	ret

00002988 <nrk_int_enable>:

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    2988:	78 94       	sei
};
    298a:	08 95       	ret

0000298c <nrk_halt>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    298c:	f8 94       	cli
    298e:	ff cf       	rjmp	.-2      	; 0x298e <nrk_halt+0x2>

00002990 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    2990:	85 e6       	ldi	r24, 0x65	; 101
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	08 95       	ret

00002996 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    2996:	0e 94 ae 21 	call	0x435c	; 0x435c <_nrk_scheduler>

  	return;
}
    299a:	08 95       	ret

0000299c <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    299c:	cf 92       	push	r12
    299e:	df 92       	push	r13
    29a0:	ef 92       	push	r14
    29a2:	ff 92       	push	r15
    29a4:	0f 93       	push	r16
    29a6:	1f 93       	push	r17
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	ec 01       	movw	r28, r24
    29ae:	6b 01       	movw	r12, r22
    29b0:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    29b2:	89 85       	ldd	r24, Y+9	; 0x09
    29b4:	82 30       	cpi	r24, 0x02	; 2
    29b6:	21 f0       	breq	.+8      	; 0x29c0 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    29b8:	80 91 70 0b 	lds	r24, 0x0B70
    29bc:	88 83       	st	Y, r24
    29be:	01 c0       	rjmp	.+2      	; 0x29c2 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    29c0:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    29c2:	80 91 70 0b 	lds	r24, 0x0B70
    29c6:	85 30       	cpi	r24, 0x05	; 5
    29c8:	20 f0       	brcs	.+8      	; 0x29d2 <nrk_TCB_init+0x36>
    29ca:	87 e0       	ldi	r24, 0x07	; 7
    29cc:	60 e0       	ldi	r22, 0x00	; 0
    29ce:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    29d2:	89 85       	ldd	r24, Y+9	; 0x09
    29d4:	82 30       	cpi	r24, 0x02	; 2
    29d6:	29 f0       	breq	.+10     	; 0x29e2 <nrk_TCB_init+0x46>
    29d8:	80 91 70 0b 	lds	r24, 0x0B70
    29dc:	8f 5f       	subi	r24, 0xFF	; 255
    29de:	80 93 70 0b 	sts	0x0B70, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    29e2:	80 91 70 0b 	lds	r24, 0x0B70
    29e6:	88 23       	and	r24, r24
    29e8:	19 f4       	brne	.+6      	; 0x29f0 <nrk_TCB_init+0x54>
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	80 93 70 0b 	sts	0x0B70, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    29f0:	88 81       	ld	r24, Y
    29f2:	28 2f       	mov	r18, r24
    29f4:	33 27       	eor	r19, r19
    29f6:	27 fd       	sbrc	r18, 7
    29f8:	30 95       	com	r19
    29fa:	89 01       	movw	r16, r18
    29fc:	55 e0       	ldi	r21, 0x05	; 5
    29fe:	00 0f       	add	r16, r16
    2a00:	11 1f       	adc	r17, r17
    2a02:	5a 95       	dec	r21
    2a04:	e1 f7       	brne	.-8      	; 0x29fe <nrk_TCB_init+0x62>
    2a06:	02 0f       	add	r16, r18
    2a08:	13 1f       	adc	r17, r19
    2a0a:	0a 53       	subi	r16, 0x3A	; 58
    2a0c:	15 4f       	sbci	r17, 0xF5	; 245
    2a0e:	f8 01       	movw	r30, r16
    2a10:	d1 82       	std	Z+1, r13	; 0x01
    2a12:	c0 82       	st	Z, r12
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    2a14:	98 85       	ldd	r25, Y+8	; 0x08
    2a16:	92 87       	std	Z+10, r25	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    2a18:	93 e0       	ldi	r25, 0x03	; 3
    2a1a:	91 87       	std	Z+9, r25	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    2a1c:	80 87       	std	Z+8, r24	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    2a1e:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( Task->period );
    2a20:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a22:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a24:	4d 85       	ldd	r20, Y+13	; 0x0d
    2a26:	5e 85       	ldd	r21, Y+14	; 0x0e
    2a28:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a2a:	78 89       	ldd	r23, Y+16	; 0x10
    2a2c:	89 89       	ldd	r24, Y+17	; 0x11
    2a2e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a30:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <_nrk_time_to_ticks>
    2a34:	f8 01       	movw	r30, r16
    2a36:	94 8f       	std	Z+28, r25	; 0x1c
    2a38:	83 8f       	std	Z+27, r24	; 0x1b
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( Task->offset);
    2a3a:	08 81       	ld	r16, Y
    2a3c:	11 27       	eor	r17, r17
    2a3e:	07 fd       	sbrc	r16, 7
    2a40:	10 95       	com	r17
    2a42:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2a44:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2a46:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2a48:	5e 8d       	ldd	r21, Y+30	; 0x1e
    2a4a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a4c:	78 a1       	ldd	r23, Y+32	; 0x20
    2a4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a50:	9a a1       	ldd	r25, Y+34	; 0x22
    2a52:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <_nrk_time_to_ticks>
    2a56:	f8 01       	movw	r30, r16
    2a58:	45 e0       	ldi	r20, 0x05	; 5
    2a5a:	ee 0f       	add	r30, r30
    2a5c:	ff 1f       	adc	r31, r31
    2a5e:	4a 95       	dec	r20
    2a60:	e1 f7       	brne	.-8      	; 0x2a5a <nrk_TCB_init+0xbe>
    2a62:	e0 0f       	add	r30, r16
    2a64:	f1 1f       	adc	r31, r17
    2a66:	ea 53       	subi	r30, 0x3A	; 58
    2a68:	f5 4f       	sbci	r31, 0xF5	; 245
    2a6a:	96 8b       	std	Z+22, r25	; 0x16
    2a6c:	85 8b       	std	Z+21, r24	; 0x15
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    2a6e:	88 81       	ld	r24, Y
    2a70:	99 27       	eor	r25, r25
    2a72:	87 fd       	sbrc	r24, 7
    2a74:	90 95       	com	r25
    2a76:	8c 01       	movw	r16, r24
    2a78:	35 e0       	ldi	r19, 0x05	; 5
    2a7a:	00 0f       	add	r16, r16
    2a7c:	11 1f       	adc	r17, r17
    2a7e:	3a 95       	dec	r19
    2a80:	e1 f7       	brne	.-8      	; 0x2a7a <nrk_TCB_init+0xde>
    2a82:	08 0f       	add	r16, r24
    2a84:	19 1f       	adc	r17, r25
    2a86:	0a 53       	subi	r16, 0x3A	; 58
    2a88:	15 4f       	sbci	r17, 0xF5	; 245
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	85 89       	ldd	r24, Z+21	; 0x15
    2a8e:	96 89       	ldd	r25, Z+22	; 0x16
    2a90:	23 8d       	ldd	r18, Z+27	; 0x1b
    2a92:	34 8d       	ldd	r19, Z+28	; 0x1c
    2a94:	82 0f       	add	r24, r18
    2a96:	93 1f       	adc	r25, r19
    2a98:	90 8f       	std	Z+24, r25	; 0x18
    2a9a:	87 8b       	std	Z+23, r24	; 0x17
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(Task->cpu_reserve);
    2a9c:	2b 89       	ldd	r18, Y+19	; 0x13
    2a9e:	3c 89       	ldd	r19, Y+20	; 0x14
    2aa0:	4d 89       	ldd	r20, Y+21	; 0x15
    2aa2:	5e 89       	ldd	r21, Y+22	; 0x16
    2aa4:	6f 89       	ldd	r22, Y+23	; 0x17
    2aa6:	78 8d       	ldd	r23, Y+24	; 0x18
    2aa8:	89 8d       	ldd	r24, Y+25	; 0x19
    2aaa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2aac:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <_nrk_time_to_ticks>
    2ab0:	f8 01       	movw	r30, r16
    2ab2:	96 8f       	std	Z+30, r25	; 0x1e
    2ab4:	85 8f       	std	Z+29, r24	; 0x1d
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    2ab6:	88 81       	ld	r24, Y
    2ab8:	99 27       	eor	r25, r25
    2aba:	87 fd       	sbrc	r24, 7
    2abc:	90 95       	com	r25
    2abe:	fc 01       	movw	r30, r24
    2ac0:	25 e0       	ldi	r18, 0x05	; 5
    2ac2:	ee 0f       	add	r30, r30
    2ac4:	ff 1f       	adc	r31, r31
    2ac6:	2a 95       	dec	r18
    2ac8:	e1 f7       	brne	.-8      	; 0x2ac2 <nrk_TCB_init+0x126>
    2aca:	e8 0f       	add	r30, r24
    2acc:	f9 1f       	adc	r31, r25
    2ace:	ea 53       	subi	r30, 0x3A	; 58
    2ad0:	f5 4f       	sbci	r31, 0xF5	; 245
    2ad2:	85 8d       	ldd	r24, Z+29	; 0x1d
    2ad4:	96 8d       	ldd	r25, Z+30	; 0x1e
    2ad6:	92 8f       	std	Z+26, r25	; 0x1a
    2ad8:	81 8f       	std	Z+25, r24	; 0x19
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	90 a3       	std	Z+32, r25	; 0x20
    2ae0:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    2ae2:	f3 82       	std	Z+3, r15	; 0x03
    2ae4:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    2aea:	df 91       	pop	r29
    2aec:	cf 91       	pop	r28
    2aee:	1f 91       	pop	r17
    2af0:	0f 91       	pop	r16
    2af2:	ff 90       	pop	r15
    2af4:	ef 90       	pop	r14
    2af6:	df 90       	pop	r13
    2af8:	cf 90       	pop	r12
    2afa:	08 95       	ret

00002afc <nrk_start>:




void nrk_start (void)
{
    2afc:	df 92       	push	r13
    2afe:	ef 92       	push	r14
    2b00:	ff 92       	push	r15
    2b02:	0f 93       	push	r16
    2b04:	1f 93       	push	r17
    2b06:	cf 93       	push	r28
    2b08:	df 93       	push	r29
    2b0a:	ce ec       	ldi	r28, 0xCE	; 206
    2b0c:	da e0       	ldi	r29, 0x0A	; 10
    2b0e:	10 e0       	ldi	r17, 0x00	; 0
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2b10:	d8 80       	ld	r13, Y
	// only check activated tasks
	if(task_ID!=-1)
    2b12:	8f ef       	ldi	r24, 0xFF	; 255
    2b14:	d8 16       	cp	r13, r24
    2b16:	b1 f0       	breq	.+44     	; 0x2b44 <nrk_start+0x48>
    2b18:	7e ec       	ldi	r23, 0xCE	; 206
    2b1a:	e7 2e       	mov	r14, r23
    2b1c:	7a e0       	ldi	r23, 0x0A	; 10
    2b1e:	f7 2e       	mov	r15, r23
    2b20:	00 e0       	ldi	r16, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2b22:	10 17       	cp	r17, r16
    2b24:	41 f0       	breq	.+16     	; 0x2b36 <nrk_start+0x3a>
    2b26:	f7 01       	movw	r30, r14
    2b28:	80 81       	ld	r24, Z
    2b2a:	d8 16       	cp	r13, r24
    2b2c:	21 f4       	brne	.+8      	; 0x2b36 <nrk_start+0x3a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    2b2e:	85 e0       	ldi	r24, 0x05	; 5
    2b30:	6d 2d       	mov	r22, r13
    2b32:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    2b36:	0f 5f       	subi	r16, 0xFF	; 255
    2b38:	81 e2       	ldi	r24, 0x21	; 33
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	e8 0e       	add	r14, r24
    2b3e:	f9 1e       	adc	r15, r25
    2b40:	05 30       	cpi	r16, 0x05	; 5
    2b42:	79 f7       	brne	.-34     	; 0x2b22 <nrk_start+0x26>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    2b44:	1f 5f       	subi	r17, 0xFF	; 255
    2b46:	a1 96       	adiw	r28, 0x21	; 33
    2b48:	15 30       	cpi	r17, 0x05	; 5
    2b4a:	11 f7       	brne	.-60     	; 0x2b10 <nrk_start+0x14>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    2b4c:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    2b50:	28 2f       	mov	r18, r24
    2b52:	33 27       	eor	r19, r19
    2b54:	27 fd       	sbrc	r18, 7
    2b56:	30 95       	com	r19
    2b58:	f9 01       	movw	r30, r18
    2b5a:	65 e0       	ldi	r22, 0x05	; 5
    2b5c:	ee 0f       	add	r30, r30
    2b5e:	ff 1f       	adc	r31, r31
    2b60:	6a 95       	dec	r22
    2b62:	e1 f7       	brne	.-8      	; 0x2b5c <nrk_start+0x60>
    2b64:	e2 0f       	add	r30, r18
    2b66:	f3 1f       	adc	r31, r19
    2b68:	ea 53       	subi	r30, 0x3A	; 58
    2b6a:	f5 4f       	sbci	r31, 0xF5	; 245
    2b6c:	22 85       	ldd	r18, Z+10	; 0x0a
    2b6e:	20 93 83 0b 	sts	0x0B83, r18
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    2b72:	91 e2       	ldi	r25, 0x21	; 33
    2b74:	89 02       	muls	r24, r25
    2b76:	c0 01       	movw	r24, r0
    2b78:	11 24       	eor	r1, r1
    2b7a:	8a 53       	subi	r24, 0x3A	; 58
    2b7c:	95 4f       	sbci	r25, 0xF5	; 245
    2b7e:	90 93 82 0b 	sts	0x0B82, r25
    2b82:	80 93 81 0b 	sts	0x0B81, r24
    2b86:	90 93 73 0b 	sts	0x0B73, r25
    2b8a:	80 93 72 0b 	sts	0x0B72, r24
    nrk_cur_task_prio = nrk_high_ready_prio;
    2b8e:	20 93 74 0b 	sts	0x0B74, r18
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2b92:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <nrk_target_start>
    nrk_stack_pointer_init(); 
    2b96:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    2b9a:	0e 94 84 27 	call	0x4f08	; 0x4f08 <nrk_start_high_ready_task>
    2b9e:	ff cf       	rjmp	.-2      	; 0x2b9e <nrk_start+0xa2>

00002ba0 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    2ba0:	0f 93       	push	r16
    2ba2:	1f 93       	push	r17
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	a3 97       	sbiw	r28, 0x23	; 35
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	f8 94       	cli
    2bb2:	de bf       	out	0x3e, r29	; 62
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    2bb8:	0e 94 5e 18 	call	0x30bc	; 0x30bc <nrk_signal_create>
    2bbc:	80 93 71 0b 	sts	0x0B71, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    2bc0:	8f 3f       	cpi	r24, 0xFF	; 255
    2bc2:	21 f4       	brne	.+8      	; 0x2bcc <nrk_init+0x2c>
    2bc4:	8e e0       	ldi	r24, 0x0E	; 14
    2bc6:	60 e0       	ldi	r22, 0x00	; 0
    2bc8:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <nrk_kernel_error_add>
	
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
   if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
    2bcc:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_nrk_startup_ok>
    2bd0:	88 23       	and	r24, r24
    2bd2:	21 f4       	brne	.+8      	; 0x2bdc <nrk_init+0x3c>
    2bd4:	86 e0       	ldi	r24, 0x06	; 6
    2bd6:	60 e0       	ldi	r22, 0x00	; 0
    2bd8:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    2bdc:	10 92 74 0b 	sts	0x0B74, r1
    nrk_cur_task_TCB = NULL;
    2be0:	10 92 82 0b 	sts	0x0B82, r1
    2be4:	10 92 81 0b 	sts	0x0B81, r1
    
    nrk_high_ready_TCB = NULL;
    2be8:	10 92 73 0b 	sts	0x0B73, r1
    2bec:	10 92 72 0b 	sts	0x0B72, r1
    nrk_high_ready_prio = 0; 
    2bf0:	10 92 83 0b 	sts	0x0B83, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    2bf4:	10 92 80 0b 	sts	0x0B80, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2bf8:	8f ef       	ldi	r24, 0xFF	; 255
    2bfa:	80 93 6d 0b 	sts	0x0B6D, r24
    nrk_sem_list[i].value=-1;
    2bfe:	80 93 6f 0b 	sts	0x0B6F, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2c02:	80 93 6e 0b 	sts	0x0B6E, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2c06:	93 e6       	ldi	r25, 0x63	; 99
    2c08:	90 93 d0 0a 	sts	0x0AD0, r25
        nrk_task_TCB[i].task_ID = -1; 
    2c0c:	80 93 ce 0a 	sts	0x0ACE, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2c10:	90 93 f1 0a 	sts	0x0AF1, r25
        nrk_task_TCB[i].task_ID = -1; 
    2c14:	80 93 ef 0a 	sts	0x0AEF, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2c18:	90 93 12 0b 	sts	0x0B12, r25
        nrk_task_TCB[i].task_ID = -1; 
    2c1c:	80 93 10 0b 	sts	0x0B10, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2c20:	90 93 33 0b 	sts	0x0B33, r25
        nrk_task_TCB[i].task_ID = -1; 
    2c24:	80 93 31 0b 	sts	0x0B31, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2c28:	90 93 54 0b 	sts	0x0B54, r25
        nrk_task_TCB[i].task_ID = -1; 
    2c2c:	80 93 52 0b 	sts	0x0B52, r24
    2c30:	e4 e8       	ldi	r30, 0x84	; 132
    2c32:	fb e0       	ldi	r31, 0x0B	; 11
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
    2c34:	cf 01       	movw	r24, r30
    2c36:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2c38:	94 83       	std	Z+4, r25	; 0x04
    2c3a:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2c3c:	f7 83       	std	Z+7, r31	; 0x07
    2c3e:	e6 83       	std	Z+6, r30	; 0x06
    2c40:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    2c42:	8b e0       	ldi	r24, 0x0B	; 11
    2c44:	ed 39       	cpi	r30, 0x9D	; 157
    2c46:	f8 07       	cpc	r31, r24
    2c48:	a9 f7       	brne	.-22     	; 0x2c34 <nrk_init+0x94>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    2c4a:	10 92 86 0b 	sts	0x0B86, r1
    2c4e:	10 92 85 0b 	sts	0x0B85, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    2c52:	10 92 a1 0b 	sts	0x0BA1, r1
    2c56:	10 92 a0 0b 	sts	0x0BA0, r1
	_head_node = NULL;
    2c5a:	10 92 77 0b 	sts	0x0B77, r1
    2c5e:	10 92 76 0b 	sts	0x0B76, r1
	_free_node = &_nrk_readyQ[0];
    2c62:	79 97       	sbiw	r30, 0x19	; 25
    2c64:	f0 93 c5 0a 	sts	0x0AC5, r31
    2c68:	e0 93 c4 0a 	sts	0x0AC4, r30
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    2c6c:	8e 01       	movw	r16, r28
    2c6e:	0f 5f       	subi	r16, 0xFF	; 255
    2c70:	1f 4f       	sbci	r17, 0xFF	; 255
    2c72:	c8 01       	movw	r24, r16
    2c74:	63 e9       	ldi	r22, 0x93	; 147
    2c76:	71 e2       	ldi	r23, 0x21	; 33
    2c78:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    2c7c:	c8 01       	movw	r24, r16
    2c7e:	66 e0       	ldi	r22, 0x06	; 6
    2c80:	79 e0       	ldi	r23, 0x09	; 9
    2c82:	40 e8       	ldi	r20, 0x80	; 128
    2c84:	50 e0       	ldi	r21, 0x00	; 0
    2c86:	0e 94 65 27 	call	0x4eca	; 0x4eca <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    2c8a:	85 e5       	ldi	r24, 0x55	; 85
    2c8c:	80 93 06 09 	sts	0x0906, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    2c90:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.offset.secs = 0;
    2c92:	1c 8e       	std	Y+28, r1	; 0x1c
    2c94:	1d 8e       	std	Y+29, r1	; 0x1d
    2c96:	1e 8e       	std	Y+30, r1	; 0x1e
    2c98:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    2c9a:	18 a2       	std	Y+32, r1	; 0x20
    2c9c:	19 a2       	std	Y+33, r1	; 0x21
    2c9e:	1a a2       	std	Y+34, r1	; 0x22
    2ca0:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2ca6:	92 e0       	ldi	r25, 0x02	; 2
    2ca8:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    2caa:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    2cac:	c8 01       	movw	r24, r16
    2cae:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <nrk_activate_task>
	
}
    2cb2:	a3 96       	adiw	r28, 0x23	; 35
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	1f 91       	pop	r17
    2cc4:	0f 91       	pop	r16
    2cc6:	08 95       	ret

00002cc8 <_nrk_errno_set>:
#include <nrk_cfg.h>
#include <nrk_timer.h>

void _nrk_errno_set (NRK_ERRNO error_code) 
{
  nrk_cur_task_TCB->errno = error_code;
    2cc8:	e0 91 81 0b 	lds	r30, 0x0B81
    2ccc:	f0 91 82 0b 	lds	r31, 0x0B82
    2cd0:	84 87       	std	Z+12, r24	; 0x0c
} 
    2cd2:	08 95       	ret

00002cd4 <nrk_errno_get>:

uint8_t nrk_errno_get () 
{
    2cd4:	e0 91 81 0b 	lds	r30, 0x0B81
    2cd8:	f0 91 82 0b 	lds	r31, 0x0B82
  return nrk_cur_task_TCB->errno;
}
    2cdc:	84 85       	ldd	r24, Z+12	; 0x0c
    2cde:	08 95       	ret

00002ce0 <nrk_error_get>:
} 


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code) 
{
  if (error_num == 0)
    2ce0:	20 91 05 09 	lds	r18, 0x0905
    2ce4:	22 23       	and	r18, r18
    2ce6:	11 f4       	brne	.+4      	; 0x2cec <nrk_error_get+0xc>
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	08 95       	ret
    return 0;
  *code = error_num;
    2cec:	fb 01       	movw	r30, r22
    2cee:	20 83       	st	Z, r18
  *task_id = error_task;
    2cf0:	20 91 89 04 	lds	r18, 0x0489
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	20 83       	st	Z, r18
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
  return 1;
}
    2cfa:	08 95       	ret

00002cfc <nrk_error_print>:

int8_t nrk_error_print () 
{
    2cfc:	1f 93       	push	r17
  int8_t t;
  if (error_num == 0)
    2cfe:	80 91 05 09 	lds	r24, 0x0905
    2d02:	88 23       	and	r24, r24
    2d04:	11 f4       	brne	.+4      	; 0x2d0a <nrk_error_print+0xe>
    }
  
#endif  /*  */
    error_num = 0;
  return t;
}
    2d06:	1f 91       	pop	r17
    2d08:	08 95       	ret
  int8_t t;
  if (error_num == 0)
    return 0;
 
   #ifdef NRK_HALT_ON_ERROR
     nrk_int_disable ();
    2d0a:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>
         nrk_watchdog_disable();
       #endif
   #endif 

   #ifndef NRK_REBOOT_ON_ERROR
      nrk_int_disable ();
    2d0e:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>
  while (1)
     {
    
#endif  
    
    nrk_kprintf (PSTR ("*NRK ERROR("));
    2d12:	8c ea       	ldi	r24, 0xAC	; 172
    2d14:	92 e0       	ldi	r25, 0x02	; 2
    2d16:	0e 94 08 14 	call	0x2810	; 0x2810 <nrk_kprintf>
    printf ("%d", error_task);
    2d1a:	00 d0       	rcall	.+0      	; 0x2d1c <nrk_error_print+0x20>
    2d1c:	00 d0       	rcall	.+0      	; 0x2d1e <nrk_error_print+0x22>
    2d1e:	ed b7       	in	r30, 0x3d	; 61
    2d20:	fe b7       	in	r31, 0x3e	; 62
    2d22:	31 96       	adiw	r30, 0x01	; 1
    2d24:	8c e0       	ldi	r24, 0x0C	; 12
    2d26:	93 e0       	ldi	r25, 0x03	; 3
    2d28:	ad b7       	in	r26, 0x3d	; 61
    2d2a:	be b7       	in	r27, 0x3e	; 62
    2d2c:	12 96       	adiw	r26, 0x02	; 2
    2d2e:	9c 93       	st	X, r25
    2d30:	8e 93       	st	-X, r24
    2d32:	11 97       	sbiw	r26, 0x01	; 1
    2d34:	80 91 89 04 	lds	r24, 0x0489
    2d38:	82 83       	std	Z+2, r24	; 0x02
    2d3a:	13 82       	std	Z+3, r1	; 0x03
    2d3c:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
    nrk_kprintf (PSTR ("): "));
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	88 ea       	ldi	r24, 0xA8	; 168
    2d4a:	92 e0       	ldi	r25, 0x02	; 2
    2d4c:	0e 94 08 14 	call	0x2810	; 0x2810 <nrk_kprintf>
    if (error_num > NRK_NUM_ERRORS)
    2d50:	80 91 05 09 	lds	r24, 0x0905
    2d54:	84 31       	cpi	r24, 0x14	; 20
    2d56:	10 f0       	brcs	.+4      	; 0x2d5c <nrk_error_print+0x60>
      error_num = NRK_UNKOWN;
    2d58:	10 92 05 09 	sts	0x0905, r1
    switch (error_num)
    2d5c:	e0 91 05 09 	lds	r30, 0x0905
    2d60:	8e 2f       	mov	r24, r30
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	fc 01       	movw	r30, r24
    2d66:	31 97       	sbiw	r30, 0x01	; 1
    2d68:	e2 31       	cpi	r30, 0x12	; 18
    2d6a:	f1 05       	cpc	r31, r1
    2d6c:	f0 f5       	brcc	.+124    	; 0x2dea <nrk_error_print+0xee>
    2d6e:	ea 59       	subi	r30, 0x9A	; 154
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	ee 0f       	add	r30, r30
    2d74:	ff 1f       	adc	r31, r31
    2d76:	05 90       	lpm	r0, Z+
    2d78:	f4 91       	lpm	r31, Z
    2d7a:	e0 2d       	mov	r30, r0
    2d7c:	09 94       	ijmp
       {
    case NRK_STACK_TOO_SMALL:
      nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    2d7e:	81 e8       	ldi	r24, 0x81	; 129
    2d80:	92 e0       	ldi	r25, 0x02	; 2
    2d82:	35 c0       	rjmp	.+106    	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_STACK_OVERFLOW:
      nrk_kprintf (PSTR ("Task Stack Overflow"));
    2d84:	8d e6       	ldi	r24, 0x6D	; 109
    2d86:	92 e0       	ldi	r25, 0x02	; 2
    2d88:	32 c0       	rjmp	.+100    	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_INVALID_STACK_POINTER:
      nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    2d8a:	87 e5       	ldi	r24, 0x57	; 87
    2d8c:	92 e0       	ldi	r25, 0x02	; 2
    2d8e:	2f c0       	rjmp	.+94     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_RESERVE_ERROR:
      nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    2d90:	8c e3       	ldi	r24, 0x3C	; 60
    2d92:	92 e0       	ldi	r25, 0x02	; 2
    2d94:	2c c0       	rjmp	.+88     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_RESERVE_VIOLATED:
      nrk_kprintf (PSTR ("Task Reserve Violated"));
    2d96:	86 e2       	ldi	r24, 0x26	; 38
    2d98:	92 e0       	ldi	r25, 0x02	; 2
    2d9a:	29 c0       	rjmp	.+82     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_WAKEUP_MISSED:
      nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    2d9c:	8e e0       	ldi	r24, 0x0E	; 14
    2d9e:	92 e0       	ldi	r25, 0x02	; 2
    2da0:	26 c0       	rjmp	.+76     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_DUP_TASK_ID:
      nrk_kprintf (PSTR ("Duplicated Task ID"));
    2da2:	8b ef       	ldi	r24, 0xFB	; 251
    2da4:	91 e0       	ldi	r25, 0x01	; 1
    2da6:	23 c0       	rjmp	.+70     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_BAD_STARTUP:
      nrk_kprintf (PSTR ("Unexpected Restart"));
    2da8:	88 ee       	ldi	r24, 0xE8	; 232
    2daa:	91 e0       	ldi	r25, 0x01	; 1
    2dac:	20 c0       	rjmp	.+64     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_STACK_SMASH:
      nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    2dae:	8a ec       	ldi	r24, 0xCA	; 202
    2db0:	91 e0       	ldi	r25, 0x01	; 1
    2db2:	1d c0       	rjmp	.+58     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_EXTRA_TASK:
      nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    2db4:	85 ea       	ldi	r24, 0xA5	; 165
    2db6:	91 e0       	ldi	r25, 0x01	; 1
    2db8:	1a c0       	rjmp	.+52     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_LOW_VOLTAGE:
      nrk_kprintf (PSTR ("Low Voltage"));
    2dba:	89 e9       	ldi	r24, 0x99	; 153
    2dbc:	91 e0       	ldi	r25, 0x01	; 1
    2dbe:	17 c0       	rjmp	.+46     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_SEG_FAULT:
      nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    2dc0:	8e e7       	ldi	r24, 0x7E	; 126
    2dc2:	91 e0       	ldi	r25, 0x01	; 1
    2dc4:	14 c0       	rjmp	.+40     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_TIMER_OVERFLOW:
      nrk_kprintf (PSTR ("Timer Overflow"));
    2dc6:	8f e6       	ldi	r24, 0x6F	; 111
    2dc8:	91 e0       	ldi	r25, 0x01	; 1
    2dca:	11 c0       	rjmp	.+34     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_WATCHDOG_ERROR:
      nrk_kprintf (PSTR ("Watchdog Restart"));
    2dcc:	8e e5       	ldi	r24, 0x5E	; 94
    2dce:	91 e0       	ldi	r25, 0x01	; 1
    2dd0:	0e c0       	rjmp	.+28     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_DEVICE_DRIVER:
      nrk_kprintf (PSTR ("Device Driver Error"));
    2dd2:	8a e4       	ldi	r24, 0x4A	; 74
    2dd4:	91 e0       	ldi	r25, 0x01	; 1
    2dd6:	0b c0       	rjmp	.+22     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_UNIMPLEMENTED:
      nrk_kprintf (PSTR ("Kernel function not implemented"));
    2dd8:	8a e2       	ldi	r24, 0x2A	; 42
    2dda:	91 e0       	ldi	r25, 0x01	; 1
    2ddc:	08 c0       	rjmp	.+16     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_SIGNAL_CREATE_ERROR:
      nrk_kprintf (PSTR ("Failed to create Signal"));
    2dde:	82 e1       	ldi	r24, 0x12	; 18
    2de0:	91 e0       	ldi	r25, 0x01	; 1
    2de2:	05 c0       	rjmp	.+10     	; 0x2dee <nrk_error_print+0xf2>
      break;
    case NRK_SEMAPHORE_CREATE_ERROR:
      nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2de4:	87 ef       	ldi	r24, 0xF7	; 247
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	02 c0       	rjmp	.+4      	; 0x2dee <nrk_error_print+0xf2>
      break;
    default:
      nrk_kprintf (PSTR ("UNKOWN"));
    2dea:	80 ef       	ldi	r24, 0xF0	; 240
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	0e 94 08 14 	call	0x2810	; 0x2810 <nrk_kprintf>
      }
    putchar ('\r');
    2df2:	60 91 ac 0b 	lds	r22, 0x0BAC
    2df6:	70 91 ad 0b 	lds	r23, 0x0BAD
    2dfa:	8d e0       	ldi	r24, 0x0D	; 13
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	0e 94 ad 29 	call	0x535a	; 0x535a <fputc>
    putchar ('\n');
    2e02:	60 91 ac 0b 	lds	r22, 0x0BAC
    2e06:	70 91 ad 0b 	lds	r23, 0x0BAD
    2e0a:	8a e0       	ldi	r24, 0x0A	; 10
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	0e 94 ad 29 	call	0x535a	; 0x535a <fputc>
#endif  /*  */
    
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    nrk_led_set (2);
    2e12:	82 e0       	ldi	r24, 0x02	; 2
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <nrk_led_set>
    nrk_led_clr (3);
    2e1a:	83 e0       	ldi	r24, 0x03	; 3
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	0e 94 60 13 	call	0x26c0	; 0x26c0 <nrk_led_clr>
    2e22:	10 e0       	ldi	r17, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    2e24:	88 ee       	ldi	r24, 0xE8	; 232
    2e26:	93 e0       	ldi	r25, 0x03	; 3
    2e28:	0e 94 a2 23 	call	0x4744	; 0x4744 <nrk_spin_wait_us>
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    nrk_led_set (2);
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
    2e2c:	1f 5f       	subi	r17, 0xFF	; 255
    2e2e:	14 36       	cpi	r17, 0x64	; 100
    2e30:	c9 f7       	brne	.-14     	; 0x2e24 <nrk_error_print+0x128>
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    2e32:	83 e0       	ldi	r24, 0x03	; 3
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <nrk_led_set>
    nrk_led_clr (2);
    2e3a:	82 e0       	ldi	r24, 0x02	; 2
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	0e 94 60 13 	call	0x26c0	; 0x26c0 <nrk_led_clr>
    2e42:	10 e0       	ldi	r17, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    2e44:	88 ee       	ldi	r24, 0xE8	; 232
    2e46:	93 e0       	ldi	r25, 0x03	; 3
    2e48:	0e 94 a2 23 	call	0x4744	; 0x4744 <nrk_spin_wait_us>
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    nrk_led_clr (2);
    for (t = 0; t < 100; t++)
    2e4c:	1f 5f       	subi	r17, 0xFF	; 255
    2e4e:	14 36       	cpi	r17, 0x64	; 100
    2e50:	c9 f7       	brne	.-14     	; 0x2e44 <nrk_error_print+0x148>
    2e52:	df cf       	rjmp	.-66     	; 0x2e12 <nrk_error_print+0x116>

00002e54 <nrk_kernel_error_add>:
    nrk_error_print ();
  
#endif  /*  */
} void nrk_kernel_error_add (uint8_t n, uint8_t task) 
{
  error_num = n;
    2e54:	80 93 05 09 	sts	0x0905, r24
  error_task = task;
    2e58:	60 93 89 04 	sts	0x0489, r22
  
#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2e5c:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_error_print>
  
#endif  /*  */
} 
    2e60:	08 95       	ret

00002e62 <nrk_error_add>:
  return nrk_cur_task_TCB->errno;
}

void nrk_error_add (uint8_t n) 
{
  error_num = n;
    2e62:	80 93 05 09 	sts	0x0905, r24
  error_task = nrk_cur_task_TCB->task_ID;
    2e66:	e0 91 81 0b 	lds	r30, 0x0B81
    2e6a:	f0 91 82 0b 	lds	r31, 0x0B82
    2e6e:	80 85       	ldd	r24, Z+8	; 0x08
    2e70:	80 93 89 04 	sts	0x0489, r24
  
#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2e74:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_error_print>
  
#endif  /*  */
} void nrk_kernel_error_add (uint8_t n, uint8_t task) 
    2e78:	08 95       	ret

00002e7a <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

unsigned int *stk ;  // 2 bytes
unsigned char *stkc; // 1 byte
    
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */ 
    2e7a:	99 27       	eor	r25, r25
    2e7c:	87 fd       	sbrc	r24, 7
    2e7e:	90 95       	com	r25
    2e80:	fc 01       	movw	r30, r24
    2e82:	25 e0       	ldi	r18, 0x05	; 5
    2e84:	ee 0f       	add	r30, r30
    2e86:	ff 1f       	adc	r31, r31
    2e88:	2a 95       	dec	r18
    2e8a:	e1 f7       	brne	.-8      	; 0x2e84 <nrk_stack_check_pid+0xa>
    2e8c:	e8 0f       	add	r30, r24
    2e8e:	f9 1f       	adc	r31, r25
    2e90:	ea 53       	subi	r30, 0x3A	; 58
    2e92:	f5 4f       	sbci	r31, 0xF5	; 245
    2e94:	a2 81       	ldd	r26, Z+2	; 0x02
    2e96:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL) {
    2e98:	8c 91       	ld	r24, X
    2e9a:	85 35       	cpi	r24, 0x55	; 85
    2e9c:	21 f0       	breq	.+8      	; 0x2ea6 <nrk_stack_check_pid+0x2c>
		 *stkc=STK_CANARY_VAL; 
    2e9e:	85 e5       	ldi	r24, 0x55	; 85
    2ea0:	8c 93       	st	X, r24
    2ea2:	8f ef       	ldi	r24, 0xFF	; 255
		 return NRK_ERROR;
    2ea4:	08 95       	ret
    		  }  
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND ) {
    2ea6:	80 81       	ld	r24, Z
    2ea8:	91 81       	ldd	r25, Z+1	; 0x01
    2eaa:	22 e2       	ldi	r18, 0x22	; 34
    2eac:	80 30       	cpi	r24, 0x00	; 0
    2eae:	92 07       	cpc	r25, r18
    2eb0:	10 f4       	brcc	.+4      	; 0x2eb6 <nrk_stack_check_pid+0x3c>
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	08 95       	ret
	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
    2eb6:	82 e1       	ldi	r24, 0x12	; 18
    2eb8:	0e 94 31 17 	call	0x2e62	; 0x2e62 <nrk_error_add>
    2ebc:	8f ef       	ldi	r24, 0xFF	; 255
		 return NRK_ERROR;
    		}
#endif
return NRK_OK;
}
    2ebe:	08 95       	ret

00002ec0 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2ec0:	6f 92       	push	r6
    2ec2:	7f 92       	push	r7
    2ec4:	8f 92       	push	r8
    2ec6:	9f 92       	push	r9
    2ec8:	af 92       	push	r10
    2eca:	bf 92       	push	r11
    2ecc:	cf 92       	push	r12
    2ece:	df 92       	push	r13
    2ed0:	ef 92       	push	r14
    2ed2:	ff 92       	push	r15
    2ed4:	0f 93       	push	r16
    2ed6:	1f 93       	push	r17
    2ed8:	cf 93       	push	r28
    2eda:	df 93       	push	r29
	unsigned int *stk;
	unsigned char *stkc;
	uint8_t i;

	nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2edc:	88 eb       	ldi	r24, 0xB8	; 184
    2ede:	92 e0       	ldi	r25, 0x02	; 2
    2ee0:	0e 94 08 14 	call	0x2810	; 0x2810 <nrk_kprintf>

	printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    2ee4:	00 d0       	rcall	.+0      	; 0x2ee6 <dump_stack_info+0x26>
    2ee6:	00 d0       	rcall	.+0      	; 0x2ee8 <dump_stack_info+0x28>
    2ee8:	8f e0       	ldi	r24, 0x0F	; 15
    2eea:	93 e0       	ldi	r25, 0x03	; 3
    2eec:	ad b7       	in	r26, 0x3d	; 61
    2eee:	be b7       	in	r27, 0x3e	; 62
    2ef0:	12 96       	adiw	r26, 0x02	; 2
    2ef2:	9c 93       	st	X, r25
    2ef4:	8e 93       	st	-X, r24
    2ef6:	11 97       	sbiw	r26, 0x01	; 1
    2ef8:	e0 91 81 0b 	lds	r30, 0x0B81
    2efc:	f0 91 82 0b 	lds	r31, 0x0B82
    2f00:	80 85       	ldd	r24, Z+8	; 0x08
    2f02:	99 27       	eor	r25, r25
    2f04:	87 fd       	sbrc	r24, 7
    2f06:	90 95       	com	r25
    2f08:	14 96       	adiw	r26, 0x04	; 4
    2f0a:	9c 93       	st	X, r25
    2f0c:	8e 93       	st	-X, r24
    2f0e:	13 97       	sbiw	r26, 0x03	; 3
    2f10:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
	stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    2f14:	e0 91 81 0b 	lds	r30, 0x0B81
    2f18:	f0 91 82 0b 	lds	r31, 0x0B82
    2f1c:	c2 81       	ldd	r28, Z+2	; 0x02
    2f1e:	d3 81       	ldd	r29, Z+3	; 0x03
	stkc = (unsigned char*)stk;
	printf( "bottom = %x ",(uint16_t)stkc );
    2f20:	88 e1       	ldi	r24, 0x18	; 24
    2f22:	93 e0       	ldi	r25, 0x03	; 3
    2f24:	ed b7       	in	r30, 0x3d	; 61
    2f26:	fe b7       	in	r31, 0x3e	; 62
    2f28:	92 83       	std	Z+2, r25	; 0x02
    2f2a:	81 83       	std	Z+1, r24	; 0x01
    2f2c:	d4 83       	std	Z+4, r29	; 0x04
    2f2e:	c3 83       	std	Z+3, r28	; 0x03
    2f30:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
	printf( "canary = %x ",*stkc );
    2f34:	ed b7       	in	r30, 0x3d	; 61
    2f36:	fe b7       	in	r31, 0x3e	; 62
    2f38:	31 96       	adiw	r30, 0x01	; 1
    2f3a:	65 e2       	ldi	r22, 0x25	; 37
    2f3c:	a6 2e       	mov	r10, r22
    2f3e:	63 e0       	ldi	r22, 0x03	; 3
    2f40:	b6 2e       	mov	r11, r22
    2f42:	ad b7       	in	r26, 0x3d	; 61
    2f44:	be b7       	in	r27, 0x3e	; 62
    2f46:	12 96       	adiw	r26, 0x02	; 2
    2f48:	bc 92       	st	X, r11
    2f4a:	ae 92       	st	-X, r10
    2f4c:	11 97       	sbiw	r26, 0x01	; 1
    2f4e:	88 81       	ld	r24, Y
    2f50:	82 83       	std	Z+2, r24	; 0x02
    2f52:	13 82       	std	Z+3, r1	; 0x03
    2f54:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
	stkc = (unsigned char*)stk;
	printf( "stk = %x ",(uint16_t)stkc );
    2f58:	52 e3       	ldi	r21, 0x32	; 50
    2f5a:	c5 2e       	mov	r12, r21
    2f5c:	53 e0       	ldi	r21, 0x03	; 3
    2f5e:	d5 2e       	mov	r13, r21
    2f60:	ed b7       	in	r30, 0x3d	; 61
    2f62:	fe b7       	in	r31, 0x3e	; 62
    2f64:	d2 82       	std	Z+2, r13	; 0x02
    2f66:	c1 82       	std	Z+1, r12	; 0x01
    2f68:	e0 91 81 0b 	lds	r30, 0x0B81
    2f6c:	f0 91 82 0b 	lds	r31, 0x0B82
    2f70:	80 81       	ld	r24, Z
    2f72:	91 81       	ldd	r25, Z+1	; 0x01
    2f74:	ad b7       	in	r26, 0x3d	; 61
    2f76:	be b7       	in	r27, 0x3e	; 62
    2f78:	14 96       	adiw	r26, 0x04	; 4
    2f7a:	9c 93       	st	X, r25
    2f7c:	8e 93       	st	-X, r24
    2f7e:	13 97       	sbiw	r26, 0x03	; 3
    2f80:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    2f84:	4c e3       	ldi	r20, 0x3C	; 60
    2f86:	e4 2e       	mov	r14, r20
    2f88:	43 e0       	ldi	r20, 0x03	; 3
    2f8a:	f4 2e       	mov	r15, r20
    2f8c:	ed b7       	in	r30, 0x3d	; 61
    2f8e:	fe b7       	in	r31, 0x3e	; 62
    2f90:	f2 82       	std	Z+2, r15	; 0x02
    2f92:	e1 82       	std	Z+1, r14	; 0x01
    2f94:	80 91 81 0b 	lds	r24, 0x0B81
    2f98:	90 91 82 0b 	lds	r25, 0x0B82
    2f9c:	94 83       	std	Z+4, r25	; 0x04
    2f9e:	83 83       	std	Z+3, r24	; 0x03
    2fa0:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
    2fa4:	c6 ec       	ldi	r28, 0xC6	; 198
    2fa6:	da e0       	ldi	r29, 0x0A	; 10
    2fa8:	00 e0       	ldi	r16, 0x00	; 0
    2faa:	10 e0       	ldi	r17, 0x00	; 0
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0

	for(i=0; i<NRK_MAX_TASKS; i++ )
	{
		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
		stkc = (unsigned char*)stk;
		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2fb4:	3c e4       	ldi	r19, 0x4C	; 76
    2fb6:	83 2e       	mov	r8, r19
    2fb8:	33 e0       	ldi	r19, 0x03	; 3
    2fba:	93 2e       	mov	r9, r19
		printf( "canary = %x ",*stkc );
    2fbc:	35 01       	movw	r6, r10
		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
		stkc = (unsigned char*)stk;
		printf( "stk = %x ",(uint16_t)stkc );
    2fbe:	bc 2c       	mov	r11, r12
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2fc0:	ae 2c       	mov	r10, r14
    2fc2:	cf 2c       	mov	r12, r15
	printf( "stk = %x ",(uint16_t)stkc );
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

	for(i=0; i<NRK_MAX_TASKS; i++ )
	{
		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2fc4:	ea 80       	ldd	r14, Y+2	; 0x02
    2fc6:	fb 80       	ldd	r15, Y+3	; 0x03
		stkc = (unsigned char*)stk;
		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <dump_stack_info+0x10a>
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <dump_stack_info+0x10c>
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <dump_stack_info+0x10e>
    2fce:	ed b7       	in	r30, 0x3d	; 61
    2fd0:	fe b7       	in	r31, 0x3e	; 62
    2fd2:	31 96       	adiw	r30, 0x01	; 1
    2fd4:	ad b7       	in	r26, 0x3d	; 61
    2fd6:	be b7       	in	r27, 0x3e	; 62
    2fd8:	12 96       	adiw	r26, 0x02	; 2
    2fda:	9c 92       	st	X, r9
    2fdc:	8e 92       	st	-X, r8
    2fde:	11 97       	sbiw	r26, 0x01	; 1
    2fe0:	13 83       	std	Z+3, r17	; 0x03
    2fe2:	02 83       	std	Z+2, r16	; 0x02
    2fe4:	f5 82       	std	Z+5, r15	; 0x05
    2fe6:	e4 82       	std	Z+4, r14	; 0x04
    2fe8:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
		printf( "canary = %x ",*stkc );
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	ed b7       	in	r30, 0x3d	; 61
    2ff2:	fe b7       	in	r31, 0x3e	; 62
    2ff4:	31 96       	adiw	r30, 0x01	; 1
    2ff6:	ad b7       	in	r26, 0x3d	; 61
    2ff8:	be b7       	in	r27, 0x3e	; 62
    2ffa:	11 96       	adiw	r26, 0x01	; 1
    2ffc:	6c 92       	st	X, r6
    2ffe:	11 97       	sbiw	r26, 0x01	; 1
    3000:	12 96       	adiw	r26, 0x02	; 2
    3002:	7c 92       	st	X, r7
    3004:	d7 01       	movw	r26, r14
    3006:	8c 91       	ld	r24, X
    3008:	82 83       	std	Z+2, r24	; 0x02
    300a:	13 82       	std	Z+3, r1	; 0x03
    300c:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
		stkc = (unsigned char*)stk;
		printf( "stk = %x ",(uint16_t)stkc );
    3010:	ed b7       	in	r30, 0x3d	; 61
    3012:	fe b7       	in	r31, 0x3e	; 62
    3014:	b1 82       	std	Z+1, r11	; 0x01
    3016:	d2 82       	std	Z+2, r13	; 0x02
    3018:	88 81       	ld	r24, Y
    301a:	99 81       	ldd	r25, Y+1	; 0x01
    301c:	94 83       	std	Z+4, r25	; 0x04
    301e:	83 83       	std	Z+3, r24	; 0x03
    3020:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3024:	ad b7       	in	r26, 0x3d	; 61
    3026:	be b7       	in	r27, 0x3e	; 62
    3028:	11 96       	adiw	r26, 0x01	; 1
    302a:	ac 92       	st	X, r10
    302c:	11 97       	sbiw	r26, 0x01	; 1
    302e:	12 96       	adiw	r26, 0x02	; 2
    3030:	cc 92       	st	X, r12
    3032:	12 97       	sbiw	r26, 0x02	; 2
    3034:	14 96       	adiw	r26, 0x04	; 4
    3036:	dc 93       	st	X, r29
    3038:	ce 93       	st	-X, r28
    303a:	13 97       	sbiw	r26, 0x03	; 3
    303c:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <printf>
    3040:	0f 5f       	subi	r16, 0xFF	; 255
    3042:	1f 4f       	sbci	r17, 0xFF	; 255
    3044:	a1 96       	adiw	r28, 0x21	; 33
	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
	stkc = (unsigned char*)stk;
	printf( "stk = %x ",(uint16_t)stkc );
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

	for(i=0; i<NRK_MAX_TASKS; i++ )
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	05 30       	cpi	r16, 0x05	; 5
    3050:	11 05       	cpc	r17, r1
    3052:	09 f0       	breq	.+2      	; 0x3056 <dump_stack_info+0x196>
    3054:	b7 cf       	rjmp	.-146    	; 0x2fc4 <dump_stack_info+0x104>
		printf( "stk = %x ",(uint16_t)stkc );
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

	}

}
    3056:	df 91       	pop	r29
    3058:	cf 91       	pop	r28
    305a:	1f 91       	pop	r17
    305c:	0f 91       	pop	r16
    305e:	ff 90       	pop	r15
    3060:	ef 90       	pop	r14
    3062:	df 90       	pop	r13
    3064:	cf 90       	pop	r12
    3066:	bf 90       	pop	r11
    3068:	af 90       	pop	r10
    306a:	9f 90       	pop	r9
    306c:	8f 90       	pop	r8
    306e:	7f 90       	pop	r7
    3070:	6f 90       	pop	r6
    3072:	08 95       	ret

00003074 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

unsigned int *stk ;  // 2 bytes
unsigned char *stkc; // 1 byte
    
    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */ 
    3078:	e0 91 81 0b 	lds	r30, 0x0B81
    307c:	f0 91 82 0b 	lds	r31, 0x0B82
    3080:	c2 81       	ldd	r28, Z+2	; 0x02
    3082:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL) {
    3084:	88 81       	ld	r24, Y
    3086:	85 35       	cpi	r24, 0x55	; 85
    3088:	39 f0       	breq	.+14     	; 0x3098 <nrk_stack_check+0x24>
	    	#ifdef NRK_REPORT_ERRORS
	    	 dump_stack_info();
    308a:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <dump_stack_info>
		#endif
	   	 nrk_error_add( NRK_STACK_OVERFLOW ); 
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	0e 94 31 17 	call	0x2e62	; 0x2e62 <nrk_error_add>
		 *stkc=STK_CANARY_VAL; 
    3094:	85 e5       	ldi	r24, 0x55	; 85
    3096:	88 83       	st	Y, r24
    		  } 
 
    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */ 
    3098:	e0 91 81 0b 	lds	r30, 0x0B81
    309c:	f0 91 82 0b 	lds	r31, 0x0B82
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	22 e2       	ldi	r18, 0x22	; 34
    30a6:	80 30       	cpi	r24, 0x00	; 0
    30a8:	92 07       	cpc	r25, r18
    30aa:	28 f0       	brcs	.+10     	; 0x30b6 <nrk_stack_check+0x42>
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND ) {
	    	#ifdef NRK_REPORT_ERRORS
	    	 dump_stack_info();
    30ac:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <dump_stack_info>
		#endif
	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
    30b0:	82 e1       	ldi	r24, 0x12	; 18
    30b2:	0e 94 31 17 	call	0x2e62	; 0x2e62 <nrk_error_add>




#endif
}
    30b6:	df 91       	pop	r29
    30b8:	cf 91       	pop	r28
    30ba:	08 95       	ret

000030bc <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    30bc:	ef 92       	push	r14
    30be:	ff 92       	push	r15
    30c0:	0f 93       	push	r16
    30c2:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    30c4:	e0 90 ae 07 	lds	r14, 0x07AE
    30c8:	f0 90 af 07 	lds	r15, 0x07AF
    30cc:	00 91 b0 07 	lds	r16, 0x07B0
    30d0:	10 91 b1 07 	lds	r17, 0x07B1
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	a8 01       	movw	r20, r16
    30da:	97 01       	movw	r18, r14
    30dc:	08 2e       	mov	r0, r24
    30de:	04 c0       	rjmp	.+8      	; 0x30e8 <nrk_signal_create+0x2c>
    30e0:	56 95       	lsr	r21
    30e2:	47 95       	ror	r20
    30e4:	37 95       	ror	r19
    30e6:	27 95       	ror	r18
    30e8:	0a 94       	dec	r0
    30ea:	d2 f7       	brpl	.-12     	; 0x30e0 <nrk_signal_create+0x24>
    30ec:	21 70       	andi	r18, 0x01	; 1
    30ee:	30 70       	andi	r19, 0x00	; 0
    30f0:	21 15       	cp	r18, r1
    30f2:	31 05       	cpc	r19, r1
    30f4:	c9 f4       	brne	.+50     	; 0x3128 <nrk_signal_create+0x6c>
		{    
			_nrk_signal_list|=SIG(i);
    30f6:	21 e0       	ldi	r18, 0x01	; 1
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e0       	ldi	r20, 0x00	; 0
    30fc:	50 e0       	ldi	r21, 0x00	; 0
    30fe:	08 2e       	mov	r0, r24
    3100:	04 c0       	rjmp	.+8      	; 0x310a <nrk_signal_create+0x4e>
    3102:	22 0f       	add	r18, r18
    3104:	33 1f       	adc	r19, r19
    3106:	44 1f       	adc	r20, r20
    3108:	55 1f       	adc	r21, r21
    310a:	0a 94       	dec	r0
    310c:	d2 f7       	brpl	.-12     	; 0x3102 <nrk_signal_create+0x46>
    310e:	2e 29       	or	r18, r14
    3110:	3f 29       	or	r19, r15
    3112:	40 2b       	or	r20, r16
    3114:	51 2b       	or	r21, r17
    3116:	20 93 ae 07 	sts	0x07AE, r18
    311a:	30 93 af 07 	sts	0x07AF, r19
    311e:	40 93 b0 07 	sts	0x07B0, r20
    3122:	50 93 b1 07 	sts	0x07B1, r21
			return i;
    3126:	05 c0       	rjmp	.+10     	; 0x3132 <nrk_signal_create+0x76>
    3128:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    312a:	80 32       	cpi	r24, 0x20	; 32
    312c:	91 05       	cpc	r25, r1
    312e:	a1 f6       	brne	.-88     	; 0x30d8 <nrk_signal_create+0x1c>
    3130:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
	return NRK_ERROR;


}
    3132:	1f 91       	pop	r17
    3134:	0f 91       	pop	r16
    3136:	ff 90       	pop	r15
    3138:	ef 90       	pop	r14
    313a:	08 95       	ret

0000313c <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
    313c:	e0 91 81 0b 	lds	r30, 0x0B81
    3140:	f0 91 82 0b 	lds	r31, 0x0B82
    3144:	65 85       	ldd	r22, Z+13	; 0x0d
    3146:	76 85       	ldd	r23, Z+14	; 0x0e
        return nrk_cur_task_TCB->registered_signal_mask;
}
    3148:	87 85       	ldd	r24, Z+15	; 0x0f
    314a:	90 89       	ldd	r25, Z+16	; 0x10
    314c:	08 95       	ret

0000314e <nrk_signal_unregister>:
	return NRK_OK;
}


int8_t nrk_signal_unregister(int8_t sig_id)
{
    314e:	ef 92       	push	r14
    3150:	ff 92       	push	r15
    3152:	0f 93       	push	r16
    3154:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    3156:	21 e0       	ldi	r18, 0x01	; 1
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e0       	ldi	r20, 0x00	; 0
    315c:	50 e0       	ldi	r21, 0x00	; 0
    315e:	04 c0       	rjmp	.+8      	; 0x3168 <nrk_signal_unregister+0x1a>
    3160:	22 0f       	add	r18, r18
    3162:	33 1f       	adc	r19, r19
    3164:	44 1f       	adc	r20, r20
    3166:	55 1f       	adc	r21, r21
    3168:	8a 95       	dec	r24
    316a:	d2 f7       	brpl	.-12     	; 0x3160 <nrk_signal_unregister+0x12>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    316c:	e0 91 81 0b 	lds	r30, 0x0B81
    3170:	f0 91 82 0b 	lds	r31, 0x0B82
    3174:	85 85       	ldd	r24, Z+13	; 0x0d
    3176:	96 85       	ldd	r25, Z+14	; 0x0e
    3178:	a7 85       	ldd	r26, Z+15	; 0x0f
    317a:	b0 89       	ldd	r27, Z+16	; 0x10
    317c:	79 01       	movw	r14, r18
    317e:	8a 01       	movw	r16, r20
    3180:	e8 22       	and	r14, r24
    3182:	f9 22       	and	r15, r25
    3184:	0a 23       	and	r16, r26
    3186:	1b 23       	and	r17, r27
    3188:	e1 14       	cp	r14, r1
    318a:	f1 04       	cpc	r15, r1
    318c:	01 05       	cpc	r16, r1
    318e:	11 05       	cpc	r17, r1
    3190:	11 f4       	brne	.+4      	; 0x3196 <nrk_signal_unregister+0x48>
    3192:	8f ef       	ldi	r24, 0xFF	; 255
    3194:	19 c0       	rjmp	.+50     	; 0x31c8 <nrk_signal_unregister+0x7a>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    3196:	20 95       	com	r18
    3198:	30 95       	com	r19
    319a:	40 95       	com	r20
    319c:	50 95       	com	r21
    319e:	82 23       	and	r24, r18
    31a0:	93 23       	and	r25, r19
    31a2:	a4 23       	and	r26, r20
    31a4:	b5 23       	and	r27, r21
    31a6:	85 87       	std	Z+13, r24	; 0x0d
    31a8:	96 87       	std	Z+14, r25	; 0x0e
    31aa:	a7 87       	std	Z+15, r26	; 0x0f
    31ac:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    31ae:	81 89       	ldd	r24, Z+17	; 0x11
    31b0:	92 89       	ldd	r25, Z+18	; 0x12
    31b2:	a3 89       	ldd	r26, Z+19	; 0x13
    31b4:	b4 89       	ldd	r27, Z+20	; 0x14
    31b6:	82 23       	and	r24, r18
    31b8:	93 23       	and	r25, r19
    31ba:	a4 23       	and	r26, r20
    31bc:	b5 23       	and	r27, r21
    31be:	81 8b       	std	Z+17, r24	; 0x11
    31c0:	92 8b       	std	Z+18, r25	; 0x12
    31c2:	a3 8b       	std	Z+19, r26	; 0x13
    31c4:	b4 8b       	std	Z+20, r27	; 0x14
    31c6:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return NRK_ERROR;
return NRK_OK;
}
    31c8:	1f 91       	pop	r17
    31ca:	0f 91       	pop	r16
    31cc:	ff 90       	pop	r15
    31ce:	ef 90       	pop	r14
    31d0:	08 95       	ret

000031d2 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    31d2:	99 27       	eor	r25, r25
    31d4:	87 fd       	sbrc	r24, 7
    31d6:	90 95       	com	r25
    31d8:	20 91 ae 07 	lds	r18, 0x07AE
    31dc:	30 91 af 07 	lds	r19, 0x07AF
    31e0:	40 91 b0 07 	lds	r20, 0x07B0
    31e4:	50 91 b1 07 	lds	r21, 0x07B1
    31e8:	08 2e       	mov	r0, r24
    31ea:	04 c0       	rjmp	.+8      	; 0x31f4 <nrk_signal_register+0x22>
    31ec:	56 95       	lsr	r21
    31ee:	47 95       	ror	r20
    31f0:	37 95       	ror	r19
    31f2:	27 95       	ror	r18
    31f4:	0a 94       	dec	r0
    31f6:	d2 f7       	brpl	.-12     	; 0x31ec <nrk_signal_register+0x1a>
    31f8:	21 70       	andi	r18, 0x01	; 1
    31fa:	30 70       	andi	r19, 0x00	; 0
    31fc:	21 15       	cp	r18, r1
    31fe:	31 05       	cpc	r19, r1
    3200:	11 f4       	brne	.+4      	; 0x3206 <nrk_signal_register+0x34>
    3202:	8f ef       	ldi	r24, 0xFF	; 255
    3204:	08 95       	ret
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    3206:	e0 91 81 0b 	lds	r30, 0x0B81
    320a:	f0 91 82 0b 	lds	r31, 0x0B82
    320e:	21 e0       	ldi	r18, 0x01	; 1
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e0       	ldi	r20, 0x00	; 0
    3214:	50 e0       	ldi	r21, 0x00	; 0
    3216:	04 c0       	rjmp	.+8      	; 0x3220 <nrk_signal_register+0x4e>
    3218:	22 0f       	add	r18, r18
    321a:	33 1f       	adc	r19, r19
    321c:	44 1f       	adc	r20, r20
    321e:	55 1f       	adc	r21, r21
    3220:	8a 95       	dec	r24
    3222:	d2 f7       	brpl	.-12     	; 0x3218 <nrk_signal_register+0x46>
    3224:	85 85       	ldd	r24, Z+13	; 0x0d
    3226:	96 85       	ldd	r25, Z+14	; 0x0e
    3228:	a7 85       	ldd	r26, Z+15	; 0x0f
    322a:	b0 89       	ldd	r27, Z+16	; 0x10
    322c:	82 2b       	or	r24, r18
    322e:	93 2b       	or	r25, r19
    3230:	a4 2b       	or	r26, r20
    3232:	b5 2b       	or	r27, r21
    3234:	85 87       	std	Z+13, r24	; 0x0d
    3236:	96 87       	std	Z+14, r25	; 0x0e
    3238:	a7 87       	std	Z+15, r26	; 0x0f
    323a:	b0 8b       	std	Z+16, r27	; 0x10
    323c:	81 e0       	ldi	r24, 0x01	; 1
		return NRK_OK;
	}
            
	return NRK_ERROR;
}
    323e:	08 95       	ret

00003240 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	08 95       	ret

00003246 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    3246:	2b e0       	ldi	r18, 0x0B	; 11
    3248:	8d 36       	cpi	r24, 0x6D	; 109
    324a:	92 07       	cpc	r25, r18
    324c:	11 f0       	breq	.+4      	; 0x3252 <nrk_get_resource_index+0xc>
    324e:	8f ef       	ldi	r24, 0xFF	; 255
    3250:	08 95       	ret
    3252:	80 e0       	ldi	r24, 0x00	; 0
				return id;
	return NRK_ERROR;
}
    3254:	08 95       	ret

00003256 <nrk_sem_delete>:
return NRK_OK;
}

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    3256:	0e 94 23 19 	call	0x3246	; 0x3246 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    325a:	8f 3f       	cpi	r24, 0xFF	; 255
    325c:	11 f4       	brne	.+4      	; 0x3262 <nrk_sem_delete+0xc>
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	03 c0       	rjmp	.+6      	; 0x3268 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3262:	81 30       	cpi	r24, 0x01	; 1
    3264:	29 f4       	brne	.+10     	; 0x3270 <nrk_sem_delete+0x1a>
    3266:	82 e0       	ldi	r24, 0x02	; 2
    3268:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <_nrk_errno_set>
    326c:	8f ef       	ldi	r24, 0xFF	; 255
    326e:	08 95       	ret

	nrk_sem_list[id].count=-1;
    3270:	99 27       	eor	r25, r25
    3272:	87 fd       	sbrc	r24, 7
    3274:	90 95       	com	r25
    3276:	fc 01       	movw	r30, r24
    3278:	ee 0f       	add	r30, r30
    327a:	ff 1f       	adc	r31, r31
    327c:	e8 0f       	add	r30, r24
    327e:	f9 1f       	adc	r31, r25
    3280:	e3 59       	subi	r30, 0x93	; 147
    3282:	f4 4f       	sbci	r31, 0xF4	; 244
    3284:	8f ef       	ldi	r24, 0xFF	; 255
    3286:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    3288:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    328a:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    328c:	80 91 80 0b 	lds	r24, 0x0B80
    3290:	81 50       	subi	r24, 0x01	; 1
    3292:	80 93 80 0b 	sts	0x0B80, r24
    3296:	81 e0       	ldi	r24, 0x01	; 1
return NRK_OK;
}
    3298:	08 95       	ret

0000329a <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    329a:	0e 94 23 19 	call	0x3246	; 0x3246 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    329e:	8f 3f       	cpi	r24, 0xFF	; 255
    32a0:	11 f4       	brne	.+4      	; 0x32a6 <nrk_sem_query+0xc>
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	03 c0       	rjmp	.+6      	; 0x32ac <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    32a6:	81 30       	cpi	r24, 0x01	; 1
    32a8:	29 f4       	brne	.+10     	; 0x32b4 <nrk_sem_query+0x1a>
    32aa:	82 e0       	ldi	r24, 0x02	; 2
    32ac:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <_nrk_errno_set>
    32b0:	8f ef       	ldi	r24, 0xFF	; 255
    32b2:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    32b4:	99 27       	eor	r25, r25
    32b6:	87 fd       	sbrc	r24, 7
    32b8:	90 95       	com	r25
    32ba:	fc 01       	movw	r30, r24
    32bc:	ee 0f       	add	r30, r30
    32be:	ff 1f       	adc	r31, r31
    32c0:	e8 0f       	add	r30, r24
    32c2:	f9 1f       	adc	r31, r25
    32c4:	e3 59       	subi	r30, 0x93	; 147
    32c6:	f4 4f       	sbci	r31, 0xF4	; 244
    32c8:	82 81       	ldd	r24, Z+2	; 0x02
}
    32ca:	08 95       	ret

000032cc <nrk_sem_post>:
}



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    32cc:	ef 92       	push	r14
    32ce:	ff 92       	push	r15
    32d0:	0f 93       	push	r16
    32d2:	1f 93       	push	r17
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	0f 92       	push	r0
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    32de:	0e 94 23 19 	call	0x3246	; 0x3246 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    32e2:	8f 3f       	cpi	r24, 0xFF	; 255
    32e4:	11 f4       	brne	.+4      	; 0x32ea <nrk_sem_post+0x1e>
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	03 c0       	rjmp	.+6      	; 0x32f0 <nrk_sem_post+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    32ea:	81 30       	cpi	r24, 0x01	; 1
    32ec:	29 f4       	brne	.+10     	; 0x32f8 <nrk_sem_post+0x2c>
    32ee:	82 e0       	ldi	r24, 0x02	; 2
    32f0:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <_nrk_errno_set>
    32f4:	8f ef       	ldi	r24, 0xFF	; 255
    32f6:	44 c0       	rjmp	.+136    	; 0x3380 <nrk_sem_post+0xb4>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    32f8:	28 2f       	mov	r18, r24
    32fa:	33 27       	eor	r19, r19
    32fc:	27 fd       	sbrc	r18, 7
    32fe:	30 95       	com	r19
    3300:	89 01       	movw	r16, r18
    3302:	00 0f       	add	r16, r16
    3304:	11 1f       	adc	r17, r17
    3306:	02 0f       	add	r16, r18
    3308:	13 1f       	adc	r17, r19
    330a:	03 59       	subi	r16, 0x93	; 147
    330c:	14 4f       	sbci	r17, 0xF4	; 244
    330e:	d8 01       	movw	r26, r16
    3310:	12 96       	adiw	r26, 0x02	; 2
    3312:	2c 91       	ld	r18, X
    3314:	12 97       	sbiw	r26, 0x02	; 2
    3316:	9c 91       	ld	r25, X
    3318:	29 17       	cp	r18, r25
    331a:	8c f5       	brge	.+98     	; 0x337e <nrk_sem_post+0xb2>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    331c:	89 83       	std	Y+1, r24	; 0x01
    331e:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>

		nrk_sem_list[id].value++;
    3322:	f8 01       	movw	r30, r16
    3324:	92 81       	ldd	r25, Z+2	; 0x02
    3326:	9f 5f       	subi	r25, 0xFF	; 255
    3328:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    332a:	e0 91 81 0b 	lds	r30, 0x0B81
    332e:	f0 91 82 0b 	lds	r31, 0x0B82
    3332:	14 82       	std	Z+4, r1	; 0x04
    3334:	ed ec       	ldi	r30, 0xCD	; 205
    3336:	fa e0       	ldi	r31, 0x0A	; 10

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	28 2f       	mov	r18, r24
    333c:	33 27       	eor	r19, r19
    333e:	27 fd       	sbrc	r18, 7
    3340:	30 95       	com	r19
    3342:	43 2f       	mov	r20, r19
    3344:	53 2f       	mov	r21, r19
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3346:	93 e0       	ldi	r25, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3348:	80 81       	ld	r24, Z
    334a:	82 30       	cpi	r24, 0x02	; 2
    334c:	89 f4       	brne	.+34     	; 0x3370 <nrk_sem_post+0xa4>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    334e:	e2 84       	ldd	r14, Z+10	; 0x0a
    3350:	f3 84       	ldd	r15, Z+11	; 0x0b
    3352:	04 85       	ldd	r16, Z+12	; 0x0c
    3354:	15 85       	ldd	r17, Z+13	; 0x0d
    3356:	e2 16       	cp	r14, r18
    3358:	f3 06       	cpc	r15, r19
    335a:	04 07       	cpc	r16, r20
    335c:	15 07       	cpc	r17, r21
    335e:	41 f4       	brne	.+16     	; 0x3370 <nrk_sem_post+0xa4>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3360:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3362:	17 86       	std	Z+15, r1	; 0x0f
    3364:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    3366:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3368:	12 86       	std	Z+10, r1	; 0x0a
    336a:	13 86       	std	Z+11, r1	; 0x0b
    336c:	14 86       	std	Z+12, r1	; 0x0c
    336e:	15 86       	std	Z+13, r1	; 0x0d
    3370:	b1 96       	adiw	r30, 0x21	; 33
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3372:	8b e0       	ldi	r24, 0x0B	; 11
    3374:	e2 37       	cpi	r30, 0x72	; 114
    3376:	f8 07       	cpc	r31, r24
    3378:	39 f7       	brne	.-50     	; 0x3348 <nrk_sem_post+0x7c>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    337a:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>
    337e:	81 e0       	ldi	r24, 0x01	; 1
	}
		
return NRK_OK;
}
    3380:	0f 90       	pop	r0
    3382:	cf 91       	pop	r28
    3384:	df 91       	pop	r29
    3386:	1f 91       	pop	r17
    3388:	0f 91       	pop	r16
    338a:	ff 90       	pop	r15
    338c:	ef 90       	pop	r14
    338e:	08 95       	ret

00003390 <nrk_event_signal>:
            
	return NRK_ERROR;
}

int8_t nrk_event_signal(int8_t sig_id)
{
    3390:	ef 92       	push	r14
    3392:	ff 92       	push	r15
    3394:	0f 93       	push	r16
    3396:	1f 93       	push	r17
    3398:	df 93       	push	r29
    339a:	cf 93       	push	r28
    339c:	0f 92       	push	r0
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    33a2:	51 e0       	ldi	r21, 0x01	; 1
    33a4:	e5 2e       	mov	r14, r21
    33a6:	f1 2c       	mov	r15, r1
    33a8:	01 2d       	mov	r16, r1
    33aa:	11 2d       	mov	r17, r1
    33ac:	04 c0       	rjmp	.+8      	; 0x33b6 <nrk_event_signal+0x26>
    33ae:	ee 0c       	add	r14, r14
    33b0:	ff 1c       	adc	r15, r15
    33b2:	00 1f       	adc	r16, r16
    33b4:	11 1f       	adc	r17, r17
    33b6:	8a 95       	dec	r24
    33b8:	d2 f7       	brpl	.-12     	; 0x33ae <nrk_event_signal+0x1e>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    33ba:	80 91 ae 07 	lds	r24, 0x07AE
    33be:	90 91 af 07 	lds	r25, 0x07AF
    33c2:	a0 91 b0 07 	lds	r26, 0x07B0
    33c6:	b0 91 b1 07 	lds	r27, 0x07B1
    33ca:	8e 21       	and	r24, r14
    33cc:	9f 21       	and	r25, r15
    33ce:	a0 23       	and	r26, r16
    33d0:	b1 23       	and	r27, r17
    33d2:	00 97       	sbiw	r24, 0x00	; 0
    33d4:	a1 05       	cpc	r26, r1
    33d6:	b1 05       	cpc	r27, r1
    33d8:	11 f4       	brne	.+4      	; 0x33de <nrk_event_signal+0x4e>
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	42 c0       	rjmp	.+132    	; 0x3462 <nrk_event_signal+0xd2>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    33de:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>
    33e2:	ed ec       	ldi	r30, 0xCD	; 205
    33e4:	fa e0       	ldi	r31, 0x0A	; 10
	}
            
	return NRK_ERROR;
}

int8_t nrk_event_signal(int8_t sig_id)
    33e6:	80 e0       	ldi	r24, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    33e8:	93 e0       	ldi	r25, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    33ea:	20 81       	ld	r18, Z
    33ec:	21 30       	cpi	r18, 0x01	; 1
    33ee:	b1 f4       	brne	.+44     	; 0x341c <nrk_event_signal+0x8c>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    33f0:	22 85       	ldd	r18, Z+10	; 0x0a
    33f2:	33 85       	ldd	r19, Z+11	; 0x0b
    33f4:	44 85       	ldd	r20, Z+12	; 0x0c
    33f6:	55 85       	ldd	r21, Z+13	; 0x0d
    33f8:	2e 21       	and	r18, r14
    33fa:	3f 21       	and	r19, r15
    33fc:	40 23       	and	r20, r16
    33fe:	51 23       	and	r21, r17
    3400:	21 15       	cp	r18, r1
    3402:	31 05       	cpc	r19, r1
    3404:	41 05       	cpc	r20, r1
    3406:	51 05       	cpc	r21, r1
    3408:	49 f0       	breq	.+18     	; 0x341c <nrk_event_signal+0x8c>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    340a:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    340c:	17 86       	std	Z+15, r1	; 0x0f
    340e:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    3410:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    3412:	e2 86       	std	Z+10, r14	; 0x0a
    3414:	f3 86       	std	Z+11, r15	; 0x0b
    3416:	04 87       	std	Z+12, r16	; 0x0c
    3418:	15 87       	std	Z+13, r17	; 0x0d
    341a:	81 e0       	ldi	r24, 0x01	; 1
					event_occured=1;
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    341c:	20 81       	ld	r18, Z
    341e:	22 30       	cpi	r18, 0x02	; 2
    3420:	91 f4       	brne	.+36     	; 0x3446 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    3422:	22 85       	ldd	r18, Z+10	; 0x0a
    3424:	33 85       	ldd	r19, Z+11	; 0x0b
    3426:	44 85       	ldd	r20, Z+12	; 0x0c
    3428:	55 85       	ldd	r21, Z+13	; 0x0d
    342a:	2e 15       	cp	r18, r14
    342c:	3f 05       	cpc	r19, r15
    342e:	40 07       	cpc	r20, r16
    3430:	51 07       	cpc	r21, r17
    3432:	49 f4       	brne	.+18     	; 0x3446 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3434:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3436:	17 86       	std	Z+15, r1	; 0x0f
    3438:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    343a:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    343c:	12 86       	std	Z+10, r1	; 0x0a
    343e:	13 86       	std	Z+11, r1	; 0x0b
    3440:	14 86       	std	Z+12, r1	; 0x0c
    3442:	15 86       	std	Z+13, r1	; 0x0d
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	b1 96       	adiw	r30, 0x21	; 33
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3448:	2b e0       	ldi	r18, 0x0B	; 11
    344a:	e2 37       	cpi	r30, 0x72	; 114
    344c:	f2 07       	cpc	r31, r18
    344e:	69 f6       	brne	.-102    	; 0x33ea <nrk_event_signal+0x5a>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    3450:	89 83       	std	Y+1, r24	; 0x01
    3452:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>
	if(event_occured)
    3456:	89 81       	ldd	r24, Y+1	; 0x01
    3458:	88 23       	and	r24, r24
    345a:	11 f0       	breq	.+4      	; 0x3460 <nrk_event_signal+0xd0>
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	04 c0       	rjmp	.+8      	; 0x3468 <nrk_event_signal+0xd8>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    3460:	82 e0       	ldi	r24, 0x02	; 2
    3462:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <_nrk_errno_set>
    3466:	8f ef       	ldi	r24, 0xFF	; 255
	return NRK_ERROR;
}
    3468:	0f 90       	pop	r0
    346a:	cf 91       	pop	r28
    346c:	df 91       	pop	r29
    346e:	1f 91       	pop	r17
    3470:	0f 91       	pop	r16
    3472:	ff 90       	pop	r15
    3474:	ef 90       	pop	r14
    3476:	08 95       	ret

00003478 <nrk_signal_delete>:
        return nrk_cur_task_TCB->registered_signal_mask;
}

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    3478:	ef 92       	push	r14
    347a:	ff 92       	push	r15
    347c:	0f 93       	push	r16
    347e:	1f 93       	push	r17
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    3484:	c8 2f       	mov	r28, r24
    3486:	dd 27       	eor	r29, r29
    3488:	c7 fd       	sbrc	r28, 7
    348a:	d0 95       	com	r29
    348c:	61 e0       	ldi	r22, 0x01	; 1
    348e:	e6 2e       	mov	r14, r22
    3490:	f1 2c       	mov	r15, r1
    3492:	01 2d       	mov	r16, r1
    3494:	11 2d       	mov	r17, r1
    3496:	0c 2e       	mov	r0, r28
    3498:	04 c0       	rjmp	.+8      	; 0x34a2 <nrk_signal_delete+0x2a>
    349a:	ee 0c       	add	r14, r14
    349c:	ff 1c       	adc	r15, r15
    349e:	00 1f       	adc	r16, r16
    34a0:	11 1f       	adc	r17, r17
    34a2:	0a 94       	dec	r0
    34a4:	d2 f7       	brpl	.-12     	; 0x349a <nrk_signal_delete+0x22>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    34a6:	80 91 ae 07 	lds	r24, 0x07AE
    34aa:	90 91 af 07 	lds	r25, 0x07AF
    34ae:	a0 91 b0 07 	lds	r26, 0x07B0
    34b2:	b0 91 b1 07 	lds	r27, 0x07B1
    34b6:	8e 21       	and	r24, r14
    34b8:	9f 21       	and	r25, r15
    34ba:	a0 23       	and	r26, r16
    34bc:	b1 23       	and	r27, r17
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	a1 05       	cpc	r26, r1
    34c2:	b1 05       	cpc	r27, r1
    34c4:	11 f4       	brne	.+4      	; 0x34ca <nrk_signal_delete+0x52>
    34c6:	8f ef       	ldi	r24, 0xFF	; 255
    34c8:	5c c0       	rjmp	.+184    	; 0x3582 <nrk_signal_delete+0x10a>

	nrk_int_disable();
    34ca:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>
    34ce:	ed ec       	ldi	r30, 0xCD	; 205
    34d0:	fa e0       	ldi	r31, 0x0A	; 10
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    34d2:	a8 01       	movw	r20, r16
    34d4:	97 01       	movw	r18, r14
    34d6:	20 95       	com	r18
    34d8:	30 95       	com	r19
    34da:	40 95       	com	r20
    34dc:	50 95       	com	r21
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    34de:	63 e0       	ldi	r22, 0x03	; 3

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    34e0:	81 81       	ldd	r24, Z+1	; 0x01
    34e2:	8f 3f       	cpi	r24, 0xFF	; 255
    34e4:	39 f1       	breq	.+78     	; 0x3534 <nrk_signal_delete+0xbc>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    34e6:	86 81       	ldd	r24, Z+6	; 0x06
    34e8:	97 81       	ldd	r25, Z+7	; 0x07
    34ea:	a0 85       	ldd	r26, Z+8	; 0x08
    34ec:	b1 85       	ldd	r27, Z+9	; 0x09
    34ee:	8e 15       	cp	r24, r14
    34f0:	9f 05       	cpc	r25, r15
    34f2:	a0 07       	cpc	r26, r16
    34f4:	b1 07       	cpc	r27, r17
    34f6:	31 f4       	brne	.+12     	; 0x3504 <nrk_signal_delete+0x8c>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    34f8:	12 86       	std	Z+10, r1	; 0x0a
    34fa:	13 86       	std	Z+11, r1	; 0x0b
    34fc:	14 86       	std	Z+12, r1	; 0x0c
    34fe:	15 86       	std	Z+13, r1	; 0x0d
			nrk_task_TCB[task_ID].event_suspend=0;
    3500:	10 82       	st	Z, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3502:	62 83       	std	Z+2, r22	; 0x02
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3504:	86 81       	ldd	r24, Z+6	; 0x06
    3506:	97 81       	ldd	r25, Z+7	; 0x07
    3508:	a0 85       	ldd	r26, Z+8	; 0x08
    350a:	b1 85       	ldd	r27, Z+9	; 0x09
    350c:	82 23       	and	r24, r18
    350e:	93 23       	and	r25, r19
    3510:	a4 23       	and	r26, r20
    3512:	b5 23       	and	r27, r21
    3514:	86 83       	std	Z+6, r24	; 0x06
    3516:	97 83       	std	Z+7, r25	; 0x07
    3518:	a0 87       	std	Z+8, r26	; 0x08
    351a:	b1 87       	std	Z+9, r27	; 0x09
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    351c:	82 85       	ldd	r24, Z+10	; 0x0a
    351e:	93 85       	ldd	r25, Z+11	; 0x0b
    3520:	a4 85       	ldd	r26, Z+12	; 0x0c
    3522:	b5 85       	ldd	r27, Z+13	; 0x0d
    3524:	82 23       	and	r24, r18
    3526:	93 23       	and	r25, r19
    3528:	a4 23       	and	r26, r20
    352a:	b5 23       	and	r27, r21
    352c:	82 87       	std	Z+10, r24	; 0x0a
    352e:	93 87       	std	Z+11, r25	; 0x0b
    3530:	a4 87       	std	Z+12, r26	; 0x0c
    3532:	b5 87       	std	Z+13, r27	; 0x0d
    3534:	b1 96       	adiw	r30, 0x21	; 33
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3536:	9b e0       	ldi	r25, 0x0B	; 11
    3538:	e2 37       	cpi	r30, 0x72	; 114
    353a:	f9 07       	cpc	r31, r25
    353c:	89 f6       	brne	.-94     	; 0x34e0 <nrk_signal_delete+0x68>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    353e:	2e ef       	ldi	r18, 0xFE	; 254
    3540:	3f ef       	ldi	r19, 0xFF	; 255
    3542:	4f ef       	ldi	r20, 0xFF	; 255
    3544:	5f ef       	ldi	r21, 0xFF	; 255
    3546:	04 c0       	rjmp	.+8      	; 0x3550 <nrk_signal_delete+0xd8>
    3548:	22 0f       	add	r18, r18
    354a:	33 1f       	adc	r19, r19
    354c:	44 1f       	adc	r20, r20
    354e:	55 1f       	adc	r21, r21
    3550:	ca 95       	dec	r28
    3552:	d2 f7       	brpl	.-12     	; 0x3548 <nrk_signal_delete+0xd0>
    3554:	80 91 ae 07 	lds	r24, 0x07AE
    3558:	90 91 af 07 	lds	r25, 0x07AF
    355c:	a0 91 b0 07 	lds	r26, 0x07B0
    3560:	b0 91 b1 07 	lds	r27, 0x07B1
    3564:	82 23       	and	r24, r18
    3566:	93 23       	and	r25, r19
    3568:	a4 23       	and	r26, r20
    356a:	b5 23       	and	r27, r21
    356c:	80 93 ae 07 	sts	0x07AE, r24
    3570:	90 93 af 07 	sts	0x07AF, r25
    3574:	a0 93 b0 07 	sts	0x07B0, r26
    3578:	b0 93 b1 07 	sts	0x07B1, r27
	nrk_int_enable();
    357c:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>
    3580:	81 e0       	ldi	r24, 0x01	; 1

	return NRK_OK;
}
    3582:	df 91       	pop	r29
    3584:	cf 91       	pop	r28
    3586:	1f 91       	pop	r17
    3588:	0f 91       	pop	r16
    358a:	ff 90       	pop	r15
    358c:	ef 90       	pop	r14
    358e:	08 95       	ret

00003590 <nrk_sem_pend>:
}



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    3590:	0f 93       	push	r16
    3592:	1f 93       	push	r17
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	0f 92       	push	r0
    359a:	cd b7       	in	r28, 0x3d	; 61
    359c:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    359e:	0e 94 23 19 	call	0x3246	; 0x3246 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    35a2:	8f 3f       	cpi	r24, 0xFF	; 255
    35a4:	11 f4       	brne	.+4      	; 0x35aa <nrk_sem_pend+0x1a>
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	03 c0       	rjmp	.+6      	; 0x35b0 <nrk_sem_pend+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    35aa:	81 30       	cpi	r24, 0x01	; 1
    35ac:	29 f4       	brne	.+10     	; 0x35b8 <nrk_sem_pend+0x28>
    35ae:	82 e0       	ldi	r24, 0x02	; 2
    35b0:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <_nrk_errno_set>
    35b4:	8f ef       	ldi	r24, 0xFF	; 255
    35b6:	40 c0       	rjmp	.+128    	; 0x3638 <nrk_sem_pend+0xa8>
	
	nrk_int_disable();
    35b8:	89 83       	std	Y+1, r24	; 0x01
    35ba:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	08 2f       	mov	r16, r24
    35c2:	11 27       	eor	r17, r17
    35c4:	07 fd       	sbrc	r16, 7
    35c6:	10 95       	com	r17
    35c8:	f8 01       	movw	r30, r16
    35ca:	ee 0f       	add	r30, r30
    35cc:	ff 1f       	adc	r31, r31
    35ce:	e0 0f       	add	r30, r16
    35d0:	f1 1f       	adc	r31, r17
    35d2:	e3 59       	subi	r30, 0x93	; 147
    35d4:	f4 4f       	sbci	r31, 0xF4	; 244
    35d6:	92 81       	ldd	r25, Z+2	; 0x02
    35d8:	99 23       	and	r25, r25
    35da:	b1 f4       	brne	.+44     	; 0x3608 <nrk_sem_pend+0x78>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    35dc:	e0 91 81 0b 	lds	r30, 0x0B81
    35e0:	f0 91 82 0b 	lds	r31, 0x0B82
    35e4:	97 81       	ldd	r25, Z+7	; 0x07
    35e6:	92 60       	ori	r25, 0x02	; 2
    35e8:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    35ea:	99 27       	eor	r25, r25
    35ec:	87 fd       	sbrc	r24, 7
    35ee:	90 95       	com	r25
    35f0:	a9 2f       	mov	r26, r25
    35f2:	b9 2f       	mov	r27, r25
    35f4:	81 8b       	std	Z+17, r24	; 0x11
    35f6:	92 8b       	std	Z+18, r25	; 0x12
    35f8:	a3 8b       	std	Z+19, r26	; 0x13
    35fa:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    35fc:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    3600:	80 e0       	ldi	r24, 0x00	; 0
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    3608:	f8 01       	movw	r30, r16
    360a:	ee 0f       	add	r30, r30
    360c:	ff 1f       	adc	r31, r31
    360e:	e0 0f       	add	r30, r16
    3610:	f1 1f       	adc	r31, r17
    3612:	e3 59       	subi	r30, 0x93	; 147
    3614:	f4 4f       	sbci	r31, 0xF4	; 244
    3616:	82 81       	ldd	r24, Z+2	; 0x02
    3618:	81 50       	subi	r24, 0x01	; 1
    361a:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    361c:	a0 91 81 0b 	lds	r26, 0x0B81
    3620:	b0 91 82 0b 	lds	r27, 0x0B82
    3624:	81 81       	ldd	r24, Z+1	; 0x01
    3626:	1b 96       	adiw	r26, 0x0b	; 11
    3628:	8c 93       	st	X, r24
    362a:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	14 96       	adiw	r26, 0x04	; 4
    3630:	8c 93       	st	X, r24
	nrk_int_enable();
    3632:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>
    3636:	81 e0       	ldi	r24, 0x01	; 1

	return NRK_OK;
}
    3638:	0f 90       	pop	r0
    363a:	cf 91       	pop	r28
    363c:	df 91       	pop	r29
    363e:	1f 91       	pop	r17
    3640:	0f 91       	pop	r16
    3642:	08 95       	ret

00003644 <nrk_event_wait>:

uint32_t nrk_event_wait(uint32_t event_mask)
{

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    3644:	e0 91 81 0b 	lds	r30, 0x0B81
    3648:	f0 91 82 0b 	lds	r31, 0x0B82
    364c:	25 85       	ldd	r18, Z+13	; 0x0d
    364e:	36 85       	ldd	r19, Z+14	; 0x0e
    3650:	47 85       	ldd	r20, Z+15	; 0x0f
    3652:	50 89       	ldd	r21, Z+16	; 0x10
    3654:	26 23       	and	r18, r22
    3656:	37 23       	and	r19, r23
    3658:	48 23       	and	r20, r24
    365a:	59 23       	and	r21, r25
    365c:	21 15       	cp	r18, r1
    365e:	31 05       	cpc	r19, r1
    3660:	41 05       	cpc	r20, r1
    3662:	51 05       	cpc	r21, r1
    3664:	29 f4       	brne	.+10     	; 0x3670 <nrk_event_wait+0x2c>
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	40 e0       	ldi	r20, 0x00	; 0
    366c:	50 e0       	ldi	r21, 0x00	; 0
    366e:	23 c0       	rjmp	.+70     	; 0x36b6 <nrk_event_wait+0x72>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    3670:	61 8b       	std	Z+17, r22	; 0x11
    3672:	72 8b       	std	Z+18, r23	; 0x12
    3674:	83 8b       	std	Z+19, r24	; 0x13
    3676:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    3678:	21 e0       	ldi	r18, 0x01	; 1
    367a:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    367c:	00 90 71 0b 	lds	r0, 0x0B71
    3680:	04 c0       	rjmp	.+8      	; 0x368a <nrk_event_wait+0x46>
    3682:	96 95       	lsr	r25
    3684:	87 95       	ror	r24
    3686:	77 95       	ror	r23
    3688:	67 95       	ror	r22
    368a:	0a 94       	dec	r0
    368c:	d2 f7       	brpl	.-12     	; 0x3682 <nrk_event_wait+0x3e>
    368e:	61 70       	andi	r22, 0x01	; 1
    3690:	70 70       	andi	r23, 0x00	; 0
    3692:	61 15       	cp	r22, r1
    3694:	71 05       	cpc	r23, r1
    3696:	19 f0       	breq	.+6      	; 0x369e <nrk_event_wait+0x5a>
		nrk_wait_until_nw();
    3698:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <nrk_wait_until_nw>
    369c:	04 c0       	rjmp	.+8      	; 0x36a6 <nrk_event_wait+0x62>
	else
		nrk_wait_until_ticks(0);
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    36a6:	e0 91 81 0b 	lds	r30, 0x0B81
    36aa:	f0 91 82 0b 	lds	r31, 0x0B82
    36ae:	21 89       	ldd	r18, Z+17	; 0x11
    36b0:	32 89       	ldd	r19, Z+18	; 0x12
    36b2:	43 89       	ldd	r20, Z+19	; 0x13
    36b4:	54 89       	ldd	r21, Z+20	; 0x14
}
    36b6:	b9 01       	movw	r22, r18
    36b8:	ca 01       	movw	r24, r20
    36ba:	08 95       	ret

000036bc <nrk_get_high_ready_task_ID>:
//#define TIME_PAD  2

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    36bc:	e0 91 76 0b 	lds	r30, 0x0B76
    36c0:	f0 91 77 0b 	lds	r31, 0x0B77
  return (_head_node->task_ID);
}
    36c4:	80 81       	ld	r24, Z
    36c6:	08 95       	ret

000036c8 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
  nrk_queue *ptr;
  ptr = _head_node;
    36c8:	e0 91 76 0b 	lds	r30, 0x0B76
    36cc:	f0 91 77 0b 	lds	r31, 0x0B77
  //nrk_kprintf (PSTR ("nrk_queue: "));
  while (ptr != NULL) {
    36d0:	03 c0       	rjmp	.+6      	; 0x36d8 <nrk_print_readyQ+0x10>
    //printf ("%d ", ptr->task_ID);
    ptr = ptr->Next;
    36d2:	03 80       	ldd	r0, Z+3	; 0x03
    36d4:	f4 81       	ldd	r31, Z+4	; 0x04
    36d6:	e0 2d       	mov	r30, r0
void nrk_print_readyQ ()
{
  nrk_queue *ptr;
  ptr = _head_node;
  //nrk_kprintf (PSTR ("nrk_queue: "));
  while (ptr != NULL) {
    36d8:	30 97       	sbiw	r30, 0x00	; 0
    36da:	d9 f7       	brne	.-10     	; 0x36d2 <nrk_print_readyQ+0xa>
    //printf ("%d ", ptr->task_ID);
    ptr = ptr->Next;
  }
  //nrk_kprintf (PSTR ("\n\r"));
}
    36dc:	08 95       	ret

000036de <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    36de:	df 92       	push	r13
    36e0:	ef 92       	push	r14
    36e2:	ff 92       	push	r15
    36e4:	0f 93       	push	r16
    36e6:	1f 93       	push	r17
    36e8:	cf 93       	push	r28
    36ea:	df 93       	push	r29
  nrk_queue *NextNode;
  nrk_queue *CurNode;

  //printf( "nrk_add_to_readyQ %d\n",task_ID );
  // nrk_queue full
  if (_free_node == NULL) {
    36ec:	e0 91 c4 0a 	lds	r30, 0x0AC4
    36f0:	f0 91 c5 0a 	lds	r31, 0x0AC5
    36f4:	30 97       	sbiw	r30, 0x00	; 0
    36f6:	09 f4       	brne	.+2      	; 0x36fa <nrk_add_to_readyQ+0x1c>
    36f8:	99 c0       	rjmp	.+306    	; 0x382c <nrk_add_to_readyQ+0x14e>
    return;
  }


  NextNode = _head_node;
    36fa:	60 91 76 0b 	lds	r22, 0x0B76
    36fe:	70 91 77 0b 	lds	r23, 0x0B77
  CurNode = _free_node;

  if (_head_node != NULL) {
    3702:	61 15       	cp	r22, r1
    3704:	71 05       	cpc	r23, r1
    3706:	19 f4       	brne	.+6      	; 0x370e <nrk_add_to_readyQ+0x30>
    3708:	a0 e0       	ldi	r26, 0x00	; 0
    370a:	b0 e0       	ldi	r27, 0x00	; 0
    370c:	55 c0       	rjmp	.+170    	; 0x37b8 <nrk_add_to_readyQ+0xda>
    370e:	db 01       	movw	r26, r22

    while (NextNode != NULL) {
      if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
        if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    3710:	48 2f       	mov	r20, r24
    3712:	55 27       	eor	r21, r21
    3714:	47 fd       	sbrc	r20, 7
    3716:	50 95       	com	r21
    3718:	9a 01       	movw	r18, r20
    371a:	15 e0       	ldi	r17, 0x05	; 5
    371c:	22 0f       	add	r18, r18
    371e:	33 1f       	adc	r19, r19
    3720:	1a 95       	dec	r17
    3722:	e1 f7       	brne	.-8      	; 0x371c <nrk_add_to_readyQ+0x3e>
    3724:	24 0f       	add	r18, r20
    3726:	35 1f       	adc	r19, r21
    3728:	2a 53       	subi	r18, 0x3A	; 58
    372a:	35 4f       	sbci	r19, 0xF5	; 245
    372c:	89 01       	movw	r16, r18
    372e:	06 5f       	subi	r16, 0xF6	; 246
    3730:	1f 4f       	sbci	r17, 0xFF	; 255
            nrk_task_TCB[task_ID].task_prio)
          break;
      if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3732:	44 e0       	ldi	r20, 0x04	; 4
    3734:	e4 2e       	mov	r14, r20
    3736:	f1 2c       	mov	r15, r1
    3738:	e2 0e       	add	r14, r18
    373a:	f3 1e       	adc	r15, r19
        if (nrk_task_TCB[NextNode->task_ID].task_prio <
    373c:	25 5f       	subi	r18, 0xF5	; 245
    373e:	3f 4f       	sbci	r19, 0xFF	; 255
  CurNode = _free_node;

  if (_head_node != NULL) {

    while (NextNode != NULL) {
      if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3740:	4c 91       	ld	r20, X
    3742:	50 e0       	ldi	r21, 0x00	; 0
    3744:	ea 01       	movw	r28, r20
    3746:	95 e0       	ldi	r25, 0x05	; 5
    3748:	cc 0f       	add	r28, r28
    374a:	dd 1f       	adc	r29, r29
    374c:	9a 95       	dec	r25
    374e:	e1 f7       	brne	.-8      	; 0x3748 <nrk_add_to_readyQ+0x6a>
    3750:	c4 0f       	add	r28, r20
    3752:	d5 1f       	adc	r29, r21
    3754:	ca 53       	subi	r28, 0x3A	; 58
    3756:	d5 4f       	sbci	r29, 0xF5	; 245
    3758:	9c 81       	ldd	r25, Y+4	; 0x04
    375a:	99 23       	and	r25, r25
    375c:	29 f0       	breq	.+10     	; 0x3768 <nrk_add_to_readyQ+0x8a>
        if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    375e:	db 84       	ldd	r13, Y+11	; 0x0b
    3760:	e8 01       	movw	r28, r16
    3762:	98 81       	ld	r25, Y
    3764:	d9 16       	cp	r13, r25
    3766:	40 f1       	brcs	.+80     	; 0x37b8 <nrk_add_to_readyQ+0xda>
            nrk_task_TCB[task_ID].task_prio)
          break;
      if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3768:	e7 01       	movw	r28, r14
    376a:	98 81       	ld	r25, Y
    376c:	99 23       	and	r25, r25
    376e:	79 f0       	breq	.+30     	; 0x378e <nrk_add_to_readyQ+0xb0>
        if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3770:	ea 01       	movw	r28, r20
    3772:	95 e0       	ldi	r25, 0x05	; 5
    3774:	cc 0f       	add	r28, r28
    3776:	dd 1f       	adc	r29, r29
    3778:	9a 95       	dec	r25
    377a:	e1 f7       	brne	.-8      	; 0x3774 <nrk_add_to_readyQ+0x96>
    377c:	c4 0f       	add	r28, r20
    377e:	d5 1f       	adc	r29, r21
    3780:	ca 53       	subi	r28, 0x3A	; 58
    3782:	d5 4f       	sbci	r29, 0xF5	; 245
    3784:	da 84       	ldd	r13, Y+10	; 0x0a
    3786:	e9 01       	movw	r28, r18
    3788:	98 81       	ld	r25, Y
    378a:	d9 16       	cp	r13, r25
    378c:	a8 f0       	brcs	.+42     	; 0x37b8 <nrk_add_to_readyQ+0xda>
            nrk_task_TCB[task_ID].task_prio_ceil)
          break;
      if (nrk_task_TCB[NextNode->task_ID].task_prio <
    378e:	ea 01       	movw	r28, r20
    3790:	95 e0       	ldi	r25, 0x05	; 5
    3792:	cc 0f       	add	r28, r28
    3794:	dd 1f       	adc	r29, r29
    3796:	9a 95       	dec	r25
    3798:	e1 f7       	brne	.-8      	; 0x3792 <nrk_add_to_readyQ+0xb4>
    379a:	c4 0f       	add	r28, r20
    379c:	d5 1f       	adc	r29, r21
    379e:	ca 53       	subi	r28, 0x3A	; 58
    37a0:	d5 4f       	sbci	r29, 0xF5	; 245
    37a2:	4a 85       	ldd	r20, Y+10	; 0x0a
    37a4:	e8 01       	movw	r28, r16
    37a6:	98 81       	ld	r25, Y
    37a8:	49 17       	cp	r20, r25
    37aa:	30 f0       	brcs	.+12     	; 0x37b8 <nrk_add_to_readyQ+0xda>
          nrk_task_TCB[task_ID].task_prio)
        break;

      NextNode = NextNode->Next;
    37ac:	13 96       	adiw	r26, 0x03	; 3
    37ae:	0d 90       	ld	r0, X+
    37b0:	bc 91       	ld	r27, X
    37b2:	a0 2d       	mov	r26, r0
  NextNode = _head_node;
  CurNode = _free_node;

  if (_head_node != NULL) {

    while (NextNode != NULL) {
    37b4:	10 97       	sbiw	r26, 0x00	; 0
    37b6:	21 f6       	brne	.-120    	; 0x3740 <nrk_add_to_readyQ+0x62>
    // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
    // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2 

  }

  CurNode->task_ID = task_ID;
    37b8:	80 83       	st	Z, r24
  _free_node = _free_node->Next;
    37ba:	c3 81       	ldd	r28, Z+3	; 0x03
    37bc:	d4 81       	ldd	r29, Z+4	; 0x04
    37be:	d0 93 c5 0a 	sts	0x0AC5, r29
    37c2:	c0 93 c4 0a 	sts	0x0AC4, r28

  if (NextNode == _head_node) {
    37c6:	a6 17       	cp	r26, r22
    37c8:	b7 07       	cpc	r27, r23
    37ca:	b1 f4       	brne	.+44     	; 0x37f8 <nrk_add_to_readyQ+0x11a>
    //at start
    if (_head_node != NULL) {
    37cc:	10 97       	sbiw	r26, 0x00	; 0
    37ce:	49 f0       	breq	.+18     	; 0x37e2 <nrk_add_to_readyQ+0x104>
      CurNode->Next = _head_node;
    37d0:	b4 83       	std	Z+4, r27	; 0x04
    37d2:	a3 83       	std	Z+3, r26	; 0x03
      CurNode->Prev = NULL;
    37d4:	12 82       	std	Z+2, r1	; 0x02
    37d6:	11 82       	std	Z+1, r1	; 0x01
      _head_node->Prev = CurNode;
    37d8:	12 96       	adiw	r26, 0x02	; 2
    37da:	fc 93       	st	X, r31
    37dc:	ee 93       	st	-X, r30
    37de:	11 97       	sbiw	r26, 0x01	; 1
    37e0:	06 c0       	rjmp	.+12     	; 0x37ee <nrk_add_to_readyQ+0x110>
    }
    else {
      CurNode->Next = NULL;
    37e2:	14 82       	std	Z+4, r1	; 0x04
    37e4:	13 82       	std	Z+3, r1	; 0x03
      CurNode->Prev = NULL;
    37e6:	12 82       	std	Z+2, r1	; 0x02
    37e8:	11 82       	std	Z+1, r1	; 0x01
      _free_node->Prev = CurNode;
    37ea:	fa 83       	std	Y+2, r31	; 0x02
    37ec:	e9 83       	std	Y+1, r30	; 0x01
    }
    _head_node = CurNode;
    37ee:	f0 93 77 0b 	sts	0x0B77, r31
    37f2:	e0 93 76 0b 	sts	0x0B76, r30
    37f6:	1a c0       	rjmp	.+52     	; 0x382c <nrk_add_to_readyQ+0x14e>
    37f8:	11 96       	adiw	r26, 0x01	; 1
    37fa:	8d 91       	ld	r24, X+
    37fc:	9c 91       	ld	r25, X
    37fe:	12 97       	sbiw	r26, 0x02	; 2

  }
  else {
    if (NextNode != _free_node) {
    3800:	ac 17       	cp	r26, r28
    3802:	bd 07       	cpc	r27, r29
    3804:	59 f0       	breq	.+22     	; 0x381c <nrk_add_to_readyQ+0x13e>
      // Insert  in middle

      CurNode->Prev = NextNode->Prev;
    3806:	92 83       	std	Z+2, r25	; 0x02
    3808:	81 83       	std	Z+1, r24	; 0x01
      CurNode->Next = NextNode;
    380a:	b4 83       	std	Z+4, r27	; 0x04
    380c:	a3 83       	std	Z+3, r26	; 0x03
      (NextNode->Prev)->Next = CurNode;
    380e:	11 96       	adiw	r26, 0x01	; 1
    3810:	cd 91       	ld	r28, X+
    3812:	dc 91       	ld	r29, X
    3814:	12 97       	sbiw	r26, 0x02	; 2
    3816:	fc 83       	std	Y+4, r31	; 0x04
    3818:	eb 83       	std	Y+3, r30	; 0x03
    381a:	04 c0       	rjmp	.+8      	; 0x3824 <nrk_add_to_readyQ+0x146>
      NextNode->Prev = CurNode;
    }
    else {
      //insert at end
      CurNode->Next = NULL;
    381c:	14 82       	std	Z+4, r1	; 0x04
    381e:	13 82       	std	Z+3, r1	; 0x03
      CurNode->Prev = _free_node->Prev;
    3820:	92 83       	std	Z+2, r25	; 0x02
    3822:	81 83       	std	Z+1, r24	; 0x01
      _free_node->Prev = CurNode;
    3824:	12 96       	adiw	r26, 0x02	; 2
    3826:	fc 93       	st	X, r31
    3828:	ee 93       	st	-X, r30
    382a:	11 97       	sbiw	r26, 0x01	; 1
    }

  }

}
    382c:	df 91       	pop	r29
    382e:	cf 91       	pop	r28
    3830:	1f 91       	pop	r17
    3832:	0f 91       	pop	r16
    3834:	ff 90       	pop	r15
    3836:	ef 90       	pop	r14
    3838:	df 90       	pop	r13
    383a:	08 95       	ret

0000383c <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
     }
   */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

  if (_head_node == NULL)
    3840:	e0 91 76 0b 	lds	r30, 0x0B76
    3844:	f0 91 77 0b 	lds	r31, 0x0B77
    3848:	30 97       	sbiw	r30, 0x00	; 0
    384a:	09 f4       	brne	.+2      	; 0x384e <nrk_rem_from_readyQ+0x12>
    384c:	4d c0       	rjmp	.+154    	; 0x38e8 <nrk_rem_from_readyQ+0xac>
    return;

  CurNode = _head_node;

  if (_head_node->task_ID == task_ID) {
    384e:	48 2f       	mov	r20, r24
    3850:	55 27       	eor	r21, r21
    3852:	47 fd       	sbrc	r20, 7
    3854:	50 95       	com	r21
    3856:	80 81       	ld	r24, Z
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	84 17       	cp	r24, r20
    385c:	95 07       	cpc	r25, r21
    385e:	79 f4       	brne	.+30     	; 0x387e <nrk_rem_from_readyQ+0x42>
    //REmove from start
    _head_node = _head_node->Next;
    3860:	a3 81       	ldd	r26, Z+3	; 0x03
    3862:	b4 81       	ldd	r27, Z+4	; 0x04
    3864:	b0 93 77 0b 	sts	0x0B77, r27
    3868:	a0 93 76 0b 	sts	0x0B76, r26
    _head_node->Prev = NULL;
    386c:	12 96       	adiw	r26, 0x02	; 2
    386e:	1c 92       	st	X, r1
    3870:	1e 92       	st	-X, r1
    3872:	11 97       	sbiw	r26, 0x01	; 1
    3874:	0e c0       	rjmp	.+28     	; 0x3892 <nrk_rem_from_readyQ+0x56>
  }
  else {
    while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
      CurNode = CurNode->Next;
    3876:	e2 2f       	mov	r30, r18
    3878:	f9 2f       	mov	r31, r25
    //REmove from start
    _head_node = _head_node->Next;
    _head_node->Prev = NULL;
  }
  else {
    while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    387a:	30 97       	sbiw	r30, 0x00	; 0
    387c:	a9 f1       	breq	.+106    	; 0x38e8 <nrk_rem_from_readyQ+0xac>
    387e:	60 81       	ld	r22, Z
    3880:	70 e0       	ldi	r23, 0x00	; 0
    3882:	23 81       	ldd	r18, Z+3	; 0x03
    3884:	94 81       	ldd	r25, Z+4	; 0x04
    3886:	64 17       	cp	r22, r20
    3888:	75 07       	cpc	r23, r21
    388a:	a9 f7       	brne	.-22     	; 0x3876 <nrk_rem_from_readyQ+0x3a>
    388c:	20 c0       	rjmp	.+64     	; 0x38ce <nrk_rem_from_readyQ+0x92>
      return;


    (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    if (CurNode->Next != NULL)
      (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    388e:	ba 83       	std	Y+2, r27	; 0x02
    3890:	a9 83       	std	Y+1, r26	; 0x01
  }



  // Add to free list
  if (_free_node == NULL) {
    3892:	a0 91 c4 0a 	lds	r26, 0x0AC4
    3896:	b0 91 c5 0a 	lds	r27, 0x0AC5
    389a:	10 97       	sbiw	r26, 0x00	; 0
    389c:	39 f4       	brne	.+14     	; 0x38ac <nrk_rem_from_readyQ+0x70>
    _free_node = CurNode;
    389e:	f0 93 c5 0a 	sts	0x0AC5, r31
    38a2:	e0 93 c4 0a 	sts	0x0AC4, r30
    _free_node->Next = NULL;
    38a6:	14 82       	std	Z+4, r1	; 0x04
    38a8:	13 82       	std	Z+3, r1	; 0x03
    38aa:	0a c0       	rjmp	.+20     	; 0x38c0 <nrk_rem_from_readyQ+0x84>
  }
  else {
    CurNode->Next = _free_node;
    38ac:	b4 83       	std	Z+4, r27	; 0x04
    38ae:	a3 83       	std	Z+3, r26	; 0x03
    _free_node->Prev = CurNode;
    38b0:	12 96       	adiw	r26, 0x02	; 2
    38b2:	fc 93       	st	X, r31
    38b4:	ee 93       	st	-X, r30
    38b6:	11 97       	sbiw	r26, 0x01	; 1
    _free_node = CurNode;
    38b8:	f0 93 c5 0a 	sts	0x0AC5, r31
    38bc:	e0 93 c4 0a 	sts	0x0AC4, r30
  }
  _free_node->Prev = NULL;
    38c0:	e0 91 c4 0a 	lds	r30, 0x0AC4
    38c4:	f0 91 c5 0a 	lds	r31, 0x0AC5
    38c8:	12 82       	std	Z+2, r1	; 0x02
    38ca:	11 82       	std	Z+1, r1	; 0x01
    38cc:	0d c0       	rjmp	.+26     	; 0x38e8 <nrk_rem_from_readyQ+0xac>
      CurNode = CurNode->Next;
    if (CurNode == NULL)
      return;


    (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    38ce:	a1 81       	ldd	r26, Z+1	; 0x01
    38d0:	b2 81       	ldd	r27, Z+2	; 0x02
    38d2:	13 96       	adiw	r26, 0x03	; 3
    38d4:	2c 93       	st	X, r18
    38d6:	13 97       	sbiw	r26, 0x03	; 3
    38d8:	14 96       	adiw	r26, 0x04	; 4
    38da:	9c 93       	st	X, r25
    38dc:	14 97       	sbiw	r26, 0x04	; 4
    if (CurNode->Next != NULL)
    38de:	c3 81       	ldd	r28, Z+3	; 0x03
    38e0:	d4 81       	ldd	r29, Z+4	; 0x04
    38e2:	20 97       	sbiw	r28, 0x00	; 0
    38e4:	a1 f6       	brne	.-88     	; 0x388e <nrk_rem_from_readyQ+0x52>
    38e6:	d5 cf       	rjmp	.-86     	; 0x3892 <nrk_rem_from_readyQ+0x56>
    CurNode->Next = _free_node;
    _free_node->Prev = CurNode;
    _free_node = CurNode;
  }
  _free_node->Prev = NULL;
}
    38e8:	df 91       	pop	r29
    38ea:	cf 91       	pop	r28
    38ec:	08 95       	ret

000038ee <nrk_get_pid>:
  return NRK_OK;
}


uint8_t nrk_get_pid ()
{
    38ee:	e0 91 81 0b 	lds	r30, 0x0B81
    38f2:	f0 91 82 0b 	lds	r31, 0x0B82
  return nrk_cur_task_TCB->task_ID;
}
    38f6:	80 85       	ldd	r24, Z+8	; 0x08
    38f8:	08 95       	ret

000038fa <_nrk_wait_for_scheduler>:
inline void _nrk_wait_for_scheduler ()
{

  //TIMSK = BM (OCIE1A);
  do {
    nrk_idle ();                // wait for the interrupt to tick...
    38fa:	0e 94 10 27 	call	0x4e20	; 0x4e20 <nrk_idle>
  } while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1);
    38fe:	e0 91 81 0b 	lds	r30, 0x0B81
    3902:	f0 91 82 0b 	lds	r31, 0x0B82
    3906:	85 81       	ldd	r24, Z+5	; 0x05
    3908:	88 23       	and	r24, r24
    390a:	b9 f7       	brne	.-18     	; 0x38fa <_nrk_wait_for_scheduler>

  //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    390c:	08 95       	ret

0000390e <nrk_wait>:
  return NRK_OK;
}


int8_t nrk_wait (nrk_time_t t)
{
    390e:	ef 92       	push	r14
    3910:	ff 92       	push	r15
    3912:	1f 93       	push	r17
    3914:	df 93       	push	r29
    3916:	cf 93       	push	r28
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	28 97       	sbiw	r28, 0x08	; 8
    391e:	0f b6       	in	r0, 0x3f	; 63
    3920:	f8 94       	cli
    3922:	de bf       	out	0x3e, r29	; 62
    3924:	0f be       	out	0x3f, r0	; 63
    3926:	cd bf       	out	0x3d, r28	; 61
    3928:	29 83       	std	Y+1, r18	; 0x01
    392a:	3a 83       	std	Y+2, r19	; 0x02
    392c:	4b 83       	std	Y+3, r20	; 0x03
    392e:	5c 83       	std	Y+4, r21	; 0x04
    3930:	6d 83       	std	Y+5, r22	; 0x05
    3932:	7e 83       	std	Y+6, r23	; 0x06
    3934:	8f 83       	std	Y+7, r24	; 0x07
    3936:	98 87       	std	Y+8, r25	; 0x08
  uint8_t timer;
  uint16_t nw;

  nrk_stack_check ();
    3938:	0e 94 3a 18 	call	0x3074	; 0x3074 <nrk_stack_check>

  nrk_int_disable ();
    393c:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    3940:	e0 91 81 0b 	lds	r30, 0x0B81
    3944:	f0 91 82 0b 	lds	r31, 0x0B82
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->num_periods = 1;
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	90 a3       	std	Z+32, r25	; 0x20
    3952:	87 8f       	std	Z+31, r24	; 0x1f
  timer = _nrk_os_timer_get ();
    3954:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_nrk_os_timer_get>
    3958:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);
  nw = _nrk_time_to_ticks (t);
    395a:	29 81       	ldd	r18, Y+1	; 0x01
    395c:	3a 81       	ldd	r19, Y+2	; 0x02
    395e:	4b 81       	ldd	r20, Y+3	; 0x03
    3960:	5c 81       	ldd	r21, Y+4	; 0x04
    3962:	6d 81       	ldd	r22, Y+5	; 0x05
    3964:	7e 81       	ldd	r23, Y+6	; 0x06
    3966:	8f 81       	ldd	r24, Y+7	; 0x07
    3968:	98 85       	ldd	r25, Y+8	; 0x08
    396a:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <_nrk_time_to_ticks>
//printf( "t2 %u\n",nw );
  nrk_cur_task_TCB->next_wakeup = nw + timer;
    396e:	e0 91 81 0b 	lds	r30, 0x0B81
    3972:	f0 91 82 0b 	lds	r31, 0x0B82
    3976:	e1 2e       	mov	r14, r17
    3978:	ff 24       	eor	r15, r15
    397a:	8e 0d       	add	r24, r14
    397c:	9f 1d       	adc	r25, r15
    397e:	96 8b       	std	Z+22, r25	; 0x16
    3980:	85 8b       	std	Z+21, r24	; 0x15
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3982:	18 3f       	cpi	r17, 0xF8	; 248
    3984:	78 f4       	brcc	.+30     	; 0x39a4 <nrk_wait+0x96>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3986:	0e 94 65 24 	call	0x48ca	; 0x48ca <_nrk_get_next_wakeup>
    398a:	08 94       	sec
    398c:	e1 1c       	adc	r14, r1
    398e:	f1 1c       	adc	r15, r1
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	e8 16       	cp	r14, r24
    3994:	f9 06       	cpc	r15, r25
    3996:	34 f4       	brge	.+12     	; 0x39a4 <nrk_wait+0x96>
      timer += TIME_PAD;
    3998:	81 2f       	mov	r24, r17
    399a:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    399c:	80 93 04 09 	sts	0x0904, r24
      _nrk_set_next_wakeup (timer);
    39a0:	0e 94 69 24 	call	0x48d2	; 0x48d2 <_nrk_set_next_wakeup>
    }
  nrk_int_enable ();
    39a4:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>

  _nrk_wait_for_scheduler ();
    39a8:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	28 96       	adiw	r28, 0x08	; 8
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	f8 94       	cli
    39b4:	de bf       	out	0x3e, r29	; 62
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	cd bf       	out	0x3d, r28	; 61
    39ba:	cf 91       	pop	r28
    39bc:	df 91       	pop	r29
    39be:	1f 91       	pop	r17
    39c0:	ff 90       	pop	r15
    39c2:	ef 90       	pop	r14
    39c4:	08 95       	ret

000039c6 <nrk_wait_until>:
  //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    39c6:	8f 92       	push	r8
    39c8:	9f 92       	push	r9
    39ca:	af 92       	push	r10
    39cc:	bf 92       	push	r11
    39ce:	cf 92       	push	r12
    39d0:	df 92       	push	r13
    39d2:	ef 92       	push	r14
    39d4:	ff 92       	push	r15
    39d6:	0f 93       	push	r16
    39d8:	1f 93       	push	r17
    39da:	df 93       	push	r29
    39dc:	cf 93       	push	r28
    39de:	cd b7       	in	r28, 0x3d	; 61
    39e0:	de b7       	in	r29, 0x3e	; 62
    39e2:	60 97       	sbiw	r28, 0x10	; 16
    39e4:	0f b6       	in	r0, 0x3f	; 63
    39e6:	f8 94       	cli
    39e8:	de bf       	out	0x3e, r29	; 62
    39ea:	0f be       	out	0x3f, r0	; 63
    39ec:	cd bf       	out	0x3d, r28	; 61
    39ee:	29 87       	std	Y+9, r18	; 0x09
    39f0:	3a 87       	std	Y+10, r19	; 0x0a
    39f2:	4b 87       	std	Y+11, r20	; 0x0b
    39f4:	5c 87       	std	Y+12, r21	; 0x0c
    39f6:	6d 87       	std	Y+13, r22	; 0x0d
    39f8:	7e 87       	std	Y+14, r23	; 0x0e
    39fa:	8f 87       	std	Y+15, r24	; 0x0f
    39fc:	98 8b       	std	Y+16, r25	; 0x10
  nrk_time_t ct;
  uint8_t v;

  nrk_time_get (&ct);
    39fe:	ce 01       	movw	r24, r28
    3a00:	01 96       	adiw	r24, 0x01	; 1
    3a02:	0e 94 3c 21 	call	0x4278	; 0x4278 <nrk_time_get>

  v = nrk_time_sub (&t, t, ct);
    3a06:	ce 01       	movw	r24, r28
    3a08:	09 96       	adiw	r24, 0x09	; 9
    3a0a:	09 85       	ldd	r16, Y+9	; 0x09
    3a0c:	1a 85       	ldd	r17, Y+10	; 0x0a
    3a0e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a10:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a12:	4d 85       	ldd	r20, Y+13	; 0x0d
    3a14:	5e 85       	ldd	r21, Y+14	; 0x0e
    3a16:	6f 85       	ldd	r22, Y+15	; 0x0f
    3a18:	78 89       	ldd	r23, Y+16	; 0x10
    3a1a:	89 80       	ldd	r8, Y+1	; 0x01
    3a1c:	9a 80       	ldd	r9, Y+2	; 0x02
    3a1e:	ab 80       	ldd	r10, Y+3	; 0x03
    3a20:	bc 80       	ldd	r11, Y+4	; 0x04
    3a22:	cd 80       	ldd	r12, Y+5	; 0x05
    3a24:	de 80       	ldd	r13, Y+6	; 0x06
    3a26:	ef 80       	ldd	r14, Y+7	; 0x07
    3a28:	f8 84       	ldd	r15, Y+8	; 0x08
    3a2a:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <nrk_time_sub>
  if (v == 0)
    3a2e:	88 23       	and	r24, r24
    3a30:	11 f4       	brne	.+4      	; 0x3a36 <nrk_wait_until+0x70>
    3a32:	8f ef       	ldi	r24, 0xFF	; 255
    3a34:	0b c0       	rjmp	.+22     	; 0x3a4c <nrk_wait_until+0x86>
//if(t.secs<ct.secs) return 0;
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
  nrk_wait (t);
    3a36:	29 85       	ldd	r18, Y+9	; 0x09
    3a38:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a3a:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a3c:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a3e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3a40:	7e 85       	ldd	r23, Y+14	; 0x0e
    3a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a44:	98 89       	ldd	r25, Y+16	; 0x10
    3a46:	0e 94 87 1c 	call	0x390e	; 0x390e <nrk_wait>
    3a4a:	81 e0       	ldi	r24, 0x01	; 1

  return NRK_OK;
}
    3a4c:	60 96       	adiw	r28, 0x10	; 16
    3a4e:	0f b6       	in	r0, 0x3f	; 63
    3a50:	f8 94       	cli
    3a52:	de bf       	out	0x3e, r29	; 62
    3a54:	0f be       	out	0x3f, r0	; 63
    3a56:	cd bf       	out	0x3d, r28	; 61
    3a58:	cf 91       	pop	r28
    3a5a:	df 91       	pop	r29
    3a5c:	1f 91       	pop	r17
    3a5e:	0f 91       	pop	r16
    3a60:	ff 90       	pop	r15
    3a62:	ef 90       	pop	r14
    3a64:	df 90       	pop	r13
    3a66:	cf 90       	pop	r12
    3a68:	bf 90       	pop	r11
    3a6a:	af 90       	pop	r10
    3a6c:	9f 90       	pop	r9
    3a6e:	8f 90       	pop	r8
    3a70:	08 95       	ret

00003a72 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    3a72:	1f 93       	push	r17
  uint8_t timer;
  nrk_int_disable ();
    3a74:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    3a78:	e0 91 81 0b 	lds	r30, 0x0B81
    3a7c:	f0 91 82 0b 	lds	r31, 0x0B82
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->nw_flag = 1;
    3a84:	86 83       	std	Z+6, r24	; 0x06
  timer = _nrk_os_timer_get ();
    3a86:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_nrk_os_timer_get>
    3a8a:	18 2f       	mov	r17, r24

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3a8c:	88 3f       	cpi	r24, 0xF8	; 248
    3a8e:	80 f4       	brcc	.+32     	; 0x3ab0 <nrk_wait_until_nw+0x3e>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3a90:	0e 94 65 24 	call	0x48ca	; 0x48ca <_nrk_get_next_wakeup>
    3a94:	21 2f       	mov	r18, r17
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	2f 5f       	subi	r18, 0xFF	; 255
    3a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	28 17       	cp	r18, r24
    3aa0:	39 07       	cpc	r19, r25
    3aa2:	34 f4       	brge	.+12     	; 0x3ab0 <nrk_wait_until_nw+0x3e>
      timer += TIME_PAD;
    3aa4:	81 2f       	mov	r24, r17
    3aa6:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3aa8:	80 93 04 09 	sts	0x0904, r24
      _nrk_set_next_wakeup (timer);
    3aac:	0e 94 69 24 	call	0x48d2	; 0x48d2 <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    3ab0:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    3ab4:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	1f 91       	pop	r17
    3abc:	08 95       	ret

00003abe <nrk_set_next_wakeup>:
  _nrk_wait_for_scheduler ();
  return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    3abe:	1f 93       	push	r17
    3ac0:	df 93       	push	r29
    3ac2:	cf 93       	push	r28
    3ac4:	cd b7       	in	r28, 0x3d	; 61
    3ac6:	de b7       	in	r29, 0x3e	; 62
    3ac8:	28 97       	sbiw	r28, 0x08	; 8
    3aca:	0f b6       	in	r0, 0x3f	; 63
    3acc:	f8 94       	cli
    3ace:	de bf       	out	0x3e, r29	; 62
    3ad0:	0f be       	out	0x3f, r0	; 63
    3ad2:	cd bf       	out	0x3d, r28	; 61
    3ad4:	29 83       	std	Y+1, r18	; 0x01
    3ad6:	3a 83       	std	Y+2, r19	; 0x02
    3ad8:	4b 83       	std	Y+3, r20	; 0x03
    3ada:	5c 83       	std	Y+4, r21	; 0x04
    3adc:	6d 83       	std	Y+5, r22	; 0x05
    3ade:	7e 83       	std	Y+6, r23	; 0x06
    3ae0:	8f 83       	std	Y+7, r24	; 0x07
    3ae2:	98 87       	std	Y+8, r25	; 0x08
  uint8_t timer;
  uint16_t nw;
  nrk_int_disable ();
    3ae4:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>
  timer = _nrk_os_timer_get ();
    3ae8:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_nrk_os_timer_get>
    3aec:	18 2f       	mov	r17, r24
  nw = _nrk_time_to_ticks (t);
    3aee:	29 81       	ldd	r18, Y+1	; 0x01
    3af0:	3a 81       	ldd	r19, Y+2	; 0x02
    3af2:	4b 81       	ldd	r20, Y+3	; 0x03
    3af4:	5c 81       	ldd	r21, Y+4	; 0x04
    3af6:	6d 81       	ldd	r22, Y+5	; 0x05
    3af8:	7e 81       	ldd	r23, Y+6	; 0x06
    3afa:	8f 81       	ldd	r24, Y+7	; 0x07
    3afc:	98 85       	ldd	r25, Y+8	; 0x08
    3afe:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <_nrk_time_to_ticks>
  if (nw <= TIME_PAD)
    3b02:	83 30       	cpi	r24, 0x03	; 3
    3b04:	91 05       	cpc	r25, r1
    3b06:	10 f4       	brcc	.+4      	; 0x3b0c <nrk_set_next_wakeup+0x4e>
    3b08:	8f ef       	ldi	r24, 0xFF	; 255
    3b0a:	0b c0       	rjmp	.+22     	; 0x3b22 <nrk_set_next_wakeup+0x64>
    return NRK_ERROR;
  nrk_cur_task_TCB->next_wakeup = nw + timer;
    3b0c:	e0 91 81 0b 	lds	r30, 0x0B81
    3b10:	f0 91 82 0b 	lds	r31, 0x0B82
    3b14:	81 0f       	add	r24, r17
    3b16:	91 1d       	adc	r25, r1
    3b18:	96 8b       	std	Z+22, r25	; 0x16
    3b1a:	85 8b       	std	Z+21, r24	; 0x15
			_nrk_prev_timer_val=timer;
			_nrk_set_next_wakeup(timer);
		}
*/
//      nrk_cur_task_TCB->nw_flag=1;
  nrk_int_enable ();
    3b1c:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>
    3b20:	81 e0       	ldi	r24, 0x01	; 1

  return NRK_OK;
}
    3b22:	28 96       	adiw	r28, 0x08	; 8
    3b24:	0f b6       	in	r0, 0x3f	; 63
    3b26:	f8 94       	cli
    3b28:	de bf       	out	0x3e, r29	; 62
    3b2a:	0f be       	out	0x3f, r0	; 63
    3b2c:	cd bf       	out	0x3d, r28	; 61
    3b2e:	cf 91       	pop	r28
    3b30:	df 91       	pop	r29
    3b32:	1f 91       	pop	r17
    3b34:	08 95       	ret

00003b36 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    3b36:	1f 93       	push	r17
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	ec 01       	movw	r28, r24
  uint8_t timer;
  nrk_int_disable ();
    3b3e:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    3b42:	e0 91 81 0b 	lds	r30, 0x0B81
    3b46:	f0 91 82 0b 	lds	r31, 0x0B82
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->next_wakeup = ticks;
    3b4e:	d6 8b       	std	Z+22, r29	; 0x16
    3b50:	c5 8b       	std	Z+21, r28	; 0x15
  timer = _nrk_os_timer_get ();
    3b52:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_nrk_os_timer_get>
    3b56:	18 2f       	mov	r17, r24

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3b58:	88 3f       	cpi	r24, 0xF8	; 248
    3b5a:	80 f4       	brcc	.+32     	; 0x3b7c <nrk_wait_until_ticks+0x46>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3b5c:	0e 94 65 24 	call	0x48ca	; 0x48ca <_nrk_get_next_wakeup>
    3b60:	21 2f       	mov	r18, r17
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	2f 5f       	subi	r18, 0xFF	; 255
    3b66:	3f 4f       	sbci	r19, 0xFF	; 255
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	28 17       	cp	r18, r24
    3b6c:	39 07       	cpc	r19, r25
    3b6e:	34 f4       	brge	.+12     	; 0x3b7c <nrk_wait_until_ticks+0x46>
      timer += TIME_PAD;
    3b70:	81 2f       	mov	r24, r17
    3b72:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3b74:	80 93 04 09 	sts	0x0904, r24
      _nrk_set_next_wakeup (timer);
    3b78:	0e 94 69 24 	call	0x48d2	; 0x48d2 <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    3b7c:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    3b80:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	df 91       	pop	r29
    3b88:	cf 91       	pop	r28
    3b8a:	1f 91       	pop	r17
    3b8c:	08 95       	ret

00003b8e <nrk_wait_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    3b8e:	ef 92       	push	r14
    3b90:	ff 92       	push	r15
    3b92:	1f 93       	push	r17
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	7c 01       	movw	r14, r24
  uint8_t timer;
  nrk_int_disable ();
    3b9a:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    3b9e:	e0 91 81 0b 	lds	r30, 0x0B81
    3ba2:	f0 91 82 0b 	lds	r31, 0x0B82
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	85 83       	std	Z+5, r24	; 0x05
  timer = _nrk_os_timer_get ();
    3baa:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_nrk_os_timer_get>
    3bae:	18 2f       	mov	r17, r24
  nrk_cur_task_TCB->next_wakeup = ticks + timer;
    3bb0:	e0 91 81 0b 	lds	r30, 0x0B81
    3bb4:	f0 91 82 0b 	lds	r31, 0x0B82
    3bb8:	c8 2f       	mov	r28, r24
    3bba:	d0 e0       	ldi	r29, 0x00	; 0
    3bbc:	ec 0e       	add	r14, r28
    3bbe:	fd 1e       	adc	r15, r29
    3bc0:	f6 8a       	std	Z+22, r15	; 0x16
    3bc2:	e5 8a       	std	Z+21, r14	; 0x15

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3bc4:	88 3f       	cpi	r24, 0xF8	; 248
    3bc6:	68 f4       	brcc	.+26     	; 0x3be2 <nrk_wait_ticks+0x54>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3bc8:	0e 94 65 24 	call	0x48ca	; 0x48ca <_nrk_get_next_wakeup>
    3bcc:	21 96       	adiw	r28, 0x01	; 1
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	c8 17       	cp	r28, r24
    3bd2:	d9 07       	cpc	r29, r25
    3bd4:	34 f4       	brge	.+12     	; 0x3be2 <nrk_wait_ticks+0x54>
      timer += TIME_PAD;
    3bd6:	81 2f       	mov	r24, r17
    3bd8:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3bda:	80 93 04 09 	sts	0x0904, r24
      _nrk_set_next_wakeup (timer);
    3bde:	0e 94 69 24 	call	0x48d2	; 0x48d2 <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    3be2:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    3be6:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	df 91       	pop	r29
    3bee:	cf 91       	pop	r28
    3bf0:	1f 91       	pop	r17
    3bf2:	ff 90       	pop	r15
    3bf4:	ef 90       	pop	r14
    3bf6:	08 95       	ret

00003bf8 <nrk_wait_until_next_n_periods>:
  _nrk_wait_for_scheduler ();
  return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    3bf8:	1f 93       	push	r17
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
    3bfe:	ec 01       	movw	r28, r24
  uint8_t timer;

  nrk_stack_check ();
    3c00:	0e 94 3a 18 	call	0x3074	; 0x3074 <nrk_stack_check>

  if (p == 0)
    3c04:	20 97       	sbiw	r28, 0x00	; 0
    3c06:	11 f4       	brne	.+4      	; 0x3c0c <nrk_wait_until_next_n_periods+0x14>
    3c08:	c1 e0       	ldi	r28, 0x01	; 1
    3c0a:	d0 e0       	ldi	r29, 0x00	; 0
    p = 1;
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
  nrk_int_disable ();
    3c0c:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    3c10:	e0 91 81 0b 	lds	r30, 0x0B81
    3c14:	f0 91 82 0b 	lds	r31, 0x0B82
    3c18:	81 e0       	ldi	r24, 0x01	; 1
    3c1a:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->num_periods = p;
    3c1c:	d0 a3       	std	Z+32, r29	; 0x20
    3c1e:	c7 8f       	std	Z+31, r28	; 0x1f
  timer = _nrk_os_timer_get ();
    3c20:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_nrk_os_timer_get>
    3c24:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    3c26:	88 3f       	cpi	r24, 0xF8	; 248
    3c28:	80 f4       	brcc	.+32     	; 0x3c4a <nrk_wait_until_next_n_periods+0x52>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3c2a:	0e 94 65 24 	call	0x48ca	; 0x48ca <_nrk_get_next_wakeup>
    3c2e:	21 2f       	mov	r18, r17
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	2f 5f       	subi	r18, 0xFF	; 255
    3c34:	3f 4f       	sbci	r19, 0xFF	; 255
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	28 17       	cp	r18, r24
    3c3a:	39 07       	cpc	r19, r25
    3c3c:	34 f4       	brge	.+12     	; 0x3c4a <nrk_wait_until_next_n_periods+0x52>
      timer += TIME_PAD;
    3c3e:	81 2f       	mov	r24, r17
    3c40:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3c42:	80 93 04 09 	sts	0x0904, r24
      _nrk_set_next_wakeup (timer);
    3c46:	0e 94 69 24 	call	0x48d2	; 0x48d2 <_nrk_set_next_wakeup>
    }

  nrk_int_enable ();
    3c4a:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>

  _nrk_wait_for_scheduler ();
    3c4e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <_nrk_wait_for_scheduler>

  return NRK_OK;
}
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	df 91       	pop	r29
    3c56:	cf 91       	pop	r28
    3c58:	1f 91       	pop	r17
    3c5a:	08 95       	ret

00003c5c <nrk_wait_until_next_period>:
  nrk_wait_until_next_period ();
  return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    3c5c:	1f 93       	push	r17
  uint8_t timer;

  nrk_stack_check ();
    3c5e:	0e 94 3a 18 	call	0x3074	; 0x3074 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
  nrk_int_disable ();
    3c62:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>
  nrk_cur_task_TCB->num_periods = 1;
    3c66:	e0 91 81 0b 	lds	r30, 0x0B81
    3c6a:	f0 91 82 0b 	lds	r31, 0x0B82
    3c6e:	81 e0       	ldi	r24, 0x01	; 1
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	90 a3       	std	Z+32, r25	; 0x20
    3c74:	87 8f       	std	Z+31, r24	; 0x1f
  nrk_cur_task_TCB->suspend_flag = 1;
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	85 83       	std	Z+5, r24	; 0x05
  timer = _nrk_os_timer_get ();
    3c7a:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_nrk_os_timer_get>
    3c7e:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;
//printf("1st next wakeup is %d.\n\r",_nrk_get_next_wakeup ());
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3c80:	88 3f       	cpi	r24, 0xF8	; 248
    3c82:	80 f4       	brcc	.+32     	; 0x3ca4 <nrk_wait_until_next_period+0x48>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3c84:	0e 94 65 24 	call	0x48ca	; 0x48ca <_nrk_get_next_wakeup>
    3c88:	21 2f       	mov	r18, r17
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	2f 5f       	subi	r18, 0xFF	; 255
    3c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	28 17       	cp	r18, r24
    3c94:	39 07       	cpc	r19, r25
    3c96:	34 f4       	brge	.+12     	; 0x3ca4 <nrk_wait_until_next_period+0x48>
      timer += TIME_PAD;
    3c98:	81 2f       	mov	r24, r17
    3c9a:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3c9c:	80 93 04 09 	sts	0x0904, r24
	//printf("1st timer is %d.\n\r", timer);
      _nrk_set_next_wakeup (timer);
    3ca0:	0e 94 69 24 	call	0x48d2	; 0x48d2 <_nrk_set_next_wakeup>
    }
	//printf("2nd timer is %d. next wakeup is %d.\n\r", _nrk_os_timer_get (),_nrk_get_next_wakeup ());
  nrk_int_enable ();
    3ca4:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>
  _nrk_wait_for_scheduler ();
    3ca8:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3cac:	81 e0       	ldi	r24, 0x01	; 1
    3cae:	1f 91       	pop	r17
    3cb0:	08 95       	ret

00003cb2 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
  nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    3cb2:	e0 91 81 0b 	lds	r30, 0x0B81
    3cb6:	f0 91 82 0b 	lds	r31, 0x0B82
    3cba:	80 85       	ldd	r24, Z+8	; 0x08
    3cbc:	0e 94 1e 1c 	call	0x383c	; 0x383c <nrk_rem_from_readyQ>
  nrk_cur_task_TCB->task_state = FINISHED;
    3cc0:	e0 91 81 0b 	lds	r30, 0x0B81
    3cc4:	f0 91 82 0b 	lds	r31, 0x0B82
    3cc8:	84 e0       	ldi	r24, 0x04	; 4
    3cca:	81 87       	std	Z+9, r24	; 0x09

  // HAHA, there is NO next period...
  nrk_wait_until_next_period ();
    3ccc:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <nrk_wait_until_next_period>
  return NRK_OK;
}
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	08 95       	ret

00003cd4 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3cd4:	ef 92       	push	r14
    3cd6:	ff 92       	push	r15
    3cd8:	0f 93       	push	r16
    3cda:	1f 93       	push	r17
    3cdc:	cf 93       	push	r28
    3cde:	df 93       	push	r29
    3ce0:	ec 01       	movw	r28, r24
  uint8_t rtype;
  void *topOfStackPtr;

  topOfStackPtr =
    (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);
    3ce2:	69 81       	ldd	r22, Y+1	; 0x01
    3ce4:	7a 81       	ldd	r23, Y+2	; 0x02
    3ce6:	4b 81       	ldd	r20, Y+3	; 0x03
    3ce8:	5c 81       	ldd	r21, Y+4	; 0x04
    3cea:	8d 81       	ldd	r24, Y+5	; 0x05
    3cec:	9e 81       	ldd	r25, Y+6	; 0x06
    3cee:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <nrk_task_stk_init>
    3cf2:	bc 01       	movw	r22, r24

  //printf("activate %d\n",(int)Task.task_ID);
  if (Task->FirstActivation == TRUE) {
    3cf4:	8f 81       	ldd	r24, Y+7	; 0x07
    3cf6:	88 23       	and	r24, r24
    3cf8:	69 f0       	breq	.+26     	; 0x3d14 <nrk_activate_task+0x40>
    rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    3cfa:	4b 81       	ldd	r20, Y+3	; 0x03
    3cfc:	5c 81       	ldd	r21, Y+4	; 0x04
    3cfe:	ce 01       	movw	r24, r28
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	00 e0       	ldi	r16, 0x00	; 0
    3d06:	10 e0       	ldi	r17, 0x00	; 0
    3d08:	ee 24       	eor	r14, r14
    3d0a:	ff 24       	eor	r15, r15
    3d0c:	0e 94 ce 14 	call	0x299c	; 0x299c <nrk_TCB_init>
    Task->FirstActivation = FALSE;
    3d10:	1f 82       	std	Y+7, r1	; 0x07
    3d12:	15 c0       	rjmp	.+42     	; 0x3d3e <nrk_activate_task+0x6a>

  }
  else {
    if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    3d14:	88 81       	ld	r24, Y
    3d16:	99 27       	eor	r25, r25
    3d18:	87 fd       	sbrc	r24, 7
    3d1a:	90 95       	com	r25
    3d1c:	fc 01       	movw	r30, r24
    3d1e:	25 e0       	ldi	r18, 0x05	; 5
    3d20:	ee 0f       	add	r30, r30
    3d22:	ff 1f       	adc	r31, r31
    3d24:	2a 95       	dec	r18
    3d26:	e1 f7       	brne	.-8      	; 0x3d20 <nrk_activate_task+0x4c>
    3d28:	e8 0f       	add	r30, r24
    3d2a:	f9 1f       	adc	r31, r25
    3d2c:	ea 53       	subi	r30, 0x3A	; 58
    3d2e:	f5 4f       	sbci	r31, 0xF5	; 245
    3d30:	81 85       	ldd	r24, Z+9	; 0x09
    3d32:	83 30       	cpi	r24, 0x03	; 3
    3d34:	11 f0       	breq	.+4      	; 0x3d3a <nrk_activate_task+0x66>
    3d36:	8f ef       	ldi	r24, 0xFF	; 255
    3d38:	1b c0       	rjmp	.+54     	; 0x3d70 <nrk_activate_task+0x9c>
      return NRK_ERROR;
    //Re-init some parts of TCB

    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    3d3a:	71 83       	std	Z+1, r23	; 0x01
    3d3c:	60 83       	st	Z, r22
  // If Idle Task then Add to ready Q
  //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
  //nrk_add_to_readyQ(Task->task_ID);
  //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
  //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
  if (nrk_task_TCB[Task->task_ID].next_wakeup == 0) {
    3d3e:	88 81       	ld	r24, Y
    3d40:	28 2f       	mov	r18, r24
    3d42:	33 27       	eor	r19, r19
    3d44:	27 fd       	sbrc	r18, 7
    3d46:	30 95       	com	r19
    3d48:	f9 01       	movw	r30, r18
    3d4a:	05 e0       	ldi	r16, 0x05	; 5
    3d4c:	ee 0f       	add	r30, r30
    3d4e:	ff 1f       	adc	r31, r31
    3d50:	0a 95       	dec	r16
    3d52:	e1 f7       	brne	.-8      	; 0x3d4c <nrk_activate_task+0x78>
    3d54:	e2 0f       	add	r30, r18
    3d56:	f3 1f       	adc	r31, r19
    3d58:	ea 53       	subi	r30, 0x3A	; 58
    3d5a:	f5 4f       	sbci	r31, 0xF5	; 245
    3d5c:	25 89       	ldd	r18, Z+21	; 0x15
    3d5e:	36 89       	ldd	r19, Z+22	; 0x16
    3d60:	21 15       	cp	r18, r1
    3d62:	31 05       	cpc	r19, r1
    3d64:	21 f4       	brne	.+8      	; 0x3d6e <nrk_activate_task+0x9a>
    nrk_task_TCB[Task->task_ID].task_state = READY;
    3d66:	92 e0       	ldi	r25, 0x02	; 2
    3d68:	91 87       	std	Z+9, r25	; 0x09
    nrk_add_to_readyQ (Task->task_ID);
    3d6a:	0e 94 6f 1b 	call	0x36de	; 0x36de <nrk_add_to_readyQ>
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
  }

  return NRK_OK;
}
    3d70:	df 91       	pop	r29
    3d72:	cf 91       	pop	r28
    3d74:	1f 91       	pop	r17
    3d76:	0f 91       	pop	r16
    3d78:	ff 90       	pop	r15
    3d7a:	ef 90       	pop	r14
    3d7c:	08 95       	ret

00003d7e <nrk_time_sub>:
/*
 * result = high-low
 *
 */
uint8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    3d7e:	8f 92       	push	r8
    3d80:	9f 92       	push	r9
    3d82:	af 92       	push	r10
    3d84:	bf 92       	push	r11
    3d86:	cf 92       	push	r12
    3d88:	df 92       	push	r13
    3d8a:	ef 92       	push	r14
    3d8c:	ff 92       	push	r15
    3d8e:	0f 93       	push	r16
    3d90:	1f 93       	push	r17
    3d92:	df 93       	push	r29
    3d94:	cf 93       	push	r28
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
    3d9a:	60 97       	sbiw	r28, 0x10	; 16
    3d9c:	0f b6       	in	r0, 0x3f	; 63
    3d9e:	f8 94       	cli
    3da0:	de bf       	out	0x3e, r29	; 62
    3da2:	0f be       	out	0x3f, r0	; 63
    3da4:	cd bf       	out	0x3d, r28	; 61
    3da6:	fc 01       	movw	r30, r24
    3da8:	09 83       	std	Y+1, r16	; 0x01
    3daa:	1a 83       	std	Y+2, r17	; 0x02
    3dac:	2b 83       	std	Y+3, r18	; 0x03
    3dae:	3c 83       	std	Y+4, r19	; 0x04
    3db0:	4d 83       	std	Y+5, r20	; 0x05
    3db2:	5e 83       	std	Y+6, r21	; 0x06
    3db4:	6f 83       	std	Y+7, r22	; 0x07
    3db6:	78 87       	std	Y+8, r23	; 0x08
    3db8:	89 86       	std	Y+9, r8	; 0x09
    3dba:	9a 86       	std	Y+10, r9	; 0x0a
    3dbc:	ab 86       	std	Y+11, r10	; 0x0b
    3dbe:	bc 86       	std	Y+12, r11	; 0x0c
    3dc0:	cd 86       	std	Y+13, r12	; 0x0d
    3dc2:	de 86       	std	Y+14, r13	; 0x0e
    3dc4:	ef 86       	std	Y+15, r14	; 0x0f
    3dc6:	f8 8a       	std	Y+16, r15	; 0x10
    3dc8:	a9 80       	ldd	r10, Y+1	; 0x01
    3dca:	ba 80       	ldd	r11, Y+2	; 0x02
    3dcc:	cb 80       	ldd	r12, Y+3	; 0x03
    3dce:	dc 80       	ldd	r13, Y+4	; 0x04
    3dd0:	2d 81       	ldd	r18, Y+5	; 0x05
    3dd2:	3e 81       	ldd	r19, Y+6	; 0x06
    3dd4:	4f 81       	ldd	r20, Y+7	; 0x07
    3dd6:	58 85       	ldd	r21, Y+8	; 0x08
    3dd8:	e9 84       	ldd	r14, Y+9	; 0x09
    3dda:	fa 84       	ldd	r15, Y+10	; 0x0a
    3ddc:	0b 85       	ldd	r16, Y+11	; 0x0b
    3dde:	1c 85       	ldd	r17, Y+12	; 0x0c
    3de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de4:	af 85       	ldd	r26, Y+15	; 0x0f
    3de6:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return 0;; 
    3de8:	ae 14       	cp	r10, r14
    3dea:	bf 04       	cpc	r11, r15
    3dec:	c0 06       	cpc	r12, r16
    3dee:	d1 06       	cpc	r13, r17
    3df0:	08 f4       	brcc	.+2      	; 0x3df4 <nrk_time_sub+0x76>
    3df2:	40 c0       	rjmp	.+128    	; 0x3e74 <nrk_time_sub+0xf6>
if(low.secs==high.secs)
    3df4:	ea 14       	cp	r14, r10
    3df6:	fb 04       	cpc	r15, r11
    3df8:	0c 05       	cpc	r16, r12
    3dfa:	1d 05       	cpc	r17, r13
    3dfc:	91 f4       	brne	.+36     	; 0x3e22 <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return 0;  
    3dfe:	28 17       	cp	r18, r24
    3e00:	39 07       	cpc	r19, r25
    3e02:	4a 07       	cpc	r20, r26
    3e04:	5b 07       	cpc	r21, r27
    3e06:	b0 f1       	brcs	.+108    	; 0x3e74 <nrk_time_sub+0xf6>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3e08:	28 1b       	sub	r18, r24
    3e0a:	39 0b       	sbc	r19, r25
    3e0c:	4a 0b       	sbc	r20, r26
    3e0e:	5b 0b       	sbc	r21, r27
    3e10:	24 83       	std	Z+4, r18	; 0x04
    3e12:	35 83       	std	Z+5, r19	; 0x05
    3e14:	46 83       	std	Z+6, r20	; 0x06
    3e16:	57 83       	std	Z+7, r21	; 0x07
	result->secs=0;
    3e18:	10 82       	st	Z, r1
    3e1a:	11 82       	std	Z+1, r1	; 0x01
    3e1c:	12 82       	std	Z+2, r1	; 0x02
    3e1e:	13 82       	std	Z+3, r1	; 0x03
    3e20:	1e c0       	rjmp	.+60     	; 0x3e5e <nrk_time_sub+0xe0>
	return 1;
	}
if(low.nano_secs > high.nano_secs)
    3e22:	28 17       	cp	r18, r24
    3e24:	39 07       	cpc	r19, r25
    3e26:	4a 07       	cpc	r20, r26
    3e28:	5b 07       	cpc	r21, r27
    3e2a:	d8 f4       	brcc	.+54     	; 0x3e62 <nrk_time_sub+0xe4>
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    3e2c:	08 94       	sec
    3e2e:	a1 08       	sbc	r10, r1
    3e30:	b1 08       	sbc	r11, r1
    3e32:	c1 08       	sbc	r12, r1
    3e34:	d1 08       	sbc	r13, r1
    3e36:	ae 18       	sub	r10, r14
    3e38:	bf 08       	sbc	r11, r15
    3e3a:	c0 0a       	sbc	r12, r16
    3e3c:	d1 0a       	sbc	r13, r17
    3e3e:	a0 82       	st	Z, r10
    3e40:	b1 82       	std	Z+1, r11	; 0x01
    3e42:	c2 82       	std	Z+2, r12	; 0x02
    3e44:	d3 82       	std	Z+3, r13	; 0x03
	result->nano_secs=high.nano_secs-low.nano_secs;
    3e46:	20 50       	subi	r18, 0x00	; 0
    3e48:	36 43       	sbci	r19, 0x36	; 54
    3e4a:	45 46       	sbci	r20, 0x65	; 101
    3e4c:	54 4c       	sbci	r21, 0xC4	; 196
    3e4e:	28 1b       	sub	r18, r24
    3e50:	39 0b       	sbc	r19, r25
    3e52:	4a 0b       	sbc	r20, r26
    3e54:	5b 0b       	sbc	r21, r27
    3e56:	24 83       	std	Z+4, r18	; 0x04
    3e58:	35 83       	std	Z+5, r19	; 0x05
    3e5a:	46 83       	std	Z+6, r20	; 0x06
    3e5c:	57 83       	std	Z+7, r21	; 0x07
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
    3e60:	0a c0       	rjmp	.+20     	; 0x3e76 <nrk_time_sub+0xf8>
}

result->secs=high.secs-low.secs;
    3e62:	ae 18       	sub	r10, r14
    3e64:	bf 08       	sbc	r11, r15
    3e66:	c0 0a       	sbc	r12, r16
    3e68:	d1 0a       	sbc	r13, r17
    3e6a:	a0 82       	st	Z, r10
    3e6c:	b1 82       	std	Z+1, r11	; 0x01
    3e6e:	c2 82       	std	Z+2, r12	; 0x02
    3e70:	d3 82       	std	Z+3, r13	; 0x03
    3e72:	ed cf       	rjmp	.-38     	; 0x3e4e <nrk_time_sub+0xd0>
result->nano_secs=high.nano_secs-low.nano_secs;
return 1;
    3e74:	80 e0       	ldi	r24, 0x00	; 0
}
    3e76:	60 96       	adiw	r28, 0x10	; 16
    3e78:	0f b6       	in	r0, 0x3f	; 63
    3e7a:	f8 94       	cli
    3e7c:	de bf       	out	0x3e, r29	; 62
    3e7e:	0f be       	out	0x3f, r0	; 63
    3e80:	cd bf       	out	0x3d, r28	; 61
    3e82:	cf 91       	pop	r28
    3e84:	df 91       	pop	r29
    3e86:	1f 91       	pop	r17
    3e88:	0f 91       	pop	r16
    3e8a:	ff 90       	pop	r15
    3e8c:	ef 90       	pop	r14
    3e8e:	df 90       	pop	r13
    3e90:	cf 90       	pop	r12
    3e92:	bf 90       	pop	r11
    3e94:	af 90       	pop	r10
    3e96:	9f 90       	pop	r9
    3e98:	8f 90       	pop	r8
    3e9a:	08 95       	ret

00003e9c <nrk_time_add>:
/*
 * result = a+b
 *
 */
uint8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    3e9c:	8f 92       	push	r8
    3e9e:	9f 92       	push	r9
    3ea0:	af 92       	push	r10
    3ea2:	bf 92       	push	r11
    3ea4:	cf 92       	push	r12
    3ea6:	df 92       	push	r13
    3ea8:	ef 92       	push	r14
    3eaa:	ff 92       	push	r15
    3eac:	0f 93       	push	r16
    3eae:	1f 93       	push	r17
    3eb0:	df 93       	push	r29
    3eb2:	cf 93       	push	r28
    3eb4:	cd b7       	in	r28, 0x3d	; 61
    3eb6:	de b7       	in	r29, 0x3e	; 62
    3eb8:	60 97       	sbiw	r28, 0x10	; 16
    3eba:	0f b6       	in	r0, 0x3f	; 63
    3ebc:	f8 94       	cli
    3ebe:	de bf       	out	0x3e, r29	; 62
    3ec0:	0f be       	out	0x3f, r0	; 63
    3ec2:	cd bf       	out	0x3d, r28	; 61
    3ec4:	fc 01       	movw	r30, r24
    3ec6:	09 83       	std	Y+1, r16	; 0x01
    3ec8:	1a 83       	std	Y+2, r17	; 0x02
    3eca:	2b 83       	std	Y+3, r18	; 0x03
    3ecc:	3c 83       	std	Y+4, r19	; 0x04
    3ece:	4d 83       	std	Y+5, r20	; 0x05
    3ed0:	5e 83       	std	Y+6, r21	; 0x06
    3ed2:	6f 83       	std	Y+7, r22	; 0x07
    3ed4:	78 87       	std	Y+8, r23	; 0x08
    3ed6:	89 86       	std	Y+9, r8	; 0x09
    3ed8:	9a 86       	std	Y+10, r9	; 0x0a
    3eda:	ab 86       	std	Y+11, r10	; 0x0b
    3edc:	bc 86       	std	Y+12, r11	; 0x0c
    3ede:	cd 86       	std	Y+13, r12	; 0x0d
    3ee0:	de 86       	std	Y+14, r13	; 0x0e
    3ee2:	ef 86       	std	Y+15, r14	; 0x0f
    3ee4:	f8 8a       	std	Y+16, r15	; 0x10
    3ee6:	ed 80       	ldd	r14, Y+5	; 0x05
    3ee8:	fe 80       	ldd	r15, Y+6	; 0x06
    3eea:	0f 81       	ldd	r16, Y+7	; 0x07
    3eec:	18 85       	ldd	r17, Y+8	; 0x08
    3eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ef2:	af 85       	ldd	r26, Y+15	; 0x0f
    3ef4:	b8 89       	ldd	r27, Y+16	; 0x10
result->secs=a.secs+b.secs;
    3ef6:	29 85       	ldd	r18, Y+9	; 0x09
    3ef8:	3a 85       	ldd	r19, Y+10	; 0x0a
    3efa:	4b 85       	ldd	r20, Y+11	; 0x0b
    3efc:	5c 85       	ldd	r21, Y+12	; 0x0c
    3efe:	a9 80       	ldd	r10, Y+1	; 0x01
    3f00:	ba 80       	ldd	r11, Y+2	; 0x02
    3f02:	cb 80       	ldd	r12, Y+3	; 0x03
    3f04:	dc 80       	ldd	r13, Y+4	; 0x04
    3f06:	2a 0d       	add	r18, r10
    3f08:	3b 1d       	adc	r19, r11
    3f0a:	4c 1d       	adc	r20, r12
    3f0c:	5d 1d       	adc	r21, r13
    3f0e:	20 83       	st	Z, r18
    3f10:	31 83       	std	Z+1, r19	; 0x01
    3f12:	42 83       	std	Z+2, r20	; 0x02
    3f14:	53 83       	std	Z+3, r21	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3f16:	8e 0d       	add	r24, r14
    3f18:	9f 1d       	adc	r25, r15
    3f1a:	a0 1f       	adc	r26, r16
    3f1c:	b1 1f       	adc	r27, r17
    3f1e:	84 83       	std	Z+4, r24	; 0x04
    3f20:	95 83       	std	Z+5, r25	; 0x05
    3f22:	a6 83       	std	Z+6, r26	; 0x06
    3f24:	b7 83       	std	Z+7, r27	; 0x07
    3f26:	10 c0       	rjmp	.+32     	; 0x3f48 <nrk_time_add+0xac>
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    3f28:	20 81       	ld	r18, Z
    3f2a:	31 81       	ldd	r19, Z+1	; 0x01
    3f2c:	42 81       	ldd	r20, Z+2	; 0x02
    3f2e:	53 81       	ldd	r21, Z+3	; 0x03
    3f30:	2f 5f       	subi	r18, 0xFF	; 255
    3f32:	3f 4f       	sbci	r19, 0xFF	; 255
    3f34:	4f 4f       	sbci	r20, 0xFF	; 255
    3f36:	5f 4f       	sbci	r21, 0xFF	; 255
    3f38:	20 83       	st	Z, r18
    3f3a:	31 83       	std	Z+1, r19	; 0x01
    3f3c:	42 83       	std	Z+2, r20	; 0x02
    3f3e:	53 83       	std	Z+3, r21	; 0x03
    3f40:	80 50       	subi	r24, 0x00	; 0
    3f42:	9a 4c       	sbci	r25, 0xCA	; 202
    3f44:	aa 49       	sbci	r26, 0x9A	; 154
    3f46:	bb 43       	sbci	r27, 0x3B	; 59
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    3f48:	80 30       	cpi	r24, 0x00	; 0
    3f4a:	2a ec       	ldi	r18, 0xCA	; 202
    3f4c:	92 07       	cpc	r25, r18
    3f4e:	2a e9       	ldi	r18, 0x9A	; 154
    3f50:	a2 07       	cpc	r26, r18
    3f52:	2b e3       	ldi	r18, 0x3B	; 59
    3f54:	b2 07       	cpc	r27, r18
    3f56:	40 f7       	brcc	.-48     	; 0x3f28 <nrk_time_add+0x8c>
    3f58:	84 83       	std	Z+4, r24	; 0x04
    3f5a:	95 83       	std	Z+5, r25	; 0x05
    3f5c:	a6 83       	std	Z+6, r26	; 0x06
    3f5e:	b7 83       	std	Z+7, r27	; 0x07
{
result->secs=a.secs+b.secs;
result->nano_secs=a.nano_secs+b.nano_secs;
nrk_time_compact_nanos(result);
return 1;
}
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	60 96       	adiw	r28, 0x10	; 16
    3f64:	0f b6       	in	r0, 0x3f	; 63
    3f66:	f8 94       	cli
    3f68:	de bf       	out	0x3e, r29	; 62
    3f6a:	0f be       	out	0x3f, r0	; 63
    3f6c:	cd bf       	out	0x3d, r28	; 61
    3f6e:	cf 91       	pop	r28
    3f70:	df 91       	pop	r29
    3f72:	1f 91       	pop	r17
    3f74:	0f 91       	pop	r16
    3f76:	ff 90       	pop	r15
    3f78:	ef 90       	pop	r14
    3f7a:	df 90       	pop	r13
    3f7c:	cf 90       	pop	r12
    3f7e:	bf 90       	pop	r11
    3f80:	af 90       	pop	r10
    3f82:	9f 90       	pop	r9
    3f84:	8f 90       	pop	r8
    3f86:	08 95       	ret

00003f88 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    3f88:	fc 01       	movw	r30, r24
    3f8a:	84 81       	ldd	r24, Z+4	; 0x04
    3f8c:	95 81       	ldd	r25, Z+5	; 0x05
    3f8e:	a6 81       	ldd	r26, Z+6	; 0x06
    3f90:	b7 81       	ldd	r27, Z+7	; 0x07
  while(t->nano_secs>=NANOS_PER_SEC)
    3f92:	10 c0       	rjmp	.+32     	; 0x3fb4 <nrk_time_compact_nanos+0x2c>
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    3f94:	20 81       	ld	r18, Z
    3f96:	31 81       	ldd	r19, Z+1	; 0x01
    3f98:	42 81       	ldd	r20, Z+2	; 0x02
    3f9a:	53 81       	ldd	r21, Z+3	; 0x03
    3f9c:	2f 5f       	subi	r18, 0xFF	; 255
    3f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3fa0:	4f 4f       	sbci	r20, 0xFF	; 255
    3fa2:	5f 4f       	sbci	r21, 0xFF	; 255
    3fa4:	20 83       	st	Z, r18
    3fa6:	31 83       	std	Z+1, r19	; 0x01
    3fa8:	42 83       	std	Z+2, r20	; 0x02
    3faa:	53 83       	std	Z+3, r21	; 0x03
    3fac:	80 50       	subi	r24, 0x00	; 0
    3fae:	9a 4c       	sbci	r25, 0xCA	; 202
    3fb0:	aa 49       	sbci	r26, 0x9A	; 154
    3fb2:	bb 43       	sbci	r27, 0x3B	; 59
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    3fb4:	80 30       	cpi	r24, 0x00	; 0
    3fb6:	2a ec       	ldi	r18, 0xCA	; 202
    3fb8:	92 07       	cpc	r25, r18
    3fba:	2a e9       	ldi	r18, 0x9A	; 154
    3fbc:	a2 07       	cpc	r26, r18
    3fbe:	2b e3       	ldi	r18, 0x3B	; 59
    3fc0:	b2 07       	cpc	r27, r18
    3fc2:	40 f7       	brcc	.-48     	; 0x3f94 <nrk_time_compact_nanos+0xc>
    3fc4:	84 83       	std	Z+4, r24	; 0x04
    3fc6:	95 83       	std	Z+5, r25	; 0x05
    3fc8:	a6 83       	std	Z+6, r26	; 0x06
    3fca:	b7 83       	std	Z+7, r27	; 0x07
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    }
}
    3fcc:	08 95       	ret

00003fce <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    3fce:	60 93 78 0b 	sts	0x0B78, r22
    3fd2:	70 93 79 0b 	sts	0x0B79, r23
    3fd6:	80 93 7a 0b 	sts	0x0B7A, r24
    3fda:	90 93 7b 0b 	sts	0x0B7B, r25
  nrk_system_time.nano_secs=nano_secs;
    3fde:	20 93 7c 0b 	sts	0x0B7C, r18
    3fe2:	30 93 7d 0b 	sts	0x0B7D, r19
    3fe6:	40 93 7e 0b 	sts	0x0B7E, r20
    3fea:	50 93 7f 0b 	sts	0x0B7F, r21
}
    3fee:	08 95       	ret

00003ff0 <_nrk_time_to_ticks>:

uint16_t _nrk_time_to_ticks(nrk_time_t t)
{
    3ff0:	8f 92       	push	r8
    3ff2:	9f 92       	push	r9
    3ff4:	af 92       	push	r10
    3ff6:	bf 92       	push	r11
    3ff8:	cf 92       	push	r12
    3ffa:	df 92       	push	r13
    3ffc:	ef 92       	push	r14
    3ffe:	ff 92       	push	r15
    4000:	0f 93       	push	r16
    4002:	1f 93       	push	r17
    4004:	df 93       	push	r29
    4006:	cf 93       	push	r28
    4008:	cd b7       	in	r28, 0x3d	; 61
    400a:	de b7       	in	r29, 0x3e	; 62
    400c:	28 97       	sbiw	r28, 0x08	; 8
    400e:	0f b6       	in	r0, 0x3f	; 63
    4010:	f8 94       	cli
    4012:	de bf       	out	0x3e, r29	; 62
    4014:	0f be       	out	0x3f, r0	; 63
    4016:	cd bf       	out	0x3d, r28	; 61
    4018:	29 83       	std	Y+1, r18	; 0x01
    401a:	3a 83       	std	Y+2, r19	; 0x02
    401c:	4b 83       	std	Y+3, r20	; 0x03
    401e:	5c 83       	std	Y+4, r21	; 0x04
    4020:	6d 83       	std	Y+5, r22	; 0x05
    4022:	7e 83       	std	Y+6, r23	; 0x06
    4024:	8f 83       	std	Y+7, r24	; 0x07
    4026:	98 87       	std	Y+8, r25	; 0x08
    4028:	89 80       	ldd	r8, Y+1	; 0x01
    402a:	9a 80       	ldd	r9, Y+2	; 0x02
    402c:	ab 80       	ldd	r10, Y+3	; 0x03
    402e:	bc 80       	ldd	r11, Y+4	; 0x04
    4030:	cd 80       	ldd	r12, Y+5	; 0x05
    4032:	de 80       	ldd	r13, Y+6	; 0x06
    4034:	ef 80       	ldd	r14, Y+7	; 0x07
    4036:	f8 84       	ldd	r15, Y+8	; 0x08
uint16_t ticks;
uint16_t tmp;
// FIXME: This will overflow

if(t.secs>=1)
    4038:	81 14       	cp	r8, r1
    403a:	91 04       	cpc	r9, r1
    403c:	a1 04       	cpc	r10, r1
    403e:	b1 04       	cpc	r11, r1
    4040:	e9 f0       	breq	.+58     	; 0x407c <_nrk_time_to_ticks+0x8c>
{
t.nano_secs+=NANOS_PER_SEC;
    4042:	80 e0       	ldi	r24, 0x00	; 0
    4044:	9a ec       	ldi	r25, 0xCA	; 202
    4046:	aa e9       	ldi	r26, 0x9A	; 154
    4048:	bb e3       	ldi	r27, 0x3B	; 59
    404a:	c8 0e       	add	r12, r24
    404c:	d9 1e       	adc	r13, r25
    404e:	ea 1e       	adc	r14, r26
    4050:	fb 1e       	adc	r15, r27
t.secs--;
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    4052:	c7 01       	movw	r24, r14
    4054:	b6 01       	movw	r22, r12
    4056:	23 eb       	ldi	r18, 0xB3	; 179
    4058:	36 ee       	ldi	r19, 0xE6	; 230
    405a:	4e e0       	ldi	r20, 0x0E	; 14
    405c:	50 e0       	ldi	r21, 0x00	; 0
    405e:	0e 94 34 29 	call	0x5268	; 0x5268 <__udivmodsi4>
ticks+=t.secs*TICKS_PER_SEC;
    4062:	08 94       	sec
    4064:	81 08       	sbc	r8, r1
    4066:	91 08       	sbc	r9, r1
    4068:	a1 08       	sbc	r10, r1
    406a:	b1 08       	sbc	r11, r1
    406c:	84 01       	movw	r16, r8
    406e:	10 2f       	mov	r17, r16
    4070:	00 27       	eor	r16, r16
    4072:	11 0f       	add	r17, r17
    4074:	11 0f       	add	r17, r17
    4076:	02 0f       	add	r16, r18
    4078:	13 1f       	adc	r17, r19
    407a:	09 c0       	rjmp	.+18     	; 0x408e <_nrk_time_to_ticks+0x9e>
}else
{
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    407c:	c7 01       	movw	r24, r14
    407e:	b6 01       	movw	r22, r12
    4080:	23 eb       	ldi	r18, 0xB3	; 179
    4082:	36 ee       	ldi	r19, 0xE6	; 230
    4084:	4e e0       	ldi	r20, 0x0E	; 14
    4086:	50 e0       	ldi	r21, 0x00	; 0
    4088:	0e 94 34 29 	call	0x5268	; 0x5268 <__udivmodsi4>
    408c:	89 01       	movw	r16, r18
    408e:	b8 01       	movw	r22, r16
}

tmp=ticks;
while(tmp>TICKS_PER_SEC)tmp-=TICKS_PER_SEC;
    4090:	02 c0       	rjmp	.+4      	; 0x4096 <_nrk_time_to_ticks+0xa6>
    4092:	60 50       	subi	r22, 0x00	; 0
    4094:	74 40       	sbci	r23, 0x04	; 4
    4096:	94 e0       	ldi	r25, 0x04	; 4
    4098:	61 30       	cpi	r22, 0x01	; 1
    409a:	79 07       	cpc	r23, r25
    409c:	d0 f7       	brcc	.-12     	; 0x4092 <_nrk_time_to_ticks+0xa2>
t.secs=tmp*NANOS_PER_TICK;

if(t.nano_secs>t.secs+(NANOS_PER_TICK/2))ticks++;
    409e:	80 e0       	ldi	r24, 0x00	; 0
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	23 eb       	ldi	r18, 0xB3	; 179
    40a4:	36 ee       	ldi	r19, 0xE6	; 230
    40a6:	4e e0       	ldi	r20, 0x0E	; 14
    40a8:	50 e0       	ldi	r21, 0x00	; 0
    40aa:	0e 94 f5 28 	call	0x51ea	; 0x51ea <__mulsi3>
    40ae:	67 5a       	subi	r22, 0xA7	; 167
    40b0:	7c 48       	sbci	r23, 0x8C	; 140
    40b2:	88 4f       	sbci	r24, 0xF8	; 248
    40b4:	9f 4f       	sbci	r25, 0xFF	; 255
    40b6:	6c 15       	cp	r22, r12
    40b8:	7d 05       	cpc	r23, r13
    40ba:	8e 05       	cpc	r24, r14
    40bc:	9f 05       	cpc	r25, r15
    40be:	10 f4       	brcc	.+4      	; 0x40c4 <_nrk_time_to_ticks+0xd4>
    40c0:	0f 5f       	subi	r16, 0xFF	; 255
    40c2:	1f 4f       	sbci	r17, 0xFF	; 255

//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    40c4:	c8 01       	movw	r24, r16
    40c6:	28 96       	adiw	r28, 0x08	; 8
    40c8:	0f b6       	in	r0, 0x3f	; 63
    40ca:	f8 94       	cli
    40cc:	de bf       	out	0x3e, r29	; 62
    40ce:	0f be       	out	0x3f, r0	; 63
    40d0:	cd bf       	out	0x3d, r28	; 61
    40d2:	cf 91       	pop	r28
    40d4:	df 91       	pop	r29
    40d6:	1f 91       	pop	r17
    40d8:	0f 91       	pop	r16
    40da:	ff 90       	pop	r15
    40dc:	ef 90       	pop	r14
    40de:	df 90       	pop	r13
    40e0:	cf 90       	pop	r12
    40e2:	bf 90       	pop	r11
    40e4:	af 90       	pop	r10
    40e6:	9f 90       	pop	r9
    40e8:	8f 90       	pop	r8
    40ea:	08 95       	ret

000040ec <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    40ec:	ef 92       	push	r14
    40ee:	ff 92       	push	r15
    40f0:	0f 93       	push	r16
    40f2:	1f 93       	push	r17
    40f4:	df 93       	push	r29
    40f6:	cf 93       	push	r28
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
    40fc:	28 97       	sbiw	r28, 0x08	; 8
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	f8 94       	cli
    4102:	de bf       	out	0x3e, r29	; 62
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	cd bf       	out	0x3d, r28	; 61
    4108:	7b 01       	movw	r14, r22
    410a:	8c 01       	movw	r16, r24
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    410c:	73 70       	andi	r23, 0x03	; 3
    410e:	80 70       	andi	r24, 0x00	; 0
    4110:	90 70       	andi	r25, 0x00	; 0
    4112:	23 eb       	ldi	r18, 0xB3	; 179
    4114:	36 ee       	ldi	r19, 0xE6	; 230
    4116:	4e e0       	ldi	r20, 0x0E	; 14
    4118:	50 e0       	ldi	r21, 0x00	; 0
    411a:	0e 94 f5 28 	call	0x51ea	; 0x51ea <__mulsi3>
    411e:	6d 83       	std	Y+5, r22	; 0x05
    4120:	7e 83       	std	Y+6, r23	; 0x06
    4122:	8f 83       	std	Y+7, r24	; 0x07
    4124:	98 87       	std	Y+8, r25	; 0x08
    4126:	a8 01       	movw	r20, r16
    4128:	97 01       	movw	r18, r14
    412a:	ea e0       	ldi	r30, 0x0A	; 10
    412c:	56 95       	lsr	r21
    412e:	47 95       	ror	r20
    4130:	37 95       	ror	r19
    4132:	27 95       	ror	r18
    4134:	ea 95       	dec	r30
    4136:	d1 f7       	brne	.-12     	; 0x412c <_nrk_ticks_to_time+0x40>
    4138:	29 83       	std	Y+1, r18	; 0x01
    413a:	3a 83       	std	Y+2, r19	; 0x02
    413c:	4b 83       	std	Y+3, r20	; 0x03
    413e:	5c 83       	std	Y+4, r21	; 0x04
    4140:	3a 81       	ldd	r19, Y+2	; 0x02
    4142:	4b 81       	ldd	r20, Y+3	; 0x03
    4144:	5c 81       	ldd	r21, Y+4	; 0x04
}
    4146:	28 96       	adiw	r28, 0x08	; 8
    4148:	0f b6       	in	r0, 0x3f	; 63
    414a:	f8 94       	cli
    414c:	de bf       	out	0x3e, r29	; 62
    414e:	0f be       	out	0x3f, r0	; 63
    4150:	cd bf       	out	0x3d, r28	; 61
    4152:	cf 91       	pop	r28
    4154:	df 91       	pop	r29
    4156:	1f 91       	pop	r17
    4158:	0f 91       	pop	r16
    415a:	ff 90       	pop	r15
    415c:	ef 90       	pop	r14
    415e:	08 95       	ret

00004160 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t t)
{
    4160:	af 92       	push	r10
    4162:	bf 92       	push	r11
    4164:	cf 92       	push	r12
    4166:	df 92       	push	r13
    4168:	ef 92       	push	r14
    416a:	ff 92       	push	r15
    416c:	0f 93       	push	r16
    416e:	1f 93       	push	r17
    4170:	df 93       	push	r29
    4172:	cf 93       	push	r28
    4174:	cd b7       	in	r28, 0x3d	; 61
    4176:	de b7       	in	r29, 0x3e	; 62
    4178:	28 97       	sbiw	r28, 0x08	; 8
    417a:	0f b6       	in	r0, 0x3f	; 63
    417c:	f8 94       	cli
    417e:	de bf       	out	0x3e, r29	; 62
    4180:	0f be       	out	0x3f, r0	; 63
    4182:	cd bf       	out	0x3d, r28	; 61
    4184:	29 83       	std	Y+1, r18	; 0x01
    4186:	3a 83       	std	Y+2, r19	; 0x02
    4188:	4b 83       	std	Y+3, r20	; 0x03
    418a:	5c 83       	std	Y+4, r21	; 0x04
    418c:	6d 83       	std	Y+5, r22	; 0x05
    418e:	7e 83       	std	Y+6, r23	; 0x06
    4190:	8f 83       	std	Y+7, r24	; 0x07
    4192:	98 87       	std	Y+8, r25	; 0x08
    4194:	e9 80       	ldd	r14, Y+1	; 0x01
    4196:	fa 80       	ldd	r15, Y+2	; 0x02
    4198:	0b 81       	ldd	r16, Y+3	; 0x03
    419a:	1c 81       	ldd	r17, Y+4	; 0x04
    419c:	ad 80       	ldd	r10, Y+5	; 0x05
    419e:	be 80       	ldd	r11, Y+6	; 0x06
    41a0:	cf 80       	ldd	r12, Y+7	; 0x07
    41a2:	d8 84       	ldd	r13, Y+8	; 0x08
uint32_t ticks;
uint32_t tmp;

if(t.secs>=1)
    41a4:	e1 14       	cp	r14, r1
    41a6:	f1 04       	cpc	r15, r1
    41a8:	01 05       	cpc	r16, r1
    41aa:	11 05       	cpc	r17, r1
    41ac:	19 f1       	breq	.+70     	; 0x41f4 <_nrk_time_to_ticks_long+0x94>
{
t.nano_secs+=NANOS_PER_SEC;
    41ae:	80 e0       	ldi	r24, 0x00	; 0
    41b0:	9a ec       	ldi	r25, 0xCA	; 202
    41b2:	aa e9       	ldi	r26, 0x9A	; 154
    41b4:	bb e3       	ldi	r27, 0x3B	; 59
    41b6:	a8 0e       	add	r10, r24
    41b8:	b9 1e       	adc	r11, r25
    41ba:	ca 1e       	adc	r12, r26
    41bc:	db 1e       	adc	r13, r27
t.secs--;
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    41be:	c6 01       	movw	r24, r12
    41c0:	b5 01       	movw	r22, r10
    41c2:	23 eb       	ldi	r18, 0xB3	; 179
    41c4:	36 ee       	ldi	r19, 0xE6	; 230
    41c6:	4e e0       	ldi	r20, 0x0E	; 14
    41c8:	50 e0       	ldi	r21, 0x00	; 0
    41ca:	0e 94 34 29 	call	0x5268	; 0x5268 <__udivmodsi4>
    41ce:	c9 01       	movw	r24, r18
    41d0:	da 01       	movw	r26, r20
ticks+=t.secs*TICKS_PER_SEC;
    41d2:	08 94       	sec
    41d4:	e1 08       	sbc	r14, r1
    41d6:	f1 08       	sbc	r15, r1
    41d8:	01 09       	sbc	r16, r1
    41da:	11 09       	sbc	r17, r1
    41dc:	fa e0       	ldi	r31, 0x0A	; 10
    41de:	ee 0c       	add	r14, r14
    41e0:	ff 1c       	adc	r15, r15
    41e2:	00 1f       	adc	r16, r16
    41e4:	11 1f       	adc	r17, r17
    41e6:	fa 95       	dec	r31
    41e8:	d1 f7       	brne	.-12     	; 0x41de <_nrk_time_to_ticks_long+0x7e>
    41ea:	e8 0e       	add	r14, r24
    41ec:	f9 1e       	adc	r15, r25
    41ee:	0a 1f       	adc	r16, r26
    41f0:	1b 1f       	adc	r17, r27
    41f2:	0c c0       	rjmp	.+24     	; 0x420c <_nrk_time_to_ticks_long+0xac>
}else
{
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    41f4:	c6 01       	movw	r24, r12
    41f6:	b5 01       	movw	r22, r10
    41f8:	23 eb       	ldi	r18, 0xB3	; 179
    41fa:	36 ee       	ldi	r19, 0xE6	; 230
    41fc:	4e e0       	ldi	r20, 0x0E	; 14
    41fe:	50 e0       	ldi	r21, 0x00	; 0
    4200:	0e 94 34 29 	call	0x5268	; 0x5268 <__udivmodsi4>
    4204:	e2 2e       	mov	r14, r18
    4206:	f3 2e       	mov	r15, r19
    4208:	04 2f       	mov	r16, r20
    420a:	15 2f       	mov	r17, r21
    420c:	c8 01       	movw	r24, r16
    420e:	b7 01       	movw	r22, r14
}

tmp=ticks;
while(tmp>TICKS_PER_SEC)tmp-=TICKS_PER_SEC;
    4210:	04 c0       	rjmp	.+8      	; 0x421a <_nrk_time_to_ticks_long+0xba>
    4212:	60 50       	subi	r22, 0x00	; 0
    4214:	74 40       	sbci	r23, 0x04	; 4
    4216:	80 40       	sbci	r24, 0x00	; 0
    4218:	90 40       	sbci	r25, 0x00	; 0
    421a:	61 30       	cpi	r22, 0x01	; 1
    421c:	a4 e0       	ldi	r26, 0x04	; 4
    421e:	7a 07       	cpc	r23, r26
    4220:	a0 e0       	ldi	r26, 0x00	; 0
    4222:	8a 07       	cpc	r24, r26
    4224:	a0 e0       	ldi	r26, 0x00	; 0
    4226:	9a 07       	cpc	r25, r26
    4228:	a0 f7       	brcc	.-24     	; 0x4212 <_nrk_time_to_ticks_long+0xb2>
t.secs=tmp*NANOS_PER_TICK;

if(t.nano_secs>t.secs+(NANOS_PER_TICK/2))ticks++;
    422a:	23 eb       	ldi	r18, 0xB3	; 179
    422c:	36 ee       	ldi	r19, 0xE6	; 230
    422e:	4e e0       	ldi	r20, 0x0E	; 14
    4230:	50 e0       	ldi	r21, 0x00	; 0
    4232:	0e 94 f5 28 	call	0x51ea	; 0x51ea <__mulsi3>
    4236:	67 5a       	subi	r22, 0xA7	; 167
    4238:	7c 48       	sbci	r23, 0x8C	; 140
    423a:	88 4f       	sbci	r24, 0xF8	; 248
    423c:	9f 4f       	sbci	r25, 0xFF	; 255
    423e:	6a 15       	cp	r22, r10
    4240:	7b 05       	cpc	r23, r11
    4242:	8c 05       	cpc	r24, r12
    4244:	9d 05       	cpc	r25, r13
    4246:	28 f4       	brcc	.+10     	; 0x4252 <_nrk_time_to_ticks_long+0xf2>
    4248:	08 94       	sec
    424a:	e1 1c       	adc	r14, r1
    424c:	f1 1c       	adc	r15, r1
    424e:	01 1d       	adc	r16, r1
    4250:	11 1d       	adc	r17, r1

//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    4252:	b7 01       	movw	r22, r14
    4254:	c8 01       	movw	r24, r16
    4256:	28 96       	adiw	r28, 0x08	; 8
    4258:	0f b6       	in	r0, 0x3f	; 63
    425a:	f8 94       	cli
    425c:	de bf       	out	0x3e, r29	; 62
    425e:	0f be       	out	0x3f, r0	; 63
    4260:	cd bf       	out	0x3d, r28	; 61
    4262:	cf 91       	pop	r28
    4264:	df 91       	pop	r29
    4266:	1f 91       	pop	r17
    4268:	0f 91       	pop	r16
    426a:	ff 90       	pop	r15
    426c:	ef 90       	pop	r14
    426e:	df 90       	pop	r13
    4270:	cf 90       	pop	r12
    4272:	bf 90       	pop	r11
    4274:	af 90       	pop	r10
    4276:	08 95       	ret

00004278 <nrk_time_get>:
*******************************************************************************/
#include <nrk.h>
#include <nrk_timer.h>

void nrk_time_get(nrk_time_t *t)
{
    4278:	ef 92       	push	r14
    427a:	ff 92       	push	r15
    427c:	0f 93       	push	r16
    427e:	1f 93       	push	r17
    4280:	cf 93       	push	r28
    4282:	df 93       	push	r29
    4284:	ec 01       	movw	r28, r24
 t->secs=nrk_system_time.secs;
    4286:	80 91 78 0b 	lds	r24, 0x0B78
    428a:	90 91 79 0b 	lds	r25, 0x0B79
    428e:	a0 91 7a 0b 	lds	r26, 0x0B7A
    4292:	b0 91 7b 0b 	lds	r27, 0x0B7B
    4296:	88 83       	st	Y, r24
    4298:	99 83       	std	Y+1, r25	; 0x01
    429a:	aa 83       	std	Y+2, r26	; 0x02
    429c:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs=nrk_system_time.nano_secs;
    429e:	e0 90 7c 0b 	lds	r14, 0x0B7C
    42a2:	f0 90 7d 0b 	lds	r15, 0x0B7D
    42a6:	00 91 7e 0b 	lds	r16, 0x0B7E
    42aa:	10 91 7f 0b 	lds	r17, 0x0B7F
    42ae:	ec 82       	std	Y+4, r14	; 0x04
    42b0:	fd 82       	std	Y+5, r15	; 0x05
    42b2:	0e 83       	std	Y+6, r16	; 0x06
    42b4:	1f 83       	std	Y+7, r17	; 0x07

   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    42b6:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_nrk_os_timer_get>
    42ba:	68 2f       	mov	r22, r24
    42bc:	70 e0       	ldi	r23, 0x00	; 0
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	23 eb       	ldi	r18, 0xB3	; 179
    42c4:	36 ee       	ldi	r19, 0xE6	; 230
    42c6:	4e e0       	ldi	r20, 0x0E	; 14
    42c8:	50 e0       	ldi	r21, 0x00	; 0
    42ca:	0e 94 f5 28 	call	0x51ea	; 0x51ea <__mulsi3>
    42ce:	6e 0d       	add	r22, r14
    42d0:	7f 1d       	adc	r23, r15
    42d2:	80 1f       	adc	r24, r16
    42d4:	91 1f       	adc	r25, r17
    42d6:	6c 83       	std	Y+4, r22	; 0x04
    42d8:	7d 83       	std	Y+5, r23	; 0x05
    42da:	8e 83       	std	Y+6, r24	; 0x06
    42dc:	9f 83       	std	Y+7, r25	; 0x07
    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    42de:	10 c0       	rjmp	.+32     	; 0x4300 <nrk_time_get+0x88>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    42e0:	28 81       	ld	r18, Y
    42e2:	39 81       	ldd	r19, Y+1	; 0x01
    42e4:	4a 81       	ldd	r20, Y+2	; 0x02
    42e6:	5b 81       	ldd	r21, Y+3	; 0x03
    42e8:	2f 5f       	subi	r18, 0xFF	; 255
    42ea:	3f 4f       	sbci	r19, 0xFF	; 255
    42ec:	4f 4f       	sbci	r20, 0xFF	; 255
    42ee:	5f 4f       	sbci	r21, 0xFF	; 255
    42f0:	28 83       	st	Y, r18
    42f2:	39 83       	std	Y+1, r19	; 0x01
    42f4:	4a 83       	std	Y+2, r20	; 0x02
    42f6:	5b 83       	std	Y+3, r21	; 0x03
    42f8:	60 50       	subi	r22, 0x00	; 0
    42fa:	7a 4c       	sbci	r23, 0xCA	; 202
    42fc:	8a 49       	sbci	r24, 0x9A	; 154
    42fe:	9b 43       	sbci	r25, 0x3B	; 59
{
 t->secs=nrk_system_time.secs;
 t->nano_secs=nrk_system_time.nano_secs;

   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    4300:	60 30       	cpi	r22, 0x00	; 0
    4302:	2a ec       	ldi	r18, 0xCA	; 202
    4304:	72 07       	cpc	r23, r18
    4306:	2a e9       	ldi	r18, 0x9A	; 154
    4308:	82 07       	cpc	r24, r18
    430a:	2b e3       	ldi	r18, 0x3B	; 59
    430c:	92 07       	cpc	r25, r18
    430e:	40 f7       	brcc	.-48     	; 0x42e0 <nrk_time_get+0x68>
    4310:	6c 83       	std	Y+4, r22	; 0x04
    4312:	7d 83       	std	Y+5, r23	; 0x05
    4314:	8e 83       	std	Y+6, r24	; 0x06
    4316:	9f 83       	std	Y+7, r25	; 0x07
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    }
}
    4318:	df 91       	pop	r29
    431a:	cf 91       	pop	r28
    431c:	1f 91       	pop	r17
    431e:	0f 91       	pop	r16
    4320:	ff 90       	pop	r15
    4322:	ef 90       	pop	r14
    4324:	08 95       	ret

00004326 <nrk_idle_task>:
#include <nrk_platform_time.h>
#include <nrk_scheduler.h>
#include <stdio.h>

void nrk_idle_task()
{
    4326:	1f 93       	push	r17

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=1;
    4328:	11 e0       	ldi	r17, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    432a:	0e 94 3a 18 	call	0x3074	; 0x3074 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    432e:	0e 94 65 24 	call	0x48ca	; 0x48ca <_nrk_get_next_wakeup>
    4332:	8b 30       	cpi	r24, 0x0B	; 11
    4334:	10 f4       	brcc	.+4      	; 0x433a <nrk_idle_task+0x14>
    {
	    _nrk_cpu_state=1;
    4336:	10 93 75 0b 	sts	0x0B75, r17
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=2;
	    nrk_sleep();
	#else
	    nrk_idle();
    433a:	0e 94 10 27 	call	0x4e20	; 0x4e20 <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    433e:	80 91 06 09 	lds	r24, 0x0906
    4342:	85 35       	cpi	r24, 0x55	; 85
    4344:	19 f0       	breq	.+6      	; 0x434c <nrk_idle_task+0x26>
    4346:	88 e0       	ldi	r24, 0x08	; 8
    4348:	0e 94 31 17 	call	0x2e62	; 0x2e62 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    434c:	80 91 7e 21 	lds	r24, 0x217E
    4350:	85 35       	cpi	r24, 0x55	; 85
    4352:	59 f3       	breq	.-42     	; 0x432a <nrk_idle_task+0x4>
    4354:	88 e0       	ldi	r24, 0x08	; 8
    4356:	0e 94 31 17 	call	0x2e62	; 0x2e62 <nrk_error_add>
    435a:	e7 cf       	rjmp	.-50     	; 0x432a <nrk_idle_task+0x4>

0000435c <_nrk_scheduler>:
// 750 measure to 100uS
// 800 * .125 = 100us
#define CONTEXT_SWAP_TIME_BOUND    750

void inline _nrk_scheduler()
{	   
    435c:	4f 92       	push	r4
    435e:	5f 92       	push	r5
    4360:	6f 92       	push	r6
    4362:	7f 92       	push	r7
    4364:	8f 92       	push	r8
    4366:	9f 92       	push	r9
    4368:	af 92       	push	r10
    436a:	bf 92       	push	r11
    436c:	cf 92       	push	r12
    436e:	df 92       	push	r13
    4370:	ef 92       	push	r14
    4372:	ff 92       	push	r15
    4374:	0f 93       	push	r16
    4376:	1f 93       	push	r17
    4378:	cf 93       	push	r28
    437a:	df 93       	push	r29
	int8_t task_ID;
	uint16_t next_wake;
	uint16_t start_time_stamp;

nrk_int_disable();   // this should be removed...  Not needed
    437c:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
	_nrk_high_speed_timer_reset();
    4380:	0e 94 e5 23 	call	0x47ca	; 0x47ca <_nrk_high_speed_timer_reset>
	start_time_stamp=_nrk_high_speed_timer_get();
    4384:	0e 94 31 24 	call	0x4862	; 0x4862 <_nrk_high_speed_timer_get>
    4388:	3c 01       	movw	r6, r24
#endif
	_nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    438a:	8a ef       	ldi	r24, 0xFA	; 250
    438c:	0e 94 69 24 	call	0x48d2	; 0x48d2 <_nrk_set_next_wakeup>
	if(_nrk_cpu_state && _nrk_os_timer_get()>nrk_max_sleep_wakeup_time)
		nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
	#endif
	//while(_nrk_time_trigger>0)
	//{
	nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    4390:	60 91 04 09 	lds	r22, 0x0904
    4394:	70 e0       	ldi	r23, 0x00	; 0
    4396:	80 e0       	ldi	r24, 0x00	; 0
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	23 eb       	ldi	r18, 0xB3	; 179
    439c:	36 ee       	ldi	r19, 0xE6	; 230
    439e:	4e e0       	ldi	r20, 0x0E	; 14
    43a0:	50 e0       	ldi	r21, 0x00	; 0
    43a2:	0e 94 f5 28 	call	0x51ea	; 0x51ea <__mulsi3>
    43a6:	7b 01       	movw	r14, r22
    43a8:	8c 01       	movw	r16, r24
    43aa:	80 91 7c 0b 	lds	r24, 0x0B7C
    43ae:	90 91 7d 0b 	lds	r25, 0x0B7D
    43b2:	a0 91 7e 0b 	lds	r26, 0x0B7E
    43b6:	b0 91 7f 0b 	lds	r27, 0x0B7F
    43ba:	e8 0e       	add	r14, r24
    43bc:	f9 1e       	adc	r15, r25
    43be:	0a 1f       	adc	r16, r26
    43c0:	1b 1f       	adc	r17, r27
	nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    43c2:	c8 01       	movw	r24, r16
    43c4:	b7 01       	movw	r22, r14
    43c6:	0e 94 34 29 	call	0x5268	; 0x5268 <__udivmodsi4>
    43ca:	e6 1a       	sub	r14, r22
    43cc:	f7 0a       	sbc	r15, r23
    43ce:	08 0b       	sbc	r16, r24
    43d0:	19 0b       	sbc	r17, r25
    43d2:	80 91 78 0b 	lds	r24, 0x0B78
    43d6:	90 91 79 0b 	lds	r25, 0x0B79
    43da:	a0 91 7a 0b 	lds	r26, 0x0B7A
    43de:	b0 91 7b 0b 	lds	r27, 0x0B7B
	  else
		_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
	}
	#endif
	
	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    43e2:	16 c0       	rjmp	.+44     	; 0x4410 <_nrk_scheduler+0xb4>
	{
		nrk_system_time.nano_secs-=NANOS_PER_SEC;
    43e4:	80 e0       	ldi	r24, 0x00	; 0
    43e6:	96 e3       	ldi	r25, 0x36	; 54
    43e8:	a5 e6       	ldi	r26, 0x65	; 101
    43ea:	b4 ec       	ldi	r27, 0xC4	; 196
    43ec:	e8 0e       	add	r14, r24
    43ee:	f9 1e       	adc	r15, r25
    43f0:	0a 1f       	adc	r16, r26
    43f2:	1b 1f       	adc	r17, r27
		nrk_system_time.secs++;
		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    43f4:	c8 01       	movw	r24, r16
    43f6:	b7 01       	movw	r22, r14
    43f8:	23 eb       	ldi	r18, 0xB3	; 179
    43fa:	36 ee       	ldi	r19, 0xE6	; 230
    43fc:	4e e0       	ldi	r20, 0x0E	; 14
    43fe:	50 e0       	ldi	r21, 0x00	; 0
    4400:	0e 94 34 29 	call	0x5268	; 0x5268 <__udivmodsi4>
    4404:	e6 1a       	sub	r14, r22
    4406:	f7 0a       	sbc	r15, r23
    4408:	08 0b       	sbc	r16, r24
    440a:	19 0b       	sbc	r17, r25
    440c:	d6 01       	movw	r26, r12
    440e:	c5 01       	movw	r24, r10
    4410:	5c 01       	movw	r10, r24
    4412:	6d 01       	movw	r12, r26
    4414:	08 94       	sec
    4416:	a1 1c       	adc	r10, r1
    4418:	b1 1c       	adc	r11, r1
    441a:	c1 1c       	adc	r12, r1
    441c:	d1 1c       	adc	r13, r1
	  else
		_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
	}
	#endif
	
	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    441e:	20 e0       	ldi	r18, 0x00	; 0
    4420:	e2 16       	cp	r14, r18
    4422:	2a ec       	ldi	r18, 0xCA	; 202
    4424:	f2 06       	cpc	r15, r18
    4426:	2a e9       	ldi	r18, 0x9A	; 154
    4428:	02 07       	cpc	r16, r18
    442a:	2b e3       	ldi	r18, 0x3B	; 59
    442c:	12 07       	cpc	r17, r18
    442e:	d0 f6       	brcc	.-76     	; 0x43e4 <_nrk_scheduler+0x88>
    4430:	e0 92 7c 0b 	sts	0x0B7C, r14
    4434:	f0 92 7d 0b 	sts	0x0B7D, r15
    4438:	00 93 7e 0b 	sts	0x0B7E, r16
    443c:	10 93 7f 0b 	sts	0x0B7F, r17
    4440:	80 93 78 0b 	sts	0x0B78, r24
    4444:	90 93 79 0b 	sts	0x0B79, r25
    4448:	a0 93 7a 0b 	sts	0x0B7A, r26
    444c:	b0 93 7b 0b 	sts	0x0B7B, r27
		nrk_system_time.secs++;
		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
	}
	//  _nrk_time_trigger--;
	//}  
	if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    4450:	e0 91 81 0b 	lds	r30, 0x0B81
    4454:	f0 91 82 0b 	lds	r31, 0x0B82
    4458:	85 81       	ldd	r24, Z+5	; 0x05
    445a:	88 23       	and	r24, r24
    445c:	b9 f0       	breq	.+46     	; 0x448c <_nrk_scheduler+0x130>
    445e:	81 85       	ldd	r24, Z+9	; 0x09
    4460:	84 30       	cpi	r24, 0x04	; 4
    4462:	a1 f0       	breq	.+40     	; 0x448c <_nrk_scheduler+0x130>
	{
	//	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		
		if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)  
    4464:	87 81       	ldd	r24, Z+7	; 0x07
    4466:	82 30       	cpi	r24, 0x02	; 2
    4468:	29 f0       	breq	.+10     	; 0x4474 <_nrk_scheduler+0x118>
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0) 
    446a:	88 23       	and	r24, r24
    446c:	41 f0       	breq	.+16     	; 0x447e <_nrk_scheduler+0x122>
    446e:	86 81       	ldd	r24, Z+6	; 0x06
    4470:	88 23       	and	r24, r24
    4472:	11 f4       	brne	.+4      	; 0x4478 <_nrk_scheduler+0x11c>
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    4474:	85 e0       	ldi	r24, 0x05	; 5
    4476:	01 c0       	rjmp	.+2      	; 0x447a <_nrk_scheduler+0x11e>
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1) 
			nrk_cur_task_TCB->task_state = SUSPENDED;
    4478:	83 e0       	ldi	r24, 0x03	; 3
    447a:	81 87       	std	Z+9, r24	; 0x09
		
		if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)  
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0) 
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1) 
    447c:	04 c0       	rjmp	.+8      	; 0x4486 <_nrk_scheduler+0x12a>
			nrk_cur_task_TCB->task_state = SUSPENDED;
		else	
		{
			nrk_cur_task_TCB->task_state = SUSPENDED;
    447e:	83 e0       	ldi	r24, 0x03	; 3
    4480:	81 87       	std	Z+9, r24	; 0x09
			nrk_cur_task_TCB->event_suspend=0;
    4482:	17 82       	std	Z+7, r1	; 0x07
			nrk_cur_task_TCB->nw_flag=0;
    4484:	16 82       	std	Z+6, r1	; 0x06
		}
		nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    4486:	80 85       	ldd	r24, Z+8	; 0x08
    4488:	0e 94 1e 1c 	call	0x383c	; 0x383c <nrk_rem_from_readyQ>

	// Update cpu used value for ended task
	// If the task has used its reserve, suspend task
	// Don't disable IdleTask which is 0
	// Don't decrease cpu_remaining if reserve is 0 and hence disabled
	if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    448c:	e0 91 81 0b 	lds	r30, 0x0B81
    4490:	f0 91 82 0b 	lds	r31, 0x0B82
    4494:	85 8d       	ldd	r24, Z+29	; 0x1d
    4496:	96 8d       	ldd	r25, Z+30	; 0x1e
    4498:	00 97       	sbiw	r24, 0x00	; 0
    449a:	91 f1       	breq	.+100    	; 0x4500 <_nrk_scheduler+0x1a4>
    449c:	60 85       	ldd	r22, Z+8	; 0x08
    449e:	66 23       	and	r22, r22
    44a0:	79 f1       	breq	.+94     	; 0x4500 <_nrk_scheduler+0x1a4>
    44a2:	81 85       	ldd	r24, Z+9	; 0x09
    44a4:	84 30       	cpi	r24, 0x04	; 4
    44a6:	61 f1       	breq	.+88     	; 0x4500 <_nrk_scheduler+0x1a4>
	{
		if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    44a8:	21 8d       	ldd	r18, Z+25	; 0x19
    44aa:	32 8d       	ldd	r19, Z+26	; 0x1a
    44ac:	80 91 04 09 	lds	r24, 0x0904
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	28 17       	cp	r18, r24
    44b4:	39 07       	cpc	r19, r25
    44b6:	50 f4       	brcc	.+20     	; 0x44cc <_nrk_scheduler+0x170>
		{
			#ifdef NRK_STATS_TRACKER
			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
			#endif
			nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    44b8:	82 e0       	ldi	r24, 0x02	; 2
    44ba:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <nrk_kernel_error_add>
			nrk_cur_task_TCB->cpu_remaining=0;
    44be:	e0 91 81 0b 	lds	r30, 0x0B81
    44c2:	f0 91 82 0b 	lds	r31, 0x0B82
    44c6:	12 8e       	std	Z+26, r1	; 0x1a
    44c8:	11 8e       	std	Z+25, r1	; 0x19
    44ca:	04 c0       	rjmp	.+8      	; 0x44d4 <_nrk_scheduler+0x178>
		}else
			nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    44cc:	28 1b       	sub	r18, r24
    44ce:	39 0b       	sbc	r19, r25
    44d0:	32 8f       	std	Z+26, r19	; 0x1a
    44d2:	21 8f       	std	Z+25, r18	; 0x19

		task_ID= nrk_cur_task_TCB->task_ID;
    44d4:	e0 91 81 0b 	lds	r30, 0x0B81
    44d8:	f0 91 82 0b 	lds	r31, 0x0B82
    44dc:	10 85       	ldd	r17, Z+8	; 0x08

		if (nrk_cur_task_TCB->cpu_remaining ==0 ) {
    44de:	81 8d       	ldd	r24, Z+25	; 0x19
    44e0:	92 8d       	ldd	r25, Z+26	; 0x1a
    44e2:	00 97       	sbiw	r24, 0x00	; 0
    44e4:	69 f4       	brne	.+26     	; 0x4500 <_nrk_scheduler+0x1a4>
			#ifdef NRK_STATS_TRACKER
			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
			#endif
			nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    44e6:	83 e0       	ldi	r24, 0x03	; 3
    44e8:	61 2f       	mov	r22, r17
    44ea:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <nrk_kernel_error_add>
			nrk_cur_task_TCB->task_state = SUSPENDED;
    44ee:	e0 91 81 0b 	lds	r30, 0x0B81
    44f2:	f0 91 82 0b 	lds	r31, 0x0B82
    44f6:	83 e0       	ldi	r24, 0x03	; 3
    44f8:	81 87       	std	Z+9, r24	; 0x09
			nrk_rem_from_readyQ(task_ID);
    44fa:	81 2f       	mov	r24, r17
    44fc:	0e 94 1e 1c 	call	0x383c	; 0x383c <nrk_rem_from_readyQ>
    4500:	cb ec       	ldi	r28, 0xCB	; 203
    4502:	da e0       	ldi	r29, 0x0A	; 10
    4504:	f0 e6       	ldi	r31, 0x60	; 96
    4506:	ef 2e       	mov	r14, r31
    4508:	fa ee       	ldi	r31, 0xEA	; 234
    450a:	ff 2e       	mov	r15, r31
    450c:	10 e0       	ldi	r17, 0x00	; 0
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					nrk_task_TCB[task_ID].num_periods=1;
    450e:	e1 e0       	ldi	r30, 0x01	; 1
    4510:	8e 2e       	mov	r8, r30
    4512:	91 2c       	mov	r9, r1
				nrk_task_TCB[task_ID].nw_flag=0;
				nrk_task_TCB[task_ID].suspend_flag=0;
				if(nrk_task_TCB[task_ID].num_periods==1) 
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
					nrk_task_TCB[task_ID].task_state = READY;
    4514:	02 e0       	ldi	r16, 0x02	; 2
		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
			// If a task needs to become READY, make it ready
			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
				// printf( "Adding back %d\n",task_ID );
				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4516:	71 e0       	ldi	r23, 0x01	; 1
    4518:	a7 2e       	mov	r10, r23
    451a:	b1 2c       	mov	r11, r1
    451c:	c1 2c       	mov	r12, r1
    451e:	d1 2c       	mov	r13, r1
	// Check I/O nrk_queues to add tasks with remaining cpu back...

	// Add eligable tasks back to the ready Queue
	// At the same time find the next earliest wakeup
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    4520:	8b 81       	ldd	r24, Y+3	; 0x03
    4522:	8f 3f       	cpi	r24, 0xFF	; 255
    4524:	09 f4       	brne	.+2      	; 0x4528 <_nrk_scheduler+0x1cc>
    4526:	7d c0       	rjmp	.+250    	; 0x4622 <_nrk_scheduler+0x2c6>
		nrk_task_TCB[task_ID].suspend_flag=0;
    4528:	18 82       	st	Y, r1
		if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    452a:	88 23       	and	r24, r24
    452c:	69 f1       	breq	.+90     	; 0x4588 <_nrk_scheduler+0x22c>
    452e:	8c 81       	ldd	r24, Y+4	; 0x04
    4530:	84 30       	cpi	r24, 0x04	; 4
    4532:	51 f1       	breq	.+84     	; 0x4588 <_nrk_scheduler+0x22c>
		{
			if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    4534:	28 89       	ldd	r18, Y+16	; 0x10
    4536:	39 89       	ldd	r19, Y+17	; 0x11
    4538:	80 91 04 09 	lds	r24, 0x0904
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	28 17       	cp	r18, r24
    4540:	39 07       	cpc	r19, r25
    4542:	28 f0       	brcs	.+10     	; 0x454e <_nrk_scheduler+0x1f2>
				nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    4544:	28 1b       	sub	r18, r24
    4546:	39 0b       	sbc	r19, r25
    4548:	39 8b       	std	Y+17, r19	; 0x11
    454a:	28 8b       	std	Y+16, r18	; 0x10
    454c:	02 c0       	rjmp	.+4      	; 0x4552 <_nrk_scheduler+0x1f6>
			else 
				nrk_task_TCB[task_ID].next_wakeup=0;
    454e:	19 8a       	std	Y+17, r1	; 0x11
    4550:	18 8a       	std	Y+16, r1	; 0x10
		
			// Do next period book keeping.
			// next_period needs to be set such that the period is kept consistent even if other
			// wait until functions are called.
			if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    4552:	6a 89       	ldd	r22, Y+18	; 0x12
    4554:	7b 89       	ldd	r23, Y+19	; 0x13
    4556:	68 17       	cp	r22, r24
    4558:	79 07       	cpc	r23, r25
    455a:	28 f4       	brcc	.+10     	; 0x4566 <_nrk_scheduler+0x20a>
				nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
			else {
				if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    455c:	6e 89       	ldd	r22, Y+22	; 0x16
    455e:	7f 89       	ldd	r23, Y+23	; 0x17
    4560:	86 17       	cp	r24, r22
    4562:	97 07       	cpc	r25, r23
    4564:	28 f4       	brcc	.+10     	; 0x4570 <_nrk_scheduler+0x214>
					nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    4566:	68 1b       	sub	r22, r24
    4568:	79 0b       	sbc	r23, r25
    456a:	7b 8b       	std	Y+19, r23	; 0x13
    456c:	6a 8b       	std	Y+18, r22	; 0x12
    456e:	04 c0       	rjmp	.+8      	; 0x4578 <_nrk_scheduler+0x21c>
				else
					nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    4570:	0e 94 20 29 	call	0x5240	; 0x5240 <__udivmodhi4>
    4574:	9b 8b       	std	Y+19, r25	; 0x13
    4576:	8a 8b       	std	Y+18, r24	; 0x12
			}
			if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    4578:	8a 89       	ldd	r24, Y+18	; 0x12
    457a:	9b 89       	ldd	r25, Y+19	; 0x13
    457c:	00 97       	sbiw	r24, 0x00	; 0
    457e:	21 f4       	brne	.+8      	; 0x4588 <_nrk_scheduler+0x22c>
    4580:	8e 89       	ldd	r24, Y+22	; 0x16
    4582:	9f 89       	ldd	r25, Y+23	; 0x17
    4584:	9b 8b       	std	Y+19, r25	; 0x13
    4586:	8a 8b       	std	Y+18, r24	; 0x12
					
		}


		// Look for Next Task that Might Wakeup to interrupt current task
		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
    4588:	8c 81       	ldd	r24, Y+4	; 0x04
    458a:	83 30       	cpi	r24, 0x03	; 3
    458c:	09 f0       	breq	.+2      	; 0x4590 <_nrk_scheduler+0x234>
    458e:	49 c0       	rjmp	.+146    	; 0x4622 <_nrk_scheduler+0x2c6>
			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
			// If a task needs to become READY, make it ready
			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
    4590:	88 89       	ldd	r24, Y+16	; 0x10
    4592:	99 89       	ldd	r25, Y+17	; 0x11
    4594:	00 97       	sbiw	r24, 0x00	; 0
    4596:	e9 f5       	brne	.+122    	; 0x4612 <_nrk_scheduler+0x2b6>
				// printf( "Adding back %d\n",task_ID );
				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4598:	8a 81       	ldd	r24, Y+2	; 0x02
    459a:	88 23       	and	r24, r24
    459c:	91 f0       	breq	.+36     	; 0x45c2 <_nrk_scheduler+0x266>
    459e:	89 81       	ldd	r24, Y+1	; 0x01
    45a0:	88 23       	and	r24, r24
    45a2:	79 f0       	breq	.+30     	; 0x45c2 <_nrk_scheduler+0x266>
    45a4:	d6 01       	movw	r26, r12
    45a6:	c5 01       	movw	r24, r10
    45a8:	00 90 71 0b 	lds	r0, 0x0B71
    45ac:	04 c0       	rjmp	.+8      	; 0x45b6 <_nrk_scheduler+0x25a>
    45ae:	88 0f       	add	r24, r24
    45b0:	99 1f       	adc	r25, r25
    45b2:	aa 1f       	adc	r26, r26
    45b4:	bb 1f       	adc	r27, r27
    45b6:	0a 94       	dec	r0
    45b8:	d2 f7       	brpl	.-12     	; 0x45ae <_nrk_scheduler+0x252>
    45ba:	8c 87       	std	Y+12, r24	; 0x0c
    45bc:	9d 87       	std	Y+13, r25	; 0x0d
    45be:	ae 87       	std	Y+14, r26	; 0x0e
    45c0:	bf 87       	std	Y+15, r27	; 0x0f
				//if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
				nrk_task_TCB[task_ID].event_suspend=0;
    45c2:	1a 82       	std	Y+2, r1	; 0x02
				nrk_task_TCB[task_ID].nw_flag=0;
    45c4:	19 82       	std	Y+1, r1	; 0x01
				nrk_task_TCB[task_ID].suspend_flag=0;
    45c6:	18 82       	st	Y, r1
				if(nrk_task_TCB[task_ID].num_periods==1) 
    45c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    45ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    45cc:	28 8d       	ldd	r18, Y+24	; 0x18
    45ce:	39 8d       	ldd	r19, Y+25	; 0x19
    45d0:	81 30       	cpi	r24, 0x01	; 1
    45d2:	91 05       	cpc	r25, r1
    45d4:	59 f4       	brne	.+22     	; 0x45ec <_nrk_scheduler+0x290>
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    45d6:	3d 8b       	std	Y+21, r19	; 0x15
    45d8:	2c 8b       	std	Y+20, r18	; 0x14
					nrk_task_TCB[task_ID].task_state = READY;
    45da:	0c 83       	std	Y+4, r16	; 0x04
					nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    45dc:	8a 89       	ldd	r24, Y+18	; 0x12
    45de:	9b 89       	ldd	r25, Y+19	; 0x13
    45e0:	99 8b       	std	Y+17, r25	; 0x11
    45e2:	88 8b       	std	Y+16, r24	; 0x10
					nrk_add_to_readyQ(task_ID);				
    45e4:	81 2f       	mov	r24, r17
    45e6:	0e 94 6f 1b 	call	0x36de	; 0x36de <nrk_add_to_readyQ>
    45ea:	13 c0       	rjmp	.+38     	; 0x4612 <_nrk_scheduler+0x2b6>
				} else 
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    45ec:	3d 8b       	std	Y+21, r19	; 0x15
    45ee:	2c 8b       	std	Y+20, r18	; 0x14
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	2e 89       	ldd	r18, Y+22	; 0x16
    45f4:	3f 89       	ldd	r19, Y+23	; 0x17
    45f6:	ac 01       	movw	r20, r24
    45f8:	42 9f       	mul	r20, r18
    45fa:	c0 01       	movw	r24, r0
    45fc:	43 9f       	mul	r20, r19
    45fe:	90 0d       	add	r25, r0
    4600:	52 9f       	mul	r21, r18
    4602:	90 0d       	add	r25, r0
    4604:	11 24       	eor	r1, r1
    4606:	99 8b       	std	Y+17, r25	; 0x11
    4608:	88 8b       	std	Y+16, r24	; 0x10
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    460a:	9b 8b       	std	Y+19, r25	; 0x13
    460c:	8a 8b       	std	Y+18, r24	; 0x12
					nrk_task_TCB[task_ID].num_periods=1;
    460e:	9b 8e       	std	Y+27, r9	; 0x1b
    4610:	8a 8e       	std	Y+26, r8	; 0x1a
		//			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
		//			nrk_task_TCB[task_ID].num_periods=1; 
				}
			}

			if(nrk_task_TCB[task_ID].next_wakeup!=0 && 
    4612:	48 88       	ldd	r4, Y+16	; 0x10
    4614:	59 88       	ldd	r5, Y+17	; 0x11
    4616:	41 14       	cp	r4, r1
    4618:	51 04       	cpc	r5, r1
    461a:	19 f0       	breq	.+6      	; 0x4622 <_nrk_scheduler+0x2c6>
    461c:	4e 14       	cp	r4, r14
    461e:	5f 04       	cpc	r5, r15
    4620:	08 f0       	brcs	.+2      	; 0x4624 <_nrk_scheduler+0x2c8>
    4622:	27 01       	movw	r4, r14

	// Check I/O nrk_queues to add tasks with remaining cpu back...

	// Add eligable tasks back to the ready Queue
	// At the same time find the next earliest wakeup
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    4624:	1f 5f       	subi	r17, 0xFF	; 255
    4626:	a1 96       	adiw	r28, 0x21	; 33
    4628:	15 30       	cpi	r17, 0x05	; 5
    462a:	11 f0       	breq	.+4      	; 0x4630 <_nrk_scheduler+0x2d4>
    462c:	72 01       	movw	r14, r4
    462e:	78 cf       	rjmp	.-272    	; 0x4520 <_nrk_scheduler+0x1c4>


	#ifdef NRK_STATS_TRACKER
		_nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
	#endif
	task_ID = nrk_get_high_ready_task_ID();  
    4630:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <nrk_get_high_ready_task_ID>
    4634:	18 2f       	mov	r17, r24
	nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4636:	99 27       	eor	r25, r25
    4638:	87 fd       	sbrc	r24, 7
    463a:	90 95       	com	r25
    463c:	fc 01       	movw	r30, r24
    463e:	65 e0       	ldi	r22, 0x05	; 5
    4640:	ee 0f       	add	r30, r30
    4642:	ff 1f       	adc	r31, r31
    4644:	6a 95       	dec	r22
    4646:	e1 f7       	brne	.-8      	; 0x4640 <_nrk_scheduler+0x2e4>
    4648:	e8 0f       	add	r30, r24
    464a:	f9 1f       	adc	r31, r25
    464c:	ea 53       	subi	r30, 0x3A	; 58
    464e:	f5 4f       	sbci	r31, 0xF5	; 245
    4650:	42 85       	ldd	r20, Z+10	; 0x0a
    4652:	40 93 83 0b 	sts	0x0B83, r20
	nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    4656:	81 e2       	ldi	r24, 0x21	; 33
    4658:	18 02       	muls	r17, r24
    465a:	c0 01       	movw	r24, r0
    465c:	11 24       	eor	r1, r1
    465e:	8a 53       	subi	r24, 0x3A	; 58
    4660:	95 4f       	sbci	r25, 0xF5	; 245
    4662:	90 93 73 0b 	sts	0x0B73, r25
    4666:	80 93 72 0b 	sts	0x0B72, r24
	// task_ID holds the highest priority READY task ID
	// So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time 

	// Now we pick the next wakeup (either the end of the current task, or the possible resume
	// of a suspended task) 
	if(task_ID!=NRK_IDLE_TASK_ID) 
    466a:	11 23       	and	r17, r17
    466c:	a1 f0       	breq	.+40     	; 0x4696 <_nrk_scheduler+0x33a>
	{
		// You are a non-Idle Task
		if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    466e:	25 8d       	ldd	r18, Z+29	; 0x1d
    4670:	36 8d       	ldd	r19, Z+30	; 0x1e
    4672:	21 15       	cp	r18, r1
    4674:	31 05       	cpc	r19, r1
    4676:	51 f0       	breq	.+20     	; 0x468c <_nrk_scheduler+0x330>
    4678:	21 8d       	ldd	r18, Z+25	; 0x19
    467a:	32 8d       	ldd	r19, Z+26	; 0x1a
    467c:	2a 3f       	cpi	r18, 0xFA	; 250
    467e:	31 05       	cpc	r19, r1
    4680:	28 f4       	brcc	.+10     	; 0x468c <_nrk_scheduler+0x330>
    4682:	24 15       	cp	r18, r4
    4684:	35 05       	cpc	r19, r5
    4686:	28 f5       	brcc	.+74     	; 0x46d2 <_nrk_scheduler+0x376>
    4688:	29 01       	movw	r4, r18
    468a:	23 c0       	rjmp	.+70     	; 0x46d2 <_nrk_scheduler+0x376>
    468c:	5b ef       	ldi	r21, 0xFB	; 251
    468e:	45 16       	cp	r4, r21
    4690:	51 04       	cpc	r5, r1
    4692:	f8 f0       	brcs	.+62     	; 0x46d2 <_nrk_scheduler+0x376>
    4694:	17 c0       	rjmp	.+46     	; 0x46c4 <_nrk_scheduler+0x368>
		// Make sure you wake up from the idle task a little earlier
		// if you would go into deep sleep...
		// After waking from deep sleep, the next context swap must be at least
  		// NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time. 
			
		if(next_wake>NRK_SLEEP_WAKEUP_TIME) 
    4696:	ab e0       	ldi	r26, 0x0B	; 11
    4698:	4a 16       	cp	r4, r26
    469a:	51 04       	cpc	r5, r1
    469c:	d0 f0       	brcs	.+52     	; 0x46d2 <_nrk_scheduler+0x376>
		{
			if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    469e:	92 01       	movw	r18, r4
    46a0:	2a 50       	subi	r18, 0x0A	; 10
    46a2:	30 40       	sbci	r19, 0x00	; 0
    46a4:	2a 3f       	cpi	r18, 0xFA	; 250
    46a6:	31 05       	cpc	r19, r1
    46a8:	40 f4       	brcc	.+16     	; 0x46ba <_nrk_scheduler+0x35e>
    46aa:	29 01       	movw	r4, r18
    46ac:	29 30       	cpi	r18, 0x09	; 9
    46ae:	31 05       	cpc	r19, r1
    46b0:	80 f4       	brcc	.+32     	; 0x46d2 <_nrk_scheduler+0x376>
    46b2:	59 e0       	ldi	r21, 0x09	; 9
    46b4:	45 2e       	mov	r4, r21
    46b6:	51 2c       	mov	r5, r1
    46b8:	0c c0       	rjmp	.+24     	; 0x46d2 <_nrk_scheduler+0x376>
					next_wake=NRK_SLEEP_WAKEUP_TIME-1;
				}
				else {
					next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
				}
			} else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME){ 
    46ba:	24 e0       	ldi	r18, 0x04	; 4
    46bc:	42 16       	cp	r4, r18
    46be:	21 e0       	ldi	r18, 0x01	; 1
    46c0:	52 06       	cpc	r5, r18
    46c2:	21 f0       	breq	.+8      	; 0x46cc <_nrk_scheduler+0x370>
    46c4:	3a ef       	ldi	r19, 0xFA	; 250
    46c6:	43 2e       	mov	r4, r19
    46c8:	51 2c       	mov	r5, r1
    46ca:	03 c0       	rjmp	.+6      	; 0x46d2 <_nrk_scheduler+0x376>
    46cc:	20 ef       	ldi	r18, 0xF0	; 240
    46ce:	42 2e       	mov	r4, r18
    46d0:	51 2c       	mov	r5, r1
		printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
		}
	}*/

	//printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
	nrk_cur_task_prio = nrk_high_ready_prio;
    46d2:	40 93 74 0b 	sts	0x0B74, r20
	nrk_cur_task_TCB  = nrk_high_ready_TCB;
    46d6:	90 93 82 0b 	sts	0x0B82, r25
    46da:	80 93 81 0b 	sts	0x0B81, r24
	if(nrk_high_ready_TCB==NULL)
		{
		nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
		}
	#endif
	_nrk_prev_timer_val=next_wake;
    46de:	40 92 04 09 	sts	0x0904, r4


	if(_nrk_os_timer_get()>=next_wake)  // just bigger then, or equal? 
    46e2:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_nrk_os_timer_get>
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	84 15       	cp	r24, r4
    46ea:	95 05       	cpc	r25, r5
    46ec:	50 f0       	brcs	.+20     	; 0x4702 <_nrk_scheduler+0x3a6>
			nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
		#endif

		// This is bad news, but keeps things running
		// +2 just in case we are on the edge of the last tick
		next_wake=_nrk_os_timer_get()+2;
    46ee:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_nrk_os_timer_get>
    46f2:	48 2e       	mov	r4, r24
    46f4:	55 24       	eor	r5, r5
    46f6:	42 e0       	ldi	r20, 0x02	; 2
    46f8:	50 e0       	ldi	r21, 0x00	; 0
    46fa:	44 0e       	add	r4, r20
    46fc:	55 1e       	adc	r5, r21
		_nrk_prev_timer_val=next_wake;
    46fe:	40 92 04 09 	sts	0x0904, r4
	} 

	if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=0;
    4702:	11 23       	and	r17, r17
    4704:	11 f0       	breq	.+4      	; 0x470a <_nrk_scheduler+0x3ae>
    4706:	10 92 75 0b 	sts	0x0B75, r1
	//printf("next wakeup is %d\n\r", next_wake);
	_nrk_set_next_wakeup(next_wake);
    470a:	84 2d       	mov	r24, r4
    470c:	0e 94 69 24 	call	0x48d2	; 0x48d2 <_nrk_set_next_wakeup>
	
#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
	// Bound Context Swap to 100us 
	nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    4710:	c3 01       	movw	r24, r6
    4712:	6e ee       	ldi	r22, 0xEE	; 238
    4714:	72 e0       	ldi	r23, 0x02	; 2
    4716:	0e 94 ed 23 	call	0x47da	; 0x47da <nrk_high_speed_timer_wait>
#endif	
	nrk_stack_pointer_restore();
    471a:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <nrk_stack_pointer_restore>
	//nrk_int_enable();
	nrk_start_high_ready_task();
    471e:	0e 94 84 27 	call	0x4f08	; 0x4f08 <nrk_start_high_ready_task>

}
    4722:	df 91       	pop	r29
    4724:	cf 91       	pop	r28
    4726:	1f 91       	pop	r17
    4728:	0f 91       	pop	r16
    472a:	ff 90       	pop	r15
    472c:	ef 90       	pop	r14
    472e:	df 90       	pop	r13
    4730:	cf 90       	pop	r12
    4732:	bf 90       	pop	r11
    4734:	af 90       	pop	r10
    4736:	9f 90       	pop	r9
    4738:	8f 90       	pop	r8
    473a:	7f 90       	pop	r7
    473c:	6f 90       	pop	r6
    473e:	5f 90       	pop	r5
    4740:	4f 90       	pop	r4
    4742:	08 95       	ret

00004744 <nrk_spin_wait_us>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    474c:	01 97       	sbiw	r24, 0x01	; 1
    474e:	d1 f7       	brne	.-12     	; 0x4744 <nrk_spin_wait_us>

}
    4750:	08 95       	ret

00004752 <_nrk_setup_timer>:

void _nrk_setup_timer() {
  _nrk_prev_timer_val=254;
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    4752:	80 e2       	ldi	r24, 0x20	; 32
    4754:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    4758:	8e ef       	ldi	r24, 0xFE	; 254
    475a:	80 93 b3 00 	sts	0x00B3, r24
  TIFR2 =   BM(OCF2A) | BM(TOV2);       // Clear interrupt flag
    475e:	83 e0       	ldi	r24, 0x03	; 3
    4760:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    4762:	92 e0       	ldi	r25, 0x02	; 2
    4764:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    4768:	e1 eb       	ldi	r30, 0xB1	; 177
    476a:	f0 e0       	ldi	r31, 0x00	; 0
    476c:	80 83       	st	Z, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    476e:	93 b5       	in	r25, 0x23	; 35
    4770:	92 60       	ori	r25, 0x02	; 2
    4772:	93 bd       	out	0x23, r25	; 35
  // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);       
    4774:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    4776:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    4778:	93 b5       	in	r25, 0x23	; 35
    477a:	92 60       	ori	r25, 0x02	; 2
    477c:	93 bd       	out	0x23, r25	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    477e:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    4782:	91 e0       	ldi	r25, 0x01	; 1
    4784:	90 93 81 00 	sts	0x0081, r25
  TCNT1=0;  // 16 bit
    4788:	10 92 85 00 	sts	0x0085, r1
    478c:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4790:	93 b5       	in	r25, 0x23	; 35
    4792:	92 60       	ori	r25, 0x02	; 2
    4794:	93 bd       	out	0x23, r25	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4796:	93 b5       	in	r25, 0x23	; 35
    4798:	91 60       	ori	r25, 0x01	; 1
    479a:	93 bd       	out	0x23, r25	; 35
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    479c:	93 b5       	in	r25, 0x23	; 35
    479e:	92 60       	ori	r25, 0x02	; 2
    47a0:	93 bd       	out	0x23, r25	; 35
    TCNT2 = 0;                  // reset counter
    47a2:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    _nrk_prev_timer_val=0;
    47a6:	10 92 04 09 	sts	0x0904, r1
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A) | BM(TOIE2) ;//| BM(TICIE1);    // Enable interrupt
    47aa:	a0 e7       	ldi	r26, 0x70	; 112
    47ac:	b0 e0       	ldi	r27, 0x00	; 0
    47ae:	9c 91       	ld	r25, X
    47b0:	93 60       	ori	r25, 0x03	; 3
    47b2:	9c 93       	st	X, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    47b4:	80 83       	st	Z, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_os_timer_start();
  _nrk_time_trigger=0;
    47b6:	10 92 8a 04 	sts	0x048A, r1
}
    47ba:	08 95       	ret

000047bc <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    47bc:	10 92 81 00 	sts	0x0081, r1
}
    47c0:	08 95       	ret

000047c2 <_nrk_high_speed_timer_start>:

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    47c2:	81 e0       	ldi	r24, 0x01	; 1
    47c4:	80 93 81 00 	sts	0x0081, r24
}
    47c8:	08 95       	ret

000047ca <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    47ca:	83 b5       	in	r24, 0x23	; 35
    47cc:	81 60       	ori	r24, 0x01	; 1
    47ce:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    47d0:	10 92 85 00 	sts	0x0085, r1
    47d4:	10 92 84 00 	sts	0x0084, r1
//  nrk_int_enable();
}
    47d8:	08 95       	ret

000047da <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    47da:	ef 92       	push	r14
    47dc:	ff 92       	push	r15
    47de:	0f 93       	push	r16
    47e0:	1f 93       	push	r17
    47e2:	df 93       	push	r29
    47e4:	cf 93       	push	r28
    47e6:	00 d0       	rcall	.+0      	; 0x47e8 <nrk_high_speed_timer_wait+0xe>
    47e8:	cd b7       	in	r28, 0x3d	; 61
    47ea:	de b7       	in	r29, 0x3e	; 62
uint32_t tmp;
if(start>65400) start=0;
    47ec:	2f ef       	ldi	r18, 0xFF	; 255
    47ee:	89 37       	cpi	r24, 0x79	; 121
    47f0:	92 07       	cpc	r25, r18
    47f2:	10 f0       	brcs	.+4      	; 0x47f8 <nrk_high_speed_timer_wait+0x1e>
    47f4:	80 e0       	ldi	r24, 0x00	; 0
    47f6:	90 e0       	ldi	r25, 0x00	; 0
tmp=(uint32_t)start+(uint32_t)ticks;
    47f8:	9c 01       	movw	r18, r24
    47fa:	40 e0       	ldi	r20, 0x00	; 0
    47fc:	50 e0       	ldi	r21, 0x00	; 0
    47fe:	7b 01       	movw	r14, r22
    4800:	00 e0       	ldi	r16, 0x00	; 0
    4802:	10 e0       	ldi	r17, 0x00	; 0
    4804:	2e 0d       	add	r18, r14
    4806:	3f 1d       	adc	r19, r15
    4808:	40 1f       	adc	r20, r16
    480a:	51 1f       	adc	r21, r17
//printf("tmp is %d.\n\r", tmp);
if(tmp>65536) 
    480c:	21 30       	cpi	r18, 0x01	; 1
    480e:	60 e0       	ldi	r22, 0x00	; 0
    4810:	36 07       	cpc	r19, r22
    4812:	61 e0       	ldi	r22, 0x01	; 1
    4814:	46 07       	cpc	r20, r22
    4816:	60 e0       	ldi	r22, 0x00	; 0
    4818:	56 07       	cpc	r21, r22
    481a:	78 f0       	brcs	.+30     	; 0x483a <nrk_high_speed_timer_wait+0x60>

inline uint16_t _nrk_high_speed_timer_get()
{
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    481c:	60 91 84 00 	lds	r22, 0x0084
    4820:	70 91 85 00 	lds	r23, 0x0085
    4824:	7a 83       	std	Y+2, r23	; 0x02
    4826:	69 83       	std	Y+1, r22	; 0x01
  //nrk_int_enable();
  return tmp;
    4828:	69 81       	ldd	r22, Y+1	; 0x01
    482a:	7a 81       	ldd	r23, Y+2	; 0x02
//printf("tmp is %d.\n\r", tmp);
if(tmp>65536) 
	{
//	printf("tmp>65536\n\r");
	tmp-=65536;
	do{}while(_nrk_high_speed_timer_get()>start);
    482c:	86 17       	cp	r24, r22
    482e:	97 07       	cpc	r25, r23
    4830:	a8 f3       	brcs	.-22     	; 0x481c <nrk_high_speed_timer_wait+0x42>
tmp=(uint32_t)start+(uint32_t)ticks;
//printf("tmp is %d.\n\r", tmp);
if(tmp>65536) 
	{
//	printf("tmp>65536\n\r");
	tmp-=65536;
    4832:	20 50       	subi	r18, 0x00	; 0
    4834:	30 40       	sbci	r19, 0x00	; 0
    4836:	41 40       	sbci	r20, 0x01	; 1
    4838:	50 40       	sbci	r21, 0x00	; 0

inline uint16_t _nrk_high_speed_timer_get()
{
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    483a:	80 91 84 00 	lds	r24, 0x0084
    483e:	90 91 85 00 	lds	r25, 0x0085
    4842:	9a 83       	std	Y+2, r25	; 0x02
    4844:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    4846:	89 81       	ldd	r24, Y+1	; 0x01
    4848:	9a 81       	ldd	r25, Y+2	; 0x02
	tmp-=65536;
	do{}while(_nrk_high_speed_timer_get()>start);
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    484a:	82 17       	cp	r24, r18
    484c:	93 07       	cpc	r25, r19
    484e:	a8 f3       	brcs	.-22     	; 0x483a <nrk_high_speed_timer_wait+0x60>
}
    4850:	0f 90       	pop	r0
    4852:	0f 90       	pop	r0
    4854:	cf 91       	pop	r28
    4856:	df 91       	pop	r29
    4858:	1f 91       	pop	r17
    485a:	0f 91       	pop	r16
    485c:	ff 90       	pop	r15
    485e:	ef 90       	pop	r14
    4860:	08 95       	ret

00004862 <_nrk_high_speed_timer_get>:

inline uint16_t _nrk_high_speed_timer_get()
{
    4862:	df 93       	push	r29
    4864:	cf 93       	push	r28
    4866:	00 d0       	rcall	.+0      	; 0x4868 <_nrk_high_speed_timer_get+0x6>
    4868:	cd b7       	in	r28, 0x3d	; 61
    486a:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    486c:	80 91 84 00 	lds	r24, 0x0084
    4870:	90 91 85 00 	lds	r25, 0x0085
    4874:	9a 83       	std	Y+2, r25	; 0x02
    4876:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    4878:	29 81       	ldd	r18, Y+1	; 0x01
    487a:	3a 81       	ldd	r19, Y+2	; 0x02
}
    487c:	c9 01       	movw	r24, r18
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	cf 91       	pop	r28
    4884:	df 91       	pop	r29
    4886:	08 95       	ret

00004888 <_nrk_os_timer_stop>:

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    4888:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    488c:	e0 e7       	ldi	r30, 0x70	; 112
    488e:	f0 e0       	ldi	r31, 0x00	; 0
    4890:	80 81       	ld	r24, Z
    4892:	8d 7f       	andi	r24, 0xFD	; 253
    4894:	80 83       	st	Z, r24
  TIMSK2 &=  ~BM(TOIE2) ;
    4896:	80 81       	ld	r24, Z
    4898:	8e 7f       	andi	r24, 0xFE	; 254
    489a:	80 83       	st	Z, r24
}
    489c:	08 95       	ret

0000489e <_nrk_os_timer_set>:

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    489e:	80 93 b2 00 	sts	0x00B2, r24
}
    48a2:	08 95       	ret

000048a4 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A) | BM(TOIE2) ;//| BM(TICIE1);    // Enable interrupt
    48a4:	e0 e7       	ldi	r30, 0x70	; 112
    48a6:	f0 e0       	ldi	r31, 0x00	; 0
    48a8:	80 81       	ld	r24, Z
    48aa:	83 60       	ori	r24, 0x03	; 3
    48ac:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    48ae:	83 e0       	ldi	r24, 0x03	; 3
    48b0:	80 93 b1 00 	sts	0x00B1, r24
}
    48b4:	08 95       	ret

000048b6 <_nrk_os_timer_reset>:

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    48b6:	83 b5       	in	r24, 0x23	; 35
    48b8:	82 60       	ori	r24, 0x02	; 2
    48ba:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    48bc:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    48c0:	10 92 8a 04 	sts	0x048A, r1
    _nrk_prev_timer_val=0;
    48c4:	10 92 04 09 	sts	0x0904, r1
}
    48c8:	08 95       	ret

000048ca <_nrk_get_next_wakeup>:


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    48ca:	80 91 b3 00 	lds	r24, 0x00B3
}
    48ce:	8f 5f       	subi	r24, 0xFF	; 255
    48d0:	08 95       	ret

000048d2 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    48d2:	81 50       	subi	r24, 0x01	; 1
    48d4:	80 93 b3 00 	sts	0x00B3, r24
   //printf("value of TCNT2 is %d.\n\r",TCNT2);
}
    48d8:	08 95       	ret

000048da <nrk_timer_int_stop>:

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    48da:	88 23       	and	r24, r24
    48dc:	11 f4       	brne	.+4      	; 0x48e2 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    48de:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    48e2:	8f ef       	ldi	r24, 0xFF	; 255
    48e4:	08 95       	ret

000048e6 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    48e6:	88 23       	and	r24, r24
    48e8:	11 f0       	breq	.+4      	; 0x48ee <nrk_timer_int_reset+0x8>
    48ea:	8f ef       	ldi	r24, 0xFF	; 255
    48ec:	08 95       	ret
	{
	TCNT3=0;
    48ee:	10 92 95 00 	sts	0x0095, r1
    48f2:	10 92 94 00 	sts	0x0094, r1
    48f6:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
	}
return NRK_ERROR;
}
    48f8:	08 95       	ret

000048fa <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    48fa:	88 23       	and	r24, r24
    48fc:	19 f0       	breq	.+6      	; 0x4904 <nrk_timer_int_read+0xa>
    48fe:	20 e0       	ldi	r18, 0x00	; 0
    4900:	30 e0       	ldi	r19, 0x00	; 0
    4902:	04 c0       	rjmp	.+8      	; 0x490c <nrk_timer_int_read+0x12>
	{
	return TCNT3;
    4904:	20 91 94 00 	lds	r18, 0x0094
    4908:	30 91 95 00 	lds	r19, 0x0095
	}
return 0;

}
    490c:	c9 01       	movw	r24, r18
    490e:	08 95       	ret

00004910 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    4910:	88 23       	and	r24, r24
    4912:	11 f0       	breq	.+4      	; 0x4918 <nrk_timer_int_start+0x8>
    4914:	8f ef       	ldi	r24, 0xFF	; 255
    4916:	08 95       	ret
	{
		TIMSK3 = BM(OCIE3A);
    4918:	82 e0       	ldi	r24, 0x02	; 2
    491a:	80 93 71 00 	sts	0x0071, r24
    491e:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
	}
return NRK_ERROR;
}
    4920:	08 95       	ret

00004922 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    4922:	88 23       	and	r24, r24
    4924:	11 f0       	breq	.+4      	; 0x492a <nrk_timer_int_configure+0x8>
    4926:	8f ef       	ldi	r24, 0xFF	; 255
    4928:	08 95       	ret
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    492a:	cb 01       	movw	r24, r22
    492c:	01 97       	sbiw	r24, 0x01	; 1
    492e:	85 30       	cpi	r24, 0x05	; 5
    4930:	91 05       	cpc	r25, r1
    4932:	10 f4       	brcc	.+4      	; 0x4938 <nrk_timer_int_configure+0x16>
    4934:	60 93 03 09 	sts	0x0903, r22
	TCCR3A = 0;  
    4938:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    493c:	88 e0       	ldi	r24, 0x08	; 8
    493e:	80 93 91 00 	sts	0x0091, r24
  	OCR3AH = (compare_value >> 8) & 0xFF;	
    4942:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    4946:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    494a:	30 93 88 03 	sts	0x0388, r19
    494e:	20 93 87 03 	sts	0x0387, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    4952:	80 91 03 09 	lds	r24, 0x0903
    4956:	81 30       	cpi	r24, 0x01	; 1
    4958:	21 f4       	brne	.+8      	; 0x4962 <nrk_timer_int_configure+0x40>
    495a:	80 91 91 00 	lds	r24, 0x0091
    495e:	81 60       	ori	r24, 0x01	; 1
    4960:	0b c0       	rjmp	.+22     	; 0x4978 <nrk_timer_int_configure+0x56>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    4962:	82 30       	cpi	r24, 0x02	; 2
    4964:	21 f4       	brne	.+8      	; 0x496e <nrk_timer_int_configure+0x4c>
    4966:	80 91 91 00 	lds	r24, 0x0091
    496a:	82 60       	ori	r24, 0x02	; 2
    496c:	05 c0       	rjmp	.+10     	; 0x4978 <nrk_timer_int_configure+0x56>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    496e:	83 30       	cpi	r24, 0x03	; 3
    4970:	31 f4       	brne	.+12     	; 0x497e <nrk_timer_int_configure+0x5c>
    4972:	80 91 91 00 	lds	r24, 0x0091
    4976:	83 60       	ori	r24, 0x03	; 3
    4978:	80 93 91 00 	sts	0x0091, r24
    497c:	08 c0       	rjmp	.+16     	; 0x498e <nrk_timer_int_configure+0x6c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    497e:	84 30       	cpi	r24, 0x04	; 4
    4980:	21 f4       	brne	.+8      	; 0x498a <nrk_timer_int_configure+0x68>
    4982:	80 91 91 00 	lds	r24, 0x0091
    4986:	84 60       	ori	r24, 0x04	; 4
    4988:	f7 cf       	rjmp	.-18     	; 0x4978 <nrk_timer_int_configure+0x56>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    498a:	85 30       	cpi	r24, 0x05	; 5
    498c:	11 f0       	breq	.+4      	; 0x4992 <nrk_timer_int_configure+0x70>
    498e:	81 e0       	ldi	r24, 0x01	; 1
    4990:	08 95       	ret
    4992:	80 91 91 00 	lds	r24, 0x0091
    4996:	85 60       	ori	r24, 0x05	; 5
    4998:	80 93 91 00 	sts	0x0091, r24
    499c:	81 e0       	ldi	r24, 0x01	; 1
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
}
    499e:	08 95       	ret

000049a0 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    49a0:	80 91 b2 00 	lds	r24, 0x00B2
}
    49a4:	08 95       	ret

000049a6 <__vector_13>:


// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {
asm volatile (
    49a6:	0f 92       	push	r0
    49a8:	0f b6       	in	r0, 0x3f	; 63
    49aa:	0f 92       	push	r0
    49ac:	1f 92       	push	r1
    49ae:	2f 92       	push	r2
    49b0:	3f 92       	push	r3
    49b2:	4f 92       	push	r4
    49b4:	5f 92       	push	r5
    49b6:	6f 92       	push	r6
    49b8:	7f 92       	push	r7
    49ba:	8f 92       	push	r8
    49bc:	9f 92       	push	r9
    49be:	af 92       	push	r10
    49c0:	bf 92       	push	r11
    49c2:	cf 92       	push	r12
    49c4:	df 92       	push	r13
    49c6:	ef 92       	push	r14
    49c8:	ff 92       	push	r15
    49ca:	0f 93       	push	r16
    49cc:	1f 93       	push	r17
    49ce:	2f 93       	push	r18
    49d0:	3f 93       	push	r19
    49d2:	4f 93       	push	r20
    49d4:	5f 93       	push	r21
    49d6:	6f 93       	push	r22
    49d8:	7f 93       	push	r23
    49da:	8f 93       	push	r24
    49dc:	9f 93       	push	r25
    49de:	af 93       	push	r26
    49e0:	bf 93       	push	r27
    49e2:	cf 93       	push	r28
    49e4:	df 93       	push	r29
    49e6:	ef 93       	push	r30
    49e8:	ff 93       	push	r31
    49ea:	a0 91 81 0b 	lds	r26, 0x0B81
    49ee:	b0 91 82 0b 	lds	r27, 0x0B82
    49f2:	0d b6       	in	r0, 0x3d	; 61
    49f4:	0d 92       	st	X+, r0
    49f6:	0e b6       	in	r0, 0x3e	; 62
    49f8:	0d 92       	st	X+, r0
    49fa:	1f 92       	push	r1
    49fc:	a0 91 01 09 	lds	r26, 0x0901
    4a00:	b0 91 02 09 	lds	r27, 0x0902
    4a04:	1e 90       	ld	r1, -X
    4a06:	be bf       	out	0x3e, r27	; 62
    4a08:	ad bf       	out	0x3d, r26	; 61
    4a0a:	08 95       	ret

00004a0c <__vector_17>:
}

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    4a0c:	1f 92       	push	r1
    4a0e:	0f 92       	push	r0
    4a10:	0f b6       	in	r0, 0x3f	; 63
    4a12:	0f 92       	push	r0
    4a14:	11 24       	eor	r1, r1

	return;  	
} 
    4a16:	0f 90       	pop	r0
    4a18:	0f be       	out	0x3f, r0	; 63
    4a1a:	0f 90       	pop	r0
    4a1c:	1f 90       	pop	r1
    4a1e:	18 95       	reti

00004a20 <__vector_32>:
);

} 


SIGNAL(TIMER3_COMPA_vect) {
    4a20:	1f 92       	push	r1
    4a22:	0f 92       	push	r0
    4a24:	0f b6       	in	r0, 0x3f	; 63
    4a26:	0f 92       	push	r0
    4a28:	0b b6       	in	r0, 0x3b	; 59
    4a2a:	0f 92       	push	r0
    4a2c:	11 24       	eor	r1, r1
    4a2e:	2f 93       	push	r18
    4a30:	3f 93       	push	r19
    4a32:	4f 93       	push	r20
    4a34:	5f 93       	push	r21
    4a36:	6f 93       	push	r22
    4a38:	7f 93       	push	r23
    4a3a:	8f 93       	push	r24
    4a3c:	9f 93       	push	r25
    4a3e:	af 93       	push	r26
    4a40:	bf 93       	push	r27
    4a42:	ef 93       	push	r30
    4a44:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    4a46:	e0 91 87 03 	lds	r30, 0x0387
    4a4a:	f0 91 88 03 	lds	r31, 0x0388
    4a4e:	30 97       	sbiw	r30, 0x00	; 0
    4a50:	11 f0       	breq	.+4      	; 0x4a56 <__vector_32+0x36>
    4a52:	09 95       	icall
    4a54:	04 c0       	rjmp	.+8      	; 0x4a5e <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4a56:	8a e0       	ldi	r24, 0x0A	; 10
    4a58:	60 e0       	ldi	r22, 0x00	; 0
    4a5a:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <nrk_kernel_error_add>
//printf("TIMER3_COMPA_vect\n\r");
	return;  	
}
    4a5e:	ff 91       	pop	r31
    4a60:	ef 91       	pop	r30
    4a62:	bf 91       	pop	r27
    4a64:	af 91       	pop	r26
    4a66:	9f 91       	pop	r25
    4a68:	8f 91       	pop	r24
    4a6a:	7f 91       	pop	r23
    4a6c:	6f 91       	pop	r22
    4a6e:	5f 91       	pop	r21
    4a70:	4f 91       	pop	r20
    4a72:	3f 91       	pop	r19
    4a74:	2f 91       	pop	r18
    4a76:	0f 90       	pop	r0
    4a78:	0b be       	out	0x3b, r0	; 59
    4a7a:	0f 90       	pop	r0
    4a7c:	0f be       	out	0x3f, r0	; 63
    4a7e:	0f 90       	pop	r0
    4a80:	1f 90       	pop	r1
    4a82:	18 95       	reti

00004a84 <__vector_default>:
}

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    4a84:	1f 92       	push	r1
    4a86:	0f 92       	push	r0
    4a88:	0f b6       	in	r0, 0x3f	; 63
    4a8a:	0f 92       	push	r0
    4a8c:	0b b6       	in	r0, 0x3b	; 59
    4a8e:	0f 92       	push	r0
    4a90:	11 24       	eor	r1, r1
    4a92:	2f 93       	push	r18
    4a94:	3f 93       	push	r19
    4a96:	4f 93       	push	r20
    4a98:	5f 93       	push	r21
    4a9a:	6f 93       	push	r22
    4a9c:	7f 93       	push	r23
    4a9e:	8f 93       	push	r24
    4aa0:	9f 93       	push	r25
    4aa2:	af 93       	push	r26
    4aa4:	bf 93       	push	r27
    4aa6:	ef 93       	push	r30
    4aa8:	ff 93       	push	r31
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4aaa:	8a e0       	ldi	r24, 0x0A	; 10
    4aac:	60 e0       	ldi	r22, 0x00	; 0
    4aae:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <nrk_kernel_error_add>
    4ab2:	ff cf       	rjmp	.-2      	; 0x4ab2 <__vector_default+0x2e>

00004ab4 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    4ab4:	88 23       	and	r24, r24
    4ab6:	11 f4       	brne	.+4      	; 0x4abc <nrk_ext_int_enable+0x8>
    4ab8:	e8 9a       	sbi	0x1d, 0	; 29
    4aba:	33 c0       	rjmp	.+102    	; 0x4b22 <nrk_ext_int_enable+0x6e>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    4abc:	81 30       	cpi	r24, 0x01	; 1
    4abe:	11 f4       	brne	.+4      	; 0x4ac4 <nrk_ext_int_enable+0x10>
    4ac0:	e9 9a       	sbi	0x1d, 1	; 29
    4ac2:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    4ac4:	82 30       	cpi	r24, 0x02	; 2
    4ac6:	11 f4       	brne	.+4      	; 0x4acc <nrk_ext_int_enable+0x18>
    4ac8:	ea 9a       	sbi	0x1d, 2	; 29
    4aca:	2b c0       	rjmp	.+86     	; 0x4b22 <nrk_ext_int_enable+0x6e>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    4acc:	83 30       	cpi	r24, 0x03	; 3
    4ace:	21 f4       	brne	.+8      	; 0x4ad8 <nrk_ext_int_enable+0x24>
    4ad0:	80 91 6b 00 	lds	r24, 0x006B
    4ad4:	81 60       	ori	r24, 0x01	; 1
    4ad6:	23 c0       	rjmp	.+70     	; 0x4b1e <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    4ad8:	84 30       	cpi	r24, 0x04	; 4
    4ada:	21 f4       	brne	.+8      	; 0x4ae4 <nrk_ext_int_enable+0x30>
    4adc:	80 91 6b 00 	lds	r24, 0x006B
    4ae0:	82 60       	ori	r24, 0x02	; 2
    4ae2:	1d c0       	rjmp	.+58     	; 0x4b1e <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    4ae4:	85 30       	cpi	r24, 0x05	; 5
    4ae6:	21 f4       	brne	.+8      	; 0x4af0 <nrk_ext_int_enable+0x3c>
    4ae8:	80 91 6b 00 	lds	r24, 0x006B
    4aec:	84 60       	ori	r24, 0x04	; 4
    4aee:	17 c0       	rjmp	.+46     	; 0x4b1e <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    4af0:	86 30       	cpi	r24, 0x06	; 6
    4af2:	21 f4       	brne	.+8      	; 0x4afc <nrk_ext_int_enable+0x48>
    4af4:	80 91 6b 00 	lds	r24, 0x006B
    4af8:	88 60       	ori	r24, 0x08	; 8
    4afa:	11 c0       	rjmp	.+34     	; 0x4b1e <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    4afc:	87 30       	cpi	r24, 0x07	; 7
    4afe:	21 f4       	brne	.+8      	; 0x4b08 <nrk_ext_int_enable+0x54>
    4b00:	80 91 6b 00 	lds	r24, 0x006B
    4b04:	80 61       	ori	r24, 0x10	; 16
    4b06:	0b c0       	rjmp	.+22     	; 0x4b1e <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    4b08:	88 30       	cpi	r24, 0x08	; 8
    4b0a:	21 f4       	brne	.+8      	; 0x4b14 <nrk_ext_int_enable+0x60>
    4b0c:	80 91 6b 00 	lds	r24, 0x006B
    4b10:	80 62       	ori	r24, 0x20	; 32
    4b12:	05 c0       	rjmp	.+10     	; 0x4b1e <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    4b14:	89 30       	cpi	r24, 0x09	; 9
    4b16:	39 f4       	brne	.+14     	; 0x4b26 <nrk_ext_int_enable+0x72>
    4b18:	80 91 6b 00 	lds	r24, 0x006B
    4b1c:	80 64       	ori	r24, 0x40	; 64
    4b1e:	80 93 6b 00 	sts	0x006B, r24
    4b22:	81 e0       	ldi	r24, 0x01	; 1
    4b24:	08 95       	ret
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    4b26:	8a 30       	cpi	r24, 0x0A	; 10
    4b28:	11 f0       	breq	.+4      	; 0x4b2e <nrk_ext_int_enable+0x7a>
    4b2a:	8f ef       	ldi	r24, 0xFF	; 255
    4b2c:	08 95       	ret
    4b2e:	80 91 6b 00 	lds	r24, 0x006B
    4b32:	80 68       	ori	r24, 0x80	; 128
    4b34:	80 93 6b 00 	sts	0x006B, r24
    4b38:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    4b3a:	08 95       	ret

00004b3c <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    4b3c:	88 23       	and	r24, r24
    4b3e:	11 f4       	brne	.+4      	; 0x4b44 <nrk_ext_int_disable+0x8>
    4b40:	e8 98       	cbi	0x1d, 0	; 29
    4b42:	33 c0       	rjmp	.+102    	; 0x4baa <nrk_ext_int_disable+0x6e>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4b44:	81 30       	cpi	r24, 0x01	; 1
    4b46:	11 f4       	brne	.+4      	; 0x4b4c <nrk_ext_int_disable+0x10>
    4b48:	e9 98       	cbi	0x1d, 1	; 29
    4b4a:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4b4c:	82 30       	cpi	r24, 0x02	; 2
    4b4e:	11 f4       	brne	.+4      	; 0x4b54 <nrk_ext_int_disable+0x18>
    4b50:	e9 98       	cbi	0x1d, 1	; 29
    4b52:	2b c0       	rjmp	.+86     	; 0x4baa <nrk_ext_int_disable+0x6e>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    4b54:	83 30       	cpi	r24, 0x03	; 3
    4b56:	21 f4       	brne	.+8      	; 0x4b60 <nrk_ext_int_disable+0x24>
    4b58:	80 91 6b 00 	lds	r24, 0x006B
    4b5c:	8e 7f       	andi	r24, 0xFE	; 254
    4b5e:	23 c0       	rjmp	.+70     	; 0x4ba6 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    4b60:	84 30       	cpi	r24, 0x04	; 4
    4b62:	21 f4       	brne	.+8      	; 0x4b6c <nrk_ext_int_disable+0x30>
    4b64:	80 91 6b 00 	lds	r24, 0x006B
    4b68:	8d 7f       	andi	r24, 0xFD	; 253
    4b6a:	1d c0       	rjmp	.+58     	; 0x4ba6 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    4b6c:	85 30       	cpi	r24, 0x05	; 5
    4b6e:	21 f4       	brne	.+8      	; 0x4b78 <nrk_ext_int_disable+0x3c>
    4b70:	80 91 6b 00 	lds	r24, 0x006B
    4b74:	8b 7f       	andi	r24, 0xFB	; 251
    4b76:	17 c0       	rjmp	.+46     	; 0x4ba6 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    4b78:	86 30       	cpi	r24, 0x06	; 6
    4b7a:	21 f4       	brne	.+8      	; 0x4b84 <nrk_ext_int_disable+0x48>
    4b7c:	80 91 6b 00 	lds	r24, 0x006B
    4b80:	87 7f       	andi	r24, 0xF7	; 247
    4b82:	11 c0       	rjmp	.+34     	; 0x4ba6 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    4b84:	87 30       	cpi	r24, 0x07	; 7
    4b86:	21 f4       	brne	.+8      	; 0x4b90 <nrk_ext_int_disable+0x54>
    4b88:	80 91 6b 00 	lds	r24, 0x006B
    4b8c:	8f 7e       	andi	r24, 0xEF	; 239
    4b8e:	0b c0       	rjmp	.+22     	; 0x4ba6 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    4b90:	88 30       	cpi	r24, 0x08	; 8
    4b92:	21 f4       	brne	.+8      	; 0x4b9c <nrk_ext_int_disable+0x60>
    4b94:	80 91 6b 00 	lds	r24, 0x006B
    4b98:	8f 7d       	andi	r24, 0xDF	; 223
    4b9a:	05 c0       	rjmp	.+10     	; 0x4ba6 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    4b9c:	89 30       	cpi	r24, 0x09	; 9
    4b9e:	39 f4       	brne	.+14     	; 0x4bae <nrk_ext_int_disable+0x72>
    4ba0:	80 91 6b 00 	lds	r24, 0x006B
    4ba4:	8f 7b       	andi	r24, 0xBF	; 191
    4ba6:	80 93 6b 00 	sts	0x006B, r24
    4baa:	81 e0       	ldi	r24, 0x01	; 1
    4bac:	08 95       	ret
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    4bae:	8a 30       	cpi	r24, 0x0A	; 10
    4bb0:	11 f0       	breq	.+4      	; 0x4bb6 <nrk_ext_int_disable+0x7a>
    4bb2:	8f ef       	ldi	r24, 0xFF	; 255
    4bb4:	08 95       	ret
    4bb6:	80 91 6b 00 	lds	r24, 0x006B
    4bba:	8f 77       	andi	r24, 0x7F	; 127
    4bbc:	80 93 6b 00 	sts	0x006B, r24
    4bc0:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    4bc2:	08 95       	ret

00004bc4 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    4bc4:	88 23       	and	r24, r24
    4bc6:	39 f5       	brne	.+78     	; 0x4c16 <nrk_ext_int_configure+0x52>
	{
	ext_int0_callback=callback_func;
    4bc8:	50 93 a5 0b 	sts	0x0BA5, r21
    4bcc:	40 93 a4 0b 	sts	0x0BA4, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    4bd0:	66 23       	and	r22, r22
    4bd2:	21 f4       	brne	.+8      	; 0x4bdc <nrk_ext_int_configure+0x18>
    4bd4:	80 91 69 00 	lds	r24, 0x0069
    4bd8:	8c 7f       	andi	r24, 0xFC	; 252
    4bda:	44 c0       	rjmp	.+136    	; 0x4c64 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    4bdc:	61 30       	cpi	r22, 0x01	; 1
    4bde:	49 f4       	brne	.+18     	; 0x4bf2 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    4be0:	80 91 69 00 	lds	r24, 0x0069
    4be4:	8d 7f       	andi	r24, 0xFD	; 253
    4be6:	80 93 69 00 	sts	0x0069, r24
    4bea:	80 91 69 00 	lds	r24, 0x0069
    4bee:	81 60       	ori	r24, 0x01	; 1
    4bf0:	39 c0       	rjmp	.+114    	; 0x4c64 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    4bf2:	62 30       	cpi	r22, 0x02	; 2
    4bf4:	49 f4       	brne	.+18     	; 0x4c08 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    4bf6:	80 91 69 00 	lds	r24, 0x0069
    4bfa:	82 60       	ori	r24, 0x02	; 2
    4bfc:	80 93 69 00 	sts	0x0069, r24
    4c00:	80 91 69 00 	lds	r24, 0x0069
    4c04:	8e 7f       	andi	r24, 0xFE	; 254
    4c06:	2e c0       	rjmp	.+92     	; 0x4c64 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    4c08:	63 30       	cpi	r22, 0x03	; 3
    4c0a:	09 f0       	breq	.+2      	; 0x4c0e <nrk_ext_int_configure+0x4a>
    4c0c:	66 c0       	rjmp	.+204    	; 0x4cda <nrk_ext_int_configure+0x116>
    4c0e:	80 91 69 00 	lds	r24, 0x0069
    4c12:	83 60       	ori	r24, 0x03	; 3
    4c14:	27 c0       	rjmp	.+78     	; 0x4c64 <nrk_ext_int_configure+0xa0>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    4c16:	81 30       	cpi	r24, 0x01	; 1
    4c18:	41 f5       	brne	.+80     	; 0x4c6a <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    4c1a:	50 93 a3 0b 	sts	0x0BA3, r21
    4c1e:	40 93 a2 0b 	sts	0x0BA2, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    4c22:	66 23       	and	r22, r22
    4c24:	21 f4       	brne	.+8      	; 0x4c2e <nrk_ext_int_configure+0x6a>
    4c26:	80 91 69 00 	lds	r24, 0x0069
    4c2a:	83 7f       	andi	r24, 0xF3	; 243
    4c2c:	1b c0       	rjmp	.+54     	; 0x4c64 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    4c2e:	61 30       	cpi	r22, 0x01	; 1
    4c30:	49 f4       	brne	.+18     	; 0x4c44 <nrk_ext_int_configure+0x80>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    4c32:	80 91 69 00 	lds	r24, 0x0069
    4c36:	87 7f       	andi	r24, 0xF7	; 247
    4c38:	80 93 69 00 	sts	0x0069, r24
    4c3c:	80 91 69 00 	lds	r24, 0x0069
    4c40:	84 60       	ori	r24, 0x04	; 4
    4c42:	10 c0       	rjmp	.+32     	; 0x4c64 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    4c44:	62 30       	cpi	r22, 0x02	; 2
    4c46:	49 f4       	brne	.+18     	; 0x4c5a <nrk_ext_int_configure+0x96>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    4c48:	80 91 69 00 	lds	r24, 0x0069
    4c4c:	88 60       	ori	r24, 0x08	; 8
    4c4e:	80 93 69 00 	sts	0x0069, r24
    4c52:	80 91 69 00 	lds	r24, 0x0069
    4c56:	8b 7f       	andi	r24, 0xFB	; 251
    4c58:	05 c0       	rjmp	.+10     	; 0x4c64 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    4c5a:	63 30       	cpi	r22, 0x03	; 3
    4c5c:	f1 f5       	brne	.+124    	; 0x4cda <nrk_ext_int_configure+0x116>
    4c5e:	80 91 69 00 	lds	r24, 0x0069
    4c62:	8c 60       	ori	r24, 0x0C	; 12
    4c64:	80 93 69 00 	sts	0x0069, r24
    4c68:	36 c0       	rjmp	.+108    	; 0x4cd6 <nrk_ext_int_configure+0x112>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    4c6a:	82 30       	cpi	r24, 0x02	; 2
    4c6c:	31 f5       	brne	.+76     	; 0x4cba <nrk_ext_int_configure+0xf6>
	{
	ext_int1_callback=callback_func;
    4c6e:	50 93 a3 0b 	sts	0x0BA3, r21
    4c72:	40 93 a2 0b 	sts	0x0BA2, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    4c76:	66 23       	and	r22, r22
    4c78:	21 f4       	brne	.+8      	; 0x4c82 <nrk_ext_int_configure+0xbe>
    4c7a:	80 91 69 00 	lds	r24, 0x0069
    4c7e:	8f 7c       	andi	r24, 0xCF	; 207
    4c80:	f1 cf       	rjmp	.-30     	; 0x4c64 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    4c82:	61 30       	cpi	r22, 0x01	; 1
    4c84:	49 f4       	brne	.+18     	; 0x4c98 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    4c86:	80 91 69 00 	lds	r24, 0x0069
    4c8a:	8f 7d       	andi	r24, 0xDF	; 223
    4c8c:	80 93 69 00 	sts	0x0069, r24
    4c90:	80 91 69 00 	lds	r24, 0x0069
    4c94:	80 61       	ori	r24, 0x10	; 16
    4c96:	e6 cf       	rjmp	.-52     	; 0x4c64 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    4c98:	62 30       	cpi	r22, 0x02	; 2
    4c9a:	49 f4       	brne	.+18     	; 0x4cae <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    4c9c:	80 91 69 00 	lds	r24, 0x0069
    4ca0:	80 62       	ori	r24, 0x20	; 32
    4ca2:	80 93 69 00 	sts	0x0069, r24
    4ca6:	80 91 69 00 	lds	r24, 0x0069
    4caa:	8f 7e       	andi	r24, 0xEF	; 239
    4cac:	db cf       	rjmp	.-74     	; 0x4c64 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    4cae:	63 30       	cpi	r22, 0x03	; 3
    4cb0:	a1 f4       	brne	.+40     	; 0x4cda <nrk_ext_int_configure+0x116>
    4cb2:	80 91 69 00 	lds	r24, 0x0069
    4cb6:	80 63       	ori	r24, 0x30	; 48
    4cb8:	d5 cf       	rjmp	.-86     	; 0x4c64 <nrk_ext_int_configure+0xa0>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4cba:	83 50       	subi	r24, 0x03	; 3
    4cbc:	88 30       	cpi	r24, 0x08	; 8
    4cbe:	10 f0       	brcs	.+4      	; 0x4cc4 <nrk_ext_int_configure+0x100>
    4cc0:	8f ef       	ldi	r24, 0xFF	; 255
    4cc2:	08 95       	ret
	PCICR |= BM(PCIE0);	
    4cc4:	80 91 68 00 	lds	r24, 0x0068
    4cc8:	81 60       	ori	r24, 0x01	; 1
    4cca:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4cce:	50 93 a9 0b 	sts	0x0BA9, r21
    4cd2:	40 93 a8 0b 	sts	0x0BA8, r20
    4cd6:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
    4cd8:	08 95       	ret
    4cda:	81 e0       	ldi	r24, 0x01	; 1
	}
return NRK_ERROR;
}
    4cdc:	08 95       	ret

00004cde <__vector_1>:
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
	return;  	
}


SIGNAL(INT0_vect) {
    4cde:	1f 92       	push	r1
    4ce0:	0f 92       	push	r0
    4ce2:	0f b6       	in	r0, 0x3f	; 63
    4ce4:	0f 92       	push	r0
    4ce6:	0b b6       	in	r0, 0x3b	; 59
    4ce8:	0f 92       	push	r0
    4cea:	11 24       	eor	r1, r1
    4cec:	2f 93       	push	r18
    4cee:	3f 93       	push	r19
    4cf0:	4f 93       	push	r20
    4cf2:	5f 93       	push	r21
    4cf4:	6f 93       	push	r22
    4cf6:	7f 93       	push	r23
    4cf8:	8f 93       	push	r24
    4cfa:	9f 93       	push	r25
    4cfc:	af 93       	push	r26
    4cfe:	bf 93       	push	r27
    4d00:	ef 93       	push	r30
    4d02:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    4d04:	e0 91 a4 0b 	lds	r30, 0x0BA4
    4d08:	f0 91 a5 0b 	lds	r31, 0x0BA5
    4d0c:	30 97       	sbiw	r30, 0x00	; 0
    4d0e:	11 f0       	breq	.+4      	; 0x4d14 <__vector_1+0x36>
    4d10:	09 95       	icall
    4d12:	04 c0       	rjmp	.+8      	; 0x4d1c <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4d14:	8a e0       	ldi	r24, 0x0A	; 10
    4d16:	60 e0       	ldi	r22, 0x00	; 0
    4d18:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <nrk_kernel_error_add>
	return;  	
}
    4d1c:	ff 91       	pop	r31
    4d1e:	ef 91       	pop	r30
    4d20:	bf 91       	pop	r27
    4d22:	af 91       	pop	r26
    4d24:	9f 91       	pop	r25
    4d26:	8f 91       	pop	r24
    4d28:	7f 91       	pop	r23
    4d2a:	6f 91       	pop	r22
    4d2c:	5f 91       	pop	r21
    4d2e:	4f 91       	pop	r20
    4d30:	3f 91       	pop	r19
    4d32:	2f 91       	pop	r18
    4d34:	0f 90       	pop	r0
    4d36:	0b be       	out	0x3b, r0	; 59
    4d38:	0f 90       	pop	r0
    4d3a:	0f be       	out	0x3f, r0	; 63
    4d3c:	0f 90       	pop	r0
    4d3e:	1f 90       	pop	r1
    4d40:	18 95       	reti

00004d42 <__vector_9>:
	}
return NRK_ERROR;
}


SIGNAL(PCINT0_vect) {
    4d42:	1f 92       	push	r1
    4d44:	0f 92       	push	r0
    4d46:	0f b6       	in	r0, 0x3f	; 63
    4d48:	0f 92       	push	r0
    4d4a:	0b b6       	in	r0, 0x3b	; 59
    4d4c:	0f 92       	push	r0
    4d4e:	11 24       	eor	r1, r1
    4d50:	2f 93       	push	r18
    4d52:	3f 93       	push	r19
    4d54:	4f 93       	push	r20
    4d56:	5f 93       	push	r21
    4d58:	6f 93       	push	r22
    4d5a:	7f 93       	push	r23
    4d5c:	8f 93       	push	r24
    4d5e:	9f 93       	push	r25
    4d60:	af 93       	push	r26
    4d62:	bf 93       	push	r27
    4d64:	ef 93       	push	r30
    4d66:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    4d68:	e0 91 a8 0b 	lds	r30, 0x0BA8
    4d6c:	f0 91 a9 0b 	lds	r31, 0x0BA9
    4d70:	30 97       	sbiw	r30, 0x00	; 0
    4d72:	11 f0       	breq	.+4      	; 0x4d78 <__vector_9+0x36>
    4d74:	09 95       	icall
    4d76:	04 c0       	rjmp	.+8      	; 0x4d80 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4d78:	8a e0       	ldi	r24, 0x0A	; 10
    4d7a:	60 e0       	ldi	r22, 0x00	; 0
    4d7c:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <nrk_kernel_error_add>
	return;  	
}
    4d80:	ff 91       	pop	r31
    4d82:	ef 91       	pop	r30
    4d84:	bf 91       	pop	r27
    4d86:	af 91       	pop	r26
    4d88:	9f 91       	pop	r25
    4d8a:	8f 91       	pop	r24
    4d8c:	7f 91       	pop	r23
    4d8e:	6f 91       	pop	r22
    4d90:	5f 91       	pop	r21
    4d92:	4f 91       	pop	r20
    4d94:	3f 91       	pop	r19
    4d96:	2f 91       	pop	r18
    4d98:	0f 90       	pop	r0
    4d9a:	0b be       	out	0x3b, r0	; 59
    4d9c:	0f 90       	pop	r0
    4d9e:	0f be       	out	0x3f, r0	; 63
    4da0:	0f 90       	pop	r0
    4da2:	1f 90       	pop	r1
    4da4:	18 95       	reti

00004da6 <_nrk_startup_ok>:

uint8_t _nrk_startup_ok()
{
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident
if((volatile uint8_t)TCCR2A!=0) return 0;
    4da6:	90 91 b0 00 	lds	r25, 0x00B0
    4daa:	80 e0       	ldi	r24, 0x00	; 0
    4dac:	99 23       	and	r25, r25
    4dae:	09 f4       	brne	.+2      	; 0x4db2 <_nrk_startup_ok+0xc>
    4db0:	81 e0       	ldi	r24, 0x01	; 1
return 1;
}
    4db2:	08 95       	ret

00004db4 <update_watchdog>:

inline void update_watchdog()
{


}
    4db4:	08 95       	ret

00004db6 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4db6:	04 b6       	in	r0, 0x34	; 52
    4db8:	03 fe       	sbrs	r0, 3
    4dba:	02 c0       	rjmp	.+4      	; 0x4dc0 <nrk_watchdog_check+0xa>
    4dbc:	8f ef       	ldi	r24, 0xFF	; 255
    4dbe:	08 95       	ret
    4dc0:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    4dc2:	08 95       	ret

00004dc4 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    4dc4:	a8 95       	wdr

}
    4dc6:	08 95       	ret

00004dc8 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    4dc8:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>
MCUSR &= ~(1<<WDRF);
    4dcc:	84 b7       	in	r24, 0x34	; 52
    4dce:	87 7f       	andi	r24, 0xF7	; 247
    4dd0:	84 bf       	out	0x34, r24	; 52
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4dd2:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
MCUSR &= ~(1<<WDRF);
nrk_watchdog_reset();
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4dd4:	e0 e6       	ldi	r30, 0x60	; 96
    4dd6:	f0 e0       	ldi	r31, 0x00	; 0
    4dd8:	80 81       	ld	r24, Z
    4dda:	88 61       	ori	r24, 0x18	; 24
    4ddc:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    4dde:	8d e0       	ldi	r24, 0x0D	; 13
    4de0:	80 83       	st	Z, r24
nrk_int_enable();
    4de2:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>

}
    4de6:	08 95       	ret

00004de8 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    4de8:	0e 94 c2 14 	call	0x2984	; 0x2984 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4dec:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4dee:	84 b7       	in	r24, 0x34	; 52
    4df0:	87 7f       	andi	r24, 0xF7	; 247
    4df2:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4df4:	e0 e6       	ldi	r30, 0x60	; 96
    4df6:	f0 e0       	ldi	r31, 0x00	; 0
    4df8:	80 81       	ld	r24, Z
    4dfa:	88 61       	ori	r24, 0x18	; 24
    4dfc:	80 83       	st	Z, r24
WDTCSR = 0;
    4dfe:	10 82       	st	Z, r1
nrk_int_enable();
    4e00:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>
}
    4e04:	08 95       	ret

00004e06 <nrk_battery_save>:
        nrk_led_clr(2);
        nrk_led_clr(3);
        SET_VREG_INACTIVE();
        nrk_sleep();
#endif
}
    4e06:	08 95       	ret

00004e08 <nrk_sleep>:

void nrk_sleep()
{

    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    4e08:	83 b7       	in	r24, 0x33	; 51
    4e0a:	81 7f       	andi	r24, 0xF1	; 241
    4e0c:	86 60       	ori	r24, 0x06	; 6
    4e0e:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4e10:	83 b7       	in	r24, 0x33	; 51
    4e12:	81 60       	ori	r24, 0x01	; 1
    4e14:	83 bf       	out	0x33, r24	; 51
    4e16:	88 95       	sleep
    4e18:	83 b7       	in	r24, 0x33	; 51
    4e1a:	8e 7f       	andi	r24, 0xFE	; 254
    4e1c:	83 bf       	out	0x33, r24	; 51

}
    4e1e:	08 95       	ret

00004e20 <nrk_idle>:

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    4e20:	83 b7       	in	r24, 0x33	; 51
    4e22:	81 7f       	andi	r24, 0xF1	; 241
    4e24:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4e26:	83 b7       	in	r24, 0x33	; 51
    4e28:	81 60       	ori	r24, 0x01	; 1
    4e2a:	83 bf       	out	0x33, r24	; 51
    4e2c:	88 95       	sleep
    4e2e:	83 b7       	in	r24, 0x33	; 51
    4e30:	8e 7f       	andi	r24, 0xFE	; 254
    4e32:	83 bf       	out	0x33, r24	; 51

}
    4e34:	08 95       	ret

00004e36 <nrk_task_set_entry_function>:

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    4e36:	fc 01       	movw	r30, r24
    4e38:	76 83       	std	Z+6, r23	; 0x06
    4e3a:	65 83       	std	Z+5, r22	; 0x05
}
    4e3c:	08 95       	ret

00004e3e <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    4e3e:	25 e5       	ldi	r18, 0x55	; 85
    4e40:	fa 01       	movw	r30, r20
    4e42:	20 83       	st	Z, r18
    stk    = (unsigned int *)ptos;          /* Load stack pointer */
    4e44:	fb 01       	movw	r30, r22
    *(--stk) = 0x4748;   // G H                      
    *(--stk) = 0x4546;   // E F                    
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    4e46:	32 97       	sbiw	r30, 0x02	; 2
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    4e48:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    4e4a:	81 83       	std	Z+1, r24	; 0x01
	
    *(--stk) = 0;
    4e4c:	12 92       	st	-Z, r1
    4e4e:	12 92       	st	-Z, r1
    *(--stk) = 0;       
    4e50:	12 92       	st	-Z, r1
    4e52:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4e54:	12 92       	st	-Z, r1
    4e56:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4e58:	12 92       	st	-Z, r1
    4e5a:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    4e5c:	12 92       	st	-Z, r1
    4e5e:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    4e60:	12 92       	st	-Z, r1
    4e62:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4e64:	12 92       	st	-Z, r1
    4e66:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4e68:	12 92       	st	-Z, r1
    4e6a:	12 92       	st	-Z, r1

    *(--stk) = 0; 
    4e6c:	12 92       	st	-Z, r1
    4e6e:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4e70:	12 92       	st	-Z, r1
    4e72:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4e74:	12 92       	st	-Z, r1
    4e76:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4e78:	12 92       	st	-Z, r1
    4e7a:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4e7c:	12 92       	st	-Z, r1
    4e7e:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4e80:	12 92       	st	-Z, r1
    4e82:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4e84:	12 92       	st	-Z, r1
    4e86:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4e88:	12 92       	st	-Z, r1
    4e8a:	12 92       	st	-Z, r1
    *(--stk) = 0;
    4e8c:	12 92       	st	-Z, r1
    4e8e:	12 92       	st	-Z, r1


    return ((void *)stk);
}
    4e90:	cf 01       	movw	r24, r30
    4e92:	08 95       	ret

00004e94 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    4e94:	85 e5       	ldi	r24, 0x55	; 85
    4e96:	80 93 7e 21 	sts	0x217E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    4e9a:	ee ef       	ldi	r30, 0xFE	; 254
    4e9c:	f1 e2       	ldi	r31, 0x21	; 33
    4e9e:	f0 93 02 09 	sts	0x0902, r31
    4ea2:	e0 93 01 09 	sts	0x0901, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4ea6:	8b ec       	ldi	r24, 0xCB	; 203
    4ea8:	94 e1       	ldi	r25, 0x14	; 20
    4eaa:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4eac:	80 93 ff 21 	sts	0x21FF, r24

}
    4eb0:	08 95       	ret

00004eb2 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4eb2:	8b ec       	ldi	r24, 0xCB	; 203
    4eb4:	94 e1       	ldi	r25, 0x14	; 20
    4eb6:	90 93 fe 21 	sts	0x21FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4eba:	80 93 ff 21 	sts	0x21FF, r24
}
    4ebe:	08 95       	ret

00004ec0 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    4ec0:	0e 94 a9 23 	call	0x4752	; 0x4752 <_nrk_setup_timer>
  nrk_int_enable();  
    4ec4:	0e 94 c4 14 	call	0x2988	; 0x2988 <nrk_int_enable>
	
}
    4ec8:	08 95       	ret

00004eca <nrk_task_set_stk>:
{
task->task=func;
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    4eca:	ef 92       	push	r14
    4ecc:	ff 92       	push	r15
    4ece:	0f 93       	push	r16
    4ed0:	1f 93       	push	r17
    4ed2:	cf 93       	push	r28
    4ed4:	df 93       	push	r29
    4ed6:	ec 01       	movw	r28, r24
    4ed8:	8b 01       	movw	r16, r22
    4eda:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4edc:	40 32       	cpi	r20, 0x20	; 32
    4ede:	51 05       	cpc	r21, r1
    4ee0:	18 f4       	brcc	.+6      	; 0x4ee8 <nrk_task_set_stk+0x1e>
    4ee2:	81 e1       	ldi	r24, 0x11	; 17
    4ee4:	0e 94 31 17 	call	0x2e62	; 0x2e62 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4ee8:	08 94       	sec
    4eea:	e1 08       	sbc	r14, r1
    4eec:	f1 08       	sbc	r15, r1
    4eee:	e0 0e       	add	r14, r16
    4ef0:	f1 1e       	adc	r15, r17
    4ef2:	fa 82       	std	Y+2, r15	; 0x02
    4ef4:	e9 82       	std	Y+1, r14	; 0x01
task->Pbos = (void *) &stk_base[0];
    4ef6:	1c 83       	std	Y+4, r17	; 0x04
    4ef8:	0b 83       	std	Y+3, r16	; 0x03

}
    4efa:	df 91       	pop	r29
    4efc:	cf 91       	pop	r28
    4efe:	1f 91       	pop	r17
    4f00:	0f 91       	pop	r16
    4f02:	ff 90       	pop	r15
    4f04:	ef 90       	pop	r14
    4f06:	08 95       	ret

00004f08 <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    4f08:	a0 91 72 0b 	lds	r26, 0x0B72
	lds r27,nrk_high_ready_TCB+1
    4f0c:	b0 91 73 0b 	lds	r27, 0x0B73

    	;x points to &OSTCB[x]
    
	ld r28,x+
    4f10:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    4f12:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    4f14:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    4f16:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    4f18:	ff 91       	pop	r31
	pop r30
    4f1a:	ef 91       	pop	r30
	pop r29
    4f1c:	df 91       	pop	r29
	pop r28
    4f1e:	cf 91       	pop	r28
	pop r27
    4f20:	bf 91       	pop	r27
	pop r26
    4f22:	af 91       	pop	r26
	pop r25
    4f24:	9f 91       	pop	r25
	pop r24			
    4f26:	8f 91       	pop	r24
	pop r23
    4f28:	7f 91       	pop	r23
	pop r22
    4f2a:	6f 91       	pop	r22
	pop r21
    4f2c:	5f 91       	pop	r21
	pop r20	
    4f2e:	4f 91       	pop	r20
	pop r19
    4f30:	3f 91       	pop	r19
	pop r18	
    4f32:	2f 91       	pop	r18
	pop r17
    4f34:	1f 91       	pop	r17
	pop r16
    4f36:	0f 91       	pop	r16
	pop r15
    4f38:	ff 90       	pop	r15
	pop r14
    4f3a:	ef 90       	pop	r14
	pop r13
    4f3c:	df 90       	pop	r13
	pop r12
    4f3e:	cf 90       	pop	r12
	pop r11
    4f40:	bf 90       	pop	r11
	pop r10
    4f42:	af 90       	pop	r10
	pop r9
    4f44:	9f 90       	pop	r9
	pop r8
    4f46:	8f 90       	pop	r8
	pop r7
    4f48:	7f 90       	pop	r7
	pop r6
    4f4a:	6f 90       	pop	r6
	pop r5
    4f4c:	5f 90       	pop	r5
	pop r4
    4f4e:	4f 90       	pop	r4
	pop r3
    4f50:	3f 90       	pop	r3
	pop r2
    4f52:	2f 90       	pop	r2
	pop r1
    4f54:	1f 90       	pop	r1
	pop r0
    4f56:	0f 90       	pop	r0
	out __SREG__, r0
    4f58:	0f be       	out	0x3f, r0	; 63
	pop r0	
    4f5a:	0f 90       	pop	r0
	   
    	reti 
    4f5c:	18 95       	reti

00004f5e <vfprintf>:
    4f5e:	6f 92       	push	r6
    4f60:	7f 92       	push	r7
    4f62:	8f 92       	push	r8
    4f64:	9f 92       	push	r9
    4f66:	af 92       	push	r10
    4f68:	bf 92       	push	r11
    4f6a:	cf 92       	push	r12
    4f6c:	df 92       	push	r13
    4f6e:	ef 92       	push	r14
    4f70:	ff 92       	push	r15
    4f72:	0f 93       	push	r16
    4f74:	1f 93       	push	r17
    4f76:	df 93       	push	r29
    4f78:	cf 93       	push	r28
    4f7a:	cd b7       	in	r28, 0x3d	; 61
    4f7c:	de b7       	in	r29, 0x3e	; 62
    4f7e:	2d 97       	sbiw	r28, 0x0d	; 13
    4f80:	0f b6       	in	r0, 0x3f	; 63
    4f82:	f8 94       	cli
    4f84:	de bf       	out	0x3e, r29	; 62
    4f86:	0f be       	out	0x3f, r0	; 63
    4f88:	cd bf       	out	0x3d, r28	; 61
    4f8a:	6c 01       	movw	r12, r24
    4f8c:	4b 01       	movw	r8, r22
    4f8e:	8a 01       	movw	r16, r20
    4f90:	fc 01       	movw	r30, r24
    4f92:	17 82       	std	Z+7, r1	; 0x07
    4f94:	16 82       	std	Z+6, r1	; 0x06
    4f96:	83 81       	ldd	r24, Z+3	; 0x03
    4f98:	81 fd       	sbrc	r24, 1
    4f9a:	06 c0       	rjmp	.+12     	; 0x4fa8 <vfprintf+0x4a>
    4f9c:	2f ef       	ldi	r18, 0xFF	; 255
    4f9e:	3f ef       	ldi	r19, 0xFF	; 255
    4fa0:	0e c1       	rjmp	.+540    	; 0x51be <vfprintf+0x260>
    4fa2:	0e 5f       	subi	r16, 0xFE	; 254
    4fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    4fa6:	04 c0       	rjmp	.+8      	; 0x4fb0 <vfprintf+0x52>
    4fa8:	5e 01       	movw	r10, r28
    4faa:	08 94       	sec
    4fac:	a1 1c       	adc	r10, r1
    4fae:	b1 1c       	adc	r11, r1
    4fb0:	f6 01       	movw	r30, r12
    4fb2:	f3 80       	ldd	r15, Z+3	; 0x03
    4fb4:	f4 01       	movw	r30, r8
    4fb6:	f3 fc       	sbrc	r15, 3
    4fb8:	85 91       	lpm	r24, Z+
    4fba:	f3 fe       	sbrs	r15, 3
    4fbc:	81 91       	ld	r24, Z+
    4fbe:	4f 01       	movw	r8, r30
    4fc0:	88 23       	and	r24, r24
    4fc2:	09 f4       	brne	.+2      	; 0x4fc6 <vfprintf+0x68>
    4fc4:	f9 c0       	rjmp	.+498    	; 0x51b8 <vfprintf+0x25a>
    4fc6:	85 32       	cpi	r24, 0x25	; 37
    4fc8:	51 f4       	brne	.+20     	; 0x4fde <vfprintf+0x80>
    4fca:	f3 fc       	sbrc	r15, 3
    4fcc:	25 91       	lpm	r18, Z+
    4fce:	f3 fe       	sbrs	r15, 3
    4fd0:	21 91       	ld	r18, Z+
    4fd2:	4f 01       	movw	r8, r30
    4fd4:	25 32       	cpi	r18, 0x25	; 37
    4fd6:	11 f0       	breq	.+4      	; 0x4fdc <vfprintf+0x7e>
    4fd8:	30 e0       	ldi	r19, 0x00	; 0
    4fda:	1f c0       	rjmp	.+62     	; 0x501a <vfprintf+0xbc>
    4fdc:	85 e2       	ldi	r24, 0x25	; 37
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	32 c0       	rjmp	.+100    	; 0x5046 <vfprintf+0xe8>
    4fe2:	22 23       	and	r18, r18
    4fe4:	09 f4       	brne	.+2      	; 0x4fe8 <vfprintf+0x8a>
    4fe6:	e8 c0       	rjmp	.+464    	; 0x51b8 <vfprintf+0x25a>
    4fe8:	8e ec       	ldi	r24, 0xCE	; 206
    4fea:	92 e0       	ldi	r25, 0x02	; 2
    4fec:	62 2f       	mov	r22, r18
    4fee:	70 e0       	ldi	r23, 0x00	; 0
    4ff0:	2c 87       	std	Y+12, r18	; 0x0c
    4ff2:	3d 87       	std	Y+13, r19	; 0x0d
    4ff4:	0e 94 56 29 	call	0x52ac	; 0x52ac <strchr_P>
    4ff8:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ffa:	3d 85       	ldd	r19, Y+13	; 0x0d
    4ffc:	00 97       	sbiw	r24, 0x00	; 0
    4ffe:	39 f4       	brne	.+14     	; 0x500e <vfprintf+0xb0>
    5000:	23 32       	cpi	r18, 0x23	; 35
    5002:	11 f4       	brne	.+4      	; 0x5008 <vfprintf+0xaa>
    5004:	30 61       	ori	r19, 0x10	; 16
    5006:	03 c0       	rjmp	.+6      	; 0x500e <vfprintf+0xb0>
    5008:	2c 36       	cpi	r18, 0x6C	; 108
    500a:	61 f4       	brne	.+24     	; 0x5024 <vfprintf+0xc6>
    500c:	30 68       	ori	r19, 0x80	; 128
    500e:	f4 01       	movw	r30, r8
    5010:	f3 fc       	sbrc	r15, 3
    5012:	25 91       	lpm	r18, Z+
    5014:	f3 fe       	sbrs	r15, 3
    5016:	21 91       	ld	r18, Z+
    5018:	4f 01       	movw	r8, r30
    501a:	37 ff       	sbrs	r19, 7
    501c:	e2 cf       	rjmp	.-60     	; 0x4fe2 <vfprintf+0x84>
    501e:	22 23       	and	r18, r18
    5020:	09 f4       	brne	.+2      	; 0x5024 <vfprintf+0xc6>
    5022:	ca c0       	rjmp	.+404    	; 0x51b8 <vfprintf+0x25a>
    5024:	f3 2e       	mov	r15, r19
    5026:	87 ec       	ldi	r24, 0xC7	; 199
    5028:	92 e0       	ldi	r25, 0x02	; 2
    502a:	62 2f       	mov	r22, r18
    502c:	70 e0       	ldi	r23, 0x00	; 0
    502e:	2c 87       	std	Y+12, r18	; 0x0c
    5030:	3d 87       	std	Y+13, r19	; 0x0d
    5032:	0e 94 56 29 	call	0x52ac	; 0x52ac <strchr_P>
    5036:	2c 85       	ldd	r18, Y+12	; 0x0c
    5038:	3f 2d       	mov	r19, r15
    503a:	00 97       	sbiw	r24, 0x00	; 0
    503c:	41 f0       	breq	.+16     	; 0x504e <vfprintf+0xf0>
    503e:	0c 5f       	subi	r16, 0xFC	; 252
    5040:	1f 4f       	sbci	r17, 0xFF	; 255
    5042:	8f e3       	ldi	r24, 0x3F	; 63
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	b6 01       	movw	r22, r12
    5048:	0e 94 ad 29 	call	0x535a	; 0x535a <fputc>
    504c:	b1 cf       	rjmp	.-158    	; 0x4fb0 <vfprintf+0x52>
    504e:	23 36       	cpi	r18, 0x63	; 99
    5050:	29 f0       	breq	.+10     	; 0x505c <vfprintf+0xfe>
    5052:	23 37       	cpi	r18, 0x73	; 115
    5054:	91 f0       	breq	.+36     	; 0x507a <vfprintf+0x11c>
    5056:	23 35       	cpi	r18, 0x53	; 83
    5058:	09 f5       	brne	.+66     	; 0x509c <vfprintf+0x13e>
    505a:	0d c0       	rjmp	.+26     	; 0x5076 <vfprintf+0x118>
    505c:	32 e0       	ldi	r19, 0x02	; 2
    505e:	e3 2e       	mov	r14, r19
    5060:	f1 2c       	mov	r15, r1
    5062:	e0 0e       	add	r14, r16
    5064:	f1 1e       	adc	r15, r17
    5066:	f8 01       	movw	r30, r16
    5068:	80 81       	ld	r24, Z
    506a:	91 81       	ldd	r25, Z+1	; 0x01
    506c:	b6 01       	movw	r22, r12
    506e:	0e 94 ad 29 	call	0x535a	; 0x535a <fputc>
    5072:	87 01       	movw	r16, r14
    5074:	9d cf       	rjmp	.-198    	; 0x4fb0 <vfprintf+0x52>
    5076:	f1 e0       	ldi	r31, 0x01	; 1
    5078:	ff 2a       	or	r15, r31
    507a:	f8 01       	movw	r30, r16
    507c:	60 80       	ld	r6, Z
    507e:	71 80       	ldd	r7, Z+1	; 0x01
    5080:	04 c0       	rjmp	.+8      	; 0x508a <vfprintf+0x12c>
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	b6 01       	movw	r22, r12
    5086:	0e 94 ad 29 	call	0x535a	; 0x535a <fputc>
    508a:	f3 01       	movw	r30, r6
    508c:	f0 fc       	sbrc	r15, 0
    508e:	85 91       	lpm	r24, Z+
    5090:	f0 fe       	sbrs	r15, 0
    5092:	81 91       	ld	r24, Z+
    5094:	3f 01       	movw	r6, r30
    5096:	88 23       	and	r24, r24
    5098:	a1 f7       	brne	.-24     	; 0x5082 <vfprintf+0x124>
    509a:	83 cf       	rjmp	.-250    	; 0x4fa2 <vfprintf+0x44>
    509c:	24 36       	cpi	r18, 0x64	; 100
    509e:	11 f0       	breq	.+4      	; 0x50a4 <vfprintf+0x146>
    50a0:	29 36       	cpi	r18, 0x69	; 105
    50a2:	29 f5       	brne	.+74     	; 0x50ee <vfprintf+0x190>
    50a4:	37 ff       	sbrs	r19, 7
    50a6:	08 c0       	rjmp	.+16     	; 0x50b8 <vfprintf+0x15a>
    50a8:	f8 01       	movw	r30, r16
    50aa:	60 81       	ld	r22, Z
    50ac:	71 81       	ldd	r23, Z+1	; 0x01
    50ae:	82 81       	ldd	r24, Z+2	; 0x02
    50b0:	93 81       	ldd	r25, Z+3	; 0x03
    50b2:	0c 5f       	subi	r16, 0xFC	; 252
    50b4:	1f 4f       	sbci	r17, 0xFF	; 255
    50b6:	09 c0       	rjmp	.+18     	; 0x50ca <vfprintf+0x16c>
    50b8:	f8 01       	movw	r30, r16
    50ba:	60 81       	ld	r22, Z
    50bc:	71 81       	ldd	r23, Z+1	; 0x01
    50be:	88 27       	eor	r24, r24
    50c0:	77 fd       	sbrc	r23, 7
    50c2:	80 95       	com	r24
    50c4:	98 2f       	mov	r25, r24
    50c6:	0e 5f       	subi	r16, 0xFE	; 254
    50c8:	1f 4f       	sbci	r17, 0xFF	; 255
    50ca:	2f ee       	ldi	r18, 0xEF	; 239
    50cc:	f2 2e       	mov	r15, r18
    50ce:	f3 22       	and	r15, r19
    50d0:	97 ff       	sbrs	r25, 7
    50d2:	09 c0       	rjmp	.+18     	; 0x50e6 <vfprintf+0x188>
    50d4:	90 95       	com	r25
    50d6:	80 95       	com	r24
    50d8:	70 95       	com	r23
    50da:	61 95       	neg	r22
    50dc:	7f 4f       	sbci	r23, 0xFF	; 255
    50de:	8f 4f       	sbci	r24, 0xFF	; 255
    50e0:	9f 4f       	sbci	r25, 0xFF	; 255
    50e2:	f0 e4       	ldi	r31, 0x40	; 64
    50e4:	ff 2a       	or	r15, r31
    50e6:	a5 01       	movw	r20, r10
    50e8:	2a e0       	ldi	r18, 0x0A	; 10
    50ea:	30 e0       	ldi	r19, 0x00	; 0
    50ec:	35 c0       	rjmp	.+106    	; 0x5158 <vfprintf+0x1fa>
    50ee:	20 37       	cpi	r18, 0x70	; 112
    50f0:	b1 f0       	breq	.+44     	; 0x511e <vfprintf+0x1c0>
    50f2:	21 37       	cpi	r18, 0x71	; 113
    50f4:	30 f4       	brcc	.+12     	; 0x5102 <vfprintf+0x1a4>
    50f6:	28 35       	cpi	r18, 0x58	; 88
    50f8:	c9 f0       	breq	.+50     	; 0x512c <vfprintf+0x1ce>
    50fa:	2f 36       	cpi	r18, 0x6F	; 111
    50fc:	09 f0       	breq	.+2      	; 0x5100 <vfprintf+0x1a2>
    50fe:	5c c0       	rjmp	.+184    	; 0x51b8 <vfprintf+0x25a>
    5100:	06 c0       	rjmp	.+12     	; 0x510e <vfprintf+0x1b0>
    5102:	25 37       	cpi	r18, 0x75	; 117
    5104:	39 f0       	breq	.+14     	; 0x5114 <vfprintf+0x1b6>
    5106:	28 37       	cpi	r18, 0x78	; 120
    5108:	09 f0       	breq	.+2      	; 0x510c <vfprintf+0x1ae>
    510a:	56 c0       	rjmp	.+172    	; 0x51b8 <vfprintf+0x25a>
    510c:	0a c0       	rjmp	.+20     	; 0x5122 <vfprintf+0x1c4>
    510e:	28 e0       	ldi	r18, 0x08	; 8
    5110:	30 e0       	ldi	r19, 0x00	; 0
    5112:	10 c0       	rjmp	.+32     	; 0x5134 <vfprintf+0x1d6>
    5114:	2f ee       	ldi	r18, 0xEF	; 239
    5116:	f2 22       	and	r15, r18
    5118:	2a e0       	ldi	r18, 0x0A	; 10
    511a:	30 e0       	ldi	r19, 0x00	; 0
    511c:	0b c0       	rjmp	.+22     	; 0x5134 <vfprintf+0x1d6>
    511e:	80 e1       	ldi	r24, 0x10	; 16
    5120:	f8 2a       	or	r15, r24
    5122:	e4 e2       	ldi	r30, 0x24	; 36
    5124:	fe 2a       	or	r15, r30
    5126:	20 e1       	ldi	r18, 0x10	; 16
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	04 c0       	rjmp	.+8      	; 0x5134 <vfprintf+0x1d6>
    512c:	f4 e0       	ldi	r31, 0x04	; 4
    512e:	ff 2a       	or	r15, r31
    5130:	20 e1       	ldi	r18, 0x10	; 16
    5132:	32 e0       	ldi	r19, 0x02	; 2
    5134:	f7 fe       	sbrs	r15, 7
    5136:	08 c0       	rjmp	.+16     	; 0x5148 <vfprintf+0x1ea>
    5138:	f8 01       	movw	r30, r16
    513a:	60 81       	ld	r22, Z
    513c:	71 81       	ldd	r23, Z+1	; 0x01
    513e:	82 81       	ldd	r24, Z+2	; 0x02
    5140:	93 81       	ldd	r25, Z+3	; 0x03
    5142:	0c 5f       	subi	r16, 0xFC	; 252
    5144:	1f 4f       	sbci	r17, 0xFF	; 255
    5146:	07 c0       	rjmp	.+14     	; 0x5156 <vfprintf+0x1f8>
    5148:	f8 01       	movw	r30, r16
    514a:	60 81       	ld	r22, Z
    514c:	71 81       	ldd	r23, Z+1	; 0x01
    514e:	80 e0       	ldi	r24, 0x00	; 0
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	0e 5f       	subi	r16, 0xFE	; 254
    5154:	1f 4f       	sbci	r17, 0xFF	; 255
    5156:	a5 01       	movw	r20, r10
    5158:	0e 94 26 2a 	call	0x544c	; 0x544c <__ultoa_invert>
    515c:	e8 2e       	mov	r14, r24
    515e:	ea 18       	sub	r14, r10
    5160:	6f 2c       	mov	r6, r15
    5162:	77 24       	eor	r7, r7
    5164:	f6 fe       	sbrs	r15, 6
    5166:	05 c0       	rjmp	.+10     	; 0x5172 <vfprintf+0x214>
    5168:	8d e2       	ldi	r24, 0x2D	; 45
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	b6 01       	movw	r22, r12
    516e:	0e 94 ad 29 	call	0x535a	; 0x535a <fputc>
    5172:	64 fe       	sbrs	r6, 4
    5174:	15 c0       	rjmp	.+42     	; 0x51a0 <vfprintf+0x242>
    5176:	fe 01       	movw	r30, r28
    5178:	ee 0d       	add	r30, r14
    517a:	f1 1d       	adc	r31, r1
    517c:	80 81       	ld	r24, Z
    517e:	80 33       	cpi	r24, 0x30	; 48
    5180:	79 f0       	breq	.+30     	; 0x51a0 <vfprintf+0x242>
    5182:	80 e3       	ldi	r24, 0x30	; 48
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	b6 01       	movw	r22, r12
    5188:	0e 94 ad 29 	call	0x535a	; 0x535a <fputc>
    518c:	62 fe       	sbrs	r6, 2
    518e:	08 c0       	rjmp	.+16     	; 0x51a0 <vfprintf+0x242>
    5190:	c3 01       	movw	r24, r6
    5192:	80 72       	andi	r24, 0x20	; 32
    5194:	90 70       	andi	r25, 0x00	; 0
    5196:	88 5a       	subi	r24, 0xA8	; 168
    5198:	9f 4f       	sbci	r25, 0xFF	; 255
    519a:	b6 01       	movw	r22, r12
    519c:	0e 94 ad 29 	call	0x535a	; 0x535a <fputc>
    51a0:	ea 94       	dec	r14
    51a2:	f5 01       	movw	r30, r10
    51a4:	ee 0d       	add	r30, r14
    51a6:	f1 1d       	adc	r31, r1
    51a8:	80 81       	ld	r24, Z
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	b6 01       	movw	r22, r12
    51ae:	0e 94 ad 29 	call	0x535a	; 0x535a <fputc>
    51b2:	ee 20       	and	r14, r14
    51b4:	a9 f7       	brne	.-22     	; 0x51a0 <vfprintf+0x242>
    51b6:	fc ce       	rjmp	.-520    	; 0x4fb0 <vfprintf+0x52>
    51b8:	f6 01       	movw	r30, r12
    51ba:	26 81       	ldd	r18, Z+6	; 0x06
    51bc:	37 81       	ldd	r19, Z+7	; 0x07
    51be:	c9 01       	movw	r24, r18
    51c0:	2d 96       	adiw	r28, 0x0d	; 13
    51c2:	0f b6       	in	r0, 0x3f	; 63
    51c4:	f8 94       	cli
    51c6:	de bf       	out	0x3e, r29	; 62
    51c8:	0f be       	out	0x3f, r0	; 63
    51ca:	cd bf       	out	0x3d, r28	; 61
    51cc:	cf 91       	pop	r28
    51ce:	df 91       	pop	r29
    51d0:	1f 91       	pop	r17
    51d2:	0f 91       	pop	r16
    51d4:	ff 90       	pop	r15
    51d6:	ef 90       	pop	r14
    51d8:	df 90       	pop	r13
    51da:	cf 90       	pop	r12
    51dc:	bf 90       	pop	r11
    51de:	af 90       	pop	r10
    51e0:	9f 90       	pop	r9
    51e2:	8f 90       	pop	r8
    51e4:	7f 90       	pop	r7
    51e6:	6f 90       	pop	r6
    51e8:	08 95       	ret

000051ea <__mulsi3>:
    51ea:	62 9f       	mul	r22, r18
    51ec:	d0 01       	movw	r26, r0
    51ee:	73 9f       	mul	r23, r19
    51f0:	f0 01       	movw	r30, r0
    51f2:	82 9f       	mul	r24, r18
    51f4:	e0 0d       	add	r30, r0
    51f6:	f1 1d       	adc	r31, r1
    51f8:	64 9f       	mul	r22, r20
    51fa:	e0 0d       	add	r30, r0
    51fc:	f1 1d       	adc	r31, r1
    51fe:	92 9f       	mul	r25, r18
    5200:	f0 0d       	add	r31, r0
    5202:	83 9f       	mul	r24, r19
    5204:	f0 0d       	add	r31, r0
    5206:	74 9f       	mul	r23, r20
    5208:	f0 0d       	add	r31, r0
    520a:	65 9f       	mul	r22, r21
    520c:	f0 0d       	add	r31, r0
    520e:	99 27       	eor	r25, r25
    5210:	72 9f       	mul	r23, r18
    5212:	b0 0d       	add	r27, r0
    5214:	e1 1d       	adc	r30, r1
    5216:	f9 1f       	adc	r31, r25
    5218:	63 9f       	mul	r22, r19
    521a:	b0 0d       	add	r27, r0
    521c:	e1 1d       	adc	r30, r1
    521e:	f9 1f       	adc	r31, r25
    5220:	bd 01       	movw	r22, r26
    5222:	cf 01       	movw	r24, r30
    5224:	11 24       	eor	r1, r1
    5226:	08 95       	ret

00005228 <__udivmodqi4>:
    5228:	99 1b       	sub	r25, r25
    522a:	79 e0       	ldi	r23, 0x09	; 9
    522c:	04 c0       	rjmp	.+8      	; 0x5236 <__udivmodqi4_ep>

0000522e <__udivmodqi4_loop>:
    522e:	99 1f       	adc	r25, r25
    5230:	96 17       	cp	r25, r22
    5232:	08 f0       	brcs	.+2      	; 0x5236 <__udivmodqi4_ep>
    5234:	96 1b       	sub	r25, r22

00005236 <__udivmodqi4_ep>:
    5236:	88 1f       	adc	r24, r24
    5238:	7a 95       	dec	r23
    523a:	c9 f7       	brne	.-14     	; 0x522e <__udivmodqi4_loop>
    523c:	80 95       	com	r24
    523e:	08 95       	ret

00005240 <__udivmodhi4>:
    5240:	aa 1b       	sub	r26, r26
    5242:	bb 1b       	sub	r27, r27
    5244:	51 e1       	ldi	r21, 0x11	; 17
    5246:	07 c0       	rjmp	.+14     	; 0x5256 <__udivmodhi4_ep>

00005248 <__udivmodhi4_loop>:
    5248:	aa 1f       	adc	r26, r26
    524a:	bb 1f       	adc	r27, r27
    524c:	a6 17       	cp	r26, r22
    524e:	b7 07       	cpc	r27, r23
    5250:	10 f0       	brcs	.+4      	; 0x5256 <__udivmodhi4_ep>
    5252:	a6 1b       	sub	r26, r22
    5254:	b7 0b       	sbc	r27, r23

00005256 <__udivmodhi4_ep>:
    5256:	88 1f       	adc	r24, r24
    5258:	99 1f       	adc	r25, r25
    525a:	5a 95       	dec	r21
    525c:	a9 f7       	brne	.-22     	; 0x5248 <__udivmodhi4_loop>
    525e:	80 95       	com	r24
    5260:	90 95       	com	r25
    5262:	bc 01       	movw	r22, r24
    5264:	cd 01       	movw	r24, r26
    5266:	08 95       	ret

00005268 <__udivmodsi4>:
    5268:	a1 e2       	ldi	r26, 0x21	; 33
    526a:	1a 2e       	mov	r1, r26
    526c:	aa 1b       	sub	r26, r26
    526e:	bb 1b       	sub	r27, r27
    5270:	fd 01       	movw	r30, r26
    5272:	0d c0       	rjmp	.+26     	; 0x528e <__udivmodsi4_ep>

00005274 <__udivmodsi4_loop>:
    5274:	aa 1f       	adc	r26, r26
    5276:	bb 1f       	adc	r27, r27
    5278:	ee 1f       	adc	r30, r30
    527a:	ff 1f       	adc	r31, r31
    527c:	a2 17       	cp	r26, r18
    527e:	b3 07       	cpc	r27, r19
    5280:	e4 07       	cpc	r30, r20
    5282:	f5 07       	cpc	r31, r21
    5284:	20 f0       	brcs	.+8      	; 0x528e <__udivmodsi4_ep>
    5286:	a2 1b       	sub	r26, r18
    5288:	b3 0b       	sbc	r27, r19
    528a:	e4 0b       	sbc	r30, r20
    528c:	f5 0b       	sbc	r31, r21

0000528e <__udivmodsi4_ep>:
    528e:	66 1f       	adc	r22, r22
    5290:	77 1f       	adc	r23, r23
    5292:	88 1f       	adc	r24, r24
    5294:	99 1f       	adc	r25, r25
    5296:	1a 94       	dec	r1
    5298:	69 f7       	brne	.-38     	; 0x5274 <__udivmodsi4_loop>
    529a:	60 95       	com	r22
    529c:	70 95       	com	r23
    529e:	80 95       	com	r24
    52a0:	90 95       	com	r25
    52a2:	9b 01       	movw	r18, r22
    52a4:	ac 01       	movw	r20, r24
    52a6:	bd 01       	movw	r22, r26
    52a8:	cf 01       	movw	r24, r30
    52aa:	08 95       	ret

000052ac <strchr_P>:
    52ac:	fc 01       	movw	r30, r24
    52ae:	05 90       	lpm	r0, Z+
    52b0:	06 16       	cp	r0, r22
    52b2:	21 f0       	breq	.+8      	; 0x52bc <strchr_P+0x10>
    52b4:	00 20       	and	r0, r0
    52b6:	d9 f7       	brne	.-10     	; 0x52ae <strchr_P+0x2>
    52b8:	c0 01       	movw	r24, r0
    52ba:	08 95       	ret
    52bc:	31 97       	sbiw	r30, 0x01	; 1
    52be:	cf 01       	movw	r24, r30
    52c0:	08 95       	ret

000052c2 <fdevopen>:
    52c2:	0f 93       	push	r16
    52c4:	1f 93       	push	r17
    52c6:	cf 93       	push	r28
    52c8:	df 93       	push	r29
    52ca:	ec 01       	movw	r28, r24
    52cc:	8b 01       	movw	r16, r22
    52ce:	00 97       	sbiw	r24, 0x00	; 0
    52d0:	31 f4       	brne	.+12     	; 0x52de <fdevopen+0x1c>
    52d2:	61 15       	cp	r22, r1
    52d4:	71 05       	cpc	r23, r1
    52d6:	19 f4       	brne	.+6      	; 0x52de <fdevopen+0x1c>
    52d8:	20 e0       	ldi	r18, 0x00	; 0
    52da:	30 e0       	ldi	r19, 0x00	; 0
    52dc:	38 c0       	rjmp	.+112    	; 0x534e <fdevopen+0x8c>
    52de:	81 e0       	ldi	r24, 0x01	; 1
    52e0:	90 e0       	ldi	r25, 0x00	; 0
    52e2:	6e e0       	ldi	r22, 0x0E	; 14
    52e4:	70 e0       	ldi	r23, 0x00	; 0
    52e6:	0e 94 9a 2a 	call	0x5534	; 0x5534 <calloc>
    52ea:	fc 01       	movw	r30, r24
    52ec:	9c 01       	movw	r18, r24
    52ee:	00 97       	sbiw	r24, 0x00	; 0
    52f0:	71 f1       	breq	.+92     	; 0x534e <fdevopen+0x8c>
    52f2:	80 e8       	ldi	r24, 0x80	; 128
    52f4:	83 83       	std	Z+3, r24	; 0x03
    52f6:	01 15       	cp	r16, r1
    52f8:	11 05       	cpc	r17, r1
    52fa:	71 f0       	breq	.+28     	; 0x5318 <fdevopen+0x56>
    52fc:	13 87       	std	Z+11, r17	; 0x0b
    52fe:	02 87       	std	Z+10, r16	; 0x0a
    5300:	81 e8       	ldi	r24, 0x81	; 129
    5302:	83 83       	std	Z+3, r24	; 0x03
    5304:	80 91 aa 0b 	lds	r24, 0x0BAA
    5308:	90 91 ab 0b 	lds	r25, 0x0BAB
    530c:	00 97       	sbiw	r24, 0x00	; 0
    530e:	21 f4       	brne	.+8      	; 0x5318 <fdevopen+0x56>
    5310:	f0 93 ab 0b 	sts	0x0BAB, r31
    5314:	e0 93 aa 0b 	sts	0x0BAA, r30
    5318:	20 97       	sbiw	r28, 0x00	; 0
    531a:	c9 f0       	breq	.+50     	; 0x534e <fdevopen+0x8c>
    531c:	d1 87       	std	Z+9, r29	; 0x09
    531e:	c0 87       	std	Z+8, r28	; 0x08
    5320:	83 81       	ldd	r24, Z+3	; 0x03
    5322:	82 60       	ori	r24, 0x02	; 2
    5324:	83 83       	std	Z+3, r24	; 0x03
    5326:	80 91 ac 0b 	lds	r24, 0x0BAC
    532a:	90 91 ad 0b 	lds	r25, 0x0BAD
    532e:	00 97       	sbiw	r24, 0x00	; 0
    5330:	71 f4       	brne	.+28     	; 0x534e <fdevopen+0x8c>
    5332:	f0 93 ad 0b 	sts	0x0BAD, r31
    5336:	e0 93 ac 0b 	sts	0x0BAC, r30
    533a:	80 91 ae 0b 	lds	r24, 0x0BAE
    533e:	90 91 af 0b 	lds	r25, 0x0BAF
    5342:	00 97       	sbiw	r24, 0x00	; 0
    5344:	21 f4       	brne	.+8      	; 0x534e <fdevopen+0x8c>
    5346:	f0 93 af 0b 	sts	0x0BAF, r31
    534a:	e0 93 ae 0b 	sts	0x0BAE, r30
    534e:	c9 01       	movw	r24, r18
    5350:	df 91       	pop	r29
    5352:	cf 91       	pop	r28
    5354:	1f 91       	pop	r17
    5356:	0f 91       	pop	r16
    5358:	08 95       	ret

0000535a <fputc>:
    535a:	0f 93       	push	r16
    535c:	1f 93       	push	r17
    535e:	cf 93       	push	r28
    5360:	df 93       	push	r29
    5362:	8c 01       	movw	r16, r24
    5364:	eb 01       	movw	r28, r22
    5366:	8b 81       	ldd	r24, Y+3	; 0x03
    5368:	81 ff       	sbrs	r24, 1
    536a:	1b c0       	rjmp	.+54     	; 0x53a2 <fputc+0x48>
    536c:	82 ff       	sbrs	r24, 2
    536e:	0d c0       	rjmp	.+26     	; 0x538a <fputc+0x30>
    5370:	2e 81       	ldd	r18, Y+6	; 0x06
    5372:	3f 81       	ldd	r19, Y+7	; 0x07
    5374:	8c 81       	ldd	r24, Y+4	; 0x04
    5376:	9d 81       	ldd	r25, Y+5	; 0x05
    5378:	28 17       	cp	r18, r24
    537a:	39 07       	cpc	r19, r25
    537c:	64 f4       	brge	.+24     	; 0x5396 <fputc+0x3c>
    537e:	e8 81       	ld	r30, Y
    5380:	f9 81       	ldd	r31, Y+1	; 0x01
    5382:	01 93       	st	Z+, r16
    5384:	f9 83       	std	Y+1, r31	; 0x01
    5386:	e8 83       	st	Y, r30
    5388:	06 c0       	rjmp	.+12     	; 0x5396 <fputc+0x3c>
    538a:	e8 85       	ldd	r30, Y+8	; 0x08
    538c:	f9 85       	ldd	r31, Y+9	; 0x09
    538e:	80 2f       	mov	r24, r16
    5390:	09 95       	icall
    5392:	00 97       	sbiw	r24, 0x00	; 0
    5394:	31 f4       	brne	.+12     	; 0x53a2 <fputc+0x48>
    5396:	8e 81       	ldd	r24, Y+6	; 0x06
    5398:	9f 81       	ldd	r25, Y+7	; 0x07
    539a:	01 96       	adiw	r24, 0x01	; 1
    539c:	9f 83       	std	Y+7, r25	; 0x07
    539e:	8e 83       	std	Y+6, r24	; 0x06
    53a0:	02 c0       	rjmp	.+4      	; 0x53a6 <fputc+0x4c>
    53a2:	0f ef       	ldi	r16, 0xFF	; 255
    53a4:	1f ef       	ldi	r17, 0xFF	; 255
    53a6:	c8 01       	movw	r24, r16
    53a8:	df 91       	pop	r29
    53aa:	cf 91       	pop	r28
    53ac:	1f 91       	pop	r17
    53ae:	0f 91       	pop	r16
    53b0:	08 95       	ret

000053b2 <printf>:
    53b2:	df 93       	push	r29
    53b4:	cf 93       	push	r28
    53b6:	cd b7       	in	r28, 0x3d	; 61
    53b8:	de b7       	in	r29, 0x3e	; 62
    53ba:	fe 01       	movw	r30, r28
    53bc:	35 96       	adiw	r30, 0x05	; 5
    53be:	61 91       	ld	r22, Z+
    53c0:	71 91       	ld	r23, Z+
    53c2:	80 91 ac 0b 	lds	r24, 0x0BAC
    53c6:	90 91 ad 0b 	lds	r25, 0x0BAD
    53ca:	af 01       	movw	r20, r30
    53cc:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <vfprintf>
    53d0:	cf 91       	pop	r28
    53d2:	df 91       	pop	r29
    53d4:	08 95       	ret

000053d6 <puts>:
    53d6:	ef 92       	push	r14
    53d8:	ff 92       	push	r15
    53da:	0f 93       	push	r16
    53dc:	1f 93       	push	r17
    53de:	cf 93       	push	r28
    53e0:	df 93       	push	r29
    53e2:	8c 01       	movw	r16, r24
    53e4:	e0 91 ac 0b 	lds	r30, 0x0BAC
    53e8:	f0 91 ad 0b 	lds	r31, 0x0BAD
    53ec:	83 81       	ldd	r24, Z+3	; 0x03
    53ee:	81 ff       	sbrs	r24, 1
    53f0:	23 c0       	rjmp	.+70     	; 0x5438 <puts+0x62>
    53f2:	c0 e0       	ldi	r28, 0x00	; 0
    53f4:	d0 e0       	ldi	r29, 0x00	; 0
    53f6:	0e c0       	rjmp	.+28     	; 0x5414 <puts+0x3e>
    53f8:	60 91 ac 0b 	lds	r22, 0x0BAC
    53fc:	70 91 ad 0b 	lds	r23, 0x0BAD
    5400:	db 01       	movw	r26, r22
    5402:	18 96       	adiw	r26, 0x08	; 8
    5404:	ed 91       	ld	r30, X+
    5406:	fc 91       	ld	r31, X
    5408:	19 97       	sbiw	r26, 0x09	; 9
    540a:	09 95       	icall
    540c:	00 97       	sbiw	r24, 0x00	; 0
    540e:	11 f0       	breq	.+4      	; 0x5414 <puts+0x3e>
    5410:	cf ef       	ldi	r28, 0xFF	; 255
    5412:	df ef       	ldi	r29, 0xFF	; 255
    5414:	f8 01       	movw	r30, r16
    5416:	81 91       	ld	r24, Z+
    5418:	8f 01       	movw	r16, r30
    541a:	88 23       	and	r24, r24
    541c:	69 f7       	brne	.-38     	; 0x53f8 <puts+0x22>
    541e:	60 91 ac 0b 	lds	r22, 0x0BAC
    5422:	70 91 ad 0b 	lds	r23, 0x0BAD
    5426:	db 01       	movw	r26, r22
    5428:	18 96       	adiw	r26, 0x08	; 8
    542a:	ed 91       	ld	r30, X+
    542c:	fc 91       	ld	r31, X
    542e:	19 97       	sbiw	r26, 0x09	; 9
    5430:	8a e0       	ldi	r24, 0x0A	; 10
    5432:	09 95       	icall
    5434:	00 97       	sbiw	r24, 0x00	; 0
    5436:	11 f0       	breq	.+4      	; 0x543c <puts+0x66>
    5438:	cf ef       	ldi	r28, 0xFF	; 255
    543a:	df ef       	ldi	r29, 0xFF	; 255
    543c:	ce 01       	movw	r24, r28
    543e:	df 91       	pop	r29
    5440:	cf 91       	pop	r28
    5442:	1f 91       	pop	r17
    5444:	0f 91       	pop	r16
    5446:	ff 90       	pop	r15
    5448:	ef 90       	pop	r14
    544a:	08 95       	ret

0000544c <__ultoa_invert>:
    544c:	fa 01       	movw	r30, r20
    544e:	aa 27       	eor	r26, r26
    5450:	28 30       	cpi	r18, 0x08	; 8
    5452:	51 f1       	breq	.+84     	; 0x54a8 <__ultoa_invert+0x5c>
    5454:	20 31       	cpi	r18, 0x10	; 16
    5456:	81 f1       	breq	.+96     	; 0x54b8 <__ultoa_invert+0x6c>
    5458:	e8 94       	clt
    545a:	6f 93       	push	r22
    545c:	6e 7f       	andi	r22, 0xFE	; 254
    545e:	6e 5f       	subi	r22, 0xFE	; 254
    5460:	7f 4f       	sbci	r23, 0xFF	; 255
    5462:	8f 4f       	sbci	r24, 0xFF	; 255
    5464:	9f 4f       	sbci	r25, 0xFF	; 255
    5466:	af 4f       	sbci	r26, 0xFF	; 255
    5468:	b1 e0       	ldi	r27, 0x01	; 1
    546a:	3e d0       	rcall	.+124    	; 0x54e8 <__ultoa_invert+0x9c>
    546c:	b4 e0       	ldi	r27, 0x04	; 4
    546e:	3c d0       	rcall	.+120    	; 0x54e8 <__ultoa_invert+0x9c>
    5470:	67 0f       	add	r22, r23
    5472:	78 1f       	adc	r23, r24
    5474:	89 1f       	adc	r24, r25
    5476:	9a 1f       	adc	r25, r26
    5478:	a1 1d       	adc	r26, r1
    547a:	68 0f       	add	r22, r24
    547c:	79 1f       	adc	r23, r25
    547e:	8a 1f       	adc	r24, r26
    5480:	91 1d       	adc	r25, r1
    5482:	a1 1d       	adc	r26, r1
    5484:	6a 0f       	add	r22, r26
    5486:	71 1d       	adc	r23, r1
    5488:	81 1d       	adc	r24, r1
    548a:	91 1d       	adc	r25, r1
    548c:	a1 1d       	adc	r26, r1
    548e:	20 d0       	rcall	.+64     	; 0x54d0 <__ultoa_invert+0x84>
    5490:	09 f4       	brne	.+2      	; 0x5494 <__ultoa_invert+0x48>
    5492:	68 94       	set
    5494:	3f 91       	pop	r19
    5496:	2a e0       	ldi	r18, 0x0A	; 10
    5498:	26 9f       	mul	r18, r22
    549a:	11 24       	eor	r1, r1
    549c:	30 19       	sub	r19, r0
    549e:	30 5d       	subi	r19, 0xD0	; 208
    54a0:	31 93       	st	Z+, r19
    54a2:	de f6       	brtc	.-74     	; 0x545a <__ultoa_invert+0xe>
    54a4:	cf 01       	movw	r24, r30
    54a6:	08 95       	ret
    54a8:	46 2f       	mov	r20, r22
    54aa:	47 70       	andi	r20, 0x07	; 7
    54ac:	40 5d       	subi	r20, 0xD0	; 208
    54ae:	41 93       	st	Z+, r20
    54b0:	b3 e0       	ldi	r27, 0x03	; 3
    54b2:	0f d0       	rcall	.+30     	; 0x54d2 <__ultoa_invert+0x86>
    54b4:	c9 f7       	brne	.-14     	; 0x54a8 <__ultoa_invert+0x5c>
    54b6:	f6 cf       	rjmp	.-20     	; 0x54a4 <__ultoa_invert+0x58>
    54b8:	46 2f       	mov	r20, r22
    54ba:	4f 70       	andi	r20, 0x0F	; 15
    54bc:	40 5d       	subi	r20, 0xD0	; 208
    54be:	4a 33       	cpi	r20, 0x3A	; 58
    54c0:	18 f0       	brcs	.+6      	; 0x54c8 <__ultoa_invert+0x7c>
    54c2:	49 5d       	subi	r20, 0xD9	; 217
    54c4:	31 fd       	sbrc	r19, 1
    54c6:	40 52       	subi	r20, 0x20	; 32
    54c8:	41 93       	st	Z+, r20
    54ca:	02 d0       	rcall	.+4      	; 0x54d0 <__ultoa_invert+0x84>
    54cc:	a9 f7       	brne	.-22     	; 0x54b8 <__ultoa_invert+0x6c>
    54ce:	ea cf       	rjmp	.-44     	; 0x54a4 <__ultoa_invert+0x58>
    54d0:	b4 e0       	ldi	r27, 0x04	; 4
    54d2:	a6 95       	lsr	r26
    54d4:	97 95       	ror	r25
    54d6:	87 95       	ror	r24
    54d8:	77 95       	ror	r23
    54da:	67 95       	ror	r22
    54dc:	ba 95       	dec	r27
    54de:	c9 f7       	brne	.-14     	; 0x54d2 <__ultoa_invert+0x86>
    54e0:	00 97       	sbiw	r24, 0x00	; 0
    54e2:	61 05       	cpc	r22, r1
    54e4:	71 05       	cpc	r23, r1
    54e6:	08 95       	ret
    54e8:	9b 01       	movw	r18, r22
    54ea:	ac 01       	movw	r20, r24
    54ec:	0a 2e       	mov	r0, r26
    54ee:	06 94       	lsr	r0
    54f0:	57 95       	ror	r21
    54f2:	47 95       	ror	r20
    54f4:	37 95       	ror	r19
    54f6:	27 95       	ror	r18
    54f8:	ba 95       	dec	r27
    54fa:	c9 f7       	brne	.-14     	; 0x54ee <__ultoa_invert+0xa2>
    54fc:	62 0f       	add	r22, r18
    54fe:	73 1f       	adc	r23, r19
    5500:	84 1f       	adc	r24, r20
    5502:	95 1f       	adc	r25, r21
    5504:	a0 1d       	adc	r26, r0
    5506:	08 95       	ret

00005508 <__eerd_byte_m1281>:
    5508:	f9 99       	sbic	0x1f, 1	; 31
    550a:	fe cf       	rjmp	.-4      	; 0x5508 <__eerd_byte_m1281>
    550c:	92 bd       	out	0x22, r25	; 34
    550e:	81 bd       	out	0x21, r24	; 33
    5510:	f8 9a       	sbi	0x1f, 0	; 31
    5512:	99 27       	eor	r25, r25
    5514:	80 b5       	in	r24, 0x20	; 32
    5516:	08 95       	ret

00005518 <__eewr_byte_m1281>:
    5518:	26 2f       	mov	r18, r22

0000551a <__eewr_r18_m1281>:
    551a:	f9 99       	sbic	0x1f, 1	; 31
    551c:	fe cf       	rjmp	.-4      	; 0x551a <__eewr_r18_m1281>
    551e:	1f ba       	out	0x1f, r1	; 31
    5520:	92 bd       	out	0x22, r25	; 34
    5522:	81 bd       	out	0x21, r24	; 33
    5524:	20 bd       	out	0x20, r18	; 32
    5526:	0f b6       	in	r0, 0x3f	; 63
    5528:	f8 94       	cli
    552a:	fa 9a       	sbi	0x1f, 2	; 31
    552c:	f9 9a       	sbi	0x1f, 1	; 31
    552e:	0f be       	out	0x3f, r0	; 63
    5530:	01 96       	adiw	r24, 0x01	; 1
    5532:	08 95       	ret

00005534 <calloc>:
    5534:	ef 92       	push	r14
    5536:	ff 92       	push	r15
    5538:	0f 93       	push	r16
    553a:	1f 93       	push	r17
    553c:	cf 93       	push	r28
    553e:	df 93       	push	r29
    5540:	68 9f       	mul	r22, r24
    5542:	80 01       	movw	r16, r0
    5544:	69 9f       	mul	r22, r25
    5546:	10 0d       	add	r17, r0
    5548:	78 9f       	mul	r23, r24
    554a:	10 0d       	add	r17, r0
    554c:	11 24       	eor	r1, r1
    554e:	c8 01       	movw	r24, r16
    5550:	0e 94 c0 2a 	call	0x5580	; 0x5580 <malloc>
    5554:	e8 2e       	mov	r14, r24
    5556:	e7 01       	movw	r28, r14
    5558:	7e 01       	movw	r14, r28
    555a:	f9 2e       	mov	r15, r25
    555c:	e7 01       	movw	r28, r14
    555e:	e1 14       	cp	r14, r1
    5560:	f1 04       	cpc	r15, r1
    5562:	31 f0       	breq	.+12     	; 0x5570 <calloc+0x3c>
    5564:	8e 2d       	mov	r24, r14
    5566:	60 e0       	ldi	r22, 0x00	; 0
    5568:	70 e0       	ldi	r23, 0x00	; 0
    556a:	a8 01       	movw	r20, r16
    556c:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <memset>
    5570:	ce 01       	movw	r24, r28
    5572:	df 91       	pop	r29
    5574:	cf 91       	pop	r28
    5576:	1f 91       	pop	r17
    5578:	0f 91       	pop	r16
    557a:	ff 90       	pop	r15
    557c:	ef 90       	pop	r14
    557e:	08 95       	ret

00005580 <malloc>:
    5580:	ef 92       	push	r14
    5582:	ff 92       	push	r15
    5584:	0f 93       	push	r16
    5586:	1f 93       	push	r17
    5588:	cf 93       	push	r28
    558a:	df 93       	push	r29
    558c:	82 30       	cpi	r24, 0x02	; 2
    558e:	91 05       	cpc	r25, r1
    5590:	10 f4       	brcc	.+4      	; 0x5596 <malloc+0x16>
    5592:	82 e0       	ldi	r24, 0x02	; 2
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	c0 91 b2 0b 	lds	r28, 0x0BB2
    559a:	d0 91 b3 0b 	lds	r29, 0x0BB3
    559e:	40 e0       	ldi	r20, 0x00	; 0
    55a0:	50 e0       	ldi	r21, 0x00	; 0
    55a2:	20 e0       	ldi	r18, 0x00	; 0
    55a4:	30 e0       	ldi	r19, 0x00	; 0
    55a6:	28 c0       	rjmp	.+80     	; 0x55f8 <malloc+0x78>
    55a8:	68 81       	ld	r22, Y
    55aa:	79 81       	ldd	r23, Y+1	; 0x01
    55ac:	68 17       	cp	r22, r24
    55ae:	79 07       	cpc	r23, r25
    55b0:	d8 f0       	brcs	.+54     	; 0x55e8 <malloc+0x68>
    55b2:	68 17       	cp	r22, r24
    55b4:	79 07       	cpc	r23, r25
    55b6:	79 f4       	brne	.+30     	; 0x55d6 <malloc+0x56>
    55b8:	8a 81       	ldd	r24, Y+2	; 0x02
    55ba:	9b 81       	ldd	r25, Y+3	; 0x03
    55bc:	21 15       	cp	r18, r1
    55be:	31 05       	cpc	r19, r1
    55c0:	21 f0       	breq	.+8      	; 0x55ca <malloc+0x4a>
    55c2:	f9 01       	movw	r30, r18
    55c4:	93 83       	std	Z+3, r25	; 0x03
    55c6:	82 83       	std	Z+2, r24	; 0x02
    55c8:	04 c0       	rjmp	.+8      	; 0x55d2 <malloc+0x52>
    55ca:	90 93 b3 0b 	sts	0x0BB3, r25
    55ce:	80 93 b2 0b 	sts	0x0BB2, r24
    55d2:	de 01       	movw	r26, r28
    55d4:	29 c0       	rjmp	.+82     	; 0x5628 <malloc+0xa8>
    55d6:	41 15       	cp	r20, r1
    55d8:	51 05       	cpc	r21, r1
    55da:	19 f0       	breq	.+6      	; 0x55e2 <malloc+0x62>
    55dc:	64 17       	cp	r22, r20
    55de:	75 07       	cpc	r23, r21
    55e0:	18 f4       	brcc	.+6      	; 0x55e8 <malloc+0x68>
    55e2:	ab 01       	movw	r20, r22
    55e4:	d9 01       	movw	r26, r18
    55e6:	fe 01       	movw	r30, r28
    55e8:	9e 01       	movw	r18, r28
    55ea:	7a 81       	ldd	r23, Y+2	; 0x02
    55ec:	6b 81       	ldd	r22, Y+3	; 0x03
    55ee:	e7 2e       	mov	r14, r23
    55f0:	e7 01       	movw	r28, r14
    55f2:	7e 01       	movw	r14, r28
    55f4:	f6 2e       	mov	r15, r22
    55f6:	e7 01       	movw	r28, r14
    55f8:	20 97       	sbiw	r28, 0x00	; 0
    55fa:	b1 f6       	brne	.-84     	; 0x55a8 <malloc+0x28>
    55fc:	41 15       	cp	r20, r1
    55fe:	51 05       	cpc	r21, r1
    5600:	f9 f0       	breq	.+62     	; 0x5640 <malloc+0xc0>
    5602:	48 1b       	sub	r20, r24
    5604:	59 0b       	sbc	r21, r25
    5606:	44 30       	cpi	r20, 0x04	; 4
    5608:	51 05       	cpc	r21, r1
    560a:	80 f4       	brcc	.+32     	; 0x562c <malloc+0xac>
    560c:	82 81       	ldd	r24, Z+2	; 0x02
    560e:	93 81       	ldd	r25, Z+3	; 0x03
    5610:	10 97       	sbiw	r26, 0x00	; 0
    5612:	29 f0       	breq	.+10     	; 0x561e <malloc+0x9e>
    5614:	13 96       	adiw	r26, 0x03	; 3
    5616:	9c 93       	st	X, r25
    5618:	8e 93       	st	-X, r24
    561a:	12 97       	sbiw	r26, 0x02	; 2
    561c:	04 c0       	rjmp	.+8      	; 0x5626 <malloc+0xa6>
    561e:	90 93 b3 0b 	sts	0x0BB3, r25
    5622:	80 93 b2 0b 	sts	0x0BB2, r24
    5626:	df 01       	movw	r26, r30
    5628:	12 96       	adiw	r26, 0x02	; 2
    562a:	45 c0       	rjmp	.+138    	; 0x56b6 <malloc+0x136>
    562c:	df 01       	movw	r26, r30
    562e:	a4 0f       	add	r26, r20
    5630:	b5 1f       	adc	r27, r21
    5632:	8d 93       	st	X+, r24
    5634:	9d 93       	st	X+, r25
    5636:	42 50       	subi	r20, 0x02	; 2
    5638:	50 40       	sbci	r21, 0x00	; 0
    563a:	51 83       	std	Z+1, r21	; 0x01
    563c:	40 83       	st	Z, r20
    563e:	3b c0       	rjmp	.+118    	; 0x56b6 <malloc+0x136>
    5640:	20 91 b0 0b 	lds	r18, 0x0BB0
    5644:	30 91 b1 0b 	lds	r19, 0x0BB1
    5648:	21 15       	cp	r18, r1
    564a:	31 05       	cpc	r19, r1
    564c:	41 f4       	brne	.+16     	; 0x565e <malloc+0xde>
    564e:	20 91 5f 03 	lds	r18, 0x035F
    5652:	30 91 60 03 	lds	r19, 0x0360
    5656:	30 93 b1 0b 	sts	0x0BB1, r19
    565a:	20 93 b0 0b 	sts	0x0BB0, r18
    565e:	20 91 61 03 	lds	r18, 0x0361
    5662:	30 91 62 03 	lds	r19, 0x0362
    5666:	21 15       	cp	r18, r1
    5668:	31 05       	cpc	r19, r1
    566a:	41 f4       	brne	.+16     	; 0x567c <malloc+0xfc>
    566c:	2d b7       	in	r18, 0x3d	; 61
    566e:	3e b7       	in	r19, 0x3e	; 62
    5670:	40 91 5d 03 	lds	r20, 0x035D
    5674:	50 91 5e 03 	lds	r21, 0x035E
    5678:	24 1b       	sub	r18, r20
    567a:	35 0b       	sbc	r19, r21
    567c:	a0 91 b0 0b 	lds	r26, 0x0BB0
    5680:	b0 91 b1 0b 	lds	r27, 0x0BB1
    5684:	a2 17       	cp	r26, r18
    5686:	b3 07       	cpc	r27, r19
    5688:	a0 f4       	brcc	.+40     	; 0x56b2 <malloc+0x132>
    568a:	2a 1b       	sub	r18, r26
    568c:	3b 0b       	sbc	r19, r27
    568e:	28 17       	cp	r18, r24
    5690:	39 07       	cpc	r19, r25
    5692:	78 f0       	brcs	.+30     	; 0x56b2 <malloc+0x132>
    5694:	ac 01       	movw	r20, r24
    5696:	4e 5f       	subi	r20, 0xFE	; 254
    5698:	5f 4f       	sbci	r21, 0xFF	; 255
    569a:	24 17       	cp	r18, r20
    569c:	35 07       	cpc	r19, r21
    569e:	48 f0       	brcs	.+18     	; 0x56b2 <malloc+0x132>
    56a0:	4a 0f       	add	r20, r26
    56a2:	5b 1f       	adc	r21, r27
    56a4:	50 93 b1 0b 	sts	0x0BB1, r21
    56a8:	40 93 b0 0b 	sts	0x0BB0, r20
    56ac:	8d 93       	st	X+, r24
    56ae:	9d 93       	st	X+, r25
    56b0:	02 c0       	rjmp	.+4      	; 0x56b6 <malloc+0x136>
    56b2:	a0 e0       	ldi	r26, 0x00	; 0
    56b4:	b0 e0       	ldi	r27, 0x00	; 0
    56b6:	cd 01       	movw	r24, r26
    56b8:	df 91       	pop	r29
    56ba:	cf 91       	pop	r28
    56bc:	1f 91       	pop	r17
    56be:	0f 91       	pop	r16
    56c0:	ff 90       	pop	r15
    56c2:	ef 90       	pop	r14
    56c4:	08 95       	ret

000056c6 <free>:
    56c6:	cf 93       	push	r28
    56c8:	df 93       	push	r29
    56ca:	00 97       	sbiw	r24, 0x00	; 0
    56cc:	09 f4       	brne	.+2      	; 0x56d0 <free+0xa>
    56ce:	8f c0       	rjmp	.+286    	; 0x57ee <free+0x128>
    56d0:	fc 01       	movw	r30, r24
    56d2:	32 97       	sbiw	r30, 0x02	; 2
    56d4:	13 82       	std	Z+3, r1	; 0x03
    56d6:	12 82       	std	Z+2, r1	; 0x02
    56d8:	60 91 b2 0b 	lds	r22, 0x0BB2
    56dc:	70 91 b3 0b 	lds	r23, 0x0BB3
    56e0:	61 15       	cp	r22, r1
    56e2:	71 05       	cpc	r23, r1
    56e4:	81 f4       	brne	.+32     	; 0x5706 <free+0x40>
    56e6:	20 81       	ld	r18, Z
    56e8:	31 81       	ldd	r19, Z+1	; 0x01
    56ea:	28 0f       	add	r18, r24
    56ec:	39 1f       	adc	r19, r25
    56ee:	80 91 b0 0b 	lds	r24, 0x0BB0
    56f2:	90 91 b1 0b 	lds	r25, 0x0BB1
    56f6:	82 17       	cp	r24, r18
    56f8:	93 07       	cpc	r25, r19
    56fa:	61 f5       	brne	.+88     	; 0x5754 <free+0x8e>
    56fc:	f0 93 b1 0b 	sts	0x0BB1, r31
    5700:	e0 93 b0 0b 	sts	0x0BB0, r30
    5704:	74 c0       	rjmp	.+232    	; 0x57ee <free+0x128>
    5706:	eb 01       	movw	r28, r22
    5708:	80 e0       	ldi	r24, 0x00	; 0
    570a:	90 e0       	ldi	r25, 0x00	; 0
    570c:	ce 17       	cp	r28, r30
    570e:	df 07       	cpc	r29, r31
    5710:	40 f4       	brcc	.+16     	; 0x5722 <free+0x5c>
    5712:	2a 81       	ldd	r18, Y+2	; 0x02
    5714:	3b 81       	ldd	r19, Y+3	; 0x03
    5716:	ce 01       	movw	r24, r28
    5718:	21 15       	cp	r18, r1
    571a:	31 05       	cpc	r19, r1
    571c:	01 f1       	breq	.+64     	; 0x575e <free+0x98>
    571e:	e9 01       	movw	r28, r18
    5720:	f5 cf       	rjmp	.-22     	; 0x570c <free+0x46>
    5722:	d3 83       	std	Z+3, r29	; 0x03
    5724:	c2 83       	std	Z+2, r28	; 0x02
    5726:	df 01       	movw	r26, r30
    5728:	4d 91       	ld	r20, X+
    572a:	5d 91       	ld	r21, X+
    572c:	9d 01       	movw	r18, r26
    572e:	24 0f       	add	r18, r20
    5730:	35 1f       	adc	r19, r21
    5732:	c2 17       	cp	r28, r18
    5734:	d3 07       	cpc	r29, r19
    5736:	61 f4       	brne	.+24     	; 0x5750 <free+0x8a>
    5738:	28 81       	ld	r18, Y
    573a:	39 81       	ldd	r19, Y+1	; 0x01
    573c:	24 0f       	add	r18, r20
    573e:	35 1f       	adc	r19, r21
    5740:	2e 5f       	subi	r18, 0xFE	; 254
    5742:	3f 4f       	sbci	r19, 0xFF	; 255
    5744:	31 83       	std	Z+1, r19	; 0x01
    5746:	20 83       	st	Z, r18
    5748:	2a 81       	ldd	r18, Y+2	; 0x02
    574a:	3b 81       	ldd	r19, Y+3	; 0x03
    574c:	33 83       	std	Z+3, r19	; 0x03
    574e:	22 83       	std	Z+2, r18	; 0x02
    5750:	00 97       	sbiw	r24, 0x00	; 0
    5752:	29 f4       	brne	.+10     	; 0x575e <free+0x98>
    5754:	f0 93 b3 0b 	sts	0x0BB3, r31
    5758:	e0 93 b2 0b 	sts	0x0BB2, r30
    575c:	48 c0       	rjmp	.+144    	; 0x57ee <free+0x128>
    575e:	dc 01       	movw	r26, r24
    5760:	13 96       	adiw	r26, 0x03	; 3
    5762:	fc 93       	st	X, r31
    5764:	ee 93       	st	-X, r30
    5766:	12 97       	sbiw	r26, 0x02	; 2
    5768:	ec 01       	movw	r28, r24
    576a:	49 91       	ld	r20, Y+
    576c:	59 91       	ld	r21, Y+
    576e:	c4 0f       	add	r28, r20
    5770:	d5 1f       	adc	r29, r21
    5772:	ec 17       	cp	r30, r28
    5774:	fd 07       	cpc	r31, r29
    5776:	79 f4       	brne	.+30     	; 0x5796 <free+0xd0>
    5778:	20 81       	ld	r18, Z
    577a:	31 81       	ldd	r19, Z+1	; 0x01
    577c:	24 0f       	add	r18, r20
    577e:	35 1f       	adc	r19, r21
    5780:	2e 5f       	subi	r18, 0xFE	; 254
    5782:	3f 4f       	sbci	r19, 0xFF	; 255
    5784:	11 96       	adiw	r26, 0x01	; 1
    5786:	3c 93       	st	X, r19
    5788:	2e 93       	st	-X, r18
    578a:	22 81       	ldd	r18, Z+2	; 0x02
    578c:	33 81       	ldd	r19, Z+3	; 0x03
    578e:	13 96       	adiw	r26, 0x03	; 3
    5790:	3c 93       	st	X, r19
    5792:	2e 93       	st	-X, r18
    5794:	12 97       	sbiw	r26, 0x02	; 2
    5796:	e0 e0       	ldi	r30, 0x00	; 0
    5798:	f0 e0       	ldi	r31, 0x00	; 0
    579a:	db 01       	movw	r26, r22
    579c:	12 96       	adiw	r26, 0x02	; 2
    579e:	8d 91       	ld	r24, X+
    57a0:	9c 91       	ld	r25, X
    57a2:	13 97       	sbiw	r26, 0x03	; 3
    57a4:	00 97       	sbiw	r24, 0x00	; 0
    57a6:	21 f0       	breq	.+8      	; 0x57b0 <free+0xea>
    57a8:	e6 2f       	mov	r30, r22
    57aa:	f7 2f       	mov	r31, r23
    57ac:	bc 01       	movw	r22, r24
    57ae:	f5 cf       	rjmp	.-22     	; 0x579a <free+0xd4>
    57b0:	9b 01       	movw	r18, r22
    57b2:	2e 5f       	subi	r18, 0xFE	; 254
    57b4:	3f 4f       	sbci	r19, 0xFF	; 255
    57b6:	db 01       	movw	r26, r22
    57b8:	8d 91       	ld	r24, X+
    57ba:	9c 91       	ld	r25, X
    57bc:	11 97       	sbiw	r26, 0x01	; 1
    57be:	82 0f       	add	r24, r18
    57c0:	93 1f       	adc	r25, r19
    57c2:	40 91 b0 0b 	lds	r20, 0x0BB0
    57c6:	50 91 b1 0b 	lds	r21, 0x0BB1
    57ca:	48 17       	cp	r20, r24
    57cc:	59 07       	cpc	r21, r25
    57ce:	79 f4       	brne	.+30     	; 0x57ee <free+0x128>
    57d0:	30 97       	sbiw	r30, 0x00	; 0
    57d2:	29 f4       	brne	.+10     	; 0x57de <free+0x118>
    57d4:	10 92 b3 0b 	sts	0x0BB3, r1
    57d8:	10 92 b2 0b 	sts	0x0BB2, r1
    57dc:	02 c0       	rjmp	.+4      	; 0x57e2 <free+0x11c>
    57de:	13 82       	std	Z+3, r1	; 0x03
    57e0:	12 82       	std	Z+2, r1	; 0x02
    57e2:	22 50       	subi	r18, 0x02	; 2
    57e4:	30 40       	sbci	r19, 0x00	; 0
    57e6:	30 93 b1 0b 	sts	0x0BB1, r19
    57ea:	20 93 b0 0b 	sts	0x0BB0, r18
    57ee:	df 91       	pop	r29
    57f0:	cf 91       	pop	r28
    57f2:	08 95       	ret

000057f4 <memset>:
    57f4:	dc 01       	movw	r26, r24
    57f6:	01 c0       	rjmp	.+2      	; 0x57fa <memset+0x6>
    57f8:	6d 93       	st	X+, r22
    57fa:	41 50       	subi	r20, 0x01	; 1
    57fc:	50 40       	sbci	r21, 0x00	; 0
    57fe:	e0 f7       	brcc	.-8      	; 0x57f8 <memset+0x4>
    5800:	08 95       	ret

00005802 <_exit>:
    5802:	f8 94       	cli

00005804 <__stop_program>:
    5804:	ff cf       	rjmp	.-2      	; 0x5804 <__stop_program>
