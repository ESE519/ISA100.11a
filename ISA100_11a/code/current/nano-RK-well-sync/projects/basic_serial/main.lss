
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800200  000051e8  0000527c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000051e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000625  008002ca  008002ca  00005346  2**0
                  ALLOC
  3 .stab         0000d608  00000000  00000000  00005348  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004f20  00000000  00000000  00012950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8a 01 	jmp	0x314	; 0x314 <__ctors_end>
       4:	0c 94 24 23 	jmp	0x4648	; 0x4648 <__vector_1>
       8:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
       c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      10:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      14:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      18:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      1c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      20:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      24:	0c 94 56 23 	jmp	0x46ac	; 0x46ac <__vector_9>
      28:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      2c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      30:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      34:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__vector_13>
      38:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      3c:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__vector_13>
      40:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      44:	0c 94 bb 21 	jmp	0x4376	; 0x4376 <__vector_17>
      48:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      4c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      50:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      54:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      58:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      5c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      60:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      64:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      68:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      6c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      70:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      74:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      78:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      7c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      80:	0c 94 c5 21 	jmp	0x438a	; 0x438a <__vector_32>
      84:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      88:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      8c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      90:	0c 94 86 10 	jmp	0x210c	; 0x210c <__vector_36>
      94:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      98:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      9c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      a0:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      a4:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      a8:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      ac:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      b0:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      b4:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      b8:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      bc:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      c0:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      c4:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      c8:	0c 94 a9 01 	jmp	0x352	; 0x352 <__bad_interrupt>
      cc:	77 13       	cpse	r23, r23
      ce:	7d 13       	cpse	r23, r29
      d0:	80 13       	cpse	r24, r16
      d2:	83 13       	cpse	r24, r19
      d4:	86 13       	cpse	r24, r22
      d6:	89 13       	cpse	r24, r25
      d8:	8f 13       	cpse	r24, r31
      da:	8c 13       	cpse	r24, r28
      dc:	92 13       	cpse	r25, r18
      de:	95 13       	cpse	r25, r21
      e0:	98 13       	cpse	r25, r24
      e2:	9e 13       	cpse	r25, r30
      e4:	a1 13       	cpse	r26, r17
      e6:	a4 13       	cpse	r26, r20
      e8:	a7 13       	cpse	r26, r23
      ea:	9b 13       	cpse	r25, r27
      ec:	74 13       	cpse	r23, r20
      ee:	7a 13       	cpse	r23, r26

000000f0 <__c.2052>:
      f0:	0d 0a 67 6f 74 20 75 61 72 74 20 64 61 74 61 3a     ..got uart data:
     100:	20 00                                                .

00000102 <__c.2050>:
     102:	52 58 20 73 69 67 6e 61 6c 20 65 72 72 6f 72 00     RX signal error.

00000112 <__c.2045>:
     112:	47 65 74 20 53 69 67 6e 61 6c 20 45 52 52 4f 52     Get Signal ERROR
     122:	21 0d 0a 00                                         !...

00000126 <__c.2112>:
     126:	55 4e 4b 4f 57 4e 00                                UNKOWN.

0000012d <__c.2109>:
     12d:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     13d:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

00000148 <__c.2106>:
     148:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     158:	20 53 69 67 6e 61 6c 00                              Signal.

00000160 <__c.2103>:
     160:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     170:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000180 <__c.2100>:
     180:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     190:	72 6f 72 00                                         ror.

00000194 <__c.2097>:
     194:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

000001a5 <__c.2094>:
     1a5:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

000001b4 <__c.2091>:
     1b4:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     1c4:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000001cf <__c.2088>:
     1cf:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000001db <__c.2085>:
     1db:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     1eb:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     1fb:	20 6f 6b 3f 00                                       ok?.

00000200 <__c.2082>:
     200:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     210:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

0000021e <__c.2079>:
     21e:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     22e:	72 74 00                                            rt.

00000231 <__c.2076>:
     231:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     241:	49 44 00                                            ID.

00000244 <__c.2073>:
     244:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     254:	20 57 61 6b 65 75 70 00                              Wakeup.

0000025c <__c.2070>:
     25c:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     26c:	6c 61 74 65 64 00                                   lated.

00000272 <__c.2067>:
     272:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     282:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000028d <__c.2064>:
     28d:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     29d:	69 6e 74 65 72 00                                   inter.

000002a3 <__c.2061>:
     2a3:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     2b3:	6c 6f 77 00                                         low.

000002b7 <__c.2057>:
     2b7:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     2c7:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     2d7:	6e 6f 75 67 68 21 00                                nough!.

000002de <__c.2054>:
     2de:	29 3a 20 00                                         ): .

000002e2 <__c.2052>:
     2e2:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000002ee <__c.1984>:
     2ee:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000002fd <__c.1839>:
     2fd:	45 46 47 65 66 67 00                                EFGefg.

00000304 <__c.1833>:
     304:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000314 <__ctors_end>:
     314:	11 24       	eor	r1, r1
     316:	1f be       	out	0x3f, r1	; 63
     318:	cf ef       	ldi	r28, 0xFF	; 255
     31a:	d1 e2       	ldi	r29, 0x21	; 33
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	cd bf       	out	0x3d, r28	; 61

00000320 <__do_copy_data>:
     320:	12 e0       	ldi	r17, 0x02	; 2
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b2 e0       	ldi	r27, 0x02	; 2
     326:	e8 ee       	ldi	r30, 0xE8	; 232
     328:	f1 e5       	ldi	r31, 0x51	; 81
     32a:	00 e0       	ldi	r16, 0x00	; 0
     32c:	0b bf       	out	0x3b, r16	; 59
     32e:	02 c0       	rjmp	.+4      	; 0x334 <__do_copy_data+0x14>
     330:	07 90       	elpm	r0, Z+
     332:	0d 92       	st	X+, r0
     334:	aa 3c       	cpi	r26, 0xCA	; 202
     336:	b1 07       	cpc	r27, r17
     338:	d9 f7       	brne	.-10     	; 0x330 <__do_copy_data+0x10>

0000033a <__do_clear_bss>:
     33a:	18 e0       	ldi	r17, 0x08	; 8
     33c:	aa ec       	ldi	r26, 0xCA	; 202
     33e:	b2 e0       	ldi	r27, 0x02	; 2
     340:	01 c0       	rjmp	.+2      	; 0x344 <.do_clear_bss_start>

00000342 <.do_clear_bss_loop>:
     342:	1d 92       	st	X+, r1

00000344 <.do_clear_bss_start>:
     344:	af 3e       	cpi	r26, 0xEF	; 239
     346:	b1 07       	cpc	r27, r17
     348:	e1 f7       	brne	.-8      	; 0x342 <.do_clear_bss_loop>
     34a:	0e 94 bb 02 	call	0x576	; 0x576 <main>
     34e:	0c 94 f2 28 	jmp	0x51e4	; 0x51e4 <_exit>

00000352 <__bad_interrupt>:
     352:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <__vector_default>

00000356 <nrk_create_taskset>:
	}
}

void
nrk_create_taskset()
{
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
  TaskOne.task = rx_task;
     35c:	82 e4       	ldi	r24, 0x42	; 66
     35e:	92 e0       	ldi	r25, 0x02	; 2
     360:	90 93 d4 02 	sts	0x02D4, r25
     364:	80 93 d3 02 	sts	0x02D3, r24
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
     368:	ce ec       	ldi	r28, 0xCE	; 206
     36a:	d2 e0       	ldi	r29, 0x02	; 2
     36c:	ce 01       	movw	r24, r28
     36e:	65 ef       	ldi	r22, 0xF5	; 245
     370:	74 e0       	ldi	r23, 0x04	; 4
     372:	40 e0       	ldi	r20, 0x00	; 0
     374:	52 e0       	ldi	r21, 0x02	; 2
     376:	0e 94 1a 24 	call	0x4834	; 0x4834 <nrk_task_set_stk>
  TaskOne.prio = 1;
     37a:	11 e0       	ldi	r17, 0x01	; 1
     37c:	18 87       	std	Y+8, r17	; 0x08
  TaskOne.FirstActivation = TRUE;
     37e:	1f 83       	std	Y+7, r17	; 0x07
  TaskOne.Type = BASIC_TASK;
     380:	19 87       	std	Y+9, r17	; 0x09
  TaskOne.SchType = PREEMPTIVE;
     382:	1a 87       	std	Y+10, r17	; 0x0a
  TaskOne.period.secs = 10;
     384:	8a e0       	ldi	r24, 0x0A	; 10
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	a0 e0       	ldi	r26, 0x00	; 0
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	8b 87       	std	Y+11, r24	; 0x0b
     38e:	9c 87       	std	Y+12, r25	; 0x0c
     390:	ad 87       	std	Y+13, r26	; 0x0d
     392:	be 87       	std	Y+14, r27	; 0x0e
  TaskOne.period.nano_secs = 250*NANOS_PER_MS;
     394:	80 e8       	ldi	r24, 0x80	; 128
     396:	92 eb       	ldi	r25, 0xB2	; 178
     398:	a6 ee       	ldi	r26, 0xE6	; 230
     39a:	be e0       	ldi	r27, 0x0E	; 14
     39c:	8f 87       	std	Y+15, r24	; 0x0f
     39e:	98 8b       	std	Y+16, r25	; 0x10
     3a0:	a9 8b       	std	Y+17, r26	; 0x11
     3a2:	ba 8b       	std	Y+18, r27	; 0x12
  TaskOne.cpu_reserve.secs = 0;
     3a4:	1b 8a       	std	Y+19, r1	; 0x13
     3a6:	1c 8a       	std	Y+20, r1	; 0x14
     3a8:	1d 8a       	std	Y+21, r1	; 0x15
     3aa:	1e 8a       	std	Y+22, r1	; 0x16
  TaskOne.cpu_reserve.nano_secs =  50*NANOS_PER_MS;
     3ac:	80 e8       	ldi	r24, 0x80	; 128
     3ae:	90 ef       	ldi	r25, 0xF0	; 240
     3b0:	aa ef       	ldi	r26, 0xFA	; 250
     3b2:	b2 e0       	ldi	r27, 0x02	; 2
     3b4:	8f 8b       	std	Y+23, r24	; 0x17
     3b6:	98 8f       	std	Y+24, r25	; 0x18
     3b8:	a9 8f       	std	Y+25, r26	; 0x19
     3ba:	ba 8f       	std	Y+26, r27	; 0x1a
  TaskOne.offset.secs = 0;
     3bc:	1b 8e       	std	Y+27, r1	; 0x1b
     3be:	1c 8e       	std	Y+28, r1	; 0x1c
     3c0:	1d 8e       	std	Y+29, r1	; 0x1d
     3c2:	1e 8e       	std	Y+30, r1	; 0x1e
  TaskOne.offset.nano_secs= 0;
     3c4:	1f 8e       	std	Y+31, r1	; 0x1f
     3c6:	18 a2       	std	Y+32, r1	; 0x20
     3c8:	19 a2       	std	Y+33, r1	; 0x21
     3ca:	1a a2       	std	Y+34, r1	; 0x22
  nrk_activate_task (&TaskOne);
     3cc:	ce 01       	movw	r24, r28
     3ce:	0e 94 1f 1b 	call	0x363e	; 0x363e <nrk_activate_task>

  TaskTwo.task = tx_task;
     3d2:	84 e2       	ldi	r24, 0x24	; 36
     3d4:	92 e0       	ldi	r25, 0x02	; 2
     3d6:	90 93 00 08 	sts	0x0800, r25
     3da:	80 93 ff 07 	sts	0x07FF, r24
  nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
     3de:	ca ef       	ldi	r28, 0xFA	; 250
     3e0:	d7 e0       	ldi	r29, 0x07	; 7
     3e2:	ce 01       	movw	r24, r28
     3e4:	61 ef       	ldi	r22, 0xF1	; 241
     3e6:	72 e0       	ldi	r23, 0x02	; 2
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	52 e0       	ldi	r21, 0x02	; 2
     3ec:	0e 94 1a 24 	call	0x4834	; 0x4834 <nrk_task_set_stk>
  TaskTwo.prio = 2;
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	88 87       	std	Y+8, r24	; 0x08
  TaskTwo.FirstActivation = TRUE;
     3f4:	1f 83       	std	Y+7, r17	; 0x07
  TaskTwo.Type = BASIC_TASK;
     3f6:	19 87       	std	Y+9, r17	; 0x09
  TaskTwo.SchType = PREEMPTIVE;
     3f8:	1a 87       	std	Y+10, r17	; 0x0a
  TaskTwo.period.secs = 0;
     3fa:	1b 86       	std	Y+11, r1	; 0x0b
     3fc:	1c 86       	std	Y+12, r1	; 0x0c
     3fe:	1d 86       	std	Y+13, r1	; 0x0d
     400:	1e 86       	std	Y+14, r1	; 0x0e
  TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	95 e6       	ldi	r25, 0x65	; 101
     406:	ad ec       	ldi	r26, 0xCD	; 205
     408:	bd e1       	ldi	r27, 0x1D	; 29
     40a:	8f 87       	std	Y+15, r24	; 0x0f
     40c:	98 8b       	std	Y+16, r25	; 0x10
     40e:	a9 8b       	std	Y+17, r26	; 0x11
     410:	ba 8b       	std	Y+18, r27	; 0x12
  TaskTwo.cpu_reserve.secs = 0;
     412:	1b 8a       	std	Y+19, r1	; 0x13
     414:	1c 8a       	std	Y+20, r1	; 0x14
     416:	1d 8a       	std	Y+21, r1	; 0x15
     418:	1e 8a       	std	Y+22, r1	; 0x16
  TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	91 ee       	ldi	r25, 0xE1	; 225
     41e:	a5 ef       	ldi	r26, 0xF5	; 245
     420:	b5 e0       	ldi	r27, 0x05	; 5
     422:	8f 8b       	std	Y+23, r24	; 0x17
     424:	98 8f       	std	Y+24, r25	; 0x18
     426:	a9 8f       	std	Y+25, r26	; 0x19
     428:	ba 8f       	std	Y+26, r27	; 0x1a
  TaskTwo.offset.secs = 0;
     42a:	1b 8e       	std	Y+27, r1	; 0x1b
     42c:	1c 8e       	std	Y+28, r1	; 0x1c
     42e:	1d 8e       	std	Y+29, r1	; 0x1d
     430:	1e 8e       	std	Y+30, r1	; 0x1e
  TaskTwo.offset.nano_secs= 0;
     432:	1f 8e       	std	Y+31, r1	; 0x1f
     434:	18 a2       	std	Y+32, r1	; 0x20
     436:	19 a2       	std	Y+33, r1	; 0x21
     438:	1a a2       	std	Y+34, r1	; 0x22
  nrk_activate_task (&TaskTwo);
     43a:	ce 01       	movw	r24, r28
     43c:	0e 94 1f 1b 	call	0x363e	; 0x363e <nrk_activate_task>


}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	08 95       	ret

00000448 <tx_task>:
}

void tx_task()
{
  uint8_t cnt;
  printf( "tx_task PID=%d\r\n",nrk_get_pid());
     448:	0e 94 2c 19 	call	0x3258	; 0x3258 <nrk_get_pid>
     44c:	00 d0       	rcall	.+0      	; 0x44e <tx_task+0x6>
     44e:	00 d0       	rcall	.+0      	; 0x450 <tx_task+0x8>
     450:	ed b7       	in	r30, 0x3d	; 61
     452:	fe b7       	in	r31, 0x3e	; 62
     454:	31 96       	adiw	r30, 0x01	; 1
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	32 e0       	ldi	r19, 0x02	; 2
     45a:	ad b7       	in	r26, 0x3d	; 61
     45c:	be b7       	in	r27, 0x3e	; 62
     45e:	12 96       	adiw	r26, 0x02	; 2
     460:	3c 93       	st	X, r19
     462:	2e 93       	st	-X, r18
     464:	11 97       	sbiw	r26, 0x01	; 1
     466:	82 83       	std	Z+2, r24	; 0x02
     468:	13 82       	std	Z+3, r1	; 0x03
     46a:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <printf>
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
  cnt=0;
  while(1) {
	nrk_led_toggle(BLUE_LED);
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <nrk_led_toggle>
//	printf( "Task2 cnt=%d\r\n",cnt );
	nrk_wait_until_next_period();
     47e:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <nrk_wait_until_next_period>
     482:	f9 cf       	rjmp	.-14     	; 0x476 <tx_task+0x2e>

00000484 <rx_task>:
  return 0;
}


void rx_task()
{
     484:	cf 92       	push	r12
     486:	df 92       	push	r13
     488:	ef 92       	push	r14
     48a:	ff 92       	push	r15
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
char c;
nrk_sig_t uart_rx_signal;
nrk_sig_mask_t sm;

  printf( "My node's address is %d\r\n",NODE_ADDR );
     490:	00 d0       	rcall	.+0      	; 0x492 <rx_task+0xe>
     492:	00 d0       	rcall	.+0      	; 0x494 <rx_task+0x10>
     494:	81 e1       	ldi	r24, 0x11	; 17
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	ad b7       	in	r26, 0x3d	; 61
     49a:	be b7       	in	r27, 0x3e	; 62
     49c:	12 96       	adiw	r26, 0x02	; 2
     49e:	9c 93       	st	X, r25
     4a0:	8e 93       	st	-X, r24
     4a2:	11 97       	sbiw	r26, 0x01	; 1
     4a4:	14 96       	adiw	r26, 0x04	; 4
     4a6:	1c 92       	st	X, r1
     4a8:	1e 92       	st	-X, r1
     4aa:	13 97       	sbiw	r26, 0x03	; 3
     4ac:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <printf>
  printf( "rx_task PID=%d\r\n",nrk_get_pid());
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0e 94 2c 19 	call	0x3258	; 0x3258 <nrk_get_pid>
     4bc:	00 d0       	rcall	.+0      	; 0x4be <rx_task+0x3a>
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <rx_task+0x3c>
     4c0:	ed b7       	in	r30, 0x3d	; 61
     4c2:	fe b7       	in	r31, 0x3e	; 62
     4c4:	31 96       	adiw	r30, 0x01	; 1
     4c6:	2b e2       	ldi	r18, 0x2B	; 43
     4c8:	32 e0       	ldi	r19, 0x02	; 2
     4ca:	ad b7       	in	r26, 0x3d	; 61
     4cc:	be b7       	in	r27, 0x3e	; 62
     4ce:	12 96       	adiw	r26, 0x02	; 2
     4d0:	3c 93       	st	X, r19
     4d2:	2e 93       	st	-X, r18
     4d4:	11 97       	sbiw	r26, 0x01	; 1
     4d6:	82 83       	std	Z+2, r24	; 0x02
     4d8:	13 82       	std	Z+3, r1	; 0x03
     4da:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <printf>

  // Get the signal for UART RX  
  uart_rx_signal=nrk_uart_rx_signal_get();
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0e 94 69 10 	call	0x20d2	; 0x20d2 <nrk_uart_rx_signal_get>
     4ea:	d8 2e       	mov	r13, r24
  // Register your task to wakeup on RX Data 
  if(uart_rx_signal==NRK_ERROR) nrk_kprintf( PSTR("Get Signal ERROR!\r\n") );
     4ec:	bf ef       	ldi	r27, 0xFF	; 255
     4ee:	8b 17       	cp	r24, r27
     4f0:	21 f4       	brne	.+8      	; 0x4fa <rx_task+0x76>
     4f2:	82 e1       	ldi	r24, 0x12	; 18
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kprintf>
  nrk_signal_register(uart_rx_signal);
     4fa:	8d 2d       	mov	r24, r13
     4fc:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <nrk_signal_register>
                c=getchar();
		printf( "%c",c);
		if(c=='x') PORTF ^= 0x20;
		else nrk_led_clr(GREEN_LED);
		}
	sm=nrk_event_wait(SIG(uart_rx_signal));
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	e9 2e       	mov	r14, r25
     504:	f1 2c       	mov	r15, r1
     506:	01 2d       	mov	r16, r1
     508:	11 2d       	mov	r17, r1
     50a:	04 c0       	rjmp	.+8      	; 0x514 <rx_task+0x90>
     50c:	ee 0c       	add	r14, r14
     50e:	ff 1c       	adc	r15, r15
     510:	00 1f       	adc	r16, r16
     512:	11 1f       	adc	r17, r17
     514:	da 94       	dec	r13
     516:	d2 f7       	brpl	.-12     	; 0x50c <rx_task+0x88>
	while(nrk_uart_data_ready(NRK_DEFAULT_UART)!=0)
                {
		// Read Character
                c=getchar();
		printf( "%c",c);
		if(c=='x') PORTF ^= 0x20;
     518:	80 e2       	ldi	r24, 0x20	; 32
     51a:	d8 2e       	mov	r13, r24
     51c:	15 c0       	rjmp	.+42     	; 0x548 <rx_task+0xc4>

	// Wait for UART signal
	while(nrk_uart_data_ready(NRK_DEFAULT_UART)!=0)
                {
		// Read Character
                c=getchar();
     51e:	80 91 e5 08 	lds	r24, 0x08E5
     522:	90 91 e6 08 	lds	r25, 0x08E6
     526:	0e 94 56 26 	call	0x4cac	; 0x4cac <fgetc>
     52a:	c8 2e       	mov	r12, r24
		printf( "%c",c);
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 d5 26 	call	0x4daa	; 0x4daa <putchar>
		if(c=='x') PORTF ^= 0x20;
     532:	e8 e7       	ldi	r30, 0x78	; 120
     534:	ce 16       	cp	r12, r30
     536:	21 f4       	brne	.+8      	; 0x540 <rx_task+0xbc>
     538:	81 b3       	in	r24, 0x11	; 17
     53a:	8d 25       	eor	r24, r13
     53c:	81 bb       	out	0x11, r24	; 17
     53e:	04 c0       	rjmp	.+8      	; 0x548 <rx_task+0xc4>
		else nrk_led_clr(GREEN_LED);
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_led_clr>
  nrk_signal_register(uart_rx_signal);

  while(1) {

	// Wait for UART signal
	while(nrk_uart_data_ready(NRK_DEFAULT_UART)!=0)
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	0e 94 3d 0c 	call	0x187a	; 0x187a <nrk_uart_data_ready>
     54e:	88 23       	and	r24, r24
     550:	31 f7       	brne	.-52     	; 0x51e <rx_task+0x9a>
                c=getchar();
		printf( "%c",c);
		if(c=='x') PORTF ^= 0x20;
		else nrk_led_clr(GREEN_LED);
		}
	sm=nrk_event_wait(SIG(uart_rx_signal));
     552:	c8 01       	movw	r24, r16
     554:	b7 01       	movw	r22, r14
     556:	0e 94 d7 17 	call	0x2fae	; 0x2fae <nrk_event_wait>
	if(sm != SIG(uart_rx_signal))
     55a:	6e 15       	cp	r22, r14
     55c:	7f 05       	cpc	r23, r15
     55e:	80 07       	cpc	r24, r16
     560:	91 07       	cpc	r25, r17
     562:	21 f0       	breq	.+8      	; 0x56c <rx_task+0xe8>
	nrk_kprintf( PSTR("RX signal error") );
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kprintf>
	nrk_kprintf( PSTR("\r\ngot uart data: ") );
     56c:	80 ef       	ldi	r24, 0xF0	; 240
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kprintf>
     574:	e9 cf       	rjmp	.-46     	; 0x548 <rx_task+0xc4>

00000576 <main>:
int
main ()
{
  uint8_t t;
  int8_t x=0;
  nrk_setup_ports();
     576:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
     57a:	87 e0       	ldi	r24, 0x07	; 7
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 40 10 	call	0x2080	; 0x2080 <nrk_setup_uart>
//  PORTF |= 10;
  PORTF |= 0x20;
     582:	8d 9a       	sbi	0x11, 5	; 17
  printf("%d\r\n",x);
     584:	00 d0       	rcall	.+0      	; 0x586 <main+0x10>
     586:	00 d0       	rcall	.+0      	; 0x588 <main+0x12>
     588:	8c e3       	ldi	r24, 0x3C	; 60
     58a:	92 e0       	ldi	r25, 0x02	; 2
     58c:	ed b7       	in	r30, 0x3d	; 61
     58e:	fe b7       	in	r31, 0x3e	; 62
     590:	92 83       	std	Z+2, r25	; 0x02
     592:	81 83       	std	Z+1, r24	; 0x01
     594:	14 82       	std	Z+4, r1	; 0x04
     596:	13 82       	std	Z+3, r1	; 0x03
     598:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <printf>
  printf( "Starting up...\r\n" );
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	81 e4       	ldi	r24, 0x41	; 65
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <puts>

  nrk_init();
     5ac:	0e 94 8d 12 	call	0x251a	; 0x251a <nrk_init>

  nrk_led_clr(ORANGE_LED);
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_led_clr>
  nrk_led_clr(BLUE_LED);
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_led_clr>
  nrk_led_set(GREEN_LED);
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <nrk_led_set>
  nrk_led_clr(RED_LED);
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_led_clr>
 
  nrk_time_set(0,0);
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	0e 94 9c 1c 	call	0x3938	; 0x3938 <nrk_time_set>
  nrk_create_taskset ();
     5e4:	0e 94 ab 01 	call	0x356	; 0x356 <nrk_create_taskset>
  nrk_start();
     5e8:	0e 94 3b 12 	call	0x2476	; 0x2476 <nrk_start>
  return 0;
}
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	08 95       	ret

000005f2 <halRfSetChannel>:
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	9c 01       	movw	r18, r24
     5f6:	2b 50       	subi	r18, 0x0B	; 11
     5f8:	30 40       	sbci	r19, 0x00	; 0
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
     5fa:	22 0f       	add	r18, r18
     5fc:	33 1f       	adc	r19, r19
     5fe:	22 0f       	add	r18, r18
     600:	33 1f       	adc	r19, r19
     602:	86 5a       	subi	r24, 0xA6	; 166
     604:	9e 4b       	sbci	r25, 0xBE	; 190
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
     606:	82 0f       	add	r24, r18
     608:	93 1f       	adc	r25, r19
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
     60a:	f8 94       	cli
	FASTSPI_SETREG(CC2420_FSCTRL, f);
     60c:	40 98       	cbi	0x08, 0	; 8
     60e:	28 e1       	ldi	r18, 0x18	; 24
     610:	2e bd       	out	0x2e, r18	; 46
     612:	0d b4       	in	r0, 0x2d	; 45
     614:	07 fe       	sbrs	r0, 7
     616:	fd cf       	rjmp	.-6      	; 0x612 <halRfSetChannel+0x20>
     618:	9e bd       	out	0x2e, r25	; 46
     61a:	0d b4       	in	r0, 0x2d	; 45
     61c:	07 fe       	sbrs	r0, 7
     61e:	fd cf       	rjmp	.-6      	; 0x61a <halRfSetChannel+0x28>
     620:	8e bd       	out	0x2e, r24	; 46
     622:	0d b4       	in	r0, 0x2d	; 45
     624:	07 fe       	sbrs	r0, 7
     626:	fd cf       	rjmp	.-6      	; 0x622 <halRfSetChannel+0x30>
     628:	40 9a       	sbi	0x08, 0	; 8
	ENABLE_GLOBAL_INT();
     62a:	78 94       	sei

} // rfSetChannel
     62c:	08 95       	ret

0000062e <halRfWaitForCrystalOscillator>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
     62e:	f8 94       	cli
	    FASTSPI_UPD_STATUS(spiStatusByte);
     630:	40 98       	cbi	0x08, 0	; 8
     632:	1e bc       	out	0x2e, r1	; 46
     634:	0d b4       	in	r0, 0x2d	; 45
     636:	07 fe       	sbrs	r0, 7
     638:	fd cf       	rjmp	.-6      	; 0x634 <halRfWaitForCrystalOscillator+0x6>
     63a:	8e b5       	in	r24, 0x2e	; 46
     63c:	40 9a       	sbi	0x08, 0	; 8
	    ENABLE_GLOBAL_INT();
     63e:	78 94       	sei
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
     640:	86 ff       	sbrs	r24, 6
     642:	f5 cf       	rjmp	.-22     	; 0x62e <halRfWaitForCrystalOscillator>

} // halRfWaitForCrystalOscillator
     644:	08 95       	ret

00000646 <rf_security_last_pkt_status>:

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
}
     646:	80 91 32 08 	lds	r24, 0x0832
     64a:	08 95       	ret

0000064c <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
     64c:	fc 01       	movw	r30, r24
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
     64e:	40 98       	cbi	0x08, 0	; 8
     650:	89 ec       	ldi	r24, 0xC9	; 201
     652:	8e bd       	out	0x2e, r24	; 46
     654:	0d b4       	in	r0, 0x2d	; 45
     656:	07 fe       	sbrs	r0, 7
     658:	fd cf       	rjmp	.-6      	; 0x654 <rf_security_set_ctr_counter+0x8>
     65a:	80 e8       	ldi	r24, 0x80	; 128
     65c:	8e bd       	out	0x2e, r24	; 46
     65e:	0d b4       	in	r0, 0x2d	; 45
     660:	07 fe       	sbrs	r0, 7
     662:	fd cf       	rjmp	.-6      	; 0x65e <rf_security_set_ctr_counter+0x12>
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	81 50       	subi	r24, 0x01	; 1
     668:	df 01       	movw	r26, r30
     66a:	a8 0f       	add	r26, r24
     66c:	b1 1d       	adc	r27, r1
     66e:	9c 91       	ld	r25, X
     670:	9e bd       	out	0x2e, r25	; 46
     672:	0d b4       	in	r0, 0x2d	; 45
     674:	07 fe       	sbrs	r0, 7
     676:	fd cf       	rjmp	.-6      	; 0x672 <rf_security_set_ctr_counter+0x26>
     678:	88 23       	and	r24, r24
     67a:	a9 f7       	brne	.-22     	; 0x666 <rf_security_set_ctr_counter+0x1a>
     67c:	40 9a       	sbi	0x08, 0	; 8
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
     67e:	40 98       	cbi	0x08, 0	; 8
     680:	8b ec       	ldi	r24, 0xCB	; 203
     682:	8e bd       	out	0x2e, r24	; 46
     684:	0d b4       	in	r0, 0x2d	; 45
     686:	07 fe       	sbrs	r0, 7
     688:	fd cf       	rjmp	.-6      	; 0x684 <rf_security_set_ctr_counter+0x38>
     68a:	80 e8       	ldi	r24, 0x80	; 128
     68c:	8e bd       	out	0x2e, r24	; 46
     68e:	0d b4       	in	r0, 0x2d	; 45
     690:	07 fe       	sbrs	r0, 7
     692:	fd cf       	rjmp	.-6      	; 0x68e <rf_security_set_ctr_counter+0x42>
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	81 50       	subi	r24, 0x01	; 1
     698:	df 01       	movw	r26, r30
     69a:	a8 0f       	add	r26, r24
     69c:	b1 1d       	adc	r27, r1
     69e:	12 96       	adiw	r26, 0x02	; 2
     6a0:	9c 91       	ld	r25, X
     6a2:	12 97       	sbiw	r26, 0x02	; 2
     6a4:	9e bd       	out	0x2e, r25	; 46
     6a6:	0d b4       	in	r0, 0x2d	; 45
     6a8:	07 fe       	sbrs	r0, 7
     6aa:	fd cf       	rjmp	.-6      	; 0x6a6 <rf_security_set_ctr_counter+0x5a>
     6ac:	88 23       	and	r24, r24
     6ae:	99 f7       	brne	.-26     	; 0x696 <rf_security_set_ctr_counter+0x4a>
     6b0:	40 9a       	sbi	0x08, 0	; 8
tx_ctr[0]=counter[0];
     6b2:	80 81       	ld	r24, Z
     6b4:	80 93 33 08 	sts	0x0833, r24
tx_ctr[1]=counter[1];
     6b8:	81 81       	ldd	r24, Z+1	; 0x01
     6ba:	80 93 34 08 	sts	0x0834, r24
tx_ctr[2]=counter[2];
     6be:	82 81       	ldd	r24, Z+2	; 0x02
     6c0:	80 93 35 08 	sts	0x0835, r24
tx_ctr[3]=counter[3];
     6c4:	83 81       	ldd	r24, Z+3	; 0x03
     6c6:	80 93 36 08 	sts	0x0836, r24
}
     6ca:	08 95       	ret

000006cc <rf_security_enable>:
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
     6cc:	40 98       	cbi	0x08, 0	; 8
     6ce:	89 e1       	ldi	r24, 0x19	; 25
     6d0:	8e bd       	out	0x2e, r24	; 46
     6d2:	0d b4       	in	r0, 0x2d	; 45
     6d4:	07 fe       	sbrs	r0, 7
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <rf_security_enable+0x6>
     6d8:	83 e0       	ldi	r24, 0x03	; 3
     6da:	8e bd       	out	0x2e, r24	; 46
     6dc:	0d b4       	in	r0, 0x2d	; 45
     6de:	07 fe       	sbrs	r0, 7
     6e0:	fd cf       	rjmp	.-6      	; 0x6dc <rf_security_enable+0x10>
     6e2:	86 e0       	ldi	r24, 0x06	; 6
     6e4:	8e bd       	out	0x2e, r24	; 46
     6e6:	0d b4       	in	r0, 0x2d	; 45
     6e8:	07 fe       	sbrs	r0, 7
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <rf_security_enable+0x1a>
     6ec:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
     6ee:	40 98       	cbi	0x08, 0	; 8
     6f0:	8a e1       	ldi	r24, 0x1A	; 26
     6f2:	8e bd       	out	0x2e, r24	; 46
     6f4:	0d b4       	in	r0, 0x2d	; 45
     6f6:	07 fe       	sbrs	r0, 7
     6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <rf_security_enable+0x28>
     6fa:	8e e0       	ldi	r24, 0x0E	; 14
     6fc:	8e bd       	out	0x2e, r24	; 46
     6fe:	0d b4       	in	r0, 0x2d	; 45
     700:	07 fe       	sbrs	r0, 7
     702:	fd cf       	rjmp	.-6      	; 0x6fe <rf_security_enable+0x32>
     704:	8e e0       	ldi	r24, 0x0E	; 14
     706:	8e bd       	out	0x2e, r24	; 46
     708:	0d b4       	in	r0, 0x2d	; 45
     70a:	07 fe       	sbrs	r0, 7
     70c:	fd cf       	rjmp	.-6      	; 0x708 <rf_security_enable+0x3c>
     70e:	40 9a       	sbi	0x08, 0	; 8

security_enable=1;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	80 93 23 08 	sts	0x0823, r24
}
     716:	08 95       	ret

00000718 <rf_security_disable>:



void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
     718:	40 98       	cbi	0x08, 0	; 8
     71a:	89 e1       	ldi	r24, 0x19	; 25
     71c:	8e bd       	out	0x2e, r24	; 46
     71e:	0d b4       	in	r0, 0x2d	; 45
     720:	07 fe       	sbrs	r0, 7
     722:	fd cf       	rjmp	.-6      	; 0x71e <rf_security_disable+0x6>
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	8e bd       	out	0x2e, r24	; 46
     728:	0d b4       	in	r0, 0x2d	; 45
     72a:	07 fe       	sbrs	r0, 7
     72c:	fd cf       	rjmp	.-6      	; 0x728 <rf_security_disable+0x10>
     72e:	84 ec       	ldi	r24, 0xC4	; 196
     730:	8e bd       	out	0x2e, r24	; 46
     732:	0d b4       	in	r0, 0x2d	; 45
     734:	07 fe       	sbrs	r0, 7
     736:	fd cf       	rjmp	.-6      	; 0x732 <rf_security_disable+0x1a>
     738:	40 9a       	sbi	0x08, 0	; 8
  security_enable=0;
     73a:	10 92 23 08 	sts	0x0823, r1
}
     73e:	08 95       	ret

00000740 <rf_get_sem>:
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     740:	80 91 21 08 	lds	r24, 0x0821
     744:	90 91 22 08 	lds	r25, 0x0822
     748:	08 95       	ret

0000074a <rf_tx_power>:
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	8f 71       	andi	r24, 0x1F	; 31
     74e:	90 70       	andi	r25, 0x00	; 0
     750:	80 6e       	ori	r24, 0xE0	; 224
     752:	90 6a       	ori	r25, 0xA0	; 160
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
     754:	40 98       	cbi	0x08, 0	; 8
     756:	25 e1       	ldi	r18, 0x15	; 21
     758:	2e bd       	out	0x2e, r18	; 46
     75a:	0d b4       	in	r0, 0x2d	; 45
     75c:	07 fe       	sbrs	r0, 7
     75e:	fd cf       	rjmp	.-6      	; 0x75a <rf_tx_power+0x10>
     760:	9e bd       	out	0x2e, r25	; 46
     762:	0d b4       	in	r0, 0x2d	; 45
     764:	07 fe       	sbrs	r0, 7
     766:	fd cf       	rjmp	.-6      	; 0x762 <rf_tx_power+0x18>
     768:	8e bd       	out	0x2e, r24	; 46
     76a:	0d b4       	in	r0, 0x2d	; 45
     76c:	07 fe       	sbrs	r0, 7
     76e:	fd cf       	rjmp	.-6      	; 0x76a <rf_tx_power+0x20>
     770:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
     772:	08 95       	ret

00000774 <rf_addr_decode_enable>:
}


void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
     774:	80 91 24 08 	lds	r24, 0x0824
     778:	90 91 25 08 	lds	r25, 0x0825
     77c:	98 60       	ori	r25, 0x08	; 8
     77e:	90 93 25 08 	sts	0x0825, r25
     782:	80 93 24 08 	sts	0x0824, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
     786:	40 98       	cbi	0x08, 0	; 8
     788:	21 e1       	ldi	r18, 0x11	; 17
     78a:	2e bd       	out	0x2e, r18	; 46
     78c:	0d b4       	in	r0, 0x2d	; 45
     78e:	07 fe       	sbrs	r0, 7
     790:	fd cf       	rjmp	.-6      	; 0x78c <rf_addr_decode_enable+0x18>
     792:	9e bd       	out	0x2e, r25	; 46
     794:	0d b4       	in	r0, 0x2d	; 45
     796:	07 fe       	sbrs	r0, 7
     798:	fd cf       	rjmp	.-6      	; 0x794 <rf_addr_decode_enable+0x20>
     79a:	8e bd       	out	0x2e, r24	; 46
     79c:	0d b4       	in	r0, 0x2d	; 45
     79e:	07 fe       	sbrs	r0, 7
     7a0:	fd cf       	rjmp	.-6      	; 0x79c <rf_addr_decode_enable+0x28>
     7a2:	40 9a       	sbi	0x08, 0	; 8
}
     7a4:	08 95       	ret

000007a6 <rf_addr_decode_disable>:

void rf_addr_decode_disable()
{
    mdmctrl0 &= (~0x0800);
     7a6:	80 91 24 08 	lds	r24, 0x0824
     7aa:	90 91 25 08 	lds	r25, 0x0825
     7ae:	97 7f       	andi	r25, 0xF7	; 247
     7b0:	90 93 25 08 	sts	0x0825, r25
     7b4:	80 93 24 08 	sts	0x0824, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
     7b8:	40 98       	cbi	0x08, 0	; 8
     7ba:	21 e1       	ldi	r18, 0x11	; 17
     7bc:	2e bd       	out	0x2e, r18	; 46
     7be:	0d b4       	in	r0, 0x2d	; 45
     7c0:	07 fe       	sbrs	r0, 7
     7c2:	fd cf       	rjmp	.-6      	; 0x7be <rf_addr_decode_disable+0x18>
     7c4:	9e bd       	out	0x2e, r25	; 46
     7c6:	0d b4       	in	r0, 0x2d	; 45
     7c8:	07 fe       	sbrs	r0, 7
     7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <rf_addr_decode_disable+0x20>
     7cc:	8e bd       	out	0x2e, r24	; 46
     7ce:	0d b4       	in	r0, 0x2d	; 45
     7d0:	07 fe       	sbrs	r0, 7
     7d2:	fd cf       	rjmp	.-6      	; 0x7ce <rf_addr_decode_disable+0x28>
     7d4:	40 9a       	sbi	0x08, 0	; 8
}
     7d6:	08 95       	ret

000007d8 <rf_auto_ack_enable>:


void rf_auto_ack_enable()
{
    auto_ack_enable=1;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	80 93 31 08 	sts	0x0831, r24
    mdmctrl0 |= 0x0010;
     7de:	80 91 24 08 	lds	r24, 0x0824
     7e2:	90 91 25 08 	lds	r25, 0x0825
     7e6:	80 61       	ori	r24, 0x10	; 16
     7e8:	90 93 25 08 	sts	0x0825, r25
     7ec:	80 93 24 08 	sts	0x0824, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
     7f0:	40 98       	cbi	0x08, 0	; 8
     7f2:	21 e1       	ldi	r18, 0x11	; 17
     7f4:	2e bd       	out	0x2e, r18	; 46
     7f6:	0d b4       	in	r0, 0x2d	; 45
     7f8:	07 fe       	sbrs	r0, 7
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <rf_auto_ack_enable+0x1e>
     7fc:	9e bd       	out	0x2e, r25	; 46
     7fe:	0d b4       	in	r0, 0x2d	; 45
     800:	07 fe       	sbrs	r0, 7
     802:	fd cf       	rjmp	.-6      	; 0x7fe <rf_auto_ack_enable+0x26>
     804:	8e bd       	out	0x2e, r24	; 46
     806:	0d b4       	in	r0, 0x2d	; 45
     808:	07 fe       	sbrs	r0, 7
     80a:	fd cf       	rjmp	.-6      	; 0x806 <rf_auto_ack_enable+0x2e>
     80c:	40 9a       	sbi	0x08, 0	; 8
}
     80e:	08 95       	ret

00000810 <rf_auto_ack_disable>:

void rf_auto_ack_disable()
{
    auto_ack_enable=0;
     810:	10 92 31 08 	sts	0x0831, r1
    mdmctrl0 &= (~0x0010);
     814:	80 91 24 08 	lds	r24, 0x0824
     818:	90 91 25 08 	lds	r25, 0x0825
     81c:	8f 7e       	andi	r24, 0xEF	; 239
     81e:	90 93 25 08 	sts	0x0825, r25
     822:	80 93 24 08 	sts	0x0824, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
     826:	40 98       	cbi	0x08, 0	; 8
     828:	21 e1       	ldi	r18, 0x11	; 17
     82a:	2e bd       	out	0x2e, r18	; 46
     82c:	0d b4       	in	r0, 0x2d	; 45
     82e:	07 fe       	sbrs	r0, 7
     830:	fd cf       	rjmp	.-6      	; 0x82c <rf_auto_ack_disable+0x1c>
     832:	9e bd       	out	0x2e, r25	; 46
     834:	0d b4       	in	r0, 0x2d	; 45
     836:	07 fe       	sbrs	r0, 7
     838:	fd cf       	rjmp	.-6      	; 0x834 <rf_auto_ack_disable+0x24>
     83a:	8e bd       	out	0x2e, r24	; 46
     83c:	0d b4       	in	r0, 0x2d	; 45
     83e:	07 fe       	sbrs	r0, 7
     840:	fd cf       	rjmp	.-6      	; 0x83c <rf_auto_ack_disable+0x2c>
     842:	40 9a       	sbi	0x08, 0	; 8
}
     844:	08 95       	ret

00000846 <rf_rx_on>:
//-------------------------------------------------------------------------------------------------------
void rf_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    	rfSettings.receiveOn = TRUE;
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	80 93 2e 08 	sts	0x082E, r24
	FASTSPI_STROBE(CC2420_SRXON);
     84c:	40 98       	cbi	0x08, 0	; 8
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	8e bd       	out	0x2e, r24	; 46
     852:	0d b4       	in	r0, 0x2d	; 45
     854:	07 fe       	sbrs	r0, 7
     856:	fd cf       	rjmp	.-6      	; 0x852 <rf_rx_on+0xc>
     858:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
     85a:	40 98       	cbi	0x08, 0	; 8
     85c:	88 e0       	ldi	r24, 0x08	; 8
     85e:	8e bd       	out	0x2e, r24	; 46
     860:	0d b4       	in	r0, 0x2d	; 45
     862:	07 fe       	sbrs	r0, 7
     864:	fd cf       	rjmp	.-6      	; 0x860 <rf_rx_on+0x1a>
     866:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
     868:	10 92 37 08 	sts	0x0837, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
    //	ENABLE_FIFOP_INT();
} // rf_rx_on() 
     86c:	08 95       	ret

0000086e <rf_polling_rx_on>:

void rf_polling_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    	rfSettings.receiveOn = TRUE;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 93 2e 08 	sts	0x082E, r24
	FASTSPI_STROBE(CC2420_SRXON);
     874:	40 98       	cbi	0x08, 0	; 8
     876:	83 e0       	ldi	r24, 0x03	; 3
     878:	8e bd       	out	0x2e, r24	; 46
     87a:	0d b4       	in	r0, 0x2d	; 45
     87c:	07 fe       	sbrs	r0, 7
     87e:	fd cf       	rjmp	.-6      	; 0x87a <rf_polling_rx_on+0xc>
     880:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
     882:	40 98       	cbi	0x08, 0	; 8
     884:	88 e0       	ldi	r24, 0x08	; 8
     886:	8e bd       	out	0x2e, r24	; 46
     888:	0d b4       	in	r0, 0x2d	; 45
     88a:	07 fe       	sbrs	r0, 7
     88c:	fd cf       	rjmp	.-6      	; 0x888 <rf_polling_rx_on+0x1a>
     88e:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
     890:	10 92 37 08 	sts	0x0837, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
} // rf_rx_on() 
     894:	08 95       	ret

00000896 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
	// XXX
    	//SET_VREG_INACTIVE();	
	rfSettings.receiveOn = FALSE;
     896:	10 92 2e 08 	sts	0x082E, r1
	FASTSPI_STROBE(CC2420_SRFOFF);
     89a:	40 98       	cbi	0x08, 0	; 8
     89c:	86 e0       	ldi	r24, 0x06	; 6
     89e:	8e bd       	out	0x2e, r24	; 46
     8a0:	0d b4       	in	r0, 0x2d	; 45
     8a2:	07 fe       	sbrs	r0, 7
     8a4:	fd cf       	rjmp	.-6      	; 0x8a0 <rf_rx_off+0xa>
     8a6:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
     8a8:	10 92 37 08 	sts	0x0837, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
    //	DISABLE_FIFOP_INT();
} // rf_rx_off() 
     8ac:	08 95       	ret

000008ae <rf_busy>:

}

uint8_t rf_busy()
{
return SFD_IS_1;
     8ae:	89 b1       	in	r24, 0x09	; 9
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	26 e0       	ldi	r18, 0x06	; 6
     8b4:	96 95       	lsr	r25
     8b6:	87 95       	ror	r24
     8b8:	2a 95       	dec	r18
     8ba:	e1 f7       	brne	.-8      	; 0x8b4 <rf_busy+0x6>
}
     8bc:	81 70       	andi	r24, 0x01	; 1
     8be:	08 95       	ret

000008c0 <rf_rx_check_fifop>:

uint8_t rf_rx_check_fifop()
{
return FIFOP_IS_1;
     8c0:	8c b1       	in	r24, 0x0c	; 12
}
     8c2:	88 1f       	adc	r24, r24
     8c4:	88 27       	eor	r24, r24
     8c6:	88 1f       	adc	r24, r24
     8c8:	08 95       	ret

000008ca <rf_rx_check_sfd>:


uint8_t rf_rx_check_sfd()
{
return SFD_IS_1;
     8ca:	89 b1       	in	r24, 0x09	; 9
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	36 e0       	ldi	r19, 0x06	; 6
     8d0:	96 95       	lsr	r25
     8d2:	87 95       	ror	r24
     8d4:	3a 95       	dec	r19
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <rf_rx_check_sfd+0x6>
}
     8d8:	81 70       	andi	r24, 0x01	; 1
     8da:	08 95       	ret

000008dc <rf_polling_rx_packet>:
uint16_t tmp_blah;

int8_t rf_polling_rx_packet(bool ack,uint8_t len)
{
     8dc:	df 93       	push	r29
     8de:	cf 93       	push	r28
     8e0:	00 d0       	rcall	.+0      	; 0x8e2 <rf_polling_rx_packet+0x6>
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <rf_polling_rx_packet+0x8>
     8e4:	0f 92       	push	r0
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif

    if(FIFOP_IS_1 )
     8ea:	67 99       	sbic	0x0c, 7	; 12
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <rf_polling_rx_packet+0x16>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0d c2       	rjmp	.+1050   	; 0xd0c <rf_polling_rx_packet+0x430>
	uint16_t frameControlField;
	int8_t length;
	uint8_t pFooter[2];
	uint8_t checksum,rx_checksum,i;
			
	last_pkt_encrypted=0;
     8f2:	10 92 32 08 	sts	0x0832, r1
    
//	while(!SFD_IS_1);
//  XXX Need to make sure SFD has gone down to be sure packet finished!
//	while(SFD_IS_1);
    // Clean up and exit in case of FIFO overflow, which is indicated by FIFOP = 1 and FIFO = 0
	if((FIFOP_IS_1) && (!(FIFO_IS_1))) {	   
     8f6:	67 9b       	sbis	0x0c, 7	; 12
     8f8:	1e c0       	rjmp	.+60     	; 0x936 <rf_polling_rx_packet+0x5a>
     8fa:	31 99       	sbic	0x06, 1	; 6
     8fc:	1c c0       	rjmp	.+56     	; 0x936 <rf_polling_rx_packet+0x5a>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
     8fe:	40 98       	cbi	0x08, 0	; 8
     900:	8f e7       	ldi	r24, 0x7F	; 127
     902:	8e bd       	out	0x2e, r24	; 46
     904:	0d b4       	in	r0, 0x2d	; 45
     906:	07 fe       	sbrs	r0, 7
     908:	fd cf       	rjmp	.-6      	; 0x904 <rf_polling_rx_packet+0x28>
     90a:	1e bc       	out	0x2e, r1	; 46
     90c:	0d b4       	in	r0, 0x2d	; 45
     90e:	07 fe       	sbrs	r0, 7
     910:	fd cf       	rjmp	.-6      	; 0x90c <rf_polling_rx_packet+0x30>
     912:	8e b5       	in	r24, 0x2e	; 46
     914:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
     916:	40 98       	cbi	0x08, 0	; 8
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	8e bd       	out	0x2e, r24	; 46
     91c:	0d b4       	in	r0, 0x2d	; 45
     91e:	07 fe       	sbrs	r0, 7
     920:	fd cf       	rjmp	.-6      	; 0x91c <rf_polling_rx_packet+0x40>
     922:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
     924:	40 98       	cbi	0x08, 0	; 8
     926:	88 e0       	ldi	r24, 0x08	; 8
     928:	8e bd       	out	0x2e, r24	; 46
     92a:	0d b4       	in	r0, 0x2d	; 45
     92c:	07 fe       	sbrs	r0, 7
     92e:	fd cf       	rjmp	.-6      	; 0x92a <rf_polling_rx_packet+0x4e>
     930:	40 9a       	sbi	0x08, 0	; 8
     932:	8f ef       	ldi	r24, 0xFF	; 255
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
#endif
	    return -1;
     934:	eb c1       	rjmp	.+982    	; 0xd0c <rf_polling_rx_packet+0x430>
	}

	// Payload length
	FASTSPI_READ_FIFO_BYTE(length);
     936:	40 98       	cbi	0x08, 0	; 8
     938:	9f e7       	ldi	r25, 0x7F	; 127
     93a:	9e bd       	out	0x2e, r25	; 46
     93c:	0d b4       	in	r0, 0x2d	; 45
     93e:	07 fe       	sbrs	r0, 7
     940:	fd cf       	rjmp	.-6      	; 0x93c <rf_polling_rx_packet+0x60>
     942:	1e bc       	out	0x2e, r1	; 46
     944:	0d b4       	in	r0, 0x2d	; 45
     946:	07 fe       	sbrs	r0, 7
     948:	fd cf       	rjmp	.-6      	; 0x944 <rf_polling_rx_packet+0x68>
     94a:	9e b5       	in	r25, 0x2e	; 46
     94c:	40 9a       	sbi	0x08, 0	; 8
	length &= RF_LENGTH_MASK; // Ignore MSB
     94e:	9f 77       	andi	r25, 0x7F	; 127
    // Ignore the packet if the length is too short
    if(length==0){  
     950:	e1 f4       	brne	.+56     	; 0x98a <rf_polling_rx_packet+0xae>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
     952:	40 98       	cbi	0x08, 0	; 8
     954:	8f e7       	ldi	r24, 0x7F	; 127
     956:	8e bd       	out	0x2e, r24	; 46
     958:	0d b4       	in	r0, 0x2d	; 45
     95a:	07 fe       	sbrs	r0, 7
     95c:	fd cf       	rjmp	.-6      	; 0x958 <rf_polling_rx_packet+0x7c>
     95e:	1e bc       	out	0x2e, r1	; 46
     960:	0d b4       	in	r0, 0x2d	; 45
     962:	07 fe       	sbrs	r0, 7
     964:	fd cf       	rjmp	.-6      	; 0x960 <rf_polling_rx_packet+0x84>
     966:	8e b5       	in	r24, 0x2e	; 46
     968:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
     96a:	40 98       	cbi	0x08, 0	; 8
     96c:	88 e0       	ldi	r24, 0x08	; 8
     96e:	8e bd       	out	0x2e, r24	; 46
     970:	0d b4       	in	r0, 0x2d	; 45
     972:	07 fe       	sbrs	r0, 7
     974:	fd cf       	rjmp	.-6      	; 0x970 <rf_polling_rx_packet+0x94>
     976:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
     978:	40 98       	cbi	0x08, 0	; 8
     97a:	88 e0       	ldi	r24, 0x08	; 8
     97c:	8e bd       	out	0x2e, r24	; 46
     97e:	0d b4       	in	r0, 0x2d	; 45
     980:	07 fe       	sbrs	r0, 7
     982:	fd cf       	rjmp	.-6      	; 0x97e <rf_polling_rx_packet+0xa2>
     984:	40 9a       	sbi	0x08, 0	; 8
     986:	8e ef       	ldi	r24, 0xFE	; 254
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
#endif
	return -2;
     988:	c1 c1       	rjmp	.+898    	; 0xd0c <rf_polling_rx_packet+0x430>
	}
    if (length < RF_ACK_PACKET_SIZE || (length-RF_PACKET_OVERHEAD_SIZE)> rfSettings.pRxInfo->max_length) {
     98a:	95 30       	cpi	r25, 0x05	; 5
     98c:	8c f0       	brlt	.+34     	; 0x9b0 <rf_polling_rx_packet+0xd4>
     98e:	e0 91 26 08 	lds	r30, 0x0826
     992:	f0 91 27 08 	lds	r31, 0x0827
     996:	29 2f       	mov	r18, r25
     998:	33 27       	eor	r19, r19
     99a:	27 fd       	sbrc	r18, 7
     99c:	30 95       	com	r19
     99e:	2b 50       	subi	r18, 0x0B	; 11
     9a0:	30 40       	sbci	r19, 0x00	; 0
     9a2:	44 81       	ldd	r20, Z+4	; 0x04
     9a4:	55 27       	eor	r21, r21
     9a6:	47 fd       	sbrc	r20, 7
     9a8:	50 95       	com	r21
     9aa:	42 17       	cp	r20, r18
     9ac:	53 07       	cpc	r21, r19
     9ae:	ac f5       	brge	.+106    	; 0xa1a <rf_polling_rx_packet+0x13e>
    	FASTSPI_READ_FIFO_GARBAGE(length);
     9b0:	40 98       	cbi	0x08, 0	; 8
     9b2:	8f e7       	ldi	r24, 0x7F	; 127
     9b4:	8e bd       	out	0x2e, r24	; 46
     9b6:	0d b4       	in	r0, 0x2d	; 45
     9b8:	07 fe       	sbrs	r0, 7
     9ba:	fd cf       	rjmp	.-6      	; 0x9b6 <rf_polling_rx_packet+0xda>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	29 2f       	mov	r18, r25
     9c0:	33 27       	eor	r19, r19
     9c2:	27 fd       	sbrc	r18, 7
     9c4:	30 95       	com	r19
     9c6:	05 c0       	rjmp	.+10     	; 0x9d2 <rf_polling_rx_packet+0xf6>
     9c8:	1e bc       	out	0x2e, r1	; 46
     9ca:	0d b4       	in	r0, 0x2d	; 45
     9cc:	07 fe       	sbrs	r0, 7
     9ce:	fd cf       	rjmp	.-6      	; 0x9ca <rf_polling_rx_packet+0xee>
     9d0:	8f 5f       	subi	r24, 0xFF	; 255
     9d2:	48 2f       	mov	r20, r24
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	42 17       	cp	r20, r18
     9d8:	53 07       	cpc	r21, r19
     9da:	14 f4       	brge	.+4      	; 0x9e0 <rf_polling_rx_packet+0x104>
     9dc:	31 99       	sbic	0x06, 1	; 6
     9de:	f4 cf       	rjmp	.-24     	; 0x9c8 <rf_polling_rx_packet+0xec>
     9e0:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_READ_FIFO_BYTE(tmp);  
     9e2:	40 98       	cbi	0x08, 0	; 8
     9e4:	8f e7       	ldi	r24, 0x7F	; 127
     9e6:	8e bd       	out	0x2e, r24	; 46
     9e8:	0d b4       	in	r0, 0x2d	; 45
     9ea:	07 fe       	sbrs	r0, 7
     9ec:	fd cf       	rjmp	.-6      	; 0x9e8 <rf_polling_rx_packet+0x10c>
     9ee:	1e bc       	out	0x2e, r1	; 46
     9f0:	0d b4       	in	r0, 0x2d	; 45
     9f2:	07 fe       	sbrs	r0, 7
     9f4:	fd cf       	rjmp	.-6      	; 0x9f0 <rf_polling_rx_packet+0x114>
     9f6:	8e b5       	in	r24, 0x2e	; 46
     9f8:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
     9fa:	40 98       	cbi	0x08, 0	; 8
     9fc:	88 e0       	ldi	r24, 0x08	; 8
     9fe:	8e bd       	out	0x2e, r24	; 46
     a00:	0d b4       	in	r0, 0x2d	; 45
     a02:	07 fe       	sbrs	r0, 7
     a04:	fd cf       	rjmp	.-6      	; 0xa00 <rf_polling_rx_packet+0x124>
     a06:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
     a08:	40 98       	cbi	0x08, 0	; 8
     a0a:	88 e0       	ldi	r24, 0x08	; 8
     a0c:	8e bd       	out	0x2e, r24	; 46
     a0e:	0d b4       	in	r0, 0x2d	; 45
     a10:	07 fe       	sbrs	r0, 7
     a12:	fd cf       	rjmp	.-6      	; 0xa0e <rf_polling_rx_packet+0x132>
     a14:	40 9a       	sbi	0x08, 0	; 8
     a16:	8d ef       	ldi	r24, 0xFD	; 253
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
#endif
	return -3;
     a18:	79 c1       	rjmp	.+754    	; 0xd0c <rf_polling_rx_packet+0x430>
	//printf_u( "Bad length: %d %d\n",length, rfSettings.pRxInfo->max_length );
    // Otherwise, if the length is valid, then proceed with the rest of the packet
    } else {
        // Register the payload length
        rfSettings.pRxInfo->length = length - RF_PACKET_OVERHEAD_SIZE - CHECKSUM_OVERHEAD;
     a1a:	e0 91 26 08 	lds	r30, 0x0826
     a1e:	f0 91 27 08 	lds	r31, 0x0827
     a22:	9c 50       	subi	r25, 0x0C	; 12
     a24:	93 83       	std	Z+3, r25	; 0x03
	if(ack==true&&rfSettings.pRxInfo->length!=len){
     a26:	88 23       	and	r24, r24
     a28:	71 f0       	breq	.+28     	; 0xa46 <rf_polling_rx_packet+0x16a>
     a2a:	e0 91 26 08 	lds	r30, 0x0826
     a2e:	f0 91 27 08 	lds	r31, 0x0827
     a32:	83 81       	ldd	r24, Z+3	; 0x03
     a34:	99 27       	eor	r25, r25
     a36:	87 fd       	sbrc	r24, 7
     a38:	90 95       	com	r25
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	86 17       	cp	r24, r22
     a3e:	97 07       	cpc	r25, r23
     a40:	11 f0       	breq	.+4      	; 0xa46 <rf_polling_rx_packet+0x16a>
     a42:	8a ef       	ldi	r24, 0xFA	; 250
     a44:	63 c1       	rjmp	.+710    	; 0xd0c <rf_polling_rx_packet+0x430>
	    nrk_sem_post(radio_sem);
#endif
	    return -6;
}
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
     a46:	40 98       	cbi	0x08, 0	; 8
     a48:	8f e7       	ldi	r24, 0x7F	; 127
     a4a:	8e bd       	out	0x2e, r24	; 46
     a4c:	0d b4       	in	r0, 0x2d	; 45
     a4e:	07 fe       	sbrs	r0, 7
     a50:	fd cf       	rjmp	.-6      	; 0xa4c <rf_polling_rx_packet+0x170>
     a52:	fe 01       	movw	r30, r28
     a54:	32 96       	adiw	r30, 0x02	; 2
{
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet(bool ack,uint8_t len)
     a56:	cf 01       	movw	r24, r30
     a58:	02 96       	adiw	r24, 0x02	; 2
	    nrk_sem_post(radio_sem);
#endif
	    return -6;
}
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
     a5a:	1e bc       	out	0x2e, r1	; 46
     a5c:	0d b4       	in	r0, 0x2d	; 45
     a5e:	07 fe       	sbrs	r0, 7
     a60:	fd cf       	rjmp	.-6      	; 0xa5c <rf_polling_rx_packet+0x180>
     a62:	2e b5       	in	r18, 0x2e	; 46
     a64:	21 93       	st	Z+, r18
     a66:	e8 17       	cp	r30, r24
     a68:	f9 07       	cpc	r31, r25
     a6a:	b9 f7       	brne	.-18     	; 0xa5a <rf_polling_rx_packet+0x17e>
     a6c:	40 9a       	sbi	0x08, 0	; 8
        rfSettings.pRxInfo->ackRequest = !!(frameControlField & RF_FCF_ACK_BM);
     a6e:	e0 91 26 08 	lds	r30, 0x0826
     a72:	f0 91 27 08 	lds	r31, 0x0827
     a76:	8a 81       	ldd	r24, Y+2	; 0x02
     a78:	9b 81       	ldd	r25, Y+3	; 0x03
     a7a:	45 e0       	ldi	r20, 0x05	; 5
     a7c:	96 95       	lsr	r25
     a7e:	87 95       	ror	r24
     a80:	4a 95       	dec	r20
     a82:	e1 f7       	brne	.-8      	; 0xa7c <rf_polling_rx_packet+0x1a0>
     a84:	81 70       	andi	r24, 0x01	; 1
     a86:	87 83       	std	Z+7, r24	; 0x07
    	FASTSPI_READ_FIFO_BYTE(rfSettings.pRxInfo->seqNumber);
     a88:	40 98       	cbi	0x08, 0	; 8
     a8a:	8f e7       	ldi	r24, 0x7F	; 127
     a8c:	8e bd       	out	0x2e, r24	; 46
     a8e:	0d b4       	in	r0, 0x2d	; 45
     a90:	07 fe       	sbrs	r0, 7
     a92:	fd cf       	rjmp	.-6      	; 0xa8e <rf_polling_rx_packet+0x1b2>
     a94:	1e bc       	out	0x2e, r1	; 46
     a96:	0d b4       	in	r0, 0x2d	; 45
     a98:	07 fe       	sbrs	r0, 7
     a9a:	fd cf       	rjmp	.-6      	; 0xa96 <rf_polling_rx_packet+0x1ba>
     a9c:	e0 91 26 08 	lds	r30, 0x0826
     aa0:	f0 91 27 08 	lds	r31, 0x0827
     aa4:	8e b5       	in	r24, 0x2e	; 46
     aa6:	80 83       	st	Z, r24
     aa8:	40 9a       	sbi	0x08, 0	; 8

		// Receive the rest of the packet
		} else {
*/
			// Skip the destination PAN and address (that's taken care of by harware address recognition!)
		FASTSPI_READ_FIFO_GARBAGE(4);
     aaa:	40 98       	cbi	0x08, 0	; 8
     aac:	8f e7       	ldi	r24, 0x7F	; 127
     aae:	8e bd       	out	0x2e, r24	; 46
     ab0:	0d b4       	in	r0, 0x2d	; 45
     ab2:	07 fe       	sbrs	r0, 7
     ab4:	fd cf       	rjmp	.-6      	; 0xab0 <rf_polling_rx_packet+0x1d4>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	07 c0       	rjmp	.+14     	; 0xac8 <rf_polling_rx_packet+0x1ec>
     aba:	1e bc       	out	0x2e, r1	; 46
     abc:	0d b4       	in	r0, 0x2d	; 45
     abe:	07 fe       	sbrs	r0, 7
     ac0:	fd cf       	rjmp	.-6      	; 0xabc <rf_polling_rx_packet+0x1e0>
     ac2:	8f 5f       	subi	r24, 0xFF	; 255
     ac4:	84 30       	cpi	r24, 0x04	; 4
     ac6:	11 f0       	breq	.+4      	; 0xacc <rf_polling_rx_packet+0x1f0>
     ac8:	31 99       	sbic	0x06, 1	; 6
     aca:	f7 cf       	rjmp	.-18     	; 0xaba <rf_polling_rx_packet+0x1de>
     acc:	40 9a       	sbi	0x08, 0	; 8

			// Read the source address
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rfSettings.pRxInfo->srcAddr, 2);
     ace:	40 98       	cbi	0x08, 0	; 8
     ad0:	8f e7       	ldi	r24, 0x7F	; 127
     ad2:	8e bd       	out	0x2e, r24	; 46
     ad4:	0d b4       	in	r0, 0x2d	; 45
     ad6:	07 fe       	sbrs	r0, 7
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <rf_polling_rx_packet+0x1f8>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	1e bc       	out	0x2e, r1	; 46
     ae0:	0d b4       	in	r0, 0x2d	; 45
     ae2:	07 fe       	sbrs	r0, 7
     ae4:	fd cf       	rjmp	.-6      	; 0xae0 <rf_polling_rx_packet+0x204>
     ae6:	e0 91 26 08 	lds	r30, 0x0826
     aea:	f0 91 27 08 	lds	r31, 0x0827
     aee:	2e b5       	in	r18, 0x2e	; 46
     af0:	e8 0f       	add	r30, r24
     af2:	f9 1f       	adc	r31, r25
     af4:	21 83       	std	Z+1, r18	; 0x01
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	82 30       	cpi	r24, 0x02	; 2
     afa:	91 05       	cpc	r25, r1
     afc:	81 f7       	brne	.-32     	; 0xade <rf_polling_rx_packet+0x202>
     afe:	40 9a       	sbi	0x08, 0	; 8

		        if(frameControlField & RF_SEC_BM)
     b00:	8a 81       	ldd	r24, Y+2	; 0x02
     b02:	83 ff       	sbrs	r24, 3
     b04:	56 c0       	rjmp	.+172    	; 0xbb2 <rf_polling_rx_packet+0x2d6>
			{
				uint8_t n;
				// READ rx_ctr and set it
				FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rx_ctr, 4);
     b06:	40 98       	cbi	0x08, 0	; 8
     b08:	8f e7       	ldi	r24, 0x7F	; 127
     b0a:	8e bd       	out	0x2e, r24	; 46
     b0c:	0d b4       	in	r0, 0x2d	; 45
     b0e:	07 fe       	sbrs	r0, 7
     b10:	fd cf       	rjmp	.-6      	; 0xb0c <rf_polling_rx_packet+0x230>
     b12:	ed e1       	ldi	r30, 0x1D	; 29
     b14:	f8 e0       	ldi	r31, 0x08	; 8
     b16:	1e bc       	out	0x2e, r1	; 46
     b18:	0d b4       	in	r0, 0x2d	; 45
     b1a:	07 fe       	sbrs	r0, 7
     b1c:	fd cf       	rjmp	.-6      	; 0xb18 <rf_polling_rx_packet+0x23c>
     b1e:	8e b5       	in	r24, 0x2e	; 46
     b20:	81 93       	st	Z+, r24
     b22:	88 e0       	ldi	r24, 0x08	; 8
     b24:	e1 32       	cpi	r30, 0x21	; 33
     b26:	f8 07       	cpc	r31, r24
     b28:	b1 f7       	brne	.-20     	; 0xb16 <rf_polling_rx_packet+0x23a>
     b2a:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[0],(CC2420RAM_RXNONCE+9),2,n); 
     b2c:	40 98       	cbi	0x08, 0	; 8
     b2e:	89 e9       	ldi	r24, 0x99	; 153
     b30:	8e bd       	out	0x2e, r24	; 46
     b32:	0d b4       	in	r0, 0x2d	; 45
     b34:	07 fe       	sbrs	r0, 7
     b36:	fd cf       	rjmp	.-6      	; 0xb32 <rf_polling_rx_packet+0x256>
     b38:	80 e8       	ldi	r24, 0x80	; 128
     b3a:	8e bd       	out	0x2e, r24	; 46
     b3c:	0d b4       	in	r0, 0x2d	; 45
     b3e:	07 fe       	sbrs	r0, 7
     b40:	fd cf       	rjmp	.-6      	; 0xb3c <rf_polling_rx_packet+0x260>
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	81 50       	subi	r24, 0x01	; 1
     b46:	e8 2f       	mov	r30, r24
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	e3 5e       	subi	r30, 0xE3	; 227
     b4c:	f7 4f       	sbci	r31, 0xF7	; 247
     b4e:	90 81       	ld	r25, Z
     b50:	9e bd       	out	0x2e, r25	; 46
     b52:	0d b4       	in	r0, 0x2d	; 45
     b54:	07 fe       	sbrs	r0, 7
     b56:	fd cf       	rjmp	.-6      	; 0xb52 <rf_polling_rx_packet+0x276>
     b58:	88 23       	and	r24, r24
     b5a:	a1 f7       	brne	.-24     	; 0xb44 <rf_polling_rx_packet+0x268>
     b5c:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[2],(CC2420RAM_RXNONCE+11),2,n); 
     b5e:	40 98       	cbi	0x08, 0	; 8
     b60:	8b e9       	ldi	r24, 0x9B	; 155
     b62:	8e bd       	out	0x2e, r24	; 46
     b64:	0d b4       	in	r0, 0x2d	; 45
     b66:	07 fe       	sbrs	r0, 7
     b68:	fd cf       	rjmp	.-6      	; 0xb64 <rf_polling_rx_packet+0x288>
     b6a:	80 e8       	ldi	r24, 0x80	; 128
     b6c:	8e bd       	out	0x2e, r24	; 46
     b6e:	0d b4       	in	r0, 0x2d	; 45
     b70:	07 fe       	sbrs	r0, 7
     b72:	fd cf       	rjmp	.-6      	; 0xb6e <rf_polling_rx_packet+0x292>
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	81 50       	subi	r24, 0x01	; 1
     b78:	e8 2f       	mov	r30, r24
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	e1 5e       	subi	r30, 0xE1	; 225
     b7e:	f7 4f       	sbci	r31, 0xF7	; 247
     b80:	90 81       	ld	r25, Z
     b82:	9e bd       	out	0x2e, r25	; 46
     b84:	0d b4       	in	r0, 0x2d	; 45
     b86:	07 fe       	sbrs	r0, 7
     b88:	fd cf       	rjmp	.-6      	; 0xb84 <rf_polling_rx_packet+0x2a8>
     b8a:	88 23       	and	r24, r24
     b8c:	a1 f7       	brne	.-24     	; 0xb76 <rf_polling_rx_packet+0x29a>
     b8e:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_STROBE(CC2420_SRXDEC);  // if packet is encrypted then decrypt 
     b90:	40 98       	cbi	0x08, 0	; 8
     b92:	8c e0       	ldi	r24, 0x0C	; 12
     b94:	8e bd       	out	0x2e, r24	; 46
     b96:	0d b4       	in	r0, 0x2d	; 45
     b98:	07 fe       	sbrs	r0, 7
     b9a:	fd cf       	rjmp	.-6      	; 0xb96 <rf_polling_rx_packet+0x2ba>
     b9c:	40 9a       	sbi	0x08, 0	; 8
				last_pkt_encrypted=1;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 32 08 	sts	0x0832, r24
        			rfSettings.pRxInfo->length -= 4;
     ba4:	e0 91 26 08 	lds	r30, 0x0826
     ba8:	f0 91 27 08 	lds	r31, 0x0827
     bac:	83 81       	ldd	r24, Z+3	; 0x03
     bae:	84 50       	subi	r24, 0x04	; 4
     bb0:	83 83       	std	Z+3, r24	; 0x03
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
     bb2:	40 98       	cbi	0x08, 0	; 8
     bb4:	8f e7       	ldi	r24, 0x7F	; 127
     bb6:	8e bd       	out	0x2e, r24	; 46
     bb8:	0d b4       	in	r0, 0x2d	; 45
     bba:	07 fe       	sbrs	r0, 7
     bbc:	fd cf       	rjmp	.-6      	; 0xbb8 <rf_polling_rx_packet+0x2dc>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	10 c0       	rjmp	.+32     	; 0xbe2 <rf_polling_rx_packet+0x306>
     bc2:	1e bc       	out	0x2e, r1	; 46
     bc4:	0d b4       	in	r0, 0x2d	; 45
     bc6:	07 fe       	sbrs	r0, 7
     bc8:	fd cf       	rjmp	.-6      	; 0xbc4 <rf_polling_rx_packet+0x2e8>
     bca:	e0 91 26 08 	lds	r30, 0x0826
     bce:	f0 91 27 08 	lds	r31, 0x0827
     bd2:	9e b5       	in	r25, 0x2e	; 46
     bd4:	05 80       	ldd	r0, Z+5	; 0x05
     bd6:	f6 81       	ldd	r31, Z+6	; 0x06
     bd8:	e0 2d       	mov	r30, r0
     bda:	e8 0f       	add	r30, r24
     bdc:	f1 1d       	adc	r31, r1
     bde:	90 83       	st	Z, r25
     be0:	8f 5f       	subi	r24, 0xFF	; 255
     be2:	e0 91 26 08 	lds	r30, 0x0826
     be6:	f0 91 27 08 	lds	r31, 0x0827
     bea:	48 2f       	mov	r20, r24
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	23 81       	ldd	r18, Z+3	; 0x03
     bf0:	33 27       	eor	r19, r19
     bf2:	27 fd       	sbrc	r18, 7
     bf4:	30 95       	com	r19
     bf6:	42 17       	cp	r20, r18
     bf8:	53 07       	cpc	r21, r19
     bfa:	1c f3       	brlt	.-58     	; 0xbc2 <rf_polling_rx_packet+0x2e6>
     bfc:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
     bfe:	40 98       	cbi	0x08, 0	; 8
     c00:	8f e7       	ldi	r24, 0x7F	; 127
     c02:	8e bd       	out	0x2e, r24	; 46
     c04:	0d b4       	in	r0, 0x2d	; 45
     c06:	07 fe       	sbrs	r0, 7
     c08:	fd cf       	rjmp	.-6      	; 0xc04 <rf_polling_rx_packet+0x328>
     c0a:	1e bc       	out	0x2e, r1	; 46
     c0c:	0d b4       	in	r0, 0x2d	; 45
     c0e:	07 fe       	sbrs	r0, 7
     c10:	fd cf       	rjmp	.-6      	; 0xc0c <rf_polling_rx_packet+0x330>
     c12:	8e b5       	in	r24, 0x2e	; 46
     c14:	40 9a       	sbi	0x08, 0	; 8

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
     c16:	40 98       	cbi	0x08, 0	; 8
     c18:	9f e7       	ldi	r25, 0x7F	; 127
     c1a:	9e bd       	out	0x2e, r25	; 46
     c1c:	0d b4       	in	r0, 0x2d	; 45
     c1e:	07 fe       	sbrs	r0, 7
     c20:	fd cf       	rjmp	.-6      	; 0xc1c <rf_polling_rx_packet+0x340>
        			rfSettings.pRxInfo->length -= 4;
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	fe 01       	movw	r30, r28
     c26:	34 96       	adiw	r30, 0x04	; 4
{
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet(bool ack,uint8_t len)
     c28:	ce 01       	movw	r24, r28
     c2a:	06 96       	adiw	r24, 0x06	; 6
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
     c2c:	1e bc       	out	0x2e, r1	; 46
     c2e:	0d b4       	in	r0, 0x2d	; 45
     c30:	07 fe       	sbrs	r0, 7
     c32:	fd cf       	rjmp	.-6      	; 0xc2e <rf_polling_rx_packet+0x352>
     c34:	2e b5       	in	r18, 0x2e	; 46
     c36:	21 93       	st	Z+, r18
     c38:	e8 17       	cp	r30, r24
     c3a:	f9 07       	cpc	r31, r25
     c3c:	b9 f7       	brne	.-18     	; 0xc2c <rf_polling_rx_packet+0x350>
     c3e:	40 9a       	sbi	0x08, 0	; 8
			rfSettings.pRxInfo->rssi = pFooter[0];
     c40:	e0 91 26 08 	lds	r30, 0x0826
     c44:	f0 91 27 08 	lds	r31, 0x0827
     c48:	8c 81       	ldd	r24, Y+4	; 0x04
     c4a:	80 87       	std	Z+8, r24	; 0x08
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
     c50:	0c c0       	rjmp	.+24     	; 0xc6a <rf_polling_rx_packet+0x38e>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
     c52:	e0 91 26 08 	lds	r30, 0x0826
     c56:	f0 91 27 08 	lds	r31, 0x0827
     c5a:	05 80       	ldd	r0, Z+5	; 0x05
     c5c:	f6 81       	ldd	r31, Z+6	; 0x06
     c5e:	e0 2d       	mov	r30, r0
     c60:	e2 0f       	add	r30, r18
     c62:	f3 1f       	adc	r31, r19
     c64:	20 81       	ld	r18, Z
     c66:	82 0f       	add	r24, r18

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
			rfSettings.pRxInfo->rssi = pFooter[0];
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
     c68:	9f 5f       	subi	r25, 0xFF	; 255
     c6a:	e0 91 26 08 	lds	r30, 0x0826
     c6e:	f0 91 27 08 	lds	r31, 0x0827
     c72:	29 2f       	mov	r18, r25
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	43 81       	ldd	r20, Z+3	; 0x03
     c78:	55 27       	eor	r21, r21
     c7a:	47 fd       	sbrc	r20, 7
     c7c:	50 95       	com	r21
     c7e:	24 17       	cp	r18, r20
     c80:	35 07       	cpc	r19, r21
     c82:	3c f3       	brlt	.-50     	; 0xc52 <rf_polling_rx_packet+0x376>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
				//printf( "%d ", rfSettings.pRxInfo->pPayload[i]);
			}

			if(checksum!=rx_checksum) {
     c84:	99 81       	ldd	r25, Y+1	; 0x01
     c86:	89 17       	cp	r24, r25
     c88:	e1 f0       	breq	.+56     	; 0xcc2 <rf_polling_rx_packet+0x3e6>
				//printf( "Checksum failed %d %d\r",rx_checksum, checksum );
	    			// always read 1 byte before flush (data sheet pg 62)
	   			FASTSPI_READ_FIFO_BYTE(tmp);  
     c8a:	40 98       	cbi	0x08, 0	; 8
     c8c:	8f e7       	ldi	r24, 0x7F	; 127
     c8e:	8e bd       	out	0x2e, r24	; 46
     c90:	0d b4       	in	r0, 0x2d	; 45
     c92:	07 fe       	sbrs	r0, 7
     c94:	fd cf       	rjmp	.-6      	; 0xc90 <rf_polling_rx_packet+0x3b4>
     c96:	1e bc       	out	0x2e, r1	; 46
     c98:	0d b4       	in	r0, 0x2d	; 45
     c9a:	07 fe       	sbrs	r0, 7
     c9c:	fd cf       	rjmp	.-6      	; 0xc98 <rf_polling_rx_packet+0x3bc>
     c9e:	8e b5       	in	r24, 0x2e	; 46
     ca0:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
     ca2:	40 98       	cbi	0x08, 0	; 8
     ca4:	88 e0       	ldi	r24, 0x08	; 8
     ca6:	8e bd       	out	0x2e, r24	; 46
     ca8:	0d b4       	in	r0, 0x2d	; 45
     caa:	07 fe       	sbrs	r0, 7
     cac:	fd cf       	rjmp	.-6      	; 0xca8 <rf_polling_rx_packet+0x3cc>
     cae:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
     cb0:	40 98       	cbi	0x08, 0	; 8
     cb2:	88 e0       	ldi	r24, 0x08	; 8
     cb4:	8e bd       	out	0x2e, r24	; 46
     cb6:	0d b4       	in	r0, 0x2d	; 45
     cb8:	07 fe       	sbrs	r0, 7
     cba:	fd cf       	rjmp	.-6      	; 0xcb6 <rf_polling_rx_packet+0x3da>
     cbc:	40 9a       	sbi	0x08, 0	; 8
     cbe:	8c ef       	ldi	r24, 0xFC	; 252
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
#endif
				return -4;
     cc0:	25 c0       	rjmp	.+74     	; 0xd0c <rf_polling_rx_packet+0x430>
			}	
			if (pFooter[1] & RF_CRC_OK_BM) {
     cc2:	8d 81       	ldd	r24, Y+5	; 0x05
     cc4:	87 ff       	sbrs	r24, 7
     cc6:	07 c0       	rjmp	.+14     	; 0xcd6 <rf_polling_rx_packet+0x3fa>
				//rfSettings.pRxInfo = rf_rx_callback(rfSettings.pRxInfo);
				rx_ready++;
     cc8:	80 91 37 08 	lds	r24, 0x0837
     ccc:	8f 5f       	subi	r24, 0xFF	; 255
     cce:	80 93 37 08 	sts	0x0837, r24
     cd2:	81 e0       	ldi	r24, 0x01	; 1
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
#endif
				return 1;
     cd4:	1b c0       	rjmp	.+54     	; 0xd0c <rf_polling_rx_packet+0x430>
			} else
	    		{
	    		// always read 1 byte before flush (data sheet pg 62)
	   		FASTSPI_READ_FIFO_BYTE(tmp);  
     cd6:	40 98       	cbi	0x08, 0	; 8
     cd8:	8f e7       	ldi	r24, 0x7F	; 127
     cda:	8e bd       	out	0x2e, r24	; 46
     cdc:	0d b4       	in	r0, 0x2d	; 45
     cde:	07 fe       	sbrs	r0, 7
     ce0:	fd cf       	rjmp	.-6      	; 0xcdc <rf_polling_rx_packet+0x400>
     ce2:	1e bc       	out	0x2e, r1	; 46
     ce4:	0d b4       	in	r0, 0x2d	; 45
     ce6:	07 fe       	sbrs	r0, 7
     ce8:	fd cf       	rjmp	.-6      	; 0xce4 <rf_polling_rx_packet+0x408>
     cea:	8e b5       	in	r24, 0x2e	; 46
     cec:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_STROBE(CC2420_SFLUSHRX);
     cee:	40 98       	cbi	0x08, 0	; 8
     cf0:	88 e0       	ldi	r24, 0x08	; 8
     cf2:	8e bd       	out	0x2e, r24	; 46
     cf4:	0d b4       	in	r0, 0x2d	; 45
     cf6:	07 fe       	sbrs	r0, 7
     cf8:	fd cf       	rjmp	.-6      	; 0xcf4 <rf_polling_rx_packet+0x418>
     cfa:	40 9a       	sbi	0x08, 0	; 8
	    		FASTSPI_STROBE(CC2420_SFLUSHRX);
     cfc:	40 98       	cbi	0x08, 0	; 8
     cfe:	88 e0       	ldi	r24, 0x08	; 8
     d00:	8e bd       	out	0x2e, r24	; 46
     d02:	0d b4       	in	r0, 0x2d	; 45
     d04:	07 fe       	sbrs	r0, 7
     d06:	fd cf       	rjmp	.-6      	; 0xd02 <rf_polling_rx_packet+0x426>
     d08:	40 9a       	sbi	0x08, 0	; 8
     d0a:	8b ef       	ldi	r24, 0xFB	; 251
    }
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
return 0;
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <rf_rx_packet>:

int8_t rf_rx_packet()
{
int8_t tmp;
if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
     d1c:	80 91 37 08 	lds	r24, 0x0837
     d20:	88 23       	and	r24, r24
     d22:	21 f0       	breq	.+8      	; 0xd2c <rf_rx_packet+0x10>
     d24:	80 91 37 08 	lds	r24, 0x0837
     d28:	10 92 37 08 	sts	0x0837, r1
return 0;
}
     d2c:	08 95       	ret

00000d2e <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
        FASTSPI_STROBE(CC2420_SFLUSHRX);
     d2e:	40 98       	cbi	0x08, 0	; 8
     d30:	88 e0       	ldi	r24, 0x08	; 8
     d32:	8e bd       	out	0x2e, r24	; 46
     d34:	0d b4       	in	r0, 0x2d	; 45
     d36:	07 fe       	sbrs	r0, 7
     d38:	fd cf       	rjmp	.-6      	; 0xd34 <rf_flush_rx_fifo+0x6>
     d3a:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_STROBE(CC2420_SFLUSHRX);
     d3c:	40 98       	cbi	0x08, 0	; 8
     d3e:	88 e0       	ldi	r24, 0x08	; 8
     d40:	8e bd       	out	0x2e, r24	; 46
     d42:	0d b4       	in	r0, 0x2d	; 45
     d44:	07 fe       	sbrs	r0, 7
     d46:	fd cf       	rjmp	.-6      	; 0xd42 <rf_flush_rx_fifo+0x14>
     d48:	40 9a       	sbi	0x08, 0	; 8
}
     d4a:	08 95       	ret

00000d4c <rf_set_cca_thresh>:
uint16_t val;
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif

val=(t<<8) | 0x80;
     d4c:	99 27       	eor	r25, r25
     d4e:	87 fd       	sbrc	r24, 7
     d50:	90 95       	com	r25
     d52:	98 2f       	mov	r25, r24
     d54:	88 27       	eor	r24, r24
     d56:	80 68       	ori	r24, 0x80	; 128
FASTSPI_SETREG(CC2420_RSSI, val); 
     d58:	40 98       	cbi	0x08, 0	; 8
     d5a:	23 e1       	ldi	r18, 0x13	; 19
     d5c:	2e bd       	out	0x2e, r18	; 46
     d5e:	0d b4       	in	r0, 0x2d	; 45
     d60:	07 fe       	sbrs	r0, 7
     d62:	fd cf       	rjmp	.-6      	; 0xd5e <rf_set_cca_thresh+0x12>
     d64:	9e bd       	out	0x2e, r25	; 46
     d66:	0d b4       	in	r0, 0x2d	; 45
     d68:	07 fe       	sbrs	r0, 7
     d6a:	fd cf       	rjmp	.-6      	; 0xd66 <rf_set_cca_thresh+0x1a>
     d6c:	8e bd       	out	0x2e, r24	; 46
     d6e:	0d b4       	in	r0, 0x2d	; 45
     d70:	07 fe       	sbrs	r0, 7
     d72:	fd cf       	rjmp	.-6      	; 0xd6e <rf_set_cca_thresh+0x22>
     d74:	40 9a       	sbi	0x08, 0	; 8

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
     d76:	08 95       	ret

00000d78 <rf_test_mode>:
{

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
     d78:	40 98       	cbi	0x08, 0	; 8
     d7a:	86 e0       	ldi	r24, 0x06	; 6
     d7c:	8e bd       	out	0x2e, r24	; 46
     d7e:	0d b4       	in	r0, 0x2d	; 45
     d80:	07 fe       	sbrs	r0, 7
     d82:	fd cf       	rjmp	.-6      	; 0xd7e <rf_test_mode+0x6>
     d84:	40 9a       	sbi	0x08, 0	; 8
	// RF studio" uses TX_MODE=3 (CC2420_MDMCTRL1=0x050C)
	// to send an unmodulated carrier; data sheet says TX_MODE 
	// can be 2 or 3. So it should not matter...
	// HOWEVER, using (TX_MODE=3) sometimes causes problems when 
	// going back to "data" mode!
	FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0508); // MDMCTRL1 with TX_MODE=2
     d86:	40 98       	cbi	0x08, 0	; 8
     d88:	82 e1       	ldi	r24, 0x12	; 18
     d8a:	8e bd       	out	0x2e, r24	; 46
     d8c:	0d b4       	in	r0, 0x2d	; 45
     d8e:	07 fe       	sbrs	r0, 7
     d90:	fd cf       	rjmp	.-6      	; 0xd8c <rf_test_mode+0x14>
     d92:	85 e0       	ldi	r24, 0x05	; 5
     d94:	8e bd       	out	0x2e, r24	; 46
     d96:	0d b4       	in	r0, 0x2d	; 45
     d98:	07 fe       	sbrs	r0, 7
     d9a:	fd cf       	rjmp	.-6      	; 0xd96 <rf_test_mode+0x1e>
     d9c:	88 e0       	ldi	r24, 0x08	; 8
     d9e:	8e bd       	out	0x2e, r24	; 46
     da0:	0d b4       	in	r0, 0x2d	; 45
     da2:	07 fe       	sbrs	r0, 7
     da4:	fd cf       	rjmp	.-6      	; 0xda0 <rf_test_mode+0x28>
     da6:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_SETREG(CC2420_DACTST, 0x1800); // send unmodulated carrier
     da8:	40 98       	cbi	0x08, 0	; 8
     daa:	8e e2       	ldi	r24, 0x2E	; 46
     dac:	8e bd       	out	0x2e, r24	; 46
     dae:	0d b4       	in	r0, 0x2d	; 45
     db0:	07 fe       	sbrs	r0, 7
     db2:	fd cf       	rjmp	.-6      	; 0xdae <rf_test_mode+0x36>
     db4:	88 e1       	ldi	r24, 0x18	; 24
     db6:	8e bd       	out	0x2e, r24	; 46
     db8:	0d b4       	in	r0, 0x2d	; 45
     dba:	07 fe       	sbrs	r0, 7
     dbc:	fd cf       	rjmp	.-6      	; 0xdb8 <rf_test_mode+0x40>
     dbe:	1e bc       	out	0x2e, r1	; 46
     dc0:	0d b4       	in	r0, 0x2d	; 45
     dc2:	07 fe       	sbrs	r0, 7
     dc4:	fd cf       	rjmp	.-6      	; 0xdc0 <rf_test_mode+0x48>
     dc6:	40 9a       	sbi	0x08, 0	; 8
	rf_flush_rx_fifo();
     dc8:	0e 94 97 06 	call	0xd2e	; 0xd2e <rf_flush_rx_fifo>

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
     dcc:	08 95       	ret

00000dce <rf_data_mode>:
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode() {
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
     dce:	40 98       	cbi	0x08, 0	; 8
     dd0:	86 e0       	ldi	r24, 0x06	; 6
     dd2:	8e bd       	out	0x2e, r24	; 46
     dd4:	0d b4       	in	r0, 0x2d	; 45
     dd6:	07 fe       	sbrs	r0, 7
     dd8:	fd cf       	rjmp	.-6      	; 0xdd4 <rf_data_mode+0x6>
     dda:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // default MDMCTRL1 value
     ddc:	40 98       	cbi	0x08, 0	; 8
     dde:	82 e1       	ldi	r24, 0x12	; 18
     de0:	8e bd       	out	0x2e, r24	; 46
     de2:	0d b4       	in	r0, 0x2d	; 45
     de4:	07 fe       	sbrs	r0, 7
     de6:	fd cf       	rjmp	.-6      	; 0xde2 <rf_data_mode+0x14>
     de8:	85 e0       	ldi	r24, 0x05	; 5
     dea:	8e bd       	out	0x2e, r24	; 46
     dec:	0d b4       	in	r0, 0x2d	; 45
     dee:	07 fe       	sbrs	r0, 7
     df0:	fd cf       	rjmp	.-6      	; 0xdec <rf_data_mode+0x1e>
     df2:	1e bc       	out	0x2e, r1	; 46
     df4:	0d b4       	in	r0, 0x2d	; 45
     df6:	07 fe       	sbrs	r0, 7
     df8:	fd cf       	rjmp	.-6      	; 0xdf4 <rf_data_mode+0x26>
     dfa:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_DACTST, 0); // default value
     dfc:	40 98       	cbi	0x08, 0	; 8
     dfe:	8e e2       	ldi	r24, 0x2E	; 46
     e00:	8e bd       	out	0x2e, r24	; 46
     e02:	0d b4       	in	r0, 0x2d	; 45
     e04:	07 fe       	sbrs	r0, 7
     e06:	fd cf       	rjmp	.-6      	; 0xe02 <rf_data_mode+0x34>
     e08:	1e bc       	out	0x2e, r1	; 46
     e0a:	0d b4       	in	r0, 0x2d	; 45
     e0c:	07 fe       	sbrs	r0, 7
     e0e:	fd cf       	rjmp	.-6      	; 0xe0a <rf_data_mode+0x3c>
     e10:	1e bc       	out	0x2e, r1	; 46
     e12:	0d b4       	in	r0, 0x2d	; 45
     e14:	07 fe       	sbrs	r0, 7
     e16:	fd cf       	rjmp	.-6      	; 0xe12 <rf_data_mode+0x44>
     e18:	40 9a       	sbi	0x08, 0	; 8
        rf_flush_rx_fifo();
     e1a:	0e 94 97 06 	call	0xd2e	; 0xd2e <rf_flush_rx_fifo>
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
     e1e:	08 95       	ret

00000e20 <rf_carrier_on>:
void rf_carrier_on()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif
        FASTSPI_STROBE(CC2420_STXON); // tell radio to start sending
     e20:	40 98       	cbi	0x08, 0	; 8
     e22:	84 e0       	ldi	r24, 0x04	; 4
     e24:	8e bd       	out	0x2e, r24	; 46
     e26:	0d b4       	in	r0, 0x2d	; 45
     e28:	07 fe       	sbrs	r0, 7
     e2a:	fd cf       	rjmp	.-6      	; 0xe26 <rf_carrier_on+0x6>
     e2c:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
     e2e:	08 95       	ret

00000e30 <rf_carrier_off>:
void rf_carrier_off()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); // stop radio
     e30:	40 98       	cbi	0x08, 0	; 8
     e32:	86 e0       	ldi	r24, 0x06	; 6
     e34:	8e bd       	out	0x2e, r24	; 46
     e36:	0d b4       	in	r0, 0x2d	; 45
     e38:	07 fe       	sbrs	r0, 7
     e3a:	fd cf       	rjmp	.-6      	; 0xe36 <rf_carrier_off+0x6>
     e3c:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
}
     e3e:	08 95       	ret

00000e40 <rf_tx_packet>:
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <rf_tx_packet+0xc>
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <rf_tx_packet+0xe>
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	fc 01       	movw	r30, r24
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
#endif

if(security_enable)
     e54:	80 91 23 08 	lds	r24, 0x0823
     e58:	88 23       	and	r24, r24
     e5a:	39 f0       	breq	.+14     	; 0xe6a <rf_tx_packet+0x2a>
    FASTSPI_STROBE(CC2420_STXENC);
     e5c:	40 98       	cbi	0x08, 0	; 8
     e5e:	9d e0       	ldi	r25, 0x0D	; 13
     e60:	9e bd       	out	0x2e, r25	; 46
     e62:	0d b4       	in	r0, 0x2d	; 45
     e64:	07 fe       	sbrs	r0, 7
     e66:	fd cf       	rjmp	.-6      	; 0xe62 <rf_tx_packet+0x22>
     e68:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
     e6a:	1a 82       	std	Y+2, r1	; 0x02
    for(i=0; i<pRTI->length; i++ )
     e6c:	92 81       	ldd	r25, Z+2	; 0x02
     e6e:	49 2f       	mov	r20, r25
     e70:	55 27       	eor	r21, r21
     e72:	47 fd       	sbrc	r20, 7
     e74:	50 95       	com	r21
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	09 c0       	rjmp	.+18     	; 0xe8c <rf_tx_packet+0x4c>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
     e7a:	a3 81       	ldd	r26, Z+3	; 0x03
     e7c:	b4 81       	ldd	r27, Z+4	; 0x04
     e7e:	a6 0f       	add	r26, r22
     e80:	b7 1f       	adc	r27, r23
     e82:	3a 81       	ldd	r19, Y+2	; 0x02
     e84:	6c 91       	ld	r22, X
     e86:	36 0f       	add	r19, r22
     e88:	3a 83       	std	Y+2, r19	; 0x02

if(security_enable)
    FASTSPI_STROBE(CC2420_STXENC);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
     e8a:	2f 5f       	subi	r18, 0xFF	; 255
     e8c:	62 2f       	mov	r22, r18
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	64 17       	cp	r22, r20
     e92:	75 07       	cpc	r23, r21
     e94:	94 f3       	brlt	.-28     	; 0xe7a <rf_tx_packet+0x3a>
    }
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)

    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a slighly higher later since they assume TDMA
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
     e96:	29 2f       	mov	r18, r25
     e98:	24 5f       	subi	r18, 0xF4	; 244
     e9a:	29 83       	std	Y+1, r18	; 0x01
    if(security_enable) packetLength+=4;  // for CTR counter
     e9c:	88 23       	and	r24, r24
     e9e:	11 f0       	breq	.+4      	; 0xea4 <rf_tx_packet+0x64>
     ea0:	90 5f       	subi	r25, 0xF0	; 240
     ea2:	99 83       	std	Y+1, r25	; 0x01

   	// XXX 2 below are hacks...
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
    // Wait until the transceiver is idle
    while (FIFOP_IS_1 || SFD_IS_1);
     ea4:	67 99       	sbic	0x0c, 7	; 12
     ea6:	fe cf       	rjmp	.-4      	; 0xea4 <rf_tx_packet+0x64>
     ea8:	4e 99       	sbic	0x09, 6	; 9
     eaa:	fc cf       	rjmp	.-8      	; 0xea4 <rf_tx_packet+0x64>
    // Turn off global interrupts to avoid interference on the SPI interface
    DISABLE_GLOBAL_INT();
     eac:	f8 94       	cli
	// Flush the TX FIFO just in case...
    FASTSPI_STROBE(CC2420_SFLUSHTX);
     eae:	40 98       	cbi	0x08, 0	; 8
     eb0:	99 e0       	ldi	r25, 0x09	; 9
     eb2:	9e bd       	out	0x2e, r25	; 46
     eb4:	0d b4       	in	r0, 0x2d	; 45
     eb6:	07 fe       	sbrs	r0, 7
     eb8:	fd cf       	rjmp	.-6      	; 0xeb4 <rf_tx_packet+0x74>
     eba:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHTX);
     ebc:	40 98       	cbi	0x08, 0	; 8
     ebe:	99 e0       	ldi	r25, 0x09	; 9
     ec0:	9e bd       	out	0x2e, r25	; 46
     ec2:	0d b4       	in	r0, 0x2d	; 45
     ec4:	07 fe       	sbrs	r0, 7
     ec6:	fd cf       	rjmp	.-6      	; 0xec2 <rf_tx_packet+0x82>
     ec8:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/

    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
     eca:	40 98       	cbi	0x08, 0	; 8
     ecc:	9e e3       	ldi	r25, 0x3E	; 62
     ece:	9e bd       	out	0x2e, r25	; 46
     ed0:	0d b4       	in	r0, 0x2d	; 45
     ed2:	07 fe       	sbrs	r0, 7
     ed4:	fd cf       	rjmp	.-6      	; 0xed0 <rf_tx_packet+0x90>
     ed6:	99 81       	ldd	r25, Y+1	; 0x01
     ed8:	9e bd       	out	0x2e, r25	; 46
     eda:	0d b4       	in	r0, 0x2d	; 45
     edc:	07 fe       	sbrs	r0, 7
     ede:	fd cf       	rjmp	.-6      	; 0xeda <rf_tx_packet+0x9a>
     ee0:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = RF_FCF_NOACK;   // default
     ee2:	21 e4       	ldi	r18, 0x41	; 65
     ee4:	38 e8       	ldi	r19, 0x88	; 136
     ee6:	3c 83       	std	Y+4, r19	; 0x04
     ee8:	2b 83       	std	Y+3, r18	; 0x03
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
     eea:	90 91 31 08 	lds	r25, 0x0831
     eee:	99 23       	and	r25, r25
     ef0:	21 f0       	breq	.+8      	; 0xefa <rf_tx_packet+0xba>
     ef2:	21 e6       	ldi	r18, 0x61	; 97
     ef4:	38 e8       	ldi	r19, 0x88	; 136
     ef6:	3c 83       	std	Y+4, r19	; 0x04
     ef8:	2b 83       	std	Y+3, r18	; 0x03
    if(security_enable) frameControlField |= RF_SEC_BM;
     efa:	88 23       	and	r24, r24
     efc:	29 f0       	breq	.+10     	; 0xf08 <rf_tx_packet+0xc8>
     efe:	2b 81       	ldd	r18, Y+3	; 0x03
     f00:	3c 81       	ldd	r19, Y+4	; 0x04
     f02:	28 60       	ori	r18, 0x08	; 8
     f04:	3c 83       	std	Y+4, r19	; 0x04
     f06:	2b 83       	std	Y+3, r18	; 0x03
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
     f08:	40 98       	cbi	0x08, 0	; 8
     f0a:	9e e3       	ldi	r25, 0x3E	; 62
     f0c:	9e bd       	out	0x2e, r25	; 46
     f0e:	0d b4       	in	r0, 0x2d	; 45
     f10:	07 fe       	sbrs	r0, 7
     f12:	fd cf       	rjmp	.-6      	; 0xf0e <rf_tx_packet+0xce>
     f14:	de 01       	movw	r26, r28
     f16:	13 96       	adiw	r26, 0x03	; 3
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
     f18:	9e 01       	movw	r18, r28
     f1a:	2b 5f       	subi	r18, 0xFB	; 251
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255

    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = RF_FCF_NOACK;   // default
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    if(security_enable) frameControlField |= RF_SEC_BM;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
     f1e:	9c 91       	ld	r25, X
     f20:	9e bd       	out	0x2e, r25	; 46
     f22:	0d b4       	in	r0, 0x2d	; 45
     f24:	07 fe       	sbrs	r0, 7
     f26:	fd cf       	rjmp	.-6      	; 0xf22 <rf_tx_packet+0xe2>
     f28:	11 96       	adiw	r26, 0x01	; 1
     f2a:	a2 17       	cp	r26, r18
     f2c:	b3 07       	cpc	r27, r19
     f2e:	b9 f7       	brne	.-18     	; 0xf1e <rf_tx_packet+0xde>
     f30:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
     f32:	40 98       	cbi	0x08, 0	; 8
     f34:	9e e3       	ldi	r25, 0x3E	; 62
     f36:	9e bd       	out	0x2e, r25	; 46
     f38:	0d b4       	in	r0, 0x2d	; 45
     f3a:	07 fe       	sbrs	r0, 7
     f3c:	fd cf       	rjmp	.-6      	; 0xf38 <rf_tx_packet+0xf8>
     f3e:	90 91 28 08 	lds	r25, 0x0828
     f42:	9e bd       	out	0x2e, r25	; 46
     f44:	0d b4       	in	r0, 0x2d	; 45
     f46:	07 fe       	sbrs	r0, 7
     f48:	fd cf       	rjmp	.-6      	; 0xf44 <rf_tx_packet+0x104>
     f4a:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
     f4c:	40 98       	cbi	0x08, 0	; 8
     f4e:	9e e3       	ldi	r25, 0x3E	; 62
     f50:	9e bd       	out	0x2e, r25	; 46
     f52:	0d b4       	in	r0, 0x2d	; 45
     f54:	07 fe       	sbrs	r0, 7
     f56:	fd cf       	rjmp	.-6      	; 0xf52 <rf_tx_packet+0x112>
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	d9 01       	movw	r26, r18
     f5e:	aa 5d       	subi	r26, 0xDA	; 218
     f60:	b7 4f       	sbci	r27, 0xF7	; 247
     f62:	14 96       	adiw	r26, 0x04	; 4
     f64:	9c 91       	ld	r25, X
     f66:	14 97       	sbiw	r26, 0x04	; 4
     f68:	9e bd       	out	0x2e, r25	; 46
     f6a:	0d b4       	in	r0, 0x2d	; 45
     f6c:	07 fe       	sbrs	r0, 7
     f6e:	fd cf       	rjmp	.-6      	; 0xf6a <rf_tx_packet+0x12a>
     f70:	2f 5f       	subi	r18, 0xFF	; 255
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	89 f7       	brne	.-30     	; 0xf5c <rf_tx_packet+0x11c>
     f7a:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
     f7c:	40 98       	cbi	0x08, 0	; 8
     f7e:	9e e3       	ldi	r25, 0x3E	; 62
     f80:	9e bd       	out	0x2e, r25	; 46
     f82:	0d b4       	in	r0, 0x2d	; 45
     f84:	07 fe       	sbrs	r0, 7
     f86:	fd cf       	rjmp	.-6      	; 0xf82 <rf_tx_packet+0x142>
     f88:	df 01       	movw	r26, r30
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
     f8a:	9f 01       	movw	r18, r30
     f8c:	2e 5f       	subi	r18, 0xFE	; 254
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    if(security_enable) frameControlField |= RF_SEC_BM;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
     f90:	9c 91       	ld	r25, X
     f92:	9e bd       	out	0x2e, r25	; 46
     f94:	0d b4       	in	r0, 0x2d	; 45
     f96:	07 fe       	sbrs	r0, 7
     f98:	fd cf       	rjmp	.-6      	; 0xf94 <rf_tx_packet+0x154>
     f9a:	11 96       	adiw	r26, 0x01	; 1
     f9c:	a2 17       	cp	r26, r18
     f9e:	b3 07       	cpc	r27, r19
     fa0:	b9 f7       	brne	.-18     	; 0xf90 <rf_tx_packet+0x150>
     fa2:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
     fa4:	40 98       	cbi	0x08, 0	; 8
     fa6:	9e e3       	ldi	r25, 0x3E	; 62
     fa8:	9e bd       	out	0x2e, r25	; 46
     faa:	0d b4       	in	r0, 0x2d	; 45
     fac:	07 fe       	sbrs	r0, 7
     fae:	fd cf       	rjmp	.-6      	; 0xfaa <rf_tx_packet+0x16a>
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	d9 01       	movw	r26, r18
     fb6:	aa 5d       	subi	r26, 0xDA	; 218
     fb8:	b7 4f       	sbci	r27, 0xF7	; 247
     fba:	16 96       	adiw	r26, 0x06	; 6
     fbc:	9c 91       	ld	r25, X
     fbe:	16 97       	sbiw	r26, 0x06	; 6
     fc0:	9e bd       	out	0x2e, r25	; 46
     fc2:	0d b4       	in	r0, 0x2d	; 45
     fc4:	07 fe       	sbrs	r0, 7
     fc6:	fd cf       	rjmp	.-6      	; 0xfc2 <rf_tx_packet+0x182>
     fc8:	2f 5f       	subi	r18, 0xFF	; 255
     fca:	3f 4f       	sbci	r19, 0xFF	; 255
     fcc:	22 30       	cpi	r18, 0x02	; 2
     fce:	31 05       	cpc	r19, r1
     fd0:	89 f7       	brne	.-30     	; 0xfb4 <rf_tx_packet+0x174>
     fd2:	40 9a       	sbi	0x08, 0	; 8
    if(security_enable)
     fd4:	88 23       	and	r24, r24
     fd6:	99 f0       	breq	.+38     	; 0xffe <rf_tx_packet+0x1be>
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
     fd8:	40 98       	cbi	0x08, 0	; 8
     fda:	8e e3       	ldi	r24, 0x3E	; 62
     fdc:	8e bd       	out	0x2e, r24	; 46
     fde:	0d b4       	in	r0, 0x2d	; 45
     fe0:	07 fe       	sbrs	r0, 7
     fe2:	fd cf       	rjmp	.-6      	; 0xfde <rf_tx_packet+0x19e>
     fe4:	a3 e3       	ldi	r26, 0x33	; 51
     fe6:	b8 e0       	ldi	r27, 0x08	; 8
     fe8:	8c 91       	ld	r24, X
     fea:	8e bd       	out	0x2e, r24	; 46
     fec:	0d b4       	in	r0, 0x2d	; 45
     fee:	07 fe       	sbrs	r0, 7
     ff0:	fd cf       	rjmp	.-6      	; 0xfec <rf_tx_packet+0x1ac>
     ff2:	11 96       	adiw	r26, 0x01	; 1
     ff4:	88 e0       	ldi	r24, 0x08	; 8
     ff6:	a7 33       	cpi	r26, 0x37	; 55
     ff8:	b8 07       	cpc	r27, r24
     ffa:	b1 f7       	brne	.-20     	; 0xfe8 <rf_tx_packet+0x1a8>
     ffc:	40 9a       	sbi	0x08, 0	; 8
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
     ffe:	40 98       	cbi	0x08, 0	; 8
    1000:	8e e3       	ldi	r24, 0x3E	; 62
    1002:	8e bd       	out	0x2e, r24	; 46
    1004:	0d b4       	in	r0, 0x2d	; 45
    1006:	07 fe       	sbrs	r0, 7
    1008:	fd cf       	rjmp	.-6      	; 0x1004 <rf_tx_packet+0x1c4>
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	0a c0       	rjmp	.+20     	; 0x1022 <rf_tx_packet+0x1e2>
    100e:	a3 81       	ldd	r26, Z+3	; 0x03
    1010:	b4 81       	ldd	r27, Z+4	; 0x04
    1012:	a2 0f       	add	r26, r18
    1014:	b3 1f       	adc	r27, r19
    1016:	9c 91       	ld	r25, X
    1018:	9e bd       	out	0x2e, r25	; 46
    101a:	0d b4       	in	r0, 0x2d	; 45
    101c:	07 fe       	sbrs	r0, 7
    101e:	fd cf       	rjmp	.-6      	; 0x101a <rf_tx_packet+0x1da>
    1020:	8f 5f       	subi	r24, 0xFF	; 255
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	24 17       	cp	r18, r20
    1028:	35 07       	cpc	r19, r21
    102a:	8c f3       	brlt	.-30     	; 0x100e <rf_tx_packet+0x1ce>
    102c:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    102e:	40 98       	cbi	0x08, 0	; 8
    1030:	8e e3       	ldi	r24, 0x3E	; 62
    1032:	8e bd       	out	0x2e, r24	; 46
    1034:	0d b4       	in	r0, 0x2d	; 45
    1036:	07 fe       	sbrs	r0, 7
    1038:	fd cf       	rjmp	.-6      	; 0x1034 <rf_tx_packet+0x1f4>
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	8e bd       	out	0x2e, r24	; 46
    103e:	0d b4       	in	r0, 0x2d	; 45
    1040:	07 fe       	sbrs	r0, 7
    1042:	fd cf       	rjmp	.-6      	; 0x103e <rf_tx_packet+0x1fe>
    1044:	40 9a       	sbi	0x08, 0	; 8

if (pRTI->cca == TRUE)
    1046:	85 81       	ldd	r24, Z+5	; 0x05
    1048:	88 23       	and	r24, r24
    104a:	b1 f1       	breq	.+108    	; 0x10b8 <rf_tx_packet+0x278>
{
    uint8_t cnt;
     if (!rfSettings.receiveOn)
    104c:	80 91 2e 08 	lds	r24, 0x082E
    1050:	88 23       	and	r24, r24
    1052:	39 f4       	brne	.+14     	; 0x1062 <rf_tx_packet+0x222>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    1054:	40 98       	cbi	0x08, 0	; 8
    1056:	83 e0       	ldi	r24, 0x03	; 3
    1058:	8e bd       	out	0x2e, r24	; 46
    105a:	0d b4       	in	r0, 0x2d	; 45
    105c:	07 fe       	sbrs	r0, 7
    105e:	fd cf       	rjmp	.-6      	; 0x105a <rf_tx_packet+0x21a>
    1060:	40 9a       	sbi	0x08, 0	; 8
	}
      
      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    1062:	40 98       	cbi	0x08, 0	; 8
    1064:	1e bc       	out	0x2e, r1	; 46
    1066:	0d b4       	in	r0, 0x2d	; 45
    1068:	07 fe       	sbrs	r0, 7
    106a:	fd cf       	rjmp	.-6      	; 0x1066 <rf_tx_packet+0x226>
    106c:	8e b5       	in	r24, 0x2e	; 46
    106e:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));      
    1070:	81 ff       	sbrs	r24, 1
    1072:	f7 cf       	rjmp	.-18     	; 0x1062 <rf_tx_packet+0x222>
    1074:	10 e0       	ldi	r17, 0x00	; 0
      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    1076:	05 e0       	ldi	r16, 0x05	; 5
    1078:	40 98       	cbi	0x08, 0	; 8
    107a:	0e bd       	out	0x2e, r16	; 46
    107c:	0d b4       	in	r0, 0x2d	; 45
    107e:	07 fe       	sbrs	r0, 7
    1080:	fd cf       	rjmp	.-6      	; 0x107c <rf_tx_packet+0x23c>
    1082:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    1084:	40 98       	cbi	0x08, 0	; 8
    1086:	1e bc       	out	0x2e, r1	; 46
    1088:	0d b4       	in	r0, 0x2d	; 45
    108a:	07 fe       	sbrs	r0, 7
    108c:	fd cf       	rjmp	.-6      	; 0x1088 <rf_tx_packet+0x248>
    108e:	fe b4       	in	r15, 0x2e	; 46
    1090:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    1092:	1f 5f       	subi	r17, 0xFF	; 255
	  if (cnt > 100)
    1094:	15 36       	cpi	r17, 0x65	; 101
    1096:	49 f4       	brne	.+18     	; 0x10aa <rf_tx_packet+0x26a>
	    {
	      ENABLE_GLOBAL_INT ();
    1098:	78 94       	sei
	      nrk_sem_post(radio_sem);
    109a:	80 91 21 08 	lds	r24, 0x0821
    109e:	90 91 22 08 	lds	r25, 0x0822
    10a2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <nrk_sem_post>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
	      return FALSE;
    10a8:	48 c0       	rjmp	.+144    	; 0x113a <rf_tx_packet+0x2fa>
	    }
	  halWait (100);
    10aa:	84 e6       	ldi	r24, 0x64	; 100
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    10b2:	f3 fe       	sbrs	r15, 3
    10b4:	e1 cf       	rjmp	.-62     	; 0x1078 <rf_tx_packet+0x238>
    10b6:	07 c0       	rjmp	.+14     	; 0x10c6 <rf_tx_packet+0x286>
    }
  else
    FASTSPI_STROBE (CC2420_STXON); 
    10b8:	40 98       	cbi	0x08, 0	; 8
    10ba:	84 e0       	ldi	r24, 0x04	; 4
    10bc:	8e bd       	out	0x2e, r24	; 46
    10be:	0d b4       	in	r0, 0x2d	; 45
    10c0:	07 fe       	sbrs	r0, 7
    10c2:	fd cf       	rjmp	.-6      	; 0x10be <rf_tx_packet+0x27e>
    10c4:	40 9a       	sbi	0x08, 0	; 8


  ENABLE_GLOBAL_INT();
    10c6:	78 94       	sei
	// Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
  while (!SFD_IS_1);
    10c8:	4e 9b       	sbis	0x09, 6	; 9
    10ca:	fe cf       	rjmp	.-4      	; 0x10c8 <rf_tx_packet+0x288>
  success = TRUE;

	// Turn interrupts back on
//	ENABLE_GLOBAL_INT();

    while (SFD_IS_1); // wait for packet to finish
    10cc:	4e 99       	sbic	0x09, 6	; 9
    10ce:	fe cf       	rjmp	.-4      	; 0x10cc <rf_tx_packet+0x28c>

    // Wait for the acknowledge to be received, if any
    if (auto_ack_enable) {
    10d0:	80 91 31 08 	lds	r24, 0x0831
    10d4:	88 23       	and	r24, r24
    10d6:	91 f0       	breq	.+36     	; 0x10fc <rf_tx_packet+0x2bc>
		//	while (SFD_IS_1);
        // We'll enter RX automatically, so just wait until we can be sure that the 
	// ack reception should have finished
        // The timeout consists of a 12-symbol turnaround time, the ack packet duration, 
	// and a small margin
        halWait((12 * RF_SYMBOL_DURATION) + (RF_ACK_DURATION) + (2 * RF_SYMBOL_DURATION) + 100);
    10d8:	84 ea       	ldi	r24, 0xA4	; 164
    10da:	92 e0       	ldi	r25, 0x02	; 2
    10dc:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <halWait>

	if(FIFO_IS_1)
    10e0:	31 9b       	sbis	0x06, 1	; 6
    10e2:	0e c0       	rjmp	.+28     	; 0x1100 <rf_tx_packet+0x2c0>
	{
	FASTSPI_READ_FIFO_BYTE(length);
    10e4:	40 98       	cbi	0x08, 0	; 8
    10e6:	8f e7       	ldi	r24, 0x7F	; 127
    10e8:	8e bd       	out	0x2e, r24	; 46
    10ea:	0d b4       	in	r0, 0x2d	; 45
    10ec:	07 fe       	sbrs	r0, 7
    10ee:	fd cf       	rjmp	.-6      	; 0x10ea <rf_tx_packet+0x2aa>
    10f0:	1e bc       	out	0x2e, r1	; 46
    10f2:	0d b4       	in	r0, 0x2d	; 45
    10f4:	07 fe       	sbrs	r0, 7
    10f6:	fd cf       	rjmp	.-6      	; 0x10f2 <rf_tx_packet+0x2b2>
    10f8:	8e b5       	in	r24, 0x2e	; 46
    10fa:	40 9a       	sbi	0x08, 0	; 8
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	0f c0       	rjmp	.+30     	; 0x111e <rf_tx_packet+0x2de>
	length &= RF_LENGTH_MASK; // Ignore MSB
	    success = TRUE;

	}else
	{
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1100:	40 98       	cbi	0x08, 0	; 8
    1102:	88 e0       	ldi	r24, 0x08	; 8
    1104:	8e bd       	out	0x2e, r24	; 46
    1106:	0d b4       	in	r0, 0x2d	; 45
    1108:	07 fe       	sbrs	r0, 7
    110a:	fd cf       	rjmp	.-6      	; 0x1106 <rf_tx_packet+0x2c6>
    110c:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    110e:	40 98       	cbi	0x08, 0	; 8
    1110:	88 e0       	ldi	r24, 0x08	; 8
    1112:	8e bd       	out	0x2e, r24	; 46
    1114:	0d b4       	in	r0, 0x2d	; 45
    1116:	07 fe       	sbrs	r0, 7
    1118:	fd cf       	rjmp	.-6      	; 0x1114 <rf_tx_packet+0x2d4>
    111a:	40 9a       	sbi	0x08, 0	; 8
    111c:	80 e0       	ldi	r24, 0x00	; 0
    }

    
	// Turn off the receiver if it should not continue to be enabled
    
    DISABLE_GLOBAL_INT();	
    111e:	f8 94       	cli
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
    
	FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    1120:	40 98       	cbi	0x08, 0	; 8
    1122:	96 e0       	ldi	r25, 0x06	; 6
    1124:	9e bd       	out	0x2e, r25	; 46
    1126:	0d b4       	in	r0, 0x2d	; 45
    1128:	07 fe       	sbrs	r0, 7
    112a:	fd cf       	rjmp	.-6      	; 0x1126 <rf_tx_packet+0x2e6>
    112c:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    112e:	78 94       	sei

    // agr XXX hack to test time issue
    //rf_rx_on(); 

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    1130:	90 91 28 08 	lds	r25, 0x0828
    1134:	9f 5f       	subi	r25, 0xFF	; 255
    1136:	90 93 28 08 	sts	0x0828, r25
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
#endif
    return success;

}
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	08 95       	ret

0000114e <rf_tx_tdma_packet>:

/**************************************************************************
This function is the same as normal TX, only it records actual transmission
starting time for calculating offset for SYNC
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time, uint16_t *tx_start_time) {
    114e:	af 92       	push	r10
    1150:	bf 92       	push	r11
    1152:	cf 92       	push	r12
    1154:	df 92       	push	r13
    1156:	ef 92       	push	r14
    1158:	ff 92       	push	r15
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	00 d0       	rcall	.+0      	; 0x1164 <rf_tx_tdma_packet+0x16>
    1164:	00 d0       	rcall	.+0      	; 0x1166 <rf_tx_tdma_packet+0x18>
    1166:	0f 92       	push	r0
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	8c 01       	movw	r16, r24
    116e:	7b 01       	movw	r14, r22
    1170:	5a 01       	movw	r10, r20
    1172:	69 01       	movw	r12, r18
	uint8_t timestamp;

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend (radio_sem);
#endif
	timestamp=_nrk_os_timer_get();
    1174:	0e 94 85 21 	call	0x430a	; 0x430a <_nrk_os_timer_get>
	// XXX 2 below are hacks...
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1178:	40 98       	cbi	0x08, 0	; 8
    117a:	88 e0       	ldi	r24, 0x08	; 8
    117c:	8e bd       	out	0x2e, r24	; 46
    117e:	0d b4       	in	r0, 0x2d	; 45
    1180:	07 fe       	sbrs	r0, 7
    1182:	fd cf       	rjmp	.-6      	; 0x117e <rf_tx_tdma_packet+0x30>
    1184:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1186:	40 98       	cbi	0x08, 0	; 8
    1188:	88 e0       	ldi	r24, 0x08	; 8
    118a:	8e bd       	out	0x2e, r24	; 46
    118c:	0d b4       	in	r0, 0x2d	; 45
    118e:	07 fe       	sbrs	r0, 7
    1190:	fd cf       	rjmp	.-6      	; 0x118c <rf_tx_tdma_packet+0x3e>
    1192:	40 9a       	sbi	0x08, 0	; 8
    // Wait until the transceiver is idle
     while (FIFOP_IS_1 || SFD_IS_1);
    1194:	67 99       	sbic	0x0c, 7	; 12
    1196:	fe cf       	rjmp	.-4      	; 0x1194 <rf_tx_tdma_packet+0x46>
    1198:	4e 99       	sbic	0x09, 6	; 9
    119a:	fc cf       	rjmp	.-8      	; 0x1194 <rf_tx_tdma_packet+0x46>
    // Turn off global interrupts to avoid interference on the SPI interface
      DISABLE_GLOBAL_INT();
    119c:	f8 94       	cli
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    119e:	40 98       	cbi	0x08, 0	; 8
    11a0:	89 e0       	ldi	r24, 0x09	; 9
    11a2:	8e bd       	out	0x2e, r24	; 46
    11a4:	0d b4       	in	r0, 0x2d	; 45
    11a6:	07 fe       	sbrs	r0, 7
    11a8:	fd cf       	rjmp	.-6      	; 0x11a4 <rf_tx_tdma_packet+0x56>
    11aa:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    11ac:	40 98       	cbi	0x08, 0	; 8
    11ae:	89 e0       	ldi	r24, 0x09	; 9
    11b0:	8e bd       	out	0x2e, r24	; 46
    11b2:	0d b4       	in	r0, 0x2d	; 45
    11b4:	07 fe       	sbrs	r0, 7
    11b6:	fd cf       	rjmp	.-6      	; 0x11b2 <rf_tx_tdma_packet+0x64>
    11b8:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    11ba:	1a 82       	std	Y+2, r1	; 0x02
    for(i=0; i<pRTI->length; i++ )
    11bc:	d8 01       	movw	r26, r16
    11be:	12 96       	adiw	r26, 0x02	; 2
    11c0:	2c 91       	ld	r18, X
    11c2:	12 97       	sbiw	r26, 0x02	; 2
    11c4:	62 2f       	mov	r22, r18
    11c6:	77 27       	eor	r23, r23
    11c8:	67 fd       	sbrc	r22, 7
    11ca:	70 95       	com	r23
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	0c c0       	rjmp	.+24     	; 0x11e8 <rf_tx_tdma_packet+0x9a>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    11d0:	d8 01       	movw	r26, r16
    11d2:	13 96       	adiw	r26, 0x03	; 3
    11d4:	ed 91       	ld	r30, X+
    11d6:	fc 91       	ld	r31, X
    11d8:	14 97       	sbiw	r26, 0x04	; 4
    11da:	e4 0f       	add	r30, r20
    11dc:	f5 1f       	adc	r31, r21
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	30 81       	ld	r19, Z
    11e2:	93 0f       	add	r25, r19
    11e4:	9a 83       	std	Y+2, r25	; 0x02
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
	FASTSPI_STROBE(CC2420_SFLUSHTX);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    11e6:	8f 5f       	subi	r24, 0xFF	; 255
    11e8:	48 2f       	mov	r20, r24
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	46 17       	cp	r20, r22
    11ee:	57 07       	cpc	r21, r23
    11f0:	7c f3       	brlt	.-34     	; 0x11d0 <rf_tx_tdma_packet+0x82>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    }
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    11f2:	82 2f       	mov	r24, r18
    11f4:	84 5f       	subi	r24, 0xF4	; 244
    11f6:	89 83       	std	Y+1, r24	; 0x01
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    11f8:	40 98       	cbi	0x08, 0	; 8
    11fa:	9e e3       	ldi	r25, 0x3E	; 62
    11fc:	9e bd       	out	0x2e, r25	; 46
    11fe:	0d b4       	in	r0, 0x2d	; 45
    1200:	07 fe       	sbrs	r0, 7
    1202:	fd cf       	rjmp	.-6      	; 0x11fe <rf_tx_tdma_packet+0xb0>
    1204:	8e bd       	out	0x2e, r24	; 46
    1206:	0d b4       	in	r0, 0x2d	; 45
    1208:	07 fe       	sbrs	r0, 7
    120a:	fd cf       	rjmp	.-6      	; 0x1206 <rf_tx_tdma_packet+0xb8>
    120c:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    120e:	f8 01       	movw	r30, r16
    1210:	86 81       	ldd	r24, Z+6	; 0x06
    1212:	88 23       	and	r24, r24
    1214:	19 f4       	brne	.+6      	; 0x121c <rf_tx_tdma_packet+0xce>
    1216:	81 e4       	ldi	r24, 0x41	; 65
    1218:	98 e8       	ldi	r25, 0x88	; 136
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <rf_tx_tdma_packet+0xd2>
    121c:	81 e6       	ldi	r24, 0x61	; 97
    121e:	98 e8       	ldi	r25, 0x88	; 136
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	8b 83       	std	Y+3, r24	; 0x03
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    1224:	40 98       	cbi	0x08, 0	; 8
    1226:	8e e3       	ldi	r24, 0x3E	; 62
    1228:	8e bd       	out	0x2e, r24	; 46
    122a:	0d b4       	in	r0, 0x2d	; 45
    122c:	07 fe       	sbrs	r0, 7
    122e:	fd cf       	rjmp	.-6      	; 0x122a <rf_tx_tdma_packet+0xdc>
    1230:	fe 01       	movw	r30, r28
    1232:	33 96       	adiw	r30, 0x03	; 3

/**************************************************************************
This function is the same as normal TX, only it records actual transmission
starting time for calculating offset for SYNC
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time, uint16_t *tx_start_time) {
    1234:	ce 01       	movw	r24, r28
    1236:	05 96       	adiw	r24, 0x05	; 5
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    1238:	20 81       	ld	r18, Z
    123a:	2e bd       	out	0x2e, r18	; 46
    123c:	0d b4       	in	r0, 0x2d	; 45
    123e:	07 fe       	sbrs	r0, 7
    1240:	fd cf       	rjmp	.-6      	; 0x123c <rf_tx_tdma_packet+0xee>
    1242:	31 96       	adiw	r30, 0x01	; 1
    1244:	e8 17       	cp	r30, r24
    1246:	f9 07       	cpc	r31, r25
    1248:	b9 f7       	brne	.-18     	; 0x1238 <rf_tx_tdma_packet+0xea>
    124a:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    124c:	40 98       	cbi	0x08, 0	; 8
    124e:	8e e3       	ldi	r24, 0x3E	; 62
    1250:	8e bd       	out	0x2e, r24	; 46
    1252:	0d b4       	in	r0, 0x2d	; 45
    1254:	07 fe       	sbrs	r0, 7
    1256:	fd cf       	rjmp	.-6      	; 0x1252 <rf_tx_tdma_packet+0x104>
    1258:	80 91 28 08 	lds	r24, 0x0828
    125c:	8e bd       	out	0x2e, r24	; 46
    125e:	0d b4       	in	r0, 0x2d	; 45
    1260:	07 fe       	sbrs	r0, 7
    1262:	fd cf       	rjmp	.-6      	; 0x125e <rf_tx_tdma_packet+0x110>
    1264:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    1266:	40 98       	cbi	0x08, 0	; 8
    1268:	8e e3       	ldi	r24, 0x3E	; 62
    126a:	8e bd       	out	0x2e, r24	; 46
    126c:	0d b4       	in	r0, 0x2d	; 45
    126e:	07 fe       	sbrs	r0, 7
    1270:	fd cf       	rjmp	.-6      	; 0x126c <rf_tx_tdma_packet+0x11e>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	fc 01       	movw	r30, r24
    1278:	ea 5d       	subi	r30, 0xDA	; 218
    127a:	f7 4f       	sbci	r31, 0xF7	; 247
    127c:	24 81       	ldd	r18, Z+4	; 0x04
    127e:	2e bd       	out	0x2e, r18	; 46
    1280:	0d b4       	in	r0, 0x2d	; 45
    1282:	07 fe       	sbrs	r0, 7
    1284:	fd cf       	rjmp	.-6      	; 0x1280 <rf_tx_tdma_packet+0x132>
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	82 30       	cpi	r24, 0x02	; 2
    128a:	91 05       	cpc	r25, r1
    128c:	a1 f7       	brne	.-24     	; 0x1276 <rf_tx_tdma_packet+0x128>
    128e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    1290:	40 98       	cbi	0x08, 0	; 8
    1292:	8e e3       	ldi	r24, 0x3E	; 62
    1294:	8e bd       	out	0x2e, r24	; 46
    1296:	0d b4       	in	r0, 0x2d	; 45
    1298:	07 fe       	sbrs	r0, 7
    129a:	fd cf       	rjmp	.-6      	; 0x1296 <rf_tx_tdma_packet+0x148>
    129c:	f8 01       	movw	r30, r16

/**************************************************************************
This function is the same as normal TX, only it records actual transmission
starting time for calculating offset for SYNC
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time, uint16_t *tx_start_time) {
    129e:	c8 01       	movw	r24, r16
    12a0:	02 96       	adiw	r24, 0x02	; 2
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    12a2:	20 81       	ld	r18, Z
    12a4:	2e bd       	out	0x2e, r18	; 46
    12a6:	0d b4       	in	r0, 0x2d	; 45
    12a8:	07 fe       	sbrs	r0, 7
    12aa:	fd cf       	rjmp	.-6      	; 0x12a6 <rf_tx_tdma_packet+0x158>
    12ac:	31 96       	adiw	r30, 0x01	; 1
    12ae:	e8 17       	cp	r30, r24
    12b0:	f9 07       	cpc	r31, r25
    12b2:	b9 f7       	brne	.-18     	; 0x12a2 <rf_tx_tdma_packet+0x154>
    12b4:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    12b6:	40 98       	cbi	0x08, 0	; 8
    12b8:	8e e3       	ldi	r24, 0x3E	; 62
    12ba:	8e bd       	out	0x2e, r24	; 46
    12bc:	0d b4       	in	r0, 0x2d	; 45
    12be:	07 fe       	sbrs	r0, 7
    12c0:	fd cf       	rjmp	.-6      	; 0x12bc <rf_tx_tdma_packet+0x16e>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	fc 01       	movw	r30, r24
    12c8:	ea 5d       	subi	r30, 0xDA	; 218
    12ca:	f7 4f       	sbci	r31, 0xF7	; 247
    12cc:	26 81       	ldd	r18, Z+6	; 0x06
    12ce:	2e bd       	out	0x2e, r18	; 46
    12d0:	0d b4       	in	r0, 0x2d	; 45
    12d2:	07 fe       	sbrs	r0, 7
    12d4:	fd cf       	rjmp	.-6      	; 0x12d0 <rf_tx_tdma_packet+0x182>
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	91 05       	cpc	r25, r1
    12dc:	a1 f7       	brne	.-24     	; 0x12c6 <rf_tx_tdma_packet+0x178>
    12de:	40 9a       	sbi	0x08, 0	; 8

    nrk_high_speed_timer_wait(slot_start_time,tx_guard_time);
    12e0:	c7 01       	movw	r24, r14
    12e2:	b5 01       	movw	r22, r10
    12e4:	0e 94 a2 20 	call	0x4144	; 0x4144 <nrk_high_speed_timer_wait>
    
if (pRTI->cca == TRUE)
    12e8:	d8 01       	movw	r26, r16
    12ea:	15 96       	adiw	r26, 0x05	; 5
    12ec:	8c 91       	ld	r24, X
    12ee:	15 97       	sbiw	r26, 0x05	; 5
    12f0:	88 23       	and	r24, r24
    12f2:	81 f1       	breq	.+96     	; 0x1354 <rf_tx_tdma_packet+0x206>
    {
    uint8_t cnt;
      if (!rfSettings.receiveOn)
    12f4:	80 91 2e 08 	lds	r24, 0x082E
    12f8:	88 23       	and	r24, r24
    12fa:	39 f4       	brne	.+14     	; 0x130a <rf_tx_tdma_packet+0x1bc>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    12fc:	40 98       	cbi	0x08, 0	; 8
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	8e bd       	out	0x2e, r24	; 46
    1302:	0d b4       	in	r0, 0x2d	; 45
    1304:	07 fe       	sbrs	r0, 7
    1306:	fd cf       	rjmp	.-6      	; 0x1302 <rf_tx_tdma_packet+0x1b4>
    1308:	40 9a       	sbi	0x08, 0	; 8
    130a:	20 e0       	ldi	r18, 0x00	; 0

      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    130c:	65 e0       	ldi	r22, 0x05	; 5
    130e:	e6 2e       	mov	r14, r22
    1310:	40 98       	cbi	0x08, 0	; 8
    1312:	ee bc       	out	0x2e, r14	; 46
    1314:	0d b4       	in	r0, 0x2d	; 45
    1316:	07 fe       	sbrs	r0, 7
    1318:	fd cf       	rjmp	.-6      	; 0x1314 <rf_tx_tdma_packet+0x1c6>
    131a:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    131c:	40 98       	cbi	0x08, 0	; 8
    131e:	1e bc       	out	0x2e, r1	; 46
    1320:	0d b4       	in	r0, 0x2d	; 45
    1322:	07 fe       	sbrs	r0, 7
    1324:	fd cf       	rjmp	.-6      	; 0x1320 <rf_tx_tdma_packet+0x1d2>
    1326:	ae b4       	in	r10, 0x2e	; 46
    1328:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    132a:	2f 5f       	subi	r18, 0xFF	; 255
	  if (cnt > 100)
    132c:	25 36       	cpi	r18, 0x65	; 101
    132e:	49 f4       	brne	.+18     	; 0x1342 <rf_tx_tdma_packet+0x1f4>
	    {
	      ENABLE_GLOBAL_INT ();
    1330:	78 94       	sei
		nrk_sem_post(radio_sem);
    1332:	80 91 21 08 	lds	r24, 0x0821
    1336:	90 91 22 08 	lds	r25, 0x0822
    133a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <nrk_sem_post>
    133e:	80 e0       	ldi	r24, 0x00	; 0
		//printf("transmission fail.\n\r");
	      return FALSE;
    1340:	72 c0       	rjmp	.+228    	; 0x1426 <rf_tx_tdma_packet+0x2d8>
	    }
	  halWait (100);
    1342:	84 e6       	ldi	r24, 0x64	; 100
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	2d 83       	std	Y+5, r18	; 0x05
    1348:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    134c:	2d 81       	ldd	r18, Y+5	; 0x05
    134e:	a3 fe       	sbrs	r10, 3
    1350:	df cf       	rjmp	.-66     	; 0x1310 <rf_tx_tdma_packet+0x1c2>
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <rf_tx_tdma_packet+0x214>
	//printf("In basic_rf.c: cnt is %d\n\r", cnt);
    }
  else
    FASTSPI_STROBE (CC2420_STXON);
    1354:	40 98       	cbi	0x08, 0	; 8
    1356:	84 e0       	ldi	r24, 0x04	; 4
    1358:	8e bd       	out	0x2e, r24	; 46
    135a:	0d b4       	in	r0, 0x2d	; 45
    135c:	07 fe       	sbrs	r0, 7
    135e:	fd cf       	rjmp	.-6      	; 0x135a <rf_tx_tdma_packet+0x20c>
    1360:	40 9a       	sbi	0x08, 0	; 8

    // get the high speed timer value
//    nrk_gpio_set(NRK_DEBUG_0);

    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    1362:	40 98       	cbi	0x08, 0	; 8
    1364:	8e e3       	ldi	r24, 0x3E	; 62
    1366:	8e bd       	out	0x2e, r24	; 46
    1368:	0d b4       	in	r0, 0x2d	; 45
    136a:	07 fe       	sbrs	r0, 7
    136c:	fd cf       	rjmp	.-6      	; 0x1368 <rf_tx_tdma_packet+0x21a>
    136e:	f8 01       	movw	r30, r16
    1370:	42 81       	ldd	r20, Z+2	; 0x02
    1372:	55 27       	eor	r21, r21
    1374:	47 fd       	sbrc	r20, 7
    1376:	50 95       	com	r21
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	0d c0       	rjmp	.+26     	; 0x1396 <rf_tx_tdma_packet+0x248>
    137c:	d8 01       	movw	r26, r16
    137e:	13 96       	adiw	r26, 0x03	; 3
    1380:	ed 91       	ld	r30, X+
    1382:	fc 91       	ld	r31, X
    1384:	14 97       	sbiw	r26, 0x04	; 4
    1386:	e2 0f       	add	r30, r18
    1388:	f3 1f       	adc	r31, r19
    138a:	90 81       	ld	r25, Z
    138c:	9e bd       	out	0x2e, r25	; 46
    138e:	0d b4       	in	r0, 0x2d	; 45
    1390:	07 fe       	sbrs	r0, 7
    1392:	fd cf       	rjmp	.-6      	; 0x138e <rf_tx_tdma_packet+0x240>
    1394:	8f 5f       	subi	r24, 0xFF	; 255
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	24 17       	cp	r18, r20
    139c:	35 07       	cpc	r19, r21
    139e:	74 f3       	brlt	.-36     	; 0x137c <rf_tx_tdma_packet+0x22e>
    13a0:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    13a2:	40 98       	cbi	0x08, 0	; 8
    13a4:	8e e3       	ldi	r24, 0x3E	; 62
    13a6:	8e bd       	out	0x2e, r24	; 46
    13a8:	0d b4       	in	r0, 0x2d	; 45
    13aa:	07 fe       	sbrs	r0, 7
    13ac:	fd cf       	rjmp	.-6      	; 0x13a8 <rf_tx_tdma_packet+0x25a>
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	8e bd       	out	0x2e, r24	; 46
    13b2:	0d b4       	in	r0, 0x2d	; 45
    13b4:	07 fe       	sbrs	r0, 7
    13b6:	fd cf       	rjmp	.-6      	; 0x13b2 <rf_tx_tdma_packet+0x264>
    13b8:	40 9a       	sbi	0x08, 0	; 8

    //nrk_spin_wait_us(200);
//  FASTSPI_STROBE(CC2420_STXON);
   // Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
	while (!SFD_IS_1);
    13ba:	4e 9b       	sbis	0x09, 6	; 9
    13bc:	fe cf       	rjmp	.-4      	; 0x13ba <rf_tx_tdma_packet+0x26c>
	 *tx_start_time = (volatile)TCNT1;
    13be:	80 91 84 00 	lds	r24, 0x0084
    13c2:	90 91 85 00 	lds	r25, 0x0085
    13c6:	f6 01       	movw	r30, r12
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	80 83       	st	Z, r24
		success = rfSettings.ackReceived;
    }*/

    
	// Turn off the receiver if it should not continue to be enabled
    DISABLE_GLOBAL_INT();
    13cc:	f8 94       	cli
    // XXX hack, temp out
    //if (!rfSettings.receiveOn) { while (SFD_IS_1); /*FASTSPI_STROBE(CC2420_SRFOFF);*/ }
    // while (SFD_IS_1); 
    while (SFD_IS_1); // wait for packet to finish
    13ce:	4e 99       	sbic	0x09, 6	; 9
    13d0:	fe cf       	rjmp	.-4      	; 0x13ce <rf_tx_tdma_packet+0x280>
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    13d2:	40 98       	cbi	0x08, 0	; 8
    13d4:	88 e0       	ldi	r24, 0x08	; 8
    13d6:	8e bd       	out	0x2e, r24	; 46
    13d8:	0d b4       	in	r0, 0x2d	; 45
    13da:	07 fe       	sbrs	r0, 7
    13dc:	fd cf       	rjmp	.-6      	; 0x13d8 <rf_tx_tdma_packet+0x28a>
    13de:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    13e0:	40 98       	cbi	0x08, 0	; 8
    13e2:	88 e0       	ldi	r24, 0x08	; 8
    13e4:	8e bd       	out	0x2e, r24	; 46
    13e6:	0d b4       	in	r0, 0x2d	; 45
    13e8:	07 fe       	sbrs	r0, 7
    13ea:	fd cf       	rjmp	.-6      	; 0x13e6 <rf_tx_tdma_packet+0x298>
    13ec:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    13ee:	40 98       	cbi	0x08, 0	; 8
    13f0:	89 e0       	ldi	r24, 0x09	; 9
    13f2:	8e bd       	out	0x2e, r24	; 46
    13f4:	0d b4       	in	r0, 0x2d	; 45
    13f6:	07 fe       	sbrs	r0, 7
    13f8:	fd cf       	rjmp	.-6      	; 0x13f4 <rf_tx_tdma_packet+0x2a6>
    13fa:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    13fc:	40 98       	cbi	0x08, 0	; 8
    13fe:	89 e0       	ldi	r24, 0x09	; 9
    1400:	8e bd       	out	0x2e, r24	; 46
    1402:	0d b4       	in	r0, 0x2d	; 45
    1404:	07 fe       	sbrs	r0, 7
    1406:	fd cf       	rjmp	.-6      	; 0x1402 <rf_tx_tdma_packet+0x2b4>
    1408:	40 9a       	sbi	0x08, 0	; 8

FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    140a:	40 98       	cbi	0x08, 0	; 8
    140c:	86 e0       	ldi	r24, 0x06	; 6
    140e:	8e bd       	out	0x2e, r24	; 46
    1410:	0d b4       	in	r0, 0x2d	; 45
    1412:	07 fe       	sbrs	r0, 7
    1414:	fd cf       	rjmp	.-6      	; 0x1410 <rf_tx_tdma_packet+0x2c2>
    1416:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    1418:	78 94       	sei
    

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    141a:	80 91 28 08 	lds	r24, 0x0828
    141e:	8f 5f       	subi	r24, 0xFF	; 255
    1420:	80 93 28 08 	sts	0x0828, r24
    1424:	81 e0       	ldi	r24, 0x01	; 1
nrk_sem_post(radio_sem);
#endif
	//printf("sent success? %d.\n\r",success);
    return success;

}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	df 90       	pop	r13
    143e:	cf 90       	pop	r12
    1440:	bf 90       	pop	r11
    1442:	af 90       	pop	r10
    1444:	08 95       	ret

00001446 <rf_addr_decode_set_my_mac>:
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <rf_addr_decode_set_my_mac+0x6>
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	9a 83       	std	Y+2, r25	; 0x02
    1452:	89 83       	std	Y+1, r24	; 0x01
uint8_t n;
    rfSettings.myAddr = my_mac;
    1454:	90 93 2d 08 	sts	0x082D, r25
    1458:	80 93 2c 08 	sts	0x082C, r24
    nrk_spin_wait_us(500);
    145c:	84 ef       	ldi	r24, 0xF4	; 244
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	0e 94 57 20 	call	0x40ae	; 0x40ae <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    1464:	40 98       	cbi	0x08, 0	; 8
    1466:	8a ee       	ldi	r24, 0xEA	; 234
    1468:	8e bd       	out	0x2e, r24	; 46
    146a:	0d b4       	in	r0, 0x2d	; 45
    146c:	07 fe       	sbrs	r0, 7
    146e:	fd cf       	rjmp	.-6      	; 0x146a <rf_addr_decode_set_my_mac+0x24>
    1470:	80 e8       	ldi	r24, 0x80	; 128
    1472:	8e bd       	out	0x2e, r24	; 46
    1474:	0d b4       	in	r0, 0x2d	; 45
    1476:	07 fe       	sbrs	r0, 7
    1478:	fd cf       	rjmp	.-6      	; 0x1474 <rf_addr_decode_set_my_mac+0x2e>
    147a:	fe 01       	movw	r30, r28
    147c:	31 96       	adiw	r30, 0x01	; 1
    mdmctrl0 &= (~0x0010);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
    147e:	ce 01       	movw	r24, r28
    1480:	03 96       	adiw	r24, 0x03	; 3
{
uint8_t n;
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    1482:	20 81       	ld	r18, Z
    1484:	2e bd       	out	0x2e, r18	; 46
    1486:	0d b4       	in	r0, 0x2d	; 45
    1488:	07 fe       	sbrs	r0, 7
    148a:	fd cf       	rjmp	.-6      	; 0x1486 <rf_addr_decode_set_my_mac+0x40>
    148c:	31 96       	adiw	r30, 0x01	; 1
    148e:	e8 17       	cp	r30, r24
    1490:	f9 07       	cpc	r31, r25
    1492:	b9 f7       	brne	.-18     	; 0x1482 <rf_addr_decode_set_my_mac+0x3c>
    1494:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    1496:	84 ef       	ldi	r24, 0xF4	; 244
    1498:	91 e0       	ldi	r25, 0x01	; 1
    149a:	0e 94 57 20 	call	0x40ae	; 0x40ae <nrk_spin_wait_us>
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <rf_security_set_key>:
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    14a8:	8f 92       	push	r8
    14aa:	9f 92       	push	r9
    14ac:	af 92       	push	r10
    14ae:	bf 92       	push	r11
    14b0:	cf 92       	push	r12
    14b2:	df 92       	push	r13
    14b4:	ef 92       	push	r14
    14b6:	ff 92       	push	r15
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <rf_security_set_key+0x1a>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <rf_security_set_key+0x1c>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	e8 2e       	mov	r14, r24
    14ca:	09 2f       	mov	r16, r25
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    14cc:	84 e6       	ldi	r24, 0x64	; 100
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 57 20 	call	0x40ae	; 0x40ae <nrk_spin_wait_us>
    14d4:	ce 2c       	mov	r12, r14
    14d6:	d0 2e       	mov	r13, r16
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	31 e0       	ldi	r19, 0x01	; 1
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    14dc:	8e 01       	movw	r16, r28
    14de:	0f 5f       	subi	r16, 0xFF	; 255
    14e0:	1f 4f       	sbci	r17, 0xFF	; 255
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    14e2:	a3 e0       	ldi	r26, 0x03	; 3
    14e4:	aa 2e       	mov	r10, r26
    14e6:	b1 2c       	mov	r11, r1
    14e8:	ac 0e       	add	r10, r28
    14ea:	bd 1e       	adc	r11, r29

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    14ec:	f6 01       	movw	r30, r12
    14ee:	90 80       	ld	r9, Z
    14f0:	88 24       	eor	r8, r8
    14f2:	81 81       	ldd	r24, Z+1	; 0x01
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	88 29       	or	r24, r8
    14f8:	99 29       	or	r25, r9
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	89 83       	std	Y+1, r24	; 0x01
   	nrk_spin_wait_us(100); 
    14fe:	84 e6       	ldi	r24, 0x64	; 100
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	2b 83       	std	Y+3, r18	; 0x03
    1504:	3c 83       	std	Y+4, r19	; 0x04
    1506:	0e 94 57 20 	call	0x40ae	; 0x40ae <nrk_spin_wait_us>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    150a:	40 98       	cbi	0x08, 0	; 8
    150c:	2b 81       	ldd	r18, Y+3	; 0x03
    150e:	3c 81       	ldd	r19, Y+4	; 0x04
    1510:	82 2f       	mov	r24, r18
    1512:	80 68       	ori	r24, 0x80	; 128
    1514:	8e bd       	out	0x2e, r24	; 46
    1516:	0d b4       	in	r0, 0x2d	; 45
    1518:	07 fe       	sbrs	r0, 7
    151a:	fd cf       	rjmp	.-6      	; 0x1516 <rf_security_set_key+0x6e>
    151c:	c9 01       	movw	r24, r18
    151e:	95 95       	asr	r25
    1520:	87 95       	ror	r24
    1522:	80 7c       	andi	r24, 0xC0	; 192
    1524:	8e bd       	out	0x2e, r24	; 46
    1526:	0d b4       	in	r0, 0x2d	; 45
    1528:	07 fe       	sbrs	r0, 7
    152a:	fd cf       	rjmp	.-6      	; 0x1526 <rf_security_set_key+0x7e>
    152c:	78 01       	movw	r14, r16
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    152e:	f8 01       	movw	r30, r16
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    1530:	80 81       	ld	r24, Z
    1532:	8e bd       	out	0x2e, r24	; 46
    1534:	0d b4       	in	r0, 0x2d	; 45
    1536:	07 fe       	sbrs	r0, 7
    1538:	fd cf       	rjmp	.-6      	; 0x1534 <rf_security_set_key+0x8c>
    153a:	31 96       	adiw	r30, 0x01	; 1
    153c:	ea 15       	cp	r30, r10
    153e:	fb 05       	cpc	r31, r11
    1540:	b9 f7       	brne	.-18     	; 0x1530 <rf_security_set_key+0x88>
    1542:	40 9a       	sbi	0x08, 0	; 8
    1544:	08 94       	sec
    1546:	c1 1c       	adc	r12, r1
    1548:	d1 1c       	adc	r13, r1
    154a:	2e 5f       	subi	r18, 0xFE	; 254
    154c:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    154e:	f1 e0       	ldi	r31, 0x01	; 1
    1550:	20 31       	cpi	r18, 0x10	; 16
    1552:	3f 07       	cpc	r19, r31
    1554:	59 f6       	brne	.-106    	; 0x14ec <rf_security_set_key+0x44>
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
    1556:	84 e6       	ldi	r24, 0x64	; 100
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 57 20 	call	0x40ae	; 0x40ae <nrk_spin_wait_us>
    155e:	20 e4       	ldi	r18, 0x40	; 64
    1560:	31 e0       	ldi	r19, 0x01	; 1
    1562:	80 e1       	ldi	r24, 0x10	; 16
    1564:	91 e0       	ldi	r25, 0x01	; 1
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    1566:	1a 82       	std	Y+2, r1	; 0x02
    1568:	19 82       	std	Y+1, r1	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    156a:	40 98       	cbi	0x08, 0	; 8
    156c:	42 2f       	mov	r20, r18
    156e:	40 68       	ori	r20, 0x80	; 128
    1570:	4e bd       	out	0x2e, r20	; 46
    1572:	0d b4       	in	r0, 0x2d	; 45
    1574:	07 fe       	sbrs	r0, 7
    1576:	fd cf       	rjmp	.-6      	; 0x1572 <rf_security_set_key+0xca>
    1578:	a9 01       	movw	r20, r18
    157a:	55 95       	asr	r21
    157c:	47 95       	ror	r20
    157e:	40 7c       	andi	r20, 0xC0	; 192
    1580:	4e bd       	out	0x2e, r20	; 46
    1582:	0d b4       	in	r0, 0x2d	; 45
    1584:	07 fe       	sbrs	r0, 7
    1586:	fd cf       	rjmp	.-6      	; 0x1582 <rf_security_set_key+0xda>
    1588:	f8 01       	movw	r30, r16
    158a:	40 81       	ld	r20, Z
    158c:	4e bd       	out	0x2e, r20	; 46
    158e:	0d b4       	in	r0, 0x2d	; 45
    1590:	07 fe       	sbrs	r0, 7
    1592:	fd cf       	rjmp	.-6      	; 0x158e <rf_security_set_key+0xe6>
    1594:	31 96       	adiw	r30, 0x01	; 1
    1596:	ea 15       	cp	r30, r10
    1598:	fb 05       	cpc	r31, r11
    159a:	b9 f7       	brne	.-18     	; 0x158a <rf_security_set_key+0xe2>
    159c:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    159e:	40 98       	cbi	0x08, 0	; 8
    15a0:	48 2f       	mov	r20, r24
    15a2:	40 68       	ori	r20, 0x80	; 128
    15a4:	4e bd       	out	0x2e, r20	; 46
    15a6:	0d b4       	in	r0, 0x2d	; 45
    15a8:	07 fe       	sbrs	r0, 7
    15aa:	fd cf       	rjmp	.-6      	; 0x15a6 <rf_security_set_key+0xfe>
    15ac:	ac 01       	movw	r20, r24
    15ae:	55 95       	asr	r21
    15b0:	47 95       	ror	r20
    15b2:	40 7c       	andi	r20, 0xC0	; 192
    15b4:	4e bd       	out	0x2e, r20	; 46
    15b6:	0d b4       	in	r0, 0x2d	; 45
    15b8:	07 fe       	sbrs	r0, 7
    15ba:	fd cf       	rjmp	.-6      	; 0x15b6 <rf_security_set_key+0x10e>
    15bc:	f8 01       	movw	r30, r16
    15be:	40 81       	ld	r20, Z
    15c0:	4e bd       	out	0x2e, r20	; 46
    15c2:	0d b4       	in	r0, 0x2d	; 45
    15c4:	07 fe       	sbrs	r0, 7
    15c6:	fd cf       	rjmp	.-6      	; 0x15c2 <rf_security_set_key+0x11a>
    15c8:	31 96       	adiw	r30, 0x01	; 1
    15ca:	ea 15       	cp	r30, r10
    15cc:	fb 05       	cpc	r31, r11
    15ce:	b9 f7       	brne	.-18     	; 0x15be <rf_security_set_key+0x116>
    15d0:	40 9a       	sbi	0x08, 0	; 8
    15d2:	02 96       	adiw	r24, 0x02	; 2
    15d4:	2e 5f       	subi	r18, 0xFE	; 254
    15d6:	3f 4f       	sbci	r19, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	8e 31       	cpi	r24, 0x1E	; 30
    15dc:	94 07       	cpc	r25, r20
    15de:	19 f6       	brne	.-122    	; 0x1566 <rf_security_set_key+0xbe>
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	9a 83       	std	Y+2, r25	; 0x02
    15e6:	89 83       	std	Y+1, r24	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    15e8:	40 98       	cbi	0x08, 0	; 8
    15ea:	8e ec       	ldi	r24, 0xCE	; 206
    15ec:	8e bd       	out	0x2e, r24	; 46
    15ee:	0d b4       	in	r0, 0x2d	; 45
    15f0:	07 fe       	sbrs	r0, 7
    15f2:	fd cf       	rjmp	.-6      	; 0x15ee <rf_security_set_key+0x146>
    15f4:	80 e8       	ldi	r24, 0x80	; 128
    15f6:	8e bd       	out	0x2e, r24	; 46
    15f8:	0d b4       	in	r0, 0x2d	; 45
    15fa:	07 fe       	sbrs	r0, 7
    15fc:	fd cf       	rjmp	.-6      	; 0x15f8 <rf_security_set_key+0x150>
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    15fe:	c8 01       	movw	r24, r16
    1600:	02 96       	adiw	r24, 0x02	; 2
    1602:	f8 01       	movw	r30, r16
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    1604:	20 81       	ld	r18, Z
    1606:	2e bd       	out	0x2e, r18	; 46
    1608:	0d b4       	in	r0, 0x2d	; 45
    160a:	07 fe       	sbrs	r0, 7
    160c:	fd cf       	rjmp	.-6      	; 0x1608 <rf_security_set_key+0x160>
    160e:	31 96       	adiw	r30, 0x01	; 1
    1610:	e8 17       	cp	r30, r24
    1612:	f9 07       	cpc	r31, r25
    1614:	b9 f7       	brne	.-18     	; 0x1604 <rf_security_set_key+0x15c>
    1616:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    1618:	40 98       	cbi	0x08, 0	; 8
    161a:	8e e9       	ldi	r24, 0x9E	; 158
    161c:	8e bd       	out	0x2e, r24	; 46
    161e:	0d b4       	in	r0, 0x2d	; 45
    1620:	07 fe       	sbrs	r0, 7
    1622:	fd cf       	rjmp	.-6      	; 0x161e <rf_security_set_key+0x176>
    1624:	80 e8       	ldi	r24, 0x80	; 128
    1626:	8e bd       	out	0x2e, r24	; 46
    1628:	0d b4       	in	r0, 0x2d	; 45
    162a:	07 fe       	sbrs	r0, 7
    162c:	fd cf       	rjmp	.-6      	; 0x1628 <rf_security_set_key+0x180>
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    162e:	0e 5f       	subi	r16, 0xFE	; 254
    1630:	1f 4f       	sbci	r17, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    1632:	f7 01       	movw	r30, r14
    1634:	80 81       	ld	r24, Z
    1636:	8e bd       	out	0x2e, r24	; 46
    1638:	0d b4       	in	r0, 0x2d	; 45
    163a:	07 fe       	sbrs	r0, 7
    163c:	fd cf       	rjmp	.-6      	; 0x1638 <rf_security_set_key+0x190>
    163e:	08 94       	sec
    1640:	e1 1c       	adc	r14, r1
    1642:	f1 1c       	adc	r15, r1
    1644:	e0 16       	cp	r14, r16
    1646:	f1 06       	cpc	r15, r17
    1648:	a1 f7       	brne	.-24     	; 0x1632 <rf_security_set_key+0x18a>
    164a:	40 9a       	sbi	0x08, 0	; 8
}
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	1f 91       	pop	r17
    165a:	0f 91       	pop	r16
    165c:	ff 90       	pop	r15
    165e:	ef 90       	pop	r14
    1660:	df 90       	pop	r13
    1662:	cf 90       	pop	r12
    1664:	bf 90       	pop	r11
    1666:	af 90       	pop	r10
    1668:	9f 90       	pop	r9
    166a:	8f 90       	pop	r8
    166c:	08 95       	ret

0000166e <rf_set_rx>:
}



void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	ec 01       	movw	r28, r24
    1674:	86 2f       	mov	r24, r22

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1676:	40 98       	cbi	0x08, 0	; 8
    1678:	98 e0       	ldi	r25, 0x08	; 8
    167a:	9e bd       	out	0x2e, r25	; 46
    167c:	0d b4       	in	r0, 0x2d	; 45
    167e:	07 fe       	sbrs	r0, 7
    1680:	fd cf       	rjmp	.-6      	; 0x167c <rf_set_rx+0xe>
    1682:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1684:	40 98       	cbi	0x08, 0	; 8
    1686:	98 e0       	ldi	r25, 0x08	; 8
    1688:	9e bd       	out	0x2e, r25	; 46
    168a:	0d b4       	in	r0, 0x2d	; 45
    168c:	07 fe       	sbrs	r0, 7
    168e:	fd cf       	rjmp	.-6      	; 0x168a <rf_set_rx+0x1c>
    1690:	40 9a       	sbi	0x08, 0	; 8
    halRfSetChannel(channel);
    1692:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <halRfSetChannel>
    rfSettings.pRxInfo = pRRI;
    1696:	d0 93 27 08 	sts	0x0827, r29
    169a:	c0 93 26 08 	sts	0x0826, r28

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	08 95       	ret

000016a4 <rf_set_channel>:
void rf_set_channel( uint8_t channel )
{
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    halRfSetChannel(channel);
    16a4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <halRfSetChannel>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
    16a8:	08 95       	ret

000016aa <rf_init>:
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    16aa:	cf 92       	push	r12
    16ac:	df 92       	push	r13
    16ae:	ff 92       	push	r15
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <rf_init+0x10>
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	8c 01       	movw	r16, r24
    16c0:	f6 2e       	mov	r15, r22
    16c2:	5a 83       	std	Y+2, r21	; 0x02
    16c4:	49 83       	std	Y+1, r20	; 0x01
    16c6:	69 01       	movw	r12, r18
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
  }
#endif

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    SET_VREG_ACTIVE();
    16c8:	15 9a       	sbi	0x02, 5	; 2
    halWait(1000);
    16ca:	88 ee       	ldi	r24, 0xE8	; 232
    16cc:	93 e0       	ldi	r25, 0x03	; 3
    16ce:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <halWait>
    SET_RESET_ACTIVE();
    16d2:	16 98       	cbi	0x02, 6	; 2
    halWait(1);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <halWait>
    SET_RESET_INACTIVE();
    16dc:	16 9a       	sbi	0x02, 6	; 2
    halWait(100);
    16de:	84 e6       	ldi	r24, 0x64	; 100
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <halWait>
    // Initialize the FIFOP external interrupt
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();
    16e6:	f8 94       	cli

    // Register modifications
    FASTSPI_STROBE(CC2420_SXOSCON);
    16e8:	40 98       	cbi	0x08, 0	; 8
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	8e bd       	out	0x2e, r24	; 46
    16ee:	0d b4       	in	r0, 0x2d	; 45
    16f0:	07 fe       	sbrs	r0, 7
    16f2:	fd cf       	rjmp	.-6      	; 0x16ee <rf_init+0x44>
    16f4:	40 9a       	sbi	0x08, 0	; 8
    mdmctrl0=0x02E2;
    16f6:	82 ee       	ldi	r24, 0xE2	; 226
    16f8:	92 e0       	ldi	r25, 0x02	; 2
    16fa:	90 93 25 08 	sts	0x0825, r25
    16fe:	80 93 24 08 	sts	0x0824, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    1702:	40 98       	cbi	0x08, 0	; 8
    1704:	81 e1       	ldi	r24, 0x11	; 17
    1706:	8e bd       	out	0x2e, r24	; 46
    1708:	0d b4       	in	r0, 0x2d	; 45
    170a:	07 fe       	sbrs	r0, 7
    170c:	fd cf       	rjmp	.-6      	; 0x1708 <rf_init+0x5e>
    170e:	82 e0       	ldi	r24, 0x02	; 2
    1710:	8e bd       	out	0x2e, r24	; 46
    1712:	0d b4       	in	r0, 0x2d	; 45
    1714:	07 fe       	sbrs	r0, 7
    1716:	fd cf       	rjmp	.-6      	; 0x1712 <rf_init+0x68>
    1718:	82 ee       	ldi	r24, 0xE2	; 226
    171a:	8e bd       	out	0x2e, r24	; 46
    171c:	0d b4       	in	r0, 0x2d	; 45
    171e:	07 fe       	sbrs	r0, 7
    1720:	fd cf       	rjmp	.-6      	; 0x171c <rf_init+0x72>
    1722:	40 9a       	sbi	0x08, 0	; 8
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    1724:	40 98       	cbi	0x08, 0	; 8
    1726:	82 e1       	ldi	r24, 0x12	; 18
    1728:	8e bd       	out	0x2e, r24	; 46
    172a:	0d b4       	in	r0, 0x2d	; 45
    172c:	07 fe       	sbrs	r0, 7
    172e:	fd cf       	rjmp	.-6      	; 0x172a <rf_init+0x80>
    1730:	85 e0       	ldi	r24, 0x05	; 5
    1732:	8e bd       	out	0x2e, r24	; 46
    1734:	0d b4       	in	r0, 0x2d	; 45
    1736:	07 fe       	sbrs	r0, 7
    1738:	fd cf       	rjmp	.-6      	; 0x1734 <rf_init+0x8a>
    173a:	1e bc       	out	0x2e, r1	; 46
    173c:	0d b4       	in	r0, 0x2d	; 45
    173e:	07 fe       	sbrs	r0, 7
    1740:	fd cf       	rjmp	.-6      	; 0x173c <rf_init+0x92>
    1742:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    1744:	40 98       	cbi	0x08, 0	; 8
    1746:	8c e1       	ldi	r24, 0x1C	; 28
    1748:	8e bd       	out	0x2e, r24	; 46
    174a:	0d b4       	in	r0, 0x2d	; 45
    174c:	07 fe       	sbrs	r0, 7
    174e:	fd cf       	rjmp	.-6      	; 0x174a <rf_init+0xa0>
    1750:	1e bc       	out	0x2e, r1	; 46
    1752:	0d b4       	in	r0, 0x2d	; 45
    1754:	07 fe       	sbrs	r0, 7
    1756:	fd cf       	rjmp	.-6      	; 0x1752 <rf_init+0xa8>
    1758:	8f e7       	ldi	r24, 0x7F	; 127
    175a:	8e bd       	out	0x2e, r24	; 46
    175c:	0d b4       	in	r0, 0x2d	; 45
    175e:	07 fe       	sbrs	r0, 7
    1760:	fd cf       	rjmp	.-6      	; 0x175c <rf_init+0xb2>
    1762:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    1764:	40 98       	cbi	0x08, 0	; 8
    1766:	89 e1       	ldi	r24, 0x19	; 25
    1768:	8e bd       	out	0x2e, r24	; 46
    176a:	0d b4       	in	r0, 0x2d	; 45
    176c:	07 fe       	sbrs	r0, 7
    176e:	fd cf       	rjmp	.-6      	; 0x176a <rf_init+0xc0>
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	8e bd       	out	0x2e, r24	; 46
    1774:	0d b4       	in	r0, 0x2d	; 45
    1776:	07 fe       	sbrs	r0, 7
    1778:	fd cf       	rjmp	.-6      	; 0x1774 <rf_init+0xca>
    177a:	84 ec       	ldi	r24, 0xC4	; 196
    177c:	8e bd       	out	0x2e, r24	; 46
    177e:	0d b4       	in	r0, 0x2d	; 45
    1780:	07 fe       	sbrs	r0, 7
    1782:	fd cf       	rjmp	.-6      	; 0x177e <rf_init+0xd4>
    1784:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
    1786:	40 98       	cbi	0x08, 0	; 8
    1788:	87 e1       	ldi	r24, 0x17	; 23
    178a:	8e bd       	out	0x2e, r24	; 46
    178c:	0d b4       	in	r0, 0x2d	; 45
    178e:	07 fe       	sbrs	r0, 7
    1790:	fd cf       	rjmp	.-6      	; 0x178c <rf_init+0xe2>
    1792:	8a e1       	ldi	r24, 0x1A	; 26
    1794:	8e bd       	out	0x2e, r24	; 46
    1796:	0d b4       	in	r0, 0x2d	; 45
    1798:	07 fe       	sbrs	r0, 7
    179a:	fd cf       	rjmp	.-6      	; 0x1796 <rf_init+0xec>
    179c:	86 e5       	ldi	r24, 0x56	; 86
    179e:	8e bd       	out	0x2e, r24	; 46
    17a0:	0d b4       	in	r0, 0x2d	; 45
    17a2:	07 fe       	sbrs	r0, 7
    17a4:	fd cf       	rjmp	.-6      	; 0x17a0 <rf_init+0xf6>
    17a6:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    17a8:	84 ef       	ldi	r24, 0xF4	; 244
    17aa:	91 e0       	ldi	r25, 0x01	; 1
    17ac:	0e 94 57 20 	call	0x40ae	; 0x40ae <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    17b0:	40 98       	cbi	0x08, 0	; 8
    17b2:	88 ee       	ldi	r24, 0xE8	; 232
    17b4:	8e bd       	out	0x2e, r24	; 46
    17b6:	0d b4       	in	r0, 0x2d	; 45
    17b8:	07 fe       	sbrs	r0, 7
    17ba:	fd cf       	rjmp	.-6      	; 0x17b6 <rf_init+0x10c>
    17bc:	80 e8       	ldi	r24, 0x80	; 128
    17be:	8e bd       	out	0x2e, r24	; 46
    17c0:	0d b4       	in	r0, 0x2d	; 45
    17c2:	07 fe       	sbrs	r0, 7
    17c4:	fd cf       	rjmp	.-6      	; 0x17c0 <rf_init+0x116>
    17c6:	fe 01       	movw	r30, r28
    17c8:	31 96       	adiw	r30, 0x01	; 1
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    17ca:	ce 01       	movw	r24, r28
    17cc:	03 96       	adiw	r24, 0x03	; 3
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    17ce:	20 81       	ld	r18, Z
    17d0:	2e bd       	out	0x2e, r18	; 46
    17d2:	0d b4       	in	r0, 0x2d	; 45
    17d4:	07 fe       	sbrs	r0, 7
    17d6:	fd cf       	rjmp	.-6      	; 0x17d2 <rf_init+0x128>
    17d8:	31 96       	adiw	r30, 0x01	; 1
    17da:	e8 17       	cp	r30, r24
    17dc:	f9 07       	cpc	r31, r25
    17de:	b9 f7       	brne	.-18     	; 0x17ce <rf_init+0x124>
    17e0:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    17e2:	84 ef       	ldi	r24, 0xF4	; 244
    17e4:	91 e0       	ldi	r25, 0x01	; 1
    17e6:	0e 94 57 20 	call	0x40ae	; 0x40ae <nrk_spin_wait_us>

  	ENABLE_GLOBAL_INT();
    17ea:	78 94       	sei

    // Set the RF channel
    halRfSetChannel(channel);
    17ec:	8f 2d       	mov	r24, r15
    17ee:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <halRfSetChannel>

    // Turn interrupts back on
	ENABLE_GLOBAL_INT();
    17f2:	78 94       	sei

	// Set the protocol configuration
	rfSettings.pRxInfo = pRRI;
    17f4:	10 93 27 08 	sts	0x0827, r17
    17f8:	00 93 26 08 	sts	0x0826, r16
	rfSettings.panId = panId;
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1800:	90 93 2b 08 	sts	0x082B, r25
    1804:	80 93 2a 08 	sts	0x082A, r24
	rfSettings.myAddr = myAddr;
    1808:	d0 92 2d 08 	sts	0x082D, r13
    180c:	c0 92 2c 08 	sts	0x082C, r12
	rfSettings.txSeqNumber = 0;
    1810:	10 92 28 08 	sts	0x0828, r1
        rfSettings.receiveOn = FALSE;
    1814:	10 92 2e 08 	sts	0x082E, r1

	// Wait for the crystal oscillator to become stable
    halRfWaitForCrystalOscillator();
    1818:	0e 94 17 03 	call	0x62e	; 0x62e <halRfWaitForCrystalOscillator>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    _nrk_errno_set (2);
  }
#endif

auto_ack_enable=0;
    181c:	10 92 31 08 	sts	0x0831, r1
security_enable=0;
    1820:	10 92 23 08 	sts	0x0823, r1
last_pkt_encrypted=0;
    1824:	10 92 32 08 	sts	0x0832, r1
} // rf_init() 
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	ff 90       	pop	r15
    1836:	df 90       	pop	r13
    1838:	cf 90       	pop	r12
    183a:	08 95       	ret

0000183c <getc1>:

char getc1()
{
char tmp;

if(uart_rx_buf_start!=uart_rx_buf_end)
    183c:	90 91 4a 08 	lds	r25, 0x084A
    1840:	80 91 38 08 	lds	r24, 0x0838
    1844:	98 17       	cp	r25, r24
    1846:	69 f0       	breq	.+26     	; 0x1862 <getc1+0x26>
   {
   tmp=uart_rx_buf[uart_rx_buf_start];
    1848:	e9 2f       	mov	r30, r25
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	e7 5c       	subi	r30, 0xC7	; 199
    184e:	f7 4f       	sbci	r31, 0xF7	; 247
    1850:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    1852:	9f 5f       	subi	r25, 0xFF	; 255
    1854:	90 93 4a 08 	sts	0x084A, r25
   if(uart_rx_buf_start==MAX_RX_UART_BUF) uart_rx_buf_start=0;
    1858:	90 31       	cpi	r25, 0x10	; 16
    185a:	71 f4       	brne	.+28     	; 0x1878 <getc1+0x3c>
    185c:	10 92 4a 08 	sts	0x084A, r1
    1860:	08 95       	ret
   return(tmp);
   }
// if buffer empty, then we have to block for it
UART1_WAIT_AND_RECEIVE(tmp);
    1862:	80 91 c8 00 	lds	r24, 0x00C8
    1866:	87 ff       	sbrs	r24, 7
    1868:	fc cf       	rjmp	.-8      	; 0x1862 <getc1+0x26>
    186a:	80 91 c8 00 	lds	r24, 0x00C8
    186e:	8f 77       	andi	r24, 0x7F	; 127
    1870:	80 93 c8 00 	sts	0x00C8, r24
    1874:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    1878:	08 95       	ret

0000187a <nrk_uart_data_ready>:

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    187a:	88 23       	and	r24, r24
    187c:	31 f4       	brne	.+12     	; 0x188a <nrk_uart_data_ready+0x10>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    187e:	80 91 c0 00 	lds	r24, 0x00C0
    1882:	88 1f       	adc	r24, r24
    1884:	88 27       	eor	r24, r24
    1886:	88 1f       	adc	r24, r24
    1888:	08 95       	ret
        }
if(uart_num==1)
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	11 f0       	breq	.+4      	; 0x1892 <nrk_uart_data_ready+0x18>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	08 95       	ret
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	20 91 4a 08 	lds	r18, 0x084A
    1898:	90 91 38 08 	lds	r25, 0x0838
    189c:	29 13       	cpse	r18, r25
    189e:	81 e0       	ldi	r24, 0x01	; 1
	{
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
}
    18a0:	08 95       	ret

000018a2 <PORT_INIT>:
NRK_PIN( ADC_INPUT_6, ADC_INPUT_6, NRK_PORTF )
NRK_PIN( ADC_INPUT_7, ADC_INPUT_7, NRK_PORTF )

void PORT_INIT(void)
{
        MCUCR |= BM(PUD); 
    18a2:	85 b7       	in	r24, 0x35	; 53
    18a4:	80 61       	ori	r24, 0x10	; 16
    18a6:	85 bf       	out	0x35, r24	; 53
        DDRB  = BM(MOSI) | BM(SCK);  
    18a8:	86 e0       	ldi	r24, 0x06	; 6
    18aa:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
    18ac:	87 e0       	ldi	r24, 0x07	; 7
    18ae:	85 b9       	out	0x05, r24	; 5
        DDRC  = BM(CSN); 
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	87 b9       	out	0x07, r24	; 7
        PORTC = BM(CSN); 
    18b4:	88 b9       	out	0x08, r24	; 8
        DDRE  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    18b6:	8c e3       	ldi	r24, 0x3C	; 60
    18b8:	8d b9       	out	0x0d, r24	; 13
        DDRD  = BM(UART1_TXD) | BM(DEBUG_2) | BM(DEBUG_3); 
    18ba:	8b e0       	ldi	r24, 0x0B	; 11
    18bc:	8a b9       	out	0x0a, r24	; 10
        PORTE  = BM(UART0_TXD) | BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    18be:	8e e3       	ldi	r24, 0x3E	; 62
    18c0:	8e b9       	out	0x0e, r24	; 14
        DDRA  = BM(VREG_EN) | BM(RESET_N) | BM(DEBUG_0) | BM(DEBUG_1); 
    18c2:	88 e7       	ldi	r24, 0x78	; 120
    18c4:	81 b9       	out	0x01, r24	; 1
        PORTA = BM(RESET_N); 
    18c6:	80 e4       	ldi	r24, 0x40	; 64
    18c8:	82 b9       	out	0x02, r24	; 2
        DDRF = 0xFF;
    18ca:	8f ef       	ldi	r24, 0xFF	; 255
    18cc:	80 bb       	out	0x10, r24	; 16

} 
    18ce:	08 95       	ret

000018d0 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    18d0:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <PORT_INIT>
SPI_INIT();
    18d4:	80 e5       	ldi	r24, 0x50	; 80
    18d6:	8c bd       	out	0x2c, r24	; 44
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	8d bd       	out	0x2d, r24	; 45
}
    18dc:	08 95       	ret

000018de <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    18de:	8f 3f       	cpi	r24, 0xFF	; 255
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <nrk_gpio_set+0x6>
    18e2:	71 c0       	rjmp	.+226    	; 0x19c6 <nrk_gpio_set+0xe8>

        switch (pin & 0x07) {
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	27 70       	andi	r18, 0x07	; 7
    18ea:	30 70       	andi	r19, 0x00	; 0
    18ec:	22 30       	cpi	r18, 0x02	; 2
    18ee:	31 05       	cpc	r19, r1
    18f0:	89 f1       	breq	.+98     	; 0x1954 <nrk_gpio_set+0x76>
    18f2:	23 30       	cpi	r18, 0x03	; 3
    18f4:	31 05       	cpc	r19, r1
    18f6:	44 f4       	brge	.+16     	; 0x1908 <nrk_gpio_set+0x2a>
    18f8:	21 15       	cp	r18, r1
    18fa:	31 05       	cpc	r19, r1
    18fc:	89 f0       	breq	.+34     	; 0x1920 <nrk_gpio_set+0x42>
    18fe:	21 30       	cpi	r18, 0x01	; 1
    1900:	31 05       	cpc	r19, r1
    1902:	09 f0       	breq	.+2      	; 0x1906 <nrk_gpio_set+0x28>
    1904:	60 c0       	rjmp	.+192    	; 0x19c6 <nrk_gpio_set+0xe8>
    1906:	1a c0       	rjmp	.+52     	; 0x193c <nrk_gpio_set+0x5e>
    1908:	24 30       	cpi	r18, 0x04	; 4
    190a:	31 05       	cpc	r19, r1
    190c:	09 f4       	brne	.+2      	; 0x1910 <nrk_gpio_set+0x32>
    190e:	3e c0       	rjmp	.+124    	; 0x198c <nrk_gpio_set+0xae>
    1910:	24 30       	cpi	r18, 0x04	; 4
    1912:	31 05       	cpc	r19, r1
    1914:	6c f1       	brlt	.+90     	; 0x1970 <nrk_gpio_set+0x92>
    1916:	25 30       	cpi	r18, 0x05	; 5
    1918:	31 05       	cpc	r19, r1
    191a:	09 f0       	breq	.+2      	; 0x191e <nrk_gpio_set+0x40>
    191c:	54 c0       	rjmp	.+168    	; 0x19c6 <nrk_gpio_set+0xe8>
    191e:	44 c0       	rjmp	.+136    	; 0x19a8 <nrk_gpio_set+0xca>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1920:	92 b1       	in	r25, 0x02	; 2
    1922:	86 95       	lsr	r24
    1924:	86 95       	lsr	r24
    1926:	86 95       	lsr	r24
    1928:	41 e0       	ldi	r20, 0x01	; 1
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <nrk_gpio_set+0x54>
    192e:	44 0f       	add	r20, r20
    1930:	55 1f       	adc	r21, r21
    1932:	8a 95       	dec	r24
    1934:	e2 f7       	brpl	.-8      	; 0x192e <nrk_gpio_set+0x50>
    1936:	94 2b       	or	r25, r20
    1938:	92 b9       	out	0x02, r25	; 2
    193a:	43 c0       	rjmp	.+134    	; 0x19c2 <nrk_gpio_set+0xe4>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    193c:	95 b1       	in	r25, 0x05	; 5
    193e:	86 95       	lsr	r24
    1940:	86 95       	lsr	r24
    1942:	86 95       	lsr	r24
    1944:	02 c0       	rjmp	.+4      	; 0x194a <nrk_gpio_set+0x6c>
    1946:	22 0f       	add	r18, r18
    1948:	33 1f       	adc	r19, r19
    194a:	8a 95       	dec	r24
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <nrk_gpio_set+0x68>
    194e:	92 2b       	or	r25, r18
    1950:	95 b9       	out	0x05, r25	; 5
    1952:	37 c0       	rjmp	.+110    	; 0x19c2 <nrk_gpio_set+0xe4>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1954:	98 b1       	in	r25, 0x08	; 8
    1956:	86 95       	lsr	r24
    1958:	86 95       	lsr	r24
    195a:	86 95       	lsr	r24
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <nrk_gpio_set+0x88>
    1962:	44 0f       	add	r20, r20
    1964:	55 1f       	adc	r21, r21
    1966:	8a 95       	dec	r24
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <nrk_gpio_set+0x84>
    196a:	94 2b       	or	r25, r20
    196c:	98 b9       	out	0x08, r25	; 8
    196e:	29 c0       	rjmp	.+82     	; 0x19c2 <nrk_gpio_set+0xe4>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1970:	9b b1       	in	r25, 0x0b	; 11
    1972:	86 95       	lsr	r24
    1974:	86 95       	lsr	r24
    1976:	86 95       	lsr	r24
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <nrk_gpio_set+0xa4>
    197e:	44 0f       	add	r20, r20
    1980:	55 1f       	adc	r21, r21
    1982:	8a 95       	dec	r24
    1984:	e2 f7       	brpl	.-8      	; 0x197e <nrk_gpio_set+0xa0>
    1986:	94 2b       	or	r25, r20
    1988:	9b b9       	out	0x0b, r25	; 11
    198a:	1b c0       	rjmp	.+54     	; 0x19c2 <nrk_gpio_set+0xe4>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    198c:	9e b1       	in	r25, 0x0e	; 14
    198e:	86 95       	lsr	r24
    1990:	86 95       	lsr	r24
    1992:	86 95       	lsr	r24
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	02 c0       	rjmp	.+4      	; 0x199e <nrk_gpio_set+0xc0>
    199a:	44 0f       	add	r20, r20
    199c:	55 1f       	adc	r21, r21
    199e:	8a 95       	dec	r24
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <nrk_gpio_set+0xbc>
    19a2:	94 2b       	or	r25, r20
    19a4:	9e b9       	out	0x0e, r25	; 14
    19a6:	0d c0       	rjmp	.+26     	; 0x19c2 <nrk_gpio_set+0xe4>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break;
    19a8:	91 b3       	in	r25, 0x11	; 17
    19aa:	86 95       	lsr	r24
    19ac:	86 95       	lsr	r24
    19ae:	86 95       	lsr	r24
    19b0:	41 e0       	ldi	r20, 0x01	; 1
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <nrk_gpio_set+0xdc>
    19b6:	44 0f       	add	r20, r20
    19b8:	55 1f       	adc	r21, r21
    19ba:	8a 95       	dec	r24
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <nrk_gpio_set+0xd8>
    19be:	94 2b       	or	r25, r20
    19c0:	91 bb       	out	0x11, r25	; 17
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	08 95       	ret
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    19c8:	08 95       	ret

000019ca <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    19ca:	8f 3f       	cpi	r24, 0xFF	; 255
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <nrk_gpio_clr+0x6>
    19ce:	7c c0       	rjmp	.+248    	; 0x1ac8 <nrk_gpio_clr+0xfe>
        switch (pin & 0x07) {
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	27 70       	andi	r18, 0x07	; 7
    19d6:	30 70       	andi	r19, 0x00	; 0
    19d8:	22 30       	cpi	r18, 0x02	; 2
    19da:	31 05       	cpc	r19, r1
    19dc:	a1 f1       	breq	.+104    	; 0x1a46 <nrk_gpio_clr+0x7c>
    19de:	23 30       	cpi	r18, 0x03	; 3
    19e0:	31 05       	cpc	r19, r1
    19e2:	44 f4       	brge	.+16     	; 0x19f4 <nrk_gpio_clr+0x2a>
    19e4:	21 15       	cp	r18, r1
    19e6:	31 05       	cpc	r19, r1
    19e8:	89 f0       	breq	.+34     	; 0x1a0c <nrk_gpio_clr+0x42>
    19ea:	21 30       	cpi	r18, 0x01	; 1
    19ec:	31 05       	cpc	r19, r1
    19ee:	09 f0       	breq	.+2      	; 0x19f2 <nrk_gpio_clr+0x28>
    19f0:	6b c0       	rjmp	.+214    	; 0x1ac8 <nrk_gpio_clr+0xfe>
    19f2:	1c c0       	rjmp	.+56     	; 0x1a2c <nrk_gpio_clr+0x62>
    19f4:	24 30       	cpi	r18, 0x04	; 4
    19f6:	31 05       	cpc	r19, r1
    19f8:	09 f4       	brne	.+2      	; 0x19fc <nrk_gpio_clr+0x32>
    19fa:	45 c0       	rjmp	.+138    	; 0x1a86 <nrk_gpio_clr+0xbc>
    19fc:	24 30       	cpi	r18, 0x04	; 4
    19fe:	31 05       	cpc	r19, r1
    1a00:	94 f1       	brlt	.+100    	; 0x1a66 <nrk_gpio_clr+0x9c>
    1a02:	25 30       	cpi	r18, 0x05	; 5
    1a04:	31 05       	cpc	r19, r1
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <nrk_gpio_clr+0x40>
    1a08:	5f c0       	rjmp	.+190    	; 0x1ac8 <nrk_gpio_clr+0xfe>
    1a0a:	4d c0       	rjmp	.+154    	; 0x1aa6 <nrk_gpio_clr+0xdc>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1a0c:	32 b1       	in	r19, 0x02	; 2
    1a0e:	28 2f       	mov	r18, r24
    1a10:	26 95       	lsr	r18
    1a12:	26 95       	lsr	r18
    1a14:	26 95       	lsr	r18
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <nrk_gpio_clr+0x56>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	2a 95       	dec	r18
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <nrk_gpio_clr+0x52>
    1a24:	80 95       	com	r24
    1a26:	83 23       	and	r24, r19
    1a28:	82 b9       	out	0x02, r24	; 2
    1a2a:	4c c0       	rjmp	.+152    	; 0x1ac4 <nrk_gpio_clr+0xfa>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1a2c:	95 b1       	in	r25, 0x05	; 5
    1a2e:	86 95       	lsr	r24
    1a30:	86 95       	lsr	r24
    1a32:	86 95       	lsr	r24
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <nrk_gpio_clr+0x70>
    1a36:	22 0f       	add	r18, r18
    1a38:	33 1f       	adc	r19, r19
    1a3a:	8a 95       	dec	r24
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <nrk_gpio_clr+0x6c>
    1a3e:	20 95       	com	r18
    1a40:	29 23       	and	r18, r25
    1a42:	25 b9       	out	0x05, r18	; 5
    1a44:	3f c0       	rjmp	.+126    	; 0x1ac4 <nrk_gpio_clr+0xfa>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1a46:	38 b1       	in	r19, 0x08	; 8
    1a48:	28 2f       	mov	r18, r24
    1a4a:	26 95       	lsr	r18
    1a4c:	26 95       	lsr	r18
    1a4e:	26 95       	lsr	r18
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <nrk_gpio_clr+0x90>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	2a 95       	dec	r18
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <nrk_gpio_clr+0x8c>
    1a5e:	80 95       	com	r24
    1a60:	83 23       	and	r24, r19
    1a62:	88 b9       	out	0x08, r24	; 8
    1a64:	2f c0       	rjmp	.+94     	; 0x1ac4 <nrk_gpio_clr+0xfa>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1a66:	3b b1       	in	r19, 0x0b	; 11
    1a68:	28 2f       	mov	r18, r24
    1a6a:	26 95       	lsr	r18
    1a6c:	26 95       	lsr	r18
    1a6e:	26 95       	lsr	r18
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <nrk_gpio_clr+0xb0>
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	2a 95       	dec	r18
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <nrk_gpio_clr+0xac>
    1a7e:	80 95       	com	r24
    1a80:	83 23       	and	r24, r19
    1a82:	8b b9       	out	0x0b, r24	; 11
    1a84:	1f c0       	rjmp	.+62     	; 0x1ac4 <nrk_gpio_clr+0xfa>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1a86:	3e b1       	in	r19, 0x0e	; 14
    1a88:	28 2f       	mov	r18, r24
    1a8a:	26 95       	lsr	r18
    1a8c:	26 95       	lsr	r18
    1a8e:	26 95       	lsr	r18
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <nrk_gpio_clr+0xd0>
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	2a 95       	dec	r18
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <nrk_gpio_clr+0xcc>
    1a9e:	80 95       	com	r24
    1aa0:	83 23       	and	r24, r19
    1aa2:	8e b9       	out	0x0e, r24	; 14
    1aa4:	0f c0       	rjmp	.+30     	; 0x1ac4 <nrk_gpio_clr+0xfa>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1aa6:	31 b3       	in	r19, 0x11	; 17
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	26 95       	lsr	r18
    1aac:	26 95       	lsr	r18
    1aae:	26 95       	lsr	r18
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <nrk_gpio_clr+0xf0>
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	2a 95       	dec	r18
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <nrk_gpio_clr+0xec>
    1abe:	80 95       	com	r24
    1ac0:	83 23       	and	r24, r19
    1ac2:	81 bb       	out	0x11, r24	; 17
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	08 95       	ret
    1ac8:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    1aca:	08 95       	ret

00001acc <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1acc:	8f 3f       	cpi	r24, 0xFF	; 255
    1ace:	91 f1       	breq	.+100    	; 0x1b34 <nrk_gpio_get+0x68>
        switch (pin & 0x07) {
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	27 70       	andi	r18, 0x07	; 7
    1ad6:	30 70       	andi	r19, 0x00	; 0
    1ad8:	22 30       	cpi	r18, 0x02	; 2
    1ada:	31 05       	cpc	r19, r1
    1adc:	c1 f0       	breq	.+48     	; 0x1b0e <nrk_gpio_get+0x42>
    1ade:	23 30       	cpi	r18, 0x03	; 3
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	3c f4       	brge	.+14     	; 0x1af2 <nrk_gpio_get+0x26>
    1ae4:	21 15       	cp	r18, r1
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	71 f0       	breq	.+28     	; 0x1b06 <nrk_gpio_get+0x3a>
    1aea:	21 30       	cpi	r18, 0x01	; 1
    1aec:	31 05       	cpc	r19, r1
    1aee:	11 f5       	brne	.+68     	; 0x1b34 <nrk_gpio_get+0x68>
    1af0:	0c c0       	rjmp	.+24     	; 0x1b0a <nrk_gpio_get+0x3e>
    1af2:	24 30       	cpi	r18, 0x04	; 4
    1af4:	31 05       	cpc	r19, r1
    1af6:	79 f0       	breq	.+30     	; 0x1b16 <nrk_gpio_get+0x4a>
    1af8:	24 30       	cpi	r18, 0x04	; 4
    1afa:	31 05       	cpc	r19, r1
    1afc:	54 f0       	brlt	.+20     	; 0x1b12 <nrk_gpio_get+0x46>
    1afe:	25 30       	cpi	r18, 0x05	; 5
    1b00:	31 05       	cpc	r19, r1
    1b02:	c1 f4       	brne	.+48     	; 0x1b34 <nrk_gpio_get+0x68>
    1b04:	0a c0       	rjmp	.+20     	; 0x1b1a <nrk_gpio_get+0x4e>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    1b06:	20 b1       	in	r18, 0x00	; 0
    1b08:	09 c0       	rjmp	.+18     	; 0x1b1c <nrk_gpio_get+0x50>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    1b0a:	23 b1       	in	r18, 0x03	; 3
    1b0c:	07 c0       	rjmp	.+14     	; 0x1b1c <nrk_gpio_get+0x50>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1b0e:	26 b1       	in	r18, 0x06	; 6
    1b10:	05 c0       	rjmp	.+10     	; 0x1b1c <nrk_gpio_get+0x50>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    1b12:	29 b1       	in	r18, 0x09	; 9
    1b14:	03 c0       	rjmp	.+6      	; 0x1b1c <nrk_gpio_get+0x50>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    1b16:	2c b1       	in	r18, 0x0c	; 12
    1b18:	01 c0       	rjmp	.+2      	; 0x1b1c <nrk_gpio_get+0x50>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    1b1a:	2f b1       	in	r18, 0x0f	; 15
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	86 95       	lsr	r24
    1b20:	86 95       	lsr	r24
    1b22:	86 95       	lsr	r24
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <nrk_gpio_get+0x5e>
    1b26:	35 95       	asr	r19
    1b28:	27 95       	ror	r18
    1b2a:	8a 95       	dec	r24
    1b2c:	e2 f7       	brpl	.-8      	; 0x1b26 <nrk_gpio_get+0x5a>
    1b2e:	82 2f       	mov	r24, r18
    1b30:	81 70       	andi	r24, 0x01	; 1
    1b32:	08 95       	ret
    1b34:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    1b36:	08 95       	ret

00001b38 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1b38:	8f 3f       	cpi	r24, 0xFF	; 255
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <nrk_gpio_toggle+0x6>
    1b3c:	f5 c0       	rjmp	.+490    	; 0x1d28 <nrk_gpio_toggle+0x1f0>
        switch (pin & 0x07) {
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	27 70       	andi	r18, 0x07	; 7
    1b44:	30 70       	andi	r19, 0x00	; 0
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <nrk_gpio_toggle+0x16>
    1b4c:	58 c0       	rjmp	.+176    	; 0x1bfe <nrk_gpio_toggle+0xc6>
    1b4e:	23 30       	cpi	r18, 0x03	; 3
    1b50:	31 05       	cpc	r19, r1
    1b52:	44 f4       	brge	.+16     	; 0x1b64 <nrk_gpio_toggle+0x2c>
    1b54:	21 15       	cp	r18, r1
    1b56:	31 05       	cpc	r19, r1
    1b58:	91 f0       	breq	.+36     	; 0x1b7e <nrk_gpio_toggle+0x46>
    1b5a:	21 30       	cpi	r18, 0x01	; 1
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <nrk_gpio_toggle+0x2a>
    1b60:	e3 c0       	rjmp	.+454    	; 0x1d28 <nrk_gpio_toggle+0x1f0>
    1b62:	32 c0       	rjmp	.+100    	; 0x1bc8 <nrk_gpio_toggle+0x90>
    1b64:	24 30       	cpi	r18, 0x04	; 4
    1b66:	31 05       	cpc	r19, r1
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <nrk_gpio_toggle+0x34>
    1b6a:	93 c0       	rjmp	.+294    	; 0x1c92 <nrk_gpio_toggle+0x15a>
    1b6c:	24 30       	cpi	r18, 0x04	; 4
    1b6e:	31 05       	cpc	r19, r1
    1b70:	0c f4       	brge	.+2      	; 0x1b74 <nrk_gpio_toggle+0x3c>
    1b72:	6a c0       	rjmp	.+212    	; 0x1c48 <nrk_gpio_toggle+0x110>
    1b74:	25 30       	cpi	r18, 0x05	; 5
    1b76:	31 05       	cpc	r19, r1
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <nrk_gpio_toggle+0x44>
    1b7a:	d6 c0       	rjmp	.+428    	; 0x1d28 <nrk_gpio_toggle+0x1f0>
    1b7c:	af c0       	rjmp	.+350    	; 0x1cdc <nrk_gpio_toggle+0x1a4>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1b7e:	90 b1       	in	r25, 0x00	; 0
    1b80:	86 95       	lsr	r24
    1b82:	86 95       	lsr	r24
    1b84:	86 95       	lsr	r24
    1b86:	28 2f       	mov	r18, r24
    1b88:	89 2f       	mov	r24, r25
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	02 2e       	mov	r0, r18
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <nrk_gpio_toggle+0x5c>
    1b90:	95 95       	asr	r25
    1b92:	87 95       	ror	r24
    1b94:	0a 94       	dec	r0
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <nrk_gpio_toggle+0x58>
    1b98:	80 fd       	sbrc	r24, 0
    1b9a:	0a c0       	rjmp	.+20     	; 0x1bb0 <nrk_gpio_toggle+0x78>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    1b9c:	82 b1       	in	r24, 0x02	; 2
    1b9e:	41 e0       	ldi	r20, 0x01	; 1
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <nrk_gpio_toggle+0x70>
    1ba4:	44 0f       	add	r20, r20
    1ba6:	55 1f       	adc	r21, r21
    1ba8:	2a 95       	dec	r18
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <nrk_gpio_toggle+0x6c>
    1bac:	84 2b       	or	r24, r20
    1bae:	0a c0       	rjmp	.+20     	; 0x1bc4 <nrk_gpio_toggle+0x8c>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    1bb0:	32 b1       	in	r19, 0x02	; 2
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <nrk_gpio_toggle+0x84>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	2a 95       	dec	r18
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <nrk_gpio_toggle+0x80>
    1bc0:	80 95       	com	r24
    1bc2:	83 23       	and	r24, r19
    1bc4:	82 b9       	out	0x02, r24	; 2
    1bc6:	ae c0       	rjmp	.+348    	; 0x1d24 <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1bc8:	43 b1       	in	r20, 0x03	; 3
    1bca:	86 95       	lsr	r24
    1bcc:	86 95       	lsr	r24
    1bce:	86 95       	lsr	r24
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	08 2e       	mov	r0, r24
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <nrk_gpio_toggle+0xa2>
    1bd6:	55 95       	asr	r21
    1bd8:	47 95       	ror	r20
    1bda:	0a 94       	dec	r0
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <nrk_gpio_toggle+0x9e>
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <nrk_gpio_toggle+0xac>
    1be0:	22 0f       	add	r18, r18
    1be2:	33 1f       	adc	r19, r19
    1be4:	8a 95       	dec	r24
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <nrk_gpio_toggle+0xa8>
    1be8:	40 fd       	sbrc	r20, 0
    1bea:	04 c0       	rjmp	.+8      	; 0x1bf4 <nrk_gpio_toggle+0xbc>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1bec:	95 b1       	in	r25, 0x05	; 5
    1bee:	92 2b       	or	r25, r18
    1bf0:	95 b9       	out	0x05, r25	; 5
    1bf2:	98 c0       	rjmp	.+304    	; 0x1d24 <nrk_gpio_toggle+0x1ec>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    1bf4:	85 b1       	in	r24, 0x05	; 5
    1bf6:	20 95       	com	r18
    1bf8:	28 23       	and	r18, r24
    1bfa:	25 b9       	out	0x05, r18	; 5
    1bfc:	93 c0       	rjmp	.+294    	; 0x1d24 <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1bfe:	96 b1       	in	r25, 0x06	; 6
    1c00:	86 95       	lsr	r24
    1c02:	86 95       	lsr	r24
    1c04:	86 95       	lsr	r24
    1c06:	28 2f       	mov	r18, r24
    1c08:	89 2f       	mov	r24, r25
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	02 2e       	mov	r0, r18
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <nrk_gpio_toggle+0xdc>
    1c10:	95 95       	asr	r25
    1c12:	87 95       	ror	r24
    1c14:	0a 94       	dec	r0
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <nrk_gpio_toggle+0xd8>
    1c18:	80 fd       	sbrc	r24, 0
    1c1a:	0a c0       	rjmp	.+20     	; 0x1c30 <nrk_gpio_toggle+0xf8>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1c1c:	88 b1       	in	r24, 0x08	; 8
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <nrk_gpio_toggle+0xf0>
    1c24:	44 0f       	add	r20, r20
    1c26:	55 1f       	adc	r21, r21
    1c28:	2a 95       	dec	r18
    1c2a:	e2 f7       	brpl	.-8      	; 0x1c24 <nrk_gpio_toggle+0xec>
    1c2c:	84 2b       	or	r24, r20
    1c2e:	0a c0       	rjmp	.+20     	; 0x1c44 <nrk_gpio_toggle+0x10c>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    1c30:	38 b1       	in	r19, 0x08	; 8
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <nrk_gpio_toggle+0x104>
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	2a 95       	dec	r18
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <nrk_gpio_toggle+0x100>
    1c40:	80 95       	com	r24
    1c42:	83 23       	and	r24, r19
    1c44:	88 b9       	out	0x08, r24	; 8
    1c46:	6e c0       	rjmp	.+220    	; 0x1d24 <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1c48:	99 b1       	in	r25, 0x09	; 9
    1c4a:	86 95       	lsr	r24
    1c4c:	86 95       	lsr	r24
    1c4e:	86 95       	lsr	r24
    1c50:	28 2f       	mov	r18, r24
    1c52:	89 2f       	mov	r24, r25
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <nrk_gpio_toggle+0x126>
    1c5a:	95 95       	asr	r25
    1c5c:	87 95       	ror	r24
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <nrk_gpio_toggle+0x122>
    1c62:	80 fd       	sbrc	r24, 0
    1c64:	0a c0       	rjmp	.+20     	; 0x1c7a <nrk_gpio_toggle+0x142>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1c66:	8b b1       	in	r24, 0x0b	; 11
    1c68:	41 e0       	ldi	r20, 0x01	; 1
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <nrk_gpio_toggle+0x13a>
    1c6e:	44 0f       	add	r20, r20
    1c70:	55 1f       	adc	r21, r21
    1c72:	2a 95       	dec	r18
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <nrk_gpio_toggle+0x136>
    1c76:	84 2b       	or	r24, r20
    1c78:	0a c0       	rjmp	.+20     	; 0x1c8e <nrk_gpio_toggle+0x156>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    1c7a:	3b b1       	in	r19, 0x0b	; 11
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <nrk_gpio_toggle+0x14e>
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	2a 95       	dec	r18
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <nrk_gpio_toggle+0x14a>
    1c8a:	80 95       	com	r24
    1c8c:	83 23       	and	r24, r19
    1c8e:	8b b9       	out	0x0b, r24	; 11
    1c90:	49 c0       	rjmp	.+146    	; 0x1d24 <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    1c92:	9c b1       	in	r25, 0x0c	; 12
    1c94:	86 95       	lsr	r24
    1c96:	86 95       	lsr	r24
    1c98:	86 95       	lsr	r24
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	89 2f       	mov	r24, r25
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 2e       	mov	r0, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <nrk_gpio_toggle+0x170>
    1ca4:	95 95       	asr	r25
    1ca6:	87 95       	ror	r24
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <nrk_gpio_toggle+0x16c>
    1cac:	80 fd       	sbrc	r24, 0
    1cae:	0a c0       	rjmp	.+20     	; 0x1cc4 <nrk_gpio_toggle+0x18c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    1cb0:	8e b1       	in	r24, 0x0e	; 14
    1cb2:	41 e0       	ldi	r20, 0x01	; 1
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <nrk_gpio_toggle+0x184>
    1cb8:	44 0f       	add	r20, r20
    1cba:	55 1f       	adc	r21, r21
    1cbc:	2a 95       	dec	r18
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <nrk_gpio_toggle+0x180>
    1cc0:	84 2b       	or	r24, r20
    1cc2:	0a c0       	rjmp	.+20     	; 0x1cd8 <nrk_gpio_toggle+0x1a0>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    1cc4:	3e b1       	in	r19, 0x0e	; 14
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <nrk_gpio_toggle+0x198>
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	2a 95       	dec	r18
    1cd2:	e2 f7       	brpl	.-8      	; 0x1ccc <nrk_gpio_toggle+0x194>
    1cd4:	80 95       	com	r24
    1cd6:	83 23       	and	r24, r19
    1cd8:	8e b9       	out	0x0e, r24	; 14
    1cda:	24 c0       	rjmp	.+72     	; 0x1d24 <nrk_gpio_toggle+0x1ec>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1cdc:	9f b1       	in	r25, 0x0f	; 15
    1cde:	86 95       	lsr	r24
    1ce0:	86 95       	lsr	r24
    1ce2:	86 95       	lsr	r24
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	89 2f       	mov	r24, r25
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	02 2e       	mov	r0, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <nrk_gpio_toggle+0x1ba>
    1cee:	95 95       	asr	r25
    1cf0:	87 95       	ror	r24
    1cf2:	0a 94       	dec	r0
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <nrk_gpio_toggle+0x1b6>
    1cf6:	80 fd       	sbrc	r24, 0
    1cf8:	0a c0       	rjmp	.+20     	; 0x1d0e <nrk_gpio_toggle+0x1d6>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1cfa:	81 b3       	in	r24, 0x11	; 17
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <nrk_gpio_toggle+0x1ce>
    1d02:	44 0f       	add	r20, r20
    1d04:	55 1f       	adc	r21, r21
    1d06:	2a 95       	dec	r18
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <nrk_gpio_toggle+0x1ca>
    1d0a:	84 2b       	or	r24, r20
    1d0c:	0a c0       	rjmp	.+20     	; 0x1d22 <nrk_gpio_toggle+0x1ea>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    1d0e:	31 b3       	in	r19, 0x11	; 17
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <nrk_gpio_toggle+0x1e2>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	2a 95       	dec	r18
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <nrk_gpio_toggle+0x1de>
    1d1e:	80 95       	com	r24
    1d20:	83 23       	and	r24, r19
    1d22:	81 bb       	out	0x11, r24	; 17
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	08 95       	ret
    1d28:	8f ef       	ldi	r24, 0xFF	; 255
                        }
                        break;
                default: return -1;
        }
        return 1;
}
    1d2a:	08 95       	ret

00001d2c <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1d2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <nrk_gpio_direction+0x6>
    1d30:	f7 c0       	rjmp	.+494    	; 0x1f20 <nrk_gpio_direction+0x1f4>
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
        if (pin_direction == NRK_PIN_INPUT) {
    1d36:	66 23       	and	r22, r22
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <nrk_gpio_direction+0x10>
    1d3a:	83 c0       	rjmp	.+262    	; 0x1e42 <nrk_gpio_direction+0x116>
                switch (pin & 0x07) {
    1d3c:	27 70       	andi	r18, 0x07	; 7
    1d3e:	30 70       	andi	r19, 0x00	; 0
    1d40:	22 30       	cpi	r18, 0x02	; 2
    1d42:	31 05       	cpc	r19, r1
    1d44:	d9 f1       	breq	.+118    	; 0x1dbc <nrk_gpio_direction+0x90>
    1d46:	23 30       	cpi	r18, 0x03	; 3
    1d48:	31 05       	cpc	r19, r1
    1d4a:	44 f4       	brge	.+16     	; 0x1d5c <nrk_gpio_direction+0x30>
    1d4c:	21 15       	cp	r18, r1
    1d4e:	31 05       	cpc	r19, r1
    1d50:	89 f0       	breq	.+34     	; 0x1d74 <nrk_gpio_direction+0x48>
    1d52:	21 30       	cpi	r18, 0x01	; 1
    1d54:	31 05       	cpc	r19, r1
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <nrk_gpio_direction+0x2e>
    1d58:	e3 c0       	rjmp	.+454    	; 0x1f20 <nrk_gpio_direction+0x1f4>
    1d5a:	1f c0       	rjmp	.+62     	; 0x1d9a <nrk_gpio_direction+0x6e>
    1d5c:	24 30       	cpi	r18, 0x04	; 4
    1d5e:	31 05       	cpc	r19, r1
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <nrk_gpio_direction+0x38>
    1d62:	4c c0       	rjmp	.+152    	; 0x1dfc <nrk_gpio_direction+0xd0>
    1d64:	24 30       	cpi	r18, 0x04	; 4
    1d66:	31 05       	cpc	r19, r1
    1d68:	cc f1       	brlt	.+114    	; 0x1ddc <nrk_gpio_direction+0xb0>
    1d6a:	25 30       	cpi	r18, 0x05	; 5
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <nrk_gpio_direction+0x46>
    1d70:	d7 c0       	rjmp	.+430    	; 0x1f20 <nrk_gpio_direction+0x1f4>
    1d72:	54 c0       	rjmp	.+168    	; 0x1e1c <nrk_gpio_direction+0xf0>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    1d74:	91 b1       	in	r25, 0x01	; 1
    1d76:	86 95       	lsr	r24
    1d78:	86 95       	lsr	r24
    1d7a:	86 95       	lsr	r24
    1d7c:	21 e0       	ldi	r18, 0x01	; 1
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <nrk_gpio_direction+0x5a>
    1d82:	22 0f       	add	r18, r18
    1d84:	33 1f       	adc	r19, r19
    1d86:	8a 95       	dec	r24
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <nrk_gpio_direction+0x56>
    1d8a:	82 2f       	mov	r24, r18
    1d8c:	80 95       	com	r24
    1d8e:	89 23       	and	r24, r25
    1d90:	81 b9       	out	0x01, r24	; 1
                                PORTA |= BM((pin & 0xF8) >> 3); 
    1d92:	82 b1       	in	r24, 0x02	; 2
    1d94:	82 2b       	or	r24, r18
    1d96:	82 b9       	out	0x02, r24	; 2
    1d98:	c1 c0       	rjmp	.+386    	; 0x1f1c <nrk_gpio_direction+0x1f0>
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    1d9a:	44 b1       	in	r20, 0x04	; 4
    1d9c:	86 95       	lsr	r24
    1d9e:	86 95       	lsr	r24
    1da0:	86 95       	lsr	r24
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <nrk_gpio_direction+0x7c>
    1da4:	22 0f       	add	r18, r18
    1da6:	33 1f       	adc	r19, r19
    1da8:	8a 95       	dec	r24
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <nrk_gpio_direction+0x78>
    1dac:	92 2f       	mov	r25, r18
    1dae:	90 95       	com	r25
    1db0:	94 23       	and	r25, r20
    1db2:	94 b9       	out	0x04, r25	; 4
                                PORTB |= BM((pin & 0xF8) >> 3); 
    1db4:	95 b1       	in	r25, 0x05	; 5
    1db6:	92 2b       	or	r25, r18
    1db8:	95 b9       	out	0x05, r25	; 5
    1dba:	b0 c0       	rjmp	.+352    	; 0x1f1c <nrk_gpio_direction+0x1f0>
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    1dbc:	97 b1       	in	r25, 0x07	; 7
    1dbe:	86 95       	lsr	r24
    1dc0:	86 95       	lsr	r24
    1dc2:	86 95       	lsr	r24
    1dc4:	21 e0       	ldi	r18, 0x01	; 1
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <nrk_gpio_direction+0xa2>
    1dca:	22 0f       	add	r18, r18
    1dcc:	33 1f       	adc	r19, r19
    1dce:	8a 95       	dec	r24
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <nrk_gpio_direction+0x9e>
    1dd2:	82 2f       	mov	r24, r18
    1dd4:	80 95       	com	r24
    1dd6:	89 23       	and	r24, r25
    1dd8:	87 b9       	out	0x07, r24	; 7
    1dda:	2f c0       	rjmp	.+94     	; 0x1e3a <nrk_gpio_direction+0x10e>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    1ddc:	9a b1       	in	r25, 0x0a	; 10
    1dde:	86 95       	lsr	r24
    1de0:	86 95       	lsr	r24
    1de2:	86 95       	lsr	r24
    1de4:	21 e0       	ldi	r18, 0x01	; 1
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <nrk_gpio_direction+0xc2>
    1dea:	22 0f       	add	r18, r18
    1dec:	33 1f       	adc	r19, r19
    1dee:	8a 95       	dec	r24
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <nrk_gpio_direction+0xbe>
    1df2:	82 2f       	mov	r24, r18
    1df4:	80 95       	com	r24
    1df6:	89 23       	and	r24, r25
    1df8:	8a b9       	out	0x0a, r24	; 10
    1dfa:	1f c0       	rjmp	.+62     	; 0x1e3a <nrk_gpio_direction+0x10e>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    1dfc:	9d b1       	in	r25, 0x0d	; 13
    1dfe:	86 95       	lsr	r24
    1e00:	86 95       	lsr	r24
    1e02:	86 95       	lsr	r24
    1e04:	21 e0       	ldi	r18, 0x01	; 1
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <nrk_gpio_direction+0xe2>
    1e0a:	22 0f       	add	r18, r18
    1e0c:	33 1f       	adc	r19, r19
    1e0e:	8a 95       	dec	r24
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <nrk_gpio_direction+0xde>
    1e12:	82 2f       	mov	r24, r18
    1e14:	80 95       	com	r24
    1e16:	89 23       	and	r24, r25
    1e18:	8d b9       	out	0x0d, r24	; 13
    1e1a:	0f c0       	rjmp	.+30     	; 0x1e3a <nrk_gpio_direction+0x10e>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    1e1c:	90 b3       	in	r25, 0x10	; 16
    1e1e:	86 95       	lsr	r24
    1e20:	86 95       	lsr	r24
    1e22:	86 95       	lsr	r24
    1e24:	21 e0       	ldi	r18, 0x01	; 1
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <nrk_gpio_direction+0x102>
    1e2a:	22 0f       	add	r18, r18
    1e2c:	33 1f       	adc	r19, r19
    1e2e:	8a 95       	dec	r24
    1e30:	e2 f7       	brpl	.-8      	; 0x1e2a <nrk_gpio_direction+0xfe>
    1e32:	82 2f       	mov	r24, r18
    1e34:	80 95       	com	r24
    1e36:	89 23       	and	r24, r25
    1e38:	80 bb       	out	0x10, r24	; 16
                                PORTB |= BM((pin & 0xF8) >> 3); 
    1e3a:	85 b1       	in	r24, 0x05	; 5
    1e3c:	82 2b       	or	r24, r18
    1e3e:	85 b9       	out	0x05, r24	; 5
    1e40:	6d c0       	rjmp	.+218    	; 0x1f1c <nrk_gpio_direction+0x1f0>
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    1e42:	27 70       	andi	r18, 0x07	; 7
    1e44:	30 70       	andi	r19, 0x00	; 0
    1e46:	22 30       	cpi	r18, 0x02	; 2
    1e48:	31 05       	cpc	r19, r1
    1e4a:	89 f1       	breq	.+98     	; 0x1eae <nrk_gpio_direction+0x182>
    1e4c:	23 30       	cpi	r18, 0x03	; 3
    1e4e:	31 05       	cpc	r19, r1
    1e50:	44 f4       	brge	.+16     	; 0x1e62 <nrk_gpio_direction+0x136>
    1e52:	21 15       	cp	r18, r1
    1e54:	31 05       	cpc	r19, r1
    1e56:	89 f0       	breq	.+34     	; 0x1e7a <nrk_gpio_direction+0x14e>
    1e58:	21 30       	cpi	r18, 0x01	; 1
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <nrk_gpio_direction+0x134>
    1e5e:	60 c0       	rjmp	.+192    	; 0x1f20 <nrk_gpio_direction+0x1f4>
    1e60:	1a c0       	rjmp	.+52     	; 0x1e96 <nrk_gpio_direction+0x16a>
    1e62:	24 30       	cpi	r18, 0x04	; 4
    1e64:	31 05       	cpc	r19, r1
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <nrk_gpio_direction+0x13e>
    1e68:	3e c0       	rjmp	.+124    	; 0x1ee6 <nrk_gpio_direction+0x1ba>
    1e6a:	24 30       	cpi	r18, 0x04	; 4
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	6c f1       	brlt	.+90     	; 0x1eca <nrk_gpio_direction+0x19e>
    1e70:	25 30       	cpi	r18, 0x05	; 5
    1e72:	31 05       	cpc	r19, r1
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <nrk_gpio_direction+0x14c>
    1e76:	54 c0       	rjmp	.+168    	; 0x1f20 <nrk_gpio_direction+0x1f4>
    1e78:	44 c0       	rjmp	.+136    	; 0x1f02 <nrk_gpio_direction+0x1d6>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    1e7a:	91 b1       	in	r25, 0x01	; 1
    1e7c:	86 95       	lsr	r24
    1e7e:	86 95       	lsr	r24
    1e80:	86 95       	lsr	r24
    1e82:	21 e0       	ldi	r18, 0x01	; 1
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <nrk_gpio_direction+0x160>
    1e88:	22 0f       	add	r18, r18
    1e8a:	33 1f       	adc	r19, r19
    1e8c:	8a 95       	dec	r24
    1e8e:	e2 f7       	brpl	.-8      	; 0x1e88 <nrk_gpio_direction+0x15c>
    1e90:	92 2b       	or	r25, r18
    1e92:	91 b9       	out	0x01, r25	; 1
    1e94:	43 c0       	rjmp	.+134    	; 0x1f1c <nrk_gpio_direction+0x1f0>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    1e96:	94 b1       	in	r25, 0x04	; 4
    1e98:	86 95       	lsr	r24
    1e9a:	86 95       	lsr	r24
    1e9c:	86 95       	lsr	r24
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <nrk_gpio_direction+0x178>
    1ea0:	22 0f       	add	r18, r18
    1ea2:	33 1f       	adc	r19, r19
    1ea4:	8a 95       	dec	r24
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <nrk_gpio_direction+0x174>
    1ea8:	92 2b       	or	r25, r18
    1eaa:	94 b9       	out	0x04, r25	; 4
    1eac:	37 c0       	rjmp	.+110    	; 0x1f1c <nrk_gpio_direction+0x1f0>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    1eae:	97 b1       	in	r25, 0x07	; 7
    1eb0:	86 95       	lsr	r24
    1eb2:	86 95       	lsr	r24
    1eb4:	86 95       	lsr	r24
    1eb6:	21 e0       	ldi	r18, 0x01	; 1
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <nrk_gpio_direction+0x194>
    1ebc:	22 0f       	add	r18, r18
    1ebe:	33 1f       	adc	r19, r19
    1ec0:	8a 95       	dec	r24
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <nrk_gpio_direction+0x190>
    1ec4:	92 2b       	or	r25, r18
    1ec6:	97 b9       	out	0x07, r25	; 7
    1ec8:	29 c0       	rjmp	.+82     	; 0x1f1c <nrk_gpio_direction+0x1f0>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    1eca:	9a b1       	in	r25, 0x0a	; 10
    1ecc:	86 95       	lsr	r24
    1ece:	86 95       	lsr	r24
    1ed0:	86 95       	lsr	r24
    1ed2:	21 e0       	ldi	r18, 0x01	; 1
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <nrk_gpio_direction+0x1b0>
    1ed8:	22 0f       	add	r18, r18
    1eda:	33 1f       	adc	r19, r19
    1edc:	8a 95       	dec	r24
    1ede:	e2 f7       	brpl	.-8      	; 0x1ed8 <nrk_gpio_direction+0x1ac>
    1ee0:	92 2b       	or	r25, r18
    1ee2:	9a b9       	out	0x0a, r25	; 10
    1ee4:	1b c0       	rjmp	.+54     	; 0x1f1c <nrk_gpio_direction+0x1f0>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    1ee6:	9d b1       	in	r25, 0x0d	; 13
    1ee8:	86 95       	lsr	r24
    1eea:	86 95       	lsr	r24
    1eec:	86 95       	lsr	r24
    1eee:	21 e0       	ldi	r18, 0x01	; 1
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <nrk_gpio_direction+0x1cc>
    1ef4:	22 0f       	add	r18, r18
    1ef6:	33 1f       	adc	r19, r19
    1ef8:	8a 95       	dec	r24
    1efa:	e2 f7       	brpl	.-8      	; 0x1ef4 <nrk_gpio_direction+0x1c8>
    1efc:	92 2b       	or	r25, r18
    1efe:	9d b9       	out	0x0d, r25	; 13
    1f00:	0d c0       	rjmp	.+26     	; 0x1f1c <nrk_gpio_direction+0x1f0>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    1f02:	90 b3       	in	r25, 0x10	; 16
    1f04:	86 95       	lsr	r24
    1f06:	86 95       	lsr	r24
    1f08:	86 95       	lsr	r24
    1f0a:	21 e0       	ldi	r18, 0x01	; 1
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <nrk_gpio_direction+0x1e8>
    1f10:	22 0f       	add	r18, r18
    1f12:	33 1f       	adc	r19, r19
    1f14:	8a 95       	dec	r24
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <nrk_gpio_direction+0x1e4>
    1f18:	92 2b       	or	r25, r18
    1f1a:	90 bb       	out	0x10, r25	; 16
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	08 95       	ret
    1f20:	8f ef       	ldi	r24, 0xFF	; 255
                        default: return -1;
                }
        }
        return 1;
}
    1f22:	08 95       	ret

00001f24 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    1f24:	88 23       	and	r24, r24
    1f26:	11 f0       	breq	.+4      	; 0x1f2c <nrk_get_button+0x8>
    1f28:	8f ef       	ldi	r24, 0xFF	; 255
    1f2a:	08 95       	ret
	 return( !(PINA & BM(BUTTON))); 
    1f2c:	80 b1       	in	r24, 0x00	; 0
    1f2e:	80 95       	com	r24
    1f30:	88 1f       	adc	r24, r24
    1f32:	88 27       	eor	r24, r24
    1f34:	88 1f       	adc	r24, r24
	} 
return -1;
}
    1f36:	08 95       	ret

00001f38 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	11 f4       	brne	.+4      	; 0x1f40 <nrk_led_toggle+0x8>
    1f3c:	84 e1       	ldi	r24, 0x14	; 20
    1f3e:	09 c0       	rjmp	.+18     	; 0x1f52 <nrk_led_toggle+0x1a>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    1f40:	81 30       	cpi	r24, 0x01	; 1
    1f42:	91 05       	cpc	r25, r1
    1f44:	11 f4       	brne	.+4      	; 0x1f4a <nrk_led_toggle+0x12>
    1f46:	8c e1       	ldi	r24, 0x1C	; 28
    1f48:	04 c0       	rjmp	.+8      	; 0x1f52 <nrk_led_toggle+0x1a>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    1f4a:	82 30       	cpi	r24, 0x02	; 2
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	29 f4       	brne	.+10     	; 0x1f5a <nrk_led_toggle+0x22>
    1f50:	84 e2       	ldi	r24, 0x24	; 36
    1f52:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <nrk_gpio_toggle>
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	08 95       	ret
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    1f5a:	83 30       	cpi	r24, 0x03	; 3
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	11 f0       	breq	.+4      	; 0x1f64 <nrk_led_toggle+0x2c>
    1f60:	8f ef       	ldi	r24, 0xFF	; 255
    1f62:	08 95       	ret
    1f64:	8c e2       	ldi	r24, 0x2C	; 44
    1f66:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <nrk_gpio_toggle>
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    1f6c:	08 95       	ret

00001f6e <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	11 f4       	brne	.+4      	; 0x1f76 <nrk_led_clr+0x8>
    1f72:	84 e1       	ldi	r24, 0x14	; 20
    1f74:	09 c0       	rjmp	.+18     	; 0x1f88 <nrk_led_clr+0x1a>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	91 05       	cpc	r25, r1
    1f7a:	11 f4       	brne	.+4      	; 0x1f80 <nrk_led_clr+0x12>
    1f7c:	8c e1       	ldi	r24, 0x1C	; 28
    1f7e:	04 c0       	rjmp	.+8      	; 0x1f88 <nrk_led_clr+0x1a>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    1f80:	82 30       	cpi	r24, 0x02	; 2
    1f82:	91 05       	cpc	r25, r1
    1f84:	29 f4       	brne	.+10     	; 0x1f90 <nrk_led_clr+0x22>
    1f86:	84 e2       	ldi	r24, 0x24	; 36
    1f88:	0e 94 6f 0c 	call	0x18de	; 0x18de <nrk_gpio_set>
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	08 95       	ret
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    1f90:	83 30       	cpi	r24, 0x03	; 3
    1f92:	91 05       	cpc	r25, r1
    1f94:	11 f0       	breq	.+4      	; 0x1f9a <nrk_led_clr+0x2c>
    1f96:	8f ef       	ldi	r24, 0xFF	; 255
    1f98:	08 95       	ret
    1f9a:	8c e2       	ldi	r24, 0x2C	; 44
    1f9c:	0e 94 6f 0c 	call	0x18de	; 0x18de <nrk_gpio_set>
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    1fa2:	08 95       	ret

00001fa4 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	11 f4       	brne	.+4      	; 0x1fac <nrk_led_set+0x8>
    1fa8:	84 e1       	ldi	r24, 0x14	; 20
    1faa:	09 c0       	rjmp	.+18     	; 0x1fbe <nrk_led_set+0x1a>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	91 05       	cpc	r25, r1
    1fb0:	11 f4       	brne	.+4      	; 0x1fb6 <nrk_led_set+0x12>
    1fb2:	8c e1       	ldi	r24, 0x1C	; 28
    1fb4:	04 c0       	rjmp	.+8      	; 0x1fbe <nrk_led_set+0x1a>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    1fb6:	82 30       	cpi	r24, 0x02	; 2
    1fb8:	91 05       	cpc	r25, r1
    1fba:	29 f4       	brne	.+10     	; 0x1fc6 <nrk_led_set+0x22>
    1fbc:	84 e2       	ldi	r24, 0x24	; 36
    1fbe:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_gpio_clr>
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	08 95       	ret
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    1fc6:	83 30       	cpi	r24, 0x03	; 3
    1fc8:	91 05       	cpc	r25, r1
    1fca:	11 f0       	breq	.+4      	; 0x1fd0 <nrk_led_set+0x2c>
    1fcc:	8f ef       	ldi	r24, 0xFF	; 255
    1fce:	08 95       	ret
    1fd0:	8c e2       	ldi	r24, 0x2C	; 44
    1fd2:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_gpio_clr>
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    1fd8:	08 95       	ret

00001fda <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    1fda:	88 23       	and	r24, r24
    1fdc:	19 f0       	breq	.+6      	; 0x1fe4 <nrk_gpio_pullups+0xa>
    1fde:	85 b7       	in	r24, 0x35	; 53
    1fe0:	8f 7e       	andi	r24, 0xEF	; 239
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    1fe4:	85 b7       	in	r24, 0x35	; 53
    1fe6:	80 61       	ori	r24, 0x10	; 16
    1fe8:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	08 95       	ret

00001fee <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    1fee:	90 91 c0 00 	lds	r25, 0x00C0
    1ff2:	95 ff       	sbrs	r25, 5
    1ff4:	fc cf       	rjmp	.-8      	; 0x1fee <putc0>
    1ff6:	90 91 c0 00 	lds	r25, 0x00C0
    1ffa:	9f 7d       	andi	r25, 0xDF	; 223
    1ffc:	90 93 c0 00 	sts	0x00C0, r25
    2000:	80 93 c6 00 	sts	0x00C6, r24
}
    2004:	08 95       	ret

00002006 <putc1>:

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    2006:	90 91 c8 00 	lds	r25, 0x00C8
    200a:	95 ff       	sbrs	r25, 5
    200c:	fc cf       	rjmp	.-8      	; 0x2006 <putc1>
    200e:	80 93 ce 00 	sts	0x00CE, r24
}
    2012:	08 95       	ret

00002014 <setup_uart0>:

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2014:	90 93 c5 00 	sts	0x00C5, r25
    2018:	80 93 c4 00 	sts	0x00C4, r24
    201c:	86 e0       	ldi	r24, 0x06	; 6
    201e:	80 93 c2 00 	sts	0x00C2, r24
    2022:	e1 ec       	ldi	r30, 0xC1	; 193
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	8b 7f       	andi	r24, 0xFB	; 251
    202a:	80 83       	st	Z, r24
    202c:	a0 ec       	ldi	r26, 0xC0	; 192
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	8c 91       	ld	r24, X
    2032:	82 60       	ori	r24, 0x02	; 2
    2034:	8c 93       	st	X, r24
ENABLE_UART0();
    2036:	80 81       	ld	r24, Z
    2038:	88 61       	ori	r24, 0x18	; 24
    203a:	80 83       	st	Z, r24
}
    203c:	08 95       	ret

0000203e <setup_uart1>:

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    203e:	90 93 cd 00 	sts	0x00CD, r25
    2042:	80 93 cc 00 	sts	0x00CC, r24
    2046:	86 e0       	ldi	r24, 0x06	; 6
    2048:	80 93 ca 00 	sts	0x00CA, r24
    204c:	e9 ec       	ldi	r30, 0xC9	; 201
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	8b 7f       	andi	r24, 0xFB	; 251
    2054:	80 83       	st	Z, r24
    2056:	a8 ec       	ldi	r26, 0xC8	; 200
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	8c 91       	ld	r24, X
    205c:	82 60       	ori	r24, 0x02	; 2
    205e:	8c 93       	st	X, r24
ENABLE_UART1();
    2060:	80 81       	ld	r24, Z
    2062:	88 61       	ori	r24, 0x18	; 24
    2064:	80 83       	st	Z, r24
}
    2066:	08 95       	ret

00002068 <getc0>:


/* get one char from uart */
char getc0(void){
	unsigned char tmp;
	UART0_WAIT_AND_RECEIVE(tmp);
    2068:	80 91 c0 00 	lds	r24, 0x00C0
    206c:	87 ff       	sbrs	r24, 7
    206e:	fc cf       	rjmp	.-8      	; 0x2068 <getc0>
    2070:	80 91 c0 00 	lds	r24, 0x00C0
    2074:	8f 77       	andi	r24, 0x7F	; 127
    2076:	80 93 c0 00 	sts	0x00C0, r24
    207a:	80 91 c6 00 	lds	r24, 0x00C6
	return tmp;
}
    207e:	08 95       	ret

00002080 <nrk_setup_uart>:
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{

  setup_uart1(baudrate);
    2080:	0e 94 1f 10 	call	0x203e	; 0x203e <setup_uart1>
  //setup_uart0(baudrate);

  stdout = fdevopen( (void *)putc1, (void *)getc1);
    2084:	83 e0       	ldi	r24, 0x03	; 3
    2086:	90 e1       	ldi	r25, 0x10	; 16
    2088:	6e e1       	ldi	r22, 0x1E	; 30
    208a:	7c e0       	ldi	r23, 0x0C	; 12
    208c:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <fdevopen>
    2090:	90 93 e8 08 	sts	0x08E8, r25
    2094:	80 93 e7 08 	sts	0x08E7, r24
  stdin = fdevopen( (void *)putc1, (void *)getc1);
    2098:	83 e0       	ldi	r24, 0x03	; 3
    209a:	90 e1       	ldi	r25, 0x10	; 16
    209c:	6e e1       	ldi	r22, 0x1E	; 30
    209e:	7c e0       	ldi	r23, 0x0C	; 12
    20a0:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <fdevopen>
    20a4:	90 93 e6 08 	sts	0x08E6, r25
    20a8:	80 93 e5 08 	sts	0x08E5, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    20ac:	0e 94 13 15 	call	0x2a26	; 0x2a26 <nrk_signal_create>
    20b0:	80 93 49 08 	sts	0x0849, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    20b4:	8f 3f       	cpi	r24, 0xFF	; 255
    20b6:	19 f4       	brne	.+6      	; 0x20be <nrk_setup_uart+0x3e>
    20b8:	8e e0       	ldi	r24, 0x0E	; 14
    20ba:	0e 94 e6 13 	call	0x27cc	; 0x27cc <nrk_error_add>
   uart_rx_buf_start=0;
    20be:	10 92 4a 08 	sts	0x084A, r1
   uart_rx_buf_end=0;
    20c2:	10 92 38 08 	sts	0x0838, r1
   ENABLE_UART1_RX_INT();
    20c6:	80 91 c9 00 	lds	r24, 0x00C9
    20ca:	80 68       	ori	r24, 0x80	; 128
    20cc:	80 93 c9 00 	sts	0x00C9, r24
#endif

}
    20d0:	08 95       	ret

000020d2 <nrk_uart_rx_signal_get>:
return 0;
}

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    20d2:	80 91 49 08 	lds	r24, 0x0849
    20d6:	8f 3f       	cpi	r24, 0xFF	; 255
    20d8:	19 f4       	brne	.+6      	; 0x20e0 <nrk_uart_rx_signal_get+0xe>
    20da:	8e e0       	ldi	r24, 0x0E	; 14
    20dc:	0e 94 e6 13 	call	0x27cc	; 0x27cc <nrk_error_add>
   return uart_rx_signal;
}
    20e0:	80 91 49 08 	lds	r24, 0x0849
    20e4:	08 95       	ret

000020e6 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	ec 01       	movw	r28, r24
 char c;
   while((c=pgm_read_byte(addr++)))
    20ec:	07 c0       	rjmp	.+14     	; 0x20fc <nrk_kprintf+0x16>
        putchar(c);
    20ee:	60 91 e7 08 	lds	r22, 0x08E7
    20f2:	70 91 e8 08 	lds	r23, 0x08E8
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fputc>
    20fc:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
    20fe:	21 96       	adiw	r28, 0x01	; 1
    2100:	84 91       	lpm	r24, Z
    2102:	88 23       	and	r24, r24
    2104:	a1 f7       	brne	.-24     	; 0x20ee <nrk_kprintf+0x8>
        putchar(c);
}
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	08 95       	ret

0000210c <__vector_36>:
uint8_t uart_rx_buf_start,uart_rx_buf_end;
char uart_rx_buf[MAX_RX_UART_BUF];
nrk_sig_t uart_rx_signal;

SIGNAL(USART1_RX_vect)
{
    210c:	1f 92       	push	r1
    210e:	0f 92       	push	r0
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	0f 92       	push	r0
    2114:	0b b6       	in	r0, 0x3b	; 59
    2116:	0f 92       	push	r0
    2118:	11 24       	eor	r1, r1
    211a:	2f 93       	push	r18
    211c:	3f 93       	push	r19
    211e:	4f 93       	push	r20
    2120:	5f 93       	push	r21
    2122:	6f 93       	push	r22
    2124:	7f 93       	push	r23
    2126:	8f 93       	push	r24
    2128:	9f 93       	push	r25
    212a:	af 93       	push	r26
    212c:	bf 93       	push	r27
    212e:	ef 93       	push	r30
    2130:	ff 93       	push	r31
char c;
uint8_t sig;
//cli();
DISABLE_UART1_RX_INT();
    2132:	80 91 c9 00 	lds	r24, 0x00C9
    2136:	8f 77       	andi	r24, 0x7F	; 127
    2138:	80 93 c9 00 	sts	0x00C9, r24
   UART1_WAIT_AND_RECEIVE(c);
    213c:	80 91 c8 00 	lds	r24, 0x00C8
    2140:	87 ff       	sbrs	r24, 7
    2142:	fc cf       	rjmp	.-8      	; 0x213c <__vector_36+0x30>
    2144:	80 91 c8 00 	lds	r24, 0x00C8
    2148:	8f 77       	andi	r24, 0x7F	; 127
    214a:	80 93 c8 00 	sts	0x00C8, r24
    214e:	90 91 ce 00 	lds	r25, 0x00CE
   uart_rx_buf[uart_rx_buf_end]=c;
    2152:	80 91 38 08 	lds	r24, 0x0838
    2156:	e8 2f       	mov	r30, r24
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	e7 5c       	subi	r30, 0xC7	; 199
    215c:	f7 4f       	sbci	r31, 0xF7	; 247
    215e:	90 83       	st	Z, r25
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    2160:	8f 5f       	subi	r24, 0xFF	; 255
    2162:	80 93 38 08 	sts	0x0838, r24
   if(uart_rx_buf_end==MAX_RX_UART_BUF) uart_rx_buf_end=0;
    2166:	80 31       	cpi	r24, 0x10	; 16
    2168:	11 f4       	brne	.+4      	; 0x216e <__vector_36+0x62>
    216a:	10 92 38 08 	sts	0x0838, r1
   nrk_event_signal(uart_rx_signal);
    216e:	80 91 49 08 	lds	r24, 0x0849
    2172:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <nrk_event_signal>
CLEAR_UART1_RX_INT();
    2176:	80 91 c8 00 	lds	r24, 0x00C8
    217a:	8f 77       	andi	r24, 0x7F	; 127
    217c:	80 93 c8 00 	sts	0x00C8, r24
ENABLE_UART1_RX_INT();
    2180:	80 91 c9 00 	lds	r24, 0x00C9
    2184:	80 68       	ori	r24, 0x80	; 128
    2186:	80 93 c9 00 	sts	0x00C9, r24
//sei();
}
    218a:	ff 91       	pop	r31
    218c:	ef 91       	pop	r30
    218e:	bf 91       	pop	r27
    2190:	af 91       	pop	r26
    2192:	9f 91       	pop	r25
    2194:	8f 91       	pop	r24
    2196:	7f 91       	pop	r23
    2198:	6f 91       	pop	r22
    219a:	5f 91       	pop	r21
    219c:	4f 91       	pop	r20
    219e:	3f 91       	pop	r19
    21a0:	2f 91       	pop	r18
    21a2:	0f 90       	pop	r0
    21a4:	0b be       	out	0x3b, r0	; 59
    21a6:	0f 90       	pop	r0
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	0f 90       	pop	r0
    21ac:	1f 90       	pop	r1
    21ae:	18 95       	reti

000021b0 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	d1 f7       	brne	.-12     	; 0x21b0 <halWait>

} // halWait
    21bc:	08 95       	ret

000021be <write_eeprom_current_image_checksum>:
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
  return NRK_OK;
}

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    21be:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    21c0:	87 e0       	ldi	r24, 0x07	; 7
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	60 81       	ld	r22, Z
    21c6:	0e 94 7d 27 	call	0x4efa	; 0x4efa <__eewr_byte_m1281>
  return NRK_OK;
}
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	08 95       	ret

000021ce <write_eeprom_aes_key>:
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
    21d6:	08 2f       	mov	r16, r24
    21d8:	19 2f       	mov	r17, r25
    21da:	c8 e0       	ldi	r28, 0x08	; 8
    21dc:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    21de:	ce 01       	movw	r24, r28
    21e0:	f8 01       	movw	r30, r16
    21e2:	61 91       	ld	r22, Z+
    21e4:	8f 01       	movw	r16, r30
    21e6:	0e 94 7d 27 	call	0x4efa	; 0x4efa <__eewr_byte_m1281>
    21ea:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    21ec:	c8 31       	cpi	r28, 0x18	; 24
    21ee:	d1 05       	cpc	r29, r1
    21f0:	b1 f7       	brne	.-20     	; 0x21de <write_eeprom_aes_key+0x10>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	df 91       	pop	r29
    21f6:	cf 91       	pop	r28
    21f8:	1f 91       	pop	r17
    21fa:	0f 91       	pop	r16
    21fc:	08 95       	ret

000021fe <write_eeprom_load_img_pages>:
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
return NRK_OK;
}

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
    21fe:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    2200:	86 e0       	ldi	r24, 0x06	; 6
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	60 81       	ld	r22, Z
    2206:	0e 94 7d 27 	call	0x4efa	; 0x4efa <__eewr_byte_m1281>
  return NRK_OK;
}
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	08 95       	ret

0000220e <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    220e:	0e 94 7d 27 	call	0x4efa	; 0x4efa <__eewr_byte_m1281>
}
    2212:	08 95       	ret

00002214 <read_eeprom_current_image_checksum>:
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    221a:	87 e0       	ldi	r24, 0x07	; 7
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	0e 94 75 27 	call	0x4eea	; 0x4eea <__eerd_byte_m1281>
    2222:	88 83       	st	Y, r24
  return NRK_OK;
}
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	08 95       	ret

0000222c <read_eeprom_aes_key>:
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
  return NRK_OK;
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    222c:	0f 93       	push	r16
    222e:	1f 93       	push	r17
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	08 2f       	mov	r16, r24
    2236:	19 2f       	mov	r17, r25
    2238:	c8 e0       	ldi	r28, 0x08	; 8
    223a:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    223c:	ce 01       	movw	r24, r28
    223e:	0e 94 75 27 	call	0x4eea	; 0x4eea <__eerd_byte_m1281>
    2242:	f8 01       	movw	r30, r16
    2244:	81 93       	st	Z+, r24
    2246:	8f 01       	movw	r16, r30
    2248:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    224a:	c8 31       	cpi	r28, 0x18	; 24
    224c:	d1 05       	cpc	r29, r1
    224e:	b1 f7       	brne	.-20     	; 0x223c <read_eeprom_aes_key+0x10>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	1f 91       	pop	r17
    2258:	0f 91       	pop	r16
    225a:	08 95       	ret

0000225c <read_eeprom_load_img_pages>:
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
  return NRK_OK;
}

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    2262:	86 e0       	ldi	r24, 0x06	; 6
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	0e 94 75 27 	call	0x4eea	; 0x4eea <__eerd_byte_m1281>
    226a:	88 83       	st	Y, r24
  return NRK_OK;
}
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	08 95       	ret

00002274 <read_eeprom_channel>:

return NRK_ERROR;
}

int8_t read_eeprom_channel(uint8_t *channel)
{
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    227a:	85 e0       	ldi	r24, 0x05	; 5
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 75 27 	call	0x4eea	; 0x4eea <__eerd_byte_m1281>
    2282:	88 83       	st	Y, r24
return NRK_OK;
}
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	08 95       	ret

0000228c <read_eeprom_mac_address>:
{
eeprom_write_byte( (uint8_t*)addr, value );
}

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    228c:	ef 92       	push	r14
    228e:	ff 92       	push	r15
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
    2298:	e8 2e       	mov	r14, r24
    229a:	e7 01       	movw	r28, r14
    229c:	7e 01       	movw	r14, r28
    229e:	f9 2e       	mov	r15, r25
    22a0:	e7 01       	movw	r28, r14
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 75 27 	call	0x4eea	; 0x4eea <__eerd_byte_m1281>
    22aa:	08 2f       	mov	r16, r24
    22ac:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	0e 94 75 27 	call	0x4eea	; 0x4eea <__eerd_byte_m1281>
    22b6:	e8 2e       	mov	r14, r24
    22b8:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 75 27 	call	0x4eea	; 0x4eea <__eerd_byte_m1281>
    22c2:	f8 2e       	mov	r15, r24
    22c4:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    22c6:	83 e0       	ldi	r24, 0x03	; 3
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	0e 94 75 27 	call	0x4eea	; 0x4eea <__eerd_byte_m1281>
    22ce:	18 2f       	mov	r17, r24
    22d0:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    22d2:	84 e0       	ldi	r24, 0x04	; 4
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	0e 94 75 27 	call	0x4eea	; 0x4eea <__eerd_byte_m1281>
ct=buf[0];
ct+=buf[1];
    22da:	fe 0c       	add	r15, r14
ct+=buf[2];
    22dc:	f0 0e       	add	r15, r16
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    22de:	f1 0e       	add	r15, r17
    22e0:	8f 15       	cp	r24, r15
    22e2:	11 f0       	breq	.+4      	; 0x22e8 <read_eeprom_mac_address+0x5c>
    22e4:	8f ef       	ldi	r24, 0xFF	; 255
    22e6:	01 c0       	rjmp	.+2      	; 0x22ea <read_eeprom_mac_address+0x5e>
    22e8:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	0f 91       	pop	r16
    22f2:	ff 90       	pop	r15
    22f4:	ef 90       	pop	r14
    22f6:	08 95       	ret

000022f8 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    22f8:	0e 94 75 27 	call	0x4eea	; 0x4eea <__eerd_byte_m1281>
return v;
}
    22fc:	08 95       	ret

000022fe <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    22fe:	f8 94       	cli
};
    2300:	08 95       	ret

00002302 <nrk_int_enable>:

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    2302:	78 94       	sei
};
    2304:	08 95       	ret

00002306 <nrk_halt>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    2306:	f8 94       	cli
    2308:	ff cf       	rjmp	.-2      	; 0x2308 <nrk_halt+0x2>

0000230a <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    230a:	85 e6       	ldi	r24, 0x65	; 101
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	08 95       	ret

00002310 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    2310:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <_nrk_scheduler>

  	return;
}
    2314:	08 95       	ret

00002316 <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2316:	cf 92       	push	r12
    2318:	df 92       	push	r13
    231a:	ef 92       	push	r14
    231c:	ff 92       	push	r15
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	ec 01       	movw	r28, r24
    2328:	6b 01       	movw	r12, r22
    232a:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    232c:	89 85       	ldd	r24, Y+9	; 0x09
    232e:	82 30       	cpi	r24, 0x02	; 2
    2330:	21 f0       	breq	.+8      	; 0x233a <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    2332:	80 91 b5 08 	lds	r24, 0x08B5
    2336:	88 83       	st	Y, r24
    2338:	01 c0       	rjmp	.+2      	; 0x233c <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    233a:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    233c:	80 91 b5 08 	lds	r24, 0x08B5
    2340:	83 30       	cpi	r24, 0x03	; 3
    2342:	20 f0       	brcs	.+8      	; 0x234c <nrk_TCB_init+0x36>
    2344:	87 e0       	ldi	r24, 0x07	; 7
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	0e 94 df 13 	call	0x27be	; 0x27be <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	82 30       	cpi	r24, 0x02	; 2
    2350:	29 f0       	breq	.+10     	; 0x235c <nrk_TCB_init+0x46>
    2352:	80 91 b5 08 	lds	r24, 0x08B5
    2356:	8f 5f       	subi	r24, 0xFF	; 255
    2358:	80 93 b5 08 	sts	0x08B5, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    235c:	80 91 b5 08 	lds	r24, 0x08B5
    2360:	88 23       	and	r24, r24
    2362:	19 f4       	brne	.+6      	; 0x236a <nrk_TCB_init+0x54>
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	80 93 b5 08 	sts	0x08B5, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    236a:	88 81       	ld	r24, Y
    236c:	28 2f       	mov	r18, r24
    236e:	33 27       	eor	r19, r19
    2370:	27 fd       	sbrc	r18, 7
    2372:	30 95       	com	r19
    2374:	89 01       	movw	r16, r18
    2376:	55 e0       	ldi	r21, 0x05	; 5
    2378:	00 0f       	add	r16, r16
    237a:	11 1f       	adc	r17, r17
    237c:	5a 95       	dec	r21
    237e:	e1 f7       	brne	.-8      	; 0x2378 <nrk_TCB_init+0x62>
    2380:	02 0f       	add	r16, r18
    2382:	13 1f       	adc	r17, r19
    2384:	03 5b       	subi	r16, 0xB3	; 179
    2386:	17 4f       	sbci	r17, 0xF7	; 247
    2388:	f8 01       	movw	r30, r16
    238a:	d1 82       	std	Z+1, r13	; 0x01
    238c:	c0 82       	st	Z, r12
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    238e:	98 85       	ldd	r25, Y+8	; 0x08
    2390:	92 87       	std	Z+10, r25	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    2392:	93 e0       	ldi	r25, 0x03	; 3
    2394:	91 87       	std	Z+9, r25	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    2396:	80 87       	std	Z+8, r24	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    2398:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( Task->period );
    239a:	2b 85       	ldd	r18, Y+11	; 0x0b
    239c:	3c 85       	ldd	r19, Y+12	; 0x0c
    239e:	4d 85       	ldd	r20, Y+13	; 0x0d
    23a0:	5e 85       	ldd	r21, Y+14	; 0x0e
    23a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    23a4:	78 89       	ldd	r23, Y+16	; 0x10
    23a6:	89 89       	ldd	r24, Y+17	; 0x11
    23a8:	9a 89       	ldd	r25, Y+18	; 0x12
    23aa:	0e 94 ad 1c 	call	0x395a	; 0x395a <_nrk_time_to_ticks>
    23ae:	f8 01       	movw	r30, r16
    23b0:	94 8f       	std	Z+28, r25	; 0x1c
    23b2:	83 8f       	std	Z+27, r24	; 0x1b
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( Task->offset);
    23b4:	08 81       	ld	r16, Y
    23b6:	11 27       	eor	r17, r17
    23b8:	07 fd       	sbrc	r16, 7
    23ba:	10 95       	com	r17
    23bc:	2b 8d       	ldd	r18, Y+27	; 0x1b
    23be:	3c 8d       	ldd	r19, Y+28	; 0x1c
    23c0:	4d 8d       	ldd	r20, Y+29	; 0x1d
    23c2:	5e 8d       	ldd	r21, Y+30	; 0x1e
    23c4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23c6:	78 a1       	ldd	r23, Y+32	; 0x20
    23c8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ca:	9a a1       	ldd	r25, Y+34	; 0x22
    23cc:	0e 94 ad 1c 	call	0x395a	; 0x395a <_nrk_time_to_ticks>
    23d0:	f8 01       	movw	r30, r16
    23d2:	45 e0       	ldi	r20, 0x05	; 5
    23d4:	ee 0f       	add	r30, r30
    23d6:	ff 1f       	adc	r31, r31
    23d8:	4a 95       	dec	r20
    23da:	e1 f7       	brne	.-8      	; 0x23d4 <nrk_TCB_init+0xbe>
    23dc:	e0 0f       	add	r30, r16
    23de:	f1 1f       	adc	r31, r17
    23e0:	e3 5b       	subi	r30, 0xB3	; 179
    23e2:	f7 4f       	sbci	r31, 0xF7	; 247
    23e4:	96 8b       	std	Z+22, r25	; 0x16
    23e6:	85 8b       	std	Z+21, r24	; 0x15
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    23e8:	88 81       	ld	r24, Y
    23ea:	99 27       	eor	r25, r25
    23ec:	87 fd       	sbrc	r24, 7
    23ee:	90 95       	com	r25
    23f0:	8c 01       	movw	r16, r24
    23f2:	35 e0       	ldi	r19, 0x05	; 5
    23f4:	00 0f       	add	r16, r16
    23f6:	11 1f       	adc	r17, r17
    23f8:	3a 95       	dec	r19
    23fa:	e1 f7       	brne	.-8      	; 0x23f4 <nrk_TCB_init+0xde>
    23fc:	08 0f       	add	r16, r24
    23fe:	19 1f       	adc	r17, r25
    2400:	03 5b       	subi	r16, 0xB3	; 179
    2402:	17 4f       	sbci	r17, 0xF7	; 247
    2404:	f8 01       	movw	r30, r16
    2406:	85 89       	ldd	r24, Z+21	; 0x15
    2408:	96 89       	ldd	r25, Z+22	; 0x16
    240a:	23 8d       	ldd	r18, Z+27	; 0x1b
    240c:	34 8d       	ldd	r19, Z+28	; 0x1c
    240e:	82 0f       	add	r24, r18
    2410:	93 1f       	adc	r25, r19
    2412:	90 8f       	std	Z+24, r25	; 0x18
    2414:	87 8b       	std	Z+23, r24	; 0x17
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(Task->cpu_reserve);
    2416:	2b 89       	ldd	r18, Y+19	; 0x13
    2418:	3c 89       	ldd	r19, Y+20	; 0x14
    241a:	4d 89       	ldd	r20, Y+21	; 0x15
    241c:	5e 89       	ldd	r21, Y+22	; 0x16
    241e:	6f 89       	ldd	r22, Y+23	; 0x17
    2420:	78 8d       	ldd	r23, Y+24	; 0x18
    2422:	89 8d       	ldd	r24, Y+25	; 0x19
    2424:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2426:	0e 94 ad 1c 	call	0x395a	; 0x395a <_nrk_time_to_ticks>
    242a:	f8 01       	movw	r30, r16
    242c:	96 8f       	std	Z+30, r25	; 0x1e
    242e:	85 8f       	std	Z+29, r24	; 0x1d
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    2430:	88 81       	ld	r24, Y
    2432:	99 27       	eor	r25, r25
    2434:	87 fd       	sbrc	r24, 7
    2436:	90 95       	com	r25
    2438:	fc 01       	movw	r30, r24
    243a:	25 e0       	ldi	r18, 0x05	; 5
    243c:	ee 0f       	add	r30, r30
    243e:	ff 1f       	adc	r31, r31
    2440:	2a 95       	dec	r18
    2442:	e1 f7       	brne	.-8      	; 0x243c <nrk_TCB_init+0x126>
    2444:	e8 0f       	add	r30, r24
    2446:	f9 1f       	adc	r31, r25
    2448:	e3 5b       	subi	r30, 0xB3	; 179
    244a:	f7 4f       	sbci	r31, 0xF7	; 247
    244c:	85 8d       	ldd	r24, Z+29	; 0x1d
    244e:	96 8d       	ldd	r25, Z+30	; 0x1e
    2450:	92 8f       	std	Z+26, r25	; 0x1a
    2452:	81 8f       	std	Z+25, r24	; 0x19
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	90 a3       	std	Z+32, r25	; 0x20
    245a:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    245c:	f3 82       	std	Z+3, r15	; 0x03
    245e:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	ff 90       	pop	r15
    246e:	ef 90       	pop	r14
    2470:	df 90       	pop	r13
    2472:	cf 90       	pop	r12
    2474:	08 95       	ret

00002476 <nrk_start>:




void nrk_start (void)
{
    2476:	df 92       	push	r13
    2478:	ef 92       	push	r14
    247a:	ff 92       	push	r15
    247c:	0f 93       	push	r16
    247e:	1f 93       	push	r17
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	c5 e5       	ldi	r28, 0x55	; 85
    2486:	d8 e0       	ldi	r29, 0x08	; 8
    2488:	10 e0       	ldi	r17, 0x00	; 0
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    248a:	d8 80       	ld	r13, Y
	// only check activated tasks
	if(task_ID!=-1)
    248c:	8f ef       	ldi	r24, 0xFF	; 255
    248e:	d8 16       	cp	r13, r24
    2490:	b1 f0       	breq	.+44     	; 0x24be <nrk_start+0x48>
    2492:	75 e5       	ldi	r23, 0x55	; 85
    2494:	e7 2e       	mov	r14, r23
    2496:	78 e0       	ldi	r23, 0x08	; 8
    2498:	f7 2e       	mov	r15, r23
    249a:	00 e0       	ldi	r16, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    249c:	10 17       	cp	r17, r16
    249e:	41 f0       	breq	.+16     	; 0x24b0 <nrk_start+0x3a>
    24a0:	f7 01       	movw	r30, r14
    24a2:	80 81       	ld	r24, Z
    24a4:	d8 16       	cp	r13, r24
    24a6:	21 f4       	brne	.+8      	; 0x24b0 <nrk_start+0x3a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    24a8:	85 e0       	ldi	r24, 0x05	; 5
    24aa:	6d 2d       	mov	r22, r13
    24ac:	0e 94 df 13 	call	0x27be	; 0x27be <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    24b0:	0f 5f       	subi	r16, 0xFF	; 255
    24b2:	81 e2       	ldi	r24, 0x21	; 33
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	e8 0e       	add	r14, r24
    24b8:	f9 1e       	adc	r15, r25
    24ba:	03 30       	cpi	r16, 0x03	; 3
    24bc:	79 f7       	brne	.-34     	; 0x249c <nrk_start+0x26>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    24be:	1f 5f       	subi	r17, 0xFF	; 255
    24c0:	a1 96       	adiw	r28, 0x21	; 33
    24c2:	13 30       	cpi	r17, 0x03	; 3
    24c4:	11 f7       	brne	.-60     	; 0x248a <nrk_start+0x14>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    24c6:	0e 94 13 18 	call	0x3026	; 0x3026 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    24ca:	28 2f       	mov	r18, r24
    24cc:	33 27       	eor	r19, r19
    24ce:	27 fd       	sbrc	r18, 7
    24d0:	30 95       	com	r19
    24d2:	f9 01       	movw	r30, r18
    24d4:	65 e0       	ldi	r22, 0x05	; 5
    24d6:	ee 0f       	add	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	6a 95       	dec	r22
    24dc:	e1 f7       	brne	.-8      	; 0x24d6 <nrk_start+0x60>
    24de:	e2 0f       	add	r30, r18
    24e0:	f3 1f       	adc	r31, r19
    24e2:	e3 5b       	subi	r30, 0xB3	; 179
    24e4:	f7 4f       	sbci	r31, 0xF7	; 247
    24e6:	22 85       	ldd	r18, Z+10	; 0x0a
    24e8:	20 93 c8 08 	sts	0x08C8, r18
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    24ec:	91 e2       	ldi	r25, 0x21	; 33
    24ee:	89 02       	muls	r24, r25
    24f0:	c0 01       	movw	r24, r0
    24f2:	11 24       	eor	r1, r1
    24f4:	83 5b       	subi	r24, 0xB3	; 179
    24f6:	97 4f       	sbci	r25, 0xF7	; 247
    24f8:	90 93 c7 08 	sts	0x08C7, r25
    24fc:	80 93 c6 08 	sts	0x08C6, r24
    2500:	90 93 b8 08 	sts	0x08B8, r25
    2504:	80 93 b7 08 	sts	0x08B7, r24
    nrk_cur_task_prio = nrk_high_ready_prio;
    2508:	20 93 b9 08 	sts	0x08B9, r18
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    250c:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_target_start>
    nrk_stack_pointer_init(); 
    2510:	0e 94 ff 23 	call	0x47fe	; 0x47fe <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    2514:	0e 94 39 24 	call	0x4872	; 0x4872 <nrk_start_high_ready_task>
    2518:	ff cf       	rjmp	.-2      	; 0x2518 <nrk_start+0xa2>

0000251a <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    251a:	0f 93       	push	r16
    251c:	1f 93       	push	r17
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	a3 97       	sbiw	r28, 0x23	; 35
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    2532:	0e 94 13 15 	call	0x2a26	; 0x2a26 <nrk_signal_create>
    2536:	80 93 b6 08 	sts	0x08B6, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    253a:	8f 3f       	cpi	r24, 0xFF	; 255
    253c:	21 f4       	brne	.+8      	; 0x2546 <nrk_init+0x2c>
    253e:	8e e0       	ldi	r24, 0x0E	; 14
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	0e 94 df 13 	call	0x27be	; 0x27be <nrk_kernel_error_add>
	
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
   if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
    2546:	0e 94 88 23 	call	0x4710	; 0x4710 <_nrk_startup_ok>
    254a:	88 23       	and	r24, r24
    254c:	21 f4       	brne	.+8      	; 0x2556 <nrk_init+0x3c>
    254e:	86 e0       	ldi	r24, 0x06	; 6
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	0e 94 df 13 	call	0x27be	; 0x27be <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    2556:	10 92 b9 08 	sts	0x08B9, r1
    nrk_cur_task_TCB = NULL;
    255a:	10 92 c7 08 	sts	0x08C7, r1
    255e:	10 92 c6 08 	sts	0x08C6, r1
    
    nrk_high_ready_TCB = NULL;
    2562:	10 92 b8 08 	sts	0x08B8, r1
    2566:	10 92 b7 08 	sts	0x08B7, r1
    nrk_high_ready_prio = 0; 
    256a:	10 92 c8 08 	sts	0x08C8, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    256e:	10 92 c5 08 	sts	0x08C5, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2572:	8f ef       	ldi	r24, 0xFF	; 255
    2574:	80 93 b2 08 	sts	0x08B2, r24
    nrk_sem_list[i].value=-1;
    2578:	80 93 b4 08 	sts	0x08B4, r24
    nrk_sem_list[i].resource_ceiling=-1;
    257c:	80 93 b3 08 	sts	0x08B3, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2580:	93 e6       	ldi	r25, 0x63	; 99
    2582:	90 93 57 08 	sts	0x0857, r25
        nrk_task_TCB[i].task_ID = -1; 
    2586:	80 93 55 08 	sts	0x0855, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    258a:	90 93 78 08 	sts	0x0878, r25
        nrk_task_TCB[i].task_ID = -1; 
    258e:	80 93 76 08 	sts	0x0876, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2592:	90 93 99 08 	sts	0x0899, r25
        nrk_task_TCB[i].task_ID = -1; 
    2596:	80 93 97 08 	sts	0x0897, r24
    259a:	e9 ec       	ldi	r30, 0xC9	; 201
    259c:	f8 e0       	ldi	r31, 0x08	; 8
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
    259e:	cf 01       	movw	r24, r30
    25a0:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    25a2:	94 83       	std	Z+4, r25	; 0x04
    25a4:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    25a6:	f7 83       	std	Z+7, r31	; 0x07
    25a8:	e6 83       	std	Z+6, r30	; 0x06
    25aa:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    25ac:	88 e0       	ldi	r24, 0x08	; 8
    25ae:	e8 3d       	cpi	r30, 0xD8	; 216
    25b0:	f8 07       	cpc	r31, r24
    25b2:	a9 f7       	brne	.-22     	; 0x259e <nrk_init+0x84>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    25b4:	10 92 cb 08 	sts	0x08CB, r1
    25b8:	10 92 ca 08 	sts	0x08CA, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    25bc:	10 92 dc 08 	sts	0x08DC, r1
    25c0:	10 92 db 08 	sts	0x08DB, r1
	_head_node = NULL;
    25c4:	10 92 bc 08 	sts	0x08BC, r1
    25c8:	10 92 bb 08 	sts	0x08BB, r1
	_free_node = &_nrk_readyQ[0];
    25cc:	3f 97       	sbiw	r30, 0x0f	; 15
    25ce:	f0 93 4c 08 	sts	0x084C, r31
    25d2:	e0 93 4b 08 	sts	0x084B, r30
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    25d6:	8e 01       	movw	r16, r28
    25d8:	0f 5f       	subi	r16, 0xFF	; 255
    25da:	1f 4f       	sbci	r17, 0xFF	; 255
    25dc:	c8 01       	movw	r24, r16
    25de:	68 e4       	ldi	r22, 0x48	; 72
    25e0:	7e e1       	ldi	r23, 0x1E	; 30
    25e2:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    25e6:	c8 01       	movw	r24, r16
    25e8:	6a ef       	ldi	r22, 0xFA	; 250
    25ea:	76 e0       	ldi	r23, 0x06	; 6
    25ec:	40 e0       	ldi	r20, 0x00	; 0
    25ee:	51 e0       	ldi	r21, 0x01	; 1
    25f0:	0e 94 1a 24 	call	0x4834	; 0x4834 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    25f4:	85 e5       	ldi	r24, 0x55	; 85
    25f6:	80 93 fa 06 	sts	0x06FA, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    25fa:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.offset.secs = 0;
    25fc:	1c 8e       	std	Y+28, r1	; 0x1c
    25fe:	1d 8e       	std	Y+29, r1	; 0x1d
    2600:	1e 8e       	std	Y+30, r1	; 0x1e
    2602:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    2604:	18 a2       	std	Y+32, r1	; 0x20
    2606:	19 a2       	std	Y+33, r1	; 0x21
    2608:	1a a2       	std	Y+34, r1	; 0x22
    260a:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2610:	92 e0       	ldi	r25, 0x02	; 2
    2612:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    2614:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    2616:	c8 01       	movw	r24, r16
    2618:	0e 94 1f 1b 	call	0x363e	; 0x363e <nrk_activate_task>
	
}
    261c:	a3 96       	adiw	r28, 0x23	; 35
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	1f 91       	pop	r17
    262e:	0f 91       	pop	r16
    2630:	08 95       	ret

00002632 <_nrk_errno_set>:
#include <nrk_cfg.h>
#include <nrk_timer.h>

void _nrk_errno_set (NRK_ERRNO error_code) 
{
  nrk_cur_task_TCB->errno = error_code;
    2632:	e0 91 c6 08 	lds	r30, 0x08C6
    2636:	f0 91 c7 08 	lds	r31, 0x08C7
    263a:	84 87       	std	Z+12, r24	; 0x0c
} 
    263c:	08 95       	ret

0000263e <nrk_errno_get>:

uint8_t nrk_errno_get () 
{
    263e:	e0 91 c6 08 	lds	r30, 0x08C6
    2642:	f0 91 c7 08 	lds	r31, 0x08C7
  return nrk_cur_task_TCB->errno;
}
    2646:	84 85       	ldd	r24, Z+12	; 0x0c
    2648:	08 95       	ret

0000264a <nrk_error_get>:
} 


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code) 
{
  if (error_num == 0)
    264a:	20 91 f9 06 	lds	r18, 0x06F9
    264e:	22 23       	and	r18, r18
    2650:	11 f4       	brne	.+4      	; 0x2656 <nrk_error_get+0xc>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	08 95       	ret
    return 0;
  *code = error_num;
    2656:	fb 01       	movw	r30, r22
    2658:	20 83       	st	Z, r18
  *task_id = error_task;
    265a:	20 91 cc 02 	lds	r18, 0x02CC
    265e:	fc 01       	movw	r30, r24
    2660:	20 83       	st	Z, r18
    2662:	81 e0       	ldi	r24, 0x01	; 1
  return 1;
}
    2664:	08 95       	ret

00002666 <nrk_error_print>:

int8_t nrk_error_print () 
{
    2666:	1f 93       	push	r17
  int8_t t;
  if (error_num == 0)
    2668:	80 91 f9 06 	lds	r24, 0x06F9
    266c:	88 23       	and	r24, r24
    266e:	11 f4       	brne	.+4      	; 0x2674 <nrk_error_print+0xe>
    }
  
#endif  /*  */
    error_num = 0;
  return t;
}
    2670:	1f 91       	pop	r17
    2672:	08 95       	ret
  int8_t t;
  if (error_num == 0)
    return 0;
 
   #ifdef NRK_HALT_ON_ERROR
     nrk_int_disable ();
    2674:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>
         nrk_watchdog_disable();
       #endif
   #endif 

   #ifndef NRK_REBOOT_ON_ERROR
      nrk_int_disable ();
    2678:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>
  while (1)
     {
    
#endif  
    
    nrk_kprintf (PSTR ("*NRK ERROR("));
    267c:	82 ee       	ldi	r24, 0xE2	; 226
    267e:	92 e0       	ldi	r25, 0x02	; 2
    2680:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kprintf>
    printf ("%d", error_task);
    2684:	00 d0       	rcall	.+0      	; 0x2686 <nrk_error_print+0x20>
    2686:	00 d0       	rcall	.+0      	; 0x2688 <nrk_error_print+0x22>
    2688:	ed b7       	in	r30, 0x3d	; 61
    268a:	fe b7       	in	r31, 0x3e	; 62
    268c:	31 96       	adiw	r30, 0x01	; 1
    268e:	82 e7       	ldi	r24, 0x72	; 114
    2690:	92 e0       	ldi	r25, 0x02	; 2
    2692:	ad b7       	in	r26, 0x3d	; 61
    2694:	be b7       	in	r27, 0x3e	; 62
    2696:	12 96       	adiw	r26, 0x02	; 2
    2698:	9c 93       	st	X, r25
    269a:	8e 93       	st	-X, r24
    269c:	11 97       	sbiw	r26, 0x01	; 1
    269e:	80 91 cc 02 	lds	r24, 0x02CC
    26a2:	82 83       	std	Z+2, r24	; 0x02
    26a4:	13 82       	std	Z+3, r1	; 0x03
    26a6:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <printf>
    nrk_kprintf (PSTR ("): "));
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	8e ed       	ldi	r24, 0xDE	; 222
    26b4:	92 e0       	ldi	r25, 0x02	; 2
    26b6:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kprintf>
    if (error_num > NRK_NUM_ERRORS)
    26ba:	80 91 f9 06 	lds	r24, 0x06F9
    26be:	84 31       	cpi	r24, 0x14	; 20
    26c0:	10 f0       	brcs	.+4      	; 0x26c6 <nrk_error_print+0x60>
      error_num = NRK_UNKOWN;
    26c2:	10 92 f9 06 	sts	0x06F9, r1
    switch (error_num)
    26c6:	e0 91 f9 06 	lds	r30, 0x06F9
    26ca:	8e 2f       	mov	r24, r30
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	fc 01       	movw	r30, r24
    26d0:	31 97       	sbiw	r30, 0x01	; 1
    26d2:	e2 31       	cpi	r30, 0x12	; 18
    26d4:	f1 05       	cpc	r31, r1
    26d6:	f0 f5       	brcc	.+124    	; 0x2754 <nrk_error_print+0xee>
    26d8:	ea 59       	subi	r30, 0x9A	; 154
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	ee 0f       	add	r30, r30
    26de:	ff 1f       	adc	r31, r31
    26e0:	05 90       	lpm	r0, Z+
    26e2:	f4 91       	lpm	r31, Z
    26e4:	e0 2d       	mov	r30, r0
    26e6:	09 94       	ijmp
       {
    case NRK_STACK_TOO_SMALL:
      nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    26e8:	87 eb       	ldi	r24, 0xB7	; 183
    26ea:	92 e0       	ldi	r25, 0x02	; 2
    26ec:	35 c0       	rjmp	.+106    	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_STACK_OVERFLOW:
      nrk_kprintf (PSTR ("Task Stack Overflow"));
    26ee:	83 ea       	ldi	r24, 0xA3	; 163
    26f0:	92 e0       	ldi	r25, 0x02	; 2
    26f2:	32 c0       	rjmp	.+100    	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_INVALID_STACK_POINTER:
      nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    26f4:	8d e8       	ldi	r24, 0x8D	; 141
    26f6:	92 e0       	ldi	r25, 0x02	; 2
    26f8:	2f c0       	rjmp	.+94     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_RESERVE_ERROR:
      nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    26fa:	82 e7       	ldi	r24, 0x72	; 114
    26fc:	92 e0       	ldi	r25, 0x02	; 2
    26fe:	2c c0       	rjmp	.+88     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_RESERVE_VIOLATED:
      nrk_kprintf (PSTR ("Task Reserve Violated"));
    2700:	8c e5       	ldi	r24, 0x5C	; 92
    2702:	92 e0       	ldi	r25, 0x02	; 2
    2704:	29 c0       	rjmp	.+82     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_WAKEUP_MISSED:
      nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    2706:	84 e4       	ldi	r24, 0x44	; 68
    2708:	92 e0       	ldi	r25, 0x02	; 2
    270a:	26 c0       	rjmp	.+76     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_DUP_TASK_ID:
      nrk_kprintf (PSTR ("Duplicated Task ID"));
    270c:	81 e3       	ldi	r24, 0x31	; 49
    270e:	92 e0       	ldi	r25, 0x02	; 2
    2710:	23 c0       	rjmp	.+70     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_BAD_STARTUP:
      nrk_kprintf (PSTR ("Unexpected Restart"));
    2712:	8e e1       	ldi	r24, 0x1E	; 30
    2714:	92 e0       	ldi	r25, 0x02	; 2
    2716:	20 c0       	rjmp	.+64     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_STACK_SMASH:
      nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	92 e0       	ldi	r25, 0x02	; 2
    271c:	1d c0       	rjmp	.+58     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_EXTRA_TASK:
      nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    271e:	8b ed       	ldi	r24, 0xDB	; 219
    2720:	91 e0       	ldi	r25, 0x01	; 1
    2722:	1a c0       	rjmp	.+52     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_LOW_VOLTAGE:
      nrk_kprintf (PSTR ("Low Voltage"));
    2724:	8f ec       	ldi	r24, 0xCF	; 207
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	17 c0       	rjmp	.+46     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_SEG_FAULT:
      nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    272a:	84 eb       	ldi	r24, 0xB4	; 180
    272c:	91 e0       	ldi	r25, 0x01	; 1
    272e:	14 c0       	rjmp	.+40     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_TIMER_OVERFLOW:
      nrk_kprintf (PSTR ("Timer Overflow"));
    2730:	85 ea       	ldi	r24, 0xA5	; 165
    2732:	91 e0       	ldi	r25, 0x01	; 1
    2734:	11 c0       	rjmp	.+34     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_WATCHDOG_ERROR:
      nrk_kprintf (PSTR ("Watchdog Restart"));
    2736:	84 e9       	ldi	r24, 0x94	; 148
    2738:	91 e0       	ldi	r25, 0x01	; 1
    273a:	0e c0       	rjmp	.+28     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_DEVICE_DRIVER:
      nrk_kprintf (PSTR ("Device Driver Error"));
    273c:	80 e8       	ldi	r24, 0x80	; 128
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	0b c0       	rjmp	.+22     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_UNIMPLEMENTED:
      nrk_kprintf (PSTR ("Kernel function not implemented"));
    2742:	80 e6       	ldi	r24, 0x60	; 96
    2744:	91 e0       	ldi	r25, 0x01	; 1
    2746:	08 c0       	rjmp	.+16     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_SIGNAL_CREATE_ERROR:
      nrk_kprintf (PSTR ("Failed to create Signal"));
    2748:	88 e4       	ldi	r24, 0x48	; 72
    274a:	91 e0       	ldi	r25, 0x01	; 1
    274c:	05 c0       	rjmp	.+10     	; 0x2758 <nrk_error_print+0xf2>
      break;
    case NRK_SEMAPHORE_CREATE_ERROR:
      nrk_kprintf (PSTR ("Failed to create Semaphore"));
    274e:	8d e2       	ldi	r24, 0x2D	; 45
    2750:	91 e0       	ldi	r25, 0x01	; 1
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <nrk_error_print+0xf2>
      break;
    default:
      nrk_kprintf (PSTR ("UNKOWN"));
    2754:	86 e2       	ldi	r24, 0x26	; 38
    2756:	91 e0       	ldi	r25, 0x01	; 1
    2758:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kprintf>
      }
    putchar ('\r');
    275c:	60 91 e7 08 	lds	r22, 0x08E7
    2760:	70 91 e8 08 	lds	r23, 0x08E8
    2764:	8d e0       	ldi	r24, 0x0D	; 13
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fputc>
    putchar ('\n');
    276c:	60 91 e7 08 	lds	r22, 0x08E7
    2770:	70 91 e8 08 	lds	r23, 0x08E8
    2774:	8a e0       	ldi	r24, 0x0A	; 10
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fputc>
#endif  /*  */
    
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    nrk_led_set (2);
    277c:	82 e0       	ldi	r24, 0x02	; 2
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <nrk_led_set>
    nrk_led_clr (3);
    2784:	83 e0       	ldi	r24, 0x03	; 3
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_led_clr>
    278c:	10 e0       	ldi	r17, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    278e:	88 ee       	ldi	r24, 0xE8	; 232
    2790:	93 e0       	ldi	r25, 0x03	; 3
    2792:	0e 94 57 20 	call	0x40ae	; 0x40ae <nrk_spin_wait_us>
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    nrk_led_set (2);
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
    2796:	1f 5f       	subi	r17, 0xFF	; 255
    2798:	14 36       	cpi	r17, 0x64	; 100
    279a:	c9 f7       	brne	.-14     	; 0x278e <nrk_error_print+0x128>
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    279c:	83 e0       	ldi	r24, 0x03	; 3
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <nrk_led_set>
    nrk_led_clr (2);
    27a4:	82 e0       	ldi	r24, 0x02	; 2
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_led_clr>
    27ac:	10 e0       	ldi	r17, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    27ae:	88 ee       	ldi	r24, 0xE8	; 232
    27b0:	93 e0       	ldi	r25, 0x03	; 3
    27b2:	0e 94 57 20 	call	0x40ae	; 0x40ae <nrk_spin_wait_us>
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    nrk_led_clr (2);
    for (t = 0; t < 100; t++)
    27b6:	1f 5f       	subi	r17, 0xFF	; 255
    27b8:	14 36       	cpi	r17, 0x64	; 100
    27ba:	c9 f7       	brne	.-14     	; 0x27ae <nrk_error_print+0x148>
    27bc:	df cf       	rjmp	.-66     	; 0x277c <nrk_error_print+0x116>

000027be <nrk_kernel_error_add>:
    nrk_error_print ();
  
#endif  /*  */
} void nrk_kernel_error_add (uint8_t n, uint8_t task) 
{
  error_num = n;
    27be:	80 93 f9 06 	sts	0x06F9, r24
  error_task = task;
    27c2:	60 93 cc 02 	sts	0x02CC, r22
  
#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    27c6:	0e 94 33 13 	call	0x2666	; 0x2666 <nrk_error_print>
  
#endif  /*  */
} 
    27ca:	08 95       	ret

000027cc <nrk_error_add>:
  return nrk_cur_task_TCB->errno;
}

void nrk_error_add (uint8_t n) 
{
  error_num = n;
    27cc:	80 93 f9 06 	sts	0x06F9, r24
  error_task = nrk_cur_task_TCB->task_ID;
    27d0:	e0 91 c6 08 	lds	r30, 0x08C6
    27d4:	f0 91 c7 08 	lds	r31, 0x08C7
    27d8:	80 85       	ldd	r24, Z+8	; 0x08
    27da:	80 93 cc 02 	sts	0x02CC, r24
  
#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    27de:	0e 94 33 13 	call	0x2666	; 0x2666 <nrk_error_print>
  
#endif  /*  */
} void nrk_kernel_error_add (uint8_t n, uint8_t task) 
    27e2:	08 95       	ret

000027e4 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

unsigned int *stk ;  // 2 bytes
unsigned char *stkc; // 1 byte
    
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */ 
    27e4:	99 27       	eor	r25, r25
    27e6:	87 fd       	sbrc	r24, 7
    27e8:	90 95       	com	r25
    27ea:	fc 01       	movw	r30, r24
    27ec:	25 e0       	ldi	r18, 0x05	; 5
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	2a 95       	dec	r18
    27f4:	e1 f7       	brne	.-8      	; 0x27ee <nrk_stack_check_pid+0xa>
    27f6:	e8 0f       	add	r30, r24
    27f8:	f9 1f       	adc	r31, r25
    27fa:	e3 5b       	subi	r30, 0xB3	; 179
    27fc:	f7 4f       	sbci	r31, 0xF7	; 247
    27fe:	a2 81       	ldd	r26, Z+2	; 0x02
    2800:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL) {
    2802:	8c 91       	ld	r24, X
    2804:	85 35       	cpi	r24, 0x55	; 85
    2806:	21 f0       	breq	.+8      	; 0x2810 <nrk_stack_check_pid+0x2c>
		 *stkc=STK_CANARY_VAL; 
    2808:	85 e5       	ldi	r24, 0x55	; 85
    280a:	8c 93       	st	X, r24
    280c:	8f ef       	ldi	r24, 0xFF	; 255
		 return NRK_ERROR;
    280e:	08 95       	ret
    		  }  
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND ) {
    2810:	80 81       	ld	r24, Z
    2812:	91 81       	ldd	r25, Z+1	; 0x01
    2814:	22 e2       	ldi	r18, 0x22	; 34
    2816:	80 30       	cpi	r24, 0x00	; 0
    2818:	92 07       	cpc	r25, r18
    281a:	10 f4       	brcc	.+4      	; 0x2820 <nrk_stack_check_pid+0x3c>
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	08 95       	ret
	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
    2820:	82 e1       	ldi	r24, 0x12	; 18
    2822:	0e 94 e6 13 	call	0x27cc	; 0x27cc <nrk_error_add>
    2826:	8f ef       	ldi	r24, 0xFF	; 255
		 return NRK_ERROR;
    		}
#endif
return NRK_OK;
}
    2828:	08 95       	ret

0000282a <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    282a:	6f 92       	push	r6
    282c:	7f 92       	push	r7
    282e:	8f 92       	push	r8
    2830:	9f 92       	push	r9
    2832:	af 92       	push	r10
    2834:	bf 92       	push	r11
    2836:	cf 92       	push	r12
    2838:	df 92       	push	r13
    283a:	ef 92       	push	r14
    283c:	ff 92       	push	r15
    283e:	0f 93       	push	r16
    2840:	1f 93       	push	r17
    2842:	cf 93       	push	r28
    2844:	df 93       	push	r29
	unsigned int *stk;
	unsigned char *stkc;
	uint8_t i;

	nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2846:	8e ee       	ldi	r24, 0xEE	; 238
    2848:	92 e0       	ldi	r25, 0x02	; 2
    284a:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kprintf>

	printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    284e:	00 d0       	rcall	.+0      	; 0x2850 <dump_stack_info+0x26>
    2850:	00 d0       	rcall	.+0      	; 0x2852 <dump_stack_info+0x28>
    2852:	85 e7       	ldi	r24, 0x75	; 117
    2854:	92 e0       	ldi	r25, 0x02	; 2
    2856:	ad b7       	in	r26, 0x3d	; 61
    2858:	be b7       	in	r27, 0x3e	; 62
    285a:	12 96       	adiw	r26, 0x02	; 2
    285c:	9c 93       	st	X, r25
    285e:	8e 93       	st	-X, r24
    2860:	11 97       	sbiw	r26, 0x01	; 1
    2862:	e0 91 c6 08 	lds	r30, 0x08C6
    2866:	f0 91 c7 08 	lds	r31, 0x08C7
    286a:	80 85       	ldd	r24, Z+8	; 0x08
    286c:	99 27       	eor	r25, r25
    286e:	87 fd       	sbrc	r24, 7
    2870:	90 95       	com	r25
    2872:	14 96       	adiw	r26, 0x04	; 4
    2874:	9c 93       	st	X, r25
    2876:	8e 93       	st	-X, r24
    2878:	13 97       	sbiw	r26, 0x03	; 3
    287a:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <printf>
	stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    287e:	e0 91 c6 08 	lds	r30, 0x08C6
    2882:	f0 91 c7 08 	lds	r31, 0x08C7
    2886:	c2 81       	ldd	r28, Z+2	; 0x02
    2888:	d3 81       	ldd	r29, Z+3	; 0x03
	stkc = (unsigned char*)stk;
	printf( "bottom = %x ",(uint16_t)stkc );
    288a:	8e e7       	ldi	r24, 0x7E	; 126
    288c:	92 e0       	ldi	r25, 0x02	; 2
    288e:	ed b7       	in	r30, 0x3d	; 61
    2890:	fe b7       	in	r31, 0x3e	; 62
    2892:	92 83       	std	Z+2, r25	; 0x02
    2894:	81 83       	std	Z+1, r24	; 0x01
    2896:	d4 83       	std	Z+4, r29	; 0x04
    2898:	c3 83       	std	Z+3, r28	; 0x03
    289a:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <printf>
	printf( "canary = %x ",*stkc );
    289e:	ed b7       	in	r30, 0x3d	; 61
    28a0:	fe b7       	in	r31, 0x3e	; 62
    28a2:	31 96       	adiw	r30, 0x01	; 1
    28a4:	6b e8       	ldi	r22, 0x8B	; 139
    28a6:	a6 2e       	mov	r10, r22
    28a8:	62 e0       	ldi	r22, 0x02	; 2
    28aa:	b6 2e       	mov	r11, r22
    28ac:	ad b7       	in	r26, 0x3d	; 61
    28ae:	be b7       	in	r27, 0x3e	; 62
    28b0:	12 96       	adiw	r26, 0x02	; 2
    28b2:	bc 92       	st	X, r11
    28b4:	ae 92       	st	-X, r10
    28b6:	11 97       	sbiw	r26, 0x01	; 1
    28b8:	88 81       	ld	r24, Y
    28ba:	82 83       	std	Z+2, r24	; 0x02
    28bc:	13 82       	std	Z+3, r1	; 0x03
    28be:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <printf>
	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
	stkc = (unsigned char*)stk;
	printf( "stk = %x ",(uint16_t)stkc );
    28c2:	58 e9       	ldi	r21, 0x98	; 152
    28c4:	c5 2e       	mov	r12, r21
    28c6:	52 e0       	ldi	r21, 0x02	; 2
    28c8:	d5 2e       	mov	r13, r21
    28ca:	ed b7       	in	r30, 0x3d	; 61
    28cc:	fe b7       	in	r31, 0x3e	; 62
    28ce:	d2 82       	std	Z+2, r13	; 0x02
    28d0:	c1 82       	std	Z+1, r12	; 0x01
    28d2:	e0 91 c6 08 	lds	r30, 0x08C6
    28d6:	f0 91 c7 08 	lds	r31, 0x08C7
    28da:	80 81       	ld	r24, Z
    28dc:	91 81       	ldd	r25, Z+1	; 0x01
    28de:	ad b7       	in	r26, 0x3d	; 61
    28e0:	be b7       	in	r27, 0x3e	; 62
    28e2:	14 96       	adiw	r26, 0x04	; 4
    28e4:	9c 93       	st	X, r25
    28e6:	8e 93       	st	-X, r24
    28e8:	13 97       	sbiw	r26, 0x03	; 3
    28ea:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <printf>
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    28ee:	42 ea       	ldi	r20, 0xA2	; 162
    28f0:	e4 2e       	mov	r14, r20
    28f2:	42 e0       	ldi	r20, 0x02	; 2
    28f4:	f4 2e       	mov	r15, r20
    28f6:	ed b7       	in	r30, 0x3d	; 61
    28f8:	fe b7       	in	r31, 0x3e	; 62
    28fa:	f2 82       	std	Z+2, r15	; 0x02
    28fc:	e1 82       	std	Z+1, r14	; 0x01
    28fe:	80 91 c6 08 	lds	r24, 0x08C6
    2902:	90 91 c7 08 	lds	r25, 0x08C7
    2906:	94 83       	std	Z+4, r25	; 0x04
    2908:	83 83       	std	Z+3, r24	; 0x03
    290a:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <printf>
    290e:	cd e4       	ldi	r28, 0x4D	; 77
    2910:	d8 e0       	ldi	r29, 0x08	; 8
    2912:	00 e0       	ldi	r16, 0x00	; 0
    2914:	10 e0       	ldi	r17, 0x00	; 0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0

	for(i=0; i<NRK_MAX_TASKS; i++ )
	{
		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
		stkc = (unsigned char*)stk;
		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    291e:	32 eb       	ldi	r19, 0xB2	; 178
    2920:	83 2e       	mov	r8, r19
    2922:	32 e0       	ldi	r19, 0x02	; 2
    2924:	93 2e       	mov	r9, r19
		printf( "canary = %x ",*stkc );
    2926:	35 01       	movw	r6, r10
		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
		stkc = (unsigned char*)stk;
		printf( "stk = %x ",(uint16_t)stkc );
    2928:	bc 2c       	mov	r11, r12
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    292a:	ae 2c       	mov	r10, r14
    292c:	cf 2c       	mov	r12, r15
	printf( "stk = %x ",(uint16_t)stkc );
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

	for(i=0; i<NRK_MAX_TASKS; i++ )
	{
		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    292e:	ea 80       	ldd	r14, Y+2	; 0x02
    2930:	fb 80       	ldd	r15, Y+3	; 0x03
		stkc = (unsigned char*)stk;
		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2932:	00 d0       	rcall	.+0      	; 0x2934 <dump_stack_info+0x10a>
    2934:	00 d0       	rcall	.+0      	; 0x2936 <dump_stack_info+0x10c>
    2936:	00 d0       	rcall	.+0      	; 0x2938 <dump_stack_info+0x10e>
    2938:	ed b7       	in	r30, 0x3d	; 61
    293a:	fe b7       	in	r31, 0x3e	; 62
    293c:	31 96       	adiw	r30, 0x01	; 1
    293e:	ad b7       	in	r26, 0x3d	; 61
    2940:	be b7       	in	r27, 0x3e	; 62
    2942:	12 96       	adiw	r26, 0x02	; 2
    2944:	9c 92       	st	X, r9
    2946:	8e 92       	st	-X, r8
    2948:	11 97       	sbiw	r26, 0x01	; 1
    294a:	13 83       	std	Z+3, r17	; 0x03
    294c:	02 83       	std	Z+2, r16	; 0x02
    294e:	f5 82       	std	Z+5, r15	; 0x05
    2950:	e4 82       	std	Z+4, r14	; 0x04
    2952:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <printf>
		printf( "canary = %x ",*stkc );
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	ed b7       	in	r30, 0x3d	; 61
    295c:	fe b7       	in	r31, 0x3e	; 62
    295e:	31 96       	adiw	r30, 0x01	; 1
    2960:	ad b7       	in	r26, 0x3d	; 61
    2962:	be b7       	in	r27, 0x3e	; 62
    2964:	11 96       	adiw	r26, 0x01	; 1
    2966:	6c 92       	st	X, r6
    2968:	11 97       	sbiw	r26, 0x01	; 1
    296a:	12 96       	adiw	r26, 0x02	; 2
    296c:	7c 92       	st	X, r7
    296e:	d7 01       	movw	r26, r14
    2970:	8c 91       	ld	r24, X
    2972:	82 83       	std	Z+2, r24	; 0x02
    2974:	13 82       	std	Z+3, r1	; 0x03
    2976:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <printf>
		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
		stkc = (unsigned char*)stk;
		printf( "stk = %x ",(uint16_t)stkc );
    297a:	ed b7       	in	r30, 0x3d	; 61
    297c:	fe b7       	in	r31, 0x3e	; 62
    297e:	b1 82       	std	Z+1, r11	; 0x01
    2980:	d2 82       	std	Z+2, r13	; 0x02
    2982:	88 81       	ld	r24, Y
    2984:	99 81       	ldd	r25, Y+1	; 0x01
    2986:	94 83       	std	Z+4, r25	; 0x04
    2988:	83 83       	std	Z+3, r24	; 0x03
    298a:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <printf>
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    298e:	ad b7       	in	r26, 0x3d	; 61
    2990:	be b7       	in	r27, 0x3e	; 62
    2992:	11 96       	adiw	r26, 0x01	; 1
    2994:	ac 92       	st	X, r10
    2996:	11 97       	sbiw	r26, 0x01	; 1
    2998:	12 96       	adiw	r26, 0x02	; 2
    299a:	cc 92       	st	X, r12
    299c:	12 97       	sbiw	r26, 0x02	; 2
    299e:	14 96       	adiw	r26, 0x04	; 4
    29a0:	dc 93       	st	X, r29
    29a2:	ce 93       	st	-X, r28
    29a4:	13 97       	sbiw	r26, 0x03	; 3
    29a6:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <printf>
    29aa:	0f 5f       	subi	r16, 0xFF	; 255
    29ac:	1f 4f       	sbci	r17, 0xFF	; 255
    29ae:	a1 96       	adiw	r28, 0x21	; 33
	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
	stkc = (unsigned char*)stk;
	printf( "stk = %x ",(uint16_t)stkc );
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

	for(i=0; i<NRK_MAX_TASKS; i++ )
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	03 30       	cpi	r16, 0x03	; 3
    29ba:	11 05       	cpc	r17, r1
    29bc:	09 f0       	breq	.+2      	; 0x29c0 <dump_stack_info+0x196>
    29be:	b7 cf       	rjmp	.-146    	; 0x292e <dump_stack_info+0x104>
		printf( "stk = %x ",(uint16_t)stkc );
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

	}

}
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	1f 91       	pop	r17
    29c6:	0f 91       	pop	r16
    29c8:	ff 90       	pop	r15
    29ca:	ef 90       	pop	r14
    29cc:	df 90       	pop	r13
    29ce:	cf 90       	pop	r12
    29d0:	bf 90       	pop	r11
    29d2:	af 90       	pop	r10
    29d4:	9f 90       	pop	r9
    29d6:	8f 90       	pop	r8
    29d8:	7f 90       	pop	r7
    29da:	6f 90       	pop	r6
    29dc:	08 95       	ret

000029de <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    29de:	cf 93       	push	r28
    29e0:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

unsigned int *stk ;  // 2 bytes
unsigned char *stkc; // 1 byte
    
    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */ 
    29e2:	e0 91 c6 08 	lds	r30, 0x08C6
    29e6:	f0 91 c7 08 	lds	r31, 0x08C7
    29ea:	c2 81       	ldd	r28, Z+2	; 0x02
    29ec:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL) {
    29ee:	88 81       	ld	r24, Y
    29f0:	85 35       	cpi	r24, 0x55	; 85
    29f2:	39 f0       	breq	.+14     	; 0x2a02 <nrk_stack_check+0x24>
	    	#ifdef NRK_REPORT_ERRORS
	    	 dump_stack_info();
    29f4:	0e 94 15 14 	call	0x282a	; 0x282a <dump_stack_info>
		#endif
	   	 nrk_error_add( NRK_STACK_OVERFLOW ); 
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	0e 94 e6 13 	call	0x27cc	; 0x27cc <nrk_error_add>
		 *stkc=STK_CANARY_VAL; 
    29fe:	85 e5       	ldi	r24, 0x55	; 85
    2a00:	88 83       	st	Y, r24
    		  } 
 
    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */ 
    2a02:	e0 91 c6 08 	lds	r30, 0x08C6
    2a06:	f0 91 c7 08 	lds	r31, 0x08C7
    2a0a:	80 81       	ld	r24, Z
    2a0c:	91 81       	ldd	r25, Z+1	; 0x01
    2a0e:	22 e2       	ldi	r18, 0x22	; 34
    2a10:	80 30       	cpi	r24, 0x00	; 0
    2a12:	92 07       	cpc	r25, r18
    2a14:	28 f0       	brcs	.+10     	; 0x2a20 <nrk_stack_check+0x42>
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND ) {
	    	#ifdef NRK_REPORT_ERRORS
	    	 dump_stack_info();
    2a16:	0e 94 15 14 	call	0x282a	; 0x282a <dump_stack_info>
		#endif
	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
    2a1a:	82 e1       	ldi	r24, 0x12	; 18
    2a1c:	0e 94 e6 13 	call	0x27cc	; 0x27cc <nrk_error_add>




#endif
}
    2a20:	df 91       	pop	r29
    2a22:	cf 91       	pop	r28
    2a24:	08 95       	ret

00002a26 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    2a26:	ef 92       	push	r14
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    2a2e:	e0 90 f1 04 	lds	r14, 0x04F1
    2a32:	f0 90 f2 04 	lds	r15, 0x04F2
    2a36:	00 91 f3 04 	lds	r16, 0x04F3
    2a3a:	10 91 f4 04 	lds	r17, 0x04F4
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	a8 01       	movw	r20, r16
    2a44:	97 01       	movw	r18, r14
    2a46:	08 2e       	mov	r0, r24
    2a48:	04 c0       	rjmp	.+8      	; 0x2a52 <nrk_signal_create+0x2c>
    2a4a:	56 95       	lsr	r21
    2a4c:	47 95       	ror	r20
    2a4e:	37 95       	ror	r19
    2a50:	27 95       	ror	r18
    2a52:	0a 94       	dec	r0
    2a54:	d2 f7       	brpl	.-12     	; 0x2a4a <nrk_signal_create+0x24>
    2a56:	21 70       	andi	r18, 0x01	; 1
    2a58:	30 70       	andi	r19, 0x00	; 0
    2a5a:	21 15       	cp	r18, r1
    2a5c:	31 05       	cpc	r19, r1
    2a5e:	c9 f4       	brne	.+50     	; 0x2a92 <nrk_signal_create+0x6c>
		{    
			_nrk_signal_list|=SIG(i);
    2a60:	21 e0       	ldi	r18, 0x01	; 1
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	40 e0       	ldi	r20, 0x00	; 0
    2a66:	50 e0       	ldi	r21, 0x00	; 0
    2a68:	08 2e       	mov	r0, r24
    2a6a:	04 c0       	rjmp	.+8      	; 0x2a74 <nrk_signal_create+0x4e>
    2a6c:	22 0f       	add	r18, r18
    2a6e:	33 1f       	adc	r19, r19
    2a70:	44 1f       	adc	r20, r20
    2a72:	55 1f       	adc	r21, r21
    2a74:	0a 94       	dec	r0
    2a76:	d2 f7       	brpl	.-12     	; 0x2a6c <nrk_signal_create+0x46>
    2a78:	2e 29       	or	r18, r14
    2a7a:	3f 29       	or	r19, r15
    2a7c:	40 2b       	or	r20, r16
    2a7e:	51 2b       	or	r21, r17
    2a80:	20 93 f1 04 	sts	0x04F1, r18
    2a84:	30 93 f2 04 	sts	0x04F2, r19
    2a88:	40 93 f3 04 	sts	0x04F3, r20
    2a8c:	50 93 f4 04 	sts	0x04F4, r21
			return i;
    2a90:	05 c0       	rjmp	.+10     	; 0x2a9c <nrk_signal_create+0x76>
    2a92:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    2a94:	80 32       	cpi	r24, 0x20	; 32
    2a96:	91 05       	cpc	r25, r1
    2a98:	a1 f6       	brne	.-88     	; 0x2a42 <nrk_signal_create+0x1c>
    2a9a:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
	return NRK_ERROR;


}
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	08 95       	ret

00002aa6 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
    2aa6:	e0 91 c6 08 	lds	r30, 0x08C6
    2aaa:	f0 91 c7 08 	lds	r31, 0x08C7
    2aae:	65 85       	ldd	r22, Z+13	; 0x0d
    2ab0:	76 85       	ldd	r23, Z+14	; 0x0e
        return nrk_cur_task_TCB->registered_signal_mask;
}
    2ab2:	87 85       	ldd	r24, Z+15	; 0x0f
    2ab4:	90 89       	ldd	r25, Z+16	; 0x10
    2ab6:	08 95       	ret

00002ab8 <nrk_signal_unregister>:
	return NRK_OK;
}


int8_t nrk_signal_unregister(int8_t sig_id)
{
    2ab8:	ef 92       	push	r14
    2aba:	ff 92       	push	r15
    2abc:	0f 93       	push	r16
    2abe:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    2ac0:	21 e0       	ldi	r18, 0x01	; 1
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	04 c0       	rjmp	.+8      	; 0x2ad2 <nrk_signal_unregister+0x1a>
    2aca:	22 0f       	add	r18, r18
    2acc:	33 1f       	adc	r19, r19
    2ace:	44 1f       	adc	r20, r20
    2ad0:	55 1f       	adc	r21, r21
    2ad2:	8a 95       	dec	r24
    2ad4:	d2 f7       	brpl	.-12     	; 0x2aca <nrk_signal_unregister+0x12>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    2ad6:	e0 91 c6 08 	lds	r30, 0x08C6
    2ada:	f0 91 c7 08 	lds	r31, 0x08C7
    2ade:	85 85       	ldd	r24, Z+13	; 0x0d
    2ae0:	96 85       	ldd	r25, Z+14	; 0x0e
    2ae2:	a7 85       	ldd	r26, Z+15	; 0x0f
    2ae4:	b0 89       	ldd	r27, Z+16	; 0x10
    2ae6:	79 01       	movw	r14, r18
    2ae8:	8a 01       	movw	r16, r20
    2aea:	e8 22       	and	r14, r24
    2aec:	f9 22       	and	r15, r25
    2aee:	0a 23       	and	r16, r26
    2af0:	1b 23       	and	r17, r27
    2af2:	e1 14       	cp	r14, r1
    2af4:	f1 04       	cpc	r15, r1
    2af6:	01 05       	cpc	r16, r1
    2af8:	11 05       	cpc	r17, r1
    2afa:	11 f4       	brne	.+4      	; 0x2b00 <nrk_signal_unregister+0x48>
    2afc:	8f ef       	ldi	r24, 0xFF	; 255
    2afe:	19 c0       	rjmp	.+50     	; 0x2b32 <nrk_signal_unregister+0x7a>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    2b00:	20 95       	com	r18
    2b02:	30 95       	com	r19
    2b04:	40 95       	com	r20
    2b06:	50 95       	com	r21
    2b08:	82 23       	and	r24, r18
    2b0a:	93 23       	and	r25, r19
    2b0c:	a4 23       	and	r26, r20
    2b0e:	b5 23       	and	r27, r21
    2b10:	85 87       	std	Z+13, r24	; 0x0d
    2b12:	96 87       	std	Z+14, r25	; 0x0e
    2b14:	a7 87       	std	Z+15, r26	; 0x0f
    2b16:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    2b18:	81 89       	ldd	r24, Z+17	; 0x11
    2b1a:	92 89       	ldd	r25, Z+18	; 0x12
    2b1c:	a3 89       	ldd	r26, Z+19	; 0x13
    2b1e:	b4 89       	ldd	r27, Z+20	; 0x14
    2b20:	82 23       	and	r24, r18
    2b22:	93 23       	and	r25, r19
    2b24:	a4 23       	and	r26, r20
    2b26:	b5 23       	and	r27, r21
    2b28:	81 8b       	std	Z+17, r24	; 0x11
    2b2a:	92 8b       	std	Z+18, r25	; 0x12
    2b2c:	a3 8b       	std	Z+19, r26	; 0x13
    2b2e:	b4 8b       	std	Z+20, r27	; 0x14
    2b30:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return NRK_ERROR;
return NRK_OK;
}
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	ff 90       	pop	r15
    2b38:	ef 90       	pop	r14
    2b3a:	08 95       	ret

00002b3c <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    2b3c:	99 27       	eor	r25, r25
    2b3e:	87 fd       	sbrc	r24, 7
    2b40:	90 95       	com	r25
    2b42:	20 91 f1 04 	lds	r18, 0x04F1
    2b46:	30 91 f2 04 	lds	r19, 0x04F2
    2b4a:	40 91 f3 04 	lds	r20, 0x04F3
    2b4e:	50 91 f4 04 	lds	r21, 0x04F4
    2b52:	08 2e       	mov	r0, r24
    2b54:	04 c0       	rjmp	.+8      	; 0x2b5e <nrk_signal_register+0x22>
    2b56:	56 95       	lsr	r21
    2b58:	47 95       	ror	r20
    2b5a:	37 95       	ror	r19
    2b5c:	27 95       	ror	r18
    2b5e:	0a 94       	dec	r0
    2b60:	d2 f7       	brpl	.-12     	; 0x2b56 <nrk_signal_register+0x1a>
    2b62:	21 70       	andi	r18, 0x01	; 1
    2b64:	30 70       	andi	r19, 0x00	; 0
    2b66:	21 15       	cp	r18, r1
    2b68:	31 05       	cpc	r19, r1
    2b6a:	11 f4       	brne	.+4      	; 0x2b70 <nrk_signal_register+0x34>
    2b6c:	8f ef       	ldi	r24, 0xFF	; 255
    2b6e:	08 95       	ret
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    2b70:	e0 91 c6 08 	lds	r30, 0x08C6
    2b74:	f0 91 c7 08 	lds	r31, 0x08C7
    2b78:	21 e0       	ldi	r18, 0x01	; 1
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e0       	ldi	r20, 0x00	; 0
    2b7e:	50 e0       	ldi	r21, 0x00	; 0
    2b80:	04 c0       	rjmp	.+8      	; 0x2b8a <nrk_signal_register+0x4e>
    2b82:	22 0f       	add	r18, r18
    2b84:	33 1f       	adc	r19, r19
    2b86:	44 1f       	adc	r20, r20
    2b88:	55 1f       	adc	r21, r21
    2b8a:	8a 95       	dec	r24
    2b8c:	d2 f7       	brpl	.-12     	; 0x2b82 <nrk_signal_register+0x46>
    2b8e:	85 85       	ldd	r24, Z+13	; 0x0d
    2b90:	96 85       	ldd	r25, Z+14	; 0x0e
    2b92:	a7 85       	ldd	r26, Z+15	; 0x0f
    2b94:	b0 89       	ldd	r27, Z+16	; 0x10
    2b96:	82 2b       	or	r24, r18
    2b98:	93 2b       	or	r25, r19
    2b9a:	a4 2b       	or	r26, r20
    2b9c:	b5 2b       	or	r27, r21
    2b9e:	85 87       	std	Z+13, r24	; 0x0d
    2ba0:	96 87       	std	Z+14, r25	; 0x0e
    2ba2:	a7 87       	std	Z+15, r26	; 0x0f
    2ba4:	b0 8b       	std	Z+16, r27	; 0x10
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
		return NRK_OK;
	}
            
	return NRK_ERROR;
}
    2ba8:	08 95       	ret

00002baa <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	08 95       	ret

00002bb0 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    2bb0:	28 e0       	ldi	r18, 0x08	; 8
    2bb2:	82 3b       	cpi	r24, 0xB2	; 178
    2bb4:	92 07       	cpc	r25, r18
    2bb6:	11 f0       	breq	.+4      	; 0x2bbc <nrk_get_resource_index+0xc>
    2bb8:	8f ef       	ldi	r24, 0xFF	; 255
    2bba:	08 95       	ret
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
				return id;
	return NRK_ERROR;
}
    2bbe:	08 95       	ret

00002bc0 <nrk_sem_delete>:
return NRK_OK;
}

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    2bc0:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2bc4:	8f 3f       	cpi	r24, 0xFF	; 255
    2bc6:	11 f4       	brne	.+4      	; 0x2bcc <nrk_sem_delete+0xc>
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	03 c0       	rjmp	.+6      	; 0x2bd2 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2bcc:	81 30       	cpi	r24, 0x01	; 1
    2bce:	29 f4       	brne	.+10     	; 0x2bda <nrk_sem_delete+0x1a>
    2bd0:	82 e0       	ldi	r24, 0x02	; 2
    2bd2:	0e 94 19 13 	call	0x2632	; 0x2632 <_nrk_errno_set>
    2bd6:	8f ef       	ldi	r24, 0xFF	; 255
    2bd8:	08 95       	ret

	nrk_sem_list[id].count=-1;
    2bda:	99 27       	eor	r25, r25
    2bdc:	87 fd       	sbrc	r24, 7
    2bde:	90 95       	com	r25
    2be0:	fc 01       	movw	r30, r24
    2be2:	ee 0f       	add	r30, r30
    2be4:	ff 1f       	adc	r31, r31
    2be6:	e8 0f       	add	r30, r24
    2be8:	f9 1f       	adc	r31, r25
    2bea:	ee 54       	subi	r30, 0x4E	; 78
    2bec:	f7 4f       	sbci	r31, 0xF7	; 247
    2bee:	8f ef       	ldi	r24, 0xFF	; 255
    2bf0:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    2bf2:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    2bf4:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    2bf6:	80 91 c5 08 	lds	r24, 0x08C5
    2bfa:	81 50       	subi	r24, 0x01	; 1
    2bfc:	80 93 c5 08 	sts	0x08C5, r24
    2c00:	81 e0       	ldi	r24, 0x01	; 1
return NRK_OK;
}
    2c02:	08 95       	ret

00002c04 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2c04:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2c08:	8f 3f       	cpi	r24, 0xFF	; 255
    2c0a:	11 f4       	brne	.+4      	; 0x2c10 <nrk_sem_query+0xc>
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	03 c0       	rjmp	.+6      	; 0x2c16 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2c10:	81 30       	cpi	r24, 0x01	; 1
    2c12:	29 f4       	brne	.+10     	; 0x2c1e <nrk_sem_query+0x1a>
    2c14:	82 e0       	ldi	r24, 0x02	; 2
    2c16:	0e 94 19 13 	call	0x2632	; 0x2632 <_nrk_errno_set>
    2c1a:	8f ef       	ldi	r24, 0xFF	; 255
    2c1c:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    2c1e:	99 27       	eor	r25, r25
    2c20:	87 fd       	sbrc	r24, 7
    2c22:	90 95       	com	r25
    2c24:	fc 01       	movw	r30, r24
    2c26:	ee 0f       	add	r30, r30
    2c28:	ff 1f       	adc	r31, r31
    2c2a:	e8 0f       	add	r30, r24
    2c2c:	f9 1f       	adc	r31, r25
    2c2e:	ee 54       	subi	r30, 0x4E	; 78
    2c30:	f7 4f       	sbci	r31, 0xF7	; 247
    2c32:	82 81       	ldd	r24, Z+2	; 0x02
}
    2c34:	08 95       	ret

00002c36 <nrk_sem_post>:
}



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    2c36:	ef 92       	push	r14
    2c38:	ff 92       	push	r15
    2c3a:	0f 93       	push	r16
    2c3c:	1f 93       	push	r17
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	0f 92       	push	r0
    2c44:	cd b7       	in	r28, 0x3d	; 61
    2c46:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    2c48:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2c4c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c4e:	11 f4       	brne	.+4      	; 0x2c54 <nrk_sem_post+0x1e>
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	03 c0       	rjmp	.+6      	; 0x2c5a <nrk_sem_post+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2c54:	81 30       	cpi	r24, 0x01	; 1
    2c56:	29 f4       	brne	.+10     	; 0x2c62 <nrk_sem_post+0x2c>
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	0e 94 19 13 	call	0x2632	; 0x2632 <_nrk_errno_set>
    2c5e:	8f ef       	ldi	r24, 0xFF	; 255
    2c60:	44 c0       	rjmp	.+136    	; 0x2cea <nrk_sem_post+0xb4>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    2c62:	28 2f       	mov	r18, r24
    2c64:	33 27       	eor	r19, r19
    2c66:	27 fd       	sbrc	r18, 7
    2c68:	30 95       	com	r19
    2c6a:	89 01       	movw	r16, r18
    2c6c:	00 0f       	add	r16, r16
    2c6e:	11 1f       	adc	r17, r17
    2c70:	02 0f       	add	r16, r18
    2c72:	13 1f       	adc	r17, r19
    2c74:	0e 54       	subi	r16, 0x4E	; 78
    2c76:	17 4f       	sbci	r17, 0xF7	; 247
    2c78:	d8 01       	movw	r26, r16
    2c7a:	12 96       	adiw	r26, 0x02	; 2
    2c7c:	2c 91       	ld	r18, X
    2c7e:	12 97       	sbiw	r26, 0x02	; 2
    2c80:	9c 91       	ld	r25, X
    2c82:	29 17       	cp	r18, r25
    2c84:	8c f5       	brge	.+98     	; 0x2ce8 <nrk_sem_post+0xb2>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    2c86:	89 83       	std	Y+1, r24	; 0x01
    2c88:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>

		nrk_sem_list[id].value++;
    2c8c:	f8 01       	movw	r30, r16
    2c8e:	92 81       	ldd	r25, Z+2	; 0x02
    2c90:	9f 5f       	subi	r25, 0xFF	; 255
    2c92:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    2c94:	e0 91 c6 08 	lds	r30, 0x08C6
    2c98:	f0 91 c7 08 	lds	r31, 0x08C7
    2c9c:	14 82       	std	Z+4, r1	; 0x04
    2c9e:	e4 e5       	ldi	r30, 0x54	; 84
    2ca0:	f8 e0       	ldi	r31, 0x08	; 8

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	28 2f       	mov	r18, r24
    2ca6:	33 27       	eor	r19, r19
    2ca8:	27 fd       	sbrc	r18, 7
    2caa:	30 95       	com	r19
    2cac:	43 2f       	mov	r20, r19
    2cae:	53 2f       	mov	r21, r19
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2cb0:	93 e0       	ldi	r25, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2cb2:	80 81       	ld	r24, Z
    2cb4:	82 30       	cpi	r24, 0x02	; 2
    2cb6:	89 f4       	brne	.+34     	; 0x2cda <nrk_sem_post+0xa4>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    2cb8:	e2 84       	ldd	r14, Z+10	; 0x0a
    2cba:	f3 84       	ldd	r15, Z+11	; 0x0b
    2cbc:	04 85       	ldd	r16, Z+12	; 0x0c
    2cbe:	15 85       	ldd	r17, Z+13	; 0x0d
    2cc0:	e2 16       	cp	r14, r18
    2cc2:	f3 06       	cpc	r15, r19
    2cc4:	04 07       	cpc	r16, r20
    2cc6:	15 07       	cpc	r17, r21
    2cc8:	41 f4       	brne	.+16     	; 0x2cda <nrk_sem_post+0xa4>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2cca:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    2ccc:	17 86       	std	Z+15, r1	; 0x0f
    2cce:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    2cd0:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2cd2:	12 86       	std	Z+10, r1	; 0x0a
    2cd4:	13 86       	std	Z+11, r1	; 0x0b
    2cd6:	14 86       	std	Z+12, r1	; 0x0c
    2cd8:	15 86       	std	Z+13, r1	; 0x0d
    2cda:	b1 96       	adiw	r30, 0x21	; 33
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2cdc:	88 e0       	ldi	r24, 0x08	; 8
    2cde:	e7 3b       	cpi	r30, 0xB7	; 183
    2ce0:	f8 07       	cpc	r31, r24
    2ce2:	39 f7       	brne	.-50     	; 0x2cb2 <nrk_sem_post+0x7c>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    2ce4:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
	}
		
return NRK_OK;
}
    2cea:	0f 90       	pop	r0
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	ff 90       	pop	r15
    2cf6:	ef 90       	pop	r14
    2cf8:	08 95       	ret

00002cfa <nrk_event_signal>:
            
	return NRK_ERROR;
}

int8_t nrk_event_signal(int8_t sig_id)
{
    2cfa:	ef 92       	push	r14
    2cfc:	ff 92       	push	r15
    2cfe:	0f 93       	push	r16
    2d00:	1f 93       	push	r17
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	0f 92       	push	r0
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    2d0c:	51 e0       	ldi	r21, 0x01	; 1
    2d0e:	e5 2e       	mov	r14, r21
    2d10:	f1 2c       	mov	r15, r1
    2d12:	01 2d       	mov	r16, r1
    2d14:	11 2d       	mov	r17, r1
    2d16:	04 c0       	rjmp	.+8      	; 0x2d20 <nrk_event_signal+0x26>
    2d18:	ee 0c       	add	r14, r14
    2d1a:	ff 1c       	adc	r15, r15
    2d1c:	00 1f       	adc	r16, r16
    2d1e:	11 1f       	adc	r17, r17
    2d20:	8a 95       	dec	r24
    2d22:	d2 f7       	brpl	.-12     	; 0x2d18 <nrk_event_signal+0x1e>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    2d24:	80 91 f1 04 	lds	r24, 0x04F1
    2d28:	90 91 f2 04 	lds	r25, 0x04F2
    2d2c:	a0 91 f3 04 	lds	r26, 0x04F3
    2d30:	b0 91 f4 04 	lds	r27, 0x04F4
    2d34:	8e 21       	and	r24, r14
    2d36:	9f 21       	and	r25, r15
    2d38:	a0 23       	and	r26, r16
    2d3a:	b1 23       	and	r27, r17
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	a1 05       	cpc	r26, r1
    2d40:	b1 05       	cpc	r27, r1
    2d42:	11 f4       	brne	.+4      	; 0x2d48 <nrk_event_signal+0x4e>
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	42 c0       	rjmp	.+132    	; 0x2dcc <nrk_event_signal+0xd2>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    2d48:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>
    2d4c:	e4 e5       	ldi	r30, 0x54	; 84
    2d4e:	f8 e0       	ldi	r31, 0x08	; 8
	}
            
	return NRK_ERROR;
}

int8_t nrk_event_signal(int8_t sig_id)
    2d50:	80 e0       	ldi	r24, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2d52:	93 e0       	ldi	r25, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    2d54:	20 81       	ld	r18, Z
    2d56:	21 30       	cpi	r18, 0x01	; 1
    2d58:	b1 f4       	brne	.+44     	; 0x2d86 <nrk_event_signal+0x8c>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    2d5a:	22 85       	ldd	r18, Z+10	; 0x0a
    2d5c:	33 85       	ldd	r19, Z+11	; 0x0b
    2d5e:	44 85       	ldd	r20, Z+12	; 0x0c
    2d60:	55 85       	ldd	r21, Z+13	; 0x0d
    2d62:	2e 21       	and	r18, r14
    2d64:	3f 21       	and	r19, r15
    2d66:	40 23       	and	r20, r16
    2d68:	51 23       	and	r21, r17
    2d6a:	21 15       	cp	r18, r1
    2d6c:	31 05       	cpc	r19, r1
    2d6e:	41 05       	cpc	r20, r1
    2d70:	51 05       	cpc	r21, r1
    2d72:	49 f0       	breq	.+18     	; 0x2d86 <nrk_event_signal+0x8c>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2d74:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    2d76:	17 86       	std	Z+15, r1	; 0x0f
    2d78:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    2d7a:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    2d7c:	e2 86       	std	Z+10, r14	; 0x0a
    2d7e:	f3 86       	std	Z+11, r15	; 0x0b
    2d80:	04 87       	std	Z+12, r16	; 0x0c
    2d82:	15 87       	std	Z+13, r17	; 0x0d
    2d84:	81 e0       	ldi	r24, 0x01	; 1
					event_occured=1;
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2d86:	20 81       	ld	r18, Z
    2d88:	22 30       	cpi	r18, 0x02	; 2
    2d8a:	91 f4       	brne	.+36     	; 0x2db0 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    2d8c:	22 85       	ldd	r18, Z+10	; 0x0a
    2d8e:	33 85       	ldd	r19, Z+11	; 0x0b
    2d90:	44 85       	ldd	r20, Z+12	; 0x0c
    2d92:	55 85       	ldd	r21, Z+13	; 0x0d
    2d94:	2e 15       	cp	r18, r14
    2d96:	3f 05       	cpc	r19, r15
    2d98:	40 07       	cpc	r20, r16
    2d9a:	51 07       	cpc	r21, r17
    2d9c:	49 f4       	brne	.+18     	; 0x2db0 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2d9e:	92 83       	std	Z+2, r25	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    2da0:	17 86       	std	Z+15, r1	; 0x0f
    2da2:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    2da4:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2da6:	12 86       	std	Z+10, r1	; 0x0a
    2da8:	13 86       	std	Z+11, r1	; 0x0b
    2daa:	14 86       	std	Z+12, r1	; 0x0c
    2dac:	15 86       	std	Z+13, r1	; 0x0d
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	b1 96       	adiw	r30, 0x21	; 33
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2db2:	28 e0       	ldi	r18, 0x08	; 8
    2db4:	e7 3b       	cpi	r30, 0xB7	; 183
    2db6:	f2 07       	cpc	r31, r18
    2db8:	69 f6       	brne	.-102    	; 0x2d54 <nrk_event_signal+0x5a>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>
	if(event_occured)
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	88 23       	and	r24, r24
    2dc4:	11 f0       	breq	.+4      	; 0x2dca <nrk_event_signal+0xd0>
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	04 c0       	rjmp	.+8      	; 0x2dd2 <nrk_event_signal+0xd8>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    2dca:	82 e0       	ldi	r24, 0x02	; 2
    2dcc:	0e 94 19 13 	call	0x2632	; 0x2632 <_nrk_errno_set>
    2dd0:	8f ef       	ldi	r24, 0xFF	; 255
	return NRK_ERROR;
}
    2dd2:	0f 90       	pop	r0
    2dd4:	cf 91       	pop	r28
    2dd6:	df 91       	pop	r29
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	ff 90       	pop	r15
    2dde:	ef 90       	pop	r14
    2de0:	08 95       	ret

00002de2 <nrk_signal_delete>:
        return nrk_cur_task_TCB->registered_signal_mask;
}

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    2de2:	ef 92       	push	r14
    2de4:	ff 92       	push	r15
    2de6:	0f 93       	push	r16
    2de8:	1f 93       	push	r17
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    2dee:	c8 2f       	mov	r28, r24
    2df0:	dd 27       	eor	r29, r29
    2df2:	c7 fd       	sbrc	r28, 7
    2df4:	d0 95       	com	r29
    2df6:	61 e0       	ldi	r22, 0x01	; 1
    2df8:	e6 2e       	mov	r14, r22
    2dfa:	f1 2c       	mov	r15, r1
    2dfc:	01 2d       	mov	r16, r1
    2dfe:	11 2d       	mov	r17, r1
    2e00:	0c 2e       	mov	r0, r28
    2e02:	04 c0       	rjmp	.+8      	; 0x2e0c <nrk_signal_delete+0x2a>
    2e04:	ee 0c       	add	r14, r14
    2e06:	ff 1c       	adc	r15, r15
    2e08:	00 1f       	adc	r16, r16
    2e0a:	11 1f       	adc	r17, r17
    2e0c:	0a 94       	dec	r0
    2e0e:	d2 f7       	brpl	.-12     	; 0x2e04 <nrk_signal_delete+0x22>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2e10:	80 91 f1 04 	lds	r24, 0x04F1
    2e14:	90 91 f2 04 	lds	r25, 0x04F2
    2e18:	a0 91 f3 04 	lds	r26, 0x04F3
    2e1c:	b0 91 f4 04 	lds	r27, 0x04F4
    2e20:	8e 21       	and	r24, r14
    2e22:	9f 21       	and	r25, r15
    2e24:	a0 23       	and	r26, r16
    2e26:	b1 23       	and	r27, r17
    2e28:	00 97       	sbiw	r24, 0x00	; 0
    2e2a:	a1 05       	cpc	r26, r1
    2e2c:	b1 05       	cpc	r27, r1
    2e2e:	11 f4       	brne	.+4      	; 0x2e34 <nrk_signal_delete+0x52>
    2e30:	8f ef       	ldi	r24, 0xFF	; 255
    2e32:	5c c0       	rjmp	.+184    	; 0x2eec <nrk_signal_delete+0x10a>

	nrk_int_disable();
    2e34:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>
    2e38:	e4 e5       	ldi	r30, 0x54	; 84
    2e3a:	f8 e0       	ldi	r31, 0x08	; 8
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2e3c:	a8 01       	movw	r20, r16
    2e3e:	97 01       	movw	r18, r14
    2e40:	20 95       	com	r18
    2e42:	30 95       	com	r19
    2e44:	40 95       	com	r20
    2e46:	50 95       	com	r21
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2e48:	63 e0       	ldi	r22, 0x03	; 3

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    2e4a:	81 81       	ldd	r24, Z+1	; 0x01
    2e4c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e4e:	39 f1       	breq	.+78     	; 0x2e9e <nrk_signal_delete+0xbc>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    2e50:	86 81       	ldd	r24, Z+6	; 0x06
    2e52:	97 81       	ldd	r25, Z+7	; 0x07
    2e54:	a0 85       	ldd	r26, Z+8	; 0x08
    2e56:	b1 85       	ldd	r27, Z+9	; 0x09
    2e58:	8e 15       	cp	r24, r14
    2e5a:	9f 05       	cpc	r25, r15
    2e5c:	a0 07       	cpc	r26, r16
    2e5e:	b1 07       	cpc	r27, r17
    2e60:	31 f4       	brne	.+12     	; 0x2e6e <nrk_signal_delete+0x8c>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    2e62:	12 86       	std	Z+10, r1	; 0x0a
    2e64:	13 86       	std	Z+11, r1	; 0x0b
    2e66:	14 86       	std	Z+12, r1	; 0x0c
    2e68:	15 86       	std	Z+13, r1	; 0x0d
			nrk_task_TCB[task_ID].event_suspend=0;
    2e6a:	10 82       	st	Z, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2e6c:	62 83       	std	Z+2, r22	; 0x02
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2e6e:	86 81       	ldd	r24, Z+6	; 0x06
    2e70:	97 81       	ldd	r25, Z+7	; 0x07
    2e72:	a0 85       	ldd	r26, Z+8	; 0x08
    2e74:	b1 85       	ldd	r27, Z+9	; 0x09
    2e76:	82 23       	and	r24, r18
    2e78:	93 23       	and	r25, r19
    2e7a:	a4 23       	and	r26, r20
    2e7c:	b5 23       	and	r27, r21
    2e7e:	86 83       	std	Z+6, r24	; 0x06
    2e80:	97 83       	std	Z+7, r25	; 0x07
    2e82:	a0 87       	std	Z+8, r26	; 0x08
    2e84:	b1 87       	std	Z+9, r27	; 0x09
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2e86:	82 85       	ldd	r24, Z+10	; 0x0a
    2e88:	93 85       	ldd	r25, Z+11	; 0x0b
    2e8a:	a4 85       	ldd	r26, Z+12	; 0x0c
    2e8c:	b5 85       	ldd	r27, Z+13	; 0x0d
    2e8e:	82 23       	and	r24, r18
    2e90:	93 23       	and	r25, r19
    2e92:	a4 23       	and	r26, r20
    2e94:	b5 23       	and	r27, r21
    2e96:	82 87       	std	Z+10, r24	; 0x0a
    2e98:	93 87       	std	Z+11, r25	; 0x0b
    2e9a:	a4 87       	std	Z+12, r26	; 0x0c
    2e9c:	b5 87       	std	Z+13, r27	; 0x0d
    2e9e:	b1 96       	adiw	r30, 0x21	; 33
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2ea0:	98 e0       	ldi	r25, 0x08	; 8
    2ea2:	e7 3b       	cpi	r30, 0xB7	; 183
    2ea4:	f9 07       	cpc	r31, r25
    2ea6:	89 f6       	brne	.-94     	; 0x2e4a <nrk_signal_delete+0x68>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    2ea8:	2e ef       	ldi	r18, 0xFE	; 254
    2eaa:	3f ef       	ldi	r19, 0xFF	; 255
    2eac:	4f ef       	ldi	r20, 0xFF	; 255
    2eae:	5f ef       	ldi	r21, 0xFF	; 255
    2eb0:	04 c0       	rjmp	.+8      	; 0x2eba <nrk_signal_delete+0xd8>
    2eb2:	22 0f       	add	r18, r18
    2eb4:	33 1f       	adc	r19, r19
    2eb6:	44 1f       	adc	r20, r20
    2eb8:	55 1f       	adc	r21, r21
    2eba:	ca 95       	dec	r28
    2ebc:	d2 f7       	brpl	.-12     	; 0x2eb2 <nrk_signal_delete+0xd0>
    2ebe:	80 91 f1 04 	lds	r24, 0x04F1
    2ec2:	90 91 f2 04 	lds	r25, 0x04F2
    2ec6:	a0 91 f3 04 	lds	r26, 0x04F3
    2eca:	b0 91 f4 04 	lds	r27, 0x04F4
    2ece:	82 23       	and	r24, r18
    2ed0:	93 23       	and	r25, r19
    2ed2:	a4 23       	and	r26, r20
    2ed4:	b5 23       	and	r27, r21
    2ed6:	80 93 f1 04 	sts	0x04F1, r24
    2eda:	90 93 f2 04 	sts	0x04F2, r25
    2ede:	a0 93 f3 04 	sts	0x04F3, r26
    2ee2:	b0 93 f4 04 	sts	0x04F4, r27
	nrk_int_enable();
    2ee6:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>
    2eea:	81 e0       	ldi	r24, 0x01	; 1

	return NRK_OK;
}
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	1f 91       	pop	r17
    2ef2:	0f 91       	pop	r16
    2ef4:	ff 90       	pop	r15
    2ef6:	ef 90       	pop	r14
    2ef8:	08 95       	ret

00002efa <nrk_sem_pend>:
}



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    2efa:	0f 93       	push	r16
    2efc:	1f 93       	push	r17
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	0f 92       	push	r0
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2f08:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2f0c:	8f 3f       	cpi	r24, 0xFF	; 255
    2f0e:	11 f4       	brne	.+4      	; 0x2f14 <nrk_sem_pend+0x1a>
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	03 c0       	rjmp	.+6      	; 0x2f1a <nrk_sem_pend+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2f14:	81 30       	cpi	r24, 0x01	; 1
    2f16:	29 f4       	brne	.+10     	; 0x2f22 <nrk_sem_pend+0x28>
    2f18:	82 e0       	ldi	r24, 0x02	; 2
    2f1a:	0e 94 19 13 	call	0x2632	; 0x2632 <_nrk_errno_set>
    2f1e:	8f ef       	ldi	r24, 0xFF	; 255
    2f20:	40 c0       	rjmp	.+128    	; 0x2fa2 <nrk_sem_pend+0xa8>
	
	nrk_int_disable();
    2f22:	89 83       	std	Y+1, r24	; 0x01
    2f24:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	08 2f       	mov	r16, r24
    2f2c:	11 27       	eor	r17, r17
    2f2e:	07 fd       	sbrc	r16, 7
    2f30:	10 95       	com	r17
    2f32:	f8 01       	movw	r30, r16
    2f34:	ee 0f       	add	r30, r30
    2f36:	ff 1f       	adc	r31, r31
    2f38:	e0 0f       	add	r30, r16
    2f3a:	f1 1f       	adc	r31, r17
    2f3c:	ee 54       	subi	r30, 0x4E	; 78
    2f3e:	f7 4f       	sbci	r31, 0xF7	; 247
    2f40:	92 81       	ldd	r25, Z+2	; 0x02
    2f42:	99 23       	and	r25, r25
    2f44:	b1 f4       	brne	.+44     	; 0x2f72 <nrk_sem_pend+0x78>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    2f46:	e0 91 c6 08 	lds	r30, 0x08C6
    2f4a:	f0 91 c7 08 	lds	r31, 0x08C7
    2f4e:	97 81       	ldd	r25, Z+7	; 0x07
    2f50:	92 60       	ori	r25, 0x02	; 2
    2f52:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    2f54:	99 27       	eor	r25, r25
    2f56:	87 fd       	sbrc	r24, 7
    2f58:	90 95       	com	r25
    2f5a:	a9 2f       	mov	r26, r25
    2f5c:	b9 2f       	mov	r27, r25
    2f5e:	81 8b       	std	Z+17, r24	; 0x11
    2f60:	92 8b       	std	Z+18, r25	; 0x12
    2f62:	a3 8b       	std	Z+19, r26	; 0x13
    2f64:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    2f66:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    2f72:	f8 01       	movw	r30, r16
    2f74:	ee 0f       	add	r30, r30
    2f76:	ff 1f       	adc	r31, r31
    2f78:	e0 0f       	add	r30, r16
    2f7a:	f1 1f       	adc	r31, r17
    2f7c:	ee 54       	subi	r30, 0x4E	; 78
    2f7e:	f7 4f       	sbci	r31, 0xF7	; 247
    2f80:	82 81       	ldd	r24, Z+2	; 0x02
    2f82:	81 50       	subi	r24, 0x01	; 1
    2f84:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    2f86:	a0 91 c6 08 	lds	r26, 0x08C6
    2f8a:	b0 91 c7 08 	lds	r27, 0x08C7
    2f8e:	81 81       	ldd	r24, Z+1	; 0x01
    2f90:	1b 96       	adiw	r26, 0x0b	; 11
    2f92:	8c 93       	st	X, r24
    2f94:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	14 96       	adiw	r26, 0x04	; 4
    2f9a:	8c 93       	st	X, r24
	nrk_int_enable();
    2f9c:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>
    2fa0:	81 e0       	ldi	r24, 0x01	; 1

	return NRK_OK;
}
    2fa2:	0f 90       	pop	r0
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	1f 91       	pop	r17
    2faa:	0f 91       	pop	r16
    2fac:	08 95       	ret

00002fae <nrk_event_wait>:

uint32_t nrk_event_wait(uint32_t event_mask)
{

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    2fae:	e0 91 c6 08 	lds	r30, 0x08C6
    2fb2:	f0 91 c7 08 	lds	r31, 0x08C7
    2fb6:	25 85       	ldd	r18, Z+13	; 0x0d
    2fb8:	36 85       	ldd	r19, Z+14	; 0x0e
    2fba:	47 85       	ldd	r20, Z+15	; 0x0f
    2fbc:	50 89       	ldd	r21, Z+16	; 0x10
    2fbe:	26 23       	and	r18, r22
    2fc0:	37 23       	and	r19, r23
    2fc2:	48 23       	and	r20, r24
    2fc4:	59 23       	and	r21, r25
    2fc6:	21 15       	cp	r18, r1
    2fc8:	31 05       	cpc	r19, r1
    2fca:	41 05       	cpc	r20, r1
    2fcc:	51 05       	cpc	r21, r1
    2fce:	29 f4       	brne	.+10     	; 0x2fda <nrk_event_wait+0x2c>
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e0       	ldi	r20, 0x00	; 0
    2fd6:	50 e0       	ldi	r21, 0x00	; 0
    2fd8:	23 c0       	rjmp	.+70     	; 0x3020 <nrk_event_wait+0x72>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    2fda:	61 8b       	std	Z+17, r22	; 0x11
    2fdc:	72 8b       	std	Z+18, r23	; 0x12
    2fde:	83 8b       	std	Z+19, r24	; 0x13
    2fe0:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    2fe2:	21 e0       	ldi	r18, 0x01	; 1
    2fe4:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    2fe6:	00 90 b6 08 	lds	r0, 0x08B6
    2fea:	04 c0       	rjmp	.+8      	; 0x2ff4 <nrk_event_wait+0x46>
    2fec:	96 95       	lsr	r25
    2fee:	87 95       	ror	r24
    2ff0:	77 95       	ror	r23
    2ff2:	67 95       	ror	r22
    2ff4:	0a 94       	dec	r0
    2ff6:	d2 f7       	brpl	.-12     	; 0x2fec <nrk_event_wait+0x3e>
    2ff8:	61 70       	andi	r22, 0x01	; 1
    2ffa:	70 70       	andi	r23, 0x00	; 0
    2ffc:	61 15       	cp	r22, r1
    2ffe:	71 05       	cpc	r23, r1
    3000:	19 f0       	breq	.+6      	; 0x3008 <nrk_event_wait+0x5a>
		nrk_wait_until_nw();
    3002:	0e 94 ee 19 	call	0x33dc	; 0x33dc <nrk_wait_until_nw>
    3006:	04 c0       	rjmp	.+8      	; 0x3010 <nrk_event_wait+0x62>
	else
		nrk_wait_until_ticks(0);
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    3010:	e0 91 c6 08 	lds	r30, 0x08C6
    3014:	f0 91 c7 08 	lds	r31, 0x08C7
    3018:	21 89       	ldd	r18, Z+17	; 0x11
    301a:	32 89       	ldd	r19, Z+18	; 0x12
    301c:	43 89       	ldd	r20, Z+19	; 0x13
    301e:	54 89       	ldd	r21, Z+20	; 0x14
}
    3020:	b9 01       	movw	r22, r18
    3022:	ca 01       	movw	r24, r20
    3024:	08 95       	ret

00003026 <nrk_get_high_ready_task_ID>:
//#define TIME_PAD  2

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    3026:	e0 91 bb 08 	lds	r30, 0x08BB
    302a:	f0 91 bc 08 	lds	r31, 0x08BC
  return (_head_node->task_ID);
}
    302e:	80 81       	ld	r24, Z
    3030:	08 95       	ret

00003032 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
  nrk_queue *ptr;
  ptr = _head_node;
    3032:	e0 91 bb 08 	lds	r30, 0x08BB
    3036:	f0 91 bc 08 	lds	r31, 0x08BC
  //nrk_kprintf (PSTR ("nrk_queue: "));
  while (ptr != NULL) {
    303a:	03 c0       	rjmp	.+6      	; 0x3042 <nrk_print_readyQ+0x10>
    //printf ("%d ", ptr->task_ID);
    ptr = ptr->Next;
    303c:	03 80       	ldd	r0, Z+3	; 0x03
    303e:	f4 81       	ldd	r31, Z+4	; 0x04
    3040:	e0 2d       	mov	r30, r0
void nrk_print_readyQ ()
{
  nrk_queue *ptr;
  ptr = _head_node;
  //nrk_kprintf (PSTR ("nrk_queue: "));
  while (ptr != NULL) {
    3042:	30 97       	sbiw	r30, 0x00	; 0
    3044:	d9 f7       	brne	.-10     	; 0x303c <nrk_print_readyQ+0xa>
    //printf ("%d ", ptr->task_ID);
    ptr = ptr->Next;
  }
  //nrk_kprintf (PSTR ("\n\r"));
}
    3046:	08 95       	ret

00003048 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    3048:	df 92       	push	r13
    304a:	ef 92       	push	r14
    304c:	ff 92       	push	r15
    304e:	0f 93       	push	r16
    3050:	1f 93       	push	r17
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
  nrk_queue *NextNode;
  nrk_queue *CurNode;

  //printf( "nrk_add_to_readyQ %d\n",task_ID );
  // nrk_queue full
  if (_free_node == NULL) {
    3056:	e0 91 4b 08 	lds	r30, 0x084B
    305a:	f0 91 4c 08 	lds	r31, 0x084C
    305e:	30 97       	sbiw	r30, 0x00	; 0
    3060:	09 f4       	brne	.+2      	; 0x3064 <nrk_add_to_readyQ+0x1c>
    3062:	99 c0       	rjmp	.+306    	; 0x3196 <nrk_add_to_readyQ+0x14e>
    return;
  }


  NextNode = _head_node;
    3064:	60 91 bb 08 	lds	r22, 0x08BB
    3068:	70 91 bc 08 	lds	r23, 0x08BC
  CurNode = _free_node;

  if (_head_node != NULL) {
    306c:	61 15       	cp	r22, r1
    306e:	71 05       	cpc	r23, r1
    3070:	19 f4       	brne	.+6      	; 0x3078 <nrk_add_to_readyQ+0x30>
    3072:	a0 e0       	ldi	r26, 0x00	; 0
    3074:	b0 e0       	ldi	r27, 0x00	; 0
    3076:	55 c0       	rjmp	.+170    	; 0x3122 <nrk_add_to_readyQ+0xda>
    3078:	db 01       	movw	r26, r22

    while (NextNode != NULL) {
      if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
        if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    307a:	48 2f       	mov	r20, r24
    307c:	55 27       	eor	r21, r21
    307e:	47 fd       	sbrc	r20, 7
    3080:	50 95       	com	r21
    3082:	9a 01       	movw	r18, r20
    3084:	15 e0       	ldi	r17, 0x05	; 5
    3086:	22 0f       	add	r18, r18
    3088:	33 1f       	adc	r19, r19
    308a:	1a 95       	dec	r17
    308c:	e1 f7       	brne	.-8      	; 0x3086 <nrk_add_to_readyQ+0x3e>
    308e:	24 0f       	add	r18, r20
    3090:	35 1f       	adc	r19, r21
    3092:	23 5b       	subi	r18, 0xB3	; 179
    3094:	37 4f       	sbci	r19, 0xF7	; 247
    3096:	89 01       	movw	r16, r18
    3098:	06 5f       	subi	r16, 0xF6	; 246
    309a:	1f 4f       	sbci	r17, 0xFF	; 255
            nrk_task_TCB[task_ID].task_prio)
          break;
      if (nrk_task_TCB[task_ID].elevated_prio_flag)
    309c:	44 e0       	ldi	r20, 0x04	; 4
    309e:	e4 2e       	mov	r14, r20
    30a0:	f1 2c       	mov	r15, r1
    30a2:	e2 0e       	add	r14, r18
    30a4:	f3 1e       	adc	r15, r19
        if (nrk_task_TCB[NextNode->task_ID].task_prio <
    30a6:	25 5f       	subi	r18, 0xF5	; 245
    30a8:	3f 4f       	sbci	r19, 0xFF	; 255
  CurNode = _free_node;

  if (_head_node != NULL) {

    while (NextNode != NULL) {
      if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    30aa:	4c 91       	ld	r20, X
    30ac:	50 e0       	ldi	r21, 0x00	; 0
    30ae:	ea 01       	movw	r28, r20
    30b0:	95 e0       	ldi	r25, 0x05	; 5
    30b2:	cc 0f       	add	r28, r28
    30b4:	dd 1f       	adc	r29, r29
    30b6:	9a 95       	dec	r25
    30b8:	e1 f7       	brne	.-8      	; 0x30b2 <nrk_add_to_readyQ+0x6a>
    30ba:	c4 0f       	add	r28, r20
    30bc:	d5 1f       	adc	r29, r21
    30be:	c3 5b       	subi	r28, 0xB3	; 179
    30c0:	d7 4f       	sbci	r29, 0xF7	; 247
    30c2:	9c 81       	ldd	r25, Y+4	; 0x04
    30c4:	99 23       	and	r25, r25
    30c6:	29 f0       	breq	.+10     	; 0x30d2 <nrk_add_to_readyQ+0x8a>
        if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    30c8:	db 84       	ldd	r13, Y+11	; 0x0b
    30ca:	e8 01       	movw	r28, r16
    30cc:	98 81       	ld	r25, Y
    30ce:	d9 16       	cp	r13, r25
    30d0:	40 f1       	brcs	.+80     	; 0x3122 <nrk_add_to_readyQ+0xda>
            nrk_task_TCB[task_ID].task_prio)
          break;
      if (nrk_task_TCB[task_ID].elevated_prio_flag)
    30d2:	e7 01       	movw	r28, r14
    30d4:	98 81       	ld	r25, Y
    30d6:	99 23       	and	r25, r25
    30d8:	79 f0       	breq	.+30     	; 0x30f8 <nrk_add_to_readyQ+0xb0>
        if (nrk_task_TCB[NextNode->task_ID].task_prio <
    30da:	ea 01       	movw	r28, r20
    30dc:	95 e0       	ldi	r25, 0x05	; 5
    30de:	cc 0f       	add	r28, r28
    30e0:	dd 1f       	adc	r29, r29
    30e2:	9a 95       	dec	r25
    30e4:	e1 f7       	brne	.-8      	; 0x30de <nrk_add_to_readyQ+0x96>
    30e6:	c4 0f       	add	r28, r20
    30e8:	d5 1f       	adc	r29, r21
    30ea:	c3 5b       	subi	r28, 0xB3	; 179
    30ec:	d7 4f       	sbci	r29, 0xF7	; 247
    30ee:	da 84       	ldd	r13, Y+10	; 0x0a
    30f0:	e9 01       	movw	r28, r18
    30f2:	98 81       	ld	r25, Y
    30f4:	d9 16       	cp	r13, r25
    30f6:	a8 f0       	brcs	.+42     	; 0x3122 <nrk_add_to_readyQ+0xda>
            nrk_task_TCB[task_ID].task_prio_ceil)
          break;
      if (nrk_task_TCB[NextNode->task_ID].task_prio <
    30f8:	ea 01       	movw	r28, r20
    30fa:	95 e0       	ldi	r25, 0x05	; 5
    30fc:	cc 0f       	add	r28, r28
    30fe:	dd 1f       	adc	r29, r29
    3100:	9a 95       	dec	r25
    3102:	e1 f7       	brne	.-8      	; 0x30fc <nrk_add_to_readyQ+0xb4>
    3104:	c4 0f       	add	r28, r20
    3106:	d5 1f       	adc	r29, r21
    3108:	c3 5b       	subi	r28, 0xB3	; 179
    310a:	d7 4f       	sbci	r29, 0xF7	; 247
    310c:	4a 85       	ldd	r20, Y+10	; 0x0a
    310e:	e8 01       	movw	r28, r16
    3110:	98 81       	ld	r25, Y
    3112:	49 17       	cp	r20, r25
    3114:	30 f0       	brcs	.+12     	; 0x3122 <nrk_add_to_readyQ+0xda>
          nrk_task_TCB[task_ID].task_prio)
        break;

      NextNode = NextNode->Next;
    3116:	13 96       	adiw	r26, 0x03	; 3
    3118:	0d 90       	ld	r0, X+
    311a:	bc 91       	ld	r27, X
    311c:	a0 2d       	mov	r26, r0
  NextNode = _head_node;
  CurNode = _free_node;

  if (_head_node != NULL) {

    while (NextNode != NULL) {
    311e:	10 97       	sbiw	r26, 0x00	; 0
    3120:	21 f6       	brne	.-120    	; 0x30aa <nrk_add_to_readyQ+0x62>
    // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
    // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2 

  }

  CurNode->task_ID = task_ID;
    3122:	80 83       	st	Z, r24
  _free_node = _free_node->Next;
    3124:	c3 81       	ldd	r28, Z+3	; 0x03
    3126:	d4 81       	ldd	r29, Z+4	; 0x04
    3128:	d0 93 4c 08 	sts	0x084C, r29
    312c:	c0 93 4b 08 	sts	0x084B, r28

  if (NextNode == _head_node) {
    3130:	a6 17       	cp	r26, r22
    3132:	b7 07       	cpc	r27, r23
    3134:	b1 f4       	brne	.+44     	; 0x3162 <nrk_add_to_readyQ+0x11a>
    //at start
    if (_head_node != NULL) {
    3136:	10 97       	sbiw	r26, 0x00	; 0
    3138:	49 f0       	breq	.+18     	; 0x314c <nrk_add_to_readyQ+0x104>
      CurNode->Next = _head_node;
    313a:	b4 83       	std	Z+4, r27	; 0x04
    313c:	a3 83       	std	Z+3, r26	; 0x03
      CurNode->Prev = NULL;
    313e:	12 82       	std	Z+2, r1	; 0x02
    3140:	11 82       	std	Z+1, r1	; 0x01
      _head_node->Prev = CurNode;
    3142:	12 96       	adiw	r26, 0x02	; 2
    3144:	fc 93       	st	X, r31
    3146:	ee 93       	st	-X, r30
    3148:	11 97       	sbiw	r26, 0x01	; 1
    314a:	06 c0       	rjmp	.+12     	; 0x3158 <nrk_add_to_readyQ+0x110>
    }
    else {
      CurNode->Next = NULL;
    314c:	14 82       	std	Z+4, r1	; 0x04
    314e:	13 82       	std	Z+3, r1	; 0x03
      CurNode->Prev = NULL;
    3150:	12 82       	std	Z+2, r1	; 0x02
    3152:	11 82       	std	Z+1, r1	; 0x01
      _free_node->Prev = CurNode;
    3154:	fa 83       	std	Y+2, r31	; 0x02
    3156:	e9 83       	std	Y+1, r30	; 0x01
    }
    _head_node = CurNode;
    3158:	f0 93 bc 08 	sts	0x08BC, r31
    315c:	e0 93 bb 08 	sts	0x08BB, r30
    3160:	1a c0       	rjmp	.+52     	; 0x3196 <nrk_add_to_readyQ+0x14e>
    3162:	11 96       	adiw	r26, 0x01	; 1
    3164:	8d 91       	ld	r24, X+
    3166:	9c 91       	ld	r25, X
    3168:	12 97       	sbiw	r26, 0x02	; 2

  }
  else {
    if (NextNode != _free_node) {
    316a:	ac 17       	cp	r26, r28
    316c:	bd 07       	cpc	r27, r29
    316e:	59 f0       	breq	.+22     	; 0x3186 <nrk_add_to_readyQ+0x13e>
      // Insert  in middle

      CurNode->Prev = NextNode->Prev;
    3170:	92 83       	std	Z+2, r25	; 0x02
    3172:	81 83       	std	Z+1, r24	; 0x01
      CurNode->Next = NextNode;
    3174:	b4 83       	std	Z+4, r27	; 0x04
    3176:	a3 83       	std	Z+3, r26	; 0x03
      (NextNode->Prev)->Next = CurNode;
    3178:	11 96       	adiw	r26, 0x01	; 1
    317a:	cd 91       	ld	r28, X+
    317c:	dc 91       	ld	r29, X
    317e:	12 97       	sbiw	r26, 0x02	; 2
    3180:	fc 83       	std	Y+4, r31	; 0x04
    3182:	eb 83       	std	Y+3, r30	; 0x03
    3184:	04 c0       	rjmp	.+8      	; 0x318e <nrk_add_to_readyQ+0x146>
      NextNode->Prev = CurNode;
    }
    else {
      //insert at end
      CurNode->Next = NULL;
    3186:	14 82       	std	Z+4, r1	; 0x04
    3188:	13 82       	std	Z+3, r1	; 0x03
      CurNode->Prev = _free_node->Prev;
    318a:	92 83       	std	Z+2, r25	; 0x02
    318c:	81 83       	std	Z+1, r24	; 0x01
      _free_node->Prev = CurNode;
    318e:	12 96       	adiw	r26, 0x02	; 2
    3190:	fc 93       	st	X, r31
    3192:	ee 93       	st	-X, r30
    3194:	11 97       	sbiw	r26, 0x01	; 1
    }

  }

}
    3196:	df 91       	pop	r29
    3198:	cf 91       	pop	r28
    319a:	1f 91       	pop	r17
    319c:	0f 91       	pop	r16
    319e:	ff 90       	pop	r15
    31a0:	ef 90       	pop	r14
    31a2:	df 90       	pop	r13
    31a4:	08 95       	ret

000031a6 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
     }
   */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

  if (_head_node == NULL)
    31aa:	e0 91 bb 08 	lds	r30, 0x08BB
    31ae:	f0 91 bc 08 	lds	r31, 0x08BC
    31b2:	30 97       	sbiw	r30, 0x00	; 0
    31b4:	09 f4       	brne	.+2      	; 0x31b8 <nrk_rem_from_readyQ+0x12>
    31b6:	4d c0       	rjmp	.+154    	; 0x3252 <nrk_rem_from_readyQ+0xac>
    return;

  CurNode = _head_node;

  if (_head_node->task_ID == task_ID) {
    31b8:	48 2f       	mov	r20, r24
    31ba:	55 27       	eor	r21, r21
    31bc:	47 fd       	sbrc	r20, 7
    31be:	50 95       	com	r21
    31c0:	80 81       	ld	r24, Z
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	84 17       	cp	r24, r20
    31c6:	95 07       	cpc	r25, r21
    31c8:	79 f4       	brne	.+30     	; 0x31e8 <nrk_rem_from_readyQ+0x42>
    //REmove from start
    _head_node = _head_node->Next;
    31ca:	a3 81       	ldd	r26, Z+3	; 0x03
    31cc:	b4 81       	ldd	r27, Z+4	; 0x04
    31ce:	b0 93 bc 08 	sts	0x08BC, r27
    31d2:	a0 93 bb 08 	sts	0x08BB, r26
    _head_node->Prev = NULL;
    31d6:	12 96       	adiw	r26, 0x02	; 2
    31d8:	1c 92       	st	X, r1
    31da:	1e 92       	st	-X, r1
    31dc:	11 97       	sbiw	r26, 0x01	; 1
    31de:	0e c0       	rjmp	.+28     	; 0x31fc <nrk_rem_from_readyQ+0x56>
  }
  else {
    while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
      CurNode = CurNode->Next;
    31e0:	e2 2f       	mov	r30, r18
    31e2:	f9 2f       	mov	r31, r25
    //REmove from start
    _head_node = _head_node->Next;
    _head_node->Prev = NULL;
  }
  else {
    while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    31e4:	30 97       	sbiw	r30, 0x00	; 0
    31e6:	a9 f1       	breq	.+106    	; 0x3252 <nrk_rem_from_readyQ+0xac>
    31e8:	60 81       	ld	r22, Z
    31ea:	70 e0       	ldi	r23, 0x00	; 0
    31ec:	23 81       	ldd	r18, Z+3	; 0x03
    31ee:	94 81       	ldd	r25, Z+4	; 0x04
    31f0:	64 17       	cp	r22, r20
    31f2:	75 07       	cpc	r23, r21
    31f4:	a9 f7       	brne	.-22     	; 0x31e0 <nrk_rem_from_readyQ+0x3a>
    31f6:	20 c0       	rjmp	.+64     	; 0x3238 <nrk_rem_from_readyQ+0x92>
      return;


    (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    if (CurNode->Next != NULL)
      (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    31f8:	ba 83       	std	Y+2, r27	; 0x02
    31fa:	a9 83       	std	Y+1, r26	; 0x01
  }



  // Add to free list
  if (_free_node == NULL) {
    31fc:	a0 91 4b 08 	lds	r26, 0x084B
    3200:	b0 91 4c 08 	lds	r27, 0x084C
    3204:	10 97       	sbiw	r26, 0x00	; 0
    3206:	39 f4       	brne	.+14     	; 0x3216 <nrk_rem_from_readyQ+0x70>
    _free_node = CurNode;
    3208:	f0 93 4c 08 	sts	0x084C, r31
    320c:	e0 93 4b 08 	sts	0x084B, r30
    _free_node->Next = NULL;
    3210:	14 82       	std	Z+4, r1	; 0x04
    3212:	13 82       	std	Z+3, r1	; 0x03
    3214:	0a c0       	rjmp	.+20     	; 0x322a <nrk_rem_from_readyQ+0x84>
  }
  else {
    CurNode->Next = _free_node;
    3216:	b4 83       	std	Z+4, r27	; 0x04
    3218:	a3 83       	std	Z+3, r26	; 0x03
    _free_node->Prev = CurNode;
    321a:	12 96       	adiw	r26, 0x02	; 2
    321c:	fc 93       	st	X, r31
    321e:	ee 93       	st	-X, r30
    3220:	11 97       	sbiw	r26, 0x01	; 1
    _free_node = CurNode;
    3222:	f0 93 4c 08 	sts	0x084C, r31
    3226:	e0 93 4b 08 	sts	0x084B, r30
  }
  _free_node->Prev = NULL;
    322a:	e0 91 4b 08 	lds	r30, 0x084B
    322e:	f0 91 4c 08 	lds	r31, 0x084C
    3232:	12 82       	std	Z+2, r1	; 0x02
    3234:	11 82       	std	Z+1, r1	; 0x01
    3236:	0d c0       	rjmp	.+26     	; 0x3252 <nrk_rem_from_readyQ+0xac>
      CurNode = CurNode->Next;
    if (CurNode == NULL)
      return;


    (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    3238:	a1 81       	ldd	r26, Z+1	; 0x01
    323a:	b2 81       	ldd	r27, Z+2	; 0x02
    323c:	13 96       	adiw	r26, 0x03	; 3
    323e:	2c 93       	st	X, r18
    3240:	13 97       	sbiw	r26, 0x03	; 3
    3242:	14 96       	adiw	r26, 0x04	; 4
    3244:	9c 93       	st	X, r25
    3246:	14 97       	sbiw	r26, 0x04	; 4
    if (CurNode->Next != NULL)
    3248:	c3 81       	ldd	r28, Z+3	; 0x03
    324a:	d4 81       	ldd	r29, Z+4	; 0x04
    324c:	20 97       	sbiw	r28, 0x00	; 0
    324e:	a1 f6       	brne	.-88     	; 0x31f8 <nrk_rem_from_readyQ+0x52>
    3250:	d5 cf       	rjmp	.-86     	; 0x31fc <nrk_rem_from_readyQ+0x56>
    CurNode->Next = _free_node;
    _free_node->Prev = CurNode;
    _free_node = CurNode;
  }
  _free_node->Prev = NULL;
}
    3252:	df 91       	pop	r29
    3254:	cf 91       	pop	r28
    3256:	08 95       	ret

00003258 <nrk_get_pid>:
  return NRK_OK;
}


uint8_t nrk_get_pid ()
{
    3258:	e0 91 c6 08 	lds	r30, 0x08C6
    325c:	f0 91 c7 08 	lds	r31, 0x08C7
  return nrk_cur_task_TCB->task_ID;
}
    3260:	80 85       	ldd	r24, Z+8	; 0x08
    3262:	08 95       	ret

00003264 <_nrk_wait_for_scheduler>:
inline void _nrk_wait_for_scheduler ()
{

  //TIMSK = BM (OCIE1A);
  do {
    nrk_idle ();                // wait for the interrupt to tick...
    3264:	0e 94 c5 23 	call	0x478a	; 0x478a <nrk_idle>
  } while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1);
    3268:	e0 91 c6 08 	lds	r30, 0x08C6
    326c:	f0 91 c7 08 	lds	r31, 0x08C7
    3270:	85 81       	ldd	r24, Z+5	; 0x05
    3272:	88 23       	and	r24, r24
    3274:	b9 f7       	brne	.-18     	; 0x3264 <_nrk_wait_for_scheduler>

  //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    3276:	08 95       	ret

00003278 <nrk_wait>:
  return NRK_OK;
}


int8_t nrk_wait (nrk_time_t t)
{
    3278:	ef 92       	push	r14
    327a:	ff 92       	push	r15
    327c:	1f 93       	push	r17
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	28 97       	sbiw	r28, 0x08	; 8
    3288:	0f b6       	in	r0, 0x3f	; 63
    328a:	f8 94       	cli
    328c:	de bf       	out	0x3e, r29	; 62
    328e:	0f be       	out	0x3f, r0	; 63
    3290:	cd bf       	out	0x3d, r28	; 61
    3292:	29 83       	std	Y+1, r18	; 0x01
    3294:	3a 83       	std	Y+2, r19	; 0x02
    3296:	4b 83       	std	Y+3, r20	; 0x03
    3298:	5c 83       	std	Y+4, r21	; 0x04
    329a:	6d 83       	std	Y+5, r22	; 0x05
    329c:	7e 83       	std	Y+6, r23	; 0x06
    329e:	8f 83       	std	Y+7, r24	; 0x07
    32a0:	98 87       	std	Y+8, r25	; 0x08
  uint8_t timer;
  uint16_t nw;

  nrk_stack_check ();
    32a2:	0e 94 ef 14 	call	0x29de	; 0x29de <nrk_stack_check>

  nrk_int_disable ();
    32a6:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    32aa:	e0 91 c6 08 	lds	r30, 0x08C6
    32ae:	f0 91 c7 08 	lds	r31, 0x08C7
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->num_periods = 1;
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	90 a3       	std	Z+32, r25	; 0x20
    32bc:	87 8f       	std	Z+31, r24	; 0x1f
  timer = _nrk_os_timer_get ();
    32be:	0e 94 85 21 	call	0x430a	; 0x430a <_nrk_os_timer_get>
    32c2:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);
  nw = _nrk_time_to_ticks (t);
    32c4:	29 81       	ldd	r18, Y+1	; 0x01
    32c6:	3a 81       	ldd	r19, Y+2	; 0x02
    32c8:	4b 81       	ldd	r20, Y+3	; 0x03
    32ca:	5c 81       	ldd	r21, Y+4	; 0x04
    32cc:	6d 81       	ldd	r22, Y+5	; 0x05
    32ce:	7e 81       	ldd	r23, Y+6	; 0x06
    32d0:	8f 81       	ldd	r24, Y+7	; 0x07
    32d2:	98 85       	ldd	r25, Y+8	; 0x08
    32d4:	0e 94 ad 1c 	call	0x395a	; 0x395a <_nrk_time_to_ticks>
//printf( "t2 %u\n",nw );
  nrk_cur_task_TCB->next_wakeup = nw + timer;
    32d8:	e0 91 c6 08 	lds	r30, 0x08C6
    32dc:	f0 91 c7 08 	lds	r31, 0x08C7
    32e0:	e1 2e       	mov	r14, r17
    32e2:	ff 24       	eor	r15, r15
    32e4:	8e 0d       	add	r24, r14
    32e6:	9f 1d       	adc	r25, r15
    32e8:	96 8b       	std	Z+22, r25	; 0x16
    32ea:	85 8b       	std	Z+21, r24	; 0x15
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    32ec:	18 3f       	cpi	r17, 0xF8	; 248
    32ee:	78 f4       	brcc	.+30     	; 0x330e <nrk_wait+0x96>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    32f0:	0e 94 1a 21 	call	0x4234	; 0x4234 <_nrk_get_next_wakeup>
    32f4:	08 94       	sec
    32f6:	e1 1c       	adc	r14, r1
    32f8:	f1 1c       	adc	r15, r1
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	e8 16       	cp	r14, r24
    32fe:	f9 06       	cpc	r15, r25
    3300:	34 f4       	brge	.+12     	; 0x330e <nrk_wait+0x96>
      timer += TIME_PAD;
    3302:	81 2f       	mov	r24, r17
    3304:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3306:	80 93 f8 06 	sts	0x06F8, r24
      _nrk_set_next_wakeup (timer);
    330a:	0e 94 1e 21 	call	0x423c	; 0x423c <_nrk_set_next_wakeup>
    }
  nrk_int_enable ();
    330e:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>

  _nrk_wait_for_scheduler ();
    3312:	0e 94 32 19 	call	0x3264	; 0x3264 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	28 96       	adiw	r28, 0x08	; 8
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	f8 94       	cli
    331e:	de bf       	out	0x3e, r29	; 62
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	cd bf       	out	0x3d, r28	; 61
    3324:	cf 91       	pop	r28
    3326:	df 91       	pop	r29
    3328:	1f 91       	pop	r17
    332a:	ff 90       	pop	r15
    332c:	ef 90       	pop	r14
    332e:	08 95       	ret

00003330 <nrk_wait_until>:
  //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    3330:	8f 92       	push	r8
    3332:	9f 92       	push	r9
    3334:	af 92       	push	r10
    3336:	bf 92       	push	r11
    3338:	cf 92       	push	r12
    333a:	df 92       	push	r13
    333c:	ef 92       	push	r14
    333e:	ff 92       	push	r15
    3340:	0f 93       	push	r16
    3342:	1f 93       	push	r17
    3344:	df 93       	push	r29
    3346:	cf 93       	push	r28
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    334c:	60 97       	sbiw	r28, 0x10	; 16
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	de bf       	out	0x3e, r29	; 62
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	cd bf       	out	0x3d, r28	; 61
    3358:	29 87       	std	Y+9, r18	; 0x09
    335a:	3a 87       	std	Y+10, r19	; 0x0a
    335c:	4b 87       	std	Y+11, r20	; 0x0b
    335e:	5c 87       	std	Y+12, r21	; 0x0c
    3360:	6d 87       	std	Y+13, r22	; 0x0d
    3362:	7e 87       	std	Y+14, r23	; 0x0e
    3364:	8f 87       	std	Y+15, r24	; 0x0f
    3366:	98 8b       	std	Y+16, r25	; 0x10
  nrk_time_t ct;
  uint8_t v;

  nrk_time_get (&ct);
    3368:	ce 01       	movw	r24, r28
    336a:	01 96       	adiw	r24, 0x01	; 1
    336c:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <nrk_time_get>

  v = nrk_time_sub (&t, t, ct);
    3370:	ce 01       	movw	r24, r28
    3372:	09 96       	adiw	r24, 0x09	; 9
    3374:	09 85       	ldd	r16, Y+9	; 0x09
    3376:	1a 85       	ldd	r17, Y+10	; 0x0a
    3378:	2b 85       	ldd	r18, Y+11	; 0x0b
    337a:	3c 85       	ldd	r19, Y+12	; 0x0c
    337c:	4d 85       	ldd	r20, Y+13	; 0x0d
    337e:	5e 85       	ldd	r21, Y+14	; 0x0e
    3380:	6f 85       	ldd	r22, Y+15	; 0x0f
    3382:	78 89       	ldd	r23, Y+16	; 0x10
    3384:	89 80       	ldd	r8, Y+1	; 0x01
    3386:	9a 80       	ldd	r9, Y+2	; 0x02
    3388:	ab 80       	ldd	r10, Y+3	; 0x03
    338a:	bc 80       	ldd	r11, Y+4	; 0x04
    338c:	cd 80       	ldd	r12, Y+5	; 0x05
    338e:	de 80       	ldd	r13, Y+6	; 0x06
    3390:	ef 80       	ldd	r14, Y+7	; 0x07
    3392:	f8 84       	ldd	r15, Y+8	; 0x08
    3394:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <nrk_time_sub>
  if (v == 0)
    3398:	88 23       	and	r24, r24
    339a:	11 f4       	brne	.+4      	; 0x33a0 <nrk_wait_until+0x70>
    339c:	8f ef       	ldi	r24, 0xFF	; 255
    339e:	0b c0       	rjmp	.+22     	; 0x33b6 <nrk_wait_until+0x86>
//if(t.secs<ct.secs) return 0;
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
  nrk_wait (t);
    33a0:	29 85       	ldd	r18, Y+9	; 0x09
    33a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    33a4:	4b 85       	ldd	r20, Y+11	; 0x0b
    33a6:	5c 85       	ldd	r21, Y+12	; 0x0c
    33a8:	6d 85       	ldd	r22, Y+13	; 0x0d
    33aa:	7e 85       	ldd	r23, Y+14	; 0x0e
    33ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ae:	98 89       	ldd	r25, Y+16	; 0x10
    33b0:	0e 94 3c 19 	call	0x3278	; 0x3278 <nrk_wait>
    33b4:	81 e0       	ldi	r24, 0x01	; 1

  return NRK_OK;
}
    33b6:	60 96       	adiw	r28, 0x10	; 16
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	f8 94       	cli
    33bc:	de bf       	out	0x3e, r29	; 62
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	cd bf       	out	0x3d, r28	; 61
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	1f 91       	pop	r17
    33c8:	0f 91       	pop	r16
    33ca:	ff 90       	pop	r15
    33cc:	ef 90       	pop	r14
    33ce:	df 90       	pop	r13
    33d0:	cf 90       	pop	r12
    33d2:	bf 90       	pop	r11
    33d4:	af 90       	pop	r10
    33d6:	9f 90       	pop	r9
    33d8:	8f 90       	pop	r8
    33da:	08 95       	ret

000033dc <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    33dc:	1f 93       	push	r17
  uint8_t timer;
  nrk_int_disable ();
    33de:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    33e2:	e0 91 c6 08 	lds	r30, 0x08C6
    33e6:	f0 91 c7 08 	lds	r31, 0x08C7
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->nw_flag = 1;
    33ee:	86 83       	std	Z+6, r24	; 0x06
  timer = _nrk_os_timer_get ();
    33f0:	0e 94 85 21 	call	0x430a	; 0x430a <_nrk_os_timer_get>
    33f4:	18 2f       	mov	r17, r24

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    33f6:	88 3f       	cpi	r24, 0xF8	; 248
    33f8:	80 f4       	brcc	.+32     	; 0x341a <nrk_wait_until_nw+0x3e>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    33fa:	0e 94 1a 21 	call	0x4234	; 0x4234 <_nrk_get_next_wakeup>
    33fe:	21 2f       	mov	r18, r17
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	2f 5f       	subi	r18, 0xFF	; 255
    3404:	3f 4f       	sbci	r19, 0xFF	; 255
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	28 17       	cp	r18, r24
    340a:	39 07       	cpc	r19, r25
    340c:	34 f4       	brge	.+12     	; 0x341a <nrk_wait_until_nw+0x3e>
      timer += TIME_PAD;
    340e:	81 2f       	mov	r24, r17
    3410:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3412:	80 93 f8 06 	sts	0x06F8, r24
      _nrk_set_next_wakeup (timer);
    3416:	0e 94 1e 21 	call	0x423c	; 0x423c <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    341a:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    341e:	0e 94 32 19 	call	0x3264	; 0x3264 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	1f 91       	pop	r17
    3426:	08 95       	ret

00003428 <nrk_set_next_wakeup>:
  _nrk_wait_for_scheduler ();
  return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    3428:	1f 93       	push	r17
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	cd b7       	in	r28, 0x3d	; 61
    3430:	de b7       	in	r29, 0x3e	; 62
    3432:	28 97       	sbiw	r28, 0x08	; 8
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	f8 94       	cli
    3438:	de bf       	out	0x3e, r29	; 62
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	cd bf       	out	0x3d, r28	; 61
    343e:	29 83       	std	Y+1, r18	; 0x01
    3440:	3a 83       	std	Y+2, r19	; 0x02
    3442:	4b 83       	std	Y+3, r20	; 0x03
    3444:	5c 83       	std	Y+4, r21	; 0x04
    3446:	6d 83       	std	Y+5, r22	; 0x05
    3448:	7e 83       	std	Y+6, r23	; 0x06
    344a:	8f 83       	std	Y+7, r24	; 0x07
    344c:	98 87       	std	Y+8, r25	; 0x08
  uint8_t timer;
  uint16_t nw;
  nrk_int_disable ();
    344e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>
  timer = _nrk_os_timer_get ();
    3452:	0e 94 85 21 	call	0x430a	; 0x430a <_nrk_os_timer_get>
    3456:	18 2f       	mov	r17, r24
  nw = _nrk_time_to_ticks (t);
    3458:	29 81       	ldd	r18, Y+1	; 0x01
    345a:	3a 81       	ldd	r19, Y+2	; 0x02
    345c:	4b 81       	ldd	r20, Y+3	; 0x03
    345e:	5c 81       	ldd	r21, Y+4	; 0x04
    3460:	6d 81       	ldd	r22, Y+5	; 0x05
    3462:	7e 81       	ldd	r23, Y+6	; 0x06
    3464:	8f 81       	ldd	r24, Y+7	; 0x07
    3466:	98 85       	ldd	r25, Y+8	; 0x08
    3468:	0e 94 ad 1c 	call	0x395a	; 0x395a <_nrk_time_to_ticks>
  if (nw <= TIME_PAD)
    346c:	83 30       	cpi	r24, 0x03	; 3
    346e:	91 05       	cpc	r25, r1
    3470:	10 f4       	brcc	.+4      	; 0x3476 <nrk_set_next_wakeup+0x4e>
    3472:	8f ef       	ldi	r24, 0xFF	; 255
    3474:	0b c0       	rjmp	.+22     	; 0x348c <nrk_set_next_wakeup+0x64>
    return NRK_ERROR;
  nrk_cur_task_TCB->next_wakeup = nw + timer;
    3476:	e0 91 c6 08 	lds	r30, 0x08C6
    347a:	f0 91 c7 08 	lds	r31, 0x08C7
    347e:	81 0f       	add	r24, r17
    3480:	91 1d       	adc	r25, r1
    3482:	96 8b       	std	Z+22, r25	; 0x16
    3484:	85 8b       	std	Z+21, r24	; 0x15
			_nrk_prev_timer_val=timer;
			_nrk_set_next_wakeup(timer);
		}
*/
//      nrk_cur_task_TCB->nw_flag=1;
  nrk_int_enable ();
    3486:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>
    348a:	81 e0       	ldi	r24, 0x01	; 1

  return NRK_OK;
}
    348c:	28 96       	adiw	r28, 0x08	; 8
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	f8 94       	cli
    3492:	de bf       	out	0x3e, r29	; 62
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	cd bf       	out	0x3d, r28	; 61
    3498:	cf 91       	pop	r28
    349a:	df 91       	pop	r29
    349c:	1f 91       	pop	r17
    349e:	08 95       	ret

000034a0 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    34a0:	1f 93       	push	r17
    34a2:	cf 93       	push	r28
    34a4:	df 93       	push	r29
    34a6:	ec 01       	movw	r28, r24
  uint8_t timer;
  nrk_int_disable ();
    34a8:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    34ac:	e0 91 c6 08 	lds	r30, 0x08C6
    34b0:	f0 91 c7 08 	lds	r31, 0x08C7
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->next_wakeup = ticks;
    34b8:	d6 8b       	std	Z+22, r29	; 0x16
    34ba:	c5 8b       	std	Z+21, r28	; 0x15
  timer = _nrk_os_timer_get ();
    34bc:	0e 94 85 21 	call	0x430a	; 0x430a <_nrk_os_timer_get>
    34c0:	18 2f       	mov	r17, r24

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    34c2:	88 3f       	cpi	r24, 0xF8	; 248
    34c4:	80 f4       	brcc	.+32     	; 0x34e6 <nrk_wait_until_ticks+0x46>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    34c6:	0e 94 1a 21 	call	0x4234	; 0x4234 <_nrk_get_next_wakeup>
    34ca:	21 2f       	mov	r18, r17
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	2f 5f       	subi	r18, 0xFF	; 255
    34d0:	3f 4f       	sbci	r19, 0xFF	; 255
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	28 17       	cp	r18, r24
    34d6:	39 07       	cpc	r19, r25
    34d8:	34 f4       	brge	.+12     	; 0x34e6 <nrk_wait_until_ticks+0x46>
      timer += TIME_PAD;
    34da:	81 2f       	mov	r24, r17
    34dc:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    34de:	80 93 f8 06 	sts	0x06F8, r24
      _nrk_set_next_wakeup (timer);
    34e2:	0e 94 1e 21 	call	0x423c	; 0x423c <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    34e6:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    34ea:	0e 94 32 19 	call	0x3264	; 0x3264 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	df 91       	pop	r29
    34f2:	cf 91       	pop	r28
    34f4:	1f 91       	pop	r17
    34f6:	08 95       	ret

000034f8 <nrk_wait_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    34f8:	ef 92       	push	r14
    34fa:	ff 92       	push	r15
    34fc:	1f 93       	push	r17
    34fe:	cf 93       	push	r28
    3500:	df 93       	push	r29
    3502:	7c 01       	movw	r14, r24
  uint8_t timer;
  nrk_int_disable ();
    3504:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    3508:	e0 91 c6 08 	lds	r30, 0x08C6
    350c:	f0 91 c7 08 	lds	r31, 0x08C7
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	85 83       	std	Z+5, r24	; 0x05
  timer = _nrk_os_timer_get ();
    3514:	0e 94 85 21 	call	0x430a	; 0x430a <_nrk_os_timer_get>
    3518:	18 2f       	mov	r17, r24
  nrk_cur_task_TCB->next_wakeup = ticks + timer;
    351a:	e0 91 c6 08 	lds	r30, 0x08C6
    351e:	f0 91 c7 08 	lds	r31, 0x08C7
    3522:	c8 2f       	mov	r28, r24
    3524:	d0 e0       	ldi	r29, 0x00	; 0
    3526:	ec 0e       	add	r14, r28
    3528:	fd 1e       	adc	r15, r29
    352a:	f6 8a       	std	Z+22, r15	; 0x16
    352c:	e5 8a       	std	Z+21, r14	; 0x15

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    352e:	88 3f       	cpi	r24, 0xF8	; 248
    3530:	68 f4       	brcc	.+26     	; 0x354c <nrk_wait_ticks+0x54>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3532:	0e 94 1a 21 	call	0x4234	; 0x4234 <_nrk_get_next_wakeup>
    3536:	21 96       	adiw	r28, 0x01	; 1
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	c8 17       	cp	r28, r24
    353c:	d9 07       	cpc	r29, r25
    353e:	34 f4       	brge	.+12     	; 0x354c <nrk_wait_ticks+0x54>
      timer += TIME_PAD;
    3540:	81 2f       	mov	r24, r17
    3542:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3544:	80 93 f8 06 	sts	0x06F8, r24
      _nrk_set_next_wakeup (timer);
    3548:	0e 94 1e 21 	call	0x423c	; 0x423c <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    354c:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    3550:	0e 94 32 19 	call	0x3264	; 0x3264 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	df 91       	pop	r29
    3558:	cf 91       	pop	r28
    355a:	1f 91       	pop	r17
    355c:	ff 90       	pop	r15
    355e:	ef 90       	pop	r14
    3560:	08 95       	ret

00003562 <nrk_wait_until_next_n_periods>:
  _nrk_wait_for_scheduler ();
  return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    3562:	1f 93       	push	r17
    3564:	cf 93       	push	r28
    3566:	df 93       	push	r29
    3568:	ec 01       	movw	r28, r24
  uint8_t timer;

  nrk_stack_check ();
    356a:	0e 94 ef 14 	call	0x29de	; 0x29de <nrk_stack_check>

  if (p == 0)
    356e:	20 97       	sbiw	r28, 0x00	; 0
    3570:	11 f4       	brne	.+4      	; 0x3576 <nrk_wait_until_next_n_periods+0x14>
    3572:	c1 e0       	ldi	r28, 0x01	; 1
    3574:	d0 e0       	ldi	r29, 0x00	; 0
    p = 1;
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
  nrk_int_disable ();
    3576:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    357a:	e0 91 c6 08 	lds	r30, 0x08C6
    357e:	f0 91 c7 08 	lds	r31, 0x08C7
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->num_periods = p;
    3586:	d0 a3       	std	Z+32, r29	; 0x20
    3588:	c7 8f       	std	Z+31, r28	; 0x1f
  timer = _nrk_os_timer_get ();
    358a:	0e 94 85 21 	call	0x430a	; 0x430a <_nrk_os_timer_get>
    358e:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    3590:	88 3f       	cpi	r24, 0xF8	; 248
    3592:	80 f4       	brcc	.+32     	; 0x35b4 <nrk_wait_until_next_n_periods+0x52>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    3594:	0e 94 1a 21 	call	0x4234	; 0x4234 <_nrk_get_next_wakeup>
    3598:	21 2f       	mov	r18, r17
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	2f 5f       	subi	r18, 0xFF	; 255
    359e:	3f 4f       	sbci	r19, 0xFF	; 255
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	28 17       	cp	r18, r24
    35a4:	39 07       	cpc	r19, r25
    35a6:	34 f4       	brge	.+12     	; 0x35b4 <nrk_wait_until_next_n_periods+0x52>
      timer += TIME_PAD;
    35a8:	81 2f       	mov	r24, r17
    35aa:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    35ac:	80 93 f8 06 	sts	0x06F8, r24
      _nrk_set_next_wakeup (timer);
    35b0:	0e 94 1e 21 	call	0x423c	; 0x423c <_nrk_set_next_wakeup>
    }

  nrk_int_enable ();
    35b4:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>

  _nrk_wait_for_scheduler ();
    35b8:	0e 94 32 19 	call	0x3264	; 0x3264 <_nrk_wait_for_scheduler>

  return NRK_OK;
}
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	df 91       	pop	r29
    35c0:	cf 91       	pop	r28
    35c2:	1f 91       	pop	r17
    35c4:	08 95       	ret

000035c6 <nrk_wait_until_next_period>:
  nrk_wait_until_next_period ();
  return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    35c6:	1f 93       	push	r17
  uint8_t timer;

  nrk_stack_check ();
    35c8:	0e 94 ef 14 	call	0x29de	; 0x29de <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
  nrk_int_disable ();
    35cc:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>
  nrk_cur_task_TCB->num_periods = 1;
    35d0:	e0 91 c6 08 	lds	r30, 0x08C6
    35d4:	f0 91 c7 08 	lds	r31, 0x08C7
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	90 a3       	std	Z+32, r25	; 0x20
    35de:	87 8f       	std	Z+31, r24	; 0x1f
  nrk_cur_task_TCB->suspend_flag = 1;
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	85 83       	std	Z+5, r24	; 0x05
  timer = _nrk_os_timer_get ();
    35e4:	0e 94 85 21 	call	0x430a	; 0x430a <_nrk_os_timer_get>
    35e8:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;
//printf("1st next wakeup is %d.\n\r",_nrk_get_next_wakeup ());
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    35ea:	88 3f       	cpi	r24, 0xF8	; 248
    35ec:	80 f4       	brcc	.+32     	; 0x360e <nrk_wait_until_next_period+0x48>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    35ee:	0e 94 1a 21 	call	0x4234	; 0x4234 <_nrk_get_next_wakeup>
    35f2:	21 2f       	mov	r18, r17
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	2f 5f       	subi	r18, 0xFF	; 255
    35f8:	3f 4f       	sbci	r19, 0xFF	; 255
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	28 17       	cp	r18, r24
    35fe:	39 07       	cpc	r19, r25
    3600:	34 f4       	brge	.+12     	; 0x360e <nrk_wait_until_next_period+0x48>
      timer += TIME_PAD;
    3602:	81 2f       	mov	r24, r17
    3604:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    3606:	80 93 f8 06 	sts	0x06F8, r24
	//printf("1st timer is %d.\n\r", timer);
      _nrk_set_next_wakeup (timer);
    360a:	0e 94 1e 21 	call	0x423c	; 0x423c <_nrk_set_next_wakeup>
    }
	//printf("2nd timer is %d. next wakeup is %d.\n\r", _nrk_os_timer_get (),_nrk_get_next_wakeup ());
  nrk_int_enable ();
    360e:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>
  _nrk_wait_for_scheduler ();
    3612:	0e 94 32 19 	call	0x3264	; 0x3264 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	1f 91       	pop	r17
    361a:	08 95       	ret

0000361c <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
  nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    361c:	e0 91 c6 08 	lds	r30, 0x08C6
    3620:	f0 91 c7 08 	lds	r31, 0x08C7
    3624:	80 85       	ldd	r24, Z+8	; 0x08
    3626:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <nrk_rem_from_readyQ>
  nrk_cur_task_TCB->task_state = FINISHED;
    362a:	e0 91 c6 08 	lds	r30, 0x08C6
    362e:	f0 91 c7 08 	lds	r31, 0x08C7
    3632:	84 e0       	ldi	r24, 0x04	; 4
    3634:	81 87       	std	Z+9, r24	; 0x09

  // HAHA, there is NO next period...
  nrk_wait_until_next_period ();
    3636:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <nrk_wait_until_next_period>
  return NRK_OK;
}
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	08 95       	ret

0000363e <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    363e:	ef 92       	push	r14
    3640:	ff 92       	push	r15
    3642:	0f 93       	push	r16
    3644:	1f 93       	push	r17
    3646:	cf 93       	push	r28
    3648:	df 93       	push	r29
    364a:	ec 01       	movw	r28, r24
  uint8_t rtype;
  void *topOfStackPtr;

  topOfStackPtr =
    (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);
    364c:	69 81       	ldd	r22, Y+1	; 0x01
    364e:	7a 81       	ldd	r23, Y+2	; 0x02
    3650:	4b 81       	ldd	r20, Y+3	; 0x03
    3652:	5c 81       	ldd	r21, Y+4	; 0x04
    3654:	8d 81       	ldd	r24, Y+5	; 0x05
    3656:	9e 81       	ldd	r25, Y+6	; 0x06
    3658:	0e 94 d4 23 	call	0x47a8	; 0x47a8 <nrk_task_stk_init>
    365c:	bc 01       	movw	r22, r24

  //printf("activate %d\n",(int)Task.task_ID);
  if (Task->FirstActivation == TRUE) {
    365e:	8f 81       	ldd	r24, Y+7	; 0x07
    3660:	88 23       	and	r24, r24
    3662:	69 f0       	breq	.+26     	; 0x367e <nrk_activate_task+0x40>
    rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    3664:	4b 81       	ldd	r20, Y+3	; 0x03
    3666:	5c 81       	ldd	r21, Y+4	; 0x04
    3668:	ce 01       	movw	r24, r28
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	00 e0       	ldi	r16, 0x00	; 0
    3670:	10 e0       	ldi	r17, 0x00	; 0
    3672:	ee 24       	eor	r14, r14
    3674:	ff 24       	eor	r15, r15
    3676:	0e 94 8b 11 	call	0x2316	; 0x2316 <nrk_TCB_init>
    Task->FirstActivation = FALSE;
    367a:	1f 82       	std	Y+7, r1	; 0x07
    367c:	15 c0       	rjmp	.+42     	; 0x36a8 <nrk_activate_task+0x6a>

  }
  else {
    if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    367e:	88 81       	ld	r24, Y
    3680:	99 27       	eor	r25, r25
    3682:	87 fd       	sbrc	r24, 7
    3684:	90 95       	com	r25
    3686:	fc 01       	movw	r30, r24
    3688:	25 e0       	ldi	r18, 0x05	; 5
    368a:	ee 0f       	add	r30, r30
    368c:	ff 1f       	adc	r31, r31
    368e:	2a 95       	dec	r18
    3690:	e1 f7       	brne	.-8      	; 0x368a <nrk_activate_task+0x4c>
    3692:	e8 0f       	add	r30, r24
    3694:	f9 1f       	adc	r31, r25
    3696:	e3 5b       	subi	r30, 0xB3	; 179
    3698:	f7 4f       	sbci	r31, 0xF7	; 247
    369a:	81 85       	ldd	r24, Z+9	; 0x09
    369c:	83 30       	cpi	r24, 0x03	; 3
    369e:	11 f0       	breq	.+4      	; 0x36a4 <nrk_activate_task+0x66>
    36a0:	8f ef       	ldi	r24, 0xFF	; 255
    36a2:	1b c0       	rjmp	.+54     	; 0x36da <nrk_activate_task+0x9c>
      return NRK_ERROR;
    //Re-init some parts of TCB

    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    36a4:	71 83       	std	Z+1, r23	; 0x01
    36a6:	60 83       	st	Z, r22
  // If Idle Task then Add to ready Q
  //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
  //nrk_add_to_readyQ(Task->task_ID);
  //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
  //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
  if (nrk_task_TCB[Task->task_ID].next_wakeup == 0) {
    36a8:	88 81       	ld	r24, Y
    36aa:	28 2f       	mov	r18, r24
    36ac:	33 27       	eor	r19, r19
    36ae:	27 fd       	sbrc	r18, 7
    36b0:	30 95       	com	r19
    36b2:	f9 01       	movw	r30, r18
    36b4:	05 e0       	ldi	r16, 0x05	; 5
    36b6:	ee 0f       	add	r30, r30
    36b8:	ff 1f       	adc	r31, r31
    36ba:	0a 95       	dec	r16
    36bc:	e1 f7       	brne	.-8      	; 0x36b6 <nrk_activate_task+0x78>
    36be:	e2 0f       	add	r30, r18
    36c0:	f3 1f       	adc	r31, r19
    36c2:	e3 5b       	subi	r30, 0xB3	; 179
    36c4:	f7 4f       	sbci	r31, 0xF7	; 247
    36c6:	25 89       	ldd	r18, Z+21	; 0x15
    36c8:	36 89       	ldd	r19, Z+22	; 0x16
    36ca:	21 15       	cp	r18, r1
    36cc:	31 05       	cpc	r19, r1
    36ce:	21 f4       	brne	.+8      	; 0x36d8 <nrk_activate_task+0x9a>
    nrk_task_TCB[Task->task_ID].task_state = READY;
    36d0:	92 e0       	ldi	r25, 0x02	; 2
    36d2:	91 87       	std	Z+9, r25	; 0x09
    nrk_add_to_readyQ (Task->task_ID);
    36d4:	0e 94 24 18 	call	0x3048	; 0x3048 <nrk_add_to_readyQ>
    36d8:	81 e0       	ldi	r24, 0x01	; 1
  }

  return NRK_OK;
}
    36da:	df 91       	pop	r29
    36dc:	cf 91       	pop	r28
    36de:	1f 91       	pop	r17
    36e0:	0f 91       	pop	r16
    36e2:	ff 90       	pop	r15
    36e4:	ef 90       	pop	r14
    36e6:	08 95       	ret

000036e8 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
uint8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    36e8:	8f 92       	push	r8
    36ea:	9f 92       	push	r9
    36ec:	af 92       	push	r10
    36ee:	bf 92       	push	r11
    36f0:	cf 92       	push	r12
    36f2:	df 92       	push	r13
    36f4:	ef 92       	push	r14
    36f6:	ff 92       	push	r15
    36f8:	0f 93       	push	r16
    36fa:	1f 93       	push	r17
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	cd b7       	in	r28, 0x3d	; 61
    3702:	de b7       	in	r29, 0x3e	; 62
    3704:	60 97       	sbiw	r28, 0x10	; 16
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	f8 94       	cli
    370a:	de bf       	out	0x3e, r29	; 62
    370c:	0f be       	out	0x3f, r0	; 63
    370e:	cd bf       	out	0x3d, r28	; 61
    3710:	fc 01       	movw	r30, r24
    3712:	09 83       	std	Y+1, r16	; 0x01
    3714:	1a 83       	std	Y+2, r17	; 0x02
    3716:	2b 83       	std	Y+3, r18	; 0x03
    3718:	3c 83       	std	Y+4, r19	; 0x04
    371a:	4d 83       	std	Y+5, r20	; 0x05
    371c:	5e 83       	std	Y+6, r21	; 0x06
    371e:	6f 83       	std	Y+7, r22	; 0x07
    3720:	78 87       	std	Y+8, r23	; 0x08
    3722:	89 86       	std	Y+9, r8	; 0x09
    3724:	9a 86       	std	Y+10, r9	; 0x0a
    3726:	ab 86       	std	Y+11, r10	; 0x0b
    3728:	bc 86       	std	Y+12, r11	; 0x0c
    372a:	cd 86       	std	Y+13, r12	; 0x0d
    372c:	de 86       	std	Y+14, r13	; 0x0e
    372e:	ef 86       	std	Y+15, r14	; 0x0f
    3730:	f8 8a       	std	Y+16, r15	; 0x10
    3732:	a9 80       	ldd	r10, Y+1	; 0x01
    3734:	ba 80       	ldd	r11, Y+2	; 0x02
    3736:	cb 80       	ldd	r12, Y+3	; 0x03
    3738:	dc 80       	ldd	r13, Y+4	; 0x04
    373a:	2d 81       	ldd	r18, Y+5	; 0x05
    373c:	3e 81       	ldd	r19, Y+6	; 0x06
    373e:	4f 81       	ldd	r20, Y+7	; 0x07
    3740:	58 85       	ldd	r21, Y+8	; 0x08
    3742:	e9 84       	ldd	r14, Y+9	; 0x09
    3744:	fa 84       	ldd	r15, Y+10	; 0x0a
    3746:	0b 85       	ldd	r16, Y+11	; 0x0b
    3748:	1c 85       	ldd	r17, Y+12	; 0x0c
    374a:	8d 85       	ldd	r24, Y+13	; 0x0d
    374c:	9e 85       	ldd	r25, Y+14	; 0x0e
    374e:	af 85       	ldd	r26, Y+15	; 0x0f
    3750:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return 0;; 
    3752:	ae 14       	cp	r10, r14
    3754:	bf 04       	cpc	r11, r15
    3756:	c0 06       	cpc	r12, r16
    3758:	d1 06       	cpc	r13, r17
    375a:	08 f4       	brcc	.+2      	; 0x375e <nrk_time_sub+0x76>
    375c:	40 c0       	rjmp	.+128    	; 0x37de <nrk_time_sub+0xf6>
if(low.secs==high.secs)
    375e:	ea 14       	cp	r14, r10
    3760:	fb 04       	cpc	r15, r11
    3762:	0c 05       	cpc	r16, r12
    3764:	1d 05       	cpc	r17, r13
    3766:	91 f4       	brne	.+36     	; 0x378c <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return 0;  
    3768:	28 17       	cp	r18, r24
    376a:	39 07       	cpc	r19, r25
    376c:	4a 07       	cpc	r20, r26
    376e:	5b 07       	cpc	r21, r27
    3770:	b0 f1       	brcs	.+108    	; 0x37de <nrk_time_sub+0xf6>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3772:	28 1b       	sub	r18, r24
    3774:	39 0b       	sbc	r19, r25
    3776:	4a 0b       	sbc	r20, r26
    3778:	5b 0b       	sbc	r21, r27
    377a:	24 83       	std	Z+4, r18	; 0x04
    377c:	35 83       	std	Z+5, r19	; 0x05
    377e:	46 83       	std	Z+6, r20	; 0x06
    3780:	57 83       	std	Z+7, r21	; 0x07
	result->secs=0;
    3782:	10 82       	st	Z, r1
    3784:	11 82       	std	Z+1, r1	; 0x01
    3786:	12 82       	std	Z+2, r1	; 0x02
    3788:	13 82       	std	Z+3, r1	; 0x03
    378a:	1e c0       	rjmp	.+60     	; 0x37c8 <nrk_time_sub+0xe0>
	return 1;
	}
if(low.nano_secs > high.nano_secs)
    378c:	28 17       	cp	r18, r24
    378e:	39 07       	cpc	r19, r25
    3790:	4a 07       	cpc	r20, r26
    3792:	5b 07       	cpc	r21, r27
    3794:	d8 f4       	brcc	.+54     	; 0x37cc <nrk_time_sub+0xe4>
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    3796:	08 94       	sec
    3798:	a1 08       	sbc	r10, r1
    379a:	b1 08       	sbc	r11, r1
    379c:	c1 08       	sbc	r12, r1
    379e:	d1 08       	sbc	r13, r1
    37a0:	ae 18       	sub	r10, r14
    37a2:	bf 08       	sbc	r11, r15
    37a4:	c0 0a       	sbc	r12, r16
    37a6:	d1 0a       	sbc	r13, r17
    37a8:	a0 82       	st	Z, r10
    37aa:	b1 82       	std	Z+1, r11	; 0x01
    37ac:	c2 82       	std	Z+2, r12	; 0x02
    37ae:	d3 82       	std	Z+3, r13	; 0x03
	result->nano_secs=high.nano_secs-low.nano_secs;
    37b0:	20 50       	subi	r18, 0x00	; 0
    37b2:	36 43       	sbci	r19, 0x36	; 54
    37b4:	45 46       	sbci	r20, 0x65	; 101
    37b6:	54 4c       	sbci	r21, 0xC4	; 196
    37b8:	28 1b       	sub	r18, r24
    37ba:	39 0b       	sbc	r19, r25
    37bc:	4a 0b       	sbc	r20, r26
    37be:	5b 0b       	sbc	r21, r27
    37c0:	24 83       	std	Z+4, r18	; 0x04
    37c2:	35 83       	std	Z+5, r19	; 0x05
    37c4:	46 83       	std	Z+6, r20	; 0x06
    37c6:	57 83       	std	Z+7, r21	; 0x07
    37c8:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
    37ca:	0a c0       	rjmp	.+20     	; 0x37e0 <nrk_time_sub+0xf8>
}

result->secs=high.secs-low.secs;
    37cc:	ae 18       	sub	r10, r14
    37ce:	bf 08       	sbc	r11, r15
    37d0:	c0 0a       	sbc	r12, r16
    37d2:	d1 0a       	sbc	r13, r17
    37d4:	a0 82       	st	Z, r10
    37d6:	b1 82       	std	Z+1, r11	; 0x01
    37d8:	c2 82       	std	Z+2, r12	; 0x02
    37da:	d3 82       	std	Z+3, r13	; 0x03
    37dc:	ed cf       	rjmp	.-38     	; 0x37b8 <nrk_time_sub+0xd0>
result->nano_secs=high.nano_secs-low.nano_secs;
return 1;
    37de:	80 e0       	ldi	r24, 0x00	; 0
}
    37e0:	60 96       	adiw	r28, 0x10	; 16
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	f8 94       	cli
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	cd bf       	out	0x3d, r28	; 61
    37ec:	cf 91       	pop	r28
    37ee:	df 91       	pop	r29
    37f0:	1f 91       	pop	r17
    37f2:	0f 91       	pop	r16
    37f4:	ff 90       	pop	r15
    37f6:	ef 90       	pop	r14
    37f8:	df 90       	pop	r13
    37fa:	cf 90       	pop	r12
    37fc:	bf 90       	pop	r11
    37fe:	af 90       	pop	r10
    3800:	9f 90       	pop	r9
    3802:	8f 90       	pop	r8
    3804:	08 95       	ret

00003806 <nrk_time_add>:
/*
 * result = a+b
 *
 */
uint8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    3806:	8f 92       	push	r8
    3808:	9f 92       	push	r9
    380a:	af 92       	push	r10
    380c:	bf 92       	push	r11
    380e:	cf 92       	push	r12
    3810:	df 92       	push	r13
    3812:	ef 92       	push	r14
    3814:	ff 92       	push	r15
    3816:	0f 93       	push	r16
    3818:	1f 93       	push	r17
    381a:	df 93       	push	r29
    381c:	cf 93       	push	r28
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	60 97       	sbiw	r28, 0x10	; 16
    3824:	0f b6       	in	r0, 0x3f	; 63
    3826:	f8 94       	cli
    3828:	de bf       	out	0x3e, r29	; 62
    382a:	0f be       	out	0x3f, r0	; 63
    382c:	cd bf       	out	0x3d, r28	; 61
    382e:	fc 01       	movw	r30, r24
    3830:	09 83       	std	Y+1, r16	; 0x01
    3832:	1a 83       	std	Y+2, r17	; 0x02
    3834:	2b 83       	std	Y+3, r18	; 0x03
    3836:	3c 83       	std	Y+4, r19	; 0x04
    3838:	4d 83       	std	Y+5, r20	; 0x05
    383a:	5e 83       	std	Y+6, r21	; 0x06
    383c:	6f 83       	std	Y+7, r22	; 0x07
    383e:	78 87       	std	Y+8, r23	; 0x08
    3840:	89 86       	std	Y+9, r8	; 0x09
    3842:	9a 86       	std	Y+10, r9	; 0x0a
    3844:	ab 86       	std	Y+11, r10	; 0x0b
    3846:	bc 86       	std	Y+12, r11	; 0x0c
    3848:	cd 86       	std	Y+13, r12	; 0x0d
    384a:	de 86       	std	Y+14, r13	; 0x0e
    384c:	ef 86       	std	Y+15, r14	; 0x0f
    384e:	f8 8a       	std	Y+16, r15	; 0x10
    3850:	ed 80       	ldd	r14, Y+5	; 0x05
    3852:	fe 80       	ldd	r15, Y+6	; 0x06
    3854:	0f 81       	ldd	r16, Y+7	; 0x07
    3856:	18 85       	ldd	r17, Y+8	; 0x08
    3858:	8d 85       	ldd	r24, Y+13	; 0x0d
    385a:	9e 85       	ldd	r25, Y+14	; 0x0e
    385c:	af 85       	ldd	r26, Y+15	; 0x0f
    385e:	b8 89       	ldd	r27, Y+16	; 0x10
result->secs=a.secs+b.secs;
    3860:	29 85       	ldd	r18, Y+9	; 0x09
    3862:	3a 85       	ldd	r19, Y+10	; 0x0a
    3864:	4b 85       	ldd	r20, Y+11	; 0x0b
    3866:	5c 85       	ldd	r21, Y+12	; 0x0c
    3868:	a9 80       	ldd	r10, Y+1	; 0x01
    386a:	ba 80       	ldd	r11, Y+2	; 0x02
    386c:	cb 80       	ldd	r12, Y+3	; 0x03
    386e:	dc 80       	ldd	r13, Y+4	; 0x04
    3870:	2a 0d       	add	r18, r10
    3872:	3b 1d       	adc	r19, r11
    3874:	4c 1d       	adc	r20, r12
    3876:	5d 1d       	adc	r21, r13
    3878:	20 83       	st	Z, r18
    387a:	31 83       	std	Z+1, r19	; 0x01
    387c:	42 83       	std	Z+2, r20	; 0x02
    387e:	53 83       	std	Z+3, r21	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3880:	8e 0d       	add	r24, r14
    3882:	9f 1d       	adc	r25, r15
    3884:	a0 1f       	adc	r26, r16
    3886:	b1 1f       	adc	r27, r17
    3888:	84 83       	std	Z+4, r24	; 0x04
    388a:	95 83       	std	Z+5, r25	; 0x05
    388c:	a6 83       	std	Z+6, r26	; 0x06
    388e:	b7 83       	std	Z+7, r27	; 0x07
    3890:	10 c0       	rjmp	.+32     	; 0x38b2 <nrk_time_add+0xac>
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    3892:	20 81       	ld	r18, Z
    3894:	31 81       	ldd	r19, Z+1	; 0x01
    3896:	42 81       	ldd	r20, Z+2	; 0x02
    3898:	53 81       	ldd	r21, Z+3	; 0x03
    389a:	2f 5f       	subi	r18, 0xFF	; 255
    389c:	3f 4f       	sbci	r19, 0xFF	; 255
    389e:	4f 4f       	sbci	r20, 0xFF	; 255
    38a0:	5f 4f       	sbci	r21, 0xFF	; 255
    38a2:	20 83       	st	Z, r18
    38a4:	31 83       	std	Z+1, r19	; 0x01
    38a6:	42 83       	std	Z+2, r20	; 0x02
    38a8:	53 83       	std	Z+3, r21	; 0x03
    38aa:	80 50       	subi	r24, 0x00	; 0
    38ac:	9a 4c       	sbci	r25, 0xCA	; 202
    38ae:	aa 49       	sbci	r26, 0x9A	; 154
    38b0:	bb 43       	sbci	r27, 0x3B	; 59
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    38b2:	80 30       	cpi	r24, 0x00	; 0
    38b4:	2a ec       	ldi	r18, 0xCA	; 202
    38b6:	92 07       	cpc	r25, r18
    38b8:	2a e9       	ldi	r18, 0x9A	; 154
    38ba:	a2 07       	cpc	r26, r18
    38bc:	2b e3       	ldi	r18, 0x3B	; 59
    38be:	b2 07       	cpc	r27, r18
    38c0:	40 f7       	brcc	.-48     	; 0x3892 <nrk_time_add+0x8c>
    38c2:	84 83       	std	Z+4, r24	; 0x04
    38c4:	95 83       	std	Z+5, r25	; 0x05
    38c6:	a6 83       	std	Z+6, r26	; 0x06
    38c8:	b7 83       	std	Z+7, r27	; 0x07
{
result->secs=a.secs+b.secs;
result->nano_secs=a.nano_secs+b.nano_secs;
nrk_time_compact_nanos(result);
return 1;
}
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	60 96       	adiw	r28, 0x10	; 16
    38ce:	0f b6       	in	r0, 0x3f	; 63
    38d0:	f8 94       	cli
    38d2:	de bf       	out	0x3e, r29	; 62
    38d4:	0f be       	out	0x3f, r0	; 63
    38d6:	cd bf       	out	0x3d, r28	; 61
    38d8:	cf 91       	pop	r28
    38da:	df 91       	pop	r29
    38dc:	1f 91       	pop	r17
    38de:	0f 91       	pop	r16
    38e0:	ff 90       	pop	r15
    38e2:	ef 90       	pop	r14
    38e4:	df 90       	pop	r13
    38e6:	cf 90       	pop	r12
    38e8:	bf 90       	pop	r11
    38ea:	af 90       	pop	r10
    38ec:	9f 90       	pop	r9
    38ee:	8f 90       	pop	r8
    38f0:	08 95       	ret

000038f2 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    38f2:	fc 01       	movw	r30, r24
    38f4:	84 81       	ldd	r24, Z+4	; 0x04
    38f6:	95 81       	ldd	r25, Z+5	; 0x05
    38f8:	a6 81       	ldd	r26, Z+6	; 0x06
    38fa:	b7 81       	ldd	r27, Z+7	; 0x07
  while(t->nano_secs>=NANOS_PER_SEC)
    38fc:	10 c0       	rjmp	.+32     	; 0x391e <nrk_time_compact_nanos+0x2c>
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    38fe:	20 81       	ld	r18, Z
    3900:	31 81       	ldd	r19, Z+1	; 0x01
    3902:	42 81       	ldd	r20, Z+2	; 0x02
    3904:	53 81       	ldd	r21, Z+3	; 0x03
    3906:	2f 5f       	subi	r18, 0xFF	; 255
    3908:	3f 4f       	sbci	r19, 0xFF	; 255
    390a:	4f 4f       	sbci	r20, 0xFF	; 255
    390c:	5f 4f       	sbci	r21, 0xFF	; 255
    390e:	20 83       	st	Z, r18
    3910:	31 83       	std	Z+1, r19	; 0x01
    3912:	42 83       	std	Z+2, r20	; 0x02
    3914:	53 83       	std	Z+3, r21	; 0x03
    3916:	80 50       	subi	r24, 0x00	; 0
    3918:	9a 4c       	sbci	r25, 0xCA	; 202
    391a:	aa 49       	sbci	r26, 0x9A	; 154
    391c:	bb 43       	sbci	r27, 0x3B	; 59
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    391e:	80 30       	cpi	r24, 0x00	; 0
    3920:	2a ec       	ldi	r18, 0xCA	; 202
    3922:	92 07       	cpc	r25, r18
    3924:	2a e9       	ldi	r18, 0x9A	; 154
    3926:	a2 07       	cpc	r26, r18
    3928:	2b e3       	ldi	r18, 0x3B	; 59
    392a:	b2 07       	cpc	r27, r18
    392c:	40 f7       	brcc	.-48     	; 0x38fe <nrk_time_compact_nanos+0xc>
    392e:	84 83       	std	Z+4, r24	; 0x04
    3930:	95 83       	std	Z+5, r25	; 0x05
    3932:	a6 83       	std	Z+6, r26	; 0x06
    3934:	b7 83       	std	Z+7, r27	; 0x07
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    }
}
    3936:	08 95       	ret

00003938 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    3938:	60 93 bd 08 	sts	0x08BD, r22
    393c:	70 93 be 08 	sts	0x08BE, r23
    3940:	80 93 bf 08 	sts	0x08BF, r24
    3944:	90 93 c0 08 	sts	0x08C0, r25
  nrk_system_time.nano_secs=nano_secs;
    3948:	20 93 c1 08 	sts	0x08C1, r18
    394c:	30 93 c2 08 	sts	0x08C2, r19
    3950:	40 93 c3 08 	sts	0x08C3, r20
    3954:	50 93 c4 08 	sts	0x08C4, r21
}
    3958:	08 95       	ret

0000395a <_nrk_time_to_ticks>:

uint16_t _nrk_time_to_ticks(nrk_time_t t)
{
    395a:	8f 92       	push	r8
    395c:	9f 92       	push	r9
    395e:	af 92       	push	r10
    3960:	bf 92       	push	r11
    3962:	cf 92       	push	r12
    3964:	df 92       	push	r13
    3966:	ef 92       	push	r14
    3968:	ff 92       	push	r15
    396a:	0f 93       	push	r16
    396c:	1f 93       	push	r17
    396e:	df 93       	push	r29
    3970:	cf 93       	push	r28
    3972:	cd b7       	in	r28, 0x3d	; 61
    3974:	de b7       	in	r29, 0x3e	; 62
    3976:	28 97       	sbiw	r28, 0x08	; 8
    3978:	0f b6       	in	r0, 0x3f	; 63
    397a:	f8 94       	cli
    397c:	de bf       	out	0x3e, r29	; 62
    397e:	0f be       	out	0x3f, r0	; 63
    3980:	cd bf       	out	0x3d, r28	; 61
    3982:	29 83       	std	Y+1, r18	; 0x01
    3984:	3a 83       	std	Y+2, r19	; 0x02
    3986:	4b 83       	std	Y+3, r20	; 0x03
    3988:	5c 83       	std	Y+4, r21	; 0x04
    398a:	6d 83       	std	Y+5, r22	; 0x05
    398c:	7e 83       	std	Y+6, r23	; 0x06
    398e:	8f 83       	std	Y+7, r24	; 0x07
    3990:	98 87       	std	Y+8, r25	; 0x08
    3992:	89 80       	ldd	r8, Y+1	; 0x01
    3994:	9a 80       	ldd	r9, Y+2	; 0x02
    3996:	ab 80       	ldd	r10, Y+3	; 0x03
    3998:	bc 80       	ldd	r11, Y+4	; 0x04
    399a:	cd 80       	ldd	r12, Y+5	; 0x05
    399c:	de 80       	ldd	r13, Y+6	; 0x06
    399e:	ef 80       	ldd	r14, Y+7	; 0x07
    39a0:	f8 84       	ldd	r15, Y+8	; 0x08
uint16_t ticks;
uint16_t tmp;
// FIXME: This will overflow

if(t.secs>=1)
    39a2:	81 14       	cp	r8, r1
    39a4:	91 04       	cpc	r9, r1
    39a6:	a1 04       	cpc	r10, r1
    39a8:	b1 04       	cpc	r11, r1
    39aa:	e9 f0       	breq	.+58     	; 0x39e6 <_nrk_time_to_ticks+0x8c>
{
t.nano_secs+=NANOS_PER_SEC;
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	9a ec       	ldi	r25, 0xCA	; 202
    39b0:	aa e9       	ldi	r26, 0x9A	; 154
    39b2:	bb e3       	ldi	r27, 0x3B	; 59
    39b4:	c8 0e       	add	r12, r24
    39b6:	d9 1e       	adc	r13, r25
    39b8:	ea 1e       	adc	r14, r26
    39ba:	fb 1e       	adc	r15, r27
t.secs--;
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    39bc:	c7 01       	movw	r24, r14
    39be:	b6 01       	movw	r22, r12
    39c0:	23 eb       	ldi	r18, 0xB3	; 179
    39c2:	36 ee       	ldi	r19, 0xE6	; 230
    39c4:	4e e0       	ldi	r20, 0x0E	; 14
    39c6:	50 e0       	ldi	r21, 0x00	; 0
    39c8:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__udivmodsi4>
ticks+=t.secs*TICKS_PER_SEC;
    39cc:	08 94       	sec
    39ce:	81 08       	sbc	r8, r1
    39d0:	91 08       	sbc	r9, r1
    39d2:	a1 08       	sbc	r10, r1
    39d4:	b1 08       	sbc	r11, r1
    39d6:	84 01       	movw	r16, r8
    39d8:	10 2f       	mov	r17, r16
    39da:	00 27       	eor	r16, r16
    39dc:	11 0f       	add	r17, r17
    39de:	11 0f       	add	r17, r17
    39e0:	02 0f       	add	r16, r18
    39e2:	13 1f       	adc	r17, r19
    39e4:	09 c0       	rjmp	.+18     	; 0x39f8 <_nrk_time_to_ticks+0x9e>
}else
{
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    39e6:	c7 01       	movw	r24, r14
    39e8:	b6 01       	movw	r22, r12
    39ea:	23 eb       	ldi	r18, 0xB3	; 179
    39ec:	36 ee       	ldi	r19, 0xE6	; 230
    39ee:	4e e0       	ldi	r20, 0x0E	; 14
    39f0:	50 e0       	ldi	r21, 0x00	; 0
    39f2:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__udivmodsi4>
    39f6:	89 01       	movw	r16, r18
    39f8:	b8 01       	movw	r22, r16
}

tmp=ticks;
while(tmp>TICKS_PER_SEC)tmp-=TICKS_PER_SEC;
    39fa:	02 c0       	rjmp	.+4      	; 0x3a00 <_nrk_time_to_ticks+0xa6>
    39fc:	60 50       	subi	r22, 0x00	; 0
    39fe:	74 40       	sbci	r23, 0x04	; 4
    3a00:	94 e0       	ldi	r25, 0x04	; 4
    3a02:	61 30       	cpi	r22, 0x01	; 1
    3a04:	79 07       	cpc	r23, r25
    3a06:	d0 f7       	brcc	.-12     	; 0x39fc <_nrk_time_to_ticks+0xa2>
t.secs=tmp*NANOS_PER_TICK;

if(t.nano_secs>t.secs+(NANOS_PER_TICK/2))ticks++;
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	23 eb       	ldi	r18, 0xB3	; 179
    3a0e:	36 ee       	ldi	r19, 0xE6	; 230
    3a10:	4e e0       	ldi	r20, 0x0E	; 14
    3a12:	50 e0       	ldi	r21, 0x00	; 0
    3a14:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsi3>
    3a18:	67 5a       	subi	r22, 0xA7	; 167
    3a1a:	7c 48       	sbci	r23, 0x8C	; 140
    3a1c:	88 4f       	sbci	r24, 0xF8	; 248
    3a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a20:	6c 15       	cp	r22, r12
    3a22:	7d 05       	cpc	r23, r13
    3a24:	8e 05       	cpc	r24, r14
    3a26:	9f 05       	cpc	r25, r15
    3a28:	10 f4       	brcc	.+4      	; 0x3a2e <_nrk_time_to_ticks+0xd4>
    3a2a:	0f 5f       	subi	r16, 0xFF	; 255
    3a2c:	1f 4f       	sbci	r17, 0xFF	; 255

//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3a2e:	c8 01       	movw	r24, r16
    3a30:	28 96       	adiw	r28, 0x08	; 8
    3a32:	0f b6       	in	r0, 0x3f	; 63
    3a34:	f8 94       	cli
    3a36:	de bf       	out	0x3e, r29	; 62
    3a38:	0f be       	out	0x3f, r0	; 63
    3a3a:	cd bf       	out	0x3d, r28	; 61
    3a3c:	cf 91       	pop	r28
    3a3e:	df 91       	pop	r29
    3a40:	1f 91       	pop	r17
    3a42:	0f 91       	pop	r16
    3a44:	ff 90       	pop	r15
    3a46:	ef 90       	pop	r14
    3a48:	df 90       	pop	r13
    3a4a:	cf 90       	pop	r12
    3a4c:	bf 90       	pop	r11
    3a4e:	af 90       	pop	r10
    3a50:	9f 90       	pop	r9
    3a52:	8f 90       	pop	r8
    3a54:	08 95       	ret

00003a56 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3a56:	ef 92       	push	r14
    3a58:	ff 92       	push	r15
    3a5a:	0f 93       	push	r16
    3a5c:	1f 93       	push	r17
    3a5e:	df 93       	push	r29
    3a60:	cf 93       	push	r28
    3a62:	cd b7       	in	r28, 0x3d	; 61
    3a64:	de b7       	in	r29, 0x3e	; 62
    3a66:	28 97       	sbiw	r28, 0x08	; 8
    3a68:	0f b6       	in	r0, 0x3f	; 63
    3a6a:	f8 94       	cli
    3a6c:	de bf       	out	0x3e, r29	; 62
    3a6e:	0f be       	out	0x3f, r0	; 63
    3a70:	cd bf       	out	0x3d, r28	; 61
    3a72:	7b 01       	movw	r14, r22
    3a74:	8c 01       	movw	r16, r24
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    3a76:	73 70       	andi	r23, 0x03	; 3
    3a78:	80 70       	andi	r24, 0x00	; 0
    3a7a:	90 70       	andi	r25, 0x00	; 0
    3a7c:	23 eb       	ldi	r18, 0xB3	; 179
    3a7e:	36 ee       	ldi	r19, 0xE6	; 230
    3a80:	4e e0       	ldi	r20, 0x0E	; 14
    3a82:	50 e0       	ldi	r21, 0x00	; 0
    3a84:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsi3>
    3a88:	6d 83       	std	Y+5, r22	; 0x05
    3a8a:	7e 83       	std	Y+6, r23	; 0x06
    3a8c:	8f 83       	std	Y+7, r24	; 0x07
    3a8e:	98 87       	std	Y+8, r25	; 0x08
    3a90:	a8 01       	movw	r20, r16
    3a92:	97 01       	movw	r18, r14
    3a94:	ea e0       	ldi	r30, 0x0A	; 10
    3a96:	56 95       	lsr	r21
    3a98:	47 95       	ror	r20
    3a9a:	37 95       	ror	r19
    3a9c:	27 95       	ror	r18
    3a9e:	ea 95       	dec	r30
    3aa0:	d1 f7       	brne	.-12     	; 0x3a96 <_nrk_ticks_to_time+0x40>
    3aa2:	29 83       	std	Y+1, r18	; 0x01
    3aa4:	3a 83       	std	Y+2, r19	; 0x02
    3aa6:	4b 83       	std	Y+3, r20	; 0x03
    3aa8:	5c 83       	std	Y+4, r21	; 0x04
    3aaa:	3a 81       	ldd	r19, Y+2	; 0x02
    3aac:	4b 81       	ldd	r20, Y+3	; 0x03
    3aae:	5c 81       	ldd	r21, Y+4	; 0x04
}
    3ab0:	28 96       	adiw	r28, 0x08	; 8
    3ab2:	0f b6       	in	r0, 0x3f	; 63
    3ab4:	f8 94       	cli
    3ab6:	de bf       	out	0x3e, r29	; 62
    3ab8:	0f be       	out	0x3f, r0	; 63
    3aba:	cd bf       	out	0x3d, r28	; 61
    3abc:	cf 91       	pop	r28
    3abe:	df 91       	pop	r29
    3ac0:	1f 91       	pop	r17
    3ac2:	0f 91       	pop	r16
    3ac4:	ff 90       	pop	r15
    3ac6:	ef 90       	pop	r14
    3ac8:	08 95       	ret

00003aca <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t t)
{
    3aca:	af 92       	push	r10
    3acc:	bf 92       	push	r11
    3ace:	cf 92       	push	r12
    3ad0:	df 92       	push	r13
    3ad2:	ef 92       	push	r14
    3ad4:	ff 92       	push	r15
    3ad6:	0f 93       	push	r16
    3ad8:	1f 93       	push	r17
    3ada:	df 93       	push	r29
    3adc:	cf 93       	push	r28
    3ade:	cd b7       	in	r28, 0x3d	; 61
    3ae0:	de b7       	in	r29, 0x3e	; 62
    3ae2:	28 97       	sbiw	r28, 0x08	; 8
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	de bf       	out	0x3e, r29	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	cd bf       	out	0x3d, r28	; 61
    3aee:	29 83       	std	Y+1, r18	; 0x01
    3af0:	3a 83       	std	Y+2, r19	; 0x02
    3af2:	4b 83       	std	Y+3, r20	; 0x03
    3af4:	5c 83       	std	Y+4, r21	; 0x04
    3af6:	6d 83       	std	Y+5, r22	; 0x05
    3af8:	7e 83       	std	Y+6, r23	; 0x06
    3afa:	8f 83       	std	Y+7, r24	; 0x07
    3afc:	98 87       	std	Y+8, r25	; 0x08
    3afe:	e9 80       	ldd	r14, Y+1	; 0x01
    3b00:	fa 80       	ldd	r15, Y+2	; 0x02
    3b02:	0b 81       	ldd	r16, Y+3	; 0x03
    3b04:	1c 81       	ldd	r17, Y+4	; 0x04
    3b06:	ad 80       	ldd	r10, Y+5	; 0x05
    3b08:	be 80       	ldd	r11, Y+6	; 0x06
    3b0a:	cf 80       	ldd	r12, Y+7	; 0x07
    3b0c:	d8 84       	ldd	r13, Y+8	; 0x08
uint32_t ticks;
uint32_t tmp;

if(t.secs>=1)
    3b0e:	e1 14       	cp	r14, r1
    3b10:	f1 04       	cpc	r15, r1
    3b12:	01 05       	cpc	r16, r1
    3b14:	11 05       	cpc	r17, r1
    3b16:	19 f1       	breq	.+70     	; 0x3b5e <_nrk_time_to_ticks_long+0x94>
{
t.nano_secs+=NANOS_PER_SEC;
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	9a ec       	ldi	r25, 0xCA	; 202
    3b1c:	aa e9       	ldi	r26, 0x9A	; 154
    3b1e:	bb e3       	ldi	r27, 0x3B	; 59
    3b20:	a8 0e       	add	r10, r24
    3b22:	b9 1e       	adc	r11, r25
    3b24:	ca 1e       	adc	r12, r26
    3b26:	db 1e       	adc	r13, r27
t.secs--;
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    3b28:	c6 01       	movw	r24, r12
    3b2a:	b5 01       	movw	r22, r10
    3b2c:	23 eb       	ldi	r18, 0xB3	; 179
    3b2e:	36 ee       	ldi	r19, 0xE6	; 230
    3b30:	4e e0       	ldi	r20, 0x0E	; 14
    3b32:	50 e0       	ldi	r21, 0x00	; 0
    3b34:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__udivmodsi4>
    3b38:	c9 01       	movw	r24, r18
    3b3a:	da 01       	movw	r26, r20
ticks+=t.secs*TICKS_PER_SEC;
    3b3c:	08 94       	sec
    3b3e:	e1 08       	sbc	r14, r1
    3b40:	f1 08       	sbc	r15, r1
    3b42:	01 09       	sbc	r16, r1
    3b44:	11 09       	sbc	r17, r1
    3b46:	fa e0       	ldi	r31, 0x0A	; 10
    3b48:	ee 0c       	add	r14, r14
    3b4a:	ff 1c       	adc	r15, r15
    3b4c:	00 1f       	adc	r16, r16
    3b4e:	11 1f       	adc	r17, r17
    3b50:	fa 95       	dec	r31
    3b52:	d1 f7       	brne	.-12     	; 0x3b48 <_nrk_time_to_ticks_long+0x7e>
    3b54:	e8 0e       	add	r14, r24
    3b56:	f9 1e       	adc	r15, r25
    3b58:	0a 1f       	adc	r16, r26
    3b5a:	1b 1f       	adc	r17, r27
    3b5c:	0c c0       	rjmp	.+24     	; 0x3b76 <_nrk_time_to_ticks_long+0xac>
}else
{
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    3b5e:	c6 01       	movw	r24, r12
    3b60:	b5 01       	movw	r22, r10
    3b62:	23 eb       	ldi	r18, 0xB3	; 179
    3b64:	36 ee       	ldi	r19, 0xE6	; 230
    3b66:	4e e0       	ldi	r20, 0x0E	; 14
    3b68:	50 e0       	ldi	r21, 0x00	; 0
    3b6a:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__udivmodsi4>
    3b6e:	e2 2e       	mov	r14, r18
    3b70:	f3 2e       	mov	r15, r19
    3b72:	04 2f       	mov	r16, r20
    3b74:	15 2f       	mov	r17, r21
    3b76:	c8 01       	movw	r24, r16
    3b78:	b7 01       	movw	r22, r14
}

tmp=ticks;
while(tmp>TICKS_PER_SEC)tmp-=TICKS_PER_SEC;
    3b7a:	04 c0       	rjmp	.+8      	; 0x3b84 <_nrk_time_to_ticks_long+0xba>
    3b7c:	60 50       	subi	r22, 0x00	; 0
    3b7e:	74 40       	sbci	r23, 0x04	; 4
    3b80:	80 40       	sbci	r24, 0x00	; 0
    3b82:	90 40       	sbci	r25, 0x00	; 0
    3b84:	61 30       	cpi	r22, 0x01	; 1
    3b86:	a4 e0       	ldi	r26, 0x04	; 4
    3b88:	7a 07       	cpc	r23, r26
    3b8a:	a0 e0       	ldi	r26, 0x00	; 0
    3b8c:	8a 07       	cpc	r24, r26
    3b8e:	a0 e0       	ldi	r26, 0x00	; 0
    3b90:	9a 07       	cpc	r25, r26
    3b92:	a0 f7       	brcc	.-24     	; 0x3b7c <_nrk_time_to_ticks_long+0xb2>
t.secs=tmp*NANOS_PER_TICK;

if(t.nano_secs>t.secs+(NANOS_PER_TICK/2))ticks++;
    3b94:	23 eb       	ldi	r18, 0xB3	; 179
    3b96:	36 ee       	ldi	r19, 0xE6	; 230
    3b98:	4e e0       	ldi	r20, 0x0E	; 14
    3b9a:	50 e0       	ldi	r21, 0x00	; 0
    3b9c:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsi3>
    3ba0:	67 5a       	subi	r22, 0xA7	; 167
    3ba2:	7c 48       	sbci	r23, 0x8C	; 140
    3ba4:	88 4f       	sbci	r24, 0xF8	; 248
    3ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba8:	6a 15       	cp	r22, r10
    3baa:	7b 05       	cpc	r23, r11
    3bac:	8c 05       	cpc	r24, r12
    3bae:	9d 05       	cpc	r25, r13
    3bb0:	28 f4       	brcc	.+10     	; 0x3bbc <_nrk_time_to_ticks_long+0xf2>
    3bb2:	08 94       	sec
    3bb4:	e1 1c       	adc	r14, r1
    3bb6:	f1 1c       	adc	r15, r1
    3bb8:	01 1d       	adc	r16, r1
    3bba:	11 1d       	adc	r17, r1

//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3bbc:	b7 01       	movw	r22, r14
    3bbe:	c8 01       	movw	r24, r16
    3bc0:	28 96       	adiw	r28, 0x08	; 8
    3bc2:	0f b6       	in	r0, 0x3f	; 63
    3bc4:	f8 94       	cli
    3bc6:	de bf       	out	0x3e, r29	; 62
    3bc8:	0f be       	out	0x3f, r0	; 63
    3bca:	cd bf       	out	0x3d, r28	; 61
    3bcc:	cf 91       	pop	r28
    3bce:	df 91       	pop	r29
    3bd0:	1f 91       	pop	r17
    3bd2:	0f 91       	pop	r16
    3bd4:	ff 90       	pop	r15
    3bd6:	ef 90       	pop	r14
    3bd8:	df 90       	pop	r13
    3bda:	cf 90       	pop	r12
    3bdc:	bf 90       	pop	r11
    3bde:	af 90       	pop	r10
    3be0:	08 95       	ret

00003be2 <nrk_time_get>:
*******************************************************************************/
#include <nrk.h>
#include <nrk_timer.h>

void nrk_time_get(nrk_time_t *t)
{
    3be2:	ef 92       	push	r14
    3be4:	ff 92       	push	r15
    3be6:	0f 93       	push	r16
    3be8:	1f 93       	push	r17
    3bea:	cf 93       	push	r28
    3bec:	df 93       	push	r29
    3bee:	ec 01       	movw	r28, r24
 t->secs=nrk_system_time.secs;
    3bf0:	80 91 bd 08 	lds	r24, 0x08BD
    3bf4:	90 91 be 08 	lds	r25, 0x08BE
    3bf8:	a0 91 bf 08 	lds	r26, 0x08BF
    3bfc:	b0 91 c0 08 	lds	r27, 0x08C0
    3c00:	88 83       	st	Y, r24
    3c02:	99 83       	std	Y+1, r25	; 0x01
    3c04:	aa 83       	std	Y+2, r26	; 0x02
    3c06:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs=nrk_system_time.nano_secs;
    3c08:	e0 90 c1 08 	lds	r14, 0x08C1
    3c0c:	f0 90 c2 08 	lds	r15, 0x08C2
    3c10:	00 91 c3 08 	lds	r16, 0x08C3
    3c14:	10 91 c4 08 	lds	r17, 0x08C4
    3c18:	ec 82       	std	Y+4, r14	; 0x04
    3c1a:	fd 82       	std	Y+5, r15	; 0x05
    3c1c:	0e 83       	std	Y+6, r16	; 0x06
    3c1e:	1f 83       	std	Y+7, r17	; 0x07

   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    3c20:	0e 94 85 21 	call	0x430a	; 0x430a <_nrk_os_timer_get>
    3c24:	68 2f       	mov	r22, r24
    3c26:	70 e0       	ldi	r23, 0x00	; 0
    3c28:	80 e0       	ldi	r24, 0x00	; 0
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	23 eb       	ldi	r18, 0xB3	; 179
    3c2e:	36 ee       	ldi	r19, 0xE6	; 230
    3c30:	4e e0       	ldi	r20, 0x0E	; 14
    3c32:	50 e0       	ldi	r21, 0x00	; 0
    3c34:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsi3>
    3c38:	6e 0d       	add	r22, r14
    3c3a:	7f 1d       	adc	r23, r15
    3c3c:	80 1f       	adc	r24, r16
    3c3e:	91 1f       	adc	r25, r17
    3c40:	6c 83       	std	Y+4, r22	; 0x04
    3c42:	7d 83       	std	Y+5, r23	; 0x05
    3c44:	8e 83       	std	Y+6, r24	; 0x06
    3c46:	9f 83       	std	Y+7, r25	; 0x07
    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3c48:	10 c0       	rjmp	.+32     	; 0x3c6a <nrk_time_get+0x88>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    3c4a:	28 81       	ld	r18, Y
    3c4c:	39 81       	ldd	r19, Y+1	; 0x01
    3c4e:	4a 81       	ldd	r20, Y+2	; 0x02
    3c50:	5b 81       	ldd	r21, Y+3	; 0x03
    3c52:	2f 5f       	subi	r18, 0xFF	; 255
    3c54:	3f 4f       	sbci	r19, 0xFF	; 255
    3c56:	4f 4f       	sbci	r20, 0xFF	; 255
    3c58:	5f 4f       	sbci	r21, 0xFF	; 255
    3c5a:	28 83       	st	Y, r18
    3c5c:	39 83       	std	Y+1, r19	; 0x01
    3c5e:	4a 83       	std	Y+2, r20	; 0x02
    3c60:	5b 83       	std	Y+3, r21	; 0x03
    3c62:	60 50       	subi	r22, 0x00	; 0
    3c64:	7a 4c       	sbci	r23, 0xCA	; 202
    3c66:	8a 49       	sbci	r24, 0x9A	; 154
    3c68:	9b 43       	sbci	r25, 0x3B	; 59
{
 t->secs=nrk_system_time.secs;
 t->nano_secs=nrk_system_time.nano_secs;

   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3c6a:	60 30       	cpi	r22, 0x00	; 0
    3c6c:	2a ec       	ldi	r18, 0xCA	; 202
    3c6e:	72 07       	cpc	r23, r18
    3c70:	2a e9       	ldi	r18, 0x9A	; 154
    3c72:	82 07       	cpc	r24, r18
    3c74:	2b e3       	ldi	r18, 0x3B	; 59
    3c76:	92 07       	cpc	r25, r18
    3c78:	40 f7       	brcc	.-48     	; 0x3c4a <nrk_time_get+0x68>
    3c7a:	6c 83       	std	Y+4, r22	; 0x04
    3c7c:	7d 83       	std	Y+5, r23	; 0x05
    3c7e:	8e 83       	std	Y+6, r24	; 0x06
    3c80:	9f 83       	std	Y+7, r25	; 0x07
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    }
}
    3c82:	df 91       	pop	r29
    3c84:	cf 91       	pop	r28
    3c86:	1f 91       	pop	r17
    3c88:	0f 91       	pop	r16
    3c8a:	ff 90       	pop	r15
    3c8c:	ef 90       	pop	r14
    3c8e:	08 95       	ret

00003c90 <nrk_idle_task>:
#include <nrk_platform_time.h>
#include <nrk_scheduler.h>
#include <stdio.h>

void nrk_idle_task()
{
    3c90:	1f 93       	push	r17

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=1;
    3c92:	11 e0       	ldi	r17, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    3c94:	0e 94 ef 14 	call	0x29de	; 0x29de <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    3c98:	0e 94 1a 21 	call	0x4234	; 0x4234 <_nrk_get_next_wakeup>
    3c9c:	8b 30       	cpi	r24, 0x0B	; 11
    3c9e:	10 f4       	brcc	.+4      	; 0x3ca4 <nrk_idle_task+0x14>
    {
	    _nrk_cpu_state=1;
    3ca0:	10 93 ba 08 	sts	0x08BA, r17
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=2;
	    nrk_sleep();
	#else
	    nrk_idle();
    3ca4:	0e 94 c5 23 	call	0x478a	; 0x478a <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3ca8:	80 91 fa 06 	lds	r24, 0x06FA
    3cac:	85 35       	cpi	r24, 0x55	; 85
    3cae:	19 f0       	breq	.+6      	; 0x3cb6 <nrk_idle_task+0x26>
    3cb0:	88 e0       	ldi	r24, 0x08	; 8
    3cb2:	0e 94 e6 13 	call	0x27cc	; 0x27cc <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3cb6:	80 91 fe 1f 	lds	r24, 0x1FFE
    3cba:	85 35       	cpi	r24, 0x55	; 85
    3cbc:	59 f3       	breq	.-42     	; 0x3c94 <nrk_idle_task+0x4>
    3cbe:	88 e0       	ldi	r24, 0x08	; 8
    3cc0:	0e 94 e6 13 	call	0x27cc	; 0x27cc <nrk_error_add>
    3cc4:	e7 cf       	rjmp	.-50     	; 0x3c94 <nrk_idle_task+0x4>

00003cc6 <_nrk_scheduler>:
// 750 measure to 100uS
// 800 * .125 = 100us
#define CONTEXT_SWAP_TIME_BOUND    750

void inline _nrk_scheduler()
{	   
    3cc6:	4f 92       	push	r4
    3cc8:	5f 92       	push	r5
    3cca:	6f 92       	push	r6
    3ccc:	7f 92       	push	r7
    3cce:	8f 92       	push	r8
    3cd0:	9f 92       	push	r9
    3cd2:	af 92       	push	r10
    3cd4:	bf 92       	push	r11
    3cd6:	cf 92       	push	r12
    3cd8:	df 92       	push	r13
    3cda:	ef 92       	push	r14
    3cdc:	ff 92       	push	r15
    3cde:	0f 93       	push	r16
    3ce0:	1f 93       	push	r17
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
	int8_t task_ID;
	uint16_t next_wake;
	uint16_t start_time_stamp;

nrk_int_disable();   // this should be removed...  Not needed
    3ce6:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
	_nrk_high_speed_timer_reset();
    3cea:	0e 94 9a 20 	call	0x4134	; 0x4134 <_nrk_high_speed_timer_reset>
	start_time_stamp=_nrk_high_speed_timer_get();
    3cee:	0e 94 e6 20 	call	0x41cc	; 0x41cc <_nrk_high_speed_timer_get>
    3cf2:	3c 01       	movw	r6, r24
#endif
	_nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    3cf4:	8a ef       	ldi	r24, 0xFA	; 250
    3cf6:	0e 94 1e 21 	call	0x423c	; 0x423c <_nrk_set_next_wakeup>
	if(_nrk_cpu_state && _nrk_os_timer_get()>nrk_max_sleep_wakeup_time)
		nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
	#endif
	//while(_nrk_time_trigger>0)
	//{
	nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    3cfa:	60 91 f8 06 	lds	r22, 0x06F8
    3cfe:	70 e0       	ldi	r23, 0x00	; 0
    3d00:	80 e0       	ldi	r24, 0x00	; 0
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	23 eb       	ldi	r18, 0xB3	; 179
    3d06:	36 ee       	ldi	r19, 0xE6	; 230
    3d08:	4e e0       	ldi	r20, 0x0E	; 14
    3d0a:	50 e0       	ldi	r21, 0x00	; 0
    3d0c:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__mulsi3>
    3d10:	7b 01       	movw	r14, r22
    3d12:	8c 01       	movw	r16, r24
    3d14:	80 91 c1 08 	lds	r24, 0x08C1
    3d18:	90 91 c2 08 	lds	r25, 0x08C2
    3d1c:	a0 91 c3 08 	lds	r26, 0x08C3
    3d20:	b0 91 c4 08 	lds	r27, 0x08C4
    3d24:	e8 0e       	add	r14, r24
    3d26:	f9 1e       	adc	r15, r25
    3d28:	0a 1f       	adc	r16, r26
    3d2a:	1b 1f       	adc	r17, r27
	nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3d2c:	c8 01       	movw	r24, r16
    3d2e:	b7 01       	movw	r22, r14
    3d30:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__udivmodsi4>
    3d34:	e6 1a       	sub	r14, r22
    3d36:	f7 0a       	sbc	r15, r23
    3d38:	08 0b       	sbc	r16, r24
    3d3a:	19 0b       	sbc	r17, r25
    3d3c:	80 91 bd 08 	lds	r24, 0x08BD
    3d40:	90 91 be 08 	lds	r25, 0x08BE
    3d44:	a0 91 bf 08 	lds	r26, 0x08BF
    3d48:	b0 91 c0 08 	lds	r27, 0x08C0
	  else
		_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
	}
	#endif
	
	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    3d4c:	16 c0       	rjmp	.+44     	; 0x3d7a <_nrk_scheduler+0xb4>
	{
		nrk_system_time.nano_secs-=NANOS_PER_SEC;
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	96 e3       	ldi	r25, 0x36	; 54
    3d52:	a5 e6       	ldi	r26, 0x65	; 101
    3d54:	b4 ec       	ldi	r27, 0xC4	; 196
    3d56:	e8 0e       	add	r14, r24
    3d58:	f9 1e       	adc	r15, r25
    3d5a:	0a 1f       	adc	r16, r26
    3d5c:	1b 1f       	adc	r17, r27
		nrk_system_time.secs++;
		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3d5e:	c8 01       	movw	r24, r16
    3d60:	b7 01       	movw	r22, r14
    3d62:	23 eb       	ldi	r18, 0xB3	; 179
    3d64:	36 ee       	ldi	r19, 0xE6	; 230
    3d66:	4e e0       	ldi	r20, 0x0E	; 14
    3d68:	50 e0       	ldi	r21, 0x00	; 0
    3d6a:	0e 94 dd 25 	call	0x4bba	; 0x4bba <__udivmodsi4>
    3d6e:	e6 1a       	sub	r14, r22
    3d70:	f7 0a       	sbc	r15, r23
    3d72:	08 0b       	sbc	r16, r24
    3d74:	19 0b       	sbc	r17, r25
    3d76:	d6 01       	movw	r26, r12
    3d78:	c5 01       	movw	r24, r10
    3d7a:	5c 01       	movw	r10, r24
    3d7c:	6d 01       	movw	r12, r26
    3d7e:	08 94       	sec
    3d80:	a1 1c       	adc	r10, r1
    3d82:	b1 1c       	adc	r11, r1
    3d84:	c1 1c       	adc	r12, r1
    3d86:	d1 1c       	adc	r13, r1
	  else
		_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
	}
	#endif
	
	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	e2 16       	cp	r14, r18
    3d8c:	2a ec       	ldi	r18, 0xCA	; 202
    3d8e:	f2 06       	cpc	r15, r18
    3d90:	2a e9       	ldi	r18, 0x9A	; 154
    3d92:	02 07       	cpc	r16, r18
    3d94:	2b e3       	ldi	r18, 0x3B	; 59
    3d96:	12 07       	cpc	r17, r18
    3d98:	d0 f6       	brcc	.-76     	; 0x3d4e <_nrk_scheduler+0x88>
    3d9a:	e0 92 c1 08 	sts	0x08C1, r14
    3d9e:	f0 92 c2 08 	sts	0x08C2, r15
    3da2:	00 93 c3 08 	sts	0x08C3, r16
    3da6:	10 93 c4 08 	sts	0x08C4, r17
    3daa:	80 93 bd 08 	sts	0x08BD, r24
    3dae:	90 93 be 08 	sts	0x08BE, r25
    3db2:	a0 93 bf 08 	sts	0x08BF, r26
    3db6:	b0 93 c0 08 	sts	0x08C0, r27
		nrk_system_time.secs++;
		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
	}
	//  _nrk_time_trigger--;
	//}  
	if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    3dba:	e0 91 c6 08 	lds	r30, 0x08C6
    3dbe:	f0 91 c7 08 	lds	r31, 0x08C7
    3dc2:	85 81       	ldd	r24, Z+5	; 0x05
    3dc4:	88 23       	and	r24, r24
    3dc6:	b9 f0       	breq	.+46     	; 0x3df6 <_nrk_scheduler+0x130>
    3dc8:	81 85       	ldd	r24, Z+9	; 0x09
    3dca:	84 30       	cpi	r24, 0x04	; 4
    3dcc:	a1 f0       	breq	.+40     	; 0x3df6 <_nrk_scheduler+0x130>
	{
	//	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		
		if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)  
    3dce:	87 81       	ldd	r24, Z+7	; 0x07
    3dd0:	82 30       	cpi	r24, 0x02	; 2
    3dd2:	29 f0       	breq	.+10     	; 0x3dde <_nrk_scheduler+0x118>
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0) 
    3dd4:	88 23       	and	r24, r24
    3dd6:	41 f0       	breq	.+16     	; 0x3de8 <_nrk_scheduler+0x122>
    3dd8:	86 81       	ldd	r24, Z+6	; 0x06
    3dda:	88 23       	and	r24, r24
    3ddc:	11 f4       	brne	.+4      	; 0x3de2 <_nrk_scheduler+0x11c>
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    3dde:	85 e0       	ldi	r24, 0x05	; 5
    3de0:	01 c0       	rjmp	.+2      	; 0x3de4 <_nrk_scheduler+0x11e>
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1) 
			nrk_cur_task_TCB->task_state = SUSPENDED;
    3de2:	83 e0       	ldi	r24, 0x03	; 3
    3de4:	81 87       	std	Z+9, r24	; 0x09
		
		if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)  
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0) 
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1) 
    3de6:	04 c0       	rjmp	.+8      	; 0x3df0 <_nrk_scheduler+0x12a>
			nrk_cur_task_TCB->task_state = SUSPENDED;
		else	
		{
			nrk_cur_task_TCB->task_state = SUSPENDED;
    3de8:	83 e0       	ldi	r24, 0x03	; 3
    3dea:	81 87       	std	Z+9, r24	; 0x09
			nrk_cur_task_TCB->event_suspend=0;
    3dec:	17 82       	std	Z+7, r1	; 0x07
			nrk_cur_task_TCB->nw_flag=0;
    3dee:	16 82       	std	Z+6, r1	; 0x06
		}
		nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    3df0:	80 85       	ldd	r24, Z+8	; 0x08
    3df2:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <nrk_rem_from_readyQ>

	// Update cpu used value for ended task
	// If the task has used its reserve, suspend task
	// Don't disable IdleTask which is 0
	// Don't decrease cpu_remaining if reserve is 0 and hence disabled
	if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    3df6:	e0 91 c6 08 	lds	r30, 0x08C6
    3dfa:	f0 91 c7 08 	lds	r31, 0x08C7
    3dfe:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e00:	96 8d       	ldd	r25, Z+30	; 0x1e
    3e02:	00 97       	sbiw	r24, 0x00	; 0
    3e04:	91 f1       	breq	.+100    	; 0x3e6a <_nrk_scheduler+0x1a4>
    3e06:	60 85       	ldd	r22, Z+8	; 0x08
    3e08:	66 23       	and	r22, r22
    3e0a:	79 f1       	breq	.+94     	; 0x3e6a <_nrk_scheduler+0x1a4>
    3e0c:	81 85       	ldd	r24, Z+9	; 0x09
    3e0e:	84 30       	cpi	r24, 0x04	; 4
    3e10:	61 f1       	breq	.+88     	; 0x3e6a <_nrk_scheduler+0x1a4>
	{
		if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    3e12:	21 8d       	ldd	r18, Z+25	; 0x19
    3e14:	32 8d       	ldd	r19, Z+26	; 0x1a
    3e16:	80 91 f8 06 	lds	r24, 0x06F8
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	28 17       	cp	r18, r24
    3e1e:	39 07       	cpc	r19, r25
    3e20:	50 f4       	brcc	.+20     	; 0x3e36 <_nrk_scheduler+0x170>
		{
			#ifdef NRK_STATS_TRACKER
			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
			#endif
			nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    3e22:	82 e0       	ldi	r24, 0x02	; 2
    3e24:	0e 94 df 13 	call	0x27be	; 0x27be <nrk_kernel_error_add>
			nrk_cur_task_TCB->cpu_remaining=0;
    3e28:	e0 91 c6 08 	lds	r30, 0x08C6
    3e2c:	f0 91 c7 08 	lds	r31, 0x08C7
    3e30:	12 8e       	std	Z+26, r1	; 0x1a
    3e32:	11 8e       	std	Z+25, r1	; 0x19
    3e34:	04 c0       	rjmp	.+8      	; 0x3e3e <_nrk_scheduler+0x178>
		}else
			nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    3e36:	28 1b       	sub	r18, r24
    3e38:	39 0b       	sbc	r19, r25
    3e3a:	32 8f       	std	Z+26, r19	; 0x1a
    3e3c:	21 8f       	std	Z+25, r18	; 0x19

		task_ID= nrk_cur_task_TCB->task_ID;
    3e3e:	e0 91 c6 08 	lds	r30, 0x08C6
    3e42:	f0 91 c7 08 	lds	r31, 0x08C7
    3e46:	10 85       	ldd	r17, Z+8	; 0x08

		if (nrk_cur_task_TCB->cpu_remaining ==0 ) {
    3e48:	81 8d       	ldd	r24, Z+25	; 0x19
    3e4a:	92 8d       	ldd	r25, Z+26	; 0x1a
    3e4c:	00 97       	sbiw	r24, 0x00	; 0
    3e4e:	69 f4       	brne	.+26     	; 0x3e6a <_nrk_scheduler+0x1a4>
			#ifdef NRK_STATS_TRACKER
			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
			#endif
			nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    3e50:	83 e0       	ldi	r24, 0x03	; 3
    3e52:	61 2f       	mov	r22, r17
    3e54:	0e 94 df 13 	call	0x27be	; 0x27be <nrk_kernel_error_add>
			nrk_cur_task_TCB->task_state = SUSPENDED;
    3e58:	e0 91 c6 08 	lds	r30, 0x08C6
    3e5c:	f0 91 c7 08 	lds	r31, 0x08C7
    3e60:	83 e0       	ldi	r24, 0x03	; 3
    3e62:	81 87       	std	Z+9, r24	; 0x09
			nrk_rem_from_readyQ(task_ID);
    3e64:	81 2f       	mov	r24, r17
    3e66:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <nrk_rem_from_readyQ>
    3e6a:	c2 e5       	ldi	r28, 0x52	; 82
    3e6c:	d8 e0       	ldi	r29, 0x08	; 8
    3e6e:	f0 e6       	ldi	r31, 0x60	; 96
    3e70:	ef 2e       	mov	r14, r31
    3e72:	fa ee       	ldi	r31, 0xEA	; 234
    3e74:	ff 2e       	mov	r15, r31
    3e76:	10 e0       	ldi	r17, 0x00	; 0
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					nrk_task_TCB[task_ID].num_periods=1;
    3e78:	e1 e0       	ldi	r30, 0x01	; 1
    3e7a:	8e 2e       	mov	r8, r30
    3e7c:	91 2c       	mov	r9, r1
				nrk_task_TCB[task_ID].nw_flag=0;
				nrk_task_TCB[task_ID].suspend_flag=0;
				if(nrk_task_TCB[task_ID].num_periods==1) 
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
					nrk_task_TCB[task_ID].task_state = READY;
    3e7e:	02 e0       	ldi	r16, 0x02	; 2
		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
			// If a task needs to become READY, make it ready
			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
				// printf( "Adding back %d\n",task_ID );
				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3e80:	71 e0       	ldi	r23, 0x01	; 1
    3e82:	a7 2e       	mov	r10, r23
    3e84:	b1 2c       	mov	r11, r1
    3e86:	c1 2c       	mov	r12, r1
    3e88:	d1 2c       	mov	r13, r1
	// Check I/O nrk_queues to add tasks with remaining cpu back...

	// Add eligable tasks back to the ready Queue
	// At the same time find the next earliest wakeup
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8c:	8f 3f       	cpi	r24, 0xFF	; 255
    3e8e:	09 f4       	brne	.+2      	; 0x3e92 <_nrk_scheduler+0x1cc>
    3e90:	7d c0       	rjmp	.+250    	; 0x3f8c <_nrk_scheduler+0x2c6>
		nrk_task_TCB[task_ID].suspend_flag=0;
    3e92:	18 82       	st	Y, r1
		if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    3e94:	88 23       	and	r24, r24
    3e96:	69 f1       	breq	.+90     	; 0x3ef2 <_nrk_scheduler+0x22c>
    3e98:	8c 81       	ldd	r24, Y+4	; 0x04
    3e9a:	84 30       	cpi	r24, 0x04	; 4
    3e9c:	51 f1       	breq	.+84     	; 0x3ef2 <_nrk_scheduler+0x22c>
		{
			if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    3e9e:	28 89       	ldd	r18, Y+16	; 0x10
    3ea0:	39 89       	ldd	r19, Y+17	; 0x11
    3ea2:	80 91 f8 06 	lds	r24, 0x06F8
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	28 17       	cp	r18, r24
    3eaa:	39 07       	cpc	r19, r25
    3eac:	28 f0       	brcs	.+10     	; 0x3eb8 <_nrk_scheduler+0x1f2>
				nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    3eae:	28 1b       	sub	r18, r24
    3eb0:	39 0b       	sbc	r19, r25
    3eb2:	39 8b       	std	Y+17, r19	; 0x11
    3eb4:	28 8b       	std	Y+16, r18	; 0x10
    3eb6:	02 c0       	rjmp	.+4      	; 0x3ebc <_nrk_scheduler+0x1f6>
			else 
				nrk_task_TCB[task_ID].next_wakeup=0;
    3eb8:	19 8a       	std	Y+17, r1	; 0x11
    3eba:	18 8a       	std	Y+16, r1	; 0x10
		
			// Do next period book keeping.
			// next_period needs to be set such that the period is kept consistent even if other
			// wait until functions are called.
			if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    3ebc:	6a 89       	ldd	r22, Y+18	; 0x12
    3ebe:	7b 89       	ldd	r23, Y+19	; 0x13
    3ec0:	68 17       	cp	r22, r24
    3ec2:	79 07       	cpc	r23, r25
    3ec4:	28 f4       	brcc	.+10     	; 0x3ed0 <_nrk_scheduler+0x20a>
				nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
			else {
				if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    3ec6:	6e 89       	ldd	r22, Y+22	; 0x16
    3ec8:	7f 89       	ldd	r23, Y+23	; 0x17
    3eca:	86 17       	cp	r24, r22
    3ecc:	97 07       	cpc	r25, r23
    3ece:	28 f4       	brcc	.+10     	; 0x3eda <_nrk_scheduler+0x214>
					nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    3ed0:	68 1b       	sub	r22, r24
    3ed2:	79 0b       	sbc	r23, r25
    3ed4:	7b 8b       	std	Y+19, r23	; 0x13
    3ed6:	6a 8b       	std	Y+18, r22	; 0x12
    3ed8:	04 c0       	rjmp	.+8      	; 0x3ee2 <_nrk_scheduler+0x21c>
				else
					nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    3eda:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <__udivmodhi4>
    3ede:	9b 8b       	std	Y+19, r25	; 0x13
    3ee0:	8a 8b       	std	Y+18, r24	; 0x12
			}
			if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    3ee2:	8a 89       	ldd	r24, Y+18	; 0x12
    3ee4:	9b 89       	ldd	r25, Y+19	; 0x13
    3ee6:	00 97       	sbiw	r24, 0x00	; 0
    3ee8:	21 f4       	brne	.+8      	; 0x3ef2 <_nrk_scheduler+0x22c>
    3eea:	8e 89       	ldd	r24, Y+22	; 0x16
    3eec:	9f 89       	ldd	r25, Y+23	; 0x17
    3eee:	9b 8b       	std	Y+19, r25	; 0x13
    3ef0:	8a 8b       	std	Y+18, r24	; 0x12
					
		}


		// Look for Next Task that Might Wakeup to interrupt current task
		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
    3ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ef4:	83 30       	cpi	r24, 0x03	; 3
    3ef6:	09 f0       	breq	.+2      	; 0x3efa <_nrk_scheduler+0x234>
    3ef8:	49 c0       	rjmp	.+146    	; 0x3f8c <_nrk_scheduler+0x2c6>
			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
			// If a task needs to become READY, make it ready
			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
    3efa:	88 89       	ldd	r24, Y+16	; 0x10
    3efc:	99 89       	ldd	r25, Y+17	; 0x11
    3efe:	00 97       	sbiw	r24, 0x00	; 0
    3f00:	e9 f5       	brne	.+122    	; 0x3f7c <_nrk_scheduler+0x2b6>
				// printf( "Adding back %d\n",task_ID );
				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3f02:	8a 81       	ldd	r24, Y+2	; 0x02
    3f04:	88 23       	and	r24, r24
    3f06:	91 f0       	breq	.+36     	; 0x3f2c <_nrk_scheduler+0x266>
    3f08:	89 81       	ldd	r24, Y+1	; 0x01
    3f0a:	88 23       	and	r24, r24
    3f0c:	79 f0       	breq	.+30     	; 0x3f2c <_nrk_scheduler+0x266>
    3f0e:	d6 01       	movw	r26, r12
    3f10:	c5 01       	movw	r24, r10
    3f12:	00 90 b6 08 	lds	r0, 0x08B6
    3f16:	04 c0       	rjmp	.+8      	; 0x3f20 <_nrk_scheduler+0x25a>
    3f18:	88 0f       	add	r24, r24
    3f1a:	99 1f       	adc	r25, r25
    3f1c:	aa 1f       	adc	r26, r26
    3f1e:	bb 1f       	adc	r27, r27
    3f20:	0a 94       	dec	r0
    3f22:	d2 f7       	brpl	.-12     	; 0x3f18 <_nrk_scheduler+0x252>
    3f24:	8c 87       	std	Y+12, r24	; 0x0c
    3f26:	9d 87       	std	Y+13, r25	; 0x0d
    3f28:	ae 87       	std	Y+14, r26	; 0x0e
    3f2a:	bf 87       	std	Y+15, r27	; 0x0f
				//if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
				nrk_task_TCB[task_ID].event_suspend=0;
    3f2c:	1a 82       	std	Y+2, r1	; 0x02
				nrk_task_TCB[task_ID].nw_flag=0;
    3f2e:	19 82       	std	Y+1, r1	; 0x01
				nrk_task_TCB[task_ID].suspend_flag=0;
    3f30:	18 82       	st	Y, r1
				if(nrk_task_TCB[task_ID].num_periods==1) 
    3f32:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f34:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3f36:	28 8d       	ldd	r18, Y+24	; 0x18
    3f38:	39 8d       	ldd	r19, Y+25	; 0x19
    3f3a:	81 30       	cpi	r24, 0x01	; 1
    3f3c:	91 05       	cpc	r25, r1
    3f3e:	59 f4       	brne	.+22     	; 0x3f56 <_nrk_scheduler+0x290>
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    3f40:	3d 8b       	std	Y+21, r19	; 0x15
    3f42:	2c 8b       	std	Y+20, r18	; 0x14
					nrk_task_TCB[task_ID].task_state = READY;
    3f44:	0c 83       	std	Y+4, r16	; 0x04
					nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    3f46:	8a 89       	ldd	r24, Y+18	; 0x12
    3f48:	9b 89       	ldd	r25, Y+19	; 0x13
    3f4a:	99 8b       	std	Y+17, r25	; 0x11
    3f4c:	88 8b       	std	Y+16, r24	; 0x10
					nrk_add_to_readyQ(task_ID);				
    3f4e:	81 2f       	mov	r24, r17
    3f50:	0e 94 24 18 	call	0x3048	; 0x3048 <nrk_add_to_readyQ>
    3f54:	13 c0       	rjmp	.+38     	; 0x3f7c <_nrk_scheduler+0x2b6>
				} else 
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    3f56:	3d 8b       	std	Y+21, r19	; 0x15
    3f58:	2c 8b       	std	Y+20, r18	; 0x14
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3f5a:	01 97       	sbiw	r24, 0x01	; 1
    3f5c:	2e 89       	ldd	r18, Y+22	; 0x16
    3f5e:	3f 89       	ldd	r19, Y+23	; 0x17
    3f60:	ac 01       	movw	r20, r24
    3f62:	42 9f       	mul	r20, r18
    3f64:	c0 01       	movw	r24, r0
    3f66:	43 9f       	mul	r20, r19
    3f68:	90 0d       	add	r25, r0
    3f6a:	52 9f       	mul	r21, r18
    3f6c:	90 0d       	add	r25, r0
    3f6e:	11 24       	eor	r1, r1
    3f70:	99 8b       	std	Y+17, r25	; 0x11
    3f72:	88 8b       	std	Y+16, r24	; 0x10
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3f74:	9b 8b       	std	Y+19, r25	; 0x13
    3f76:	8a 8b       	std	Y+18, r24	; 0x12
					nrk_task_TCB[task_ID].num_periods=1;
    3f78:	9b 8e       	std	Y+27, r9	; 0x1b
    3f7a:	8a 8e       	std	Y+26, r8	; 0x1a
		//			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
		//			nrk_task_TCB[task_ID].num_periods=1; 
				}
			}

			if(nrk_task_TCB[task_ID].next_wakeup!=0 && 
    3f7c:	48 88       	ldd	r4, Y+16	; 0x10
    3f7e:	59 88       	ldd	r5, Y+17	; 0x11
    3f80:	41 14       	cp	r4, r1
    3f82:	51 04       	cpc	r5, r1
    3f84:	19 f0       	breq	.+6      	; 0x3f8c <_nrk_scheduler+0x2c6>
    3f86:	4e 14       	cp	r4, r14
    3f88:	5f 04       	cpc	r5, r15
    3f8a:	08 f0       	brcs	.+2      	; 0x3f8e <_nrk_scheduler+0x2c8>
    3f8c:	27 01       	movw	r4, r14

	// Check I/O nrk_queues to add tasks with remaining cpu back...

	// Add eligable tasks back to the ready Queue
	// At the same time find the next earliest wakeup
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3f8e:	1f 5f       	subi	r17, 0xFF	; 255
    3f90:	a1 96       	adiw	r28, 0x21	; 33
    3f92:	13 30       	cpi	r17, 0x03	; 3
    3f94:	11 f0       	breq	.+4      	; 0x3f9a <_nrk_scheduler+0x2d4>
    3f96:	72 01       	movw	r14, r4
    3f98:	78 cf       	rjmp	.-272    	; 0x3e8a <_nrk_scheduler+0x1c4>


	#ifdef NRK_STATS_TRACKER
		_nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
	#endif
	task_ID = nrk_get_high_ready_task_ID();  
    3f9a:	0e 94 13 18 	call	0x3026	; 0x3026 <nrk_get_high_ready_task_ID>
    3f9e:	18 2f       	mov	r17, r24
	nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3fa0:	99 27       	eor	r25, r25
    3fa2:	87 fd       	sbrc	r24, 7
    3fa4:	90 95       	com	r25
    3fa6:	fc 01       	movw	r30, r24
    3fa8:	65 e0       	ldi	r22, 0x05	; 5
    3faa:	ee 0f       	add	r30, r30
    3fac:	ff 1f       	adc	r31, r31
    3fae:	6a 95       	dec	r22
    3fb0:	e1 f7       	brne	.-8      	; 0x3faa <_nrk_scheduler+0x2e4>
    3fb2:	e8 0f       	add	r30, r24
    3fb4:	f9 1f       	adc	r31, r25
    3fb6:	e3 5b       	subi	r30, 0xB3	; 179
    3fb8:	f7 4f       	sbci	r31, 0xF7	; 247
    3fba:	42 85       	ldd	r20, Z+10	; 0x0a
    3fbc:	40 93 c8 08 	sts	0x08C8, r20
	nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    3fc0:	81 e2       	ldi	r24, 0x21	; 33
    3fc2:	18 02       	muls	r17, r24
    3fc4:	c0 01       	movw	r24, r0
    3fc6:	11 24       	eor	r1, r1
    3fc8:	83 5b       	subi	r24, 0xB3	; 179
    3fca:	97 4f       	sbci	r25, 0xF7	; 247
    3fcc:	90 93 b8 08 	sts	0x08B8, r25
    3fd0:	80 93 b7 08 	sts	0x08B7, r24
	// task_ID holds the highest priority READY task ID
	// So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time 

	// Now we pick the next wakeup (either the end of the current task, or the possible resume
	// of a suspended task) 
	if(task_ID!=NRK_IDLE_TASK_ID) 
    3fd4:	11 23       	and	r17, r17
    3fd6:	a1 f0       	breq	.+40     	; 0x4000 <_nrk_scheduler+0x33a>
	{
		// You are a non-Idle Task
		if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    3fd8:	25 8d       	ldd	r18, Z+29	; 0x1d
    3fda:	36 8d       	ldd	r19, Z+30	; 0x1e
    3fdc:	21 15       	cp	r18, r1
    3fde:	31 05       	cpc	r19, r1
    3fe0:	51 f0       	breq	.+20     	; 0x3ff6 <_nrk_scheduler+0x330>
    3fe2:	21 8d       	ldd	r18, Z+25	; 0x19
    3fe4:	32 8d       	ldd	r19, Z+26	; 0x1a
    3fe6:	2a 3f       	cpi	r18, 0xFA	; 250
    3fe8:	31 05       	cpc	r19, r1
    3fea:	28 f4       	brcc	.+10     	; 0x3ff6 <_nrk_scheduler+0x330>
    3fec:	24 15       	cp	r18, r4
    3fee:	35 05       	cpc	r19, r5
    3ff0:	28 f5       	brcc	.+74     	; 0x403c <_nrk_scheduler+0x376>
    3ff2:	29 01       	movw	r4, r18
    3ff4:	23 c0       	rjmp	.+70     	; 0x403c <_nrk_scheduler+0x376>
    3ff6:	5b ef       	ldi	r21, 0xFB	; 251
    3ff8:	45 16       	cp	r4, r21
    3ffa:	51 04       	cpc	r5, r1
    3ffc:	f8 f0       	brcs	.+62     	; 0x403c <_nrk_scheduler+0x376>
    3ffe:	17 c0       	rjmp	.+46     	; 0x402e <_nrk_scheduler+0x368>
		// Make sure you wake up from the idle task a little earlier
		// if you would go into deep sleep...
		// After waking from deep sleep, the next context swap must be at least
  		// NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time. 
			
		if(next_wake>NRK_SLEEP_WAKEUP_TIME) 
    4000:	ab e0       	ldi	r26, 0x0B	; 11
    4002:	4a 16       	cp	r4, r26
    4004:	51 04       	cpc	r5, r1
    4006:	d0 f0       	brcs	.+52     	; 0x403c <_nrk_scheduler+0x376>
		{
			if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    4008:	92 01       	movw	r18, r4
    400a:	2a 50       	subi	r18, 0x0A	; 10
    400c:	30 40       	sbci	r19, 0x00	; 0
    400e:	2a 3f       	cpi	r18, 0xFA	; 250
    4010:	31 05       	cpc	r19, r1
    4012:	40 f4       	brcc	.+16     	; 0x4024 <_nrk_scheduler+0x35e>
    4014:	29 01       	movw	r4, r18
    4016:	29 30       	cpi	r18, 0x09	; 9
    4018:	31 05       	cpc	r19, r1
    401a:	80 f4       	brcc	.+32     	; 0x403c <_nrk_scheduler+0x376>
    401c:	59 e0       	ldi	r21, 0x09	; 9
    401e:	45 2e       	mov	r4, r21
    4020:	51 2c       	mov	r5, r1
    4022:	0c c0       	rjmp	.+24     	; 0x403c <_nrk_scheduler+0x376>
					next_wake=NRK_SLEEP_WAKEUP_TIME-1;
				}
				else {
					next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
				}
			} else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME){ 
    4024:	24 e0       	ldi	r18, 0x04	; 4
    4026:	42 16       	cp	r4, r18
    4028:	21 e0       	ldi	r18, 0x01	; 1
    402a:	52 06       	cpc	r5, r18
    402c:	21 f0       	breq	.+8      	; 0x4036 <_nrk_scheduler+0x370>
    402e:	3a ef       	ldi	r19, 0xFA	; 250
    4030:	43 2e       	mov	r4, r19
    4032:	51 2c       	mov	r5, r1
    4034:	03 c0       	rjmp	.+6      	; 0x403c <_nrk_scheduler+0x376>
    4036:	20 ef       	ldi	r18, 0xF0	; 240
    4038:	42 2e       	mov	r4, r18
    403a:	51 2c       	mov	r5, r1
		printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
		}
	}*/

	//printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
	nrk_cur_task_prio = nrk_high_ready_prio;
    403c:	40 93 b9 08 	sts	0x08B9, r20
	nrk_cur_task_TCB  = nrk_high_ready_TCB;
    4040:	90 93 c7 08 	sts	0x08C7, r25
    4044:	80 93 c6 08 	sts	0x08C6, r24
	if(nrk_high_ready_TCB==NULL)
		{
		nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
		}
	#endif
	_nrk_prev_timer_val=next_wake;
    4048:	40 92 f8 06 	sts	0x06F8, r4


	if(_nrk_os_timer_get()>=next_wake)  // just bigger then, or equal? 
    404c:	0e 94 85 21 	call	0x430a	; 0x430a <_nrk_os_timer_get>
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	84 15       	cp	r24, r4
    4054:	95 05       	cpc	r25, r5
    4056:	50 f0       	brcs	.+20     	; 0x406c <_nrk_scheduler+0x3a6>
			nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
		#endif

		// This is bad news, but keeps things running
		// +2 just in case we are on the edge of the last tick
		next_wake=_nrk_os_timer_get()+2;
    4058:	0e 94 85 21 	call	0x430a	; 0x430a <_nrk_os_timer_get>
    405c:	48 2e       	mov	r4, r24
    405e:	55 24       	eor	r5, r5
    4060:	42 e0       	ldi	r20, 0x02	; 2
    4062:	50 e0       	ldi	r21, 0x00	; 0
    4064:	44 0e       	add	r4, r20
    4066:	55 1e       	adc	r5, r21
		_nrk_prev_timer_val=next_wake;
    4068:	40 92 f8 06 	sts	0x06F8, r4
	} 

	if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=0;
    406c:	11 23       	and	r17, r17
    406e:	11 f0       	breq	.+4      	; 0x4074 <_nrk_scheduler+0x3ae>
    4070:	10 92 ba 08 	sts	0x08BA, r1
	//printf("next wakeup is %d\n\r", next_wake);
	_nrk_set_next_wakeup(next_wake);
    4074:	84 2d       	mov	r24, r4
    4076:	0e 94 1e 21 	call	0x423c	; 0x423c <_nrk_set_next_wakeup>
	
#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
	// Bound Context Swap to 100us 
	nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    407a:	c3 01       	movw	r24, r6
    407c:	6e ee       	ldi	r22, 0xEE	; 238
    407e:	72 e0       	ldi	r23, 0x02	; 2
    4080:	0e 94 a2 20 	call	0x4144	; 0x4144 <nrk_high_speed_timer_wait>
#endif	
	nrk_stack_pointer_restore();
    4084:	0e 94 0e 24 	call	0x481c	; 0x481c <nrk_stack_pointer_restore>
	//nrk_int_enable();
	nrk_start_high_ready_task();
    4088:	0e 94 39 24 	call	0x4872	; 0x4872 <nrk_start_high_ready_task>

}
    408c:	df 91       	pop	r29
    408e:	cf 91       	pop	r28
    4090:	1f 91       	pop	r17
    4092:	0f 91       	pop	r16
    4094:	ff 90       	pop	r15
    4096:	ef 90       	pop	r14
    4098:	df 90       	pop	r13
    409a:	cf 90       	pop	r12
    409c:	bf 90       	pop	r11
    409e:	af 90       	pop	r10
    40a0:	9f 90       	pop	r9
    40a2:	8f 90       	pop	r8
    40a4:	7f 90       	pop	r7
    40a6:	6f 90       	pop	r6
    40a8:	5f 90       	pop	r5
    40aa:	4f 90       	pop	r4
    40ac:	08 95       	ret

000040ae <nrk_spin_wait_us>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    40b6:	01 97       	sbiw	r24, 0x01	; 1
    40b8:	d1 f7       	brne	.-12     	; 0x40ae <nrk_spin_wait_us>

}
    40ba:	08 95       	ret

000040bc <_nrk_setup_timer>:

void _nrk_setup_timer() {
  _nrk_prev_timer_val=254;
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    40bc:	80 e2       	ldi	r24, 0x20	; 32
    40be:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    40c2:	8e ef       	ldi	r24, 0xFE	; 254
    40c4:	80 93 b3 00 	sts	0x00B3, r24
  TIFR2 =   BM(OCF2A) | BM(TOV2);       // Clear interrupt flag
    40c8:	83 e0       	ldi	r24, 0x03	; 3
    40ca:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    40cc:	92 e0       	ldi	r25, 0x02	; 2
    40ce:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    40d2:	e1 eb       	ldi	r30, 0xB1	; 177
    40d4:	f0 e0       	ldi	r31, 0x00	; 0
    40d6:	80 83       	st	Z, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    40d8:	93 b5       	in	r25, 0x23	; 35
    40da:	92 60       	ori	r25, 0x02	; 2
    40dc:	93 bd       	out	0x23, r25	; 35
  // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);       
    40de:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    40e0:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    40e2:	93 b5       	in	r25, 0x23	; 35
    40e4:	92 60       	ori	r25, 0x02	; 2
    40e6:	93 bd       	out	0x23, r25	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    40e8:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    40ec:	91 e0       	ldi	r25, 0x01	; 1
    40ee:	90 93 81 00 	sts	0x0081, r25
  TCNT1=0;  // 16 bit
    40f2:	10 92 85 00 	sts	0x0085, r1
    40f6:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    40fa:	93 b5       	in	r25, 0x23	; 35
    40fc:	92 60       	ori	r25, 0x02	; 2
    40fe:	93 bd       	out	0x23, r25	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4100:	93 b5       	in	r25, 0x23	; 35
    4102:	91 60       	ori	r25, 0x01	; 1
    4104:	93 bd       	out	0x23, r25	; 35
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    4106:	93 b5       	in	r25, 0x23	; 35
    4108:	92 60       	ori	r25, 0x02	; 2
    410a:	93 bd       	out	0x23, r25	; 35
    TCNT2 = 0;                  // reset counter
    410c:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    _nrk_prev_timer_val=0;
    4110:	10 92 f8 06 	sts	0x06F8, r1
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A) | BM(TOIE2) ;//| BM(TICIE1);    // Enable interrupt
    4114:	a0 e7       	ldi	r26, 0x70	; 112
    4116:	b0 e0       	ldi	r27, 0x00	; 0
    4118:	9c 91       	ld	r25, X
    411a:	93 60       	ori	r25, 0x03	; 3
    411c:	9c 93       	st	X, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    411e:	80 83       	st	Z, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_os_timer_start();
  _nrk_time_trigger=0;
    4120:	10 92 cd 02 	sts	0x02CD, r1
}
    4124:	08 95       	ret

00004126 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    4126:	10 92 81 00 	sts	0x0081, r1
}
    412a:	08 95       	ret

0000412c <_nrk_high_speed_timer_start>:

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	80 93 81 00 	sts	0x0081, r24
}
    4132:	08 95       	ret

00004134 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4134:	83 b5       	in	r24, 0x23	; 35
    4136:	81 60       	ori	r24, 0x01	; 1
    4138:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    413a:	10 92 85 00 	sts	0x0085, r1
    413e:	10 92 84 00 	sts	0x0084, r1
//  nrk_int_enable();
}
    4142:	08 95       	ret

00004144 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    4144:	ef 92       	push	r14
    4146:	ff 92       	push	r15
    4148:	0f 93       	push	r16
    414a:	1f 93       	push	r17
    414c:	df 93       	push	r29
    414e:	cf 93       	push	r28
    4150:	00 d0       	rcall	.+0      	; 0x4152 <nrk_high_speed_timer_wait+0xe>
    4152:	cd b7       	in	r28, 0x3d	; 61
    4154:	de b7       	in	r29, 0x3e	; 62
uint32_t tmp;
if(start>65400) start=0;
    4156:	2f ef       	ldi	r18, 0xFF	; 255
    4158:	89 37       	cpi	r24, 0x79	; 121
    415a:	92 07       	cpc	r25, r18
    415c:	10 f0       	brcs	.+4      	; 0x4162 <nrk_high_speed_timer_wait+0x1e>
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	90 e0       	ldi	r25, 0x00	; 0
tmp=(uint32_t)start+(uint32_t)ticks;
    4162:	9c 01       	movw	r18, r24
    4164:	40 e0       	ldi	r20, 0x00	; 0
    4166:	50 e0       	ldi	r21, 0x00	; 0
    4168:	7b 01       	movw	r14, r22
    416a:	00 e0       	ldi	r16, 0x00	; 0
    416c:	10 e0       	ldi	r17, 0x00	; 0
    416e:	2e 0d       	add	r18, r14
    4170:	3f 1d       	adc	r19, r15
    4172:	40 1f       	adc	r20, r16
    4174:	51 1f       	adc	r21, r17
//printf("tmp is %d.\n\r", tmp);
if(tmp>65536) 
    4176:	21 30       	cpi	r18, 0x01	; 1
    4178:	60 e0       	ldi	r22, 0x00	; 0
    417a:	36 07       	cpc	r19, r22
    417c:	61 e0       	ldi	r22, 0x01	; 1
    417e:	46 07       	cpc	r20, r22
    4180:	60 e0       	ldi	r22, 0x00	; 0
    4182:	56 07       	cpc	r21, r22
    4184:	78 f0       	brcs	.+30     	; 0x41a4 <nrk_high_speed_timer_wait+0x60>

inline uint16_t _nrk_high_speed_timer_get()
{
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    4186:	60 91 84 00 	lds	r22, 0x0084
    418a:	70 91 85 00 	lds	r23, 0x0085
    418e:	7a 83       	std	Y+2, r23	; 0x02
    4190:	69 83       	std	Y+1, r22	; 0x01
  //nrk_int_enable();
  return tmp;
    4192:	69 81       	ldd	r22, Y+1	; 0x01
    4194:	7a 81       	ldd	r23, Y+2	; 0x02
//printf("tmp is %d.\n\r", tmp);
if(tmp>65536) 
	{
//	printf("tmp>65536\n\r");
	tmp-=65536;
	do{}while(_nrk_high_speed_timer_get()>start);
    4196:	86 17       	cp	r24, r22
    4198:	97 07       	cpc	r25, r23
    419a:	a8 f3       	brcs	.-22     	; 0x4186 <nrk_high_speed_timer_wait+0x42>
tmp=(uint32_t)start+(uint32_t)ticks;
//printf("tmp is %d.\n\r", tmp);
if(tmp>65536) 
	{
//	printf("tmp>65536\n\r");
	tmp-=65536;
    419c:	20 50       	subi	r18, 0x00	; 0
    419e:	30 40       	sbci	r19, 0x00	; 0
    41a0:	41 40       	sbci	r20, 0x01	; 1
    41a2:	50 40       	sbci	r21, 0x00	; 0

inline uint16_t _nrk_high_speed_timer_get()
{
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    41a4:	80 91 84 00 	lds	r24, 0x0084
    41a8:	90 91 85 00 	lds	r25, 0x0085
    41ac:	9a 83       	std	Y+2, r25	; 0x02
    41ae:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    41b0:	89 81       	ldd	r24, Y+1	; 0x01
    41b2:	9a 81       	ldd	r25, Y+2	; 0x02
	tmp-=65536;
	do{}while(_nrk_high_speed_timer_get()>start);
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    41b4:	82 17       	cp	r24, r18
    41b6:	93 07       	cpc	r25, r19
    41b8:	a8 f3       	brcs	.-22     	; 0x41a4 <nrk_high_speed_timer_wait+0x60>
}
    41ba:	0f 90       	pop	r0
    41bc:	0f 90       	pop	r0
    41be:	cf 91       	pop	r28
    41c0:	df 91       	pop	r29
    41c2:	1f 91       	pop	r17
    41c4:	0f 91       	pop	r16
    41c6:	ff 90       	pop	r15
    41c8:	ef 90       	pop	r14
    41ca:	08 95       	ret

000041cc <_nrk_high_speed_timer_get>:

inline uint16_t _nrk_high_speed_timer_get()
{
    41cc:	df 93       	push	r29
    41ce:	cf 93       	push	r28
    41d0:	00 d0       	rcall	.+0      	; 0x41d2 <_nrk_high_speed_timer_get+0x6>
    41d2:	cd b7       	in	r28, 0x3d	; 61
    41d4:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    41d6:	80 91 84 00 	lds	r24, 0x0084
    41da:	90 91 85 00 	lds	r25, 0x0085
    41de:	9a 83       	std	Y+2, r25	; 0x02
    41e0:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    41e2:	29 81       	ldd	r18, Y+1	; 0x01
    41e4:	3a 81       	ldd	r19, Y+2	; 0x02
}
    41e6:	c9 01       	movw	r24, r18
    41e8:	0f 90       	pop	r0
    41ea:	0f 90       	pop	r0
    41ec:	cf 91       	pop	r28
    41ee:	df 91       	pop	r29
    41f0:	08 95       	ret

000041f2 <_nrk_os_timer_stop>:

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    41f2:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    41f6:	e0 e7       	ldi	r30, 0x70	; 112
    41f8:	f0 e0       	ldi	r31, 0x00	; 0
    41fa:	80 81       	ld	r24, Z
    41fc:	8d 7f       	andi	r24, 0xFD	; 253
    41fe:	80 83       	st	Z, r24
  TIMSK2 &=  ~BM(TOIE2) ;
    4200:	80 81       	ld	r24, Z
    4202:	8e 7f       	andi	r24, 0xFE	; 254
    4204:	80 83       	st	Z, r24
}
    4206:	08 95       	ret

00004208 <_nrk_os_timer_set>:

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    4208:	80 93 b2 00 	sts	0x00B2, r24
}
    420c:	08 95       	ret

0000420e <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A) | BM(TOIE2) ;//| BM(TICIE1);    // Enable interrupt
    420e:	e0 e7       	ldi	r30, 0x70	; 112
    4210:	f0 e0       	ldi	r31, 0x00	; 0
    4212:	80 81       	ld	r24, Z
    4214:	83 60       	ori	r24, 0x03	; 3
    4216:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    4218:	83 e0       	ldi	r24, 0x03	; 3
    421a:	80 93 b1 00 	sts	0x00B1, r24
}
    421e:	08 95       	ret

00004220 <_nrk_os_timer_reset>:

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    4220:	83 b5       	in	r24, 0x23	; 35
    4222:	82 60       	ori	r24, 0x02	; 2
    4224:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    4226:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    422a:	10 92 cd 02 	sts	0x02CD, r1
    _nrk_prev_timer_val=0;
    422e:	10 92 f8 06 	sts	0x06F8, r1
}
    4232:	08 95       	ret

00004234 <_nrk_get_next_wakeup>:


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    4234:	80 91 b3 00 	lds	r24, 0x00B3
}
    4238:	8f 5f       	subi	r24, 0xFF	; 255
    423a:	08 95       	ret

0000423c <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    423c:	81 50       	subi	r24, 0x01	; 1
    423e:	80 93 b3 00 	sts	0x00B3, r24
   //printf("value of TCNT2 is %d.\n\r",TCNT2);
}
    4242:	08 95       	ret

00004244 <nrk_timer_int_stop>:

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4244:	88 23       	and	r24, r24
    4246:	11 f4       	brne	.+4      	; 0x424c <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    4248:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    424c:	8f ef       	ldi	r24, 0xFF	; 255
    424e:	08 95       	ret

00004250 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4250:	88 23       	and	r24, r24
    4252:	11 f0       	breq	.+4      	; 0x4258 <nrk_timer_int_reset+0x8>
    4254:	8f ef       	ldi	r24, 0xFF	; 255
    4256:	08 95       	ret
	{
	TCNT3=0;
    4258:	10 92 95 00 	sts	0x0095, r1
    425c:	10 92 94 00 	sts	0x0094, r1
    4260:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
	}
return NRK_ERROR;
}
    4262:	08 95       	ret

00004264 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4264:	88 23       	and	r24, r24
    4266:	19 f0       	breq	.+6      	; 0x426e <nrk_timer_int_read+0xa>
    4268:	20 e0       	ldi	r18, 0x00	; 0
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	04 c0       	rjmp	.+8      	; 0x4276 <nrk_timer_int_read+0x12>
	{
	return TCNT3;
    426e:	20 91 94 00 	lds	r18, 0x0094
    4272:	30 91 95 00 	lds	r19, 0x0095
	}
return 0;

}
    4276:	c9 01       	movw	r24, r18
    4278:	08 95       	ret

0000427a <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    427a:	88 23       	and	r24, r24
    427c:	11 f0       	breq	.+4      	; 0x4282 <nrk_timer_int_start+0x8>
    427e:	8f ef       	ldi	r24, 0xFF	; 255
    4280:	08 95       	ret
	{
		TIMSK3 = BM(OCIE3A);
    4282:	82 e0       	ldi	r24, 0x02	; 2
    4284:	80 93 71 00 	sts	0x0071, r24
    4288:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
	}
return NRK_ERROR;
}
    428a:	08 95       	ret

0000428c <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    428c:	88 23       	and	r24, r24
    428e:	11 f0       	breq	.+4      	; 0x4294 <nrk_timer_int_configure+0x8>
    4290:	8f ef       	ldi	r24, 0xFF	; 255
    4292:	08 95       	ret
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    4294:	cb 01       	movw	r24, r22
    4296:	01 97       	sbiw	r24, 0x01	; 1
    4298:	85 30       	cpi	r24, 0x05	; 5
    429a:	91 05       	cpc	r25, r1
    429c:	10 f4       	brcc	.+4      	; 0x42a2 <nrk_timer_int_configure+0x16>
    429e:	60 93 f7 06 	sts	0x06F7, r22
	TCCR3A = 0;  
    42a2:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    42a6:	88 e0       	ldi	r24, 0x08	; 8
    42a8:	80 93 91 00 	sts	0x0091, r24
  	OCR3AH = (compare_value >> 8) & 0xFF;	
    42ac:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    42b0:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    42b4:	30 93 cb 02 	sts	0x02CB, r19
    42b8:	20 93 ca 02 	sts	0x02CA, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    42bc:	80 91 f7 06 	lds	r24, 0x06F7
    42c0:	81 30       	cpi	r24, 0x01	; 1
    42c2:	21 f4       	brne	.+8      	; 0x42cc <nrk_timer_int_configure+0x40>
    42c4:	80 91 91 00 	lds	r24, 0x0091
    42c8:	81 60       	ori	r24, 0x01	; 1
    42ca:	0b c0       	rjmp	.+22     	; 0x42e2 <nrk_timer_int_configure+0x56>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    42cc:	82 30       	cpi	r24, 0x02	; 2
    42ce:	21 f4       	brne	.+8      	; 0x42d8 <nrk_timer_int_configure+0x4c>
    42d0:	80 91 91 00 	lds	r24, 0x0091
    42d4:	82 60       	ori	r24, 0x02	; 2
    42d6:	05 c0       	rjmp	.+10     	; 0x42e2 <nrk_timer_int_configure+0x56>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    42d8:	83 30       	cpi	r24, 0x03	; 3
    42da:	31 f4       	brne	.+12     	; 0x42e8 <nrk_timer_int_configure+0x5c>
    42dc:	80 91 91 00 	lds	r24, 0x0091
    42e0:	83 60       	ori	r24, 0x03	; 3
    42e2:	80 93 91 00 	sts	0x0091, r24
    42e6:	08 c0       	rjmp	.+16     	; 0x42f8 <nrk_timer_int_configure+0x6c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    42e8:	84 30       	cpi	r24, 0x04	; 4
    42ea:	21 f4       	brne	.+8      	; 0x42f4 <nrk_timer_int_configure+0x68>
    42ec:	80 91 91 00 	lds	r24, 0x0091
    42f0:	84 60       	ori	r24, 0x04	; 4
    42f2:	f7 cf       	rjmp	.-18     	; 0x42e2 <nrk_timer_int_configure+0x56>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    42f4:	85 30       	cpi	r24, 0x05	; 5
    42f6:	11 f0       	breq	.+4      	; 0x42fc <nrk_timer_int_configure+0x70>
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	08 95       	ret
    42fc:	80 91 91 00 	lds	r24, 0x0091
    4300:	85 60       	ori	r24, 0x05	; 5
    4302:	80 93 91 00 	sts	0x0091, r24
    4306:	81 e0       	ldi	r24, 0x01	; 1
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
}
    4308:	08 95       	ret

0000430a <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    430a:	80 91 b2 00 	lds	r24, 0x00B2
}
    430e:	08 95       	ret

00004310 <__vector_13>:


// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {
asm volatile (
    4310:	0f 92       	push	r0
    4312:	0f b6       	in	r0, 0x3f	; 63
    4314:	0f 92       	push	r0
    4316:	1f 92       	push	r1
    4318:	2f 92       	push	r2
    431a:	3f 92       	push	r3
    431c:	4f 92       	push	r4
    431e:	5f 92       	push	r5
    4320:	6f 92       	push	r6
    4322:	7f 92       	push	r7
    4324:	8f 92       	push	r8
    4326:	9f 92       	push	r9
    4328:	af 92       	push	r10
    432a:	bf 92       	push	r11
    432c:	cf 92       	push	r12
    432e:	df 92       	push	r13
    4330:	ef 92       	push	r14
    4332:	ff 92       	push	r15
    4334:	0f 93       	push	r16
    4336:	1f 93       	push	r17
    4338:	2f 93       	push	r18
    433a:	3f 93       	push	r19
    433c:	4f 93       	push	r20
    433e:	5f 93       	push	r21
    4340:	6f 93       	push	r22
    4342:	7f 93       	push	r23
    4344:	8f 93       	push	r24
    4346:	9f 93       	push	r25
    4348:	af 93       	push	r26
    434a:	bf 93       	push	r27
    434c:	cf 93       	push	r28
    434e:	df 93       	push	r29
    4350:	ef 93       	push	r30
    4352:	ff 93       	push	r31
    4354:	a0 91 c6 08 	lds	r26, 0x08C6
    4358:	b0 91 c7 08 	lds	r27, 0x08C7
    435c:	0d b6       	in	r0, 0x3d	; 61
    435e:	0d 92       	st	X+, r0
    4360:	0e b6       	in	r0, 0x3e	; 62
    4362:	0d 92       	st	X+, r0
    4364:	1f 92       	push	r1
    4366:	a0 91 f5 06 	lds	r26, 0x06F5
    436a:	b0 91 f6 06 	lds	r27, 0x06F6
    436e:	1e 90       	ld	r1, -X
    4370:	be bf       	out	0x3e, r27	; 62
    4372:	ad bf       	out	0x3d, r26	; 61
    4374:	08 95       	ret

00004376 <__vector_17>:
}

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    4376:	1f 92       	push	r1
    4378:	0f 92       	push	r0
    437a:	0f b6       	in	r0, 0x3f	; 63
    437c:	0f 92       	push	r0
    437e:	11 24       	eor	r1, r1

	return;  	
} 
    4380:	0f 90       	pop	r0
    4382:	0f be       	out	0x3f, r0	; 63
    4384:	0f 90       	pop	r0
    4386:	1f 90       	pop	r1
    4388:	18 95       	reti

0000438a <__vector_32>:
);

} 


SIGNAL(TIMER3_COMPA_vect) {
    438a:	1f 92       	push	r1
    438c:	0f 92       	push	r0
    438e:	0f b6       	in	r0, 0x3f	; 63
    4390:	0f 92       	push	r0
    4392:	0b b6       	in	r0, 0x3b	; 59
    4394:	0f 92       	push	r0
    4396:	11 24       	eor	r1, r1
    4398:	2f 93       	push	r18
    439a:	3f 93       	push	r19
    439c:	4f 93       	push	r20
    439e:	5f 93       	push	r21
    43a0:	6f 93       	push	r22
    43a2:	7f 93       	push	r23
    43a4:	8f 93       	push	r24
    43a6:	9f 93       	push	r25
    43a8:	af 93       	push	r26
    43aa:	bf 93       	push	r27
    43ac:	ef 93       	push	r30
    43ae:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    43b0:	e0 91 ca 02 	lds	r30, 0x02CA
    43b4:	f0 91 cb 02 	lds	r31, 0x02CB
    43b8:	30 97       	sbiw	r30, 0x00	; 0
    43ba:	11 f0       	breq	.+4      	; 0x43c0 <__vector_32+0x36>
    43bc:	09 95       	icall
    43be:	04 c0       	rjmp	.+8      	; 0x43c8 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    43c0:	8a e0       	ldi	r24, 0x0A	; 10
    43c2:	60 e0       	ldi	r22, 0x00	; 0
    43c4:	0e 94 df 13 	call	0x27be	; 0x27be <nrk_kernel_error_add>
//printf("TIMER3_COMPA_vect\n\r");
	return;  	
}
    43c8:	ff 91       	pop	r31
    43ca:	ef 91       	pop	r30
    43cc:	bf 91       	pop	r27
    43ce:	af 91       	pop	r26
    43d0:	9f 91       	pop	r25
    43d2:	8f 91       	pop	r24
    43d4:	7f 91       	pop	r23
    43d6:	6f 91       	pop	r22
    43d8:	5f 91       	pop	r21
    43da:	4f 91       	pop	r20
    43dc:	3f 91       	pop	r19
    43de:	2f 91       	pop	r18
    43e0:	0f 90       	pop	r0
    43e2:	0b be       	out	0x3b, r0	; 59
    43e4:	0f 90       	pop	r0
    43e6:	0f be       	out	0x3f, r0	; 63
    43e8:	0f 90       	pop	r0
    43ea:	1f 90       	pop	r1
    43ec:	18 95       	reti

000043ee <__vector_default>:
}

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    43ee:	1f 92       	push	r1
    43f0:	0f 92       	push	r0
    43f2:	0f b6       	in	r0, 0x3f	; 63
    43f4:	0f 92       	push	r0
    43f6:	0b b6       	in	r0, 0x3b	; 59
    43f8:	0f 92       	push	r0
    43fa:	11 24       	eor	r1, r1
    43fc:	2f 93       	push	r18
    43fe:	3f 93       	push	r19
    4400:	4f 93       	push	r20
    4402:	5f 93       	push	r21
    4404:	6f 93       	push	r22
    4406:	7f 93       	push	r23
    4408:	8f 93       	push	r24
    440a:	9f 93       	push	r25
    440c:	af 93       	push	r26
    440e:	bf 93       	push	r27
    4410:	ef 93       	push	r30
    4412:	ff 93       	push	r31
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4414:	8a e0       	ldi	r24, 0x0A	; 10
    4416:	60 e0       	ldi	r22, 0x00	; 0
    4418:	0e 94 df 13 	call	0x27be	; 0x27be <nrk_kernel_error_add>
    441c:	ff cf       	rjmp	.-2      	; 0x441c <__vector_default+0x2e>

0000441e <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    441e:	88 23       	and	r24, r24
    4420:	11 f4       	brne	.+4      	; 0x4426 <nrk_ext_int_enable+0x8>
    4422:	e8 9a       	sbi	0x1d, 0	; 29
    4424:	33 c0       	rjmp	.+102    	; 0x448c <nrk_ext_int_enable+0x6e>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    4426:	81 30       	cpi	r24, 0x01	; 1
    4428:	11 f4       	brne	.+4      	; 0x442e <nrk_ext_int_enable+0x10>
    442a:	e9 9a       	sbi	0x1d, 1	; 29
    442c:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    442e:	82 30       	cpi	r24, 0x02	; 2
    4430:	11 f4       	brne	.+4      	; 0x4436 <nrk_ext_int_enable+0x18>
    4432:	ea 9a       	sbi	0x1d, 2	; 29
    4434:	2b c0       	rjmp	.+86     	; 0x448c <nrk_ext_int_enable+0x6e>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    4436:	83 30       	cpi	r24, 0x03	; 3
    4438:	21 f4       	brne	.+8      	; 0x4442 <nrk_ext_int_enable+0x24>
    443a:	80 91 6b 00 	lds	r24, 0x006B
    443e:	81 60       	ori	r24, 0x01	; 1
    4440:	23 c0       	rjmp	.+70     	; 0x4488 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    4442:	84 30       	cpi	r24, 0x04	; 4
    4444:	21 f4       	brne	.+8      	; 0x444e <nrk_ext_int_enable+0x30>
    4446:	80 91 6b 00 	lds	r24, 0x006B
    444a:	82 60       	ori	r24, 0x02	; 2
    444c:	1d c0       	rjmp	.+58     	; 0x4488 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    444e:	85 30       	cpi	r24, 0x05	; 5
    4450:	21 f4       	brne	.+8      	; 0x445a <nrk_ext_int_enable+0x3c>
    4452:	80 91 6b 00 	lds	r24, 0x006B
    4456:	84 60       	ori	r24, 0x04	; 4
    4458:	17 c0       	rjmp	.+46     	; 0x4488 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    445a:	86 30       	cpi	r24, 0x06	; 6
    445c:	21 f4       	brne	.+8      	; 0x4466 <nrk_ext_int_enable+0x48>
    445e:	80 91 6b 00 	lds	r24, 0x006B
    4462:	88 60       	ori	r24, 0x08	; 8
    4464:	11 c0       	rjmp	.+34     	; 0x4488 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    4466:	87 30       	cpi	r24, 0x07	; 7
    4468:	21 f4       	brne	.+8      	; 0x4472 <nrk_ext_int_enable+0x54>
    446a:	80 91 6b 00 	lds	r24, 0x006B
    446e:	80 61       	ori	r24, 0x10	; 16
    4470:	0b c0       	rjmp	.+22     	; 0x4488 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    4472:	88 30       	cpi	r24, 0x08	; 8
    4474:	21 f4       	brne	.+8      	; 0x447e <nrk_ext_int_enable+0x60>
    4476:	80 91 6b 00 	lds	r24, 0x006B
    447a:	80 62       	ori	r24, 0x20	; 32
    447c:	05 c0       	rjmp	.+10     	; 0x4488 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    447e:	89 30       	cpi	r24, 0x09	; 9
    4480:	39 f4       	brne	.+14     	; 0x4490 <nrk_ext_int_enable+0x72>
    4482:	80 91 6b 00 	lds	r24, 0x006B
    4486:	80 64       	ori	r24, 0x40	; 64
    4488:	80 93 6b 00 	sts	0x006B, r24
    448c:	81 e0       	ldi	r24, 0x01	; 1
    448e:	08 95       	ret
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    4490:	8a 30       	cpi	r24, 0x0A	; 10
    4492:	11 f0       	breq	.+4      	; 0x4498 <nrk_ext_int_enable+0x7a>
    4494:	8f ef       	ldi	r24, 0xFF	; 255
    4496:	08 95       	ret
    4498:	80 91 6b 00 	lds	r24, 0x006B
    449c:	80 68       	ori	r24, 0x80	; 128
    449e:	80 93 6b 00 	sts	0x006B, r24
    44a2:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    44a4:	08 95       	ret

000044a6 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    44a6:	88 23       	and	r24, r24
    44a8:	11 f4       	brne	.+4      	; 0x44ae <nrk_ext_int_disable+0x8>
    44aa:	e8 98       	cbi	0x1d, 0	; 29
    44ac:	33 c0       	rjmp	.+102    	; 0x4514 <nrk_ext_int_disable+0x6e>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    44ae:	81 30       	cpi	r24, 0x01	; 1
    44b0:	11 f4       	brne	.+4      	; 0x44b6 <nrk_ext_int_disable+0x10>
    44b2:	e9 98       	cbi	0x1d, 1	; 29
    44b4:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    44b6:	82 30       	cpi	r24, 0x02	; 2
    44b8:	11 f4       	brne	.+4      	; 0x44be <nrk_ext_int_disable+0x18>
    44ba:	e9 98       	cbi	0x1d, 1	; 29
    44bc:	2b c0       	rjmp	.+86     	; 0x4514 <nrk_ext_int_disable+0x6e>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    44be:	83 30       	cpi	r24, 0x03	; 3
    44c0:	21 f4       	brne	.+8      	; 0x44ca <nrk_ext_int_disable+0x24>
    44c2:	80 91 6b 00 	lds	r24, 0x006B
    44c6:	8e 7f       	andi	r24, 0xFE	; 254
    44c8:	23 c0       	rjmp	.+70     	; 0x4510 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    44ca:	84 30       	cpi	r24, 0x04	; 4
    44cc:	21 f4       	brne	.+8      	; 0x44d6 <nrk_ext_int_disable+0x30>
    44ce:	80 91 6b 00 	lds	r24, 0x006B
    44d2:	8d 7f       	andi	r24, 0xFD	; 253
    44d4:	1d c0       	rjmp	.+58     	; 0x4510 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    44d6:	85 30       	cpi	r24, 0x05	; 5
    44d8:	21 f4       	brne	.+8      	; 0x44e2 <nrk_ext_int_disable+0x3c>
    44da:	80 91 6b 00 	lds	r24, 0x006B
    44de:	8b 7f       	andi	r24, 0xFB	; 251
    44e0:	17 c0       	rjmp	.+46     	; 0x4510 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    44e2:	86 30       	cpi	r24, 0x06	; 6
    44e4:	21 f4       	brne	.+8      	; 0x44ee <nrk_ext_int_disable+0x48>
    44e6:	80 91 6b 00 	lds	r24, 0x006B
    44ea:	87 7f       	andi	r24, 0xF7	; 247
    44ec:	11 c0       	rjmp	.+34     	; 0x4510 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    44ee:	87 30       	cpi	r24, 0x07	; 7
    44f0:	21 f4       	brne	.+8      	; 0x44fa <nrk_ext_int_disable+0x54>
    44f2:	80 91 6b 00 	lds	r24, 0x006B
    44f6:	8f 7e       	andi	r24, 0xEF	; 239
    44f8:	0b c0       	rjmp	.+22     	; 0x4510 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    44fa:	88 30       	cpi	r24, 0x08	; 8
    44fc:	21 f4       	brne	.+8      	; 0x4506 <nrk_ext_int_disable+0x60>
    44fe:	80 91 6b 00 	lds	r24, 0x006B
    4502:	8f 7d       	andi	r24, 0xDF	; 223
    4504:	05 c0       	rjmp	.+10     	; 0x4510 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    4506:	89 30       	cpi	r24, 0x09	; 9
    4508:	39 f4       	brne	.+14     	; 0x4518 <nrk_ext_int_disable+0x72>
    450a:	80 91 6b 00 	lds	r24, 0x006B
    450e:	8f 7b       	andi	r24, 0xBF	; 191
    4510:	80 93 6b 00 	sts	0x006B, r24
    4514:	81 e0       	ldi	r24, 0x01	; 1
    4516:	08 95       	ret
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    4518:	8a 30       	cpi	r24, 0x0A	; 10
    451a:	11 f0       	breq	.+4      	; 0x4520 <nrk_ext_int_disable+0x7a>
    451c:	8f ef       	ldi	r24, 0xFF	; 255
    451e:	08 95       	ret
    4520:	80 91 6b 00 	lds	r24, 0x006B
    4524:	8f 77       	andi	r24, 0x7F	; 127
    4526:	80 93 6b 00 	sts	0x006B, r24
    452a:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    452c:	08 95       	ret

0000452e <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    452e:	88 23       	and	r24, r24
    4530:	39 f5       	brne	.+78     	; 0x4580 <nrk_ext_int_configure+0x52>
	{
	ext_int0_callback=callback_func;
    4532:	50 93 e0 08 	sts	0x08E0, r21
    4536:	40 93 df 08 	sts	0x08DF, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    453a:	66 23       	and	r22, r22
    453c:	21 f4       	brne	.+8      	; 0x4546 <nrk_ext_int_configure+0x18>
    453e:	80 91 69 00 	lds	r24, 0x0069
    4542:	8c 7f       	andi	r24, 0xFC	; 252
    4544:	44 c0       	rjmp	.+136    	; 0x45ce <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    4546:	61 30       	cpi	r22, 0x01	; 1
    4548:	49 f4       	brne	.+18     	; 0x455c <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    454a:	80 91 69 00 	lds	r24, 0x0069
    454e:	8d 7f       	andi	r24, 0xFD	; 253
    4550:	80 93 69 00 	sts	0x0069, r24
    4554:	80 91 69 00 	lds	r24, 0x0069
    4558:	81 60       	ori	r24, 0x01	; 1
    455a:	39 c0       	rjmp	.+114    	; 0x45ce <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    455c:	62 30       	cpi	r22, 0x02	; 2
    455e:	49 f4       	brne	.+18     	; 0x4572 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    4560:	80 91 69 00 	lds	r24, 0x0069
    4564:	82 60       	ori	r24, 0x02	; 2
    4566:	80 93 69 00 	sts	0x0069, r24
    456a:	80 91 69 00 	lds	r24, 0x0069
    456e:	8e 7f       	andi	r24, 0xFE	; 254
    4570:	2e c0       	rjmp	.+92     	; 0x45ce <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    4572:	63 30       	cpi	r22, 0x03	; 3
    4574:	09 f0       	breq	.+2      	; 0x4578 <nrk_ext_int_configure+0x4a>
    4576:	66 c0       	rjmp	.+204    	; 0x4644 <nrk_ext_int_configure+0x116>
    4578:	80 91 69 00 	lds	r24, 0x0069
    457c:	83 60       	ori	r24, 0x03	; 3
    457e:	27 c0       	rjmp	.+78     	; 0x45ce <nrk_ext_int_configure+0xa0>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    4580:	81 30       	cpi	r24, 0x01	; 1
    4582:	41 f5       	brne	.+80     	; 0x45d4 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    4584:	50 93 de 08 	sts	0x08DE, r21
    4588:	40 93 dd 08 	sts	0x08DD, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    458c:	66 23       	and	r22, r22
    458e:	21 f4       	brne	.+8      	; 0x4598 <nrk_ext_int_configure+0x6a>
    4590:	80 91 69 00 	lds	r24, 0x0069
    4594:	83 7f       	andi	r24, 0xF3	; 243
    4596:	1b c0       	rjmp	.+54     	; 0x45ce <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    4598:	61 30       	cpi	r22, 0x01	; 1
    459a:	49 f4       	brne	.+18     	; 0x45ae <nrk_ext_int_configure+0x80>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    459c:	80 91 69 00 	lds	r24, 0x0069
    45a0:	87 7f       	andi	r24, 0xF7	; 247
    45a2:	80 93 69 00 	sts	0x0069, r24
    45a6:	80 91 69 00 	lds	r24, 0x0069
    45aa:	84 60       	ori	r24, 0x04	; 4
    45ac:	10 c0       	rjmp	.+32     	; 0x45ce <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    45ae:	62 30       	cpi	r22, 0x02	; 2
    45b0:	49 f4       	brne	.+18     	; 0x45c4 <nrk_ext_int_configure+0x96>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    45b2:	80 91 69 00 	lds	r24, 0x0069
    45b6:	88 60       	ori	r24, 0x08	; 8
    45b8:	80 93 69 00 	sts	0x0069, r24
    45bc:	80 91 69 00 	lds	r24, 0x0069
    45c0:	8b 7f       	andi	r24, 0xFB	; 251
    45c2:	05 c0       	rjmp	.+10     	; 0x45ce <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    45c4:	63 30       	cpi	r22, 0x03	; 3
    45c6:	f1 f5       	brne	.+124    	; 0x4644 <nrk_ext_int_configure+0x116>
    45c8:	80 91 69 00 	lds	r24, 0x0069
    45cc:	8c 60       	ori	r24, 0x0C	; 12
    45ce:	80 93 69 00 	sts	0x0069, r24
    45d2:	36 c0       	rjmp	.+108    	; 0x4640 <nrk_ext_int_configure+0x112>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    45d4:	82 30       	cpi	r24, 0x02	; 2
    45d6:	31 f5       	brne	.+76     	; 0x4624 <nrk_ext_int_configure+0xf6>
	{
	ext_int1_callback=callback_func;
    45d8:	50 93 de 08 	sts	0x08DE, r21
    45dc:	40 93 dd 08 	sts	0x08DD, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    45e0:	66 23       	and	r22, r22
    45e2:	21 f4       	brne	.+8      	; 0x45ec <nrk_ext_int_configure+0xbe>
    45e4:	80 91 69 00 	lds	r24, 0x0069
    45e8:	8f 7c       	andi	r24, 0xCF	; 207
    45ea:	f1 cf       	rjmp	.-30     	; 0x45ce <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    45ec:	61 30       	cpi	r22, 0x01	; 1
    45ee:	49 f4       	brne	.+18     	; 0x4602 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    45f0:	80 91 69 00 	lds	r24, 0x0069
    45f4:	8f 7d       	andi	r24, 0xDF	; 223
    45f6:	80 93 69 00 	sts	0x0069, r24
    45fa:	80 91 69 00 	lds	r24, 0x0069
    45fe:	80 61       	ori	r24, 0x10	; 16
    4600:	e6 cf       	rjmp	.-52     	; 0x45ce <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    4602:	62 30       	cpi	r22, 0x02	; 2
    4604:	49 f4       	brne	.+18     	; 0x4618 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    4606:	80 91 69 00 	lds	r24, 0x0069
    460a:	80 62       	ori	r24, 0x20	; 32
    460c:	80 93 69 00 	sts	0x0069, r24
    4610:	80 91 69 00 	lds	r24, 0x0069
    4614:	8f 7e       	andi	r24, 0xEF	; 239
    4616:	db cf       	rjmp	.-74     	; 0x45ce <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    4618:	63 30       	cpi	r22, 0x03	; 3
    461a:	a1 f4       	brne	.+40     	; 0x4644 <nrk_ext_int_configure+0x116>
    461c:	80 91 69 00 	lds	r24, 0x0069
    4620:	80 63       	ori	r24, 0x30	; 48
    4622:	d5 cf       	rjmp	.-86     	; 0x45ce <nrk_ext_int_configure+0xa0>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4624:	83 50       	subi	r24, 0x03	; 3
    4626:	88 30       	cpi	r24, 0x08	; 8
    4628:	10 f0       	brcs	.+4      	; 0x462e <nrk_ext_int_configure+0x100>
    462a:	8f ef       	ldi	r24, 0xFF	; 255
    462c:	08 95       	ret
	PCICR |= BM(PCIE0);	
    462e:	80 91 68 00 	lds	r24, 0x0068
    4632:	81 60       	ori	r24, 0x01	; 1
    4634:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4638:	50 93 e4 08 	sts	0x08E4, r21
    463c:	40 93 e3 08 	sts	0x08E3, r20
    4640:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
    4642:	08 95       	ret
    4644:	81 e0       	ldi	r24, 0x01	; 1
	}
return NRK_ERROR;
}
    4646:	08 95       	ret

00004648 <__vector_1>:
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
	return;  	
}


SIGNAL(INT0_vect) {
    4648:	1f 92       	push	r1
    464a:	0f 92       	push	r0
    464c:	0f b6       	in	r0, 0x3f	; 63
    464e:	0f 92       	push	r0
    4650:	0b b6       	in	r0, 0x3b	; 59
    4652:	0f 92       	push	r0
    4654:	11 24       	eor	r1, r1
    4656:	2f 93       	push	r18
    4658:	3f 93       	push	r19
    465a:	4f 93       	push	r20
    465c:	5f 93       	push	r21
    465e:	6f 93       	push	r22
    4660:	7f 93       	push	r23
    4662:	8f 93       	push	r24
    4664:	9f 93       	push	r25
    4666:	af 93       	push	r26
    4668:	bf 93       	push	r27
    466a:	ef 93       	push	r30
    466c:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    466e:	e0 91 df 08 	lds	r30, 0x08DF
    4672:	f0 91 e0 08 	lds	r31, 0x08E0
    4676:	30 97       	sbiw	r30, 0x00	; 0
    4678:	11 f0       	breq	.+4      	; 0x467e <__vector_1+0x36>
    467a:	09 95       	icall
    467c:	04 c0       	rjmp	.+8      	; 0x4686 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    467e:	8a e0       	ldi	r24, 0x0A	; 10
    4680:	60 e0       	ldi	r22, 0x00	; 0
    4682:	0e 94 df 13 	call	0x27be	; 0x27be <nrk_kernel_error_add>
	return;  	
}
    4686:	ff 91       	pop	r31
    4688:	ef 91       	pop	r30
    468a:	bf 91       	pop	r27
    468c:	af 91       	pop	r26
    468e:	9f 91       	pop	r25
    4690:	8f 91       	pop	r24
    4692:	7f 91       	pop	r23
    4694:	6f 91       	pop	r22
    4696:	5f 91       	pop	r21
    4698:	4f 91       	pop	r20
    469a:	3f 91       	pop	r19
    469c:	2f 91       	pop	r18
    469e:	0f 90       	pop	r0
    46a0:	0b be       	out	0x3b, r0	; 59
    46a2:	0f 90       	pop	r0
    46a4:	0f be       	out	0x3f, r0	; 63
    46a6:	0f 90       	pop	r0
    46a8:	1f 90       	pop	r1
    46aa:	18 95       	reti

000046ac <__vector_9>:
	}
return NRK_ERROR;
}


SIGNAL(PCINT0_vect) {
    46ac:	1f 92       	push	r1
    46ae:	0f 92       	push	r0
    46b0:	0f b6       	in	r0, 0x3f	; 63
    46b2:	0f 92       	push	r0
    46b4:	0b b6       	in	r0, 0x3b	; 59
    46b6:	0f 92       	push	r0
    46b8:	11 24       	eor	r1, r1
    46ba:	2f 93       	push	r18
    46bc:	3f 93       	push	r19
    46be:	4f 93       	push	r20
    46c0:	5f 93       	push	r21
    46c2:	6f 93       	push	r22
    46c4:	7f 93       	push	r23
    46c6:	8f 93       	push	r24
    46c8:	9f 93       	push	r25
    46ca:	af 93       	push	r26
    46cc:	bf 93       	push	r27
    46ce:	ef 93       	push	r30
    46d0:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    46d2:	e0 91 e3 08 	lds	r30, 0x08E3
    46d6:	f0 91 e4 08 	lds	r31, 0x08E4
    46da:	30 97       	sbiw	r30, 0x00	; 0
    46dc:	11 f0       	breq	.+4      	; 0x46e2 <__vector_9+0x36>
    46de:	09 95       	icall
    46e0:	04 c0       	rjmp	.+8      	; 0x46ea <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    46e2:	8a e0       	ldi	r24, 0x0A	; 10
    46e4:	60 e0       	ldi	r22, 0x00	; 0
    46e6:	0e 94 df 13 	call	0x27be	; 0x27be <nrk_kernel_error_add>
	return;  	
}
    46ea:	ff 91       	pop	r31
    46ec:	ef 91       	pop	r30
    46ee:	bf 91       	pop	r27
    46f0:	af 91       	pop	r26
    46f2:	9f 91       	pop	r25
    46f4:	8f 91       	pop	r24
    46f6:	7f 91       	pop	r23
    46f8:	6f 91       	pop	r22
    46fa:	5f 91       	pop	r21
    46fc:	4f 91       	pop	r20
    46fe:	3f 91       	pop	r19
    4700:	2f 91       	pop	r18
    4702:	0f 90       	pop	r0
    4704:	0b be       	out	0x3b, r0	; 59
    4706:	0f 90       	pop	r0
    4708:	0f be       	out	0x3f, r0	; 63
    470a:	0f 90       	pop	r0
    470c:	1f 90       	pop	r1
    470e:	18 95       	reti

00004710 <_nrk_startup_ok>:

uint8_t _nrk_startup_ok()
{
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident
if((volatile uint8_t)TCCR2A!=0) return 0;
    4710:	90 91 b0 00 	lds	r25, 0x00B0
    4714:	80 e0       	ldi	r24, 0x00	; 0
    4716:	99 23       	and	r25, r25
    4718:	09 f4       	brne	.+2      	; 0x471c <_nrk_startup_ok+0xc>
    471a:	81 e0       	ldi	r24, 0x01	; 1
return 1;
}
    471c:	08 95       	ret

0000471e <update_watchdog>:

inline void update_watchdog()
{


}
    471e:	08 95       	ret

00004720 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4720:	04 b6       	in	r0, 0x34	; 52
    4722:	03 fe       	sbrs	r0, 3
    4724:	02 c0       	rjmp	.+4      	; 0x472a <nrk_watchdog_check+0xa>
    4726:	8f ef       	ldi	r24, 0xFF	; 255
    4728:	08 95       	ret
    472a:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    472c:	08 95       	ret

0000472e <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    472e:	a8 95       	wdr

}
    4730:	08 95       	ret

00004732 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    4732:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>
MCUSR &= ~(1<<WDRF);
    4736:	84 b7       	in	r24, 0x34	; 52
    4738:	87 7f       	andi	r24, 0xF7	; 247
    473a:	84 bf       	out	0x34, r24	; 52
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    473c:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
MCUSR &= ~(1<<WDRF);
nrk_watchdog_reset();
WDTCSR |= (1<<WDCE) | (1<<WDE);
    473e:	e0 e6       	ldi	r30, 0x60	; 96
    4740:	f0 e0       	ldi	r31, 0x00	; 0
    4742:	80 81       	ld	r24, Z
    4744:	88 61       	ori	r24, 0x18	; 24
    4746:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    4748:	8d e0       	ldi	r24, 0x0D	; 13
    474a:	80 83       	st	Z, r24
nrk_int_enable();
    474c:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>

}
    4750:	08 95       	ret

00004752 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    4752:	0e 94 7f 11 	call	0x22fe	; 0x22fe <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4756:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4758:	84 b7       	in	r24, 0x34	; 52
    475a:	87 7f       	andi	r24, 0xF7	; 247
    475c:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    475e:	e0 e6       	ldi	r30, 0x60	; 96
    4760:	f0 e0       	ldi	r31, 0x00	; 0
    4762:	80 81       	ld	r24, Z
    4764:	88 61       	ori	r24, 0x18	; 24
    4766:	80 83       	st	Z, r24
WDTCSR = 0;
    4768:	10 82       	st	Z, r1
nrk_int_enable();
    476a:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>
}
    476e:	08 95       	ret

00004770 <nrk_battery_save>:
        nrk_led_clr(2);
        nrk_led_clr(3);
        SET_VREG_INACTIVE();
        nrk_sleep();
#endif
}
    4770:	08 95       	ret

00004772 <nrk_sleep>:

void nrk_sleep()
{

    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    4772:	83 b7       	in	r24, 0x33	; 51
    4774:	81 7f       	andi	r24, 0xF1	; 241
    4776:	86 60       	ori	r24, 0x06	; 6
    4778:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    477a:	83 b7       	in	r24, 0x33	; 51
    477c:	81 60       	ori	r24, 0x01	; 1
    477e:	83 bf       	out	0x33, r24	; 51
    4780:	88 95       	sleep
    4782:	83 b7       	in	r24, 0x33	; 51
    4784:	8e 7f       	andi	r24, 0xFE	; 254
    4786:	83 bf       	out	0x33, r24	; 51

}
    4788:	08 95       	ret

0000478a <nrk_idle>:

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    478a:	83 b7       	in	r24, 0x33	; 51
    478c:	81 7f       	andi	r24, 0xF1	; 241
    478e:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4790:	83 b7       	in	r24, 0x33	; 51
    4792:	81 60       	ori	r24, 0x01	; 1
    4794:	83 bf       	out	0x33, r24	; 51
    4796:	88 95       	sleep
    4798:	83 b7       	in	r24, 0x33	; 51
    479a:	8e 7f       	andi	r24, 0xFE	; 254
    479c:	83 bf       	out	0x33, r24	; 51

}
    479e:	08 95       	ret

000047a0 <nrk_task_set_entry_function>:

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    47a0:	fc 01       	movw	r30, r24
    47a2:	76 83       	std	Z+6, r23	; 0x06
    47a4:	65 83       	std	Z+5, r22	; 0x05
}
    47a6:	08 95       	ret

000047a8 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    47a8:	25 e5       	ldi	r18, 0x55	; 85
    47aa:	fa 01       	movw	r30, r20
    47ac:	20 83       	st	Z, r18
    stk    = (unsigned int *)ptos;          /* Load stack pointer */
    47ae:	fb 01       	movw	r30, r22
    *(--stk) = 0x4748;   // G H                      
    *(--stk) = 0x4546;   // E F                    
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    47b0:	32 97       	sbiw	r30, 0x02	; 2
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    47b2:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    47b4:	81 83       	std	Z+1, r24	; 0x01
	
    *(--stk) = 0;
    47b6:	12 92       	st	-Z, r1
    47b8:	12 92       	st	-Z, r1
    *(--stk) = 0;       
    47ba:	12 92       	st	-Z, r1
    47bc:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    47be:	12 92       	st	-Z, r1
    47c0:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    47c2:	12 92       	st	-Z, r1
    47c4:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    47c6:	12 92       	st	-Z, r1
    47c8:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    47ca:	12 92       	st	-Z, r1
    47cc:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    47ce:	12 92       	st	-Z, r1
    47d0:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    47d2:	12 92       	st	-Z, r1
    47d4:	12 92       	st	-Z, r1

    *(--stk) = 0; 
    47d6:	12 92       	st	-Z, r1
    47d8:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    47da:	12 92       	st	-Z, r1
    47dc:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    47de:	12 92       	st	-Z, r1
    47e0:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    47e2:	12 92       	st	-Z, r1
    47e4:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    47e6:	12 92       	st	-Z, r1
    47e8:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    47ea:	12 92       	st	-Z, r1
    47ec:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    47ee:	12 92       	st	-Z, r1
    47f0:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    47f2:	12 92       	st	-Z, r1
    47f4:	12 92       	st	-Z, r1
    *(--stk) = 0;
    47f6:	12 92       	st	-Z, r1
    47f8:	12 92       	st	-Z, r1


    return ((void *)stk);
}
    47fa:	cf 01       	movw	r24, r30
    47fc:	08 95       	ret

000047fe <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    47fe:	85 e5       	ldi	r24, 0x55	; 85
    4800:	80 93 fe 1f 	sts	0x1FFE, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    4804:	ee ef       	ldi	r30, 0xFE	; 254
    4806:	f1 e2       	ldi	r31, 0x21	; 33
    4808:	f0 93 f6 06 	sts	0x06F6, r31
    480c:	e0 93 f5 06 	sts	0x06F5, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4810:	88 e8       	ldi	r24, 0x88	; 136
    4812:	91 e1       	ldi	r25, 0x11	; 17
    4814:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4816:	80 93 ff 21 	sts	0x21FF, r24

}
    481a:	08 95       	ret

0000481c <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    481c:	88 e8       	ldi	r24, 0x88	; 136
    481e:	91 e1       	ldi	r25, 0x11	; 17
    4820:	90 93 fe 21 	sts	0x21FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4824:	80 93 ff 21 	sts	0x21FF, r24
}
    4828:	08 95       	ret

0000482a <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    482a:	0e 94 5e 20 	call	0x40bc	; 0x40bc <_nrk_setup_timer>
  nrk_int_enable();  
    482e:	0e 94 81 11 	call	0x2302	; 0x2302 <nrk_int_enable>
	
}
    4832:	08 95       	ret

00004834 <nrk_task_set_stk>:
{
task->task=func;
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    4834:	ef 92       	push	r14
    4836:	ff 92       	push	r15
    4838:	0f 93       	push	r16
    483a:	1f 93       	push	r17
    483c:	cf 93       	push	r28
    483e:	df 93       	push	r29
    4840:	ec 01       	movw	r28, r24
    4842:	8b 01       	movw	r16, r22
    4844:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4846:	40 32       	cpi	r20, 0x20	; 32
    4848:	51 05       	cpc	r21, r1
    484a:	18 f4       	brcc	.+6      	; 0x4852 <nrk_task_set_stk+0x1e>
    484c:	81 e1       	ldi	r24, 0x11	; 17
    484e:	0e 94 e6 13 	call	0x27cc	; 0x27cc <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4852:	08 94       	sec
    4854:	e1 08       	sbc	r14, r1
    4856:	f1 08       	sbc	r15, r1
    4858:	e0 0e       	add	r14, r16
    485a:	f1 1e       	adc	r15, r17
    485c:	fa 82       	std	Y+2, r15	; 0x02
    485e:	e9 82       	std	Y+1, r14	; 0x01
task->Pbos = (void *) &stk_base[0];
    4860:	1c 83       	std	Y+4, r17	; 0x04
    4862:	0b 83       	std	Y+3, r16	; 0x03

}
    4864:	df 91       	pop	r29
    4866:	cf 91       	pop	r28
    4868:	1f 91       	pop	r17
    486a:	0f 91       	pop	r16
    486c:	ff 90       	pop	r15
    486e:	ef 90       	pop	r14
    4870:	08 95       	ret

00004872 <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    4872:	a0 91 b7 08 	lds	r26, 0x08B7
	lds r27,nrk_high_ready_TCB+1
    4876:	b0 91 b8 08 	lds	r27, 0x08B8

    	;x points to &OSTCB[x]
    
	ld r28,x+
    487a:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    487c:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    487e:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    4880:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    4882:	ff 91       	pop	r31
	pop r30
    4884:	ef 91       	pop	r30
	pop r29
    4886:	df 91       	pop	r29
	pop r28
    4888:	cf 91       	pop	r28
	pop r27
    488a:	bf 91       	pop	r27
	pop r26
    488c:	af 91       	pop	r26
	pop r25
    488e:	9f 91       	pop	r25
	pop r24			
    4890:	8f 91       	pop	r24
	pop r23
    4892:	7f 91       	pop	r23
	pop r22
    4894:	6f 91       	pop	r22
	pop r21
    4896:	5f 91       	pop	r21
	pop r20	
    4898:	4f 91       	pop	r20
	pop r19
    489a:	3f 91       	pop	r19
	pop r18	
    489c:	2f 91       	pop	r18
	pop r17
    489e:	1f 91       	pop	r17
	pop r16
    48a0:	0f 91       	pop	r16
	pop r15
    48a2:	ff 90       	pop	r15
	pop r14
    48a4:	ef 90       	pop	r14
	pop r13
    48a6:	df 90       	pop	r13
	pop r12
    48a8:	cf 90       	pop	r12
	pop r11
    48aa:	bf 90       	pop	r11
	pop r10
    48ac:	af 90       	pop	r10
	pop r9
    48ae:	9f 90       	pop	r9
	pop r8
    48b0:	8f 90       	pop	r8
	pop r7
    48b2:	7f 90       	pop	r7
	pop r6
    48b4:	6f 90       	pop	r6
	pop r5
    48b6:	5f 90       	pop	r5
	pop r4
    48b8:	4f 90       	pop	r4
	pop r3
    48ba:	3f 90       	pop	r3
	pop r2
    48bc:	2f 90       	pop	r2
	pop r1
    48be:	1f 90       	pop	r1
	pop r0
    48c0:	0f 90       	pop	r0
	out __SREG__, r0
    48c2:	0f be       	out	0x3f, r0	; 63
	pop r0	
    48c4:	0f 90       	pop	r0
	   
    	reti 
    48c6:	18 95       	reti

000048c8 <vfprintf>:
    48c8:	6f 92       	push	r6
    48ca:	7f 92       	push	r7
    48cc:	8f 92       	push	r8
    48ce:	9f 92       	push	r9
    48d0:	af 92       	push	r10
    48d2:	bf 92       	push	r11
    48d4:	cf 92       	push	r12
    48d6:	df 92       	push	r13
    48d8:	ef 92       	push	r14
    48da:	ff 92       	push	r15
    48dc:	0f 93       	push	r16
    48de:	1f 93       	push	r17
    48e0:	df 93       	push	r29
    48e2:	cf 93       	push	r28
    48e4:	cd b7       	in	r28, 0x3d	; 61
    48e6:	de b7       	in	r29, 0x3e	; 62
    48e8:	2d 97       	sbiw	r28, 0x0d	; 13
    48ea:	0f b6       	in	r0, 0x3f	; 63
    48ec:	f8 94       	cli
    48ee:	de bf       	out	0x3e, r29	; 62
    48f0:	0f be       	out	0x3f, r0	; 63
    48f2:	cd bf       	out	0x3d, r28	; 61
    48f4:	6c 01       	movw	r12, r24
    48f6:	4b 01       	movw	r8, r22
    48f8:	8a 01       	movw	r16, r20
    48fa:	fc 01       	movw	r30, r24
    48fc:	17 82       	std	Z+7, r1	; 0x07
    48fe:	16 82       	std	Z+6, r1	; 0x06
    4900:	83 81       	ldd	r24, Z+3	; 0x03
    4902:	81 fd       	sbrc	r24, 1
    4904:	06 c0       	rjmp	.+12     	; 0x4912 <vfprintf+0x4a>
    4906:	2f ef       	ldi	r18, 0xFF	; 255
    4908:	3f ef       	ldi	r19, 0xFF	; 255
    490a:	0e c1       	rjmp	.+540    	; 0x4b28 <vfprintf+0x260>
    490c:	0e 5f       	subi	r16, 0xFE	; 254
    490e:	1f 4f       	sbci	r17, 0xFF	; 255
    4910:	04 c0       	rjmp	.+8      	; 0x491a <vfprintf+0x52>
    4912:	5e 01       	movw	r10, r28
    4914:	08 94       	sec
    4916:	a1 1c       	adc	r10, r1
    4918:	b1 1c       	adc	r11, r1
    491a:	f6 01       	movw	r30, r12
    491c:	f3 80       	ldd	r15, Z+3	; 0x03
    491e:	f4 01       	movw	r30, r8
    4920:	f3 fc       	sbrc	r15, 3
    4922:	85 91       	lpm	r24, Z+
    4924:	f3 fe       	sbrs	r15, 3
    4926:	81 91       	ld	r24, Z+
    4928:	4f 01       	movw	r8, r30
    492a:	88 23       	and	r24, r24
    492c:	09 f4       	brne	.+2      	; 0x4930 <vfprintf+0x68>
    492e:	f9 c0       	rjmp	.+498    	; 0x4b22 <vfprintf+0x25a>
    4930:	85 32       	cpi	r24, 0x25	; 37
    4932:	51 f4       	brne	.+20     	; 0x4948 <vfprintf+0x80>
    4934:	f3 fc       	sbrc	r15, 3
    4936:	25 91       	lpm	r18, Z+
    4938:	f3 fe       	sbrs	r15, 3
    493a:	21 91       	ld	r18, Z+
    493c:	4f 01       	movw	r8, r30
    493e:	25 32       	cpi	r18, 0x25	; 37
    4940:	11 f0       	breq	.+4      	; 0x4946 <vfprintf+0x7e>
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	1f c0       	rjmp	.+62     	; 0x4984 <vfprintf+0xbc>
    4946:	85 e2       	ldi	r24, 0x25	; 37
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	32 c0       	rjmp	.+100    	; 0x49b0 <vfprintf+0xe8>
    494c:	22 23       	and	r18, r18
    494e:	09 f4       	brne	.+2      	; 0x4952 <vfprintf+0x8a>
    4950:	e8 c0       	rjmp	.+464    	; 0x4b22 <vfprintf+0x25a>
    4952:	84 e0       	ldi	r24, 0x04	; 4
    4954:	93 e0       	ldi	r25, 0x03	; 3
    4956:	62 2f       	mov	r22, r18
    4958:	70 e0       	ldi	r23, 0x00	; 0
    495a:	2c 87       	std	Y+12, r18	; 0x0c
    495c:	3d 87       	std	Y+13, r19	; 0x0d
    495e:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <strchr_P>
    4962:	2c 85       	ldd	r18, Y+12	; 0x0c
    4964:	3d 85       	ldd	r19, Y+13	; 0x0d
    4966:	00 97       	sbiw	r24, 0x00	; 0
    4968:	39 f4       	brne	.+14     	; 0x4978 <vfprintf+0xb0>
    496a:	23 32       	cpi	r18, 0x23	; 35
    496c:	11 f4       	brne	.+4      	; 0x4972 <vfprintf+0xaa>
    496e:	30 61       	ori	r19, 0x10	; 16
    4970:	03 c0       	rjmp	.+6      	; 0x4978 <vfprintf+0xb0>
    4972:	2c 36       	cpi	r18, 0x6C	; 108
    4974:	61 f4       	brne	.+24     	; 0x498e <vfprintf+0xc6>
    4976:	30 68       	ori	r19, 0x80	; 128
    4978:	f4 01       	movw	r30, r8
    497a:	f3 fc       	sbrc	r15, 3
    497c:	25 91       	lpm	r18, Z+
    497e:	f3 fe       	sbrs	r15, 3
    4980:	21 91       	ld	r18, Z+
    4982:	4f 01       	movw	r8, r30
    4984:	37 ff       	sbrs	r19, 7
    4986:	e2 cf       	rjmp	.-60     	; 0x494c <vfprintf+0x84>
    4988:	22 23       	and	r18, r18
    498a:	09 f4       	brne	.+2      	; 0x498e <vfprintf+0xc6>
    498c:	ca c0       	rjmp	.+404    	; 0x4b22 <vfprintf+0x25a>
    498e:	f3 2e       	mov	r15, r19
    4990:	8d ef       	ldi	r24, 0xFD	; 253
    4992:	92 e0       	ldi	r25, 0x02	; 2
    4994:	62 2f       	mov	r22, r18
    4996:	70 e0       	ldi	r23, 0x00	; 0
    4998:	2c 87       	std	Y+12, r18	; 0x0c
    499a:	3d 87       	std	Y+13, r19	; 0x0d
    499c:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <strchr_P>
    49a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    49a2:	3f 2d       	mov	r19, r15
    49a4:	00 97       	sbiw	r24, 0x00	; 0
    49a6:	41 f0       	breq	.+16     	; 0x49b8 <vfprintf+0xf0>
    49a8:	0c 5f       	subi	r16, 0xFC	; 252
    49aa:	1f 4f       	sbci	r17, 0xFF	; 255
    49ac:	8f e3       	ldi	r24, 0x3F	; 63
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	b6 01       	movw	r22, r12
    49b2:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fputc>
    49b6:	b1 cf       	rjmp	.-158    	; 0x491a <vfprintf+0x52>
    49b8:	23 36       	cpi	r18, 0x63	; 99
    49ba:	29 f0       	breq	.+10     	; 0x49c6 <vfprintf+0xfe>
    49bc:	23 37       	cpi	r18, 0x73	; 115
    49be:	91 f0       	breq	.+36     	; 0x49e4 <vfprintf+0x11c>
    49c0:	23 35       	cpi	r18, 0x53	; 83
    49c2:	09 f5       	brne	.+66     	; 0x4a06 <vfprintf+0x13e>
    49c4:	0d c0       	rjmp	.+26     	; 0x49e0 <vfprintf+0x118>
    49c6:	32 e0       	ldi	r19, 0x02	; 2
    49c8:	e3 2e       	mov	r14, r19
    49ca:	f1 2c       	mov	r15, r1
    49cc:	e0 0e       	add	r14, r16
    49ce:	f1 1e       	adc	r15, r17
    49d0:	f8 01       	movw	r30, r16
    49d2:	80 81       	ld	r24, Z
    49d4:	91 81       	ldd	r25, Z+1	; 0x01
    49d6:	b6 01       	movw	r22, r12
    49d8:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fputc>
    49dc:	87 01       	movw	r16, r14
    49de:	9d cf       	rjmp	.-198    	; 0x491a <vfprintf+0x52>
    49e0:	f1 e0       	ldi	r31, 0x01	; 1
    49e2:	ff 2a       	or	r15, r31
    49e4:	f8 01       	movw	r30, r16
    49e6:	60 80       	ld	r6, Z
    49e8:	71 80       	ldd	r7, Z+1	; 0x01
    49ea:	04 c0       	rjmp	.+8      	; 0x49f4 <vfprintf+0x12c>
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	b6 01       	movw	r22, r12
    49f0:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fputc>
    49f4:	f3 01       	movw	r30, r6
    49f6:	f0 fc       	sbrc	r15, 0
    49f8:	85 91       	lpm	r24, Z+
    49fa:	f0 fe       	sbrs	r15, 0
    49fc:	81 91       	ld	r24, Z+
    49fe:	3f 01       	movw	r6, r30
    4a00:	88 23       	and	r24, r24
    4a02:	a1 f7       	brne	.-24     	; 0x49ec <vfprintf+0x124>
    4a04:	83 cf       	rjmp	.-250    	; 0x490c <vfprintf+0x44>
    4a06:	24 36       	cpi	r18, 0x64	; 100
    4a08:	11 f0       	breq	.+4      	; 0x4a0e <vfprintf+0x146>
    4a0a:	29 36       	cpi	r18, 0x69	; 105
    4a0c:	29 f5       	brne	.+74     	; 0x4a58 <vfprintf+0x190>
    4a0e:	37 ff       	sbrs	r19, 7
    4a10:	08 c0       	rjmp	.+16     	; 0x4a22 <vfprintf+0x15a>
    4a12:	f8 01       	movw	r30, r16
    4a14:	60 81       	ld	r22, Z
    4a16:	71 81       	ldd	r23, Z+1	; 0x01
    4a18:	82 81       	ldd	r24, Z+2	; 0x02
    4a1a:	93 81       	ldd	r25, Z+3	; 0x03
    4a1c:	0c 5f       	subi	r16, 0xFC	; 252
    4a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a20:	09 c0       	rjmp	.+18     	; 0x4a34 <vfprintf+0x16c>
    4a22:	f8 01       	movw	r30, r16
    4a24:	60 81       	ld	r22, Z
    4a26:	71 81       	ldd	r23, Z+1	; 0x01
    4a28:	88 27       	eor	r24, r24
    4a2a:	77 fd       	sbrc	r23, 7
    4a2c:	80 95       	com	r24
    4a2e:	98 2f       	mov	r25, r24
    4a30:	0e 5f       	subi	r16, 0xFE	; 254
    4a32:	1f 4f       	sbci	r17, 0xFF	; 255
    4a34:	2f ee       	ldi	r18, 0xEF	; 239
    4a36:	f2 2e       	mov	r15, r18
    4a38:	f3 22       	and	r15, r19
    4a3a:	97 ff       	sbrs	r25, 7
    4a3c:	09 c0       	rjmp	.+18     	; 0x4a50 <vfprintf+0x188>
    4a3e:	90 95       	com	r25
    4a40:	80 95       	com	r24
    4a42:	70 95       	com	r23
    4a44:	61 95       	neg	r22
    4a46:	7f 4f       	sbci	r23, 0xFF	; 255
    4a48:	8f 4f       	sbci	r24, 0xFF	; 255
    4a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a4c:	f0 e4       	ldi	r31, 0x40	; 64
    4a4e:	ff 2a       	or	r15, r31
    4a50:	a5 01       	movw	r20, r10
    4a52:	2a e0       	ldi	r18, 0x0A	; 10
    4a54:	30 e0       	ldi	r19, 0x00	; 0
    4a56:	35 c0       	rjmp	.+106    	; 0x4ac2 <vfprintf+0x1fa>
    4a58:	20 37       	cpi	r18, 0x70	; 112
    4a5a:	b1 f0       	breq	.+44     	; 0x4a88 <vfprintf+0x1c0>
    4a5c:	21 37       	cpi	r18, 0x71	; 113
    4a5e:	30 f4       	brcc	.+12     	; 0x4a6c <vfprintf+0x1a4>
    4a60:	28 35       	cpi	r18, 0x58	; 88
    4a62:	c9 f0       	breq	.+50     	; 0x4a96 <vfprintf+0x1ce>
    4a64:	2f 36       	cpi	r18, 0x6F	; 111
    4a66:	09 f0       	breq	.+2      	; 0x4a6a <vfprintf+0x1a2>
    4a68:	5c c0       	rjmp	.+184    	; 0x4b22 <vfprintf+0x25a>
    4a6a:	06 c0       	rjmp	.+12     	; 0x4a78 <vfprintf+0x1b0>
    4a6c:	25 37       	cpi	r18, 0x75	; 117
    4a6e:	39 f0       	breq	.+14     	; 0x4a7e <vfprintf+0x1b6>
    4a70:	28 37       	cpi	r18, 0x78	; 120
    4a72:	09 f0       	breq	.+2      	; 0x4a76 <vfprintf+0x1ae>
    4a74:	56 c0       	rjmp	.+172    	; 0x4b22 <vfprintf+0x25a>
    4a76:	0a c0       	rjmp	.+20     	; 0x4a8c <vfprintf+0x1c4>
    4a78:	28 e0       	ldi	r18, 0x08	; 8
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	10 c0       	rjmp	.+32     	; 0x4a9e <vfprintf+0x1d6>
    4a7e:	2f ee       	ldi	r18, 0xEF	; 239
    4a80:	f2 22       	and	r15, r18
    4a82:	2a e0       	ldi	r18, 0x0A	; 10
    4a84:	30 e0       	ldi	r19, 0x00	; 0
    4a86:	0b c0       	rjmp	.+22     	; 0x4a9e <vfprintf+0x1d6>
    4a88:	80 e1       	ldi	r24, 0x10	; 16
    4a8a:	f8 2a       	or	r15, r24
    4a8c:	e4 e2       	ldi	r30, 0x24	; 36
    4a8e:	fe 2a       	or	r15, r30
    4a90:	20 e1       	ldi	r18, 0x10	; 16
    4a92:	30 e0       	ldi	r19, 0x00	; 0
    4a94:	04 c0       	rjmp	.+8      	; 0x4a9e <vfprintf+0x1d6>
    4a96:	f4 e0       	ldi	r31, 0x04	; 4
    4a98:	ff 2a       	or	r15, r31
    4a9a:	20 e1       	ldi	r18, 0x10	; 16
    4a9c:	32 e0       	ldi	r19, 0x02	; 2
    4a9e:	f7 fe       	sbrs	r15, 7
    4aa0:	08 c0       	rjmp	.+16     	; 0x4ab2 <vfprintf+0x1ea>
    4aa2:	f8 01       	movw	r30, r16
    4aa4:	60 81       	ld	r22, Z
    4aa6:	71 81       	ldd	r23, Z+1	; 0x01
    4aa8:	82 81       	ldd	r24, Z+2	; 0x02
    4aaa:	93 81       	ldd	r25, Z+3	; 0x03
    4aac:	0c 5f       	subi	r16, 0xFC	; 252
    4aae:	1f 4f       	sbci	r17, 0xFF	; 255
    4ab0:	07 c0       	rjmp	.+14     	; 0x4ac0 <vfprintf+0x1f8>
    4ab2:	f8 01       	movw	r30, r16
    4ab4:	60 81       	ld	r22, Z
    4ab6:	71 81       	ldd	r23, Z+1	; 0x01
    4ab8:	80 e0       	ldi	r24, 0x00	; 0
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	0e 5f       	subi	r16, 0xFE	; 254
    4abe:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac0:	a5 01       	movw	r20, r10
    4ac2:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <__ultoa_invert>
    4ac6:	e8 2e       	mov	r14, r24
    4ac8:	ea 18       	sub	r14, r10
    4aca:	6f 2c       	mov	r6, r15
    4acc:	77 24       	eor	r7, r7
    4ace:	f6 fe       	sbrs	r15, 6
    4ad0:	05 c0       	rjmp	.+10     	; 0x4adc <vfprintf+0x214>
    4ad2:	8d e2       	ldi	r24, 0x2D	; 45
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	b6 01       	movw	r22, r12
    4ad8:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fputc>
    4adc:	64 fe       	sbrs	r6, 4
    4ade:	15 c0       	rjmp	.+42     	; 0x4b0a <vfprintf+0x242>
    4ae0:	fe 01       	movw	r30, r28
    4ae2:	ee 0d       	add	r30, r14
    4ae4:	f1 1d       	adc	r31, r1
    4ae6:	80 81       	ld	r24, Z
    4ae8:	80 33       	cpi	r24, 0x30	; 48
    4aea:	79 f0       	breq	.+30     	; 0x4b0a <vfprintf+0x242>
    4aec:	80 e3       	ldi	r24, 0x30	; 48
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	b6 01       	movw	r22, r12
    4af2:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fputc>
    4af6:	62 fe       	sbrs	r6, 2
    4af8:	08 c0       	rjmp	.+16     	; 0x4b0a <vfprintf+0x242>
    4afa:	c3 01       	movw	r24, r6
    4afc:	80 72       	andi	r24, 0x20	; 32
    4afe:	90 70       	andi	r25, 0x00	; 0
    4b00:	88 5a       	subi	r24, 0xA8	; 168
    4b02:	9f 4f       	sbci	r25, 0xFF	; 255
    4b04:	b6 01       	movw	r22, r12
    4b06:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fputc>
    4b0a:	ea 94       	dec	r14
    4b0c:	f5 01       	movw	r30, r10
    4b0e:	ee 0d       	add	r30, r14
    4b10:	f1 1d       	adc	r31, r1
    4b12:	80 81       	ld	r24, Z
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	b6 01       	movw	r22, r12
    4b18:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fputc>
    4b1c:	ee 20       	and	r14, r14
    4b1e:	a9 f7       	brne	.-22     	; 0x4b0a <vfprintf+0x242>
    4b20:	fc ce       	rjmp	.-520    	; 0x491a <vfprintf+0x52>
    4b22:	f6 01       	movw	r30, r12
    4b24:	26 81       	ldd	r18, Z+6	; 0x06
    4b26:	37 81       	ldd	r19, Z+7	; 0x07
    4b28:	c9 01       	movw	r24, r18
    4b2a:	2d 96       	adiw	r28, 0x0d	; 13
    4b2c:	0f b6       	in	r0, 0x3f	; 63
    4b2e:	f8 94       	cli
    4b30:	de bf       	out	0x3e, r29	; 62
    4b32:	0f be       	out	0x3f, r0	; 63
    4b34:	cd bf       	out	0x3d, r28	; 61
    4b36:	cf 91       	pop	r28
    4b38:	df 91       	pop	r29
    4b3a:	1f 91       	pop	r17
    4b3c:	0f 91       	pop	r16
    4b3e:	ff 90       	pop	r15
    4b40:	ef 90       	pop	r14
    4b42:	df 90       	pop	r13
    4b44:	cf 90       	pop	r12
    4b46:	bf 90       	pop	r11
    4b48:	af 90       	pop	r10
    4b4a:	9f 90       	pop	r9
    4b4c:	8f 90       	pop	r8
    4b4e:	7f 90       	pop	r7
    4b50:	6f 90       	pop	r6
    4b52:	08 95       	ret

00004b54 <__mulsi3>:
    4b54:	62 9f       	mul	r22, r18
    4b56:	d0 01       	movw	r26, r0
    4b58:	73 9f       	mul	r23, r19
    4b5a:	f0 01       	movw	r30, r0
    4b5c:	82 9f       	mul	r24, r18
    4b5e:	e0 0d       	add	r30, r0
    4b60:	f1 1d       	adc	r31, r1
    4b62:	64 9f       	mul	r22, r20
    4b64:	e0 0d       	add	r30, r0
    4b66:	f1 1d       	adc	r31, r1
    4b68:	92 9f       	mul	r25, r18
    4b6a:	f0 0d       	add	r31, r0
    4b6c:	83 9f       	mul	r24, r19
    4b6e:	f0 0d       	add	r31, r0
    4b70:	74 9f       	mul	r23, r20
    4b72:	f0 0d       	add	r31, r0
    4b74:	65 9f       	mul	r22, r21
    4b76:	f0 0d       	add	r31, r0
    4b78:	99 27       	eor	r25, r25
    4b7a:	72 9f       	mul	r23, r18
    4b7c:	b0 0d       	add	r27, r0
    4b7e:	e1 1d       	adc	r30, r1
    4b80:	f9 1f       	adc	r31, r25
    4b82:	63 9f       	mul	r22, r19
    4b84:	b0 0d       	add	r27, r0
    4b86:	e1 1d       	adc	r30, r1
    4b88:	f9 1f       	adc	r31, r25
    4b8a:	bd 01       	movw	r22, r26
    4b8c:	cf 01       	movw	r24, r30
    4b8e:	11 24       	eor	r1, r1
    4b90:	08 95       	ret

00004b92 <__udivmodhi4>:
    4b92:	aa 1b       	sub	r26, r26
    4b94:	bb 1b       	sub	r27, r27
    4b96:	51 e1       	ldi	r21, 0x11	; 17
    4b98:	07 c0       	rjmp	.+14     	; 0x4ba8 <__udivmodhi4_ep>

00004b9a <__udivmodhi4_loop>:
    4b9a:	aa 1f       	adc	r26, r26
    4b9c:	bb 1f       	adc	r27, r27
    4b9e:	a6 17       	cp	r26, r22
    4ba0:	b7 07       	cpc	r27, r23
    4ba2:	10 f0       	brcs	.+4      	; 0x4ba8 <__udivmodhi4_ep>
    4ba4:	a6 1b       	sub	r26, r22
    4ba6:	b7 0b       	sbc	r27, r23

00004ba8 <__udivmodhi4_ep>:
    4ba8:	88 1f       	adc	r24, r24
    4baa:	99 1f       	adc	r25, r25
    4bac:	5a 95       	dec	r21
    4bae:	a9 f7       	brne	.-22     	; 0x4b9a <__udivmodhi4_loop>
    4bb0:	80 95       	com	r24
    4bb2:	90 95       	com	r25
    4bb4:	bc 01       	movw	r22, r24
    4bb6:	cd 01       	movw	r24, r26
    4bb8:	08 95       	ret

00004bba <__udivmodsi4>:
    4bba:	a1 e2       	ldi	r26, 0x21	; 33
    4bbc:	1a 2e       	mov	r1, r26
    4bbe:	aa 1b       	sub	r26, r26
    4bc0:	bb 1b       	sub	r27, r27
    4bc2:	fd 01       	movw	r30, r26
    4bc4:	0d c0       	rjmp	.+26     	; 0x4be0 <__udivmodsi4_ep>

00004bc6 <__udivmodsi4_loop>:
    4bc6:	aa 1f       	adc	r26, r26
    4bc8:	bb 1f       	adc	r27, r27
    4bca:	ee 1f       	adc	r30, r30
    4bcc:	ff 1f       	adc	r31, r31
    4bce:	a2 17       	cp	r26, r18
    4bd0:	b3 07       	cpc	r27, r19
    4bd2:	e4 07       	cpc	r30, r20
    4bd4:	f5 07       	cpc	r31, r21
    4bd6:	20 f0       	brcs	.+8      	; 0x4be0 <__udivmodsi4_ep>
    4bd8:	a2 1b       	sub	r26, r18
    4bda:	b3 0b       	sbc	r27, r19
    4bdc:	e4 0b       	sbc	r30, r20
    4bde:	f5 0b       	sbc	r31, r21

00004be0 <__udivmodsi4_ep>:
    4be0:	66 1f       	adc	r22, r22
    4be2:	77 1f       	adc	r23, r23
    4be4:	88 1f       	adc	r24, r24
    4be6:	99 1f       	adc	r25, r25
    4be8:	1a 94       	dec	r1
    4bea:	69 f7       	brne	.-38     	; 0x4bc6 <__udivmodsi4_loop>
    4bec:	60 95       	com	r22
    4bee:	70 95       	com	r23
    4bf0:	80 95       	com	r24
    4bf2:	90 95       	com	r25
    4bf4:	9b 01       	movw	r18, r22
    4bf6:	ac 01       	movw	r20, r24
    4bf8:	bd 01       	movw	r22, r26
    4bfa:	cf 01       	movw	r24, r30
    4bfc:	08 95       	ret

00004bfe <strchr_P>:
    4bfe:	fc 01       	movw	r30, r24
    4c00:	05 90       	lpm	r0, Z+
    4c02:	06 16       	cp	r0, r22
    4c04:	21 f0       	breq	.+8      	; 0x4c0e <strchr_P+0x10>
    4c06:	00 20       	and	r0, r0
    4c08:	d9 f7       	brne	.-10     	; 0x4c00 <strchr_P+0x2>
    4c0a:	c0 01       	movw	r24, r0
    4c0c:	08 95       	ret
    4c0e:	31 97       	sbiw	r30, 0x01	; 1
    4c10:	cf 01       	movw	r24, r30
    4c12:	08 95       	ret

00004c14 <fdevopen>:
    4c14:	0f 93       	push	r16
    4c16:	1f 93       	push	r17
    4c18:	cf 93       	push	r28
    4c1a:	df 93       	push	r29
    4c1c:	ec 01       	movw	r28, r24
    4c1e:	8b 01       	movw	r16, r22
    4c20:	00 97       	sbiw	r24, 0x00	; 0
    4c22:	31 f4       	brne	.+12     	; 0x4c30 <fdevopen+0x1c>
    4c24:	61 15       	cp	r22, r1
    4c26:	71 05       	cpc	r23, r1
    4c28:	19 f4       	brne	.+6      	; 0x4c30 <fdevopen+0x1c>
    4c2a:	20 e0       	ldi	r18, 0x00	; 0
    4c2c:	30 e0       	ldi	r19, 0x00	; 0
    4c2e:	38 c0       	rjmp	.+112    	; 0x4ca0 <fdevopen+0x8c>
    4c30:	81 e0       	ldi	r24, 0x01	; 1
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	6e e0       	ldi	r22, 0x0E	; 14
    4c36:	70 e0       	ldi	r23, 0x00	; 0
    4c38:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <calloc>
    4c3c:	fc 01       	movw	r30, r24
    4c3e:	9c 01       	movw	r18, r24
    4c40:	00 97       	sbiw	r24, 0x00	; 0
    4c42:	71 f1       	breq	.+92     	; 0x4ca0 <fdevopen+0x8c>
    4c44:	80 e8       	ldi	r24, 0x80	; 128
    4c46:	83 83       	std	Z+3, r24	; 0x03
    4c48:	01 15       	cp	r16, r1
    4c4a:	11 05       	cpc	r17, r1
    4c4c:	71 f0       	breq	.+28     	; 0x4c6a <fdevopen+0x56>
    4c4e:	13 87       	std	Z+11, r17	; 0x0b
    4c50:	02 87       	std	Z+10, r16	; 0x0a
    4c52:	81 e8       	ldi	r24, 0x81	; 129
    4c54:	83 83       	std	Z+3, r24	; 0x03
    4c56:	80 91 e5 08 	lds	r24, 0x08E5
    4c5a:	90 91 e6 08 	lds	r25, 0x08E6
    4c5e:	00 97       	sbiw	r24, 0x00	; 0
    4c60:	21 f4       	brne	.+8      	; 0x4c6a <fdevopen+0x56>
    4c62:	f0 93 e6 08 	sts	0x08E6, r31
    4c66:	e0 93 e5 08 	sts	0x08E5, r30
    4c6a:	20 97       	sbiw	r28, 0x00	; 0
    4c6c:	c9 f0       	breq	.+50     	; 0x4ca0 <fdevopen+0x8c>
    4c6e:	d1 87       	std	Z+9, r29	; 0x09
    4c70:	c0 87       	std	Z+8, r28	; 0x08
    4c72:	83 81       	ldd	r24, Z+3	; 0x03
    4c74:	82 60       	ori	r24, 0x02	; 2
    4c76:	83 83       	std	Z+3, r24	; 0x03
    4c78:	80 91 e7 08 	lds	r24, 0x08E7
    4c7c:	90 91 e8 08 	lds	r25, 0x08E8
    4c80:	00 97       	sbiw	r24, 0x00	; 0
    4c82:	71 f4       	brne	.+28     	; 0x4ca0 <fdevopen+0x8c>
    4c84:	f0 93 e8 08 	sts	0x08E8, r31
    4c88:	e0 93 e7 08 	sts	0x08E7, r30
    4c8c:	80 91 e9 08 	lds	r24, 0x08E9
    4c90:	90 91 ea 08 	lds	r25, 0x08EA
    4c94:	00 97       	sbiw	r24, 0x00	; 0
    4c96:	21 f4       	brne	.+8      	; 0x4ca0 <fdevopen+0x8c>
    4c98:	f0 93 ea 08 	sts	0x08EA, r31
    4c9c:	e0 93 e9 08 	sts	0x08E9, r30
    4ca0:	c9 01       	movw	r24, r18
    4ca2:	df 91       	pop	r29
    4ca4:	cf 91       	pop	r28
    4ca6:	1f 91       	pop	r17
    4ca8:	0f 91       	pop	r16
    4caa:	08 95       	ret

00004cac <fgetc>:
    4cac:	cf 93       	push	r28
    4cae:	df 93       	push	r29
    4cb0:	ec 01       	movw	r28, r24
    4cb2:	3b 81       	ldd	r19, Y+3	; 0x03
    4cb4:	30 ff       	sbrs	r19, 0
    4cb6:	17 c0       	rjmp	.+46     	; 0x4ce6 <fgetc+0x3a>
    4cb8:	36 ff       	sbrs	r19, 6
    4cba:	09 c0       	rjmp	.+18     	; 0x4cce <fgetc+0x22>
    4cbc:	3f 7b       	andi	r19, 0xBF	; 191
    4cbe:	3b 83       	std	Y+3, r19	; 0x03
    4cc0:	8e 81       	ldd	r24, Y+6	; 0x06
    4cc2:	9f 81       	ldd	r25, Y+7	; 0x07
    4cc4:	01 96       	adiw	r24, 0x01	; 1
    4cc6:	9f 83       	std	Y+7, r25	; 0x07
    4cc8:	8e 83       	std	Y+6, r24	; 0x06
    4cca:	2a 81       	ldd	r18, Y+2	; 0x02
    4ccc:	2b c0       	rjmp	.+86     	; 0x4d24 <fgetc+0x78>
    4cce:	32 ff       	sbrs	r19, 2
    4cd0:	11 c0       	rjmp	.+34     	; 0x4cf4 <fgetc+0x48>
    4cd2:	e8 81       	ld	r30, Y
    4cd4:	f9 81       	ldd	r31, Y+1	; 0x01
    4cd6:	80 81       	ld	r24, Z
    4cd8:	99 27       	eor	r25, r25
    4cda:	87 fd       	sbrc	r24, 7
    4cdc:	90 95       	com	r25
    4cde:	00 97       	sbiw	r24, 0x00	; 0
    4ce0:	29 f4       	brne	.+10     	; 0x4cec <fgetc+0x40>
    4ce2:	30 62       	ori	r19, 0x20	; 32
    4ce4:	3b 83       	std	Y+3, r19	; 0x03
    4ce6:	2f ef       	ldi	r18, 0xFF	; 255
    4ce8:	3f ef       	ldi	r19, 0xFF	; 255
    4cea:	1d c0       	rjmp	.+58     	; 0x4d26 <fgetc+0x7a>
    4cec:	31 96       	adiw	r30, 0x01	; 1
    4cee:	f9 83       	std	Y+1, r31	; 0x01
    4cf0:	e8 83       	st	Y, r30
    4cf2:	11 c0       	rjmp	.+34     	; 0x4d16 <fgetc+0x6a>
    4cf4:	ea 85       	ldd	r30, Y+10	; 0x0a
    4cf6:	fb 85       	ldd	r31, Y+11	; 0x0b
    4cf8:	ce 01       	movw	r24, r28
    4cfa:	09 95       	icall
    4cfc:	97 ff       	sbrs	r25, 7
    4cfe:	0b c0       	rjmp	.+22     	; 0x4d16 <fgetc+0x6a>
    4d00:	2b 81       	ldd	r18, Y+3	; 0x03
    4d02:	3f ef       	ldi	r19, 0xFF	; 255
    4d04:	8f 3f       	cpi	r24, 0xFF	; 255
    4d06:	93 07       	cpc	r25, r19
    4d08:	11 f0       	breq	.+4      	; 0x4d0e <fgetc+0x62>
    4d0a:	80 e2       	ldi	r24, 0x20	; 32
    4d0c:	01 c0       	rjmp	.+2      	; 0x4d10 <fgetc+0x64>
    4d0e:	80 e1       	ldi	r24, 0x10	; 16
    4d10:	82 2b       	or	r24, r18
    4d12:	8b 83       	std	Y+3, r24	; 0x03
    4d14:	e8 cf       	rjmp	.-48     	; 0x4ce6 <fgetc+0x3a>
    4d16:	2e 81       	ldd	r18, Y+6	; 0x06
    4d18:	3f 81       	ldd	r19, Y+7	; 0x07
    4d1a:	2f 5f       	subi	r18, 0xFF	; 255
    4d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d1e:	3f 83       	std	Y+7, r19	; 0x07
    4d20:	2e 83       	std	Y+6, r18	; 0x06
    4d22:	28 2f       	mov	r18, r24
    4d24:	30 e0       	ldi	r19, 0x00	; 0
    4d26:	c9 01       	movw	r24, r18
    4d28:	df 91       	pop	r29
    4d2a:	cf 91       	pop	r28
    4d2c:	08 95       	ret

00004d2e <fputc>:
    4d2e:	0f 93       	push	r16
    4d30:	1f 93       	push	r17
    4d32:	cf 93       	push	r28
    4d34:	df 93       	push	r29
    4d36:	8c 01       	movw	r16, r24
    4d38:	eb 01       	movw	r28, r22
    4d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d3c:	81 ff       	sbrs	r24, 1
    4d3e:	1b c0       	rjmp	.+54     	; 0x4d76 <fputc+0x48>
    4d40:	82 ff       	sbrs	r24, 2
    4d42:	0d c0       	rjmp	.+26     	; 0x4d5e <fputc+0x30>
    4d44:	2e 81       	ldd	r18, Y+6	; 0x06
    4d46:	3f 81       	ldd	r19, Y+7	; 0x07
    4d48:	8c 81       	ldd	r24, Y+4	; 0x04
    4d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    4d4c:	28 17       	cp	r18, r24
    4d4e:	39 07       	cpc	r19, r25
    4d50:	64 f4       	brge	.+24     	; 0x4d6a <fputc+0x3c>
    4d52:	e8 81       	ld	r30, Y
    4d54:	f9 81       	ldd	r31, Y+1	; 0x01
    4d56:	01 93       	st	Z+, r16
    4d58:	f9 83       	std	Y+1, r31	; 0x01
    4d5a:	e8 83       	st	Y, r30
    4d5c:	06 c0       	rjmp	.+12     	; 0x4d6a <fputc+0x3c>
    4d5e:	e8 85       	ldd	r30, Y+8	; 0x08
    4d60:	f9 85       	ldd	r31, Y+9	; 0x09
    4d62:	80 2f       	mov	r24, r16
    4d64:	09 95       	icall
    4d66:	00 97       	sbiw	r24, 0x00	; 0
    4d68:	31 f4       	brne	.+12     	; 0x4d76 <fputc+0x48>
    4d6a:	8e 81       	ldd	r24, Y+6	; 0x06
    4d6c:	9f 81       	ldd	r25, Y+7	; 0x07
    4d6e:	01 96       	adiw	r24, 0x01	; 1
    4d70:	9f 83       	std	Y+7, r25	; 0x07
    4d72:	8e 83       	std	Y+6, r24	; 0x06
    4d74:	02 c0       	rjmp	.+4      	; 0x4d7a <fputc+0x4c>
    4d76:	0f ef       	ldi	r16, 0xFF	; 255
    4d78:	1f ef       	ldi	r17, 0xFF	; 255
    4d7a:	c8 01       	movw	r24, r16
    4d7c:	df 91       	pop	r29
    4d7e:	cf 91       	pop	r28
    4d80:	1f 91       	pop	r17
    4d82:	0f 91       	pop	r16
    4d84:	08 95       	ret

00004d86 <printf>:
    4d86:	df 93       	push	r29
    4d88:	cf 93       	push	r28
    4d8a:	cd b7       	in	r28, 0x3d	; 61
    4d8c:	de b7       	in	r29, 0x3e	; 62
    4d8e:	fe 01       	movw	r30, r28
    4d90:	35 96       	adiw	r30, 0x05	; 5
    4d92:	61 91       	ld	r22, Z+
    4d94:	71 91       	ld	r23, Z+
    4d96:	80 91 e7 08 	lds	r24, 0x08E7
    4d9a:	90 91 e8 08 	lds	r25, 0x08E8
    4d9e:	af 01       	movw	r20, r30
    4da0:	0e 94 64 24 	call	0x48c8	; 0x48c8 <vfprintf>
    4da4:	cf 91       	pop	r28
    4da6:	df 91       	pop	r29
    4da8:	08 95       	ret

00004daa <putchar>:
    4daa:	60 91 e7 08 	lds	r22, 0x08E7
    4dae:	70 91 e8 08 	lds	r23, 0x08E8
    4db2:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fputc>
    4db6:	08 95       	ret

00004db8 <puts>:
    4db8:	ef 92       	push	r14
    4dba:	ff 92       	push	r15
    4dbc:	0f 93       	push	r16
    4dbe:	1f 93       	push	r17
    4dc0:	cf 93       	push	r28
    4dc2:	df 93       	push	r29
    4dc4:	8c 01       	movw	r16, r24
    4dc6:	e0 91 e7 08 	lds	r30, 0x08E7
    4dca:	f0 91 e8 08 	lds	r31, 0x08E8
    4dce:	83 81       	ldd	r24, Z+3	; 0x03
    4dd0:	81 ff       	sbrs	r24, 1
    4dd2:	23 c0       	rjmp	.+70     	; 0x4e1a <puts+0x62>
    4dd4:	c0 e0       	ldi	r28, 0x00	; 0
    4dd6:	d0 e0       	ldi	r29, 0x00	; 0
    4dd8:	0e c0       	rjmp	.+28     	; 0x4df6 <puts+0x3e>
    4dda:	60 91 e7 08 	lds	r22, 0x08E7
    4dde:	70 91 e8 08 	lds	r23, 0x08E8
    4de2:	db 01       	movw	r26, r22
    4de4:	18 96       	adiw	r26, 0x08	; 8
    4de6:	ed 91       	ld	r30, X+
    4de8:	fc 91       	ld	r31, X
    4dea:	19 97       	sbiw	r26, 0x09	; 9
    4dec:	09 95       	icall
    4dee:	00 97       	sbiw	r24, 0x00	; 0
    4df0:	11 f0       	breq	.+4      	; 0x4df6 <puts+0x3e>
    4df2:	cf ef       	ldi	r28, 0xFF	; 255
    4df4:	df ef       	ldi	r29, 0xFF	; 255
    4df6:	f8 01       	movw	r30, r16
    4df8:	81 91       	ld	r24, Z+
    4dfa:	8f 01       	movw	r16, r30
    4dfc:	88 23       	and	r24, r24
    4dfe:	69 f7       	brne	.-38     	; 0x4dda <puts+0x22>
    4e00:	60 91 e7 08 	lds	r22, 0x08E7
    4e04:	70 91 e8 08 	lds	r23, 0x08E8
    4e08:	db 01       	movw	r26, r22
    4e0a:	18 96       	adiw	r26, 0x08	; 8
    4e0c:	ed 91       	ld	r30, X+
    4e0e:	fc 91       	ld	r31, X
    4e10:	19 97       	sbiw	r26, 0x09	; 9
    4e12:	8a e0       	ldi	r24, 0x0A	; 10
    4e14:	09 95       	icall
    4e16:	00 97       	sbiw	r24, 0x00	; 0
    4e18:	11 f0       	breq	.+4      	; 0x4e1e <puts+0x66>
    4e1a:	cf ef       	ldi	r28, 0xFF	; 255
    4e1c:	df ef       	ldi	r29, 0xFF	; 255
    4e1e:	ce 01       	movw	r24, r28
    4e20:	df 91       	pop	r29
    4e22:	cf 91       	pop	r28
    4e24:	1f 91       	pop	r17
    4e26:	0f 91       	pop	r16
    4e28:	ff 90       	pop	r15
    4e2a:	ef 90       	pop	r14
    4e2c:	08 95       	ret

00004e2e <__ultoa_invert>:
    4e2e:	fa 01       	movw	r30, r20
    4e30:	aa 27       	eor	r26, r26
    4e32:	28 30       	cpi	r18, 0x08	; 8
    4e34:	51 f1       	breq	.+84     	; 0x4e8a <__ultoa_invert+0x5c>
    4e36:	20 31       	cpi	r18, 0x10	; 16
    4e38:	81 f1       	breq	.+96     	; 0x4e9a <__ultoa_invert+0x6c>
    4e3a:	e8 94       	clt
    4e3c:	6f 93       	push	r22
    4e3e:	6e 7f       	andi	r22, 0xFE	; 254
    4e40:	6e 5f       	subi	r22, 0xFE	; 254
    4e42:	7f 4f       	sbci	r23, 0xFF	; 255
    4e44:	8f 4f       	sbci	r24, 0xFF	; 255
    4e46:	9f 4f       	sbci	r25, 0xFF	; 255
    4e48:	af 4f       	sbci	r26, 0xFF	; 255
    4e4a:	b1 e0       	ldi	r27, 0x01	; 1
    4e4c:	3e d0       	rcall	.+124    	; 0x4eca <__ultoa_invert+0x9c>
    4e4e:	b4 e0       	ldi	r27, 0x04	; 4
    4e50:	3c d0       	rcall	.+120    	; 0x4eca <__ultoa_invert+0x9c>
    4e52:	67 0f       	add	r22, r23
    4e54:	78 1f       	adc	r23, r24
    4e56:	89 1f       	adc	r24, r25
    4e58:	9a 1f       	adc	r25, r26
    4e5a:	a1 1d       	adc	r26, r1
    4e5c:	68 0f       	add	r22, r24
    4e5e:	79 1f       	adc	r23, r25
    4e60:	8a 1f       	adc	r24, r26
    4e62:	91 1d       	adc	r25, r1
    4e64:	a1 1d       	adc	r26, r1
    4e66:	6a 0f       	add	r22, r26
    4e68:	71 1d       	adc	r23, r1
    4e6a:	81 1d       	adc	r24, r1
    4e6c:	91 1d       	adc	r25, r1
    4e6e:	a1 1d       	adc	r26, r1
    4e70:	20 d0       	rcall	.+64     	; 0x4eb2 <__ultoa_invert+0x84>
    4e72:	09 f4       	brne	.+2      	; 0x4e76 <__ultoa_invert+0x48>
    4e74:	68 94       	set
    4e76:	3f 91       	pop	r19
    4e78:	2a e0       	ldi	r18, 0x0A	; 10
    4e7a:	26 9f       	mul	r18, r22
    4e7c:	11 24       	eor	r1, r1
    4e7e:	30 19       	sub	r19, r0
    4e80:	30 5d       	subi	r19, 0xD0	; 208
    4e82:	31 93       	st	Z+, r19
    4e84:	de f6       	brtc	.-74     	; 0x4e3c <__ultoa_invert+0xe>
    4e86:	cf 01       	movw	r24, r30
    4e88:	08 95       	ret
    4e8a:	46 2f       	mov	r20, r22
    4e8c:	47 70       	andi	r20, 0x07	; 7
    4e8e:	40 5d       	subi	r20, 0xD0	; 208
    4e90:	41 93       	st	Z+, r20
    4e92:	b3 e0       	ldi	r27, 0x03	; 3
    4e94:	0f d0       	rcall	.+30     	; 0x4eb4 <__ultoa_invert+0x86>
    4e96:	c9 f7       	brne	.-14     	; 0x4e8a <__ultoa_invert+0x5c>
    4e98:	f6 cf       	rjmp	.-20     	; 0x4e86 <__ultoa_invert+0x58>
    4e9a:	46 2f       	mov	r20, r22
    4e9c:	4f 70       	andi	r20, 0x0F	; 15
    4e9e:	40 5d       	subi	r20, 0xD0	; 208
    4ea0:	4a 33       	cpi	r20, 0x3A	; 58
    4ea2:	18 f0       	brcs	.+6      	; 0x4eaa <__ultoa_invert+0x7c>
    4ea4:	49 5d       	subi	r20, 0xD9	; 217
    4ea6:	31 fd       	sbrc	r19, 1
    4ea8:	40 52       	subi	r20, 0x20	; 32
    4eaa:	41 93       	st	Z+, r20
    4eac:	02 d0       	rcall	.+4      	; 0x4eb2 <__ultoa_invert+0x84>
    4eae:	a9 f7       	brne	.-22     	; 0x4e9a <__ultoa_invert+0x6c>
    4eb0:	ea cf       	rjmp	.-44     	; 0x4e86 <__ultoa_invert+0x58>
    4eb2:	b4 e0       	ldi	r27, 0x04	; 4
    4eb4:	a6 95       	lsr	r26
    4eb6:	97 95       	ror	r25
    4eb8:	87 95       	ror	r24
    4eba:	77 95       	ror	r23
    4ebc:	67 95       	ror	r22
    4ebe:	ba 95       	dec	r27
    4ec0:	c9 f7       	brne	.-14     	; 0x4eb4 <__ultoa_invert+0x86>
    4ec2:	00 97       	sbiw	r24, 0x00	; 0
    4ec4:	61 05       	cpc	r22, r1
    4ec6:	71 05       	cpc	r23, r1
    4ec8:	08 95       	ret
    4eca:	9b 01       	movw	r18, r22
    4ecc:	ac 01       	movw	r20, r24
    4ece:	0a 2e       	mov	r0, r26
    4ed0:	06 94       	lsr	r0
    4ed2:	57 95       	ror	r21
    4ed4:	47 95       	ror	r20
    4ed6:	37 95       	ror	r19
    4ed8:	27 95       	ror	r18
    4eda:	ba 95       	dec	r27
    4edc:	c9 f7       	brne	.-14     	; 0x4ed0 <__ultoa_invert+0xa2>
    4ede:	62 0f       	add	r22, r18
    4ee0:	73 1f       	adc	r23, r19
    4ee2:	84 1f       	adc	r24, r20
    4ee4:	95 1f       	adc	r25, r21
    4ee6:	a0 1d       	adc	r26, r0
    4ee8:	08 95       	ret

00004eea <__eerd_byte_m1281>:
    4eea:	f9 99       	sbic	0x1f, 1	; 31
    4eec:	fe cf       	rjmp	.-4      	; 0x4eea <__eerd_byte_m1281>
    4eee:	92 bd       	out	0x22, r25	; 34
    4ef0:	81 bd       	out	0x21, r24	; 33
    4ef2:	f8 9a       	sbi	0x1f, 0	; 31
    4ef4:	99 27       	eor	r25, r25
    4ef6:	80 b5       	in	r24, 0x20	; 32
    4ef8:	08 95       	ret

00004efa <__eewr_byte_m1281>:
    4efa:	26 2f       	mov	r18, r22

00004efc <__eewr_r18_m1281>:
    4efc:	f9 99       	sbic	0x1f, 1	; 31
    4efe:	fe cf       	rjmp	.-4      	; 0x4efc <__eewr_r18_m1281>
    4f00:	1f ba       	out	0x1f, r1	; 31
    4f02:	92 bd       	out	0x22, r25	; 34
    4f04:	81 bd       	out	0x21, r24	; 33
    4f06:	20 bd       	out	0x20, r18	; 32
    4f08:	0f b6       	in	r0, 0x3f	; 63
    4f0a:	f8 94       	cli
    4f0c:	fa 9a       	sbi	0x1f, 2	; 31
    4f0e:	f9 9a       	sbi	0x1f, 1	; 31
    4f10:	0f be       	out	0x3f, r0	; 63
    4f12:	01 96       	adiw	r24, 0x01	; 1
    4f14:	08 95       	ret

00004f16 <calloc>:
    4f16:	ef 92       	push	r14
    4f18:	ff 92       	push	r15
    4f1a:	0f 93       	push	r16
    4f1c:	1f 93       	push	r17
    4f1e:	cf 93       	push	r28
    4f20:	df 93       	push	r29
    4f22:	68 9f       	mul	r22, r24
    4f24:	80 01       	movw	r16, r0
    4f26:	69 9f       	mul	r22, r25
    4f28:	10 0d       	add	r17, r0
    4f2a:	78 9f       	mul	r23, r24
    4f2c:	10 0d       	add	r17, r0
    4f2e:	11 24       	eor	r1, r1
    4f30:	c8 01       	movw	r24, r16
    4f32:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <malloc>
    4f36:	e8 2e       	mov	r14, r24
    4f38:	e7 01       	movw	r28, r14
    4f3a:	7e 01       	movw	r14, r28
    4f3c:	f9 2e       	mov	r15, r25
    4f3e:	e7 01       	movw	r28, r14
    4f40:	e1 14       	cp	r14, r1
    4f42:	f1 04       	cpc	r15, r1
    4f44:	31 f0       	breq	.+12     	; 0x4f52 <calloc+0x3c>
    4f46:	8e 2d       	mov	r24, r14
    4f48:	60 e0       	ldi	r22, 0x00	; 0
    4f4a:	70 e0       	ldi	r23, 0x00	; 0
    4f4c:	a8 01       	movw	r20, r16
    4f4e:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <memset>
    4f52:	ce 01       	movw	r24, r28
    4f54:	df 91       	pop	r29
    4f56:	cf 91       	pop	r28
    4f58:	1f 91       	pop	r17
    4f5a:	0f 91       	pop	r16
    4f5c:	ff 90       	pop	r15
    4f5e:	ef 90       	pop	r14
    4f60:	08 95       	ret

00004f62 <malloc>:
    4f62:	ef 92       	push	r14
    4f64:	ff 92       	push	r15
    4f66:	0f 93       	push	r16
    4f68:	1f 93       	push	r17
    4f6a:	cf 93       	push	r28
    4f6c:	df 93       	push	r29
    4f6e:	82 30       	cpi	r24, 0x02	; 2
    4f70:	91 05       	cpc	r25, r1
    4f72:	10 f4       	brcc	.+4      	; 0x4f78 <malloc+0x16>
    4f74:	82 e0       	ldi	r24, 0x02	; 2
    4f76:	90 e0       	ldi	r25, 0x00	; 0
    4f78:	c0 91 ed 08 	lds	r28, 0x08ED
    4f7c:	d0 91 ee 08 	lds	r29, 0x08EE
    4f80:	40 e0       	ldi	r20, 0x00	; 0
    4f82:	50 e0       	ldi	r21, 0x00	; 0
    4f84:	20 e0       	ldi	r18, 0x00	; 0
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	28 c0       	rjmp	.+80     	; 0x4fda <malloc+0x78>
    4f8a:	68 81       	ld	r22, Y
    4f8c:	79 81       	ldd	r23, Y+1	; 0x01
    4f8e:	68 17       	cp	r22, r24
    4f90:	79 07       	cpc	r23, r25
    4f92:	d8 f0       	brcs	.+54     	; 0x4fca <malloc+0x68>
    4f94:	68 17       	cp	r22, r24
    4f96:	79 07       	cpc	r23, r25
    4f98:	79 f4       	brne	.+30     	; 0x4fb8 <malloc+0x56>
    4f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    4f9e:	21 15       	cp	r18, r1
    4fa0:	31 05       	cpc	r19, r1
    4fa2:	21 f0       	breq	.+8      	; 0x4fac <malloc+0x4a>
    4fa4:	f9 01       	movw	r30, r18
    4fa6:	93 83       	std	Z+3, r25	; 0x03
    4fa8:	82 83       	std	Z+2, r24	; 0x02
    4faa:	04 c0       	rjmp	.+8      	; 0x4fb4 <malloc+0x52>
    4fac:	90 93 ee 08 	sts	0x08EE, r25
    4fb0:	80 93 ed 08 	sts	0x08ED, r24
    4fb4:	de 01       	movw	r26, r28
    4fb6:	29 c0       	rjmp	.+82     	; 0x500a <malloc+0xa8>
    4fb8:	41 15       	cp	r20, r1
    4fba:	51 05       	cpc	r21, r1
    4fbc:	19 f0       	breq	.+6      	; 0x4fc4 <malloc+0x62>
    4fbe:	64 17       	cp	r22, r20
    4fc0:	75 07       	cpc	r23, r21
    4fc2:	18 f4       	brcc	.+6      	; 0x4fca <malloc+0x68>
    4fc4:	ab 01       	movw	r20, r22
    4fc6:	d9 01       	movw	r26, r18
    4fc8:	fe 01       	movw	r30, r28
    4fca:	9e 01       	movw	r18, r28
    4fcc:	7a 81       	ldd	r23, Y+2	; 0x02
    4fce:	6b 81       	ldd	r22, Y+3	; 0x03
    4fd0:	e7 2e       	mov	r14, r23
    4fd2:	e7 01       	movw	r28, r14
    4fd4:	7e 01       	movw	r14, r28
    4fd6:	f6 2e       	mov	r15, r22
    4fd8:	e7 01       	movw	r28, r14
    4fda:	20 97       	sbiw	r28, 0x00	; 0
    4fdc:	b1 f6       	brne	.-84     	; 0x4f8a <malloc+0x28>
    4fde:	41 15       	cp	r20, r1
    4fe0:	51 05       	cpc	r21, r1
    4fe2:	f9 f0       	breq	.+62     	; 0x5022 <malloc+0xc0>
    4fe4:	48 1b       	sub	r20, r24
    4fe6:	59 0b       	sbc	r21, r25
    4fe8:	44 30       	cpi	r20, 0x04	; 4
    4fea:	51 05       	cpc	r21, r1
    4fec:	80 f4       	brcc	.+32     	; 0x500e <malloc+0xac>
    4fee:	82 81       	ldd	r24, Z+2	; 0x02
    4ff0:	93 81       	ldd	r25, Z+3	; 0x03
    4ff2:	10 97       	sbiw	r26, 0x00	; 0
    4ff4:	29 f0       	breq	.+10     	; 0x5000 <malloc+0x9e>
    4ff6:	13 96       	adiw	r26, 0x03	; 3
    4ff8:	9c 93       	st	X, r25
    4ffa:	8e 93       	st	-X, r24
    4ffc:	12 97       	sbiw	r26, 0x02	; 2
    4ffe:	04 c0       	rjmp	.+8      	; 0x5008 <malloc+0xa6>
    5000:	90 93 ee 08 	sts	0x08EE, r25
    5004:	80 93 ed 08 	sts	0x08ED, r24
    5008:	df 01       	movw	r26, r30
    500a:	12 96       	adiw	r26, 0x02	; 2
    500c:	45 c0       	rjmp	.+138    	; 0x5098 <malloc+0x136>
    500e:	df 01       	movw	r26, r30
    5010:	a4 0f       	add	r26, r20
    5012:	b5 1f       	adc	r27, r21
    5014:	8d 93       	st	X+, r24
    5016:	9d 93       	st	X+, r25
    5018:	42 50       	subi	r20, 0x02	; 2
    501a:	50 40       	sbci	r21, 0x00	; 0
    501c:	51 83       	std	Z+1, r21	; 0x01
    501e:	40 83       	st	Z, r20
    5020:	3b c0       	rjmp	.+118    	; 0x5098 <malloc+0x136>
    5022:	20 91 eb 08 	lds	r18, 0x08EB
    5026:	30 91 ec 08 	lds	r19, 0x08EC
    502a:	21 15       	cp	r18, r1
    502c:	31 05       	cpc	r19, r1
    502e:	41 f4       	brne	.+16     	; 0x5040 <malloc+0xde>
    5030:	20 91 c5 02 	lds	r18, 0x02C5
    5034:	30 91 c6 02 	lds	r19, 0x02C6
    5038:	30 93 ec 08 	sts	0x08EC, r19
    503c:	20 93 eb 08 	sts	0x08EB, r18
    5040:	20 91 c7 02 	lds	r18, 0x02C7
    5044:	30 91 c8 02 	lds	r19, 0x02C8
    5048:	21 15       	cp	r18, r1
    504a:	31 05       	cpc	r19, r1
    504c:	41 f4       	brne	.+16     	; 0x505e <malloc+0xfc>
    504e:	2d b7       	in	r18, 0x3d	; 61
    5050:	3e b7       	in	r19, 0x3e	; 62
    5052:	40 91 c3 02 	lds	r20, 0x02C3
    5056:	50 91 c4 02 	lds	r21, 0x02C4
    505a:	24 1b       	sub	r18, r20
    505c:	35 0b       	sbc	r19, r21
    505e:	a0 91 eb 08 	lds	r26, 0x08EB
    5062:	b0 91 ec 08 	lds	r27, 0x08EC
    5066:	a2 17       	cp	r26, r18
    5068:	b3 07       	cpc	r27, r19
    506a:	a0 f4       	brcc	.+40     	; 0x5094 <malloc+0x132>
    506c:	2a 1b       	sub	r18, r26
    506e:	3b 0b       	sbc	r19, r27
    5070:	28 17       	cp	r18, r24
    5072:	39 07       	cpc	r19, r25
    5074:	78 f0       	brcs	.+30     	; 0x5094 <malloc+0x132>
    5076:	ac 01       	movw	r20, r24
    5078:	4e 5f       	subi	r20, 0xFE	; 254
    507a:	5f 4f       	sbci	r21, 0xFF	; 255
    507c:	24 17       	cp	r18, r20
    507e:	35 07       	cpc	r19, r21
    5080:	48 f0       	brcs	.+18     	; 0x5094 <malloc+0x132>
    5082:	4a 0f       	add	r20, r26
    5084:	5b 1f       	adc	r21, r27
    5086:	50 93 ec 08 	sts	0x08EC, r21
    508a:	40 93 eb 08 	sts	0x08EB, r20
    508e:	8d 93       	st	X+, r24
    5090:	9d 93       	st	X+, r25
    5092:	02 c0       	rjmp	.+4      	; 0x5098 <malloc+0x136>
    5094:	a0 e0       	ldi	r26, 0x00	; 0
    5096:	b0 e0       	ldi	r27, 0x00	; 0
    5098:	cd 01       	movw	r24, r26
    509a:	df 91       	pop	r29
    509c:	cf 91       	pop	r28
    509e:	1f 91       	pop	r17
    50a0:	0f 91       	pop	r16
    50a2:	ff 90       	pop	r15
    50a4:	ef 90       	pop	r14
    50a6:	08 95       	ret

000050a8 <free>:
    50a8:	cf 93       	push	r28
    50aa:	df 93       	push	r29
    50ac:	00 97       	sbiw	r24, 0x00	; 0
    50ae:	09 f4       	brne	.+2      	; 0x50b2 <free+0xa>
    50b0:	8f c0       	rjmp	.+286    	; 0x51d0 <free+0x128>
    50b2:	fc 01       	movw	r30, r24
    50b4:	32 97       	sbiw	r30, 0x02	; 2
    50b6:	13 82       	std	Z+3, r1	; 0x03
    50b8:	12 82       	std	Z+2, r1	; 0x02
    50ba:	60 91 ed 08 	lds	r22, 0x08ED
    50be:	70 91 ee 08 	lds	r23, 0x08EE
    50c2:	61 15       	cp	r22, r1
    50c4:	71 05       	cpc	r23, r1
    50c6:	81 f4       	brne	.+32     	; 0x50e8 <free+0x40>
    50c8:	20 81       	ld	r18, Z
    50ca:	31 81       	ldd	r19, Z+1	; 0x01
    50cc:	28 0f       	add	r18, r24
    50ce:	39 1f       	adc	r19, r25
    50d0:	80 91 eb 08 	lds	r24, 0x08EB
    50d4:	90 91 ec 08 	lds	r25, 0x08EC
    50d8:	82 17       	cp	r24, r18
    50da:	93 07       	cpc	r25, r19
    50dc:	61 f5       	brne	.+88     	; 0x5136 <free+0x8e>
    50de:	f0 93 ec 08 	sts	0x08EC, r31
    50e2:	e0 93 eb 08 	sts	0x08EB, r30
    50e6:	74 c0       	rjmp	.+232    	; 0x51d0 <free+0x128>
    50e8:	eb 01       	movw	r28, r22
    50ea:	80 e0       	ldi	r24, 0x00	; 0
    50ec:	90 e0       	ldi	r25, 0x00	; 0
    50ee:	ce 17       	cp	r28, r30
    50f0:	df 07       	cpc	r29, r31
    50f2:	40 f4       	brcc	.+16     	; 0x5104 <free+0x5c>
    50f4:	2a 81       	ldd	r18, Y+2	; 0x02
    50f6:	3b 81       	ldd	r19, Y+3	; 0x03
    50f8:	ce 01       	movw	r24, r28
    50fa:	21 15       	cp	r18, r1
    50fc:	31 05       	cpc	r19, r1
    50fe:	01 f1       	breq	.+64     	; 0x5140 <free+0x98>
    5100:	e9 01       	movw	r28, r18
    5102:	f5 cf       	rjmp	.-22     	; 0x50ee <free+0x46>
    5104:	d3 83       	std	Z+3, r29	; 0x03
    5106:	c2 83       	std	Z+2, r28	; 0x02
    5108:	df 01       	movw	r26, r30
    510a:	4d 91       	ld	r20, X+
    510c:	5d 91       	ld	r21, X+
    510e:	9d 01       	movw	r18, r26
    5110:	24 0f       	add	r18, r20
    5112:	35 1f       	adc	r19, r21
    5114:	c2 17       	cp	r28, r18
    5116:	d3 07       	cpc	r29, r19
    5118:	61 f4       	brne	.+24     	; 0x5132 <free+0x8a>
    511a:	28 81       	ld	r18, Y
    511c:	39 81       	ldd	r19, Y+1	; 0x01
    511e:	24 0f       	add	r18, r20
    5120:	35 1f       	adc	r19, r21
    5122:	2e 5f       	subi	r18, 0xFE	; 254
    5124:	3f 4f       	sbci	r19, 0xFF	; 255
    5126:	31 83       	std	Z+1, r19	; 0x01
    5128:	20 83       	st	Z, r18
    512a:	2a 81       	ldd	r18, Y+2	; 0x02
    512c:	3b 81       	ldd	r19, Y+3	; 0x03
    512e:	33 83       	std	Z+3, r19	; 0x03
    5130:	22 83       	std	Z+2, r18	; 0x02
    5132:	00 97       	sbiw	r24, 0x00	; 0
    5134:	29 f4       	brne	.+10     	; 0x5140 <free+0x98>
    5136:	f0 93 ee 08 	sts	0x08EE, r31
    513a:	e0 93 ed 08 	sts	0x08ED, r30
    513e:	48 c0       	rjmp	.+144    	; 0x51d0 <free+0x128>
    5140:	dc 01       	movw	r26, r24
    5142:	13 96       	adiw	r26, 0x03	; 3
    5144:	fc 93       	st	X, r31
    5146:	ee 93       	st	-X, r30
    5148:	12 97       	sbiw	r26, 0x02	; 2
    514a:	ec 01       	movw	r28, r24
    514c:	49 91       	ld	r20, Y+
    514e:	59 91       	ld	r21, Y+
    5150:	c4 0f       	add	r28, r20
    5152:	d5 1f       	adc	r29, r21
    5154:	ec 17       	cp	r30, r28
    5156:	fd 07       	cpc	r31, r29
    5158:	79 f4       	brne	.+30     	; 0x5178 <free+0xd0>
    515a:	20 81       	ld	r18, Z
    515c:	31 81       	ldd	r19, Z+1	; 0x01
    515e:	24 0f       	add	r18, r20
    5160:	35 1f       	adc	r19, r21
    5162:	2e 5f       	subi	r18, 0xFE	; 254
    5164:	3f 4f       	sbci	r19, 0xFF	; 255
    5166:	11 96       	adiw	r26, 0x01	; 1
    5168:	3c 93       	st	X, r19
    516a:	2e 93       	st	-X, r18
    516c:	22 81       	ldd	r18, Z+2	; 0x02
    516e:	33 81       	ldd	r19, Z+3	; 0x03
    5170:	13 96       	adiw	r26, 0x03	; 3
    5172:	3c 93       	st	X, r19
    5174:	2e 93       	st	-X, r18
    5176:	12 97       	sbiw	r26, 0x02	; 2
    5178:	e0 e0       	ldi	r30, 0x00	; 0
    517a:	f0 e0       	ldi	r31, 0x00	; 0
    517c:	db 01       	movw	r26, r22
    517e:	12 96       	adiw	r26, 0x02	; 2
    5180:	8d 91       	ld	r24, X+
    5182:	9c 91       	ld	r25, X
    5184:	13 97       	sbiw	r26, 0x03	; 3
    5186:	00 97       	sbiw	r24, 0x00	; 0
    5188:	21 f0       	breq	.+8      	; 0x5192 <free+0xea>
    518a:	e6 2f       	mov	r30, r22
    518c:	f7 2f       	mov	r31, r23
    518e:	bc 01       	movw	r22, r24
    5190:	f5 cf       	rjmp	.-22     	; 0x517c <free+0xd4>
    5192:	9b 01       	movw	r18, r22
    5194:	2e 5f       	subi	r18, 0xFE	; 254
    5196:	3f 4f       	sbci	r19, 0xFF	; 255
    5198:	db 01       	movw	r26, r22
    519a:	8d 91       	ld	r24, X+
    519c:	9c 91       	ld	r25, X
    519e:	11 97       	sbiw	r26, 0x01	; 1
    51a0:	82 0f       	add	r24, r18
    51a2:	93 1f       	adc	r25, r19
    51a4:	40 91 eb 08 	lds	r20, 0x08EB
    51a8:	50 91 ec 08 	lds	r21, 0x08EC
    51ac:	48 17       	cp	r20, r24
    51ae:	59 07       	cpc	r21, r25
    51b0:	79 f4       	brne	.+30     	; 0x51d0 <free+0x128>
    51b2:	30 97       	sbiw	r30, 0x00	; 0
    51b4:	29 f4       	brne	.+10     	; 0x51c0 <free+0x118>
    51b6:	10 92 ee 08 	sts	0x08EE, r1
    51ba:	10 92 ed 08 	sts	0x08ED, r1
    51be:	02 c0       	rjmp	.+4      	; 0x51c4 <free+0x11c>
    51c0:	13 82       	std	Z+3, r1	; 0x03
    51c2:	12 82       	std	Z+2, r1	; 0x02
    51c4:	22 50       	subi	r18, 0x02	; 2
    51c6:	30 40       	sbci	r19, 0x00	; 0
    51c8:	30 93 ec 08 	sts	0x08EC, r19
    51cc:	20 93 eb 08 	sts	0x08EB, r18
    51d0:	df 91       	pop	r29
    51d2:	cf 91       	pop	r28
    51d4:	08 95       	ret

000051d6 <memset>:
    51d6:	dc 01       	movw	r26, r24
    51d8:	01 c0       	rjmp	.+2      	; 0x51dc <memset+0x6>
    51da:	6d 93       	st	X+, r22
    51dc:	41 50       	subi	r20, 0x01	; 1
    51de:	50 40       	sbci	r21, 0x00	; 0
    51e0:	e0 f7       	brcc	.-8      	; 0x51da <memset+0x4>
    51e2:	08 95       	ret

000051e4 <_exit>:
    51e4:	f8 94       	cli

000051e6 <__stop_program>:
    51e6:	ff cf       	rjmp	.-2      	; 0x51e6 <__stop_program>
