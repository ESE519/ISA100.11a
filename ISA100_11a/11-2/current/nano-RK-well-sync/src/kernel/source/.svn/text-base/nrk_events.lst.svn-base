   1               		.file	"nrk_events.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 126               	.global	nrk_signal_create
 128               	nrk_signal_create:
 129               		.stabd	46,0,0
   1:../../../src/kernel/source/nrk_events.c **** /******************************************************************************
   2:../../../src/kernel/source/nrk_events.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/kernel/source/nrk_events.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/kernel/source/nrk_events.c **** *  All rights reserved.
   5:../../../src/kernel/source/nrk_events.c **** *
   6:../../../src/kernel/source/nrk_events.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/kernel/source/nrk_events.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/kernel/source/nrk_events.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/kernel/source/nrk_events.c **** *
  10:../../../src/kernel/source/nrk_events.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/kernel/source/nrk_events.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/kernel/source/nrk_events.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/kernel/source/nrk_events.c **** *
  14:../../../src/kernel/source/nrk_events.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/kernel/source/nrk_events.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/kernel/source/nrk_events.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/kernel/source/nrk_events.c **** *  GNU General Public License for more details.
  18:../../../src/kernel/source/nrk_events.c **** *
  19:../../../src/kernel/source/nrk_events.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/kernel/source/nrk_events.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/kernel/source/nrk_events.c **** *
  22:../../../src/kernel/source/nrk_events.c **** *  Contributing Authors (specific to this file):
  23:../../../src/kernel/source/nrk_events.c **** *  Anthony Rowe
  24:../../../src/kernel/source/nrk_events.c **** *  Zane Starr
  25:../../../src/kernel/source/nrk_events.c **** *******************************************************************************/
  26:../../../src/kernel/source/nrk_events.c **** 
  27:../../../src/kernel/source/nrk_events.c **** #include <nrk.h>
  28:../../../src/kernel/source/nrk_events.c **** #include <nrk_events.h>
  29:../../../src/kernel/source/nrk_events.c **** #include <nrk_task.h>
  30:../../../src/kernel/source/nrk_events.c **** #include <nrk_error.h>
  31:../../../src/kernel/source/nrk_events.c **** #include <nrk_scheduler.h>
  32:../../../src/kernel/source/nrk_events.c **** #include <include.h>
  33:../../../src/kernel/source/nrk_events.c **** #include <ulib.h>
  34:../../../src/kernel/source/nrk_events.c **** #include <nrk_timer.h>
  35:../../../src/kernel/source/nrk_events.c **** #include <nrk_time.h>
  36:../../../src/kernel/source/nrk_events.c **** #include <nrk_cfg.h>
  37:../../../src/kernel/source/nrk_events.c **** #include <nrk_cpu.h>
  38:../../../src/kernel/source/nrk_events.c **** #include <nrk_defs.h>
  39:../../../src/kernel/source/nrk_events.c **** 
  40:../../../src/kernel/source/nrk_events.c **** int8_t nrk_signal_create()
  41:../../../src/kernel/source/nrk_events.c **** {
 131               	.LM0:
 132               	.LFBB1:
 133               	/* prologue: frame size=0 */
 134               	/* prologue end (size=0) */
  42:../../../src/kernel/source/nrk_events.c **** 	uint8_t i=0;
  43:../../../src/kernel/source/nrk_events.c **** 	for(i=0;i<32;i++)   
  44:../../../src/kernel/source/nrk_events.c **** 	{                         
  45:../../../src/kernel/source/nrk_events.c **** 		if( !(_nrk_signal_list & SIG(i)))
 136               	.LM1:
 137 0000 4091 0000 		lds r20,_nrk_signal_list
 138 0004 5091 0000 		lds r21,(_nrk_signal_list)+1
 139 0008 6091 0000 		lds r22,(_nrk_signal_list)+2
 140 000c 7091 0000 		lds r23,(_nrk_signal_list)+3
 141 0010 20E0      		ldi r18,lo8(0)
 142 0012 30E0      		ldi r19,hi8(0)
 143               	.L2:
 145               	.LM2:
 146 0014 DB01      		movw r26,r22
 147 0016 CA01      		movw r24,r20
 148 0018 022E      		mov r0,r18
 149 001a 00C0      		rjmp 2f
 150 001c B695      	1:	lsr r27
 151 001e A795      		ror r26
 152 0020 9795      		ror r25
 153 0022 8795      		ror r24
 154 0024 0A94      	2:	dec r0
 155 0026 02F4      		brpl 1b
 156 0028 8170      		andi r24,lo8(1)
 157 002a 9070      		andi r25,hi8(1)
 158 002c 892B      		or r24,r25
 159 002e 01F4      		brne .L3
  46:../../../src/kernel/source/nrk_events.c **** 		{    
  47:../../../src/kernel/source/nrk_events.c **** 			_nrk_signal_list|=SIG(i);
 161               	.LM3:
 162 0030 81E0      		ldi r24,lo8(1)
 163 0032 90E0      		ldi r25,hi8(1)
 164 0034 A0E0      		ldi r26,hlo8(1)
 165 0036 B0E0      		ldi r27,hhi8(1)
 166 0038 022E      		mov r0,r18
 167 003a 00C0      		rjmp 2f
 168 003c 880F      	1:	lsl r24
 169 003e 991F      		rol r25
 170 0040 AA1F      		rol r26
 171 0042 BB1F      		rol r27
 172 0044 0A94      	2:	dec r0
 173 0046 02F4      		brpl 1b
 174 0048 842B      		or r24,r20
 175 004a 952B      		or r25,r21
 176 004c A62B      		or r26,r22
 177 004e B72B      		or r27,r23
 178 0050 8093 0000 		sts _nrk_signal_list,r24
 179 0054 9093 0000 		sts (_nrk_signal_list)+1,r25
 180 0058 A093 0000 		sts (_nrk_signal_list)+2,r26
 181 005c B093 0000 		sts (_nrk_signal_list)+3,r27
  48:../../../src/kernel/source/nrk_events.c **** 			return i;
 183               	.LM4:
 184 0060 822F      		mov r24,r18
 185 0062 9927      		clr r25
 186 0064 87FD      		sbrc r24,7
 187 0066 9095      		com r25
 188 0068 0895      		ret
 189               	.L3:
 190 006a 2F5F      		subi r18,lo8(-(1))
 191 006c 3F4F      		sbci r19,hi8(-(1))
 193               	.LM5:
 194 006e 2032      		cpi r18,32
 195 0070 3105      		cpc r19,__zero_reg__
 196 0072 01F4      		brne .L2
 197 0074 8FEF      		ldi r24,lo8(-1)
 198 0076 9FEF      		ldi r25,hi8(-1)
  49:../../../src/kernel/source/nrk_events.c **** 		}
  50:../../../src/kernel/source/nrk_events.c **** 	}
  51:../../../src/kernel/source/nrk_events.c **** 	return NRK_ERROR;
  52:../../../src/kernel/source/nrk_events.c **** 
  53:../../../src/kernel/source/nrk_events.c **** 
  54:../../../src/kernel/source/nrk_events.c **** }
 200               	.LM6:
 201 0078 0895      		ret
 202               	/* epilogue: frame size=0 */
 203               	/* epilogue: noreturn */
 204               	/* epilogue end (size=0) */
 205               	/* function nrk_signal_create size 61 (61) */
 210               	.Lscope1:
 212               		.stabd	78,0,0
 214               	.global	nrk_signal_get_registered_mask
 216               	nrk_signal_get_registered_mask:
 217               		.stabd	46,0,0
  55:../../../src/kernel/source/nrk_events.c **** 
  56:../../../src/kernel/source/nrk_events.c **** uint32_t nrk_signal_get_registered_mask()
  57:../../../src/kernel/source/nrk_events.c **** {
 219               	.LM7:
 220               	.LFBB2:
 221               	/* prologue: frame size=0 */
 222               	/* prologue end (size=0) */
 223 007a E091 0000 		lds r30,nrk_cur_task_TCB
 224 007e F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 225 0082 6585      		ldd r22,Z+13
 226 0084 7685      		ldd r23,Z+14
 227 0086 8785      		ldd r24,Z+15
 228 0088 9089      		ldd r25,Z+16
 229               	/* epilogue: frame size=0 */
 230 008a 0895      		ret
 231               	/* epilogue end (size=1) */
 232               	/* function nrk_signal_get_registered_mask size 9 (8) */
 234               	.Lscope2:
 236               		.stabd	78,0,0
 239               	.global	nrk_signal_unregister
 241               	nrk_signal_unregister:
 242               		.stabd	46,0,0
  58:../../../src/kernel/source/nrk_events.c ****         return nrk_cur_task_TCB->registered_signal_mask;
  59:../../../src/kernel/source/nrk_events.c **** }
  60:../../../src/kernel/source/nrk_events.c **** 
  61:../../../src/kernel/source/nrk_events.c **** //return the number removed from signal set
  62:../../../src/kernel/source/nrk_events.c **** int8_t nrk_signal_delete(nrk_sig_t sig_id)
  63:../../../src/kernel/source/nrk_events.c **** {
  64:../../../src/kernel/source/nrk_events.c **** 	uint8_t task_ID;
  65:../../../src/kernel/source/nrk_events.c **** 	uint32_t sig_mask;
  66:../../../src/kernel/source/nrk_events.c **** 
  67:../../../src/kernel/source/nrk_events.c **** 	sig_mask=SIG(sig_id);
  68:../../../src/kernel/source/nrk_events.c **** 
  69:../../../src/kernel/source/nrk_events.c **** 	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
  70:../../../src/kernel/source/nrk_events.c **** 
  71:../../../src/kernel/source/nrk_events.c **** 	nrk_int_disable();
  72:../../../src/kernel/source/nrk_events.c **** 	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
  73:../../../src/kernel/source/nrk_events.c **** 		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
  74:../../../src/kernel/source/nrk_events.c **** 		// Check for tasks waiting on the signal
  75:../../../src/kernel/source/nrk_events.c **** 		// If there is a task that is waiting on just this signal
  76:../../../src/kernel/source/nrk_events.c **** 		// then we need to change it to the normal SUSPEND state
  77:../../../src/kernel/source/nrk_events.c **** 		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal i
  78:../../../src/kernel/source/nrk_events.c **** 		{
  79:../../../src/kernel/source/nrk_events.c **** 		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_m
  80:../../../src/kernel/source/nrk_events.c **** 			nrk_task_TCB[task_ID].active_signal_mask=0;
  81:../../../src/kernel/source/nrk_events.c **** 			nrk_task_TCB[task_ID].event_suspend=0;
  82:../../../src/kernel/source/nrk_events.c **** 			nrk_task_TCB[task_ID].task_state=SUSPENDED;
  83:../../../src/kernel/source/nrk_events.c **** 		}
  84:../../../src/kernel/source/nrk_events.c **** 		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
  85:../../../src/kernel/source/nrk_events.c **** 		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
  86:../../../src/kernel/source/nrk_events.c **** 
  87:../../../src/kernel/source/nrk_events.c **** 	}
  88:../../../src/kernel/source/nrk_events.c **** 	
  89:../../../src/kernel/source/nrk_events.c **** 	_nrk_signal_list&=~SIG(sig_id);
  90:../../../src/kernel/source/nrk_events.c **** 	nrk_int_enable();
  91:../../../src/kernel/source/nrk_events.c **** 
  92:../../../src/kernel/source/nrk_events.c **** 	return NRK_OK;
  93:../../../src/kernel/source/nrk_events.c **** }
  94:../../../src/kernel/source/nrk_events.c **** 
  95:../../../src/kernel/source/nrk_events.c **** 
  96:../../../src/kernel/source/nrk_events.c **** int8_t nrk_signal_unregister(int8_t sig_id)
  97:../../../src/kernel/source/nrk_events.c **** {
 244               	.LM8:
 245               	.LFBB3:
 246               	/* prologue: frame size=0 */
 247 008c EF92      		push r14
 248 008e FF92      		push r15
 249 0090 0F93      		push r16
 250 0092 1F93      		push r17
 251               	/* prologue end (size=4) */
  98:../../../src/kernel/source/nrk_events.c **** uint32_t sig_mask;
  99:../../../src/kernel/source/nrk_events.c **** 
 100:../../../src/kernel/source/nrk_events.c **** sig_mask=SIG(sig_id);
 253               	.LM9:
 254 0094 21E0      		ldi r18,lo8(1)
 255 0096 30E0      		ldi r19,hi8(1)
 256 0098 40E0      		ldi r20,hlo8(1)
 257 009a 50E0      		ldi r21,hhi8(1)
 258 009c 00C0      		rjmp 2f
 259 009e 220F      	1:	lsl r18
 260 00a0 331F      		rol r19
 261 00a2 441F      		rol r20
 262 00a4 551F      		rol r21
 263 00a6 8A95      	2:	dec r24
 264 00a8 02F4      		brpl 1b
 101:../../../src/kernel/source/nrk_events.c **** 
 102:../../../src/kernel/source/nrk_events.c **** 	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
 266               	.LM10:
 267 00aa E091 0000 		lds r30,nrk_cur_task_TCB
 268 00ae F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 269 00b2 E584      		ldd r14,Z+13
 270 00b4 F684      		ldd r15,Z+14
 271 00b6 0785      		ldd r16,Z+15
 272 00b8 1089      		ldd r17,Z+16
 273 00ba DA01      		movw r26,r20
 274 00bc C901      		movw r24,r18
 275 00be 8E21      		and r24,r14
 276 00c0 9F21      		and r25,r15
 277 00c2 A023      		and r26,r16
 278 00c4 B123      		and r27,r17
 279 00c6 0097      		sbiw r24,0
 280 00c8 A105      		cpc r26,__zero_reg__
 281 00ca B105      		cpc r27,__zero_reg__
 282 00cc 01F4      		brne .L13
 284               	.LM11:
 285 00ce 8FEF      		ldi r24,lo8(-1)
 286 00d0 9FEF      		ldi r25,hi8(-1)
 287 00d2 00C0      		rjmp .L15
 288               	.L13:
 103:../../../src/kernel/source/nrk_events.c **** 	{
 104:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
 290               	.LM12:
 291 00d4 2095      		com r18
 292 00d6 3095      		com r19
 293 00d8 4095      		com r20
 294 00da 5095      		com r21
 295 00dc E222      		and r14,r18
 296 00de F322      		and r15,r19
 297 00e0 0423      		and r16,r20
 298 00e2 1523      		and r17,r21
 299 00e4 E586      		std Z+13,r14
 300 00e6 F686      		std Z+14,r15
 301 00e8 0787      		std Z+15,r16
 302 00ea 108B      		std Z+16,r17
 105:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
 304               	.LM13:
 305 00ec 8189      		ldd r24,Z+17
 306 00ee 9289      		ldd r25,Z+18
 307 00f0 A389      		ldd r26,Z+19
 308 00f2 B489      		ldd r27,Z+20
 309 00f4 8223      		and r24,r18
 310 00f6 9323      		and r25,r19
 311 00f8 A423      		and r26,r20
 312 00fa B523      		and r27,r21
 313 00fc 818B      		std Z+17,r24
 314 00fe 928B      		std Z+18,r25
 315 0100 A38B      		std Z+19,r26
 316 0102 B48B      		std Z+20,r27
 317 0104 81E0      		ldi r24,lo8(1)
 318 0106 90E0      		ldi r25,hi8(1)
 319               	.L15:
 320               	/* epilogue: frame size=0 */
 321 0108 1F91      		pop r17
 322 010a 0F91      		pop r16
 323 010c FF90      		pop r15
 324 010e EF90      		pop r14
 325 0110 0895      		ret
 326               	/* epilogue end (size=5) */
 327               	/* function nrk_signal_unregister size 68 (59) */
 332               	.Lscope3:
 334               		.stabd	78,0,0
 337               	.global	nrk_signal_register
 339               	nrk_signal_register:
 340               		.stabd	46,0,0
 106:../../../src/kernel/source/nrk_events.c **** 	}
 107:../../../src/kernel/source/nrk_events.c **** 	else
 108:../../../src/kernel/source/nrk_events.c **** 		return NRK_ERROR;
 109:../../../src/kernel/source/nrk_events.c **** return NRK_OK;
 110:../../../src/kernel/source/nrk_events.c **** }
 111:../../../src/kernel/source/nrk_events.c **** 
 112:../../../src/kernel/source/nrk_events.c **** int8_t nrk_signal_register(int8_t sig_id)
 113:../../../src/kernel/source/nrk_events.c **** {
 342               	.LM14:
 343               	.LFBB4:
 344               	/* prologue: frame size=0 */
 345               	/* prologue end (size=0) */
 114:../../../src/kernel/source/nrk_events.c **** 
 115:../../../src/kernel/source/nrk_events.c **** 	// Make sure the signal was created...
 116:../../../src/kernel/source/nrk_events.c **** 	if(SIG(sig_id) & _nrk_signal_list )
 347               	.LM15:
 348 0112 682F      		mov r22,r24
 349 0114 7727      		clr r23
 350 0116 67FD      		sbrc r22,7
 351 0118 7095      		com r23
 352 011a 8091 0000 		lds r24,_nrk_signal_list
 353 011e 9091 0000 		lds r25,(_nrk_signal_list)+1
 354 0122 A091 0000 		lds r26,(_nrk_signal_list)+2
 355 0126 B091 0000 		lds r27,(_nrk_signal_list)+3
 356 012a 062E      		mov r0,r22
 357 012c 00C0      		rjmp 2f
 358 012e B695      	1:	lsr r27
 359 0130 A795      		ror r26
 360 0132 9795      		ror r25
 361 0134 8795      		ror r24
 362 0136 0A94      	2:	dec r0
 363 0138 02F4      		brpl 1b
 364 013a 8170      		andi r24,lo8(1)
 365 013c 9070      		andi r25,hi8(1)
 366 013e 892B      		or r24,r25
 367 0140 01F4      		brne .L18
 369               	.LM16:
 370 0142 8FEF      		ldi r24,lo8(-1)
 371 0144 9FEF      		ldi r25,hi8(-1)
 372 0146 0895      		ret
 373               	.L18:
 117:../../../src/kernel/source/nrk_events.c **** 	{
 118:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
 375               	.LM17:
 376 0148 E091 0000 		lds r30,nrk_cur_task_TCB
 377 014c F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 378 0150 21E0      		ldi r18,lo8(1)
 379 0152 30E0      		ldi r19,hi8(1)
 380 0154 40E0      		ldi r20,hlo8(1)
 381 0156 50E0      		ldi r21,hhi8(1)
 382 0158 00C0      		rjmp 2f
 383 015a 220F      	1:	lsl r18
 384 015c 331F      		rol r19
 385 015e 441F      		rol r20
 386 0160 551F      		rol r21
 387 0162 6A95      	2:	dec r22
 388 0164 02F4      		brpl 1b
 389 0166 8585      		ldd r24,Z+13
 390 0168 9685      		ldd r25,Z+14
 391 016a A785      		ldd r26,Z+15
 392 016c B089      		ldd r27,Z+16
 393 016e 822B      		or r24,r18
 394 0170 932B      		or r25,r19
 395 0172 A42B      		or r26,r20
 396 0174 B52B      		or r27,r21
 397 0176 8587      		std Z+13,r24
 398 0178 9687      		std Z+14,r25
 399 017a A787      		std Z+15,r26
 400 017c B08B      		std Z+16,r27
 401 017e 81E0      		ldi r24,lo8(1)
 402 0180 90E0      		ldi r25,hi8(1)
 119:../../../src/kernel/source/nrk_events.c **** 		return NRK_OK;
 120:../../../src/kernel/source/nrk_events.c **** 	}
 121:../../../src/kernel/source/nrk_events.c ****             
 122:../../../src/kernel/source/nrk_events.c **** 	return NRK_ERROR;
 123:../../../src/kernel/source/nrk_events.c **** }
 404               	.LM18:
 405 0182 0895      		ret
 406               	/* epilogue: frame size=0 */
 407               	/* epilogue: noreturn */
 408               	/* epilogue end (size=0) */
 409               	/* function nrk_signal_register size 58 (58) */
 411               	.Lscope4:
 413               		.stabd	78,0,0
 417               	.global	nrk_sem_create
 419               	nrk_sem_create:
 420               		.stabd	46,0,0
 124:../../../src/kernel/source/nrk_events.c **** 
 125:../../../src/kernel/source/nrk_events.c **** int8_t nrk_event_signal(int8_t sig_id)
 126:../../../src/kernel/source/nrk_events.c **** {
 127:../../../src/kernel/source/nrk_events.c **** 
 128:../../../src/kernel/source/nrk_events.c **** 	uint8_t task_ID;
 129:../../../src/kernel/source/nrk_events.c **** 	uint8_t event_occured=0;
 130:../../../src/kernel/source/nrk_events.c **** 	uint32_t sig_mask;
 131:../../../src/kernel/source/nrk_events.c **** 
 132:../../../src/kernel/source/nrk_events.c **** 	sig_mask=SIG(sig_id);
 133:../../../src/kernel/source/nrk_events.c **** 	// Check if signal was created
 134:../../../src/kernel/source/nrk_events.c **** 	// Signal was not created
 135:../../../src/kernel/source/nrk_events.c **** 	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
 136:../../../src/kernel/source/nrk_events.c **** 	
 137:../../../src/kernel/source/nrk_events.c **** 	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in orde
 138:../../../src/kernel/source/nrk_events.c **** 	nrk_int_disable();
 139:../../../src/kernel/source/nrk_events.c **** 	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
 140:../../../src/kernel/source/nrk_events.c **** 
 141:../../../src/kernel/source/nrk_events.c **** 
 142:../../../src/kernel/source/nrk_events.c **** 	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
 143:../../../src/kernel/source/nrk_events.c **** 	//	{
 144:../../../src/kernel/source/nrk_events.c **** 	//	printf( "task %d is event suspended\r\n",task_ID );
 145:../../../src/kernel/source/nrk_events.c **** 			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
 146:../../../src/kernel/source/nrk_events.c **** 				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
 147:../../../src/kernel/source/nrk_events.c **** 				{
 148:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].task_state=SUSPENDED;
 149:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].next_wakeup=0;
 150:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].event_suspend=0;
 151:../../../src/kernel/source/nrk_events.c **** 					// Add the event trigger here so it is returned
 152:../../../src/kernel/source/nrk_events.c **** 					// from nrk_event_wait()
 153:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
 154:../../../src/kernel/source/nrk_events.c **** 					event_occured=1;
 155:../../../src/kernel/source/nrk_events.c **** 				}
 156:../../../src/kernel/source/nrk_events.c **** 
 157:../../../src/kernel/source/nrk_events.c **** 			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
 158:../../../src/kernel/source/nrk_events.c **** 				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
 159:../../../src/kernel/source/nrk_events.c **** 				{
 160:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].task_state=SUSPENDED;
 161:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].next_wakeup=0;
 162:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].event_suspend=0;
 163:../../../src/kernel/source/nrk_events.c **** 					// Add the event trigger here so it is returned
 164:../../../src/kernel/source/nrk_events.c **** 					// from nrk_event_wait()
 165:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].active_signal_mask=0;
 166:../../../src/kernel/source/nrk_events.c **** 					event_occured=1;
 167:../../../src/kernel/source/nrk_events.c **** 				}   
 168:../../../src/kernel/source/nrk_events.c **** 
 169:../../../src/kernel/source/nrk_events.c **** 	//	}
 170:../../../src/kernel/source/nrk_events.c **** 	}
 171:../../../src/kernel/source/nrk_events.c **** 	nrk_int_enable();
 172:../../../src/kernel/source/nrk_events.c **** 	if(event_occured)
 173:../../../src/kernel/source/nrk_events.c **** 	{
 174:../../../src/kernel/source/nrk_events.c **** 		return NRK_OK;
 175:../../../src/kernel/source/nrk_events.c **** 	} 
 176:../../../src/kernel/source/nrk_events.c **** 	// No task was waiting on the signal
 177:../../../src/kernel/source/nrk_events.c **** 	_nrk_errno_set(2);
 178:../../../src/kernel/source/nrk_events.c **** 	return NRK_ERROR;
 179:../../../src/kernel/source/nrk_events.c **** }
 180:../../../src/kernel/source/nrk_events.c **** 
 181:../../../src/kernel/source/nrk_events.c **** 
 182:../../../src/kernel/source/nrk_events.c **** uint32_t nrk_event_wait(uint32_t event_mask)
 183:../../../src/kernel/source/nrk_events.c **** {
 184:../../../src/kernel/source/nrk_events.c **** 
 185:../../../src/kernel/source/nrk_events.c **** 	// FIXME: Should go through list and check that all masks are registered, not just 1
 186:../../../src/kernel/source/nrk_events.c **** 	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
 187:../../../src/kernel/source/nrk_events.c **** 	  {
 188:../../../src/kernel/source/nrk_events.c **** 	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
 189:../../../src/kernel/source/nrk_events.c **** 	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
 190:../../../src/kernel/source/nrk_events.c **** 	  }
 191:../../../src/kernel/source/nrk_events.c **** 	else
 192:../../../src/kernel/source/nrk_events.c **** 	  {
 193:../../../src/kernel/source/nrk_events.c **** 	   return 0;
 194:../../../src/kernel/source/nrk_events.c **** 	  }
 195:../../../src/kernel/source/nrk_events.c **** 
 196:../../../src/kernel/source/nrk_events.c **** 	if(event_mask & SIG(nrk_wakeup_signal))
 197:../../../src/kernel/source/nrk_events.c **** 		nrk_wait_until_nw();
 198:../../../src/kernel/source/nrk_events.c **** 	else
 199:../../../src/kernel/source/nrk_events.c **** 		nrk_wait_until_ticks(0);
 200:../../../src/kernel/source/nrk_events.c **** 	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
 201:../../../src/kernel/source/nrk_events.c **** 	return ( (nrk_cur_task_TCB->active_signal_mask));
 202:../../../src/kernel/source/nrk_events.c **** }
 203:../../../src/kernel/source/nrk_events.c **** 
 204:../../../src/kernel/source/nrk_events.c **** int8_t nrk_sem_query(nrk_sem_t *rsrc )
 205:../../../src/kernel/source/nrk_events.c **** {
 206:../../../src/kernel/source/nrk_events.c **** 	int8_t id;
 207:../../../src/kernel/source/nrk_events.c **** 	id=nrk_get_resource_index(rsrc);  
 208:../../../src/kernel/source/nrk_events.c **** 	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
 209:../../../src/kernel/source/nrk_events.c **** 	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
 210:../../../src/kernel/source/nrk_events.c **** 	
 211:../../../src/kernel/source/nrk_events.c **** 	return(nrk_sem_list[id].value);
 212:../../../src/kernel/source/nrk_events.c **** }
 213:../../../src/kernel/source/nrk_events.c **** 
 214:../../../src/kernel/source/nrk_events.c **** 
 215:../../../src/kernel/source/nrk_events.c **** 
 216:../../../src/kernel/source/nrk_events.c **** int8_t nrk_sem_pend(nrk_sem_t *rsrc )
 217:../../../src/kernel/source/nrk_events.c **** {
 218:../../../src/kernel/source/nrk_events.c **** 	int8_t id;
 219:../../../src/kernel/source/nrk_events.c **** 	id=nrk_get_resource_index(rsrc);  
 220:../../../src/kernel/source/nrk_events.c **** 	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
 221:../../../src/kernel/source/nrk_events.c **** 	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
 222:../../../src/kernel/source/nrk_events.c **** 	
 223:../../../src/kernel/source/nrk_events.c **** 	nrk_int_disable();
 224:../../../src/kernel/source/nrk_events.c **** 	if(nrk_sem_list[id].value==0)
 225:../../../src/kernel/source/nrk_events.c **** 	{
 226:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
 227:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->active_signal_mask=id;
 228:../../../src/kernel/source/nrk_events.c **** 		// Wait on suspend event
 229:../../../src/kernel/source/nrk_events.c **** 		nrk_int_enable();
 230:../../../src/kernel/source/nrk_events.c **** 		nrk_wait_until_ticks(0);
 231:../../../src/kernel/source/nrk_events.c **** 	}
 232:../../../src/kernel/source/nrk_events.c **** 
 233:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[id].value--;	
 234:../../../src/kernel/source/nrk_events.c **** 	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
 235:../../../src/kernel/source/nrk_events.c **** 	nrk_cur_task_TCB->elevated_prio_flag=1;
 236:../../../src/kernel/source/nrk_events.c **** 	nrk_int_enable();
 237:../../../src/kernel/source/nrk_events.c **** 
 238:../../../src/kernel/source/nrk_events.c **** 	return NRK_OK;
 239:../../../src/kernel/source/nrk_events.c **** }
 240:../../../src/kernel/source/nrk_events.c **** 
 241:../../../src/kernel/source/nrk_events.c **** 
 242:../../../src/kernel/source/nrk_events.c **** 
 243:../../../src/kernel/source/nrk_events.c **** int8_t nrk_sem_post(nrk_sem_t *rsrc)
 244:../../../src/kernel/source/nrk_events.c **** {
 245:../../../src/kernel/source/nrk_events.c **** 	int8_t id=nrk_get_resource_index(rsrc);	
 246:../../../src/kernel/source/nrk_events.c **** 	int8_t task_ID;
 247:../../../src/kernel/source/nrk_events.c **** 	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
 248:../../../src/kernel/source/nrk_events.c **** 	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
 249:../../../src/kernel/source/nrk_events.c **** 
 250:../../../src/kernel/source/nrk_events.c **** 	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
 251:../../../src/kernel/source/nrk_events.c **** 	{
 252:../../../src/kernel/source/nrk_events.c **** 		// Signal RSRC Event		
 253:../../../src/kernel/source/nrk_events.c **** 		nrk_int_disable();
 254:../../../src/kernel/source/nrk_events.c **** 
 255:../../../src/kernel/source/nrk_events.c **** 		nrk_sem_list[id].value++;
 256:../../../src/kernel/source/nrk_events.c **** 		nrk_cur_task_TCB->elevated_prio_flag=0;
 257:../../../src/kernel/source/nrk_events.c **** 
 258:../../../src/kernel/source/nrk_events.c **** 		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
 259:../../../src/kernel/source/nrk_events.c **** 			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
 260:../../../src/kernel/source/nrk_events.c **** 				if((nrk_task_TCB[task_ID].active_signal_mask == id))
 261:../../../src/kernel/source/nrk_events.c **** 				{
 262:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].task_state=SUSPENDED;
 263:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].next_wakeup=0;
 264:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].event_suspend=0;
 265:../../../src/kernel/source/nrk_events.c **** 					nrk_task_TCB[task_ID].active_signal_mask=0;
 266:../../../src/kernel/source/nrk_events.c **** 				}   
 267:../../../src/kernel/source/nrk_events.c **** 
 268:../../../src/kernel/source/nrk_events.c **** 		}
 269:../../../src/kernel/source/nrk_events.c **** 		nrk_int_enable();
 270:../../../src/kernel/source/nrk_events.c **** 	}
 271:../../../src/kernel/source/nrk_events.c **** 		
 272:../../../src/kernel/source/nrk_events.c **** return NRK_OK;
 273:../../../src/kernel/source/nrk_events.c **** }
 274:../../../src/kernel/source/nrk_events.c **** 
 275:../../../src/kernel/source/nrk_events.c **** int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
 276:../../../src/kernel/source/nrk_events.c **** {
 277:../../../src/kernel/source/nrk_events.c **** int8_t id=nrk_get_resource_index(rsrc);	
 278:../../../src/kernel/source/nrk_events.c **** 	int8_t task_ID;
 279:../../../src/kernel/source/nrk_events.c **** 	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
 280:../../../src/kernel/source/nrk_events.c **** 	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
 281:../../../src/kernel/source/nrk_events.c **** 
 282:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[id].count=-1;
 283:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[id].value=-1;
 284:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[id].resource_ceiling=-1;
 285:../../../src/kernel/source/nrk_events.c **** 	_nrk_resource_cnt--;
 286:../../../src/kernel/source/nrk_events.c **** return NRK_OK;
 287:../../../src/kernel/source/nrk_events.c **** }
 288:../../../src/kernel/source/nrk_events.c **** 
 289:../../../src/kernel/source/nrk_events.c **** nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
 290:../../../src/kernel/source/nrk_events.c **** {
 422               	.LM19:
 423               	.LFBB5:
 424               	/* prologue: frame size=0 */
 425               	/* prologue end (size=0) */
 426 0184 382F      		mov r19,r24
 291:../../../src/kernel/source/nrk_events.c **** uint8_t i;
 292:../../../src/kernel/source/nrk_events.c **** 	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
 428               	.LM20:
 429 0186 8091 0000 		lds r24,_nrk_resource_cnt
 430 018a 8823      		tst r24
 431 018c 01F0      		breq .L23
 433               	.LM21:
 434 018e 80E0      		ldi r24,lo8(0)
 435 0190 90E0      		ldi r25,hi8(0)
 436 0192 0895      		ret
 437               	.L23:
 293:../../../src/kernel/source/nrk_events.c **** 		return NULL;  
 294:../../../src/kernel/source/nrk_events.c **** 	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
 295:../../../src/kernel/source/nrk_events.c **** 		{
 296:../../../src/kernel/source/nrk_events.c **** 		   if(nrk_sem_list[i].count==-1) break;
 439               	.LM22:
 440 0194 8091 0000 		lds r24,nrk_sem_list
 441 0198 8F3F      		cpi r24,lo8(-1)
 442 019a 01F4      		brne .L26
 443 019c 20E0      		ldi r18,lo8(0)
 444 019e 00C0      		rjmp .L28
 445               	.L26:
 446 01a0 8091 0000 		lds r24,nrk_sem_list+3
 447 01a4 8F3F      		cpi r24,lo8(-1)
 448 01a6 01F0      		breq .L29
 449 01a8 22E0      		ldi r18,lo8(2)
 450 01aa 00C0      		rjmp .L28
 451               	.L29:
 452 01ac 21E0      		ldi r18,lo8(1)
 453               	.L28:
 297:../../../src/kernel/source/nrk_events.c **** 		}
 298:../../../src/kernel/source/nrk_events.c **** 	                                              
 299:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[i].value=count;
 455               	.LM23:
 456 01ae 822F      		mov r24,r18
 457 01b0 9927      		clr r25
 458 01b2 FC01      		movw r30,r24
 459 01b4 EE0F      		lsl r30
 460 01b6 FF1F      		rol r31
 461 01b8 E80F      		add r30,r24
 462 01ba F91F      		adc r31,r25
 463 01bc E050      		subi r30,lo8(-(nrk_sem_list))
 464 01be F040      		sbci r31,hi8(-(nrk_sem_list))
 465 01c0 3283      		std Z+2,r19
 300:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[i].count=count;
 467               	.LM24:
 468 01c2 3083      		st Z,r19
 301:../../../src/kernel/source/nrk_events.c **** 	nrk_sem_list[i].resource_ceiling=ceiling_prio;
 470               	.LM25:
 471 01c4 6183      		std Z+1,r22
 302:../../../src/kernel/source/nrk_events.c **** 	_nrk_resource_cnt++;
 473               	.LM26:
 474 01c6 81E0      		ldi r24,lo8(1)
 475 01c8 8093 0000 		sts _nrk_resource_cnt,r24
 303:../../../src/kernel/source/nrk_events.c **** 	return	&nrk_sem_list[i];
 477               	.LM27:
 478 01cc 83E0      		ldi r24,lo8(3)
 479 01ce 289F      		mul r18,r24
 480 01d0 C001      		movw r24,r0
 481 01d2 1124      		clr r1
 482 01d4 8050      		subi r24,lo8(-(nrk_sem_list))
 483 01d6 9040      		sbci r25,hi8(-(nrk_sem_list))
 304:../../../src/kernel/source/nrk_events.c **** }
 485               	.LM28:
 486 01d8 0895      		ret
 487               	/* epilogue: frame size=0 */
 488               	/* epilogue: noreturn */
 489               	/* epilogue end (size=0) */
 490               	/* function nrk_sem_create size 43 (43) */
 495               	.Lscope5:
 497               		.stabd	78,0,0
 500               	.global	nrk_get_resource_index
 502               	nrk_get_resource_index:
 503               		.stabd	46,0,0
 305:../../../src/kernel/source/nrk_events.c **** 
 306:../../../src/kernel/source/nrk_events.c **** int8_t nrk_get_resource_index(nrk_sem_t *resrc)
 307:../../../src/kernel/source/nrk_events.c **** {
 505               	.LM29:
 506               	.LFBB6:
 507               	/* prologue: frame size=0 */
 508               	/* prologue end (size=0) */
 308:../../../src/kernel/source/nrk_events.c **** 	int8_t id;
 309:../../../src/kernel/source/nrk_events.c **** 		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
 310:../../../src/kernel/source/nrk_events.c **** 			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
 510               	.LM30:
 511 01da 20E0      		ldi r18,hi8(nrk_sem_list)
 512 01dc 8030      		cpi r24,lo8(nrk_sem_list)
 513 01de 9207      		cpc r25,r18
 514 01e0 01F4      		brne .L33
 516               	.LM31:
 517 01e2 80E0      		ldi r24,lo8(0)
 518 01e4 00C0      		rjmp .L35
 519               	.L33:
 520 01e6 8050      		subi r24,lo8(nrk_sem_list+3)
 521 01e8 9040      		sbci r25,hi8(nrk_sem_list+3)
 522 01ea 01F0      		breq .L36
 523 01ec 8FEF      		ldi r24,lo8(-1)
 524 01ee 9FEF      		ldi r25,hi8(-1)
 525 01f0 0895      		ret
 526               	.L36:
 527 01f2 81E0      		ldi r24,lo8(1)
 528               	.L35:
 311:../../../src/kernel/source/nrk_events.c **** 				return id;
 530               	.LM32:
 531 01f4 9927      		clr r25
 532 01f6 87FD      		sbrc r24,7
 533 01f8 9095      		com r25
 312:../../../src/kernel/source/nrk_events.c **** 	return NRK_ERROR;
 313:../../../src/kernel/source/nrk_events.c **** }
 535               	.LM33:
 536 01fa 0895      		ret
 537               	/* epilogue: frame size=0 */
 538               	/* epilogue: noreturn */
 539               	/* epilogue end (size=0) */
 540               	/* function nrk_get_resource_index size 18 (18) */
 545               	.Lscope6:
 547               		.stabd	78,0,0
 550               	.global	nrk_sem_delete
 552               	nrk_sem_delete:
 553               		.stabd	46,0,0
 555               	.LM34:
 556               	.LFBB7:
 557               	/* prologue: frame size=0 */
 558               	/* prologue end (size=0) */
 560               	.LM35:
 561 01fc 0E94 0000 		call nrk_get_resource_index
 563               	.LM36:
 564 0200 8F3F      		cpi r24,lo8(-1)
 565 0202 01F4      		brne .L41
 567               	.LM37:
 568 0204 81E0      		ldi r24,lo8(1)
 569 0206 00C0      		rjmp .L47
 570               	.L41:
 572               	.LM38:
 573 0208 8230      		cpi r24,lo8(2)
 574 020a 01F4      		brne .L44
 575               	.L47:
 576 020c 0E94 0000 		call _nrk_errno_set
 577 0210 8FEF      		ldi r24,lo8(-1)
 578 0212 9FEF      		ldi r25,hi8(-1)
 579 0214 0895      		ret
 580               	.L44:
 582               	.LM39:
 583 0216 9927      		clr r25
 584 0218 87FD      		sbrc r24,7
 585 021a 9095      		com r25
 586 021c FC01      		movw r30,r24
 587 021e EE0F      		lsl r30
 588 0220 FF1F      		rol r31
 589 0222 E80F      		add r30,r24
 590 0224 F91F      		adc r31,r25
 591 0226 E050      		subi r30,lo8(-(nrk_sem_list))
 592 0228 F040      		sbci r31,hi8(-(nrk_sem_list))
 593 022a 8FEF      		ldi r24,lo8(-1)
 594 022c 8083      		st Z,r24
 596               	.LM40:
 597 022e 8283      		std Z+2,r24
 599               	.LM41:
 600 0230 8183      		std Z+1,r24
 602               	.LM42:
 603 0232 8091 0000 		lds r24,_nrk_resource_cnt
 604 0236 8150      		subi r24,lo8(-(-1))
 605 0238 8093 0000 		sts _nrk_resource_cnt,r24
 606 023c 81E0      		ldi r24,lo8(1)
 607 023e 90E0      		ldi r25,hi8(1)
 609               	.LM43:
 610 0240 0895      		ret
 611               	/* epilogue: frame size=0 */
 612               	/* epilogue: noreturn */
 613               	/* epilogue end (size=0) */
 614               	/* function nrk_sem_delete size 35 (35) */
 619               	.Lscope7:
 621               		.stabd	78,0,0
 624               	.global	nrk_sem_query
 626               	nrk_sem_query:
 627               		.stabd	46,0,0
 629               	.LM44:
 630               	.LFBB8:
 631               	/* prologue: frame size=0 */
 632               	/* prologue end (size=0) */
 634               	.LM45:
 635 0242 0E94 0000 		call nrk_get_resource_index
 637               	.LM46:
 638 0246 8F3F      		cpi r24,lo8(-1)
 639 0248 01F4      		brne .L49
 641               	.LM47:
 642 024a 81E0      		ldi r24,lo8(1)
 643 024c 00C0      		rjmp .L55
 644               	.L49:
 646               	.LM48:
 647 024e 8230      		cpi r24,lo8(2)
 648 0250 01F4      		brne .L52
 649               	.L55:
 650 0252 0E94 0000 		call _nrk_errno_set
 651 0256 8FEF      		ldi r24,lo8(-1)
 652 0258 9FEF      		ldi r25,hi8(-1)
 653 025a 0895      		ret
 654               	.L52:
 656               	.LM49:
 657 025c 9927      		clr r25
 658 025e 87FD      		sbrc r24,7
 659 0260 9095      		com r25
 660 0262 FC01      		movw r30,r24
 661 0264 EE0F      		lsl r30
 662 0266 FF1F      		rol r31
 663 0268 E80F      		add r30,r24
 664 026a F91F      		adc r31,r25
 665 026c E050      		subi r30,lo8(-(nrk_sem_list))
 666 026e F040      		sbci r31,hi8(-(nrk_sem_list))
 667 0270 8281      		ldd r24,Z+2
 668 0272 9927      		clr r25
 669 0274 87FD      		sbrc r24,7
 670 0276 9095      		com r25
 672               	.LM50:
 673 0278 0895      		ret
 674               	/* epilogue: frame size=0 */
 675               	/* epilogue: noreturn */
 676               	/* epilogue end (size=0) */
 677               	/* function nrk_sem_query size 28 (28) */
 682               	.Lscope8:
 684               		.stabd	78,0,0
 687               	.global	nrk_sem_post
 689               	nrk_sem_post:
 690               		.stabd	46,0,0
 692               	.LM51:
 693               	.LFBB9:
 694               	/* prologue: frame size=0 */
 695 027a 1F93      		push r17
 696 027c CF93      		push r28
 697 027e DF93      		push r29
 698               	/* prologue end (size=3) */
 700               	.LM52:
 701 0280 0E94 0000 		call nrk_get_resource_index
 702 0284 182F      		mov r17,r24
 704               	.LM53:
 705 0286 8F3F      		cpi r24,lo8(-1)
 706 0288 01F4      		brne .L57
 708               	.LM54:
 709 028a 81E0      		ldi r24,lo8(1)
 710 028c 00C0      		rjmp .L72
 711               	.L57:
 713               	.LM55:
 714 028e 8230      		cpi r24,lo8(2)
 715 0290 01F4      		brne .L60
 716 0292 82E0      		ldi r24,lo8(2)
 717               	.L72:
 718 0294 0E94 0000 		call _nrk_errno_set
 719 0298 8FEF      		ldi r24,lo8(-1)
 720 029a 9FEF      		ldi r25,hi8(-1)
 721 029c 00C0      		rjmp .L59
 722               	.L60:
 724               	.LM56:
 725 029e 9927      		clr r25
 726 02a0 87FD      		sbrc r24,7
 727 02a2 9095      		com r25
 728 02a4 EC01      		movw r28,r24
 729 02a6 CC0F      		lsl r28
 730 02a8 DD1F      		rol r29
 731 02aa C80F      		add r28,r24
 732 02ac D91F      		adc r29,r25
 733 02ae C050      		subi r28,lo8(-(nrk_sem_list))
 734 02b0 D040      		sbci r29,hi8(-(nrk_sem_list))
 735 02b2 9A81      		ldd r25,Y+2
 736 02b4 8881      		ld r24,Y
 737 02b6 9817      		cp r25,r24
 738 02b8 04F4      		brge .L73
 740               	.LM57:
 741 02ba 0E94 0000 		call nrk_int_disable
 743               	.LM58:
 744 02be 8A81      		ldd r24,Y+2
 745 02c0 8F5F      		subi r24,lo8(-(1))
 746 02c2 8A83      		std Y+2,r24
 748               	.LM59:
 749 02c4 E091 0000 		lds r30,nrk_cur_task_TCB
 750 02c8 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 751 02cc 1482      		std Z+4,__zero_reg__
 752 02ce E0E0      		ldi r30,lo8(nrk_task_TCB+7)
 753 02d0 F0E0      		ldi r31,hi8(nrk_task_TCB+7)
 755               	.LM60:
 756 02d2 212F      		mov r18,r17
 757 02d4 3327      		clr r19
 758 02d6 27FD      		sbrc r18,7
 759 02d8 3095      		com r19
 760 02da 432F      		mov r20,r19
 761 02dc 532F      		mov r21,r19
 762               	.L64:
 764               	.LM61:
 765 02de 8081      		ld r24,Z
 766 02e0 8230      		cpi r24,lo8(2)
 767 02e2 01F4      		brne .L65
 769               	.LM62:
 770 02e4 8285      		ldd r24,Z+10
 771 02e6 9385      		ldd r25,Z+11
 772 02e8 A485      		ldd r26,Z+12
 773 02ea B585      		ldd r27,Z+13
 774 02ec 8217      		cp r24,r18
 775 02ee 9307      		cpc r25,r19
 776 02f0 A407      		cpc r26,r20
 777 02f2 B507      		cpc r27,r21
 778 02f4 01F4      		brne .L65
 780               	.LM63:
 781 02f6 83E0      		ldi r24,lo8(3)
 782 02f8 8283      		std Z+2,r24
 784               	.LM64:
 785 02fa 1786      		std Z+15,__zero_reg__
 786 02fc 1686      		std Z+14,__zero_reg__
 788               	.LM65:
 789 02fe 1082      		st Z,__zero_reg__
 791               	.LM66:
 792 0300 1286      		std Z+10,__zero_reg__
 793 0302 1386      		std Z+11,__zero_reg__
 794 0304 1486      		std Z+12,__zero_reg__
 795 0306 1586      		std Z+13,__zero_reg__
 796               	.L65:
 797 0308 B196      		adiw r30,33
 799               	.LM67:
 800 030a 80E0      		ldi r24,hi8(nrk_task_TCB+106)
 801 030c E030      		cpi r30,lo8(nrk_task_TCB+106)
 802 030e F807      		cpc r31,r24
 803 0310 01F4      		brne .L64
 805               	.LM68:
 806 0312 0E94 0000 		call nrk_int_enable
 807               	.L73:
 808 0316 81E0      		ldi r24,lo8(1)
 809 0318 90E0      		ldi r25,hi8(1)
 810               	.L59:
 811               	/* epilogue: frame size=0 */
 812 031a DF91      		pop r29
 813 031c CF91      		pop r28
 814 031e 1F91      		pop r17
 815 0320 0895      		ret
 816               	/* epilogue end (size=4) */
 817               	/* function nrk_sem_post size 84 (77) */
 822               	.Lscope9:
 824               		.stabd	78,0,0
 827               	.global	nrk_event_signal
 829               	nrk_event_signal:
 830               		.stabd	46,0,0
 832               	.LM69:
 833               	.LFBB10:
 834               	/* prologue: frame size=0 */
 835 0322 DF92      		push r13
 836 0324 EF92      		push r14
 837 0326 FF92      		push r15
 838 0328 0F93      		push r16
 839 032a 1F93      		push r17
 840               	/* prologue end (size=5) */
 842               	.LM70:
 843 032c E1E0      		ldi r30,lo8(1)
 844 032e EE2E      		mov r14,r30
 845 0330 F12C      		mov r15,__zero_reg__
 846 0332 012D      		mov r16,__zero_reg__
 847 0334 112D      		mov r17,__zero_reg__
 848 0336 00C0      		rjmp 2f
 849 0338 EE0C      	1:	lsl r14
 850 033a FF1C      		rol r15
 851 033c 001F      		rol r16
 852 033e 111F      		rol r17
 853 0340 8A95      	2:	dec r24
 854 0342 02F4      		brpl 1b
 856               	.LM71:
 857 0344 8091 0000 		lds r24,_nrk_signal_list
 858 0348 9091 0000 		lds r25,(_nrk_signal_list)+1
 859 034c A091 0000 		lds r26,(_nrk_signal_list)+2
 860 0350 B091 0000 		lds r27,(_nrk_signal_list)+3
 861 0354 8E21      		and r24,r14
 862 0356 9F21      		and r25,r15
 863 0358 A023      		and r26,r16
 864 035a B123      		and r27,r17
 865 035c 0097      		sbiw r24,0
 866 035e A105      		cpc r26,__zero_reg__
 867 0360 B105      		cpc r27,__zero_reg__
 868 0362 01F4      		brne .L75
 870               	.LM72:
 871 0364 81E0      		ldi r24,lo8(1)
 872 0366 00C0      		rjmp .L91
 873               	.L75:
 875               	.LM73:
 876 0368 0E94 0000 		call nrk_int_disable
 877 036c E0E0      		ldi r30,lo8(nrk_task_TCB+7)
 878 036e F0E0      		ldi r31,hi8(nrk_task_TCB+7)
 879 0370 DD24      		clr r13
 880               	.L78:
 882               	.LM74:
 883 0372 8081      		ld r24,Z
 884 0374 8130      		cpi r24,lo8(1)
 885 0376 01F4      		brne .L79
 887               	.LM75:
 888 0378 8285      		ldd r24,Z+10
 889 037a 9385      		ldd r25,Z+11
 890 037c A485      		ldd r26,Z+12
 891 037e B585      		ldd r27,Z+13
 892 0380 8E21      		and r24,r14
 893 0382 9F21      		and r25,r15
 894 0384 A023      		and r26,r16
 895 0386 B123      		and r27,r17
 896 0388 0097      		sbiw r24,0
 897 038a A105      		cpc r26,__zero_reg__
 898 038c B105      		cpc r27,__zero_reg__
 899 038e 01F0      		breq .L79
 901               	.LM76:
 902 0390 83E0      		ldi r24,lo8(3)
 903 0392 8283      		std Z+2,r24
 905               	.LM77:
 906 0394 1786      		std Z+15,__zero_reg__
 907 0396 1686      		std Z+14,__zero_reg__
 909               	.LM78:
 910 0398 1082      		st Z,__zero_reg__
 912               	.LM79:
 913 039a E286      		std Z+10,r14
 914 039c F386      		std Z+11,r15
 915 039e 0487      		std Z+12,r16
 916 03a0 1587      		std Z+13,r17
 917 03a2 DD24      		clr r13
 918 03a4 D394      		inc r13
 919               	.L79:
 921               	.LM80:
 922 03a6 8081      		ld r24,Z
 923 03a8 8230      		cpi r24,lo8(2)
 924 03aa 01F4      		brne .L82
 926               	.LM81:
 927 03ac 8285      		ldd r24,Z+10
 928 03ae 9385      		ldd r25,Z+11
 929 03b0 A485      		ldd r26,Z+12
 930 03b2 B585      		ldd r27,Z+13
 931 03b4 8E15      		cp r24,r14
 932 03b6 9F05      		cpc r25,r15
 933 03b8 A007      		cpc r26,r16
 934 03ba B107      		cpc r27,r17
 935 03bc 01F4      		brne .L82
 937               	.LM82:
 938 03be 83E0      		ldi r24,lo8(3)
 939 03c0 8283      		std Z+2,r24
 941               	.LM83:
 942 03c2 1786      		std Z+15,__zero_reg__
 943 03c4 1686      		std Z+14,__zero_reg__
 945               	.LM84:
 946 03c6 1082      		st Z,__zero_reg__
 948               	.LM85:
 949 03c8 1286      		std Z+10,__zero_reg__
 950 03ca 1386      		std Z+11,__zero_reg__
 951 03cc 1486      		std Z+12,__zero_reg__
 952 03ce 1586      		std Z+13,__zero_reg__
 953 03d0 DD24      		clr r13
 954 03d2 D394      		inc r13
 955               	.L82:
 956 03d4 B196      		adiw r30,33
 958               	.LM86:
 959 03d6 80E0      		ldi r24,hi8(nrk_task_TCB+106)
 960 03d8 E030      		cpi r30,lo8(nrk_task_TCB+106)
 961 03da F807      		cpc r31,r24
 962 03dc 01F4      		brne .L78
 964               	.LM87:
 965 03de 0E94 0000 		call nrk_int_enable
 967               	.LM88:
 968 03e2 DD20      		tst r13
 969 03e4 01F0      		breq .L86
 970 03e6 81E0      		ldi r24,lo8(1)
 971 03e8 90E0      		ldi r25,hi8(1)
 972 03ea 00C0      		rjmp .L77
 973               	.L86:
 975               	.LM89:
 976 03ec 82E0      		ldi r24,lo8(2)
 977               	.L91:
 978 03ee 0E94 0000 		call _nrk_errno_set
 979 03f2 8FEF      		ldi r24,lo8(-1)
 980 03f4 9FEF      		ldi r25,hi8(-1)
 981               	.L77:
 982               	/* epilogue: frame size=0 */
 983 03f6 1F91      		pop r17
 984 03f8 0F91      		pop r16
 985 03fa FF90      		pop r15
 986 03fc EF90      		pop r14
 987 03fe DF90      		pop r13
 988 0400 0895      		ret
 989               	/* epilogue end (size=6) */
 990               	/* function nrk_event_signal size 113 (102) */
 996               	.Lscope10:
 998               		.stabd	78,0,0
 1001               	.global	nrk_signal_delete
 1003               	nrk_signal_delete:
 1004               		.stabd	46,0,0
 1006               	.LM90:
 1007               	.LFBB11:
 1008               	/* prologue: frame size=0 */
 1009 0402 EF92      		push r14
 1010 0404 FF92      		push r15
 1011 0406 0F93      		push r16
 1012 0408 1F93      		push r17
 1013 040a CF93      		push r28
 1014 040c DF93      		push r29
 1015               	/* prologue end (size=6) */
 1017               	.LM91:
 1018 040e C82F      		mov r28,r24
 1019 0410 DD27      		clr r29
 1020 0412 C7FD      		sbrc r28,7
 1021 0414 D095      		com r29
 1022 0416 F1E0      		ldi r31,lo8(1)
 1023 0418 EF2E      		mov r14,r31
 1024 041a F12C      		mov r15,__zero_reg__
 1025 041c 012D      		mov r16,__zero_reg__
 1026 041e 112D      		mov r17,__zero_reg__
 1027 0420 0C2E      		mov r0,r28
 1028 0422 00C0      		rjmp 2f
 1029 0424 EE0C      	1:	lsl r14
 1030 0426 FF1C      		rol r15
 1031 0428 001F      		rol r16
 1032 042a 111F      		rol r17
 1033 042c 0A94      	2:	dec r0
 1034 042e 02F4      		brpl 1b
 1036               	.LM92:
 1037 0430 8091 0000 		lds r24,_nrk_signal_list
 1038 0434 9091 0000 		lds r25,(_nrk_signal_list)+1
 1039 0438 A091 0000 		lds r26,(_nrk_signal_list)+2
 1040 043c B091 0000 		lds r27,(_nrk_signal_list)+3
 1041 0440 8E21      		and r24,r14
 1042 0442 9F21      		and r25,r15
 1043 0444 A023      		and r26,r16
 1044 0446 B123      		and r27,r17
 1045 0448 0097      		sbiw r24,0
 1046 044a A105      		cpc r26,__zero_reg__
 1047 044c B105      		cpc r27,__zero_reg__
 1048 044e 01F4      		brne .L93
 1050               	.LM93:
 1051 0450 8FEF      		ldi r24,lo8(-1)
 1052 0452 9FEF      		ldi r25,hi8(-1)
 1053 0454 00C0      		rjmp .L95
 1054               	.L93:
 1056               	.LM94:
 1057 0456 0E94 0000 		call nrk_int_disable
 1058 045a E0E0      		ldi r30,lo8(nrk_task_TCB)
 1059 045c F0E0      		ldi r31,hi8(nrk_task_TCB)
 1061               	.LM95:
 1062 045e A801      		movw r20,r16
 1063 0460 9701      		movw r18,r14
 1064 0462 2095      		com r18
 1065 0464 3095      		com r19
 1066 0466 4095      		com r20
 1067 0468 5095      		com r21
 1068               	.L96:
 1070               	.LM96:
 1071 046a 8085      		ldd r24,Z+8
 1072 046c 8F3F      		cpi r24,lo8(-1)
 1073 046e 01F0      		breq .L97
 1075               	.LM97:
 1076 0470 8585      		ldd r24,Z+13
 1077 0472 9685      		ldd r25,Z+14
 1078 0474 A785      		ldd r26,Z+15
 1079 0476 B089      		ldd r27,Z+16
 1080 0478 8E15      		cp r24,r14
 1081 047a 9F05      		cpc r25,r15
 1082 047c A007      		cpc r26,r16
 1083 047e B107      		cpc r27,r17
 1084 0480 01F4      		brne .L99
 1086               	.LM98:
 1087 0482 118A      		std Z+17,__zero_reg__
 1088 0484 128A      		std Z+18,__zero_reg__
 1089 0486 138A      		std Z+19,__zero_reg__
 1090 0488 148A      		std Z+20,__zero_reg__
 1092               	.LM99:
 1093 048a 1782      		std Z+7,__zero_reg__
 1095               	.LM100:
 1096 048c 83E0      		ldi r24,lo8(3)
 1097 048e 8187      		std Z+9,r24
 1098               	.L99:
 1100               	.LM101:
 1101 0490 8585      		ldd r24,Z+13
 1102 0492 9685      		ldd r25,Z+14
 1103 0494 A785      		ldd r26,Z+15
 1104 0496 B089      		ldd r27,Z+16
 1105 0498 8223      		and r24,r18
 1106 049a 9323      		and r25,r19
 1107 049c A423      		and r26,r20
 1108 049e B523      		and r27,r21
 1109 04a0 8587      		std Z+13,r24
 1110 04a2 9687      		std Z+14,r25
 1111 04a4 A787      		std Z+15,r26
 1112 04a6 B08B      		std Z+16,r27
 1114               	.LM102:
 1115 04a8 8189      		ldd r24,Z+17
 1116 04aa 9289      		ldd r25,Z+18
 1117 04ac A389      		ldd r26,Z+19
 1118 04ae B489      		ldd r27,Z+20
 1119 04b0 8223      		and r24,r18
 1120 04b2 9323      		and r25,r19
 1121 04b4 A423      		and r26,r20
 1122 04b6 B523      		and r27,r21
 1123 04b8 818B      		std Z+17,r24
 1124 04ba 928B      		std Z+18,r25
 1125 04bc A38B      		std Z+19,r26
 1126 04be B48B      		std Z+20,r27
 1127               	.L97:
 1128 04c0 B196      		adiw r30,33
 1130               	.LM103:
 1131 04c2 80E0      		ldi r24,hi8(nrk_task_TCB+99)
 1132 04c4 E030      		cpi r30,lo8(nrk_task_TCB+99)
 1133 04c6 F807      		cpc r31,r24
 1134 04c8 01F4      		brne .L96
 1136               	.LM104:
 1137 04ca 2EEF      		ldi r18,lo8(-2)
 1138 04cc 3FEF      		ldi r19,hi8(-2)
 1139 04ce 4FEF      		ldi r20,hlo8(-2)
 1140 04d0 5FEF      		ldi r21,hhi8(-2)
 1141 04d2 00C0      		rjmp 2f
 1142 04d4 220F      	1:	lsl r18
 1143 04d6 331F      		rol r19
 1144 04d8 441F      		rol r20
 1145 04da 551F      		rol r21
 1146 04dc CA95      	2:	dec r28
 1147 04de 02F4      		brpl 1b
 1148 04e0 8091 0000 		lds r24,_nrk_signal_list
 1149 04e4 9091 0000 		lds r25,(_nrk_signal_list)+1
 1150 04e8 A091 0000 		lds r26,(_nrk_signal_list)+2
 1151 04ec B091 0000 		lds r27,(_nrk_signal_list)+3
 1152 04f0 8223      		and r24,r18
 1153 04f2 9323      		and r25,r19
 1154 04f4 A423      		and r26,r20
 1155 04f6 B523      		and r27,r21
 1156 04f8 8093 0000 		sts _nrk_signal_list,r24
 1157 04fc 9093 0000 		sts (_nrk_signal_list)+1,r25
 1158 0500 A093 0000 		sts (_nrk_signal_list)+2,r26
 1159 0504 B093 0000 		sts (_nrk_signal_list)+3,r27
 1161               	.LM105:
 1162 0508 0E94 0000 		call nrk_int_enable
 1163 050c 81E0      		ldi r24,lo8(1)
 1164 050e 90E0      		ldi r25,hi8(1)
 1165               	.L95:
 1166               	/* epilogue: frame size=0 */
 1167 0510 DF91      		pop r29
 1168 0512 CF91      		pop r28
 1169 0514 1F91      		pop r17
 1170 0516 0F91      		pop r16
 1171 0518 FF90      		pop r15
 1172 051a EF90      		pop r14
 1173 051c 0895      		ret
 1174               	/* epilogue end (size=7) */
 1175               	/* function nrk_signal_delete size 143 (130) */
 1180               	.Lscope11:
 1182               		.stabd	78,0,0
 1185               	.global	nrk_sem_pend
 1187               	nrk_sem_pend:
 1188               		.stabd	46,0,0
 1190               	.LM106:
 1191               	.LFBB12:
 1192               	/* prologue: frame size=0 */
 1193 051e 1F93      		push r17
 1194 0520 CF93      		push r28
 1195 0522 DF93      		push r29
 1196               	/* prologue end (size=3) */
 1198               	.LM107:
 1199 0524 0E94 0000 		call nrk_get_resource_index
 1200 0528 182F      		mov r17,r24
 1202               	.LM108:
 1203 052a 8F3F      		cpi r24,lo8(-1)
 1204 052c 01F4      		brne .L106
 1206               	.LM109:
 1207 052e 81E0      		ldi r24,lo8(1)
 1208 0530 00C0      		rjmp .L114
 1209               	.L106:
 1211               	.LM110:
 1212 0532 8230      		cpi r24,lo8(2)
 1213 0534 01F4      		brne .L109
 1214 0536 82E0      		ldi r24,lo8(2)
 1215               	.L114:
 1216 0538 0E94 0000 		call _nrk_errno_set
 1217 053c 8FEF      		ldi r24,lo8(-1)
 1218 053e 9FEF      		ldi r25,hi8(-1)
 1219 0540 00C0      		rjmp .L108
 1220               	.L109:
 1222               	.LM111:
 1223 0542 0E94 0000 		call nrk_int_disable
 1225               	.LM112:
 1226 0546 812F      		mov r24,r17
 1227 0548 9927      		clr r25
 1228 054a 87FD      		sbrc r24,7
 1229 054c 9095      		com r25
 1230 054e EC01      		movw r28,r24
 1231 0550 CC0F      		lsl r28
 1232 0552 DD1F      		rol r29
 1233 0554 C80F      		add r28,r24
 1234 0556 D91F      		adc r29,r25
 1235 0558 C050      		subi r28,lo8(-(nrk_sem_list))
 1236 055a D040      		sbci r29,hi8(-(nrk_sem_list))
 1237 055c 8A81      		ldd r24,Y+2
 1238 055e 8823      		tst r24
 1239 0560 01F4      		brne .L111
 1241               	.LM113:
 1242 0562 E091 0000 		lds r30,nrk_cur_task_TCB
 1243 0566 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1244 056a 8781      		ldd r24,Z+7
 1245 056c 8260      		ori r24,lo8(2)
 1246 056e 8783      		std Z+7,r24
 1248               	.LM114:
 1249 0570 E091 0000 		lds r30,nrk_cur_task_TCB
 1250 0574 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1251 0578 812F      		mov r24,r17
 1252 057a 9927      		clr r25
 1253 057c 87FD      		sbrc r24,7
 1254 057e 9095      		com r25
 1255 0580 A92F      		mov r26,r25
 1256 0582 B92F      		mov r27,r25
 1257 0584 818B      		std Z+17,r24
 1258 0586 928B      		std Z+18,r25
 1259 0588 A38B      		std Z+19,r26
 1260 058a B48B      		std Z+20,r27
 1262               	.LM115:
 1263 058c 0E94 0000 		call nrk_int_enable
 1265               	.LM116:
 1266 0590 80E0      		ldi r24,lo8(0)
 1267 0592 90E0      		ldi r25,hi8(0)
 1268 0594 0E94 0000 		call nrk_wait_until_ticks
 1269               	.L111:
 1271               	.LM117:
 1272 0598 8A81      		ldd r24,Y+2
 1273 059a 8150      		subi r24,lo8(-(-1))
 1274 059c 8A83      		std Y+2,r24
 1276               	.LM118:
 1277 059e E091 0000 		lds r30,nrk_cur_task_TCB
 1278 05a2 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1279 05a6 8981      		ldd r24,Y+1
 1280 05a8 8387      		std Z+11,r24
 1282               	.LM119:
 1283 05aa E091 0000 		lds r30,nrk_cur_task_TCB
 1284 05ae F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1285 05b2 81E0      		ldi r24,lo8(1)
 1286 05b4 8483      		std Z+4,r24
 1288               	.LM120:
 1289 05b6 0E94 0000 		call nrk_int_enable
 1290 05ba 81E0      		ldi r24,lo8(1)
 1291 05bc 90E0      		ldi r25,hi8(1)
 1292               	.L108:
 1293               	/* epilogue: frame size=0 */
 1294 05be DF91      		pop r29
 1295 05c0 CF91      		pop r28
 1296 05c2 1F91      		pop r17
 1297 05c4 0895      		ret
 1298               	/* epilogue end (size=4) */
 1299               	/* function nrk_sem_pend size 84 (77) */
 1304               	.Lscope12:
 1306               		.stabd	78,0,0
 1309               	.global	nrk_event_wait
 1311               	nrk_event_wait:
 1312               		.stabd	46,0,0
 1314               	.LM121:
 1315               	.LFBB13:
 1316               	/* prologue: frame size=0 */
 1317               	/* prologue end (size=0) */
 1318 05c6 9B01      		movw r18,r22
 1319 05c8 AC01      		movw r20,r24
 1321               	.LM122:
 1322 05ca E091 0000 		lds r30,nrk_cur_task_TCB
 1323 05ce F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1324 05d2 8585      		ldd r24,Z+13
 1325 05d4 9685      		ldd r25,Z+14
 1326 05d6 A785      		ldd r26,Z+15
 1327 05d8 B089      		ldd r27,Z+16
 1328 05da 8223      		and r24,r18
 1329 05dc 9323      		and r25,r19
 1330 05de A423      		and r26,r20
 1331 05e0 B523      		and r27,r21
 1332 05e2 0097      		sbiw r24,0
 1333 05e4 A105      		cpc r26,__zero_reg__
 1334 05e6 B105      		cpc r27,__zero_reg__
 1335 05e8 01F4      		brne .L116
 1337               	.LM123:
 1338 05ea 60E0      		ldi r22,lo8(0)
 1339 05ec 70E0      		ldi r23,hi8(0)
 1340 05ee 80E0      		ldi r24,hlo8(0)
 1341 05f0 90E0      		ldi r25,hhi8(0)
 1342 05f2 0895      		ret
 1343               	.L116:
 1345               	.LM124:
 1346 05f4 218B      		std Z+17,r18
 1347 05f6 328B      		std Z+18,r19
 1348 05f8 438B      		std Z+19,r20
 1349 05fa 548B      		std Z+20,r21
 1351               	.LM125:
 1352 05fc 81E0      		ldi r24,lo8(1)
 1353 05fe 8783      		std Z+7,r24
 1355               	.LM126:
 1356 0600 0090 0000 		lds r0,nrk_wakeup_signal
 1357 0604 00C0      		rjmp 2f
 1358 0606 5695      	1:	lsr r21
 1359 0608 4795      		ror r20
 1360 060a 3795      		ror r19
 1361 060c 2795      		ror r18
 1362 060e 0A94      	2:	dec r0
 1363 0610 02F4      		brpl 1b
 1364 0612 C901      		movw r24,r18
 1365 0614 8170      		andi r24,lo8(1)
 1366 0616 9070      		andi r25,hi8(1)
 1367 0618 892B      		or r24,r25
 1368 061a 01F0      		breq .L119
 1370               	.LM127:
 1371 061c 0E94 0000 		call nrk_wait_until_nw
 1372 0620 00C0      		rjmp .L121
 1373               	.L119:
 1375               	.LM128:
 1376 0622 80E0      		ldi r24,lo8(0)
 1377 0624 90E0      		ldi r25,hi8(0)
 1378 0626 0E94 0000 		call nrk_wait_until_ticks
 1379               	.L121:
 1381               	.LM129:
 1382 062a E091 0000 		lds r30,nrk_cur_task_TCB
 1383 062e F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1384 0632 6189      		ldd r22,Z+17
 1385 0634 7289      		ldd r23,Z+18
 1386 0636 8389      		ldd r24,Z+19
 1387 0638 9489      		ldd r25,Z+20
 1389               	.LM130:
 1390 063a 0895      		ret
 1391               	/* epilogue: frame size=0 */
 1392               	/* epilogue: noreturn */
 1393               	/* epilogue end (size=0) */
 1394               	/* function nrk_event_wait size 59 (59) */
 1396               	.Lscope13:
 1398               		.stabd	78,0,0
 1399               		.comm _nrk_signal_list,4,1
 1400               		.comm nrk_idle_task_stk,128,1
 1401               		.comm nrk_kernel_stk_ptr,2,1
 1402               		.comm nrk_task_TCB,99,1
 1403               		.comm nrk_wakeup_signal,1,1
 1404               		.comm _nrk_readyQ,20,1
 1405               		.comm _free_node,2,1
 1406               		.comm _head_node,2,1
 1407               		.comm nrk_cur_task_prio,1,1
 1408               		.comm nrk_cur_task_TCB,2,1
 1409               		.comm nrk_high_ready_prio,1,1
 1410               		.comm nrk_high_ready_TCB,2,1
 1411               		.comm _nrk_resource_cnt,1,1
 1412               		.comm nrk_system_time,8,1
 1413               		.comm error_task,1,1
 1414               		.comm error_num,1,1
 1415               		.comm _nrk_cpu_state,1,1
 1416               		.comm next_next_wakeup,2,1
 1417               		.comm _nrk_prev_timer_val,1,1
 1418               		.comm _nrk_time_trigger,1,1
 1419               		.comm app_timer0_callback,2,1
 1420               		.comm app_timer0_prescale,1,1
 1421               		.comm nrk_sem_list,6,1
 1446               	.Letext0:
 1447               	/* File "../../../src/kernel/source/nrk_events.c": code  803 = 0x0323 ( 755), prologues  21, epilog
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_events.c
     /tmp/ccIQ4Vz9.s:2      *ABS*:0000003f __SREG__
     /tmp/ccIQ4Vz9.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccIQ4Vz9.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccIQ4Vz9.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccIQ4Vz9.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccIQ4Vz9.s:128    .text:00000000 nrk_signal_create
                            *COM*:00000004 _nrk_signal_list
     /tmp/ccIQ4Vz9.s:216    .text:0000007a nrk_signal_get_registered_mask
                            *COM*:00000002 nrk_cur_task_TCB
     /tmp/ccIQ4Vz9.s:241    .text:0000008c nrk_signal_unregister
     /tmp/ccIQ4Vz9.s:339    .text:00000112 nrk_signal_register
     /tmp/ccIQ4Vz9.s:419    .text:00000184 nrk_sem_create
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:00000006 nrk_sem_list
     /tmp/ccIQ4Vz9.s:502    .text:000001da nrk_get_resource_index
     /tmp/ccIQ4Vz9.s:552    .text:000001fc nrk_sem_delete
     /tmp/ccIQ4Vz9.s:626    .text:00000242 nrk_sem_query
     /tmp/ccIQ4Vz9.s:689    .text:0000027a nrk_sem_post
                            *COM*:00000063 nrk_task_TCB
     /tmp/ccIQ4Vz9.s:829    .text:00000322 nrk_event_signal
     /tmp/ccIQ4Vz9.s:1003   .text:00000402 nrk_signal_delete
     /tmp/ccIQ4Vz9.s:1187   .text:0000051e nrk_sem_pend
     /tmp/ccIQ4Vz9.s:1311   .text:000005c6 nrk_event_wait
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000014 _nrk_readyQ
                            *COM*:00000002 _free_node
                            *COM*:00000002 _head_node
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000008 nrk_system_time
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
_nrk_errno_set
nrk_int_disable
nrk_int_enable
nrk_wait_until_ticks
nrk_wait_until_nw
