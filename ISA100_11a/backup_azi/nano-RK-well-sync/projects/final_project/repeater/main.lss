
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ee  00800200  00006f08  00006f7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006f08  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004d6  008002ee  00006ff6  0000706a  2**0
                  ALLOC
  3 .stab         00010824  00000000  00000000  0000706c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00006f01  00000000  00000000  00017890  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__ctors_end>
       4:	0c 94 29 32 	jmp	0x6452	; 0x6452 <__vector_1>
       8:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
       c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      10:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      14:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      18:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      1c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      20:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      24:	0c 94 57 32 	jmp	0x64ae	; 0x64ae <__vector_9>
      28:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      2c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      30:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      34:	0c 94 0a 30 	jmp	0x6014	; 0x6014 <__vector_13>
      38:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      3c:	0c 94 0a 30 	jmp	0x6014	; 0x6014 <__vector_13>
      40:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      44:	0c 94 3d 30 	jmp	0x607a	; 0x607a <__vector_17>
      48:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      4c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      50:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      54:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      58:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      5c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      60:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      64:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      68:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      6c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      70:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      74:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      78:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      7c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      80:	0c 94 47 30 	jmp	0x608e	; 0x608e <__vector_32>
      84:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      88:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      8c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      90:	0c 94 03 1e 	jmp	0x3c06	; 0x3c06 <__vector_36>
      94:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      98:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      9c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      a0:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      a4:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      a8:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      ac:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      b0:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      b4:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      b8:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      bc:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      c0:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      c4:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      c8:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      cc:	65 21       	and	r22, r5
      ce:	6b 21       	and	r22, r11
      d0:	6e 21       	and	r22, r14
      d2:	71 21       	and	r23, r1
      d4:	74 21       	and	r23, r4
      d6:	77 21       	and	r23, r7
      d8:	7d 21       	and	r23, r13
      da:	7a 21       	and	r23, r10
      dc:	80 21       	and	r24, r0
      de:	83 21       	and	r24, r3
      e0:	86 21       	and	r24, r6
      e2:	8c 21       	and	r24, r12
      e4:	8f 21       	and	r24, r15
      e6:	92 21       	and	r25, r2
      e8:	95 21       	and	r25, r5
      ea:	89 21       	and	r24, r9
      ec:	62 21       	and	r22, r2
      ee:	68 21       	and	r22, r8

000000f0 <__c.2409>:
      f0:	43 72 65 61 74 65 20 44 6f 6e 65 0d 0a 00           Create Done...

000000fe <__c.2360>:
      fe:	53 74 61 72 74 69 6e 67 20 75 70 2e 2e 2e 0d 0a     Starting up.....
	...

0000010f <__c.2709>:
     10f:	49 53 41 20 45 52 52 4f 52 3a 20 63 72 65 61 74     ISA ERROR: creat
     11f:	69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66 61     ing tx signal fa
     12f:	69 6c 65 64 0d 0a 00                                iled...

00000136 <__c.2707>:
     136:	49 53 41 20 45 52 52 4f 52 3a 20 63 72 65 61 74     ISA ERROR: creat
     146:	69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66 61     ing rx signal fa
     156:	69 6c 65 64 0d 0a 00                                iled...

0000015d <__c.2736>:
     15d:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 52     CC2420 ERROR:  R
     16d:	65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70 68     elease of semaph
     17d:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

0000018a <__c.2674>:
     18a:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 41     CC2420 ERROR:  A
     19a:	63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68 6f     ccess to semapho
     1aa:	72 65 20 66 61 69 6c 65 64 0d 0a 00                 re failed...

000001b6 <__c.2384>:
     1b6:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001bd <__c.2381>:
     1bd:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1cd:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000001d8 <__c.2378>:
     1d8:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1e8:	20 53 69 67 6e 61 6c 00                              Signal.

000001f0 <__c.2375>:
     1f0:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     200:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000210 <__c.2372>:
     210:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     220:	72 6f 72 00                                         ror.

00000224 <__c.2369>:
     224:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000235 <__c.2366>:
     235:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000244 <__c.2363>:
     244:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     254:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

0000025f <__c.2360>:
     25f:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000026b <__c.2357>:
     26b:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     27b:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     28b:	20 6f 6b 3f 00                                       ok?.

00000290 <__c.2354>:
     290:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2a0:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002ae <__c.2351>:
     2ae:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     2be:	72 74 00                                            rt.

000002c1 <__c.2348>:
     2c1:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     2d1:	49 44 00                                            ID.

000002d4 <__c.2345>:
     2d4:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     2e4:	20 57 61 6b 65 75 70 00                              Wakeup.

000002ec <__c.2342>:
     2ec:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     2fc:	6c 61 74 65 64 00                                   lated.

00000302 <__c.2339>:
     302:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     312:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000031d <__c.2336>:
     31d:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     32d:	69 6e 74 65 72 00                                   inter.

00000333 <__c.2333>:
     333:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     343:	6c 6f 77 00                                         low.

00000347 <__c.2329>:
     347:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     357:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     367:	6e 6f 75 67 68 21 00                                nough!.

0000036e <__c.2326>:
     36e:	29 3a 20 00                                         ): .

00000372 <__c.2324>:
     372:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

0000037e <__c.2257>:
     37e:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

0000038d <__c.2047>:
     38d:	45 46 47 65 66 67 00                                EFGefg.

00000394 <__c.2041>:
     394:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000003a4 <__ctors_end>:
     3a4:	11 24       	eor	r1, r1
     3a6:	1f be       	out	0x3f, r1	; 63
     3a8:	cf ef       	ldi	r28, 0xFF	; 255
     3aa:	d1 e2       	ldi	r29, 0x21	; 33
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	cd bf       	out	0x3d, r28	; 61

000003b0 <__do_copy_data>:
     3b0:	12 e0       	ldi	r17, 0x02	; 2
     3b2:	a0 e0       	ldi	r26, 0x00	; 0
     3b4:	b2 e0       	ldi	r27, 0x02	; 2
     3b6:	e8 e0       	ldi	r30, 0x08	; 8
     3b8:	ff e6       	ldi	r31, 0x6F	; 111
     3ba:	00 e0       	ldi	r16, 0x00	; 0
     3bc:	0b bf       	out	0x3b, r16	; 59
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <__do_copy_data+0x14>
     3c0:	07 90       	elpm	r0, Z+
     3c2:	0d 92       	st	X+, r0
     3c4:	ae 3e       	cpi	r26, 0xEE	; 238
     3c6:	b1 07       	cpc	r27, r17
     3c8:	d9 f7       	brne	.-10     	; 0x3c0 <__do_copy_data+0x10>

000003ca <__do_clear_bss>:
     3ca:	17 e0       	ldi	r17, 0x07	; 7
     3cc:	ae ee       	ldi	r26, 0xEE	; 238
     3ce:	b2 e0       	ldi	r27, 0x02	; 2
     3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <.do_clear_bss_start>

000003d2 <.do_clear_bss_loop>:
     3d2:	1d 92       	st	X+, r1

000003d4 <.do_clear_bss_start>:
     3d4:	a4 3c       	cpi	r26, 0xC4	; 196
     3d6:	b1 07       	cpc	r27, r17
     3d8:	e1 f7       	brne	.-8      	; 0x3d2 <.do_clear_bss_loop>
     3da:	0e 94 23 03 	call	0x646	; 0x646 <main>
     3de:	0c 94 83 37 	jmp	0x6f06	; 0x6f06 <_exit>

000003e2 <__bad_interrupt>:
     3e2:	0c 94 75 30 	jmp	0x60ea	; 0x60ea <__vector_default>

000003e6 <nrk_create_taskset>:


void
nrk_create_taskset()
{
  TaskOne.task = Task1;
     3e6:	80 e5       	ldi	r24, 0x50	; 80
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	90 93 53 03 	sts	0x0353, r25
     3ee:	80 93 52 03 	sts	0x0352, r24
  TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE-1];
     3f2:	81 ef       	ldi	r24, 0xF1	; 241
     3f4:	94 e0       	ldi	r25, 0x04	; 4
     3f6:	90 93 4f 03 	sts	0x034F, r25
     3fa:	80 93 4e 03 	sts	0x034E, r24
  TaskOne.Pbos = (void *) &Stack1[0];
     3fe:	82 e7       	ldi	r24, 0x72	; 114
     400:	94 e0       	ldi	r25, 0x04	; 4
     402:	90 93 51 03 	sts	0x0351, r25
     406:	80 93 50 03 	sts	0x0350, r24
  TaskOne.prio = 2;
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	80 93 55 03 	sts	0x0355, r24
  TaskOne.FirstActivation = TRUE;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	80 93 54 03 	sts	0x0354, r24
  TaskOne.Type = BASIC_TASK;
     416:	80 93 56 03 	sts	0x0356, r24
  TaskOne.SchType = PREEMPTIVE;
     41a:	80 93 57 03 	sts	0x0357, r24
  TaskOne.period.secs = 0;
     41e:	10 92 58 03 	sts	0x0358, r1
     422:	10 92 59 03 	sts	0x0359, r1
     426:	10 92 5a 03 	sts	0x035A, r1
     42a:	10 92 5b 03 	sts	0x035B, r1
  TaskOne.period.nano_secs = 20*NANOS_PER_MS;
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	9d e2       	ldi	r25, 0x2D	; 45
     432:	a1 e3       	ldi	r26, 0x31	; 49
     434:	b1 e0       	ldi	r27, 0x01	; 1
     436:	80 93 5c 03 	sts	0x035C, r24
     43a:	90 93 5d 03 	sts	0x035D, r25
     43e:	a0 93 5e 03 	sts	0x035E, r26
     442:	b0 93 5f 03 	sts	0x035F, r27
  TaskOne.cpu_reserve.secs = 0;
     446:	10 92 60 03 	sts	0x0360, r1
     44a:	10 92 61 03 	sts	0x0361, r1
     44e:	10 92 62 03 	sts	0x0362, r1
     452:	10 92 63 03 	sts	0x0363, r1
  TaskOne.cpu_reserve.nano_secs = 20*NANOS_PER_MS;
     456:	80 93 64 03 	sts	0x0364, r24
     45a:	90 93 65 03 	sts	0x0365, r25
     45e:	a0 93 66 03 	sts	0x0366, r26
     462:	b0 93 67 03 	sts	0x0367, r27
  TaskOne.offset.secs = 0;
     466:	10 92 68 03 	sts	0x0368, r1
     46a:	10 92 69 03 	sts	0x0369, r1
     46e:	10 92 6a 03 	sts	0x036A, r1
     472:	10 92 6b 03 	sts	0x036B, r1
  TaskOne.offset.nano_secs= 50*NANOS_PER_MS;
     476:	80 e8       	ldi	r24, 0x80	; 128
     478:	90 ef       	ldi	r25, 0xF0	; 240
     47a:	aa ef       	ldi	r26, 0xFA	; 250
     47c:	b2 e0       	ldi	r27, 0x02	; 2
     47e:	80 93 6c 03 	sts	0x036C, r24
     482:	90 93 6d 03 	sts	0x036D, r25
     486:	a0 93 6e 03 	sts	0x036E, r26
     48a:	b0 93 6f 03 	sts	0x036F, r27
  nrk_activate_task (&TaskOne);
     48e:	8d e4       	ldi	r24, 0x4D	; 77
     490:	93 e0       	ldi	r25, 0x03	; 3
     492:	0e 94 df 28 	call	0x51be	; 0x51be <nrk_activate_task>


  nrk_kprintf( PSTR("Create Done\r\n") );
     496:	80 ef       	ldi	r24, 0xF0	; 240
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <nrk_kprintf>
     49e:	08 95       	ret

000004a0 <Task1>:
  return 0;
}


void Task1()
{
     4a0:	2f 92       	push	r2
     4a2:	3f 92       	push	r3
     4a4:	4f 92       	push	r4
     4a6:	5f 92       	push	r5
     4a8:	6f 92       	push	r6
     4aa:	7f 92       	push	r7
     4ac:	8f 92       	push	r8
     4ae:	9f 92       	push	r9
     4b0:	af 92       	push	r10
     4b2:	bf 92       	push	r11
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	22 97       	sbiw	r28, 0x02	; 2
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61

  char c = -1;
  nrk_sig_t uart_rx_signal;
  uint8_t finished = 0;

  printf( "Task1 PID=%d\r\n",nrk_get_pid());
     4d4:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <nrk_get_pid>
     4d8:	99 27       	eor	r25, r25
     4da:	9f 93       	push	r25
     4dc:	8f 93       	push	r24
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	9f 93       	push	r25
     4e4:	8f 93       	push	r24
     4e6:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>
  
  nrk_led_set(RED_LED);
     4ea:	83 e0       	ldi	r24, 0x03	; 3
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <nrk_led_set>
  
  isa_set_channel_pattern(1);
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <isa_set_channel_pattern>

  isa_init (ISA_REPEATER, MY_ID, MY_CLK_SRC_ID);//change
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	62 e0       	ldi	r22, 0x02	; 2
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	0e 94 09 0a 	call	0x1412	; 0x1412 <isa_init>
  
  isa_set_schedule(ISA_REPEATER, MY_CLK_SRC_ID);
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <isa_set_schedule>

  isa_set_channel(MY_CHANNEL);
     50c:	83 e1       	ldi	r24, 0x13	; 19
     50e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <isa_set_channel>

  isa_start();
     512:	0e 94 d5 03 	call	0x7aa	; 0x7aa <isa_start>
  
  isa_rx_pkt_set_buffer(rx_buf, RF_MAX_PAYLOAD_SIZE);
     516:	64 e7       	ldi	r22, 0x74	; 116
     518:	8d ef       	ldi	r24, 0xFD	; 253
     51a:	93 e0       	ldi	r25, 0x03	; 3
     51c:	0e 94 c5 03 	call	0x78a	; 0x78a <isa_rx_pkt_set_buffer>
  
  while(!isa_ready())  nrk_wait_until_next_period(); 
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	02 c0       	rjmp	.+4      	; 0x52e <Task1+0x8e>
     52a:	0e 94 a1 28 	call	0x5142	; 0x5142 <nrk_wait_until_next_period>
     52e:	0e 94 bb 03 	call	0x776	; 0x776 <isa_ready>
     532:	88 23       	and	r24, r24
     534:	d1 f3       	breq	.-12     	; 0x52a <Task1+0x8a>
	else
	    my_tx_slot[i]=tx_slot_from_join[i];
    }	   
  printf("MAIN_TX:%d\r\n",my_tx_slot[0]);*/

  printf("isa start!\n\r");
     536:	8f e0       	ldi	r24, 0x0F	; 15
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
  while(1){


//Spit out log info
	  	  if (txCount % 1000 == 0){
	  	printf ("TxCount: %d\r\nRXCount: %d\r\nPacketLoss:%d", txCount,rxCount, packetsLost);
     546:	5c e1       	ldi	r21, 0x1C	; 28
     548:	25 2e       	mov	r2, r21
     54a:	52 e0       	ldi	r21, 0x02	; 2
     54c:	35 2e       	mov	r3, r21
	  	  }

//nrk_gpio_toggle(NRK_DEBUG_0);
       if( isa_rx_pkt_check()!=0 ) {

	    local_rx_buf=isa_rx_pkt_get(&length, &rssi);
     54e:	42 e0       	ldi	r20, 0x02	; 2
     550:	44 2e       	mov	r4, r20
     552:	51 2c       	mov	r5, r1
     554:	4c 0e       	add	r4, r28
     556:	5d 1e       	adc	r5, r29
     558:	3e 01       	movw	r6, r28
     55a:	08 94       	sec
     55c:	61 1c       	adc	r6, r1
     55e:	71 1c       	adc	r7, r1
	    //printf("\r\n");
	    //sprintf( &tx_buf[PKT_DATA_START],"Hello Mingzhe!");
	    //length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+1;
	    //isa_tx_pkt(tx_buf,length,configDHDR(),MY_TX_SLOT);

	    length=strlen(&rx_buf[PKT_DATA_START])+PKT_DATA_START+1; //change
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	e3 2e       	mov	r14, r19
     564:	34 e0       	ldi	r19, 0x04	; 4
     566:	f3 2e       	mov	r15, r19
     568:	2d ef       	ldi	r18, 0xFD	; 253
     56a:	82 2e       	mov	r8, r18
     56c:	2f ef       	ldi	r18, 0xFF	; 255
     56e:	92 2e       	mov	r9, r18
     570:	8e 0c       	add	r8, r14
     572:	9f 1c       	adc	r9, r15
	length=strlen(&rx_buf[PKT_DATA_START])+PKT_DATA_START+1; //change
	//isa_tx_pkt(rx_buf,length,configDHDR(),my_tx_slot[0]);//change forward the message from recipient
	isa_tx_pkt(rx_buf,length,configDHDR(),MY_TX_SLOT);
	isa_wait_until_rx_or_tx ();*/

	sprintf( &tx_buf[PKT_DATA_START],"2");
     574:	0d e1       	ldi	r16, 0x1D	; 29
     576:	15 e0       	ldi	r17, 0x05	; 5
     578:	94 e4       	ldi	r25, 0x44	; 68
     57a:	a9 2e       	mov	r10, r25
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	b9 2e       	mov	r11, r25
     580:	8d ef       	ldi	r24, 0xFD	; 253
     582:	c8 2e       	mov	r12, r24
     584:	8f ef       	ldi	r24, 0xFF	; 255
     586:	d8 2e       	mov	r13, r24
     588:	c0 0e       	add	r12, r16
     58a:	d1 1e       	adc	r13, r17
  //i=0;
  while(1){


//Spit out log info
	  	  if (txCount % 1000 == 0){
     58c:	20 91 f2 02 	lds	r18, 0x02F2
     590:	30 91 f3 02 	lds	r19, 0x02F3
     594:	c9 01       	movw	r24, r18
     596:	68 ee       	ldi	r22, 0xE8	; 232
     598:	73 e0       	ldi	r23, 0x03	; 3
     59a:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodhi4>
     59e:	89 2b       	or	r24, r25
     5a0:	d1 f4       	brne	.+52     	; 0x5d6 <Task1+0x136>
	  	printf ("TxCount: %d\r\nRXCount: %d\r\nPacketLoss:%d", txCount,rxCount, packetsLost);
     5a2:	80 91 f6 02 	lds	r24, 0x02F6
     5a6:	90 91 f7 02 	lds	r25, 0x02F7
     5aa:	9f 93       	push	r25
     5ac:	8f 93       	push	r24
     5ae:	80 91 f4 02 	lds	r24, 0x02F4
     5b2:	90 91 f5 02 	lds	r25, 0x02F5
     5b6:	9f 93       	push	r25
     5b8:	8f 93       	push	r24
     5ba:	3f 93       	push	r19
     5bc:	2f 93       	push	r18
     5be:	3f 92       	push	r3
     5c0:	2f 92       	push	r2
     5c2:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>
     5c6:	8d b7       	in	r24, 0x3d	; 61
     5c8:	9e b7       	in	r25, 0x3e	; 62
     5ca:	08 96       	adiw	r24, 0x08	; 8
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	9e bf       	out	0x3e, r25	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	8d bf       	out	0x3d, r24	; 61
	  	  }

//nrk_gpio_toggle(NRK_DEBUG_0);
       if( isa_rx_pkt_check()!=0 ) {
     5d6:	0e 94 37 04 	call	0x86e	; 0x86e <isa_rx_pkt_check>
     5da:	88 23       	and	r24, r24
     5dc:	b9 f0       	breq	.+46     	; 0x60c <Task1+0x16c>

	    local_rx_buf=isa_rx_pkt_get(&length, &rssi);
     5de:	b2 01       	movw	r22, r4
     5e0:	c3 01       	movw	r24, r6
     5e2:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <isa_rx_pkt_get>
	    //printf("\r\n");
	    //sprintf( &tx_buf[PKT_DATA_START],"Hello Mingzhe!");
	    //length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+1;
	    //isa_tx_pkt(tx_buf,length,configDHDR(),MY_TX_SLOT);

	    length=strlen(&rx_buf[PKT_DATA_START])+PKT_DATA_START+1; //change
     5e6:	f7 01       	movw	r30, r14
     5e8:	01 90       	ld	r0, Z+
     5ea:	00 20       	and	r0, r0
     5ec:	e9 f7       	brne	.-6      	; 0x5e8 <Task1+0x148>
     5ee:	e1 50       	subi	r30, 0x01	; 1
     5f0:	f4 40       	sbci	r31, 0x04	; 4
     5f2:	ec 5f       	subi	r30, 0xFC	; 252
     5f4:	e9 83       	std	Y+1, r30	; 0x01
	    isa_tx_pkt(rx_buf,length,configDHDR(8),MY_TX_SLOT1);//change forward the message from recipient
     5f6:	88 e0       	ldi	r24, 0x08	; 8
     5f8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <configDHDR>
     5fc:	28 e0       	ldi	r18, 0x08	; 8
     5fe:	48 2f       	mov	r20, r24
     600:	69 81       	ldd	r22, Y+1	; 0x01
     602:	c4 01       	movw	r24, r8
     604:	0e 94 46 04 	call	0x88c	; 0x88c <isa_tx_pkt>

	    //printf(" Forward message is sent.\n\r");
 	    //printf("pkt length:%d",length);
	    //printf("%d\r\n",cnt++);
	  //  printf( "%c",local_rx_buf[PKT_DATA_START]);
	    isa_rx_pkt_release();
     608:	0e 94 3d 04 	call	0x87a	; 0x87a <isa_rx_pkt_release>
	   // printf("\r\n");

	}

       if(isa_tx_pkt_check(MY_TX_SLOT)!=0){
     60c:	87 e0       	ldi	r24, 0x07	; 7
     60e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <isa_tx_pkt_check>
     612:	88 23       	and	r24, r24
     614:	a9 f4       	brne	.+42     	; 0x640 <Task1+0x1a0>
	length=strlen(&rx_buf[PKT_DATA_START])+PKT_DATA_START+1; //change
	//isa_tx_pkt(rx_buf,length,configDHDR(),my_tx_slot[0]);//change forward the message from recipient
	isa_tx_pkt(rx_buf,length,configDHDR(),MY_TX_SLOT);
	isa_wait_until_rx_or_tx ();*/

	sprintf( &tx_buf[PKT_DATA_START],"2");
     616:	b5 01       	movw	r22, r10
     618:	c8 01       	movw	r24, r16
     61a:	0e 94 b8 34 	call	0x6970	; 0x6970 <strcpy>
	length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+1;
     61e:	f8 01       	movw	r30, r16
     620:	01 90       	ld	r0, Z+
     622:	00 20       	and	r0, r0
     624:	e9 f7       	brne	.-6      	; 0x620 <Task1+0x180>
     626:	ee 51       	subi	r30, 0x1E	; 30
     628:	f5 40       	sbci	r31, 0x05	; 5
     62a:	ec 5f       	subi	r30, 0xFC	; 252
     62c:	e9 83       	std	Y+1, r30	; 0x01
	isa_tx_pkt(tx_buf,length,configDHDR(7),MY_TX_SLOT);
     62e:	87 e0       	ldi	r24, 0x07	; 7
     630:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <configDHDR>
     634:	27 e0       	ldi	r18, 0x07	; 7
     636:	48 2f       	mov	r20, r24
     638:	69 81       	ldd	r22, Y+1	; 0x01
     63a:	c6 01       	movw	r24, r12
     63c:	0e 94 46 04 	call	0x88c	; 0x88c <isa_tx_pkt>
	isa_tx_pkt(tx_buf2,length,configDHDR(),2);
	isa_wait_until_rx_or_tx ();*/

       }

       isa_wait_until_rx_or_tx ();
     640:	0e 94 b8 08 	call	0x1170	; 0x1170 <isa_wait_until_rx_or_tx>
     644:	a3 cf       	rjmp	.-186    	; 0x58c <Task1+0xec>

00000646 <main>:
nrk_time_t timeout;



int main ()
{
     646:	cf ef       	ldi	r28, 0xFF	; 255
     648:	d1 e2       	ldi	r29, 0x21	; 33
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	cd bf       	out	0x3d, r28	; 61
  nrk_setup_ports();
     64e:	0e 94 85 19 	call	0x330a	; 0x330a <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
     652:	87 e0       	ldi	r24, 0x07	; 7
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nrk_setup_uart>

  nrk_kprintf( PSTR("Starting up...\r\n") );
     65a:	8e ef       	ldi	r24, 0xFE	; 254
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <nrk_kprintf>
	
  nrk_init();
     662:	0e 94 78 20 	call	0x40f0	; 0x40f0 <nrk_init>

  nrk_led_clr(0);
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <nrk_led_clr>
  nrk_led_clr(1);
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <nrk_led_clr>
  nrk_led_clr(2);
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <nrk_led_clr>
  nrk_led_clr(3);
     67e:	83 e0       	ldi	r24, 0x03	; 3
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <nrk_led_clr>
  
  nrk_time_set(0,0);
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 43 2a 	call	0x5486	; 0x5486 <nrk_time_set>
  
  isa_task_config();
     69a:	0e 94 91 04 	call	0x922	; 0x922 <isa_task_config>
  
  nrk_create_taskset ();
     69e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <nrk_create_taskset>

  nrk_start();
     6a2:	0e 94 18 20 	call	0x4030	; 0x4030 <nrk_start>
  
  return 0;
}
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0c 94 83 37 	jmp	0x6f06	; 0x6f06 <_exit>

000006ae <config_child_list>:
	    my_tx_slot[i]=tx_slot_from_join[i];
    }	   
  printf("MAIN_TX:%d\r\n",my_tx_slot[0]);*/

  printf("isa start!\n\r");

     6ae:	21 e0       	ldi	r18, 0x01	; 1
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <config_child_list+0x12>
     6b8:	22 0f       	add	r18, r18
     6ba:	33 1f       	adc	r19, r19
     6bc:	44 1f       	adc	r20, r20
     6be:	55 1f       	adc	r21, r21
     6c0:	8a 95       	dec	r24
     6c2:	d2 f7       	brpl	.-12     	; 0x6b8 <config_child_list+0xa>
     6c4:	80 91 f8 02 	lds	r24, 0x02F8
     6c8:	90 91 f9 02 	lds	r25, 0x02F9
     6cc:	a0 91 fa 02 	lds	r26, 0x02FA
     6d0:	b0 91 fb 02 	lds	r27, 0x02FB
     6d4:	82 2b       	or	r24, r18
     6d6:	93 2b       	or	r25, r19
     6d8:	a4 2b       	or	r26, r20
     6da:	b5 2b       	or	r27, r21
     6dc:	80 93 f8 02 	sts	0x02F8, r24
     6e0:	90 93 f9 02 	sts	0x02F9, r25
     6e4:	a0 93 fa 02 	sts	0x02FA, r26
     6e8:	b0 93 fb 02 	sts	0x02FB, r27
     6ec:	08 95       	ret

000006ee <isa_get_channel>:
       if( isa_rx_pkt_check()!=0 ) {

	    local_rx_buf=isa_rx_pkt_get(&length, &rssi);

	    //printf("length is %d, rssi is %d.\n\r",length,rssi);
	    //local_rx_buf[PKT_DATA_START+length-2]='\0';
     6ee:	80 91 18 03 	lds	r24, 0x0318
	    //printf("RX[%d]",slot);
	    /*for(i=PKT_DATA_START; i<length-1; i++ )
     6f2:	99 27       	eor	r25, r25
     6f4:	08 95       	ret

000006f6 <isa_set_channel_pattern>:
		printf( "%c",local_rx_buf[i]);*/
	    //printf("\r\n");
	    //sprintf( &tx_buf[PKT_DATA_START],"Hello Mingzhe!");
	    //length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+1;
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	19 f0       	breq	.+6      	; 0x700 <isa_set_channel_pattern+0xa>
     6fa:	83 30       	cpi	r24, 0x03	; 3
     6fc:	d9 f5       	brne	.+118    	; 0x774 <isa_set_channel_pattern+0x7e>
     6fe:	31 c0       	rjmp	.+98     	; 0x762 <isa_set_channel_pattern+0x6c>
	    //isa_tx_pkt(tx_buf,length,configDHDR(),MY_TX_SLOT);

	    length=strlen(&rx_buf[PKT_DATA_START])+PKT_DATA_START+1; //change
     700:	83 e1       	ldi	r24, 0x13	; 19
     702:	80 93 d3 06 	sts	0x06D3, r24
	    isa_tx_pkt(rx_buf,length,configDHDR(8),MY_TX_SLOT1);//change forward the message from recipient
     706:	8c e0       	ldi	r24, 0x0C	; 12
     708:	80 93 d4 06 	sts	0x06D4, r24

     70c:	84 e1       	ldi	r24, 0x14	; 20
     70e:	80 93 d5 06 	sts	0x06D5, r24
	    //printf(" Forward message is sent.\n\r");
     712:	88 e1       	ldi	r24, 0x18	; 24
     714:	80 93 d6 06 	sts	0x06D6, r24
 	    //printf("pkt length:%d",length);
     718:	80 e1       	ldi	r24, 0x10	; 16
     71a:	80 93 d7 06 	sts	0x06D7, r24
	    //printf("%d\r\n",cnt++);
     71e:	87 e1       	ldi	r24, 0x17	; 23
     720:	80 93 d8 06 	sts	0x06D8, r24
	  //  printf( "%c",local_rx_buf[PKT_DATA_START]);
     724:	82 e1       	ldi	r24, 0x12	; 18
     726:	80 93 d9 06 	sts	0x06D9, r24
	    isa_rx_pkt_release();
     72a:	89 e1       	ldi	r24, 0x19	; 25
     72c:	80 93 da 06 	sts	0x06DA, r24
	   // printf("\r\n");
     730:	8e e0       	ldi	r24, 0x0E	; 14
     732:	80 93 db 06 	sts	0x06DB, r24

     736:	85 e1       	ldi	r24, 0x15	; 21
     738:	80 93 dc 06 	sts	0x06DC, r24
	}
     73c:	8b e0       	ldi	r24, 0x0B	; 11
     73e:	80 93 dd 06 	sts	0x06DD, r24

     742:	8f e0       	ldi	r24, 0x0F	; 15
     744:	80 93 de 06 	sts	0x06DE, r24
       if(isa_tx_pkt_check(MY_TX_SLOT)!=0){
     748:	86 e1       	ldi	r24, 0x16	; 22
     74a:	80 93 df 06 	sts	0x06DF, r24
       	  // printf("Pending TX\r\n");
     74e:	81 e1       	ldi	r24, 0x11	; 17
     750:	80 93 e0 06 	sts	0x06E0, r24
       	}
     754:	8d e0       	ldi	r24, 0x0D	; 13
     756:	80 93 e1 06 	sts	0x06E1, r24
       else{
     75a:	8a e1       	ldi	r24, 0x1A	; 26
     75c:	80 93 e2 06 	sts	0x06E2, r24
     760:	08 95       	ret
	/*sprintf( &tx_buf[PKT_DATA_START],local_rx_buf+PKT_DATA_START);
	length=strlen(&rx_buf[PKT_DATA_START])+PKT_DATA_START+1; //change
	//isa_tx_pkt(rx_buf,length,configDHDR(),my_tx_slot[0]);//change forward the message from recipient
     762:	8f e0       	ldi	r24, 0x0F	; 15
     764:	80 93 ce 06 	sts	0x06CE, r24
	isa_tx_pkt(rx_buf,length,configDHDR(),MY_TX_SLOT);
     768:	84 e1       	ldi	r24, 0x14	; 20
     76a:	80 93 cf 06 	sts	0x06CF, r24
	isa_wait_until_rx_or_tx ();*/
     76e:	89 e1       	ldi	r24, 0x19	; 25
     770:	80 93 d0 06 	sts	0x06D0, r24
     774:	08 95       	ret

00000776 <isa_ready>:
	isa_tx_pkt(tx_buf,length,configDHDR(7),MY_TX_SLOT);


	/*sprintf( &tx_buf2[PKT_DATA_START],"Hello from slot 2!");
	length=strlen(&tx_buf2[PKT_DATA_START])+PKT_DATA_START+1;
	isa_tx_pkt(tx_buf2,length,configDHDR(),2);
     776:	80 91 19 05 	lds	r24, 0x0519
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	19 f4       	brne	.+6      	; 0x784 <isa_ready+0xe>
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	08 95       	ret
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	9f ef       	ldi	r25, 0xFF	; 255
	isa_wait_until_rx_or_tx ();*/

       }

     788:	08 95       	ret

0000078a <isa_rx_pkt_set_buffer>:
       isa_wait_until_rx_or_tx ();
      // 	putchar('\n');
      // 	putchar('\r');
  }
  
     78a:	66 23       	and	r22, r22
     78c:	59 f0       	breq	.+22     	; 0x7a4 <isa_rx_pkt_set_buffer+0x1a>
     78e:	00 97       	sbiw	r24, 0x00	; 0
     790:	49 f0       	breq	.+18     	; 0x7a4 <isa_rx_pkt_set_buffer+0x1a>

     792:	90 93 0b 03 	sts	0x030B, r25
     796:	80 93 0a 03 	sts	0x030A, r24
}
     79a:	60 93 09 03 	sts	0x0309, r22
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	08 95       	ret


     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	9f ef       	ldi	r25, 0xFF	; 255
void
     7a8:	08 95       	ret

000007aa <isa_start>:
     7aa:	82 e0       	ldi	r24, 0x02	; 2
     7ac:	80 93 19 05 	sts	0x0519, r24
     7b0:	08 95       	ret

000007b2 <configDHDR>:
     7b2:	28 2f       	mov	r18, r24
     7b4:	88 30       	cpi	r24, 0x08	; 8
     7b6:	49 f0       	breq	.+18     	; 0x7ca <configDHDR+0x18>
     7b8:	80 91 f0 02 	lds	r24, 0x02F0
     7bc:	90 91 f1 02 	lds	r25, 0x02F1
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	90 93 f1 02 	sts	0x02F1, r25
     7c6:	80 93 f0 02 	sts	0x02F0, r24
     7ca:	80 91 fc 03 	lds	r24, 0x03FC
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	70 f4       	brcc	.+28     	; 0x7ee <configDHDR+0x3c>
     7d2:	80 91 f0 02 	lds	r24, 0x02F0
     7d6:	90 91 f1 02 	lds	r25, 0x02F1
     7da:	68 ec       	ldi	r22, 0xC8	; 200
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodhi4>
     7e2:	89 2b       	or	r24, r25
     7e4:	21 f4       	brne	.+8      	; 0x7ee <configDHDR+0x3c>
     7e6:	28 30       	cpi	r18, 0x08	; 8
     7e8:	11 f0       	breq	.+4      	; 0x7ee <configDHDR+0x3c>
     7ea:	85 ee       	ldi	r24, 0xE5	; 229
     7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <configDHDR+0x3e>
     7ee:	81 ee       	ldi	r24, 0xE1	; 225
     7f0:	99 27       	eor	r25, r25
     7f2:	87 fd       	sbrc	r24, 7
     7f4:	90 95       	com	r25
     7f6:	08 95       	ret

000007f8 <configDHR>:
     7f8:	88 23       	and	r24, r24
     7fa:	11 f0       	breq	.+4      	; 0x800 <configDHR+0x8>
     7fc:	83 e8       	ldi	r24, 0x83	; 131
     7fe:	01 c0       	rjmp	.+2      	; 0x802 <configDHR+0xa>
     800:	83 e0       	ldi	r24, 0x03	; 3
     802:	99 27       	eor	r25, r25
     804:	87 fd       	sbrc	r24, 7
     806:	90 95       	com	r25
     808:	08 95       	ret

0000080a <configAdvDAUX>:
     80a:	8f 92       	push	r8
     80c:	af 92       	push	r10
     80e:	cf 92       	push	r12
     810:	ef 92       	push	r14
     812:	0f 93       	push	r16
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	10 92 b1 06 	sts	0x06B1, r1
     820:	9a e0       	ldi	r25, 0x0A	; 10
     822:	90 93 b8 06 	sts	0x06B8, r25
     826:	10 92 b9 06 	sts	0x06B9, r1
     82a:	80 93 ba 06 	sts	0x06BA, r24
     82e:	60 93 bb 06 	sts	0x06BB, r22
     832:	40 93 bc 06 	sts	0x06BC, r20
     836:	10 92 bd 06 	sts	0x06BD, r1
     83a:	20 93 c4 06 	sts	0x06C4, r18
     83e:	00 93 c5 06 	sts	0x06C5, r16
     842:	e0 92 c6 06 	sts	0x06C6, r14
     846:	c0 92 c7 06 	sts	0x06C7, r12
     84a:	a0 92 c8 06 	sts	0x06C8, r10
     84e:	80 92 c9 06 	sts	0x06C9, r8
     852:	8a 85       	ldd	r24, Y+10	; 0x0a
     854:	80 93 ca 06 	sts	0x06CA, r24
     858:	8b 85       	ldd	r24, Y+11	; 0x0b
     85a:	80 93 cb 06 	sts	0x06CB, r24
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	0f 91       	pop	r16
     864:	ef 90       	pop	r14
     866:	cf 90       	pop	r12
     868:	af 90       	pop	r10
     86a:	8f 90       	pop	r8
     86c:	08 95       	ret

0000086e <isa_rx_pkt_check>:
     86e:	80 91 03 06 	lds	r24, 0x0603
     872:	99 27       	eor	r25, r25
     874:	87 fd       	sbrc	r24, 7
     876:	90 95       	com	r25
     878:	08 95       	ret

0000087a <isa_rx_pkt_release>:
     87a:	10 92 03 06 	sts	0x0603, r1
     87e:	10 92 04 06 	sts	0x0604, r1
     882:	10 92 05 06 	sts	0x0605, r1
     886:	10 92 06 06 	sts	0x0606, r1
     88a:	08 95       	ret

0000088c <isa_tx_pkt>:
     88c:	33 27       	eor	r19, r19
     88e:	f9 01       	movw	r30, r18
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	ea 56       	subi	r30, 0x6A	; 106
     89a:	fa 4f       	sbci	r31, 0xFA	; 250
     89c:	93 83       	std	Z+3, r25	; 0x03
     89e:	82 83       	std	Z+2, r24	; 0x02
     8a0:	60 83       	st	Z, r22
     8a2:	41 83       	std	Z+1, r20	; 0x01
     8a4:	41 e0       	ldi	r20, 0x01	; 1
     8a6:	50 e0       	ldi	r21, 0x00	; 0
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <isa_tx_pkt+0x2a>
     8ae:	44 0f       	add	r20, r20
     8b0:	55 1f       	adc	r21, r21
     8b2:	66 1f       	adc	r22, r22
     8b4:	77 1f       	adc	r23, r23
     8b6:	2a 95       	dec	r18
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <isa_tx_pkt+0x22>
     8ba:	80 91 1f 03 	lds	r24, 0x031F
     8be:	90 91 20 03 	lds	r25, 0x0320
     8c2:	a0 91 21 03 	lds	r26, 0x0321
     8c6:	b0 91 22 03 	lds	r27, 0x0322
     8ca:	84 2b       	or	r24, r20
     8cc:	95 2b       	or	r25, r21
     8ce:	a6 2b       	or	r26, r22
     8d0:	b7 2b       	or	r27, r23
     8d2:	80 93 1f 03 	sts	0x031F, r24
     8d6:	90 93 20 03 	sts	0x0320, r25
     8da:	a0 93 21 03 	sts	0x0321, r26
     8de:	b0 93 22 03 	sts	0x0322, r27
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	08 95       	ret

000008e8 <isa_tx_pkt_check>:
     8e8:	20 91 1f 03 	lds	r18, 0x031F
     8ec:	30 91 20 03 	lds	r19, 0x0320
     8f0:	40 91 21 03 	lds	r20, 0x0321
     8f4:	50 91 22 03 	lds	r21, 0x0322
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <isa_tx_pkt_check+0x1a>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <isa_tx_pkt_check+0x12>
     906:	c9 01       	movw	r24, r18
     908:	81 70       	andi	r24, 0x01	; 1
     90a:	90 70       	andi	r25, 0x00	; 0
     90c:	08 95       	ret

0000090e <isa_join_ready>:
     90e:	80 91 f3 03 	lds	r24, 0x03F3
     912:	81 30       	cpi	r24, 0x01	; 1
     914:	19 f4       	brne	.+6      	; 0x91c <isa_join_ready+0xe>
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	08 95       	ret
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	9f ef       	ldi	r25, 0xFF	; 255
     920:	08 95       	ret

00000922 <isa_task_config>:
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	86 ee       	ldi	r24, 0xE6	; 230
     928:	98 e0       	ldi	r25, 0x08	; 8
     92a:	90 93 30 03 	sts	0x0330, r25
     92e:	80 93 2f 03 	sts	0x032F, r24
     932:	0a e2       	ldi	r16, 0x2A	; 42
     934:	13 e0       	ldi	r17, 0x03	; 3
     936:	40 e8       	ldi	r20, 0x80	; 128
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	60 e7       	ldi	r22, 0x70	; 112
     93c:	73 e0       	ldi	r23, 0x03	; 3
     93e:	c8 01       	movw	r24, r16
     940:	0e 94 33 33 	call	0x6666	; 0x6666 <nrk_task_set_stk>
     944:	84 e1       	ldi	r24, 0x14	; 20
     946:	80 93 32 03 	sts	0x0332, r24
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	80 93 31 03 	sts	0x0331, r24
     950:	80 93 33 03 	sts	0x0333, r24
     954:	80 93 34 03 	sts	0x0334, r24
     958:	10 92 35 03 	sts	0x0335, r1
     95c:	10 92 36 03 	sts	0x0336, r1
     960:	10 92 37 03 	sts	0x0337, r1
     964:	10 92 38 03 	sts	0x0338, r1
     968:	80 e8       	ldi	r24, 0x80	; 128
     96a:	96 e9       	ldi	r25, 0x96	; 150
     96c:	a8 e9       	ldi	r26, 0x98	; 152
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	80 93 39 03 	sts	0x0339, r24
     974:	90 93 3a 03 	sts	0x033A, r25
     978:	a0 93 3b 03 	sts	0x033B, r26
     97c:	b0 93 3c 03 	sts	0x033C, r27
     980:	10 92 3d 03 	sts	0x033D, r1
     984:	10 92 3e 03 	sts	0x033E, r1
     988:	10 92 3f 03 	sts	0x033F, r1
     98c:	10 92 40 03 	sts	0x0340, r1
     990:	10 92 41 03 	sts	0x0341, r1
     994:	10 92 42 03 	sts	0x0342, r1
     998:	10 92 43 03 	sts	0x0343, r1
     99c:	10 92 44 03 	sts	0x0344, r1
     9a0:	10 92 45 03 	sts	0x0345, r1
     9a4:	10 92 46 03 	sts	0x0346, r1
     9a8:	10 92 47 03 	sts	0x0347, r1
     9ac:	10 92 48 03 	sts	0x0348, r1
     9b0:	10 92 49 03 	sts	0x0349, r1
     9b4:	10 92 4a 03 	sts	0x034A, r1
     9b8:	10 92 4b 03 	sts	0x034B, r1
     9bc:	10 92 4c 03 	sts	0x034C, r1
     9c0:	c8 01       	movw	r24, r16
     9c2:	0e 94 df 28 	call	0x51be	; 0x51be <nrk_activate_task>
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	08 95       	ret

000009cc <_isa_init_sync>:
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	ee 24       	eor	r14, r14
     9de:	ff 24       	eor	r15, r15
     9e0:	45 e0       	ldi	r20, 0x05	; 5
     9e2:	c4 2e       	mov	r12, r20
     9e4:	43 e0       	ldi	r20, 0x03	; 3
     9e6:	d4 2e       	mov	r13, r20
     9e8:	00 91 0a 03 	lds	r16, 0x030A
     9ec:	10 91 0b 03 	lds	r17, 0x030B
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <configDHDR>
     9f6:	f8 01       	movw	r30, r16
     9f8:	80 83       	st	Z, r24
     9fa:	60 91 18 03 	lds	r22, 0x0318
     9fe:	c6 01       	movw	r24, r12
     a00:	0e 94 f5 17 	call	0x2fea	; 0x2fea <rf_set_rx>
     a04:	0e 94 18 13 	call	0x2630	; 0x2630 <rf_polling_rx_on>
     a08:	10 92 ae 06 	sts	0x06AE, r1
     a0c:	8a ef       	ldi	r24, 0xFA	; 250
     a0e:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <_nrk_set_next_wakeup>
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <_nrk_os_timer_set>
     a18:	10 e0       	ldi	r17, 0x00	; 0
     a1a:	12 c0       	rjmp	.+36     	; 0xa40 <_isa_init_sync+0x74>
     a1c:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
     a20:	18 17       	cp	r17, r24
     a22:	71 f0       	breq	.+28     	; 0xa40 <_isa_init_sync+0x74>
     a24:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
     a28:	18 2f       	mov	r17, r24
     a2a:	08 94       	sec
     a2c:	e1 1c       	adc	r14, r1
     a2e:	f1 1c       	adc	r15, r1
     a30:	f1 e1       	ldi	r31, 0x11	; 17
     a32:	ef 16       	cp	r14, r31
     a34:	f7 e2       	ldi	r31, 0x27	; 39
     a36:	ff 06       	cpc	r15, r31
     a38:	18 f0       	brcs	.+6      	; 0xa40 <_isa_init_sync+0x74>
     a3a:	ee 24       	eor	r14, r14
     a3c:	ff 24       	eor	r15, r15
     a3e:	05 c0       	rjmp	.+10     	; 0xa4a <_isa_init_sync+0x7e>
     a40:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <rf_rx_check_sfd>
     a44:	08 2f       	mov	r16, r24
     a46:	88 23       	and	r24, r24
     a48:	49 f3       	breq	.-46     	; 0xa1c <_isa_init_sync+0x50>
     a4a:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_nrk_high_speed_timer_reset>
     a4e:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
     a52:	c8 2f       	mov	r28, r24
     a54:	dd 27       	eor	r29, r29
     a56:	24 96       	adiw	r28, 0x04	; 4
     a58:	00 23       	and	r16, r16
     a5a:	71 f0       	breq	.+28     	; 0xa78 <_isa_init_sync+0xac>
     a5c:	06 c0       	rjmp	.+12     	; 0xa6a <_isa_init_sync+0x9e>
     a5e:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
     a62:	99 27       	eor	r25, r25
     a64:	c8 17       	cp	r28, r24
     a66:	d9 07       	cpc	r29, r25
     a68:	38 f0       	brcs	.+14     	; 0xa78 <_isa_init_sync+0xac>
     a6a:	60 e8       	ldi	r22, 0x80	; 128
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	0e 94 8b 10 	call	0x2116	; 0x2116 <rf_polling_rx_packet>
     a72:	08 2f       	mov	r16, r24
     a74:	88 23       	and	r24, r24
     a76:	99 f3       	breq	.-26     	; 0xa5e <_isa_init_sync+0x92>
     a78:	0e 94 00 13 	call	0x2600	; 0x2600 <rf_rx_off>
     a7c:	01 30       	cpi	r16, 0x01	; 1
     a7e:	09 f0       	breq	.+2      	; 0xa82 <_isa_init_sync+0xb6>
     a80:	b3 cf       	rjmp	.-154    	; 0x9e8 <_isa_init_sync+0x1c>
     a82:	e0 91 0a 03 	lds	r30, 0x030A
     a86:	f0 91 0b 03 	lds	r31, 0x030B
     a8a:	92 81       	ldd	r25, Z+2	; 0x02
     a8c:	80 91 f2 03 	lds	r24, 0x03F2
     a90:	98 17       	cp	r25, r24
     a92:	09 f0       	breq	.+2      	; 0xa96 <_isa_init_sync+0xca>
     a94:	a9 cf       	rjmp	.-174    	; 0x9e8 <_isa_init_sync+0x1c>
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	80 93 03 06 	sts	0x0603, r24
     aa2:	90 93 04 06 	sts	0x0604, r25
     aa6:	a0 93 05 06 	sts	0x0605, r26
     aaa:	b0 93 06 06 	sts	0x0606, r27
     aae:	80 91 a1 06 	lds	r24, 0x06A1
     ab2:	90 91 a2 06 	lds	r25, 0x06A2
     ab6:	21 81       	ldd	r18, Z+1	; 0x01
     ab8:	82 0f       	add	r24, r18
     aba:	91 1d       	adc	r25, r1
     abc:	90 93 a2 06 	sts	0x06A2, r25
     ac0:	80 93 a1 06 	sts	0x06A1, r24
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <nrk_led_toggle>
     acc:	60 91 bc 07 	lds	r22, 0x07BC
     ad0:	70 91 bd 07 	lds	r23, 0x07BD
     ad4:	89 e6       	ldi	r24, 0x69	; 105
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
     adc:	00 93 ae 06 	sts	0x06AE, r16
     ae0:	10 92 03 06 	sts	0x0603, r1
     ae4:	10 92 04 06 	sts	0x0604, r1
     ae8:	10 92 05 06 	sts	0x0605, r1
     aec:	10 92 06 06 	sts	0x0606, r1
     af0:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <_nrk_os_timer_stop>
     af4:	8a e0       	ldi	r24, 0x0A	; 10
     af6:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <_nrk_set_next_wakeup>
     afa:	87 e0       	ldi	r24, 0x07	; 7
     afc:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <_nrk_os_timer_set>
     b00:	60 e5       	ldi	r22, 0x50	; 80
     b02:	71 e9       	ldi	r23, 0x91	; 145
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 8b 30 	call	0x6116	; 0x6116 <nrk_high_speed_timer_wait>
     b0c:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <_nrk_os_timer_start>
     b10:	e0 91 95 07 	lds	r30, 0x0795
     b14:	f0 91 96 07 	lds	r31, 0x0796
     b18:	8a e0       	ldi	r24, 0x0A	; 10
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	96 8b       	std	Z+22, r25	; 0x16
     b1e:	85 8b       	std	Z+21, r24	; 0x15
     b20:	80 91 ae 06 	lds	r24, 0x06AE
     b24:	99 27       	eor	r25, r25
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	df 90       	pop	r13
     b34:	cf 90       	pop	r12
     b36:	08 95       	ret

00000b38 <_isa_rx>:
     b38:	ff 92       	push	r15
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	21 97       	sbiw	r28, 0x01	; 1
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	f8 2e       	mov	r15, r24
     b54:	60 91 18 03 	lds	r22, 0x0318
     b58:	85 e0       	ldi	r24, 0x05	; 5
     b5a:	93 e0       	ldi	r25, 0x03	; 3
     b5c:	0e 94 f5 17 	call	0x2fea	; 0x2fea <rf_set_rx>
     b60:	0e 94 18 13 	call	0x2630	; 0x2630 <rf_polling_rx_on>
     b64:	00 91 81 02 	lds	r16, 0x0281
     b68:	80 2f       	mov	r24, r16
     b6a:	0e 94 8c 19 	call	0x3318	; 0x3318 <nrk_gpio_set>
     b6e:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	8c 5f       	subi	r24, 0xFC	; 252
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	17 c0       	rjmp	.+46     	; 0xbaa <_isa_rx+0x72>
     b7c:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
     b80:	99 81       	ldd	r25, Y+1	; 0x01
     b82:	98 17       	cp	r25, r24
     b84:	90 f4       	brcc	.+36     	; 0xbaa <_isa_rx+0x72>
     b86:	80 2f       	mov	r24, r16
     b88:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_gpio_clr>
     b8c:	0e 94 00 13 	call	0x2600	; 0x2600 <rf_rx_off>
     b90:	80 2f       	mov	r24, r16
     b92:	0e 94 8c 19 	call	0x3318	; 0x3318 <nrk_gpio_set>
     b96:	80 2f       	mov	r24, r16
     b98:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_gpio_clr>
     b9c:	60 91 bc 07 	lds	r22, 0x07BC
     ba0:	70 91 bd 07 	lds	r23, 0x07BD
     ba4:	86 e7       	ldi	r24, 0x76	; 118
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	3d c0       	rjmp	.+122    	; 0xc24 <_isa_rx+0xec>
     baa:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <rf_rx_check_sfd>
     bae:	88 23       	and	r24, r24
     bb0:	29 f3       	breq	.-54     	; 0xb7c <_isa_rx+0x44>
     bb2:	0e 94 56 2f 	call	0x5eac	; 0x5eac <_nrk_high_speed_timer_get>
     bb6:	90 93 b0 06 	sts	0x06B0, r25
     bba:	80 93 af 06 	sts	0x06AF, r24
     bbe:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
     bc2:	89 83       	std	Y+1, r24	; 0x01
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	8b 5f       	subi	r24, 0xFB	; 251
     bc8:	89 83       	std	Y+1, r24	; 0x01
     bca:	17 c0       	rjmp	.+46     	; 0xbfa <_isa_rx+0xc2>
     bcc:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
     bd0:	99 81       	ldd	r25, Y+1	; 0x01
     bd2:	98 17       	cp	r25, r24
     bd4:	90 f4       	brcc	.+36     	; 0xbfa <_isa_rx+0xc2>
     bd6:	86 e4       	ldi	r24, 0x46	; 70
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	9f 93       	push	r25
     bdc:	8f 93       	push	r24
     bde:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>
     be2:	80 91 f6 02 	lds	r24, 0x02F6
     be6:	90 91 f7 02 	lds	r25, 0x02F7
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	90 93 f7 02 	sts	0x02F7, r25
     bf0:	80 93 f6 02 	sts	0x02F6, r24
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	9e c0       	rjmp	.+316    	; 0xd36 <_isa_rx+0x1fe>
     bfa:	60 e8       	ldi	r22, 0x80	; 128
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	0e 94 8b 10 	call	0x2116	; 0x2116 <rf_polling_rx_packet>
     c02:	18 2f       	mov	r17, r24
     c04:	88 23       	and	r24, r24
     c06:	11 f3       	breq	.-60     	; 0xbcc <_isa_rx+0x94>
     c08:	80 2f       	mov	r24, r16
     c0a:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_gpio_clr>
     c0e:	0e 94 00 13 	call	0x2600	; 0x2600 <rf_rx_off>
     c12:	11 30       	cpi	r17, 0x01	; 1
     c14:	09 f4       	brne	.+2      	; 0xc18 <_isa_rx+0xe0>
     c16:	7d c0       	rjmp	.+250    	; 0xd12 <_isa_rx+0x1da>
     c18:	60 91 bc 07 	lds	r22, 0x07BC
     c1c:	70 91 bd 07 	lds	r23, 0x07BD
     c20:	82 e6       	ldi	r24, 0x62	; 98
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
     c28:	80 91 f6 02 	lds	r24, 0x02F6
     c2c:	90 91 f7 02 	lds	r25, 0x02F7
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	90 93 f7 02 	sts	0x02F7, r25
     c36:	80 93 f6 02 	sts	0x02F6, r24
     c3a:	7d c0       	rjmp	.+250    	; 0xd36 <_isa_rx+0x1fe>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	a0 e0       	ldi	r26, 0x00	; 0
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	80 93 03 06 	sts	0x0603, r24
     c48:	90 93 04 06 	sts	0x0604, r25
     c4c:	a0 93 05 06 	sts	0x0605, r26
     c50:	b0 93 06 06 	sts	0x0606, r27
     c54:	e0 91 0a 03 	lds	r30, 0x030A
     c58:	f0 91 0b 03 	lds	r31, 0x030B
     c5c:	80 81       	ld	r24, Z
     c5e:	80 93 71 04 	sts	0x0471, r24
     c62:	80 91 91 06 	lds	r24, 0x0691
     c66:	0e 94 69 24 	call	0x48d2	; 0x48d2 <nrk_event_signal>
     c6a:	20 91 71 04 	lds	r18, 0x0471
     c6e:	27 ff       	sbrs	r18, 7
     c70:	62 c0       	rjmp	.+196    	; 0xd36 <_isa_rx+0x1fe>
     c72:	80 91 f2 02 	lds	r24, 0x02F2
     c76:	90 91 f3 02 	lds	r25, 0x02F3
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	90 93 f3 02 	sts	0x02F3, r25
     c80:	80 93 f2 02 	sts	0x02F2, r24
     c84:	22 ff       	sbrs	r18, 2
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <_isa_rx+0x154>
     c88:	83 e8       	ldi	r24, 0x83	; 131
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <_isa_rx+0x156>
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	80 93 e4 06 	sts	0x06E4, r24
     c92:	80 93 8e 05 	sts	0x058E, r24
     c96:	8e e8       	ldi	r24, 0x8E	; 142
     c98:	95 e0       	ldi	r25, 0x05	; 5
     c9a:	90 93 27 03 	sts	0x0327, r25
     c9e:	80 93 26 03 	sts	0x0326, r24
     ca2:	22 ff       	sbrs	r18, 2
     ca4:	1e c0       	rjmp	.+60     	; 0xce2 <_isa_rx+0x1aa>
     ca6:	60 91 bc 07 	lds	r22, 0x07BC
     caa:	70 91 bd 07 	lds	r23, 0x07BD
     cae:	8b e4       	ldi	r24, 0x4B	; 75
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
     cb6:	80 91 af 06 	lds	r24, 0x06AF
     cba:	90 91 b0 06 	lds	r25, 0x06B0
     cbe:	20 91 9d 06 	lds	r18, 0x069D
     cc2:	30 91 9e 06 	lds	r19, 0x069E
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	90 93 9a 06 	sts	0x069A, r25
     cce:	80 93 99 06 	sts	0x0699, r24
     cd2:	29 2f       	mov	r18, r25
     cd4:	33 27       	eor	r19, r19
     cd6:	20 93 8f 05 	sts	0x058F, r18
     cda:	80 93 90 05 	sts	0x0590, r24
     cde:	84 e0       	ldi	r24, 0x04	; 4
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <_isa_rx+0x1ac>
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	80 93 25 03 	sts	0x0325, r24
     ce8:	80 2f       	mov	r24, r16
     cea:	0e 94 8c 19 	call	0x3318	; 0x3318 <nrk_gpio_set>
     cee:	40 91 1a 03 	lds	r20, 0x031A
     cf2:	50 91 1b 03 	lds	r21, 0x031B
     cf6:	60 91 9d 06 	lds	r22, 0x069D
     cfa:	70 91 9e 06 	lds	r23, 0x069E
     cfe:	2a ea       	ldi	r18, 0xAA	; 170
     d00:	36 e0       	ldi	r19, 0x06	; 6
     d02:	83 e2       	ldi	r24, 0x23	; 35
     d04:	93 e0       	ldi	r25, 0x03	; 3
     d06:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <rf_tx_tdma_packet>
     d0a:	80 2f       	mov	r24, r16
     d0c:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_gpio_clr>
     d10:	12 c0       	rjmp	.+36     	; 0xd36 <_isa_rx+0x1fe>
     d12:	80 91 f4 02 	lds	r24, 0x02F4
     d16:	90 91 f5 02 	lds	r25, 0x02F5
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	90 93 f5 02 	sts	0x02F5, r25
     d20:	80 93 f4 02 	sts	0x02F4, r24
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <nrk_led_toggle>
     d2c:	89 e0       	ldi	r24, 0x09	; 9
     d2e:	f8 16       	cp	r15, r24
     d30:	09 f0       	breq	.+2      	; 0xd34 <_isa_rx+0x1fc>
     d32:	84 cf       	rjmp	.-248    	; 0xc3c <_isa_rx+0x104>
     d34:	8f cf       	rjmp	.-226    	; 0xc54 <_isa_rx+0x11c>
     d36:	21 96       	adiw	r28, 0x01	; 1
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	08 95       	ret

00000d4e <_isa_tx>:
     d4e:	af 92       	push	r10
     d50:	bf 92       	push	r11
     d52:	cf 92       	push	r12
     d54:	df 92       	push	r13
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	21 97       	sbiw	r28, 0x01	; 1
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	e8 2e       	mov	r14, r24
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	80 93 13 03 	sts	0x0313, r24
     d7a:	0e 2d       	mov	r16, r14
     d7c:	11 27       	eor	r17, r17
     d7e:	f8 01       	movw	r30, r16
     d80:	ee 0f       	add	r30, r30
     d82:	ff 1f       	adc	r31, r31
     d84:	ee 0f       	add	r30, r30
     d86:	ff 1f       	adc	r31, r31
     d88:	ea 56       	subi	r30, 0x6A	; 106
     d8a:	fa 4f       	sbci	r31, 0xFA	; 250
     d8c:	82 81       	ldd	r24, Z+2	; 0x02
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	90 93 12 03 	sts	0x0312, r25
     d94:	80 93 11 03 	sts	0x0311, r24
     d98:	80 81       	ld	r24, Z
     d9a:	80 93 10 03 	sts	0x0310, r24
     d9e:	a0 91 11 03 	lds	r26, 0x0311
     da2:	b0 91 12 03 	lds	r27, 0x0312
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	8c 93       	st	X, r24
     daa:	e0 91 11 03 	lds	r30, 0x0311
     dae:	f0 91 12 03 	lds	r31, 0x0312
     db2:	80 91 a1 06 	lds	r24, 0x06A1
     db6:	90 91 a2 06 	lds	r25, 0x06A2
     dba:	81 83       	std	Z+1, r24	; 0x01
     dbc:	e0 91 11 03 	lds	r30, 0x0311
     dc0:	f0 91 12 03 	lds	r31, 0x0312
     dc4:	80 91 fc 02 	lds	r24, 0x02FC
     dc8:	82 83       	std	Z+2, r24	; 0x02
     dca:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_nrk_high_speed_timer_reset>
     dce:	60 e8       	ldi	r22, 0x80	; 128
     dd0:	75 e2       	ldi	r23, 0x25	; 37
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 8b 30 	call	0x6116	; 0x6116 <nrk_high_speed_timer_wait>
     dda:	d0 90 77 02 	lds	r13, 0x0277
     dde:	8d 2d       	mov	r24, r13
     de0:	0e 94 8c 19 	call	0x3318	; 0x3318 <nrk_gpio_set>
     de4:	40 91 1a 03 	lds	r20, 0x031A
     de8:	50 91 1b 03 	lds	r21, 0x031B
     dec:	60 91 9d 06 	lds	r22, 0x069D
     df0:	70 91 9e 06 	lds	r23, 0x069E
     df4:	2a ea       	ldi	r18, 0xAA	; 170
     df6:	36 e0       	ldi	r19, 0x06	; 6
     df8:	8e e0       	ldi	r24, 0x0E	; 14
     dfa:	93 e0       	ldi	r25, 0x03	; 3
     dfc:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <rf_tx_tdma_packet>
     e00:	88 23       	and	r24, r24
     e02:	f1 f0       	breq	.+60     	; 0xe40 <_isa_tx+0xf2>
     e04:	80 91 f2 02 	lds	r24, 0x02F2
     e08:	90 91 f3 02 	lds	r25, 0x02F3
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	90 93 f3 02 	sts	0x02F3, r25
     e12:	80 93 f2 02 	sts	0x02F2, r24
     e16:	8d 2d       	mov	r24, r13
     e18:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_gpio_clr>
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <nrk_led_toggle>
     e24:	80 91 aa 06 	lds	r24, 0x06AA
     e28:	90 91 ab 06 	lds	r25, 0x06AB
     e2c:	20 91 9d 06 	lds	r18, 0x069D
     e30:	30 91 9e 06 	lds	r19, 0x069E
     e34:	82 1b       	sub	r24, r18
     e36:	93 0b       	sbc	r25, r19
     e38:	90 93 98 06 	sts	0x0698, r25
     e3c:	80 93 97 06 	sts	0x0697, r24
     e40:	80 91 9f 06 	lds	r24, 0x069F
     e44:	0e 94 69 24 	call	0x48d2	; 0x48d2 <nrk_event_signal>
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	a0 e0       	ldi	r26, 0x00	; 0
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	04 c0       	rjmp	.+8      	; 0xe5a <_isa_tx+0x10c>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	aa 1f       	adc	r26, r26
     e58:	bb 1f       	adc	r27, r27
     e5a:	0a 95       	dec	r16
     e5c:	d2 f7       	brpl	.-12     	; 0xe52 <_isa_tx+0x104>
     e5e:	80 95       	com	r24
     e60:	90 95       	com	r25
     e62:	a0 95       	com	r26
     e64:	b0 95       	com	r27
     e66:	20 91 1f 03 	lds	r18, 0x031F
     e6a:	30 91 20 03 	lds	r19, 0x0320
     e6e:	40 91 21 03 	lds	r20, 0x0321
     e72:	50 91 22 03 	lds	r21, 0x0322
     e76:	28 23       	and	r18, r24
     e78:	39 23       	and	r19, r25
     e7a:	4a 23       	and	r20, r26
     e7c:	5b 23       	and	r21, r27
     e7e:	20 93 1f 03 	sts	0x031F, r18
     e82:	30 93 20 03 	sts	0x0320, r19
     e86:	40 93 21 03 	sts	0x0321, r20
     e8a:	50 93 22 03 	sts	0x0322, r21
     e8e:	80 91 71 04 	lds	r24, 0x0471
     e92:	87 ff       	sbrs	r24, 7
     e94:	5c c1       	rjmp	.+696    	; 0x114e <_isa_tx+0x400>
     e96:	0e 94 18 13 	call	0x2630	; 0x2630 <rf_polling_rx_on>
     e9a:	8d 2d       	mov	r24, r13
     e9c:	0e 94 8c 19 	call	0x3318	; 0x3318 <nrk_gpio_set>
     ea0:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_nrk_high_speed_timer_reset>
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	70 e1       	ldi	r23, 0x10	; 16
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 8b 30 	call	0x6116	; 0x6116 <nrk_high_speed_timer_wait>
     eb0:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	8e 5f       	subi	r24, 0xFE	; 254
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	3d c0       	rjmp	.+122    	; 0xf38 <_isa_tx+0x1ea>
     ebe:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
     ec2:	99 81       	ldd	r25, Y+1	; 0x01
     ec4:	98 17       	cp	r25, r24
     ec6:	c0 f5       	brcc	.+112    	; 0xf38 <_isa_tx+0x1ea>
     ec8:	80 91 9c 06 	lds	r24, 0x069C
     ecc:	e8 16       	cp	r14, r24
     ece:	51 f4       	brne	.+20     	; 0xee4 <_isa_tx+0x196>
     ed0:	80 91 e5 06 	lds	r24, 0x06E5
     ed4:	90 91 e6 06 	lds	r25, 0x06E6
     ed8:	49 96       	adiw	r24, 0x19	; 25
     eda:	90 93 e6 06 	sts	0x06E6, r25
     ede:	80 93 e5 06 	sts	0x06E5, r24
     ee2:	13 c0       	rjmp	.+38     	; 0xf0a <_isa_tx+0x1bc>
     ee4:	e8 1a       	sub	r14, r24
     ee6:	20 91 e5 06 	lds	r18, 0x06E5
     eea:	30 91 e6 06 	lds	r19, 0x06E6
     eee:	4e 2d       	mov	r20, r14
     ef0:	55 27       	eor	r21, r21
     ef2:	47 fd       	sbrc	r20, 7
     ef4:	50 95       	com	r21
     ef6:	1e 14       	cp	r1, r14
     ef8:	14 f0       	brlt	.+4      	; 0xefe <_isa_tx+0x1b0>
     efa:	27 5e       	subi	r18, 0xE7	; 231
     efc:	3f 4f       	sbci	r19, 0xFF	; 255
     efe:	24 0f       	add	r18, r20
     f00:	35 1f       	adc	r19, r21
     f02:	30 93 e6 06 	sts	0x06E6, r19
     f06:	20 93 e5 06 	sts	0x06E5, r18
     f0a:	0e 94 00 13 	call	0x2600	; 0x2600 <rf_rx_off>
     f0e:	8d 2d       	mov	r24, r13
     f10:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_gpio_clr>
     f14:	60 91 bc 07 	lds	r22, 0x07BC
     f18:	70 91 bd 07 	lds	r23, 0x07BD
     f1c:	83 e7       	ldi	r24, 0x73	; 115
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
     f24:	80 91 f6 02 	lds	r24, 0x02F6
     f28:	90 91 f7 02 	lds	r25, 0x02F7
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	90 93 f7 02 	sts	0x02F7, r25
     f32:	80 93 f6 02 	sts	0x02F6, r24
     f36:	0b c1       	rjmp	.+534    	; 0x114e <_isa_tx+0x400>
     f38:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <rf_rx_check_sfd>
     f3c:	88 23       	and	r24, r24
     f3e:	09 f4       	brne	.+2      	; 0xf42 <_isa_tx+0x1f4>
     f40:	be cf       	rjmp	.-132    	; 0xebe <_isa_tx+0x170>
     f42:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	8e 5f       	subi	r24, 0xFE	; 254
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	88 e0       	ldi	r24, 0x08	; 8
     f50:	e8 16       	cp	r14, r24
     f52:	61 f0       	breq	.+24     	; 0xf6c <_isa_tx+0x21e>
     f54:	80 91 f0 02 	lds	r24, 0x02F0
     f58:	90 91 f1 02 	lds	r25, 0x02F1
     f5c:	68 ec       	ldi	r22, 0xC8	; 200
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodhi4>
     f64:	89 2b       	or	r24, r25
     f66:	11 f4       	brne	.+4      	; 0xf6c <_isa_tx+0x21e>
     f68:	14 e0       	ldi	r17, 0x04	; 4
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <_isa_tx+0x220>
     f6c:	12 e0       	ldi	r17, 0x02	; 2
     f6e:	80 91 fc 03 	lds	r24, 0x03FC
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	e9 f4       	brne	.+58     	; 0xfb0 <_isa_tx+0x262>
     f76:	12 e0       	ldi	r17, 0x02	; 2
     f78:	1b c0       	rjmp	.+54     	; 0xfb0 <_isa_tx+0x262>
     f7a:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
     f7e:	99 81       	ldd	r25, Y+1	; 0x01
     f80:	98 17       	cp	r25, r24
     f82:	b0 f4       	brcc	.+44     	; 0xfb0 <_isa_tx+0x262>
     f84:	86 e4       	ldi	r24, 0x46	; 70
     f86:	92 e0       	ldi	r25, 0x02	; 2
     f88:	9f 93       	push	r25
     f8a:	8f 93       	push	r24
     f8c:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>
     f90:	80 91 f6 02 	lds	r24, 0x02F6
     f94:	90 91 f7 02 	lds	r25, 0x02F7
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	90 93 f7 02 	sts	0x02F7, r25
     f9e:	80 93 f6 02 	sts	0x02F6, r24
     fa2:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
     fa6:	80 93 92 06 	sts	0x0692, r24
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	cf c0       	rjmp	.+414    	; 0x114e <_isa_tx+0x400>
     fb0:	61 2f       	mov	r22, r17
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	0e 94 8b 10 	call	0x2116	; 0x2116 <rf_polling_rx_packet>
     fb8:	08 2f       	mov	r16, r24
     fba:	88 23       	and	r24, r24
     fbc:	f1 f2       	breq	.-68     	; 0xf7a <_isa_tx+0x22c>
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <_isa_tx+0x276>
     fc2:	c2 c0       	rjmp	.+388    	; 0x1148 <_isa_tx+0x3fa>
     fc4:	60 91 bc 07 	lds	r22, 0x07BC
     fc8:	70 91 bd 07 	lds	r23, 0x07BD
     fcc:	86 e6       	ldi	r24, 0x66	; 102
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
     fd4:	80 91 f6 02 	lds	r24, 0x02F6
     fd8:	90 91 f7 02 	lds	r25, 0x02F7
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	90 93 f7 02 	sts	0x02F7, r25
     fe2:	80 93 f6 02 	sts	0x02F6, r24
     fe6:	80 91 f0 02 	lds	r24, 0x02F0
     fea:	90 91 f1 02 	lds	r25, 0x02F1
     fee:	9f 93       	push	r25
     ff0:	8f 93       	push	r24
     ff2:	87 e6       	ldi	r24, 0x67	; 103
     ff4:	92 e0       	ldi	r25, 0x02	; 2
     ff6:	9f 93       	push	r25
     ff8:	8f 93       	push	r24
     ffa:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	8d 2d       	mov	r24, r13
    1008:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_gpio_clr>
    100c:	01 30       	cpi	r16, 0x01	; 1
    100e:	09 f0       	breq	.+2      	; 0x1012 <_isa_tx+0x2c4>
    1010:	9e c0       	rjmp	.+316    	; 0x114e <_isa_tx+0x400>
    1012:	80 91 f4 02 	lds	r24, 0x02F4
    1016:	90 91 f5 02 	lds	r25, 0x02F5
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	90 93 f5 02 	sts	0x02F5, r25
    1020:	80 93 f4 02 	sts	0x02F4, r24
    1024:	10 92 e6 06 	sts	0x06E6, r1
    1028:	10 92 e5 06 	sts	0x06E5, r1
    102c:	e0 91 0a 03 	lds	r30, 0x030A
    1030:	f0 91 0b 03 	lds	r31, 0x030B
    1034:	90 81       	ld	r25, Z
    1036:	90 93 e4 06 	sts	0x06E4, r25
    103a:	80 91 71 04 	lds	r24, 0x0471
    103e:	87 ff       	sbrs	r24, 7
    1040:	86 c0       	rjmp	.+268    	; 0x114e <_isa_tx+0x400>
    1042:	97 ff       	sbrs	r25, 7
    1044:	84 c0       	rjmp	.+264    	; 0x114e <_isa_tx+0x400>
    1046:	81 81       	ldd	r24, Z+1	; 0x01
    1048:	99 27       	eor	r25, r25
    104a:	98 2f       	mov	r25, r24
    104c:	88 27       	eor	r24, r24
    104e:	22 81       	ldd	r18, Z+2	; 0x02
    1050:	33 27       	eor	r19, r19
    1052:	82 2b       	or	r24, r18
    1054:	93 2b       	or	r25, r19
    1056:	90 93 9a 06 	sts	0x069A, r25
    105a:	80 93 99 06 	sts	0x0699, r24
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <nrk_led_toggle>
    1066:	60 91 bc 07 	lds	r22, 0x07BC
    106a:	70 91 bd 07 	lds	r23, 0x07BD
    106e:	81 e6       	ldi	r24, 0x61	; 97
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
    1076:	c0 90 99 06 	lds	r12, 0x0699
    107a:	d0 90 9a 06 	lds	r13, 0x069A
    107e:	80 91 97 06 	lds	r24, 0x0697
    1082:	90 91 98 06 	lds	r25, 0x0698
    1086:	c8 1a       	sub	r12, r24
    1088:	d9 0a       	sbc	r13, r25
    108a:	82 e3       	ldi	r24, 0x32	; 50
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    1092:	b8 2e       	mov	r11, r24
    1094:	a0 90 81 02 	lds	r10, 0x0281
    1098:	8a 2d       	mov	r24, r10
    109a:	0e 94 8c 19 	call	0x3318	; 0x3318 <nrk_gpio_set>
    109e:	d7 fc       	sbrc	r13, 7
    10a0:	30 c0       	rjmp	.+96     	; 0x1102 <_isa_tx+0x3b4>
    10a2:	b0 92 92 06 	sts	0x0692, r11
    10a6:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <_nrk_os_timer_stop>
    10aa:	64 e6       	ldi	r22, 0x64	; 100
    10ac:	e6 2e       	mov	r14, r22
    10ae:	69 e1       	ldi	r22, 0x19	; 25
    10b0:	f6 2e       	mov	r15, r22
    10b2:	c6 01       	movw	r24, r12
    10b4:	64 e6       	ldi	r22, 0x64	; 100
    10b6:	79 e1       	ldi	r23, 0x19	; 25
    10b8:	0e 94 03 37 	call	0x6e06	; 0x6e06 <__divmodhi4>
    10bc:	8b 01       	movw	r16, r22
    10be:	0f 5f       	subi	r16, 0xFF	; 255
    10c0:	00 93 a4 06 	sts	0x06A4, r16
    10c4:	c6 01       	movw	r24, r12
    10c6:	64 e6       	ldi	r22, 0x64	; 100
    10c8:	79 e1       	ldi	r23, 0x19	; 25
    10ca:	0e 94 03 37 	call	0x6e06	; 0x6e06 <__divmodhi4>
    10ce:	e8 1a       	sub	r14, r24
    10d0:	f9 0a       	sbc	r15, r25
    10d2:	f0 92 a9 06 	sts	0x06A9, r15
    10d6:	e0 92 a8 06 	sts	0x06A8, r14
    10da:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_nrk_high_speed_timer_reset>
    10de:	82 e3       	ldi	r24, 0x32	; 50
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
    10e6:	b7 01       	movw	r22, r14
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 8b 30 	call	0x6116	; 0x6116 <nrk_high_speed_timer_wait>
    10f0:	8b 2d       	mov	r24, r11
    10f2:	80 0f       	add	r24, r16
    10f4:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <_nrk_os_timer_set>
    10f8:	84 e6       	ldi	r24, 0x64	; 100
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
    1100:	17 c0       	rjmp	.+46     	; 0x1130 <_isa_tx+0x3e2>
    1102:	60 91 bc 07 	lds	r22, 0x07BC
    1106:	70 91 bd 07 	lds	r23, 0x07BD
    110a:	81 e2       	ldi	r24, 0x21	; 33
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
    1112:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <_nrk_os_timer_stop>
    1116:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_nrk_high_speed_timer_reset>
    111a:	66 27       	eor	r22, r22
    111c:	77 27       	eor	r23, r23
    111e:	6c 19       	sub	r22, r12
    1120:	7d 09       	sbc	r23, r13
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 8b 30 	call	0x6116	; 0x6116 <nrk_high_speed_timer_wait>
    112a:	8b 2d       	mov	r24, r11
    112c:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <_nrk_os_timer_set>
    1130:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <_nrk_os_timer_start>
    1134:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_nrk_high_speed_timer_reset>
    1138:	82 e3       	ldi	r24, 0x32	; 50
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
    1140:	8a 2d       	mov	r24, r10
    1142:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_gpio_clr>
    1146:	03 c0       	rjmp	.+6      	; 0x114e <_isa_tx+0x400>
    1148:	0e 94 00 13 	call	0x2600	; 0x2600 <rf_rx_off>
    114c:	5c cf       	rjmp	.-328    	; 0x1006 <_isa_tx+0x2b8>
    114e:	21 96       	adiw	r28, 0x01	; 1
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	df 90       	pop	r13
    1168:	cf 90       	pop	r12
    116a:	bf 90       	pop	r11
    116c:	af 90       	pop	r10
    116e:	08 95       	ret

00001170 <isa_wait_until_rx_or_tx>:
  TaskOne.Type = BASIC_TASK;
  TaskOne.SchType = PREEMPTIVE;
  TaskOne.period.secs = 0;
  TaskOne.period.nano_secs = 20*NANOS_PER_MS;
  TaskOne.cpu_reserve.secs = 0;
  TaskOne.cpu_reserve.nano_secs = 20*NANOS_PER_MS;
    1170:	80 91 91 06 	lds	r24, 0x0691
    1174:	0e 94 61 23 	call	0x46c2	; 0x46c2 <nrk_signal_register>
  TaskOne.offset.secs = 0;
    1178:	80 91 9f 06 	lds	r24, 0x069F
    117c:	0e 94 61 23 	call	0x46c2	; 0x46c2 <nrk_signal_register>
  TaskOne.offset.nano_secs= 50*NANOS_PER_MS;
    1180:	21 e0       	ldi	r18, 0x01	; 1
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	ca 01       	movw	r24, r20
    118a:	b9 01       	movw	r22, r18
    118c:	00 90 9f 06 	lds	r0, 0x069F
    1190:	04 c0       	rjmp	.+8      	; 0x119a <isa_wait_until_rx_or_tx+0x2a>
    1192:	66 0f       	add	r22, r22
    1194:	77 1f       	adc	r23, r23
    1196:	88 1f       	adc	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	d2 f7       	brpl	.-12     	; 0x1192 <isa_wait_until_rx_or_tx+0x22>
    119e:	00 90 91 06 	lds	r0, 0x0691
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <isa_wait_until_rx_or_tx+0x3c>
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	44 1f       	adc	r20, r20
    11aa:	55 1f       	adc	r21, r21
    11ac:	0a 94       	dec	r0
    11ae:	d2 f7       	brpl	.-12     	; 0x11a4 <isa_wait_until_rx_or_tx+0x34>
    11b0:	62 2b       	or	r22, r18
    11b2:	73 2b       	or	r23, r19
    11b4:	84 2b       	or	r24, r20
    11b6:	95 2b       	or	r25, r21
    11b8:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <nrk_event_wait>
  nrk_activate_task (&TaskOne);

    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	08 95       	ret

000011c2 <isa_set_channel>:
	  	  if (txCount % 1000 == 0){
	  	printf ("TxCount: %d\r\nRXCount: %d\r\nPacketLoss:%d", txCount,rxCount, packetsLost);
	  	  }

//nrk_gpio_toggle(NRK_DEBUG_0);
       if( isa_rx_pkt_check()!=0 ) {
    11c2:	80 93 18 03 	sts	0x0318, r24

    11c6:	0e 94 1f 18 	call	0x303e	; 0x303e <rf_set_channel>
    11ca:	08 95       	ret

000011cc <isa_nw_task>:
    11cc:	bf 92       	push	r11
    11ce:	cf 92       	push	r12
    11d0:	df 92       	push	r13
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	10 92 19 05 	sts	0x0519, r1
    11e2:	0e 94 a1 28 	call	0x5142	; 0x5142 <nrk_wait_until_next_period>
    11e6:	80 91 19 05 	lds	r24, 0x0519
    11ea:	88 23       	and	r24, r24
    11ec:	d1 f3       	breq	.-12     	; 0x11e2 <isa_nw_task+0x16>
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	80 93 19 05 	sts	0x0519, r24
    11f4:	b0 90 77 02 	lds	r11, 0x0277
    11f8:	cc 24       	eor	r12, r12
    11fa:	dd 24       	eor	r13, r13
    11fc:	8b 2d       	mov	r24, r11
    11fe:	0e 94 8c 19 	call	0x3318	; 0x3318 <nrk_gpio_set>
    1202:	8b 2d       	mov	r24, r11
    1204:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_gpio_clr>
    1208:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_nrk_high_speed_timer_reset>
    120c:	0e 94 56 2f 	call	0x5eac	; 0x5eac <_nrk_high_speed_timer_get>
    1210:	90 93 9e 06 	sts	0x069E, r25
    1214:	80 93 9d 06 	sts	0x069D, r24
    1218:	80 91 a1 06 	lds	r24, 0x06A1
    121c:	90 91 a2 06 	lds	r25, 0x06A2
    1220:	90 93 ad 06 	sts	0x06AD, r25
    1224:	80 93 ac 06 	sts	0x06AC, r24
    1228:	80 91 a1 06 	lds	r24, 0x06A1
    122c:	90 91 a2 06 	lds	r25, 0x06A2
    1230:	85 36       	cpi	r24, 0x65	; 101
    1232:	91 05       	cpc	r25, r1
    1234:	98 f0       	brcs	.+38     	; 0x125c <isa_nw_task+0x90>
    1236:	80 91 a1 06 	lds	r24, 0x06A1
    123a:	90 91 a2 06 	lds	r25, 0x06A2
    123e:	84 56       	subi	r24, 0x64	; 100
    1240:	90 40       	sbci	r25, 0x00	; 0
    1242:	90 93 a2 06 	sts	0x06A2, r25
    1246:	80 93 a1 06 	sts	0x06A1, r24
    124a:	80 91 95 06 	lds	r24, 0x0695
    124e:	90 91 96 06 	lds	r25, 0x0696
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	90 93 96 06 	sts	0x0696, r25
    1258:	80 93 95 06 	sts	0x0695, r24
    125c:	20 91 a1 06 	lds	r18, 0x06A1
    1260:	30 91 a2 06 	lds	r19, 0x06A2
    1264:	80 91 ae 06 	lds	r24, 0x06AE
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	09 f0       	breq	.+2      	; 0x126e <isa_nw_task+0xa2>
    126c:	64 c0       	rjmp	.+200    	; 0x1336 <isa_nw_task+0x16a>
    126e:	c9 01       	movw	r24, r18
    1270:	69 e1       	ldi	r22, 0x19	; 25
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodhi4>
    1278:	ec 01       	movw	r28, r24
    127a:	b1 e0       	ldi	r27, 0x01	; 1
    127c:	eb 2e       	mov	r14, r27
    127e:	f1 2c       	mov	r15, r1
    1280:	01 2d       	mov	r16, r1
    1282:	11 2d       	mov	r17, r1
    1284:	04 c0       	rjmp	.+8      	; 0x128e <isa_nw_task+0xc2>
    1286:	ee 0c       	add	r14, r14
    1288:	ff 1c       	adc	r15, r15
    128a:	00 1f       	adc	r16, r16
    128c:	11 1f       	adc	r17, r17
    128e:	8a 95       	dec	r24
    1290:	d2 f7       	brpl	.-12     	; 0x1286 <isa_nw_task+0xba>
    1292:	e0 91 a0 06 	lds	r30, 0x06A0
    1296:	ec 0d       	add	r30, r12
    1298:	e0 93 a0 06 	sts	0x06A0, r30
    129c:	ff 27       	eor	r31, r31
    129e:	ef 70       	andi	r30, 0x0F	; 15
    12a0:	f0 70       	andi	r31, 0x00	; 0
    12a2:	ed 52       	subi	r30, 0x2D	; 45
    12a4:	f9 4f       	sbci	r31, 0xF9	; 249
    12a6:	80 81       	ld	r24, Z
    12a8:	80 93 d2 06 	sts	0x06D2, r24
    12ac:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <isa_set_channel>
    12b0:	80 91 fa 04 	lds	r24, 0x04FA
    12b4:	90 91 fb 04 	lds	r25, 0x04FB
    12b8:	a0 91 fc 04 	lds	r26, 0x04FC
    12bc:	b0 91 fd 04 	lds	r27, 0x04FD
    12c0:	20 91 1f 03 	lds	r18, 0x031F
    12c4:	30 91 20 03 	lds	r19, 0x0320
    12c8:	40 91 21 03 	lds	r20, 0x0321
    12cc:	50 91 22 03 	lds	r21, 0x0322
    12d0:	82 23       	and	r24, r18
    12d2:	93 23       	and	r25, r19
    12d4:	a4 23       	and	r26, r20
    12d6:	b5 23       	and	r27, r21
    12d8:	8e 21       	and	r24, r14
    12da:	9f 21       	and	r25, r15
    12dc:	a0 23       	and	r26, r16
    12de:	b1 23       	and	r27, r17
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	a1 05       	cpc	r26, r1
    12e4:	b1 05       	cpc	r27, r1
    12e6:	31 f0       	breq	.+12     	; 0x12f4 <isa_nw_task+0x128>
    12e8:	8c 2f       	mov	r24, r28
    12ea:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_isa_tx>
    12ee:	c0 93 9c 06 	sts	0x069C, r28
    12f2:	34 c0       	rjmp	.+104    	; 0x135c <isa_nw_task+0x190>
    12f4:	80 91 f8 03 	lds	r24, 0x03F8
    12f8:	90 91 f9 03 	lds	r25, 0x03F9
    12fc:	a0 91 fa 03 	lds	r26, 0x03FA
    1300:	b0 91 fb 03 	lds	r27, 0x03FB
    1304:	e8 22       	and	r14, r24
    1306:	f9 22       	and	r15, r25
    1308:	0a 23       	and	r16, r26
    130a:	1b 23       	and	r17, r27
    130c:	e1 14       	cp	r14, r1
    130e:	f1 04       	cpc	r15, r1
    1310:	01 05       	cpc	r16, r1
    1312:	11 05       	cpc	r17, r1
    1314:	19 f1       	breq	.+70     	; 0x135c <isa_nw_task+0x190>
    1316:	80 91 03 06 	lds	r24, 0x0603
    131a:	90 91 04 06 	lds	r25, 0x0604
    131e:	a0 91 05 06 	lds	r26, 0x0605
    1322:	b0 91 06 06 	lds	r27, 0x0606
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	a1 05       	cpc	r26, r1
    132a:	b1 05       	cpc	r27, r1
    132c:	b9 f4       	brne	.+46     	; 0x135c <isa_nw_task+0x190>
    132e:	8c 2f       	mov	r24, r28
    1330:	0e 94 9c 05 	call	0xb38	; 0xb38 <_isa_rx>
    1334:	13 c0       	rjmp	.+38     	; 0x135c <isa_nw_task+0x190>
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <configDHDR>
    133c:	80 93 71 04 	sts	0x0471, r24
    1340:	80 91 fc 03 	lds	r24, 0x03FC
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	39 f0       	breq	.+14     	; 0x1356 <isa_nw_task+0x18a>
    1348:	10 92 f1 02 	sts	0x02F1, r1
    134c:	10 92 f0 02 	sts	0x02F0, r1
    1350:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_isa_init_sync>
    1354:	01 c0       	rjmp	.+2      	; 0x1358 <isa_nw_task+0x18c>
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	80 93 ae 06 	sts	0x06AE, r24
    135c:	20 91 e5 06 	lds	r18, 0x06E5
    1360:	30 91 e6 06 	lds	r19, 0x06E6
    1364:	80 91 74 02 	lds	r24, 0x0274
    1368:	90 91 75 02 	lds	r25, 0x0275
    136c:	28 17       	cp	r18, r24
    136e:	39 07       	cpc	r19, r25
    1370:	78 f1       	brcs	.+94     	; 0x13d0 <isa_nw_task+0x204>
    1372:	80 91 fc 03 	lds	r24, 0x03FC
    1376:	82 30       	cpi	r24, 0x02	; 2
    1378:	59 f1       	breq	.+86     	; 0x13d0 <isa_nw_task+0x204>
    137a:	10 92 ae 06 	sts	0x06AE, r1
    137e:	10 92 e6 06 	sts	0x06E6, r1
    1382:	10 92 e5 06 	sts	0x06E5, r1
    1386:	10 92 a2 06 	sts	0x06A2, r1
    138a:	10 92 a1 06 	sts	0x06A1, r1
    138e:	80 91 f0 03 	lds	r24, 0x03F0
    1392:	90 91 f1 03 	lds	r25, 0x03F1
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	90 93 f1 03 	sts	0x03F1, r25
    139c:	80 93 f0 03 	sts	0x03F0, r24
    13a0:	80 91 fc 02 	lds	r24, 0x02FC
    13a4:	88 23       	and	r24, r24
    13a6:	49 f0       	breq	.+18     	; 0x13ba <isa_nw_task+0x1ee>
    13a8:	e0 91 f2 03 	lds	r30, 0x03F2
    13ac:	e0 93 a0 06 	sts	0x06A0, r30
    13b0:	ff 27       	eor	r31, r31
    13b2:	ed 52       	subi	r30, 0x2D	; 45
    13b4:	f9 4f       	sbci	r31, 0xF9	; 249
    13b6:	80 81       	ld	r24, Z
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <isa_nw_task+0x1f6>
    13ba:	10 92 a0 06 	sts	0x06A0, r1
    13be:	80 91 d3 06 	lds	r24, 0x06D3
    13c2:	80 93 d2 06 	sts	0x06D2, r24
    13c6:	80 91 d2 06 	lds	r24, 0x06D2
    13ca:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <isa_set_channel>
    13ce:	14 cf       	rjmp	.-472    	; 0x11f8 <isa_nw_task+0x2c>
    13d0:	80 91 a1 06 	lds	r24, 0x06A1
    13d4:	90 91 a2 06 	lds	r25, 0x06A2
    13d8:	0e 94 80 0c 	call	0x1900	; 0x1900 <isa_get_slots_until_next_wakeup>
    13dc:	6c 01       	movw	r12, r24
    13de:	80 91 a1 06 	lds	r24, 0x06A1
    13e2:	90 91 a2 06 	lds	r25, 0x06A2
    13e6:	8c 0d       	add	r24, r12
    13e8:	9d 1d       	adc	r25, r13
    13ea:	90 93 a2 06 	sts	0x06A2, r25
    13ee:	80 93 a1 06 	sts	0x06A1, r24
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <nrk_led_clr>
    13fa:	10 92 98 06 	sts	0x0698, r1
    13fe:	10 92 97 06 	sts	0x0697, r1
    1402:	c6 01       	movw	r24, r12
    1404:	0e 94 6e 28 	call	0x50dc	; 0x50dc <nrk_wait_until_next_n_periods>
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <nrk_led_set>
    1410:	f5 ce       	rjmp	.-534    	; 0x11fc <isa_nw_task+0x30>

00001412 <isa_init>:
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	08 2f       	mov	r16, r24
    141a:	f6 2e       	mov	r15, r22
    141c:	14 2f       	mov	r17, r20
    141e:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <nrk_signal_create>
    1422:	80 93 91 06 	sts	0x0691, r24
    1426:	8f 3f       	cpi	r24, 0xFF	; 255
    1428:	19 f4       	brne	.+6      	; 0x1430 <isa_init+0x1e>
    142a:	86 e3       	ldi	r24, 0x36	; 54
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	08 c0       	rjmp	.+16     	; 0x1440 <isa_init+0x2e>
    1430:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <nrk_signal_create>
    1434:	80 93 9f 06 	sts	0x069F, r24
    1438:	8f 3f       	cpi	r24, 0xFF	; 255
    143a:	79 f4       	brne	.+30     	; 0x145a <isa_init+0x48>
    143c:	8f e0       	ldi	r24, 0x0F	; 15
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <nrk_kprintf>
    1444:	e0 91 95 07 	lds	r30, 0x0795
    1448:	f0 91 96 07 	lds	r31, 0x0796
    144c:	60 85       	ldd	r22, Z+8	; 0x08
    144e:	8e e0       	ldi	r24, 0x0E	; 14
    1450:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <nrk_kernel_error_add>
    1454:	8f ef       	ldi	r24, 0xFF	; 255
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	87 c0       	rjmp	.+270    	; 0x1568 <isa_init+0x156>
    145a:	10 92 0b 03 	sts	0x030B, r1
    145e:	10 92 0a 03 	sts	0x030A, r1
    1462:	10 92 09 03 	sts	0x0309, r1
    1466:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <_nrk_high_speed_timer_start>
    146a:	10 92 96 06 	sts	0x0696, r1
    146e:	10 92 95 06 	sts	0x0695, r1
    1472:	84 e6       	ldi	r24, 0x64	; 100
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	90 93 a2 06 	sts	0x06A2, r25
    147a:	80 93 a1 06 	sts	0x06A1, r24
    147e:	10 92 ae 06 	sts	0x06AE, r1
    1482:	10 92 f3 03 	sts	0x03F3, r1
    1486:	10 92 e6 06 	sts	0x06E6, r1
    148a:	10 92 e5 06 	sts	0x06E5, r1
    148e:	00 93 fc 03 	sts	0x03FC, r16
    1492:	f0 92 fc 02 	sts	0x02FC, r15
    1496:	10 93 f2 03 	sts	0x03F2, r17
    149a:	10 92 03 06 	sts	0x0603, r1
    149e:	10 92 04 06 	sts	0x0604, r1
    14a2:	10 92 05 06 	sts	0x0605, r1
    14a6:	10 92 06 06 	sts	0x0606, r1
    14aa:	10 92 1f 03 	sts	0x031F, r1
    14ae:	10 92 20 03 	sts	0x0320, r1
    14b2:	10 92 21 03 	sts	0x0321, r1
    14b6:	10 92 22 03 	sts	0x0322, r1
    14ba:	84 e6       	ldi	r24, 0x64	; 100
    14bc:	80 93 1e 03 	sts	0x031E, r24
    14c0:	80 e4       	ldi	r24, 0x40	; 64
    14c2:	9f e1       	ldi	r25, 0x1F	; 31
    14c4:	90 93 1d 03 	sts	0x031D, r25
    14c8:	80 93 1c 03 	sts	0x031C, r24
    14cc:	80 ea       	ldi	r24, 0xA0	; 160
    14ce:	9f e0       	ldi	r25, 0x0F	; 15
    14d0:	90 93 1b 03 	sts	0x031B, r25
    14d4:	80 93 1a 03 	sts	0x031A, r24
    14d8:	8f e0       	ldi	r24, 0x0F	; 15
    14da:	80 93 18 03 	sts	0x0318, r24
    14de:	81 e8       	ldi	r24, 0x81	; 129
    14e0:	99 e1       	ldi	r25, 0x19	; 25
    14e2:	90 93 17 03 	sts	0x0317, r25
    14e6:	80 93 16 03 	sts	0x0316, r24
    14ea:	e0 e0       	ldi	r30, 0x00	; 0
    14ec:	f5 e0       	ldi	r31, 0x05	; 5
    14ee:	11 92       	st	Z+, r1
    14f0:	85 e0       	ldi	r24, 0x05	; 5
    14f2:	e9 31       	cpi	r30, 0x19	; 25
    14f4:	f8 07       	cpc	r31, r24
    14f6:	d9 f7       	brne	.-10     	; 0x14ee <isa_init+0xdc>
    14f8:	10 92 f8 03 	sts	0x03F8, r1
    14fc:	10 92 f9 03 	sts	0x03F9, r1
    1500:	10 92 fa 03 	sts	0x03FA, r1
    1504:	10 92 fb 03 	sts	0x03FB, r1
    1508:	10 92 fa 04 	sts	0x04FA, r1
    150c:	10 92 fb 04 	sts	0x04FB, r1
    1510:	10 92 fc 04 	sts	0x04FC, r1
    1514:	10 92 fd 04 	sts	0x04FD, r1
    1518:	21 e8       	ldi	r18, 0x81	; 129
    151a:	39 e1       	ldi	r19, 0x19	; 25
    151c:	41 e2       	ldi	r20, 0x21	; 33
    151e:	54 e2       	ldi	r21, 0x24	; 36
    1520:	6f e0       	ldi	r22, 0x0F	; 15
    1522:	85 e0       	ldi	r24, 0x05	; 5
    1524:	93 e0       	ldi	r25, 0x03	; 3
    1526:	0e 94 32 18 	call	0x3064	; 0x3064 <rf_init>
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	80 93 9b 06 	sts	0x069B, r24
    1530:	10 92 a7 06 	sts	0x06A7, r1
    1534:	ff 20       	and	r15, r15
    1536:	41 f0       	breq	.+16     	; 0x1548 <isa_init+0x136>
    1538:	10 93 a0 06 	sts	0x06A0, r17
    153c:	e1 2f       	mov	r30, r17
    153e:	ff 27       	eor	r31, r31
    1540:	ed 52       	subi	r30, 0x2D	; 45
    1542:	f9 4f       	sbci	r31, 0xF9	; 249
    1544:	80 81       	ld	r24, Z
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <isa_init+0x13e>
    1548:	10 92 a0 06 	sts	0x06A0, r1
    154c:	80 91 d3 06 	lds	r24, 0x06D3
    1550:	80 93 d2 06 	sts	0x06D2, r24
    1554:	80 91 d2 06 	lds	r24, 0x06D2
    1558:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <isa_set_channel>
    155c:	10 92 f1 03 	sts	0x03F1, r1
    1560:	10 92 f0 03 	sts	0x03F0, r1
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	08 95       	ret

00001570 <isa_wait_until_rx_pkt>:

void
nrk_create_taskset()
{
  TaskOne.task = Task1;
  TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE-1];
    1570:	80 91 91 06 	lds	r24, 0x0691
    1574:	0e 94 61 23 	call	0x46c2	; 0x46c2 <nrk_signal_register>
  TaskOne.Pbos = (void *) &Stack1[0];
    1578:	80 91 03 06 	lds	r24, 0x0603
    157c:	88 23       	and	r24, r24
    157e:	79 f4       	brne	.+30     	; 0x159e <isa_wait_until_rx_pkt+0x2e>
  TaskOne.prio = 2;
  TaskOne.FirstActivation = TRUE;
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	00 90 91 06 	lds	r0, 0x0691
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <isa_wait_until_rx_pkt+0x26>
    158e:	66 0f       	add	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	88 1f       	adc	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	d2 f7       	brpl	.-12     	; 0x158e <isa_wait_until_rx_pkt+0x1e>
    159a:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <nrk_event_wait>
  TaskOne.Type = BASIC_TASK;
  TaskOne.SchType = PREEMPTIVE;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	08 95       	ret

000015a4 <isa_rx_pkt_get>:
    15a4:	fc 01       	movw	r30, r24
    15a6:	db 01       	movw	r26, r22
    15a8:	80 91 03 06 	lds	r24, 0x0603
    15ac:	88 23       	and	r24, r24
    15ae:	29 f4       	brne	.+10     	; 0x15ba <isa_rx_pkt_get+0x16>
    15b0:	10 82       	st	Z, r1
    15b2:	1c 92       	st	X, r1
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	08 95       	ret
    15ba:	80 91 08 03 	lds	r24, 0x0308
    15be:	80 83       	st	Z, r24
    15c0:	80 91 0d 03 	lds	r24, 0x030D
    15c4:	8c 93       	st	X, r24
    15c6:	80 91 0a 03 	lds	r24, 0x030A
    15ca:	90 91 0b 03 	lds	r25, 0x030B
    15ce:	08 95       	ret

000015d0 <_isa_join_process>:
    15d0:	cf 92       	push	r12
    15d2:	df 92       	push	r13
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	ee 24       	eor	r14, r14
    15e2:	ff 24       	eor	r15, r15
    15e4:	15 e0       	ldi	r17, 0x05	; 5
    15e6:	c1 2e       	mov	r12, r17
    15e8:	13 e0       	ldi	r17, 0x03	; 3
    15ea:	d1 2e       	mov	r13, r17
    15ec:	60 91 18 03 	lds	r22, 0x0318
    15f0:	c6 01       	movw	r24, r12
    15f2:	0e 94 f5 17 	call	0x2fea	; 0x2fea <rf_set_rx>
    15f6:	0e 94 18 13 	call	0x2630	; 0x2630 <rf_polling_rx_on>
    15fa:	10 92 ae 06 	sts	0x06AE, r1
    15fe:	00 e0       	ldi	r16, 0x00	; 0
    1600:	12 c0       	rjmp	.+36     	; 0x1626 <_isa_join_process+0x56>
    1602:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    1606:	08 17       	cp	r16, r24
    1608:	71 f0       	breq	.+28     	; 0x1626 <_isa_join_process+0x56>
    160a:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    160e:	08 2f       	mov	r16, r24
    1610:	08 94       	sec
    1612:	e1 1c       	adc	r14, r1
    1614:	f1 1c       	adc	r15, r1
    1616:	81 e1       	ldi	r24, 0x11	; 17
    1618:	e8 16       	cp	r14, r24
    161a:	87 e2       	ldi	r24, 0x27	; 39
    161c:	f8 06       	cpc	r15, r24
    161e:	18 f0       	brcs	.+6      	; 0x1626 <_isa_join_process+0x56>
    1620:	ee 24       	eor	r14, r14
    1622:	ff 24       	eor	r15, r15
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <_isa_join_process+0x60>
    1626:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <rf_rx_check_sfd>
    162a:	18 2f       	mov	r17, r24
    162c:	88 23       	and	r24, r24
    162e:	49 f3       	breq	.-46     	; 0x1602 <_isa_join_process+0x32>
    1630:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    1634:	c8 2f       	mov	r28, r24
    1636:	dd 27       	eor	r29, r29
    1638:	24 96       	adiw	r28, 0x04	; 4
    163a:	11 23       	and	r17, r17
    163c:	71 f0       	breq	.+28     	; 0x165a <_isa_join_process+0x8a>
    163e:	06 c0       	rjmp	.+12     	; 0x164c <_isa_join_process+0x7c>
    1640:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    1644:	99 27       	eor	r25, r25
    1646:	c8 17       	cp	r28, r24
    1648:	d9 07       	cpc	r29, r25
    164a:	38 f0       	brcs	.+14     	; 0x165a <_isa_join_process+0x8a>
    164c:	60 e8       	ldi	r22, 0x80	; 128
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	0e 94 8b 10 	call	0x2116	; 0x2116 <rf_polling_rx_packet>
    1654:	18 2f       	mov	r17, r24
    1656:	88 23       	and	r24, r24
    1658:	99 f3       	breq	.-26     	; 0x1640 <_isa_join_process+0x70>
    165a:	0e 94 00 13 	call	0x2600	; 0x2600 <rf_rx_off>
    165e:	11 30       	cpi	r17, 0x01	; 1
    1660:	29 f6       	brne	.-118    	; 0x15ec <_isa_join_process+0x1c>
    1662:	e0 91 0a 03 	lds	r30, 0x030A
    1666:	f0 91 0b 03 	lds	r31, 0x030B
    166a:	84 85       	ldd	r24, Z+12	; 0x0c
    166c:	8a 30       	cpi	r24, 0x0A	; 10
    166e:	09 f0       	breq	.+2      	; 0x1672 <_isa_join_process+0xa2>
    1670:	bd cf       	rjmp	.-134    	; 0x15ec <_isa_join_process+0x1c>
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a0 e0       	ldi	r26, 0x00	; 0
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	80 93 03 06 	sts	0x0603, r24
    167e:	90 93 04 06 	sts	0x0604, r25
    1682:	a0 93 05 06 	sts	0x0605, r26
    1686:	b0 93 06 06 	sts	0x0606, r27
    168a:	86 85       	ldd	r24, Z+14	; 0x0e
    168c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <isa_set_channel_pattern>
    1690:	e0 91 0a 03 	lds	r30, 0x030A
    1694:	f0 91 0b 03 	lds	r31, 0x030B
    1698:	e7 85       	ldd	r30, Z+15	; 0x0f
    169a:	e0 93 a0 06 	sts	0x06A0, r30
    169e:	ff 27       	eor	r31, r31
    16a0:	ed 52       	subi	r30, 0x2D	; 45
    16a2:	f9 4f       	sbci	r31, 0xF9	; 249
    16a4:	80 81       	ld	r24, Z
    16a6:	80 93 d2 06 	sts	0x06D2, r24
    16aa:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <isa_set_channel>
    16ae:	00 91 0a 03 	lds	r16, 0x030A
    16b2:	10 91 0b 03 	lds	r17, 0x030B
    16b6:	e8 01       	movw	r28, r16
    16b8:	62 e9       	ldi	r22, 0x92	; 146
    16ba:	75 e0       	ldi	r23, 0x05	; 5
    16bc:	88 8d       	ldd	r24, Y+24	; 0x18
    16be:	88 23       	and	r24, r24
    16c0:	71 f1       	breq	.+92     	; 0x171e <_isa_join_process+0x14e>
    16c2:	21 e0       	ldi	r18, 0x01	; 1
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	04 c0       	rjmp	.+8      	; 0x16d4 <_isa_join_process+0x104>
    16cc:	22 0f       	add	r18, r18
    16ce:	33 1f       	adc	r19, r19
    16d0:	44 1f       	adc	r20, r20
    16d2:	55 1f       	adc	r21, r21
    16d4:	8a 95       	dec	r24
    16d6:	d2 f7       	brpl	.-12     	; 0x16cc <_isa_join_process+0xfc>
    16d8:	80 91 fa 04 	lds	r24, 0x04FA
    16dc:	90 91 fb 04 	lds	r25, 0x04FB
    16e0:	a0 91 fc 04 	lds	r26, 0x04FC
    16e4:	b0 91 fd 04 	lds	r27, 0x04FD
    16e8:	82 2b       	or	r24, r18
    16ea:	93 2b       	or	r25, r19
    16ec:	a4 2b       	or	r26, r20
    16ee:	b5 2b       	or	r27, r21
    16f0:	80 93 fa 04 	sts	0x04FA, r24
    16f4:	90 93 fb 04 	sts	0x04FB, r25
    16f8:	a0 93 fc 04 	sts	0x04FC, r26
    16fc:	b0 93 fd 04 	sts	0x04FD, r27
    1700:	e8 8d       	ldd	r30, Y+24	; 0x18
    1702:	ff 27       	eor	r31, r31
    1704:	e0 50       	subi	r30, 0x00	; 0
    1706:	fb 4f       	sbci	r31, 0xFB	; 251
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	80 83       	st	Z, r24
    170c:	88 8d       	ldd	r24, Y+24	; 0x18
    170e:	fb 01       	movw	r30, r22
    1710:	81 93       	st	Z+, r24
    1712:	bf 01       	movw	r22, r30
    1714:	21 96       	adiw	r28, 0x01	; 1
    1716:	f5 e0       	ldi	r31, 0x05	; 5
    1718:	66 39       	cpi	r22, 0x96	; 150
    171a:	7f 07       	cpc	r23, r31
    171c:	79 f6       	brne	.-98     	; 0x16bc <_isa_join_process+0xec>
    171e:	e8 01       	movw	r28, r16
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1724:	88 23       	and	r24, r24
    1726:	49 f1       	breq	.+82     	; 0x177a <_isa_join_process+0x1aa>
    1728:	21 e0       	ldi	r18, 0x01	; 1
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	04 c0       	rjmp	.+8      	; 0x173a <_isa_join_process+0x16a>
    1732:	22 0f       	add	r18, r18
    1734:	33 1f       	adc	r19, r19
    1736:	44 1f       	adc	r20, r20
    1738:	55 1f       	adc	r21, r21
    173a:	8a 95       	dec	r24
    173c:	d2 f7       	brpl	.-12     	; 0x1732 <_isa_join_process+0x162>
    173e:	80 91 f8 03 	lds	r24, 0x03F8
    1742:	90 91 f9 03 	lds	r25, 0x03F9
    1746:	a0 91 fa 03 	lds	r26, 0x03FA
    174a:	b0 91 fb 03 	lds	r27, 0x03FB
    174e:	82 2b       	or	r24, r18
    1750:	93 2b       	or	r25, r19
    1752:	a4 2b       	or	r26, r20
    1754:	b5 2b       	or	r27, r21
    1756:	80 93 f8 03 	sts	0x03F8, r24
    175a:	90 93 f9 03 	sts	0x03F9, r25
    175e:	a0 93 fa 03 	sts	0x03FA, r26
    1762:	b0 93 fb 03 	sts	0x03FB, r27
    1766:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1768:	ff 27       	eor	r31, r31
    176a:	e0 50       	subi	r30, 0x00	; 0
    176c:	fb 4f       	sbci	r31, 0xFB	; 251
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	80 83       	st	Z, r24
    1772:	6f 5f       	subi	r22, 0xFF	; 255
    1774:	21 96       	adiw	r28, 0x01	; 1
    1776:	64 30       	cpi	r22, 0x04	; 4
    1778:	a1 f6       	brne	.-88     	; 0x1722 <_isa_join_process+0x152>
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a0 e0       	ldi	r26, 0x00	; 0
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	00 90 91 06 	lds	r0, 0x0691
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <_isa_join_process+0x1c0>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	aa 1f       	adc	r26, r26
    178e:	bb 1f       	adc	r27, r27
    1790:	0a 94       	dec	r0
    1792:	d2 f7       	brpl	.-12     	; 0x1788 <_isa_join_process+0x1b8>
    1794:	0e 94 69 24 	call	0x48d2	; 0x48d2 <nrk_event_signal>
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	80 93 f3 03 	sts	0x03F3, r24
    179e:	10 92 03 06 	sts	0x0603, r1
    17a2:	10 92 04 06 	sts	0x0604, r1
    17a6:	10 92 05 06 	sts	0x0605, r1
    17aa:	10 92 06 06 	sts	0x0606, r1
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	df 90       	pop	r13
    17c0:	cf 90       	pop	r12
    17c2:	08 95       	ret

000017c4 <isa_set_schedule>:
#include <nrk_error.h>

/* For ISA */
/* This method is only for demo 1. Need to be updated!! */
int8_t isa_set_schedule (isa_node_mode_t isa_node_mode, uint8_t clk_src_id)
{
    17c4:	78 2f       	mov	r23, r24
    char i =0;
    isa_clk_src_id = clk_src_id;//change
    17c6:	60 93 f2 03 	sts	0x03F2, r22
    if (isa_node_mode==ISA_GATEWAY){
    17ca:	82 30       	cpi	r24, 0x02	; 2
    17cc:	41 f5       	brne	.+80     	; 0x181e <isa_set_schedule+0x5a>
        isa_tdma_tx_mask |= ((uint32_t) 1) << 2;
    17ce:	80 91 fa 04 	lds	r24, 0x04FA
    17d2:	90 91 fb 04 	lds	r25, 0x04FB
    17d6:	a0 91 fc 04 	lds	r26, 0x04FC
    17da:	b0 91 fd 04 	lds	r27, 0x04FD
    17de:	84 60       	ori	r24, 0x04	; 4
    17e0:	80 93 fa 04 	sts	0x04FA, r24
    17e4:	90 93 fb 04 	sts	0x04FB, r25
    17e8:	a0 93 fc 04 	sts	0x04FC, r26
    17ec:	b0 93 fd 04 	sts	0x04FD, r27
	isa_tdma_rx_mask |= ((uint32_t) 1) << 3;//change for test
    17f0:	80 91 f8 03 	lds	r24, 0x03F8
    17f4:	90 91 f9 03 	lds	r25, 0x03F9
    17f8:	a0 91 fa 03 	lds	r26, 0x03FA
    17fc:	b0 91 fb 03 	lds	r27, 0x03FB
    1800:	88 60       	ori	r24, 0x08	; 8
    1802:	80 93 f8 03 	sts	0x03F8, r24
    1806:	90 93 f9 03 	sts	0x03F9, r25
    180a:	a0 93 fa 03 	sts	0x03FA, r26
    180e:	b0 93 fb 03 	sts	0x03FB, r27
	//isa_tdma_tx_mask |= ((uint32_t) 1) << 1;
	//isa_tdma_rx_mask |= ((uint32_t) 1) << 4;

	//isa_sched[1] = 1;
	isa_sched[2] = 1;//change for test
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	80 93 02 05 	sts	0x0502, r24
	isa_sched[3] = 1;
    1818:	80 93 03 05 	sts	0x0503, r24
    181c:	58 c0       	rjmp	.+176    	; 0x18ce <isa_set_schedule+0x10a>
	//isa_sched[4] = 1;
    }
    else if (isa_node_mode==ISA_REPEATER){ //change
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	69 f5       	brne	.+90     	; 0x187c <isa_set_schedule+0xb8>
        isa_tdma_rx_mask |= ((uint32_t) 1) << 5;
    1822:	20 91 f8 03 	lds	r18, 0x03F8
    1826:	30 91 f9 03 	lds	r19, 0x03F9
    182a:	40 91 fa 03 	lds	r20, 0x03FA
    182e:	50 91 fb 03 	lds	r21, 0x03FB
	isa_tdma_tx_mask |= ((uint32_t) 1) << 7;//change for test
	isa_tdma_tx_mask |= ((uint32_t) 1) << 8;
    1832:	80 91 fa 04 	lds	r24, 0x04FA
    1836:	90 91 fb 04 	lds	r25, 0x04FB
    183a:	a0 91 fc 04 	lds	r26, 0x04FC
    183e:	b0 91 fd 04 	lds	r27, 0x04FD
    1842:	80 68       	ori	r24, 0x80	; 128
    1844:	91 60       	ori	r25, 0x01	; 1
    1846:	80 93 fa 04 	sts	0x04FA, r24
    184a:	90 93 fb 04 	sts	0x04FB, r25
    184e:	a0 93 fc 04 	sts	0x04FC, r26
    1852:	b0 93 fd 04 	sts	0x04FD, r27
	isa_tdma_rx_mask |= ((uint32_t) 1) << 9;
    1856:	20 62       	ori	r18, 0x20	; 32
    1858:	32 60       	ori	r19, 0x02	; 2
    185a:	20 93 f8 03 	sts	0x03F8, r18
    185e:	30 93 f9 03 	sts	0x03F9, r19
    1862:	40 93 fa 03 	sts	0x03FA, r20
    1866:	50 93 fb 03 	sts	0x03FB, r21

	isa_sched[7] = 1;
    186a:	70 93 07 05 	sts	0x0507, r23
	isa_sched[8] = 1;//change for test
    186e:	70 93 08 05 	sts	0x0508, r23
	isa_sched[5] = 1;
    1872:	70 93 05 05 	sts	0x0505, r23
	isa_sched[9] = 1;
    1876:	70 93 09 05 	sts	0x0509, r23
    187a:	29 c0       	rjmp	.+82     	; 0x18ce <isa_set_schedule+0x10a>

    }
    else if(isa_node_mode==ISA_RECIPIENT){
    187c:	88 23       	and	r24, r24
    187e:	39 f5       	brne	.+78     	; 0x18ce <isa_set_schedule+0x10a>
	isa_tdma_tx_mask |= ((uint32_t) 1) << 1;
    1880:	80 91 fa 04 	lds	r24, 0x04FA
    1884:	90 91 fb 04 	lds	r25, 0x04FB
    1888:	a0 91 fc 04 	lds	r26, 0x04FC
    188c:	b0 91 fd 04 	lds	r27, 0x04FD
    1890:	82 60       	ori	r24, 0x02	; 2
    1892:	80 93 fa 04 	sts	0x04FA, r24
    1896:	90 93 fb 04 	sts	0x04FB, r25
    189a:	a0 93 fc 04 	sts	0x04FC, r26
    189e:	b0 93 fd 04 	sts	0x04FD, r27
	//isa_tdma_rx_mask |= ((uint32_t) 1) << 1;//change for test
	isa_tdma_rx_mask |= ((uint32_t) 1) << 4;
    18a2:	80 91 f8 03 	lds	r24, 0x03F8
    18a6:	90 91 f9 03 	lds	r25, 0x03F9
    18aa:	a0 91 fa 03 	lds	r26, 0x03FA
    18ae:	b0 91 fb 03 	lds	r27, 0x03FB
    18b2:	80 61       	ori	r24, 0x10	; 16
    18b4:	80 93 f8 03 	sts	0x03F8, r24
    18b8:	90 93 f9 03 	sts	0x03F9, r25
    18bc:	a0 93 fa 03 	sts	0x03FA, r26
    18c0:	b0 93 fb 03 	sts	0x03FB, r27
	//isa_tdma_rx_mask |= ((uint32_t) 1) << 0;

//	isa_sched[0] = 1;
	//isa_sched[1] = 1;//change for test
	isa_sched[1] = 1;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	80 93 01 05 	sts	0x0501, r24
	isa_sched[4] = 1;
    18ca:	80 93 04 05 	sts	0x0504, r24
    for(i=0;i<25;i++)
	printf("%d,",isa_sched[i]);
    printf("\n\r");*/
    
return NRK_OK;
}
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	08 95       	ret

000018d4 <isa_get_schedule>:
 * 
 * Return: schedule value
 */
int8_t isa_get_schedule (uint8_t slot)
{
    if (slot > ISA_SLOTS_PER_FRAME)
    18d4:	8a 31       	cpi	r24, 0x1A	; 26
    18d6:	18 f0       	brcs	.+6      	; 0x18de <isa_get_schedule+0xa>
    18d8:	8f ef       	ldi	r24, 0xFF	; 255
    18da:	9f ef       	ldi	r25, 0xFF	; 255
    18dc:	08 95       	ret
        return NRK_ERROR;

    return isa_sched[slot];
    18de:	e8 2f       	mov	r30, r24
    18e0:	ff 27       	eor	r31, r31
    18e2:	e0 50       	subi	r30, 0x00	; 0
    18e4:	fb 4f       	sbci	r31, 0xFB	; 251
    18e6:	80 81       	ld	r24, Z
    18e8:	99 27       	eor	r25, r25
    18ea:	87 fd       	sbrc	r24, 7
    18ec:	90 95       	com	r25
}
    18ee:	08 95       	ret

000018f0 <_isa_clear_sched_cache>:
 * This function is called by the timer interrupt at the
 * start of each ISA cycle to remove any cached scheduling
 * values.  Only call this if you are reseting the ISA frames.
 */
void _isa_clear_sched_cache ()
{
    18f0:	e0 e0       	ldi	r30, 0x00	; 0
    18f2:	f5 e0       	ldi	r31, 0x05	; 5
    uint8_t i;
// FIXME compress this shit later...
    for (i = 0; i < ISA_SLOTS_PER_FRAME; i++) {
        isa_sched[i] = 0;
    18f4:	11 92       	st	Z+, r1
 */
void _isa_clear_sched_cache ()
{
    uint8_t i;
// FIXME compress this shit later...
    for (i = 0; i < ISA_SLOTS_PER_FRAME; i++) {
    18f6:	85 e0       	ldi	r24, 0x05	; 5
    18f8:	e9 31       	cpi	r30, 0x19	; 25
    18fa:	f8 07       	cpc	r31, r24
    18fc:	d9 f7       	brne	.-10     	; 0x18f4 <_isa_clear_sched_cache+0x4>
    18fe:	08 95       	ret

00001900 <isa_get_slots_until_next_wakeup>:
    uint8_t wrapped_slot;
    uint8_t current_local_slot;
    
//total_slot = (((uint16_t)current_frame)<<5) + current_slot; 
    min_slot = ISA_SLOTS_PER_FRAME + 1;
    current_local_slot = current_global_slot%25;
    1900:	69 e1       	ldi	r22, 0x19	; 25
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodhi4>
    1908:	68 2f       	mov	r22, r24

    //scheduled slot follows current slot
    for (test_slot = current_local_slot+1; test_slot < ISA_SLOTS_PER_FRAME; test_slot++) {
    190a:	48 2f       	mov	r20, r24
    190c:	0c c0       	rjmp	.+24     	; 0x1926 <isa_get_slots_until_next_wakeup+0x26>
	//printf("isa_sched[%d] is %d.\n\r",test_slot,isa_sched[test_slot]);
        if(isa_sched[test_slot]==0) //slot is not scheduled
    190e:	24 2f       	mov	r18, r20
    1910:	33 27       	eor	r19, r19
    1912:	f9 01       	movw	r30, r18
    1914:	e0 50       	subi	r30, 0x00	; 0
    1916:	fb 4f       	sbci	r31, 0xFB	; 251
    1918:	80 81       	ld	r24, Z
    191a:	88 23       	and	r24, r24
    191c:	21 f0       	breq	.+8      	; 0x1926 <isa_get_slots_until_next_wakeup+0x26>
            continue;
	min_slot = test_slot-current_local_slot;
    191e:	c9 01       	movw	r24, r18
    1920:	86 1b       	sub	r24, r22
    1922:	91 09       	sbc	r25, r1
    1924:	08 95       	ret
//total_slot = (((uint16_t)current_frame)<<5) + current_slot; 
    min_slot = ISA_SLOTS_PER_FRAME + 1;
    current_local_slot = current_global_slot%25;

    //scheduled slot follows current slot
    for (test_slot = current_local_slot+1; test_slot < ISA_SLOTS_PER_FRAME; test_slot++) {
    1926:	4f 5f       	subi	r20, 0xFF	; 255
    1928:	49 31       	cpi	r20, 0x19	; 25
    192a:	88 f3       	brcs	.-30     	; 0x190e <isa_get_slots_until_next_wakeup+0xe>
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
	return min_slot;
    }

    // scheduled slot wrapped back
    for (test_slot = 0; test_slot<=current_local_slot;test_slot++){ 
	if(isa_sched[test_slot]==0) //slot is not scheduled
    1930:	42 2f       	mov	r20, r18
    1932:	55 27       	eor	r21, r21
    1934:	fa 01       	movw	r30, r20
    1936:	e0 50       	subi	r30, 0x00	; 0
    1938:	fb 4f       	sbci	r31, 0xFB	; 251
    193a:	80 81       	ld	r24, Z
    193c:	88 23       	and	r24, r24
    193e:	39 f0       	breq	.+14     	; 0x194e <isa_get_slots_until_next_wakeup+0x4e>
            continue;
	min_slot = (ISA_SLOTS_PER_FRAME - current_local_slot + test_slot);
    1940:	89 e1       	ldi	r24, 0x19	; 25
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	86 1b       	sub	r24, r22
    1946:	91 09       	sbc	r25, r1
    1948:	84 0f       	add	r24, r20
    194a:	95 1f       	adc	r25, r21
    194c:	08 95       	ret
	return min_slot;
    194e:	2f 5f       	subi	r18, 0xFF	; 255
    1950:	3f 4f       	sbci	r19, 0xFF	; 255
	min_slot = test_slot-current_local_slot;
	return min_slot;
    }

    // scheduled slot wrapped back
    for (test_slot = 0; test_slot<=current_local_slot;test_slot++){ 
    1952:	62 17       	cp	r22, r18
    1954:	68 f7       	brcc	.-38     	; 0x1930 <isa_get_slots_until_next_wakeup+0x30>
	if(isa_sched[test_slot]==0) //slot is not scheduled
            continue;
	min_slot = (ISA_SLOTS_PER_FRAME - current_local_slot + test_slot);
	return min_slot;
    }
}
    1956:	08 95       	ret

00001958 <init_adc>:


void init_adc()
{
// Initialize values here
  ADC_INIT ();
    1958:	ea e7       	ldi	r30, 0x7A	; 122
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	83 e0       	ldi	r24, 0x03	; 3
    195e:	80 83       	st	Z, r24
    1960:	ac e7       	ldi	r26, 0x7C	; 124
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	80 e4       	ldi	r24, 0x40	; 64
    1966:	8c 93       	st	X, r24
  ADC_ENABLE ();
    1968:	80 81       	ld	r24, Z
    196a:	80 68       	ori	r24, 0x80	; 128
    196c:	80 83       	st	Z, r24
  channel=0;
    196e:	10 92 e8 06 	sts	0x06E8, r1
  ADC_SET_CHANNEL (0);
    1972:	8c 91       	ld	r24, X
    1974:	80 7e       	andi	r24, 0xE0	; 224
    1976:	8c 93       	st	X, r24
    1978:	9c 91       	ld	r25, X
    197a:	8c 91       	ld	r24, X
    197c:	80 7e       	andi	r24, 0xE0	; 224
    197e:	89 2b       	or	r24, r25
    1980:	8c 93       	st	X, r24
    1982:	08 95       	ret

00001984 <delay>:
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
    1984:	88 ec       	ldi	r24, 0xC8	; 200
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
    198c:	08 95       	ret

0000198e <get_adc_val>:
}

uint16_t get_adc_val()
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
    198e:	80 91 7a 00 	lds	r24, 0x007A
    1992:	80 64       	ori	r24, 0x40	; 64
    1994:	80 93 7a 00 	sts	0x007A, r24
    1998:	80 91 7a 00 	lds	r24, 0x007A
    199c:	84 ff       	sbrs	r24, 4
    199e:	fc cf       	rjmp	.-8      	; 0x1998 <get_adc_val+0xa>
	delay();
    19a0:	0e 94 c2 0c 	call	0x1984	; 0x1984 <delay>
	ADC_GET_SAMPLE_10(adc_val);
    19a4:	20 91 78 00 	lds	r18, 0x0078
    19a8:	33 27       	eor	r19, r19
    19aa:	80 91 79 00 	lds	r24, 0x0079
    19ae:	99 27       	eor	r25, r25
    19b0:	98 2f       	mov	r25, r24
    19b2:	88 27       	eor	r24, r24
	return adc_val;
}
    19b4:	82 2b       	or	r24, r18
    19b6:	93 2b       	or	r25, r19
    19b8:	08 95       	ret

000019ba <read_voltage_status>:
// the cc2420 chip to search for the voltage.
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
{
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	22 97       	sbiw	r28, 0x02	; 2
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
volatile uint16_t val;
uint8_t check,level;
nrk_sem_t *radio_sem;

radio_sem= rf_get_sem();
    19d4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <rf_get_sem>
    19d8:	8c 01       	movw	r16, r24

// if semaphore not created, then assume you own the radio 
if(radio_sem!=NULL)
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	11 f0       	breq	.+4      	; 0x19e2 <read_voltage_status+0x28>
 nrk_sem_pend (radio_sem);
    19de:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>

    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    19e2:	15 9a       	sbi	0x02, 5	; 2
    19e4:	ff 24       	eor	r15, r15
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
{
val=0x0020 | level;
    19e6:	8f 2d       	mov	r24, r15
    19e8:	80 62       	ori	r24, 0x20	; 32
    19ea:	99 27       	eor	r25, r25
    19ec:	9a 83       	std	Y+2, r25	; 0x02
    19ee:	89 83       	std	Y+1, r24	; 0x01
FASTSPI_SETREG(CC2420_BATTMON, val);
    19f0:	40 98       	cbi	0x08, 0	; 8
    19f2:	8b e1       	ldi	r24, 0x1B	; 27
    19f4:	8e bd       	out	0x2e, r24	; 46
    19f6:	0d b4       	in	r0, 0x2d	; 45
    19f8:	07 fe       	sbrs	r0, 7
    19fa:	fd cf       	rjmp	.-6      	; 0x19f6 <read_voltage_status+0x3c>
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	89 2f       	mov	r24, r25
    1a02:	99 27       	eor	r25, r25
    1a04:	8e bd       	out	0x2e, r24	; 46
    1a06:	0d b4       	in	r0, 0x2d	; 45
    1a08:	07 fe       	sbrs	r0, 7
    1a0a:	fd cf       	rjmp	.-6      	; 0x1a06 <read_voltage_status+0x4c>
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	8e bd       	out	0x2e, r24	; 46
    1a12:	0d b4       	in	r0, 0x2d	; 45
    1a14:	07 fe       	sbrs	r0, 7
    1a16:	fd cf       	rjmp	.-6      	; 0x1a12 <read_voltage_status+0x58>
    1a18:	40 9a       	sbi	0x08, 0	; 8
nrk_spin_wait_us(2);
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
FASTSPI_GETREG(CC2420_BATTMON, val);
    1a22:	40 98       	cbi	0x08, 0	; 8
    1a24:	8b e5       	ldi	r24, 0x5B	; 91
    1a26:	8e bd       	out	0x2e, r24	; 46
    1a28:	0d b4       	in	r0, 0x2d	; 45
    1a2a:	07 fe       	sbrs	r0, 7
    1a2c:	fd cf       	rjmp	.-6      	; 0x1a28 <read_voltage_status+0x6e>
    1a2e:	1e bc       	out	0x2e, r1	; 46
    1a30:	0d b4       	in	r0, 0x2d	; 45
    1a32:	07 fe       	sbrs	r0, 7
    1a34:	fd cf       	rjmp	.-6      	; 0x1a30 <read_voltage_status+0x76>
    1a36:	8e b5       	in	r24, 0x2e	; 46
    1a38:	99 27       	eor	r25, r25
    1a3a:	98 2f       	mov	r25, r24
    1a3c:	88 27       	eor	r24, r24
    1a3e:	9a 83       	std	Y+2, r25	; 0x02
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	1e bc       	out	0x2e, r1	; 46
    1a44:	0d b4       	in	r0, 0x2d	; 45
    1a46:	07 fe       	sbrs	r0, 7
    1a48:	fd cf       	rjmp	.-6      	; 0x1a44 <read_voltage_status+0x8a>
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	2e b5       	in	r18, 0x2e	; 46
    1a50:	33 27       	eor	r19, r19
    1a52:	28 2b       	or	r18, r24
    1a54:	39 2b       	or	r19, r25
    1a56:	3a 83       	std	Y+2, r19	; 0x02
    1a58:	29 83       	std	Y+1, r18	; 0x01
    1a5a:	40 9a       	sbi	0x08, 0	; 8
if(val&0x0040) break; 
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a60:	86 fd       	sbrc	r24, 6
    1a62:	05 c0       	rjmp	.+10     	; 0x1a6e <read_voltage_status+0xb4>
level++;
    1a64:	f3 94       	inc	r15
    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
    1a66:	2f e1       	ldi	r18, 0x1F	; 31
    1a68:	f2 16       	cp	r15, r18
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <read_voltage_status+0xb4>
    1a6c:	bc cf       	rjmp	.-136    	; 0x19e6 <read_voltage_status+0x2c>
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
if(val&0x0040) break; 
level++;
}
if(radio_sem!=NULL)
    1a6e:	01 15       	cp	r16, r1
    1a70:	11 05       	cpc	r17, r1
    1a72:	19 f0       	breq	.+6      	; 0x1a7a <read_voltage_status+0xc0>
 nrk_sem_post(radio_sem);
    1a74:	c8 01       	movw	r24, r16
    1a76:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
if(level==0)
    1a7a:	ff 20       	and	r15, r15
    1a7c:	c9 f4       	brne	.+50     	; 0x1ab0 <read_voltage_status+0xf6>
  {
  val=get_adc_val();
    1a7e:	0e 94 c7 0c 	call	0x198e	; 0x198e <get_adc_val>
    1a82:	9a 83       	std	Y+2, r25	; 0x02
    1a84:	89 83       	std	Y+1, r24	; 0x01
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8a:	8f 3a       	cpi	r24, 0xAF	; 175
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	30 f0       	brcs	.+12     	; 0x1a9c <read_voltage_status+0xe2>
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	8e 5a       	subi	r24, 0xAE	; 174
    1a96:	90 40       	sbci	r25, 0x00	; 0
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
  if(val<330) val=330;
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	8a 54       	subi	r24, 0x4A	; 74
    1aa2:	91 40       	sbci	r25, 0x01	; 1
    1aa4:	98 f4       	brcc	.+38     	; 0x1acc <read_voltage_status+0x112>
    1aa6:	8a e4       	ldi	r24, 0x4A	; 74
    1aa8:	91 e0       	ldi	r25, 0x01	; 1
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	0e c0       	rjmp	.+28     	; 0x1acc <read_voltage_status+0x112>
  }
else val=(9000-(level*125)) / 27;
    1ab0:	2d e7       	ldi	r18, 0x7D	; 125
    1ab2:	f2 9e       	mul	r15, r18
    1ab4:	90 01       	movw	r18, r0
    1ab6:	11 24       	eor	r1, r1
    1ab8:	88 e2       	ldi	r24, 0x28	; 40
    1aba:	93 e2       	ldi	r25, 0x23	; 35
    1abc:	82 1b       	sub	r24, r18
    1abe:	93 0b       	sbc	r25, r19
    1ac0:	6b e1       	ldi	r22, 0x1B	; 27
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	0e 94 03 37 	call	0x6e06	; 0x6e06 <__divmodhi4>
    1ac8:	7a 83       	std	Y+2, r23	; 0x02
    1aca:	69 83       	std	Y+1, r22	; 0x01

return val;
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad0:	22 96       	adiw	r28, 0x02	; 2
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	1f 91       	pop	r17
    1ae2:	0f 91       	pop	r16
    1ae4:	ff 90       	pop	r15
    1ae6:	08 95       	ret

00001ae8 <dev_manager_ff_sensors>:
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
    1ae8:	cf 92       	push	r12
    1aea:	df 92       	push	r13
    1aec:	ef 92       	push	r14
    1aee:	ff 92       	push	r15
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	98 2f       	mov	r25, r24
    1afa:	ea 01       	movw	r28, r20
    1afc:	12 2f       	mov	r17, r18
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

     switch(action)
    1afe:	82 30       	cpi	r24, 0x02	; 2
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <dev_manager_ff_sensors+0x1c>
    1b02:	81 c0       	rjmp	.+258    	; 0x1c06 <dev_manager_ff_sensors+0x11e>
    1b04:	83 30       	cpi	r24, 0x03	; 3
    1b06:	30 f4       	brcc	.+12     	; 0x1b14 <dev_manager_ff_sensors+0x2c>
    1b08:	88 23       	and	r24, r24
    1b0a:	71 f0       	breq	.+28     	; 0x1b28 <dev_manager_ff_sensors+0x40>
    1b0c:	81 30       	cpi	r24, 0x01	; 1
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <dev_manager_ff_sensors+0x2a>
    1b10:	d2 c0       	rjmp	.+420    	; 0x1cb6 <dev_manager_ff_sensors+0x1ce>
    1b12:	10 c0       	rjmp	.+32     	; 0x1b34 <dev_manager_ff_sensors+0x4c>
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <dev_manager_ff_sensors+0x32>
    1b18:	81 c0       	rjmp	.+258    	; 0x1c1c <dev_manager_ff_sensors+0x134>
    1b1a:	84 30       	cpi	r24, 0x04	; 4
    1b1c:	08 f4       	brcc	.+2      	; 0x1b20 <dev_manager_ff_sensors+0x38>
    1b1e:	77 c0       	rjmp	.+238    	; 0x1c0e <dev_manager_ff_sensors+0x126>
    1b20:	85 30       	cpi	r24, 0x05	; 5
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <dev_manager_ff_sensors+0x3e>
    1b24:	c8 c0       	rjmp	.+400    	; 0x1cb6 <dev_manager_ff_sensors+0x1ce>
    1b26:	2d c0       	rjmp	.+90     	; 0x1b82 <dev_manager_ff_sensors+0x9a>
     {
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
    1b28:	80 e8       	ldi	r24, 0x80	; 128
    1b2a:	80 bb       	out	0x10, r24	; 16
			PORTF |= PWR_CTRL_MASK;
    1b2c:	8f 9a       	sbi	0x11, 7	; 17
	     		init_adc();  
    1b2e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <init_adc>
    1b32:	6a c0       	rjmp	.+212    	; 0x1c08 <dev_manager_ff_sensors+0x120>
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    1b34:	80 91 e7 06 	lds	r24, 0x06E7
    1b38:	81 30       	cpi	r24, 0x01	; 1
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <dev_manager_ff_sensors+0x56>
    1b3c:	c3 c0       	rjmp	.+390    	; 0x1cc4 <dev_manager_ff_sensors+0x1dc>
		    is_open=1; 
    1b3e:	90 93 e7 06 	sts	0x06E7, r25
		    if(opt&READ_FLAG)
    1b42:	77 27       	eor	r23, r23
    1b44:	60 ff       	sbrs	r22, 0
    1b46:	13 c0       	rjmp	.+38     	; 0x1b6e <dev_manager_ff_sensors+0x86>
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
    1b48:	8f 98       	cbi	0x11, 7	; 17
  			channel=0;
    1b4a:	10 92 e8 06 	sts	0x06E8, r1
  			ADC_SET_CHANNEL (0);
    1b4e:	80 91 7c 00 	lds	r24, 0x007C
    1b52:	80 7e       	andi	r24, 0xE0	; 224
    1b54:	80 93 7c 00 	sts	0x007C, r24
    1b58:	90 91 7c 00 	lds	r25, 0x007C
    1b5c:	80 91 7c 00 	lds	r24, 0x007C
    1b60:	80 7e       	andi	r24, 0xE0	; 224
    1b62:	89 2b       	or	r24, r25
    1b64:	80 93 7c 00 	sts	0x007C, r24
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    1b68:	88 ee       	ldi	r24, 0xE8	; 232
    1b6a:	93 e0       	ldi	r25, 0x03	; 3
    1b6c:	9f c0       	rjmp	.+318    	; 0x1cac <dev_manager_ff_sensors+0x1c4>
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
    1b6e:	61 fd       	sbrc	r22, 1
    1b70:	a9 c0       	rjmp	.+338    	; 0x1cc4 <dev_manager_ff_sensors+0x1dc>
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
    1b72:	62 fd       	sbrc	r22, 2
    1b74:	a7 c0       	rjmp	.+334    	; 0x1cc4 <dev_manager_ff_sensors+0x1dc>
		    {
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
    1b76:	67 70       	andi	r22, 0x07	; 7
    1b78:	70 70       	andi	r23, 0x00	; 0
    1b7a:	67 2b       	or	r22, r23
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <dev_manager_ff_sensors+0x98>
    1b7e:	a2 c0       	rjmp	.+324    	; 0x1cc4 <dev_manager_ff_sensors+0x1dc>
    1b80:	97 c0       	rjmp	.+302    	; 0x1cb0 <dev_manager_ff_sensors+0x1c8>
		
	    

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
    1b82:	82 2f       	mov	r24, r18
    1b84:	81 50       	subi	r24, 0x01	; 1
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	08 f0       	brcs	.+2      	; 0x1b8c <dev_manager_ff_sensors+0xa4>
    1b8a:	99 c0       	rjmp	.+306    	; 0x1cbe <dev_manager_ff_sensors+0x1d6>
			if(channel!=BAT && channel<7)
    1b8c:	90 91 e8 06 	lds	r25, 0x06E8
    1b90:	89 2f       	mov	r24, r25
    1b92:	81 50       	subi	r24, 0x01	; 1
    1b94:	86 30       	cpi	r24, 0x06	; 6
    1b96:	18 f4       	brcc	.+6      	; 0x1b9e <dev_manager_ff_sensors+0xb6>
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();
    1b98:	0e 94 c7 0c 	call	0x198e	; 0x198e <get_adc_val>
    1b9c:	22 c0       	rjmp	.+68     	; 0x1be2 <dev_manager_ff_sensors+0xfa>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}


			} else if(channel==BAT)
    1b9e:	99 23       	and	r25, r25
    1ba0:	19 f4       	brne	.+6      	; 0x1ba8 <dev_manager_ff_sensors+0xc0>
			{
			uint16_t tmp;
			tmp=read_voltage_status();
    1ba2:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <read_voltage_status>
    1ba6:	1d c0       	rjmp	.+58     	; 0x1be2 <dev_manager_ff_sensors+0xfa>
				}
			if(size==1)
				{
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
    1ba8:	97 30       	cpi	r25, 0x07	; 7
    1baa:	51 f5       	brne	.+84     	; 0x1c00 <dev_manager_ff_sensors+0x118>
    1bac:	f1 e0       	ldi	r31, 0x01	; 1
    1bae:	cf 2e       	mov	r12, r31
    1bb0:	f4 e0       	ldi	r31, 0x04	; 4
    1bb2:	df 2e       	mov	r13, r31
    1bb4:	ee 24       	eor	r14, r14
    1bb6:	ff 24       	eor	r15, r15
    1bb8:	00 e0       	ldi	r16, 0x00	; 0
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
    1bba:	0e 94 c7 0c 	call	0x198e	; 0x198e <get_adc_val>
    1bbe:	8c 15       	cp	r24, r12
    1bc0:	9d 05       	cpc	r25, r13
    1bc2:	08 f4       	brcc	.+2      	; 0x1bc6 <dev_manager_ff_sensors+0xde>
    1bc4:	6c 01       	movw	r12, r24
    1bc6:	e8 16       	cp	r14, r24
    1bc8:	f9 06       	cpc	r15, r25
    1bca:	08 f4       	brcc	.+2      	; 0x1bce <dev_manager_ff_sensors+0xe6>
    1bcc:	7c 01       	movw	r14, r24
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
    1bce:	8d e7       	ldi	r24, 0x7D	; 125
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
    1bd6:	0f 5f       	subi	r16, 0xFF	; 255
    1bd8:	00 34       	cpi	r16, 0x40	; 64
    1bda:	79 f7       	brne	.-34     	; 0x1bba <dev_manager_ff_sensors+0xd2>
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
				}
			 	val=max-min;	
    1bdc:	c7 01       	movw	r24, r14
    1bde:	8c 19       	sub	r24, r12
    1be0:	9d 09       	sbc	r25, r13
				if(size==2)
    1be2:	12 30       	cpi	r17, 0x02	; 2
    1be4:	31 f4       	brne	.+12     	; 0x1bf2 <dev_manager_ff_sensors+0x10a>
			      	{
					buffer[count]=val  & 0xFF;
    1be6:	88 83       	st	Y, r24
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    1be8:	89 2f       	mov	r24, r25
    1bea:	99 27       	eor	r25, r25
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	08 c0       	rjmp	.+16     	; 0x1c02 <dev_manager_ff_sensors+0x11a>
				}

				if(size==1)
    1bf2:	11 30       	cpi	r17, 0x01	; 1
    1bf4:	29 f4       	brne	.+10     	; 0x1c00 <dev_manager_ff_sensors+0x118>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
    1bf6:	96 95       	lsr	r25
    1bf8:	87 95       	ror	r24
    1bfa:	96 95       	lsr	r25
    1bfc:	87 95       	ror	r24
    1bfe:	88 83       	st	Y, r24
    1c00:	80 e0       	ldi	r24, 0x00	; 0
				}

			}
			
		      count++;
                      return count;
    1c02:	8f 5f       	subi	r24, 0xFF	; 255
    1c04:	09 c0       	rjmp	.+18     	; 0x1c18 <dev_manager_ff_sensors+0x130>

             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
    1c06:	8f 9a       	sbi	0x11, 7	; 17
		    	is_open=0; 
    1c08:	10 92 e7 06 	sts	0x06E7, r1
    1c0c:	51 c0       	rjmp	.+162    	; 0x1cb0 <dev_manager_ff_sensors+0x1c8>
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
    1c0e:	61 30       	cpi	r22, 0x01	; 1
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <dev_manager_ff_sensors+0x12c>
    1c12:	58 c0       	rjmp	.+176    	; 0x1cc4 <dev_manager_ff_sensors+0x1dc>
    1c14:	80 91 e8 06 	lds	r24, 0x06E8
    1c18:	99 27       	eor	r25, r25
    1c1a:	56 c0       	rjmp	.+172    	; 0x1cc8 <dev_manager_ff_sensors+0x1e0>
	     		return NRK_ERROR;
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    1c1c:	61 30       	cpi	r22, 0x01	; 1
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <dev_manager_ff_sensors+0x13a>
    1c20:	51 c0       	rjmp	.+162    	; 0x1cc4 <dev_manager_ff_sensors+0x1dc>
			{
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
    1c22:	27 30       	cpi	r18, 0x07	; 7
    1c24:	d9 f4       	brne	.+54     	; 0x1c5c <dev_manager_ff_sensors+0x174>
			  {
				channel=value;
    1c26:	20 93 e8 06 	sts	0x06E8, r18
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
    1c2a:	80 91 7c 00 	lds	r24, 0x007C
    1c2e:	8f 77       	andi	r24, 0x7F	; 127
    1c30:	80 93 7c 00 	sts	0x007C, r24
    1c34:	80 91 7c 00 	lds	r24, 0x007C
    1c38:	80 64       	ori	r24, 0x40	; 64
    1c3a:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (AUDIO);
    1c3e:	80 91 7c 00 	lds	r24, 0x007C
    1c42:	80 7e       	andi	r24, 0xE0	; 224
    1c44:	80 93 7c 00 	sts	0x007C, r24
    1c48:	90 91 7c 00 	lds	r25, 0x007C
    1c4c:	80 91 7c 00 	lds	r24, 0x007C
    1c50:	93 60       	ori	r25, 0x03	; 3
    1c52:	80 7e       	andi	r24, 0xE0	; 224
    1c54:	98 2b       	or	r25, r24
    1c56:	90 93 7c 00 	sts	0x007C, r25
    1c5a:	26 c0       	rjmp	.+76     	; 0x1ca8 <dev_manager_ff_sensors+0x1c0>
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;

			  } else
			  {
				if(value>7) 
    1c5c:	28 30       	cpi	r18, 0x08	; 8
    1c5e:	20 f0       	brcs	.+8      	; 0x1c68 <dev_manager_ff_sensors+0x180>
				{
					_nrk_errno_set(1);
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	0e 94 0c 21 	call	0x4218	; 0x4218 <_nrk_errno_set>
    1c66:	2e c0       	rjmp	.+92     	; 0x1cc4 <dev_manager_ff_sensors+0x1dc>
					return NRK_ERROR;
				}
				channel=value;
    1c68:	20 93 e8 06 	sts	0x06E8, r18
				if(channel==LIGHT)
    1c6c:	21 30       	cpi	r18, 0x01	; 1
    1c6e:	49 f4       	brne	.+18     	; 0x1c82 <dev_manager_ff_sensors+0x19a>
				   ADC_VREF_VCC();	
    1c70:	80 91 7c 00 	lds	r24, 0x007C
    1c74:	8f 77       	andi	r24, 0x7F	; 127
    1c76:	80 93 7c 00 	sts	0x007C, r24
    1c7a:	80 91 7c 00 	lds	r24, 0x007C
    1c7e:	80 64       	ori	r24, 0x40	; 64
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <dev_manager_ff_sensors+0x1a0>
				else
				   ADC_VREF_2_56();	
    1c82:	80 91 7c 00 	lds	r24, 0x007C
    1c86:	80 6c       	ori	r24, 0xC0	; 192
    1c88:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (channel);
    1c8c:	80 91 7c 00 	lds	r24, 0x007C
    1c90:	80 7e       	andi	r24, 0xE0	; 224
    1c92:	80 93 7c 00 	sts	0x007C, r24
    1c96:	90 91 7c 00 	lds	r25, 0x007C
    1c9a:	80 91 7c 00 	lds	r24, 0x007C
    1c9e:	80 7e       	andi	r24, 0xE0	; 224
    1ca0:	89 2b       	or	r24, r25
    1ca2:	81 2b       	or	r24, r17
    1ca4:	80 93 7c 00 	sts	0x007C, r24
				nrk_spin_wait_us(ADC_SETUP_DELAY);
    1ca8:	88 ec       	ldi	r24, 0xC8	; 200
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	09 c0       	rjmp	.+18     	; 0x1cc8 <dev_manager_ff_sensors+0x1e0>
				return NRK_OK;
			  }
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	8c e0       	ldi	r24, 0x0C	; 12
    1cba:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <nrk_kernel_error_add>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <dev_manager_ff_sensors+0x1e0>
		 return 0;
    1cc4:	8f ef       	ldi	r24, 0xFF	; 255
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	1f 91       	pop	r17
    1cce:	0f 91       	pop	r16
    1cd0:	ff 90       	pop	r15
    1cd2:	ef 90       	pop	r14
    1cd4:	df 90       	pop	r13
    1cd6:	cf 90       	pop	r12
    1cd8:	08 95       	ret

00001cda <halRfSetChannel>:

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    1cda:	99 27       	eor	r25, r25
    do { \
    1cdc:	9c 01       	movw	r18, r24
    1cde:	26 5a       	subi	r18, 0xA6	; 166
    1ce0:	3e 4b       	sbci	r19, 0xBE	; 190
    1ce2:	0b 97       	sbiw	r24, 0x0b	; 11
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	28 0f       	add	r18, r24
    1cee:	39 1f       	adc	r19, r25
	ADMUX = BM(REFS0);  \
} while (0)

    1cf0:	f8 94       	cli
#define ADC_VREF_VCC() \
    1cf2:	40 98       	cbi	0x08, 0	; 8
    1cf4:	88 e1       	ldi	r24, 0x18	; 24
    1cf6:	8e bd       	out	0x2e, r24	; 46
    1cf8:	0d b4       	in	r0, 0x2d	; 45
    1cfa:	07 fe       	sbrs	r0, 7
    1cfc:	fd cf       	rjmp	.-6      	; 0x1cf8 <halRfSetChannel+0x1e>
    1cfe:	83 2f       	mov	r24, r19
    1d00:	99 27       	eor	r25, r25
    1d02:	8e bd       	out	0x2e, r24	; 46
    1d04:	0d b4       	in	r0, 0x2d	; 45
    1d06:	07 fe       	sbrs	r0, 7
    1d08:	fd cf       	rjmp	.-6      	; 0x1d04 <halRfSetChannel+0x2a>
    1d0a:	2e bd       	out	0x2e, r18	; 46
    1d0c:	0d b4       	in	r0, 0x2d	; 45
    1d0e:	07 fe       	sbrs	r0, 7
    1d10:	fd cf       	rjmp	.-6      	; 0x1d0c <halRfSetChannel+0x32>
    1d12:	40 9a       	sbi	0x08, 0	; 8
   do { \
    1d14:	78 94       	sei
    1d16:	08 95       	ret

00001d18 <halRfWaitForCrystalOscillator>:

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;
    1d18:	f8 94       	cli

    1d1a:	40 98       	cbi	0x08, 0	; 8
    1d1c:	1e bc       	out	0x2e, r1	; 46
    1d1e:	0d b4       	in	r0, 0x2d	; 45
    1d20:	07 fe       	sbrs	r0, 7
    1d22:	fd cf       	rjmp	.-6      	; 0x1d1e <halRfWaitForCrystalOscillator+0x6>
    1d24:	8e b5       	in	r24, 0x2e	; 46
    1d26:	40 9a       	sbi	0x08, 0	; 8
// VREF is set to VCC by default
    1d28:	78 94       	sei
#define ADC_INIT() \
    1d2a:	86 ff       	sbrs	r24, 6
    1d2c:	f5 cf       	rjmp	.-22     	; 0x1d18 <halRfWaitForCrystalOscillator>
    1d2e:	08 95       	ret

00001d30 <rf_security_last_pkt_status>:
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)

#define ADC_VREF_VCC() \
    1d30:	80 91 fe 06 	lds	r24, 0x06FE
   do { \
	ADMUX &= ~(BM(REFS1));  \
    1d34:	99 27       	eor	r25, r25
    1d36:	08 95       	ret

00001d38 <rf_security_set_ctr_counter>:
	ADMUX |= BM(REFS0);  \
} while(0)


    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	dc 01       	movw	r26, r24
#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
    1d3e:	40 98       	cbi	0x08, 0	; 8
    1d40:	89 ec       	ldi	r24, 0xC9	; 201
    1d42:	8e bd       	out	0x2e, r24	; 46
    1d44:	0d b4       	in	r0, 0x2d	; 45
    1d46:	07 fe       	sbrs	r0, 7
    1d48:	fd cf       	rjmp	.-6      	; 0x1d44 <rf_security_set_ctr_counter+0xc>
    1d4a:	80 e8       	ldi	r24, 0x80	; 128
    1d4c:	8e bd       	out	0x2e, r24	; 46
    1d4e:	0d b4       	in	r0, 0x2d	; 45
    1d50:	07 fe       	sbrs	r0, 7
    1d52:	fd cf       	rjmp	.-6      	; 0x1d4e <rf_security_set_ctr_counter+0x16>
    1d54:	92 e0       	ldi	r25, 0x02	; 2
    1d56:	91 50       	subi	r25, 0x01	; 1
    1d58:	fd 01       	movw	r30, r26
    1d5a:	e9 0f       	add	r30, r25
    1d5c:	f1 1d       	adc	r31, r1
    1d5e:	80 81       	ld	r24, Z
    1d60:	8e bd       	out	0x2e, r24	; 46
    1d62:	0d b4       	in	r0, 0x2d	; 45
    1d64:	07 fe       	sbrs	r0, 7
    1d66:	fd cf       	rjmp	.-6      	; 0x1d62 <rf_security_set_ctr_counter+0x2a>
    1d68:	99 23       	and	r25, r25
    1d6a:	a9 f7       	brne	.-22     	; 0x1d56 <rf_security_set_ctr_counter+0x1e>
    1d6c:	40 9a       	sbi	0x08, 0	; 8
	ADMUX |= BM(REFS1);  \
    1d6e:	40 98       	cbi	0x08, 0	; 8
    1d70:	8b ec       	ldi	r24, 0xCB	; 203
    1d72:	8e bd       	out	0x2e, r24	; 46
    1d74:	0d b4       	in	r0, 0x2d	; 45
    1d76:	07 fe       	sbrs	r0, 7
    1d78:	fd cf       	rjmp	.-6      	; 0x1d74 <rf_security_set_ctr_counter+0x3c>
    1d7a:	80 e8       	ldi	r24, 0x80	; 128
    1d7c:	8e bd       	out	0x2e, r24	; 46
    1d7e:	0d b4       	in	r0, 0x2d	; 45
    1d80:	07 fe       	sbrs	r0, 7
    1d82:	fd cf       	rjmp	.-6      	; 0x1d7e <rf_security_set_ctr_counter+0x46>
    1d84:	92 e0       	ldi	r25, 0x02	; 2
    1d86:	9d 01       	movw	r18, r26
    1d88:	2e 5f       	subi	r18, 0xFE	; 254
    1d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8c:	e9 01       	movw	r28, r18
    1d8e:	91 50       	subi	r25, 0x01	; 1
    1d90:	f9 01       	movw	r30, r18
    1d92:	e9 0f       	add	r30, r25
    1d94:	f1 1d       	adc	r31, r1
    1d96:	80 81       	ld	r24, Z
    1d98:	8e bd       	out	0x2e, r24	; 46
    1d9a:	0d b4       	in	r0, 0x2d	; 45
    1d9c:	07 fe       	sbrs	r0, 7
    1d9e:	fd cf       	rjmp	.-6      	; 0x1d9a <rf_security_set_ctr_counter+0x62>
    1da0:	99 23       	and	r25, r25
    1da2:	a1 f7       	brne	.-24     	; 0x1d8c <rf_security_set_ctr_counter+0x54>
    1da4:	40 9a       	sbi	0x08, 0	; 8
} while(0)
    1da6:	8c 91       	ld	r24, X
    1da8:	80 93 ff 06 	sts	0x06FF, r24

    1dac:	fd 01       	movw	r30, r26
    1dae:	81 81       	ldd	r24, Z+1	; 0x01
    1db0:	80 93 00 07 	sts	0x0700, r24

    1db4:	88 81       	ld	r24, Y
    1db6:	80 93 01 07 	sts	0x0701, r24
#define ADC_VREF_2_56() \
    1dba:	83 81       	ldd	r24, Z+3	; 0x03
    1dbc:	80 93 02 07 	sts	0x0702, r24
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	08 95       	ret

00001dc6 <rf_security_enable>:

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
uint8_t count=0;
// key and value get passed as opt and size
    1dc6:	40 98       	cbi	0x08, 0	; 8
    1dc8:	89 e1       	ldi	r24, 0x19	; 25
    1dca:	8e bd       	out	0x2e, r24	; 46
    1dcc:	0d b4       	in	r0, 0x2d	; 45
    1dce:	07 fe       	sbrs	r0, 7
    1dd0:	fd cf       	rjmp	.-6      	; 0x1dcc <rf_security_enable+0x6>
    1dd2:	83 e0       	ldi	r24, 0x03	; 3
    1dd4:	8e bd       	out	0x2e, r24	; 46
    1dd6:	0d b4       	in	r0, 0x2d	; 45
    1dd8:	07 fe       	sbrs	r0, 7
    1dda:	fd cf       	rjmp	.-6      	; 0x1dd6 <rf_security_enable+0x10>
    1ddc:	86 e0       	ldi	r24, 0x06	; 6
    1dde:	8e bd       	out	0x2e, r24	; 46
    1de0:	0d b4       	in	r0, 0x2d	; 45
    1de2:	07 fe       	sbrs	r0, 7
    1de4:	fd cf       	rjmp	.-6      	; 0x1de0 <rf_security_enable+0x1a>
    1de6:	40 9a       	sbi	0x08, 0	; 8
uint8_t key=opt;
    1de8:	40 98       	cbi	0x08, 0	; 8
    1dea:	8a e1       	ldi	r24, 0x1A	; 26
    1dec:	8e bd       	out	0x2e, r24	; 46
    1dee:	0d b4       	in	r0, 0x2d	; 45
    1df0:	07 fe       	sbrs	r0, 7
    1df2:	fd cf       	rjmp	.-6      	; 0x1dee <rf_security_enable+0x28>
    1df4:	8e e0       	ldi	r24, 0x0E	; 14
    1df6:	8e bd       	out	0x2e, r24	; 46
    1df8:	0d b4       	in	r0, 0x2d	; 45
    1dfa:	07 fe       	sbrs	r0, 7
    1dfc:	fd cf       	rjmp	.-6      	; 0x1df8 <rf_security_enable+0x32>
    1dfe:	8e e0       	ldi	r24, 0x0E	; 14
    1e00:	8e bd       	out	0x2e, r24	; 46
    1e02:	0d b4       	in	r0, 0x2d	; 45
    1e04:	07 fe       	sbrs	r0, 7
    1e06:	fd cf       	rjmp	.-6      	; 0x1e02 <rf_security_enable+0x3c>
    1e08:	40 9a       	sbi	0x08, 0	; 8
uint8_t value=size;

    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	80 93 ef 06 	sts	0x06EF, r24
    1e10:	08 95       	ret

00001e12 <rf_security_disable>:
     {
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
    1e12:	40 98       	cbi	0x08, 0	; 8
    1e14:	89 e1       	ldi	r24, 0x19	; 25
    1e16:	8e bd       	out	0x2e, r24	; 46
    1e18:	0d b4       	in	r0, 0x2d	; 45
    1e1a:	07 fe       	sbrs	r0, 7
    1e1c:	fd cf       	rjmp	.-6      	; 0x1e18 <rf_security_disable+0x6>
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	8e bd       	out	0x2e, r24	; 46
    1e22:	0d b4       	in	r0, 0x2d	; 45
    1e24:	07 fe       	sbrs	r0, 7
    1e26:	fd cf       	rjmp	.-6      	; 0x1e22 <rf_security_disable+0x10>
    1e28:	84 ec       	ldi	r24, 0xC4	; 196
    1e2a:	8e bd       	out	0x2e, r24	; 46
    1e2c:	0d b4       	in	r0, 0x2d	; 45
    1e2e:	07 fe       	sbrs	r0, 7
    1e30:	fd cf       	rjmp	.-6      	; 0x1e2c <rf_security_disable+0x1a>
    1e32:	40 9a       	sbi	0x08, 0	; 8
			is_open=0;
    1e34:	10 92 ef 06 	sts	0x06EF, r1
    1e38:	08 95       	ret

00001e3a <rf_get_sem>:
		    if(opt&READ_FLAG)
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
    1e3a:	80 91 ed 06 	lds	r24, 0x06ED
    1e3e:	90 91 ee 06 	lds	r25, 0x06EE
    1e42:	08 95       	ret

00001e44 <rf_addr_decode_enable>:

				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    1e44:	20 91 f0 06 	lds	r18, 0x06F0
    1e48:	30 91 f1 06 	lds	r19, 0x06F1
    1e4c:	38 60       	ori	r19, 0x08	; 8
    1e4e:	30 93 f1 06 	sts	0x06F1, r19
    1e52:	20 93 f0 06 	sts	0x06F0, r18
				}
    1e56:	40 98       	cbi	0x08, 0	; 8
    1e58:	81 e1       	ldi	r24, 0x11	; 17
    1e5a:	8e bd       	out	0x2e, r24	; 46
    1e5c:	0d b4       	in	r0, 0x2d	; 45
    1e5e:	07 fe       	sbrs	r0, 7
    1e60:	fd cf       	rjmp	.-6      	; 0x1e5c <rf_addr_decode_enable+0x18>
    1e62:	83 2f       	mov	r24, r19
    1e64:	99 27       	eor	r25, r25
    1e66:	8e bd       	out	0x2e, r24	; 46
    1e68:	0d b4       	in	r0, 0x2d	; 45
    1e6a:	07 fe       	sbrs	r0, 7
    1e6c:	fd cf       	rjmp	.-6      	; 0x1e68 <rf_addr_decode_enable+0x24>
    1e6e:	2e bd       	out	0x2e, r18	; 46
    1e70:	0d b4       	in	r0, 0x2d	; 45
    1e72:	07 fe       	sbrs	r0, 7
    1e74:	fd cf       	rjmp	.-6      	; 0x1e70 <rf_addr_decode_enable+0x2c>
    1e76:	40 9a       	sbi	0x08, 0	; 8
    1e78:	08 95       	ret

00001e7a <rf_addr_decode_disable>:

				if(size==1)
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}
    1e7a:	20 91 f0 06 	lds	r18, 0x06F0
    1e7e:	30 91 f1 06 	lds	r19, 0x06F1
    1e82:	37 7f       	andi	r19, 0xF7	; 247
    1e84:	30 93 f1 06 	sts	0x06F1, r19
    1e88:	20 93 f0 06 	sts	0x06F0, r18

    1e8c:	40 98       	cbi	0x08, 0	; 8
    1e8e:	81 e1       	ldi	r24, 0x11	; 17
    1e90:	8e bd       	out	0x2e, r24	; 46
    1e92:	0d b4       	in	r0, 0x2d	; 45
    1e94:	07 fe       	sbrs	r0, 7
    1e96:	fd cf       	rjmp	.-6      	; 0x1e92 <rf_addr_decode_disable+0x18>
    1e98:	83 2f       	mov	r24, r19
    1e9a:	99 27       	eor	r25, r25
    1e9c:	8e bd       	out	0x2e, r24	; 46
    1e9e:	0d b4       	in	r0, 0x2d	; 45
    1ea0:	07 fe       	sbrs	r0, 7
    1ea2:	fd cf       	rjmp	.-6      	; 0x1e9e <rf_addr_decode_disable+0x24>
    1ea4:	2e bd       	out	0x2e, r18	; 46
    1ea6:	0d b4       	in	r0, 0x2d	; 45
    1ea8:	07 fe       	sbrs	r0, 7
    1eaa:	fd cf       	rjmp	.-6      	; 0x1ea6 <rf_addr_decode_disable+0x2c>
    1eac:	40 9a       	sbi	0x08, 0	; 8
    1eae:	08 95       	ret

00001eb0 <rf_auto_ack_enable>:

			} else if(channel==BAT)
			{
			uint16_t tmp;
			tmp=read_voltage_status();
			if(size==2)
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	80 93 fd 06 	sts	0x06FD, r24
				{
    1eb6:	20 91 f0 06 	lds	r18, 0x06F0
    1eba:	30 91 f1 06 	lds	r19, 0x06F1
    1ebe:	20 61       	ori	r18, 0x10	; 16
    1ec0:	30 93 f1 06 	sts	0x06F1, r19
    1ec4:	20 93 f0 06 	sts	0x06F0, r18
					buffer[count]=tmp & 0xFF;
    1ec8:	40 98       	cbi	0x08, 0	; 8
    1eca:	81 e1       	ldi	r24, 0x11	; 17
    1ecc:	8e bd       	out	0x2e, r24	; 46
    1ece:	0d b4       	in	r0, 0x2d	; 45
    1ed0:	07 fe       	sbrs	r0, 7
    1ed2:	fd cf       	rjmp	.-6      	; 0x1ece <rf_auto_ack_enable+0x1e>
    1ed4:	83 2f       	mov	r24, r19
    1ed6:	99 27       	eor	r25, r25
    1ed8:	8e bd       	out	0x2e, r24	; 46
    1eda:	0d b4       	in	r0, 0x2d	; 45
    1edc:	07 fe       	sbrs	r0, 7
    1ede:	fd cf       	rjmp	.-6      	; 0x1eda <rf_auto_ack_enable+0x2a>
    1ee0:	2e bd       	out	0x2e, r18	; 46
    1ee2:	0d b4       	in	r0, 0x2d	; 45
    1ee4:	07 fe       	sbrs	r0, 7
    1ee6:	fd cf       	rjmp	.-6      	; 0x1ee2 <rf_auto_ack_enable+0x32>
    1ee8:	40 9a       	sbi	0x08, 0	; 8
    1eea:	08 95       	ret

00001eec <rf_auto_ack_disable>:
					count++;
					buffer[count]=(tmp>>8) & 0xFF;
				}
			if(size==1)
				{
    1eec:	10 92 fd 06 	sts	0x06FD, r1
					buffer[count]=(tmp>>2) & 0xFF;
    1ef0:	20 91 f0 06 	lds	r18, 0x06F0
    1ef4:	30 91 f1 06 	lds	r19, 0x06F1
    1ef8:	2f 7e       	andi	r18, 0xEF	; 239
    1efa:	30 93 f1 06 	sts	0x06F1, r19
    1efe:	20 93 f0 06 	sts	0x06F0, r18
				}
    1f02:	40 98       	cbi	0x08, 0	; 8
    1f04:	81 e1       	ldi	r24, 0x11	; 17
    1f06:	8e bd       	out	0x2e, r24	; 46
    1f08:	0d b4       	in	r0, 0x2d	; 45
    1f0a:	07 fe       	sbrs	r0, 7
    1f0c:	fd cf       	rjmp	.-6      	; 0x1f08 <rf_auto_ack_disable+0x1c>
    1f0e:	83 2f       	mov	r24, r19
    1f10:	99 27       	eor	r25, r25
    1f12:	8e bd       	out	0x2e, r24	; 46
    1f14:	0d b4       	in	r0, 0x2d	; 45
    1f16:	07 fe       	sbrs	r0, 7
    1f18:	fd cf       	rjmp	.-6      	; 0x1f14 <rf_auto_ack_disable+0x28>
    1f1a:	2e bd       	out	0x2e, r18	; 46
    1f1c:	0d b4       	in	r0, 0x2d	; 45
    1f1e:	07 fe       	sbrs	r0, 7
    1f20:	fd cf       	rjmp	.-6      	; 0x1f1c <rf_auto_ack_disable+0x30>
    1f22:	40 9a       	sbi	0x08, 0	; 8
    1f24:	08 95       	ret

00001f26 <rf_busy>:
    1f26:	89 b1       	in	r24, 0x09	; 9
    1f28:	99 27       	eor	r25, r25
    1f2a:	66 e0       	ldi	r22, 0x06	; 6
    1f2c:	96 95       	lsr	r25
    1f2e:	87 95       	ror	r24
    1f30:	6a 95       	dec	r22
    1f32:	e1 f7       	brne	.-8      	; 0x1f2c <rf_busy+0x6>
    1f34:	81 70       	andi	r24, 0x01	; 1
    1f36:	90 70       	andi	r25, 0x00	; 0
    1f38:	08 95       	ret

00001f3a <rf_rx_check_fifop>:
    1f3a:	8c b1       	in	r24, 0x0c	; 12
    1f3c:	99 27       	eor	r25, r25
    1f3e:	87 fd       	sbrc	r24, 7
    1f40:	90 95       	com	r25
    1f42:	88 27       	eor	r24, r24
    1f44:	99 0f       	add	r25, r25
    1f46:	88 1f       	adc	r24, r24
    1f48:	99 27       	eor	r25, r25
    1f4a:	08 95       	ret

00001f4c <rf_rx_check_sfd>:
    1f4c:	89 b1       	in	r24, 0x09	; 9
    1f4e:	99 27       	eor	r25, r25
    1f50:	e6 e0       	ldi	r30, 0x06	; 6
    1f52:	96 95       	lsr	r25
    1f54:	87 95       	ror	r24
    1f56:	ea 95       	dec	r30
    1f58:	e1 f7       	brne	.-8      	; 0x1f52 <rf_rx_check_sfd+0x6>
    1f5a:	81 70       	andi	r24, 0x01	; 1
    1f5c:	90 70       	andi	r25, 0x00	; 0
    1f5e:	08 95       	ret

00001f60 <rf_rx_packet>:
    1f60:	80 91 03 07 	lds	r24, 0x0703
    1f64:	88 23       	and	r24, r24
    1f66:	19 f4       	brne	.+6      	; 0x1f6e <rf_rx_packet+0xe>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	08 95       	ret
    1f6e:	80 91 03 07 	lds	r24, 0x0703
    1f72:	10 92 03 07 	sts	0x0703, r1
    1f76:	99 27       	eor	r25, r25
    1f78:	87 fd       	sbrc	r24, 7
    1f7a:	90 95       	com	r25
    1f7c:	08 95       	ret

00001f7e <rf_flush_rx_fifo>:
    1f7e:	40 98       	cbi	0x08, 0	; 8
    1f80:	88 e0       	ldi	r24, 0x08	; 8
    1f82:	8e bd       	out	0x2e, r24	; 46
    1f84:	0d b4       	in	r0, 0x2d	; 45
    1f86:	07 fe       	sbrs	r0, 7
    1f88:	fd cf       	rjmp	.-6      	; 0x1f84 <rf_flush_rx_fifo+0x6>
    1f8a:	40 9a       	sbi	0x08, 0	; 8
    1f8c:	40 98       	cbi	0x08, 0	; 8
    1f8e:	88 e0       	ldi	r24, 0x08	; 8
    1f90:	8e bd       	out	0x2e, r24	; 46
    1f92:	0d b4       	in	r0, 0x2d	; 45
    1f94:	07 fe       	sbrs	r0, 7
    1f96:	fd cf       	rjmp	.-6      	; 0x1f92 <rf_flush_rx_fifo+0x14>
    1f98:	40 9a       	sbi	0x08, 0	; 8
    1f9a:	08 95       	ret

00001f9c <rf_carrier_off>:
    1f9c:	80 91 ed 06 	lds	r24, 0x06ED
    1fa0:	90 91 ee 06 	lds	r25, 0x06EE
    1fa4:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
    1fa8:	40 98       	cbi	0x08, 0	; 8
    1faa:	86 e0       	ldi	r24, 0x06	; 6
    1fac:	8e bd       	out	0x2e, r24	; 46
    1fae:	0d b4       	in	r0, 0x2d	; 45
    1fb0:	07 fe       	sbrs	r0, 7
    1fb2:	fd cf       	rjmp	.-6      	; 0x1fae <rf_carrier_off+0x12>
    1fb4:	40 9a       	sbi	0x08, 0	; 8
    1fb6:	80 91 ed 06 	lds	r24, 0x06ED
    1fba:	90 91 ee 06 	lds	r25, 0x06EE
    1fbe:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    1fc2:	08 95       	ret

00001fc4 <rf_carrier_on>:
    1fc4:	80 91 ed 06 	lds	r24, 0x06ED
    1fc8:	90 91 ee 06 	lds	r25, 0x06EE
    1fcc:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
    1fd0:	40 98       	cbi	0x08, 0	; 8
    1fd2:	84 e0       	ldi	r24, 0x04	; 4
    1fd4:	8e bd       	out	0x2e, r24	; 46
    1fd6:	0d b4       	in	r0, 0x2d	; 45
    1fd8:	07 fe       	sbrs	r0, 7
    1fda:	fd cf       	rjmp	.-6      	; 0x1fd6 <rf_carrier_on+0x12>
    1fdc:	40 9a       	sbi	0x08, 0	; 8
    1fde:	80 91 ed 06 	lds	r24, 0x06ED
    1fe2:	90 91 ee 06 	lds	r25, 0x06EE
    1fe6:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    1fea:	08 95       	ret

00001fec <rf_data_mode>:
    1fec:	80 91 ed 06 	lds	r24, 0x06ED
    1ff0:	90 91 ee 06 	lds	r25, 0x06EE
    1ff4:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
    1ff8:	40 98       	cbi	0x08, 0	; 8
    1ffa:	86 e0       	ldi	r24, 0x06	; 6
    1ffc:	8e bd       	out	0x2e, r24	; 46
    1ffe:	0d b4       	in	r0, 0x2d	; 45
    2000:	07 fe       	sbrs	r0, 7
    2002:	fd cf       	rjmp	.-6      	; 0x1ffe <rf_data_mode+0x12>
    2004:	40 9a       	sbi	0x08, 0	; 8
    2006:	40 98       	cbi	0x08, 0	; 8
    2008:	82 e1       	ldi	r24, 0x12	; 18
    200a:	8e bd       	out	0x2e, r24	; 46
    200c:	0d b4       	in	r0, 0x2d	; 45
    200e:	07 fe       	sbrs	r0, 7
    2010:	fd cf       	rjmp	.-6      	; 0x200c <rf_data_mode+0x20>
    2012:	85 e0       	ldi	r24, 0x05	; 5
    2014:	8e bd       	out	0x2e, r24	; 46
    2016:	0d b4       	in	r0, 0x2d	; 45
    2018:	07 fe       	sbrs	r0, 7
    201a:	fd cf       	rjmp	.-6      	; 0x2016 <rf_data_mode+0x2a>
    201c:	1e bc       	out	0x2e, r1	; 46
    201e:	0d b4       	in	r0, 0x2d	; 45
    2020:	07 fe       	sbrs	r0, 7
    2022:	fd cf       	rjmp	.-6      	; 0x201e <rf_data_mode+0x32>
    2024:	40 9a       	sbi	0x08, 0	; 8
    2026:	40 98       	cbi	0x08, 0	; 8
    2028:	8e e2       	ldi	r24, 0x2E	; 46
    202a:	8e bd       	out	0x2e, r24	; 46
    202c:	0d b4       	in	r0, 0x2d	; 45
    202e:	07 fe       	sbrs	r0, 7
    2030:	fd cf       	rjmp	.-6      	; 0x202c <rf_data_mode+0x40>
    2032:	1e bc       	out	0x2e, r1	; 46
    2034:	0d b4       	in	r0, 0x2d	; 45
    2036:	07 fe       	sbrs	r0, 7
    2038:	fd cf       	rjmp	.-6      	; 0x2034 <rf_data_mode+0x48>
    203a:	1e bc       	out	0x2e, r1	; 46
    203c:	0d b4       	in	r0, 0x2d	; 45
    203e:	07 fe       	sbrs	r0, 7
    2040:	fd cf       	rjmp	.-6      	; 0x203c <rf_data_mode+0x50>
    2042:	40 9a       	sbi	0x08, 0	; 8
    2044:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <rf_flush_rx_fifo>
    2048:	80 91 ed 06 	lds	r24, 0x06ED
    204c:	90 91 ee 06 	lds	r25, 0x06EE
    2050:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    2054:	08 95       	ret

00002056 <rf_test_mode>:
    2056:	80 91 ed 06 	lds	r24, 0x06ED
    205a:	90 91 ee 06 	lds	r25, 0x06EE
    205e:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
    2062:	40 98       	cbi	0x08, 0	; 8
    2064:	86 e0       	ldi	r24, 0x06	; 6
    2066:	8e bd       	out	0x2e, r24	; 46
    2068:	0d b4       	in	r0, 0x2d	; 45
    206a:	07 fe       	sbrs	r0, 7
    206c:	fd cf       	rjmp	.-6      	; 0x2068 <rf_test_mode+0x12>
    206e:	40 9a       	sbi	0x08, 0	; 8
    2070:	40 98       	cbi	0x08, 0	; 8
    2072:	82 e1       	ldi	r24, 0x12	; 18
    2074:	8e bd       	out	0x2e, r24	; 46
    2076:	0d b4       	in	r0, 0x2d	; 45
    2078:	07 fe       	sbrs	r0, 7
    207a:	fd cf       	rjmp	.-6      	; 0x2076 <rf_test_mode+0x20>
    207c:	85 e0       	ldi	r24, 0x05	; 5
    207e:	8e bd       	out	0x2e, r24	; 46
    2080:	0d b4       	in	r0, 0x2d	; 45
    2082:	07 fe       	sbrs	r0, 7
    2084:	fd cf       	rjmp	.-6      	; 0x2080 <rf_test_mode+0x2a>
    2086:	88 e0       	ldi	r24, 0x08	; 8
    2088:	8e bd       	out	0x2e, r24	; 46
    208a:	0d b4       	in	r0, 0x2d	; 45
    208c:	07 fe       	sbrs	r0, 7
    208e:	fd cf       	rjmp	.-6      	; 0x208a <rf_test_mode+0x34>
    2090:	40 9a       	sbi	0x08, 0	; 8
    2092:	40 98       	cbi	0x08, 0	; 8
    2094:	8e e2       	ldi	r24, 0x2E	; 46
    2096:	8e bd       	out	0x2e, r24	; 46
    2098:	0d b4       	in	r0, 0x2d	; 45
    209a:	07 fe       	sbrs	r0, 7
    209c:	fd cf       	rjmp	.-6      	; 0x2098 <rf_test_mode+0x42>
    209e:	88 e1       	ldi	r24, 0x18	; 24
    20a0:	8e bd       	out	0x2e, r24	; 46
    20a2:	0d b4       	in	r0, 0x2d	; 45
    20a4:	07 fe       	sbrs	r0, 7
    20a6:	fd cf       	rjmp	.-6      	; 0x20a2 <rf_test_mode+0x4c>
    20a8:	1e bc       	out	0x2e, r1	; 46
    20aa:	0d b4       	in	r0, 0x2d	; 45
    20ac:	07 fe       	sbrs	r0, 7
    20ae:	fd cf       	rjmp	.-6      	; 0x20aa <rf_test_mode+0x54>
    20b0:	40 9a       	sbi	0x08, 0	; 8
    20b2:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <rf_flush_rx_fifo>
    20b6:	80 91 ed 06 	lds	r24, 0x06ED
    20ba:	90 91 ee 06 	lds	r25, 0x06EE
    20be:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    20c2:	08 95       	ret

000020c4 <rf_set_cca_thresh>:
    20c4:	0f 93       	push	r16
    20c6:	1f 93       	push	r17
    20c8:	08 2f       	mov	r16, r24
    20ca:	80 91 ed 06 	lds	r24, 0x06ED
    20ce:	90 91 ee 06 	lds	r25, 0x06EE
    20d2:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
    20d6:	11 27       	eor	r17, r17
    20d8:	07 fd       	sbrc	r16, 7
    20da:	10 95       	com	r17
    20dc:	30 2f       	mov	r19, r16
    20de:	22 27       	eor	r18, r18
    20e0:	20 68       	ori	r18, 0x80	; 128
    20e2:	40 98       	cbi	0x08, 0	; 8
    20e4:	83 e1       	ldi	r24, 0x13	; 19
    20e6:	8e bd       	out	0x2e, r24	; 46
    20e8:	0d b4       	in	r0, 0x2d	; 45
    20ea:	07 fe       	sbrs	r0, 7
    20ec:	fd cf       	rjmp	.-6      	; 0x20e8 <rf_set_cca_thresh+0x24>
    20ee:	83 2f       	mov	r24, r19
    20f0:	99 27       	eor	r25, r25
    20f2:	8e bd       	out	0x2e, r24	; 46
    20f4:	0d b4       	in	r0, 0x2d	; 45
    20f6:	07 fe       	sbrs	r0, 7
    20f8:	fd cf       	rjmp	.-6      	; 0x20f4 <rf_set_cca_thresh+0x30>
    20fa:	2e bd       	out	0x2e, r18	; 46
    20fc:	0d b4       	in	r0, 0x2d	; 45
    20fe:	07 fe       	sbrs	r0, 7
    2100:	fd cf       	rjmp	.-6      	; 0x20fc <rf_set_cca_thresh+0x38>
    2102:	40 9a       	sbi	0x08, 0	; 8
    2104:	80 91 ed 06 	lds	r24, 0x06ED
    2108:	90 91 ee 06 	lds	r25, 0x06EE
    210c:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	08 95       	ret

00002116 <rf_polling_rx_packet>:
    2116:	0f 93       	push	r16
    2118:	1f 93       	push	r17
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	24 97       	sbiw	r28, 0x04	; 4
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	18 2f       	mov	r17, r24
    2130:	06 2f       	mov	r16, r22
    2132:	80 91 ed 06 	lds	r24, 0x06ED
    2136:	90 91 ee 06 	lds	r25, 0x06EE
    213a:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
    213e:	67 9b       	sbis	0x0c, 7	; 12
    2140:	4c c2       	rjmp	.+1176   	; 0x25da <__stack+0x3db>
    2142:	10 92 fe 06 	sts	0x06FE, r1
    2146:	67 9b       	sbis	0x0c, 7	; 12
    2148:	25 c0       	rjmp	.+74     	; 0x2194 <rf_polling_rx_packet+0x7e>
    214a:	31 99       	sbic	0x06, 1	; 6
    214c:	23 c0       	rjmp	.+70     	; 0x2194 <rf_polling_rx_packet+0x7e>
    214e:	40 98       	cbi	0x08, 0	; 8
    2150:	8f e7       	ldi	r24, 0x7F	; 127
    2152:	8e bd       	out	0x2e, r24	; 46
    2154:	0d b4       	in	r0, 0x2d	; 45
    2156:	07 fe       	sbrs	r0, 7
    2158:	fd cf       	rjmp	.-6      	; 0x2154 <rf_polling_rx_packet+0x3e>
    215a:	1e bc       	out	0x2e, r1	; 46
    215c:	0d b4       	in	r0, 0x2d	; 45
    215e:	07 fe       	sbrs	r0, 7
    2160:	fd cf       	rjmp	.-6      	; 0x215c <rf_polling_rx_packet+0x46>
    2162:	8e b5       	in	r24, 0x2e	; 46
    2164:	40 9a       	sbi	0x08, 0	; 8
    2166:	40 98       	cbi	0x08, 0	; 8
    2168:	88 e0       	ldi	r24, 0x08	; 8
    216a:	8e bd       	out	0x2e, r24	; 46
    216c:	0d b4       	in	r0, 0x2d	; 45
    216e:	07 fe       	sbrs	r0, 7
    2170:	fd cf       	rjmp	.-6      	; 0x216c <rf_polling_rx_packet+0x56>
    2172:	40 9a       	sbi	0x08, 0	; 8
    2174:	40 98       	cbi	0x08, 0	; 8
    2176:	88 e0       	ldi	r24, 0x08	; 8
    2178:	8e bd       	out	0x2e, r24	; 46
    217a:	0d b4       	in	r0, 0x2d	; 45
    217c:	07 fe       	sbrs	r0, 7
    217e:	fd cf       	rjmp	.-6      	; 0x217a <rf_polling_rx_packet+0x64>
    2180:	40 9a       	sbi	0x08, 0	; 8
    2182:	80 91 ed 06 	lds	r24, 0x06ED
    2186:	90 91 ee 06 	lds	r25, 0x06EE
    218a:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    218e:	8f ef       	ldi	r24, 0xFF	; 255
    2190:	9f ef       	ldi	r25, 0xFF	; 255
    2192:	2b c2       	rjmp	.+1110   	; 0x25ea <__stack+0x3eb>
    2194:	40 98       	cbi	0x08, 0	; 8
    2196:	8f e7       	ldi	r24, 0x7F	; 127
    2198:	8e bd       	out	0x2e, r24	; 46
    219a:	0d b4       	in	r0, 0x2d	; 45
    219c:	07 fe       	sbrs	r0, 7
    219e:	fd cf       	rjmp	.-6      	; 0x219a <rf_polling_rx_packet+0x84>
    21a0:	1e bc       	out	0x2e, r1	; 46
    21a2:	0d b4       	in	r0, 0x2d	; 45
    21a4:	07 fe       	sbrs	r0, 7
    21a6:	fd cf       	rjmp	.-6      	; 0x21a2 <rf_polling_rx_packet+0x8c>
    21a8:	4e b5       	in	r20, 0x2e	; 46
    21aa:	40 9a       	sbi	0x08, 0	; 8
    21ac:	4f 77       	andi	r20, 0x7F	; 127
    21ae:	19 f5       	brne	.+70     	; 0x21f6 <rf_polling_rx_packet+0xe0>
    21b0:	40 98       	cbi	0x08, 0	; 8
    21b2:	8f e7       	ldi	r24, 0x7F	; 127
    21b4:	8e bd       	out	0x2e, r24	; 46
    21b6:	0d b4       	in	r0, 0x2d	; 45
    21b8:	07 fe       	sbrs	r0, 7
    21ba:	fd cf       	rjmp	.-6      	; 0x21b6 <rf_polling_rx_packet+0xa0>
    21bc:	1e bc       	out	0x2e, r1	; 46
    21be:	0d b4       	in	r0, 0x2d	; 45
    21c0:	07 fe       	sbrs	r0, 7
    21c2:	fd cf       	rjmp	.-6      	; 0x21be <rf_polling_rx_packet+0xa8>
    21c4:	8e b5       	in	r24, 0x2e	; 46
    21c6:	40 9a       	sbi	0x08, 0	; 8
    21c8:	40 98       	cbi	0x08, 0	; 8
    21ca:	88 e0       	ldi	r24, 0x08	; 8
    21cc:	8e bd       	out	0x2e, r24	; 46
    21ce:	0d b4       	in	r0, 0x2d	; 45
    21d0:	07 fe       	sbrs	r0, 7
    21d2:	fd cf       	rjmp	.-6      	; 0x21ce <rf_polling_rx_packet+0xb8>
    21d4:	40 9a       	sbi	0x08, 0	; 8
    21d6:	40 98       	cbi	0x08, 0	; 8
    21d8:	88 e0       	ldi	r24, 0x08	; 8
    21da:	8e bd       	out	0x2e, r24	; 46
    21dc:	0d b4       	in	r0, 0x2d	; 45
    21de:	07 fe       	sbrs	r0, 7
    21e0:	fd cf       	rjmp	.-6      	; 0x21dc <rf_polling_rx_packet+0xc6>
    21e2:	40 9a       	sbi	0x08, 0	; 8
    21e4:	80 91 ed 06 	lds	r24, 0x06ED
    21e8:	90 91 ee 06 	lds	r25, 0x06EE
    21ec:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    21f0:	8e ef       	ldi	r24, 0xFE	; 254
    21f2:	9f ef       	ldi	r25, 0xFF	; 255
    21f4:	fa c1       	rjmp	.+1012   	; 0x25ea <__stack+0x3eb>
    21f6:	45 30       	cpi	r20, 0x05	; 5
    21f8:	8c f0       	brlt	.+34     	; 0x221c <__stack+0x1d>
    21fa:	e0 91 f2 06 	lds	r30, 0x06F2
    21fe:	f0 91 f3 06 	lds	r31, 0x06F3
    2202:	24 2f       	mov	r18, r20
    2204:	33 27       	eor	r19, r19
    2206:	27 fd       	sbrc	r18, 7
    2208:	30 95       	com	r19
    220a:	2b 50       	subi	r18, 0x0B	; 11
    220c:	30 40       	sbci	r19, 0x00	; 0
    220e:	84 81       	ldd	r24, Z+4	; 0x04
    2210:	99 27       	eor	r25, r25
    2212:	87 fd       	sbrc	r24, 7
    2214:	90 95       	com	r25
    2216:	82 17       	cp	r24, r18
    2218:	93 07       	cpc	r25, r19
    221a:	f4 f5       	brge	.+124    	; 0x2298 <__stack+0x99>
    221c:	40 98       	cbi	0x08, 0	; 8
    221e:	8f e7       	ldi	r24, 0x7F	; 127
    2220:	8e bd       	out	0x2e, r24	; 46
    2222:	0d b4       	in	r0, 0x2d	; 45
    2224:	07 fe       	sbrs	r0, 7
    2226:	fd cf       	rjmp	.-6      	; 0x2222 <__stack+0x23>
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	70 e0       	ldi	r23, 0x00	; 0
    222c:	24 2f       	mov	r18, r20
    222e:	33 27       	eor	r19, r19
    2230:	27 fd       	sbrc	r18, 7
    2232:	30 95       	com	r19
    2234:	06 c0       	rjmp	.+12     	; 0x2242 <__stack+0x43>
    2236:	1e bc       	out	0x2e, r1	; 46
    2238:	0d b4       	in	r0, 0x2d	; 45
    223a:	07 fe       	sbrs	r0, 7
    223c:	fd cf       	rjmp	.-6      	; 0x2238 <__stack+0x39>
    223e:	6f 5f       	subi	r22, 0xFF	; 255
    2240:	7f 4f       	sbci	r23, 0xFF	; 255
    2242:	86 2f       	mov	r24, r22
    2244:	99 27       	eor	r25, r25
    2246:	82 17       	cp	r24, r18
    2248:	93 07       	cpc	r25, r19
    224a:	14 f4       	brge	.+4      	; 0x2250 <__stack+0x51>
    224c:	31 99       	sbic	0x06, 1	; 6
    224e:	f3 cf       	rjmp	.-26     	; 0x2236 <__stack+0x37>
    2250:	40 9a       	sbi	0x08, 0	; 8
    2252:	40 98       	cbi	0x08, 0	; 8
    2254:	8f e7       	ldi	r24, 0x7F	; 127
    2256:	8e bd       	out	0x2e, r24	; 46
    2258:	0d b4       	in	r0, 0x2d	; 45
    225a:	07 fe       	sbrs	r0, 7
    225c:	fd cf       	rjmp	.-6      	; 0x2258 <__stack+0x59>
    225e:	1e bc       	out	0x2e, r1	; 46
    2260:	0d b4       	in	r0, 0x2d	; 45
    2262:	07 fe       	sbrs	r0, 7
    2264:	fd cf       	rjmp	.-6      	; 0x2260 <__stack+0x61>
    2266:	8e b5       	in	r24, 0x2e	; 46
    2268:	40 9a       	sbi	0x08, 0	; 8
    226a:	40 98       	cbi	0x08, 0	; 8
    226c:	88 e0       	ldi	r24, 0x08	; 8
    226e:	8e bd       	out	0x2e, r24	; 46
    2270:	0d b4       	in	r0, 0x2d	; 45
    2272:	07 fe       	sbrs	r0, 7
    2274:	fd cf       	rjmp	.-6      	; 0x2270 <__stack+0x71>
    2276:	40 9a       	sbi	0x08, 0	; 8
    2278:	40 98       	cbi	0x08, 0	; 8
    227a:	88 e0       	ldi	r24, 0x08	; 8
    227c:	8e bd       	out	0x2e, r24	; 46
    227e:	0d b4       	in	r0, 0x2d	; 45
    2280:	07 fe       	sbrs	r0, 7
    2282:	fd cf       	rjmp	.-6      	; 0x227e <__stack+0x7f>
    2284:	40 9a       	sbi	0x08, 0	; 8
    2286:	80 91 ed 06 	lds	r24, 0x06ED
    228a:	90 91 ee 06 	lds	r25, 0x06EE
    228e:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    2292:	8d ef       	ldi	r24, 0xFD	; 253
    2294:	9f ef       	ldi	r25, 0xFF	; 255
    2296:	a9 c1       	rjmp	.+850    	; 0x25ea <__stack+0x3eb>
    2298:	e0 91 f2 06 	lds	r30, 0x06F2
    229c:	f0 91 f3 06 	lds	r31, 0x06F3
    22a0:	4c 50       	subi	r20, 0x0C	; 12
    22a2:	43 83       	std	Z+3, r20	; 0x03
    22a4:	11 23       	and	r17, r17
    22a6:	b1 f0       	breq	.+44     	; 0x22d4 <__stack+0xd5>
    22a8:	e0 91 f2 06 	lds	r30, 0x06F2
    22ac:	f0 91 f3 06 	lds	r31, 0x06F3
    22b0:	83 81       	ldd	r24, Z+3	; 0x03
    22b2:	99 27       	eor	r25, r25
    22b4:	87 fd       	sbrc	r24, 7
    22b6:	90 95       	com	r25
    22b8:	20 2f       	mov	r18, r16
    22ba:	33 27       	eor	r19, r19
    22bc:	82 17       	cp	r24, r18
    22be:	93 07       	cpc	r25, r19
    22c0:	49 f0       	breq	.+18     	; 0x22d4 <__stack+0xd5>
    22c2:	80 91 ed 06 	lds	r24, 0x06ED
    22c6:	90 91 ee 06 	lds	r25, 0x06EE
    22ca:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    22ce:	8a ef       	ldi	r24, 0xFA	; 250
    22d0:	9f ef       	ldi	r25, 0xFF	; 255
    22d2:	8b c1       	rjmp	.+790    	; 0x25ea <__stack+0x3eb>
    22d4:	40 98       	cbi	0x08, 0	; 8
    22d6:	8f e7       	ldi	r24, 0x7F	; 127
    22d8:	8e bd       	out	0x2e, r24	; 46
    22da:	0d b4       	in	r0, 0x2d	; 45
    22dc:	07 fe       	sbrs	r0, 7
    22de:	fd cf       	rjmp	.-6      	; 0x22da <__stack+0xdb>
    22e0:	fe 01       	movw	r30, r28
    22e2:	31 96       	adiw	r30, 0x01	; 1
    22e4:	9e 01       	movw	r18, r28
    22e6:	2d 5f       	subi	r18, 0xFD	; 253
    22e8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ea:	1e bc       	out	0x2e, r1	; 46
    22ec:	0d b4       	in	r0, 0x2d	; 45
    22ee:	07 fe       	sbrs	r0, 7
    22f0:	fd cf       	rjmp	.-6      	; 0x22ec <__stack+0xed>
    22f2:	8e b5       	in	r24, 0x2e	; 46
    22f4:	81 93       	st	Z+, r24
    22f6:	e2 17       	cp	r30, r18
    22f8:	f3 07       	cpc	r31, r19
    22fa:	b9 f7       	brne	.-18     	; 0x22ea <__stack+0xeb>
    22fc:	40 9a       	sbi	0x08, 0	; 8
    22fe:	e0 91 f2 06 	lds	r30, 0x06F2
    2302:	f0 91 f3 06 	lds	r31, 0x06F3
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	b5 e0       	ldi	r27, 0x05	; 5
    230c:	96 95       	lsr	r25
    230e:	87 95       	ror	r24
    2310:	ba 95       	dec	r27
    2312:	e1 f7       	brne	.-8      	; 0x230c <__stack+0x10d>
    2314:	81 70       	andi	r24, 0x01	; 1
    2316:	87 83       	std	Z+7, r24	; 0x07
    2318:	40 98       	cbi	0x08, 0	; 8
    231a:	8f e7       	ldi	r24, 0x7F	; 127
    231c:	8e bd       	out	0x2e, r24	; 46
    231e:	0d b4       	in	r0, 0x2d	; 45
    2320:	07 fe       	sbrs	r0, 7
    2322:	fd cf       	rjmp	.-6      	; 0x231e <__stack+0x11f>
    2324:	1e bc       	out	0x2e, r1	; 46
    2326:	0d b4       	in	r0, 0x2d	; 45
    2328:	07 fe       	sbrs	r0, 7
    232a:	fd cf       	rjmp	.-6      	; 0x2326 <__stack+0x127>
    232c:	e0 91 f2 06 	lds	r30, 0x06F2
    2330:	f0 91 f3 06 	lds	r31, 0x06F3
    2334:	8e b5       	in	r24, 0x2e	; 46
    2336:	80 83       	st	Z, r24
    2338:	40 9a       	sbi	0x08, 0	; 8
    233a:	40 98       	cbi	0x08, 0	; 8
    233c:	8f e7       	ldi	r24, 0x7F	; 127
    233e:	8e bd       	out	0x2e, r24	; 46
    2340:	0d b4       	in	r0, 0x2d	; 45
    2342:	07 fe       	sbrs	r0, 7
    2344:	fd cf       	rjmp	.-6      	; 0x2340 <__stack+0x141>
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	07 c0       	rjmp	.+14     	; 0x2358 <__stack+0x159>
    234a:	1e bc       	out	0x2e, r1	; 46
    234c:	0d b4       	in	r0, 0x2d	; 45
    234e:	07 fe       	sbrs	r0, 7
    2350:	fd cf       	rjmp	.-6      	; 0x234c <__stack+0x14d>
    2352:	8f 5f       	subi	r24, 0xFF	; 255
    2354:	84 30       	cpi	r24, 0x04	; 4
    2356:	11 f0       	breq	.+4      	; 0x235c <__stack+0x15d>
    2358:	31 99       	sbic	0x06, 1	; 6
    235a:	f7 cf       	rjmp	.-18     	; 0x234a <__stack+0x14b>
    235c:	40 9a       	sbi	0x08, 0	; 8
    235e:	40 98       	cbi	0x08, 0	; 8
    2360:	8f e7       	ldi	r24, 0x7F	; 127
    2362:	8e bd       	out	0x2e, r24	; 46
    2364:	0d b4       	in	r0, 0x2d	; 45
    2366:	07 fe       	sbrs	r0, 7
    2368:	fd cf       	rjmp	.-6      	; 0x2364 <__stack+0x165>
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	1e bc       	out	0x2e, r1	; 46
    2370:	0d b4       	in	r0, 0x2d	; 45
    2372:	07 fe       	sbrs	r0, 7
    2374:	fd cf       	rjmp	.-6      	; 0x2370 <__stack+0x171>
    2376:	e0 91 f2 06 	lds	r30, 0x06F2
    237a:	f0 91 f3 06 	lds	r31, 0x06F3
    237e:	e2 0f       	add	r30, r18
    2380:	f3 1f       	adc	r31, r19
    2382:	8e b5       	in	r24, 0x2e	; 46
    2384:	81 83       	std	Z+1, r24	; 0x01
    2386:	2f 5f       	subi	r18, 0xFF	; 255
    2388:	3f 4f       	sbci	r19, 0xFF	; 255
    238a:	22 30       	cpi	r18, 0x02	; 2
    238c:	31 05       	cpc	r19, r1
    238e:	79 f7       	brne	.-34     	; 0x236e <__stack+0x16f>
    2390:	40 9a       	sbi	0x08, 0	; 8
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	83 ff       	sbrs	r24, 3
    2398:	56 c0       	rjmp	.+172    	; 0x2446 <__stack+0x247>
    239a:	40 98       	cbi	0x08, 0	; 8
    239c:	8f e7       	ldi	r24, 0x7F	; 127
    239e:	8e bd       	out	0x2e, r24	; 46
    23a0:	0d b4       	in	r0, 0x2d	; 45
    23a2:	07 fe       	sbrs	r0, 7
    23a4:	fd cf       	rjmp	.-6      	; 0x23a0 <__stack+0x1a1>
    23a6:	e9 ee       	ldi	r30, 0xE9	; 233
    23a8:	f6 e0       	ldi	r31, 0x06	; 6
    23aa:	1e bc       	out	0x2e, r1	; 46
    23ac:	0d b4       	in	r0, 0x2d	; 45
    23ae:	07 fe       	sbrs	r0, 7
    23b0:	fd cf       	rjmp	.-6      	; 0x23ac <__stack+0x1ad>
    23b2:	8e b5       	in	r24, 0x2e	; 46
    23b4:	81 93       	st	Z+, r24
    23b6:	86 e0       	ldi	r24, 0x06	; 6
    23b8:	ed 3e       	cpi	r30, 0xED	; 237
    23ba:	f8 07       	cpc	r31, r24
    23bc:	b1 f7       	brne	.-20     	; 0x23aa <__stack+0x1ab>
    23be:	40 9a       	sbi	0x08, 0	; 8
    23c0:	40 98       	cbi	0x08, 0	; 8
    23c2:	89 e9       	ldi	r24, 0x99	; 153
    23c4:	8e bd       	out	0x2e, r24	; 46
    23c6:	0d b4       	in	r0, 0x2d	; 45
    23c8:	07 fe       	sbrs	r0, 7
    23ca:	fd cf       	rjmp	.-6      	; 0x23c6 <__stack+0x1c7>
    23cc:	80 e8       	ldi	r24, 0x80	; 128
    23ce:	8e bd       	out	0x2e, r24	; 46
    23d0:	0d b4       	in	r0, 0x2d	; 45
    23d2:	07 fe       	sbrs	r0, 7
    23d4:	fd cf       	rjmp	.-6      	; 0x23d0 <__stack+0x1d1>
    23d6:	92 e0       	ldi	r25, 0x02	; 2
    23d8:	91 50       	subi	r25, 0x01	; 1
    23da:	e9 2f       	mov	r30, r25
    23dc:	ff 27       	eor	r31, r31
    23de:	e7 51       	subi	r30, 0x17	; 23
    23e0:	f9 4f       	sbci	r31, 0xF9	; 249
    23e2:	80 81       	ld	r24, Z
    23e4:	8e bd       	out	0x2e, r24	; 46
    23e6:	0d b4       	in	r0, 0x2d	; 45
    23e8:	07 fe       	sbrs	r0, 7
    23ea:	fd cf       	rjmp	.-6      	; 0x23e6 <__stack+0x1e7>
    23ec:	99 23       	and	r25, r25
    23ee:	a1 f7       	brne	.-24     	; 0x23d8 <__stack+0x1d9>
    23f0:	40 9a       	sbi	0x08, 0	; 8
    23f2:	40 98       	cbi	0x08, 0	; 8
    23f4:	8b e9       	ldi	r24, 0x9B	; 155
    23f6:	8e bd       	out	0x2e, r24	; 46
    23f8:	0d b4       	in	r0, 0x2d	; 45
    23fa:	07 fe       	sbrs	r0, 7
    23fc:	fd cf       	rjmp	.-6      	; 0x23f8 <__stack+0x1f9>
    23fe:	80 e8       	ldi	r24, 0x80	; 128
    2400:	8e bd       	out	0x2e, r24	; 46
    2402:	0d b4       	in	r0, 0x2d	; 45
    2404:	07 fe       	sbrs	r0, 7
    2406:	fd cf       	rjmp	.-6      	; 0x2402 <__stack+0x203>
    2408:	92 e0       	ldi	r25, 0x02	; 2
    240a:	91 50       	subi	r25, 0x01	; 1
    240c:	e9 2f       	mov	r30, r25
    240e:	ff 27       	eor	r31, r31
    2410:	e5 51       	subi	r30, 0x15	; 21
    2412:	f9 4f       	sbci	r31, 0xF9	; 249
    2414:	80 81       	ld	r24, Z
    2416:	8e bd       	out	0x2e, r24	; 46
    2418:	0d b4       	in	r0, 0x2d	; 45
    241a:	07 fe       	sbrs	r0, 7
    241c:	fd cf       	rjmp	.-6      	; 0x2418 <__stack+0x219>
    241e:	99 23       	and	r25, r25
    2420:	a1 f7       	brne	.-24     	; 0x240a <__stack+0x20b>
    2422:	40 9a       	sbi	0x08, 0	; 8
    2424:	40 98       	cbi	0x08, 0	; 8
    2426:	8c e0       	ldi	r24, 0x0C	; 12
    2428:	8e bd       	out	0x2e, r24	; 46
    242a:	0d b4       	in	r0, 0x2d	; 45
    242c:	07 fe       	sbrs	r0, 7
    242e:	fd cf       	rjmp	.-6      	; 0x242a <__stack+0x22b>
    2430:	40 9a       	sbi	0x08, 0	; 8
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	80 93 fe 06 	sts	0x06FE, r24
    2438:	e0 91 f2 06 	lds	r30, 0x06F2
    243c:	f0 91 f3 06 	lds	r31, 0x06F3
    2440:	83 81       	ldd	r24, Z+3	; 0x03
    2442:	84 50       	subi	r24, 0x04	; 4
    2444:	83 83       	std	Z+3, r24	; 0x03
    2446:	40 98       	cbi	0x08, 0	; 8
    2448:	8f e7       	ldi	r24, 0x7F	; 127
    244a:	8e bd       	out	0x2e, r24	; 46
    244c:	0d b4       	in	r0, 0x2d	; 45
    244e:	07 fe       	sbrs	r0, 7
    2450:	fd cf       	rjmp	.-6      	; 0x244c <__stack+0x24d>
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	11 c0       	rjmp	.+34     	; 0x247a <__stack+0x27b>
    2458:	1e bc       	out	0x2e, r1	; 46
    245a:	0d b4       	in	r0, 0x2d	; 45
    245c:	07 fe       	sbrs	r0, 7
    245e:	fd cf       	rjmp	.-6      	; 0x245a <__stack+0x25b>
    2460:	e0 91 f2 06 	lds	r30, 0x06F2
    2464:	f0 91 f3 06 	lds	r31, 0x06F3
    2468:	05 80       	ldd	r0, Z+5	; 0x05
    246a:	f6 81       	ldd	r31, Z+6	; 0x06
    246c:	e0 2d       	mov	r30, r0
    246e:	e6 0f       	add	r30, r22
    2470:	f1 1d       	adc	r31, r1
    2472:	8e b5       	in	r24, 0x2e	; 46
    2474:	80 83       	st	Z, r24
    2476:	4f 5f       	subi	r20, 0xFF	; 255
    2478:	5f 4f       	sbci	r21, 0xFF	; 255
    247a:	64 2f       	mov	r22, r20
    247c:	e0 91 f2 06 	lds	r30, 0x06F2
    2480:	f0 91 f3 06 	lds	r31, 0x06F3
    2484:	24 2f       	mov	r18, r20
    2486:	33 27       	eor	r19, r19
    2488:	83 81       	ldd	r24, Z+3	; 0x03
    248a:	99 27       	eor	r25, r25
    248c:	87 fd       	sbrc	r24, 7
    248e:	90 95       	com	r25
    2490:	28 17       	cp	r18, r24
    2492:	39 07       	cpc	r19, r25
    2494:	0c f3       	brlt	.-62     	; 0x2458 <__stack+0x259>
    2496:	40 9a       	sbi	0x08, 0	; 8
    2498:	40 98       	cbi	0x08, 0	; 8
    249a:	8f e7       	ldi	r24, 0x7F	; 127
    249c:	8e bd       	out	0x2e, r24	; 46
    249e:	0d b4       	in	r0, 0x2d	; 45
    24a0:	07 fc       	sbrc	r0, 7
    24a2:	0a c0       	rjmp	.+20     	; 0x24b8 <__stack+0x2b9>
    24a4:	fc cf       	rjmp	.-8      	; 0x249e <__stack+0x29f>
    24a6:	0d b4       	in	r0, 0x2d	; 45
    24a8:	07 fe       	sbrs	r0, 7
    24aa:	fd cf       	rjmp	.-6      	; 0x24a6 <__stack+0x2a7>
    24ac:	5e b5       	in	r21, 0x2e	; 46
    24ae:	40 9a       	sbi	0x08, 0	; 8
    24b0:	40 98       	cbi	0x08, 0	; 8
    24b2:	8f e7       	ldi	r24, 0x7F	; 127
    24b4:	8e bd       	out	0x2e, r24	; 46
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <__stack+0x2bd>
    24b8:	1e bc       	out	0x2e, r1	; 46
    24ba:	f5 cf       	rjmp	.-22     	; 0x24a6 <__stack+0x2a7>
    24bc:	0d b4       	in	r0, 0x2d	; 45
    24be:	07 fe       	sbrs	r0, 7
    24c0:	fd cf       	rjmp	.-6      	; 0x24bc <__stack+0x2bd>
    24c2:	fe 01       	movw	r30, r28
    24c4:	33 96       	adiw	r30, 0x03	; 3
    24c6:	9e 01       	movw	r18, r28
    24c8:	2b 5f       	subi	r18, 0xFB	; 251
    24ca:	3f 4f       	sbci	r19, 0xFF	; 255
    24cc:	1e bc       	out	0x2e, r1	; 46
    24ce:	0d b4       	in	r0, 0x2d	; 45
    24d0:	07 fe       	sbrs	r0, 7
    24d2:	fd cf       	rjmp	.-6      	; 0x24ce <__stack+0x2cf>
    24d4:	8e b5       	in	r24, 0x2e	; 46
    24d6:	81 93       	st	Z+, r24
    24d8:	e2 17       	cp	r30, r18
    24da:	f3 07       	cpc	r31, r19
    24dc:	b9 f7       	brne	.-18     	; 0x24cc <__stack+0x2cd>
    24de:	40 9a       	sbi	0x08, 0	; 8
    24e0:	e0 91 f2 06 	lds	r30, 0x06F2
    24e4:	f0 91 f3 06 	lds	r31, 0x06F3
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	80 87       	std	Z+8, r24	; 0x08
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	0a c0       	rjmp	.+20     	; 0x2508 <__stack+0x309>
    24f4:	e0 91 f2 06 	lds	r30, 0x06F2
    24f8:	f0 91 f3 06 	lds	r31, 0x06F3
    24fc:	85 81       	ldd	r24, Z+5	; 0x05
    24fe:	96 81       	ldd	r25, Z+6	; 0x06
    2500:	a8 0f       	add	r26, r24
    2502:	b9 1f       	adc	r27, r25
    2504:	8c 91       	ld	r24, X
    2506:	48 0f       	add	r20, r24
    2508:	82 2f       	mov	r24, r18
    250a:	e0 91 f2 06 	lds	r30, 0x06F2
    250e:	f0 91 f3 06 	lds	r31, 0x06F3
    2512:	2f 5f       	subi	r18, 0xFF	; 255
    2514:	3f 4f       	sbci	r19, 0xFF	; 255
    2516:	a8 2f       	mov	r26, r24
    2518:	bb 27       	eor	r27, r27
    251a:	83 81       	ldd	r24, Z+3	; 0x03
    251c:	99 27       	eor	r25, r25
    251e:	87 fd       	sbrc	r24, 7
    2520:	90 95       	com	r25
    2522:	a8 17       	cp	r26, r24
    2524:	b9 07       	cpc	r27, r25
    2526:	34 f3       	brlt	.-52     	; 0x24f4 <__stack+0x2f5>
    2528:	45 17       	cp	r20, r21
    252a:	19 f1       	breq	.+70     	; 0x2572 <__stack+0x373>
    252c:	40 98       	cbi	0x08, 0	; 8
    252e:	8f e7       	ldi	r24, 0x7F	; 127
    2530:	8e bd       	out	0x2e, r24	; 46
    2532:	0d b4       	in	r0, 0x2d	; 45
    2534:	07 fe       	sbrs	r0, 7
    2536:	fd cf       	rjmp	.-6      	; 0x2532 <__stack+0x333>
    2538:	1e bc       	out	0x2e, r1	; 46
    253a:	0d b4       	in	r0, 0x2d	; 45
    253c:	07 fe       	sbrs	r0, 7
    253e:	fd cf       	rjmp	.-6      	; 0x253a <__stack+0x33b>
    2540:	8e b5       	in	r24, 0x2e	; 46
    2542:	40 9a       	sbi	0x08, 0	; 8
    2544:	40 98       	cbi	0x08, 0	; 8
    2546:	88 e0       	ldi	r24, 0x08	; 8
    2548:	8e bd       	out	0x2e, r24	; 46
    254a:	0d b4       	in	r0, 0x2d	; 45
    254c:	07 fe       	sbrs	r0, 7
    254e:	fd cf       	rjmp	.-6      	; 0x254a <__stack+0x34b>
    2550:	40 9a       	sbi	0x08, 0	; 8
    2552:	40 98       	cbi	0x08, 0	; 8
    2554:	88 e0       	ldi	r24, 0x08	; 8
    2556:	8e bd       	out	0x2e, r24	; 46
    2558:	0d b4       	in	r0, 0x2d	; 45
    255a:	07 fe       	sbrs	r0, 7
    255c:	fd cf       	rjmp	.-6      	; 0x2558 <__stack+0x359>
    255e:	40 9a       	sbi	0x08, 0	; 8
    2560:	80 91 ed 06 	lds	r24, 0x06ED
    2564:	90 91 ee 06 	lds	r25, 0x06EE
    2568:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    256c:	8c ef       	ldi	r24, 0xFC	; 252
    256e:	9f ef       	ldi	r25, 0xFF	; 255
    2570:	3c c0       	rjmp	.+120    	; 0x25ea <__stack+0x3eb>
    2572:	8c 81       	ldd	r24, Y+4	; 0x04
    2574:	87 ff       	sbrs	r24, 7
    2576:	0e c0       	rjmp	.+28     	; 0x2594 <__stack+0x395>
    2578:	80 91 03 07 	lds	r24, 0x0703
    257c:	8f 5f       	subi	r24, 0xFF	; 255
    257e:	80 93 03 07 	sts	0x0703, r24
    2582:	80 91 ed 06 	lds	r24, 0x06ED
    2586:	90 91 ee 06 	lds	r25, 0x06EE
    258a:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	2b c0       	rjmp	.+86     	; 0x25ea <__stack+0x3eb>
    2594:	40 98       	cbi	0x08, 0	; 8
    2596:	8f e7       	ldi	r24, 0x7F	; 127
    2598:	8e bd       	out	0x2e, r24	; 46
    259a:	0d b4       	in	r0, 0x2d	; 45
    259c:	07 fe       	sbrs	r0, 7
    259e:	fd cf       	rjmp	.-6      	; 0x259a <__stack+0x39b>
    25a0:	1e bc       	out	0x2e, r1	; 46
    25a2:	0d b4       	in	r0, 0x2d	; 45
    25a4:	07 fe       	sbrs	r0, 7
    25a6:	fd cf       	rjmp	.-6      	; 0x25a2 <__stack+0x3a3>
    25a8:	8e b5       	in	r24, 0x2e	; 46
    25aa:	40 9a       	sbi	0x08, 0	; 8
    25ac:	40 98       	cbi	0x08, 0	; 8
    25ae:	88 e0       	ldi	r24, 0x08	; 8
    25b0:	8e bd       	out	0x2e, r24	; 46
    25b2:	0d b4       	in	r0, 0x2d	; 45
    25b4:	07 fe       	sbrs	r0, 7
    25b6:	fd cf       	rjmp	.-6      	; 0x25b2 <__stack+0x3b3>
    25b8:	40 9a       	sbi	0x08, 0	; 8
    25ba:	40 98       	cbi	0x08, 0	; 8
    25bc:	88 e0       	ldi	r24, 0x08	; 8
    25be:	8e bd       	out	0x2e, r24	; 46
    25c0:	0d b4       	in	r0, 0x2d	; 45
    25c2:	07 fe       	sbrs	r0, 7
    25c4:	fd cf       	rjmp	.-6      	; 0x25c0 <__stack+0x3c1>
    25c6:	40 9a       	sbi	0x08, 0	; 8
    25c8:	80 91 ed 06 	lds	r24, 0x06ED
    25cc:	90 91 ee 06 	lds	r25, 0x06EE
    25d0:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    25d4:	8b ef       	ldi	r24, 0xFB	; 251
    25d6:	9f ef       	ldi	r25, 0xFF	; 255
    25d8:	08 c0       	rjmp	.+16     	; 0x25ea <__stack+0x3eb>
    25da:	80 91 ed 06 	lds	r24, 0x06ED
    25de:	90 91 ee 06 	lds	r25, 0x06EE
    25e2:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	24 96       	adiw	r28, 0x04	; 4
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	1f 91       	pop	r17
    25fc:	0f 91       	pop	r16
    25fe:	08 95       	ret

00002600 <rf_rx_off>:
    2600:	80 91 ed 06 	lds	r24, 0x06ED
    2604:	90 91 ee 06 	lds	r25, 0x06EE
    2608:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
    260c:	10 92 fa 06 	sts	0x06FA, r1
    2610:	40 98       	cbi	0x08, 0	; 8
    2612:	86 e0       	ldi	r24, 0x06	; 6
    2614:	8e bd       	out	0x2e, r24	; 46
    2616:	0d b4       	in	r0, 0x2d	; 45
    2618:	07 fe       	sbrs	r0, 7
    261a:	fd cf       	rjmp	.-6      	; 0x2616 <rf_rx_off+0x16>
    261c:	40 9a       	sbi	0x08, 0	; 8
    261e:	10 92 03 07 	sts	0x0703, r1
    2622:	80 91 ed 06 	lds	r24, 0x06ED
    2626:	90 91 ee 06 	lds	r25, 0x06EE
    262a:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    262e:	08 95       	ret

00002630 <rf_polling_rx_on>:
    2630:	80 91 ed 06 	lds	r24, 0x06ED
    2634:	90 91 ee 06 	lds	r25, 0x06EE
    2638:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	80 93 fa 06 	sts	0x06FA, r24
    2642:	40 98       	cbi	0x08, 0	; 8
    2644:	83 e0       	ldi	r24, 0x03	; 3
    2646:	8e bd       	out	0x2e, r24	; 46
    2648:	0d b4       	in	r0, 0x2d	; 45
    264a:	07 fe       	sbrs	r0, 7
    264c:	fd cf       	rjmp	.-6      	; 0x2648 <rf_polling_rx_on+0x18>
    264e:	40 9a       	sbi	0x08, 0	; 8
    2650:	40 98       	cbi	0x08, 0	; 8
    2652:	88 e0       	ldi	r24, 0x08	; 8
    2654:	8e bd       	out	0x2e, r24	; 46
    2656:	0d b4       	in	r0, 0x2d	; 45
    2658:	07 fe       	sbrs	r0, 7
    265a:	fd cf       	rjmp	.-6      	; 0x2656 <rf_polling_rx_on+0x26>
    265c:	40 9a       	sbi	0x08, 0	; 8
    265e:	10 92 03 07 	sts	0x0703, r1
    2662:	80 91 ed 06 	lds	r24, 0x06ED
    2666:	90 91 ee 06 	lds	r25, 0x06EE
    266a:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    266e:	08 95       	ret

00002670 <rf_rx_on>:
    2670:	80 91 ed 06 	lds	r24, 0x06ED
    2674:	90 91 ee 06 	lds	r25, 0x06EE
    2678:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	80 93 fa 06 	sts	0x06FA, r24
    2682:	40 98       	cbi	0x08, 0	; 8
    2684:	83 e0       	ldi	r24, 0x03	; 3
    2686:	8e bd       	out	0x2e, r24	; 46
    2688:	0d b4       	in	r0, 0x2d	; 45
    268a:	07 fe       	sbrs	r0, 7
    268c:	fd cf       	rjmp	.-6      	; 0x2688 <rf_rx_on+0x18>
    268e:	40 9a       	sbi	0x08, 0	; 8
    2690:	40 98       	cbi	0x08, 0	; 8
    2692:	88 e0       	ldi	r24, 0x08	; 8
    2694:	8e bd       	out	0x2e, r24	; 46
    2696:	0d b4       	in	r0, 0x2d	; 45
    2698:	07 fe       	sbrs	r0, 7
    269a:	fd cf       	rjmp	.-6      	; 0x2696 <rf_rx_on+0x26>
    269c:	40 9a       	sbi	0x08, 0	; 8
    269e:	10 92 03 07 	sts	0x0703, r1
    26a2:	80 91 ed 06 	lds	r24, 0x06ED
    26a6:	90 91 ee 06 	lds	r25, 0x06EE
    26aa:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    26ae:	08 95       	ret

000026b0 <rf_tx_power>:
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
		    }
    26b0:	1f 93       	push	r17
    26b2:	18 2f       	mov	r17, r24
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
		    }
    26b4:	80 91 ed 06 	lds	r24, 0x06ED
    26b8:	90 91 ee 06 	lds	r25, 0x06EE
    26bc:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
		    if(opt&APPEND_FLAG)
		    {
		    	return NRK_ERROR;
    26c0:	21 2f       	mov	r18, r17
    26c2:	33 27       	eor	r19, r19
    26c4:	2f 71       	andi	r18, 0x1F	; 31
    26c6:	30 70       	andi	r19, 0x00	; 0
    26c8:	20 6e       	ori	r18, 0xE0	; 224
    26ca:	30 6a       	ori	r19, 0xA0	; 160
		    }
    26cc:	40 98       	cbi	0x08, 0	; 8
    26ce:	85 e1       	ldi	r24, 0x15	; 21
    26d0:	8e bd       	out	0x2e, r24	; 46
    26d2:	0d b4       	in	r0, 0x2d	; 45
    26d4:	07 fe       	sbrs	r0, 7
    26d6:	fd cf       	rjmp	.-6      	; 0x26d2 <rf_tx_power+0x22>
    26d8:	83 2f       	mov	r24, r19
    26da:	99 27       	eor	r25, r25
    26dc:	8e bd       	out	0x2e, r24	; 46
    26de:	0d b4       	in	r0, 0x2d	; 45
    26e0:	07 fe       	sbrs	r0, 7
    26e2:	fd cf       	rjmp	.-6      	; 0x26de <rf_tx_power+0x2e>
    26e4:	2e bd       	out	0x2e, r18	; 46
    26e6:	0d b4       	in	r0, 0x2d	; 45
    26e8:	07 fe       	sbrs	r0, 7
    26ea:	fd cf       	rjmp	.-6      	; 0x26e6 <rf_tx_power+0x36>
    26ec:	40 9a       	sbi	0x08, 0	; 8
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
    26ee:	80 91 ed 06 	lds	r24, 0x06ED
    26f2:	90 91 ee 06 	lds	r25, 0x06EE
    26f6:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    26fa:	1f 91       	pop	r17
    26fc:	08 95       	ret

000026fe <rf_tx_packet>:
    26fe:	ef 92       	push	r14
    2700:	ff 92       	push	r15
    2702:	0f 93       	push	r16
    2704:	1f 93       	push	r17
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	22 97       	sbiw	r28, 0x02	; 2
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	8c 01       	movw	r16, r24
    271c:	80 91 ed 06 	lds	r24, 0x06ED
    2720:	90 91 ee 06 	lds	r25, 0x06EE
    2724:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
    2728:	50 91 ef 06 	lds	r21, 0x06EF
    272c:	55 23       	and	r21, r21
    272e:	39 f0       	breq	.+14     	; 0x273e <rf_tx_packet+0x40>
    2730:	40 98       	cbi	0x08, 0	; 8
    2732:	8d e0       	ldi	r24, 0x0D	; 13
    2734:	8e bd       	out	0x2e, r24	; 46
    2736:	0d b4       	in	r0, 0x2d	; 45
    2738:	07 fe       	sbrs	r0, 7
    273a:	fd cf       	rjmp	.-6      	; 0x2736 <rf_tx_packet+0x38>
    273c:	40 9a       	sbi	0x08, 0	; 8
    273e:	f8 01       	movw	r30, r16
    2740:	42 81       	ldd	r20, Z+2	; 0x02
    2742:	64 2f       	mov	r22, r20
    2744:	77 27       	eor	r23, r23
    2746:	67 fd       	sbrc	r22, 7
    2748:	70 95       	com	r23
    274a:	a0 e0       	ldi	r26, 0x00	; 0
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	08 c0       	rjmp	.+16     	; 0x2762 <rf_tx_packet+0x64>
    2752:	f8 01       	movw	r30, r16
    2754:	83 81       	ldd	r24, Z+3	; 0x03
    2756:	94 81       	ldd	r25, Z+4	; 0x04
    2758:	e8 0e       	add	r14, r24
    275a:	f9 1e       	adc	r15, r25
    275c:	f7 01       	movw	r30, r14
    275e:	80 81       	ld	r24, Z
    2760:	a8 0f       	add	r26, r24
    2762:	82 2f       	mov	r24, r18
    2764:	2f 5f       	subi	r18, 0xFF	; 255
    2766:	3f 4f       	sbci	r19, 0xFF	; 255
    2768:	e8 2e       	mov	r14, r24
    276a:	ff 24       	eor	r15, r15
    276c:	e6 16       	cp	r14, r22
    276e:	f7 06       	cpc	r15, r23
    2770:	84 f3       	brlt	.-32     	; 0x2752 <rf_tx_packet+0x54>
    2772:	94 2f       	mov	r25, r20
    2774:	94 5f       	subi	r25, 0xF4	; 244
    2776:	51 11       	cpse	r21, r1
    2778:	9c 5f       	subi	r25, 0xFC	; 252
    277a:	67 99       	sbic	0x0c, 7	; 12
    277c:	fe cf       	rjmp	.-4      	; 0x277a <rf_tx_packet+0x7c>
    277e:	4e 99       	sbic	0x09, 6	; 9
    2780:	fc cf       	rjmp	.-8      	; 0x277a <rf_tx_packet+0x7c>
    2782:	f8 94       	cli
    2784:	40 98       	cbi	0x08, 0	; 8
    2786:	89 e0       	ldi	r24, 0x09	; 9
    2788:	8e bd       	out	0x2e, r24	; 46
    278a:	0d b4       	in	r0, 0x2d	; 45
    278c:	07 fe       	sbrs	r0, 7
    278e:	fd cf       	rjmp	.-6      	; 0x278a <rf_tx_packet+0x8c>
    2790:	40 9a       	sbi	0x08, 0	; 8
    2792:	40 98       	cbi	0x08, 0	; 8
    2794:	89 e0       	ldi	r24, 0x09	; 9
    2796:	8e bd       	out	0x2e, r24	; 46
    2798:	0d b4       	in	r0, 0x2d	; 45
    279a:	07 fe       	sbrs	r0, 7
    279c:	fd cf       	rjmp	.-6      	; 0x2798 <rf_tx_packet+0x9a>
    279e:	40 9a       	sbi	0x08, 0	; 8
    27a0:	40 98       	cbi	0x08, 0	; 8
    27a2:	8e e3       	ldi	r24, 0x3E	; 62
    27a4:	8e bd       	out	0x2e, r24	; 46
    27a6:	0d b4       	in	r0, 0x2d	; 45
    27a8:	07 fc       	sbrc	r0, 7
    27aa:	05 c0       	rjmp	.+10     	; 0x27b6 <rf_tx_packet+0xb8>
    27ac:	fc cf       	rjmp	.-8      	; 0x27a6 <rf_tx_packet+0xa8>
    27ae:	0d b4       	in	r0, 0x2d	; 45
    27b0:	07 fc       	sbrc	r0, 7
    27b2:	30 c1       	rjmp	.+608    	; 0x2a14 <rf_tx_packet+0x316>
    27b4:	fc cf       	rjmp	.-8      	; 0x27ae <rf_tx_packet+0xb0>
    27b6:	9e bd       	out	0x2e, r25	; 46
    27b8:	fa cf       	rjmp	.-12     	; 0x27ae <rf_tx_packet+0xb0>
    27ba:	81 e6       	ldi	r24, 0x61	; 97
    27bc:	98 e8       	ldi	r25, 0x88	; 136
    27be:	9a 83       	std	Y+2, r25	; 0x02
    27c0:	89 83       	std	Y+1, r24	; 0x01
    27c2:	55 23       	and	r21, r21
    27c4:	29 f0       	breq	.+10     	; 0x27d0 <rf_tx_packet+0xd2>
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	88 60       	ori	r24, 0x08	; 8
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	40 98       	cbi	0x08, 0	; 8
    27d2:	8e e3       	ldi	r24, 0x3E	; 62
    27d4:	8e bd       	out	0x2e, r24	; 46
    27d6:	0d b4       	in	r0, 0x2d	; 45
    27d8:	07 fe       	sbrs	r0, 7
    27da:	fd cf       	rjmp	.-6      	; 0x27d6 <rf_tx_packet+0xd8>
    27dc:	fe 01       	movw	r30, r28
    27de:	31 96       	adiw	r30, 0x01	; 1
    27e0:	9e 01       	movw	r18, r28
    27e2:	2d 5f       	subi	r18, 0xFD	; 253
    27e4:	3f 4f       	sbci	r19, 0xFF	; 255
    27e6:	80 81       	ld	r24, Z
    27e8:	8e bd       	out	0x2e, r24	; 46
    27ea:	0d b4       	in	r0, 0x2d	; 45
    27ec:	07 fe       	sbrs	r0, 7
    27ee:	fd cf       	rjmp	.-6      	; 0x27ea <rf_tx_packet+0xec>
    27f0:	31 96       	adiw	r30, 0x01	; 1
    27f2:	e2 17       	cp	r30, r18
    27f4:	f3 07       	cpc	r31, r19
    27f6:	b9 f7       	brne	.-18     	; 0x27e6 <rf_tx_packet+0xe8>
    27f8:	40 9a       	sbi	0x08, 0	; 8
    27fa:	40 98       	cbi	0x08, 0	; 8
    27fc:	8e e3       	ldi	r24, 0x3E	; 62
    27fe:	8e bd       	out	0x2e, r24	; 46
    2800:	0d b4       	in	r0, 0x2d	; 45
    2802:	07 fc       	sbrc	r0, 7
    2804:	05 c0       	rjmp	.+10     	; 0x2810 <rf_tx_packet+0x112>
    2806:	fc cf       	rjmp	.-8      	; 0x2800 <rf_tx_packet+0x102>
    2808:	0d b4       	in	r0, 0x2d	; 45
    280a:	07 fc       	sbrc	r0, 7
    280c:	0e c1       	rjmp	.+540    	; 0x2a2a <rf_tx_packet+0x32c>
    280e:	fc cf       	rjmp	.-8      	; 0x2808 <rf_tx_packet+0x10a>
    2810:	80 91 f4 06 	lds	r24, 0x06F4
    2814:	8e bd       	out	0x2e, r24	; 46
    2816:	f8 cf       	rjmp	.-16     	; 0x2808 <rf_tx_packet+0x10a>
    2818:	0d b4       	in	r0, 0x2d	; 45
    281a:	07 fe       	sbrs	r0, 7
    281c:	fd cf       	rjmp	.-6      	; 0x2818 <rf_tx_packet+0x11a>
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	f9 01       	movw	r30, r18
    2824:	ea 50       	subi	r30, 0x0A	; 10
    2826:	f9 4f       	sbci	r31, 0xF9	; 249
    2828:	80 81       	ld	r24, Z
    282a:	8e bd       	out	0x2e, r24	; 46
    282c:	0d b4       	in	r0, 0x2d	; 45
    282e:	07 fe       	sbrs	r0, 7
    2830:	fd cf       	rjmp	.-6      	; 0x282c <rf_tx_packet+0x12e>
    2832:	2f 5f       	subi	r18, 0xFF	; 255
    2834:	3f 4f       	sbci	r19, 0xFF	; 255
    2836:	22 30       	cpi	r18, 0x02	; 2
    2838:	31 05       	cpc	r19, r1
    283a:	99 f7       	brne	.-26     	; 0x2822 <rf_tx_packet+0x124>
    283c:	40 9a       	sbi	0x08, 0	; 8
    283e:	40 98       	cbi	0x08, 0	; 8
    2840:	8e e3       	ldi	r24, 0x3E	; 62
    2842:	8e bd       	out	0x2e, r24	; 46
    2844:	0d b4       	in	r0, 0x2d	; 45
    2846:	07 fe       	sbrs	r0, 7
    2848:	fd cf       	rjmp	.-6      	; 0x2844 <rf_tx_packet+0x146>
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	f8 01       	movw	r30, r16
    2850:	e2 0f       	add	r30, r18
    2852:	f3 1f       	adc	r31, r19
    2854:	80 81       	ld	r24, Z
    2856:	8e bd       	out	0x2e, r24	; 46
    2858:	0d b4       	in	r0, 0x2d	; 45
    285a:	07 fe       	sbrs	r0, 7
    285c:	fd cf       	rjmp	.-6      	; 0x2858 <rf_tx_packet+0x15a>
    285e:	2f 5f       	subi	r18, 0xFF	; 255
    2860:	3f 4f       	sbci	r19, 0xFF	; 255
    2862:	22 30       	cpi	r18, 0x02	; 2
    2864:	31 05       	cpc	r19, r1
    2866:	99 f7       	brne	.-26     	; 0x284e <rf_tx_packet+0x150>
    2868:	40 9a       	sbi	0x08, 0	; 8
    286a:	40 98       	cbi	0x08, 0	; 8
    286c:	8e e3       	ldi	r24, 0x3E	; 62
    286e:	8e bd       	out	0x2e, r24	; 46
    2870:	0d b4       	in	r0, 0x2d	; 45
    2872:	07 fe       	sbrs	r0, 7
    2874:	fd cf       	rjmp	.-6      	; 0x2870 <rf_tx_packet+0x172>
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	f9 01       	movw	r30, r18
    287c:	e8 50       	subi	r30, 0x08	; 8
    287e:	f9 4f       	sbci	r31, 0xF9	; 249
    2880:	80 81       	ld	r24, Z
    2882:	8e bd       	out	0x2e, r24	; 46
    2884:	0d b4       	in	r0, 0x2d	; 45
    2886:	07 fe       	sbrs	r0, 7
    2888:	fd cf       	rjmp	.-6      	; 0x2884 <rf_tx_packet+0x186>
    288a:	2f 5f       	subi	r18, 0xFF	; 255
    288c:	3f 4f       	sbci	r19, 0xFF	; 255
    288e:	22 30       	cpi	r18, 0x02	; 2
    2890:	31 05       	cpc	r19, r1
    2892:	99 f7       	brne	.-26     	; 0x287a <rf_tx_packet+0x17c>
    2894:	40 9a       	sbi	0x08, 0	; 8
    2896:	55 23       	and	r21, r21
    2898:	99 f0       	breq	.+38     	; 0x28c0 <rf_tx_packet+0x1c2>
    289a:	40 98       	cbi	0x08, 0	; 8
    289c:	8e e3       	ldi	r24, 0x3E	; 62
    289e:	8e bd       	out	0x2e, r24	; 46
    28a0:	0d b4       	in	r0, 0x2d	; 45
    28a2:	07 fe       	sbrs	r0, 7
    28a4:	fd cf       	rjmp	.-6      	; 0x28a0 <rf_tx_packet+0x1a2>
    28a6:	ef ef       	ldi	r30, 0xFF	; 255
    28a8:	f6 e0       	ldi	r31, 0x06	; 6
    28aa:	80 81       	ld	r24, Z
    28ac:	8e bd       	out	0x2e, r24	; 46
    28ae:	0d b4       	in	r0, 0x2d	; 45
    28b0:	07 fe       	sbrs	r0, 7
    28b2:	fd cf       	rjmp	.-6      	; 0x28ae <rf_tx_packet+0x1b0>
    28b4:	31 96       	adiw	r30, 0x01	; 1
    28b6:	87 e0       	ldi	r24, 0x07	; 7
    28b8:	e3 30       	cpi	r30, 0x03	; 3
    28ba:	f8 07       	cpc	r31, r24
    28bc:	b1 f7       	brne	.-20     	; 0x28aa <rf_tx_packet+0x1ac>
    28be:	40 9a       	sbi	0x08, 0	; 8
    28c0:	40 98       	cbi	0x08, 0	; 8
    28c2:	8e e3       	ldi	r24, 0x3E	; 62
    28c4:	8e bd       	out	0x2e, r24	; 46
    28c6:	0d b4       	in	r0, 0x2d	; 45
    28c8:	07 fe       	sbrs	r0, 7
    28ca:	fd cf       	rjmp	.-6      	; 0x28c6 <rf_tx_packet+0x1c8>
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	0d c0       	rjmp	.+26     	; 0x28ec <rf_tx_packet+0x1ee>
    28d2:	f8 01       	movw	r30, r16
    28d4:	83 81       	ldd	r24, Z+3	; 0x03
    28d6:	94 81       	ldd	r25, Z+4	; 0x04
    28d8:	48 0f       	add	r20, r24
    28da:	59 1f       	adc	r21, r25
    28dc:	fa 01       	movw	r30, r20
    28de:	80 81       	ld	r24, Z
    28e0:	8e bd       	out	0x2e, r24	; 46
    28e2:	0d b4       	in	r0, 0x2d	; 45
    28e4:	07 fe       	sbrs	r0, 7
    28e6:	fd cf       	rjmp	.-6      	; 0x28e2 <rf_tx_packet+0x1e4>
    28e8:	2f 5f       	subi	r18, 0xFF	; 255
    28ea:	3f 4f       	sbci	r19, 0xFF	; 255
    28ec:	42 2f       	mov	r20, r18
    28ee:	55 27       	eor	r21, r21
    28f0:	46 17       	cp	r20, r22
    28f2:	57 07       	cpc	r21, r23
    28f4:	74 f3       	brlt	.-36     	; 0x28d2 <rf_tx_packet+0x1d4>
    28f6:	40 9a       	sbi	0x08, 0	; 8
    28f8:	40 98       	cbi	0x08, 0	; 8
    28fa:	8e e3       	ldi	r24, 0x3E	; 62
    28fc:	8e bd       	out	0x2e, r24	; 46
    28fe:	0d b4       	in	r0, 0x2d	; 45
    2900:	07 fc       	sbrc	r0, 7
    2902:	05 c0       	rjmp	.+10     	; 0x290e <rf_tx_packet+0x210>
    2904:	fc cf       	rjmp	.-8      	; 0x28fe <rf_tx_packet+0x200>
    2906:	0d b4       	in	r0, 0x2d	; 45
    2908:	07 fc       	sbrc	r0, 7
    290a:	94 c0       	rjmp	.+296    	; 0x2a34 <rf_tx_packet+0x336>
    290c:	fc cf       	rjmp	.-8      	; 0x2906 <rf_tx_packet+0x208>
    290e:	ae bd       	out	0x2e, r26	; 46
    2910:	fa cf       	rjmp	.-12     	; 0x2906 <rf_tx_packet+0x208>
    2912:	80 91 fa 06 	lds	r24, 0x06FA
    2916:	88 23       	and	r24, r24
    2918:	39 f4       	brne	.+14     	; 0x2928 <rf_tx_packet+0x22a>
    291a:	40 98       	cbi	0x08, 0	; 8
    291c:	83 e0       	ldi	r24, 0x03	; 3
    291e:	8e bd       	out	0x2e, r24	; 46
    2920:	0d b4       	in	r0, 0x2d	; 45
    2922:	07 fe       	sbrs	r0, 7
    2924:	fd cf       	rjmp	.-6      	; 0x2920 <rf_tx_packet+0x222>
    2926:	40 9a       	sbi	0x08, 0	; 8
    2928:	40 98       	cbi	0x08, 0	; 8
    292a:	1e bc       	out	0x2e, r1	; 46
    292c:	0d b4       	in	r0, 0x2d	; 45
    292e:	07 fe       	sbrs	r0, 7
    2930:	fd cf       	rjmp	.-6      	; 0x292c <rf_tx_packet+0x22e>
    2932:	8e b5       	in	r24, 0x2e	; 46
    2934:	40 9a       	sbi	0x08, 0	; 8
    2936:	81 ff       	sbrs	r24, 1
    2938:	f7 cf       	rjmp	.-18     	; 0x2928 <rf_tx_packet+0x22a>
    293a:	00 e0       	ldi	r16, 0x00	; 0
    293c:	40 98       	cbi	0x08, 0	; 8
    293e:	85 e0       	ldi	r24, 0x05	; 5
    2940:	8e bd       	out	0x2e, r24	; 46
    2942:	0d b4       	in	r0, 0x2d	; 45
    2944:	07 fe       	sbrs	r0, 7
    2946:	fd cf       	rjmp	.-6      	; 0x2942 <rf_tx_packet+0x244>
    2948:	40 9a       	sbi	0x08, 0	; 8
    294a:	40 98       	cbi	0x08, 0	; 8
    294c:	1e bc       	out	0x2e, r1	; 46
    294e:	0d b4       	in	r0, 0x2d	; 45
    2950:	07 fe       	sbrs	r0, 7
    2952:	fd cf       	rjmp	.-6      	; 0x294e <rf_tx_packet+0x250>
    2954:	1e b5       	in	r17, 0x2e	; 46
    2956:	40 9a       	sbi	0x08, 0	; 8
    2958:	0f 5f       	subi	r16, 0xFF	; 255
    295a:	05 36       	cpi	r16, 0x65	; 101
    295c:	51 f4       	brne	.+20     	; 0x2972 <rf_tx_packet+0x274>
    295e:	78 94       	sei
    2960:	80 91 ed 06 	lds	r24, 0x06ED
    2964:	90 91 ee 06 	lds	r25, 0x06EE
    2968:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	68 c0       	rjmp	.+208    	; 0x2a42 <rf_tx_packet+0x344>
    2972:	84 e6       	ldi	r24, 0x64	; 100
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <halWait>
    297a:	13 fd       	sbrc	r17, 3
    297c:	08 c0       	rjmp	.+16     	; 0x298e <rf_tx_packet+0x290>
    297e:	de cf       	rjmp	.-68     	; 0x293c <rf_tx_packet+0x23e>
    2980:	40 98       	cbi	0x08, 0	; 8
    2982:	84 e0       	ldi	r24, 0x04	; 4
    2984:	8e bd       	out	0x2e, r24	; 46
    2986:	0d b4       	in	r0, 0x2d	; 45
    2988:	07 fe       	sbrs	r0, 7
    298a:	fd cf       	rjmp	.-6      	; 0x2986 <rf_tx_packet+0x288>
    298c:	40 9a       	sbi	0x08, 0	; 8
    298e:	78 94       	sei
    2990:	4e 9b       	sbis	0x09, 6	; 9
    2992:	fe cf       	rjmp	.-4      	; 0x2990 <rf_tx_packet+0x292>
    2994:	4e 99       	sbic	0x09, 6	; 9
    2996:	fe cf       	rjmp	.-4      	; 0x2994 <rf_tx_packet+0x296>
    2998:	80 91 fd 06 	lds	r24, 0x06FD
    299c:	88 23       	and	r24, r24
    299e:	91 f0       	breq	.+36     	; 0x29c4 <rf_tx_packet+0x2c6>
    29a0:	84 ea       	ldi	r24, 0xA4	; 164
    29a2:	92 e0       	ldi	r25, 0x02	; 2
    29a4:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <halWait>
    29a8:	31 9b       	sbis	0x06, 1	; 6
    29aa:	0e c0       	rjmp	.+28     	; 0x29c8 <rf_tx_packet+0x2ca>
    29ac:	40 98       	cbi	0x08, 0	; 8
    29ae:	8f e7       	ldi	r24, 0x7F	; 127
    29b0:	8e bd       	out	0x2e, r24	; 46
    29b2:	0d b4       	in	r0, 0x2d	; 45
    29b4:	07 fe       	sbrs	r0, 7
    29b6:	fd cf       	rjmp	.-6      	; 0x29b2 <rf_tx_packet+0x2b4>
    29b8:	1e bc       	out	0x2e, r1	; 46
    29ba:	0d b4       	in	r0, 0x2d	; 45
    29bc:	07 fe       	sbrs	r0, 7
    29be:	fd cf       	rjmp	.-6      	; 0x29ba <rf_tx_packet+0x2bc>
    29c0:	8e b5       	in	r24, 0x2e	; 46
    29c2:	40 9a       	sbi	0x08, 0	; 8
    29c4:	11 e0       	ldi	r17, 0x01	; 1
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <rf_tx_packet+0x2e8>
    29c8:	40 98       	cbi	0x08, 0	; 8
    29ca:	88 e0       	ldi	r24, 0x08	; 8
    29cc:	8e bd       	out	0x2e, r24	; 46
    29ce:	0d b4       	in	r0, 0x2d	; 45
    29d0:	07 fe       	sbrs	r0, 7
    29d2:	fd cf       	rjmp	.-6      	; 0x29ce <rf_tx_packet+0x2d0>
    29d4:	40 9a       	sbi	0x08, 0	; 8
    29d6:	40 98       	cbi	0x08, 0	; 8
    29d8:	88 e0       	ldi	r24, 0x08	; 8
    29da:	8e bd       	out	0x2e, r24	; 46
    29dc:	0d b4       	in	r0, 0x2d	; 45
    29de:	07 fe       	sbrs	r0, 7
    29e0:	fd cf       	rjmp	.-6      	; 0x29dc <rf_tx_packet+0x2de>
    29e2:	40 9a       	sbi	0x08, 0	; 8
    29e4:	10 e0       	ldi	r17, 0x00	; 0
    29e6:	f8 94       	cli
    29e8:	40 98       	cbi	0x08, 0	; 8
    29ea:	86 e0       	ldi	r24, 0x06	; 6
    29ec:	8e bd       	out	0x2e, r24	; 46
    29ee:	0d b4       	in	r0, 0x2d	; 45
    29f0:	07 fe       	sbrs	r0, 7
    29f2:	fd cf       	rjmp	.-6      	; 0x29ee <rf_tx_packet+0x2f0>
    29f4:	40 9a       	sbi	0x08, 0	; 8
    29f6:	78 94       	sei
    29f8:	80 91 f4 06 	lds	r24, 0x06F4
    29fc:	8f 5f       	subi	r24, 0xFF	; 255
    29fe:	80 93 f4 06 	sts	0x06F4, r24
    2a02:	80 91 ed 06 	lds	r24, 0x06ED
    2a06:	90 91 ee 06 	lds	r25, 0x06EE
    2a0a:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    2a0e:	81 2f       	mov	r24, r17
    2a10:	99 27       	eor	r25, r25
    2a12:	17 c0       	rjmp	.+46     	; 0x2a42 <rf_tx_packet+0x344>
    2a14:	40 9a       	sbi	0x08, 0	; 8
    2a16:	81 e4       	ldi	r24, 0x41	; 65
    2a18:	98 e8       	ldi	r25, 0x88	; 136
    2a1a:	9a 83       	std	Y+2, r25	; 0x02
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	80 91 fd 06 	lds	r24, 0x06FD
    2a22:	88 23       	and	r24, r24
    2a24:	09 f0       	breq	.+2      	; 0x2a28 <rf_tx_packet+0x32a>
    2a26:	c9 ce       	rjmp	.-622    	; 0x27ba <rf_tx_packet+0xbc>
    2a28:	cc ce       	rjmp	.-616    	; 0x27c2 <rf_tx_packet+0xc4>
    2a2a:	40 9a       	sbi	0x08, 0	; 8
    2a2c:	40 98       	cbi	0x08, 0	; 8
    2a2e:	8e e3       	ldi	r24, 0x3E	; 62
    2a30:	8e bd       	out	0x2e, r24	; 46
    2a32:	f2 ce       	rjmp	.-540    	; 0x2818 <rf_tx_packet+0x11a>
    2a34:	40 9a       	sbi	0x08, 0	; 8
    2a36:	f8 01       	movw	r30, r16
    2a38:	85 81       	ldd	r24, Z+5	; 0x05
    2a3a:	88 23       	and	r24, r24
    2a3c:	09 f0       	breq	.+2      	; 0x2a40 <rf_tx_packet+0x342>
    2a3e:	69 cf       	rjmp	.-302    	; 0x2912 <rf_tx_packet+0x214>
    2a40:	9f cf       	rjmp	.-194    	; 0x2980 <rf_tx_packet+0x282>
    2a42:	22 96       	adiw	r28, 0x02	; 2
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	f8 94       	cli
    2a48:	de bf       	out	0x3e, r29	; 62
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	cd bf       	out	0x3d, r28	; 61
    2a4e:	df 91       	pop	r29
    2a50:	cf 91       	pop	r28
    2a52:	1f 91       	pop	r17
    2a54:	0f 91       	pop	r16
    2a56:	ff 90       	pop	r15
    2a58:	ef 90       	pop	r14
    2a5a:	08 95       	ret

00002a5c <rf_tx_tdma_packet>:
    2a5c:	8f 92       	push	r8
    2a5e:	9f 92       	push	r9
    2a60:	bf 92       	push	r11
    2a62:	cf 92       	push	r12
    2a64:	df 92       	push	r13
    2a66:	ef 92       	push	r14
    2a68:	ff 92       	push	r15
    2a6a:	0f 93       	push	r16
    2a6c:	1f 93       	push	r17
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
    2a76:	22 97       	sbiw	r28, 0x02	; 2
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	8c 01       	movw	r16, r24
    2a84:	6b 01       	movw	r12, r22
    2a86:	7a 01       	movw	r14, r20
    2a88:	49 01       	movw	r8, r18
    2a8a:	80 91 ed 06 	lds	r24, 0x06ED
    2a8e:	90 91 ee 06 	lds	r25, 0x06EE
    2a92:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
    2a96:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    2a9a:	40 98       	cbi	0x08, 0	; 8
    2a9c:	88 e0       	ldi	r24, 0x08	; 8
    2a9e:	8e bd       	out	0x2e, r24	; 46
    2aa0:	0d b4       	in	r0, 0x2d	; 45
    2aa2:	07 fe       	sbrs	r0, 7
    2aa4:	fd cf       	rjmp	.-6      	; 0x2aa0 <rf_tx_tdma_packet+0x44>
    2aa6:	40 9a       	sbi	0x08, 0	; 8
    2aa8:	40 98       	cbi	0x08, 0	; 8
    2aaa:	88 e0       	ldi	r24, 0x08	; 8
    2aac:	8e bd       	out	0x2e, r24	; 46
    2aae:	0d b4       	in	r0, 0x2d	; 45
    2ab0:	07 fe       	sbrs	r0, 7
    2ab2:	fd cf       	rjmp	.-6      	; 0x2aae <rf_tx_tdma_packet+0x52>
    2ab4:	40 9a       	sbi	0x08, 0	; 8
    2ab6:	67 99       	sbic	0x0c, 7	; 12
    2ab8:	fe cf       	rjmp	.-4      	; 0x2ab6 <rf_tx_tdma_packet+0x5a>
    2aba:	4e 99       	sbic	0x09, 6	; 9
    2abc:	fc cf       	rjmp	.-8      	; 0x2ab6 <rf_tx_tdma_packet+0x5a>
    2abe:	f8 94       	cli
    2ac0:	40 98       	cbi	0x08, 0	; 8
    2ac2:	89 e0       	ldi	r24, 0x09	; 9
    2ac4:	8e bd       	out	0x2e, r24	; 46
    2ac6:	0d b4       	in	r0, 0x2d	; 45
    2ac8:	07 fe       	sbrs	r0, 7
    2aca:	fd cf       	rjmp	.-6      	; 0x2ac6 <rf_tx_tdma_packet+0x6a>
    2acc:	40 9a       	sbi	0x08, 0	; 8
    2ace:	40 98       	cbi	0x08, 0	; 8
    2ad0:	89 e0       	ldi	r24, 0x09	; 9
    2ad2:	8e bd       	out	0x2e, r24	; 46
    2ad4:	0d b4       	in	r0, 0x2d	; 45
    2ad6:	07 fe       	sbrs	r0, 7
    2ad8:	fd cf       	rjmp	.-6      	; 0x2ad4 <rf_tx_tdma_packet+0x78>
    2ada:	40 9a       	sbi	0x08, 0	; 8
    2adc:	f8 01       	movw	r30, r16
    2ade:	62 81       	ldd	r22, Z+2	; 0x02
    2ae0:	46 2f       	mov	r20, r22
    2ae2:	55 27       	eor	r21, r21
    2ae4:	47 fd       	sbrc	r20, 7
    2ae6:	50 95       	com	r21
    2ae8:	bb 24       	eor	r11, r11
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	07 c0       	rjmp	.+14     	; 0x2afe <rf_tx_tdma_packet+0xa2>
    2af0:	f8 01       	movw	r30, r16
    2af2:	83 81       	ldd	r24, Z+3	; 0x03
    2af4:	94 81       	ldd	r25, Z+4	; 0x04
    2af6:	a8 0f       	add	r26, r24
    2af8:	b9 1f       	adc	r27, r25
    2afa:	8c 91       	ld	r24, X
    2afc:	b8 0e       	add	r11, r24
    2afe:	82 2f       	mov	r24, r18
    2b00:	2f 5f       	subi	r18, 0xFF	; 255
    2b02:	3f 4f       	sbci	r19, 0xFF	; 255
    2b04:	a8 2f       	mov	r26, r24
    2b06:	bb 27       	eor	r27, r27
    2b08:	a4 17       	cp	r26, r20
    2b0a:	b5 07       	cpc	r27, r21
    2b0c:	8c f3       	brlt	.-30     	; 0x2af0 <rf_tx_tdma_packet+0x94>
    2b0e:	96 2f       	mov	r25, r22
    2b10:	94 5f       	subi	r25, 0xF4	; 244
    2b12:	40 98       	cbi	0x08, 0	; 8
    2b14:	8e e3       	ldi	r24, 0x3E	; 62
    2b16:	8e bd       	out	0x2e, r24	; 46
    2b18:	0d b4       	in	r0, 0x2d	; 45
    2b1a:	07 fc       	sbrc	r0, 7
    2b1c:	05 c0       	rjmp	.+10     	; 0x2b28 <rf_tx_tdma_packet+0xcc>
    2b1e:	fc cf       	rjmp	.-8      	; 0x2b18 <rf_tx_tdma_packet+0xbc>
    2b20:	0d b4       	in	r0, 0x2d	; 45
    2b22:	07 fc       	sbrc	r0, 7
    2b24:	18 c1       	rjmp	.+560    	; 0x2d56 <rf_tx_tdma_packet+0x2fa>
    2b26:	fc cf       	rjmp	.-8      	; 0x2b20 <rf_tx_tdma_packet+0xc4>
    2b28:	9e bd       	out	0x2e, r25	; 46
    2b2a:	fa cf       	rjmp	.-12     	; 0x2b20 <rf_tx_tdma_packet+0xc4>
    2b2c:	81 e6       	ldi	r24, 0x61	; 97
    2b2e:	98 e8       	ldi	r25, 0x88	; 136
    2b30:	9a 83       	std	Y+2, r25	; 0x02
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	40 98       	cbi	0x08, 0	; 8
    2b36:	8e e3       	ldi	r24, 0x3E	; 62
    2b38:	8e bd       	out	0x2e, r24	; 46
    2b3a:	0d b4       	in	r0, 0x2d	; 45
    2b3c:	07 fe       	sbrs	r0, 7
    2b3e:	fd cf       	rjmp	.-6      	; 0x2b3a <rf_tx_tdma_packet+0xde>
    2b40:	fe 01       	movw	r30, r28
    2b42:	31 96       	adiw	r30, 0x01	; 1
    2b44:	9e 01       	movw	r18, r28
    2b46:	2d 5f       	subi	r18, 0xFD	; 253
    2b48:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4a:	80 81       	ld	r24, Z
    2b4c:	8e bd       	out	0x2e, r24	; 46
    2b4e:	0d b4       	in	r0, 0x2d	; 45
    2b50:	07 fe       	sbrs	r0, 7
    2b52:	fd cf       	rjmp	.-6      	; 0x2b4e <rf_tx_tdma_packet+0xf2>
    2b54:	31 96       	adiw	r30, 0x01	; 1
    2b56:	e2 17       	cp	r30, r18
    2b58:	f3 07       	cpc	r31, r19
    2b5a:	b9 f7       	brne	.-18     	; 0x2b4a <rf_tx_tdma_packet+0xee>
    2b5c:	40 9a       	sbi	0x08, 0	; 8
    2b5e:	40 98       	cbi	0x08, 0	; 8
    2b60:	8e e3       	ldi	r24, 0x3E	; 62
    2b62:	8e bd       	out	0x2e, r24	; 46
    2b64:	0d b4       	in	r0, 0x2d	; 45
    2b66:	07 fc       	sbrc	r0, 7
    2b68:	05 c0       	rjmp	.+10     	; 0x2b74 <rf_tx_tdma_packet+0x118>
    2b6a:	fc cf       	rjmp	.-8      	; 0x2b64 <rf_tx_tdma_packet+0x108>
    2b6c:	0d b4       	in	r0, 0x2d	; 45
    2b6e:	07 fc       	sbrc	r0, 7
    2b70:	fb c0       	rjmp	.+502    	; 0x2d68 <rf_tx_tdma_packet+0x30c>
    2b72:	fc cf       	rjmp	.-8      	; 0x2b6c <rf_tx_tdma_packet+0x110>
    2b74:	80 91 f4 06 	lds	r24, 0x06F4
    2b78:	8e bd       	out	0x2e, r24	; 46
    2b7a:	f8 cf       	rjmp	.-16     	; 0x2b6c <rf_tx_tdma_packet+0x110>
    2b7c:	0d b4       	in	r0, 0x2d	; 45
    2b7e:	07 fe       	sbrs	r0, 7
    2b80:	fd cf       	rjmp	.-6      	; 0x2b7c <rf_tx_tdma_packet+0x120>
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	f9 01       	movw	r30, r18
    2b88:	ea 50       	subi	r30, 0x0A	; 10
    2b8a:	f9 4f       	sbci	r31, 0xF9	; 249
    2b8c:	80 81       	ld	r24, Z
    2b8e:	8e bd       	out	0x2e, r24	; 46
    2b90:	0d b4       	in	r0, 0x2d	; 45
    2b92:	07 fe       	sbrs	r0, 7
    2b94:	fd cf       	rjmp	.-6      	; 0x2b90 <rf_tx_tdma_packet+0x134>
    2b96:	2f 5f       	subi	r18, 0xFF	; 255
    2b98:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9a:	22 30       	cpi	r18, 0x02	; 2
    2b9c:	31 05       	cpc	r19, r1
    2b9e:	99 f7       	brne	.-26     	; 0x2b86 <rf_tx_tdma_packet+0x12a>
    2ba0:	40 9a       	sbi	0x08, 0	; 8
    2ba2:	40 98       	cbi	0x08, 0	; 8
    2ba4:	8e e3       	ldi	r24, 0x3E	; 62
    2ba6:	8e bd       	out	0x2e, r24	; 46
    2ba8:	0d b4       	in	r0, 0x2d	; 45
    2baa:	07 fe       	sbrs	r0, 7
    2bac:	fd cf       	rjmp	.-6      	; 0x2ba8 <rf_tx_tdma_packet+0x14c>
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	f8 01       	movw	r30, r16
    2bb4:	e2 0f       	add	r30, r18
    2bb6:	f3 1f       	adc	r31, r19
    2bb8:	80 81       	ld	r24, Z
    2bba:	8e bd       	out	0x2e, r24	; 46
    2bbc:	0d b4       	in	r0, 0x2d	; 45
    2bbe:	07 fe       	sbrs	r0, 7
    2bc0:	fd cf       	rjmp	.-6      	; 0x2bbc <rf_tx_tdma_packet+0x160>
    2bc2:	2f 5f       	subi	r18, 0xFF	; 255
    2bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc6:	22 30       	cpi	r18, 0x02	; 2
    2bc8:	31 05       	cpc	r19, r1
    2bca:	99 f7       	brne	.-26     	; 0x2bb2 <rf_tx_tdma_packet+0x156>
    2bcc:	40 9a       	sbi	0x08, 0	; 8
    2bce:	40 98       	cbi	0x08, 0	; 8
    2bd0:	8e e3       	ldi	r24, 0x3E	; 62
    2bd2:	8e bd       	out	0x2e, r24	; 46
    2bd4:	0d b4       	in	r0, 0x2d	; 45
    2bd6:	07 fe       	sbrs	r0, 7
    2bd8:	fd cf       	rjmp	.-6      	; 0x2bd4 <rf_tx_tdma_packet+0x178>
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	f9 01       	movw	r30, r18
    2be0:	e8 50       	subi	r30, 0x08	; 8
    2be2:	f9 4f       	sbci	r31, 0xF9	; 249
    2be4:	80 81       	ld	r24, Z
    2be6:	8e bd       	out	0x2e, r24	; 46
    2be8:	0d b4       	in	r0, 0x2d	; 45
    2bea:	07 fe       	sbrs	r0, 7
    2bec:	fd cf       	rjmp	.-6      	; 0x2be8 <rf_tx_tdma_packet+0x18c>
    2bee:	2f 5f       	subi	r18, 0xFF	; 255
    2bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf2:	22 30       	cpi	r18, 0x02	; 2
    2bf4:	31 05       	cpc	r19, r1
    2bf6:	99 f7       	brne	.-26     	; 0x2bde <rf_tx_tdma_packet+0x182>
    2bf8:	40 9a       	sbi	0x08, 0	; 8
    2bfa:	b7 01       	movw	r22, r14
    2bfc:	c6 01       	movw	r24, r12
    2bfe:	0e 94 8b 30 	call	0x6116	; 0x6116 <nrk_high_speed_timer_wait>
    2c02:	f8 01       	movw	r30, r16
    2c04:	85 81       	ldd	r24, Z+5	; 0x05
    2c06:	88 23       	and	r24, r24
    2c08:	79 f1       	breq	.+94     	; 0x2c68 <rf_tx_tdma_packet+0x20c>
    2c0a:	80 91 fa 06 	lds	r24, 0x06FA
    2c0e:	88 23       	and	r24, r24
    2c10:	39 f4       	brne	.+14     	; 0x2c20 <rf_tx_tdma_packet+0x1c4>
    2c12:	40 98       	cbi	0x08, 0	; 8
    2c14:	83 e0       	ldi	r24, 0x03	; 3
    2c16:	8e bd       	out	0x2e, r24	; 46
    2c18:	0d b4       	in	r0, 0x2d	; 45
    2c1a:	07 fe       	sbrs	r0, 7
    2c1c:	fd cf       	rjmp	.-6      	; 0x2c18 <rf_tx_tdma_packet+0x1bc>
    2c1e:	40 9a       	sbi	0x08, 0	; 8
    2c20:	ee 24       	eor	r14, r14
    2c22:	40 98       	cbi	0x08, 0	; 8
    2c24:	85 e0       	ldi	r24, 0x05	; 5
    2c26:	8e bd       	out	0x2e, r24	; 46
    2c28:	0d b4       	in	r0, 0x2d	; 45
    2c2a:	07 fe       	sbrs	r0, 7
    2c2c:	fd cf       	rjmp	.-6      	; 0x2c28 <rf_tx_tdma_packet+0x1cc>
    2c2e:	40 9a       	sbi	0x08, 0	; 8
    2c30:	40 98       	cbi	0x08, 0	; 8
    2c32:	1e bc       	out	0x2e, r1	; 46
    2c34:	0d b4       	in	r0, 0x2d	; 45
    2c36:	07 fe       	sbrs	r0, 7
    2c38:	fd cf       	rjmp	.-6      	; 0x2c34 <rf_tx_tdma_packet+0x1d8>
    2c3a:	fe b4       	in	r15, 0x2e	; 46
    2c3c:	40 9a       	sbi	0x08, 0	; 8
    2c3e:	e3 94       	inc	r14
    2c40:	f5 e6       	ldi	r31, 0x65	; 101
    2c42:	ef 16       	cp	r14, r31
    2c44:	51 f4       	brne	.+20     	; 0x2c5a <rf_tx_tdma_packet+0x1fe>
    2c46:	78 94       	sei
    2c48:	80 91 ed 06 	lds	r24, 0x06ED
    2c4c:	90 91 ee 06 	lds	r25, 0x06EE
    2c50:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	8e c0       	rjmp	.+284    	; 0x2d76 <rf_tx_tdma_packet+0x31a>
    2c5a:	84 e6       	ldi	r24, 0x64	; 100
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <halWait>
    2c62:	f3 fc       	sbrc	r15, 3
    2c64:	08 c0       	rjmp	.+16     	; 0x2c76 <rf_tx_tdma_packet+0x21a>
    2c66:	dd cf       	rjmp	.-70     	; 0x2c22 <rf_tx_tdma_packet+0x1c6>
    2c68:	40 98       	cbi	0x08, 0	; 8
    2c6a:	84 e0       	ldi	r24, 0x04	; 4
    2c6c:	8e bd       	out	0x2e, r24	; 46
    2c6e:	0d b4       	in	r0, 0x2d	; 45
    2c70:	07 fe       	sbrs	r0, 7
    2c72:	fd cf       	rjmp	.-6      	; 0x2c6e <rf_tx_tdma_packet+0x212>
    2c74:	40 9a       	sbi	0x08, 0	; 8
    2c76:	80 91 76 02 	lds	r24, 0x0276
    2c7a:	0e 94 8c 19 	call	0x3318	; 0x3318 <nrk_gpio_set>
    2c7e:	80 91 84 00 	lds	r24, 0x0084
    2c82:	90 91 85 00 	lds	r25, 0x0085
    2c86:	f4 01       	movw	r30, r8
    2c88:	91 83       	std	Z+1, r25	; 0x01
    2c8a:	80 83       	st	Z, r24
    2c8c:	40 98       	cbi	0x08, 0	; 8
    2c8e:	8e e3       	ldi	r24, 0x3E	; 62
    2c90:	8e bd       	out	0x2e, r24	; 46
    2c92:	0d b4       	in	r0, 0x2d	; 45
    2c94:	07 fe       	sbrs	r0, 7
    2c96:	fd cf       	rjmp	.-6      	; 0x2c92 <rf_tx_tdma_packet+0x236>
    2c98:	f8 01       	movw	r30, r16
    2c9a:	82 81       	ldd	r24, Z+2	; 0x02
    2c9c:	48 2f       	mov	r20, r24
    2c9e:	55 27       	eor	r21, r21
    2ca0:	47 fd       	sbrc	r20, 7
    2ca2:	50 95       	com	r21
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	0c c0       	rjmp	.+24     	; 0x2cc2 <rf_tx_tdma_packet+0x266>
    2caa:	f8 01       	movw	r30, r16
    2cac:	83 81       	ldd	r24, Z+3	; 0x03
    2cae:	94 81       	ldd	r25, Z+4	; 0x04
    2cb0:	a8 0f       	add	r26, r24
    2cb2:	b9 1f       	adc	r27, r25
    2cb4:	8c 91       	ld	r24, X
    2cb6:	8e bd       	out	0x2e, r24	; 46
    2cb8:	0d b4       	in	r0, 0x2d	; 45
    2cba:	07 fe       	sbrs	r0, 7
    2cbc:	fd cf       	rjmp	.-6      	; 0x2cb8 <rf_tx_tdma_packet+0x25c>
    2cbe:	2f 5f       	subi	r18, 0xFF	; 255
    2cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc2:	a2 2f       	mov	r26, r18
    2cc4:	bb 27       	eor	r27, r27
    2cc6:	a4 17       	cp	r26, r20
    2cc8:	b5 07       	cpc	r27, r21
    2cca:	7c f3       	brlt	.-34     	; 0x2caa <rf_tx_tdma_packet+0x24e>
    2ccc:	40 9a       	sbi	0x08, 0	; 8
    2cce:	40 98       	cbi	0x08, 0	; 8
    2cd0:	8e e3       	ldi	r24, 0x3E	; 62
    2cd2:	8e bd       	out	0x2e, r24	; 46
    2cd4:	0d b4       	in	r0, 0x2d	; 45
    2cd6:	07 fc       	sbrc	r0, 7
    2cd8:	05 c0       	rjmp	.+10     	; 0x2ce4 <rf_tx_tdma_packet+0x288>
    2cda:	fc cf       	rjmp	.-8      	; 0x2cd4 <rf_tx_tdma_packet+0x278>
    2cdc:	0d b4       	in	r0, 0x2d	; 45
    2cde:	07 fc       	sbrc	r0, 7
    2ce0:	48 c0       	rjmp	.+144    	; 0x2d72 <rf_tx_tdma_packet+0x316>
    2ce2:	fc cf       	rjmp	.-8      	; 0x2cdc <rf_tx_tdma_packet+0x280>
    2ce4:	be bc       	out	0x2e, r11	; 46
    2ce6:	fa cf       	rjmp	.-12     	; 0x2cdc <rf_tx_tdma_packet+0x280>
    2ce8:	4e 9b       	sbis	0x09, 6	; 9
    2cea:	fe cf       	rjmp	.-4      	; 0x2ce8 <rf_tx_tdma_packet+0x28c>
    2cec:	f8 94       	cli
    2cee:	4e 99       	sbic	0x09, 6	; 9
    2cf0:	fe cf       	rjmp	.-4      	; 0x2cee <rf_tx_tdma_packet+0x292>
    2cf2:	40 98       	cbi	0x08, 0	; 8
    2cf4:	88 e0       	ldi	r24, 0x08	; 8
    2cf6:	8e bd       	out	0x2e, r24	; 46
    2cf8:	0d b4       	in	r0, 0x2d	; 45
    2cfa:	07 fe       	sbrs	r0, 7
    2cfc:	fd cf       	rjmp	.-6      	; 0x2cf8 <rf_tx_tdma_packet+0x29c>
    2cfe:	40 9a       	sbi	0x08, 0	; 8
    2d00:	40 98       	cbi	0x08, 0	; 8
    2d02:	88 e0       	ldi	r24, 0x08	; 8
    2d04:	8e bd       	out	0x2e, r24	; 46
    2d06:	0d b4       	in	r0, 0x2d	; 45
    2d08:	07 fe       	sbrs	r0, 7
    2d0a:	fd cf       	rjmp	.-6      	; 0x2d06 <rf_tx_tdma_packet+0x2aa>
    2d0c:	40 9a       	sbi	0x08, 0	; 8
    2d0e:	40 98       	cbi	0x08, 0	; 8
    2d10:	89 e0       	ldi	r24, 0x09	; 9
    2d12:	8e bd       	out	0x2e, r24	; 46
    2d14:	0d b4       	in	r0, 0x2d	; 45
    2d16:	07 fe       	sbrs	r0, 7
    2d18:	fd cf       	rjmp	.-6      	; 0x2d14 <rf_tx_tdma_packet+0x2b8>
    2d1a:	40 9a       	sbi	0x08, 0	; 8
    2d1c:	40 98       	cbi	0x08, 0	; 8
    2d1e:	89 e0       	ldi	r24, 0x09	; 9
    2d20:	8e bd       	out	0x2e, r24	; 46
    2d22:	0d b4       	in	r0, 0x2d	; 45
    2d24:	07 fe       	sbrs	r0, 7
    2d26:	fd cf       	rjmp	.-6      	; 0x2d22 <rf_tx_tdma_packet+0x2c6>
    2d28:	40 9a       	sbi	0x08, 0	; 8
    2d2a:	40 98       	cbi	0x08, 0	; 8
    2d2c:	86 e0       	ldi	r24, 0x06	; 6
    2d2e:	8e bd       	out	0x2e, r24	; 46
    2d30:	0d b4       	in	r0, 0x2d	; 45
    2d32:	07 fe       	sbrs	r0, 7
    2d34:	fd cf       	rjmp	.-6      	; 0x2d30 <rf_tx_tdma_packet+0x2d4>
    2d36:	40 9a       	sbi	0x08, 0	; 8
    2d38:	78 94       	sei
    2d3a:	80 91 f4 06 	lds	r24, 0x06F4
    2d3e:	8f 5f       	subi	r24, 0xFF	; 255
    2d40:	80 93 f4 06 	sts	0x06F4, r24
    2d44:	80 91 ed 06 	lds	r24, 0x06ED
    2d48:	90 91 ee 06 	lds	r25, 0x06EE
    2d4c:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	10 c0       	rjmp	.+32     	; 0x2d76 <rf_tx_tdma_packet+0x31a>
    2d56:	40 9a       	sbi	0x08, 0	; 8
    2d58:	f8 01       	movw	r30, r16
    2d5a:	86 81       	ldd	r24, Z+6	; 0x06
    2d5c:	88 23       	and	r24, r24
    2d5e:	09 f0       	breq	.+2      	; 0x2d62 <rf_tx_tdma_packet+0x306>
    2d60:	e5 ce       	rjmp	.-566    	; 0x2b2c <rf_tx_tdma_packet+0xd0>
    2d62:	81 e4       	ldi	r24, 0x41	; 65
    2d64:	98 e8       	ldi	r25, 0x88	; 136
    2d66:	e4 ce       	rjmp	.-568    	; 0x2b30 <rf_tx_tdma_packet+0xd4>
    2d68:	40 9a       	sbi	0x08, 0	; 8
    2d6a:	40 98       	cbi	0x08, 0	; 8
    2d6c:	8e e3       	ldi	r24, 0x3E	; 62
    2d6e:	8e bd       	out	0x2e, r24	; 46
    2d70:	05 cf       	rjmp	.-502    	; 0x2b7c <rf_tx_tdma_packet+0x120>
    2d72:	40 9a       	sbi	0x08, 0	; 8
    2d74:	b9 cf       	rjmp	.-142    	; 0x2ce8 <rf_tx_tdma_packet+0x28c>
    2d76:	22 96       	adiw	r28, 0x02	; 2
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	1f 91       	pop	r17
    2d88:	0f 91       	pop	r16
    2d8a:	ff 90       	pop	r15
    2d8c:	ef 90       	pop	r14
    2d8e:	df 90       	pop	r13
    2d90:	cf 90       	pop	r12
    2d92:	bf 90       	pop	r11
    2d94:	9f 90       	pop	r9
    2d96:	8f 90       	pop	r8
    2d98:	08 95       	ret

00002d9a <rf_addr_decode_set_my_mac>:
				}
			}else if(channel==AUDIO_P2P)
			{
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	22 97       	sbiw	r28, 0x02	; 2
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	9a 83       	std	Y+2, r25	; 0x02
    2db0:	89 83       	std	Y+1, r24	; 0x01
			      uint8_t i;
				max=0;
    2db2:	90 93 f9 06 	sts	0x06F9, r25
    2db6:	80 93 f8 06 	sts	0x06F8, r24
			        min=1025;
    2dba:	84 ef       	ldi	r24, 0xF4	; 244
    2dbc:	91 e0       	ldi	r25, 0x01	; 1
    2dbe:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
			      for(i=0; i<64; i++ )
    2dc2:	40 98       	cbi	0x08, 0	; 8
    2dc4:	8a ee       	ldi	r24, 0xEA	; 234
    2dc6:	8e bd       	out	0x2e, r24	; 46
    2dc8:	0d b4       	in	r0, 0x2d	; 45
    2dca:	07 fe       	sbrs	r0, 7
    2dcc:	fd cf       	rjmp	.-6      	; 0x2dc8 <rf_addr_decode_set_my_mac+0x2e>
    2dce:	80 e8       	ldi	r24, 0x80	; 128
    2dd0:	8e bd       	out	0x2e, r24	; 46
    2dd2:	0d b4       	in	r0, 0x2d	; 45
    2dd4:	07 fe       	sbrs	r0, 7
    2dd6:	fd cf       	rjmp	.-6      	; 0x2dd2 <rf_addr_decode_set_my_mac+0x38>
    2dd8:	fe 01       	movw	r30, r28
    2dda:	31 96       	adiw	r30, 0x01	; 1
    2ddc:	9e 01       	movw	r18, r28
    2dde:	2d 5f       	subi	r18, 0xFD	; 253
    2de0:	3f 4f       	sbci	r19, 0xFF	; 255
    2de2:	80 81       	ld	r24, Z
    2de4:	8e bd       	out	0x2e, r24	; 46
    2de6:	0d b4       	in	r0, 0x2d	; 45
    2de8:	07 fe       	sbrs	r0, 7
    2dea:	fd cf       	rjmp	.-6      	; 0x2de6 <rf_addr_decode_set_my_mac+0x4c>
    2dec:	31 96       	adiw	r30, 0x01	; 1
    2dee:	e2 17       	cp	r30, r18
    2df0:	f3 07       	cpc	r31, r19
    2df2:	b9 f7       	brne	.-18     	; 0x2de2 <rf_addr_decode_set_my_mac+0x48>
    2df4:	40 9a       	sbi	0x08, 0	; 8
				{
    2df6:	84 ef       	ldi	r24, 0xF4	; 244
    2df8:	91 e0       	ldi	r25, 0x01	; 1
    2dfa:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
    2dfe:	22 96       	adiw	r28, 0x02	; 2
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	df 91       	pop	r29
    2e0c:	cf 91       	pop	r28
    2e0e:	08 95       	ret

00002e10 <rf_security_set_key>:
#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)
    2e10:	6f 92       	push	r6
    2e12:	7f 92       	push	r7
    2e14:	8f 92       	push	r8
    2e16:	9f 92       	push	r9
    2e18:	af 92       	push	r10
    2e1a:	bf 92       	push	r11
    2e1c:	cf 92       	push	r12
    2e1e:	df 92       	push	r13
    2e20:	ef 92       	push	r14
    2e22:	ff 92       	push	r15
    2e24:	0f 93       	push	r16
    2e26:	1f 93       	push	r17
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	22 97       	sbiw	r28, 0x02	; 2
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	8c 01       	movw	r16, r24

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

    2e3e:	84 e6       	ldi	r24, 0x64	; 100
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
    2e46:	78 01       	movw	r14, r16
    2e48:	c1 2c       	mov	r12, r1
    2e4a:	b1 e0       	ldi	r27, 0x01	; 1
    2e4c:	db 2e       	mov	r13, r27
#define ADC_SAMPLE_SINGLE() \
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
} while(0)
    2e4e:	3e 01       	movw	r6, r28
    2e50:	08 94       	sec
    2e52:	61 1c       	adc	r6, r1
    2e54:	71 1c       	adc	r7, r1
    2e56:	a3 e0       	ldi	r26, 0x03	; 3
    2e58:	8a 2e       	mov	r8, r26
    2e5a:	91 2c       	mov	r9, r1
    2e5c:	8c 0e       	add	r8, r28
    2e5e:	9d 1e       	adc	r9, r29
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    do { \
ADCSRA |= BM(ADSC); \
    2e60:	f7 01       	movw	r30, r14
    2e62:	80 81       	ld	r24, Z
    2e64:	21 81       	ldd	r18, Z+1	; 0x01
    2e66:	33 27       	eor	r19, r19
    2e68:	99 27       	eor	r25, r25
    2e6a:	98 2f       	mov	r25, r24
    2e6c:	88 27       	eor	r24, r24
    2e6e:	28 2b       	or	r18, r24
    2e70:	39 2b       	or	r19, r25
    2e72:	3a 83       	std	Y+2, r19	; 0x02
    2e74:	29 83       	std	Y+1, r18	; 0x01
while (!(ADCSRA & 0x10)); \
    2e76:	84 e6       	ldi	r24, 0x64	; 100
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
} while(0)
    2e7e:	40 98       	cbi	0x08, 0	; 8
    2e80:	8c 2d       	mov	r24, r12
    2e82:	80 68       	ori	r24, 0x80	; 128
    2e84:	8e bd       	out	0x2e, r24	; 46
    2e86:	0d b4       	in	r0, 0x2d	; 45
    2e88:	07 fe       	sbrs	r0, 7
    2e8a:	fd cf       	rjmp	.-6      	; 0x2e86 <rf_security_set_key+0x76>
    2e8c:	c6 01       	movw	r24, r12
    2e8e:	95 95       	asr	r25
    2e90:	87 95       	ror	r24
    2e92:	80 7c       	andi	r24, 0xC0	; 192
    2e94:	8e bd       	out	0x2e, r24	; 46
    2e96:	0d b4       	in	r0, 0x2d	; 45
    2e98:	07 fe       	sbrs	r0, 7
    2e9a:	fd cf       	rjmp	.-6      	; 0x2e96 <rf_security_set_key+0x86>
    2e9c:	83 01       	movw	r16, r6
    2e9e:	53 01       	movw	r10, r6
    2ea0:	f5 01       	movw	r30, r10
    2ea2:	80 81       	ld	r24, Z
    2ea4:	8e bd       	out	0x2e, r24	; 46
    2ea6:	0d b4       	in	r0, 0x2d	; 45
    2ea8:	07 fe       	sbrs	r0, 7
    2eaa:	fd cf       	rjmp	.-6      	; 0x2ea6 <rf_security_set_key+0x96>
    2eac:	08 94       	sec
    2eae:	a1 1c       	adc	r10, r1
    2eb0:	b1 1c       	adc	r11, r1
    2eb2:	a8 14       	cp	r10, r8
    2eb4:	b9 04       	cpc	r11, r9
    2eb6:	a1 f7       	brne	.-24     	; 0x2ea0 <rf_security_set_key+0x90>
    2eb8:	40 9a       	sbi	0x08, 0	; 8
    2eba:	08 94       	sec
    2ebc:	e1 1c       	adc	r14, r1
    2ebe:	f1 1c       	adc	r15, r1
    2ec0:	82 e0       	ldi	r24, 0x02	; 2
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	c8 0e       	add	r12, r24
    2ec6:	d9 1e       	adc	r13, r25

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    2ec8:	90 e1       	ldi	r25, 0x10	; 16
    2eca:	c9 16       	cp	r12, r25
    2ecc:	91 e0       	ldi	r25, 0x01	; 1
    2ece:	d9 06       	cpc	r13, r25
    2ed0:	39 f6       	brne	.-114    	; 0x2e60 <rf_security_set_key+0x50>
while (!(ADCSRA & 0x10)); \
} while(0)

// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
do { \
    2ed2:	84 e6       	ldi	r24, 0x64	; 100
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
    2eda:	20 e1       	ldi	r18, 0x10	; 16
    2edc:	31 e0       	ldi	r19, 0x01	; 1
    2ede:	40 e4       	ldi	r20, 0x40	; 64
    2ee0:	51 e0       	ldi	r21, 0x01	; 1
x =  ADCL; \
x |= ADCH << 8; \
} while (0)
    2ee2:	1a 82       	std	Y+2, r1	; 0x02
    2ee4:	19 82       	std	Y+1, r1	; 0x01

    2ee6:	40 98       	cbi	0x08, 0	; 8
    2ee8:	84 2f       	mov	r24, r20
    2eea:	80 68       	ori	r24, 0x80	; 128
    2eec:	8e bd       	out	0x2e, r24	; 46
    2eee:	0d b4       	in	r0, 0x2d	; 45
    2ef0:	07 fe       	sbrs	r0, 7
    2ef2:	fd cf       	rjmp	.-6      	; 0x2eee <rf_security_set_key+0xde>
    2ef4:	ca 01       	movw	r24, r20
    2ef6:	95 95       	asr	r25
    2ef8:	87 95       	ror	r24
    2efa:	80 7c       	andi	r24, 0xC0	; 192
    2efc:	8e bd       	out	0x2e, r24	; 46
    2efe:	0d b4       	in	r0, 0x2d	; 45
    2f00:	07 fe       	sbrs	r0, 7
    2f02:	fd cf       	rjmp	.-6      	; 0x2efe <rf_security_set_key+0xee>
    2f04:	f8 01       	movw	r30, r16
    2f06:	80 81       	ld	r24, Z
    2f08:	8e bd       	out	0x2e, r24	; 46
    2f0a:	0d b4       	in	r0, 0x2d	; 45
    2f0c:	07 fe       	sbrs	r0, 7
    2f0e:	fd cf       	rjmp	.-6      	; 0x2f0a <rf_security_set_key+0xfa>
    2f10:	31 96       	adiw	r30, 0x01	; 1
    2f12:	ea 15       	cp	r30, r10
    2f14:	fb 05       	cpc	r31, r11
    2f16:	b9 f7       	brne	.-18     	; 0x2f06 <rf_security_set_key+0xf6>
    2f18:	40 9a       	sbi	0x08, 0	; 8
#define ADC_GET_SAMPLE_8(x) \
    2f1a:	40 98       	cbi	0x08, 0	; 8
    2f1c:	82 2f       	mov	r24, r18
    2f1e:	80 68       	ori	r24, 0x80	; 128
    2f20:	8e bd       	out	0x2e, r24	; 46
    2f22:	0d b4       	in	r0, 0x2d	; 45
    2f24:	07 fe       	sbrs	r0, 7
    2f26:	fd cf       	rjmp	.-6      	; 0x2f22 <rf_security_set_key+0x112>
    2f28:	c9 01       	movw	r24, r18
    2f2a:	95 95       	asr	r25
    2f2c:	87 95       	ror	r24
    2f2e:	80 7c       	andi	r24, 0xC0	; 192
    2f30:	8e bd       	out	0x2e, r24	; 46
    2f32:	0d b4       	in	r0, 0x2d	; 45
    2f34:	07 fe       	sbrs	r0, 7
    2f36:	fd cf       	rjmp	.-6      	; 0x2f32 <rf_security_set_key+0x122>
    2f38:	f8 01       	movw	r30, r16
    2f3a:	80 81       	ld	r24, Z
    2f3c:	8e bd       	out	0x2e, r24	; 46
    2f3e:	0d b4       	in	r0, 0x2d	; 45
    2f40:	07 fe       	sbrs	r0, 7
    2f42:	fd cf       	rjmp	.-6      	; 0x2f3e <rf_security_set_key+0x12e>
    2f44:	31 96       	adiw	r30, 0x01	; 1
    2f46:	ea 15       	cp	r30, r10
    2f48:	fb 05       	cpc	r31, r11
    2f4a:	b9 f7       	brne	.-18     	; 0x2f3a <rf_security_set_key+0x12a>
    2f4c:	40 9a       	sbi	0x08, 0	; 8
    2f4e:	2e 5f       	subi	r18, 0xFE	; 254
    2f50:	3f 4f       	sbci	r19, 0xFF	; 255
    2f52:	4e 5f       	subi	r20, 0xFE	; 254
    2f54:	5f 4f       	sbci	r21, 0xFF	; 255
} while(0)

// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
do { \
x =  ADCL; \
    2f56:	e1 e0       	ldi	r30, 0x01	; 1
    2f58:	2e 31       	cpi	r18, 0x1E	; 30
    2f5a:	3e 07       	cpc	r19, r30
    2f5c:	11 f6       	brne	.-124    	; 0x2ee2 <rf_security_set_key+0xd2>
} while (0)

#define ADC_GET_SAMPLE_8(x) \
do { \
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	9a 83       	std	Y+2, r25	; 0x02
    2f64:	89 83       	std	Y+1, r24	; 0x01
} while (0)
    2f66:	40 98       	cbi	0x08, 0	; 8
    2f68:	8e ec       	ldi	r24, 0xCE	; 206
    2f6a:	8e bd       	out	0x2e, r24	; 46
    2f6c:	0d b4       	in	r0, 0x2d	; 45
    2f6e:	07 fe       	sbrs	r0, 7
    2f70:	fd cf       	rjmp	.-6      	; 0x2f6c <rf_security_set_key+0x15c>
    2f72:	80 e8       	ldi	r24, 0x80	; 128
    2f74:	8e bd       	out	0x2e, r24	; 46
    2f76:	0d b4       	in	r0, 0x2d	; 45
    2f78:	07 fe       	sbrs	r0, 7
    2f7a:	fd cf       	rjmp	.-6      	; 0x2f76 <rf_security_set_key+0x166>
    2f7c:	f8 01       	movw	r30, r16
    2f7e:	80 81       	ld	r24, Z
    2f80:	8e bd       	out	0x2e, r24	; 46
    2f82:	0d b4       	in	r0, 0x2d	; 45
    2f84:	07 fe       	sbrs	r0, 7
    2f86:	fd cf       	rjmp	.-6      	; 0x2f82 <rf_security_set_key+0x172>
    2f88:	31 96       	adiw	r30, 0x01	; 1
    2f8a:	ea 15       	cp	r30, r10
    2f8c:	fb 05       	cpc	r31, r11
    2f8e:	b9 f7       	brne	.-18     	; 0x2f7e <rf_security_set_key+0x16e>
    2f90:	40 9a       	sbi	0x08, 0	; 8

    2f92:	40 98       	cbi	0x08, 0	; 8
    2f94:	8e e9       	ldi	r24, 0x9E	; 158
    2f96:	8e bd       	out	0x2e, r24	; 46
    2f98:	0d b4       	in	r0, 0x2d	; 45
    2f9a:	07 fe       	sbrs	r0, 7
    2f9c:	fd cf       	rjmp	.-6      	; 0x2f98 <rf_security_set_key+0x188>
    2f9e:	80 e8       	ldi	r24, 0x80	; 128
    2fa0:	8e bd       	out	0x2e, r24	; 46
    2fa2:	0d b4       	in	r0, 0x2d	; 45
    2fa4:	07 fe       	sbrs	r0, 7
    2fa6:	fd cf       	rjmp	.-6      	; 0x2fa2 <rf_security_set_key+0x192>
    2fa8:	f8 01       	movw	r30, r16
    2faa:	80 81       	ld	r24, Z
    2fac:	8e bd       	out	0x2e, r24	; 46
    2fae:	0d b4       	in	r0, 0x2d	; 45
    2fb0:	07 fe       	sbrs	r0, 7
    2fb2:	fd cf       	rjmp	.-6      	; 0x2fae <rf_security_set_key+0x19e>
    2fb4:	0f 5f       	subi	r16, 0xFF	; 255
    2fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb8:	0a 15       	cp	r16, r10
    2fba:	1b 05       	cpc	r17, r11
    2fbc:	a9 f7       	brne	.-22     	; 0x2fa8 <rf_security_set_key+0x198>
    2fbe:	40 9a       	sbi	0x08, 0	; 8
    2fc0:	22 96       	adiw	r28, 0x02	; 2
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	1f 91       	pop	r17
    2fd2:	0f 91       	pop	r16
    2fd4:	ff 90       	pop	r15
    2fd6:	ef 90       	pop	r14
    2fd8:	df 90       	pop	r13
    2fda:	cf 90       	pop	r12
    2fdc:	bf 90       	pop	r11
    2fde:	af 90       	pop	r10
    2fe0:	9f 90       	pop	r9
    2fe2:	8f 90       	pop	r8
    2fe4:	7f 90       	pop	r7
    2fe6:	6f 90       	pop	r6
    2fe8:	08 95       	ret

00002fea <rf_set_rx>:
				val=get_adc_val();
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
				}
    2fea:	1f 93       	push	r17
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	ec 01       	movw	r28, r24
    2ff2:	16 2f       	mov	r17, r22
			 	val=max-min;	
				if(size==2)
			      	{
    2ff4:	80 91 ed 06 	lds	r24, 0x06ED
    2ff8:	90 91 ee 06 	lds	r25, 0x06EE
    2ffc:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    3000:	40 98       	cbi	0x08, 0	; 8
    3002:	88 e0       	ldi	r24, 0x08	; 8
    3004:	8e bd       	out	0x2e, r24	; 46
    3006:	0d b4       	in	r0, 0x2d	; 45
    3008:	07 fe       	sbrs	r0, 7
    300a:	fd cf       	rjmp	.-6      	; 0x3006 <rf_set_rx+0x1c>
    300c:	40 9a       	sbi	0x08, 0	; 8
				}
    300e:	40 98       	cbi	0x08, 0	; 8
    3010:	88 e0       	ldi	r24, 0x08	; 8
    3012:	8e bd       	out	0x2e, r24	; 46
    3014:	0d b4       	in	r0, 0x2d	; 45
    3016:	07 fe       	sbrs	r0, 7
    3018:	fd cf       	rjmp	.-6      	; 0x3014 <rf_set_rx+0x2a>
    301a:	40 9a       	sbi	0x08, 0	; 8

    301c:	81 2f       	mov	r24, r17
    301e:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <halRfSetChannel>
				if(size==1)
    3022:	d0 93 f3 06 	sts	0x06F3, r29
    3026:	c0 93 f2 06 	sts	0x06F2, r28
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}
    302a:	80 91 ed 06 	lds	r24, 0x06ED
    302e:	90 91 ee 06 	lds	r25, 0x06EE
    3032:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    3036:	df 91       	pop	r29
    3038:	cf 91       	pop	r28
    303a:	1f 91       	pop	r17
    303c:	08 95       	ret

0000303e <rf_set_channel>:
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
		    else return NRK_OK;
		
	    

    303e:	1f 93       	push	r17
    3040:	18 2f       	mov	r17, r24
             case READ:
	     	      count=0;
    3042:	80 91 ed 06 	lds	r24, 0x06ED
    3046:	90 91 ee 06 	lds	r25, 0x06EE
    304a:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
    304e:	81 2f       	mov	r24, r17
    3050:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <halRfSetChannel>
			{
			      /* Conversion to 8-bit value*/
    3054:	80 91 ed 06 	lds	r24, 0x06ED
    3058:	90 91 ee 06 	lds	r25, 0x06EE
    305c:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>
    3060:	1f 91       	pop	r17
    3062:	08 95       	ret

00003064 <rf_init>:
  			if(key==SENSOR_SELECT) 
			{
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
			  {
				channel=value;
    3064:	df 92       	push	r13
    3066:	ef 92       	push	r14
    3068:	ff 92       	push	r15
    306a:	0f 93       	push	r16
    306c:	1f 93       	push	r17
    306e:	cf 93       	push	r28
    3070:	df 93       	push	r29
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	22 97       	sbiw	r28, 0x02	; 2
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	8c 01       	movw	r16, r24
    3084:	d6 2e       	mov	r13, r22
    3086:	5a 83       	std	Y+2, r21	; 0x02
    3088:	49 83       	std	Y+1, r20	; 0x01
    308a:	79 01       	movw	r14, r18
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
				ADC_SET_CHANNEL (AUDIO);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;
    308c:	64 e1       	ldi	r22, 0x14	; 20
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	0e 94 9a 23 	call	0x4734	; 0x4734 <nrk_sem_create>
    3094:	90 93 ee 06 	sts	0x06EE, r25
    3098:	80 93 ed 06 	sts	0x06ED, r24

    309c:	89 2b       	or	r24, r25
    309e:	31 f4       	brne	.+12     	; 0x30ac <rf_init+0x48>
			  } else
    30a0:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <nrk_get_pid>
    30a4:	68 2f       	mov	r22, r24
    30a6:	8f e0       	ldi	r24, 0x0F	; 15
    30a8:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <nrk_kernel_error_add>
			  {
				if(value>7) 
    30ac:	80 91 ed 06 	lds	r24, 0x06ED
    30b0:	90 91 ee 06 	lds	r25, 0x06EE
    30b4:	0e 94 67 25 	call	0x4ace	; 0x4ace <nrk_sem_pend>
				{
    30b8:	8f 3f       	cpi	r24, 0xFF	; 255
    30ba:	21 f4       	brne	.+8      	; 0x30c4 <rf_init+0x60>
					_nrk_errno_set(1);
    30bc:	8a e8       	ldi	r24, 0x8A	; 138
    30be:	91 e0       	ldi	r25, 0x01	; 1
    30c0:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <nrk_kprintf>
					return NRK_ERROR;
				}
				channel=value;
				if(channel==LIGHT)
				   ADC_VREF_VCC();	
    30c4:	15 9a       	sbi	0x02, 5	; 2
				else
    30c6:	88 ee       	ldi	r24, 0xE8	; 232
    30c8:	93 e0       	ldi	r25, 0x03	; 3
    30ca:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <halWait>
				   ADC_VREF_2_56();	
    30ce:	16 98       	cbi	0x02, 6	; 2
				ADC_SET_CHANNEL (channel);
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <halWait>
				nrk_spin_wait_us(ADC_SETUP_DELAY);
    30d8:	16 9a       	sbi	0x02, 6	; 2
				return NRK_OK;
    30da:	84 e6       	ldi	r24, 0x64	; 100
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <halWait>
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
	}
    30e2:	f8 94       	cli
}


    30e4:	40 98       	cbi	0x08, 0	; 8
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	8e bd       	out	0x2e, r24	; 46
    30ea:	0d b4       	in	r0, 0x2d	; 45
    30ec:	07 fe       	sbrs	r0, 7
    30ee:	fd cf       	rjmp	.-6      	; 0x30ea <rf_init+0x86>
    30f0:	40 9a       	sbi	0x08, 0	; 8
// read_voltage_status()
    30f2:	82 ee       	ldi	r24, 0xE2	; 226
    30f4:	92 e0       	ldi	r25, 0x02	; 2
    30f6:	90 93 f1 06 	sts	0x06F1, r25
    30fa:	80 93 f0 06 	sts	0x06F0, r24
//
    30fe:	40 98       	cbi	0x08, 0	; 8
    3100:	81 e1       	ldi	r24, 0x11	; 17
    3102:	8e bd       	out	0x2e, r24	; 46
    3104:	0d b4       	in	r0, 0x2d	; 45
    3106:	07 fe       	sbrs	r0, 7
    3108:	fd cf       	rjmp	.-6      	; 0x3104 <rf_init+0xa0>
    310a:	82 e0       	ldi	r24, 0x02	; 2
    310c:	8e bd       	out	0x2e, r24	; 46
    310e:	0d b4       	in	r0, 0x2d	; 45
    3110:	07 fe       	sbrs	r0, 7
    3112:	fd cf       	rjmp	.-6      	; 0x310e <rf_init+0xaa>
    3114:	82 ee       	ldi	r24, 0xE2	; 226
    3116:	8e bd       	out	0x2e, r24	; 46
    3118:	0d b4       	in	r0, 0x2d	; 45
    311a:	07 fe       	sbrs	r0, 7
    311c:	fd cf       	rjmp	.-6      	; 0x3118 <rf_init+0xb4>
    311e:	40 9a       	sbi	0x08, 0	; 8
// This function sets different voltage threshold levels on
// the cc2420 chip to search for the voltage.
// If the voltage is above 3.3 volts, then the ADC reads
    3120:	40 98       	cbi	0x08, 0	; 8
    3122:	82 e1       	ldi	r24, 0x12	; 18
    3124:	8e bd       	out	0x2e, r24	; 46
    3126:	0d b4       	in	r0, 0x2d	; 45
    3128:	07 fe       	sbrs	r0, 7
    312a:	fd cf       	rjmp	.-6      	; 0x3126 <rf_init+0xc2>
    312c:	85 e0       	ldi	r24, 0x05	; 5
    312e:	8e bd       	out	0x2e, r24	; 46
    3130:	0d b4       	in	r0, 0x2d	; 45
    3132:	07 fe       	sbrs	r0, 7
    3134:	fd cf       	rjmp	.-6      	; 0x3130 <rf_init+0xcc>
    3136:	1e bc       	out	0x2e, r1	; 46
    3138:	0d b4       	in	r0, 0x2d	; 45
    313a:	07 fe       	sbrs	r0, 7
    313c:	fd cf       	rjmp	.-6      	; 0x3138 <rf_init+0xd4>
    313e:	40 9a       	sbi	0x08, 0	; 8
// the external voltage value going through a voltage divider.
    3140:	40 98       	cbi	0x08, 0	; 8
    3142:	8c e1       	ldi	r24, 0x1C	; 28
    3144:	8e bd       	out	0x2e, r24	; 46
    3146:	0d b4       	in	r0, 0x2d	; 45
    3148:	07 fe       	sbrs	r0, 7
    314a:	fd cf       	rjmp	.-6      	; 0x3146 <rf_init+0xe2>
    314c:	1e bc       	out	0x2e, r1	; 46
    314e:	0d b4       	in	r0, 0x2d	; 45
    3150:	07 fe       	sbrs	r0, 7
    3152:	fd cf       	rjmp	.-6      	; 0x314e <rf_init+0xea>
    3154:	8f e7       	ldi	r24, 0x7F	; 127
    3156:	8e bd       	out	0x2e, r24	; 46
    3158:	0d b4       	in	r0, 0x2d	; 45
    315a:	07 fe       	sbrs	r0, 7
    315c:	fd cf       	rjmp	.-6      	; 0x3158 <rf_init+0xf4>
    315e:	40 9a       	sbi	0x08, 0	; 8
// This function will return VOLTS*100
    3160:	40 98       	cbi	0x08, 0	; 8
    3162:	89 e1       	ldi	r24, 0x19	; 25
    3164:	8e bd       	out	0x2e, r24	; 46
    3166:	0d b4       	in	r0, 0x2d	; 45
    3168:	07 fe       	sbrs	r0, 7
    316a:	fd cf       	rjmp	.-6      	; 0x3166 <rf_init+0x102>
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	8e bd       	out	0x2e, r24	; 46
    3170:	0d b4       	in	r0, 0x2d	; 45
    3172:	07 fe       	sbrs	r0, 7
    3174:	fd cf       	rjmp	.-6      	; 0x3170 <rf_init+0x10c>
    3176:	84 ec       	ldi	r24, 0xC4	; 196
    3178:	8e bd       	out	0x2e, r24	; 46
    317a:	0d b4       	in	r0, 0x2d	; 45
    317c:	07 fe       	sbrs	r0, 7
    317e:	fd cf       	rjmp	.-6      	; 0x317a <rf_init+0x116>
    3180:	40 9a       	sbi	0x08, 0	; 8
uint16_t read_voltage_status()
    3182:	40 98       	cbi	0x08, 0	; 8
    3184:	87 e1       	ldi	r24, 0x17	; 23
    3186:	8e bd       	out	0x2e, r24	; 46
    3188:	0d b4       	in	r0, 0x2d	; 45
    318a:	07 fe       	sbrs	r0, 7
    318c:	fd cf       	rjmp	.-6      	; 0x3188 <rf_init+0x124>
    318e:	8a e1       	ldi	r24, 0x1A	; 26
    3190:	8e bd       	out	0x2e, r24	; 46
    3192:	0d b4       	in	r0, 0x2d	; 45
    3194:	07 fe       	sbrs	r0, 7
    3196:	fd cf       	rjmp	.-6      	; 0x3192 <rf_init+0x12e>
    3198:	86 e5       	ldi	r24, 0x56	; 86
    319a:	8e bd       	out	0x2e, r24	; 46
    319c:	0d b4       	in	r0, 0x2d	; 45
    319e:	07 fe       	sbrs	r0, 7
    31a0:	fd cf       	rjmp	.-6      	; 0x319c <rf_init+0x138>
    31a2:	40 9a       	sbi	0x08, 0	; 8

level=0;
while(level<0x1F)
{
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
    31a4:	84 ef       	ldi	r24, 0xF4	; 244
    31a6:	91 e0       	ldi	r25, 0x01	; 1
    31a8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
nrk_spin_wait_us(2);
    31ac:	40 98       	cbi	0x08, 0	; 8
    31ae:	88 ee       	ldi	r24, 0xE8	; 232
    31b0:	8e bd       	out	0x2e, r24	; 46
    31b2:	0d b4       	in	r0, 0x2d	; 45
    31b4:	07 fe       	sbrs	r0, 7
    31b6:	fd cf       	rjmp	.-6      	; 0x31b2 <rf_init+0x14e>
    31b8:	80 e8       	ldi	r24, 0x80	; 128
    31ba:	8e bd       	out	0x2e, r24	; 46
    31bc:	0d b4       	in	r0, 0x2d	; 45
    31be:	07 fe       	sbrs	r0, 7
    31c0:	fd cf       	rjmp	.-6      	; 0x31bc <rf_init+0x158>
    31c2:	fe 01       	movw	r30, r28
    31c4:	31 96       	adiw	r30, 0x01	; 1
    31c6:	9e 01       	movw	r18, r28
    31c8:	2d 5f       	subi	r18, 0xFD	; 253
    31ca:	3f 4f       	sbci	r19, 0xFF	; 255
    31cc:	80 81       	ld	r24, Z
    31ce:	8e bd       	out	0x2e, r24	; 46
    31d0:	0d b4       	in	r0, 0x2d	; 45
    31d2:	07 fe       	sbrs	r0, 7
    31d4:	fd cf       	rjmp	.-6      	; 0x31d0 <rf_init+0x16c>
    31d6:	31 96       	adiw	r30, 0x01	; 1
    31d8:	e2 17       	cp	r30, r18
    31da:	f3 07       	cpc	r31, r19
    31dc:	b9 f7       	brne	.-18     	; 0x31cc <rf_init+0x168>
    31de:	40 9a       	sbi	0x08, 0	; 8
FASTSPI_GETREG(CC2420_BATTMON, val);
    31e0:	84 ef       	ldi	r24, 0xF4	; 244
    31e2:	91 e0       	ldi	r25, 0x01	; 1
    31e4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
if(val&0x0040) break; 
level++;
    31e8:	78 94       	sei
}
if(radio_sem!=NULL)
 nrk_sem_post(radio_sem);
    31ea:	8d 2d       	mov	r24, r13
    31ec:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <halRfSetChannel>
if(level==0)
  {
  val=get_adc_val();
    31f0:	78 94       	sei
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
  if(val<330) val=330;
    31f2:	10 93 f3 06 	sts	0x06F3, r17
    31f6:	00 93 f2 06 	sts	0x06F2, r16
  }
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
    31fc:	9a 81       	ldd	r25, Y+2	; 0x02
    31fe:	90 93 f7 06 	sts	0x06F7, r25
    3202:	80 93 f6 06 	sts	0x06F6, r24
else val=(9000-(level*125)) / 27;
    3206:	f0 92 f9 06 	sts	0x06F9, r15
    320a:	e0 92 f8 06 	sts	0x06F8, r14

    320e:	10 92 f4 06 	sts	0x06F4, r1
return val;
    3212:	10 92 fa 06 	sts	0x06FA, r1
}


    3216:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <halRfWaitForCrystalOscillator>
// Initialize values here
  ADC_INIT ();
  ADC_ENABLE ();
  channel=0;
  ADC_SET_CHANNEL (0);
}
    321a:	80 91 ed 06 	lds	r24, 0x06ED
    321e:	90 91 ee 06 	lds	r25, 0x06EE
    3222:	0e 94 15 24 	call	0x482a	; 0x482a <nrk_sem_post>

    3226:	8f 3f       	cpi	r24, 0xFF	; 255
    3228:	39 f4       	brne	.+14     	; 0x3238 <rf_init+0x1d4>
uint16_t get_adc_val()
    322a:	8d e5       	ldi	r24, 0x5D	; 93
    322c:	91 e0       	ldi	r25, 0x01	; 1
    322e:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <nrk_kprintf>
{                         
    3232:	82 e0       	ldi	r24, 0x02	; 2
    3234:	0e 94 0c 21 	call	0x4218	; 0x4218 <_nrk_errno_set>
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
	delay();
	ADC_GET_SAMPLE_10(adc_val);
    3238:	10 92 fd 06 	sts	0x06FD, r1
	return adc_val;
    323c:	10 92 ef 06 	sts	0x06EF, r1
}
    3240:	10 92 fe 06 	sts	0x06FE, r1
    3244:	22 96       	adiw	r28, 0x02	; 2
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	f8 94       	cli
    324a:	de bf       	out	0x3e, r29	; 62
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	cd bf       	out	0x3d, r28	; 61
    3250:	df 91       	pop	r29
    3252:	cf 91       	pop	r28
    3254:	1f 91       	pop	r17
    3256:	0f 91       	pop	r16
    3258:	ff 90       	pop	r15
    325a:	ef 90       	pop	r14
    325c:	df 90       	pop	r13
    325e:	08 95       	ret

00003260 <getc1>:
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
    3260:	20 91 16 07 	lds	r18, 0x0716
    3264:	80 91 04 07 	lds	r24, 0x0704
    3268:	28 17       	cp	r18, r24
    326a:	81 f0       	breq	.+32     	; 0x328c <getc1+0x2c>
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

    326c:	e2 2f       	mov	r30, r18
    326e:	ff 27       	eor	r31, r31
    3270:	eb 5f       	subi	r30, 0xFB	; 251
    3272:	f8 4f       	sbci	r31, 0xF8	; 248
    3274:	e0 81       	ld	r30, Z
#define ADC_SAMPLE_SINGLE() \
    3276:	82 2f       	mov	r24, r18
    3278:	8f 5f       	subi	r24, 0xFF	; 255
    327a:	80 93 16 07 	sts	0x0716, r24
    do { \
    327e:	80 31       	cpi	r24, 0x10	; 16
    3280:	11 f4       	brne	.+4      	; 0x3286 <getc1+0x26>
    3282:	10 92 16 07 	sts	0x0716, r1
ADCSRA |= BM(ADSC); \
    3286:	8e 2f       	mov	r24, r30
    3288:	99 27       	eor	r25, r25
    328a:	08 95       	ret
while (!(ADCSRA & 0x10)); \
} while(0)

    328c:	80 91 c8 00 	lds	r24, 0x00C8
    3290:	87 ff       	sbrs	r24, 7
    3292:	fc cf       	rjmp	.-8      	; 0x328c <getc1+0x2c>
    3294:	80 91 c8 00 	lds	r24, 0x00C8
    3298:	8f 77       	andi	r24, 0x7F	; 127
    329a:	80 93 c8 00 	sts	0x00C8, r24
    329e:	80 91 ce 00 	lds	r24, 0x00CE
// Macros for obtaining the latest sample value
    32a2:	99 27       	eor	r25, r25
#define ADC_GET_SAMPLE_10(x) \
    32a4:	08 95       	ret

000032a6 <nrk_uart_data_ready>:
do { \
x =  ADCL; \
x |= ADCH << 8; \
} while (0)
    32a6:	88 23       	and	r24, r24
    32a8:	51 f4       	brne	.+20     	; 0x32be <nrk_uart_data_ready+0x18>

#define ADC_GET_SAMPLE_8(x) \
    32aa:	80 91 c0 00 	lds	r24, 0x00C0
    32ae:	99 27       	eor	r25, r25
    32b0:	87 fd       	sbrc	r24, 7
    32b2:	90 95       	com	r25
    32b4:	88 27       	eor	r24, r24
    32b6:	99 0f       	add	r25, r25
    32b8:	88 1f       	adc	r24, r24
    32ba:	99 27       	eor	r25, r25
    32bc:	08 95       	ret
do { \
x = ((uint8_t) ADCL) >> 2; \
    32be:	81 30       	cpi	r24, 0x01	; 1
    32c0:	19 f0       	breq	.+6      	; 0x32c8 <nrk_uart_data_ready+0x22>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	08 95       	ret
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	90 91 16 07 	lds	r25, 0x0716
    32d0:	80 91 04 07 	lds	r24, 0x0704
    32d4:	98 17       	cp	r25, r24
    32d6:	11 f0       	breq	.+4      	; 0x32dc <nrk_uart_data_ready+0x36>
    32d8:	21 e0       	ldi	r18, 0x01	; 1
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	c9 01       	movw	r24, r18
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
    32de:	08 95       	ret

000032e0 <PORT_INIT>:
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}

			}
			
    32e0:	85 b7       	in	r24, 0x35	; 53
    32e2:	80 61       	ori	r24, 0x10	; 16
    32e4:	85 bf       	out	0x35, r24	; 53
		      count++;
    32e6:	86 e0       	ldi	r24, 0x06	; 6
    32e8:	84 b9       	out	0x04, r24	; 4
                      return count;
    32ea:	87 e0       	ldi	r24, 0x07	; 7
    32ec:	85 b9       	out	0x05, r24	; 5

    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	87 b9       	out	0x07, r24	; 7
             case CLOSE:
    32f2:	88 b9       	out	0x08, r24	; 8
			// Turn off sensor power
    32f4:	8c e3       	ldi	r24, 0x3C	; 60
    32f6:	8d b9       	out	0x0d, r24	; 13
			PORTF |= PWR_CTRL_MASK;
    32f8:	8b e0       	ldi	r24, 0x0B	; 11
    32fa:	8a b9       	out	0x0a, r24	; 10
		    	is_open=0; 
    32fc:	8e e3       	ldi	r24, 0x3E	; 62
    32fe:	8e b9       	out	0x0e, r24	; 14
                        return NRK_OK;
    3300:	88 e7       	ldi	r24, 0x78	; 120
    3302:	81 b9       	out	0x01, r24	; 1
             
    3304:	80 e4       	ldi	r24, 0x40	; 64
    3306:	82 b9       	out	0x02, r24	; 2
    3308:	08 95       	ret

0000330a <nrk_setup_ports>:
	    

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
    330a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <PORT_INIT>
			{
    330e:	80 e5       	ldi	r24, 0x50	; 80
    3310:	8c bd       	out	0x2c, r24	; 44
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	8d bd       	out	0x2d, r24	; 45
    3316:	08 95       	ret

00003318 <nrk_gpio_set>:
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
			{
			// Set to audio channel if it is an average value
    3318:	8f 3f       	cpi	r24, 0xFF	; 255
    331a:	09 f4       	brne	.+2      	; 0x331e <nrk_gpio_set+0x6>
    331c:	7f c0       	rjmp	.+254    	; 0x341c <nrk_gpio_set+0x104>
			if(value==AUDIO_P2P) 
    331e:	48 2f       	mov	r20, r24
    3320:	55 27       	eor	r21, r21
    3322:	9a 01       	movw	r18, r20
    3324:	27 70       	andi	r18, 0x07	; 7
    3326:	30 70       	andi	r19, 0x00	; 0
    3328:	22 30       	cpi	r18, 0x02	; 2
    332a:	31 05       	cpc	r19, r1
    332c:	a9 f1       	breq	.+106    	; 0x3398 <nrk_gpio_set+0x80>
    332e:	23 30       	cpi	r18, 0x03	; 3
    3330:	31 05       	cpc	r19, r1
    3332:	44 f4       	brge	.+16     	; 0x3344 <nrk_gpio_set+0x2c>
    3334:	21 15       	cp	r18, r1
    3336:	31 05       	cpc	r19, r1
    3338:	89 f0       	breq	.+34     	; 0x335c <nrk_gpio_set+0x44>
    333a:	21 30       	cpi	r18, 0x01	; 1
    333c:	31 05       	cpc	r19, r1
    333e:	09 f0       	breq	.+2      	; 0x3342 <nrk_gpio_set+0x2a>
    3340:	6d c0       	rjmp	.+218    	; 0x341c <nrk_gpio_set+0x104>
    3342:	1c c0       	rjmp	.+56     	; 0x337c <nrk_gpio_set+0x64>
    3344:	24 30       	cpi	r18, 0x04	; 4
    3346:	31 05       	cpc	r19, r1
    3348:	09 f4       	brne	.+2      	; 0x334c <nrk_gpio_set+0x34>
    334a:	46 c0       	rjmp	.+140    	; 0x33d8 <nrk_gpio_set+0xc0>
    334c:	24 30       	cpi	r18, 0x04	; 4
    334e:	31 05       	cpc	r19, r1
    3350:	9c f1       	brlt	.+102    	; 0x33b8 <nrk_gpio_set+0xa0>
    3352:	25 30       	cpi	r18, 0x05	; 5
    3354:	31 05       	cpc	r19, r1
    3356:	09 f0       	breq	.+2      	; 0x335a <nrk_gpio_set+0x42>
    3358:	61 c0       	rjmp	.+194    	; 0x341c <nrk_gpio_set+0x104>
    335a:	4e c0       	rjmp	.+156    	; 0x33f8 <nrk_gpio_set+0xe0>
			  {
				channel=value;
    335c:	22 b1       	in	r18, 0x02	; 2
    335e:	a3 e0       	ldi	r26, 0x03	; 3
    3360:	56 95       	lsr	r21
    3362:	47 95       	ror	r20
    3364:	aa 95       	dec	r26
    3366:	e1 f7       	brne	.-8      	; 0x3360 <nrk_gpio_set+0x48>
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	02 c0       	rjmp	.+4      	; 0x3372 <nrk_gpio_set+0x5a>
    336e:	88 0f       	add	r24, r24
    3370:	99 1f       	adc	r25, r25
    3372:	4a 95       	dec	r20
    3374:	e2 f7       	brpl	.-8      	; 0x336e <nrk_gpio_set+0x56>
    3376:	28 2b       	or	r18, r24
    3378:	22 b9       	out	0x02, r18	; 2
    337a:	4d c0       	rjmp	.+154    	; 0x3416 <nrk_gpio_set+0xfe>
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
    337c:	85 b1       	in	r24, 0x05	; 5
    337e:	f3 e0       	ldi	r31, 0x03	; 3
    3380:	56 95       	lsr	r21
    3382:	47 95       	ror	r20
    3384:	fa 95       	dec	r31
    3386:	e1 f7       	brne	.-8      	; 0x3380 <nrk_gpio_set+0x68>
    3388:	02 c0       	rjmp	.+4      	; 0x338e <nrk_gpio_set+0x76>
    338a:	22 0f       	add	r18, r18
    338c:	33 1f       	adc	r19, r19
    338e:	4a 95       	dec	r20
    3390:	e2 f7       	brpl	.-8      	; 0x338a <nrk_gpio_set+0x72>
    3392:	82 2b       	or	r24, r18
    3394:	85 b9       	out	0x05, r24	; 5
    3396:	3f c0       	rjmp	.+126    	; 0x3416 <nrk_gpio_set+0xfe>
				ADC_SET_CHANNEL (AUDIO);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
    3398:	28 b1       	in	r18, 0x08	; 8
    339a:	e3 e0       	ldi	r30, 0x03	; 3
    339c:	56 95       	lsr	r21
    339e:	47 95       	ror	r20
    33a0:	ea 95       	dec	r30
    33a2:	e1 f7       	brne	.-8      	; 0x339c <nrk_gpio_set+0x84>
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	02 c0       	rjmp	.+4      	; 0x33ae <nrk_gpio_set+0x96>
    33aa:	88 0f       	add	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	4a 95       	dec	r20
    33b0:	e2 f7       	brpl	.-8      	; 0x33aa <nrk_gpio_set+0x92>
    33b2:	28 2b       	or	r18, r24
    33b4:	28 b9       	out	0x08, r18	; 8
    33b6:	2f c0       	rjmp	.+94     	; 0x3416 <nrk_gpio_set+0xfe>
				return NRK_OK;

    33b8:	2b b1       	in	r18, 0x0b	; 11
    33ba:	73 e0       	ldi	r23, 0x03	; 3
    33bc:	56 95       	lsr	r21
    33be:	47 95       	ror	r20
    33c0:	7a 95       	dec	r23
    33c2:	e1 f7       	brne	.-8      	; 0x33bc <nrk_gpio_set+0xa4>
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	02 c0       	rjmp	.+4      	; 0x33ce <nrk_gpio_set+0xb6>
    33ca:	88 0f       	add	r24, r24
    33cc:	99 1f       	adc	r25, r25
    33ce:	4a 95       	dec	r20
    33d0:	e2 f7       	brpl	.-8      	; 0x33ca <nrk_gpio_set+0xb2>
    33d2:	28 2b       	or	r18, r24
    33d4:	2b b9       	out	0x0b, r18	; 11
    33d6:	1f c0       	rjmp	.+62     	; 0x3416 <nrk_gpio_set+0xfe>
			  } else
			  {
    33d8:	2e b1       	in	r18, 0x0e	; 14
    33da:	63 e0       	ldi	r22, 0x03	; 3
    33dc:	56 95       	lsr	r21
    33de:	47 95       	ror	r20
    33e0:	6a 95       	dec	r22
    33e2:	e1 f7       	brne	.-8      	; 0x33dc <nrk_gpio_set+0xc4>
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	02 c0       	rjmp	.+4      	; 0x33ee <nrk_gpio_set+0xd6>
    33ea:	88 0f       	add	r24, r24
    33ec:	99 1f       	adc	r25, r25
    33ee:	4a 95       	dec	r20
    33f0:	e2 f7       	brpl	.-8      	; 0x33ea <nrk_gpio_set+0xd2>
    33f2:	28 2b       	or	r18, r24
    33f4:	2e b9       	out	0x0e, r18	; 14
    33f6:	0f c0       	rjmp	.+30     	; 0x3416 <nrk_gpio_set+0xfe>
				if(value>7) 
				{
    33f8:	21 b3       	in	r18, 0x11	; 17
    33fa:	33 e0       	ldi	r19, 0x03	; 3
    33fc:	56 95       	lsr	r21
    33fe:	47 95       	ror	r20
    3400:	3a 95       	dec	r19
    3402:	e1 f7       	brne	.-8      	; 0x33fc <nrk_gpio_set+0xe4>
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	02 c0       	rjmp	.+4      	; 0x340e <nrk_gpio_set+0xf6>
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	4a 95       	dec	r20
    3410:	e2 f7       	brpl	.-8      	; 0x340a <nrk_gpio_set+0xf2>
    3412:	28 2b       	or	r18, r24
    3414:	21 bb       	out	0x11, r18	; 17
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	08 95       	ret
    341c:	8f ef       	ldi	r24, 0xFF	; 255
    341e:	9f ef       	ldi	r25, 0xFF	; 255
					_nrk_errno_set(1);
					return NRK_ERROR;
				}
				channel=value;
    3420:	08 95       	ret

00003422 <nrk_gpio_clr>:
				if(channel==LIGHT)
				   ADC_VREF_VCC();	
				else
				   ADC_VREF_2_56();	
    3422:	8f 3f       	cpi	r24, 0xFF	; 255
    3424:	09 f4       	brne	.+2      	; 0x3428 <nrk_gpio_clr+0x6>
    3426:	86 c0       	rjmp	.+268    	; 0x3534 <nrk_gpio_clr+0x112>
				ADC_SET_CHANNEL (channel);
    3428:	48 2f       	mov	r20, r24
    342a:	55 27       	eor	r21, r21
    342c:	9a 01       	movw	r18, r20
    342e:	27 70       	andi	r18, 0x07	; 7
    3430:	30 70       	andi	r19, 0x00	; 0
    3432:	22 30       	cpi	r18, 0x02	; 2
    3434:	31 05       	cpc	r19, r1
    3436:	c1 f1       	breq	.+112    	; 0x34a8 <nrk_gpio_clr+0x86>
    3438:	23 30       	cpi	r18, 0x03	; 3
    343a:	31 05       	cpc	r19, r1
    343c:	44 f4       	brge	.+16     	; 0x344e <nrk_gpio_clr+0x2c>
    343e:	21 15       	cp	r18, r1
    3440:	31 05       	cpc	r19, r1
    3442:	89 f0       	breq	.+34     	; 0x3466 <nrk_gpio_clr+0x44>
    3444:	21 30       	cpi	r18, 0x01	; 1
    3446:	31 05       	cpc	r19, r1
    3448:	09 f0       	breq	.+2      	; 0x344c <nrk_gpio_clr+0x2a>
    344a:	74 c0       	rjmp	.+232    	; 0x3534 <nrk_gpio_clr+0x112>
    344c:	1d c0       	rjmp	.+58     	; 0x3488 <nrk_gpio_clr+0x66>
    344e:	24 30       	cpi	r18, 0x04	; 4
    3450:	31 05       	cpc	r19, r1
    3452:	09 f4       	brne	.+2      	; 0x3456 <nrk_gpio_clr+0x34>
    3454:	4b c0       	rjmp	.+150    	; 0x34ec <nrk_gpio_clr+0xca>
    3456:	24 30       	cpi	r18, 0x04	; 4
    3458:	31 05       	cpc	r19, r1
    345a:	bc f1       	brlt	.+110    	; 0x34ca <nrk_gpio_clr+0xa8>
    345c:	25 30       	cpi	r18, 0x05	; 5
    345e:	31 05       	cpc	r19, r1
    3460:	09 f0       	breq	.+2      	; 0x3464 <nrk_gpio_clr+0x42>
    3462:	68 c0       	rjmp	.+208    	; 0x3534 <nrk_gpio_clr+0x112>
    3464:	54 c0       	rjmp	.+168    	; 0x350e <nrk_gpio_clr+0xec>
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;
    3466:	22 b1       	in	r18, 0x02	; 2
    3468:	73 e0       	ldi	r23, 0x03	; 3
    346a:	56 95       	lsr	r21
    346c:	47 95       	ror	r20
    346e:	7a 95       	dec	r23
    3470:	e1 f7       	brne	.-8      	; 0x346a <nrk_gpio_clr+0x48>
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	02 c0       	rjmp	.+4      	; 0x347c <nrk_gpio_clr+0x5a>
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	4a 95       	dec	r20
    347e:	e2 f7       	brpl	.-8      	; 0x3478 <nrk_gpio_clr+0x56>
    3480:	80 95       	com	r24
    3482:	82 23       	and	r24, r18
    3484:	82 b9       	out	0x02, r24	; 2
    3486:	53 c0       	rjmp	.+166    	; 0x352e <nrk_gpio_clr+0x10c>
			  }
			}
    3488:	95 b1       	in	r25, 0x05	; 5
    348a:	63 e0       	ldi	r22, 0x03	; 3
    348c:	56 95       	lsr	r21
    348e:	47 95       	ror	r20
    3490:	6a 95       	dec	r22
    3492:	e1 f7       	brne	.-8      	; 0x348c <nrk_gpio_clr+0x6a>
    3494:	02 c0       	rjmp	.+4      	; 0x349a <nrk_gpio_clr+0x78>
    3496:	22 0f       	add	r18, r18
    3498:	33 1f       	adc	r19, r19
    349a:	4a 95       	dec	r20
    349c:	e2 f7       	brpl	.-8      	; 0x3496 <nrk_gpio_clr+0x74>
    349e:	82 2f       	mov	r24, r18
    34a0:	80 95       	com	r24
    34a2:	89 23       	and	r24, r25
    34a4:	85 b9       	out	0x05, r24	; 5
    34a6:	43 c0       	rjmp	.+134    	; 0x352e <nrk_gpio_clr+0x10c>
			return NRK_ERROR;
	     default:
    34a8:	28 b1       	in	r18, 0x08	; 8
    34aa:	33 e0       	ldi	r19, 0x03	; 3
    34ac:	56 95       	lsr	r21
    34ae:	47 95       	ror	r20
    34b0:	3a 95       	dec	r19
    34b2:	e1 f7       	brne	.-8      	; 0x34ac <nrk_gpio_clr+0x8a>
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	02 c0       	rjmp	.+4      	; 0x34be <nrk_gpio_clr+0x9c>
    34ba:	88 0f       	add	r24, r24
    34bc:	99 1f       	adc	r25, r25
    34be:	4a 95       	dec	r20
    34c0:	e2 f7       	brpl	.-8      	; 0x34ba <nrk_gpio_clr+0x98>
    34c2:	80 95       	com	r24
    34c4:	82 23       	and	r24, r18
    34c6:	88 b9       	out	0x08, r24	; 8
    34c8:	32 c0       	rjmp	.+100    	; 0x352e <nrk_gpio_clr+0x10c>
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
    34ca:	2b b1       	in	r18, 0x0b	; 11
    34cc:	93 e0       	ldi	r25, 0x03	; 3
    34ce:	56 95       	lsr	r21
    34d0:	47 95       	ror	r20
    34d2:	9a 95       	dec	r25
    34d4:	e1 f7       	brne	.-8      	; 0x34ce <nrk_gpio_clr+0xac>
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	02 c0       	rjmp	.+4      	; 0x34e0 <nrk_gpio_clr+0xbe>
    34dc:	88 0f       	add	r24, r24
    34de:	99 1f       	adc	r25, r25
    34e0:	4a 95       	dec	r20
    34e2:	e2 f7       	brpl	.-8      	; 0x34dc <nrk_gpio_clr+0xba>
    34e4:	80 95       	com	r24
    34e6:	82 23       	and	r24, r18
    34e8:	8b b9       	out	0x0b, r24	; 11
    34ea:	21 c0       	rjmp	.+66     	; 0x352e <nrk_gpio_clr+0x10c>
	}
}
    34ec:	2e b1       	in	r18, 0x0e	; 14
    34ee:	83 e0       	ldi	r24, 0x03	; 3
    34f0:	56 95       	lsr	r21
    34f2:	47 95       	ror	r20
    34f4:	8a 95       	dec	r24
    34f6:	e1 f7       	brne	.-8      	; 0x34f0 <nrk_gpio_clr+0xce>
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <nrk_gpio_clr+0xe0>
    34fe:	88 0f       	add	r24, r24
    3500:	99 1f       	adc	r25, r25
    3502:	4a 95       	dec	r20
    3504:	e2 f7       	brpl	.-8      	; 0x34fe <nrk_gpio_clr+0xdc>
    3506:	80 95       	com	r24
    3508:	82 23       	and	r24, r18
    350a:	8e b9       	out	0x0e, r24	; 14
    350c:	10 c0       	rjmp	.+32     	; 0x352e <nrk_gpio_clr+0x10c>


    350e:	21 b3       	in	r18, 0x11	; 17
    3510:	b3 e0       	ldi	r27, 0x03	; 3
    3512:	56 95       	lsr	r21
    3514:	47 95       	ror	r20
    3516:	ba 95       	dec	r27
    3518:	e1 f7       	brne	.-8      	; 0x3512 <nrk_gpio_clr+0xf0>
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	02 c0       	rjmp	.+4      	; 0x3524 <nrk_gpio_clr+0x102>
    3520:	88 0f       	add	r24, r24
    3522:	99 1f       	adc	r25, r25
    3524:	4a 95       	dec	r20
    3526:	e2 f7       	brpl	.-8      	; 0x3520 <nrk_gpio_clr+0xfe>
    3528:	80 95       	com	r24
    352a:	82 23       	and	r24, r18
    352c:	81 bb       	out	0x11, r24	; 17
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	08 95       	ret
    3534:	8f ef       	ldi	r24, 0xFF	; 255
    3536:	9f ef       	ldi	r25, 0xFF	; 255
// read_voltage_status()
//
// This function sets different voltage threshold levels on
// the cc2420 chip to search for the voltage.
    3538:	08 95       	ret

0000353a <nrk_gpio_get>:
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
    353a:	8f 3f       	cpi	r24, 0xFF	; 255
    353c:	a9 f1       	breq	.+106    	; 0x35a8 <nrk_gpio_get+0x6e>
{
    353e:	28 2f       	mov	r18, r24
    3540:	33 27       	eor	r19, r19
    3542:	c9 01       	movw	r24, r18
    3544:	87 70       	andi	r24, 0x07	; 7
    3546:	90 70       	andi	r25, 0x00	; 0
    3548:	82 30       	cpi	r24, 0x02	; 2
    354a:	91 05       	cpc	r25, r1
    354c:	a9 f0       	breq	.+42     	; 0x3578 <nrk_gpio_get+0x3e>
    354e:	83 30       	cpi	r24, 0x03	; 3
    3550:	91 05       	cpc	r25, r1
    3552:	2c f4       	brge	.+10     	; 0x355e <nrk_gpio_get+0x24>
    3554:	00 97       	sbiw	r24, 0x00	; 0
    3556:	61 f0       	breq	.+24     	; 0x3570 <nrk_gpio_get+0x36>
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	31 f5       	brne	.+76     	; 0x35a8 <nrk_gpio_get+0x6e>
    355c:	0b c0       	rjmp	.+22     	; 0x3574 <nrk_gpio_get+0x3a>
    355e:	84 30       	cpi	r24, 0x04	; 4
    3560:	91 05       	cpc	r25, r1
    3562:	71 f0       	breq	.+28     	; 0x3580 <nrk_gpio_get+0x46>
    3564:	84 30       	cpi	r24, 0x04	; 4
    3566:	91 05       	cpc	r25, r1
    3568:	4c f0       	brlt	.+18     	; 0x357c <nrk_gpio_get+0x42>
    356a:	05 97       	sbiw	r24, 0x05	; 5
    356c:	e9 f4       	brne	.+58     	; 0x35a8 <nrk_gpio_get+0x6e>
    356e:	0a c0       	rjmp	.+20     	; 0x3584 <nrk_gpio_get+0x4a>
volatile uint16_t val;
uint8_t check,level;
    3570:	80 b1       	in	r24, 0x00	; 0
    3572:	09 c0       	rjmp	.+18     	; 0x3586 <nrk_gpio_get+0x4c>
nrk_sem_t *radio_sem;

    3574:	83 b1       	in	r24, 0x03	; 3
    3576:	07 c0       	rjmp	.+14     	; 0x3586 <nrk_gpio_get+0x4c>
radio_sem= rf_get_sem();

    3578:	86 b1       	in	r24, 0x06	; 6
    357a:	05 c0       	rjmp	.+10     	; 0x3586 <nrk_gpio_get+0x4c>
// if semaphore not created, then assume you own the radio 
if(radio_sem!=NULL)
    357c:	89 b1       	in	r24, 0x09	; 9
    357e:	03 c0       	rjmp	.+6      	; 0x3586 <nrk_gpio_get+0x4c>
 nrk_sem_pend (radio_sem);

    3580:	8c b1       	in	r24, 0x0c	; 12
    3582:	01 c0       	rjmp	.+2      	; 0x3586 <nrk_gpio_get+0x4c>
    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    3584:	8f b1       	in	r24, 0x0f	; 15
    3586:	99 27       	eor	r25, r25
    3588:	e3 e0       	ldi	r30, 0x03	; 3
    358a:	36 95       	lsr	r19
    358c:	27 95       	ror	r18
    358e:	ea 95       	dec	r30
    3590:	e1 f7       	brne	.-8      	; 0x358a <nrk_gpio_get+0x50>
    3592:	02 c0       	rjmp	.+4      	; 0x3598 <nrk_gpio_get+0x5e>
    3594:	95 95       	asr	r25
    3596:	87 95       	ror	r24
    3598:	2a 95       	dec	r18
    359a:	e2 f7       	brpl	.-8      	; 0x3594 <nrk_gpio_get+0x5a>
    359c:	99 27       	eor	r25, r25
    359e:	87 fd       	sbrc	r24, 7
    35a0:	90 95       	com	r25
    35a2:	81 70       	andi	r24, 0x01	; 1
    35a4:	90 70       	andi	r25, 0x00	; 0
    35a6:	08 95       	ret
    35a8:	8f ef       	ldi	r24, 0xFF	; 255
    35aa:	9f ef       	ldi	r25, 0xFF	; 255
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
    35ac:	08 95       	ret

000035ae <nrk_gpio_toggle>:
{
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
nrk_spin_wait_us(2);
    35ae:	8f 3f       	cpi	r24, 0xFF	; 255
    35b0:	09 f4       	brne	.+2      	; 0x35b4 <nrk_gpio_toggle+0x6>
    35b2:	03 c1       	rjmp	.+518    	; 0x37ba <nrk_gpio_toggle+0x20c>
FASTSPI_GETREG(CC2420_BATTMON, val);
    35b4:	28 2f       	mov	r18, r24
    35b6:	33 27       	eor	r19, r19
    35b8:	a9 01       	movw	r20, r18
    35ba:	47 70       	andi	r20, 0x07	; 7
    35bc:	50 70       	andi	r21, 0x00	; 0
    35be:	42 30       	cpi	r20, 0x02	; 2
    35c0:	51 05       	cpc	r21, r1
    35c2:	09 f4       	brne	.+2      	; 0x35c6 <nrk_gpio_toggle+0x18>
    35c4:	5c c0       	rjmp	.+184    	; 0x367e <nrk_gpio_toggle+0xd0>
    35c6:	43 30       	cpi	r20, 0x03	; 3
    35c8:	51 05       	cpc	r21, r1
    35ca:	44 f4       	brge	.+16     	; 0x35dc <nrk_gpio_toggle+0x2e>
    35cc:	41 15       	cp	r20, r1
    35ce:	51 05       	cpc	r21, r1
    35d0:	91 f0       	breq	.+36     	; 0x35f6 <nrk_gpio_toggle+0x48>
    35d2:	41 30       	cpi	r20, 0x01	; 1
    35d4:	51 05       	cpc	r21, r1
    35d6:	09 f0       	breq	.+2      	; 0x35da <nrk_gpio_toggle+0x2c>
    35d8:	f0 c0       	rjmp	.+480    	; 0x37ba <nrk_gpio_toggle+0x20c>
    35da:	34 c0       	rjmp	.+104    	; 0x3644 <nrk_gpio_toggle+0x96>
    35dc:	44 30       	cpi	r20, 0x04	; 4
    35de:	51 05       	cpc	r21, r1
    35e0:	09 f4       	brne	.+2      	; 0x35e4 <nrk_gpio_toggle+0x36>
    35e2:	9b c0       	rjmp	.+310    	; 0x371a <nrk_gpio_toggle+0x16c>
    35e4:	44 30       	cpi	r20, 0x04	; 4
    35e6:	51 05       	cpc	r21, r1
    35e8:	0c f4       	brge	.+2      	; 0x35ec <nrk_gpio_toggle+0x3e>
    35ea:	70 c0       	rjmp	.+224    	; 0x36cc <nrk_gpio_toggle+0x11e>
    35ec:	45 30       	cpi	r20, 0x05	; 5
    35ee:	51 05       	cpc	r21, r1
    35f0:	09 f0       	breq	.+2      	; 0x35f4 <nrk_gpio_toggle+0x46>
    35f2:	e3 c0       	rjmp	.+454    	; 0x37ba <nrk_gpio_toggle+0x20c>
    35f4:	b9 c0       	rjmp	.+370    	; 0x3768 <nrk_gpio_toggle+0x1ba>
if(val&0x0040) break; 
level++;
    35f6:	80 b1       	in	r24, 0x00	; 0
    35f8:	a9 01       	movw	r20, r18
    35fa:	73 e0       	ldi	r23, 0x03	; 3
    35fc:	56 95       	lsr	r21
    35fe:	47 95       	ror	r20
    3600:	7a 95       	dec	r23
    3602:	e1 f7       	brne	.-8      	; 0x35fc <nrk_gpio_toggle+0x4e>
    3604:	99 27       	eor	r25, r25
    3606:	04 2e       	mov	r0, r20
    3608:	02 c0       	rjmp	.+4      	; 0x360e <nrk_gpio_toggle+0x60>
    360a:	95 95       	asr	r25
    360c:	87 95       	ror	r24
    360e:	0a 94       	dec	r0
    3610:	e2 f7       	brpl	.-8      	; 0x360a <nrk_gpio_toggle+0x5c>
    3612:	80 fd       	sbrc	r24, 0
    3614:	0b c0       	rjmp	.+22     	; 0x362c <nrk_gpio_toggle+0x7e>
}
    3616:	22 b1       	in	r18, 0x02	; 2
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <nrk_gpio_toggle+0x74>
    361e:	88 0f       	add	r24, r24
    3620:	99 1f       	adc	r25, r25
    3622:	4a 95       	dec	r20
    3624:	e2 f7       	brpl	.-8      	; 0x361e <nrk_gpio_toggle+0x70>
    3626:	28 2b       	or	r18, r24
    3628:	22 b9       	out	0x02, r18	; 2
    362a:	c4 c0       	rjmp	.+392    	; 0x37b4 <nrk_gpio_toggle+0x206>
if(radio_sem!=NULL)
 nrk_sem_post(radio_sem);
    362c:	22 b1       	in	r18, 0x02	; 2
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	02 c0       	rjmp	.+4      	; 0x3638 <nrk_gpio_toggle+0x8a>
    3634:	88 0f       	add	r24, r24
    3636:	99 1f       	adc	r25, r25
    3638:	4a 95       	dec	r20
    363a:	e2 f7       	brpl	.-8      	; 0x3634 <nrk_gpio_toggle+0x86>
    363c:	80 95       	com	r24
    363e:	82 23       	and	r24, r18
    3640:	82 b9       	out	0x02, r24	; 2
    3642:	b8 c0       	rjmp	.+368    	; 0x37b4 <nrk_gpio_toggle+0x206>
if(level==0)
  {
  val=get_adc_val();
  // FIXME:  This probably isn't correct...
    3644:	83 b1       	in	r24, 0x03	; 3
    3646:	63 e0       	ldi	r22, 0x03	; 3
    3648:	36 95       	lsr	r19
    364a:	27 95       	ror	r18
    364c:	6a 95       	dec	r22
    364e:	e1 f7       	brne	.-8      	; 0x3648 <nrk_gpio_toggle+0x9a>
    3650:	99 27       	eor	r25, r25
    3652:	02 2e       	mov	r0, r18
    3654:	02 c0       	rjmp	.+4      	; 0x365a <nrk_gpio_toggle+0xac>
    3656:	95 95       	asr	r25
    3658:	87 95       	ror	r24
    365a:	0a 94       	dec	r0
    365c:	e2 f7       	brpl	.-8      	; 0x3656 <nrk_gpio_toggle+0xa8>
    365e:	02 c0       	rjmp	.+4      	; 0x3664 <nrk_gpio_toggle+0xb6>
    3660:	44 0f       	add	r20, r20
    3662:	55 1f       	adc	r21, r21
    3664:	2a 95       	dec	r18
    3666:	e2 f7       	brpl	.-8      	; 0x3660 <nrk_gpio_toggle+0xb2>
    3668:	80 fd       	sbrc	r24, 0
    366a:	03 c0       	rjmp	.+6      	; 0x3672 <nrk_gpio_toggle+0xc4>
  if(val>174) val-=174;
    366c:	85 b1       	in	r24, 0x05	; 5
    366e:	84 2b       	or	r24, r20
    3670:	04 c0       	rjmp	.+8      	; 0x367a <nrk_gpio_toggle+0xcc>
  if(val<330) val=330;
  }
    3672:	95 b1       	in	r25, 0x05	; 5
    3674:	84 2f       	mov	r24, r20
    3676:	80 95       	com	r24
    3678:	89 23       	and	r24, r25
    367a:	85 b9       	out	0x05, r24	; 5
    367c:	9b c0       	rjmp	.+310    	; 0x37b4 <nrk_gpio_toggle+0x206>
else val=(9000-(level*125)) / 27;

return val;
}
    367e:	86 b1       	in	r24, 0x06	; 6
    3680:	a9 01       	movw	r20, r18
    3682:	93 e0       	ldi	r25, 0x03	; 3
    3684:	56 95       	lsr	r21
    3686:	47 95       	ror	r20
    3688:	9a 95       	dec	r25
    368a:	e1 f7       	brne	.-8      	; 0x3684 <nrk_gpio_toggle+0xd6>
    368c:	99 27       	eor	r25, r25
    368e:	04 2e       	mov	r0, r20
    3690:	02 c0       	rjmp	.+4      	; 0x3696 <nrk_gpio_toggle+0xe8>
    3692:	95 95       	asr	r25
    3694:	87 95       	ror	r24
    3696:	0a 94       	dec	r0
    3698:	e2 f7       	brpl	.-8      	; 0x3692 <nrk_gpio_toggle+0xe4>
    369a:	80 fd       	sbrc	r24, 0
    369c:	0b c0       	rjmp	.+22     	; 0x36b4 <nrk_gpio_toggle+0x106>

    369e:	28 b1       	in	r18, 0x08	; 8
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	02 c0       	rjmp	.+4      	; 0x36aa <nrk_gpio_toggle+0xfc>
    36a6:	88 0f       	add	r24, r24
    36a8:	99 1f       	adc	r25, r25
    36aa:	4a 95       	dec	r20
    36ac:	e2 f7       	brpl	.-8      	; 0x36a6 <nrk_gpio_toggle+0xf8>
    36ae:	28 2b       	or	r18, r24
    36b0:	28 b9       	out	0x08, r18	; 8
    36b2:	80 c0       	rjmp	.+256    	; 0x37b4 <nrk_gpio_toggle+0x206>


    36b4:	28 b1       	in	r18, 0x08	; 8
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	02 c0       	rjmp	.+4      	; 0x36c0 <nrk_gpio_toggle+0x112>
    36bc:	88 0f       	add	r24, r24
    36be:	99 1f       	adc	r25, r25
    36c0:	4a 95       	dec	r20
    36c2:	e2 f7       	brpl	.-8      	; 0x36bc <nrk_gpio_toggle+0x10e>
    36c4:	80 95       	com	r24
    36c6:	82 23       	and	r24, r18
    36c8:	88 b9       	out	0x08, r24	; 8
    36ca:	74 c0       	rjmp	.+232    	; 0x37b4 <nrk_gpio_toggle+0x206>
void init_adc()
{
// Initialize values here
  ADC_INIT ();
    36cc:	89 b1       	in	r24, 0x09	; 9
    36ce:	a9 01       	movw	r20, r18
    36d0:	b3 e0       	ldi	r27, 0x03	; 3
    36d2:	56 95       	lsr	r21
    36d4:	47 95       	ror	r20
    36d6:	ba 95       	dec	r27
    36d8:	e1 f7       	brne	.-8      	; 0x36d2 <nrk_gpio_toggle+0x124>
    36da:	99 27       	eor	r25, r25
    36dc:	04 2e       	mov	r0, r20
    36de:	02 c0       	rjmp	.+4      	; 0x36e4 <nrk_gpio_toggle+0x136>
    36e0:	95 95       	asr	r25
    36e2:	87 95       	ror	r24
    36e4:	0a 94       	dec	r0
    36e6:	e2 f7       	brpl	.-8      	; 0x36e0 <nrk_gpio_toggle+0x132>
    36e8:	80 fd       	sbrc	r24, 0
    36ea:	0b c0       	rjmp	.+22     	; 0x3702 <nrk_gpio_toggle+0x154>
  ADC_ENABLE ();
    36ec:	2b b1       	in	r18, 0x0b	; 11
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	02 c0       	rjmp	.+4      	; 0x36f8 <nrk_gpio_toggle+0x14a>
    36f4:	88 0f       	add	r24, r24
    36f6:	99 1f       	adc	r25, r25
    36f8:	4a 95       	dec	r20
    36fa:	e2 f7       	brpl	.-8      	; 0x36f4 <nrk_gpio_toggle+0x146>
    36fc:	28 2b       	or	r18, r24
    36fe:	2b b9       	out	0x0b, r18	; 11
    3700:	59 c0       	rjmp	.+178    	; 0x37b4 <nrk_gpio_toggle+0x206>
  channel=0;
  ADC_SET_CHANNEL (0);
    3702:	2b b1       	in	r18, 0x0b	; 11
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	02 c0       	rjmp	.+4      	; 0x370e <nrk_gpio_toggle+0x160>
    370a:	88 0f       	add	r24, r24
    370c:	99 1f       	adc	r25, r25
    370e:	4a 95       	dec	r20
    3710:	e2 f7       	brpl	.-8      	; 0x370a <nrk_gpio_toggle+0x15c>
    3712:	80 95       	com	r24
    3714:	82 23       	and	r24, r18
    3716:	8b b9       	out	0x0b, r24	; 11
    3718:	4d c0       	rjmp	.+154    	; 0x37b4 <nrk_gpio_toggle+0x206>
}

uint16_t get_adc_val()
{                         
    371a:	8c b1       	in	r24, 0x0c	; 12
    371c:	a9 01       	movw	r20, r18
    371e:	a3 e0       	ldi	r26, 0x03	; 3
    3720:	56 95       	lsr	r21
    3722:	47 95       	ror	r20
    3724:	aa 95       	dec	r26
    3726:	e1 f7       	brne	.-8      	; 0x3720 <nrk_gpio_toggle+0x172>
    3728:	99 27       	eor	r25, r25
    372a:	04 2e       	mov	r0, r20
    372c:	02 c0       	rjmp	.+4      	; 0x3732 <nrk_gpio_toggle+0x184>
    372e:	95 95       	asr	r25
    3730:	87 95       	ror	r24
    3732:	0a 94       	dec	r0
    3734:	e2 f7       	brpl	.-8      	; 0x372e <nrk_gpio_toggle+0x180>
    3736:	80 fd       	sbrc	r24, 0
    3738:	0b c0       	rjmp	.+22     	; 0x3750 <nrk_gpio_toggle+0x1a2>
	uint16_t adc_val;
    373a:	2e b1       	in	r18, 0x0e	; 14
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	02 c0       	rjmp	.+4      	; 0x3746 <nrk_gpio_toggle+0x198>
    3742:	88 0f       	add	r24, r24
    3744:	99 1f       	adc	r25, r25
    3746:	4a 95       	dec	r20
    3748:	e2 f7       	brpl	.-8      	; 0x3742 <nrk_gpio_toggle+0x194>
    374a:	28 2b       	or	r18, r24
    374c:	2e b9       	out	0x0e, r18	; 14
    374e:	32 c0       	rjmp	.+100    	; 0x37b4 <nrk_gpio_toggle+0x206>
	ADC_SAMPLE_SINGLE();
	delay();
    3750:	2e b1       	in	r18, 0x0e	; 14
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	02 c0       	rjmp	.+4      	; 0x375c <nrk_gpio_toggle+0x1ae>
    3758:	88 0f       	add	r24, r24
    375a:	99 1f       	adc	r25, r25
    375c:	4a 95       	dec	r20
    375e:	e2 f7       	brpl	.-8      	; 0x3758 <nrk_gpio_toggle+0x1aa>
    3760:	80 95       	com	r24
    3762:	82 23       	and	r24, r18
    3764:	8e b9       	out	0x0e, r24	; 14
    3766:	26 c0       	rjmp	.+76     	; 0x37b4 <nrk_gpio_toggle+0x206>
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
    3768:	8f b1       	in	r24, 0x0f	; 15
    376a:	a9 01       	movw	r20, r18
    376c:	f3 e0       	ldi	r31, 0x03	; 3
    376e:	56 95       	lsr	r21
    3770:	47 95       	ror	r20
    3772:	fa 95       	dec	r31
    3774:	e1 f7       	brne	.-8      	; 0x376e <nrk_gpio_toggle+0x1c0>
    3776:	99 27       	eor	r25, r25
    3778:	04 2e       	mov	r0, r20
    377a:	02 c0       	rjmp	.+4      	; 0x3780 <nrk_gpio_toggle+0x1d2>
    377c:	95 95       	asr	r25
    377e:	87 95       	ror	r24
    3780:	0a 94       	dec	r0
    3782:	e2 f7       	brpl	.-8      	; 0x377c <nrk_gpio_toggle+0x1ce>
    3784:	80 fd       	sbrc	r24, 0
    3786:	0b c0       	rjmp	.+22     	; 0x379e <nrk_gpio_toggle+0x1f0>
{
    3788:	21 b3       	in	r18, 0x11	; 17
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	02 c0       	rjmp	.+4      	; 0x3794 <nrk_gpio_toggle+0x1e6>
    3790:	88 0f       	add	r24, r24
    3792:	99 1f       	adc	r25, r25
    3794:	4a 95       	dec	r20
    3796:	e2 f7       	brpl	.-8      	; 0x3790 <nrk_gpio_toggle+0x1e2>
    3798:	28 2b       	or	r18, r24
    379a:	21 bb       	out	0x11, r18	; 17
    379c:	0b c0       	rjmp	.+22     	; 0x37b4 <nrk_gpio_toggle+0x206>
  nrk_spin_wait_us(ADC_SETUP_DELAY);
}
    379e:	21 b3       	in	r18, 0x11	; 17
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	02 c0       	rjmp	.+4      	; 0x37aa <nrk_gpio_toggle+0x1fc>
    37a6:	88 0f       	add	r24, r24
    37a8:	99 1f       	adc	r25, r25
    37aa:	4a 95       	dec	r20
    37ac:	e2 f7       	brpl	.-8      	; 0x37a6 <nrk_gpio_toggle+0x1f8>
    37ae:	80 95       	com	r24
    37b0:	82 23       	and	r24, r18
    37b2:	81 bb       	out	0x11, r24	; 17
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	08 95       	ret
    37ba:	8f ef       	ldi	r24, 0xFF	; 255
    37bc:	9f ef       	ldi	r25, 0xFF	; 255
    37be:	08 95       	ret

000037c0 <nrk_gpio_direction>:
    37c0:	8f 3f       	cpi	r24, 0xFF	; 255
    37c2:	09 f4       	brne	.+2      	; 0x37c6 <nrk_gpio_direction+0x6>
    37c4:	12 c1       	rjmp	.+548    	; 0x39ea <nrk_gpio_direction+0x22a>
    37c6:	48 2f       	mov	r20, r24
    37c8:	55 27       	eor	r21, r21
    37ca:	66 23       	and	r22, r22
    37cc:	09 f0       	breq	.+2      	; 0x37d0 <nrk_gpio_direction+0x10>
    37ce:	90 c0       	rjmp	.+288    	; 0x38f0 <nrk_gpio_direction+0x130>
    37d0:	ca 01       	movw	r24, r20
    37d2:	87 70       	andi	r24, 0x07	; 7
    37d4:	90 70       	andi	r25, 0x00	; 0
    37d6:	82 30       	cpi	r24, 0x02	; 2
    37d8:	91 05       	cpc	r25, r1
    37da:	09 f4       	brne	.+2      	; 0x37de <nrk_gpio_direction+0x1e>
    37dc:	3e c0       	rjmp	.+124    	; 0x385a <nrk_gpio_direction+0x9a>
    37de:	83 30       	cpi	r24, 0x03	; 3
    37e0:	91 05       	cpc	r25, r1
    37e2:	3c f4       	brge	.+14     	; 0x37f2 <nrk_gpio_direction+0x32>
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	89 f0       	breq	.+34     	; 0x380a <nrk_gpio_direction+0x4a>
    37e8:	81 30       	cpi	r24, 0x01	; 1
    37ea:	91 05       	cpc	r25, r1
    37ec:	09 f0       	breq	.+2      	; 0x37f0 <nrk_gpio_direction+0x30>
    37ee:	fd c0       	rjmp	.+506    	; 0x39ea <nrk_gpio_direction+0x22a>
    37f0:	21 c0       	rjmp	.+66     	; 0x3834 <nrk_gpio_direction+0x74>
    37f2:	84 30       	cpi	r24, 0x04	; 4
    37f4:	91 05       	cpc	r25, r1
    37f6:	09 f4       	brne	.+2      	; 0x37fa <nrk_gpio_direction+0x3a>
    37f8:	54 c0       	rjmp	.+168    	; 0x38a2 <nrk_gpio_direction+0xe2>
    37fa:	84 30       	cpi	r24, 0x04	; 4
    37fc:	91 05       	cpc	r25, r1
    37fe:	0c f4       	brge	.+2      	; 0x3802 <nrk_gpio_direction+0x42>
    3800:	3e c0       	rjmp	.+124    	; 0x387e <nrk_gpio_direction+0xbe>
    3802:	05 97       	sbiw	r24, 0x05	; 5
    3804:	09 f0       	breq	.+2      	; 0x3808 <nrk_gpio_direction+0x48>
    3806:	f1 c0       	rjmp	.+482    	; 0x39ea <nrk_gpio_direction+0x22a>
    3808:	5e c0       	rjmp	.+188    	; 0x38c6 <nrk_gpio_direction+0x106>
    380a:	31 b1       	in	r19, 0x01	; 1
    380c:	b3 e0       	ldi	r27, 0x03	; 3
    380e:	56 95       	lsr	r21
    3810:	47 95       	ror	r20
    3812:	ba 95       	dec	r27
    3814:	e1 f7       	brne	.-8      	; 0x380e <nrk_gpio_direction+0x4e>
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	02 c0       	rjmp	.+4      	; 0x3820 <nrk_gpio_direction+0x60>
    381c:	88 0f       	add	r24, r24
    381e:	99 1f       	adc	r25, r25
    3820:	4a 95       	dec	r20
    3822:	e2 f7       	brpl	.-8      	; 0x381c <nrk_gpio_direction+0x5c>
    3824:	28 2f       	mov	r18, r24
    3826:	20 95       	com	r18
    3828:	23 23       	and	r18, r19
    382a:	21 b9       	out	0x01, r18	; 1
    382c:	22 b1       	in	r18, 0x02	; 2
    382e:	82 2b       	or	r24, r18
    3830:	82 b9       	out	0x02, r24	; 2
    3832:	d8 c0       	rjmp	.+432    	; 0x39e4 <nrk_gpio_direction+0x224>
    3834:	24 b1       	in	r18, 0x04	; 4
    3836:	a3 e0       	ldi	r26, 0x03	; 3
    3838:	56 95       	lsr	r21
    383a:	47 95       	ror	r20
    383c:	aa 95       	dec	r26
    383e:	e1 f7       	brne	.-8      	; 0x3838 <nrk_gpio_direction+0x78>
    3840:	02 c0       	rjmp	.+4      	; 0x3846 <nrk_gpio_direction+0x86>
    3842:	88 0f       	add	r24, r24
    3844:	99 1f       	adc	r25, r25
    3846:	4a 95       	dec	r20
    3848:	e2 f7       	brpl	.-8      	; 0x3842 <nrk_gpio_direction+0x82>
    384a:	98 2f       	mov	r25, r24
    384c:	80 95       	com	r24
    384e:	82 23       	and	r24, r18
    3850:	84 b9       	out	0x04, r24	; 4
    3852:	85 b1       	in	r24, 0x05	; 5
    3854:	98 2b       	or	r25, r24
    3856:	95 b9       	out	0x05, r25	; 5
    3858:	c5 c0       	rjmp	.+394    	; 0x39e4 <nrk_gpio_direction+0x224>
    385a:	37 b1       	in	r19, 0x07	; 7
    385c:	f3 e0       	ldi	r31, 0x03	; 3
    385e:	56 95       	lsr	r21
    3860:	47 95       	ror	r20
    3862:	fa 95       	dec	r31
    3864:	e1 f7       	brne	.-8      	; 0x385e <nrk_gpio_direction+0x9e>
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <nrk_gpio_direction+0xb0>
    386c:	88 0f       	add	r24, r24
    386e:	99 1f       	adc	r25, r25
    3870:	4a 95       	dec	r20
    3872:	e2 f7       	brpl	.-8      	; 0x386c <nrk_gpio_direction+0xac>
    3874:	28 2f       	mov	r18, r24
    3876:	20 95       	com	r18
    3878:	23 23       	and	r18, r19
    387a:	27 b9       	out	0x07, r18	; 7
    387c:	35 c0       	rjmp	.+106    	; 0x38e8 <nrk_gpio_direction+0x128>
    387e:	3a b1       	in	r19, 0x0a	; 10
    3880:	e3 e0       	ldi	r30, 0x03	; 3
    3882:	56 95       	lsr	r21
    3884:	47 95       	ror	r20
    3886:	ea 95       	dec	r30
    3888:	e1 f7       	brne	.-8      	; 0x3882 <nrk_gpio_direction+0xc2>
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	02 c0       	rjmp	.+4      	; 0x3894 <nrk_gpio_direction+0xd4>
    3890:	88 0f       	add	r24, r24
    3892:	99 1f       	adc	r25, r25
    3894:	4a 95       	dec	r20
    3896:	e2 f7       	brpl	.-8      	; 0x3890 <nrk_gpio_direction+0xd0>
    3898:	28 2f       	mov	r18, r24
    389a:	20 95       	com	r18
    389c:	23 23       	and	r18, r19
    389e:	2a b9       	out	0x0a, r18	; 10
    38a0:	23 c0       	rjmp	.+70     	; 0x38e8 <nrk_gpio_direction+0x128>
    38a2:	3d b1       	in	r19, 0x0d	; 13
    38a4:	73 e0       	ldi	r23, 0x03	; 3
    38a6:	56 95       	lsr	r21
    38a8:	47 95       	ror	r20
    38aa:	7a 95       	dec	r23
    38ac:	e1 f7       	brne	.-8      	; 0x38a6 <nrk_gpio_direction+0xe6>
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	02 c0       	rjmp	.+4      	; 0x38b8 <nrk_gpio_direction+0xf8>
    38b4:	88 0f       	add	r24, r24
    38b6:	99 1f       	adc	r25, r25
    38b8:	4a 95       	dec	r20
    38ba:	e2 f7       	brpl	.-8      	; 0x38b4 <nrk_gpio_direction+0xf4>
    38bc:	28 2f       	mov	r18, r24
    38be:	20 95       	com	r18
    38c0:	23 23       	and	r18, r19
    38c2:	2d b9       	out	0x0d, r18	; 13
    38c4:	11 c0       	rjmp	.+34     	; 0x38e8 <nrk_gpio_direction+0x128>
    38c6:	30 b3       	in	r19, 0x10	; 16
    38c8:	63 e0       	ldi	r22, 0x03	; 3
    38ca:	56 95       	lsr	r21
    38cc:	47 95       	ror	r20
    38ce:	6a 95       	dec	r22
    38d0:	e1 f7       	brne	.-8      	; 0x38ca <nrk_gpio_direction+0x10a>
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	02 c0       	rjmp	.+4      	; 0x38dc <nrk_gpio_direction+0x11c>
    38d8:	88 0f       	add	r24, r24
    38da:	99 1f       	adc	r25, r25
    38dc:	4a 95       	dec	r20
    38de:	e2 f7       	brpl	.-8      	; 0x38d8 <nrk_gpio_direction+0x118>
    38e0:	28 2f       	mov	r18, r24
    38e2:	20 95       	com	r18
    38e4:	23 23       	and	r18, r19
    38e6:	20 bb       	out	0x10, r18	; 16
    38e8:	25 b1       	in	r18, 0x05	; 5
    38ea:	82 2b       	or	r24, r18
    38ec:	85 b9       	out	0x05, r24	; 5
    38ee:	7a c0       	rjmp	.+244    	; 0x39e4 <nrk_gpio_direction+0x224>
    38f0:	9a 01       	movw	r18, r20
    38f2:	27 70       	andi	r18, 0x07	; 7
    38f4:	30 70       	andi	r19, 0x00	; 0
    38f6:	22 30       	cpi	r18, 0x02	; 2
    38f8:	31 05       	cpc	r19, r1
    38fa:	a9 f1       	breq	.+106    	; 0x3966 <nrk_gpio_direction+0x1a6>
    38fc:	23 30       	cpi	r18, 0x03	; 3
    38fe:	31 05       	cpc	r19, r1
    3900:	44 f4       	brge	.+16     	; 0x3912 <nrk_gpio_direction+0x152>
    3902:	21 15       	cp	r18, r1
    3904:	31 05       	cpc	r19, r1
    3906:	89 f0       	breq	.+34     	; 0x392a <nrk_gpio_direction+0x16a>
    3908:	21 30       	cpi	r18, 0x01	; 1
    390a:	31 05       	cpc	r19, r1
    390c:	09 f0       	breq	.+2      	; 0x3910 <nrk_gpio_direction+0x150>
    390e:	6d c0       	rjmp	.+218    	; 0x39ea <nrk_gpio_direction+0x22a>
    3910:	1c c0       	rjmp	.+56     	; 0x394a <nrk_gpio_direction+0x18a>
    3912:	24 30       	cpi	r18, 0x04	; 4
    3914:	31 05       	cpc	r19, r1
    3916:	09 f4       	brne	.+2      	; 0x391a <nrk_gpio_direction+0x15a>
    3918:	46 c0       	rjmp	.+140    	; 0x39a6 <nrk_gpio_direction+0x1e6>
    391a:	24 30       	cpi	r18, 0x04	; 4
    391c:	31 05       	cpc	r19, r1
    391e:	9c f1       	brlt	.+102    	; 0x3986 <nrk_gpio_direction+0x1c6>
    3920:	25 30       	cpi	r18, 0x05	; 5
    3922:	31 05       	cpc	r19, r1
    3924:	09 f0       	breq	.+2      	; 0x3928 <nrk_gpio_direction+0x168>
    3926:	61 c0       	rjmp	.+194    	; 0x39ea <nrk_gpio_direction+0x22a>
    3928:	4e c0       	rjmp	.+156    	; 0x39c6 <nrk_gpio_direction+0x206>
    392a:	21 b1       	in	r18, 0x01	; 1
    392c:	33 e0       	ldi	r19, 0x03	; 3
    392e:	56 95       	lsr	r21
    3930:	47 95       	ror	r20
    3932:	3a 95       	dec	r19
    3934:	e1 f7       	brne	.-8      	; 0x392e <nrk_gpio_direction+0x16e>
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	02 c0       	rjmp	.+4      	; 0x3940 <nrk_gpio_direction+0x180>
    393c:	88 0f       	add	r24, r24
    393e:	99 1f       	adc	r25, r25
    3940:	4a 95       	dec	r20
    3942:	e2 f7       	brpl	.-8      	; 0x393c <nrk_gpio_direction+0x17c>
    3944:	28 2b       	or	r18, r24
    3946:	21 b9       	out	0x01, r18	; 1
    3948:	4d c0       	rjmp	.+154    	; 0x39e4 <nrk_gpio_direction+0x224>
    394a:	84 b1       	in	r24, 0x04	; 4
    394c:	93 e0       	ldi	r25, 0x03	; 3
    394e:	56 95       	lsr	r21
    3950:	47 95       	ror	r20
    3952:	9a 95       	dec	r25
    3954:	e1 f7       	brne	.-8      	; 0x394e <nrk_gpio_direction+0x18e>
    3956:	02 c0       	rjmp	.+4      	; 0x395c <nrk_gpio_direction+0x19c>
    3958:	22 0f       	add	r18, r18
    395a:	33 1f       	adc	r19, r19
    395c:	4a 95       	dec	r20
    395e:	e2 f7       	brpl	.-8      	; 0x3958 <nrk_gpio_direction+0x198>
    3960:	82 2b       	or	r24, r18
    3962:	84 b9       	out	0x04, r24	; 4
    3964:	3f c0       	rjmp	.+126    	; 0x39e4 <nrk_gpio_direction+0x224>
    3966:	27 b1       	in	r18, 0x07	; 7
    3968:	b3 e0       	ldi	r27, 0x03	; 3
    396a:	56 95       	lsr	r21
    396c:	47 95       	ror	r20
    396e:	ba 95       	dec	r27
    3970:	e1 f7       	brne	.-8      	; 0x396a <nrk_gpio_direction+0x1aa>
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	02 c0       	rjmp	.+4      	; 0x397c <nrk_gpio_direction+0x1bc>
    3978:	88 0f       	add	r24, r24
    397a:	99 1f       	adc	r25, r25
    397c:	4a 95       	dec	r20
    397e:	e2 f7       	brpl	.-8      	; 0x3978 <nrk_gpio_direction+0x1b8>
    3980:	28 2b       	or	r18, r24
    3982:	27 b9       	out	0x07, r18	; 7
    3984:	2f c0       	rjmp	.+94     	; 0x39e4 <nrk_gpio_direction+0x224>
    3986:	2a b1       	in	r18, 0x0a	; 10
    3988:	a3 e0       	ldi	r26, 0x03	; 3
    398a:	56 95       	lsr	r21
    398c:	47 95       	ror	r20
    398e:	aa 95       	dec	r26
    3990:	e1 f7       	brne	.-8      	; 0x398a <nrk_gpio_direction+0x1ca>
    3992:	81 e0       	ldi	r24, 0x01	; 1
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	02 c0       	rjmp	.+4      	; 0x399c <nrk_gpio_direction+0x1dc>
    3998:	88 0f       	add	r24, r24
    399a:	99 1f       	adc	r25, r25
    399c:	4a 95       	dec	r20
    399e:	e2 f7       	brpl	.-8      	; 0x3998 <nrk_gpio_direction+0x1d8>
    39a0:	28 2b       	or	r18, r24
    39a2:	2a b9       	out	0x0a, r18	; 10
    39a4:	1f c0       	rjmp	.+62     	; 0x39e4 <nrk_gpio_direction+0x224>
    39a6:	2d b1       	in	r18, 0x0d	; 13
    39a8:	f3 e0       	ldi	r31, 0x03	; 3
    39aa:	56 95       	lsr	r21
    39ac:	47 95       	ror	r20
    39ae:	fa 95       	dec	r31
    39b0:	e1 f7       	brne	.-8      	; 0x39aa <nrk_gpio_direction+0x1ea>
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	02 c0       	rjmp	.+4      	; 0x39bc <nrk_gpio_direction+0x1fc>
    39b8:	88 0f       	add	r24, r24
    39ba:	99 1f       	adc	r25, r25
    39bc:	4a 95       	dec	r20
    39be:	e2 f7       	brpl	.-8      	; 0x39b8 <nrk_gpio_direction+0x1f8>
    39c0:	28 2b       	or	r18, r24
    39c2:	2d b9       	out	0x0d, r18	; 13
    39c4:	0f c0       	rjmp	.+30     	; 0x39e4 <nrk_gpio_direction+0x224>
    39c6:	20 b3       	in	r18, 0x10	; 16
    39c8:	e3 e0       	ldi	r30, 0x03	; 3
    39ca:	56 95       	lsr	r21
    39cc:	47 95       	ror	r20
    39ce:	ea 95       	dec	r30
    39d0:	e1 f7       	brne	.-8      	; 0x39ca <nrk_gpio_direction+0x20a>
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	02 c0       	rjmp	.+4      	; 0x39dc <nrk_gpio_direction+0x21c>
    39d8:	88 0f       	add	r24, r24
    39da:	99 1f       	adc	r25, r25
    39dc:	4a 95       	dec	r20
    39de:	e2 f7       	brpl	.-8      	; 0x39d8 <nrk_gpio_direction+0x218>
    39e0:	28 2b       	or	r18, r24
    39e2:	20 bb       	out	0x10, r18	; 16
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	08 95       	ret
    39ea:	8f ef       	ldi	r24, 0xFF	; 255
    39ec:	9f ef       	ldi	r25, 0xFF	; 255
    39ee:	08 95       	ret

000039f0 <nrk_get_button>:
    39f0:	88 23       	and	r24, r24
    39f2:	19 f0       	breq	.+6      	; 0x39fa <nrk_get_button+0xa>
    39f4:	8f ef       	ldi	r24, 0xFF	; 255
    39f6:	9f ef       	ldi	r25, 0xFF	; 255
    39f8:	08 95       	ret
    39fa:	80 b1       	in	r24, 0x00	; 0
    39fc:	99 27       	eor	r25, r25
    39fe:	87 fd       	sbrc	r24, 7
    3a00:	90 95       	com	r25
    3a02:	80 95       	com	r24
    3a04:	90 95       	com	r25
    3a06:	88 27       	eor	r24, r24
    3a08:	99 0f       	add	r25, r25
    3a0a:	88 1f       	adc	r24, r24
    3a0c:	99 27       	eor	r25, r25
    3a0e:	08 95       	ret

00003a10 <nrk_led_toggle>:
    3a10:	00 97       	sbiw	r24, 0x00	; 0
    3a12:	11 f4       	brne	.+4      	; 0x3a18 <nrk_led_toggle+0x8>
    3a14:	84 e1       	ldi	r24, 0x14	; 20
    3a16:	09 c0       	rjmp	.+18     	; 0x3a2a <nrk_led_toggle+0x1a>
    3a18:	81 30       	cpi	r24, 0x01	; 1
    3a1a:	91 05       	cpc	r25, r1
    3a1c:	11 f4       	brne	.+4      	; 0x3a22 <nrk_led_toggle+0x12>
    3a1e:	8c e1       	ldi	r24, 0x1C	; 28
    3a20:	04 c0       	rjmp	.+8      	; 0x3a2a <nrk_led_toggle+0x1a>
    3a22:	82 30       	cpi	r24, 0x02	; 2
    3a24:	91 05       	cpc	r25, r1
    3a26:	31 f4       	brne	.+12     	; 0x3a34 <nrk_led_toggle+0x24>
    3a28:	84 e2       	ldi	r24, 0x24	; 36
    3a2a:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <nrk_gpio_toggle>
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	08 95       	ret
    3a34:	03 97       	sbiw	r24, 0x03	; 3
    3a36:	19 f0       	breq	.+6      	; 0x3a3e <nrk_led_toggle+0x2e>
    3a38:	8f ef       	ldi	r24, 0xFF	; 255
    3a3a:	9f ef       	ldi	r25, 0xFF	; 255
    3a3c:	08 95       	ret
    3a3e:	8c e2       	ldi	r24, 0x2C	; 44
    3a40:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <nrk_gpio_toggle>
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	08 95       	ret

00003a4a <nrk_led_clr>:
    3a4a:	00 97       	sbiw	r24, 0x00	; 0
    3a4c:	11 f4       	brne	.+4      	; 0x3a52 <nrk_led_clr+0x8>
    3a4e:	84 e1       	ldi	r24, 0x14	; 20
    3a50:	09 c0       	rjmp	.+18     	; 0x3a64 <nrk_led_clr+0x1a>
    3a52:	81 30       	cpi	r24, 0x01	; 1
    3a54:	91 05       	cpc	r25, r1
    3a56:	11 f4       	brne	.+4      	; 0x3a5c <nrk_led_clr+0x12>
    3a58:	8c e1       	ldi	r24, 0x1C	; 28
    3a5a:	04 c0       	rjmp	.+8      	; 0x3a64 <nrk_led_clr+0x1a>
    3a5c:	82 30       	cpi	r24, 0x02	; 2
    3a5e:	91 05       	cpc	r25, r1
    3a60:	31 f4       	brne	.+12     	; 0x3a6e <nrk_led_clr+0x24>
    3a62:	84 e2       	ldi	r24, 0x24	; 36
    3a64:	0e 94 8c 19 	call	0x3318	; 0x3318 <nrk_gpio_set>
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	08 95       	ret
    3a6e:	03 97       	sbiw	r24, 0x03	; 3
    3a70:	19 f0       	breq	.+6      	; 0x3a78 <nrk_led_clr+0x2e>
    3a72:	8f ef       	ldi	r24, 0xFF	; 255
    3a74:	9f ef       	ldi	r25, 0xFF	; 255
    3a76:	08 95       	ret
    3a78:	8c e2       	ldi	r24, 0x2C	; 44
    3a7a:	0e 94 8c 19 	call	0x3318	; 0x3318 <nrk_gpio_set>
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	08 95       	ret

00003a84 <nrk_led_set>:
    3a84:	00 97       	sbiw	r24, 0x00	; 0
    3a86:	11 f4       	brne	.+4      	; 0x3a8c <nrk_led_set+0x8>
    3a88:	84 e1       	ldi	r24, 0x14	; 20
    3a8a:	09 c0       	rjmp	.+18     	; 0x3a9e <nrk_led_set+0x1a>
    3a8c:	81 30       	cpi	r24, 0x01	; 1
    3a8e:	91 05       	cpc	r25, r1
    3a90:	11 f4       	brne	.+4      	; 0x3a96 <nrk_led_set+0x12>
    3a92:	8c e1       	ldi	r24, 0x1C	; 28
    3a94:	04 c0       	rjmp	.+8      	; 0x3a9e <nrk_led_set+0x1a>
    3a96:	82 30       	cpi	r24, 0x02	; 2
    3a98:	91 05       	cpc	r25, r1
    3a9a:	31 f4       	brne	.+12     	; 0x3aa8 <nrk_led_set+0x24>
    3a9c:	84 e2       	ldi	r24, 0x24	; 36
    3a9e:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_gpio_clr>
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	08 95       	ret
    3aa8:	03 97       	sbiw	r24, 0x03	; 3
    3aaa:	19 f0       	breq	.+6      	; 0x3ab2 <nrk_led_set+0x2e>
    3aac:	8f ef       	ldi	r24, 0xFF	; 255
    3aae:	9f ef       	ldi	r25, 0xFF	; 255
    3ab0:	08 95       	ret
    3ab2:	8c e2       	ldi	r24, 0x2C	; 44
    3ab4:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_gpio_clr>
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	08 95       	ret

00003abe <nrk_gpio_pullups>:
    3abe:	88 23       	and	r24, r24
    3ac0:	19 f0       	breq	.+6      	; 0x3ac8 <nrk_gpio_pullups+0xa>
    3ac2:	85 b7       	in	r24, 0x35	; 53
    3ac4:	8f 7e       	andi	r24, 0xEF	; 239
    3ac6:	02 c0       	rjmp	.+4      	; 0x3acc <nrk_gpio_pullups+0xe>
    3ac8:	85 b7       	in	r24, 0x35	; 53
    3aca:	80 61       	ori	r24, 0x10	; 16
    3acc:	85 bf       	out	0x35, r24	; 53
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	08 95       	ret

00003ad4 <putc0>:
    3ad4:	98 2f       	mov	r25, r24
    3ad6:	80 91 c0 00 	lds	r24, 0x00C0
    3ada:	85 ff       	sbrs	r24, 5
    3adc:	fc cf       	rjmp	.-8      	; 0x3ad6 <putc0+0x2>
    3ade:	80 91 c0 00 	lds	r24, 0x00C0
    3ae2:	8f 7d       	andi	r24, 0xDF	; 223
    3ae4:	80 93 c0 00 	sts	0x00C0, r24
    3ae8:	90 93 c6 00 	sts	0x00C6, r25
    3aec:	08 95       	ret

00003aee <putc1>:
    3aee:	98 2f       	mov	r25, r24
    3af0:	80 91 c8 00 	lds	r24, 0x00C8
    3af4:	85 ff       	sbrs	r24, 5
    3af6:	fc cf       	rjmp	.-8      	; 0x3af0 <putc1+0x2>
    3af8:	90 93 ce 00 	sts	0x00CE, r25
    3afc:	08 95       	ret

00003afe <setup_uart0>:
    3afe:	29 2f       	mov	r18, r25
    3b00:	33 27       	eor	r19, r19
    3b02:	20 93 c5 00 	sts	0x00C5, r18
    3b06:	80 93 c4 00 	sts	0x00C4, r24
    3b0a:	86 e0       	ldi	r24, 0x06	; 6
    3b0c:	80 93 c2 00 	sts	0x00C2, r24
    3b10:	e1 ec       	ldi	r30, 0xC1	; 193
    3b12:	f0 e0       	ldi	r31, 0x00	; 0
    3b14:	80 81       	ld	r24, Z
    3b16:	8b 7f       	andi	r24, 0xFB	; 251
    3b18:	80 83       	st	Z, r24
    3b1a:	a0 ec       	ldi	r26, 0xC0	; 192
    3b1c:	b0 e0       	ldi	r27, 0x00	; 0
    3b1e:	8c 91       	ld	r24, X
    3b20:	82 60       	ori	r24, 0x02	; 2
    3b22:	8c 93       	st	X, r24
    3b24:	80 81       	ld	r24, Z
    3b26:	88 61       	ori	r24, 0x18	; 24
    3b28:	80 83       	st	Z, r24
    3b2a:	08 95       	ret

00003b2c <setup_uart1>:
    3b2c:	29 2f       	mov	r18, r25
    3b2e:	33 27       	eor	r19, r19
    3b30:	20 93 cd 00 	sts	0x00CD, r18
    3b34:	80 93 cc 00 	sts	0x00CC, r24
    3b38:	86 e0       	ldi	r24, 0x06	; 6
    3b3a:	80 93 ca 00 	sts	0x00CA, r24
    3b3e:	e9 ec       	ldi	r30, 0xC9	; 201
    3b40:	f0 e0       	ldi	r31, 0x00	; 0
    3b42:	80 81       	ld	r24, Z
    3b44:	8b 7f       	andi	r24, 0xFB	; 251
    3b46:	80 83       	st	Z, r24
    3b48:	a8 ec       	ldi	r26, 0xC8	; 200
    3b4a:	b0 e0       	ldi	r27, 0x00	; 0
    3b4c:	8c 91       	ld	r24, X
    3b4e:	82 60       	ori	r24, 0x02	; 2
    3b50:	8c 93       	st	X, r24
    3b52:	80 81       	ld	r24, Z
    3b54:	88 61       	ori	r24, 0x18	; 24
    3b56:	80 83       	st	Z, r24
    3b58:	08 95       	ret

00003b5a <getc0>:
    3b5a:	80 91 c0 00 	lds	r24, 0x00C0
    3b5e:	87 ff       	sbrs	r24, 7
    3b60:	fc cf       	rjmp	.-8      	; 0x3b5a <getc0>
    3b62:	80 91 c0 00 	lds	r24, 0x00C0
    3b66:	8f 77       	andi	r24, 0x7F	; 127
    3b68:	80 93 c0 00 	sts	0x00C0, r24
    3b6c:	80 91 c6 00 	lds	r24, 0x00C6
    3b70:	99 27       	eor	r25, r25
    3b72:	08 95       	ret

00003b74 <nrk_setup_uart>:
    3b74:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <setup_uart1>
    3b78:	60 e3       	ldi	r22, 0x30	; 48
    3b7a:	79 e1       	ldi	r23, 0x19	; 25
    3b7c:	87 e7       	ldi	r24, 0x77	; 119
    3b7e:	9d e1       	ldi	r25, 0x1D	; 29
    3b80:	0e 94 bf 34 	call	0x697e	; 0x697e <fdevopen>
    3b84:	90 93 bd 07 	sts	0x07BD, r25
    3b88:	80 93 bc 07 	sts	0x07BC, r24
    3b8c:	60 e3       	ldi	r22, 0x30	; 48
    3b8e:	79 e1       	ldi	r23, 0x19	; 25
    3b90:	87 e7       	ldi	r24, 0x77	; 119
    3b92:	9d e1       	ldi	r25, 0x1D	; 29
    3b94:	0e 94 bf 34 	call	0x697e	; 0x697e <fdevopen>
    3b98:	90 93 bb 07 	sts	0x07BB, r25
    3b9c:	80 93 ba 07 	sts	0x07BA, r24
    3ba0:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <nrk_signal_create>
    3ba4:	80 93 15 07 	sts	0x0715, r24
    3ba8:	8f 3f       	cpi	r24, 0xFF	; 255
    3baa:	19 f4       	brne	.+6      	; 0x3bb2 <nrk_setup_uart+0x3e>
    3bac:	8e e0       	ldi	r24, 0x0E	; 14
    3bae:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <nrk_error_add>
    3bb2:	10 92 16 07 	sts	0x0716, r1
    3bb6:	10 92 04 07 	sts	0x0704, r1
    3bba:	80 91 c9 00 	lds	r24, 0x00C9
    3bbe:	80 68       	ori	r24, 0x80	; 128
    3bc0:	80 93 c9 00 	sts	0x00C9, r24
    3bc4:	08 95       	ret

00003bc6 <nrk_uart_rx_signal_get>:
uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
    3bc6:	80 91 15 07 	lds	r24, 0x0715
    3bca:	8f 3f       	cpi	r24, 0xFF	; 255
    3bcc:	19 f4       	brne	.+6      	; 0x3bd4 <nrk_uart_rx_signal_get+0xe>
    3bce:	8e e0       	ldi	r24, 0x0E	; 14
    3bd0:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <nrk_error_add>
    3bd4:	80 91 15 07 	lds	r24, 0x0715
uint8_t value=size;

    3bd8:	99 27       	eor	r25, r25
    3bda:	87 fd       	sbrc	r24, 7
    3bdc:	90 95       	com	r25
    3bde:	08 95       	ret

00003be0 <nrk_kprintf>:
		    if(opt&APPEND_FLAG)
		    {
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	ec 01       	movw	r28, r24
    3be6:	07 c0       	rjmp	.+14     	; 0x3bf6 <nrk_kprintf+0x16>
		    else return NRK_OK;
		
	    
    3be8:	60 91 bc 07 	lds	r22, 0x07BC
    3bec:	70 91 bd 07 	lds	r23, 0x07BD
    3bf0:	99 27       	eor	r25, r25
    3bf2:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
    3bf6:	fe 01       	movw	r30, r28
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
		    else return NRK_OK;
		
    3bf8:	21 96       	adiw	r28, 0x01	; 1
    3bfa:	84 91       	lpm	r24, Z
    3bfc:	88 23       	and	r24, r24
    3bfe:	a1 f7       	brne	.-24     	; 0x3be8 <nrk_kprintf+0x8>
    3c00:	df 91       	pop	r29
    3c02:	cf 91       	pop	r28
    3c04:	08 95       	ret

00003c06 <__vector_36>:
	ADMUX = BM(REFS0);  \
} while (0)

#define ADC_VREF_VCC() \
   do { \
	ADMUX &= ~(BM(REFS1));  \
    3c06:	1f 92       	push	r1
    3c08:	0f 92       	push	r0
    3c0a:	0f b6       	in	r0, 0x3f	; 63
    3c0c:	0f 92       	push	r0
    3c0e:	11 24       	eor	r1, r1
    3c10:	2f 93       	push	r18
    3c12:	3f 93       	push	r19
    3c14:	4f 93       	push	r20
    3c16:	5f 93       	push	r21
    3c18:	6f 93       	push	r22
    3c1a:	7f 93       	push	r23
    3c1c:	8f 93       	push	r24
    3c1e:	9f 93       	push	r25
    3c20:	af 93       	push	r26
    3c22:	bf 93       	push	r27
    3c24:	ef 93       	push	r30
    3c26:	ff 93       	push	r31
	ADMUX |= BM(REFS0);  \
} while(0)


    3c28:	80 91 c9 00 	lds	r24, 0x00C9
    3c2c:	8f 77       	andi	r24, 0x7F	; 127
    3c2e:	80 93 c9 00 	sts	0x00C9, r24
#define ADC_VREF_1_1() \
    3c32:	80 91 c8 00 	lds	r24, 0x00C8
    3c36:	87 ff       	sbrs	r24, 7
    3c38:	fc cf       	rjmp	.-8      	; 0x3c32 <__vector_36+0x2c>
    3c3a:	80 91 c8 00 	lds	r24, 0x00C8
    3c3e:	8f 77       	andi	r24, 0x7F	; 127
    3c40:	80 93 c8 00 	sts	0x00C8, r24
    3c44:	90 91 ce 00 	lds	r25, 0x00CE
   do { \
    3c48:	80 91 04 07 	lds	r24, 0x0704
    3c4c:	e8 2f       	mov	r30, r24
    3c4e:	ff 27       	eor	r31, r31
    3c50:	eb 5f       	subi	r30, 0xFB	; 251
    3c52:	f8 4f       	sbci	r31, 0xF8	; 248
    3c54:	90 83       	st	Z, r25
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
    3c56:	8f 5f       	subi	r24, 0xFF	; 255
    3c58:	80 93 04 07 	sts	0x0704, r24
} while(0)
    3c5c:	80 31       	cpi	r24, 0x10	; 16
    3c5e:	11 f4       	brne	.+4      	; 0x3c64 <__vector_36+0x5e>
    3c60:	10 92 04 07 	sts	0x0704, r1

    3c64:	80 91 15 07 	lds	r24, 0x0715
    3c68:	0e 94 69 24 	call	0x48d2	; 0x48d2 <nrk_event_signal>

    3c6c:	80 91 c8 00 	lds	r24, 0x00C8
    3c70:	8f 77       	andi	r24, 0x7F	; 127
    3c72:	80 93 c8 00 	sts	0x00C8, r24
#define ADC_VREF_2_56() \
    3c76:	80 91 c9 00 	lds	r24, 0x00C9
    3c7a:	80 68       	ori	r24, 0x80	; 128
    3c7c:	80 93 c9 00 	sts	0x00C9, r24
    3c80:	ff 91       	pop	r31
    3c82:	ef 91       	pop	r30
    3c84:	bf 91       	pop	r27
    3c86:	af 91       	pop	r26
    3c88:	9f 91       	pop	r25
    3c8a:	8f 91       	pop	r24
    3c8c:	7f 91       	pop	r23
    3c8e:	6f 91       	pop	r22
    3c90:	5f 91       	pop	r21
    3c92:	4f 91       	pop	r20
    3c94:	3f 91       	pop	r19
    3c96:	2f 91       	pop	r18
    3c98:	0f 90       	pop	r0
    3c9a:	0f be       	out	0x3f, r0	; 63
    3c9c:	0f 90       	pop	r0
    3c9e:	1f 90       	pop	r1
    3ca0:	18 95       	reti

00003ca2 <halWait>:
	...
uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
    3caa:	01 97       	sbiw	r24, 0x01	; 1
    3cac:	d1 f7       	brne	.-12     	; 0x3ca2 <halWait>
    3cae:	08 95       	ret

00003cb0 <read_eeprom_current_image_checksum>:
#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)
    3cb0:	fc 01       	movw	r30, r24

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    3cb2:	a7 e0       	ldi	r26, 0x07	; 7
    3cb4:	b0 e0       	ldi	r27, 0x00	; 0
    3cb6:	0e 94 6f 37 	call	0x6ede	; 0x6ede <__eeprom_read_byte_1F2021>
    3cba:	80 2d       	mov	r24, r0

    3cbc:	80 83       	st	Z, r24
// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	08 95       	ret

00003cc4 <write_eeprom_current_image_checksum>:
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    3cc4:	fc 01       	movw	r30, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    3cc6:	80 81       	ld	r24, Z
    3cc8:	a7 e0       	ldi	r26, 0x07	; 7
    3cca:	b0 e0       	ldi	r27, 0x00	; 0
    3ccc:	08 2e       	mov	r0, r24
    3cce:	0e 94 77 37 	call	0x6eee	; 0x6eee <__eeprom_write_byte_1F2021>
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	08 95       	ret

00003cd8 <nrk_eeprom_read_byte>:

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    3cd8:	dc 01       	movw	r26, r24
    3cda:	0e 94 6f 37 	call	0x6ede	; 0x6ede <__eeprom_read_byte_1F2021>
    3cde:	80 2d       	mov	r24, r0
*
*  This is the Open Source Version of Nano-RK included as part of a Dual
*  Licensing Model. If you are unsure which license to use please refer to:
*  http://www.nanork.org/nano-RK/wiki/Licensing
*
*  This program is free software: you can redistribute it and/or modify
    3ce0:	99 27       	eor	r25, r25
    3ce2:	08 95       	ret

00003ce4 <read_eeprom_mac_address>:
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	a0 e0       	ldi	r26, 0x00	; 0
    3ce8:	b0 e0       	ldi	r27, 0x00	; 0
    3cea:	0e 94 6f 37 	call	0x6ede	; 0x6ede <__eeprom_read_byte_1F2021>
    3cee:	40 2d       	mov	r20, r0
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*  Contributing Authors (specific to this file):
*  Anthony Rowe
    3cf0:	43 83       	std	Z+3, r20	; 0x03
    3cf2:	a1 e0       	ldi	r26, 0x01	; 1
    3cf4:	b0 e0       	ldi	r27, 0x00	; 0
    3cf6:	0e 94 6f 37 	call	0x6ede	; 0x6ede <__eeprom_read_byte_1F2021>
    3cfa:	80 2d       	mov	r24, r0
*  Zane Starr
    3cfc:	82 83       	std	Z+2, r24	; 0x02
    3cfe:	a2 e0       	ldi	r26, 0x02	; 2
    3d00:	b0 e0       	ldi	r27, 0x00	; 0
    3d02:	0e 94 6f 37 	call	0x6ede	; 0x6ede <__eeprom_read_byte_1F2021>
    3d06:	30 2d       	mov	r19, r0
*******************************************************************************/
    3d08:	31 83       	std	Z+1, r19	; 0x01
    3d0a:	a3 e0       	ldi	r26, 0x03	; 3
    3d0c:	b0 e0       	ldi	r27, 0x00	; 0
    3d0e:	0e 94 6f 37 	call	0x6ede	; 0x6ede <__eeprom_read_byte_1F2021>
    3d12:	90 2d       	mov	r25, r0

    3d14:	90 83       	st	Z, r25
    3d16:	a4 e0       	ldi	r26, 0x04	; 4
    3d18:	b0 e0       	ldi	r27, 0x00	; 0
    3d1a:	0e 94 6f 37 	call	0x6ede	; 0x6ede <__eeprom_read_byte_1F2021>
    3d1e:	20 2d       	mov	r18, r0

#include <nrk_driver_list.h>
#include <nrk_driver.h>
    3d20:	83 0f       	add	r24, r19
#include <ff_basic_sensor.h>
    3d22:	84 0f       	add	r24, r20
#include <include.h>
#include <stdio.h>
    3d24:	89 0f       	add	r24, r25
    3d26:	28 17       	cp	r18, r24
    3d28:	19 f4       	brne	.+6      	; 0x3d30 <read_eeprom_mac_address+0x4c>
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	08 95       	ret
    3d30:	8f ef       	ldi	r24, 0xFF	; 255
    3d32:	9f ef       	ldi	r25, 0xFF	; 255
#include <ulib.h>
#include <nrk_error.h>
#include <nrk.h>
    3d34:	08 95       	ret

00003d36 <read_eeprom_channel>:
#include <stdint.h>
#include <basic_rf.h>
#include <nrk_timer.h>
    3d36:	fc 01       	movw	r30, r24
    3d38:	a5 e0       	ldi	r26, 0x05	; 5
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	0e 94 6f 37 	call	0x6ede	; 0x6ede <__eeprom_read_byte_1F2021>
    3d40:	80 2d       	mov	r24, r0

    3d42:	80 83       	st	Z, r24
#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200
    3d44:	81 e0       	ldi	r24, 0x01	; 1
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	08 95       	ret

00003d4a <read_eeprom_load_img_pages>:

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	a6 e0       	ldi	r26, 0x06	; 6
    3d4e:	b0 e0       	ldi	r27, 0x00	; 0
    3d50:	0e 94 6f 37 	call	0x6ede	; 0x6ede <__eeprom_read_byte_1F2021>
    3d54:	80 2d       	mov	r24, r0
} while (0)
    3d56:	80 83       	st	Z, r24

#define ADC_VREF_VCC() \
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	08 95       	ret

00003d5e <read_eeprom_aes_key>:
   do { \
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
    3d5e:	ac 01       	movw	r20, r24
    3d60:	20 e0       	ldi	r18, 0x00	; 0
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	d9 01       	movw	r26, r18
    3d66:	18 96       	adiw	r26, 0x08	; 8
    3d68:	0e 94 6f 37 	call	0x6ede	; 0x6ede <__eeprom_read_byte_1F2021>
    3d6c:	80 2d       	mov	r24, r0
} while(0)


    3d6e:	fa 01       	movw	r30, r20
    3d70:	e2 0f       	add	r30, r18
    3d72:	f3 1f       	adc	r31, r19
    3d74:	80 83       	st	Z, r24
    3d76:	2f 5f       	subi	r18, 0xFF	; 255
    3d78:	3f 4f       	sbci	r19, 0xFF	; 255
#define ADC_VREF_VCC() \
   do { \
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)

    3d7a:	20 31       	cpi	r18, 0x10	; 16
    3d7c:	31 05       	cpc	r19, r1
    3d7e:	91 f7       	brne	.-28     	; 0x3d64 <read_eeprom_aes_key+0x6>

#define ADC_VREF_1_1() \
   do { \
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	08 95       	ret

00003d86 <nrk_eeprom_write_byte>:
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    3d86:	dc 01       	movw	r26, r24
    3d88:	06 2e       	mov	r0, r22
    3d8a:	0e 94 77 37 	call	0x6eee	; 0x6eee <__eeprom_write_byte_1F2021>
    3d8e:	08 95       	ret

00003d90 <write_eeprom_load_img_pages>:

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;
    3d90:	fc 01       	movw	r30, r24
    3d92:	80 81       	ld	r24, Z
    3d94:	a6 e0       	ldi	r26, 0x06	; 6
    3d96:	b0 e0       	ldi	r27, 0x00	; 0
    3d98:	08 2e       	mov	r0, r24
    3d9a:	0e 94 77 37 	call	0x6eee	; 0x6eee <__eeprom_write_byte_1F2021>

// VREF is set to VCC by default
#define ADC_INIT() \
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	08 95       	ret

00003da4 <write_eeprom_aes_key>:

#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)
    3da4:	ac 01       	movw	r20, r24
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	d9 01       	movw	r26, r18
    3dac:	18 96       	adiw	r26, 0x08	; 8
    3dae:	fa 01       	movw	r30, r20
    3db0:	e2 0f       	add	r30, r18
    3db2:	f3 1f       	adc	r31, r19
    3db4:	80 81       	ld	r24, Z
    3db6:	08 2e       	mov	r0, r24
    3db8:	0e 94 77 37 	call	0x6eee	; 0x6eee <__eeprom_write_byte_1F2021>
    3dbc:	2f 5f       	subi	r18, 0xFF	; 255
    3dbe:	3f 4f       	sbci	r19, 0xFF	; 255


    3dc0:	20 31       	cpi	r18, 0x10	; 16
    3dc2:	31 05       	cpc	r19, r1
    3dc4:	91 f7       	brne	.-28     	; 0x3daa <write_eeprom_aes_key+0x6>
#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	08 95       	ret

00003dcc <nrk_int_disable>:

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    3dcc:	f8 94       	cli
    3dce:	08 95       	ret

00003dd0 <nrk_int_enable>:
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)
    3dd0:	78 94       	sei
    3dd2:	08 95       	ret

00003dd4 <nrk_version>:
}



void init_adc()
{
    3dd4:	85 e6       	ldi	r24, 0x65	; 101
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	08 95       	ret

00003dda <_nrk_timer_tick>:
  {
  val=get_adc_val();
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
  if(val<330) val=330;
  }
    3dda:	0e 94 2f 2c 	call	0x585e	; 0x585e <_nrk_scheduler>
    3dde:	08 95       	ret

00003de0 <nrk_TCB_init>:
			  }
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
    3de0:	ef 92       	push	r14
    3de2:	ff 92       	push	r15
    3de4:	0f 93       	push	r16
    3de6:	1f 93       	push	r17
    3de8:	cf 93       	push	r28
    3dea:	df 93       	push	r29
    3dec:	ec 01       	movw	r28, r24
    3dee:	8b 01       	movw	r16, r22
    3df0:	7a 01       	movw	r14, r20
	}
}

    3df2:	89 85       	ldd	r24, Y+9	; 0x09
    3df4:	82 30       	cpi	r24, 0x02	; 2
    3df6:	21 f0       	breq	.+8      	; 0x3e00 <nrk_TCB_init+0x20>

    3df8:	80 91 84 07 	lds	r24, 0x0784
    3dfc:	88 83       	st	Y, r24
    3dfe:	01 c0       	rjmp	.+2      	; 0x3e02 <nrk_TCB_init+0x22>
// read_voltage_status()
    3e00:	18 82       	st	Y, r1
//
// This function sets different voltage threshold levels on
    3e02:	80 91 84 07 	lds	r24, 0x0784
    3e06:	83 30       	cpi	r24, 0x03	; 3
    3e08:	20 f0       	brcs	.+8      	; 0x3e12 <nrk_TCB_init+0x32>
    3e0a:	60 e0       	ldi	r22, 0x00	; 0
    3e0c:	87 e0       	ldi	r24, 0x07	; 7
    3e0e:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <nrk_kernel_error_add>
// the cc2420 chip to search for the voltage.
    3e12:	89 85       	ldd	r24, Y+9	; 0x09
    3e14:	82 30       	cpi	r24, 0x02	; 2
    3e16:	29 f0       	breq	.+10     	; 0x3e22 <nrk_TCB_init+0x42>
    3e18:	80 91 84 07 	lds	r24, 0x0784
    3e1c:	8f 5f       	subi	r24, 0xFF	; 255
    3e1e:	80 93 84 07 	sts	0x0784, r24
// If the voltage is above 3.3 volts, then the ADC reads
    3e22:	80 91 84 07 	lds	r24, 0x0784
    3e26:	88 23       	and	r24, r24
    3e28:	19 f4       	brne	.+6      	; 0x3e30 <nrk_TCB_init+0x50>
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	80 93 84 07 	sts	0x0784, r24
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
    3e30:	88 81       	ld	r24, Y
    3e32:	99 27       	eor	r25, r25
    3e34:	87 fd       	sbrc	r24, 7
    3e36:	90 95       	com	r25
    3e38:	fc 01       	movw	r30, r24
    3e3a:	45 e0       	ldi	r20, 0x05	; 5
    3e3c:	ee 0f       	add	r30, r30
    3e3e:	ff 1f       	adc	r31, r31
    3e40:	4a 95       	dec	r20
    3e42:	e1 f7       	brne	.-8      	; 0x3e3c <nrk_TCB_init+0x5c>
    3e44:	e8 0f       	add	r30, r24
    3e46:	f9 1f       	adc	r31, r25
    3e48:	e7 5e       	subi	r30, 0xE7	; 231
    3e4a:	f8 4f       	sbci	r31, 0xF8	; 248
    3e4c:	11 83       	std	Z+1, r17	; 0x01
    3e4e:	00 83       	st	Z, r16
uint16_t read_voltage_status()
    3e50:	88 81       	ld	r24, Y
    3e52:	99 27       	eor	r25, r25
    3e54:	87 fd       	sbrc	r24, 7
    3e56:	90 95       	com	r25
    3e58:	fc 01       	movw	r30, r24
    3e5a:	35 e0       	ldi	r19, 0x05	; 5
    3e5c:	ee 0f       	add	r30, r30
    3e5e:	ff 1f       	adc	r31, r31
    3e60:	3a 95       	dec	r19
    3e62:	e1 f7       	brne	.-8      	; 0x3e5c <nrk_TCB_init+0x7c>
    3e64:	e8 0f       	add	r30, r24
    3e66:	f9 1f       	adc	r31, r25
    3e68:	e7 5e       	subi	r30, 0xE7	; 231
    3e6a:	f8 4f       	sbci	r31, 0xF8	; 248
    3e6c:	88 85       	ldd	r24, Y+8	; 0x08
    3e6e:	82 87       	std	Z+10, r24	; 0x0a
{
    3e70:	88 81       	ld	r24, Y
    3e72:	99 27       	eor	r25, r25
    3e74:	87 fd       	sbrc	r24, 7
    3e76:	90 95       	com	r25
    3e78:	fc 01       	movw	r30, r24
    3e7a:	25 e0       	ldi	r18, 0x05	; 5
    3e7c:	ee 0f       	add	r30, r30
    3e7e:	ff 1f       	adc	r31, r31
    3e80:	2a 95       	dec	r18
    3e82:	e1 f7       	brne	.-8      	; 0x3e7c <nrk_TCB_init+0x9c>
    3e84:	e8 0f       	add	r30, r24
    3e86:	f9 1f       	adc	r31, r25
    3e88:	e7 5e       	subi	r30, 0xE7	; 231
    3e8a:	f8 4f       	sbci	r31, 0xF8	; 248
    3e8c:	83 e0       	ldi	r24, 0x03	; 3
    3e8e:	81 87       	std	Z+9, r24	; 0x09
volatile uint16_t val;
uint8_t check,level;
    3e90:	28 81       	ld	r18, Y
    3e92:	82 2f       	mov	r24, r18
    3e94:	99 27       	eor	r25, r25
    3e96:	87 fd       	sbrc	r24, 7
    3e98:	90 95       	com	r25
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	05 e0       	ldi	r16, 0x05	; 5
    3e9e:	ee 0f       	add	r30, r30
    3ea0:	ff 1f       	adc	r31, r31
    3ea2:	0a 95       	dec	r16
    3ea4:	e1 f7       	brne	.-8      	; 0x3e9e <nrk_TCB_init+0xbe>
    3ea6:	e8 0f       	add	r30, r24
    3ea8:	f9 1f       	adc	r31, r25
    3eaa:	e7 5e       	subi	r30, 0xE7	; 231
    3eac:	f8 4f       	sbci	r31, 0xF8	; 248
    3eae:	20 87       	std	Z+8, r18	; 0x08
nrk_sem_t *radio_sem;
    3eb0:	88 81       	ld	r24, Y
    3eb2:	99 27       	eor	r25, r25
    3eb4:	87 fd       	sbrc	r24, 7
    3eb6:	90 95       	com	r25
    3eb8:	fc 01       	movw	r30, r24
    3eba:	15 e0       	ldi	r17, 0x05	; 5
    3ebc:	ee 0f       	add	r30, r30
    3ebe:	ff 1f       	adc	r31, r31
    3ec0:	1a 95       	dec	r17
    3ec2:	e1 f7       	brne	.-8      	; 0x3ebc <nrk_TCB_init+0xdc>
    3ec4:	e8 0f       	add	r30, r24
    3ec6:	f9 1f       	adc	r31, r25
    3ec8:	e7 5e       	subi	r30, 0xE7	; 231
    3eca:	f8 4f       	sbci	r31, 0xF8	; 248
    3ecc:	15 82       	std	Z+5, r1	; 0x05

    3ece:	08 81       	ld	r16, Y
    3ed0:	11 27       	eor	r17, r17
    3ed2:	07 fd       	sbrc	r16, 7
    3ed4:	10 95       	com	r17
    3ed6:	2b 85       	ldd	r18, Y+11	; 0x0b
    3ed8:	3c 85       	ldd	r19, Y+12	; 0x0c
    3eda:	4d 85       	ldd	r20, Y+13	; 0x0d
    3edc:	5e 85       	ldd	r21, Y+14	; 0x0e
    3ede:	6f 85       	ldd	r22, Y+15	; 0x0f
    3ee0:	78 89       	ldd	r23, Y+16	; 0x10
    3ee2:	89 89       	ldd	r24, Y+17	; 0x11
    3ee4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ee6:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <_nrk_time_to_ticks>
    3eea:	f8 01       	movw	r30, r16
    3eec:	b5 e0       	ldi	r27, 0x05	; 5
    3eee:	ee 0f       	add	r30, r30
    3ef0:	ff 1f       	adc	r31, r31
    3ef2:	ba 95       	dec	r27
    3ef4:	e1 f7       	brne	.-8      	; 0x3eee <nrk_TCB_init+0x10e>
    3ef6:	e0 0f       	add	r30, r16
    3ef8:	f1 1f       	adc	r31, r17
    3efa:	e7 5e       	subi	r30, 0xE7	; 231
    3efc:	f8 4f       	sbci	r31, 0xF8	; 248
    3efe:	94 8f       	std	Z+28, r25	; 0x1c
    3f00:	83 8f       	std	Z+27, r24	; 0x1b
radio_sem= rf_get_sem();
    3f02:	08 81       	ld	r16, Y
    3f04:	11 27       	eor	r17, r17
    3f06:	07 fd       	sbrc	r16, 7
    3f08:	10 95       	com	r17
    3f0a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3f0c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3f0e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3f10:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3f12:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3f14:	78 a1       	ldd	r23, Y+32	; 0x20
    3f16:	89 a1       	ldd	r24, Y+33	; 0x21
    3f18:	9a a1       	ldd	r25, Y+34	; 0x22
    3f1a:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <_nrk_time_to_ticks>
    3f1e:	f8 01       	movw	r30, r16
    3f20:	a5 e0       	ldi	r26, 0x05	; 5
    3f22:	ee 0f       	add	r30, r30
    3f24:	ff 1f       	adc	r31, r31
    3f26:	aa 95       	dec	r26
    3f28:	e1 f7       	brne	.-8      	; 0x3f22 <nrk_TCB_init+0x142>
    3f2a:	e0 0f       	add	r30, r16
    3f2c:	f1 1f       	adc	r31, r17
    3f2e:	e7 5e       	subi	r30, 0xE7	; 231
    3f30:	f8 4f       	sbci	r31, 0xF8	; 248
    3f32:	96 8b       	std	Z+22, r25	; 0x16
    3f34:	85 8b       	std	Z+21, r24	; 0x15

    3f36:	88 81       	ld	r24, Y
    3f38:	99 27       	eor	r25, r25
    3f3a:	87 fd       	sbrc	r24, 7
    3f3c:	90 95       	com	r25
    3f3e:	fc 01       	movw	r30, r24
    3f40:	75 e0       	ldi	r23, 0x05	; 5
    3f42:	ee 0f       	add	r30, r30
    3f44:	ff 1f       	adc	r31, r31
    3f46:	7a 95       	dec	r23
    3f48:	e1 f7       	brne	.-8      	; 0x3f42 <nrk_TCB_init+0x162>
    3f4a:	e8 0f       	add	r30, r24
    3f4c:	f9 1f       	adc	r31, r25
    3f4e:	e7 5e       	subi	r30, 0xE7	; 231
    3f50:	f8 4f       	sbci	r31, 0xF8	; 248
    3f52:	85 89       	ldd	r24, Z+21	; 0x15
    3f54:	96 89       	ldd	r25, Z+22	; 0x16
    3f56:	23 8d       	ldd	r18, Z+27	; 0x1b
    3f58:	34 8d       	ldd	r19, Z+28	; 0x1c
    3f5a:	82 0f       	add	r24, r18
    3f5c:	93 1f       	adc	r25, r19
    3f5e:	90 8f       	std	Z+24, r25	; 0x18
    3f60:	87 8b       	std	Z+23, r24	; 0x17
// if semaphore not created, then assume you own the radio 
    3f62:	08 81       	ld	r16, Y
    3f64:	11 27       	eor	r17, r17
    3f66:	07 fd       	sbrc	r16, 7
    3f68:	10 95       	com	r17
    3f6a:	2b 89       	ldd	r18, Y+19	; 0x13
    3f6c:	3c 89       	ldd	r19, Y+20	; 0x14
    3f6e:	4d 89       	ldd	r20, Y+21	; 0x15
    3f70:	5e 89       	ldd	r21, Y+22	; 0x16
    3f72:	6f 89       	ldd	r22, Y+23	; 0x17
    3f74:	78 8d       	ldd	r23, Y+24	; 0x18
    3f76:	89 8d       	ldd	r24, Y+25	; 0x19
    3f78:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f7a:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <_nrk_time_to_ticks>
    3f7e:	f8 01       	movw	r30, r16
    3f80:	65 e0       	ldi	r22, 0x05	; 5
    3f82:	ee 0f       	add	r30, r30
    3f84:	ff 1f       	adc	r31, r31
    3f86:	6a 95       	dec	r22
    3f88:	e1 f7       	brne	.-8      	; 0x3f82 <nrk_TCB_init+0x1a2>
    3f8a:	e0 0f       	add	r30, r16
    3f8c:	f1 1f       	adc	r31, r17
    3f8e:	e7 5e       	subi	r30, 0xE7	; 231
    3f90:	f8 4f       	sbci	r31, 0xF8	; 248
    3f92:	96 8f       	std	Z+30, r25	; 0x1e
    3f94:	85 8f       	std	Z+29, r24	; 0x1d
if(radio_sem!=NULL)
    3f96:	88 81       	ld	r24, Y
    3f98:	99 27       	eor	r25, r25
    3f9a:	87 fd       	sbrc	r24, 7
    3f9c:	90 95       	com	r25
    3f9e:	fc 01       	movw	r30, r24
    3fa0:	55 e0       	ldi	r21, 0x05	; 5
    3fa2:	ee 0f       	add	r30, r30
    3fa4:	ff 1f       	adc	r31, r31
    3fa6:	5a 95       	dec	r21
    3fa8:	e1 f7       	brne	.-8      	; 0x3fa2 <nrk_TCB_init+0x1c2>
    3faa:	e8 0f       	add	r30, r24
    3fac:	f9 1f       	adc	r31, r25
    3fae:	e7 5e       	subi	r30, 0xE7	; 231
    3fb0:	f8 4f       	sbci	r31, 0xF8	; 248
    3fb2:	85 8d       	ldd	r24, Z+29	; 0x1d
    3fb4:	96 8d       	ldd	r25, Z+30	; 0x1e
    3fb6:	92 8f       	std	Z+26, r25	; 0x1a
    3fb8:	81 8f       	std	Z+25, r24	; 0x19
 nrk_sem_pend (radio_sem);
    3fba:	88 81       	ld	r24, Y
    3fbc:	99 27       	eor	r25, r25
    3fbe:	87 fd       	sbrc	r24, 7
    3fc0:	90 95       	com	r25
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	45 e0       	ldi	r20, 0x05	; 5
    3fc6:	ee 0f       	add	r30, r30
    3fc8:	ff 1f       	adc	r31, r31
    3fca:	4a 95       	dec	r20
    3fcc:	e1 f7       	brne	.-8      	; 0x3fc6 <nrk_TCB_init+0x1e6>
    3fce:	e8 0f       	add	r30, r24
    3fd0:	f9 1f       	adc	r31, r25
    3fd2:	e7 5e       	subi	r30, 0xE7	; 231
    3fd4:	f8 4f       	sbci	r31, 0xF8	; 248
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	90 a3       	std	Z+32, r25	; 0x20
    3fdc:	87 8f       	std	Z+31, r24	; 0x1f

    3fde:	88 81       	ld	r24, Y
    3fe0:	99 27       	eor	r25, r25
    3fe2:	87 fd       	sbrc	r24, 7
    3fe4:	90 95       	com	r25
    3fe6:	fc 01       	movw	r30, r24
    3fe8:	35 e0       	ldi	r19, 0x05	; 5
    3fea:	ee 0f       	add	r30, r30
    3fec:	ff 1f       	adc	r31, r31
    3fee:	3a 95       	dec	r19
    3ff0:	e1 f7       	brne	.-8      	; 0x3fea <nrk_TCB_init+0x20a>
    3ff2:	e8 0f       	add	r30, r24
    3ff4:	f9 1f       	adc	r31, r25
    3ff6:	e7 5e       	subi	r30, 0xE7	; 231
    3ff8:	f8 4f       	sbci	r31, 0xF8	; 248
    3ffa:	f3 82       	std	Z+3, r15	; 0x03
    3ffc:	e2 82       	std	Z+2, r14	; 0x02
    // activate cc2420 vreg
    3ffe:	88 81       	ld	r24, Y
    4000:	99 27       	eor	r25, r25
    4002:	87 fd       	sbrc	r24, 7
    4004:	90 95       	com	r25
    4006:	fc 01       	movw	r30, r24
    4008:	25 e0       	ldi	r18, 0x05	; 5
    400a:	ee 0f       	add	r30, r30
    400c:	ff 1f       	adc	r31, r31
    400e:	2a 95       	dec	r18
    4010:	e1 f7       	brne	.-8      	; 0x400a <nrk_TCB_init+0x22a>
    4012:	e8 0f       	add	r30, r24
    4014:	f9 1f       	adc	r31, r25
    4016:	e7 5e       	subi	r30, 0xE7	; 231
    4018:	f8 4f       	sbci	r31, 0xF8	; 248
    401a:	81 e0       	ldi	r24, 0x01	; 1
    401c:	84 87       	std	Z+12, r24	; 0x0c

level=0;
while(level<0x1F)
{
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	df 91       	pop	r29
    4024:	cf 91       	pop	r28
    4026:	1f 91       	pop	r17
    4028:	0f 91       	pop	r16
    402a:	ff 90       	pop	r15
    402c:	ef 90       	pop	r14
    402e:	08 95       	ret

00004030 <nrk_start>:
				}
			 	val=max-min;	
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
    4030:	8f 92       	push	r8
    4032:	9f 92       	push	r9
    4034:	af 92       	push	r10
    4036:	bf 92       	push	r11
    4038:	cf 92       	push	r12
    403a:	df 92       	push	r13
    403c:	ef 92       	push	r14
    403e:	ff 92       	push	r15
    4040:	0f 93       	push	r16
    4042:	1f 93       	push	r17
    4044:	cf 93       	push	r28
    4046:	df 93       	push	r29
    4048:	61 e2       	ldi	r22, 0x21	; 33
    404a:	a6 2e       	mov	r10, r22
    404c:	67 e0       	ldi	r22, 0x07	; 7
    404e:	b6 2e       	mov	r11, r22
    4050:	cc 24       	eor	r12, r12
    4052:	dd 24       	eor	r13, r13
			
		      count++;
                      return count;

             case CLOSE:
			// Turn off sensor power
    4054:	45 01       	movw	r8, r10
				}
			 	val=max-min;	
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
    4056:	ec 2c       	mov	r14, r12

			}
			
		      count++;
                      return count;

    4058:	f5 01       	movw	r30, r10
    405a:	f0 80       	ld	r15, Z
             case CLOSE:
			// Turn off sensor power
    405c:	ff ef       	ldi	r31, 0xFF	; 255
    405e:	ff 16       	cp	r15, r31
    4060:	91 f0       	breq	.+36     	; 0x4086 <nrk_start+0x56>
    4062:	e4 01       	movw	r28, r8
    4064:	00 e0       	ldi	r16, 0x00	; 0
    4066:	10 e0       	ldi	r17, 0x00	; 0
			PORTF |= PWR_CTRL_MASK;
		    	is_open=0; 
                        return NRK_OK;
             
    4068:	e0 16       	cp	r14, r16
    406a:	39 f0       	breq	.+14     	; 0x407a <nrk_start+0x4a>
    406c:	88 81       	ld	r24, Y
    406e:	f8 16       	cp	r15, r24
    4070:	21 f4       	brne	.+8      	; 0x407a <nrk_start+0x4a>
	     case GET_STATUS:
	     		// use "key" here 
    4072:	6f 2d       	mov	r22, r15
    4074:	85 e0       	ldi	r24, 0x05	; 5
    4076:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <nrk_kernel_error_add>
    407a:	0f 5f       	subi	r16, 0xFF	; 255
    407c:	1f 4f       	sbci	r17, 0xFF	; 255
    407e:	a1 96       	adiw	r28, 0x21	; 33
                      return count;

             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
		    	is_open=0; 
    4080:	03 30       	cpi	r16, 0x03	; 3
    4082:	11 05       	cpc	r17, r1
    4084:	89 f7       	brne	.-30     	; 0x4068 <nrk_start+0x38>
    4086:	08 94       	sec
    4088:	c1 1c       	adc	r12, r1
    408a:	d1 1c       	adc	r13, r1
    408c:	81 e2       	ldi	r24, 0x21	; 33
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	a8 0e       	add	r10, r24
    4092:	b9 1e       	adc	r11, r25
			      		buffer[count]=(val>>2)  & 0xFF;
				}

			}
			
		      count++;
    4094:	93 e0       	ldi	r25, 0x03	; 3
    4096:	c9 16       	cp	r12, r25
    4098:	d1 04       	cpc	r13, r1
    409a:	e9 f6       	brne	.-70     	; 0x4056 <nrk_start+0x26>
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
			{
			// Set to audio channel if it is an average value
    409c:	0e 94 f6 25 	call	0x4bec	; 0x4bec <nrk_get_high_ready_task_ID>
			if(value==AUDIO_P2P) 
    40a0:	28 2f       	mov	r18, r24
    40a2:	33 27       	eor	r19, r19
    40a4:	27 fd       	sbrc	r18, 7
    40a6:	30 95       	com	r19
    40a8:	f9 01       	movw	r30, r18
    40aa:	55 e0       	ldi	r21, 0x05	; 5
    40ac:	ee 0f       	add	r30, r30
    40ae:	ff 1f       	adc	r31, r31
    40b0:	5a 95       	dec	r21
    40b2:	e1 f7       	brne	.-8      	; 0x40ac <nrk_start+0x7c>
    40b4:	e2 0f       	add	r30, r18
    40b6:	f3 1f       	adc	r31, r19
    40b8:	e7 5e       	subi	r30, 0xE7	; 231
    40ba:	f8 4f       	sbci	r31, 0xF8	; 248
    40bc:	32 85       	ldd	r19, Z+10	; 0x0a
    40be:	30 93 97 07 	sts	0x0797, r19
			  {
    40c2:	21 e2       	ldi	r18, 0x21	; 33
    40c4:	82 02       	muls	r24, r18
    40c6:	c0 01       	movw	r24, r0
    40c8:	11 24       	eor	r1, r1
    40ca:	87 5e       	subi	r24, 0xE7	; 231
    40cc:	98 4f       	sbci	r25, 0xF8	; 248
    40ce:	90 93 96 07 	sts	0x0796, r25
    40d2:	80 93 95 07 	sts	0x0795, r24
    40d6:	90 93 87 07 	sts	0x0787, r25
    40da:	80 93 86 07 	sts	0x0786, r24
				channel=value;
    40de:	30 93 88 07 	sts	0x0788, r19
					return NRK_ERROR;
				}
				channel=value;
				if(channel==LIGHT)
				   ADC_VREF_VCC();	
				else
    40e2:	0e 94 2e 33 	call	0x665c	; 0x665c <nrk_target_start>
				   ADC_VREF_2_56();	
    40e6:	0e 94 14 33 	call	0x6628	; 0x6628 <nrk_stack_pointer_init>
				ADC_SET_CHANNEL (channel);
    40ea:	0e 94 52 33 	call	0x66a4	; 0x66a4 <nrk_start_high_ready_task>
    40ee:	ff cf       	rjmp	.-2      	; 0x40ee <nrk_start+0xbe>

000040f0 <nrk_init>:

#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

    40f0:	0f 93       	push	r16
    40f2:	1f 93       	push	r17
    40f4:	cf 93       	push	r28
    40f6:	df 93       	push	r29
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
    40fc:	a3 97       	sbiw	r28, 0x23	; 35
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	f8 94       	cli
    4102:	de bf       	out	0x3e, r29	; 62
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	cd bf       	out	0x3d, r28	; 61
#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

    4108:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <nrk_signal_create>
    410c:	80 93 85 07 	sts	0x0785, r24
#define ADC_SAMPLE_SINGLE() \
    4110:	8f 3f       	cpi	r24, 0xFF	; 255
    4112:	21 f4       	brne	.+8      	; 0x411c <nrk_init+0x2c>
    4114:	60 e0       	ldi	r22, 0x00	; 0
    4116:	8e e0       	ldi	r24, 0x0E	; 14
    4118:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <nrk_kernel_error_add>
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
    411c:	0e 94 85 32 	call	0x650a	; 0x650a <_nrk_startup_ok>
    4120:	88 23       	and	r24, r24
    4122:	21 f4       	brne	.+8      	; 0x412c <nrk_init+0x3c>
    4124:	60 e0       	ldi	r22, 0x00	; 0
    4126:	86 e0       	ldi	r24, 0x06	; 6
    4128:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <nrk_kernel_error_add>
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
    412c:	10 92 88 07 	sts	0x0788, r1
		    }
    4130:	10 92 96 07 	sts	0x0796, r1
    4134:	10 92 95 07 	sts	0x0795, r1
		    if(opt&WRITE_FLAG)
		    {
    4138:	10 92 87 07 	sts	0x0787, r1
    413c:	10 92 86 07 	sts	0x0786, r1
		    	return NRK_ERROR;
    4140:	10 92 97 07 	sts	0x0797, r1
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
		    else return NRK_OK;
		
	    

    4144:	10 92 94 07 	sts	0x0794, r1
             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
    4148:	8f ef       	ldi	r24, 0xFF	; 255
    414a:	80 93 7e 07 	sts	0x077E, r24
			{
    414e:	80 93 80 07 	sts	0x0780, r24
			      /* Conversion to 8-bit value*/
    4152:	80 93 7f 07 	sts	0x077F, r24
	    

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
    4156:	80 93 81 07 	sts	0x0781, r24
			{
    415a:	80 93 83 07 	sts	0x0783, r24
			      /* Conversion to 8-bit value*/
    415e:	80 93 82 07 	sts	0x0782, r24
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}
    4162:	93 e6       	ldi	r25, 0x63	; 99
    4164:	90 93 23 07 	sts	0x0723, r25

    4168:	80 93 21 07 	sts	0x0721, r24
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}
    416c:	90 93 44 07 	sts	0x0744, r25

    4170:	80 93 42 07 	sts	0x0742, r24
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}
    4174:	90 93 65 07 	sts	0x0765, r25

    4178:	80 93 63 07 	sts	0x0763, r24
    417c:	e8 e9       	ldi	r30, 0x98	; 152
    417e:	f7 e0       	ldi	r31, 0x07	; 7
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}


			} else if(channel==BAT)
    4180:	cf 01       	movw	r24, r30
    4182:	05 96       	adiw	r24, 0x05	; 5
    4184:	94 83       	std	Z+4, r25	; 0x04
    4186:	83 83       	std	Z+3, r24	; 0x03
			{
    4188:	f7 83       	std	Z+7, r31	; 0x07
    418a:	e6 83       	std	Z+6, r30	; 0x06
    418c:	fc 01       	movw	r30, r24

				if(size==1)
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}

    418e:	27 e0       	ldi	r18, 0x07	; 7
    4190:	87 3a       	cpi	r24, 0xA7	; 167
    4192:	92 07       	cpc	r25, r18
    4194:	a9 f7       	brne	.-22     	; 0x4180 <nrk_init+0x90>

			} else if(channel==BAT)
			{
			uint16_t tmp;
			tmp=read_voltage_status();
			if(size==2)
    4196:	10 92 9a 07 	sts	0x079A, r1
    419a:	10 92 99 07 	sts	0x0799, r1
				{
    419e:	10 92 ab 07 	sts	0x07AB, r1
    41a2:	10 92 aa 07 	sts	0x07AA, r1
					buffer[count]=tmp & 0xFF;
    41a6:	10 92 8b 07 	sts	0x078B, r1
    41aa:	10 92 8a 07 	sts	0x078A, r1
					count++;
    41ae:	0f 97       	sbiw	r24, 0x0f	; 15
    41b0:	90 93 18 07 	sts	0x0718, r25
    41b4:	80 93 17 07 	sts	0x0717, r24
					buffer[count]=(tmp>>8) & 0xFF;
				}
			if(size==1)
				{
					buffer[count]=(tmp>>2) & 0xFF;
    41b8:	65 e1       	ldi	r22, 0x15	; 21
    41ba:	7c e2       	ldi	r23, 0x2C	; 44
    41bc:	8e 01       	movw	r16, r28
    41be:	0f 5f       	subi	r16, 0xFF	; 255
    41c0:	1f 4f       	sbci	r17, 0xFF	; 255
    41c2:	c8 01       	movw	r24, r16
    41c4:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <nrk_task_set_entry_function>
				}
    41c8:	40 e8       	ldi	r20, 0x80	; 128
    41ca:	50 e0       	ldi	r21, 0x00	; 0
    41cc:	61 e1       	ldi	r22, 0x11	; 17
    41ce:	76 e0       	ldi	r23, 0x06	; 6
    41d0:	c8 01       	movw	r24, r16
    41d2:	0e 94 33 33 	call	0x6666	; 0x6666 <nrk_task_set_stk>
			}else if(channel==AUDIO_P2P)
    41d6:	85 e5       	ldi	r24, 0x55	; 85
    41d8:	80 93 11 06 	sts	0x0611, r24
			{
  			/* Conversion to 8-bit value*/
    41dc:	19 86       	std	Y+9, r1	; 0x09
			      //uint16_t val=get_adc_val();
    41de:	1c 8e       	std	Y+28, r1	; 0x1c
    41e0:	1d 8e       	std	Y+29, r1	; 0x1d
    41e2:	1e 8e       	std	Y+30, r1	; 0x1e
    41e4:	1f 8e       	std	Y+31, r1	; 0x1f
			      uint16_t val,min, max;
    41e6:	18 a2       	std	Y+32, r1	; 0x20
    41e8:	19 a2       	std	Y+33, r1	; 0x21
    41ea:	1a a2       	std	Y+34, r1	; 0x22
    41ec:	1b a2       	std	Y+35, r1	; 0x23
			      uint8_t i;
    41ee:	91 e0       	ldi	r25, 0x01	; 1
    41f0:	98 87       	std	Y+8, r25	; 0x08
				max=0;
    41f2:	82 e0       	ldi	r24, 0x02	; 2
    41f4:	8a 87       	std	Y+10, r24	; 0x0a
			        min=1025;
    41f6:	9b 87       	std	Y+11, r25	; 0x0b
			      for(i=0; i<64; i++ )
    41f8:	c8 01       	movw	r24, r16
    41fa:	0e 94 df 28 	call	0x51be	; 0x51be <nrk_activate_task>
    41fe:	a3 96       	adiw	r28, 0x23	; 35
    4200:	0f b6       	in	r0, 0x3f	; 63
    4202:	f8 94       	cli
    4204:	de bf       	out	0x3e, r29	; 62
    4206:	0f be       	out	0x3f, r0	; 63
    4208:	cd bf       	out	0x3d, r28	; 61
    420a:	df 91       	pop	r29
    420c:	cf 91       	pop	r28
    420e:	1f 91       	pop	r17
    4210:	0f 91       	pop	r16
    4212:	08 95       	ret

00004214 <nrk_halt>:

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    4214:	f8 94       	cli
    4216:	ff cf       	rjmp	.-2      	; 0x4216 <nrk_halt+0x2>

00004218 <_nrk_errno_set>:
#include <stdio.h>
#include <ulib.h>
#include <nrk_error.h>
#include <nrk.h>
#include <stdint.h>
#include <basic_rf.h>
    4218:	e0 91 95 07 	lds	r30, 0x0795
    421c:	f0 91 96 07 	lds	r31, 0x0796
    4220:	84 87       	std	Z+12, r24	; 0x0c
    4222:	08 95       	ret

00004224 <nrk_errno_get>:
#include <nrk_timer.h>

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200
    4224:	e0 91 95 07 	lds	r30, 0x0795
    4228:	f0 91 96 07 	lds	r31, 0x0796
    422c:	84 85       	ldd	r24, Z+12	; 0x0c

uint8_t channel;
    422e:	99 27       	eor	r25, r25
    4230:	08 95       	ret

00004232 <nrk_error_get>:
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)


#define ADC_VREF_2_56() \
    4232:	dc 01       	movw	r26, r24
    4234:	fb 01       	movw	r30, r22
   do { \
    4236:	80 91 02 06 	lds	r24, 0x0602
    423a:	88 23       	and	r24, r24
    423c:	19 f4       	brne	.+6      	; 0x4244 <nrk_error_get+0x12>
    423e:	80 e0       	ldi	r24, 0x00	; 0
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	08 95       	ret
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)
    4244:	80 83       	st	Z, r24

    4246:	80 91 15 03 	lds	r24, 0x0315
    424a:	8c 93       	st	X, r24
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	90 e0       	ldi	r25, 0x00	; 0
#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

    4250:	08 95       	ret

00004252 <nrk_error_print>:
// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)
    4252:	1f 93       	push	r17

#define ADC_SAMPLE_SINGLE() \
    4254:	80 91 02 06 	lds	r24, 0x0602
    4258:	88 23       	and	r24, r24
    425a:	09 f4       	brne	.+2      	; 0x425e <nrk_error_print+0xc>
    425c:	9e c0       	rjmp	.+316    	; 0x439a <nrk_error_print+0x148>
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
} while(0)
    425e:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>
// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
do { \
x =  ADCL; \
x |= ADCH << 8; \
} while (0)
    4262:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>
{
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

    4266:	82 e7       	ldi	r24, 0x72	; 114
    4268:	93 e0       	ldi	r25, 0x03	; 3
    426a:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <nrk_kprintf>
     switch(action)
    426e:	80 91 15 03 	lds	r24, 0x0315
    4272:	99 27       	eor	r25, r25
    4274:	9f 93       	push	r25
    4276:	8f 93       	push	r24
    4278:	87 e9       	ldi	r24, 0x97	; 151
    427a:	92 e0       	ldi	r25, 0x02	; 2
    427c:	9f 93       	push	r25
    427e:	8f 93       	push	r24
    4280:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>
     {
    4284:	8e e6       	ldi	r24, 0x6E	; 110
    4286:	93 e0       	ldi	r25, 0x03	; 3
    4288:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <nrk_kprintf>
            case INIT: 
    428c:	0f 90       	pop	r0
    428e:	0f 90       	pop	r0
    4290:	0f 90       	pop	r0
    4292:	0f 90       	pop	r0
    4294:	80 91 02 06 	lds	r24, 0x0602
    4298:	84 31       	cpi	r24, 0x14	; 20
    429a:	10 f0       	brcs	.+4      	; 0x42a0 <nrk_error_print+0x4e>
			// Set the pwr ctrl pin as output
    429c:	10 92 02 06 	sts	0x0602, r1
  			DDRF = PWR_CTRL_MASK;
    42a0:	80 91 02 06 	lds	r24, 0x0602
    42a4:	99 27       	eor	r25, r25
    42a6:	aa 27       	eor	r26, r26
    42a8:	bb 27       	eor	r27, r27
    42aa:	fc 01       	movw	r30, r24
    42ac:	31 97       	sbiw	r30, 0x01	; 1
    42ae:	e2 31       	cpi	r30, 0x12	; 18
    42b0:	f1 05       	cpc	r31, r1
    42b2:	f0 f5       	brcc	.+124    	; 0x4330 <nrk_error_print+0xde>
    42b4:	ea 59       	subi	r30, 0x9A	; 154
    42b6:	ff 4f       	sbci	r31, 0xFF	; 255
    42b8:	ee 0f       	add	r30, r30
    42ba:	ff 1f       	adc	r31, r31
    42bc:	05 90       	lpm	r0, Z+
    42be:	f4 91       	lpm	r31, Z
    42c0:	e0 2d       	mov	r30, r0
    42c2:	09 94       	ijmp
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
    42c4:	87 e4       	ldi	r24, 0x47	; 71
    42c6:	93 e0       	ldi	r25, 0x03	; 3
    42c8:	35 c0       	rjmp	.+106    	; 0x4334 <nrk_error_print+0xe2>
		      return 1;
	     
	    case OPEN:  
    42ca:	83 e3       	ldi	r24, 0x33	; 51
    42cc:	93 e0       	ldi	r25, 0x03	; 3
    42ce:	32 c0       	rjmp	.+100    	; 0x4334 <nrk_error_print+0xe2>
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
		    if(opt&READ_FLAG)
    42d0:	8d e1       	ldi	r24, 0x1D	; 29
    42d2:	93 e0       	ldi	r25, 0x03	; 3
    42d4:	2f c0       	rjmp	.+94     	; 0x4334 <nrk_error_print+0xe2>
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
    42d6:	82 e0       	ldi	r24, 0x02	; 2
    42d8:	93 e0       	ldi	r25, 0x03	; 3
    42da:	2c c0       	rjmp	.+88     	; 0x4334 <nrk_error_print+0xe2>
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    42dc:	8c ee       	ldi	r24, 0xEC	; 236
    42de:	92 e0       	ldi	r25, 0x02	; 2
    42e0:	29 c0       	rjmp	.+82     	; 0x4334 <nrk_error_print+0xe2>
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
    42e2:	84 ed       	ldi	r24, 0xD4	; 212
    42e4:	92 e0       	ldi	r25, 0x02	; 2
    42e6:	26 c0       	rjmp	.+76     	; 0x4334 <nrk_error_print+0xe2>
		    {
		    	return NRK_ERROR;
		    }
    42e8:	81 ec       	ldi	r24, 0xC1	; 193
    42ea:	92 e0       	ldi	r25, 0x02	; 2
    42ec:	23 c0       	rjmp	.+70     	; 0x4334 <nrk_error_print+0xe2>
		    if(opt&APPEND_FLAG)
		    {
		    	return NRK_ERROR;
    42ee:	8e ea       	ldi	r24, 0xAE	; 174
    42f0:	92 e0       	ldi	r25, 0x02	; 2
    42f2:	20 c0       	rjmp	.+64     	; 0x4334 <nrk_error_print+0xe2>
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
    42f4:	80 e9       	ldi	r24, 0x90	; 144
    42f6:	92 e0       	ldi	r25, 0x02	; 2
    42f8:	1d c0       	rjmp	.+58     	; 0x4334 <nrk_error_print+0xe2>
		    else return NRK_OK;
		
	    
    42fa:	8b e6       	ldi	r24, 0x6B	; 107
    42fc:	92 e0       	ldi	r25, 0x02	; 2
    42fe:	1a c0       	rjmp	.+52     	; 0x4334 <nrk_error_print+0xe2>

             case READ:
	     	      count=0;
    4300:	8f e5       	ldi	r24, 0x5F	; 95
    4302:	92 e0       	ldi	r25, 0x02	; 2
    4304:	17 c0       	rjmp	.+46     	; 0x4334 <nrk_error_print+0xe2>
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
			{
    4306:	84 e4       	ldi	r24, 0x44	; 68
    4308:	92 e0       	ldi	r25, 0x02	; 2
    430a:	14 c0       	rjmp	.+40     	; 0x4334 <nrk_error_print+0xe2>
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();

    430c:	85 e3       	ldi	r24, 0x35	; 53
    430e:	92 e0       	ldi	r25, 0x02	; 2
    4310:	11 c0       	rjmp	.+34     	; 0x4334 <nrk_error_print+0xe2>
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
    4312:	84 e2       	ldi	r24, 0x24	; 36
    4314:	92 e0       	ldi	r25, 0x02	; 2
    4316:	0e c0       	rjmp	.+28     	; 0x4334 <nrk_error_print+0xe2>
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}
    4318:	80 e1       	ldi	r24, 0x10	; 16
    431a:	92 e0       	ldi	r25, 0x02	; 2
    431c:	0b c0       	rjmp	.+22     	; 0x4334 <nrk_error_print+0xe2>

				if(size==1)
			      	{
    431e:	80 ef       	ldi	r24, 0xF0	; 240
    4320:	91 e0       	ldi	r25, 0x01	; 1
    4322:	08 c0       	rjmp	.+16     	; 0x4334 <nrk_error_print+0xe2>
			      		buffer[count]=(val>>2)  & 0xFF;
				}

    4324:	88 ed       	ldi	r24, 0xD8	; 216
    4326:	91 e0       	ldi	r25, 0x01	; 1
    4328:	05 c0       	rjmp	.+10     	; 0x4334 <nrk_error_print+0xe2>

			} else if(channel==BAT)
			{
    432a:	8d eb       	ldi	r24, 0xBD	; 189
    432c:	91 e0       	ldi	r25, 0x01	; 1
    432e:	02 c0       	rjmp	.+4      	; 0x4334 <nrk_error_print+0xe2>
			uint16_t tmp;
			tmp=read_voltage_status();
			if(size==2)
    4330:	86 eb       	ldi	r24, 0xB6	; 182
    4332:	91 e0       	ldi	r25, 0x01	; 1
    4334:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <nrk_kprintf>
				{
					buffer[count]=tmp & 0xFF;
    4338:	60 91 bc 07 	lds	r22, 0x07BC
    433c:	70 91 bd 07 	lds	r23, 0x07BD
    4340:	8d e0       	ldi	r24, 0x0D	; 13
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
					count++;
    4348:	60 91 bc 07 	lds	r22, 0x07BC
    434c:	70 91 bd 07 	lds	r23, 0x07BD
    4350:	8a e0       	ldi	r24, 0x0A	; 10
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}
    4358:	82 e0       	ldi	r24, 0x02	; 2
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <nrk_led_set>

    4360:	83 e0       	ldi	r24, 0x03	; 3
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <nrk_led_clr>
    4368:	10 e0       	ldi	r17, 0x00	; 0
				if(size==1)
			      	{
    436a:	88 ee       	ldi	r24, 0xE8	; 232
    436c:	93 e0       	ldi	r25, 0x03	; 3
    436e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}

				if(size==1)
    4372:	1f 5f       	subi	r17, 0xFF	; 255
    4374:	14 36       	cpi	r17, 0x64	; 100
    4376:	c9 f7       	brne	.-14     	; 0x436a <nrk_error_print+0x118>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
    4378:	83 e0       	ldi	r24, 0x03	; 3
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <nrk_led_set>
				}
    4380:	82 e0       	ldi	r24, 0x02	; 2
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <nrk_led_clr>
    4388:	10 e0       	ldi	r17, 0x00	; 0

			}
    438a:	88 ee       	ldi	r24, 0xE8	; 232
    438c:	93 e0       	ldi	r25, 0x03	; 3
    438e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <nrk_spin_wait_us>

				if(size==1)
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}

    4392:	1f 5f       	subi	r17, 0xFF	; 255
    4394:	14 36       	cpi	r17, 0x64	; 100
    4396:	c9 f7       	brne	.-14     	; 0x438a <nrk_error_print+0x138>
    4398:	df cf       	rjmp	.-66     	; 0x4358 <nrk_error_print+0x106>
			
		      count++;
                      return count;

             case CLOSE:
			// Turn off sensor power
    439a:	80 e0       	ldi	r24, 0x00	; 0
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	1f 91       	pop	r17
    43a0:	08 95       	ret

000043a2 <nrk_kernel_error_add>:
} while (0)

#define ADC_VREF_VCC() \
   do { \
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
    43a2:	80 93 02 06 	sts	0x0602, r24
} while(0)
    43a6:	60 93 15 03 	sts	0x0315, r22


#define ADC_VREF_1_1() \
    43aa:	0e 94 29 21 	call	0x4252	; 0x4252 <nrk_error_print>
    43ae:	08 95       	ret

000043b0 <nrk_error_add>:

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    43b0:	80 93 02 06 	sts	0x0602, r24
    do { \
    43b4:	e0 91 95 07 	lds	r30, 0x0795
    43b8:	f0 91 96 07 	lds	r31, 0x0796
    43bc:	80 85       	ldd	r24, Z+8	; 0x08
    43be:	80 93 15 03 	sts	0x0315, r24
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)
    43c2:	0e 94 29 21 	call	0x4252	; 0x4252 <nrk_error_print>
    43c6:	08 95       	ret

000043c8 <nrk_stack_check_pid>:
     {
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
    43c8:	99 27       	eor	r25, r25
    43ca:	87 fd       	sbrc	r24, 7
    43cc:	90 95       	com	r25
    43ce:	fc 01       	movw	r30, r24
    43d0:	25 e0       	ldi	r18, 0x05	; 5
    43d2:	ee 0f       	add	r30, r30
    43d4:	ff 1f       	adc	r31, r31
    43d6:	2a 95       	dec	r18
    43d8:	e1 f7       	brne	.-8      	; 0x43d2 <nrk_stack_check_pid+0xa>
    43da:	e8 0f       	add	r30, r24
    43dc:	f9 1f       	adc	r31, r25
    43de:	e7 5e       	subi	r30, 0xE7	; 231
    43e0:	f8 4f       	sbci	r31, 0xF8	; 248
    43e2:	a2 81       	ldd	r26, Z+2	; 0x02
    43e4:	b3 81       	ldd	r27, Z+3	; 0x03
			is_open=0;
		      return 1;
    43e6:	8c 91       	ld	r24, X
    43e8:	85 35       	cpi	r24, 0x55	; 85
    43ea:	29 f0       	breq	.+10     	; 0x43f6 <nrk_stack_check_pid+0x2e>
	     
    43ec:	85 e5       	ldi	r24, 0x55	; 85
    43ee:	8c 93       	st	X, r24
    43f0:	8f ef       	ldi	r24, 0xFF	; 255
    43f2:	9f ef       	ldi	r25, 0xFF	; 255
    43f4:	08 95       	ret
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
		    if(opt&READ_FLAG)
		    {
    43f6:	80 81       	ld	r24, Z
    43f8:	91 81       	ldd	r25, Z+1	; 0x01
    43fa:	80 50       	subi	r24, 0x00	; 0
    43fc:	92 42       	sbci	r25, 0x22	; 34
    43fe:	18 f4       	brcc	.+6      	; 0x4406 <nrk_stack_check_pid+0x3e>
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	08 95       	ret
		   	// Turn on Sensor Node Power
    4406:	82 e1       	ldi	r24, 0x12	; 18
    4408:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <nrk_error_add>
    440c:	8f ef       	ldi	r24, 0xFF	; 255
    440e:	9f ef       	ldi	r25, 0xFF	; 255
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
    4410:	08 95       	ret

00004412 <dump_stack_info>:
#include <nrk_driver_list.h>
#include <nrk_driver.h>
#include <ff_basic_sensor.h>
#include <include.h>
#include <stdio.h>
#include <ulib.h>
    4412:	6f 92       	push	r6
    4414:	7f 92       	push	r7
    4416:	8f 92       	push	r8
    4418:	9f 92       	push	r9
    441a:	af 92       	push	r10
    441c:	bf 92       	push	r11
    441e:	cf 92       	push	r12
    4420:	df 92       	push	r13
    4422:	ef 92       	push	r14
    4424:	ff 92       	push	r15
    4426:	0f 93       	push	r16
    4428:	1f 93       	push	r17
    442a:	cf 93       	push	r28
    442c:	df 93       	push	r29
#include <nrk_error.h>
#include <nrk.h>
#include <stdint.h>
#include <basic_rf.h>
#include <nrk_timer.h>
    442e:	8e e7       	ldi	r24, 0x7E	; 126
    4430:	93 e0       	ldi	r25, 0x03	; 3
    4432:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <nrk_kprintf>

#define ADC_STARTUP_DELAY  1000
    4436:	e0 91 95 07 	lds	r30, 0x0795
    443a:	f0 91 96 07 	lds	r31, 0x0796
    443e:	80 85       	ldd	r24, Z+8	; 0x08
    4440:	99 27       	eor	r25, r25
    4442:	87 fd       	sbrc	r24, 7
    4444:	90 95       	com	r25
    4446:	9f 93       	push	r25
    4448:	8f 93       	push	r24
    444a:	8a e9       	ldi	r24, 0x9A	; 154
    444c:	92 e0       	ldi	r25, 0x02	; 2
    444e:	9f 93       	push	r25
    4450:	8f 93       	push	r24
    4452:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>
#define ADC_SETUP_DELAY  200
    4456:	e0 91 95 07 	lds	r30, 0x0795
    445a:	f0 91 96 07 	lds	r31, 0x0796
    445e:	02 81       	ldd	r16, Z+2	; 0x02
    4460:	13 81       	ldd	r17, Z+3	; 0x03

uint8_t channel;
    4462:	1f 93       	push	r17
    4464:	0f 93       	push	r16
    4466:	83 ea       	ldi	r24, 0xA3	; 163
    4468:	92 e0       	ldi	r25, 0x02	; 2
    446a:	9f 93       	push	r25
    446c:	8f 93       	push	r24
    446e:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>
uint8_t is_open;
    4472:	f8 01       	movw	r30, r16
    4474:	80 81       	ld	r24, Z
    4476:	99 27       	eor	r25, r25
    4478:	9f 93       	push	r25
    447a:	8f 93       	push	r24
    447c:	50 eb       	ldi	r21, 0xB0	; 176
    447e:	c5 2e       	mov	r12, r21
    4480:	52 e0       	ldi	r21, 0x02	; 2
    4482:	d5 2e       	mov	r13, r21
    4484:	df 92       	push	r13
    4486:	cf 92       	push	r12
    4488:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>

// VREF is set to VCC by default
#define ADC_INIT() \
    448c:	e0 91 95 07 	lds	r30, 0x0795
    4490:	f0 91 96 07 	lds	r31, 0x0796
    4494:	80 81       	ld	r24, Z
    4496:	91 81       	ldd	r25, Z+1	; 0x01
    4498:	9f 93       	push	r25
    449a:	8f 93       	push	r24
    449c:	4d eb       	ldi	r20, 0xBD	; 189
    449e:	e4 2e       	mov	r14, r20
    44a0:	42 e0       	ldi	r20, 0x02	; 2
    44a2:	f4 2e       	mov	r15, r20
    44a4:	ff 92       	push	r15
    44a6:	ef 92       	push	r14
    44a8:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>
    do { \
    44ac:	80 91 95 07 	lds	r24, 0x0795
    44b0:	90 91 96 07 	lds	r25, 0x0796
    44b4:	9f 93       	push	r25
    44b6:	8f 93       	push	r24
    44b8:	07 ec       	ldi	r16, 0xC7	; 199
    44ba:	12 e0       	ldi	r17, 0x02	; 2
    44bc:	1f 93       	push	r17
    44be:	0f 93       	push	r16
    44c0:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>
    44c4:	c9 e1       	ldi	r28, 0x19	; 25
    44c6:	d7 e0       	ldi	r29, 0x07	; 7
    44c8:	aa 24       	eor	r10, r10
    44ca:	bb 24       	eor	r11, r11
    44cc:	8d b7       	in	r24, 0x3d	; 61
    44ce:	9e b7       	in	r25, 0x3e	; 62
    44d0:	44 96       	adiw	r24, 0x14	; 20
    44d2:	0f b6       	in	r0, 0x3f	; 63
    44d4:	f8 94       	cli
    44d6:	9e bf       	out	0x3e, r25	; 62
    44d8:	0f be       	out	0x3f, r0	; 63
    44da:	8d bf       	out	0x3d, r24	; 61
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)

#define ADC_VREF_VCC() \
   do { \
    44dc:	37 ed       	ldi	r19, 0xD7	; 215
    44de:	63 2e       	mov	r6, r19
    44e0:	32 e0       	ldi	r19, 0x02	; 2
    44e2:	73 2e       	mov	r7, r19
	ADMUX &= ~(BM(REFS1));  \
    44e4:	46 01       	movw	r8, r12
	ADMUX |= BM(REFS0);  \
} while(0)

    44e6:	67 01       	movw	r12, r14

    44e8:	78 01       	movw	r14, r16
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)

    44ea:	0a 81       	ldd	r16, Y+2	; 0x02
    44ec:	1b 81       	ldd	r17, Y+3	; 0x03
#define ADC_VREF_VCC() \
   do { \
    44ee:	1f 93       	push	r17
    44f0:	0f 93       	push	r16
    44f2:	bf 92       	push	r11
    44f4:	af 92       	push	r10
    44f6:	7f 92       	push	r7
    44f8:	6f 92       	push	r6
    44fa:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>
	ADMUX &= ~(BM(REFS1));  \
    44fe:	f8 01       	movw	r30, r16
    4500:	80 81       	ld	r24, Z
    4502:	99 27       	eor	r25, r25
    4504:	9f 93       	push	r25
    4506:	8f 93       	push	r24
    4508:	9f 92       	push	r9
    450a:	8f 92       	push	r8
    450c:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>
	ADMUX |= BM(REFS0);  \
} while(0)

    4510:	88 81       	ld	r24, Y
    4512:	99 81       	ldd	r25, Y+1	; 0x01
    4514:	9f 93       	push	r25
    4516:	8f 93       	push	r24
    4518:	df 92       	push	r13
    451a:	cf 92       	push	r12
    451c:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>

    4520:	df 93       	push	r29
    4522:	cf 93       	push	r28
    4524:	ff 92       	push	r15
    4526:	ef 92       	push	r14
    4528:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <printf>
    452c:	08 94       	sec
    452e:	a1 1c       	adc	r10, r1
    4530:	b1 1c       	adc	r11, r1
    4532:	a1 96       	adiw	r28, 0x21	; 33

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
    4534:	8d b7       	in	r24, 0x3d	; 61
    4536:	9e b7       	in	r25, 0x3e	; 62
    4538:	42 96       	adiw	r24, 0x12	; 18
    453a:	0f b6       	in	r0, 0x3f	; 63
    453c:	f8 94       	cli
    453e:	9e bf       	out	0x3e, r25	; 62
    4540:	0f be       	out	0x3f, r0	; 63
    4542:	8d bf       	out	0x3d, r24	; 61
    4544:	93 e0       	ldi	r25, 0x03	; 3
    4546:	a9 16       	cp	r10, r25
    4548:	b1 04       	cpc	r11, r1
    454a:	79 f6       	brne	.-98     	; 0x44ea <dump_stack_info+0xd8>
    454c:	df 91       	pop	r29
    454e:	cf 91       	pop	r28
    4550:	1f 91       	pop	r17
    4552:	0f 91       	pop	r16
    4554:	ff 90       	pop	r15
    4556:	ef 90       	pop	r14
    4558:	df 90       	pop	r13
    455a:	cf 90       	pop	r12
    455c:	bf 90       	pop	r11
    455e:	af 90       	pop	r10
    4560:	9f 90       	pop	r9
    4562:	8f 90       	pop	r8
    4564:	7f 90       	pop	r7
    4566:	6f 90       	pop	r6
    4568:	08 95       	ret

0000456a <nrk_stack_check>:
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

    456a:	cf 93       	push	r28
    456c:	df 93       	push	r29
// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    do { \
    456e:	e0 91 95 07 	lds	r30, 0x0795
    4572:	f0 91 96 07 	lds	r31, 0x0796
    4576:	c2 81       	ldd	r28, Z+2	; 0x02
    4578:	d3 81       	ldd	r29, Z+3	; 0x03
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
    457a:	88 81       	ld	r24, Y
    457c:	85 35       	cpi	r24, 0x55	; 85
    457e:	39 f0       	breq	.+14     	; 0x458e <nrk_stack_check+0x24>
} while(0)

    4580:	0e 94 09 22 	call	0x4412	; 0x4412 <dump_stack_info>
// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
    4584:	81 e0       	ldi	r24, 0x01	; 1
    4586:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <nrk_error_add>
do { \
    458a:	85 e5       	ldi	r24, 0x55	; 85
    458c:	88 83       	st	Y, r24
x =  ADCL; \
x |= ADCH << 8; \
} while (0)

#define ADC_GET_SAMPLE_8(x) \
    458e:	e0 91 95 07 	lds	r30, 0x0795
    4592:	f0 91 96 07 	lds	r31, 0x0796
    4596:	80 81       	ld	r24, Z
    4598:	91 81       	ldd	r25, Z+1	; 0x01
    459a:	80 50       	subi	r24, 0x00	; 0
    459c:	92 42       	sbci	r25, 0x22	; 34
    459e:	28 f0       	brcs	.+10     	; 0x45aa <nrk_stack_check+0x40>
do { \
x = ((uint8_t) ADCL) >> 2; \
    45a0:	0e 94 09 22 	call	0x4412	; 0x4412 <dump_stack_info>
x |= ((int8_t) ADCH) << 6; \
} while (0)
    45a4:	82 e1       	ldi	r24, 0x12	; 18
    45a6:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <nrk_error_add>
    45aa:	df 91       	pop	r29
    45ac:	cf 91       	pop	r28
    45ae:	08 95       	ret

000045b0 <nrk_signal_create>:
#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;

    45b0:	40 91 f4 03 	lds	r20, 0x03F4
    45b4:	50 91 f5 03 	lds	r21, 0x03F5
    45b8:	60 91 f6 03 	lds	r22, 0x03F6
    45bc:	70 91 f7 03 	lds	r23, 0x03F7
    45c0:	20 e0       	ldi	r18, 0x00	; 0
    45c2:	30 e0       	ldi	r19, 0x00	; 0
    45c4:	db 01       	movw	r26, r22
    45c6:	ca 01       	movw	r24, r20
    45c8:	02 2e       	mov	r0, r18
    45ca:	04 c0       	rjmp	.+8      	; 0x45d4 <nrk_signal_create+0x24>
    45cc:	b6 95       	lsr	r27
    45ce:	a7 95       	ror	r26
    45d0:	97 95       	ror	r25
    45d2:	87 95       	ror	r24
    45d4:	0a 94       	dec	r0
    45d6:	d2 f7       	brpl	.-12     	; 0x45cc <nrk_signal_create+0x1c>
    45d8:	81 70       	andi	r24, 0x01	; 1
    45da:	90 70       	andi	r25, 0x00	; 0
    45dc:	89 2b       	or	r24, r25
    45de:	e9 f4       	brne	.+58     	; 0x461a <nrk_signal_create+0x6a>
// VREF is set to VCC by default
#define ADC_INIT() \
    45e0:	81 e0       	ldi	r24, 0x01	; 1
    45e2:	90 e0       	ldi	r25, 0x00	; 0
    45e4:	a0 e0       	ldi	r26, 0x00	; 0
    45e6:	b0 e0       	ldi	r27, 0x00	; 0
    45e8:	02 2e       	mov	r0, r18
    45ea:	04 c0       	rjmp	.+8      	; 0x45f4 <nrk_signal_create+0x44>
    45ec:	88 0f       	add	r24, r24
    45ee:	99 1f       	adc	r25, r25
    45f0:	aa 1f       	adc	r26, r26
    45f2:	bb 1f       	adc	r27, r27
    45f4:	0a 94       	dec	r0
    45f6:	d2 f7       	brpl	.-12     	; 0x45ec <nrk_signal_create+0x3c>
    45f8:	84 2b       	or	r24, r20
    45fa:	95 2b       	or	r25, r21
    45fc:	a6 2b       	or	r26, r22
    45fe:	b7 2b       	or	r27, r23
    4600:	80 93 f4 03 	sts	0x03F4, r24
    4604:	90 93 f5 03 	sts	0x03F5, r25
    4608:	a0 93 f6 03 	sts	0x03F6, r26
    460c:	b0 93 f7 03 	sts	0x03F7, r27
    do { \
    4610:	82 2f       	mov	r24, r18
    4612:	99 27       	eor	r25, r25
    4614:	87 fd       	sbrc	r24, 7
    4616:	90 95       	com	r25
    4618:	08 95       	ret
    461a:	2f 5f       	subi	r18, 0xFF	; 255
    461c:	3f 4f       	sbci	r19, 0xFF	; 255
#include <nrk_timer.h>

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

uint8_t channel;
    461e:	20 32       	cpi	r18, 0x20	; 32
    4620:	31 05       	cpc	r19, r1
    4622:	81 f6       	brne	.-96     	; 0x45c4 <nrk_signal_create+0x14>
    4624:	8f ef       	ldi	r24, 0xFF	; 255
    4626:	9f ef       	ldi	r25, 0xFF	; 255
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)

#define ADC_VREF_VCC() \
   do { \
    4628:	08 95       	ret

0000462a <nrk_signal_get_registered_mask>:
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)
    462a:	e0 91 95 07 	lds	r30, 0x0795
    462e:	f0 91 96 07 	lds	r31, 0x0796
    4632:	65 85       	ldd	r22, Z+13	; 0x0d
    4634:	76 85       	ldd	r23, Z+14	; 0x0e
    4636:	87 85       	ldd	r24, Z+15	; 0x0f
    4638:	90 89       	ldd	r25, Z+16	; 0x10
    463a:	08 95       	ret

0000463c <nrk_signal_unregister>:
do { \
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
    463c:	ef 92       	push	r14
    463e:	ff 92       	push	r15
    4640:	0f 93       	push	r16
    4642:	1f 93       	push	r17
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
uint8_t count=0;
    4644:	21 e0       	ldi	r18, 0x01	; 1
    4646:	30 e0       	ldi	r19, 0x00	; 0
    4648:	40 e0       	ldi	r20, 0x00	; 0
    464a:	50 e0       	ldi	r21, 0x00	; 0
    464c:	04 c0       	rjmp	.+8      	; 0x4656 <nrk_signal_unregister+0x1a>
    464e:	22 0f       	add	r18, r18
    4650:	33 1f       	adc	r19, r19
    4652:	44 1f       	adc	r20, r20
    4654:	55 1f       	adc	r21, r21
    4656:	8a 95       	dec	r24
    4658:	d2 f7       	brpl	.-12     	; 0x464e <nrk_signal_unregister+0x12>
// key and value get passed as opt and size
uint8_t key=opt;
    465a:	e0 91 95 07 	lds	r30, 0x0795
    465e:	f0 91 96 07 	lds	r31, 0x0796
    4662:	e5 84       	ldd	r14, Z+13	; 0x0d
    4664:	f6 84       	ldd	r15, Z+14	; 0x0e
    4666:	07 85       	ldd	r16, Z+15	; 0x0f
    4668:	10 89       	ldd	r17, Z+16	; 0x10
    466a:	da 01       	movw	r26, r20
    466c:	c9 01       	movw	r24, r18
    466e:	8e 21       	and	r24, r14
    4670:	9f 21       	and	r25, r15
    4672:	a0 23       	and	r26, r16
    4674:	b1 23       	and	r27, r17
    4676:	00 97       	sbiw	r24, 0x00	; 0
    4678:	a1 05       	cpc	r26, r1
    467a:	b1 05       	cpc	r27, r1
    467c:	19 f4       	brne	.+6      	; 0x4684 <nrk_signal_unregister+0x48>
    467e:	8f ef       	ldi	r24, 0xFF	; 255
    4680:	9f ef       	ldi	r25, 0xFF	; 255
    4682:	1a c0       	rjmp	.+52     	; 0x46b8 <nrk_signal_unregister+0x7c>
uint8_t value=size;

    4684:	20 95       	com	r18
    4686:	30 95       	com	r19
    4688:	40 95       	com	r20
    468a:	50 95       	com	r21
    468c:	e2 22       	and	r14, r18
    468e:	f3 22       	and	r15, r19
    4690:	04 23       	and	r16, r20
    4692:	15 23       	and	r17, r21
    4694:	e5 86       	std	Z+13, r14	; 0x0d
    4696:	f6 86       	std	Z+14, r15	; 0x0e
    4698:	07 87       	std	Z+15, r16	; 0x0f
    469a:	10 8b       	std	Z+16, r17	; 0x10
     switch(action)
    469c:	81 89       	ldd	r24, Z+17	; 0x11
    469e:	92 89       	ldd	r25, Z+18	; 0x12
    46a0:	a3 89       	ldd	r26, Z+19	; 0x13
    46a2:	b4 89       	ldd	r27, Z+20	; 0x14
    46a4:	82 23       	and	r24, r18
    46a6:	93 23       	and	r25, r19
    46a8:	a4 23       	and	r26, r20
    46aa:	b5 23       	and	r27, r21
    46ac:	81 8b       	std	Z+17, r24	; 0x11
    46ae:	92 8b       	std	Z+18, r25	; 0x12
    46b0:	a3 8b       	std	Z+19, r26	; 0x13
    46b2:	b4 8b       	std	Z+20, r27	; 0x14
    46b4:	81 e0       	ldi	r24, 0x01	; 1
    46b6:	90 e0       	ldi	r25, 0x00	; 0
    46b8:	1f 91       	pop	r17
    46ba:	0f 91       	pop	r16
    46bc:	ff 90       	pop	r15
    46be:	ef 90       	pop	r14
    46c0:	08 95       	ret

000046c2 <nrk_signal_register>:
	     		init_adc();  
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    46c2:	68 2f       	mov	r22, r24
    46c4:	77 27       	eor	r23, r23
    46c6:	67 fd       	sbrc	r22, 7
    46c8:	70 95       	com	r23
    46ca:	80 91 f4 03 	lds	r24, 0x03F4
    46ce:	90 91 f5 03 	lds	r25, 0x03F5
    46d2:	a0 91 f6 03 	lds	r26, 0x03F6
    46d6:	b0 91 f7 03 	lds	r27, 0x03F7
    46da:	06 2e       	mov	r0, r22
    46dc:	04 c0       	rjmp	.+8      	; 0x46e6 <nrk_signal_register+0x24>
    46de:	b6 95       	lsr	r27
    46e0:	a7 95       	ror	r26
    46e2:	97 95       	ror	r25
    46e4:	87 95       	ror	r24
    46e6:	0a 94       	dec	r0
    46e8:	d2 f7       	brpl	.-12     	; 0x46de <nrk_signal_register+0x1c>
    46ea:	81 70       	andi	r24, 0x01	; 1
    46ec:	90 70       	andi	r25, 0x00	; 0
    46ee:	89 2b       	or	r24, r25
    46f0:	19 f4       	brne	.+6      	; 0x46f8 <nrk_signal_register+0x36>
    46f2:	8f ef       	ldi	r24, 0xFF	; 255
    46f4:	9f ef       	ldi	r25, 0xFF	; 255
    46f6:	08 95       	ret
		    is_open=1; 
		    if(opt&READ_FLAG)
    46f8:	e0 91 95 07 	lds	r30, 0x0795
    46fc:	f0 91 96 07 	lds	r31, 0x0796
    4700:	21 e0       	ldi	r18, 0x01	; 1
    4702:	30 e0       	ldi	r19, 0x00	; 0
    4704:	40 e0       	ldi	r20, 0x00	; 0
    4706:	50 e0       	ldi	r21, 0x00	; 0
    4708:	04 c0       	rjmp	.+8      	; 0x4712 <nrk_signal_register+0x50>
    470a:	22 0f       	add	r18, r18
    470c:	33 1f       	adc	r19, r19
    470e:	44 1f       	adc	r20, r20
    4710:	55 1f       	adc	r21, r21
    4712:	6a 95       	dec	r22
    4714:	d2 f7       	brpl	.-12     	; 0x470a <nrk_signal_register+0x48>
    4716:	85 85       	ldd	r24, Z+13	; 0x0d
    4718:	96 85       	ldd	r25, Z+14	; 0x0e
    471a:	a7 85       	ldd	r26, Z+15	; 0x0f
    471c:	b0 89       	ldd	r27, Z+16	; 0x10
    471e:	82 2b       	or	r24, r18
    4720:	93 2b       	or	r25, r19
    4722:	a4 2b       	or	r26, r20
    4724:	b5 2b       	or	r27, r21
    4726:	85 87       	std	Z+13, r24	; 0x0d
    4728:	96 87       	std	Z+14, r25	; 0x0e
    472a:	a7 87       	std	Z+15, r26	; 0x0f
    472c:	b0 8b       	std	Z+16, r27	; 0x10
    472e:	81 e0       	ldi	r24, 0x01	; 1
    4730:	90 e0       	ldi	r25, 0x00	; 0
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
    4732:	08 95       	ret

00004734 <nrk_sem_create>:
{
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
if(val&0x0040) break; 
    4734:	38 2f       	mov	r19, r24
level++;
}
    4736:	80 91 94 07 	lds	r24, 0x0794
    473a:	88 23       	and	r24, r24
    473c:	19 f0       	breq	.+6      	; 0x4744 <nrk_sem_create+0x10>
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	08 95       	ret
if(radio_sem!=NULL)
 nrk_sem_post(radio_sem);
if(level==0)
  {
    4744:	80 91 7e 07 	lds	r24, 0x077E
    4748:	8f 3f       	cpi	r24, 0xFF	; 255
    474a:	11 f4       	brne	.+4      	; 0x4750 <nrk_sem_create+0x1c>
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	07 c0       	rjmp	.+14     	; 0x475e <nrk_sem_create+0x2a>
    4750:	80 91 81 07 	lds	r24, 0x0781
    4754:	8f 3f       	cpi	r24, 0xFF	; 255
    4756:	11 f0       	breq	.+4      	; 0x475c <nrk_sem_create+0x28>
    4758:	22 e0       	ldi	r18, 0x02	; 2
    475a:	01 c0       	rjmp	.+2      	; 0x475e <nrk_sem_create+0x2a>
    475c:	21 e0       	ldi	r18, 0x01	; 1
  val=get_adc_val();
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
    475e:	82 2f       	mov	r24, r18
    4760:	99 27       	eor	r25, r25
    4762:	fc 01       	movw	r30, r24
    4764:	ee 0f       	add	r30, r30
    4766:	ff 1f       	adc	r31, r31
    4768:	e8 0f       	add	r30, r24
    476a:	f9 1f       	adc	r31, r25
    476c:	e2 58       	subi	r30, 0x82	; 130
    476e:	f8 4f       	sbci	r31, 0xF8	; 248
    4770:	32 83       	std	Z+2, r19	; 0x02
  if(val<330) val=330;
    4772:	30 83       	st	Z, r19
  }
    4774:	61 83       	std	Z+1, r22	; 0x01
else val=(9000-(level*125)) / 27;
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	80 93 94 07 	sts	0x0794, r24

    477c:	83 e0       	ldi	r24, 0x03	; 3
    477e:	28 9f       	mul	r18, r24
    4780:	c0 01       	movw	r24, r0
    4782:	11 24       	eor	r1, r1
    4784:	82 58       	subi	r24, 0x82	; 130
    4786:	98 4f       	sbci	r25, 0xF8	; 248
return val;
    4788:	08 95       	ret

0000478a <nrk_get_resource_index>:
}



void init_adc()
{
    478a:	27 e0       	ldi	r18, 0x07	; 7
    478c:	8e 37       	cpi	r24, 0x7E	; 126
    478e:	92 07       	cpc	r25, r18
    4790:	11 f4       	brne	.+4      	; 0x4796 <nrk_get_resource_index+0xc>
    4792:	80 e0       	ldi	r24, 0x00	; 0
    4794:	07 c0       	rjmp	.+14     	; 0x47a4 <nrk_get_resource_index+0x1a>
    4796:	81 58       	subi	r24, 0x81	; 129
    4798:	97 40       	sbci	r25, 0x07	; 7
    479a:	19 f0       	breq	.+6      	; 0x47a2 <nrk_get_resource_index+0x18>
    479c:	8f ef       	ldi	r24, 0xFF	; 255
    479e:	9f ef       	ldi	r25, 0xFF	; 255
    47a0:	08 95       	ret
    47a2:	81 e0       	ldi	r24, 0x01	; 1
// Initialize values here
    47a4:	99 27       	eor	r25, r25
    47a6:	87 fd       	sbrc	r24, 7
    47a8:	90 95       	com	r25
  ADC_INIT ();
  ADC_ENABLE ();
    47aa:	08 95       	ret

000047ac <nrk_sem_delete>:

radio_sem= rf_get_sem();

// if semaphore not created, then assume you own the radio 
if(radio_sem!=NULL)
 nrk_sem_pend (radio_sem);
    47ac:	0e 94 c5 23 	call	0x478a	; 0x478a <nrk_get_resource_index>

    // activate cc2420 vreg
    47b0:	8f 3f       	cpi	r24, 0xFF	; 255
    47b2:	11 f4       	brne	.+4      	; 0x47b8 <nrk_sem_delete+0xc>
    47b4:	81 e0       	ldi	r24, 0x01	; 1
    47b6:	02 c0       	rjmp	.+4      	; 0x47bc <nrk_sem_delete+0x10>
    SET_VREG_ACTIVE();
    47b8:	82 30       	cpi	r24, 0x02	; 2
    47ba:	29 f4       	brne	.+10     	; 0x47c6 <nrk_sem_delete+0x1a>
    47bc:	0e 94 0c 21 	call	0x4218	; 0x4218 <_nrk_errno_set>
    47c0:	8f ef       	ldi	r24, 0xFF	; 255
    47c2:	9f ef       	ldi	r25, 0xFF	; 255
    47c4:	08 95       	ret
    // FIXME: Check at end if VREG needs to be disabled again...

    47c6:	99 27       	eor	r25, r25
    47c8:	87 fd       	sbrc	r24, 7
    47ca:	90 95       	com	r25
    47cc:	fc 01       	movw	r30, r24
    47ce:	ee 0f       	add	r30, r30
    47d0:	ff 1f       	adc	r31, r31
    47d2:	e8 0f       	add	r30, r24
    47d4:	f9 1f       	adc	r31, r25
    47d6:	e2 58       	subi	r30, 0x82	; 130
    47d8:	f8 4f       	sbci	r31, 0xF8	; 248
    47da:	8f ef       	ldi	r24, 0xFF	; 255
    47dc:	80 83       	st	Z, r24
level=0;
    47de:	82 83       	std	Z+2, r24	; 0x02
while(level<0x1F)
    47e0:	81 83       	std	Z+1, r24	; 0x01
{
    47e2:	80 91 94 07 	lds	r24, 0x0794
    47e6:	81 50       	subi	r24, 0x01	; 1
    47e8:	80 93 94 07 	sts	0x0794, r24
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	90 e0       	ldi	r25, 0x00	; 0
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
    47f0:	08 95       	ret

000047f2 <nrk_sem_query>:
			      		buffer[count]=(val>>2)  & 0xFF;
				}

			}
			
		      count++;
    47f2:	0e 94 c5 23 	call	0x478a	; 0x478a <nrk_get_resource_index>
                      return count;
    47f6:	8f 3f       	cpi	r24, 0xFF	; 255
    47f8:	11 f4       	brne	.+4      	; 0x47fe <nrk_sem_query+0xc>
    47fa:	81 e0       	ldi	r24, 0x01	; 1
    47fc:	02 c0       	rjmp	.+4      	; 0x4802 <nrk_sem_query+0x10>

    47fe:	82 30       	cpi	r24, 0x02	; 2
    4800:	29 f4       	brne	.+10     	; 0x480c <nrk_sem_query+0x1a>
    4802:	0e 94 0c 21 	call	0x4218	; 0x4218 <_nrk_errno_set>
    4806:	8f ef       	ldi	r24, 0xFF	; 255
    4808:	9f ef       	ldi	r25, 0xFF	; 255
    480a:	08 95       	ret
             case CLOSE:
			// Turn off sensor power
    480c:	99 27       	eor	r25, r25
    480e:	87 fd       	sbrc	r24, 7
    4810:	90 95       	com	r25
    4812:	fc 01       	movw	r30, r24
    4814:	ee 0f       	add	r30, r30
    4816:	ff 1f       	adc	r31, r31
    4818:	e8 0f       	add	r30, r24
    481a:	f9 1f       	adc	r31, r25
    481c:	e2 58       	subi	r30, 0x82	; 130
    481e:	f8 4f       	sbci	r31, 0xF8	; 248
    4820:	82 81       	ldd	r24, Z+2	; 0x02
    4822:	99 27       	eor	r25, r25
    4824:	87 fd       	sbrc	r24, 7
    4826:	90 95       	com	r25
			PORTF |= PWR_CTRL_MASK;
    4828:	08 95       	ret

0000482a <nrk_sem_post>:
					_nrk_errno_set(1);
					return NRK_ERROR;
				}
				channel=value;
				if(channel==LIGHT)
				   ADC_VREF_VCC();	
    482a:	1f 93       	push	r17
    482c:	cf 93       	push	r28
    482e:	df 93       	push	r29
				else
    4830:	0e 94 c5 23 	call	0x478a	; 0x478a <nrk_get_resource_index>
    4834:	18 2f       	mov	r17, r24
				   ADC_VREF_2_56();	
				ADC_SET_CHANNEL (channel);
    4836:	8f 3f       	cpi	r24, 0xFF	; 255
    4838:	11 f4       	brne	.+4      	; 0x483e <nrk_sem_post+0x14>
    483a:	81 e0       	ldi	r24, 0x01	; 1
    483c:	03 c0       	rjmp	.+6      	; 0x4844 <nrk_sem_post+0x1a>
				nrk_spin_wait_us(ADC_SETUP_DELAY);
    483e:	82 30       	cpi	r24, 0x02	; 2
    4840:	31 f4       	brne	.+12     	; 0x484e <nrk_sem_post+0x24>
    4842:	82 e0       	ldi	r24, 0x02	; 2
    4844:	0e 94 0c 21 	call	0x4218	; 0x4218 <_nrk_errno_set>
    4848:	8f ef       	ldi	r24, 0xFF	; 255
    484a:	9f ef       	ldi	r25, 0xFF	; 255
    484c:	3e c0       	rjmp	.+124    	; 0x48ca <nrk_sem_post+0xa0>
				return NRK_OK;
			  }
    484e:	99 27       	eor	r25, r25
    4850:	87 fd       	sbrc	r24, 7
    4852:	90 95       	com	r25
    4854:	ec 01       	movw	r28, r24
    4856:	cc 0f       	add	r28, r28
    4858:	dd 1f       	adc	r29, r29
    485a:	c8 0f       	add	r28, r24
    485c:	d9 1f       	adc	r29, r25
    485e:	c2 58       	subi	r28, 0x82	; 130
    4860:	d8 4f       	sbci	r29, 0xF8	; 248
    4862:	9a 81       	ldd	r25, Y+2	; 0x02
    4864:	88 81       	ld	r24, Y
    4866:	98 17       	cp	r25, r24
    4868:	74 f5       	brge	.+92     	; 0x48c6 <nrk_sem_post+0x9c>
			}
			return NRK_ERROR;
	     default:
    486a:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
    486e:	8a 81       	ldd	r24, Y+2	; 0x02
    4870:	8f 5f       	subi	r24, 0xFF	; 255
    4872:	8a 83       	std	Y+2, r24	; 0x02
	}
    4874:	e0 91 95 07 	lds	r30, 0x0795
    4878:	f0 91 96 07 	lds	r31, 0x0796
    487c:	14 82       	std	Z+4, r1	; 0x04
    487e:	e0 e2       	ldi	r30, 0x20	; 32
    4880:	f7 e0       	ldi	r31, 0x07	; 7
}


// read_voltage_status()
    4882:	21 2f       	mov	r18, r17
    4884:	33 27       	eor	r19, r19
    4886:	27 fd       	sbrc	r18, 7
    4888:	30 95       	com	r19
    488a:	43 2f       	mov	r20, r19
    488c:	53 2f       	mov	r21, r19
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
	}
}


    488e:	80 81       	ld	r24, Z
    4890:	82 30       	cpi	r24, 0x02	; 2
    4892:	91 f4       	brne	.+36     	; 0x48b8 <nrk_sem_post+0x8e>
// read_voltage_status()
    4894:	82 85       	ldd	r24, Z+10	; 0x0a
    4896:	93 85       	ldd	r25, Z+11	; 0x0b
    4898:	a4 85       	ldd	r26, Z+12	; 0x0c
    489a:	b5 85       	ldd	r27, Z+13	; 0x0d
    489c:	82 17       	cp	r24, r18
    489e:	93 07       	cpc	r25, r19
    48a0:	a4 07       	cpc	r26, r20
    48a2:	b5 07       	cpc	r27, r21
    48a4:	49 f4       	brne	.+18     	; 0x48b8 <nrk_sem_post+0x8e>
//
// This function sets different voltage threshold levels on
    48a6:	83 e0       	ldi	r24, 0x03	; 3
    48a8:	82 83       	std	Z+2, r24	; 0x02
// the cc2420 chip to search for the voltage.
    48aa:	17 86       	std	Z+15, r1	; 0x0f
    48ac:	16 86       	std	Z+14, r1	; 0x0e
// If the voltage is above 3.3 volts, then the ADC reads
    48ae:	10 82       	st	Z, r1
// the external voltage value going through a voltage divider.
    48b0:	12 86       	std	Z+10, r1	; 0x0a
    48b2:	13 86       	std	Z+11, r1	; 0x0b
    48b4:	14 86       	std	Z+12, r1	; 0x0c
    48b6:	15 86       	std	Z+13, r1	; 0x0d
    48b8:	b1 96       	adiw	r30, 0x21	; 33
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
	}
}

    48ba:	87 e0       	ldi	r24, 0x07	; 7
    48bc:	e3 38       	cpi	r30, 0x83	; 131
    48be:	f8 07       	cpc	r31, r24
    48c0:	31 f7       	brne	.-52     	; 0x488e <nrk_sem_post+0x64>
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
{
volatile uint16_t val;
    48c2:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
    48c6:	81 e0       	ldi	r24, 0x01	; 1
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	df 91       	pop	r29
    48cc:	cf 91       	pop	r28
    48ce:	1f 91       	pop	r17
    48d0:	08 95       	ret

000048d2 <nrk_event_signal>:
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
		    }
    48d2:	df 92       	push	r13
    48d4:	ef 92       	push	r14
    48d6:	ff 92       	push	r15
    48d8:	0f 93       	push	r16
    48da:	1f 93       	push	r17
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
		    {
    48dc:	e1 e0       	ldi	r30, 0x01	; 1
    48de:	ee 2e       	mov	r14, r30
    48e0:	f1 2c       	mov	r15, r1
    48e2:	01 2d       	mov	r16, r1
    48e4:	11 2d       	mov	r17, r1
    48e6:	04 c0       	rjmp	.+8      	; 0x48f0 <nrk_event_signal+0x1e>
    48e8:	ee 0c       	add	r14, r14
    48ea:	ff 1c       	adc	r15, r15
    48ec:	00 1f       	adc	r16, r16
    48ee:	11 1f       	adc	r17, r17
    48f0:	8a 95       	dec	r24
    48f2:	d2 f7       	brpl	.-12     	; 0x48e8 <nrk_event_signal+0x16>
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
    48f4:	80 91 f4 03 	lds	r24, 0x03F4
    48f8:	90 91 f5 03 	lds	r25, 0x03F5
    48fc:	a0 91 f6 03 	lds	r26, 0x03F6
    4900:	b0 91 f7 03 	lds	r27, 0x03F7
    4904:	8e 21       	and	r24, r14
    4906:	9f 21       	and	r25, r15
    4908:	a0 23       	and	r26, r16
    490a:	b1 23       	and	r27, r17
    490c:	00 97       	sbiw	r24, 0x00	; 0
    490e:	a1 05       	cpc	r26, r1
    4910:	b1 05       	cpc	r27, r1
    4912:	11 f4       	brne	.+4      	; 0x4918 <nrk_event_signal+0x46>
    4914:	81 e0       	ldi	r24, 0x01	; 1
    4916:	43 c0       	rjmp	.+134    	; 0x499e <nrk_event_signal+0xcc>
		    	return NRK_ERROR;
		    else return NRK_OK;
		
    4918:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>
    491c:	e0 e2       	ldi	r30, 0x20	; 32
    491e:	f7 e0       	ldi	r31, 0x07	; 7
    4920:	dd 24       	eor	r13, r13

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
			{
    4922:	80 81       	ld	r24, Z
    4924:	81 30       	cpi	r24, 0x01	; 1
    4926:	b9 f4       	brne	.+46     	; 0x4956 <nrk_event_signal+0x84>
			      /* Conversion to 8-bit value*/
    4928:	82 85       	ldd	r24, Z+10	; 0x0a
    492a:	93 85       	ldd	r25, Z+11	; 0x0b
    492c:	a4 85       	ldd	r26, Z+12	; 0x0c
    492e:	b5 85       	ldd	r27, Z+13	; 0x0d
    4930:	8e 21       	and	r24, r14
    4932:	9f 21       	and	r25, r15
    4934:	a0 23       	and	r26, r16
    4936:	b1 23       	and	r27, r17
    4938:	00 97       	sbiw	r24, 0x00	; 0
    493a:	a1 05       	cpc	r26, r1
    493c:	b1 05       	cpc	r27, r1
    493e:	59 f0       	breq	.+22     	; 0x4956 <nrk_event_signal+0x84>
			      uint16_t val=get_adc_val();

    4940:	83 e0       	ldi	r24, 0x03	; 3
    4942:	82 83       	std	Z+2, r24	; 0x02
				if(size==2)
    4944:	17 86       	std	Z+15, r1	; 0x0f
    4946:	16 86       	std	Z+14, r1	; 0x0e
			      	{
    4948:	10 82       	st	Z, r1
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    494a:	e2 86       	std	Z+10, r14	; 0x0a
    494c:	f3 86       	std	Z+11, r15	; 0x0b
    494e:	04 87       	std	Z+12, r16	; 0x0c
    4950:	15 87       	std	Z+13, r17	; 0x0d
    4952:	dd 24       	eor	r13, r13
    4954:	d3 94       	inc	r13
				}

				if(size==1)
			      	{
    4956:	80 81       	ld	r24, Z
    4958:	82 30       	cpi	r24, 0x02	; 2
    495a:	a1 f4       	brne	.+40     	; 0x4984 <nrk_event_signal+0xb2>
			      		buffer[count]=(val>>2)  & 0xFF;
    495c:	82 85       	ldd	r24, Z+10	; 0x0a
    495e:	93 85       	ldd	r25, Z+11	; 0x0b
    4960:	a4 85       	ldd	r26, Z+12	; 0x0c
    4962:	b5 85       	ldd	r27, Z+13	; 0x0d
    4964:	8e 15       	cp	r24, r14
    4966:	9f 05       	cpc	r25, r15
    4968:	a0 07       	cpc	r26, r16
    496a:	b1 07       	cpc	r27, r17
    496c:	59 f4       	brne	.+22     	; 0x4984 <nrk_event_signal+0xb2>
				}

    496e:	83 e0       	ldi	r24, 0x03	; 3
    4970:	82 83       	std	Z+2, r24	; 0x02

    4972:	17 86       	std	Z+15, r1	; 0x0f
    4974:	16 86       	std	Z+14, r1	; 0x0e
			} else if(channel==BAT)
    4976:	10 82       	st	Z, r1
			{
			uint16_t tmp;
			tmp=read_voltage_status();
    4978:	12 86       	std	Z+10, r1	; 0x0a
    497a:	13 86       	std	Z+11, r1	; 0x0b
    497c:	14 86       	std	Z+12, r1	; 0x0c
    497e:	15 86       	std	Z+13, r1	; 0x0d
    4980:	dd 24       	eor	r13, r13
    4982:	d3 94       	inc	r13
    4984:	b1 96       	adiw	r30, 0x21	; 33
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
		    else return NRK_OK;
		
	    
    4986:	87 e0       	ldi	r24, 0x07	; 7
    4988:	e3 38       	cpi	r30, 0x83	; 131
    498a:	f8 07       	cpc	r31, r24
    498c:	51 f6       	brne	.-108    	; 0x4922 <nrk_event_signal+0x50>
			if(size==2)
				{
					buffer[count]=tmp & 0xFF;
					count++;
					buffer[count]=(tmp>>8) & 0xFF;
				}
    498e:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
			if(size==1)
    4992:	dd 20       	and	r13, r13
    4994:	19 f0       	breq	.+6      	; 0x499c <nrk_event_signal+0xca>
    4996:	81 e0       	ldi	r24, 0x01	; 1
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	05 c0       	rjmp	.+10     	; 0x49a6 <nrk_event_signal+0xd4>
				{
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
			{
    499c:	82 e0       	ldi	r24, 0x02	; 2
    499e:	0e 94 0c 21 	call	0x4218	; 0x4218 <_nrk_errno_set>
    49a2:	8f ef       	ldi	r24, 0xFF	; 255
    49a4:	9f ef       	ldi	r25, 0xFF	; 255
    49a6:	1f 91       	pop	r17
    49a8:	0f 91       	pop	r16
    49aa:	ff 90       	pop	r15
    49ac:	ef 90       	pop	r14
    49ae:	df 90       	pop	r13
    49b0:	08 95       	ret

000049b2 <nrk_signal_delete>:


#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
    49b2:	ef 92       	push	r14
    49b4:	ff 92       	push	r15
    49b6:	0f 93       	push	r16
    49b8:	1f 93       	push	r17
    49ba:	cf 93       	push	r28
    49bc:	df 93       	push	r29
} while(0)


#define ADC_VREF_2_56() \
    49be:	c8 2f       	mov	r28, r24
    49c0:	dd 27       	eor	r29, r29
    49c2:	c7 fd       	sbrc	r28, 7
    49c4:	d0 95       	com	r29
    49c6:	f1 e0       	ldi	r31, 0x01	; 1
    49c8:	ef 2e       	mov	r14, r31
    49ca:	f1 2c       	mov	r15, r1
    49cc:	01 2d       	mov	r16, r1
    49ce:	11 2d       	mov	r17, r1
    49d0:	0c 2e       	mov	r0, r28
    49d2:	04 c0       	rjmp	.+8      	; 0x49dc <nrk_signal_delete+0x2a>
    49d4:	ee 0c       	add	r14, r14
    49d6:	ff 1c       	adc	r15, r15
    49d8:	00 1f       	adc	r16, r16
    49da:	11 1f       	adc	r17, r17
    49dc:	0a 94       	dec	r0
    49de:	d2 f7       	brpl	.-12     	; 0x49d4 <nrk_signal_delete+0x22>
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
    49e0:	80 91 f4 03 	lds	r24, 0x03F4
    49e4:	90 91 f5 03 	lds	r25, 0x03F5
    49e8:	a0 91 f6 03 	lds	r26, 0x03F6
    49ec:	b0 91 f7 03 	lds	r27, 0x03F7
    49f0:	8e 21       	and	r24, r14
    49f2:	9f 21       	and	r25, r15
    49f4:	a0 23       	and	r26, r16
    49f6:	b1 23       	and	r27, r17
    49f8:	00 97       	sbiw	r24, 0x00	; 0
    49fa:	a1 05       	cpc	r26, r1
    49fc:	b1 05       	cpc	r27, r1
    49fe:	19 f4       	brne	.+6      	; 0x4a06 <nrk_signal_delete+0x54>
    4a00:	8f ef       	ldi	r24, 0xFF	; 255
    4a02:	9f ef       	ldi	r25, 0xFF	; 255
    4a04:	5d c0       	rjmp	.+186    	; 0x4ac0 <nrk_signal_delete+0x10e>
} while(0)

    4a06:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>
    4a0a:	e9 e1       	ldi	r30, 0x19	; 25
    4a0c:	f7 e0       	ldi	r31, 0x07	; 7
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
} while(0)

// Macros for obtaining the latest sample value
    4a0e:	a8 01       	movw	r20, r16
    4a10:	97 01       	movw	r18, r14
    4a12:	20 95       	com	r18
    4a14:	30 95       	com	r19
    4a16:	40 95       	com	r20
    4a18:	50 95       	com	r21
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

    4a1a:	80 85       	ldd	r24, Z+8	; 0x08
    4a1c:	8f 3f       	cpi	r24, 0xFF	; 255
    4a1e:	41 f1       	breq	.+80     	; 0x4a70 <nrk_signal_delete+0xbe>
// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

    4a20:	85 85       	ldd	r24, Z+13	; 0x0d
    4a22:	96 85       	ldd	r25, Z+14	; 0x0e
    4a24:	a7 85       	ldd	r26, Z+15	; 0x0f
    4a26:	b0 89       	ldd	r27, Z+16	; 0x10
    4a28:	8e 15       	cp	r24, r14
    4a2a:	9f 05       	cpc	r25, r15
    4a2c:	a0 07       	cpc	r26, r16
    4a2e:	b1 07       	cpc	r27, r17
    4a30:	39 f4       	brne	.+14     	; 0x4a40 <nrk_signal_delete+0x8e>
#define ADC_SAMPLE_SINGLE() \
    do { \
ADCSRA |= BM(ADSC); \
    4a32:	11 8a       	std	Z+17, r1	; 0x11
    4a34:	12 8a       	std	Z+18, r1	; 0x12
    4a36:	13 8a       	std	Z+19, r1	; 0x13
    4a38:	14 8a       	std	Z+20, r1	; 0x14
while (!(ADCSRA & 0x10)); \
    4a3a:	17 82       	std	Z+7, r1	; 0x07
} while(0)
    4a3c:	83 e0       	ldi	r24, 0x03	; 3
    4a3e:	81 87       	std	Z+9, r24	; 0x09

// Macros for obtaining the latest sample value
    4a40:	85 85       	ldd	r24, Z+13	; 0x0d
    4a42:	96 85       	ldd	r25, Z+14	; 0x0e
    4a44:	a7 85       	ldd	r26, Z+15	; 0x0f
    4a46:	b0 89       	ldd	r27, Z+16	; 0x10
    4a48:	82 23       	and	r24, r18
    4a4a:	93 23       	and	r25, r19
    4a4c:	a4 23       	and	r26, r20
    4a4e:	b5 23       	and	r27, r21
    4a50:	85 87       	std	Z+13, r24	; 0x0d
    4a52:	96 87       	std	Z+14, r25	; 0x0e
    4a54:	a7 87       	std	Z+15, r26	; 0x0f
    4a56:	b0 8b       	std	Z+16, r27	; 0x10
#define ADC_GET_SAMPLE_10(x) \
    4a58:	81 89       	ldd	r24, Z+17	; 0x11
    4a5a:	92 89       	ldd	r25, Z+18	; 0x12
    4a5c:	a3 89       	ldd	r26, Z+19	; 0x13
    4a5e:	b4 89       	ldd	r27, Z+20	; 0x14
    4a60:	82 23       	and	r24, r18
    4a62:	93 23       	and	r25, r19
    4a64:	a4 23       	and	r26, r20
    4a66:	b5 23       	and	r27, r21
    4a68:	81 8b       	std	Z+17, r24	; 0x11
    4a6a:	92 8b       	std	Z+18, r25	; 0x12
    4a6c:	a3 8b       	std	Z+19, r26	; 0x13
    4a6e:	b4 8b       	std	Z+20, r27	; 0x14
    4a70:	b1 96       	adiw	r30, 0x21	; 33
#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)
    4a72:	87 e0       	ldi	r24, 0x07	; 7
    4a74:	ec 37       	cpi	r30, 0x7C	; 124
    4a76:	f8 07       	cpc	r31, r24
    4a78:	81 f6       	brne	.-96     	; 0x4a1a <nrk_signal_delete+0x68>
// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
do { \
x =  ADCL; \
x |= ADCH << 8; \
} while (0)
    4a7a:	2e ef       	ldi	r18, 0xFE	; 254
    4a7c:	3f ef       	ldi	r19, 0xFF	; 255
    4a7e:	4f ef       	ldi	r20, 0xFF	; 255
    4a80:	5f ef       	ldi	r21, 0xFF	; 255
    4a82:	04 c0       	rjmp	.+8      	; 0x4a8c <nrk_signal_delete+0xda>
    4a84:	22 0f       	add	r18, r18
    4a86:	33 1f       	adc	r19, r19
    4a88:	44 1f       	adc	r20, r20
    4a8a:	55 1f       	adc	r21, r21
    4a8c:	ca 95       	dec	r28
    4a8e:	d2 f7       	brpl	.-12     	; 0x4a84 <nrk_signal_delete+0xd2>
    4a90:	80 91 f4 03 	lds	r24, 0x03F4
    4a94:	90 91 f5 03 	lds	r25, 0x03F5
    4a98:	a0 91 f6 03 	lds	r26, 0x03F6
    4a9c:	b0 91 f7 03 	lds	r27, 0x03F7
    4aa0:	82 23       	and	r24, r18
    4aa2:	93 23       	and	r25, r19
    4aa4:	a4 23       	and	r26, r20
    4aa6:	b5 23       	and	r27, r21
    4aa8:	80 93 f4 03 	sts	0x03F4, r24
    4aac:	90 93 f5 03 	sts	0x03F5, r25
    4ab0:	a0 93 f6 03 	sts	0x03F6, r26
    4ab4:	b0 93 f7 03 	sts	0x03F7, r27

    4ab8:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
    4abc:	81 e0       	ldi	r24, 0x01	; 1
    4abe:	90 e0       	ldi	r25, 0x00	; 0
    4ac0:	df 91       	pop	r29
    4ac2:	cf 91       	pop	r28
    4ac4:	1f 91       	pop	r17
    4ac6:	0f 91       	pop	r16
    4ac8:	ff 90       	pop	r15
    4aca:	ef 90       	pop	r14
    4acc:	08 95       	ret

00004ace <nrk_sem_pend>:
			PORTF |= PWR_CTRL_MASK;
		    	is_open=0; 
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
    4ace:	1f 93       	push	r17
    4ad0:	cf 93       	push	r28
    4ad2:	df 93       	push	r29
			if(key==SENSOR_SELECT) return channel;
	     		return NRK_ERROR;
    4ad4:	0e 94 c5 23 	call	0x478a	; 0x478a <nrk_get_resource_index>
    4ad8:	18 2f       	mov	r17, r24
			
    4ada:	8f 3f       	cpi	r24, 0xFF	; 255
    4adc:	11 f4       	brne	.+4      	; 0x4ae2 <nrk_sem_pend+0x14>
    4ade:	81 e0       	ldi	r24, 0x01	; 1
    4ae0:	03 c0       	rjmp	.+6      	; 0x4ae8 <nrk_sem_pend+0x1a>
             case SET_STATUS:
    4ae2:	82 30       	cpi	r24, 0x02	; 2
    4ae4:	31 f4       	brne	.+12     	; 0x4af2 <nrk_sem_pend+0x24>
    4ae6:	82 e0       	ldi	r24, 0x02	; 2
    4ae8:	0e 94 0c 21 	call	0x4218	; 0x4218 <_nrk_errno_set>
    4aec:	8f ef       	ldi	r24, 0xFF	; 255
    4aee:	9f ef       	ldi	r25, 0xFF	; 255
    4af0:	3e c0       	rjmp	.+124    	; 0x4b6e <nrk_sem_pend+0xa0>
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    4af2:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>
			{
    4af6:	81 2f       	mov	r24, r17
    4af8:	99 27       	eor	r25, r25
    4afa:	87 fd       	sbrc	r24, 7
    4afc:	90 95       	com	r25
    4afe:	ec 01       	movw	r28, r24
    4b00:	cc 0f       	add	r28, r28
    4b02:	dd 1f       	adc	r29, r29
    4b04:	c8 0f       	add	r28, r24
    4b06:	d9 1f       	adc	r29, r25
    4b08:	c2 58       	subi	r28, 0x82	; 130
    4b0a:	d8 4f       	sbci	r29, 0xF8	; 248
    4b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b0e:	88 23       	and	r24, r24
    4b10:	d9 f4       	brne	.+54     	; 0x4b48 <nrk_sem_pend+0x7a>
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
    4b12:	e0 91 95 07 	lds	r30, 0x0795
    4b16:	f0 91 96 07 	lds	r31, 0x0796
    4b1a:	87 81       	ldd	r24, Z+7	; 0x07
    4b1c:	82 60       	ori	r24, 0x02	; 2
    4b1e:	87 83       	std	Z+7, r24	; 0x07
			  {
    4b20:	e0 91 95 07 	lds	r30, 0x0795
    4b24:	f0 91 96 07 	lds	r31, 0x0796
    4b28:	81 2f       	mov	r24, r17
    4b2a:	99 27       	eor	r25, r25
    4b2c:	87 fd       	sbrc	r24, 7
    4b2e:	90 95       	com	r25
    4b30:	a9 2f       	mov	r26, r25
    4b32:	b9 2f       	mov	r27, r25
    4b34:	81 8b       	std	Z+17, r24	; 0x11
    4b36:	92 8b       	std	Z+18, r25	; 0x12
    4b38:	a3 8b       	std	Z+19, r26	; 0x13
    4b3a:	b4 8b       	std	Z+20, r27	; 0x14
				channel=value;
				   //ADC_VREF_2_56();	
    4b3c:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
				ADC_VREF_VCC();	
    4b40:	80 e0       	ldi	r24, 0x00	; 0
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	0e 94 0c 28 	call	0x5018	; 0x5018 <nrk_wait_until_ticks>
				ADC_SET_CHANNEL (AUDIO);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;
    4b48:	8a 81       	ldd	r24, Y+2	; 0x02
    4b4a:	81 50       	subi	r24, 0x01	; 1
    4b4c:	8a 83       	std	Y+2, r24	; 0x02

    4b4e:	e0 91 95 07 	lds	r30, 0x0795
    4b52:	f0 91 96 07 	lds	r31, 0x0796
    4b56:	89 81       	ldd	r24, Y+1	; 0x01
    4b58:	83 87       	std	Z+11, r24	; 0x0b
			  } else
    4b5a:	e0 91 95 07 	lds	r30, 0x0795
    4b5e:	f0 91 96 07 	lds	r31, 0x0796
    4b62:	81 e0       	ldi	r24, 0x01	; 1
    4b64:	84 83       	std	Z+4, r24	; 0x04
			  {
    4b66:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
    4b6a:	81 e0       	ldi	r24, 0x01	; 1
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	df 91       	pop	r29
    4b70:	cf 91       	pop	r28
    4b72:	1f 91       	pop	r17
    4b74:	08 95       	ret

00004b76 <nrk_event_wait>:
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
    4b76:	9b 01       	movw	r18, r22
    4b78:	ac 01       	movw	r20, r24
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
    4b7a:	e0 91 95 07 	lds	r30, 0x0795
    4b7e:	f0 91 96 07 	lds	r31, 0x0796
    4b82:	85 85       	ldd	r24, Z+13	; 0x0d
    4b84:	96 85       	ldd	r25, Z+14	; 0x0e
    4b86:	a7 85       	ldd	r26, Z+15	; 0x0f
    4b88:	b0 89       	ldd	r27, Z+16	; 0x10
    4b8a:	82 23       	and	r24, r18
    4b8c:	93 23       	and	r25, r19
    4b8e:	a4 23       	and	r26, r20
    4b90:	b5 23       	and	r27, r21
    4b92:	00 97       	sbiw	r24, 0x00	; 0
    4b94:	a1 05       	cpc	r26, r1
    4b96:	b1 05       	cpc	r27, r1
    4b98:	29 f4       	brne	.+10     	; 0x4ba4 <nrk_event_wait+0x2e>
    4b9a:	60 e0       	ldi	r22, 0x00	; 0
    4b9c:	70 e0       	ldi	r23, 0x00	; 0
    4b9e:	80 e0       	ldi	r24, 0x00	; 0
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	08 95       	ret
				if(val<min)min=val;
				if(val>max)max=val;
    4ba4:	21 8b       	std	Z+17, r18	; 0x11
    4ba6:	32 8b       	std	Z+18, r19	; 0x12
    4ba8:	43 8b       	std	Z+19, r20	; 0x13
    4baa:	54 8b       	std	Z+20, r21	; 0x14
				// 8 Khz
    4bac:	81 e0       	ldi	r24, 0x01	; 1
    4bae:	87 83       	std	Z+7, r24	; 0x07
				}
			 	val=max-min;	
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
    4bb0:	00 90 85 07 	lds	r0, 0x0785
    4bb4:	04 c0       	rjmp	.+8      	; 0x4bbe <nrk_event_wait+0x48>
    4bb6:	56 95       	lsr	r21
    4bb8:	47 95       	ror	r20
    4bba:	37 95       	ror	r19
    4bbc:	27 95       	ror	r18
    4bbe:	0a 94       	dec	r0
    4bc0:	d2 f7       	brpl	.-12     	; 0x4bb6 <nrk_event_wait+0x40>
    4bc2:	c9 01       	movw	r24, r18
    4bc4:	81 70       	andi	r24, 0x01	; 1
    4bc6:	90 70       	andi	r25, 0x00	; 0
    4bc8:	89 2b       	or	r24, r25
    4bca:	19 f0       	breq	.+6      	; 0x4bd2 <nrk_event_wait+0x5c>
			      		buffer[count]=(val>>8)  & 0xFF;
    4bcc:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <nrk_wait_until_nw>
    4bd0:	04 c0       	rjmp	.+8      	; 0x4bda <nrk_event_wait+0x64>
				}

    4bd2:	80 e0       	ldi	r24, 0x00	; 0
    4bd4:	90 e0       	ldi	r25, 0x00	; 0
    4bd6:	0e 94 0c 28 	call	0x5018	; 0x5018 <nrk_wait_until_ticks>
				if(size==1)
			      	{
    4bda:	e0 91 95 07 	lds	r30, 0x0795
    4bde:	f0 91 96 07 	lds	r31, 0x0796
    4be2:	61 89       	ldd	r22, Z+17	; 0x11
    4be4:	72 89       	ldd	r23, Z+18	; 0x12
    4be6:	83 89       	ldd	r24, Z+19	; 0x13
    4be8:	94 89       	ldd	r25, Z+20	; 0x14
			      		buffer[count]=(val>>2)  & 0xFF;
    4bea:	08 95       	ret

00004bec <nrk_get_high_ready_task_ID>:
#include <basic_rf.h>
#include <nrk_timer.h>

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

    4bec:	e0 91 8a 07 	lds	r30, 0x078A
    4bf0:	f0 91 8b 07 	lds	r31, 0x078B
    4bf4:	80 81       	ld	r24, Z
uint8_t channel;
uint8_t is_open;
    4bf6:	99 27       	eor	r25, r25
    4bf8:	08 95       	ret

00004bfa <nrk_print_readyQ>:

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
    4bfa:	e0 91 8a 07 	lds	r30, 0x078A
    4bfe:	f0 91 8b 07 	lds	r31, 0x078B
    4c02:	03 c0       	rjmp	.+6      	; 0x4c0a <nrk_print_readyQ+0x10>
	ADMUX = BM(REFS0);  \
} while (0)

#define ADC_VREF_VCC() \
    4c04:	03 80       	ldd	r0, Z+3	; 0x03
    4c06:	f4 81       	ldd	r31, Z+4	; 0x04
    4c08:	e0 2d       	mov	r30, r0
// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)
    4c0a:	30 97       	sbiw	r30, 0x00	; 0
    4c0c:	d9 f7       	brne	.-10     	; 0x4c04 <nrk_print_readyQ+0xa>
    4c0e:	08 95       	ret

00004c10 <nrk_add_to_readyQ>:
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)


#define ADC_VREF_1_1() \
    4c10:	cf 93       	push	r28
    4c12:	df 93       	push	r29
    4c14:	48 2f       	mov	r20, r24
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)


    4c16:	c0 91 17 07 	lds	r28, 0x0717
    4c1a:	d0 91 18 07 	lds	r29, 0x0718
    4c1e:	20 97       	sbiw	r28, 0x00	; 0
    4c20:	09 f4       	brne	.+2      	; 0x4c24 <nrk_add_to_readyQ+0x14>
    4c22:	7a c0       	rjmp	.+244    	; 0x4d18 <nrk_add_to_readyQ+0x108>
#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

    4c24:	a0 91 8a 07 	lds	r26, 0x078A
    4c28:	b0 91 8b 07 	lds	r27, 0x078B
#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
    4c2c:	10 97       	sbiw	r26, 0x00	; 0
    4c2e:	b9 f1       	breq	.+110    	; 0x4c9e <nrk_add_to_readyQ+0x8e>
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    4c30:	99 27       	eor	r25, r25
    4c32:	87 fd       	sbrc	r24, 7
    4c34:	90 95       	com	r25
    4c36:	9c 01       	movw	r18, r24
    4c38:	65 e0       	ldi	r22, 0x05	; 5
    4c3a:	22 0f       	add	r18, r18
    4c3c:	33 1f       	adc	r19, r19
    4c3e:	6a 95       	dec	r22
    4c40:	e1 f7       	brne	.-8      	; 0x4c3a <nrk_add_to_readyQ+0x2a>
    4c42:	28 0f       	add	r18, r24
    4c44:	39 1f       	adc	r19, r25
    4c46:	27 5e       	subi	r18, 0xE7	; 231
    4c48:	38 4f       	sbci	r19, 0xF8	; 248
#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

    4c4a:	8c 91       	ld	r24, X
    4c4c:	99 27       	eor	r25, r25
    4c4e:	bc 01       	movw	r22, r24
    4c50:	55 e0       	ldi	r21, 0x05	; 5
    4c52:	66 0f       	add	r22, r22
    4c54:	77 1f       	adc	r23, r23
    4c56:	5a 95       	dec	r21
    4c58:	e1 f7       	brne	.-8      	; 0x4c52 <nrk_add_to_readyQ+0x42>
    4c5a:	68 0f       	add	r22, r24
    4c5c:	79 1f       	adc	r23, r25
    4c5e:	67 5e       	subi	r22, 0xE7	; 231
    4c60:	78 4f       	sbci	r23, 0xF8	; 248
    4c62:	fb 01       	movw	r30, r22
    4c64:	84 81       	ldd	r24, Z+4	; 0x04
    4c66:	88 23       	and	r24, r24
    4c68:	29 f0       	breq	.+10     	; 0x4c74 <nrk_add_to_readyQ+0x64>
#define ADC_SAMPLE_SINGLE() \
    4c6a:	93 85       	ldd	r25, Z+11	; 0x0b
    4c6c:	f9 01       	movw	r30, r18
    4c6e:	82 85       	ldd	r24, Z+10	; 0x0a
    4c70:	98 17       	cp	r25, r24
    4c72:	a8 f0       	brcs	.+42     	; 0x4c9e <nrk_add_to_readyQ+0x8e>
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
    4c74:	f9 01       	movw	r30, r18
    4c76:	84 81       	ldd	r24, Z+4	; 0x04
    4c78:	88 23       	and	r24, r24
    4c7a:	31 f0       	breq	.+12     	; 0x4c88 <nrk_add_to_readyQ+0x78>
} while(0)
    4c7c:	fb 01       	movw	r30, r22
    4c7e:	92 85       	ldd	r25, Z+10	; 0x0a
    4c80:	f9 01       	movw	r30, r18
    4c82:	83 85       	ldd	r24, Z+11	; 0x0b
    4c84:	98 17       	cp	r25, r24
    4c86:	58 f0       	brcs	.+22     	; 0x4c9e <nrk_add_to_readyQ+0x8e>

// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
    4c88:	fb 01       	movw	r30, r22
    4c8a:	92 85       	ldd	r25, Z+10	; 0x0a
    4c8c:	f9 01       	movw	r30, r18
    4c8e:	82 85       	ldd	r24, Z+10	; 0x0a
    4c90:	98 17       	cp	r25, r24
    4c92:	28 f0       	brcs	.+10     	; 0x4c9e <nrk_add_to_readyQ+0x8e>
do { \
x =  ADCL; \
x |= ADCH << 8; \
} while (0)
    4c94:	fd 01       	movw	r30, r26
    4c96:	a3 81       	ldd	r26, Z+3	; 0x03
    4c98:	b4 81       	ldd	r27, Z+4	; 0x04

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)
    4c9a:	10 97       	sbiw	r26, 0x00	; 0
    4c9c:	b1 f6       	brne	.-84     	; 0x4c4a <nrk_add_to_readyQ+0x3a>

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
uint8_t count=0;
// key and value get passed as opt and size
    4c9e:	48 83       	st	Y, r20
uint8_t key=opt;
    4ca0:	e0 91 17 07 	lds	r30, 0x0717
    4ca4:	f0 91 18 07 	lds	r31, 0x0718
    4ca8:	23 81       	ldd	r18, Z+3	; 0x03
    4caa:	34 81       	ldd	r19, Z+4	; 0x04
    4cac:	30 93 18 07 	sts	0x0718, r19
    4cb0:	20 93 17 07 	sts	0x0717, r18
uint8_t value=size;

    4cb4:	80 91 8a 07 	lds	r24, 0x078A
    4cb8:	90 91 8b 07 	lds	r25, 0x078B
    4cbc:	a8 17       	cp	r26, r24
    4cbe:	b9 07       	cpc	r27, r25
    4cc0:	a1 f4       	brne	.+40     	; 0x4cea <nrk_add_to_readyQ+0xda>
     switch(action)
     {
    4cc2:	10 97       	sbiw	r26, 0x00	; 0
    4cc4:	31 f0       	breq	.+12     	; 0x4cd2 <nrk_add_to_readyQ+0xc2>
            case INIT: 
    4cc6:	bc 83       	std	Y+4, r27	; 0x04
    4cc8:	ab 83       	std	Y+3, r26	; 0x03
			// Set the pwr ctrl pin as output
    4cca:	1a 82       	std	Y+2, r1	; 0x02
    4ccc:	19 82       	std	Y+1, r1	; 0x01
  			DDRF = PWR_CTRL_MASK;
    4cce:	fd 01       	movw	r30, r26
    4cd0:	05 c0       	rjmp	.+10     	; 0x4cdc <nrk_add_to_readyQ+0xcc>
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
    4cd2:	1c 82       	std	Y+4, r1	; 0x04
    4cd4:	1b 82       	std	Y+3, r1	; 0x03
		      return 1;
    4cd6:	1a 82       	std	Y+2, r1	; 0x02
    4cd8:	19 82       	std	Y+1, r1	; 0x01
	     
    4cda:	f9 01       	movw	r30, r18
    4cdc:	d2 83       	std	Z+2, r29	; 0x02
    4cde:	c1 83       	std	Z+1, r28	; 0x01
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    4ce0:	d0 93 8b 07 	sts	0x078B, r29
    4ce4:	c0 93 8a 07 	sts	0x078A, r28
    4ce8:	17 c0       	rjmp	.+46     	; 0x4d18 <nrk_add_to_readyQ+0x108>
    4cea:	fd 01       	movw	r30, r26
    4cec:	81 81       	ldd	r24, Z+1	; 0x01
    4cee:	92 81       	ldd	r25, Z+2	; 0x02
		    is_open=1; 
		    if(opt&READ_FLAG)
		    {
		   	// Turn on Sensor Node Power
    4cf0:	a2 17       	cp	r26, r18
    4cf2:	b3 07       	cpc	r27, r19
    4cf4:	51 f0       	breq	.+20     	; 0x4d0a <nrk_add_to_readyQ+0xfa>
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
    4cf6:	9a 83       	std	Y+2, r25	; 0x02
    4cf8:	89 83       	std	Y+1, r24	; 0x01
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    4cfa:	bc 83       	std	Y+4, r27	; 0x04
    4cfc:	ab 83       	std	Y+3, r26	; 0x03
		    	return NRK_OK;
    4cfe:	81 81       	ldd	r24, Z+1	; 0x01
    4d00:	92 81       	ldd	r25, Z+2	; 0x02
    4d02:	fc 01       	movw	r30, r24
    4d04:	d4 83       	std	Z+4, r29	; 0x04
    4d06:	c3 83       	std	Z+3, r28	; 0x03
    4d08:	04 c0       	rjmp	.+8      	; 0x4d12 <nrk_add_to_readyQ+0x102>
		    }
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
		    }
    4d0a:	1c 82       	std	Y+4, r1	; 0x04
    4d0c:	1b 82       	std	Y+3, r1	; 0x03
		    if(opt&APPEND_FLAG)
    4d0e:	9a 83       	std	Y+2, r25	; 0x02
    4d10:	89 83       	std	Y+1, r24	; 0x01
		    {
    4d12:	fd 01       	movw	r30, r26
    4d14:	d2 83       	std	Z+2, r29	; 0x02
    4d16:	c1 83       	std	Z+1, r28	; 0x01
    4d18:	df 91       	pop	r29
    4d1a:	cf 91       	pop	r28
    4d1c:	08 95       	ret

00004d1e <nrk_rem_from_readyQ>:
		    	return NRK_ERROR;
		    else return NRK_OK;
		
	    

             case READ:
    4d1e:	cf 93       	push	r28
    4d20:	df 93       	push	r29
				{
					buffer[count]=tmp & 0xFF;
					count++;
					buffer[count]=(tmp>>8) & 0xFF;
				}
			if(size==1)
    4d22:	a0 91 8a 07 	lds	r26, 0x078A
    4d26:	b0 91 8b 07 	lds	r27, 0x078B
    4d2a:	10 97       	sbiw	r26, 0x00	; 0
    4d2c:	09 f4       	brne	.+2      	; 0x4d30 <nrk_rem_from_readyQ+0x12>
    4d2e:	46 c0       	rjmp	.+140    	; 0x4dbc <nrk_rem_from_readyQ+0x9e>
				{
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
			{
    4d30:	48 2f       	mov	r20, r24
    4d32:	55 27       	eor	r21, r21
    4d34:	47 fd       	sbrc	r20, 7
    4d36:	50 95       	com	r21
    4d38:	8c 91       	ld	r24, X
    4d3a:	99 27       	eor	r25, r25
    4d3c:	84 17       	cp	r24, r20
    4d3e:	95 07       	cpc	r25, r21
    4d40:	69 f4       	brne	.+26     	; 0x4d5c <nrk_rem_from_readyQ+0x3e>
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
    4d42:	ed 01       	movw	r28, r26
    4d44:	eb 81       	ldd	r30, Y+3	; 0x03
    4d46:	fc 81       	ldd	r31, Y+4	; 0x04
    4d48:	f0 93 8b 07 	sts	0x078B, r31
    4d4c:	e0 93 8a 07 	sts	0x078A, r30
			      uint16_t val,min, max;
    4d50:	12 82       	std	Z+2, r1	; 0x02
    4d52:	11 82       	std	Z+1, r1	; 0x01
    4d54:	16 c0       	rjmp	.+44     	; 0x4d82 <nrk_rem_from_readyQ+0x64>
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
    4d56:	d9 01       	movw	r26, r18
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
    4d58:	23 2b       	or	r18, r19
    4d5a:	81 f1       	breq	.+96     	; 0x4dbc <nrk_rem_from_readyQ+0x9e>
    4d5c:	8c 91       	ld	r24, X
    4d5e:	99 27       	eor	r25, r25
    4d60:	fd 01       	movw	r30, r26
    4d62:	23 81       	ldd	r18, Z+3	; 0x03
    4d64:	34 81       	ldd	r19, Z+4	; 0x04
    4d66:	84 17       	cp	r24, r20
    4d68:	95 07       	cpc	r25, r21
    4d6a:	a9 f7       	brne	.-22     	; 0x4d56 <nrk_rem_from_readyQ+0x38>
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
    4d6c:	c1 81       	ldd	r28, Z+1	; 0x01
    4d6e:	d2 81       	ldd	r29, Z+2	; 0x02
    4d70:	3c 83       	std	Y+4, r19	; 0x04
    4d72:	2b 83       	std	Y+3, r18	; 0x03
				nrk_spin_wait_us(125);	
    4d74:	83 81       	ldd	r24, Z+3	; 0x03
    4d76:	94 81       	ldd	r25, Z+4	; 0x04
    4d78:	00 97       	sbiw	r24, 0x00	; 0
    4d7a:	19 f0       	breq	.+6      	; 0x4d82 <nrk_rem_from_readyQ+0x64>
				}
    4d7c:	fc 01       	movw	r30, r24
    4d7e:	d2 83       	std	Z+2, r29	; 0x02
    4d80:	c1 83       	std	Z+1, r28	; 0x01
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}
    4d82:	e0 91 17 07 	lds	r30, 0x0717
    4d86:	f0 91 18 07 	lds	r31, 0x0718
    4d8a:	30 97       	sbiw	r30, 0x00	; 0
    4d8c:	41 f4       	brne	.+16     	; 0x4d9e <nrk_rem_from_readyQ+0x80>

    4d8e:	b0 93 18 07 	sts	0x0718, r27
    4d92:	a0 93 17 07 	sts	0x0717, r26
				if(size==1)
    4d96:	ed 01       	movw	r28, r26
    4d98:	1c 82       	std	Y+4, r1	; 0x04
    4d9a:	1b 82       	std	Y+3, r1	; 0x03
    4d9c:	09 c0       	rjmp	.+18     	; 0x4db0 <nrk_rem_from_readyQ+0x92>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}
    4d9e:	ed 01       	movw	r28, r26
    4da0:	fc 83       	std	Y+4, r31	; 0x04
    4da2:	eb 83       	std	Y+3, r30	; 0x03

    4da4:	b2 83       	std	Z+2, r27	; 0x02
    4da6:	a1 83       	std	Z+1, r26	; 0x01
			}
    4da8:	b0 93 18 07 	sts	0x0718, r27
    4dac:	a0 93 17 07 	sts	0x0717, r26
			
		      count++;
    4db0:	e0 91 17 07 	lds	r30, 0x0717
    4db4:	f0 91 18 07 	lds	r31, 0x0718
    4db8:	12 82       	std	Z+2, r1	; 0x02
    4dba:	11 82       	std	Z+1, r1	; 0x01
    4dbc:	df 91       	pop	r29
    4dbe:	cf 91       	pop	r28
    4dc0:	08 95       	ret

00004dc2 <nrk_get_pid>:
    4dc2:	e0 91 95 07 	lds	r30, 0x0795
    4dc6:	f0 91 96 07 	lds	r31, 0x0796
    4dca:	80 85       	ldd	r24, Z+8	; 0x08
    4dcc:	99 27       	eor	r25, r25
    4dce:	08 95       	ret

00004dd0 <_nrk_wait_for_scheduler>:
    4dd0:	0e 94 c7 32 	call	0x658e	; 0x658e <nrk_idle>
    4dd4:	e0 91 95 07 	lds	r30, 0x0795
    4dd8:	f0 91 96 07 	lds	r31, 0x0796
    4ddc:	85 81       	ldd	r24, Z+5	; 0x05
    4dde:	88 23       	and	r24, r24
    4de0:	b9 f7       	brne	.-18     	; 0x4dd0 <_nrk_wait_for_scheduler>
    4de2:	08 95       	ret

00004de4 <nrk_wait>:
    4de4:	ff 92       	push	r15
    4de6:	0f 93       	push	r16
    4de8:	1f 93       	push	r17
    4dea:	cf 93       	push	r28
    4dec:	df 93       	push	r29
    4dee:	cd b7       	in	r28, 0x3d	; 61
    4df0:	de b7       	in	r29, 0x3e	; 62
    4df2:	28 97       	sbiw	r28, 0x08	; 8
    4df4:	0f b6       	in	r0, 0x3f	; 63
    4df6:	f8 94       	cli
    4df8:	de bf       	out	0x3e, r29	; 62
    4dfa:	0f be       	out	0x3f, r0	; 63
    4dfc:	cd bf       	out	0x3d, r28	; 61
    4dfe:	29 83       	std	Y+1, r18	; 0x01
    4e00:	3a 83       	std	Y+2, r19	; 0x02
    4e02:	4b 83       	std	Y+3, r20	; 0x03
    4e04:	5c 83       	std	Y+4, r21	; 0x04
    4e06:	6d 83       	std	Y+5, r22	; 0x05
    4e08:	7e 83       	std	Y+6, r23	; 0x06
    4e0a:	8f 83       	std	Y+7, r24	; 0x07
    4e0c:	98 87       	std	Y+8, r25	; 0x08
    4e0e:	0e 94 b5 22 	call	0x456a	; 0x456a <nrk_stack_check>
    4e12:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>
    4e16:	e0 91 95 07 	lds	r30, 0x0795
    4e1a:	f0 91 96 07 	lds	r31, 0x0796
    4e1e:	81 e0       	ldi	r24, 0x01	; 1
    4e20:	85 83       	std	Z+5, r24	; 0x05
    4e22:	81 e0       	ldi	r24, 0x01	; 1
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	90 a3       	std	Z+32, r25	; 0x20
    4e28:	87 8f       	std	Z+31, r24	; 0x1f
    4e2a:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    4e2e:	f8 2e       	mov	r15, r24
    4e30:	29 81       	ldd	r18, Y+1	; 0x01
    4e32:	3a 81       	ldd	r19, Y+2	; 0x02
    4e34:	4b 81       	ldd	r20, Y+3	; 0x03
    4e36:	5c 81       	ldd	r21, Y+4	; 0x04
    4e38:	6d 81       	ldd	r22, Y+5	; 0x05
    4e3a:	7e 81       	ldd	r23, Y+6	; 0x06
    4e3c:	8f 81       	ldd	r24, Y+7	; 0x07
    4e3e:	98 85       	ldd	r25, Y+8	; 0x08
    4e40:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <_nrk_time_to_ticks>
    4e44:	e0 91 95 07 	lds	r30, 0x0795
    4e48:	f0 91 96 07 	lds	r31, 0x0796
    4e4c:	0f 2d       	mov	r16, r15
    4e4e:	11 27       	eor	r17, r17
    4e50:	80 0f       	add	r24, r16
    4e52:	91 1f       	adc	r25, r17
    4e54:	96 8b       	std	Z+22, r25	; 0x16
    4e56:	85 8b       	std	Z+21, r24	; 0x15
    4e58:	87 ef       	ldi	r24, 0xF7	; 247
    4e5a:	8f 15       	cp	r24, r15
    4e5c:	70 f0       	brcs	.+28     	; 0x4e7a <nrk_wait+0x96>
    4e5e:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <_nrk_get_next_wakeup>
    4e62:	0e 5f       	subi	r16, 0xFE	; 254
    4e64:	1f 4f       	sbci	r17, 0xFF	; 255
    4e66:	99 27       	eor	r25, r25
    4e68:	80 17       	cp	r24, r16
    4e6a:	91 07       	cpc	r25, r17
    4e6c:	34 f0       	brlt	.+12     	; 0x4e7a <nrk_wait+0x96>
    4e6e:	8f 2d       	mov	r24, r15
    4e70:	8e 5f       	subi	r24, 0xFE	; 254
    4e72:	80 93 e3 06 	sts	0x06E3, r24
    4e76:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <_nrk_set_next_wakeup>
    4e7a:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
    4e7e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_nrk_wait_for_scheduler>
    4e82:	81 e0       	ldi	r24, 0x01	; 1
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	28 96       	adiw	r28, 0x08	; 8
    4e88:	0f b6       	in	r0, 0x3f	; 63
    4e8a:	f8 94       	cli
    4e8c:	de bf       	out	0x3e, r29	; 62
    4e8e:	0f be       	out	0x3f, r0	; 63
    4e90:	cd bf       	out	0x3d, r28	; 61
    4e92:	df 91       	pop	r29
    4e94:	cf 91       	pop	r28
    4e96:	1f 91       	pop	r17
    4e98:	0f 91       	pop	r16
    4e9a:	ff 90       	pop	r15
    4e9c:	08 95       	ret

00004e9e <nrk_wait_until>:
    4e9e:	8f 92       	push	r8
    4ea0:	9f 92       	push	r9
    4ea2:	af 92       	push	r10
    4ea4:	bf 92       	push	r11
    4ea6:	cf 92       	push	r12
    4ea8:	df 92       	push	r13
    4eaa:	ef 92       	push	r14
    4eac:	ff 92       	push	r15
    4eae:	0f 93       	push	r16
    4eb0:	1f 93       	push	r17
    4eb2:	cf 93       	push	r28
    4eb4:	df 93       	push	r29
    4eb6:	cd b7       	in	r28, 0x3d	; 61
    4eb8:	de b7       	in	r29, 0x3e	; 62
    4eba:	60 97       	sbiw	r28, 0x10	; 16
    4ebc:	0f b6       	in	r0, 0x3f	; 63
    4ebe:	f8 94       	cli
    4ec0:	de bf       	out	0x3e, r29	; 62
    4ec2:	0f be       	out	0x3f, r0	; 63
    4ec4:	cd bf       	out	0x3d, r28	; 61
    4ec6:	29 87       	std	Y+9, r18	; 0x09
    4ec8:	3a 87       	std	Y+10, r19	; 0x0a
    4eca:	4b 87       	std	Y+11, r20	; 0x0b
    4ecc:	5c 87       	std	Y+12, r21	; 0x0c
    4ece:	6d 87       	std	Y+13, r22	; 0x0d
    4ed0:	7e 87       	std	Y+14, r23	; 0x0e
    4ed2:	8f 87       	std	Y+15, r24	; 0x0f
    4ed4:	98 8b       	std	Y+16, r25	; 0x10
    4ed6:	ce 01       	movw	r24, r28
    4ed8:	01 96       	adiw	r24, 0x01	; 1
    4eda:	0e 94 ba 2b 	call	0x5774	; 0x5774 <nrk_time_get>
    4ede:	89 80       	ldd	r8, Y+1	; 0x01
    4ee0:	9a 80       	ldd	r9, Y+2	; 0x02
    4ee2:	ab 80       	ldd	r10, Y+3	; 0x03
    4ee4:	bc 80       	ldd	r11, Y+4	; 0x04
    4ee6:	cd 80       	ldd	r12, Y+5	; 0x05
    4ee8:	de 80       	ldd	r13, Y+6	; 0x06
    4eea:	ef 80       	ldd	r14, Y+7	; 0x07
    4eec:	f8 84       	ldd	r15, Y+8	; 0x08
    4eee:	09 85       	ldd	r16, Y+9	; 0x09
    4ef0:	1a 85       	ldd	r17, Y+10	; 0x0a
    4ef2:	2b 85       	ldd	r18, Y+11	; 0x0b
    4ef4:	3c 85       	ldd	r19, Y+12	; 0x0c
    4ef6:	4d 85       	ldd	r20, Y+13	; 0x0d
    4ef8:	5e 85       	ldd	r21, Y+14	; 0x0e
    4efa:	6f 85       	ldd	r22, Y+15	; 0x0f
    4efc:	78 89       	ldd	r23, Y+16	; 0x10
    4efe:	ce 01       	movw	r24, r28
    4f00:	09 96       	adiw	r24, 0x09	; 9
    4f02:	0e 94 35 29 	call	0x526a	; 0x526a <nrk_time_sub>
    4f06:	88 23       	and	r24, r24
    4f08:	19 f4       	brne	.+6      	; 0x4f10 <nrk_wait_until+0x72>
    4f0a:	8f ef       	ldi	r24, 0xFF	; 255
    4f0c:	9f ef       	ldi	r25, 0xFF	; 255
    4f0e:	0c c0       	rjmp	.+24     	; 0x4f28 <nrk_wait_until+0x8a>
    4f10:	29 85       	ldd	r18, Y+9	; 0x09
    4f12:	3a 85       	ldd	r19, Y+10	; 0x0a
    4f14:	4b 85       	ldd	r20, Y+11	; 0x0b
    4f16:	5c 85       	ldd	r21, Y+12	; 0x0c
    4f18:	6d 85       	ldd	r22, Y+13	; 0x0d
    4f1a:	7e 85       	ldd	r23, Y+14	; 0x0e
    4f1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f1e:	98 89       	ldd	r25, Y+16	; 0x10
    4f20:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <nrk_wait>
    4f24:	81 e0       	ldi	r24, 0x01	; 1
    4f26:	90 e0       	ldi	r25, 0x00	; 0
    4f28:	60 96       	adiw	r28, 0x10	; 16
    4f2a:	0f b6       	in	r0, 0x3f	; 63
    4f2c:	f8 94       	cli
    4f2e:	de bf       	out	0x3e, r29	; 62
    4f30:	0f be       	out	0x3f, r0	; 63
    4f32:	cd bf       	out	0x3d, r28	; 61
    4f34:	df 91       	pop	r29
    4f36:	cf 91       	pop	r28
    4f38:	1f 91       	pop	r17
    4f3a:	0f 91       	pop	r16
    4f3c:	ff 90       	pop	r15
    4f3e:	ef 90       	pop	r14
    4f40:	df 90       	pop	r13
    4f42:	cf 90       	pop	r12
    4f44:	bf 90       	pop	r11
    4f46:	af 90       	pop	r10
    4f48:	9f 90       	pop	r9
    4f4a:	8f 90       	pop	r8
    4f4c:	08 95       	ret

00004f4e <nrk_wait_until_nw>:
    4f4e:	1f 93       	push	r17
    4f50:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>
    4f54:	e0 91 95 07 	lds	r30, 0x0795
    4f58:	f0 91 96 07 	lds	r31, 0x0796
    4f5c:	81 e0       	ldi	r24, 0x01	; 1
    4f5e:	85 83       	std	Z+5, r24	; 0x05
    4f60:	86 83       	std	Z+6, r24	; 0x06
    4f62:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    4f66:	18 2f       	mov	r17, r24
    4f68:	88 3f       	cpi	r24, 0xF8	; 248
    4f6a:	80 f4       	brcc	.+32     	; 0x4f8c <nrk_wait_until_nw+0x3e>
    4f6c:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <_nrk_get_next_wakeup>
    4f70:	21 2f       	mov	r18, r17
    4f72:	33 27       	eor	r19, r19
    4f74:	2e 5f       	subi	r18, 0xFE	; 254
    4f76:	3f 4f       	sbci	r19, 0xFF	; 255
    4f78:	99 27       	eor	r25, r25
    4f7a:	82 17       	cp	r24, r18
    4f7c:	93 07       	cpc	r25, r19
    4f7e:	34 f0       	brlt	.+12     	; 0x4f8c <nrk_wait_until_nw+0x3e>
    4f80:	81 2f       	mov	r24, r17
    4f82:	8e 5f       	subi	r24, 0xFE	; 254
    4f84:	80 93 e3 06 	sts	0x06E3, r24
    4f88:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <_nrk_set_next_wakeup>
    4f8c:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
    4f90:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_nrk_wait_for_scheduler>
    4f94:	81 e0       	ldi	r24, 0x01	; 1
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	1f 91       	pop	r17
    4f9a:	08 95       	ret

00004f9c <nrk_set_next_wakeup>:
    4f9c:	1f 93       	push	r17
    4f9e:	cf 93       	push	r28
    4fa0:	df 93       	push	r29
    4fa2:	cd b7       	in	r28, 0x3d	; 61
    4fa4:	de b7       	in	r29, 0x3e	; 62
    4fa6:	28 97       	sbiw	r28, 0x08	; 8
    4fa8:	0f b6       	in	r0, 0x3f	; 63
    4faa:	f8 94       	cli
    4fac:	de bf       	out	0x3e, r29	; 62
    4fae:	0f be       	out	0x3f, r0	; 63
    4fb0:	cd bf       	out	0x3d, r28	; 61
    4fb2:	29 83       	std	Y+1, r18	; 0x01
    4fb4:	3a 83       	std	Y+2, r19	; 0x02
    4fb6:	4b 83       	std	Y+3, r20	; 0x03
    4fb8:	5c 83       	std	Y+4, r21	; 0x04
    4fba:	6d 83       	std	Y+5, r22	; 0x05
    4fbc:	7e 83       	std	Y+6, r23	; 0x06
    4fbe:	8f 83       	std	Y+7, r24	; 0x07
    4fc0:	98 87       	std	Y+8, r25	; 0x08
    4fc2:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>
    4fc6:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    4fca:	18 2f       	mov	r17, r24
    4fcc:	29 81       	ldd	r18, Y+1	; 0x01
    4fce:	3a 81       	ldd	r19, Y+2	; 0x02
    4fd0:	4b 81       	ldd	r20, Y+3	; 0x03
    4fd2:	5c 81       	ldd	r21, Y+4	; 0x04
    4fd4:	6d 81       	ldd	r22, Y+5	; 0x05
    4fd6:	7e 81       	ldd	r23, Y+6	; 0x06
    4fd8:	8f 81       	ldd	r24, Y+7	; 0x07
    4fda:	98 85       	ldd	r25, Y+8	; 0x08
    4fdc:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <_nrk_time_to_ticks>
    4fe0:	83 30       	cpi	r24, 0x03	; 3
    4fe2:	91 05       	cpc	r25, r1
    4fe4:	18 f4       	brcc	.+6      	; 0x4fec <nrk_set_next_wakeup+0x50>
    4fe6:	8f ef       	ldi	r24, 0xFF	; 255
    4fe8:	9f ef       	ldi	r25, 0xFF	; 255
    4fea:	0c c0       	rjmp	.+24     	; 0x5004 <nrk_set_next_wakeup+0x68>
    4fec:	e0 91 95 07 	lds	r30, 0x0795
    4ff0:	f0 91 96 07 	lds	r31, 0x0796
    4ff4:	81 0f       	add	r24, r17
    4ff6:	91 1d       	adc	r25, r1
    4ff8:	96 8b       	std	Z+22, r25	; 0x16
    4ffa:	85 8b       	std	Z+21, r24	; 0x15
    4ffc:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
    5000:	81 e0       	ldi	r24, 0x01	; 1
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	28 96       	adiw	r28, 0x08	; 8
    5006:	0f b6       	in	r0, 0x3f	; 63
    5008:	f8 94       	cli
    500a:	de bf       	out	0x3e, r29	; 62
    500c:	0f be       	out	0x3f, r0	; 63
    500e:	cd bf       	out	0x3d, r28	; 61
    5010:	df 91       	pop	r29
    5012:	cf 91       	pop	r28
    5014:	1f 91       	pop	r17
    5016:	08 95       	ret

00005018 <nrk_wait_until_ticks>:
    5018:	0f 93       	push	r16
    501a:	1f 93       	push	r17
    501c:	8c 01       	movw	r16, r24
    501e:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>
    5022:	e0 91 95 07 	lds	r30, 0x0795
    5026:	f0 91 96 07 	lds	r31, 0x0796
    502a:	81 e0       	ldi	r24, 0x01	; 1
    502c:	85 83       	std	Z+5, r24	; 0x05
    502e:	16 8b       	std	Z+22, r17	; 0x16
    5030:	05 8b       	std	Z+21, r16	; 0x15
    5032:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    5036:	08 2f       	mov	r16, r24
    5038:	88 3f       	cpi	r24, 0xF8	; 248
    503a:	80 f4       	brcc	.+32     	; 0x505c <nrk_wait_until_ticks+0x44>
    503c:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <_nrk_get_next_wakeup>
    5040:	20 2f       	mov	r18, r16
    5042:	33 27       	eor	r19, r19
    5044:	2e 5f       	subi	r18, 0xFE	; 254
    5046:	3f 4f       	sbci	r19, 0xFF	; 255
    5048:	99 27       	eor	r25, r25
    504a:	82 17       	cp	r24, r18
    504c:	93 07       	cpc	r25, r19
    504e:	34 f0       	brlt	.+12     	; 0x505c <nrk_wait_until_ticks+0x44>
    5050:	80 2f       	mov	r24, r16
    5052:	8e 5f       	subi	r24, 0xFE	; 254
    5054:	80 93 e3 06 	sts	0x06E3, r24
    5058:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <_nrk_set_next_wakeup>
    505c:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
    5060:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_nrk_wait_for_scheduler>
    5064:	81 e0       	ldi	r24, 0x01	; 1
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	1f 91       	pop	r17
    506a:	0f 91       	pop	r16
    506c:	08 95       	ret

0000506e <nrk_wait_ticks>:
    506e:	ff 92       	push	r15
    5070:	0f 93       	push	r16
    5072:	1f 93       	push	r17
    5074:	cf 93       	push	r28
    5076:	df 93       	push	r29
    5078:	8c 01       	movw	r16, r24
    507a:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>
    507e:	e0 91 95 07 	lds	r30, 0x0795
    5082:	f0 91 96 07 	lds	r31, 0x0796
    5086:	81 e0       	ldi	r24, 0x01	; 1
    5088:	85 83       	std	Z+5, r24	; 0x05
    508a:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    508e:	f8 2e       	mov	r15, r24
    5090:	e0 91 95 07 	lds	r30, 0x0795
    5094:	f0 91 96 07 	lds	r31, 0x0796
    5098:	c8 2f       	mov	r28, r24
    509a:	dd 27       	eor	r29, r29
    509c:	0c 0f       	add	r16, r28
    509e:	1d 1f       	adc	r17, r29
    50a0:	16 8b       	std	Z+22, r17	; 0x16
    50a2:	05 8b       	std	Z+21, r16	; 0x15
    50a4:	87 ef       	ldi	r24, 0xF7	; 247
    50a6:	8f 15       	cp	r24, r15
    50a8:	68 f0       	brcs	.+26     	; 0x50c4 <nrk_wait_ticks+0x56>
    50aa:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <_nrk_get_next_wakeup>
    50ae:	22 96       	adiw	r28, 0x02	; 2
    50b0:	99 27       	eor	r25, r25
    50b2:	8c 17       	cp	r24, r28
    50b4:	9d 07       	cpc	r25, r29
    50b6:	34 f0       	brlt	.+12     	; 0x50c4 <nrk_wait_ticks+0x56>
    50b8:	8f 2d       	mov	r24, r15
    50ba:	8e 5f       	subi	r24, 0xFE	; 254
    50bc:	80 93 e3 06 	sts	0x06E3, r24
    50c0:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <_nrk_set_next_wakeup>
    50c4:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
    50c8:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_nrk_wait_for_scheduler>
    50cc:	81 e0       	ldi	r24, 0x01	; 1
    50ce:	90 e0       	ldi	r25, 0x00	; 0
    50d0:	df 91       	pop	r29
    50d2:	cf 91       	pop	r28
    50d4:	1f 91       	pop	r17
    50d6:	0f 91       	pop	r16
    50d8:	ff 90       	pop	r15
    50da:	08 95       	ret

000050dc <nrk_wait_until_next_n_periods>:
if(radio_sem!=NULL)
 nrk_sem_post(radio_sem);
if(level==0)
  {
  val=get_adc_val();
  // FIXME:  This probably isn't correct...
    50dc:	1f 93       	push	r17
    50de:	cf 93       	push	r28
    50e0:	df 93       	push	r29
    50e2:	ec 01       	movw	r28, r24
  if(val>174) val-=174;
  if(val<330) val=330;
  }
    50e4:	0e 94 b5 22 	call	0x456a	; 0x456a <nrk_stack_check>
else val=(9000-(level*125)) / 27;

    50e8:	20 97       	sbiw	r28, 0x00	; 0
    50ea:	11 f4       	brne	.+4      	; 0x50f0 <nrk_wait_until_next_n_periods+0x14>
    50ec:	c1 e0       	ldi	r28, 0x01	; 1
    50ee:	d0 e0       	ldi	r29, 0x00	; 0
return val;
}

    50f0:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>

    50f4:	e0 91 95 07 	lds	r30, 0x0795
    50f8:	f0 91 96 07 	lds	r31, 0x0796
    50fc:	81 e0       	ldi	r24, 0x01	; 1
    50fe:	85 83       	std	Z+5, r24	; 0x05

    5100:	d0 a3       	std	Z+32, r29	; 0x20
    5102:	c7 8f       	std	Z+31, r28	; 0x1f
void init_adc()
    5104:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    5108:	18 2f       	mov	r17, r24
{
// Initialize values here
  ADC_INIT ();
  ADC_ENABLE ();
  channel=0;
    510a:	88 3f       	cpi	r24, 0xF8	; 248
    510c:	80 f4       	brcc	.+32     	; 0x512e <nrk_wait_until_next_n_periods+0x52>
  ADC_SET_CHANNEL (0);
    510e:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <_nrk_get_next_wakeup>
    5112:	21 2f       	mov	r18, r17
    5114:	33 27       	eor	r19, r19
    5116:	2e 5f       	subi	r18, 0xFE	; 254
    5118:	3f 4f       	sbci	r19, 0xFF	; 255
    511a:	99 27       	eor	r25, r25
    511c:	82 17       	cp	r24, r18
    511e:	93 07       	cpc	r25, r19
    5120:	34 f0       	brlt	.+12     	; 0x512e <nrk_wait_until_next_n_periods+0x52>
}
    5122:	81 2f       	mov	r24, r17
    5124:	8e 5f       	subi	r24, 0xFE	; 254

    5126:	80 93 e3 06 	sts	0x06E3, r24
uint16_t get_adc_val()
    512a:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <_nrk_set_next_wakeup>
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
    512e:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
	delay();
	ADC_GET_SAMPLE_10(adc_val);
    5132:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_nrk_wait_for_scheduler>
	return adc_val;
}
void delay()
    5136:	81 e0       	ldi	r24, 0x01	; 1
    5138:	90 e0       	ldi	r25, 0x00	; 0
    513a:	df 91       	pop	r29
    513c:	cf 91       	pop	r28
    513e:	1f 91       	pop	r17
    5140:	08 95       	ret

00005142 <nrk_wait_until_next_period>:
uint16_t read_voltage_status()
{
volatile uint16_t val;
uint8_t check,level;
nrk_sem_t *radio_sem;

    5142:	1f 93       	push	r17
radio_sem= rf_get_sem();

// if semaphore not created, then assume you own the radio 
    5144:	0e 94 b5 22 	call	0x456a	; 0x456a <nrk_stack_check>
if(radio_sem!=NULL)
 nrk_sem_pend (radio_sem);
    5148:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>

    514c:	e0 91 95 07 	lds	r30, 0x0795
    5150:	f0 91 96 07 	lds	r31, 0x0796
    5154:	81 e0       	ldi	r24, 0x01	; 1
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	90 a3       	std	Z+32, r25	; 0x20
    515a:	87 8f       	std	Z+31, r24	; 0x1f
    // activate cc2420 vreg
    515c:	81 e0       	ldi	r24, 0x01	; 1
    515e:	85 83       	std	Z+5, r24	; 0x05
    SET_VREG_ACTIVE();
    5160:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    5164:	18 2f       	mov	r17, r24
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
    5166:	88 3f       	cpi	r24, 0xF8	; 248
    5168:	80 f4       	brcc	.+32     	; 0x518a <nrk_wait_until_next_period+0x48>
{
    516a:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <_nrk_get_next_wakeup>
    516e:	21 2f       	mov	r18, r17
    5170:	33 27       	eor	r19, r19
    5172:	2e 5f       	subi	r18, 0xFE	; 254
    5174:	3f 4f       	sbci	r19, 0xFF	; 255
    5176:	99 27       	eor	r25, r25
    5178:	82 17       	cp	r24, r18
    517a:	93 07       	cpc	r25, r19
    517c:	34 f0       	brlt	.+12     	; 0x518a <nrk_wait_until_next_period+0x48>
val=0x0020 | level;
    517e:	81 2f       	mov	r24, r17
    5180:	8e 5f       	subi	r24, 0xFE	; 254
FASTSPI_SETREG(CC2420_BATTMON, val);
    5182:	80 93 e3 06 	sts	0x06E3, r24
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
    5186:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <_nrk_set_next_wakeup>
if(val&0x0040) break; 
level++;
}
    518a:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
if(radio_sem!=NULL)
    518e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_nrk_wait_for_scheduler>
 nrk_sem_post(radio_sem);
if(level==0)
    5192:	81 e0       	ldi	r24, 0x01	; 1
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	1f 91       	pop	r17
    5198:	08 95       	ret

0000519a <nrk_terminate_task>:


// read_voltage_status()
//
// This function sets different voltage threshold levels on
// the cc2420 chip to search for the voltage.
    519a:	e0 91 95 07 	lds	r30, 0x0795
    519e:	f0 91 96 07 	lds	r31, 0x0796
    51a2:	80 85       	ldd	r24, Z+8	; 0x08
    51a4:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <nrk_rem_from_readyQ>
// If the voltage is above 3.3 volts, then the ADC reads
    51a8:	e0 91 95 07 	lds	r30, 0x0795
    51ac:	f0 91 96 07 	lds	r31, 0x0796
    51b0:	84 e0       	ldi	r24, 0x04	; 4
    51b2:	81 87       	std	Z+9, r24	; 0x09
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
    51b4:	0e 94 a1 28 	call	0x5142	; 0x5142 <nrk_wait_until_next_period>
{
volatile uint16_t val;
    51b8:	81 e0       	ldi	r24, 0x01	; 1
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	08 95       	ret

000051be <nrk_activate_task>:
             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
		    	is_open=0; 
                        return NRK_OK;
             
    51be:	ef 92       	push	r14
    51c0:	ff 92       	push	r15
    51c2:	0f 93       	push	r16
    51c4:	1f 93       	push	r17
    51c6:	cf 93       	push	r28
    51c8:	df 93       	push	r29
    51ca:	ec 01       	movw	r28, r24
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
	     		return NRK_ERROR;
    51cc:	4b 81       	ldd	r20, Y+3	; 0x03
    51ce:	5c 81       	ldd	r21, Y+4	; 0x04
    51d0:	69 81       	ldd	r22, Y+1	; 0x01
    51d2:	7a 81       	ldd	r23, Y+2	; 0x02
    51d4:	8d 81       	ldd	r24, Y+5	; 0x05
    51d6:	9e 81       	ldd	r25, Y+6	; 0x06
    51d8:	0e 94 d6 32 	call	0x65ac	; 0x65ac <nrk_task_stk_init>
    51dc:	bc 01       	movw	r22, r24
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    51de:	8f 81       	ldd	r24, Y+7	; 0x07
    51e0:	88 23       	and	r24, r24
    51e2:	69 f0       	breq	.+26     	; 0x51fe <nrk_activate_task+0x40>
			{
    51e4:	4b 81       	ldd	r20, Y+3	; 0x03
    51e6:	5c 81       	ldd	r21, Y+4	; 0x04
    51e8:	ee 24       	eor	r14, r14
    51ea:	ff 24       	eor	r15, r15
    51ec:	00 e0       	ldi	r16, 0x00	; 0
    51ee:	10 e0       	ldi	r17, 0x00	; 0
    51f0:	20 e0       	ldi	r18, 0x00	; 0
    51f2:	30 e0       	ldi	r19, 0x00	; 0
    51f4:	ce 01       	movw	r24, r28
    51f6:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <nrk_TCB_init>
			// Set to audio channel if it is an average value
    51fa:	1f 82       	std	Y+7, r1	; 0x07
    51fc:	16 c0       	rjmp	.+44     	; 0x522a <nrk_activate_task+0x6c>
			if(value==AUDIO_P2P) 
			  {
				channel=value;
				   //ADC_VREF_2_56();	
    51fe:	88 81       	ld	r24, Y
    5200:	99 27       	eor	r25, r25
    5202:	87 fd       	sbrc	r24, 7
    5204:	90 95       	com	r25
    5206:	fc 01       	movw	r30, r24
    5208:	a5 e0       	ldi	r26, 0x05	; 5
    520a:	ee 0f       	add	r30, r30
    520c:	ff 1f       	adc	r31, r31
    520e:	aa 95       	dec	r26
    5210:	e1 f7       	brne	.-8      	; 0x520a <nrk_activate_task+0x4c>
    5212:	e8 0f       	add	r30, r24
    5214:	f9 1f       	adc	r31, r25
    5216:	e7 5e       	subi	r30, 0xE7	; 231
    5218:	f8 4f       	sbci	r31, 0xF8	; 248
    521a:	81 85       	ldd	r24, Z+9	; 0x09
    521c:	83 30       	cpi	r24, 0x03	; 3
    521e:	19 f0       	breq	.+6      	; 0x5226 <nrk_activate_task+0x68>
    5220:	8f ef       	ldi	r24, 0xFF	; 255
    5222:	9f ef       	ldi	r25, 0xFF	; 255
    5224:	1b c0       	rjmp	.+54     	; 0x525c <nrk_activate_task+0x9e>
				ADC_VREF_VCC();	
				ADC_SET_CHANNEL (AUDIO);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;
    5226:	71 83       	std	Z+1, r23	; 0x01
    5228:	60 83       	st	Z, r22
				   ADC_VREF_2_56();	
				ADC_SET_CHANNEL (channel);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;
			  }
			}
    522a:	88 81       	ld	r24, Y
    522c:	99 27       	eor	r25, r25
    522e:	87 fd       	sbrc	r24, 7
    5230:	90 95       	com	r25
    5232:	fc 01       	movw	r30, r24
    5234:	75 e0       	ldi	r23, 0x05	; 5
    5236:	ee 0f       	add	r30, r30
    5238:	ff 1f       	adc	r31, r31
    523a:	7a 95       	dec	r23
    523c:	e1 f7       	brne	.-8      	; 0x5236 <nrk_activate_task+0x78>
    523e:	e8 0f       	add	r30, r24
    5240:	f9 1f       	adc	r31, r25
    5242:	e7 5e       	subi	r30, 0xE7	; 231
    5244:	f8 4f       	sbci	r31, 0xF8	; 248
    5246:	85 89       	ldd	r24, Z+21	; 0x15
    5248:	96 89       	ldd	r25, Z+22	; 0x16
    524a:	89 2b       	or	r24, r25
    524c:	29 f4       	brne	.+10     	; 0x5258 <nrk_activate_task+0x9a>
			return NRK_ERROR;
    524e:	82 e0       	ldi	r24, 0x02	; 2
    5250:	81 87       	std	Z+9, r24	; 0x09
	     default:
    5252:	88 81       	ld	r24, Y
    5254:	0e 94 08 26 	call	0x4c10	; 0x4c10 <nrk_add_to_readyQ>
    5258:	81 e0       	ldi	r24, 0x01	; 1
    525a:	90 e0       	ldi	r25, 0x00	; 0
    525c:	df 91       	pop	r29
    525e:	cf 91       	pop	r28
    5260:	1f 91       	pop	r17
    5262:	0f 91       	pop	r16
    5264:	ff 90       	pop	r15
    5266:	ef 90       	pop	r14
    5268:	08 95       	ret

0000526a <nrk_time_sub>:
	ADMUX |= BM(REFS0);  \
} while(0)


#define ADC_VREF_1_1() \
   do { \
    526a:	8f 92       	push	r8
    526c:	9f 92       	push	r9
    526e:	af 92       	push	r10
    5270:	bf 92       	push	r11
    5272:	cf 92       	push	r12
    5274:	df 92       	push	r13
    5276:	ef 92       	push	r14
    5278:	ff 92       	push	r15
    527a:	0f 93       	push	r16
    527c:	1f 93       	push	r17
    527e:	cf 93       	push	r28
    5280:	df 93       	push	r29
    5282:	cd b7       	in	r28, 0x3d	; 61
    5284:	de b7       	in	r29, 0x3e	; 62
    5286:	60 97       	sbiw	r28, 0x10	; 16
    5288:	0f b6       	in	r0, 0x3f	; 63
    528a:	f8 94       	cli
    528c:	de bf       	out	0x3e, r29	; 62
    528e:	0f be       	out	0x3f, r0	; 63
    5290:	cd bf       	out	0x3d, r28	; 61
    5292:	fc 01       	movw	r30, r24
    5294:	09 83       	std	Y+1, r16	; 0x01
    5296:	1a 83       	std	Y+2, r17	; 0x02
    5298:	2b 83       	std	Y+3, r18	; 0x03
    529a:	3c 83       	std	Y+4, r19	; 0x04
    529c:	4d 83       	std	Y+5, r20	; 0x05
    529e:	5e 83       	std	Y+6, r21	; 0x06
    52a0:	6f 83       	std	Y+7, r22	; 0x07
    52a2:	78 87       	std	Y+8, r23	; 0x08
    52a4:	89 86       	std	Y+9, r8	; 0x09
    52a6:	9a 86       	std	Y+10, r9	; 0x0a
    52a8:	ab 86       	std	Y+11, r10	; 0x0b
    52aa:	bc 86       	std	Y+12, r11	; 0x0c
    52ac:	cd 86       	std	Y+13, r12	; 0x0d
    52ae:	de 86       	std	Y+14, r13	; 0x0e
    52b0:	ef 86       	std	Y+15, r14	; 0x0f
    52b2:	f8 8a       	std	Y+16, r15	; 0x10
    52b4:	2d 81       	ldd	r18, Y+5	; 0x05
    52b6:	3e 81       	ldd	r19, Y+6	; 0x06
    52b8:	4f 81       	ldd	r20, Y+7	; 0x07
    52ba:	58 85       	ldd	r21, Y+8	; 0x08
    52bc:	89 81       	ldd	r24, Y+1	; 0x01
    52be:	9a 81       	ldd	r25, Y+2	; 0x02
    52c0:	ab 81       	ldd	r26, Y+3	; 0x03
    52c2:	bc 81       	ldd	r27, Y+4	; 0x04
    52c4:	ad 84       	ldd	r10, Y+13	; 0x0d
    52c6:	be 84       	ldd	r11, Y+14	; 0x0e
    52c8:	cf 84       	ldd	r12, Y+15	; 0x0f
    52ca:	d8 88       	ldd	r13, Y+16	; 0x10
    52cc:	e9 84       	ldd	r14, Y+9	; 0x09
    52ce:	fa 84       	ldd	r15, Y+10	; 0x0a
    52d0:	0b 85       	ldd	r16, Y+11	; 0x0b
    52d2:	1c 85       	ldd	r17, Y+12	; 0x0c
	ADMUX &= ~(BM(REFS0));  \
    52d4:	8e 15       	cp	r24, r14
    52d6:	9f 05       	cpc	r25, r15
    52d8:	a0 07       	cpc	r26, r16
    52da:	b1 07       	cpc	r27, r17
    52dc:	08 f4       	brcc	.+2      	; 0x52e0 <nrk_time_sub+0x76>
    52de:	3f c0       	rjmp	.+126    	; 0x535e <nrk_time_sub+0xf4>
	ADMUX |= BM(REFS1);  \
    52e0:	e8 16       	cp	r14, r24
    52e2:	f9 06       	cpc	r15, r25
    52e4:	0a 07       	cpc	r16, r26
    52e6:	1b 07       	cpc	r17, r27
    52e8:	91 f4       	brne	.+36     	; 0x530e <nrk_time_sub+0xa4>
} while(0)

    52ea:	2a 15       	cp	r18, r10
    52ec:	3b 05       	cpc	r19, r11
    52ee:	4c 05       	cpc	r20, r12
    52f0:	5d 05       	cpc	r21, r13
    52f2:	a8 f1       	brcs	.+106    	; 0x535e <nrk_time_sub+0xf4>

    52f4:	2a 19       	sub	r18, r10
    52f6:	3b 09       	sbc	r19, r11
    52f8:	4c 09       	sbc	r20, r12
    52fa:	5d 09       	sbc	r21, r13
    52fc:	24 83       	std	Z+4, r18	; 0x04
    52fe:	35 83       	std	Z+5, r19	; 0x05
    5300:	46 83       	std	Z+6, r20	; 0x06
    5302:	57 83       	std	Z+7, r21	; 0x07
#define ADC_VREF_2_56() \
    5304:	10 82       	st	Z, r1
    5306:	11 82       	std	Z+1, r1	; 0x01
    5308:	12 82       	std	Z+2, r1	; 0x02
    530a:	13 82       	std	Z+3, r1	; 0x03
    530c:	1c c0       	rjmp	.+56     	; 0x5346 <nrk_time_sub+0xdc>
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)
    530e:	2a 15       	cp	r18, r10
    5310:	3b 05       	cpc	r19, r11
    5312:	4c 05       	cpc	r20, r12
    5314:	5d 05       	cpc	r21, r13
    5316:	d0 f4       	brcc	.+52     	; 0x534c <nrk_time_sub+0xe2>

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
    5318:	01 97       	sbiw	r24, 0x01	; 1
    531a:	a1 09       	sbc	r26, r1
    531c:	b1 09       	sbc	r27, r1
    531e:	8e 19       	sub	r24, r14
    5320:	9f 09       	sbc	r25, r15
    5322:	a0 0b       	sbc	r26, r16
    5324:	b1 0b       	sbc	r27, r17
    5326:	80 83       	st	Z, r24
    5328:	91 83       	std	Z+1, r25	; 0x01
    532a:	a2 83       	std	Z+2, r26	; 0x02
    532c:	b3 83       	std	Z+3, r27	; 0x03
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
    532e:	20 50       	subi	r18, 0x00	; 0
    5330:	36 43       	sbci	r19, 0x36	; 54
    5332:	45 46       	sbci	r20, 0x65	; 101
    5334:	54 4c       	sbci	r21, 0xC4	; 196
    5336:	2a 19       	sub	r18, r10
    5338:	3b 09       	sbc	r19, r11
    533a:	4c 09       	sbc	r20, r12
    533c:	5d 09       	sbc	r21, r13
    533e:	24 83       	std	Z+4, r18	; 0x04
    5340:	35 83       	std	Z+5, r19	; 0x05
    5342:	46 83       	std	Z+6, r20	; 0x06
    5344:	57 83       	std	Z+7, r21	; 0x07
    5346:	81 e0       	ldi	r24, 0x01	; 1
    5348:	90 e0       	ldi	r25, 0x00	; 0
    534a:	0b c0       	rjmp	.+22     	; 0x5362 <nrk_time_sub+0xf8>
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    do { \
    534c:	8e 19       	sub	r24, r14
    534e:	9f 09       	sbc	r25, r15
    5350:	a0 0b       	sbc	r26, r16
    5352:	b1 0b       	sbc	r27, r17
    5354:	80 83       	st	Z, r24
    5356:	91 83       	std	Z+1, r25	; 0x01
    5358:	a2 83       	std	Z+2, r26	; 0x02
    535a:	b3 83       	std	Z+3, r27	; 0x03
    535c:	ec cf       	rjmp	.-40     	; 0x5336 <nrk_time_sub+0xcc>
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
    535e:	80 e0       	ldi	r24, 0x00	; 0
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	60 96       	adiw	r28, 0x10	; 16
    5364:	0f b6       	in	r0, 0x3f	; 63
    5366:	f8 94       	cli
    5368:	de bf       	out	0x3e, r29	; 62
    536a:	0f be       	out	0x3f, r0	; 63
    536c:	cd bf       	out	0x3d, r28	; 61
    536e:	df 91       	pop	r29
    5370:	cf 91       	pop	r28
    5372:	1f 91       	pop	r17
    5374:	0f 91       	pop	r16
    5376:	ff 90       	pop	r15
    5378:	ef 90       	pop	r14
    537a:	df 90       	pop	r13
    537c:	cf 90       	pop	r12
    537e:	bf 90       	pop	r11
    5380:	af 90       	pop	r10
    5382:	9f 90       	pop	r9
    5384:	8f 90       	pop	r8
    5386:	08 95       	ret

00005388 <nrk_time_compact_nanos>:
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

     switch(action)
     {
    5388:	fc 01       	movw	r30, r24
    538a:	13 c0       	rjmp	.+38     	; 0x53b2 <nrk_time_compact_nanos+0x2a>
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
    538c:	80 50       	subi	r24, 0x00	; 0
    538e:	9a 4c       	sbci	r25, 0xCA	; 202
    5390:	aa 49       	sbci	r26, 0x9A	; 154
    5392:	bb 43       	sbci	r27, 0x3B	; 59
    5394:	84 83       	std	Z+4, r24	; 0x04
    5396:	95 83       	std	Z+5, r25	; 0x05
    5398:	a6 83       	std	Z+6, r26	; 0x06
    539a:	b7 83       	std	Z+7, r27	; 0x07
			PORTF |= PWR_CTRL_MASK;
    539c:	80 81       	ld	r24, Z
    539e:	91 81       	ldd	r25, Z+1	; 0x01
    53a0:	a2 81       	ldd	r26, Z+2	; 0x02
    53a2:	b3 81       	ldd	r27, Z+3	; 0x03
    53a4:	01 96       	adiw	r24, 0x01	; 1
    53a6:	a1 1d       	adc	r26, r1
    53a8:	b1 1d       	adc	r27, r1
    53aa:	80 83       	st	Z, r24
    53ac:	91 83       	std	Z+1, r25	; 0x01
    53ae:	a2 83       	std	Z+2, r26	; 0x02
    53b0:	b3 83       	std	Z+3, r27	; 0x03
uint8_t key=opt;
uint8_t value=size;

     switch(action)
     {
            case INIT: 
    53b2:	84 81       	ldd	r24, Z+4	; 0x04
    53b4:	95 81       	ldd	r25, Z+5	; 0x05
    53b6:	a6 81       	ldd	r26, Z+6	; 0x06
    53b8:	b7 81       	ldd	r27, Z+7	; 0x07
    53ba:	80 30       	cpi	r24, 0x00	; 0
    53bc:	2a ec       	ldi	r18, 0xCA	; 202
    53be:	92 07       	cpc	r25, r18
    53c0:	2a e9       	ldi	r18, 0x9A	; 154
    53c2:	a2 07       	cpc	r26, r18
    53c4:	2b e3       	ldi	r18, 0x3B	; 59
    53c6:	b2 07       	cpc	r27, r18
    53c8:	08 f7       	brcc	.-62     	; 0x538c <nrk_time_compact_nanos+0x4>
    53ca:	08 95       	ret

000053cc <nrk_time_add>:
#define ADC_GET_SAMPLE_10(x) \
do { \
x =  ADCL; \
x |= ADCH << 8; \
} while (0)

    53cc:	8f 92       	push	r8
    53ce:	9f 92       	push	r9
    53d0:	af 92       	push	r10
    53d2:	bf 92       	push	r11
    53d4:	cf 92       	push	r12
    53d6:	df 92       	push	r13
    53d8:	ef 92       	push	r14
    53da:	ff 92       	push	r15
    53dc:	0f 93       	push	r16
    53de:	1f 93       	push	r17
    53e0:	cf 93       	push	r28
    53e2:	df 93       	push	r29
    53e4:	cd b7       	in	r28, 0x3d	; 61
    53e6:	de b7       	in	r29, 0x3e	; 62
    53e8:	60 97       	sbiw	r28, 0x10	; 16
    53ea:	0f b6       	in	r0, 0x3f	; 63
    53ec:	f8 94       	cli
    53ee:	de bf       	out	0x3e, r29	; 62
    53f0:	0f be       	out	0x3f, r0	; 63
    53f2:	cd bf       	out	0x3d, r28	; 61
    53f4:	fc 01       	movw	r30, r24
    53f6:	09 83       	std	Y+1, r16	; 0x01
    53f8:	1a 83       	std	Y+2, r17	; 0x02
    53fa:	2b 83       	std	Y+3, r18	; 0x03
    53fc:	3c 83       	std	Y+4, r19	; 0x04
    53fe:	4d 83       	std	Y+5, r20	; 0x05
    5400:	5e 83       	std	Y+6, r21	; 0x06
    5402:	6f 83       	std	Y+7, r22	; 0x07
    5404:	78 87       	std	Y+8, r23	; 0x08
    5406:	89 86       	std	Y+9, r8	; 0x09
    5408:	9a 86       	std	Y+10, r9	; 0x0a
    540a:	ab 86       	std	Y+11, r10	; 0x0b
    540c:	bc 86       	std	Y+12, r11	; 0x0c
    540e:	cd 86       	std	Y+13, r12	; 0x0d
    5410:	de 86       	std	Y+14, r13	; 0x0e
    5412:	ef 86       	std	Y+15, r14	; 0x0f
    5414:	f8 8a       	std	Y+16, r15	; 0x10
    5416:	ad 80       	ldd	r10, Y+5	; 0x05
    5418:	be 80       	ldd	r11, Y+6	; 0x06
    541a:	cf 80       	ldd	r12, Y+7	; 0x07
    541c:	d8 84       	ldd	r13, Y+8	; 0x08
    541e:	ed 84       	ldd	r14, Y+13	; 0x0d
    5420:	fe 84       	ldd	r15, Y+14	; 0x0e
    5422:	0f 85       	ldd	r16, Y+15	; 0x0f
    5424:	18 89       	ldd	r17, Y+16	; 0x10
#define ADC_GET_SAMPLE_8(x) \
    5426:	89 85       	ldd	r24, Y+9	; 0x09
    5428:	9a 85       	ldd	r25, Y+10	; 0x0a
    542a:	ab 85       	ldd	r26, Y+11	; 0x0b
    542c:	bc 85       	ldd	r27, Y+12	; 0x0c
    542e:	29 81       	ldd	r18, Y+1	; 0x01
    5430:	3a 81       	ldd	r19, Y+2	; 0x02
    5432:	4b 81       	ldd	r20, Y+3	; 0x03
    5434:	5c 81       	ldd	r21, Y+4	; 0x04
    5436:	82 0f       	add	r24, r18
    5438:	93 1f       	adc	r25, r19
    543a:	a4 1f       	adc	r26, r20
    543c:	b5 1f       	adc	r27, r21
    543e:	80 83       	st	Z, r24
    5440:	91 83       	std	Z+1, r25	; 0x01
    5442:	a2 83       	std	Z+2, r26	; 0x02
    5444:	b3 83       	std	Z+3, r27	; 0x03
do { \
    5446:	ea 0c       	add	r14, r10
    5448:	fb 1c       	adc	r15, r11
    544a:	0c 1d       	adc	r16, r12
    544c:	1d 1d       	adc	r17, r13
    544e:	e4 82       	std	Z+4, r14	; 0x04
    5450:	f5 82       	std	Z+5, r15	; 0x05
    5452:	06 83       	std	Z+6, r16	; 0x06
    5454:	17 83       	std	Z+7, r17	; 0x07
x = ((uint8_t) ADCL) >> 2; \
    5456:	cf 01       	movw	r24, r30
    5458:	0e 94 c4 29 	call	0x5388	; 0x5388 <nrk_time_compact_nanos>
x |= ((int8_t) ADCH) << 6; \
} while (0)
    545c:	81 e0       	ldi	r24, 0x01	; 1
    545e:	90 e0       	ldi	r25, 0x00	; 0
    5460:	60 96       	adiw	r28, 0x10	; 16
    5462:	0f b6       	in	r0, 0x3f	; 63
    5464:	f8 94       	cli
    5466:	de bf       	out	0x3e, r29	; 62
    5468:	0f be       	out	0x3f, r0	; 63
    546a:	cd bf       	out	0x3d, r28	; 61
    546c:	df 91       	pop	r29
    546e:	cf 91       	pop	r28
    5470:	1f 91       	pop	r17
    5472:	0f 91       	pop	r16
    5474:	ff 90       	pop	r15
    5476:	ef 90       	pop	r14
    5478:	df 90       	pop	r13
    547a:	cf 90       	pop	r12
    547c:	bf 90       	pop	r11
    547e:	af 90       	pop	r10
    5480:	9f 90       	pop	r9
    5482:	8f 90       	pop	r8
    5484:	08 95       	ret

00005486 <nrk_time_set>:
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
		    if(opt&READ_FLAG)
    5486:	60 93 8c 07 	sts	0x078C, r22
    548a:	70 93 8d 07 	sts	0x078D, r23
    548e:	80 93 8e 07 	sts	0x078E, r24
    5492:	90 93 8f 07 	sts	0x078F, r25
		    {
    5496:	20 93 90 07 	sts	0x0790, r18
    549a:	30 93 91 07 	sts	0x0791, r19
    549e:	40 93 92 07 	sts	0x0792, r20
    54a2:	50 93 93 07 	sts	0x0793, r21
    54a6:	08 95       	ret

000054a8 <_nrk_time_to_ticks>:
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
    54a8:	8f 92       	push	r8
    54aa:	9f 92       	push	r9
    54ac:	af 92       	push	r10
    54ae:	bf 92       	push	r11
    54b0:	cf 92       	push	r12
    54b2:	df 92       	push	r13
    54b4:	ef 92       	push	r14
    54b6:	ff 92       	push	r15
    54b8:	0f 93       	push	r16
    54ba:	1f 93       	push	r17
    54bc:	cf 93       	push	r28
    54be:	df 93       	push	r29
    54c0:	cd b7       	in	r28, 0x3d	; 61
    54c2:	de b7       	in	r29, 0x3e	; 62
    54c4:	28 97       	sbiw	r28, 0x08	; 8
    54c6:	0f b6       	in	r0, 0x3f	; 63
    54c8:	f8 94       	cli
    54ca:	de bf       	out	0x3e, r29	; 62
    54cc:	0f be       	out	0x3f, r0	; 63
    54ce:	cd bf       	out	0x3d, r28	; 61
    54d0:	29 83       	std	Y+1, r18	; 0x01
    54d2:	3a 83       	std	Y+2, r19	; 0x02
    54d4:	4b 83       	std	Y+3, r20	; 0x03
    54d6:	5c 83       	std	Y+4, r21	; 0x04
    54d8:	6d 83       	std	Y+5, r22	; 0x05
    54da:	7e 83       	std	Y+6, r23	; 0x06
    54dc:	8f 83       	std	Y+7, r24	; 0x07
    54de:	98 87       	std	Y+8, r25	; 0x08
    54e0:	8d 80       	ldd	r8, Y+5	; 0x05
    54e2:	9e 80       	ldd	r9, Y+6	; 0x06
    54e4:	af 80       	ldd	r10, Y+7	; 0x07
    54e6:	b8 84       	ldd	r11, Y+8	; 0x08
    54e8:	e9 80       	ldd	r14, Y+1	; 0x01
    54ea:	fa 80       	ldd	r15, Y+2	; 0x02
    54ec:	0b 81       	ldd	r16, Y+3	; 0x03
    54ee:	1c 81       	ldd	r17, Y+4	; 0x04
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
		    {
    54f0:	e1 14       	cp	r14, r1
    54f2:	f1 04       	cpc	r15, r1
    54f4:	01 05       	cpc	r16, r1
    54f6:	11 05       	cpc	r17, r1
    54f8:	01 f1       	breq	.+64     	; 0x553a <_nrk_time_to_ticks+0x92>
		    	return NRK_ERROR;
		    }
    54fa:	80 e0       	ldi	r24, 0x00	; 0
    54fc:	9a ec       	ldi	r25, 0xCA	; 202
    54fe:	aa e9       	ldi	r26, 0x9A	; 154
    5500:	bb e3       	ldi	r27, 0x3B	; 59
    5502:	88 0e       	add	r8, r24
    5504:	99 1e       	adc	r9, r25
    5506:	aa 1e       	adc	r10, r26
    5508:	bb 1e       	adc	r11, r27
		    if(opt&APPEND_FLAG)
		    {
    550a:	c5 01       	movw	r24, r10
    550c:	b4 01       	movw	r22, r8
    550e:	23 eb       	ldi	r18, 0xB3	; 179
    5510:	36 ee       	ldi	r19, 0xE6	; 230
    5512:	4e e0       	ldi	r20, 0x0E	; 14
    5514:	50 e0       	ldi	r21, 0x00	; 0
    5516:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <__udivmodsi4>
    551a:	69 01       	movw	r12, r18
		    	return NRK_ERROR;
    551c:	08 94       	sec
    551e:	e1 08       	sbc	r14, r1
    5520:	f1 08       	sbc	r15, r1
    5522:	01 09       	sbc	r16, r1
    5524:	11 09       	sbc	r17, r1
    5526:	8a e0       	ldi	r24, 0x0A	; 10
    5528:	ee 0c       	add	r14, r14
    552a:	ff 1c       	adc	r15, r15
    552c:	00 1f       	adc	r16, r16
    552e:	11 1f       	adc	r17, r17
    5530:	8a 95       	dec	r24
    5532:	d1 f7       	brne	.-12     	; 0x5528 <_nrk_time_to_ticks+0x80>
    5534:	ce 0c       	add	r12, r14
    5536:	df 1c       	adc	r13, r15
    5538:	09 c0       	rjmp	.+18     	; 0x554c <_nrk_time_to_ticks+0xa4>
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
    553a:	c5 01       	movw	r24, r10
    553c:	b4 01       	movw	r22, r8
    553e:	23 eb       	ldi	r18, 0xB3	; 179
    5540:	36 ee       	ldi	r19, 0xE6	; 230
    5542:	4e e0       	ldi	r20, 0x0E	; 14
    5544:	50 e0       	ldi	r21, 0x00	; 0
    5546:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <__udivmodsi4>
    554a:	69 01       	movw	r12, r18
    554c:	b6 01       	movw	r22, r12
    554e:	02 c0       	rjmp	.+4      	; 0x5554 <_nrk_time_to_ticks+0xac>
		    else return NRK_OK;
		
	    

    5550:	60 50       	subi	r22, 0x00	; 0
    5552:	74 40       	sbci	r23, 0x04	; 4
    5554:	94 e0       	ldi	r25, 0x04	; 4
    5556:	61 30       	cpi	r22, 0x01	; 1
    5558:	79 07       	cpc	r23, r25
    555a:	d0 f7       	brcc	.-12     	; 0x5550 <_nrk_time_to_ticks+0xa8>
             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
    555c:	88 27       	eor	r24, r24
    555e:	99 27       	eor	r25, r25
    5560:	23 eb       	ldi	r18, 0xB3	; 179
    5562:	36 ee       	ldi	r19, 0xE6	; 230
    5564:	4e e0       	ldi	r20, 0x0E	; 14
    5566:	50 e0       	ldi	r21, 0x00	; 0
    5568:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <__mulsi3>
    556c:	67 5a       	subi	r22, 0xA7	; 167
    556e:	7c 48       	sbci	r23, 0x8C	; 140
    5570:	88 4f       	sbci	r24, 0xF8	; 248
    5572:	9f 4f       	sbci	r25, 0xFF	; 255
    5574:	68 15       	cp	r22, r8
    5576:	79 05       	cpc	r23, r9
    5578:	8a 05       	cpc	r24, r10
    557a:	9b 05       	cpc	r25, r11
    557c:	18 f4       	brcc	.+6      	; 0x5584 <_nrk_time_to_ticks+0xdc>
    557e:	08 94       	sec
    5580:	c1 1c       	adc	r12, r1
    5582:	d1 1c       	adc	r13, r1
			if(channel!=BAT && channel<7)
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();

    5584:	c6 01       	movw	r24, r12
    5586:	28 96       	adiw	r28, 0x08	; 8
    5588:	0f b6       	in	r0, 0x3f	; 63
    558a:	f8 94       	cli
    558c:	de bf       	out	0x3e, r29	; 62
    558e:	0f be       	out	0x3f, r0	; 63
    5590:	cd bf       	out	0x3d, r28	; 61
    5592:	df 91       	pop	r29
    5594:	cf 91       	pop	r28
    5596:	1f 91       	pop	r17
    5598:	0f 91       	pop	r16
    559a:	ff 90       	pop	r15
    559c:	ef 90       	pop	r14
    559e:	df 90       	pop	r13
    55a0:	cf 90       	pop	r12
    55a2:	bf 90       	pop	r11
    55a4:	af 90       	pop	r10
    55a6:	9f 90       	pop	r9
    55a8:	8f 90       	pop	r8
    55aa:	08 95       	ret

000055ac <_nrk_ticks_to_time>:
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
    55ac:	2f 92       	push	r2
    55ae:	3f 92       	push	r3
    55b0:	4f 92       	push	r4
    55b2:	5f 92       	push	r5
    55b4:	6f 92       	push	r6
    55b6:	7f 92       	push	r7
    55b8:	8f 92       	push	r8
    55ba:	9f 92       	push	r9
    55bc:	af 92       	push	r10
    55be:	bf 92       	push	r11
    55c0:	cf 92       	push	r12
    55c2:	df 92       	push	r13
    55c4:	ef 92       	push	r14
    55c6:	ff 92       	push	r15
    55c8:	0f 93       	push	r16
    55ca:	1f 93       	push	r17
    55cc:	cf 93       	push	r28
    55ce:	df 93       	push	r29
    55d0:	cd b7       	in	r28, 0x3d	; 61
    55d2:	de b7       	in	r29, 0x3e	; 62
    55d4:	28 97       	sbiw	r28, 0x08	; 8
    55d6:	0f b6       	in	r0, 0x3f	; 63
    55d8:	f8 94       	cli
    55da:	de bf       	out	0x3e, r29	; 62
    55dc:	0f be       	out	0x3f, r0	; 63
    55de:	cd bf       	out	0x3d, r28	; 61
    55e0:	7b 01       	movw	r14, r22
    55e2:	8c 01       	movw	r16, r24
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}

				if(size==1)
			      	{
    55e4:	73 70       	andi	r23, 0x03	; 3
    55e6:	80 70       	andi	r24, 0x00	; 0
    55e8:	90 70       	andi	r25, 0x00	; 0
    55ea:	23 eb       	ldi	r18, 0xB3	; 179
    55ec:	36 ee       	ldi	r19, 0xE6	; 230
    55ee:	4e e0       	ldi	r20, 0x0E	; 14
    55f0:	50 e0       	ldi	r21, 0x00	; 0
    55f2:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <__mulsi3>
    55f6:	6d 83       	std	Y+5, r22	; 0x05
    55f8:	7e 83       	std	Y+6, r23	; 0x06
    55fa:	8f 83       	std	Y+7, r24	; 0x07
    55fc:	98 87       	std	Y+8, r25	; 0x08
    55fe:	9a e0       	ldi	r25, 0x0A	; 10
    5600:	16 95       	lsr	r17
    5602:	07 95       	ror	r16
    5604:	f7 94       	ror	r15
    5606:	e7 94       	ror	r14
    5608:	9a 95       	dec	r25
    560a:	d1 f7       	brne	.-12     	; 0x5600 <_nrk_ticks_to_time+0x54>
    560c:	e9 82       	std	Y+1, r14	; 0x01
    560e:	fa 82       	std	Y+2, r15	; 0x02
    5610:	0b 83       	std	Y+3, r16	; 0x03
    5612:	1c 83       	std	Y+4, r17	; 0x04
    5614:	98 85       	ldd	r25, Y+8	; 0x08
    5616:	29 80       	ldd	r2, Y+1	; 0x01
    5618:	3a 80       	ldd	r3, Y+2	; 0x02
    561a:	4b 80       	ldd	r4, Y+3	; 0x03
    561c:	5c 80       	ldd	r5, Y+4	; 0x04
    561e:	6d 80       	ldd	r6, Y+5	; 0x05
    5620:	7e 80       	ldd	r7, Y+6	; 0x06
    5622:	8f 80       	ldd	r8, Y+7	; 0x07
			      		buffer[count]=(val>>2)  & 0xFF;
    5624:	22 2d       	mov	r18, r2
    5626:	33 2d       	mov	r19, r3
    5628:	44 2d       	mov	r20, r4
    562a:	55 2d       	mov	r21, r5
    562c:	66 2d       	mov	r22, r6
    562e:	77 2d       	mov	r23, r7
    5630:	88 2d       	mov	r24, r8
    5632:	28 96       	adiw	r28, 0x08	; 8
    5634:	0f b6       	in	r0, 0x3f	; 63
    5636:	f8 94       	cli
    5638:	de bf       	out	0x3e, r29	; 62
    563a:	0f be       	out	0x3f, r0	; 63
    563c:	cd bf       	out	0x3d, r28	; 61
    563e:	df 91       	pop	r29
    5640:	cf 91       	pop	r28
    5642:	1f 91       	pop	r17
    5644:	0f 91       	pop	r16
    5646:	ff 90       	pop	r15
    5648:	ef 90       	pop	r14
    564a:	df 90       	pop	r13
    564c:	cf 90       	pop	r12
    564e:	bf 90       	pop	r11
    5650:	af 90       	pop	r10
    5652:	9f 90       	pop	r9
    5654:	8f 90       	pop	r8
    5656:	7f 90       	pop	r7
    5658:	6f 90       	pop	r6
    565a:	5f 90       	pop	r5
    565c:	4f 90       	pop	r4
    565e:	3f 90       	pop	r3
    5660:	2f 90       	pop	r2
    5662:	08 95       	ret

00005664 <_nrk_time_to_ticks_long>:
				}


    5664:	af 92       	push	r10
    5666:	bf 92       	push	r11
    5668:	cf 92       	push	r12
    566a:	df 92       	push	r13
    566c:	ef 92       	push	r14
    566e:	ff 92       	push	r15
    5670:	0f 93       	push	r16
    5672:	1f 93       	push	r17
    5674:	cf 93       	push	r28
    5676:	df 93       	push	r29
    5678:	cd b7       	in	r28, 0x3d	; 61
    567a:	de b7       	in	r29, 0x3e	; 62
    567c:	28 97       	sbiw	r28, 0x08	; 8
    567e:	0f b6       	in	r0, 0x3f	; 63
    5680:	f8 94       	cli
    5682:	de bf       	out	0x3e, r29	; 62
    5684:	0f be       	out	0x3f, r0	; 63
    5686:	cd bf       	out	0x3d, r28	; 61
    5688:	29 83       	std	Y+1, r18	; 0x01
    568a:	3a 83       	std	Y+2, r19	; 0x02
    568c:	4b 83       	std	Y+3, r20	; 0x03
    568e:	5c 83       	std	Y+4, r21	; 0x04
    5690:	6d 83       	std	Y+5, r22	; 0x05
    5692:	7e 83       	std	Y+6, r23	; 0x06
    5694:	8f 83       	std	Y+7, r24	; 0x07
    5696:	98 87       	std	Y+8, r25	; 0x08
    5698:	ad 80       	ldd	r10, Y+5	; 0x05
    569a:	be 80       	ldd	r11, Y+6	; 0x06
    569c:	cf 80       	ldd	r12, Y+7	; 0x07
    569e:	d8 84       	ldd	r13, Y+8	; 0x08
    56a0:	e9 80       	ldd	r14, Y+1	; 0x01
    56a2:	fa 80       	ldd	r15, Y+2	; 0x02
    56a4:	0b 81       	ldd	r16, Y+3	; 0x03
    56a6:	1c 81       	ldd	r17, Y+4	; 0x04
			} else if(channel==BAT)
			{
			uint16_t tmp;
			tmp=read_voltage_status();
    56a8:	e1 14       	cp	r14, r1
    56aa:	f1 04       	cpc	r15, r1
    56ac:	01 05       	cpc	r16, r1
    56ae:	11 05       	cpc	r17, r1
    56b0:	09 f1       	breq	.+66     	; 0x56f4 <_nrk_time_to_ticks_long+0x90>
			if(size==2)
				{
    56b2:	80 e0       	ldi	r24, 0x00	; 0
    56b4:	9a ec       	ldi	r25, 0xCA	; 202
    56b6:	aa e9       	ldi	r26, 0x9A	; 154
    56b8:	bb e3       	ldi	r27, 0x3B	; 59
    56ba:	a8 0e       	add	r10, r24
    56bc:	b9 1e       	adc	r11, r25
    56be:	ca 1e       	adc	r12, r26
    56c0:	db 1e       	adc	r13, r27
					buffer[count]=tmp & 0xFF;
					count++;
    56c2:	c6 01       	movw	r24, r12
    56c4:	b5 01       	movw	r22, r10
    56c6:	23 eb       	ldi	r18, 0xB3	; 179
    56c8:	36 ee       	ldi	r19, 0xE6	; 230
    56ca:	4e e0       	ldi	r20, 0x0E	; 14
    56cc:	50 e0       	ldi	r21, 0x00	; 0
    56ce:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <__udivmodsi4>
					buffer[count]=(tmp>>8) & 0xFF;
    56d2:	08 94       	sec
    56d4:	e1 08       	sbc	r14, r1
    56d6:	f1 08       	sbc	r15, r1
    56d8:	01 09       	sbc	r16, r1
    56da:	11 09       	sbc	r17, r1
    56dc:	6a e0       	ldi	r22, 0x0A	; 10
    56de:	ee 0c       	add	r14, r14
    56e0:	ff 1c       	adc	r15, r15
    56e2:	00 1f       	adc	r16, r16
    56e4:	11 1f       	adc	r17, r17
    56e6:	6a 95       	dec	r22
    56e8:	d1 f7       	brne	.-12     	; 0x56de <_nrk_time_to_ticks_long+0x7a>
    56ea:	e2 0e       	add	r14, r18
    56ec:	f3 1e       	adc	r15, r19
    56ee:	04 1f       	adc	r16, r20
    56f0:	15 1f       	adc	r17, r21
    56f2:	0a c0       	rjmp	.+20     	; 0x5708 <_nrk_time_to_ticks_long+0xa4>
				}
			if(size==1)
				{
    56f4:	c6 01       	movw	r24, r12
    56f6:	b5 01       	movw	r22, r10
    56f8:	23 eb       	ldi	r18, 0xB3	; 179
    56fa:	36 ee       	ldi	r19, 0xE6	; 230
    56fc:	4e e0       	ldi	r20, 0x0E	; 14
    56fe:	50 e0       	ldi	r21, 0x00	; 0
    5700:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <__udivmodsi4>
    5704:	79 01       	movw	r14, r18
    5706:	8a 01       	movw	r16, r20
    5708:	c8 01       	movw	r24, r16
    570a:	b7 01       	movw	r22, r14
    570c:	04 c0       	rjmp	.+8      	; 0x5716 <_nrk_time_to_ticks_long+0xb2>
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
			{
    570e:	60 50       	subi	r22, 0x00	; 0
    5710:	74 40       	sbci	r23, 0x04	; 4
    5712:	80 40       	sbci	r24, 0x00	; 0
    5714:	90 40       	sbci	r25, 0x00	; 0
    5716:	61 30       	cpi	r22, 0x01	; 1
    5718:	a4 e0       	ldi	r26, 0x04	; 4
    571a:	7a 07       	cpc	r23, r26
    571c:	a0 e0       	ldi	r26, 0x00	; 0
    571e:	8a 07       	cpc	r24, r26
    5720:	a0 e0       	ldi	r26, 0x00	; 0
    5722:	9a 07       	cpc	r25, r26
    5724:	a0 f7       	brcc	.-24     	; 0x570e <_nrk_time_to_ticks_long+0xaa>
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
    5726:	23 eb       	ldi	r18, 0xB3	; 179
    5728:	36 ee       	ldi	r19, 0xE6	; 230
    572a:	4e e0       	ldi	r20, 0x0E	; 14
    572c:	50 e0       	ldi	r21, 0x00	; 0
    572e:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <__mulsi3>
    5732:	67 5a       	subi	r22, 0xA7	; 167
    5734:	7c 48       	sbci	r23, 0x8C	; 140
    5736:	88 4f       	sbci	r24, 0xF8	; 248
    5738:	9f 4f       	sbci	r25, 0xFF	; 255
    573a:	6a 15       	cp	r22, r10
    573c:	7b 05       	cpc	r23, r11
    573e:	8c 05       	cpc	r24, r12
    5740:	9d 05       	cpc	r25, r13
    5742:	28 f4       	brcc	.+10     	; 0x574e <_nrk_time_to_ticks_long+0xea>
    5744:	08 94       	sec
    5746:	e1 1c       	adc	r14, r1
    5748:	f1 1c       	adc	r15, r1
    574a:	01 1d       	adc	r16, r1
    574c:	11 1d       	adc	r17, r1
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
    574e:	c8 01       	movw	r24, r16
    5750:	b7 01       	movw	r22, r14
    5752:	28 96       	adiw	r28, 0x08	; 8
    5754:	0f b6       	in	r0, 0x3f	; 63
    5756:	f8 94       	cli
    5758:	de bf       	out	0x3e, r29	; 62
    575a:	0f be       	out	0x3f, r0	; 63
    575c:	cd bf       	out	0x3d, r28	; 61
    575e:	df 91       	pop	r29
    5760:	cf 91       	pop	r28
    5762:	1f 91       	pop	r17
    5764:	0f 91       	pop	r16
    5766:	ff 90       	pop	r15
    5768:	ef 90       	pop	r14
    576a:	df 90       	pop	r13
    576c:	cf 90       	pop	r12
    576e:	bf 90       	pop	r11
    5770:	af 90       	pop	r10
    5772:	08 95       	ret

00005774 <nrk_time_get>:

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;
    5774:	ef 92       	push	r14
    5776:	ff 92       	push	r15
    5778:	0f 93       	push	r16
    577a:	1f 93       	push	r17
    577c:	cf 93       	push	r28
    577e:	df 93       	push	r29
    5780:	ec 01       	movw	r28, r24

    5782:	80 91 8c 07 	lds	r24, 0x078C
    5786:	90 91 8d 07 	lds	r25, 0x078D
    578a:	a0 91 8e 07 	lds	r26, 0x078E
    578e:	b0 91 8f 07 	lds	r27, 0x078F
    5792:	88 83       	st	Y, r24
    5794:	99 83       	std	Y+1, r25	; 0x01
    5796:	aa 83       	std	Y+2, r26	; 0x02
    5798:	bb 83       	std	Y+3, r27	; 0x03
// VREF is set to VCC by default
    579a:	e0 90 90 07 	lds	r14, 0x0790
    579e:	f0 90 91 07 	lds	r15, 0x0791
    57a2:	00 91 92 07 	lds	r16, 0x0792
    57a6:	10 91 93 07 	lds	r17, 0x0793
    57aa:	ec 82       	std	Y+4, r14	; 0x04
    57ac:	fd 82       	std	Y+5, r15	; 0x05
    57ae:	0e 83       	std	Y+6, r16	; 0x06
    57b0:	1f 83       	std	Y+7, r17	; 0x07
#define ADC_INIT() \
    do { \
    57b2:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    57b6:	99 27       	eor	r25, r25
    57b8:	aa 27       	eor	r26, r26
    57ba:	bb 27       	eor	r27, r27
    57bc:	bc 01       	movw	r22, r24
    57be:	cd 01       	movw	r24, r26
    57c0:	23 eb       	ldi	r18, 0xB3	; 179
    57c2:	36 ee       	ldi	r19, 0xE6	; 230
    57c4:	4e e0       	ldi	r20, 0x0E	; 14
    57c6:	50 e0       	ldi	r21, 0x00	; 0
    57c8:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <__mulsi3>
    57cc:	e6 0e       	add	r14, r22
    57ce:	f7 1e       	adc	r15, r23
    57d0:	08 1f       	adc	r16, r24
    57d2:	19 1f       	adc	r17, r25
    57d4:	ec 82       	std	Y+4, r14	; 0x04
    57d6:	fd 82       	std	Y+5, r15	; 0x05
    57d8:	0e 83       	std	Y+6, r16	; 0x06
    57da:	1f 83       	std	Y+7, r17	; 0x07
    57dc:	13 c0       	rjmp	.+38     	; 0x5804 <nrk_time_get+0x90>
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)
    57de:	80 50       	subi	r24, 0x00	; 0
    57e0:	9a 4c       	sbci	r25, 0xCA	; 202
    57e2:	aa 49       	sbci	r26, 0x9A	; 154
    57e4:	bb 43       	sbci	r27, 0x3B	; 59
    57e6:	8c 83       	std	Y+4, r24	; 0x04
    57e8:	9d 83       	std	Y+5, r25	; 0x05
    57ea:	ae 83       	std	Y+6, r26	; 0x06
    57ec:	bf 83       	std	Y+7, r27	; 0x07

    57ee:	88 81       	ld	r24, Y
    57f0:	99 81       	ldd	r25, Y+1	; 0x01
    57f2:	aa 81       	ldd	r26, Y+2	; 0x02
    57f4:	bb 81       	ldd	r27, Y+3	; 0x03
    57f6:	01 96       	adiw	r24, 0x01	; 1
    57f8:	a1 1d       	adc	r26, r1
    57fa:	b1 1d       	adc	r27, r1
    57fc:	88 83       	st	Y, r24
    57fe:	99 83       	std	Y+1, r25	; 0x01
    5800:	aa 83       	std	Y+2, r26	; 0x02
    5802:	bb 83       	std	Y+3, r27	; 0x03
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
    5804:	8c 81       	ldd	r24, Y+4	; 0x04
    5806:	9d 81       	ldd	r25, Y+5	; 0x05
    5808:	ae 81       	ldd	r26, Y+6	; 0x06
    580a:	bf 81       	ldd	r27, Y+7	; 0x07
    580c:	80 30       	cpi	r24, 0x00	; 0
    580e:	2a ec       	ldi	r18, 0xCA	; 202
    5810:	92 07       	cpc	r25, r18
    5812:	2a e9       	ldi	r18, 0x9A	; 154
    5814:	a2 07       	cpc	r26, r18
    5816:	2b e3       	ldi	r18, 0x3B	; 59
    5818:	b2 07       	cpc	r27, r18
    581a:	08 f7       	brcc	.-62     	; 0x57de <nrk_time_get+0x6a>
    581c:	df 91       	pop	r29
    581e:	cf 91       	pop	r28
    5820:	1f 91       	pop	r17
    5822:	0f 91       	pop	r16
    5824:	ff 90       	pop	r15
    5826:	ef 90       	pop	r14
    5828:	08 95       	ret

0000582a <nrk_idle_task>:

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;
    582a:	0e 94 b5 22 	call	0x456a	; 0x456a <nrk_stack_check>

// VREF is set to VCC by default
    582e:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <_nrk_get_next_wakeup>
    5832:	8b 30       	cpi	r24, 0x0B	; 11
    5834:	18 f4       	brcc	.+6      	; 0x583c <nrk_idle_task+0x12>
#define ADC_INIT() \
    do { \
    5836:	81 e0       	ldi	r24, 0x01	; 1
    5838:	80 93 89 07 	sts	0x0789, r24
#define ADC_VREF_VCC() \
   do { \
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)

    583c:	0e 94 c7 32 	call	0x658e	; 0x658e <nrk_idle>

#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
    5840:	80 91 11 06 	lds	r24, 0x0611
    5844:	85 35       	cpi	r24, 0x55	; 85
    5846:	19 f0       	breq	.+6      	; 0x584e <nrk_idle_task+0x24>
    5848:	88 e0       	ldi	r24, 0x08	; 8
    584a:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <nrk_error_add>
} while(0)


#define ADC_VREF_2_56() \
   do { \
    584e:	80 91 7e 21 	lds	r24, 0x217E
    5852:	85 35       	cpi	r24, 0x55	; 85
    5854:	51 f3       	breq	.-44     	; 0x582a <nrk_idle_task>
    5856:	88 e0       	ldi	r24, 0x08	; 8
    5858:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <nrk_error_add>
    585c:	e6 cf       	rjmp	.-52     	; 0x582a <nrk_idle_task>

0000585e <_nrk_scheduler>:
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
    585e:	8f 92       	push	r8
    5860:	9f 92       	push	r9
    5862:	af 92       	push	r10
    5864:	bf 92       	push	r11
    5866:	cf 92       	push	r12
    5868:	df 92       	push	r13
    586a:	ef 92       	push	r14
    586c:	ff 92       	push	r15
    586e:	0f 93       	push	r16
    5870:	1f 93       	push	r17
    5872:	cf 93       	push	r28
    5874:	df 93       	push	r29
	ADMUX = BM(REFS0);  \
} while (0)

#define ADC_VREF_VCC() \
   do { \
    5876:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)

    587a:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <_nrk_high_speed_timer_reset>

    587e:	0e 94 56 2f 	call	0x5eac	; 0x5eac <_nrk_high_speed_timer_get>
    5882:	4c 01       	movw	r8, r24
#define ADC_VREF_1_1() \
   do { \
    5884:	8a ef       	ldi	r24, 0xFA	; 250
    5886:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <_nrk_set_next_wakeup>

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)
    588a:	60 91 e3 06 	lds	r22, 0x06E3
    588e:	77 27       	eor	r23, r23
    5890:	88 27       	eor	r24, r24
    5892:	99 27       	eor	r25, r25
    5894:	23 eb       	ldi	r18, 0xB3	; 179
    5896:	36 ee       	ldi	r19, 0xE6	; 230
    5898:	4e e0       	ldi	r20, 0x0E	; 14
    589a:	50 e0       	ldi	r21, 0x00	; 0
    589c:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <__mulsi3>
    58a0:	7b 01       	movw	r14, r22
    58a2:	8c 01       	movw	r16, r24
    58a4:	80 91 90 07 	lds	r24, 0x0790
    58a8:	90 91 91 07 	lds	r25, 0x0791
    58ac:	a0 91 92 07 	lds	r26, 0x0792
    58b0:	b0 91 93 07 	lds	r27, 0x0793
    58b4:	e8 0e       	add	r14, r24
    58b6:	f9 1e       	adc	r15, r25
    58b8:	0a 1f       	adc	r16, r26
    58ba:	1b 1f       	adc	r17, r27

    58bc:	c8 01       	movw	r24, r16
    58be:	b7 01       	movw	r22, r14
    58c0:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <__udivmodsi4>
    58c4:	a8 01       	movw	r20, r16
    58c6:	97 01       	movw	r18, r14
    58c8:	26 1b       	sub	r18, r22
    58ca:	37 0b       	sbc	r19, r23
    58cc:	48 0b       	sbc	r20, r24
    58ce:	59 0b       	sbc	r21, r25
    58d0:	80 91 8c 07 	lds	r24, 0x078C
    58d4:	90 91 8d 07 	lds	r25, 0x078D
    58d8:	a0 91 8e 07 	lds	r26, 0x078E
    58dc:	b0 91 8f 07 	lds	r27, 0x078F
    58e0:	1b c0       	rjmp	.+54     	; 0x5918 <_nrk_scheduler+0xba>
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
    58e2:	e1 2c       	mov	r14, r1
    58e4:	66 e3       	ldi	r22, 0x36	; 54
    58e6:	f6 2e       	mov	r15, r22
    58e8:	65 e6       	ldi	r22, 0x65	; 101
    58ea:	06 2f       	mov	r16, r22
    58ec:	64 ec       	ldi	r22, 0xC4	; 196
    58ee:	16 2f       	mov	r17, r22
    58f0:	e2 0e       	add	r14, r18
    58f2:	f3 1e       	adc	r15, r19
    58f4:	04 1f       	adc	r16, r20
    58f6:	15 1f       	adc	r17, r21
{
uint8_t count=0;
    58f8:	c8 01       	movw	r24, r16
    58fa:	b7 01       	movw	r22, r14
    58fc:	23 eb       	ldi	r18, 0xB3	; 179
    58fe:	36 ee       	ldi	r19, 0xE6	; 230
    5900:	4e e0       	ldi	r20, 0x0E	; 14
    5902:	50 e0       	ldi	r21, 0x00	; 0
    5904:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <__udivmodsi4>
    5908:	a8 01       	movw	r20, r16
    590a:	97 01       	movw	r18, r14
    590c:	26 1b       	sub	r18, r22
    590e:	37 0b       	sbc	r19, r23
    5910:	48 0b       	sbc	r20, r24
    5912:	59 0b       	sbc	r21, r25
    5914:	d6 01       	movw	r26, r12
    5916:	c5 01       	movw	r24, r10
    5918:	5c 01       	movw	r10, r24
    591a:	6d 01       	movw	r12, r26
    591c:	08 94       	sec
    591e:	a1 1c       	adc	r10, r1
    5920:	b1 1c       	adc	r11, r1
    5922:	c1 1c       	adc	r12, r1
    5924:	d1 1c       	adc	r13, r1
#define ADC_GET_SAMPLE_8(x) \
do { \
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
} while (0)

    5926:	20 30       	cpi	r18, 0x00	; 0
    5928:	6a ec       	ldi	r22, 0xCA	; 202
    592a:	36 07       	cpc	r19, r22
    592c:	6a e9       	ldi	r22, 0x9A	; 154
    592e:	46 07       	cpc	r20, r22
    5930:	6b e3       	ldi	r22, 0x3B	; 59
    5932:	56 07       	cpc	r21, r22
    5934:	b0 f6       	brcc	.-84     	; 0x58e2 <_nrk_scheduler+0x84>
    5936:	80 93 8c 07 	sts	0x078C, r24
    593a:	90 93 8d 07 	sts	0x078D, r25
    593e:	a0 93 8e 07 	sts	0x078E, r26
    5942:	b0 93 8f 07 	sts	0x078F, r27
    5946:	20 93 90 07 	sts	0x0790, r18
    594a:	30 93 91 07 	sts	0x0791, r19
    594e:	40 93 92 07 	sts	0x0792, r20
    5952:	50 93 93 07 	sts	0x0793, r21
{
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

    5956:	e0 91 95 07 	lds	r30, 0x0795
    595a:	f0 91 96 07 	lds	r31, 0x0796
    595e:	85 81       	ldd	r24, Z+5	; 0x05
    5960:	88 23       	and	r24, r24
    5962:	19 f1       	breq	.+70     	; 0x59aa <_nrk_scheduler+0x14c>
    5964:	81 85       	ldd	r24, Z+9	; 0x09
    5966:	84 30       	cpi	r24, 0x04	; 4
    5968:	01 f1       	breq	.+64     	; 0x59aa <_nrk_scheduler+0x14c>
     switch(action)
     {
            case INIT: 
			// Set the pwr ctrl pin as output
    596a:	87 81       	ldd	r24, Z+7	; 0x07
    596c:	82 30       	cpi	r24, 0x02	; 2
    596e:	29 f0       	breq	.+10     	; 0x597a <_nrk_scheduler+0x11c>
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
    5970:	88 23       	and	r24, r24
    5972:	41 f0       	breq	.+16     	; 0x5984 <_nrk_scheduler+0x126>
    5974:	86 81       	ldd	r24, Z+6	; 0x06
    5976:	88 23       	and	r24, r24
    5978:	11 f4       	brne	.+4      	; 0x597e <_nrk_scheduler+0x120>
	     		init_adc();  
    597a:	85 e0       	ldi	r24, 0x05	; 5
    597c:	01 c0       	rjmp	.+2      	; 0x5980 <_nrk_scheduler+0x122>
			is_open=0;
		      return 1;
    597e:	83 e0       	ldi	r24, 0x03	; 3
    5980:	81 87       	std	Z+9, r24	; 0x09
    5982:	0c c0       	rjmp	.+24     	; 0x599c <_nrk_scheduler+0x13e>
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    5984:	83 e0       	ldi	r24, 0x03	; 3
    5986:	81 87       	std	Z+9, r24	; 0x09
		    is_open=1; 
    5988:	e0 91 95 07 	lds	r30, 0x0795
    598c:	f0 91 96 07 	lds	r31, 0x0796
    5990:	17 82       	std	Z+7, r1	; 0x07
		    if(opt&READ_FLAG)
    5992:	e0 91 95 07 	lds	r30, 0x0795
    5996:	f0 91 96 07 	lds	r31, 0x0796
    599a:	16 82       	std	Z+6, r1	; 0x06
		    {
		   	// Turn on Sensor Node Power
    599c:	e0 91 95 07 	lds	r30, 0x0795
    59a0:	f0 91 96 07 	lds	r31, 0x0796
    59a4:	80 85       	ldd	r24, Z+8	; 0x08
    59a6:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <nrk_rem_from_readyQ>
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
		    {
    59aa:	e0 91 95 07 	lds	r30, 0x0795
    59ae:	f0 91 96 07 	lds	r31, 0x0796
    59b2:	85 8d       	ldd	r24, Z+29	; 0x1d
    59b4:	96 8d       	ldd	r25, Z+30	; 0x1e
    59b6:	89 2b       	or	r24, r25
    59b8:	91 f1       	breq	.+100    	; 0x5a1e <_nrk_scheduler+0x1c0>
    59ba:	60 85       	ldd	r22, Z+8	; 0x08
    59bc:	66 23       	and	r22, r22
    59be:	79 f1       	breq	.+94     	; 0x5a1e <_nrk_scheduler+0x1c0>
    59c0:	81 85       	ldd	r24, Z+9	; 0x09
    59c2:	84 30       	cpi	r24, 0x04	; 4
    59c4:	61 f1       	breq	.+88     	; 0x5a1e <_nrk_scheduler+0x1c0>
		    	return NRK_ERROR;
		    }
    59c6:	21 8d       	ldd	r18, Z+25	; 0x19
    59c8:	32 8d       	ldd	r19, Z+26	; 0x1a
    59ca:	80 91 e3 06 	lds	r24, 0x06E3
    59ce:	99 27       	eor	r25, r25
    59d0:	28 17       	cp	r18, r24
    59d2:	39 07       	cpc	r19, r25
    59d4:	50 f4       	brcc	.+20     	; 0x59ea <_nrk_scheduler+0x18c>
		    if(opt&APPEND_FLAG)
		    {
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
    59d6:	82 e0       	ldi	r24, 0x02	; 2
    59d8:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <nrk_kernel_error_add>
		    	return NRK_ERROR;
    59dc:	e0 91 95 07 	lds	r30, 0x0795
    59e0:	f0 91 96 07 	lds	r31, 0x0796
    59e4:	12 8e       	std	Z+26, r1	; 0x1a
    59e6:	11 8e       	std	Z+25, r1	; 0x19
    59e8:	04 c0       	rjmp	.+8      	; 0x59f2 <_nrk_scheduler+0x194>
		    else return NRK_OK;
		
    59ea:	28 1b       	sub	r18, r24
    59ec:	39 0b       	sbc	r19, r25
    59ee:	32 8f       	std	Z+26, r19	; 0x1a
    59f0:	21 8f       	std	Z+25, r18	; 0x19
	    

    59f2:	e0 91 95 07 	lds	r30, 0x0795
    59f6:	f0 91 96 07 	lds	r31, 0x0796
    59fa:	10 85       	ldd	r17, Z+8	; 0x08
             case READ:
	     	      count=0;
    59fc:	81 8d       	ldd	r24, Z+25	; 0x19
    59fe:	92 8d       	ldd	r25, Z+26	; 0x1a
    5a00:	89 2b       	or	r24, r25
    5a02:	69 f4       	brne	.+26     	; 0x5a1e <_nrk_scheduler+0x1c0>
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
			{
			      /* Conversion to 8-bit value*/
    5a04:	61 2f       	mov	r22, r17
    5a06:	83 e0       	ldi	r24, 0x03	; 3
    5a08:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <nrk_kernel_error_add>
			      uint16_t val=get_adc_val();
    5a0c:	e0 91 95 07 	lds	r30, 0x0795
    5a10:	f0 91 96 07 	lds	r31, 0x0796
    5a14:	83 e0       	ldi	r24, 0x03	; 3
    5a16:	81 87       	std	Z+9, r24	; 0x09

    5a18:	81 2f       	mov	r24, r17
    5a1a:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <nrk_rem_from_readyQ>
    5a1e:	c9 e1       	ldi	r28, 0x19	; 25
    5a20:	d7 e0       	ldi	r29, 0x07	; 7
    5a22:	00 e6       	ldi	r16, 0x60	; 96
    5a24:	1a ee       	ldi	r17, 0xEA	; 234
    5a26:	cc 24       	eor	r12, r12
    5a28:	dd 24       	eor	r13, r13
    5a2a:	4c 2d       	mov	r20, r12
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}

				if(size==1)
			      	{
    5a2c:	88 85       	ldd	r24, Y+8	; 0x08
    5a2e:	8f 3f       	cpi	r24, 0xFF	; 255
    5a30:	09 f4       	brne	.+2      	; 0x5a34 <_nrk_scheduler+0x1d6>
    5a32:	89 c0       	rjmp	.+274    	; 0x5b46 <_nrk_scheduler+0x2e8>
			      		buffer[count]=(val>>2)  & 0xFF;
    5a34:	1d 82       	std	Y+5, r1	; 0x05
				}
    5a36:	88 23       	and	r24, r24
    5a38:	91 f1       	breq	.+100    	; 0x5a9e <_nrk_scheduler+0x240>
    5a3a:	89 85       	ldd	r24, Y+9	; 0x09
    5a3c:	84 30       	cpi	r24, 0x04	; 4
    5a3e:	79 f1       	breq	.+94     	; 0x5a9e <_nrk_scheduler+0x240>


    5a40:	2d 89       	ldd	r18, Y+21	; 0x15
    5a42:	3e 89       	ldd	r19, Y+22	; 0x16
    5a44:	80 91 e3 06 	lds	r24, 0x06E3
    5a48:	99 27       	eor	r25, r25
    5a4a:	28 17       	cp	r18, r24
    5a4c:	39 07       	cpc	r19, r25
    5a4e:	28 f0       	brcs	.+10     	; 0x5a5a <_nrk_scheduler+0x1fc>
			} else if(channel==BAT)
    5a50:	28 1b       	sub	r18, r24
    5a52:	39 0b       	sbc	r19, r25
    5a54:	3e 8b       	std	Y+22, r19	; 0x16
    5a56:	2d 8b       	std	Y+21, r18	; 0x15
    5a58:	02 c0       	rjmp	.+4      	; 0x5a5e <_nrk_scheduler+0x200>
			{
			uint16_t tmp;
    5a5a:	1e 8a       	std	Y+22, r1	; 0x16
    5a5c:	1d 8a       	std	Y+21, r1	; 0x15
			tmp=read_voltage_status();
			if(size==2)
				{
					buffer[count]=tmp & 0xFF;
					count++;
    5a5e:	2f 89       	ldd	r18, Y+23	; 0x17
    5a60:	38 8d       	ldd	r19, Y+24	; 0x18
    5a62:	28 17       	cp	r18, r24
    5a64:	39 07       	cpc	r19, r25
    5a66:	28 f0       	brcs	.+10     	; 0x5a72 <_nrk_scheduler+0x214>
					buffer[count]=(tmp>>8) & 0xFF;
    5a68:	28 1b       	sub	r18, r24
    5a6a:	39 0b       	sbc	r19, r25
    5a6c:	38 8f       	std	Y+24, r19	; 0x18
    5a6e:	2f 8b       	std	Y+23, r18	; 0x17
    5a70:	0e c0       	rjmp	.+28     	; 0x5a8e <_nrk_scheduler+0x230>
				}
			if(size==1)
    5a72:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5a74:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5a76:	86 17       	cp	r24, r22
    5a78:	97 07       	cpc	r25, r23
    5a7a:	28 f4       	brcc	.+10     	; 0x5a86 <_nrk_scheduler+0x228>
				{
    5a7c:	68 1b       	sub	r22, r24
    5a7e:	79 0b       	sbc	r23, r25
    5a80:	78 8f       	std	Y+24, r23	; 0x18
    5a82:	6f 8b       	std	Y+23, r22	; 0x17
    5a84:	04 c0       	rjmp	.+8      	; 0x5a8e <_nrk_scheduler+0x230>
					buffer[count]=(tmp>>2) & 0xFF;
				}
    5a86:	0e 94 ef 36 	call	0x6dde	; 0x6dde <__udivmodhi4>
    5a8a:	98 8f       	std	Y+24, r25	; 0x18
    5a8c:	8f 8b       	std	Y+23, r24	; 0x17
			}else if(channel==AUDIO_P2P)
			{
    5a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    5a90:	98 8d       	ldd	r25, Y+24	; 0x18
    5a92:	89 2b       	or	r24, r25
    5a94:	21 f4       	brne	.+8      	; 0x5a9e <_nrk_scheduler+0x240>
    5a96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a9a:	98 8f       	std	Y+24, r25	; 0x18
    5a9c:	8f 8b       	std	Y+23, r24	; 0x17
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
    5a9e:	89 85       	ldd	r24, Y+9	; 0x09
    5aa0:	83 30       	cpi	r24, 0x03	; 3
    5aa2:	09 f0       	breq	.+2      	; 0x5aa6 <_nrk_scheduler+0x248>
    5aa4:	50 c0       	rjmp	.+160    	; 0x5b46 <_nrk_scheduler+0x2e8>
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
    5aa6:	8d 89       	ldd	r24, Y+21	; 0x15
    5aa8:	9e 89       	ldd	r25, Y+22	; 0x16
    5aaa:	89 2b       	or	r24, r25
    5aac:	09 f0       	breq	.+2      	; 0x5ab0 <_nrk_scheduler+0x252>
    5aae:	43 c0       	rjmp	.+134    	; 0x5b36 <_nrk_scheduler+0x2d8>
				if(val<min)min=val;
				if(val>max)max=val;
    5ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    5ab2:	88 23       	and	r24, r24
    5ab4:	a1 f0       	breq	.+40     	; 0x5ade <_nrk_scheduler+0x280>
    5ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    5ab8:	88 23       	and	r24, r24
    5aba:	89 f0       	breq	.+34     	; 0x5ade <_nrk_scheduler+0x280>
    5abc:	81 e0       	ldi	r24, 0x01	; 1
    5abe:	90 e0       	ldi	r25, 0x00	; 0
    5ac0:	a0 e0       	ldi	r26, 0x00	; 0
    5ac2:	b0 e0       	ldi	r27, 0x00	; 0
    5ac4:	00 90 85 07 	lds	r0, 0x0785
    5ac8:	04 c0       	rjmp	.+8      	; 0x5ad2 <_nrk_scheduler+0x274>
    5aca:	88 0f       	add	r24, r24
    5acc:	99 1f       	adc	r25, r25
    5ace:	aa 1f       	adc	r26, r26
    5ad0:	bb 1f       	adc	r27, r27
    5ad2:	0a 94       	dec	r0
    5ad4:	d2 f7       	brpl	.-12     	; 0x5aca <_nrk_scheduler+0x26c>
    5ad6:	89 8b       	std	Y+17, r24	; 0x11
    5ad8:	9a 8b       	std	Y+18, r25	; 0x12
    5ada:	ab 8b       	std	Y+19, r26	; 0x13
    5adc:	bc 8b       	std	Y+20, r27	; 0x14
				// 8 Khz
				nrk_spin_wait_us(125);	
    5ade:	1f 82       	std	Y+7, r1	; 0x07
				}
    5ae0:	1e 82       	std	Y+6, r1	; 0x06
			 	val=max-min;	
    5ae2:	1d 82       	std	Y+5, r1	; 0x05
				if(size==2)
    5ae4:	2f 8d       	ldd	r18, Y+31	; 0x1f
    5ae6:	38 a1       	ldd	r19, Y+32	; 0x20
    5ae8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5aea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5aec:	21 30       	cpi	r18, 0x01	; 1
    5aee:	31 05       	cpc	r19, r1
    5af0:	61 f4       	brne	.+24     	; 0x5b0a <_nrk_scheduler+0x2ac>
			      	{
					buffer[count]=val  & 0xFF;
    5af2:	9a 8f       	std	Y+26, r25	; 0x1a
    5af4:	89 8f       	std	Y+25, r24	; 0x19
			      		count++;
    5af6:	82 e0       	ldi	r24, 0x02	; 2
    5af8:	89 87       	std	Y+9, r24	; 0x09
			      		buffer[count]=(val>>8)  & 0xFF;
    5afa:	8f 89       	ldd	r24, Y+23	; 0x17
    5afc:	98 8d       	ldd	r25, Y+24	; 0x18
    5afe:	9e 8b       	std	Y+22, r25	; 0x16
    5b00:	8d 8b       	std	Y+21, r24	; 0x15
				}
    5b02:	84 2f       	mov	r24, r20
    5b04:	0e 94 08 26 	call	0x4c10	; 0x4c10 <nrk_add_to_readyQ>
    5b08:	16 c0       	rjmp	.+44     	; 0x5b36 <_nrk_scheduler+0x2d8>

				if(size==1)
			      	{
    5b0a:	9a 8f       	std	Y+26, r25	; 0x1a
    5b0c:	89 8f       	std	Y+25, r24	; 0x19
			      		buffer[count]=(val>>2)  & 0xFF;
				}

    5b0e:	21 50       	subi	r18, 0x01	; 1
    5b10:	30 40       	sbci	r19, 0x00	; 0
    5b12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b16:	ac 01       	movw	r20, r24
    5b18:	24 9f       	mul	r18, r20
    5b1a:	c0 01       	movw	r24, r0
    5b1c:	25 9f       	mul	r18, r21
    5b1e:	90 0d       	add	r25, r0
    5b20:	34 9f       	mul	r19, r20
    5b22:	90 0d       	add	r25, r0
    5b24:	11 24       	eor	r1, r1
    5b26:	9e 8b       	std	Y+22, r25	; 0x16
    5b28:	8d 8b       	std	Y+21, r24	; 0x15
			}
    5b2a:	98 8f       	std	Y+24, r25	; 0x18
    5b2c:	8f 8b       	std	Y+23, r24	; 0x17
			
    5b2e:	81 e0       	ldi	r24, 0x01	; 1
    5b30:	90 e0       	ldi	r25, 0x00	; 0
    5b32:	98 a3       	std	Y+32, r25	; 0x20
    5b34:	8f 8f       	std	Y+31, r24	; 0x1f
		      count++;
                      return count;

             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
    5b36:	8d 89       	ldd	r24, Y+21	; 0x15
    5b38:	9e 89       	ldd	r25, Y+22	; 0x16
    5b3a:	00 97       	sbiw	r24, 0x00	; 0
    5b3c:	21 f0       	breq	.+8      	; 0x5b46 <_nrk_scheduler+0x2e8>
    5b3e:	80 17       	cp	r24, r16
    5b40:	91 07       	cpc	r25, r17
    5b42:	08 f4       	brcc	.+2      	; 0x5b46 <_nrk_scheduler+0x2e8>
    5b44:	8c 01       	movw	r16, r24
    5b46:	08 94       	sec
    5b48:	c1 1c       	adc	r12, r1
    5b4a:	d1 1c       	adc	r13, r1
    5b4c:	a1 96       	adiw	r28, 0x21	; 33
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}

				if(size==1)
    5b4e:	53 e0       	ldi	r21, 0x03	; 3
    5b50:	c5 16       	cp	r12, r21
    5b52:	d1 04       	cpc	r13, r1
    5b54:	09 f0       	breq	.+2      	; 0x5b58 <_nrk_scheduler+0x2fa>
    5b56:	69 cf       	rjmp	.-302    	; 0x5a2a <_nrk_scheduler+0x1cc>
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
			{
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
    5b58:	0e 94 f6 25 	call	0x4bec	; 0x4bec <nrk_get_high_ready_task_ID>
    5b5c:	e8 2e       	mov	r14, r24
			  {
    5b5e:	99 27       	eor	r25, r25
    5b60:	87 fd       	sbrc	r24, 7
    5b62:	90 95       	com	r25
    5b64:	fc 01       	movw	r30, r24
    5b66:	25 e0       	ldi	r18, 0x05	; 5
    5b68:	ee 0f       	add	r30, r30
    5b6a:	ff 1f       	adc	r31, r31
    5b6c:	2a 95       	dec	r18
    5b6e:	e1 f7       	brne	.-8      	; 0x5b68 <_nrk_scheduler+0x30a>
    5b70:	e8 0f       	add	r30, r24
    5b72:	f9 1f       	adc	r31, r25
    5b74:	e7 5e       	subi	r30, 0xE7	; 231
    5b76:	f8 4f       	sbci	r31, 0xF8	; 248
    5b78:	42 85       	ldd	r20, Z+10	; 0x0a
    5b7a:	40 93 97 07 	sts	0x0797, r20
				channel=value;
    5b7e:	81 e2       	ldi	r24, 0x21	; 33
    5b80:	6e 2d       	mov	r22, r14
    5b82:	68 02       	muls	r22, r24
    5b84:	90 01       	movw	r18, r0
    5b86:	11 24       	eor	r1, r1
    5b88:	27 5e       	subi	r18, 0xE7	; 231
    5b8a:	38 4f       	sbci	r19, 0xF8	; 248
    5b8c:	30 93 87 07 	sts	0x0787, r19
    5b90:	20 93 86 07 	sts	0x0786, r18
				ADC_SET_CHANNEL (AUDIO);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;

			  } else
			  {
    5b94:	ee 20       	and	r14, r14
    5b96:	91 f0       	breq	.+36     	; 0x5bbc <_nrk_scheduler+0x35e>
				if(value>7) 
				{
					_nrk_errno_set(1);
    5b98:	85 8d       	ldd	r24, Z+29	; 0x1d
    5b9a:	96 8d       	ldd	r25, Z+30	; 0x1e
    5b9c:	89 2b       	or	r24, r25
    5b9e:	51 f0       	breq	.+20     	; 0x5bb4 <_nrk_scheduler+0x356>
    5ba0:	81 8d       	ldd	r24, Z+25	; 0x19
    5ba2:	92 8d       	ldd	r25, Z+26	; 0x1a
    5ba4:	8a 3f       	cpi	r24, 0xFA	; 250
    5ba6:	91 05       	cpc	r25, r1
    5ba8:	28 f4       	brcc	.+10     	; 0x5bb4 <_nrk_scheduler+0x356>
    5baa:	80 17       	cp	r24, r16
    5bac:	91 07       	cpc	r25, r17
    5bae:	e0 f4       	brcc	.+56     	; 0x5be8 <_nrk_scheduler+0x38a>
    5bb0:	8c 01       	movw	r16, r24
    5bb2:	1a c0       	rjmp	.+52     	; 0x5be8 <_nrk_scheduler+0x38a>
    5bb4:	0b 3f       	cpi	r16, 0xFB	; 251
    5bb6:	11 05       	cpc	r17, r1
    5bb8:	b8 f0       	brcs	.+46     	; 0x5be8 <_nrk_scheduler+0x38a>
    5bba:	14 c0       	rjmp	.+40     	; 0x5be4 <_nrk_scheduler+0x386>
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
	}
    5bbc:	0b 30       	cpi	r16, 0x0B	; 11
    5bbe:	11 05       	cpc	r17, r1
    5bc0:	98 f0       	brcs	.+38     	; 0x5be8 <_nrk_scheduler+0x38a>
}

    5bc2:	c8 01       	movw	r24, r16
    5bc4:	0a 97       	sbiw	r24, 0x0a	; 10
    5bc6:	8a 3f       	cpi	r24, 0xFA	; 250
    5bc8:	91 05       	cpc	r25, r1
    5bca:	30 f4       	brcc	.+12     	; 0x5bd8 <_nrk_scheduler+0x37a>
    5bcc:	8c 01       	movw	r16, r24
    5bce:	09 97       	sbiw	r24, 0x09	; 9
    5bd0:	58 f4       	brcc	.+22     	; 0x5be8 <_nrk_scheduler+0x38a>
    5bd2:	09 e0       	ldi	r16, 0x09	; 9
    5bd4:	10 e0       	ldi	r17, 0x00	; 0
    5bd6:	08 c0       	rjmp	.+16     	; 0x5be8 <_nrk_scheduler+0x38a>
//
// This function sets different voltage threshold levels on
// the cc2420 chip to search for the voltage.
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
    5bd8:	05 50       	subi	r16, 0x05	; 5
    5bda:	11 40       	sbci	r17, 0x01	; 1
    5bdc:	18 f4       	brcc	.+6      	; 0x5be4 <_nrk_scheduler+0x386>
    5bde:	00 ef       	ldi	r16, 0xF0	; 240
    5be0:	10 e0       	ldi	r17, 0x00	; 0
    5be2:	02 c0       	rjmp	.+4      	; 0x5be8 <_nrk_scheduler+0x38a>
    5be4:	0a ef       	ldi	r16, 0xFA	; 250
    5be6:	10 e0       	ldi	r17, 0x00	; 0
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
if(val&0x0040) break; 
level++;
    5be8:	40 93 88 07 	sts	0x0788, r20
}
    5bec:	30 93 96 07 	sts	0x0796, r19
    5bf0:	20 93 95 07 	sts	0x0795, r18
if(level==0)
  {
  val=get_adc_val();
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
  if(val<330) val=330;
    5bf4:	00 93 e3 06 	sts	0x06E3, r16
  }
else val=(9000-(level*125)) / 27;

    5bf8:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    5bfc:	99 27       	eor	r25, r25
    5bfe:	80 17       	cp	r24, r16
    5c00:	91 07       	cpc	r25, r17
    5c02:	40 f0       	brcs	.+16     	; 0x5c14 <_nrk_scheduler+0x3b6>
// Initialize values here
  ADC_INIT ();
  ADC_ENABLE ();
  channel=0;
  ADC_SET_CHANNEL (0);
}
    5c04:	0e 94 06 30 	call	0x600c	; 0x600c <_nrk_os_timer_get>
    5c08:	08 2f       	mov	r16, r24
    5c0a:	11 27       	eor	r17, r17
    5c0c:	0e 5f       	subi	r16, 0xFE	; 254
    5c0e:	1f 4f       	sbci	r17, 0xFF	; 255

    5c10:	00 93 e3 06 	sts	0x06E3, r16
uint16_t get_adc_val()
{                         
	uint16_t adc_val;
    5c14:	ee 20       	and	r14, r14
    5c16:	11 f0       	breq	.+4      	; 0x5c1c <_nrk_scheduler+0x3be>
    5c18:	10 92 89 07 	sts	0x0789, r1
	ADC_SAMPLE_SINGLE();
	delay();
    5c1c:	80 2f       	mov	r24, r16
    5c1e:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <_nrk_set_next_wakeup>
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
    5c22:	6e ee       	ldi	r22, 0xEE	; 238
    5c24:	72 e0       	ldi	r23, 0x02	; 2
    5c26:	c4 01       	movw	r24, r8
    5c28:	0e 94 8b 30 	call	0x6116	; 0x6116 <nrk_high_speed_timer_wait>
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
    5c2c:	0e 94 25 33 	call	0x664a	; 0x664a <nrk_stack_pointer_restore>
}
    5c30:	0e 94 52 33 	call	0x66a4	; 0x66a4 <nrk_start_high_ready_task>
    5c34:	df 91       	pop	r29
    5c36:	cf 91       	pop	r28
    5c38:	1f 91       	pop	r17
    5c3a:	0f 91       	pop	r16
    5c3c:	ff 90       	pop	r15
    5c3e:	ef 90       	pop	r14
    5c40:	df 90       	pop	r13
    5c42:	cf 90       	pop	r12
    5c44:	bf 90       	pop	r11
    5c46:	af 90       	pop	r10
    5c48:	9f 90       	pop	r9
    5c4a:	8f 90       	pop	r8
    5c4c:	08 95       	ret

00005c4e <nrk_register_driver>:
	ADMUX |= BM(REFS0);  \
} while(0)


#define ADC_VREF_1_1() \
   do { \
    5c4e:	20 91 ac 07 	lds	r18, 0x07AC
    5c52:	12 16       	cp	r1, r18
    5c54:	1c f4       	brge	.+6      	; 0x5c5c <nrk_register_driver+0xe>
    5c56:	8f ef       	ldi	r24, 0xFF	; 255
    5c58:	9f ef       	ldi	r25, 0xFF	; 255
    5c5a:	08 95       	ret
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
    5c5c:	e2 2f       	mov	r30, r18
    5c5e:	ff 27       	eor	r31, r31
    5c60:	e7 fd       	sbrc	r30, 7
    5c62:	f0 95       	com	r31
    5c64:	ee 0f       	add	r30, r30
    5c66:	ff 1f       	adc	r31, r31
    5c68:	ee 0f       	add	r30, r30
    5c6a:	ff 1f       	adc	r31, r31
    5c6c:	df 01       	movw	r26, r30
    5c6e:	a3 55       	subi	r26, 0x53	; 83
    5c70:	b8 4f       	sbci	r27, 0xF8	; 248
    5c72:	6c 93       	st	X, r22
} while(0)
    5c74:	e1 55       	subi	r30, 0x51	; 81
    5c76:	f8 4f       	sbci	r31, 0xF8	; 248
    5c78:	91 83       	std	Z+1, r25	; 0x01
    5c7a:	80 83       	st	Z, r24

    5c7c:	2f 5f       	subi	r18, 0xFF	; 255
    5c7e:	20 93 ac 07 	sts	0x07AC, r18
    5c82:	81 e0       	ldi	r24, 0x01	; 1
    5c84:	90 e0       	ldi	r25, 0x00	; 0

#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)
    5c86:	08 95       	ret

00005c88 <nrk_open>:

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
    5c88:	0f 93       	push	r16
    5c8a:	1f 93       	push	r17
    5c8c:	cf 93       	push	r28
    5c8e:	df 93       	push	r29
    5c90:	06 2f       	mov	r16, r22
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    5c92:	90 91 ac 07 	lds	r25, 0x07AC
    5c96:	a9 2f       	mov	r26, r25
    5c98:	bb 27       	eor	r27, r27
    5c9a:	a7 fd       	sbrc	r26, 7
    5c9c:	b0 95       	com	r27
    5c9e:	40 e0       	ldi	r20, 0x00	; 0
    5ca0:	50 e0       	ldi	r21, 0x00	; 0
    do { \
ADCSRA |= BM(ADSC); \
    5ca2:	68 2f       	mov	r22, r24
    5ca4:	77 27       	eor	r23, r23
    5ca6:	34 c0       	rjmp	.+104    	; 0x5d10 <nrk_open+0x88>

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    5ca8:	4f 5f       	subi	r20, 0xFF	; 255
    5caa:	5f 4f       	sbci	r21, 0xFF	; 255
    do { \
ADCSRA |= BM(ADSC); \
    5cac:	e9 01       	movw	r28, r18
    5cae:	cc 0f       	add	r28, r28
    5cb0:	dd 1f       	adc	r29, r29
    5cb2:	cc 0f       	add	r28, r28
    5cb4:	dd 1f       	adc	r29, r29
    5cb6:	fe 01       	movw	r30, r28
    5cb8:	e3 55       	subi	r30, 0x53	; 83
    5cba:	f8 4f       	sbci	r31, 0xF8	; 248
    5cbc:	80 81       	ld	r24, Z
    5cbe:	99 27       	eor	r25, r25
    5cc0:	87 fd       	sbrc	r24, 7
    5cc2:	90 95       	com	r25
    5cc4:	86 17       	cp	r24, r22
    5cc6:	97 07       	cpc	r25, r23
    5cc8:	19 f5       	brne	.+70     	; 0x5d10 <nrk_open+0x88>
while (!(ADCSRA & 0x10)); \
} while(0)
    5cca:	f9 01       	movw	r30, r18
    5ccc:	ef 54       	subi	r30, 0x4F	; 79
    5cce:	f8 4f       	sbci	r31, 0xF8	; 248
    5cd0:	80 81       	ld	r24, Z
    5cd2:	88 23       	and	r24, r24
    5cd4:	71 f4       	brne	.+28     	; 0x5cf2 <nrk_open+0x6a>

// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
    5cd6:	81 e0       	ldi	r24, 0x01	; 1
    5cd8:	80 83       	st	Z, r24
do { \
    5cda:	fe 01       	movw	r30, r28
    5cdc:	e1 55       	subi	r30, 0x51	; 81
    5cde:	f8 4f       	sbci	r31, 0xF8	; 248
    5ce0:	01 90       	ld	r0, Z+
    5ce2:	f0 81       	ld	r31, Z
    5ce4:	e0 2d       	mov	r30, r0
    5ce6:	20 e0       	ldi	r18, 0x00	; 0
    5ce8:	40 e0       	ldi	r20, 0x00	; 0
    5cea:	50 e0       	ldi	r21, 0x00	; 0
    5cec:	60 2f       	mov	r22, r16
    5cee:	80 e0       	ldi	r24, 0x00	; 0
    5cf0:	09 95       	icall
x =  ADCL; \
x |= ADCH << 8; \
    5cf2:	c1 55       	subi	r28, 0x51	; 81
    5cf4:	d8 4f       	sbci	r29, 0xF8	; 248
    5cf6:	e8 81       	ld	r30, Y
    5cf8:	f9 81       	ldd	r31, Y+1	; 0x01
    5cfa:	20 e0       	ldi	r18, 0x00	; 0
    5cfc:	40 e0       	ldi	r20, 0x00	; 0
    5cfe:	50 e0       	ldi	r21, 0x00	; 0
    5d00:	60 2f       	mov	r22, r16
    5d02:	81 e0       	ldi	r24, 0x01	; 1
    5d04:	09 95       	icall
} while (0)
    5d06:	81 2f       	mov	r24, r17
    5d08:	99 27       	eor	r25, r25
    5d0a:	87 fd       	sbrc	r24, 7
    5d0c:	90 95       	com	r25
    5d0e:	08 c0       	rjmp	.+16     	; 0x5d20 <nrk_open+0x98>
    5d10:	14 2f       	mov	r17, r20

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    5d12:	24 2f       	mov	r18, r20
    5d14:	33 27       	eor	r19, r19
    5d16:	2a 17       	cp	r18, r26
    5d18:	3b 07       	cpc	r19, r27
    5d1a:	34 f2       	brlt	.-116    	; 0x5ca8 <nrk_open+0x20>
    5d1c:	8f ef       	ldi	r24, 0xFF	; 255
    5d1e:	9f ef       	ldi	r25, 0xFF	; 255
    5d20:	df 91       	pop	r29
    5d22:	cf 91       	pop	r28
    5d24:	1f 91       	pop	r17
    5d26:	0f 91       	pop	r16
    5d28:	08 95       	ret

00005d2a <nrk_get_status>:
			      uint16_t val=get_adc_val();

				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
    5d2a:	e8 2f       	mov	r30, r24
    5d2c:	ff 27       	eor	r31, r31
    5d2e:	80 91 ac 07 	lds	r24, 0x07AC
    5d32:	99 27       	eor	r25, r25
    5d34:	87 fd       	sbrc	r24, 7
    5d36:	90 95       	com	r25
    5d38:	8e 17       	cp	r24, r30
    5d3a:	9f 07       	cpc	r25, r31
    5d3c:	34 f4       	brge	.+12     	; 0x5d4a <nrk_get_status+0x20>
			      		buffer[count]=(val>>8)  & 0xFF;
				}
    5d3e:	81 e0       	ldi	r24, 0x01	; 1
    5d40:	0e 94 0c 21 	call	0x4218	; 0x4218 <_nrk_errno_set>
    5d44:	8f ef       	ldi	r24, 0xFF	; 255
    5d46:	9f ef       	ldi	r25, 0xFF	; 255
    5d48:	08 95       	ret

				if(size==1)
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
    5d4a:	ee 0f       	add	r30, r30
    5d4c:	ff 1f       	adc	r31, r31
    5d4e:	ee 0f       	add	r30, r30
    5d50:	ff 1f       	adc	r31, r31
    5d52:	e1 55       	subi	r30, 0x51	; 81
    5d54:	f8 4f       	sbci	r31, 0xF8	; 248
    5d56:	01 90       	ld	r0, Z+
    5d58:	f0 81       	ld	r31, Z
    5d5a:	e0 2d       	mov	r30, r0
    5d5c:	20 e0       	ldi	r18, 0x00	; 0
    5d5e:	40 e0       	ldi	r20, 0x00	; 0
    5d60:	50 e0       	ldi	r21, 0x00	; 0
    5d62:	83 e0       	ldi	r24, 0x03	; 3
    5d64:	09 95       	icall
    5d66:	99 27       	eor	r25, r25
    5d68:	87 fd       	sbrc	r24, 7
    5d6a:	90 95       	com	r25
				}
    5d6c:	08 95       	ret

00005d6e <nrk_set_status>:
		    	return NRK_ERROR;
		    else return NRK_OK;
		
	    

             case READ:
    5d6e:	24 2f       	mov	r18, r20
	     	      count=0;
    5d70:	e8 2f       	mov	r30, r24
    5d72:	ff 27       	eor	r31, r31
    5d74:	80 91 ac 07 	lds	r24, 0x07AC
    5d78:	99 27       	eor	r25, r25
    5d7a:	87 fd       	sbrc	r24, 7
    5d7c:	90 95       	com	r25
    5d7e:	8e 17       	cp	r24, r30
    5d80:	9f 07       	cpc	r25, r31
    5d82:	34 f4       	brge	.+12     	; 0x5d90 <nrk_set_status+0x22>
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
    5d84:	81 e0       	ldi	r24, 0x01	; 1
    5d86:	0e 94 0c 21 	call	0x4218	; 0x4218 <_nrk_errno_set>
    5d8a:	8f ef       	ldi	r24, 0xFF	; 255
    5d8c:	9f ef       	ldi	r25, 0xFF	; 255
    5d8e:	08 95       	ret
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();
    5d90:	ee 0f       	add	r30, r30
    5d92:	ff 1f       	adc	r31, r31
    5d94:	ee 0f       	add	r30, r30
    5d96:	ff 1f       	adc	r31, r31
    5d98:	e1 55       	subi	r30, 0x51	; 81
    5d9a:	f8 4f       	sbci	r31, 0xF8	; 248
    5d9c:	01 90       	ld	r0, Z+
    5d9e:	f0 81       	ld	r31, Z
    5da0:	e0 2d       	mov	r30, r0
    5da2:	40 e0       	ldi	r20, 0x00	; 0
    5da4:	50 e0       	ldi	r21, 0x00	; 0
    5da6:	84 e0       	ldi	r24, 0x04	; 4
    5da8:	09 95       	icall
    5daa:	99 27       	eor	r25, r25
    5dac:	87 fd       	sbrc	r24, 7
    5dae:	90 95       	com	r25

    5db0:	08 95       	ret

00005db2 <nrk_read>:
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
    5db2:	24 2f       	mov	r18, r20
		    }
    5db4:	e8 2f       	mov	r30, r24
    5db6:	ff 27       	eor	r31, r31
    5db8:	80 91 ac 07 	lds	r24, 0x07AC
    5dbc:	99 27       	eor	r25, r25
    5dbe:	87 fd       	sbrc	r24, 7
    5dc0:	90 95       	com	r25
    5dc2:	8e 17       	cp	r24, r30
    5dc4:	9f 07       	cpc	r25, r31
    5dc6:	34 f4       	brge	.+12     	; 0x5dd4 <nrk_read+0x22>
		    if(opt&APPEND_FLAG)
		    {
    5dc8:	81 e0       	ldi	r24, 0x01	; 1
    5dca:	0e 94 0c 21 	call	0x4218	; 0x4218 <_nrk_errno_set>
    5dce:	8f ef       	ldi	r24, 0xFF	; 255
    5dd0:	9f ef       	ldi	r25, 0xFF	; 255
    5dd2:	08 95       	ret
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
    5dd4:	ee 0f       	add	r30, r30
    5dd6:	ff 1f       	adc	r31, r31
    5dd8:	ee 0f       	add	r30, r30
    5dda:	ff 1f       	adc	r31, r31
    5ddc:	e1 55       	subi	r30, 0x51	; 81
    5dde:	f8 4f       	sbci	r31, 0xF8	; 248
    5de0:	01 90       	ld	r0, Z+
    5de2:	f0 81       	ld	r31, Z
    5de4:	e0 2d       	mov	r30, r0
    5de6:	ab 01       	movw	r20, r22
    5de8:	60 e0       	ldi	r22, 0x00	; 0
    5dea:	85 e0       	ldi	r24, 0x05	; 5
    5dec:	09 95       	icall
    5dee:	99 27       	eor	r25, r25
    5df0:	87 fd       	sbrc	r24, 7
    5df2:	90 95       	com	r25
		    else return NRK_OK;
		
    5df4:	08 95       	ret

00005df6 <nrk_write>:
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
    5df6:	24 2f       	mov	r18, r20
		    if(opt&READ_FLAG)
    5df8:	e8 2f       	mov	r30, r24
    5dfa:	ff 27       	eor	r31, r31
    5dfc:	80 91 ac 07 	lds	r24, 0x07AC
    5e00:	99 27       	eor	r25, r25
    5e02:	87 fd       	sbrc	r24, 7
    5e04:	90 95       	com	r25
    5e06:	8e 17       	cp	r24, r30
    5e08:	9f 07       	cpc	r25, r31
    5e0a:	34 f4       	brge	.+12     	; 0x5e18 <nrk_write+0x22>
		    {
		   	// Turn on Sensor Node Power
    5e0c:	81 e0       	ldi	r24, 0x01	; 1
    5e0e:	0e 94 0c 21 	call	0x4218	; 0x4218 <_nrk_errno_set>
    5e12:	8f ef       	ldi	r24, 0xFF	; 255
    5e14:	9f ef       	ldi	r25, 0xFF	; 255
    5e16:	08 95       	ret
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    5e18:	ee 0f       	add	r30, r30
    5e1a:	ff 1f       	adc	r31, r31
    5e1c:	ee 0f       	add	r30, r30
    5e1e:	ff 1f       	adc	r31, r31
    5e20:	e1 55       	subi	r30, 0x51	; 81
    5e22:	f8 4f       	sbci	r31, 0xF8	; 248
    5e24:	01 90       	ld	r0, Z+
    5e26:	f0 81       	ld	r31, Z
    5e28:	e0 2d       	mov	r30, r0
    5e2a:	ab 01       	movw	r20, r22
    5e2c:	60 e0       	ldi	r22, 0x00	; 0
    5e2e:	86 e0       	ldi	r24, 0x06	; 6
    5e30:	09 95       	icall
    5e32:	99 27       	eor	r25, r25
    5e34:	87 fd       	sbrc	r24, 7
    5e36:	90 95       	com	r25
		    	return NRK_OK;
		    }
    5e38:	08 95       	ret

00005e3a <nrk_close>:
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
uint8_t count=0;
    5e3a:	e8 2f       	mov	r30, r24
    5e3c:	ff 27       	eor	r31, r31
    5e3e:	80 91 ac 07 	lds	r24, 0x07AC
    5e42:	99 27       	eor	r25, r25
    5e44:	87 fd       	sbrc	r24, 7
    5e46:	90 95       	com	r25
    5e48:	8e 17       	cp	r24, r30
    5e4a:	9f 07       	cpc	r25, r31
    5e4c:	34 f4       	brge	.+12     	; 0x5e5a <nrk_close+0x20>
// key and value get passed as opt and size
uint8_t key=opt;
    5e4e:	81 e0       	ldi	r24, 0x01	; 1
    5e50:	0e 94 0c 21 	call	0x4218	; 0x4218 <_nrk_errno_set>
    5e54:	8f ef       	ldi	r24, 0xFF	; 255
    5e56:	9f ef       	ldi	r25, 0xFF	; 255
    5e58:	08 95       	ret
uint8_t value=size;

     switch(action)
     {
    5e5a:	ee 0f       	add	r30, r30
    5e5c:	ff 1f       	adc	r31, r31
    5e5e:	ee 0f       	add	r30, r30
    5e60:	ff 1f       	adc	r31, r31
    5e62:	e1 55       	subi	r30, 0x51	; 81
    5e64:	f8 4f       	sbci	r31, 0xF8	; 248
    5e66:	01 90       	ld	r0, Z+
    5e68:	f0 81       	ld	r31, Z
    5e6a:	e0 2d       	mov	r30, r0
    5e6c:	20 e0       	ldi	r18, 0x00	; 0
    5e6e:	40 e0       	ldi	r20, 0x00	; 0
    5e70:	50 e0       	ldi	r21, 0x00	; 0
    5e72:	60 e0       	ldi	r22, 0x00	; 0
    5e74:	82 e0       	ldi	r24, 0x02	; 2
    5e76:	09 95       	icall
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
    5e78:	99 27       	eor	r25, r25
    5e7a:	87 fd       	sbrc	r24, 7
    5e7c:	90 95       	com	r25
		      return 1;
    5e7e:	08 95       	ret

00005e80 <nrk_spin_wait_us>:
	...
#include <basic_rf.h>
#include <nrk_timer.h>

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

    5e88:	01 97       	sbiw	r24, 0x01	; 1
    5e8a:	d1 f7       	brne	.-12     	; 0x5e80 <nrk_spin_wait_us>
    5e8c:	08 95       	ret

00005e8e <_nrk_high_speed_timer_stop>:
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    do { \
ADCSRA |= BM(ADSC); \
    5e8e:	10 92 81 00 	sts	0x0081, r1
    5e92:	08 95       	ret

00005e94 <_nrk_high_speed_timer_start>:
while (!(ADCSRA & 0x10)); \
} while(0)

// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
    5e94:	81 e0       	ldi	r24, 0x01	; 1
    5e96:	80 93 81 00 	sts	0x0081, r24
    5e9a:	08 95       	ret

00005e9c <_nrk_high_speed_timer_reset>:
x |= ADCH << 8; \
} while (0)

#define ADC_GET_SAMPLE_8(x) \
do { \
x = ((uint8_t) ADCL) >> 2; \
    5e9c:	83 b5       	in	r24, 0x23	; 35
    5e9e:	81 60       	ori	r24, 0x01	; 1
    5ea0:	83 bd       	out	0x23, r24	; 35
x |= ((int8_t) ADCH) << 6; \
    5ea2:	10 92 85 00 	sts	0x0085, r1
    5ea6:	10 92 84 00 	sts	0x0084, r1
    5eaa:	08 95       	ret

00005eac <_nrk_high_speed_timer_get>:
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
		    if(opt&READ_FLAG)
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
    5eac:	cf 93       	push	r28
    5eae:	df 93       	push	r29
    5eb0:	cd b7       	in	r28, 0x3d	; 61
    5eb2:	de b7       	in	r29, 0x3e	; 62
    5eb4:	22 97       	sbiw	r28, 0x02	; 2
    5eb6:	0f b6       	in	r0, 0x3f	; 63
    5eb8:	f8 94       	cli
    5eba:	de bf       	out	0x3e, r29	; 62
    5ebc:	0f be       	out	0x3f, r0	; 63
    5ebe:	cd bf       	out	0x3d, r28	; 61
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    5ec0:	80 91 84 00 	lds	r24, 0x0084
    5ec4:	90 91 85 00 	lds	r25, 0x0085
    5ec8:	9a 83       	std	Y+2, r25	; 0x02
    5eca:	89 83       	std	Y+1, r24	; 0x01
		    	return NRK_OK;
		    }
    5ecc:	89 81       	ldd	r24, Y+1	; 0x01
    5ece:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed0:	22 96       	adiw	r28, 0x02	; 2
    5ed2:	0f b6       	in	r0, 0x3f	; 63
    5ed4:	f8 94       	cli
    5ed6:	de bf       	out	0x3e, r29	; 62
    5ed8:	0f be       	out	0x3f, r0	; 63
    5eda:	cd bf       	out	0x3d, r28	; 61
    5edc:	df 91       	pop	r29
    5ede:	cf 91       	pop	r28
    5ee0:	08 95       	ret

00005ee2 <_nrk_os_timer_stop>:
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
    5ee2:	10 92 b1 00 	sts	0x00B1, r1
		    {
    5ee6:	e0 e7       	ldi	r30, 0x70	; 112
    5ee8:	f0 e0       	ldi	r31, 0x00	; 0
    5eea:	80 81       	ld	r24, Z
    5eec:	8d 7f       	andi	r24, 0xFD	; 253
    5eee:	80 83       	st	Z, r24
		    	return NRK_ERROR;
    5ef0:	80 81       	ld	r24, Z
    5ef2:	8e 7f       	andi	r24, 0xFE	; 254
    5ef4:	80 83       	st	Z, r24
    5ef6:	08 95       	ret

00005ef8 <_nrk_os_timer_set>:
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
		    else return NRK_OK;
		
    5ef8:	80 93 b2 00 	sts	0x00B2, r24
    5efc:	08 95       	ret

00005efe <_nrk_os_timer_start>:

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
			{
    5efe:	e0 e7       	ldi	r30, 0x70	; 112
    5f00:	f0 e0       	ldi	r31, 0x00	; 0
    5f02:	80 81       	ld	r24, Z
    5f04:	83 60       	ori	r24, 0x03	; 3
    5f06:	80 83       	st	Z, r24
			      /* Conversion to 8-bit value*/
    5f08:	83 e0       	ldi	r24, 0x03	; 3
    5f0a:	80 93 b1 00 	sts	0x00B1, r24
    5f0e:	08 95       	ret

00005f10 <_nrk_os_timer_reset>:
			      uint16_t val=get_adc_val();

				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
    5f10:	83 b5       	in	r24, 0x23	; 35
    5f12:	82 60       	ori	r24, 0x02	; 2
    5f14:	83 bd       	out	0x23, r24	; 35
			      		buffer[count]=(val>>8)  & 0xFF;
    5f16:	10 92 b2 00 	sts	0x00B2, r1
				}
    5f1a:	10 92 a3 06 	sts	0x06A3, r1

    5f1e:	10 92 e3 06 	sts	0x06E3, r1
    5f22:	08 95       	ret

00005f24 <_nrk_get_next_wakeup>:
				if(size==1)
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}


    5f24:	80 91 b3 00 	lds	r24, 0x00B3
    5f28:	8f 5f       	subi	r24, 0xFF	; 255
			} else if(channel==BAT)
    5f2a:	99 27       	eor	r25, r25
    5f2c:	08 95       	ret

00005f2e <_nrk_set_next_wakeup>:
			{
			uint16_t tmp;
			tmp=read_voltage_status();
			if(size==2)
    5f2e:	81 50       	subi	r24, 0x01	; 1
    5f30:	80 93 b3 00 	sts	0x00B3, r24
    5f34:	08 95       	ret

00005f36 <nrk_timer_int_stop>:
				{
					buffer[count]=tmp & 0xFF;
					count++;
					buffer[count]=(tmp>>8) & 0xFF;
				}
			if(size==1)
    5f36:	88 23       	and	r24, r24
    5f38:	11 f4       	brne	.+4      	; 0x5f3e <nrk_timer_int_stop+0x8>
				{
					buffer[count]=(tmp>>2) & 0xFF;
    5f3a:	10 92 71 00 	sts	0x0071, r1
				}
			}else if(channel==AUDIO_P2P)
			{
    5f3e:	8f ef       	ldi	r24, 0xFF	; 255
    5f40:	9f ef       	ldi	r25, 0xFF	; 255
    5f42:	08 95       	ret

00005f44 <nrk_timer_int_reset>:
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
    5f44:	88 23       	and	r24, r24
    5f46:	19 f0       	breq	.+6      	; 0x5f4e <nrk_timer_int_reset+0xa>
    5f48:	8f ef       	ldi	r24, 0xFF	; 255
    5f4a:	9f ef       	ldi	r25, 0xFF	; 255
    5f4c:	08 95       	ret
				max=0;
			        min=1025;
    5f4e:	10 92 95 00 	sts	0x0095, r1
    5f52:	10 92 94 00 	sts	0x0094, r1
    5f56:	81 e0       	ldi	r24, 0x01	; 1
    5f58:	90 e0       	ldi	r25, 0x00	; 0
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
				if(val<min)min=val;
    5f5a:	08 95       	ret

00005f5c <nrk_timer_int_read>:
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
				}
    5f5c:	88 23       	and	r24, r24
    5f5e:	19 f0       	breq	.+6      	; 0x5f66 <nrk_timer_int_read+0xa>
    5f60:	80 e0       	ldi	r24, 0x00	; 0
    5f62:	90 e0       	ldi	r25, 0x00	; 0
    5f64:	08 95       	ret
			 	val=max-min;	
				if(size==2)
    5f66:	80 91 94 00 	lds	r24, 0x0094
    5f6a:	90 91 95 00 	lds	r25, 0x0095
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    5f6e:	08 95       	ret

00005f70 <nrk_timer_int_start>:
				}

				if(size==1)
			      	{
    5f70:	88 23       	and	r24, r24
    5f72:	19 f0       	breq	.+6      	; 0x5f7a <nrk_timer_int_start+0xa>
    5f74:	8f ef       	ldi	r24, 0xFF	; 255
    5f76:	9f ef       	ldi	r25, 0xFF	; 255
    5f78:	08 95       	ret
			      		buffer[count]=(val>>2)  & 0xFF;
				}
    5f7a:	82 e0       	ldi	r24, 0x02	; 2
    5f7c:	80 93 71 00 	sts	0x0071, r24
    5f80:	81 e0       	ldi	r24, 0x01	; 1
    5f82:	90 e0       	ldi	r25, 0x00	; 0

			}
			
		      count++;
    5f84:	08 95       	ret

00005f86 <nrk_timer_int_configure>:
                      return count;

             case CLOSE:
			// Turn off sensor power
    5f86:	88 23       	and	r24, r24
    5f88:	19 f0       	breq	.+6      	; 0x5f90 <nrk_timer_int_configure+0xa>
    5f8a:	8f ef       	ldi	r24, 0xFF	; 255
    5f8c:	9f ef       	ldi	r25, 0xFF	; 255
    5f8e:	08 95       	ret
			PORTF |= PWR_CTRL_MASK;
		    	is_open=0; 
    5f90:	cb 01       	movw	r24, r22
    5f92:	01 97       	sbiw	r24, 0x01	; 1
    5f94:	05 97       	sbiw	r24, 0x05	; 5
    5f96:	10 f4       	brcc	.+4      	; 0x5f9c <nrk_timer_int_configure+0x16>
    5f98:	60 93 d1 06 	sts	0x06D1, r22
                        return NRK_OK;
    5f9c:	10 92 90 00 	sts	0x0090, r1
             
    5fa0:	88 e0       	ldi	r24, 0x08	; 8
    5fa2:	80 93 91 00 	sts	0x0091, r24
	     case GET_STATUS:
    5fa6:	85 2f       	mov	r24, r21
    5fa8:	99 27       	eor	r25, r25
    5faa:	80 93 99 00 	sts	0x0099, r24
	     		// use "key" here 
    5fae:	40 93 98 00 	sts	0x0098, r20
			if(key==SENSOR_SELECT) return channel;
    5fb2:	30 93 94 06 	sts	0x0694, r19
    5fb6:	20 93 93 06 	sts	0x0693, r18
	     		return NRK_ERROR;
    5fba:	80 91 d1 06 	lds	r24, 0x06D1
    5fbe:	81 30       	cpi	r24, 0x01	; 1
    5fc0:	21 f4       	brne	.+8      	; 0x5fca <nrk_timer_int_configure+0x44>
    5fc2:	80 91 91 00 	lds	r24, 0x0091
    5fc6:	81 60       	ori	r24, 0x01	; 1
    5fc8:	0b c0       	rjmp	.+22     	; 0x5fe0 <nrk_timer_int_configure+0x5a>
			
             case SET_STATUS:
    5fca:	82 30       	cpi	r24, 0x02	; 2
    5fcc:	21 f4       	brne	.+8      	; 0x5fd6 <nrk_timer_int_configure+0x50>
    5fce:	80 91 91 00 	lds	r24, 0x0091
    5fd2:	82 60       	ori	r24, 0x02	; 2
    5fd4:	05 c0       	rjmp	.+10     	; 0x5fe0 <nrk_timer_int_configure+0x5a>
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    5fd6:	83 30       	cpi	r24, 0x03	; 3
    5fd8:	31 f4       	brne	.+12     	; 0x5fe6 <nrk_timer_int_configure+0x60>
    5fda:	80 91 91 00 	lds	r24, 0x0091
    5fde:	83 60       	ori	r24, 0x03	; 3
    5fe0:	80 93 91 00 	sts	0x0091, r24
    5fe4:	08 c0       	rjmp	.+16     	; 0x5ff6 <nrk_timer_int_configure+0x70>
			{
			// Set to audio channel if it is an average value
    5fe6:	84 30       	cpi	r24, 0x04	; 4
    5fe8:	21 f4       	brne	.+8      	; 0x5ff2 <nrk_timer_int_configure+0x6c>
    5fea:	80 91 91 00 	lds	r24, 0x0091
    5fee:	84 60       	ori	r24, 0x04	; 4
    5ff0:	f7 cf       	rjmp	.-18     	; 0x5fe0 <nrk_timer_int_configure+0x5a>
			if(value==AUDIO_P2P) 
			  {
    5ff2:	85 30       	cpi	r24, 0x05	; 5
    5ff4:	19 f0       	breq	.+6      	; 0x5ffc <nrk_timer_int_configure+0x76>
    5ff6:	81 e0       	ldi	r24, 0x01	; 1
    5ff8:	90 e0       	ldi	r25, 0x00	; 0
    5ffa:	08 95       	ret
    5ffc:	80 91 91 00 	lds	r24, 0x0091
    6000:	85 60       	ori	r24, 0x05	; 5
    6002:	80 93 91 00 	sts	0x0091, r24
    6006:	81 e0       	ldi	r24, 0x01	; 1
    6008:	90 e0       	ldi	r25, 0x00	; 0
				channel=value;
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
				ADC_SET_CHANNEL (AUDIO);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;
    600a:	08 95       	ret

0000600c <_nrk_os_timer_get>:

			  } else
			  {
				if(value>7) 
				{
    600c:	80 91 b2 00 	lds	r24, 0x00B2
					_nrk_errno_set(1);
    6010:	99 27       	eor	r25, r25
    6012:	08 95       	ret

00006014 <__vector_13>:
}


// read_voltage_status()
//
// This function sets different voltage threshold levels on
    6014:	0f 92       	push	r0
    6016:	0f b6       	in	r0, 0x3f	; 63
    6018:	0f 92       	push	r0
    601a:	1f 92       	push	r1
    601c:	2f 92       	push	r2
    601e:	3f 92       	push	r3
    6020:	4f 92       	push	r4
    6022:	5f 92       	push	r5
    6024:	6f 92       	push	r6
    6026:	7f 92       	push	r7
    6028:	8f 92       	push	r8
    602a:	9f 92       	push	r9
    602c:	af 92       	push	r10
    602e:	bf 92       	push	r11
    6030:	cf 92       	push	r12
    6032:	df 92       	push	r13
    6034:	ef 92       	push	r14
    6036:	ff 92       	push	r15
    6038:	0f 93       	push	r16
    603a:	1f 93       	push	r17
    603c:	2f 93       	push	r18
    603e:	3f 93       	push	r19
    6040:	4f 93       	push	r20
    6042:	5f 93       	push	r21
    6044:	6f 93       	push	r22
    6046:	7f 93       	push	r23
    6048:	8f 93       	push	r24
    604a:	9f 93       	push	r25
    604c:	af 93       	push	r26
    604e:	bf 93       	push	r27
    6050:	cf 93       	push	r28
    6052:	df 93       	push	r29
    6054:	ef 93       	push	r30
    6056:	ff 93       	push	r31
    6058:	a0 91 95 07 	lds	r26, 0x0795
    605c:	b0 91 96 07 	lds	r27, 0x0796
    6060:	0d b6       	in	r0, 0x3d	; 61
    6062:	0d 92       	st	X+, r0
    6064:	0e b6       	in	r0, 0x3e	; 62
    6066:	0d 92       	st	X+, r0
    6068:	1f 92       	push	r1
    606a:	a0 91 fe 04 	lds	r26, 0x04FE
    606e:	b0 91 ff 04 	lds	r27, 0x04FF
    6072:	1e 90       	ld	r1, -X
    6074:	be bf       	out	0x3e, r27	; 62
    6076:	ad bf       	out	0x3d, r26	; 61
    6078:	08 95       	ret

0000607a <__vector_17>:
	ADC_SAMPLE_SINGLE();
	delay();
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
    607a:	1f 92       	push	r1
    607c:	0f 92       	push	r0
    607e:	0f b6       	in	r0, 0x3f	; 63
    6080:	0f 92       	push	r0
    6082:	11 24       	eor	r1, r1
    6084:	0f 90       	pop	r0
    6086:	0f be       	out	0x3f, r0	; 63
    6088:	0f 90       	pop	r0
    608a:	1f 90       	pop	r1
    608c:	18 95       	reti

0000608e <__vector_32>:
{
// Initialize values here
  ADC_INIT ();
  ADC_ENABLE ();
  channel=0;
  ADC_SET_CHANNEL (0);
    608e:	1f 92       	push	r1
    6090:	0f 92       	push	r0
    6092:	0f b6       	in	r0, 0x3f	; 63
    6094:	0f 92       	push	r0
    6096:	11 24       	eor	r1, r1
    6098:	2f 93       	push	r18
    609a:	3f 93       	push	r19
    609c:	4f 93       	push	r20
    609e:	5f 93       	push	r21
    60a0:	6f 93       	push	r22
    60a2:	7f 93       	push	r23
    60a4:	8f 93       	push	r24
    60a6:	9f 93       	push	r25
    60a8:	af 93       	push	r26
    60aa:	bf 93       	push	r27
    60ac:	ef 93       	push	r30
    60ae:	ff 93       	push	r31
}
    60b0:	e0 91 93 06 	lds	r30, 0x0693
    60b4:	f0 91 94 06 	lds	r31, 0x0694
    60b8:	30 97       	sbiw	r30, 0x00	; 0
    60ba:	11 f0       	breq	.+4      	; 0x60c0 <__vector_32+0x32>
    60bc:	09 95       	icall
    60be:	04 c0       	rjmp	.+8      	; 0x60c8 <__vector_32+0x3a>

uint16_t get_adc_val()
    60c0:	60 e0       	ldi	r22, 0x00	; 0
    60c2:	8a e0       	ldi	r24, 0x0A	; 10
    60c4:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <nrk_kernel_error_add>
    60c8:	ff 91       	pop	r31
    60ca:	ef 91       	pop	r30
    60cc:	bf 91       	pop	r27
    60ce:	af 91       	pop	r26
    60d0:	9f 91       	pop	r25
    60d2:	8f 91       	pop	r24
    60d4:	7f 91       	pop	r23
    60d6:	6f 91       	pop	r22
    60d8:	5f 91       	pop	r21
    60da:	4f 91       	pop	r20
    60dc:	3f 91       	pop	r19
    60de:	2f 91       	pop	r18
    60e0:	0f 90       	pop	r0
    60e2:	0f be       	out	0x3f, r0	; 63
    60e4:	0f 90       	pop	r0
    60e6:	1f 90       	pop	r1
    60e8:	18 95       	reti

000060ea <__vector_default>:
					_nrk_errno_set(1);
					return NRK_ERROR;
				}
				channel=value;
				if(channel==LIGHT)
				   ADC_VREF_VCC();	
    60ea:	1f 92       	push	r1
    60ec:	0f 92       	push	r0
    60ee:	0f b6       	in	r0, 0x3f	; 63
    60f0:	0f 92       	push	r0
    60f2:	11 24       	eor	r1, r1
    60f4:	2f 93       	push	r18
    60f6:	3f 93       	push	r19
    60f8:	4f 93       	push	r20
    60fa:	5f 93       	push	r21
    60fc:	6f 93       	push	r22
    60fe:	7f 93       	push	r23
    6100:	8f 93       	push	r24
    6102:	9f 93       	push	r25
    6104:	af 93       	push	r26
    6106:	bf 93       	push	r27
    6108:	ef 93       	push	r30
    610a:	ff 93       	push	r31
				else
    610c:	60 e0       	ldi	r22, 0x00	; 0
    610e:	8a e0       	ldi	r24, 0x0A	; 10
    6110:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <nrk_kernel_error_add>
    6114:	ff cf       	rjmp	.-2      	; 0x6114 <__vector_default+0x2a>

00006116 <nrk_high_speed_timer_wait>:
{
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

    6116:	cf 93       	push	r28
    6118:	df 93       	push	r29
    611a:	cd b7       	in	r28, 0x3d	; 61
    611c:	de b7       	in	r29, 0x3e	; 62
    611e:	22 97       	sbiw	r28, 0x02	; 2
    6120:	0f b6       	in	r0, 0x3f	; 63
    6122:	f8 94       	cli
    6124:	de bf       	out	0x3e, r29	; 62
    6126:	0f be       	out	0x3f, r0	; 63
    6128:	cd bf       	out	0x3d, r28	; 61
    612a:	fc 01       	movw	r30, r24
     switch(action)
     {
    612c:	8f ef       	ldi	r24, 0xFF	; 255
    612e:	e9 37       	cpi	r30, 0x79	; 121
    6130:	f8 07       	cpc	r31, r24
    6132:	10 f0       	brcs	.+4      	; 0x6138 <nrk_high_speed_timer_wait+0x22>
    6134:	e0 e0       	ldi	r30, 0x00	; 0
    6136:	f0 e0       	ldi	r31, 0x00	; 0
            case INIT: 
    6138:	9f 01       	movw	r18, r30
    613a:	44 27       	eor	r20, r20
    613c:	55 27       	eor	r21, r21
    613e:	cb 01       	movw	r24, r22
    6140:	aa 27       	eor	r26, r26
    6142:	bb 27       	eor	r27, r27
    6144:	28 0f       	add	r18, r24
    6146:	39 1f       	adc	r19, r25
    6148:	4a 1f       	adc	r20, r26
    614a:	5b 1f       	adc	r21, r27
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
    614c:	21 30       	cpi	r18, 0x01	; 1
    614e:	80 e0       	ldi	r24, 0x00	; 0
    6150:	38 07       	cpc	r19, r24
    6152:	81 e0       	ldi	r24, 0x01	; 1
    6154:	48 07       	cpc	r20, r24
    6156:	80 e0       	ldi	r24, 0x00	; 0
    6158:	58 07       	cpc	r21, r24
    615a:	78 f0       	brcs	.+30     	; 0x617a <nrk_high_speed_timer_wait+0x64>
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    615c:	80 91 84 00 	lds	r24, 0x0084
    6160:	90 91 85 00 	lds	r25, 0x0085
    6164:	9a 83       	std	Y+2, r25	; 0x02
    6166:	89 83       	std	Y+1, r24	; 0x01
		    	return NRK_OK;
		    }
    6168:	89 81       	ldd	r24, Y+1	; 0x01
    616a:	9a 81       	ldd	r25, Y+2	; 0x02
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
		      return 1;
    616c:	e8 17       	cp	r30, r24
    616e:	f9 07       	cpc	r31, r25
    6170:	a8 f3       	brcs	.-22     	; 0x615c <nrk_high_speed_timer_wait+0x46>
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
    6172:	20 50       	subi	r18, 0x00	; 0
    6174:	30 40       	sbci	r19, 0x00	; 0
    6176:	41 40       	sbci	r20, 0x01	; 1
    6178:	50 40       	sbci	r21, 0x00	; 0
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    617a:	80 91 84 00 	lds	r24, 0x0084
    617e:	90 91 85 00 	lds	r25, 0x0085
    6182:	9a 83       	std	Y+2, r25	; 0x02
    6184:	89 83       	std	Y+1, r24	; 0x01
		    	return NRK_OK;
		    }
    6186:	89 81       	ldd	r24, Y+1	; 0x01
    6188:	9a 81       	ldd	r25, Y+2	; 0x02
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
    618a:	82 17       	cp	r24, r18
    618c:	93 07       	cpc	r25, r19
    618e:	a8 f3       	brcs	.-22     	; 0x617a <nrk_high_speed_timer_wait+0x64>
    6190:	22 96       	adiw	r28, 0x02	; 2
    6192:	0f b6       	in	r0, 0x3f	; 63
    6194:	f8 94       	cli
    6196:	de bf       	out	0x3e, r29	; 62
    6198:	0f be       	out	0x3f, r0	; 63
    619a:	cd bf       	out	0x3d, r28	; 61
    619c:	df 91       	pop	r29
    619e:	cf 91       	pop	r28
    61a0:	08 95       	ret

000061a2 <_nrk_setup_timer>:

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    61a2:	ef 92       	push	r14
    61a4:	ff 92       	push	r15
    61a6:	1f 93       	push	r17
    do { \
    61a8:	9e ef       	ldi	r25, 0xFE	; 254
    61aa:	90 93 e3 06 	sts	0x06E3, r25
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)
    61ae:	80 e2       	ldi	r24, 0x20	; 32
    61b0:	80 93 b6 00 	sts	0x00B6, r24

    61b4:	90 93 b3 00 	sts	0x00B3, r25
#define ADC_VREF_VCC() \
    61b8:	13 e0       	ldi	r17, 0x03	; 3
    61ba:	17 bb       	out	0x17, r17	; 23
   do { \
    61bc:	82 e0       	ldi	r24, 0x02	; 2
    61be:	80 93 b0 00 	sts	0x00B0, r24
	ADMUX &= ~(BM(REFS1));  \
    61c2:	91 eb       	ldi	r25, 0xB1	; 177
    61c4:	e9 2e       	mov	r14, r25
    61c6:	f1 2c       	mov	r15, r1
    61c8:	f7 01       	movw	r30, r14
    61ca:	10 83       	st	Z, r17
	ADMUX |= BM(REFS0);  \
    61cc:	83 b5       	in	r24, 0x23	; 35
    61ce:	82 60       	ori	r24, 0x02	; 2
    61d0:	83 bd       	out	0x23, r24	; 35
} while(0)

    61d2:	17 bb       	out	0x17, r17	; 23

#define ADC_VREF_1_1() \
    61d4:	14 bd       	out	0x24, r17	; 36
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
    61d6:	83 b5       	in	r24, 0x23	; 35
    61d8:	82 60       	ori	r24, 0x02	; 2
    61da:	83 bd       	out	0x23, r24	; 35
} while(0)


#define ADC_VREF_2_56() \
    61dc:	10 92 80 00 	sts	0x0080, r1
   do { \
    61e0:	81 e0       	ldi	r24, 0x01	; 1
    61e2:	80 93 81 00 	sts	0x0081, r24
	ADMUX |= BM(REFS1) | BM(REFS0);  \
    61e6:	10 92 85 00 	sts	0x0085, r1
    61ea:	10 92 84 00 	sts	0x0084, r1
} while(0)
    61ee:	83 b5       	in	r24, 0x23	; 35
    61f0:	82 60       	ori	r24, 0x02	; 2
    61f2:	83 bd       	out	0x23, r24	; 35

    61f4:	83 b5       	in	r24, 0x23	; 35
    61f6:	81 60       	ori	r24, 0x01	; 1
    61f8:	83 bd       	out	0x23, r24	; 35
#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

    61fa:	0e 94 88 2f 	call	0x5f10	; 0x5f10 <_nrk_os_timer_reset>

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
			{
    61fe:	e0 e7       	ldi	r30, 0x70	; 112
    6200:	f0 e0       	ldi	r31, 0x00	; 0
    6202:	80 81       	ld	r24, Z
    6204:	83 60       	ori	r24, 0x03	; 3
    6206:	80 83       	st	Z, r24
			      /* Conversion to 8-bit value*/
    6208:	f7 01       	movw	r30, r14
    620a:	10 83       	st	Z, r17
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
    620c:	10 92 a3 06 	sts	0x06A3, r1
    6210:	1f 91       	pop	r17
    6212:	ff 90       	pop	r15
    6214:	ef 90       	pop	r14
    6216:	08 95       	ret

00006218 <nrk_ext_int_enable>:
#include <include.h>
#include <stdio.h>
#include <ulib.h>
#include <nrk_error.h>
#include <nrk.h>
#include <stdint.h>
    6218:	88 23       	and	r24, r24
    621a:	11 f4       	brne	.+4      	; 0x6220 <nrk_ext_int_enable+0x8>
    621c:	e8 9a       	sbi	0x1d, 0	; 29
    621e:	33 c0       	rjmp	.+102    	; 0x6286 <nrk_ext_int_enable+0x6e>
#include <basic_rf.h>
    6220:	81 30       	cpi	r24, 0x01	; 1
    6222:	11 f4       	brne	.+4      	; 0x6228 <nrk_ext_int_enable+0x10>
    6224:	e9 9a       	sbi	0x1d, 1	; 29
    6226:	2f c0       	rjmp	.+94     	; 0x6286 <nrk_ext_int_enable+0x6e>
#include <nrk_timer.h>
    6228:	82 30       	cpi	r24, 0x02	; 2
    622a:	11 f4       	brne	.+4      	; 0x6230 <nrk_ext_int_enable+0x18>
    622c:	ea 9a       	sbi	0x1d, 2	; 29
    622e:	2b c0       	rjmp	.+86     	; 0x6286 <nrk_ext_int_enable+0x6e>

    6230:	83 30       	cpi	r24, 0x03	; 3
    6232:	21 f4       	brne	.+8      	; 0x623c <nrk_ext_int_enable+0x24>
    6234:	80 91 6b 00 	lds	r24, 0x006B
    6238:	81 60       	ori	r24, 0x01	; 1
    623a:	23 c0       	rjmp	.+70     	; 0x6282 <nrk_ext_int_enable+0x6a>
#define ADC_STARTUP_DELAY  1000
    623c:	84 30       	cpi	r24, 0x04	; 4
    623e:	21 f4       	brne	.+8      	; 0x6248 <nrk_ext_int_enable+0x30>
    6240:	80 91 6b 00 	lds	r24, 0x006B
    6244:	82 60       	ori	r24, 0x02	; 2
    6246:	1d c0       	rjmp	.+58     	; 0x6282 <nrk_ext_int_enable+0x6a>
#define ADC_SETUP_DELAY  200
    6248:	85 30       	cpi	r24, 0x05	; 5
    624a:	21 f4       	brne	.+8      	; 0x6254 <nrk_ext_int_enable+0x3c>
    624c:	80 91 6b 00 	lds	r24, 0x006B
    6250:	84 60       	ori	r24, 0x04	; 4
    6252:	17 c0       	rjmp	.+46     	; 0x6282 <nrk_ext_int_enable+0x6a>

    6254:	86 30       	cpi	r24, 0x06	; 6
    6256:	21 f4       	brne	.+8      	; 0x6260 <nrk_ext_int_enable+0x48>
    6258:	80 91 6b 00 	lds	r24, 0x006B
    625c:	88 60       	ori	r24, 0x08	; 8
    625e:	11 c0       	rjmp	.+34     	; 0x6282 <nrk_ext_int_enable+0x6a>
uint8_t channel;
    6260:	87 30       	cpi	r24, 0x07	; 7
    6262:	21 f4       	brne	.+8      	; 0x626c <nrk_ext_int_enable+0x54>
    6264:	80 91 6b 00 	lds	r24, 0x006B
    6268:	80 61       	ori	r24, 0x10	; 16
    626a:	0b c0       	rjmp	.+22     	; 0x6282 <nrk_ext_int_enable+0x6a>
uint8_t is_open;
    626c:	88 30       	cpi	r24, 0x08	; 8
    626e:	21 f4       	brne	.+8      	; 0x6278 <nrk_ext_int_enable+0x60>
    6270:	80 91 6b 00 	lds	r24, 0x006B
    6274:	80 62       	ori	r24, 0x20	; 32
    6276:	05 c0       	rjmp	.+10     	; 0x6282 <nrk_ext_int_enable+0x6a>

    6278:	89 30       	cpi	r24, 0x09	; 9
    627a:	41 f4       	brne	.+16     	; 0x628c <nrk_ext_int_enable+0x74>
    627c:	80 91 6b 00 	lds	r24, 0x006B
    6280:	80 64       	ori	r24, 0x40	; 64
    6282:	80 93 6b 00 	sts	0x006B, r24
    6286:	81 e0       	ldi	r24, 0x01	; 1
    6288:	90 e0       	ldi	r25, 0x00	; 0
    628a:	08 95       	ret
// VREF is set to VCC by default
    628c:	8a 30       	cpi	r24, 0x0A	; 10
    628e:	19 f0       	breq	.+6      	; 0x6296 <nrk_ext_int_enable+0x7e>
    6290:	8f ef       	ldi	r24, 0xFF	; 255
    6292:	9f ef       	ldi	r25, 0xFF	; 255
    6294:	08 95       	ret
    6296:	80 91 6b 00 	lds	r24, 0x006B
    629a:	80 68       	ori	r24, 0x80	; 128
    629c:	80 93 6b 00 	sts	0x006B, r24
    62a0:	81 e0       	ldi	r24, 0x01	; 1
    62a2:	90 e0       	ldi	r25, 0x00	; 0
#define ADC_INIT() \
    do { \
    62a4:	08 95       	ret

000062a6 <nrk_ext_int_disable>:
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)

    62a6:	88 23       	and	r24, r24
    62a8:	11 f4       	brne	.+4      	; 0x62ae <nrk_ext_int_disable+0x8>
    62aa:	e8 98       	cbi	0x1d, 0	; 29
    62ac:	31 c0       	rjmp	.+98     	; 0x6310 <nrk_ext_int_disable+0x6a>
#define ADC_VREF_VCC() \
    62ae:	81 30       	cpi	r24, 0x01	; 1
    62b0:	11 f0       	breq	.+4      	; 0x62b6 <nrk_ext_int_disable+0x10>
   do { \
    62b2:	82 30       	cpi	r24, 0x02	; 2
    62b4:	11 f4       	brne	.+4      	; 0x62ba <nrk_ext_int_disable+0x14>
    62b6:	e9 98       	cbi	0x1d, 1	; 29
    62b8:	2b c0       	rjmp	.+86     	; 0x6310 <nrk_ext_int_disable+0x6a>
	ADMUX &= ~(BM(REFS1));  \
    62ba:	83 30       	cpi	r24, 0x03	; 3
    62bc:	21 f4       	brne	.+8      	; 0x62c6 <nrk_ext_int_disable+0x20>
    62be:	80 91 6b 00 	lds	r24, 0x006B
    62c2:	8e 7f       	andi	r24, 0xFE	; 254
    62c4:	23 c0       	rjmp	.+70     	; 0x630c <nrk_ext_int_disable+0x66>
	ADMUX |= BM(REFS0);  \
    62c6:	84 30       	cpi	r24, 0x04	; 4
    62c8:	21 f4       	brne	.+8      	; 0x62d2 <nrk_ext_int_disable+0x2c>
    62ca:	80 91 6b 00 	lds	r24, 0x006B
    62ce:	8d 7f       	andi	r24, 0xFD	; 253
    62d0:	1d c0       	rjmp	.+58     	; 0x630c <nrk_ext_int_disable+0x66>
} while(0)
    62d2:	85 30       	cpi	r24, 0x05	; 5
    62d4:	21 f4       	brne	.+8      	; 0x62de <nrk_ext_int_disable+0x38>
    62d6:	80 91 6b 00 	lds	r24, 0x006B
    62da:	8b 7f       	andi	r24, 0xFB	; 251
    62dc:	17 c0       	rjmp	.+46     	; 0x630c <nrk_ext_int_disable+0x66>

    62de:	86 30       	cpi	r24, 0x06	; 6
    62e0:	21 f4       	brne	.+8      	; 0x62ea <nrk_ext_int_disable+0x44>
    62e2:	80 91 6b 00 	lds	r24, 0x006B
    62e6:	87 7f       	andi	r24, 0xF7	; 247
    62e8:	11 c0       	rjmp	.+34     	; 0x630c <nrk_ext_int_disable+0x66>

    62ea:	87 30       	cpi	r24, 0x07	; 7
    62ec:	21 f4       	brne	.+8      	; 0x62f6 <nrk_ext_int_disable+0x50>
    62ee:	80 91 6b 00 	lds	r24, 0x006B
    62f2:	8f 7e       	andi	r24, 0xEF	; 239
    62f4:	0b c0       	rjmp	.+22     	; 0x630c <nrk_ext_int_disable+0x66>
#define ADC_VREF_1_1() \
    62f6:	88 30       	cpi	r24, 0x08	; 8
    62f8:	21 f4       	brne	.+8      	; 0x6302 <nrk_ext_int_disable+0x5c>
    62fa:	80 91 6b 00 	lds	r24, 0x006B
    62fe:	8f 7d       	andi	r24, 0xDF	; 223
    6300:	05 c0       	rjmp	.+10     	; 0x630c <nrk_ext_int_disable+0x66>
   do { \
    6302:	89 30       	cpi	r24, 0x09	; 9
    6304:	41 f4       	brne	.+16     	; 0x6316 <nrk_ext_int_disable+0x70>
    6306:	80 91 6b 00 	lds	r24, 0x006B
    630a:	8f 7b       	andi	r24, 0xBF	; 191
    630c:	80 93 6b 00 	sts	0x006B, r24
    6310:	81 e0       	ldi	r24, 0x01	; 1
    6312:	90 e0       	ldi	r25, 0x00	; 0
    6314:	08 95       	ret
	ADMUX &= ~(BM(REFS0));  \
    6316:	8a 30       	cpi	r24, 0x0A	; 10
    6318:	19 f0       	breq	.+6      	; 0x6320 <nrk_ext_int_disable+0x7a>
    631a:	8f ef       	ldi	r24, 0xFF	; 255
    631c:	9f ef       	ldi	r25, 0xFF	; 255
    631e:	08 95       	ret
    6320:	80 91 6b 00 	lds	r24, 0x006B
    6324:	8f 77       	andi	r24, 0x7F	; 127
    6326:	80 93 6b 00 	sts	0x006B, r24
    632a:	81 e0       	ldi	r24, 0x01	; 1
    632c:	90 e0       	ldi	r25, 0x00	; 0
	ADMUX |= BM(REFS1);  \
} while(0)
    632e:	08 95       	ret

00006330 <nrk_ext_int_configure>:


#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)
    6330:	88 23       	and	r24, r24
    6332:	39 f5       	brne	.+78     	; 0x6382 <nrk_ext_int_configure+0x52>

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)
    6334:	50 93 b5 07 	sts	0x07B5, r21
    6338:	40 93 b4 07 	sts	0x07B4, r20

    633c:	66 23       	and	r22, r22
    633e:	21 f4       	brne	.+8      	; 0x6348 <nrk_ext_int_configure+0x18>
    6340:	80 91 69 00 	lds	r24, 0x0069
    6344:	8c 7f       	andi	r24, 0xFC	; 252
    6346:	45 c0       	rjmp	.+138    	; 0x63d2 <nrk_ext_int_configure+0xa2>
// Enables/disables the ADC
    6348:	61 30       	cpi	r22, 0x01	; 1
    634a:	49 f4       	brne	.+18     	; 0x635e <nrk_ext_int_configure+0x2e>
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
    634c:	80 91 69 00 	lds	r24, 0x0069
    6350:	8d 7f       	andi	r24, 0xFD	; 253
    6352:	80 93 69 00 	sts	0x0069, r24
    6356:	80 91 69 00 	lds	r24, 0x0069
    635a:	81 60       	ori	r24, 0x01	; 1
    635c:	3a c0       	rjmp	.+116    	; 0x63d2 <nrk_ext_int_configure+0xa2>
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)
    635e:	62 30       	cpi	r22, 0x02	; 2
    6360:	49 f4       	brne	.+18     	; 0x6374 <nrk_ext_int_configure+0x44>

    6362:	80 91 69 00 	lds	r24, 0x0069
    6366:	82 60       	ori	r24, 0x02	; 2
    6368:	80 93 69 00 	sts	0x0069, r24
    636c:	80 91 69 00 	lds	r24, 0x0069
    6370:	8e 7f       	andi	r24, 0xFE	; 254
    6372:	2f c0       	rjmp	.+94     	; 0x63d2 <nrk_ext_int_configure+0xa2>
#define ADC_SAMPLE_SINGLE() \
    6374:	63 30       	cpi	r22, 0x03	; 3
    6376:	09 f0       	breq	.+2      	; 0x637a <nrk_ext_int_configure+0x4a>
    6378:	69 c0       	rjmp	.+210    	; 0x644c <nrk_ext_int_configure+0x11c>
    637a:	80 91 69 00 	lds	r24, 0x0069
    637e:	83 60       	ori	r24, 0x03	; 3
    6380:	28 c0       	rjmp	.+80     	; 0x63d2 <nrk_ext_int_configure+0xa2>
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
    6382:	81 30       	cpi	r24, 0x01	; 1
    6384:	49 f5       	brne	.+82     	; 0x63d8 <nrk_ext_int_configure+0xa8>
} while(0)

    6386:	50 93 b3 07 	sts	0x07B3, r21
    638a:	40 93 b2 07 	sts	0x07B2, r20
// Macros for obtaining the latest sample value
    638e:	66 23       	and	r22, r22
    6390:	21 f4       	brne	.+8      	; 0x639a <nrk_ext_int_configure+0x6a>
    6392:	80 91 69 00 	lds	r24, 0x0069
    6396:	83 7f       	andi	r24, 0xF3	; 243
    6398:	1c c0       	rjmp	.+56     	; 0x63d2 <nrk_ext_int_configure+0xa2>
#define ADC_GET_SAMPLE_10(x) \
    639a:	61 30       	cpi	r22, 0x01	; 1
    639c:	49 f4       	brne	.+18     	; 0x63b0 <nrk_ext_int_configure+0x80>
do { \
    639e:	80 91 69 00 	lds	r24, 0x0069
    63a2:	87 7f       	andi	r24, 0xF7	; 247
    63a4:	80 93 69 00 	sts	0x0069, r24
    63a8:	80 91 69 00 	lds	r24, 0x0069
    63ac:	84 60       	ori	r24, 0x04	; 4
    63ae:	11 c0       	rjmp	.+34     	; 0x63d2 <nrk_ext_int_configure+0xa2>
x =  ADCL; \
    63b0:	62 30       	cpi	r22, 0x02	; 2
    63b2:	49 f4       	brne	.+18     	; 0x63c6 <nrk_ext_int_configure+0x96>
x |= ADCH << 8; \
    63b4:	80 91 69 00 	lds	r24, 0x0069
    63b8:	88 60       	ori	r24, 0x08	; 8
    63ba:	80 93 69 00 	sts	0x0069, r24
    63be:	80 91 69 00 	lds	r24, 0x0069
    63c2:	8b 7f       	andi	r24, 0xFB	; 251
    63c4:	06 c0       	rjmp	.+12     	; 0x63d2 <nrk_ext_int_configure+0xa2>
} while (0)
    63c6:	63 30       	cpi	r22, 0x03	; 3
    63c8:	09 f0       	breq	.+2      	; 0x63cc <nrk_ext_int_configure+0x9c>
    63ca:	40 c0       	rjmp	.+128    	; 0x644c <nrk_ext_int_configure+0x11c>
    63cc:	80 91 69 00 	lds	r24, 0x0069
    63d0:	8c 60       	ori	r24, 0x0C	; 12
    63d2:	80 93 69 00 	sts	0x0069, r24
    63d6:	37 c0       	rjmp	.+110    	; 0x6446 <nrk_ext_int_configure+0x116>

#define ADC_GET_SAMPLE_8(x) \
do { \
    63d8:	82 30       	cpi	r24, 0x02	; 2
    63da:	31 f5       	brne	.+76     	; 0x6428 <nrk_ext_int_configure+0xf8>
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
    63dc:	50 93 b3 07 	sts	0x07B3, r21
    63e0:	40 93 b2 07 	sts	0x07B2, r20
} while (0)
    63e4:	66 23       	and	r22, r22
    63e6:	21 f4       	brne	.+8      	; 0x63f0 <nrk_ext_int_configure+0xc0>
    63e8:	80 91 69 00 	lds	r24, 0x0069
    63ec:	8f 7c       	andi	r24, 0xCF	; 207
    63ee:	f1 cf       	rjmp	.-30     	; 0x63d2 <nrk_ext_int_configure+0xa2>

    63f0:	61 30       	cpi	r22, 0x01	; 1
    63f2:	49 f4       	brne	.+18     	; 0x6406 <nrk_ext_int_configure+0xd6>
uint16_t read_voltage_status();
    63f4:	80 91 69 00 	lds	r24, 0x0069
    63f8:	8f 7d       	andi	r24, 0xDF	; 223
    63fa:	80 93 69 00 	sts	0x0069, r24
    63fe:	80 91 69 00 	lds	r24, 0x0069
    6402:	80 61       	ori	r24, 0x10	; 16
    6404:	e6 cf       	rjmp	.-52     	; 0x63d2 <nrk_ext_int_configure+0xa2>
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
    6406:	62 30       	cpi	r22, 0x02	; 2
    6408:	49 f4       	brne	.+18     	; 0x641c <nrk_ext_int_configure+0xec>
{
    640a:	80 91 69 00 	lds	r24, 0x0069
    640e:	80 62       	ori	r24, 0x20	; 32
    6410:	80 93 69 00 	sts	0x0069, r24
    6414:	80 91 69 00 	lds	r24, 0x0069
    6418:	8f 7e       	andi	r24, 0xEF	; 239
    641a:	db cf       	rjmp	.-74     	; 0x63d2 <nrk_ext_int_configure+0xa2>
uint8_t count=0;
    641c:	63 30       	cpi	r22, 0x03	; 3
    641e:	b1 f4       	brne	.+44     	; 0x644c <nrk_ext_int_configure+0x11c>
    6420:	80 91 69 00 	lds	r24, 0x0069
    6424:	80 63       	ori	r24, 0x30	; 48
    6426:	d5 cf       	rjmp	.-86     	; 0x63d2 <nrk_ext_int_configure+0xa2>
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

     switch(action)
     {
    6428:	83 50       	subi	r24, 0x03	; 3
    642a:	88 30       	cpi	r24, 0x08	; 8
    642c:	18 f0       	brcs	.+6      	; 0x6434 <nrk_ext_int_configure+0x104>
    642e:	8f ef       	ldi	r24, 0xFF	; 255
    6430:	9f ef       	ldi	r25, 0xFF	; 255
    6432:	08 95       	ret
            case INIT: 
    6434:	80 91 68 00 	lds	r24, 0x0068
    6438:	81 60       	ori	r24, 0x01	; 1
    643a:	80 93 68 00 	sts	0x0068, r24
			// Set the pwr ctrl pin as output
    643e:	50 93 b9 07 	sts	0x07B9, r21
    6442:	40 93 b8 07 	sts	0x07B8, r20
    6446:	81 e0       	ldi	r24, 0x01	; 1
    6448:	90 e0       	ldi	r25, 0x00	; 0
    644a:	08 95       	ret
  			DDRF = PWR_CTRL_MASK;
    644c:	81 e0       	ldi	r24, 0x01	; 1
    644e:	90 e0       	ldi	r25, 0x00	; 0
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
    6450:	08 95       	ret

00006452 <__vector_1>:
		    if(opt&READ_FLAG)
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
    6452:	1f 92       	push	r1
    6454:	0f 92       	push	r0
    6456:	0f b6       	in	r0, 0x3f	; 63
    6458:	0f 92       	push	r0
    645a:	11 24       	eor	r1, r1
    645c:	2f 93       	push	r18
    645e:	3f 93       	push	r19
    6460:	4f 93       	push	r20
    6462:	5f 93       	push	r21
    6464:	6f 93       	push	r22
    6466:	7f 93       	push	r23
    6468:	8f 93       	push	r24
    646a:	9f 93       	push	r25
    646c:	af 93       	push	r26
    646e:	bf 93       	push	r27
    6470:	ef 93       	push	r30
    6472:	ff 93       	push	r31
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    6474:	e0 91 b4 07 	lds	r30, 0x07B4
    6478:	f0 91 b5 07 	lds	r31, 0x07B5
    647c:	30 97       	sbiw	r30, 0x00	; 0
    647e:	11 f0       	breq	.+4      	; 0x6484 <__vector_1+0x32>
    6480:	09 95       	icall
    6482:	04 c0       	rjmp	.+8      	; 0x648c <__vector_1+0x3a>
		    	return NRK_OK;
		    }
    6484:	60 e0       	ldi	r22, 0x00	; 0
    6486:	8a e0       	ldi	r24, 0x0A	; 10
    6488:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <nrk_kernel_error_add>
    648c:	ff 91       	pop	r31
    648e:	ef 91       	pop	r30
    6490:	bf 91       	pop	r27
    6492:	af 91       	pop	r26
    6494:	9f 91       	pop	r25
    6496:	8f 91       	pop	r24
    6498:	7f 91       	pop	r23
    649a:	6f 91       	pop	r22
    649c:	5f 91       	pop	r21
    649e:	4f 91       	pop	r20
    64a0:	3f 91       	pop	r19
    64a2:	2f 91       	pop	r18
    64a4:	0f 90       	pop	r0
    64a6:	0f be       	out	0x3f, r0	; 63
    64a8:	0f 90       	pop	r0
    64aa:	1f 90       	pop	r1
    64ac:	18 95       	reti

000064ae <__vector_9>:
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
		      return 1;
	     
	    case OPEN:  
    64ae:	1f 92       	push	r1
    64b0:	0f 92       	push	r0
    64b2:	0f b6       	in	r0, 0x3f	; 63
    64b4:	0f 92       	push	r0
    64b6:	11 24       	eor	r1, r1
    64b8:	2f 93       	push	r18
    64ba:	3f 93       	push	r19
    64bc:	4f 93       	push	r20
    64be:	5f 93       	push	r21
    64c0:	6f 93       	push	r22
    64c2:	7f 93       	push	r23
    64c4:	8f 93       	push	r24
    64c6:	9f 93       	push	r25
    64c8:	af 93       	push	r26
    64ca:	bf 93       	push	r27
    64cc:	ef 93       	push	r30
    64ce:	ff 93       	push	r31
		    if(is_open==1) return NRK_ERROR;
    64d0:	e0 91 b8 07 	lds	r30, 0x07B8
    64d4:	f0 91 b9 07 	lds	r31, 0x07B9
    64d8:	30 97       	sbiw	r30, 0x00	; 0
    64da:	11 f0       	breq	.+4      	; 0x64e0 <__vector_9+0x32>
    64dc:	09 95       	icall
    64de:	04 c0       	rjmp	.+8      	; 0x64e8 <__vector_9+0x3a>
		    is_open=1; 
		    if(opt&READ_FLAG)
    64e0:	60 e0       	ldi	r22, 0x00	; 0
    64e2:	8a e0       	ldi	r24, 0x0A	; 10
    64e4:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <nrk_kernel_error_add>
    64e8:	ff 91       	pop	r31
    64ea:	ef 91       	pop	r30
    64ec:	bf 91       	pop	r27
    64ee:	af 91       	pop	r26
    64f0:	9f 91       	pop	r25
    64f2:	8f 91       	pop	r24
    64f4:	7f 91       	pop	r23
    64f6:	6f 91       	pop	r22
    64f8:	5f 91       	pop	r21
    64fa:	4f 91       	pop	r20
    64fc:	3f 91       	pop	r19
    64fe:	2f 91       	pop	r18
    6500:	0f 90       	pop	r0
    6502:	0f be       	out	0x3f, r0	; 63
    6504:	0f 90       	pop	r0
    6506:	1f 90       	pop	r1
    6508:	18 95       	reti

0000650a <_nrk_startup_ok>:
#include <nrk_driver.h>
#include <ff_basic_sensor.h>
#include <include.h>
#include <stdio.h>
#include <ulib.h>
#include <nrk_error.h>
    650a:	80 91 b0 00 	lds	r24, 0x00B0
    650e:	90 e0       	ldi	r25, 0x00	; 0
    6510:	81 11       	cpse	r24, r1
    6512:	91 e0       	ldi	r25, 0x01	; 1
    6514:	81 e0       	ldi	r24, 0x01	; 1
    6516:	98 27       	eor	r25, r24
#include <nrk.h>
#include <stdint.h>
    6518:	89 2f       	mov	r24, r25
    651a:	99 27       	eor	r25, r25
    651c:	08 95       	ret

0000651e <update_watchdog>:
#include <basic_rf.h>
#include <nrk_timer.h>

    651e:	08 95       	ret

00006520 <nrk_watchdog_check>:
#define ADC_VREF_VCC() \
   do { \
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)

    6520:	04 b6       	in	r0, 0x34	; 52
    6522:	03 fc       	sbrc	r0, 3
    6524:	03 c0       	rjmp	.+6      	; 0x652c <nrk_watchdog_check+0xc>
    6526:	81 e0       	ldi	r24, 0x01	; 1
    6528:	90 e0       	ldi	r25, 0x00	; 0
    652a:	08 95       	ret
    652c:	8f ef       	ldi	r24, 0xFF	; 255
    652e:	9f ef       	ldi	r25, 0xFF	; 255

#define ADC_VREF_1_1() \
    6530:	08 95       	ret

00006532 <nrk_watchdog_reset>:
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)
    6532:	a8 95       	wdr
    6534:	08 95       	ret

00006536 <nrk_watchdog_disable>:
#include <nrk_driver.h>
#include <ff_basic_sensor.h>
#include <include.h>
#include <stdio.h>
#include <ulib.h>
#include <nrk_error.h>
    6536:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>

#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)
    653a:	a8 95       	wdr
#include <include.h>
#include <stdio.h>
#include <ulib.h>
#include <nrk_error.h>
#include <nrk.h>
#include <stdint.h>
    653c:	84 b7       	in	r24, 0x34	; 52
    653e:	87 7f       	andi	r24, 0xF7	; 247
    6540:	84 bf       	out	0x34, r24	; 52
#include <basic_rf.h>
    6542:	e0 e6       	ldi	r30, 0x60	; 96
    6544:	f0 e0       	ldi	r31, 0x00	; 0
    6546:	80 81       	ld	r24, Z
    6548:	88 61       	ori	r24, 0x18	; 24
    654a:	80 83       	st	Z, r24
#include <nrk_timer.h>
    654c:	10 82       	st	Z, r1

    654e:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
    6552:	08 95       	ret

00006554 <nrk_watchdog_enable>:
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
    6554:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_int_disable>
#define ADC_INIT() \
    6558:	84 b7       	in	r24, 0x34	; 52
    655a:	87 7f       	andi	r24, 0xF7	; 247
    655c:	84 bf       	out	0x34, r24	; 52

#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)
    655e:	a8 95       	wdr
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
    6560:	e0 e6       	ldi	r30, 0x60	; 96
    6562:	f0 e0       	ldi	r31, 0x00	; 0
    6564:	80 81       	ld	r24, Z
    6566:	88 61       	ori	r24, 0x18	; 24
    6568:	80 83       	st	Z, r24
	ADMUX = BM(REFS0);  \
    656a:	8d e0       	ldi	r24, 0x0D	; 13
    656c:	80 83       	st	Z, r24
} while (0)
    656e:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
    6572:	08 95       	ret

00006574 <nrk_battery_save>:
	ADMUX |= BM(REFS1);  \
} while(0)


#define ADC_VREF_2_56() \
   do { \
    6574:	08 95       	ret

00006576 <nrk_sleep>:
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
} while(0)

// Macros for obtaining the latest sample value
    6576:	83 b7       	in	r24, 0x33	; 51
    6578:	81 7f       	andi	r24, 0xF1	; 241
    657a:	86 60       	ori	r24, 0x06	; 6
    657c:	83 bf       	out	0x33, r24	; 51
#define ADC_GET_SAMPLE_10(x) \
    657e:	83 b7       	in	r24, 0x33	; 51
    6580:	81 60       	ori	r24, 0x01	; 1
    6582:	83 bf       	out	0x33, r24	; 51
    6584:	88 95       	sleep
    6586:	83 b7       	in	r24, 0x33	; 51
    6588:	8e 7f       	andi	r24, 0xFE	; 254
    658a:	83 bf       	out	0x33, r24	; 51
    658c:	08 95       	ret

0000658e <nrk_idle>:
x =  ADCL; \
x |= ADCH << 8; \
} while (0)

#define ADC_GET_SAMPLE_8(x) \
do { \
    658e:	83 b7       	in	r24, 0x33	; 51
    6590:	81 7f       	andi	r24, 0xF1	; 241
    6592:	83 bf       	out	0x33, r24	; 51
x = ((uint8_t) ADCL) >> 2; \
    6594:	83 b7       	in	r24, 0x33	; 51
    6596:	81 60       	ori	r24, 0x01	; 1
    6598:	83 bf       	out	0x33, r24	; 51
    659a:	88 95       	sleep
    659c:	83 b7       	in	r24, 0x33	; 51
    659e:	8e 7f       	andi	r24, 0xFE	; 254
    65a0:	83 bf       	out	0x33, r24	; 51
    65a2:	08 95       	ret

000065a4 <nrk_task_set_entry_function>:
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
    65a4:	fc 01       	movw	r30, r24
    65a6:	76 83       	std	Z+6, r23	; 0x06
    65a8:	65 83       	std	Z+5, r22	; 0x05
    65aa:	08 95       	ret

000065ac <nrk_task_stk_init>:
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
    65ac:	fb 01       	movw	r30, r22
    65ae:	da 01       	movw	r26, r20
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
		    if(opt&READ_FLAG)
    65b0:	25 e5       	ldi	r18, 0x55	; 85
    65b2:	2c 93       	st	X, r18
		    }
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
    65b4:	32 97       	sbiw	r30, 0x02	; 2
		    {
		    	return NRK_ERROR;
    65b6:	29 2f       	mov	r18, r25
    65b8:	33 27       	eor	r19, r19
    65ba:	20 83       	st	Z, r18
		    }
    65bc:	81 83       	std	Z+1, r24	; 0x01
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
    65be:	32 97       	sbiw	r30, 0x02	; 2
    65c0:	11 82       	std	Z+1, r1	; 0x01
    65c2:	10 82       	st	Z, r1
		    else return NRK_OK;
    65c4:	32 97       	sbiw	r30, 0x02	; 2
    65c6:	11 82       	std	Z+1, r1	; 0x01
    65c8:	10 82       	st	Z, r1
		
    65ca:	32 97       	sbiw	r30, 0x02	; 2
    65cc:	11 82       	std	Z+1, r1	; 0x01
    65ce:	10 82       	st	Z, r1
	    
    65d0:	32 97       	sbiw	r30, 0x02	; 2
    65d2:	11 82       	std	Z+1, r1	; 0x01
    65d4:	10 82       	st	Z, r1

    65d6:	32 97       	sbiw	r30, 0x02	; 2
    65d8:	11 82       	std	Z+1, r1	; 0x01
    65da:	10 82       	st	Z, r1
             case READ:
    65dc:	32 97       	sbiw	r30, 0x02	; 2
    65de:	11 82       	std	Z+1, r1	; 0x01
    65e0:	10 82       	st	Z, r1
	     	      count=0;
    65e2:	32 97       	sbiw	r30, 0x02	; 2
    65e4:	11 82       	std	Z+1, r1	; 0x01
    65e6:	10 82       	st	Z, r1
		      if(size!=1 && size!=2) return 0;
    65e8:	32 97       	sbiw	r30, 0x02	; 2
    65ea:	11 82       	std	Z+1, r1	; 0x01
    65ec:	10 82       	st	Z, r1
			if(channel!=BAT && channel<7)
			{
    65ee:	32 97       	sbiw	r30, 0x02	; 2
    65f0:	11 82       	std	Z+1, r1	; 0x01
    65f2:	10 82       	st	Z, r1
			      /* Conversion to 8-bit value*/
    65f4:	32 97       	sbiw	r30, 0x02	; 2
    65f6:	11 82       	std	Z+1, r1	; 0x01
    65f8:	10 82       	st	Z, r1
			      uint16_t val=get_adc_val();
    65fa:	32 97       	sbiw	r30, 0x02	; 2
    65fc:	11 82       	std	Z+1, r1	; 0x01
    65fe:	10 82       	st	Z, r1

    6600:	32 97       	sbiw	r30, 0x02	; 2
    6602:	11 82       	std	Z+1, r1	; 0x01
    6604:	10 82       	st	Z, r1
				if(size==2)
    6606:	32 97       	sbiw	r30, 0x02	; 2
    6608:	11 82       	std	Z+1, r1	; 0x01
    660a:	10 82       	st	Z, r1
			      	{
    660c:	32 97       	sbiw	r30, 0x02	; 2
    660e:	11 82       	std	Z+1, r1	; 0x01
    6610:	10 82       	st	Z, r1
					buffer[count]=val  & 0xFF;
    6612:	32 97       	sbiw	r30, 0x02	; 2
    6614:	11 82       	std	Z+1, r1	; 0x01
    6616:	10 82       	st	Z, r1
			      		count++;
    6618:	32 97       	sbiw	r30, 0x02	; 2
    661a:	11 82       	std	Z+1, r1	; 0x01
    661c:	10 82       	st	Z, r1
			      		buffer[count]=(val>>8)  & 0xFF;
    661e:	32 97       	sbiw	r30, 0x02	; 2
    6620:	11 82       	std	Z+1, r1	; 0x01
    6622:	10 82       	st	Z, r1
				}

				if(size==1)
			      	{
    6624:	cf 01       	movw	r24, r30
    6626:	08 95       	ret

00006628 <nrk_stack_pointer_init>:
			{
			uint16_t tmp;
			tmp=read_voltage_status();
			if(size==2)
				{
					buffer[count]=tmp & 0xFF;
    6628:	85 e5       	ldi	r24, 0x55	; 85
    662a:	80 93 7e 21 	sts	0x217E, r24
					count++;
					buffer[count]=(tmp>>8) & 0xFF;
    662e:	ee ef       	ldi	r30, 0xFE	; 254
    6630:	f1 e2       	ldi	r31, 0x21	; 33
    6632:	f0 93 ff 04 	sts	0x04FF, r31
    6636:	e0 93 fe 04 	sts	0x04FE, r30
				}
			if(size==1)
    663a:	2d ee       	ldi	r18, 0xED	; 237
    663c:	3e e1       	ldi	r19, 0x1E	; 30
    663e:	83 2f       	mov	r24, r19
    6640:	99 27       	eor	r25, r25
    6642:	80 83       	st	Z, r24
				{
    6644:	20 93 ff 21 	sts	0x21FF, r18
    6648:	08 95       	ret

0000664a <nrk_stack_pointer_restore>:
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
				if(val<min)min=val;
    664a:	2d ee       	ldi	r18, 0xED	; 237
    664c:	3e e1       	ldi	r19, 0x1E	; 30
    664e:	83 2f       	mov	r24, r19
    6650:	99 27       	eor	r25, r25
    6652:	80 93 fe 21 	sts	0x21FE, r24
				if(val>max)max=val;
    6656:	20 93 ff 21 	sts	0x21FF, r18
    665a:	08 95       	ret

0000665c <nrk_target_start>:
				nrk_spin_wait_us(125);	
				}
			 	val=max-min;	
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
    665c:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <_nrk_setup_timer>
			      		count++;
    6660:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <nrk_int_enable>
    6664:	08 95       	ret

00006666 <nrk_task_set_stk>:
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;
    6666:	ef 92       	push	r14
    6668:	ff 92       	push	r15
    666a:	0f 93       	push	r16
    666c:	1f 93       	push	r17
    666e:	cf 93       	push	r28
    6670:	df 93       	push	r29
    6672:	7c 01       	movw	r14, r24
    6674:	8b 01       	movw	r16, r22
    6676:	ea 01       	movw	r28, r20

     switch(action)
    6678:	40 32       	cpi	r20, 0x20	; 32
    667a:	51 05       	cpc	r21, r1
    667c:	18 f4       	brcc	.+6      	; 0x6684 <nrk_task_set_stk+0x1e>
    667e:	81 e1       	ldi	r24, 0x11	; 17
    6680:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <nrk_error_add>
     {
    6684:	c8 01       	movw	r24, r16
    6686:	01 97       	sbiw	r24, 0x01	; 1
    6688:	8c 0f       	add	r24, r28
    668a:	9d 1f       	adc	r25, r29
    668c:	f7 01       	movw	r30, r14
    668e:	92 83       	std	Z+2, r25	; 0x02
    6690:	81 83       	std	Z+1, r24	; 0x01
            case INIT: 
    6692:	14 83       	std	Z+4, r17	; 0x04
    6694:	03 83       	std	Z+3, r16	; 0x03
    6696:	df 91       	pop	r29
    6698:	cf 91       	pop	r28
    669a:	1f 91       	pop	r17
    669c:	0f 91       	pop	r16
    669e:	ff 90       	pop	r15
    66a0:	ef 90       	pop	r14
    66a2:	08 95       	ret

000066a4 <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    66a4:	a0 91 86 07 	lds	r26, 0x0786
	lds r27,nrk_high_ready_TCB+1
    66a8:	b0 91 87 07 	lds	r27, 0x0787

    	;x points to &OSTCB[x]
    
	ld r28,x+
    66ac:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    66ae:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    66b0:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    66b2:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    66b4:	ff 91       	pop	r31
	pop r30
    66b6:	ef 91       	pop	r30
	pop r29
    66b8:	df 91       	pop	r29
	pop r28
    66ba:	cf 91       	pop	r28
	pop r27
    66bc:	bf 91       	pop	r27
	pop r26
    66be:	af 91       	pop	r26
	pop r25
    66c0:	9f 91       	pop	r25
	pop r24			
    66c2:	8f 91       	pop	r24
	pop r23
    66c4:	7f 91       	pop	r23
	pop r22
    66c6:	6f 91       	pop	r22
	pop r21
    66c8:	5f 91       	pop	r21
	pop r20	
    66ca:	4f 91       	pop	r20
	pop r19
    66cc:	3f 91       	pop	r19
	pop r18	
    66ce:	2f 91       	pop	r18
	pop r17
    66d0:	1f 91       	pop	r17
	pop r16
    66d2:	0f 91       	pop	r16
	pop r15
    66d4:	ff 90       	pop	r15
	pop r14
    66d6:	ef 90       	pop	r14
	pop r13
    66d8:	df 90       	pop	r13
	pop r12
    66da:	cf 90       	pop	r12
	pop r11
    66dc:	bf 90       	pop	r11
	pop r10
    66de:	af 90       	pop	r10
	pop r9
    66e0:	9f 90       	pop	r9
	pop r8
    66e2:	8f 90       	pop	r8
	pop r7
    66e4:	7f 90       	pop	r7
	pop r6
    66e6:	6f 90       	pop	r6
	pop r5
    66e8:	5f 90       	pop	r5
	pop r4
    66ea:	4f 90       	pop	r4
	pop r3
    66ec:	3f 90       	pop	r3
	pop r2
    66ee:	2f 90       	pop	r2
	pop r1
    66f0:	1f 90       	pop	r1
	pop r0
    66f2:	0f 90       	pop	r0
	out __SREG__, r0
    66f4:	0f be       	out	0x3f, r0	; 63
	pop r0	
    66f6:	0f 90       	pop	r0
	   
    	reti 
    66f8:	18 95       	reti

000066fa <vfprintf>:
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
		    }
    66fa:	ab e0       	ldi	r26, 0x0B	; 11
    66fc:	b0 e0       	ldi	r27, 0x00	; 0
    66fe:	e3 e8       	ldi	r30, 0x83	; 131
    6700:	f3 e3       	ldi	r31, 0x33	; 51
    6702:	0c 94 38 37 	jmp	0x6e70	; 0x6e70 <__prologue_saves__>
    6706:	4c 01       	movw	r8, r24
    6708:	6b 01       	movw	r12, r22
    670a:	7a 01       	movw	r14, r20
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
    670c:	fc 01       	movw	r30, r24
    670e:	17 82       	std	Z+7, r1	; 0x07
    6710:	16 82       	std	Z+6, r1	; 0x06
		    {
		    	return NRK_ERROR;
    6712:	83 81       	ldd	r24, Z+3	; 0x03
    6714:	81 fd       	sbrc	r24, 1
    6716:	08 c0       	rjmp	.+16     	; 0x6728 <vfprintf+0x2e>
    6718:	8f ef       	ldi	r24, 0xFF	; 255
    671a:	9f ef       	ldi	r25, 0xFF	; 255
    671c:	1a c1       	rjmp	.+564    	; 0x6952 <vfprintf+0x258>
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
				if(val<min)min=val;
    671e:	22 e0       	ldi	r18, 0x02	; 2
    6720:	30 e0       	ldi	r19, 0x00	; 0
    6722:	e2 0e       	add	r14, r18
    6724:	f3 1e       	adc	r15, r19
    6726:	0c c0       	rjmp	.+24     	; 0x6740 <vfprintf+0x46>
		
	    

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
    6728:	94 e9       	ldi	r25, 0x94	; 148
    672a:	29 2e       	mov	r2, r25
    672c:	93 e0       	ldi	r25, 0x03	; 3
    672e:	39 2e       	mov	r3, r25
				else
				   ADC_VREF_2_56();	
				ADC_SET_CHANNEL (channel);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;
			  }
    6730:	3e 01       	movw	r6, r28
    6732:	08 94       	sec
    6734:	61 1c       	adc	r6, r1
    6736:	71 1c       	adc	r7, r1
    6738:	8d e8       	ldi	r24, 0x8D	; 141
    673a:	48 2e       	mov	r4, r24
    673c:	83 e0       	ldi	r24, 0x03	; 3
    673e:	58 2e       	mov	r5, r24
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
		    else return NRK_OK;
		
	    
    6740:	f4 01       	movw	r30, r8
    6742:	03 81       	ldd	r16, Z+3	; 0x03
    6744:	f6 01       	movw	r30, r12
    6746:	03 fd       	sbrc	r16, 3
    6748:	85 91       	lpm	r24, Z+
    674a:	03 ff       	sbrs	r16, 3
    674c:	81 91       	ld	r24, Z+
    674e:	6f 01       	movw	r12, r30

    6750:	88 23       	and	r24, r24
    6752:	09 f4       	brne	.+2      	; 0x6756 <vfprintf+0x5c>
    6754:	fb c0       	rjmp	.+502    	; 0x694c <vfprintf+0x252>
             case READ:
    6756:	85 32       	cpi	r24, 0x25	; 37
    6758:	59 f4       	brne	.+22     	; 0x6770 <vfprintf+0x76>
	     	      count=0;
    675a:	03 fd       	sbrc	r16, 3
    675c:	65 91       	lpm	r22, Z+
    675e:	03 ff       	sbrs	r16, 3
    6760:	61 91       	ld	r22, Z+
    6762:	6f 01       	movw	r12, r30
		      if(size!=1 && size!=2) return 0;
    6764:	65 32       	cpi	r22, 0x25	; 37
    6766:	19 f0       	breq	.+6      	; 0x676e <vfprintf+0x74>
    6768:	16 2f       	mov	r17, r22
    676a:	bb 24       	eor	r11, r11
    676c:	1c c0       	rjmp	.+56     	; 0x67a6 <vfprintf+0xac>
    676e:	85 e2       	ldi	r24, 0x25	; 37
			if(channel!=BAT && channel<7)
			{
    6770:	b4 01       	movw	r22, r8
    6772:	99 27       	eor	r25, r25
    6774:	2a c0       	rjmp	.+84     	; 0x67ca <vfprintf+0xd0>
			      uint16_t val=get_adc_val();

				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
    6776:	11 23       	and	r17, r17
    6778:	59 f1       	breq	.+86     	; 0x67d0 <vfprintf+0xd6>
    677a:	61 2f       	mov	r22, r17
    677c:	77 27       	eor	r23, r23
    677e:	c1 01       	movw	r24, r2
    6780:	0e 94 ad 34 	call	0x695a	; 0x695a <strchr_P>
    6784:	89 2b       	or	r24, r25
    6786:	49 f4       	brne	.+18     	; 0x679a <vfprintf+0xa0>
			      		buffer[count]=(val>>8)  & 0xFF;
				}
    6788:	13 32       	cpi	r17, 0x23	; 35
    678a:	19 f4       	brne	.+6      	; 0x6792 <vfprintf+0x98>

    678c:	f0 e1       	ldi	r31, 0x10	; 16
    678e:	bf 2a       	or	r11, r31
    6790:	04 c0       	rjmp	.+8      	; 0x679a <vfprintf+0xa0>
				if(size==1)
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
    6792:	1c 36       	cpi	r17, 0x6C	; 108
    6794:	61 f4       	brne	.+24     	; 0x67ae <vfprintf+0xb4>
				}
    6796:	20 e8       	ldi	r18, 0x80	; 128
    6798:	b2 2a       	or	r11, r18
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();

				if(size==2)
			      	{
    679a:	f6 01       	movw	r30, r12
    679c:	03 fd       	sbrc	r16, 3
    679e:	15 91       	lpm	r17, Z+
    67a0:	03 ff       	sbrs	r16, 3
    67a2:	11 91       	ld	r17, Z+
    67a4:	6f 01       	movw	r12, r30
			if(channel!=BAT && channel<7)
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();

				if(size==2)
    67a6:	b7 fe       	sbrs	r11, 7
    67a8:	e6 cf       	rjmp	.-52     	; 0x6776 <vfprintf+0x7c>
			} else if(channel==BAT)
			{
			uint16_t tmp;
			tmp=read_voltage_status();
			if(size==2)
				{
    67aa:	11 23       	and	r17, r17
    67ac:	89 f0       	breq	.+34     	; 0x67d0 <vfprintf+0xd6>
    67ae:	61 2f       	mov	r22, r17
    67b0:	77 27       	eor	r23, r23
    67b2:	c2 01       	movw	r24, r4
    67b4:	0e 94 ad 34 	call	0x695a	; 0x695a <strchr_P>
    67b8:	89 2b       	or	r24, r25
    67ba:	51 f0       	breq	.+20     	; 0x67d0 <vfprintf+0xd6>
					buffer[count]=tmp & 0xFF;
    67bc:	24 e0       	ldi	r18, 0x04	; 4
    67be:	30 e0       	ldi	r19, 0x00	; 0
    67c0:	e2 0e       	add	r14, r18
    67c2:	f3 1e       	adc	r15, r19
					count++;
    67c4:	b4 01       	movw	r22, r8
    67c6:	8f e3       	ldi	r24, 0x3F	; 63
    67c8:	90 e0       	ldi	r25, 0x00	; 0
    67ca:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
    67ce:	b8 cf       	rjmp	.-144    	; 0x6740 <vfprintf+0x46>
				}
			if(size==1)
				{
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
    67d0:	13 36       	cpi	r17, 0x63	; 99
    67d2:	29 f0       	breq	.+10     	; 0x67de <vfprintf+0xe4>
    67d4:	13 37       	cpi	r17, 0x73	; 115
    67d6:	81 f0       	breq	.+32     	; 0x67f8 <vfprintf+0xfe>
    67d8:	13 35       	cpi	r17, 0x53	; 83
    67da:	f9 f4       	brne	.+62     	; 0x681a <vfprintf+0x120>
    67dc:	0b c0       	rjmp	.+22     	; 0x67f4 <vfprintf+0xfa>
			{
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
    67de:	87 01       	movw	r16, r14
    67e0:	0e 5f       	subi	r16, 0xFE	; 254
    67e2:	1f 4f       	sbci	r17, 0xFF	; 255
    67e4:	b4 01       	movw	r22, r8
    67e6:	f7 01       	movw	r30, r14
    67e8:	80 81       	ld	r24, Z
    67ea:	91 81       	ldd	r25, Z+1	; 0x01
    67ec:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
    67f0:	78 01       	movw	r14, r16
    67f2:	a6 cf       	rjmp	.-180    	; 0x6740 <vfprintf+0x46>
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
    67f4:	f1 e0       	ldi	r31, 0x01	; 1
    67f6:	bf 2a       	or	r11, r31
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
				if(val<min)min=val;
    67f8:	f7 01       	movw	r30, r14
    67fa:	00 81       	ld	r16, Z
    67fc:	11 81       	ldd	r17, Z+1	; 0x01
    67fe:	04 c0       	rjmp	.+8      	; 0x6808 <vfprintf+0x10e>
				if(val>max)max=val;
				// 8 Khz
    6800:	b4 01       	movw	r22, r8
    6802:	99 27       	eor	r25, r25
    6804:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
			        min=1025;
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
				if(val<min)min=val;
				if(val>max)max=val;
    6808:	f8 01       	movw	r30, r16
    680a:	b0 fc       	sbrc	r11, 0
    680c:	85 91       	lpm	r24, Z+
    680e:	b0 fe       	sbrs	r11, 0
    6810:	81 91       	ld	r24, Z+
    6812:	8f 01       	movw	r16, r30
    6814:	88 23       	and	r24, r24
    6816:	a1 f7       	brne	.-24     	; 0x6800 <vfprintf+0x106>
    6818:	82 cf       	rjmp	.-252    	; 0x671e <vfprintf+0x24>
				// 8 Khz
				nrk_spin_wait_us(125);	
				}
			 	val=max-min;	
				if(size==2)
			      	{
    681a:	14 36       	cpi	r17, 0x64	; 100
    681c:	11 f0       	breq	.+4      	; 0x6822 <vfprintf+0x128>
    681e:	19 36       	cpi	r17, 0x69	; 105
    6820:	49 f5       	brne	.+82     	; 0x6874 <vfprintf+0x17a>
					buffer[count]=val  & 0xFF;
    6822:	b7 fe       	sbrs	r11, 7
    6824:	0a c0       	rjmp	.+20     	; 0x683a <vfprintf+0x140>
    6826:	f7 01       	movw	r30, r14
    6828:	60 81       	ld	r22, Z
    682a:	71 81       	ldd	r23, Z+1	; 0x01
    682c:	82 81       	ldd	r24, Z+2	; 0x02
    682e:	93 81       	ldd	r25, Z+3	; 0x03
    6830:	24 e0       	ldi	r18, 0x04	; 4
    6832:	30 e0       	ldi	r19, 0x00	; 0
    6834:	e2 0e       	add	r14, r18
    6836:	f3 1e       	adc	r15, r19
    6838:	0d c0       	rjmp	.+26     	; 0x6854 <vfprintf+0x15a>
    683a:	f7 01       	movw	r30, r14
    683c:	80 81       	ld	r24, Z
    683e:	91 81       	ldd	r25, Z+1	; 0x01
    6840:	9c 01       	movw	r18, r24
    6842:	b9 01       	movw	r22, r18
    6844:	88 27       	eor	r24, r24
    6846:	77 fd       	sbrc	r23, 7
    6848:	80 95       	com	r24
    684a:	98 2f       	mov	r25, r24
    684c:	42 e0       	ldi	r20, 0x02	; 2
    684e:	50 e0       	ldi	r21, 0x00	; 0
    6850:	e4 0e       	add	r14, r20
    6852:	f5 1e       	adc	r15, r21
			      		count++;
    6854:	5f ee       	ldi	r21, 0xEF	; 239
    6856:	b5 22       	and	r11, r21
			      		buffer[count]=(val>>8)  & 0xFF;
    6858:	97 ff       	sbrs	r25, 7
    685a:	09 c0       	rjmp	.+18     	; 0x686e <vfprintf+0x174>
				}
    685c:	90 95       	com	r25
    685e:	80 95       	com	r24
    6860:	70 95       	com	r23
    6862:	61 95       	neg	r22
    6864:	7f 4f       	sbci	r23, 0xFF	; 255
    6866:	8f 4f       	sbci	r24, 0xFF	; 255
    6868:	9f 4f       	sbci	r25, 0xFF	; 255

				if(size==1)
			      	{
    686a:	e0 e4       	ldi	r30, 0x40	; 64
    686c:	be 2a       	or	r11, r30
			      		buffer[count]=(val>>2)  & 0xFF;
				}
    686e:	2a e0       	ldi	r18, 0x0A	; 10
    6870:	30 e0       	ldi	r19, 0x00	; 0
    6872:	3a c0       	rjmp	.+116    	; 0x68e8 <vfprintf+0x1ee>

			}
			
		      count++;
                      return count;
    6874:	10 37       	cpi	r17, 0x70	; 112
    6876:	b1 f0       	breq	.+44     	; 0x68a4 <vfprintf+0x1aa>
    6878:	11 37       	cpi	r17, 0x71	; 113
    687a:	30 f4       	brcc	.+12     	; 0x6888 <vfprintf+0x18e>
    687c:	18 35       	cpi	r17, 0x58	; 88
    687e:	c9 f0       	breq	.+50     	; 0x68b2 <vfprintf+0x1b8>
    6880:	1f 36       	cpi	r17, 0x6F	; 111
    6882:	09 f0       	breq	.+2      	; 0x6886 <vfprintf+0x18c>
    6884:	63 c0       	rjmp	.+198    	; 0x694c <vfprintf+0x252>
    6886:	06 c0       	rjmp	.+12     	; 0x6894 <vfprintf+0x19a>
    6888:	15 37       	cpi	r17, 0x75	; 117
    688a:	39 f0       	breq	.+14     	; 0x689a <vfprintf+0x1a0>
    688c:	18 37       	cpi	r17, 0x78	; 120
    688e:	09 f0       	breq	.+2      	; 0x6892 <vfprintf+0x198>
    6890:	5d c0       	rjmp	.+186    	; 0x694c <vfprintf+0x252>
    6892:	0a c0       	rjmp	.+20     	; 0x68a8 <vfprintf+0x1ae>
    6894:	28 e0       	ldi	r18, 0x08	; 8
    6896:	30 e0       	ldi	r19, 0x00	; 0
    6898:	10 c0       	rjmp	.+32     	; 0x68ba <vfprintf+0x1c0>

             case CLOSE:
    689a:	ff ee       	ldi	r31, 0xEF	; 239
    689c:	bf 22       	and	r11, r31
    689e:	2a e0       	ldi	r18, 0x0A	; 10
    68a0:	30 e0       	ldi	r19, 0x00	; 0
    68a2:	0b c0       	rjmp	.+22     	; 0x68ba <vfprintf+0x1c0>
			PORTF |= PWR_CTRL_MASK;
		    	is_open=0; 
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
    68a4:	20 e1       	ldi	r18, 0x10	; 16
    68a6:	b2 2a       	or	r11, r18
			if(key==SENSOR_SELECT) return channel;
	     		return NRK_ERROR;
			
    68a8:	34 e2       	ldi	r19, 0x24	; 36
    68aa:	b3 2a       	or	r11, r19
    68ac:	20 e1       	ldi	r18, 0x10	; 16
    68ae:	30 e0       	ldi	r19, 0x00	; 0
    68b0:	04 c0       	rjmp	.+8      	; 0x68ba <vfprintf+0x1c0>
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
			{
    68b2:	44 e0       	ldi	r20, 0x04	; 4
    68b4:	b4 2a       	or	r11, r20
    68b6:	20 e1       	ldi	r18, 0x10	; 16
    68b8:	32 e0       	ldi	r19, 0x02	; 2
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
			  {
    68ba:	b7 fe       	sbrs	r11, 7
    68bc:	0a c0       	rjmp	.+20     	; 0x68d2 <vfprintf+0x1d8>
    68be:	f7 01       	movw	r30, r14
    68c0:	60 81       	ld	r22, Z
    68c2:	71 81       	ldd	r23, Z+1	; 0x01
    68c4:	82 81       	ldd	r24, Z+2	; 0x02
    68c6:	93 81       	ldd	r25, Z+3	; 0x03
    68c8:	44 e0       	ldi	r20, 0x04	; 4
    68ca:	50 e0       	ldi	r21, 0x00	; 0
    68cc:	e4 0e       	add	r14, r20
    68ce:	f5 1e       	adc	r15, r21
    68d0:	0b c0       	rjmp	.+22     	; 0x68e8 <vfprintf+0x1ee>
    68d2:	f7 01       	movw	r30, r14
    68d4:	80 81       	ld	r24, Z
    68d6:	91 81       	ldd	r25, Z+1	; 0x01
    68d8:	ac 01       	movw	r20, r24
    68da:	ba 01       	movw	r22, r20
    68dc:	88 27       	eor	r24, r24
    68de:	99 27       	eor	r25, r25
    68e0:	e2 e0       	ldi	r30, 0x02	; 2
    68e2:	f0 e0       	ldi	r31, 0x00	; 0
    68e4:	ee 0e       	add	r14, r30
    68e6:	ff 1e       	adc	r15, r31
    68e8:	a3 01       	movw	r20, r6
    68ea:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <__ultoa_invert>
    68ee:	a8 2e       	mov	r10, r24
    68f0:	a6 18       	sub	r10, r6

			  } else
			  {
				if(value>7) 
				{
					_nrk_errno_set(1);
    68f2:	0b 2d       	mov	r16, r11
    68f4:	11 27       	eor	r17, r17
    68f6:	06 ff       	sbrs	r16, 6
    68f8:	05 c0       	rjmp	.+10     	; 0x6904 <vfprintf+0x20a>
					return NRK_ERROR;
    68fa:	b4 01       	movw	r22, r8
    68fc:	8d e2       	ldi	r24, 0x2D	; 45
    68fe:	90 e0       	ldi	r25, 0x00	; 0
    6900:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
				}
    6904:	04 ff       	sbrs	r16, 4
    6906:	15 c0       	rjmp	.+42     	; 0x6932 <vfprintf+0x238>
    6908:	fe 01       	movw	r30, r28
    690a:	ea 0d       	add	r30, r10
    690c:	f1 1d       	adc	r31, r1
    690e:	80 81       	ld	r24, Z
    6910:	80 33       	cpi	r24, 0x30	; 48
    6912:	79 f0       	breq	.+30     	; 0x6932 <vfprintf+0x238>
				channel=value;
    6914:	b4 01       	movw	r22, r8
    6916:	80 e3       	ldi	r24, 0x30	; 48
    6918:	90 e0       	ldi	r25, 0x00	; 0
    691a:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
				if(channel==LIGHT)
    691e:	02 ff       	sbrs	r16, 2
    6920:	08 c0       	rjmp	.+16     	; 0x6932 <vfprintf+0x238>
				   ADC_VREF_VCC();	
				else
				   ADC_VREF_2_56();	
				ADC_SET_CHANNEL (channel);
    6922:	00 72       	andi	r16, 0x20	; 32
    6924:	10 70       	andi	r17, 0x00	; 0
    6926:	b4 01       	movw	r22, r8
    6928:	c8 01       	movw	r24, r16
    692a:	88 5a       	subi	r24, 0xA8	; 168
    692c:	9f 4f       	sbci	r25, 0xFF	; 255
    692e:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;
			  }
    6932:	aa 94       	dec	r10
    6934:	f3 01       	movw	r30, r6
    6936:	ea 0d       	add	r30, r10
    6938:	f1 1d       	adc	r31, r1
    693a:	80 81       	ld	r24, Z
    693c:	b4 01       	movw	r22, r8
    693e:	99 27       	eor	r25, r25
    6940:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <fputc>
			}
    6944:	aa 20       	and	r10, r10
    6946:	09 f4       	brne	.+2      	; 0x694a <vfprintf+0x250>
    6948:	fb ce       	rjmp	.-522    	; 0x6740 <vfprintf+0x46>
    694a:	f3 cf       	rjmp	.-26     	; 0x6932 <vfprintf+0x238>
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
	}
    694c:	f4 01       	movw	r30, r8
    694e:	86 81       	ldd	r24, Z+6	; 0x06
    6950:	97 81       	ldd	r25, Z+7	; 0x07
    6952:	e2 e1       	ldi	r30, 0x12	; 18
    6954:	2b 96       	adiw	r28, 0x0b	; 11
    6956:	0c 94 54 37 	jmp	0x6ea8	; 0x6ea8 <__epilogue_restores__>

0000695a <strchr_P>:
    695a:	fc 01       	movw	r30, r24
    695c:	05 90       	lpm	r0, Z+
    695e:	06 16       	cp	r0, r22
    6960:	21 f0       	breq	.+8      	; 0x696a <strchr_P+0x10>
    6962:	00 20       	and	r0, r0
    6964:	d9 f7       	brne	.-10     	; 0x695c <strchr_P+0x2>
    6966:	c0 01       	movw	r24, r0
    6968:	08 95       	ret
    696a:	31 97       	sbiw	r30, 0x01	; 1
    696c:	cf 01       	movw	r24, r30
    696e:	08 95       	ret

00006970 <strcpy>:
    6970:	fb 01       	movw	r30, r22
    6972:	dc 01       	movw	r26, r24
    6974:	01 90       	ld	r0, Z+
    6976:	0d 92       	st	X+, r0
    6978:	00 20       	and	r0, r0
    697a:	e1 f7       	brne	.-8      	; 0x6974 <strcpy+0x4>
    697c:	08 95       	ret

0000697e <fdevopen>:
} while(0)

// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
do { \
x =  ADCL; \
    697e:	ef 92       	push	r14
    6980:	ff 92       	push	r15
    6982:	0f 93       	push	r16
    6984:	1f 93       	push	r17
    6986:	cf 93       	push	r28
    6988:	df 93       	push	r29
    698a:	8c 01       	movw	r16, r24
    698c:	7b 01       	movw	r14, r22
x |= ADCH << 8; \
} while (0)

    698e:	89 2b       	or	r24, r25
    6990:	11 f4       	brne	.+4      	; 0x6996 <fdevopen+0x18>
    6992:	67 2b       	or	r22, r23
    6994:	d1 f1       	breq	.+116    	; 0x6a0a <fdevopen+0x8c>
#define ADC_GET_SAMPLE_8(x) \
do { \
x = ((uint8_t) ADCL) >> 2; \
    6996:	6e e0       	ldi	r22, 0x0E	; 14
    6998:	70 e0       	ldi	r23, 0x00	; 0
    699a:	81 e0       	ldi	r24, 0x01	; 1
    699c:	90 e0       	ldi	r25, 0x00	; 0
    699e:	0e 94 af 35 	call	0x6b5e	; 0x6b5e <calloc>
    69a2:	fc 01       	movw	r30, r24
    69a4:	00 97       	sbiw	r24, 0x00	; 0
    69a6:	89 f1       	breq	.+98     	; 0x6a0a <fdevopen+0x8c>
    69a8:	dc 01       	movw	r26, r24
x |= ((int8_t) ADCH) << 6; \
} while (0)

    69aa:	80 e8       	ldi	r24, 0x80	; 128
    69ac:	83 83       	std	Z+3, r24	; 0x03
uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
    69ae:	e1 14       	cp	r14, r1
    69b0:	f1 04       	cpc	r15, r1
    69b2:	71 f0       	breq	.+28     	; 0x69d0 <fdevopen+0x52>
{
    69b4:	f3 86       	std	Z+11, r15	; 0x0b
    69b6:	e2 86       	std	Z+10, r14	; 0x0a
uint8_t count=0;
    69b8:	81 e8       	ldi	r24, 0x81	; 129
    69ba:	83 83       	std	Z+3, r24	; 0x03
// key and value get passed as opt and size
    69bc:	80 91 ba 07 	lds	r24, 0x07BA
    69c0:	90 91 bb 07 	lds	r25, 0x07BB
    69c4:	89 2b       	or	r24, r25
    69c6:	21 f4       	brne	.+8      	; 0x69d0 <fdevopen+0x52>
uint8_t key=opt;
    69c8:	f0 93 bb 07 	sts	0x07BB, r31
    69cc:	e0 93 ba 07 	sts	0x07BA, r30
uint8_t value=size;

     switch(action)
    69d0:	01 15       	cp	r16, r1
    69d2:	11 05       	cpc	r17, r1
    69d4:	e1 f0       	breq	.+56     	; 0x6a0e <fdevopen+0x90>
     {
    69d6:	11 87       	std	Z+9, r17	; 0x09
    69d8:	00 87       	std	Z+8, r16	; 0x08
            case INIT: 
    69da:	83 81       	ldd	r24, Z+3	; 0x03
    69dc:	82 60       	ori	r24, 0x02	; 2
    69de:	83 83       	std	Z+3, r24	; 0x03
			// Set the pwr ctrl pin as output
    69e0:	80 91 bc 07 	lds	r24, 0x07BC
    69e4:	90 91 bd 07 	lds	r25, 0x07BD
    69e8:	89 2b       	or	r24, r25
    69ea:	89 f4       	brne	.+34     	; 0x6a0e <fdevopen+0x90>
  			DDRF = PWR_CTRL_MASK;
    69ec:	f0 93 bd 07 	sts	0x07BD, r31
    69f0:	e0 93 bc 07 	sts	0x07BC, r30
			PORTF |= PWR_CTRL_MASK;
    69f4:	80 91 be 07 	lds	r24, 0x07BE
    69f8:	90 91 bf 07 	lds	r25, 0x07BF
    69fc:	89 2b       	or	r24, r25
    69fe:	39 f4       	brne	.+14     	; 0x6a0e <fdevopen+0x90>
	     		init_adc();  
    6a00:	f0 93 bf 07 	sts	0x07BF, r31
    6a04:	e0 93 be 07 	sts	0x07BE, r30
    6a08:	02 c0       	rjmp	.+4      	; 0x6a0e <fdevopen+0x90>
    6a0a:	a0 e0       	ldi	r26, 0x00	; 0
    6a0c:	b0 e0       	ldi	r27, 0x00	; 0
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    6a0e:	cd 01       	movw	r24, r26
    6a10:	e6 e0       	ldi	r30, 0x06	; 6
    6a12:	cd b7       	in	r28, 0x3d	; 61
    6a14:	de b7       	in	r29, 0x3e	; 62
    6a16:	0c 94 60 37 	jmp	0x6ec0	; 0x6ec0 <__epilogue_restores__+0x18>

00006a1a <fputc>:
#include <ulib.h>
#include <nrk_error.h>
#include <nrk.h>
#include <stdint.h>
#include <basic_rf.h>
#include <nrk_timer.h>
    6a1a:	0f 93       	push	r16
    6a1c:	1f 93       	push	r17
    6a1e:	cf 93       	push	r28
    6a20:	df 93       	push	r29
    6a22:	8c 01       	movw	r16, r24
    6a24:	eb 01       	movw	r28, r22

#define ADC_STARTUP_DELAY  1000
    6a26:	8b 81       	ldd	r24, Y+3	; 0x03
    6a28:	99 27       	eor	r25, r25
    6a2a:	81 ff       	sbrs	r24, 1
    6a2c:	1b c0       	rjmp	.+54     	; 0x6a64 <fputc+0x4a>
#define ADC_SETUP_DELAY  200

uint8_t channel;
    6a2e:	82 ff       	sbrs	r24, 2
    6a30:	0d c0       	rjmp	.+26     	; 0x6a4c <fputc+0x32>
uint8_t is_open;
    6a32:	2e 81       	ldd	r18, Y+6	; 0x06
    6a34:	3f 81       	ldd	r19, Y+7	; 0x07
    6a36:	8c 81       	ldd	r24, Y+4	; 0x04
    6a38:	9d 81       	ldd	r25, Y+5	; 0x05
    6a3a:	28 17       	cp	r18, r24
    6a3c:	39 07       	cpc	r19, r25
    6a3e:	64 f4       	brge	.+24     	; 0x6a58 <fputc+0x3e>

    6a40:	e8 81       	ld	r30, Y
    6a42:	f9 81       	ldd	r31, Y+1	; 0x01
    6a44:	01 93       	st	Z+, r16
    6a46:	f9 83       	std	Y+1, r31	; 0x01
    6a48:	e8 83       	st	Y, r30
    6a4a:	06 c0       	rjmp	.+12     	; 0x6a58 <fputc+0x3e>
// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
    6a4c:	e8 85       	ldd	r30, Y+8	; 0x08
    6a4e:	f9 85       	ldd	r31, Y+9	; 0x09
    6a50:	80 2f       	mov	r24, r16
    6a52:	09 95       	icall
    6a54:	89 2b       	or	r24, r25
    6a56:	31 f4       	brne	.+12     	; 0x6a64 <fputc+0x4a>
	ADMUX = BM(REFS0);  \
    6a58:	8e 81       	ldd	r24, Y+6	; 0x06
    6a5a:	9f 81       	ldd	r25, Y+7	; 0x07
    6a5c:	01 96       	adiw	r24, 0x01	; 1
    6a5e:	9f 83       	std	Y+7, r25	; 0x07
    6a60:	8e 83       	std	Y+6, r24	; 0x06
    6a62:	02 c0       	rjmp	.+4      	; 0x6a68 <fputc+0x4e>
} while (0)
    6a64:	0f ef       	ldi	r16, 0xFF	; 255
    6a66:	1f ef       	ldi	r17, 0xFF	; 255

#define ADC_VREF_VCC() \
   do { \
	ADMUX &= ~(BM(REFS1));  \
    6a68:	c8 01       	movw	r24, r16
    6a6a:	df 91       	pop	r29
    6a6c:	cf 91       	pop	r28
    6a6e:	1f 91       	pop	r17
    6a70:	0f 91       	pop	r16
    6a72:	08 95       	ret

00006a74 <printf>:
#include <stdio.h>
#include <ulib.h>
#include <nrk_error.h>
#include <nrk.h>
#include <stdint.h>
#include <basic_rf.h>
    6a74:	a2 e0       	ldi	r26, 0x02	; 2
    6a76:	b0 e0       	ldi	r27, 0x00	; 0
    6a78:	e0 e4       	ldi	r30, 0x40	; 64
    6a7a:	f5 e3       	ldi	r31, 0x35	; 53
    6a7c:	0c 94 48 37 	jmp	0x6e90	; 0x6e90 <__prologue_saves__+0x20>
    6a80:	fe 01       	movw	r30, r28
    6a82:	37 96       	adiw	r30, 0x07	; 7
    6a84:	61 91       	ld	r22, Z+
    6a86:	71 91       	ld	r23, Z+
#include <nrk_timer.h>

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200
    6a88:	fa 83       	std	Y+2, r31	; 0x02
    6a8a:	e9 83       	std	Y+1, r30	; 0x01

    6a8c:	af 01       	movw	r20, r30
    6a8e:	80 91 bc 07 	lds	r24, 0x07BC
    6a92:	90 91 bd 07 	lds	r25, 0x07BD
    6a96:	0e 94 7d 33 	call	0x66fa	; 0x66fa <vfprintf>
    6a9a:	e2 e0       	ldi	r30, 0x02	; 2
    6a9c:	22 96       	adiw	r28, 0x02	; 2
    6a9e:	0c 94 64 37 	jmp	0x6ec8	; 0x6ec8 <__epilogue_restores__+0x20>

00006aa2 <__ultoa_invert>:
    6aa2:	fa 01       	movw	r30, r20
    6aa4:	aa 27       	eor	r26, r26
    6aa6:	28 30       	cpi	r18, 0x08	; 8
    6aa8:	51 f1       	breq	.+84     	; 0x6afe <__ultoa_invert+0x5c>
    6aaa:	20 31       	cpi	r18, 0x10	; 16
    6aac:	81 f1       	breq	.+96     	; 0x6b0e <__ultoa_invert+0x6c>
    6aae:	e8 94       	clt
    6ab0:	6f 93       	push	r22
    6ab2:	6e 7f       	andi	r22, 0xFE	; 254
    6ab4:	6e 5f       	subi	r22, 0xFE	; 254
    6ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    6ab8:	8f 4f       	sbci	r24, 0xFF	; 255
    6aba:	9f 4f       	sbci	r25, 0xFF	; 255
    6abc:	af 4f       	sbci	r26, 0xFF	; 255
    6abe:	b1 e0       	ldi	r27, 0x01	; 1
    6ac0:	3e d0       	rcall	.+124    	; 0x6b3e <__ultoa_invert+0x9c>
    6ac2:	b4 e0       	ldi	r27, 0x04	; 4
    6ac4:	3c d0       	rcall	.+120    	; 0x6b3e <__ultoa_invert+0x9c>
    6ac6:	67 0f       	add	r22, r23
    6ac8:	78 1f       	adc	r23, r24
    6aca:	89 1f       	adc	r24, r25
    6acc:	9a 1f       	adc	r25, r26
    6ace:	a1 1d       	adc	r26, r1
    6ad0:	68 0f       	add	r22, r24
    6ad2:	79 1f       	adc	r23, r25
    6ad4:	8a 1f       	adc	r24, r26
    6ad6:	91 1d       	adc	r25, r1
    6ad8:	a1 1d       	adc	r26, r1
    6ada:	6a 0f       	add	r22, r26
    6adc:	71 1d       	adc	r23, r1
    6ade:	81 1d       	adc	r24, r1
    6ae0:	91 1d       	adc	r25, r1
    6ae2:	a1 1d       	adc	r26, r1
    6ae4:	20 d0       	rcall	.+64     	; 0x6b26 <__ultoa_invert+0x84>
    6ae6:	09 f4       	brne	.+2      	; 0x6aea <__ultoa_invert+0x48>
    6ae8:	68 94       	set
    6aea:	3f 91       	pop	r19
    6aec:	2a e0       	ldi	r18, 0x0A	; 10
    6aee:	26 9f       	mul	r18, r22
    6af0:	11 24       	eor	r1, r1
    6af2:	30 19       	sub	r19, r0
    6af4:	30 5d       	subi	r19, 0xD0	; 208
    6af6:	31 93       	st	Z+, r19
    6af8:	de f6       	brtc	.-74     	; 0x6ab0 <__ultoa_invert+0xe>
    6afa:	cf 01       	movw	r24, r30
    6afc:	08 95       	ret
    6afe:	46 2f       	mov	r20, r22
    6b00:	47 70       	andi	r20, 0x07	; 7
    6b02:	40 5d       	subi	r20, 0xD0	; 208
    6b04:	41 93       	st	Z+, r20
    6b06:	b3 e0       	ldi	r27, 0x03	; 3
    6b08:	0f d0       	rcall	.+30     	; 0x6b28 <__ultoa_invert+0x86>
    6b0a:	c9 f7       	brne	.-14     	; 0x6afe <__ultoa_invert+0x5c>
    6b0c:	f6 cf       	rjmp	.-20     	; 0x6afa <__ultoa_invert+0x58>
    6b0e:	46 2f       	mov	r20, r22
    6b10:	4f 70       	andi	r20, 0x0F	; 15
    6b12:	40 5d       	subi	r20, 0xD0	; 208
    6b14:	4a 33       	cpi	r20, 0x3A	; 58
    6b16:	18 f0       	brcs	.+6      	; 0x6b1e <__ultoa_invert+0x7c>
    6b18:	49 5d       	subi	r20, 0xD9	; 217
    6b1a:	31 fd       	sbrc	r19, 1
    6b1c:	40 52       	subi	r20, 0x20	; 32
    6b1e:	41 93       	st	Z+, r20
    6b20:	02 d0       	rcall	.+4      	; 0x6b26 <__ultoa_invert+0x84>
    6b22:	a9 f7       	brne	.-22     	; 0x6b0e <__ultoa_invert+0x6c>
    6b24:	ea cf       	rjmp	.-44     	; 0x6afa <__ultoa_invert+0x58>
    6b26:	b4 e0       	ldi	r27, 0x04	; 4
    6b28:	a6 95       	lsr	r26
    6b2a:	97 95       	ror	r25
    6b2c:	87 95       	ror	r24
    6b2e:	77 95       	ror	r23
    6b30:	67 95       	ror	r22
    6b32:	ba 95       	dec	r27
    6b34:	c9 f7       	brne	.-14     	; 0x6b28 <__ultoa_invert+0x86>
    6b36:	00 97       	sbiw	r24, 0x00	; 0
    6b38:	61 05       	cpc	r22, r1
    6b3a:	71 05       	cpc	r23, r1
    6b3c:	08 95       	ret
    6b3e:	9b 01       	movw	r18, r22
    6b40:	ac 01       	movw	r20, r24
    6b42:	0a 2e       	mov	r0, r26
    6b44:	06 94       	lsr	r0
    6b46:	57 95       	ror	r21
    6b48:	47 95       	ror	r20
    6b4a:	37 95       	ror	r19
    6b4c:	27 95       	ror	r18
    6b4e:	ba 95       	dec	r27
    6b50:	c9 f7       	brne	.-14     	; 0x6b44 <__ultoa_invert+0xa2>
    6b52:	62 0f       	add	r22, r18
    6b54:	73 1f       	adc	r23, r19
    6b56:	84 1f       	adc	r24, r20
    6b58:	95 1f       	adc	r25, r21
    6b5a:	a0 1d       	adc	r26, r0
    6b5c:	08 95       	ret

00006b5e <calloc>:
#include <ulib.h>
#include <nrk_error.h>
#include <nrk.h>
#include <stdint.h>
#include <basic_rf.h>
#include <nrk_timer.h>
    6b5e:	0f 93       	push	r16
    6b60:	1f 93       	push	r17
    6b62:	cf 93       	push	r28
    6b64:	df 93       	push	r29

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200
    6b66:	68 9f       	mul	r22, r24
    6b68:	80 01       	movw	r16, r0
    6b6a:	69 9f       	mul	r22, r25
    6b6c:	10 0d       	add	r17, r0
    6b6e:	78 9f       	mul	r23, r24
    6b70:	10 0d       	add	r17, r0
    6b72:	11 24       	eor	r1, r1
    6b74:	c8 01       	movw	r24, r16
    6b76:	0e 94 cb 35 	call	0x6b96	; 0x6b96 <malloc>
    6b7a:	ec 01       	movw	r28, r24
    6b7c:	00 97       	sbiw	r24, 0x00	; 0
    6b7e:	29 f0       	breq	.+10     	; 0x6b8a <calloc+0x2c>

uint8_t channel;
    6b80:	a8 01       	movw	r20, r16
    6b82:	60 e0       	ldi	r22, 0x00	; 0
    6b84:	70 e0       	ldi	r23, 0x00	; 0
    6b86:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <memset>
uint8_t is_open;

    6b8a:	ce 01       	movw	r24, r28
    6b8c:	df 91       	pop	r29
    6b8e:	cf 91       	pop	r28
    6b90:	1f 91       	pop	r17
    6b92:	0f 91       	pop	r16
    6b94:	08 95       	ret

00006b96 <malloc>:
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)


#define ADC_VREF_2_56() \
    6b96:	cf 93       	push	r28
    6b98:	df 93       	push	r29
    6b9a:	ac 01       	movw	r20, r24

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    6b9c:	02 97       	sbiw	r24, 0x02	; 2
    6b9e:	10 f4       	brcc	.+4      	; 0x6ba4 <malloc+0xe>
    6ba0:	42 e0       	ldi	r20, 0x02	; 2
    6ba2:	50 e0       	ldi	r21, 0x00	; 0

// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
do { \
x =  ADCL; \
x |= ADCH << 8; \
    6ba4:	a0 91 c2 07 	lds	r26, 0x07C2
    6ba8:	b0 91 c3 07 	lds	r27, 0x07C3
    6bac:	fd 01       	movw	r30, r26
    6bae:	c0 e0       	ldi	r28, 0x00	; 0
    6bb0:	d0 e0       	ldi	r29, 0x00	; 0
    6bb2:	20 e0       	ldi	r18, 0x00	; 0
    6bb4:	30 e0       	ldi	r19, 0x00	; 0
    6bb6:	20 c0       	rjmp	.+64     	; 0x6bf8 <malloc+0x62>
} while (0)

#define ADC_GET_SAMPLE_8(x) \
    6bb8:	80 81       	ld	r24, Z
    6bba:	91 81       	ldd	r25, Z+1	; 0x01
    6bbc:	84 17       	cp	r24, r20
    6bbe:	95 07       	cpc	r25, r21
    6bc0:	69 f4       	brne	.+26     	; 0x6bdc <malloc+0x46>
    6bc2:	82 81       	ldd	r24, Z+2	; 0x02
    6bc4:	93 81       	ldd	r25, Z+3	; 0x03
do { \
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
} while (0)

    6bc6:	20 97       	sbiw	r28, 0x00	; 0
    6bc8:	19 f0       	breq	.+6      	; 0x6bd0 <malloc+0x3a>
uint16_t read_voltage_status();
    6bca:	9b 83       	std	Y+3, r25	; 0x03
    6bcc:	8a 83       	std	Y+2, r24	; 0x02
    6bce:	04 c0       	rjmp	.+8      	; 0x6bd8 <malloc+0x42>
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
    6bd0:	90 93 c3 07 	sts	0x07C3, r25
    6bd4:	80 93 c2 07 	sts	0x07C2, r24
uint8_t count=0;
    6bd8:	9f 01       	movw	r18, r30
    6bda:	32 c0       	rjmp	.+100    	; 0x6c40 <malloc+0xaa>
// key and value get passed as opt and size
uint8_t key=opt;
    6bdc:	48 17       	cp	r20, r24
    6bde:	59 07       	cpc	r21, r25
    6be0:	38 f4       	brcc	.+14     	; 0x6bf0 <malloc+0x5a>
uint8_t value=size;
    6be2:	21 15       	cp	r18, r1
    6be4:	31 05       	cpc	r19, r1
    6be6:	19 f0       	breq	.+6      	; 0x6bee <malloc+0x58>
    6be8:	82 17       	cp	r24, r18
    6bea:	93 07       	cpc	r25, r19
    6bec:	08 f4       	brcc	.+2      	; 0x6bf0 <malloc+0x5a>
    6bee:	9c 01       	movw	r18, r24
#define ADC_GET_SAMPLE_10(x) \
do { \
x =  ADCL; \
x |= ADCH << 8; \
} while (0)

    6bf0:	ef 01       	movw	r28, r30
    6bf2:	02 80       	ldd	r0, Z+2	; 0x02
    6bf4:	f3 81       	ldd	r31, Z+3	; 0x03
    6bf6:	e0 2d       	mov	r30, r0
// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
do { \
x =  ADCL; \
x |= ADCH << 8; \
} while (0)
    6bf8:	30 97       	sbiw	r30, 0x00	; 0
    6bfa:	f1 f6       	brne	.-68     	; 0x6bb8 <malloc+0x22>
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
    6bfc:	21 15       	cp	r18, r1
    6bfe:	31 05       	cpc	r19, r1
    6c00:	99 f1       	breq	.+102    	; 0x6c68 <malloc+0xd2>
		    if(opt&READ_FLAG)
    6c02:	c9 01       	movw	r24, r18
    6c04:	84 1b       	sub	r24, r20
    6c06:	95 0b       	sbc	r25, r21
    6c08:	04 97       	sbiw	r24, 0x04	; 4
    6c0a:	08 f4       	brcc	.+2      	; 0x6c0e <malloc+0x78>
    6c0c:	a9 01       	movw	r20, r18
    6c0e:	e0 e0       	ldi	r30, 0x00	; 0
    6c10:	f0 e0       	ldi	r31, 0x00	; 0
    6c12:	28 c0       	rjmp	.+80     	; 0x6c64 <malloc+0xce>
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
    6c14:	8d 91       	ld	r24, X+
    6c16:	9c 91       	ld	r25, X
    6c18:	11 97       	sbiw	r26, 0x01	; 1
    6c1a:	82 17       	cp	r24, r18
    6c1c:	93 07       	cpc	r25, r19
    6c1e:	f9 f4       	brne	.+62     	; 0x6c5e <malloc+0xc8>
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    6c20:	48 17       	cp	r20, r24
    6c22:	59 07       	cpc	r21, r25
    6c24:	81 f4       	brne	.+32     	; 0x6c46 <malloc+0xb0>
    6c26:	ed 01       	movw	r28, r26
    6c28:	8a 81       	ldd	r24, Y+2	; 0x02
    6c2a:	9b 81       	ldd	r25, Y+3	; 0x03
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
    6c2c:	30 97       	sbiw	r30, 0x00	; 0
    6c2e:	19 f0       	breq	.+6      	; 0x6c36 <malloc+0xa0>
		    }
    6c30:	93 83       	std	Z+3, r25	; 0x03
    6c32:	82 83       	std	Z+2, r24	; 0x02
    6c34:	04 c0       	rjmp	.+8      	; 0x6c3e <malloc+0xa8>
		    if(opt&APPEND_FLAG)
		    {
    6c36:	90 93 c3 07 	sts	0x07C3, r25
    6c3a:	80 93 c2 07 	sts	0x07C2, r24
		    	return NRK_ERROR;
    6c3e:	9d 01       	movw	r18, r26
    6c40:	2e 5f       	subi	r18, 0xFE	; 254
    6c42:	3f 4f       	sbci	r19, 0xFF	; 255
    6c44:	4c c0       	rjmp	.+152    	; 0x6cde <malloc+0x148>
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();

    6c46:	84 1b       	sub	r24, r20
    6c48:	95 0b       	sbc	r25, r21
				if(size==2)
			      	{
    6c4a:	fd 01       	movw	r30, r26
    6c4c:	e8 0f       	add	r30, r24
    6c4e:	f9 1f       	adc	r31, r25
					buffer[count]=val  & 0xFF;
    6c50:	41 93       	st	Z+, r20
    6c52:	51 93       	st	Z+, r21
			      		count++;
    6c54:	02 97       	sbiw	r24, 0x02	; 2
    6c56:	8d 93       	st	X+, r24
    6c58:	9c 93       	st	X, r25
			      		buffer[count]=(val>>8)  & 0xFF;
    6c5a:	9f 01       	movw	r18, r30
    6c5c:	40 c0       	rjmp	.+128    	; 0x6cde <malloc+0x148>
		    is_open=1; 
		    if(opt&READ_FLAG)
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
    6c5e:	fd 01       	movw	r30, r26
    6c60:	a2 81       	ldd	r26, Z+2	; 0x02
    6c62:	b3 81       	ldd	r27, Z+3	; 0x03
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
		    if(opt&READ_FLAG)
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
    6c64:	10 97       	sbiw	r26, 0x00	; 0
    6c66:	b1 f6       	brne	.-84     	; 0x6c14 <malloc+0x7e>
			} else if(channel==BAT)
			{
			uint16_t tmp;
			tmp=read_voltage_status();
			if(size==2)
				{
    6c68:	80 91 c0 07 	lds	r24, 0x07C0
    6c6c:	90 91 c1 07 	lds	r25, 0x07C1
    6c70:	89 2b       	or	r24, r25
    6c72:	41 f4       	brne	.+16     	; 0x6c84 <malloc+0xee>
					buffer[count]=tmp & 0xFF;
    6c74:	80 91 ea 02 	lds	r24, 0x02EA
    6c78:	90 91 eb 02 	lds	r25, 0x02EB
    6c7c:	90 93 c1 07 	sts	0x07C1, r25
    6c80:	80 93 c0 07 	sts	0x07C0, r24
					count++;
    6c84:	20 91 ec 02 	lds	r18, 0x02EC
    6c88:	30 91 ed 02 	lds	r19, 0x02ED
					buffer[count]=(tmp>>8) & 0xFF;
    6c8c:	21 15       	cp	r18, r1
    6c8e:	31 05       	cpc	r19, r1
    6c90:	49 f4       	brne	.+18     	; 0x6ca4 <malloc+0x10e>
				}
    6c92:	8d b7       	in	r24, 0x3d	; 61
    6c94:	28 2f       	mov	r18, r24
    6c96:	33 27       	eor	r19, r19
    6c98:	80 91 e8 02 	lds	r24, 0x02E8
    6c9c:	90 91 e9 02 	lds	r25, 0x02E9
    6ca0:	28 1b       	sub	r18, r24
    6ca2:	39 0b       	sbc	r19, r25
			if(size==1)
    6ca4:	a0 91 c0 07 	lds	r26, 0x07C0
    6ca8:	b0 91 c1 07 	lds	r27, 0x07C1
    6cac:	2a 1b       	sub	r18, r26
    6cae:	3b 0b       	sbc	r19, r27
				{
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
    6cb0:	24 17       	cp	r18, r20
    6cb2:	35 07       	cpc	r19, r21
    6cb4:	90 f0       	brcs	.+36     	; 0x6cda <malloc+0x144>
    6cb6:	ca 01       	movw	r24, r20
    6cb8:	02 96       	adiw	r24, 0x02	; 2
    6cba:	28 17       	cp	r18, r24
    6cbc:	39 07       	cpc	r19, r25
    6cbe:	68 f0       	brcs	.+26     	; 0x6cda <malloc+0x144>
			{
  			/* Conversion to 8-bit value*/
    6cc0:	9d 01       	movw	r18, r26
    6cc2:	2e 5f       	subi	r18, 0xFE	; 254
    6cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    6cc6:	c9 01       	movw	r24, r18
    6cc8:	84 0f       	add	r24, r20
    6cca:	95 1f       	adc	r25, r21
    6ccc:	90 93 c1 07 	sts	0x07C1, r25
    6cd0:	80 93 c0 07 	sts	0x07C0, r24
			      //uint16_t val=get_adc_val();
    6cd4:	4d 93       	st	X+, r20
    6cd6:	5c 93       	st	X, r21
    6cd8:	02 c0       	rjmp	.+4      	; 0x6cde <malloc+0x148>
			      uint16_t val,min, max;
    6cda:	20 e0       	ldi	r18, 0x00	; 0
    6cdc:	30 e0       	ldi	r19, 0x00	; 0
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
    6cde:	c9 01       	movw	r24, r18
    6ce0:	df 91       	pop	r29
    6ce2:	cf 91       	pop	r28
    6ce4:	08 95       	ret

00006ce6 <free>:
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
    6ce6:	cf 93       	push	r28
    6ce8:	df 93       	push	r29
				}
			 	val=max-min;	
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
    6cea:	00 97       	sbiw	r24, 0x00	; 0
    6cec:	09 f4       	brne	.+2      	; 0x6cf0 <free+0xa>
    6cee:	4e c0       	rjmp	.+156    	; 0x6d8c <free+0xa6>
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}

    6cf0:	ec 01       	movw	r28, r24
    6cf2:	22 97       	sbiw	r28, 0x02	; 2
				if(size==1)
			      	{
    6cf4:	1b 82       	std	Y+3, r1	; 0x03
    6cf6:	1a 82       	std	Y+2, r1	; 0x02
			      		buffer[count]=(val>>2)  & 0xFF;
				}

			}
			
		      count++;
    6cf8:	a0 91 c2 07 	lds	r26, 0x07C2
    6cfc:	b0 91 c3 07 	lds	r27, 0x07C3
    6d00:	10 97       	sbiw	r26, 0x00	; 0
    6d02:	11 f1       	breq	.+68     	; 0x6d48 <free+0x62>
    6d04:	40 e0       	ldi	r20, 0x00	; 0
    6d06:	50 e0       	ldi	r21, 0x00	; 0
    6d08:	01 c0       	rjmp	.+2      	; 0x6d0c <free+0x26>
                      return count;

    6d0a:	dc 01       	movw	r26, r24
             
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
	     		return NRK_ERROR;
			
    6d0c:	ac 17       	cp	r26, r28
    6d0e:	bd 07       	cpc	r27, r29
    6d10:	00 f1       	brcs	.+64     	; 0x6d52 <free+0x6c>
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    6d12:	bb 83       	std	Y+3, r27	; 0x03
    6d14:	aa 83       	std	Y+2, r26	; 0x02
			{
    6d16:	fe 01       	movw	r30, r28
    6d18:	21 91       	ld	r18, Z+
    6d1a:	31 91       	ld	r19, Z+
    6d1c:	e2 0f       	add	r30, r18
    6d1e:	f3 1f       	adc	r31, r19
    6d20:	ea 17       	cp	r30, r26
    6d22:	fb 07       	cpc	r31, r27
    6d24:	71 f4       	brne	.+28     	; 0x6d42 <free+0x5c>
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
    6d26:	8d 91       	ld	r24, X+
    6d28:	9c 91       	ld	r25, X
    6d2a:	11 97       	sbiw	r26, 0x01	; 1
    6d2c:	28 0f       	add	r18, r24
    6d2e:	39 1f       	adc	r19, r25
    6d30:	2e 5f       	subi	r18, 0xFE	; 254
    6d32:	3f 4f       	sbci	r19, 0xFF	; 255
    6d34:	39 83       	std	Y+1, r19	; 0x01
    6d36:	28 83       	st	Y, r18
			  {
    6d38:	fd 01       	movw	r30, r26
    6d3a:	82 81       	ldd	r24, Z+2	; 0x02
    6d3c:	93 81       	ldd	r25, Z+3	; 0x03
    6d3e:	9b 83       	std	Y+3, r25	; 0x03
    6d40:	8a 83       	std	Y+2, r24	; 0x02
				channel=value;
				   //ADC_VREF_2_56();	
    6d42:	41 15       	cp	r20, r1
    6d44:	51 05       	cpc	r21, r1
    6d46:	59 f4       	brne	.+22     	; 0x6d5e <free+0x78>
				ADC_VREF_VCC();	
				ADC_SET_CHANNEL (AUDIO);
    6d48:	d0 93 c3 07 	sts	0x07C3, r29
    6d4c:	c0 93 c2 07 	sts	0x07C2, r28
    6d50:	1d c0       	rjmp	.+58     	; 0x6d8c <free+0xa6>
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
	     		return NRK_ERROR;
    6d52:	fd 01       	movw	r30, r26
    6d54:	82 81       	ldd	r24, Z+2	; 0x02
    6d56:	93 81       	ldd	r25, Z+3	; 0x03
    6d58:	ad 01       	movw	r20, r26
		    	is_open=0; 
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
    6d5a:	00 97       	sbiw	r24, 0x00	; 0
    6d5c:	b1 f6       	brne	.-84     	; 0x6d0a <free+0x24>
				if(value>7) 
				{
					_nrk_errno_set(1);
					return NRK_ERROR;
				}
				channel=value;
    6d5e:	fa 01       	movw	r30, r20
    6d60:	d3 83       	std	Z+3, r29	; 0x03
    6d62:	c2 83       	std	Z+2, r28	; 0x02
				if(channel==LIGHT)
				   ADC_VREF_VCC();	
    6d64:	21 91       	ld	r18, Z+
    6d66:	31 91       	ld	r19, Z+
    6d68:	e2 0f       	add	r30, r18
    6d6a:	f3 1f       	adc	r31, r19
    6d6c:	ec 17       	cp	r30, r28
    6d6e:	fd 07       	cpc	r31, r29
    6d70:	69 f4       	brne	.+26     	; 0x6d8c <free+0xa6>
				else
				   ADC_VREF_2_56();	
    6d72:	88 81       	ld	r24, Y
    6d74:	99 81       	ldd	r25, Y+1	; 0x01
    6d76:	28 0f       	add	r18, r24
    6d78:	39 1f       	adc	r19, r25
    6d7a:	2e 5f       	subi	r18, 0xFE	; 254
    6d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    6d7e:	fa 01       	movw	r30, r20
    6d80:	31 83       	std	Z+1, r19	; 0x01
    6d82:	20 83       	st	Z, r18
				ADC_SET_CHANNEL (channel);
    6d84:	8a 81       	ldd	r24, Y+2	; 0x02
    6d86:	9b 81       	ldd	r25, Y+3	; 0x03
    6d88:	93 83       	std	Z+3, r25	; 0x03
    6d8a:	82 83       	std	Z+2, r24	; 0x02
    6d8c:	df 91       	pop	r29
    6d8e:	cf 91       	pop	r28
    6d90:	08 95       	ret

00006d92 <memset>:
    6d92:	dc 01       	movw	r26, r24
    6d94:	01 c0       	rjmp	.+2      	; 0x6d98 <memset+0x6>
    6d96:	6d 93       	st	X+, r22
    6d98:	41 50       	subi	r20, 0x01	; 1
    6d9a:	50 40       	sbci	r21, 0x00	; 0
    6d9c:	e0 f7       	brcc	.-8      	; 0x6d96 <memset+0x4>
    6d9e:	08 95       	ret

00006da0 <__mulsi3>:
    6da0:	62 9f       	mul	r22, r18
    6da2:	d0 01       	movw	r26, r0
    6da4:	73 9f       	mul	r23, r19
    6da6:	f0 01       	movw	r30, r0
    6da8:	82 9f       	mul	r24, r18
    6daa:	e0 0d       	add	r30, r0
    6dac:	f1 1d       	adc	r31, r1
    6dae:	64 9f       	mul	r22, r20
    6db0:	e0 0d       	add	r30, r0
    6db2:	f1 1d       	adc	r31, r1
    6db4:	92 9f       	mul	r25, r18
    6db6:	f0 0d       	add	r31, r0
    6db8:	83 9f       	mul	r24, r19
    6dba:	f0 0d       	add	r31, r0
    6dbc:	74 9f       	mul	r23, r20
    6dbe:	f0 0d       	add	r31, r0
    6dc0:	65 9f       	mul	r22, r21
    6dc2:	f0 0d       	add	r31, r0
    6dc4:	99 27       	eor	r25, r25
    6dc6:	72 9f       	mul	r23, r18
    6dc8:	b0 0d       	add	r27, r0
    6dca:	e1 1d       	adc	r30, r1
    6dcc:	f9 1f       	adc	r31, r25
    6dce:	63 9f       	mul	r22, r19
    6dd0:	b0 0d       	add	r27, r0
    6dd2:	e1 1d       	adc	r30, r1
    6dd4:	f9 1f       	adc	r31, r25
    6dd6:	bd 01       	movw	r22, r26
    6dd8:	cf 01       	movw	r24, r30
    6dda:	11 24       	eor	r1, r1
    6ddc:	08 95       	ret

00006dde <__udivmodhi4>:
    6dde:	aa 1b       	sub	r26, r26
    6de0:	bb 1b       	sub	r27, r27
    6de2:	51 e1       	ldi	r21, 0x11	; 17
    6de4:	07 c0       	rjmp	.+14     	; 0x6df4 <__udivmodhi4_ep>

00006de6 <__udivmodhi4_loop>:
    6de6:	aa 1f       	adc	r26, r26
    6de8:	bb 1f       	adc	r27, r27
    6dea:	a6 17       	cp	r26, r22
    6dec:	b7 07       	cpc	r27, r23
    6dee:	10 f0       	brcs	.+4      	; 0x6df4 <__udivmodhi4_ep>
    6df0:	a6 1b       	sub	r26, r22
    6df2:	b7 0b       	sbc	r27, r23

00006df4 <__udivmodhi4_ep>:
    6df4:	88 1f       	adc	r24, r24
    6df6:	99 1f       	adc	r25, r25
    6df8:	5a 95       	dec	r21
    6dfa:	a9 f7       	brne	.-22     	; 0x6de6 <__udivmodhi4_loop>
    6dfc:	80 95       	com	r24
    6dfe:	90 95       	com	r25
    6e00:	bc 01       	movw	r22, r24
    6e02:	cd 01       	movw	r24, r26
    6e04:	08 95       	ret

00006e06 <__divmodhi4>:
    6e06:	97 fb       	bst	r25, 7
    6e08:	09 2e       	mov	r0, r25
    6e0a:	07 26       	eor	r0, r23
    6e0c:	0a d0       	rcall	.+20     	; 0x6e22 <__divmodhi4_neg1>
    6e0e:	77 fd       	sbrc	r23, 7
    6e10:	04 d0       	rcall	.+8      	; 0x6e1a <__divmodhi4_neg2>
    6e12:	e5 df       	rcall	.-54     	; 0x6dde <__udivmodhi4>
    6e14:	06 d0       	rcall	.+12     	; 0x6e22 <__divmodhi4_neg1>
    6e16:	00 20       	and	r0, r0
    6e18:	1a f4       	brpl	.+6      	; 0x6e20 <__divmodhi4_exit>

00006e1a <__divmodhi4_neg2>:
    6e1a:	70 95       	com	r23
    6e1c:	61 95       	neg	r22
    6e1e:	7f 4f       	sbci	r23, 0xFF	; 255

00006e20 <__divmodhi4_exit>:
    6e20:	08 95       	ret

00006e22 <__divmodhi4_neg1>:
    6e22:	f6 f7       	brtc	.-4      	; 0x6e20 <__divmodhi4_exit>
    6e24:	90 95       	com	r25
    6e26:	81 95       	neg	r24
    6e28:	9f 4f       	sbci	r25, 0xFF	; 255
    6e2a:	08 95       	ret

00006e2c <__udivmodsi4>:
    6e2c:	a1 e2       	ldi	r26, 0x21	; 33
    6e2e:	1a 2e       	mov	r1, r26
    6e30:	aa 1b       	sub	r26, r26
    6e32:	bb 1b       	sub	r27, r27
    6e34:	fd 01       	movw	r30, r26
    6e36:	0d c0       	rjmp	.+26     	; 0x6e52 <__udivmodsi4_ep>

00006e38 <__udivmodsi4_loop>:
    6e38:	aa 1f       	adc	r26, r26
    6e3a:	bb 1f       	adc	r27, r27
    6e3c:	ee 1f       	adc	r30, r30
    6e3e:	ff 1f       	adc	r31, r31
    6e40:	a2 17       	cp	r26, r18
    6e42:	b3 07       	cpc	r27, r19
    6e44:	e4 07       	cpc	r30, r20
    6e46:	f5 07       	cpc	r31, r21
    6e48:	20 f0       	brcs	.+8      	; 0x6e52 <__udivmodsi4_ep>
    6e4a:	a2 1b       	sub	r26, r18
    6e4c:	b3 0b       	sbc	r27, r19
    6e4e:	e4 0b       	sbc	r30, r20
    6e50:	f5 0b       	sbc	r31, r21

00006e52 <__udivmodsi4_ep>:
    6e52:	66 1f       	adc	r22, r22
    6e54:	77 1f       	adc	r23, r23
    6e56:	88 1f       	adc	r24, r24
    6e58:	99 1f       	adc	r25, r25
    6e5a:	1a 94       	dec	r1
    6e5c:	69 f7       	brne	.-38     	; 0x6e38 <__udivmodsi4_loop>
    6e5e:	60 95       	com	r22
    6e60:	70 95       	com	r23
    6e62:	80 95       	com	r24
    6e64:	90 95       	com	r25
    6e66:	9b 01       	movw	r18, r22
    6e68:	ac 01       	movw	r20, r24
    6e6a:	bd 01       	movw	r22, r26
    6e6c:	cf 01       	movw	r24, r30
    6e6e:	08 95       	ret

00006e70 <__prologue_saves__>:
    6e70:	2f 92       	push	r2
    6e72:	3f 92       	push	r3
    6e74:	4f 92       	push	r4
    6e76:	5f 92       	push	r5
    6e78:	6f 92       	push	r6
    6e7a:	7f 92       	push	r7
    6e7c:	8f 92       	push	r8
    6e7e:	9f 92       	push	r9
    6e80:	af 92       	push	r10
    6e82:	bf 92       	push	r11
    6e84:	cf 92       	push	r12
    6e86:	df 92       	push	r13
    6e88:	ef 92       	push	r14
    6e8a:	ff 92       	push	r15
    6e8c:	0f 93       	push	r16
    6e8e:	1f 93       	push	r17
    6e90:	cf 93       	push	r28
    6e92:	df 93       	push	r29
    6e94:	cd b7       	in	r28, 0x3d	; 61
    6e96:	de b7       	in	r29, 0x3e	; 62
    6e98:	ca 1b       	sub	r28, r26
    6e9a:	db 0b       	sbc	r29, r27
    6e9c:	0f b6       	in	r0, 0x3f	; 63
    6e9e:	f8 94       	cli
    6ea0:	de bf       	out	0x3e, r29	; 62
    6ea2:	0f be       	out	0x3f, r0	; 63
    6ea4:	cd bf       	out	0x3d, r28	; 61
    6ea6:	09 94       	ijmp

00006ea8 <__epilogue_restores__>:
    6ea8:	2a 88       	ldd	r2, Y+18	; 0x12
    6eaa:	39 88       	ldd	r3, Y+17	; 0x11
    6eac:	48 88       	ldd	r4, Y+16	; 0x10
    6eae:	5f 84       	ldd	r5, Y+15	; 0x0f
    6eb0:	6e 84       	ldd	r6, Y+14	; 0x0e
    6eb2:	7d 84       	ldd	r7, Y+13	; 0x0d
    6eb4:	8c 84       	ldd	r8, Y+12	; 0x0c
    6eb6:	9b 84       	ldd	r9, Y+11	; 0x0b
    6eb8:	aa 84       	ldd	r10, Y+10	; 0x0a
    6eba:	b9 84       	ldd	r11, Y+9	; 0x09
    6ebc:	c8 84       	ldd	r12, Y+8	; 0x08
    6ebe:	df 80       	ldd	r13, Y+7	; 0x07
    6ec0:	ee 80       	ldd	r14, Y+6	; 0x06
    6ec2:	fd 80       	ldd	r15, Y+5	; 0x05
    6ec4:	0c 81       	ldd	r16, Y+4	; 0x04
    6ec6:	1b 81       	ldd	r17, Y+3	; 0x03
    6ec8:	aa 81       	ldd	r26, Y+2	; 0x02
    6eca:	b9 81       	ldd	r27, Y+1	; 0x01
    6ecc:	ce 0f       	add	r28, r30
    6ece:	d1 1d       	adc	r29, r1
    6ed0:	0f b6       	in	r0, 0x3f	; 63
    6ed2:	f8 94       	cli
    6ed4:	de bf       	out	0x3e, r29	; 62
    6ed6:	0f be       	out	0x3f, r0	; 63
    6ed8:	cd bf       	out	0x3d, r28	; 61
    6eda:	ed 01       	movw	r28, r26
    6edc:	08 95       	ret

00006ede <__eeprom_read_byte_1F2021>:
    6ede:	f9 99       	sbic	0x1f, 1	; 31
    6ee0:	fe cf       	rjmp	.-4      	; 0x6ede <__eeprom_read_byte_1F2021>
    6ee2:	b2 bd       	out	0x22, r27	; 34
    6ee4:	a1 bd       	out	0x21, r26	; 33
    6ee6:	f8 9a       	sbi	0x1f, 0	; 31
    6ee8:	11 96       	adiw	r26, 0x01	; 1
    6eea:	00 b4       	in	r0, 0x20	; 32
    6eec:	08 95       	ret

00006eee <__eeprom_write_byte_1F2021>:
    6eee:	f9 99       	sbic	0x1f, 1	; 31
    6ef0:	fe cf       	rjmp	.-4      	; 0x6eee <__eeprom_write_byte_1F2021>
    6ef2:	b2 bd       	out	0x22, r27	; 34
    6ef4:	a1 bd       	out	0x21, r26	; 33
    6ef6:	00 bc       	out	0x20, r0	; 32
    6ef8:	11 96       	adiw	r26, 0x01	; 1
    6efa:	0f b6       	in	r0, 0x3f	; 63
    6efc:	f8 94       	cli
    6efe:	fa 9a       	sbi	0x1f, 2	; 31
    6f00:	f9 9a       	sbi	0x1f, 1	; 31
    6f02:	0f be       	out	0x3f, r0	; 63
    6f04:	08 95       	ret

00006f06 <_exit>:
    6f06:	ff cf       	rjmp	.-2      	; 0x6f06 <_exit>
