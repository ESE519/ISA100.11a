   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 138               	.global	nrk_create_taskset
 140               	nrk_create_taskset:
 141               		.stabd	46,0,0
   1:main.c        **** #include <nrk.h>
   2:main.c        **** #include <include.h>
   3:main.c        **** #include <ulib.h>
   4:main.c        **** #include <stdio.h>
   5:main.c        **** #include <avr/sleep.h>
   6:main.c        **** #include <hal.h>
   7:main.c        **** #include <isa.h>
   8:main.c        **** #include <nrk_error.h>
   9:main.c        **** //#include <sys/time.h>
  10:main.c        **** 
  11:main.c        **** 
  12:main.c        **** #define MY_CHANNEL 19 
  13:main.c        **** #define MY_ID 2 //change
  14:main.c        **** 
  15:main.c        **** //#define MY_TX_SLOT_SYNC  2
  16:main.c        **** //#define s  17
  17:main.c        **** #define MY_RX_SLOT  2
  18:main.c        **** #define MY_TX_SLOT  7
  19:main.c        **** #define MY_TX_SLOT1  8
  20:main.c        **** 
  21:main.c        **** 
  22:main.c        **** #define MY_CLK_SRC_ID  0
  23:main.c        **** 
  24:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  25:main.c        **** nrk_task_type TaskOne;
  26:main.c        **** void Task1(void);
  27:main.c        **** 
  28:main.c        **** 
  29:main.c        **** void nrk_create_taskset();
  30:main.c        **** 
  31:main.c        **** uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
  32:main.c        **** //uint8_t tx_buf2[RF_MAX_PAYLOAD_SIZE];
  33:main.c        **** uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
  34:main.c        **** 
  35:main.c        **** nrk_time_t timestart;
  36:main.c        **** nrk_time_t timeend;
  37:main.c        **** nrk_time_t newtime;
  38:main.c        **** nrk_time_t timeout;
  39:main.c        **** 
  40:main.c        **** 
  41:main.c        **** 
  42:main.c        **** int main ()
  43:main.c        **** {
  44:main.c        ****   nrk_setup_ports();
  45:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  46:main.c        **** 
  47:main.c        ****   nrk_kprintf( PSTR("Starting up...\r\n") );
  48:main.c        **** 	
  49:main.c        ****   nrk_init();
  50:main.c        **** 
  51:main.c        ****   nrk_led_clr(0);
  52:main.c        ****   nrk_led_clr(1);
  53:main.c        ****   nrk_led_clr(2);
  54:main.c        ****   nrk_led_clr(3);
  55:main.c        ****   
  56:main.c        ****   nrk_time_set(0,0);
  57:main.c        ****   
  58:main.c        ****   isa_task_config();
  59:main.c        ****   
  60:main.c        ****   nrk_create_taskset ();
  61:main.c        **** 
  62:main.c        ****   nrk_start();
  63:main.c        ****   
  64:main.c        ****   return 0;
  65:main.c        **** }
  66:main.c        **** 
  67:main.c        **** 
  68:main.c        **** void Task1()
  69:main.c        **** {
  70:main.c        **** 
  71:main.c        ****   uint8_t j, i;
  72:main.c        ****   uint8_t length,slot;
  73:main.c        ****   uint8_t *local_rx_buf;
  74:main.c        ****   uint32_t Score = 0;
  75:main.c        ****   int8_t rssi;
  76:main.c        ****   uint8_t cnt=0;
  77:main.c        ****   //uint8_t tx[3]={2,15,16};
  78:main.c        ****   //uint8_t rx[3]={3,18,19};
  79:main.c        ****   //uint8_t my_tx_slot[4];
  80:main.c        **** 
  81:main.c        **** 
  82:main.c        ****   char c = -1;
  83:main.c        ****   nrk_sig_t uart_rx_signal;
  84:main.c        ****   uint8_t finished = 0;
  85:main.c        **** 
  86:main.c        ****   printf( "Task1 PID=%d\r\n",nrk_get_pid());
  87:main.c        ****   
  88:main.c        ****   nrk_led_set(RED_LED);
  89:main.c        ****   
  90:main.c        ****   isa_set_channel_pattern(1);
  91:main.c        **** 
  92:main.c        ****   isa_init (ISA_REPEATER, MY_ID, MY_CLK_SRC_ID);//change
  93:main.c        ****   
  94:main.c        ****   isa_set_schedule(ISA_REPEATER, MY_CLK_SRC_ID);
  95:main.c        **** 
  96:main.c        ****   isa_set_channel(MY_CHANNEL);
  97:main.c        **** 
  98:main.c        ****   isa_start();
  99:main.c        ****   
 100:main.c        ****   isa_rx_pkt_set_buffer(rx_buf, RF_MAX_PAYLOAD_SIZE);
 101:main.c        ****   
 102:main.c        ****   while(!isa_ready())  nrk_wait_until_next_period(); 
 103:main.c        **** 
 104:main.c        ****   /*while(isa_join_ready()!=1) nrk_wait_until_next_period();
 105:main.c        ****     
 106:main.c        ****     for(i=0;i<4;i++){  // set tx slots
 107:main.c        **** 	if(tx_slot_from_join[i]==0)
 108:main.c        **** 		break;
 109:main.c        **** 	else
 110:main.c        **** 	    my_tx_slot[i]=tx_slot_from_join[i];
 111:main.c        ****     }	   
 112:main.c        ****   printf("MAIN_TX:%d\r\n",my_tx_slot[0]);*/
 113:main.c        **** 
 114:main.c        ****   printf("isa start!\n\r");
 115:main.c        **** 
 116:main.c        ****   //i=0;
 117:main.c        ****   while(1){
 118:main.c        **** 
 119:main.c        **** 
 120:main.c        **** //Spit out log info
 121:main.c        **** 	  	  if (txCount % 1000 == 0){
 122:main.c        **** 	  	printf ("TxCount: %d\r\nRXCount: %d\r\nPacketLoss:%d", txCount,rxCount, packetsLost);
 123:main.c        **** 	  	  }
 124:main.c        **** 
 125:main.c        **** //nrk_gpio_toggle(NRK_DEBUG_0);
 126:main.c        ****        if( isa_rx_pkt_check()!=0 ) {
 127:main.c        **** 
 128:main.c        **** 	    local_rx_buf=isa_rx_pkt_get(&length, &rssi);
 129:main.c        **** 
 130:main.c        **** 	    //printf("length is %d, rssi is %d.\n\r",length,rssi);
 131:main.c        **** 	    //local_rx_buf[PKT_DATA_START+length-2]='\0';
 132:main.c        **** 	    //printf("RX[%d]",slot);
 133:main.c        **** 	    /*for(i=PKT_DATA_START; i<length-1; i++ )
 134:main.c        **** 		printf( "%c",local_rx_buf[i]);*/
 135:main.c        **** 	    //printf("\r\n");
 136:main.c        **** 	    //sprintf( &tx_buf[PKT_DATA_START],"Hello Mingzhe!");
 137:main.c        **** 	    //length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+1;
 138:main.c        **** 	    //isa_tx_pkt(tx_buf,length,configDHDR(),MY_TX_SLOT);
 139:main.c        **** 
 140:main.c        **** 	    length=strlen(&rx_buf[PKT_DATA_START])+PKT_DATA_START+1; //change
 141:main.c        **** 	    isa_tx_pkt(rx_buf,length,configDHDR(8),MY_TX_SLOT1);//change forward the message from recipien
 142:main.c        **** 
 143:main.c        **** 	    //printf(" Forward message is sent.\n\r");
 144:main.c        ****  	    //printf("pkt length:%d",length);
 145:main.c        **** 	    //printf("%d\r\n",cnt++);
 146:main.c        **** 	  //  printf( "%c",local_rx_buf[PKT_DATA_START]);
 147:main.c        **** 	    isa_rx_pkt_release();
 148:main.c        **** 	   // printf("\r\n");
 149:main.c        **** 
 150:main.c        **** 	}
 151:main.c        **** 
 152:main.c        ****        if(isa_tx_pkt_check(MY_TX_SLOT)!=0){
 153:main.c        ****        	  // printf("Pending TX\r\n");
 154:main.c        ****        	}
 155:main.c        ****        else{
 156:main.c        **** 	/*sprintf( &tx_buf[PKT_DATA_START],local_rx_buf+PKT_DATA_START);
 157:main.c        **** 	length=strlen(&rx_buf[PKT_DATA_START])+PKT_DATA_START+1; //change
 158:main.c        **** 	//isa_tx_pkt(rx_buf,length,configDHDR(),my_tx_slot[0]);//change forward the message from recipient
 159:main.c        **** 	isa_tx_pkt(rx_buf,length,configDHDR(),MY_TX_SLOT);
 160:main.c        **** 	isa_wait_until_rx_or_tx ();*/
 161:main.c        **** 
 162:main.c        **** 	sprintf( &tx_buf[PKT_DATA_START],"2");
 163:main.c        **** 	length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+1;
 164:main.c        **** 	isa_tx_pkt(tx_buf,length,configDHDR(7),MY_TX_SLOT);
 165:main.c        **** 
 166:main.c        **** 
 167:main.c        **** 	/*sprintf( &tx_buf2[PKT_DATA_START],"Hello from slot 2!");
 168:main.c        **** 	length=strlen(&tx_buf2[PKT_DATA_START])+PKT_DATA_START+1;
 169:main.c        **** 	isa_tx_pkt(tx_buf2,length,configDHDR(),2);
 170:main.c        **** 	isa_wait_until_rx_or_tx ();*/
 171:main.c        **** 
 172:main.c        ****        }
 173:main.c        **** 
 174:main.c        ****        isa_wait_until_rx_or_tx ();
 175:main.c        ****       // 	putchar('\n');
 176:main.c        ****       // 	putchar('\r');
 177:main.c        ****   }
 178:main.c        ****   
 179:main.c        **** 
 180:main.c        **** }
 181:main.c        **** 
 182:main.c        **** 
 183:main.c        **** void
 184:main.c        **** nrk_create_taskset()
 185:main.c        **** {
 143               	.LM0:
 144               	.LFBB1:
 145               	/* prologue: frame size=0 */
 146               	/* prologue end (size=0) */
 186:main.c        ****   TaskOne.task = Task1;
 148               	.LM1:
 149 0000 80E0      		ldi r24,lo8(pm(Task1))
 150 0002 90E0      		ldi r25,hi8(pm(Task1))
 151 0004 9093 0000 		sts (TaskOne+5)+1,r25
 152 0008 8093 0000 		sts TaskOne+5,r24
 187:main.c        ****   TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE-1];
 154               	.LM2:
 155 000c 80E0      		ldi r24,lo8(Stack1+127)
 156 000e 90E0      		ldi r25,hi8(Stack1+127)
 157 0010 9093 0000 		sts (TaskOne+1)+1,r25
 158 0014 8093 0000 		sts TaskOne+1,r24
 188:main.c        ****   TaskOne.Pbos = (void *) &Stack1[0];
 160               	.LM3:
 161 0018 80E0      		ldi r24,lo8(Stack1)
 162 001a 90E0      		ldi r25,hi8(Stack1)
 163 001c 9093 0000 		sts (TaskOne+3)+1,r25
 164 0020 8093 0000 		sts TaskOne+3,r24
 189:main.c        ****   TaskOne.prio = 2;
 166               	.LM4:
 167 0024 82E0      		ldi r24,lo8(2)
 168 0026 8093 0000 		sts TaskOne+8,r24
 190:main.c        ****   TaskOne.FirstActivation = TRUE;
 170               	.LM5:
 171 002a 81E0      		ldi r24,lo8(1)
 172 002c 8093 0000 		sts TaskOne+7,r24
 191:main.c        ****   TaskOne.Type = BASIC_TASK;
 174               	.LM6:
 175 0030 8093 0000 		sts TaskOne+9,r24
 192:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 177               	.LM7:
 178 0034 8093 0000 		sts TaskOne+10,r24
 193:main.c        ****   TaskOne.period.secs = 0;
 180               	.LM8:
 181 0038 1092 0000 		sts TaskOne+11,__zero_reg__
 182 003c 1092 0000 		sts (TaskOne+11)+1,__zero_reg__
 183 0040 1092 0000 		sts (TaskOne+11)+2,__zero_reg__
 184 0044 1092 0000 		sts (TaskOne+11)+3,__zero_reg__
 194:main.c        ****   TaskOne.period.nano_secs = 20*NANOS_PER_MS;
 186               	.LM9:
 187 0048 80E0      		ldi r24,lo8(20000000)
 188 004a 9DE2      		ldi r25,hi8(20000000)
 189 004c A1E3      		ldi r26,hlo8(20000000)
 190 004e B1E0      		ldi r27,hhi8(20000000)
 191 0050 8093 0000 		sts TaskOne+15,r24
 192 0054 9093 0000 		sts (TaskOne+15)+1,r25
 193 0058 A093 0000 		sts (TaskOne+15)+2,r26
 194 005c B093 0000 		sts (TaskOne+15)+3,r27
 195:main.c        ****   TaskOne.cpu_reserve.secs = 0;
 196               	.LM10:
 197 0060 1092 0000 		sts TaskOne+19,__zero_reg__
 198 0064 1092 0000 		sts (TaskOne+19)+1,__zero_reg__
 199 0068 1092 0000 		sts (TaskOne+19)+2,__zero_reg__
 200 006c 1092 0000 		sts (TaskOne+19)+3,__zero_reg__
 196:main.c        ****   TaskOne.cpu_reserve.nano_secs = 20*NANOS_PER_MS;
 202               	.LM11:
 203 0070 8093 0000 		sts TaskOne+23,r24
 204 0074 9093 0000 		sts (TaskOne+23)+1,r25
 205 0078 A093 0000 		sts (TaskOne+23)+2,r26
 206 007c B093 0000 		sts (TaskOne+23)+3,r27
 197:main.c        ****   TaskOne.offset.secs = 0;
 208               	.LM12:
 209 0080 1092 0000 		sts TaskOne+27,__zero_reg__
 210 0084 1092 0000 		sts (TaskOne+27)+1,__zero_reg__
 211 0088 1092 0000 		sts (TaskOne+27)+2,__zero_reg__
 212 008c 1092 0000 		sts (TaskOne+27)+3,__zero_reg__
 198:main.c        ****   TaskOne.offset.nano_secs= 50*NANOS_PER_MS;
 214               	.LM13:
 215 0090 80E8      		ldi r24,lo8(50000000)
 216 0092 90EF      		ldi r25,hi8(50000000)
 217 0094 AAEF      		ldi r26,hlo8(50000000)
 218 0096 B2E0      		ldi r27,hhi8(50000000)
 219 0098 8093 0000 		sts TaskOne+31,r24
 220 009c 9093 0000 		sts (TaskOne+31)+1,r25
 221 00a0 A093 0000 		sts (TaskOne+31)+2,r26
 222 00a4 B093 0000 		sts (TaskOne+31)+3,r27
 199:main.c        ****   nrk_activate_task (&TaskOne);
 224               	.LM14:
 225 00a8 80E0      		ldi r24,lo8(TaskOne)
 226 00aa 90E0      		ldi r25,hi8(TaskOne)
 227 00ac 0E94 0000 		call nrk_activate_task
 200:main.c        **** 
 201:main.c        **** 
 202:main.c        ****   nrk_kprintf( PSTR("Create Done\r\n") );
 229               	.LM15:
 230 00b0 80E0      		ldi r24,lo8(__c.2409)
 231 00b2 90E0      		ldi r25,hi8(__c.2409)
 232 00b4 0E94 0000 		call nrk_kprintf
 233               	/* epilogue: frame size=0 */
 234 00b8 0895      		ret
 235               	/* epilogue end (size=1) */
 236               	/* function nrk_create_taskset size 93 (92) */
 238               	.Lscope1:
 240               		.stabd	78,0,0
 241               		.data
 242               	.LC0:
 243 0000 5461 736B 		.string	"Task1 PID=%d\r\n"
 243      3120 5049 
 243      443D 2564 
 243      0D0A 00
 244               	.LC1:
 245 000f 6973 6120 		.string	"isa start!\n\r"
 245      7374 6172 
 245      7421 0A0D 
 245      00
 246               	.LC2:
 247 001c 5478 436F 		.string	"TxCount: %d\r\nRXCount: %d\r\nPacketLoss:%d"
 247      756E 743A 
 247      2025 640D 
 247      0A52 5843 
 247      6F75 6E74 
 248               	.LC3:
 249 0044 3200      		.string	"2"
 250               		.text
 252               	.global	Task1
 254               	Task1:
 255               		.stabd	46,0,0
 257               	.LM16:
 258               	.LFBB2:
 259               	/* prologue: frame size=2 */
 260 00ba 2F92      		push r2
 261 00bc 3F92      		push r3
 262 00be 4F92      		push r4
 263 00c0 5F92      		push r5
 264 00c2 6F92      		push r6
 265 00c4 7F92      		push r7
 266 00c6 8F92      		push r8
 267 00c8 9F92      		push r9
 268 00ca AF92      		push r10
 269 00cc BF92      		push r11
 270 00ce CF92      		push r12
 271 00d0 DF92      		push r13
 272 00d2 EF92      		push r14
 273 00d4 FF92      		push r15
 274 00d6 0F93      		push r16
 275 00d8 1F93      		push r17
 276 00da CF93      		push r28
 277 00dc DF93      		push r29
 278 00de CDB7      		in r28,__SP_L__
 279 00e0 DEB7      		in r29,__SP_H__
 280 00e2 2297      		sbiw r28,2
 281 00e4 0FB6      		in __tmp_reg__,__SREG__
 282 00e6 F894      		cli
 283 00e8 DEBF      		out __SP_H__,r29
 284 00ea 0FBE      		out __SREG__,__tmp_reg__
 285 00ec CDBF      		out __SP_L__,r28
 286               	/* prologue end (size=26) */
 288               	.LM17:
 289 00ee 0E94 0000 		call nrk_get_pid
 290 00f2 9927      		clr r25
 291 00f4 9F93      		push r25
 292 00f6 8F93      		push r24
 293 00f8 80E0      		ldi r24,lo8(.LC0)
 294 00fa 90E0      		ldi r25,hi8(.LC0)
 295 00fc 9F93      		push r25
 296 00fe 8F93      		push r24
 297 0100 0E94 0000 		call printf
 299               	.LM18:
 300 0104 83E0      		ldi r24,lo8(3)
 301 0106 90E0      		ldi r25,hi8(3)
 302 0108 0E94 0000 		call nrk_led_set
 304               	.LM19:
 305 010c 81E0      		ldi r24,lo8(1)
 306 010e 90E0      		ldi r25,hi8(1)
 307 0110 0E94 0000 		call isa_set_channel_pattern
 309               	.LM20:
 310 0114 40E0      		ldi r20,lo8(0)
 311 0116 62E0      		ldi r22,lo8(2)
 312 0118 81E0      		ldi r24,lo8(1)
 313 011a 0E94 0000 		call isa_init
 315               	.LM21:
 316 011e 60E0      		ldi r22,lo8(0)
 317 0120 81E0      		ldi r24,lo8(1)
 318 0122 0E94 0000 		call isa_set_schedule
 320               	.LM22:
 321 0126 83E1      		ldi r24,lo8(19)
 322 0128 0E94 0000 		call isa_set_channel
 324               	.LM23:
 325 012c 0E94 0000 		call isa_start
 327               	.LM24:
 328 0130 64E7      		ldi r22,lo8(116)
 329 0132 80E0      		ldi r24,lo8(rx_buf)
 330 0134 90E0      		ldi r25,hi8(rx_buf)
 331 0136 0E94 0000 		call isa_rx_pkt_set_buffer
 333               	.LM25:
 334 013a 0F90      		pop __tmp_reg__
 335 013c 0F90      		pop __tmp_reg__
 336 013e 0F90      		pop __tmp_reg__
 337 0140 0F90      		pop __tmp_reg__
 338 0142 00C0      		rjmp .L4
 339               	.L5:
 341               	.LM26:
 342 0144 0E94 0000 		call nrk_wait_until_next_period
 343               	.L4:
 344 0148 0E94 0000 		call isa_ready
 345 014c 8823      		tst r24
 346 014e 01F0      		breq .L5
 348               	.LM27:
 349 0150 80E0      		ldi r24,lo8(.LC1)
 350 0152 90E0      		ldi r25,hi8(.LC1)
 351 0154 9F93      		push r25
 352 0156 8F93      		push r24
 353 0158 0E94 0000 		call printf
 354 015c 0F90      		pop __tmp_reg__
 355 015e 0F90      		pop __tmp_reg__
 357               	.LM28:
 358 0160 50E0      		ldi r21,lo8(.LC2)
 359 0162 252E      		mov r2,r21
 360 0164 50E0      		ldi r21,hi8(.LC2)
 361 0166 352E      		mov r3,r21
 363               	.LM29:
 364 0168 42E0      		ldi r20,lo8(2)
 365 016a 442E      		mov r4,r20
 366 016c 512C      		mov r5,__zero_reg__
 367 016e 4C0E      		add r4,r28
 368 0170 5D1E      		adc r5,r29
 369 0172 3E01      		movw r6,r28
 370 0174 0894      		sec
 371 0176 611C      		adc r6,__zero_reg__
 372 0178 711C      		adc r7,__zero_reg__
 374               	.LM30:
 375 017a 30E0      		ldi r19,lo8(rx_buf+3)
 376 017c E32E      		mov r14,r19
 377 017e 30E0      		ldi r19,hi8(rx_buf+3)
 378 0180 F32E      		mov r15,r19
 379 0182 2DEF      		ldi r18,lo8(-3)
 380 0184 822E      		mov r8,r18
 381 0186 2FEF      		ldi r18,hi8(-3)
 382 0188 922E      		mov r9,r18
 383 018a 8E0C      		add r8,r14
 384 018c 9F1C      		adc r9,r15
 386               	.LM31:
 387 018e 00E0      		ldi r16,lo8(tx_buf+3)
 388 0190 10E0      		ldi r17,hi8(tx_buf+3)
 389 0192 90E0      		ldi r25,lo8(.LC3)
 390 0194 A92E      		mov r10,r25
 391 0196 90E0      		ldi r25,hi8(.LC3)
 392 0198 B92E      		mov r11,r25
 393 019a 8DEF      		ldi r24,lo8(-3)
 394 019c C82E      		mov r12,r24
 395 019e 8FEF      		ldi r24,hi8(-3)
 396 01a0 D82E      		mov r13,r24
 397 01a2 C00E      		add r12,r16
 398 01a4 D11E      		adc r13,r17
 399               	.L7:
 401               	.LM32:
 402 01a6 2091 0000 		lds r18,txCount
 403 01aa 3091 0000 		lds r19,(txCount)+1
 404 01ae C901      		movw r24,r18
 405 01b0 68EE      		ldi r22,lo8(1000)
 406 01b2 73E0      		ldi r23,hi8(1000)
 407 01b4 0E94 0000 		call __udivmodhi4
 408 01b8 892B      		or r24,r25
 409 01ba 01F4      		brne .L8
 411               	.LM33:
 412 01bc 8091 0000 		lds r24,packetsLost
 413 01c0 9091 0000 		lds r25,(packetsLost)+1
 414 01c4 9F93      		push r25
 415 01c6 8F93      		push r24
 416 01c8 8091 0000 		lds r24,rxCount
 417 01cc 9091 0000 		lds r25,(rxCount)+1
 418 01d0 9F93      		push r25
 419 01d2 8F93      		push r24
 420 01d4 3F93      		push r19
 421 01d6 2F93      		push r18
 422 01d8 3F92      		push r3
 423 01da 2F92      		push r2
 424 01dc 0E94 0000 		call printf
 425 01e0 8DB7      		in r24,__SP_L__
 426 01e2 9EB7      		in r25,__SP_H__
 427 01e4 0896      		adiw r24,8
 428 01e6 0FB6      		in __tmp_reg__,__SREG__
 429 01e8 F894      		cli
 430 01ea 9EBF      		out __SP_H__,r25
 431 01ec 0FBE      		out __SREG__,__tmp_reg__
 432 01ee 8DBF      		out __SP_L__,r24
 433               	.L8:
 435               	.LM34:
 436 01f0 0E94 0000 		call isa_rx_pkt_check
 437 01f4 8823      		tst r24
 438 01f6 01F0      		breq .L10
 440               	.LM35:
 441 01f8 B201      		movw r22,r4
 442 01fa C301      		movw r24,r6
 443 01fc 0E94 0000 		call isa_rx_pkt_get
 445               	.LM36:
 446 0200 F701      		movw r30,r14
 447 0202 0190      		ld __tmp_reg__,Z+
 448 0204 0020      		tst __tmp_reg__
 449 0206 01F4      		brne .-6
 450 0208 E050      		subi r30,lo8(rx_buf+4)
 451 020a F040      		sbci r31,hi8(rx_buf+4)
 452 020c EC5F      		subi r30,lo8(-(4))
 453 020e E983      		std Y+1,r30
 455               	.LM37:
 456 0210 88E0      		ldi r24,lo8(8)
 457 0212 0E94 0000 		call configDHDR
 458 0216 28E0      		ldi r18,lo8(8)
 459 0218 482F      		mov r20,r24
 460 021a 6981      		ldd r22,Y+1
 461 021c C401      		movw r24,r8
 462 021e 0E94 0000 		call isa_tx_pkt
 464               	.LM38:
 465 0222 0E94 0000 		call isa_rx_pkt_release
 466               	.L10:
 468               	.LM39:
 469 0226 87E0      		ldi r24,lo8(7)
 470 0228 0E94 0000 		call isa_tx_pkt_check
 471 022c 8823      		tst r24
 472 022e 01F4      		brne .L12
 474               	.LM40:
 475 0230 B501      		movw r22,r10
 476 0232 C801      		movw r24,r16
 477 0234 0E94 0000 		call strcpy
 479               	.LM41:
 480 0238 F801      		movw r30,r16
 481 023a 0190      		ld __tmp_reg__,Z+
 482 023c 0020      		tst __tmp_reg__
 483 023e 01F4      		brne .-6
 484 0240 E050      		subi r30,lo8(tx_buf+4)
 485 0242 F040      		sbci r31,hi8(tx_buf+4)
 486 0244 EC5F      		subi r30,lo8(-(4))
 487 0246 E983      		std Y+1,r30
 489               	.LM42:
 490 0248 87E0      		ldi r24,lo8(7)
 491 024a 0E94 0000 		call configDHDR
 492 024e 27E0      		ldi r18,lo8(7)
 493 0250 482F      		mov r20,r24
 494 0252 6981      		ldd r22,Y+1
 495 0254 C601      		movw r24,r12
 496 0256 0E94 0000 		call isa_tx_pkt
 497               	.L12:
 499               	.LM43:
 500 025a 0E94 0000 		call isa_wait_until_rx_or_tx
 501 025e 00C0      		rjmp .L7
 502               	/* epilogue: frame size=2 */
 503               	/* epilogue: noreturn */
 504               	/* epilogue end (size=0) */
 505               	/* function Task1 size 211 (185) */
 511               	.Lscope2:
 513               		.stabd	78,0,0
 515               	.global	main
 517               	main:
 518               		.stabd	46,0,0
 520               	.LM44:
 521               	.LFBB3:
 522               	/* prologue: frame size=0 */
 523 0260 C0E0      		ldi r28,lo8(__stack - 0)
 524 0262 D0E0      		ldi r29,hi8(__stack - 0)
 525 0264 DEBF      		out __SP_H__,r29
 526 0266 CDBF      		out __SP_L__,r28
 527               	/* prologue end (size=4) */
 529               	.LM45:
 530 0268 0E94 0000 		call nrk_setup_ports
 532               	.LM46:
 533 026c 87E0      		ldi r24,lo8(7)
 534 026e 90E0      		ldi r25,hi8(7)
 535 0270 0E94 0000 		call nrk_setup_uart
 537               	.LM47:
 538 0274 80E0      		ldi r24,lo8(__c.2360)
 539 0276 90E0      		ldi r25,hi8(__c.2360)
 540 0278 0E94 0000 		call nrk_kprintf
 542               	.LM48:
 543 027c 0E94 0000 		call nrk_init
 545               	.LM49:
 546 0280 80E0      		ldi r24,lo8(0)
 547 0282 90E0      		ldi r25,hi8(0)
 548 0284 0E94 0000 		call nrk_led_clr
 550               	.LM50:
 551 0288 81E0      		ldi r24,lo8(1)
 552 028a 90E0      		ldi r25,hi8(1)
 553 028c 0E94 0000 		call nrk_led_clr
 555               	.LM51:
 556 0290 82E0      		ldi r24,lo8(2)
 557 0292 90E0      		ldi r25,hi8(2)
 558 0294 0E94 0000 		call nrk_led_clr
 560               	.LM52:
 561 0298 83E0      		ldi r24,lo8(3)
 562 029a 90E0      		ldi r25,hi8(3)
 563 029c 0E94 0000 		call nrk_led_clr
 565               	.LM53:
 566 02a0 20E0      		ldi r18,lo8(0)
 567 02a2 30E0      		ldi r19,hi8(0)
 568 02a4 40E0      		ldi r20,hlo8(0)
 569 02a6 50E0      		ldi r21,hhi8(0)
 570 02a8 60E0      		ldi r22,lo8(0)
 571 02aa 70E0      		ldi r23,hi8(0)
 572 02ac 80E0      		ldi r24,hlo8(0)
 573 02ae 90E0      		ldi r25,hhi8(0)
 574 02b0 0E94 0000 		call nrk_time_set
 576               	.LM54:
 577 02b4 0E94 0000 		call isa_task_config
 579               	.LM55:
 580 02b8 0E94 0000 		call nrk_create_taskset
 582               	.LM56:
 583 02bc 0E94 0000 		call nrk_start
 585               	.LM57:
 586 02c0 80E0      		ldi r24,lo8(0)
 587 02c2 90E0      		ldi r25,hi8(0)
 588               	/* epilogue: frame size=0 */
 589 02c4 0C94 0000 		jmp exit
 590               	/* epilogue end (size=2) */
 591               	/* function main size 52 (46) */
 593               	.Lscope3:
 595               		.stabd	78,0,0
 596               		.section	.progmem.data,"a",@progbits
 599               	__c.2409:
 600 0000 4372 6561 		.string	"Create Done\r\n"
 600      7465 2044 
 600      6F6E 650D 
 600      0A00 
 603               	__c.2360:
 604 000e 5374 6172 		.string	"Starting up...\r\n"
 604      7469 6E67 
 604      2075 702E 
 604      2E2E 0D0A 
 604      00
 605               		.comm _nrk_signal_list,4,1
 606               		.comm nrk_idle_task_stk,128,1
 607               		.comm nrk_kernel_stk_ptr,2,1
 608               		.comm isa_sched,25,1
 609               		.comm isa_tdma_rx_mask,4,1
 610               		.comm isa_tdma_tx_mask,4,1
 611               		.comm isa_id,1,1
 612               		.comm isa_clk_src_id,1,1
 613               		.comm tx_slot_from_join,4,1
 614               		.comm isa_rx_data_ready,4,1
 615               		.comm isa_tx_data_ready,4,1
 616               		.comm child_list,4,1
 617               		.comm DHDR,1,1
 618               		.comm last_slot,2,1
 619               		.comm resync_times,2,1
 620               		.comm isa_tx_info,100,1
 621               		.comm isa_param,9,1
 622               		.comm isa_node_mode,1,1
 623               		.comm isa_task,35,1
 624               		.comm isa_task_stack,128,1
 625               		.comm isa_rfRxInfo,9,1
 626               		.comm isa_ack_tx,7,1
 627               		.comm isa_ack_buf,4,1
 628               		.comm isa_rfTxInfo,7,1
 629               		.comm _isa_ready,1,1
 630               		.comm _isa_join_ok,1,1
 631               		.comm error_task,1,1
 632               		.comm error_num,1,1
 633               		.comm Stack1,128,1
 634               		.comm TaskOne,35,1
 635               		.comm tx_buf,116,1
 636               		.comm rx_buf,116,1
 637               		.comm timestart,8,1
 638               		.comm timeend,8,1
 639               		.comm newtime,8,1
 640               		.comm timeout,8,1
 679               		.text
 681               	.Letext0:
 682               	/* File "main.c": code  356 = 0x0164 ( 323), prologues  30, epilogues   3 */
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccDIsZVe.s:2      *ABS*:0000003f __SREG__
     /tmp/ccDIsZVe.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccDIsZVe.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccDIsZVe.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccDIsZVe.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccDIsZVe.s:140    .text:00000000 nrk_create_taskset
     /tmp/ccDIsZVe.s:254    .text:000000ba Task1
                            *COM*:00000023 TaskOne
                            *COM*:00000080 Stack1
     /tmp/ccDIsZVe.s:599    .progmem.data:00000000 __c.2409
                            *COM*:00000074 rx_buf
                            *COM*:00000074 tx_buf
     /tmp/ccDIsZVe.s:517    .text:00000260 main
     /tmp/ccDIsZVe.s:603    .progmem.data:0000000e __c.2360
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000019 isa_sched
                            *COM*:00000004 isa_tdma_rx_mask
                            *COM*:00000004 isa_tdma_tx_mask
                            *COM*:00000001 isa_id
                            *COM*:00000001 isa_clk_src_id
                            *COM*:00000004 tx_slot_from_join
                            *COM*:00000004 isa_rx_data_ready
                            *COM*:00000004 isa_tx_data_ready
                            *COM*:00000004 child_list
                            *COM*:00000001 DHDR
                            *COM*:00000002 last_slot
                            *COM*:00000002 resync_times
                            *COM*:00000064 isa_tx_info
                            *COM*:00000009 isa_param
                            *COM*:00000001 isa_node_mode
                            *COM*:00000023 isa_task
                            *COM*:00000080 isa_task_stack
                            *COM*:00000009 isa_rfRxInfo
                            *COM*:00000007 isa_ack_tx
                            *COM*:00000004 isa_ack_buf
                            *COM*:00000007 isa_rfTxInfo
                            *COM*:00000001 _isa_ready
                            *COM*:00000001 _isa_join_ok
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000008 timestart
                            *COM*:00000008 timeend
                            *COM*:00000008 newtime
                            *COM*:00000008 timeout

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
nrk_activate_task
nrk_kprintf
nrk_get_pid
printf
nrk_led_set
isa_set_channel_pattern
isa_init
isa_set_schedule
isa_set_channel
isa_start
isa_rx_pkt_set_buffer
nrk_wait_until_next_period
isa_ready
txCount
__udivmodhi4
packetsLost
rxCount
isa_rx_pkt_check
isa_rx_pkt_get
configDHDR
isa_tx_pkt
isa_rx_pkt_release
isa_tx_pkt_check
strcpy
isa_wait_until_rx_or_tx
__stack
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_led_clr
nrk_time_set
isa_task_config
nrk_start
exit
