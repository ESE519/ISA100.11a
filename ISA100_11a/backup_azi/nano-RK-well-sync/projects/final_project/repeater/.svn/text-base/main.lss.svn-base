
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800200  000069da  00006a4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000069da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000049f  0080029a  00006a74  00006ae8  2**0
                  ALLOC
  3 .stab         0001032c  00000000  00000000  00006ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00006953  00000000  00000000  00016e14  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__ctors_end>
       4:	0c 94 58 2f 	jmp	0x5eb0	; 0x5eb0 <__vector_1>
       8:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
       c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      10:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      14:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      18:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      1c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      20:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      24:	0c 94 86 2f 	jmp	0x5f0c	; 0x5f0c <__vector_9>
      28:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      2c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      30:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      34:	0c 94 39 2d 	jmp	0x5a72	; 0x5a72 <__vector_13>
      38:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      3c:	0c 94 39 2d 	jmp	0x5a72	; 0x5a72 <__vector_13>
      40:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      44:	0c 94 6c 2d 	jmp	0x5ad8	; 0x5ad8 <__vector_17>
      48:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      4c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      50:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      54:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      58:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      5c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      60:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      64:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      68:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      6c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      70:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      74:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      78:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      7c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      80:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__vector_32>
      84:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      88:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      8c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      90:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__vector_36>
      94:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      98:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      9c:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      a0:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      a4:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      a8:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      ac:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      b0:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      b4:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      b8:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      bc:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      c0:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      c4:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      c8:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__bad_interrupt>
      cc:	94 1e       	adc	r9, r20
      ce:	9a 1e       	adc	r9, r26
      d0:	9d 1e       	adc	r9, r29
      d2:	a0 1e       	adc	r10, r16
      d4:	a3 1e       	adc	r10, r19
      d6:	a6 1e       	adc	r10, r22
      d8:	ac 1e       	adc	r10, r28
      da:	a9 1e       	adc	r10, r25
      dc:	af 1e       	adc	r10, r31
      de:	b2 1e       	adc	r11, r18
      e0:	b5 1e       	adc	r11, r21
      e2:	bb 1e       	adc	r11, r27
      e4:	be 1e       	adc	r11, r30
      e6:	c1 1e       	adc	r12, r17
      e8:	c4 1e       	adc	r12, r20
      ea:	b8 1e       	adc	r11, r24
      ec:	91 1e       	adc	r9, r17
      ee:	97 1e       	adc	r9, r23

000000f0 <__c.2386>:
      f0:	43 72 65 61 74 65 20 44 6f 6e 65 0d 0a 00           Create Done...

000000fe <__c.2346>:
      fe:	53 74 61 72 74 69 6e 67 20 75 70 2e 2e 2e 0d 0a     Starting up.....
	...

0000010f <__c.2619>:
     10f:	49 53 41 20 45 52 52 4f 52 3a 20 63 72 65 61 74     ISA ERROR: creat
     11f:	69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66 61     ing tx signal fa
     12f:	69 6c 65 64 0d 0a 00                                iled...

00000136 <__c.2617>:
     136:	49 53 41 20 45 52 52 4f 52 3a 20 63 72 65 61 74     ISA ERROR: creat
     146:	69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66 61     ing rx signal fa
     156:	69 6c 65 64 0d 0a 00                                iled...

0000015d <__c.2734>:
     15d:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 52     CC2420 ERROR:  R
     16d:	65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70 68     elease of semaph
     17d:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

0000018a <__c.2672>:
     18a:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 41     CC2420 ERROR:  A
     19a:	63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68 6f     ccess to semapho
     1aa:	72 65 20 66 61 69 6c 65 64 0d 0a 00                 re failed...

000001b6 <__c.2382>:
     1b6:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001bd <__c.2379>:
     1bd:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1cd:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000001d8 <__c.2376>:
     1d8:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1e8:	20 53 69 67 6e 61 6c 00                              Signal.

000001f0 <__c.2373>:
     1f0:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     200:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000210 <__c.2370>:
     210:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     220:	72 6f 72 00                                         ror.

00000224 <__c.2367>:
     224:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000235 <__c.2364>:
     235:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000244 <__c.2361>:
     244:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     254:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

0000025f <__c.2358>:
     25f:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000026b <__c.2355>:
     26b:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     27b:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     28b:	20 6f 6b 3f 00                                       ok?.

00000290 <__c.2352>:
     290:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2a0:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002ae <__c.2349>:
     2ae:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     2be:	72 74 00                                            rt.

000002c1 <__c.2346>:
     2c1:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     2d1:	49 44 00                                            ID.

000002d4 <__c.2343>:
     2d4:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     2e4:	20 57 61 6b 65 75 70 00                              Wakeup.

000002ec <__c.2340>:
     2ec:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     2fc:	6c 61 74 65 64 00                                   lated.

00000302 <__c.2337>:
     302:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     312:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000031d <__c.2334>:
     31d:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     32d:	69 6e 74 65 72 00                                   inter.

00000333 <__c.2331>:
     333:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     343:	6c 6f 77 00                                         low.

00000347 <__c.2327>:
     347:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     357:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     367:	6e 6f 75 67 68 21 00                                nough!.

0000036e <__c.2324>:
     36e:	29 3a 20 00                                         ): .

00000372 <__c.2322>:
     372:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

0000037e <__c.2255>:
     37e:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

0000038d <__c.2047>:
     38d:	45 46 47 65 66 67 00                                EFGefg.

00000394 <__c.2041>:
     394:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000003a4 <__ctors_end>:
     3a4:	11 24       	eor	r1, r1
     3a6:	1f be       	out	0x3f, r1	; 63
     3a8:	cf ef       	ldi	r28, 0xFF	; 255
     3aa:	d1 e2       	ldi	r29, 0x21	; 33
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	cd bf       	out	0x3d, r28	; 61

000003b0 <__do_copy_data>:
     3b0:	12 e0       	ldi	r17, 0x02	; 2
     3b2:	a0 e0       	ldi	r26, 0x00	; 0
     3b4:	b2 e0       	ldi	r27, 0x02	; 2
     3b6:	ea ed       	ldi	r30, 0xDA	; 218
     3b8:	f9 e6       	ldi	r31, 0x69	; 105
     3ba:	00 e0       	ldi	r16, 0x00	; 0
     3bc:	0b bf       	out	0x3b, r16	; 59
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <__do_copy_data+0x14>
     3c0:	07 90       	elpm	r0, Z+
     3c2:	0d 92       	st	X+, r0
     3c4:	aa 39       	cpi	r26, 0x9A	; 154
     3c6:	b1 07       	cpc	r27, r17
     3c8:	d9 f7       	brne	.-10     	; 0x3c0 <__do_copy_data+0x10>

000003ca <__do_clear_bss>:
     3ca:	17 e0       	ldi	r17, 0x07	; 7
     3cc:	aa e9       	ldi	r26, 0x9A	; 154
     3ce:	b2 e0       	ldi	r27, 0x02	; 2
     3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <.do_clear_bss_start>

000003d2 <.do_clear_bss_loop>:
     3d2:	1d 92       	st	X+, r1

000003d4 <.do_clear_bss_start>:
     3d4:	a9 33       	cpi	r26, 0x39	; 57
     3d6:	b1 07       	cpc	r27, r17
     3d8:	e1 f7       	brne	.-8      	; 0x3d2 <.do_clear_bss_loop>
     3da:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <main>
     3de:	0c 94 ec 34 	jmp	0x69d8	; 0x69d8 <_exit>

000003e2 <__bad_interrupt>:
     3e2:	0c 94 a4 2d 	jmp	0x5b48	; 0x5b48 <__vector_default>

000003e6 <nrk_create_taskset>:


void
nrk_create_taskset()
{
  TaskOne.task = Task1;
     3e6:	80 e5       	ldi	r24, 0x50	; 80
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	90 93 f5 02 	sts	0x02F5, r25
     3ee:	80 93 f4 02 	sts	0x02F4, r24
  TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE-1];
     3f2:	80 e9       	ldi	r24, 0x90	; 144
     3f4:	94 e0       	ldi	r25, 0x04	; 4
     3f6:	90 93 f1 02 	sts	0x02F1, r25
     3fa:	80 93 f0 02 	sts	0x02F0, r24
  TaskOne.Pbos = (void *) &Stack1[0];
     3fe:	81 e1       	ldi	r24, 0x11	; 17
     400:	94 e0       	ldi	r25, 0x04	; 4
     402:	90 93 f3 02 	sts	0x02F3, r25
     406:	80 93 f2 02 	sts	0x02F2, r24
  TaskOne.prio = 2;
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	80 93 f7 02 	sts	0x02F7, r24
  TaskOne.FirstActivation = TRUE;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	80 93 f6 02 	sts	0x02F6, r24
  TaskOne.Type = BASIC_TASK;
     416:	80 93 f8 02 	sts	0x02F8, r24
  TaskOne.SchType = PREEMPTIVE;
     41a:	80 93 f9 02 	sts	0x02F9, r24
  TaskOne.period.secs = 0;
     41e:	10 92 fa 02 	sts	0x02FA, r1
     422:	10 92 fb 02 	sts	0x02FB, r1
     426:	10 92 fc 02 	sts	0x02FC, r1
     42a:	10 92 fd 02 	sts	0x02FD, r1
  TaskOne.period.nano_secs = 20*NANOS_PER_MS;
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	9d e2       	ldi	r25, 0x2D	; 45
     432:	a1 e3       	ldi	r26, 0x31	; 49
     434:	b1 e0       	ldi	r27, 0x01	; 1
     436:	80 93 fe 02 	sts	0x02FE, r24
     43a:	90 93 ff 02 	sts	0x02FF, r25
     43e:	a0 93 00 03 	sts	0x0300, r26
     442:	b0 93 01 03 	sts	0x0301, r27
  TaskOne.cpu_reserve.secs = 0;
     446:	10 92 02 03 	sts	0x0302, r1
     44a:	10 92 03 03 	sts	0x0303, r1
     44e:	10 92 04 03 	sts	0x0304, r1
     452:	10 92 05 03 	sts	0x0305, r1
  TaskOne.cpu_reserve.nano_secs = 20*NANOS_PER_MS;
     456:	80 93 06 03 	sts	0x0306, r24
     45a:	90 93 07 03 	sts	0x0307, r25
     45e:	a0 93 08 03 	sts	0x0308, r26
     462:	b0 93 09 03 	sts	0x0309, r27
  TaskOne.offset.secs = 0;
     466:	10 92 0a 03 	sts	0x030A, r1
     46a:	10 92 0b 03 	sts	0x030B, r1
     46e:	10 92 0c 03 	sts	0x030C, r1
     472:	10 92 0d 03 	sts	0x030D, r1
  TaskOne.offset.nano_secs= 50*NANOS_PER_MS;
     476:	80 e8       	ldi	r24, 0x80	; 128
     478:	90 ef       	ldi	r25, 0xF0	; 240
     47a:	aa ef       	ldi	r26, 0xFA	; 250
     47c:	b2 e0       	ldi	r27, 0x02	; 2
     47e:	80 93 0e 03 	sts	0x030E, r24
     482:	90 93 0f 03 	sts	0x030F, r25
     486:	a0 93 10 03 	sts	0x0310, r26
     48a:	b0 93 11 03 	sts	0x0311, r27
  nrk_activate_task (&TaskOne);
     48e:	8f ee       	ldi	r24, 0xEF	; 239
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <nrk_activate_task>


  nrk_kprintf( PSTR("Create Done\r\n") );
     496:	80 ef       	ldi	r24, 0xF0	; 240
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 1f 1b 	call	0x363e	; 0x363e <nrk_kprintf>
     49e:	08 95       	ret

000004a0 <Task1>:
  return 0;
}


void Task1()
{
     4a0:	6f 92       	push	r6
     4a2:	7f 92       	push	r7
     4a4:	8f 92       	push	r8
     4a6:	9f 92       	push	r9
     4a8:	af 92       	push	r10
     4aa:	bf 92       	push	r11
     4ac:	cf 92       	push	r12
     4ae:	df 92       	push	r13
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	22 97       	sbiw	r28, 0x02	; 2
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61

  char c = -1;
  nrk_sig_t uart_rx_signal;
  uint8_t finished = 0;

  printf( "Task1 PID=%d\r\n",nrk_get_pid());
     4cc:	0e 94 10 24 	call	0x4820	; 0x4820 <nrk_get_pid>
     4d0:	99 27       	eor	r25, r25
     4d2:	9f 93       	push	r25
     4d4:	8f 93       	push	r24
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	9f 93       	push	r25
     4dc:	8f 93       	push	r24
     4de:	0e 94 69 32 	call	0x64d2	; 0x64d2 <printf>
  
  nrk_led_set(RED_LED);
     4e2:	83 e0       	ldi	r24, 0x03	; 3
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <nrk_led_set>
  
  isa_set_channel_pattern(1);
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 34 03 	call	0x668	; 0x668 <isa_set_channel_pattern>

  isa_init (ISA_REPEATER, MY_ID);//change
     4f2:	62 e0       	ldi	r22, 0x02	; 2
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <isa_init>
  
  isa_set_schedule(ISA_REPEATER, MY_CLK_SRC_ID);
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	0e 94 3e 09 	call	0x127c	; 0x127c <isa_set_schedule>

  isa_set_channel(MY_CHANNEL);
     502:	83 e1       	ldi	r24, 0x13	; 19
     504:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <isa_set_channel>

  isa_start();
     508:	0e 94 81 03 	call	0x702	; 0x702 <isa_start>
  
  isa_rx_pkt_set_buffer(rx_buf, RF_MAX_PAYLOAD_SIZE);
     50c:	64 e7       	ldi	r22, 0x74	; 116
     50e:	8c e9       	ldi	r24, 0x9C	; 156
     510:	93 e0       	ldi	r25, 0x03	; 3
     512:	0e 94 71 03 	call	0x6e2	; 0x6e2 <isa_rx_pkt_set_buffer>
  
  while(!isa_ready())  nrk_wait_until_next_period(); 
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	02 c0       	rjmp	.+4      	; 0x524 <Task1+0x84>
     520:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <nrk_wait_until_next_period>
     524:	0e 94 67 03 	call	0x6ce	; 0x6ce <isa_ready>
     528:	88 23       	and	r24, r24
     52a:	d1 f3       	breq	.-12     	; 0x520 <Task1+0x80>
	else
	    my_tx_slot[i]=tx_slot_from_join[i];
    }	   
  printf("MAIN_TX:%d\r\n",my_tx_slot[0]);*/

  printf("isa start!\n\r");
     52c:	8f e0       	ldi	r24, 0x0F	; 15
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	9f 93       	push	r25
     532:	8f 93       	push	r24
     534:	0e 94 69 32 	call	0x64d2	; 0x64d2 <printf>
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0

  //i=0;
  while(1){
//nrk_gpio_toggle(NRK_DEBUG_0);
       if( isa_rx_pkt_check()!=0 ) {
	    local_rx_buf=isa_rx_pkt_get(&length, &rssi);
     53c:	32 e0       	ldi	r19, 0x02	; 2
     53e:	63 2e       	mov	r6, r19
     540:	71 2c       	mov	r7, r1
     542:	6c 0e       	add	r6, r28
     544:	7d 1e       	adc	r7, r29
     546:	4e 01       	movw	r8, r28
     548:	08 94       	sec
     54a:	81 1c       	adc	r8, r1
     54c:	91 1c       	adc	r9, r1
     54e:	2c e1       	ldi	r18, 0x1C	; 28
     550:	a2 2e       	mov	r10, r18
     552:	22 e0       	ldi	r18, 0x02	; 2
     554:	b2 2e       	mov	r11, r18
	length=strlen(&rx_buf[PKT_DATA_START])+PKT_DATA_START+1; //change
	//isa_tx_pkt(rx_buf,length,configDHDR(),my_tx_slot[0]);//change forward the message from recipient
	isa_tx_pkt(rx_buf,length,configDHDR(),MY_TX_SLOT);
	isa_wait_until_rx_or_tx ();*/

	sprintf( &tx_buf[PKT_DATA_START],"2");
     556:	0c eb       	ldi	r16, 0xBC	; 188
     558:	14 e0       	ldi	r17, 0x04	; 4
     55a:	9e e1       	ldi	r25, 0x1E	; 30
     55c:	c9 2e       	mov	r12, r25
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	d9 2e       	mov	r13, r25
     562:	8d ef       	ldi	r24, 0xFD	; 253
     564:	e8 2e       	mov	r14, r24
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	f8 2e       	mov	r15, r24
     56a:	e0 0e       	add	r14, r16
     56c:	f1 1e       	adc	r15, r17
  printf("isa start!\n\r");

  //i=0;
  while(1){
//nrk_gpio_toggle(NRK_DEBUG_0);
       if( isa_rx_pkt_check()!=0 ) {
     56e:	0e 94 9b 03 	call	0x736	; 0x736 <isa_rx_pkt_check>
     572:	88 23       	and	r24, r24
     574:	71 f0       	breq	.+28     	; 0x592 <Task1+0xf2>
	    local_rx_buf=isa_rx_pkt_get(&length, &rssi);
     576:	b3 01       	movw	r22, r6
     578:	c4 01       	movw	r24, r8
     57a:	0e 94 28 09 	call	0x1250	; 0x1250 <isa_rx_pkt_get>
	    /*length=strlen(&rx_buf[PKT_DATA_START])+PKT_DATA_START+1; //change
	    isa_tx_pkt(rx_buf,length,configDHDR(),MY_TX_SLOT);//change forward the message from recipient*/
	    //printf(" Forward message is sent.\n\r");
 	    //printf("pkt length:%d",length);
	    //printf("%d\r\n",cnt++);
	    printf( "%c",local_rx_buf[PKT_DATA_START]);
     57e:	fc 01       	movw	r30, r24
     580:	83 81       	ldd	r24, Z+3	; 0x03
     582:	99 27       	eor	r25, r25
     584:	0e 94 80 32 	call	0x6500	; 0x6500 <putchar>
	    isa_rx_pkt_release();
     588:	0e 94 a1 03 	call	0x742	; 0x742 <isa_rx_pkt_release>
	    printf("\r\n");
     58c:	c5 01       	movw	r24, r10
     58e:	0e 94 87 32 	call	0x650e	; 0x650e <puts>
	length=strlen(&rx_buf[PKT_DATA_START])+PKT_DATA_START+1; //change
	//isa_tx_pkt(rx_buf,length,configDHDR(),my_tx_slot[0]);//change forward the message from recipient
	isa_tx_pkt(rx_buf,length,configDHDR(),MY_TX_SLOT);
	isa_wait_until_rx_or_tx ();*/

	sprintf( &tx_buf[PKT_DATA_START],"2");
     592:	b6 01       	movw	r22, r12
     594:	c8 01       	movw	r24, r16
     596:	0e 94 e7 31 	call	0x63ce	; 0x63ce <strcpy>
	length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+1;
     59a:	f8 01       	movw	r30, r16
     59c:	01 90       	ld	r0, Z+
     59e:	00 20       	and	r0, r0
     5a0:	e9 f7       	brne	.-6      	; 0x59c <Task1+0xfc>
     5a2:	ed 5b       	subi	r30, 0xBD	; 189
     5a4:	f4 40       	sbci	r31, 0x04	; 4
     5a6:	ec 5f       	subi	r30, 0xFC	; 252
     5a8:	e9 83       	std	Y+1, r30	; 0x01
	isa_tx_pkt(tx_buf,length,configDHDR(),MY_TX_SLOT);
     5aa:	0e 94 85 03 	call	0x70a	; 0x70a <configDHDR>
     5ae:	22 e0       	ldi	r18, 0x02	; 2
     5b0:	48 2f       	mov	r20, r24
     5b2:	69 81       	ldd	r22, Y+1	; 0x01
     5b4:	c7 01       	movw	r24, r14
     5b6:	0e 94 aa 03 	call	0x754	; 0x754 <isa_tx_pkt>
	isa_wait_until_rx_or_tx ();
     5ba:	0e 94 bb 07 	call	0xf76	; 0xf76 <isa_wait_until_rx_or_tx>
     5be:	d7 cf       	rjmp	.-82     	; 0x56e <Task1+0xce>

000005c0 <main>:
nrk_time_t timeout;



int main ()
{
     5c0:	cf ef       	ldi	r28, 0xFF	; 255
     5c2:	d1 e2       	ldi	r29, 0x21	; 33
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	cd bf       	out	0x3d, r28	; 61
  nrk_setup_ports();
     5c8:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
     5cc:	87 e0       	ldi	r24, 0x07	; 7
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <nrk_setup_uart>

  nrk_kprintf( PSTR("Starting up...\r\n") );
     5d4:	8e ef       	ldi	r24, 0xFE	; 254
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 1f 1b 	call	0x363e	; 0x363e <nrk_kprintf>
	
  nrk_init();
     5dc:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <nrk_init>

  nrk_led_clr(0);
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <nrk_led_clr>
  nrk_led_clr(1);
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <nrk_led_clr>
  nrk_led_clr(2);
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <nrk_led_clr>
  nrk_led_clr(3);
     5f8:	83 e0       	ldi	r24, 0x03	; 3
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <nrk_led_clr>
  
  nrk_time_set(0,0);
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	40 e0       	ldi	r20, 0x00	; 0
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <nrk_time_set>
  
  isa_task_config();
     614:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <isa_task_config>
  
  nrk_create_taskset ();
     618:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <nrk_create_taskset>

  nrk_start();
     61c:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <nrk_start>
  
  return 0;
}
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0c 94 ec 34 	jmp	0x69d8	; 0x69d8 <_exit>

00000628 <config_child_list>:
  
  isa_set_channel_pattern(1);

  isa_init (ISA_REPEATER, MY_ID);//change
  
  isa_set_schedule(ISA_REPEATER, MY_CLK_SRC_ID);
     628:	21 e0       	ldi	r18, 0x01	; 1
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	04 c0       	rjmp	.+8      	; 0x63a <config_child_list+0x12>
     632:	22 0f       	add	r18, r18
     634:	33 1f       	adc	r19, r19
     636:	44 1f       	adc	r20, r20
     638:	55 1f       	adc	r21, r21
     63a:	8a 95       	dec	r24
     63c:	d2 f7       	brpl	.-12     	; 0x632 <config_child_list+0xa>
     63e:	80 91 9a 02 	lds	r24, 0x029A
     642:	90 91 9b 02 	lds	r25, 0x029B
     646:	a0 91 9c 02 	lds	r26, 0x029C
     64a:	b0 91 9d 02 	lds	r27, 0x029D
     64e:	82 2b       	or	r24, r18
     650:	93 2b       	or	r25, r19
     652:	a4 2b       	or	r26, r20
     654:	b5 2b       	or	r27, r21
     656:	80 93 9a 02 	sts	0x029A, r24
     65a:	90 93 9b 02 	sts	0x029B, r25
     65e:	a0 93 9c 02 	sts	0x029C, r26
     662:	b0 93 9d 02 	sts	0x029D, r27
     666:	08 95       	ret

00000668 <isa_set_channel_pattern>:
    for(i=0;i<4;i++){  // set tx slots
	if(tx_slot_from_join[i]==0)
		break;
	else
	    my_tx_slot[i]=tx_slot_from_join[i];
    }	   
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	81 f5       	brne	.+96     	; 0x6cc <isa_set_channel_pattern+0x64>
  printf("MAIN_TX:%d\r\n",my_tx_slot[0]);*/

  printf("isa start!\n\r");
     66c:	83 e1       	ldi	r24, 0x13	; 19
     66e:	80 93 40 06 	sts	0x0640, r24

     672:	8c e0       	ldi	r24, 0x0C	; 12
     674:	80 93 41 06 	sts	0x0641, r24
  //i=0;
     678:	84 e1       	ldi	r24, 0x14	; 20
     67a:	80 93 42 06 	sts	0x0642, r24
  while(1){
     67e:	88 e1       	ldi	r24, 0x18	; 24
     680:	80 93 43 06 	sts	0x0643, r24
//nrk_gpio_toggle(NRK_DEBUG_0);
     684:	80 e1       	ldi	r24, 0x10	; 16
     686:	80 93 44 06 	sts	0x0644, r24
       if( isa_rx_pkt_check()!=0 ) {
     68a:	87 e1       	ldi	r24, 0x17	; 23
     68c:	80 93 45 06 	sts	0x0645, r24
	    local_rx_buf=isa_rx_pkt_get(&length, &rssi);
     690:	82 e1       	ldi	r24, 0x12	; 18
     692:	80 93 46 06 	sts	0x0646, r24
	    //printf("length is %d, rssi is %d.\n\r",length,rssi);
     696:	89 e1       	ldi	r24, 0x19	; 25
     698:	80 93 47 06 	sts	0x0647, r24
	    //local_rx_buf[PKT_DATA_START+length-2]='\0';
     69c:	8e e0       	ldi	r24, 0x0E	; 14
     69e:	80 93 48 06 	sts	0x0648, r24
	    //printf("RX[%d]",slot);
     6a2:	85 e1       	ldi	r24, 0x15	; 21
     6a4:	80 93 49 06 	sts	0x0649, r24
	    /*for(i=PKT_DATA_START; i<length-1; i++ )
     6a8:	8b e0       	ldi	r24, 0x0B	; 11
     6aa:	80 93 4a 06 	sts	0x064A, r24
		printf( "%c",local_rx_buf[i]);*/
     6ae:	8f e0       	ldi	r24, 0x0F	; 15
     6b0:	80 93 4b 06 	sts	0x064B, r24
	    //printf("\r\n");
     6b4:	86 e1       	ldi	r24, 0x16	; 22
     6b6:	80 93 4c 06 	sts	0x064C, r24
	    //sprintf( &tx_buf[PKT_DATA_START],"Hello Mingzhe!");
     6ba:	81 e1       	ldi	r24, 0x11	; 17
     6bc:	80 93 4d 06 	sts	0x064D, r24
	    //length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+1;
     6c0:	8d e0       	ldi	r24, 0x0D	; 13
     6c2:	80 93 4e 06 	sts	0x064E, r24
	    //isa_tx_pkt(tx_buf,length,configDHDR(),MY_TX_SLOT);
     6c6:	8a e1       	ldi	r24, 0x1A	; 26
     6c8:	80 93 4f 06 	sts	0x064F, r24
     6cc:	08 95       	ret

000006ce <isa_ready>:
 	    //printf("pkt length:%d",length);
	    //printf("%d\r\n",cnt++);
	    printf( "%c",local_rx_buf[PKT_DATA_START]);
	    isa_rx_pkt_release();
	    printf("\r\n");

     6ce:	80 91 b8 04 	lds	r24, 0x04B8
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	19 f4       	brne	.+6      	; 0x6dc <isa_ready+0xe>
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	08 95       	ret
     6dc:	8f ef       	ldi	r24, 0xFF	; 255
     6de:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	

     6e0:	08 95       	ret

000006e2 <isa_rx_pkt_set_buffer>:
	/*sprintf( &tx_buf[PKT_DATA_START],local_rx_buf+PKT_DATA_START);
	length=strlen(&rx_buf[PKT_DATA_START])+PKT_DATA_START+1; //change
	//isa_tx_pkt(rx_buf,length,configDHDR(),my_tx_slot[0]);//change forward the message from recipient
	isa_tx_pkt(rx_buf,length,configDHDR(),MY_TX_SLOT);
	isa_wait_until_rx_or_tx ();*/
     6e2:	66 23       	and	r22, r22
     6e4:	59 f0       	breq	.+22     	; 0x6fc <isa_rx_pkt_set_buffer+0x1a>
     6e6:	00 97       	sbiw	r24, 0x00	; 0
     6e8:	49 f0       	breq	.+18     	; 0x6fc <isa_rx_pkt_set_buffer+0x1a>

     6ea:	90 93 ad 02 	sts	0x02AD, r25
     6ee:	80 93 ac 02 	sts	0x02AC, r24
	sprintf( &tx_buf[PKT_DATA_START],"2");
     6f2:	60 93 ab 02 	sts	0x02AB, r22
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	08 95       	ret
	length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+1;
	isa_tx_pkt(tx_buf,length,configDHDR(),MY_TX_SLOT);
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	9f ef       	ldi	r25, 0xFF	; 255
	isa_wait_until_rx_or_tx ();
     700:	08 95       	ret

00000702 <isa_start>:
     702:	82 e0       	ldi	r24, 0x02	; 2
     704:	80 93 b8 04 	sts	0x04B8, r24
     708:	08 95       	ret

0000070a <configDHDR>:
     70a:	80 91 9b 03 	lds	r24, 0x039B
     70e:	88 23       	and	r24, r24
     710:	11 f4       	brne	.+4      	; 0x716 <configDHDR+0xc>
     712:	85 ee       	ldi	r24, 0xE5	; 229
     714:	01 c0       	rjmp	.+2      	; 0x718 <configDHDR+0xe>
     716:	81 ee       	ldi	r24, 0xE1	; 225
     718:	99 27       	eor	r25, r25
     71a:	87 fd       	sbrc	r24, 7
     71c:	90 95       	com	r25
     71e:	08 95       	ret

00000720 <configDHR>:
     720:	80 91 9b 03 	lds	r24, 0x039B
     724:	88 23       	and	r24, r24
     726:	11 f0       	breq	.+4      	; 0x72c <configDHR+0xc>
     728:	83 e8       	ldi	r24, 0x83	; 131
     72a:	01 c0       	rjmp	.+2      	; 0x72e <configDHR+0xe>
     72c:	83 e0       	ldi	r24, 0x03	; 3
     72e:	99 27       	eor	r25, r25
     730:	87 fd       	sbrc	r24, 7
     732:	90 95       	com	r25
     734:	08 95       	ret

00000736 <isa_rx_pkt_check>:
     736:	80 91 9e 05 	lds	r24, 0x059E
     73a:	99 27       	eor	r25, r25
     73c:	87 fd       	sbrc	r24, 7
     73e:	90 95       	com	r25
     740:	08 95       	ret

00000742 <isa_rx_pkt_release>:
     742:	10 92 9e 05 	sts	0x059E, r1
     746:	10 92 9f 05 	sts	0x059F, r1
     74a:	10 92 a0 05 	sts	0x05A0, r1
     74e:	10 92 a1 05 	sts	0x05A1, r1
     752:	08 95       	ret

00000754 <isa_tx_pkt>:
     754:	33 27       	eor	r19, r19
     756:	f9 01       	movw	r30, r18
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	ee 0f       	add	r30, r30
     75e:	ff 1f       	adc	r31, r31
     760:	ef 5c       	subi	r30, 0xCF	; 207
     762:	fa 4f       	sbci	r31, 0xFA	; 250
     764:	93 83       	std	Z+3, r25	; 0x03
     766:	82 83       	std	Z+2, r24	; 0x02
     768:	60 83       	st	Z, r22
     76a:	41 83       	std	Z+1, r20	; 0x01
     76c:	41 e0       	ldi	r20, 0x01	; 1
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	04 c0       	rjmp	.+8      	; 0x77e <isa_tx_pkt+0x2a>
     776:	44 0f       	add	r20, r20
     778:	55 1f       	adc	r21, r21
     77a:	66 1f       	adc	r22, r22
     77c:	77 1f       	adc	r23, r23
     77e:	2a 95       	dec	r18
     780:	d2 f7       	brpl	.-12     	; 0x776 <isa_tx_pkt+0x22>
     782:	80 91 c1 02 	lds	r24, 0x02C1
     786:	90 91 c2 02 	lds	r25, 0x02C2
     78a:	a0 91 c3 02 	lds	r26, 0x02C3
     78e:	b0 91 c4 02 	lds	r27, 0x02C4
     792:	84 2b       	or	r24, r20
     794:	95 2b       	or	r25, r21
     796:	a6 2b       	or	r26, r22
     798:	b7 2b       	or	r27, r23
     79a:	80 93 c1 02 	sts	0x02C1, r24
     79e:	90 93 c2 02 	sts	0x02C2, r25
     7a2:	a0 93 c3 02 	sts	0x02C3, r26
     7a6:	b0 93 c4 02 	sts	0x02C4, r27
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	08 95       	ret

000007b0 <isa_tx_pkt_check>:
     7b0:	20 91 c1 02 	lds	r18, 0x02C1
     7b4:	30 91 c2 02 	lds	r19, 0x02C2
     7b8:	40 91 c3 02 	lds	r20, 0x02C3
     7bc:	50 91 c4 02 	lds	r21, 0x02C4
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <isa_tx_pkt_check+0x1a>
     7c2:	56 95       	lsr	r21
     7c4:	47 95       	ror	r20
     7c6:	37 95       	ror	r19
     7c8:	27 95       	ror	r18
     7ca:	8a 95       	dec	r24
     7cc:	d2 f7       	brpl	.-12     	; 0x7c2 <isa_tx_pkt_check+0x12>
     7ce:	c9 01       	movw	r24, r18
     7d0:	81 70       	andi	r24, 0x01	; 1
     7d2:	90 70       	andi	r25, 0x00	; 0
     7d4:	08 95       	ret

000007d6 <isa_task_config>:
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	89 ee       	ldi	r24, 0xE9	; 233
     7dc:	97 e0       	ldi	r25, 0x07	; 7
     7de:	90 93 d2 02 	sts	0x02D2, r25
     7e2:	80 93 d1 02 	sts	0x02D1, r24
     7e6:	0c ec       	ldi	r16, 0xCC	; 204
     7e8:	12 e0       	ldi	r17, 0x02	; 2
     7ea:	40 e8       	ldi	r20, 0x80	; 128
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	62 e1       	ldi	r22, 0x12	; 18
     7f0:	73 e0       	ldi	r23, 0x03	; 3
     7f2:	c8 01       	movw	r24, r16
     7f4:	0e 94 62 30 	call	0x60c4	; 0x60c4 <nrk_task_set_stk>
     7f8:	84 e1       	ldi	r24, 0x14	; 20
     7fa:	80 93 d4 02 	sts	0x02D4, r24
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	80 93 d3 02 	sts	0x02D3, r24
     804:	80 93 d5 02 	sts	0x02D5, r24
     808:	80 93 d6 02 	sts	0x02D6, r24
     80c:	10 92 d7 02 	sts	0x02D7, r1
     810:	10 92 d8 02 	sts	0x02D8, r1
     814:	10 92 d9 02 	sts	0x02D9, r1
     818:	10 92 da 02 	sts	0x02DA, r1
     81c:	80 e8       	ldi	r24, 0x80	; 128
     81e:	96 e9       	ldi	r25, 0x96	; 150
     820:	a8 e9       	ldi	r26, 0x98	; 152
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	80 93 db 02 	sts	0x02DB, r24
     828:	90 93 dc 02 	sts	0x02DC, r25
     82c:	a0 93 dd 02 	sts	0x02DD, r26
     830:	b0 93 de 02 	sts	0x02DE, r27
     834:	10 92 df 02 	sts	0x02DF, r1
     838:	10 92 e0 02 	sts	0x02E0, r1
     83c:	10 92 e1 02 	sts	0x02E1, r1
     840:	10 92 e2 02 	sts	0x02E2, r1
     844:	10 92 e3 02 	sts	0x02E3, r1
     848:	10 92 e4 02 	sts	0x02E4, r1
     84c:	10 92 e5 02 	sts	0x02E5, r1
     850:	10 92 e6 02 	sts	0x02E6, r1
     854:	10 92 e7 02 	sts	0x02E7, r1
     858:	10 92 e8 02 	sts	0x02E8, r1
     85c:	10 92 e9 02 	sts	0x02E9, r1
     860:	10 92 ea 02 	sts	0x02EA, r1
     864:	10 92 eb 02 	sts	0x02EB, r1
     868:	10 92 ec 02 	sts	0x02EC, r1
     86c:	10 92 ed 02 	sts	0x02ED, r1
     870:	10 92 ee 02 	sts	0x02EE, r1
     874:	c8 01       	movw	r24, r16
     876:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <nrk_activate_task>
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	08 95       	ret

00000880 <_isa_join_sync>:
     880:	af 92       	push	r10
     882:	bf 92       	push	r11
     884:	cf 92       	push	r12
     886:	df 92       	push	r13
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	22 97       	sbiw	r28, 0x02	; 2
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	cc 24       	eor	r12, r12
     8a4:	dd 24       	eor	r13, r13
     8a6:	47 ea       	ldi	r20, 0xA7	; 167
     8a8:	a4 2e       	mov	r10, r20
     8aa:	42 e0       	ldi	r20, 0x02	; 2
     8ac:	b4 2e       	mov	r11, r20
     8ae:	0e 94 85 03 	call	0x70a	; 0x70a <configDHDR>
     8b2:	e0 91 ac 02 	lds	r30, 0x02AC
     8b6:	f0 91 ad 02 	lds	r31, 0x02AD
     8ba:	80 83       	st	Z, r24
     8bc:	80 91 3b 06 	lds	r24, 0x063B
     8c0:	90 91 3c 06 	lds	r25, 0x063C
     8c4:	e0 91 ac 02 	lds	r30, 0x02AC
     8c8:	f0 91 ad 02 	lds	r31, 0x02AD
     8cc:	81 83       	std	Z+1, r24	; 0x01
     8ce:	60 91 ba 02 	lds	r22, 0x02BA
     8d2:	c5 01       	movw	r24, r10
     8d4:	0e 94 24 15 	call	0x2a48	; 0x2a48 <rf_set_rx>
     8d8:	0e 94 4b 10 	call	0x2096	; 0x2096 <rf_polling_rx_on>
     8dc:	10 92 54 06 	sts	0x0654, r1
     8e0:	8a ef       	ldi	r24, 0xFA	; 250
     8e2:	80 93 59 06 	sts	0x0659, r24
     8e6:	0e 94 c6 2c 	call	0x598c	; 0x598c <_nrk_set_next_wakeup>
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	0e 94 ab 2c 	call	0x5956	; 0x5956 <_nrk_os_timer_set>
     8f0:	10 e0       	ldi	r17, 0x00	; 0
     8f2:	12 c0       	rjmp	.+36     	; 0x918 <_isa_join_sync+0x98>
     8f4:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
     8f8:	18 17       	cp	r17, r24
     8fa:	71 f0       	breq	.+28     	; 0x918 <_isa_join_sync+0x98>
     8fc:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
     900:	18 2f       	mov	r17, r24
     902:	08 94       	sec
     904:	c1 1c       	adc	r12, r1
     906:	d1 1c       	adc	r13, r1
     908:	81 e1       	ldi	r24, 0x11	; 17
     90a:	c8 16       	cp	r12, r24
     90c:	87 e2       	ldi	r24, 0x27	; 39
     90e:	d8 06       	cpc	r13, r24
     910:	18 f0       	brcs	.+6      	; 0x918 <_isa_join_sync+0x98>
     912:	cc 24       	eor	r12, r12
     914:	dd 24       	eor	r13, r13
     916:	05 c0       	rjmp	.+10     	; 0x922 <_isa_join_sync+0xa2>
     918:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <rf_rx_check_sfd>
     91c:	f8 2e       	mov	r15, r24
     91e:	88 23       	and	r24, r24
     920:	49 f3       	breq	.-46     	; 0x8f4 <_isa_join_sync+0x74>
     922:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <_nrk_high_speed_timer_reset>
     926:	0e 94 85 2c 	call	0x590a	; 0x590a <_nrk_high_speed_timer_get>
     92a:	9a 83       	std	Y+2, r25	; 0x02
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
     932:	08 2f       	mov	r16, r24
     934:	11 27       	eor	r17, r17
     936:	0c 5f       	subi	r16, 0xFC	; 252
     938:	1f 4f       	sbci	r17, 0xFF	; 255
     93a:	ff 20       	and	r15, r15
     93c:	61 f0       	breq	.+24     	; 0x956 <_isa_join_sync+0xd6>
     93e:	06 c0       	rjmp	.+12     	; 0x94c <_isa_join_sync+0xcc>
     940:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
     944:	99 27       	eor	r25, r25
     946:	08 17       	cp	r16, r24
     948:	19 07       	cpc	r17, r25
     94a:	28 f0       	brcs	.+10     	; 0x956 <_isa_join_sync+0xd6>
     94c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <rf_polling_rx_packet>
     950:	f8 2e       	mov	r15, r24
     952:	88 23       	and	r24, r24
     954:	a9 f3       	breq	.-22     	; 0x940 <_isa_join_sync+0xc0>
     956:	0e 94 33 10 	call	0x2066	; 0x2066 <rf_rx_off>
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	f8 16       	cp	r15, r24
     95e:	09 f0       	breq	.+2      	; 0x962 <_isa_join_sync+0xe2>
     960:	a6 cf       	rjmp	.-180    	; 0x8ae <_isa_join_sync+0x2e>
     962:	e0 91 ac 02 	lds	r30, 0x02AC
     966:	f0 91 ad 02 	lds	r31, 0x02AD
     96a:	92 81       	ldd	r25, Z+2	; 0x02
     96c:	80 91 92 03 	lds	r24, 0x0392
     970:	98 17       	cp	r25, r24
     972:	09 f0       	breq	.+2      	; 0x976 <_isa_join_sync+0xf6>
     974:	9c cf       	rjmp	.-200    	; 0x8ae <_isa_join_sync+0x2e>
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	a0 e0       	ldi	r26, 0x00	; 0
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	80 93 9e 05 	sts	0x059E, r24
     982:	90 93 9f 05 	sts	0x059F, r25
     986:	a0 93 a0 05 	sts	0x05A0, r26
     98a:	b0 93 a1 05 	sts	0x05A1, r27
     98e:	20 91 3b 06 	lds	r18, 0x063B
     992:	30 91 3c 06 	lds	r19, 0x063C
     996:	41 81       	ldd	r20, Z+1	; 0x01
     998:	24 0f       	add	r18, r20
     99a:	31 1d       	adc	r19, r1
     99c:	30 93 3c 06 	sts	0x063C, r19
     9a0:	20 93 3b 06 	sts	0x063B, r18
     9a4:	00 90 2c 06 	lds	r0, 0x062C
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <_isa_join_sync+0x132>
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	aa 1f       	adc	r26, r26
     9b0:	bb 1f       	adc	r27, r27
     9b2:	0a 94       	dec	r0
     9b4:	d2 f7       	brpl	.-12     	; 0x9aa <_isa_join_sync+0x12a>
     9b6:	0e 94 98 21 	call	0x4330	; 0x4330 <nrk_event_signal>
     9ba:	f0 92 54 06 	sts	0x0654, r15
     9be:	10 92 9e 05 	sts	0x059E, r1
     9c2:	10 92 9f 05 	sts	0x059F, r1
     9c6:	10 92 a0 05 	sts	0x05A0, r1
     9ca:	10 92 a1 05 	sts	0x05A1, r1
     9ce:	0e 94 a0 2c 	call	0x5940	; 0x5940 <_nrk_os_timer_stop>
     9d2:	0e 94 b7 2c 	call	0x596e	; 0x596e <_nrk_os_timer_reset>
     9d6:	8a e0       	ldi	r24, 0x0A	; 10
     9d8:	0e 94 c6 2c 	call	0x598c	; 0x598c <_nrk_set_next_wakeup>
     9dc:	6c e9       	ldi	r22, 0x9C	; 156
     9de:	77 ec       	ldi	r23, 0xC7	; 199
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <nrk_high_speed_timer_wait>
     9e8:	0e 94 ae 2c 	call	0x595c	; 0x595c <_nrk_os_timer_start>
     9ec:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <_nrk_high_speed_timer_reset>
     9f0:	0e 94 85 2c 	call	0x590a	; 0x590a <_nrk_high_speed_timer_get>
     9f4:	90 93 38 06 	sts	0x0638, r25
     9f8:	80 93 37 06 	sts	0x0637, r24
     9fc:	80 91 54 06 	lds	r24, 0x0654
     a00:	99 27       	eor	r25, r25
     a02:	22 96       	adiw	r28, 0x02	; 2
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	cd bf       	out	0x3d, r28	; 61
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	ff 90       	pop	r15
     a18:	df 90       	pop	r13
     a1a:	cf 90       	pop	r12
     a1c:	bf 90       	pop	r11
     a1e:	af 90       	pop	r10
     a20:	08 95       	ret

00000a22 <_isa_tx>:
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	21 97       	sbiw	r28, 0x01	; 1
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	f8 2e       	mov	r15, r24
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	80 93 b5 02 	sts	0x02B5, r24
     a48:	0f 2d       	mov	r16, r15
     a4a:	11 27       	eor	r17, r17
     a4c:	f8 01       	movw	r30, r16
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	ee 0f       	add	r30, r30
     a54:	ff 1f       	adc	r31, r31
     a56:	ef 5c       	subi	r30, 0xCF	; 207
     a58:	fa 4f       	sbci	r31, 0xFA	; 250
     a5a:	82 81       	ldd	r24, Z+2	; 0x02
     a5c:	93 81       	ldd	r25, Z+3	; 0x03
     a5e:	90 93 b4 02 	sts	0x02B4, r25
     a62:	80 93 b3 02 	sts	0x02B3, r24
     a66:	80 81       	ld	r24, Z
     a68:	80 93 b2 02 	sts	0x02B2, r24
     a6c:	a0 91 b3 02 	lds	r26, 0x02B3
     a70:	b0 91 b4 02 	lds	r27, 0x02B4
     a74:	81 81       	ldd	r24, Z+1	; 0x01
     a76:	8c 93       	st	X, r24
     a78:	e0 91 b3 02 	lds	r30, 0x02B3
     a7c:	f0 91 b4 02 	lds	r31, 0x02B4
     a80:	80 91 3b 06 	lds	r24, 0x063B
     a84:	90 91 3c 06 	lds	r25, 0x063C
     a88:	81 83       	std	Z+1, r24	; 0x01
     a8a:	e0 91 b3 02 	lds	r30, 0x02B3
     a8e:	f0 91 b4 02 	lds	r31, 0x02B4
     a92:	80 91 9e 02 	lds	r24, 0x029E
     a96:	82 83       	std	Z+2, r24	; 0x02
     a98:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <_nrk_high_speed_timer_reset>
     a9c:	60 e8       	ldi	r22, 0x80	; 128
     a9e:	75 e2       	ldi	r23, 0x25	; 37
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <nrk_high_speed_timer_wait>
     aa8:	80 91 21 02 	lds	r24, 0x0221
     aac:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <nrk_gpio_set>
     ab0:	40 91 bc 02 	lds	r20, 0x02BC
     ab4:	50 91 bd 02 	lds	r21, 0x02BD
     ab8:	60 91 37 06 	lds	r22, 0x0637
     abc:	70 91 38 06 	lds	r23, 0x0638
     ac0:	20 e5       	ldi	r18, 0x50	; 80
     ac2:	36 e0       	ldi	r19, 0x06	; 6
     ac4:	80 eb       	ldi	r24, 0xB0	; 176
     ac6:	92 e0       	ldi	r25, 0x02	; 2
     ac8:	0e 94 61 12 	call	0x24c2	; 0x24c2 <rf_tx_tdma_packet>
     acc:	88 23       	and	r24, r24
     ace:	71 f0       	breq	.+28     	; 0xaec <_isa_tx+0xca>
     ad0:	80 91 50 06 	lds	r24, 0x0650
     ad4:	90 91 51 06 	lds	r25, 0x0651
     ad8:	20 91 37 06 	lds	r18, 0x0637
     adc:	30 91 38 06 	lds	r19, 0x0638
     ae0:	82 1b       	sub	r24, r18
     ae2:	93 0b       	sbc	r25, r19
     ae4:	90 93 32 06 	sts	0x0632, r25
     ae8:	80 93 31 06 	sts	0x0631, r24
     aec:	80 91 39 06 	lds	r24, 0x0639
     af0:	0e 94 98 21 	call	0x4330	; 0x4330 <nrk_event_signal>
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	a0 e0       	ldi	r26, 0x00	; 0
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	04 c0       	rjmp	.+8      	; 0xb06 <_isa_tx+0xe4>
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	aa 1f       	adc	r26, r26
     b04:	bb 1f       	adc	r27, r27
     b06:	0a 95       	dec	r16
     b08:	d2 f7       	brpl	.-12     	; 0xafe <_isa_tx+0xdc>
     b0a:	80 95       	com	r24
     b0c:	90 95       	com	r25
     b0e:	a0 95       	com	r26
     b10:	b0 95       	com	r27
     b12:	20 91 c1 02 	lds	r18, 0x02C1
     b16:	30 91 c2 02 	lds	r19, 0x02C2
     b1a:	40 91 c3 02 	lds	r20, 0x02C3
     b1e:	50 91 c4 02 	lds	r21, 0x02C4
     b22:	28 23       	and	r18, r24
     b24:	39 23       	and	r19, r25
     b26:	4a 23       	and	r20, r26
     b28:	5b 23       	and	r21, r27
     b2a:	20 93 c1 02 	sts	0x02C1, r18
     b2e:	30 93 c2 02 	sts	0x02C2, r19
     b32:	40 93 c3 02 	sts	0x02C3, r20
     b36:	50 93 c4 02 	sts	0x02C4, r21
     b3a:	80 91 10 04 	lds	r24, 0x0410
     b3e:	87 ff       	sbrs	r24, 7
     b40:	a8 c0       	rjmp	.+336    	; 0xc92 <_isa_tx+0x270>
     b42:	0e 94 4b 10 	call	0x2096	; 0x2096 <rf_polling_rx_on>
     b46:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	8e 5f       	subi	r24, 0xFE	; 254
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	1c c0       	rjmp	.+56     	; 0xb8c <_isa_tx+0x16a>
     b54:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
     b58:	99 81       	ldd	r25, Y+1	; 0x01
     b5a:	98 17       	cp	r25, r24
     b5c:	b8 f4       	brcc	.+46     	; 0xb8c <_isa_tx+0x16a>
     b5e:	80 91 36 06 	lds	r24, 0x0636
     b62:	f8 16       	cp	r15, r24
     b64:	31 f4       	brne	.+12     	; 0xb72 <_isa_tx+0x150>
     b66:	80 91 5b 06 	lds	r24, 0x065B
     b6a:	87 5e       	subi	r24, 0xE7	; 231
     b6c:	80 93 5b 06 	sts	0x065B, r24
     b70:	0a c0       	rjmp	.+20     	; 0xb86 <_isa_tx+0x164>
     b72:	f8 1a       	sub	r15, r24
     b74:	90 91 5b 06 	lds	r25, 0x065B
     b78:	ff 20       	and	r15, r15
     b7a:	11 f0       	breq	.+4      	; 0xb80 <_isa_tx+0x15e>
     b7c:	9f 0d       	add	r25, r15
     b7e:	01 c0       	rjmp	.+2      	; 0xb82 <_isa_tx+0x160>
     b80:	97 5e       	subi	r25, 0xE7	; 231
     b82:	90 93 5b 06 	sts	0x065B, r25
     b86:	0e 94 33 10 	call	0x2066	; 0x2066 <rf_rx_off>
     b8a:	83 c0       	rjmp	.+262    	; 0xc92 <_isa_tx+0x270>
     b8c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <rf_rx_check_sfd>
     b90:	88 23       	and	r24, r24
     b92:	01 f3       	breq	.-64     	; 0xb54 <_isa_tx+0x132>
     b94:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	8b 5f       	subi	r24, 0xFB	; 251
     b9e:	89 83       	std	Y+1, r24	; 0x01
     ba0:	05 c0       	rjmp	.+10     	; 0xbac <_isa_tx+0x18a>
     ba2:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
     ba6:	99 81       	ldd	r25, Y+1	; 0x01
     ba8:	98 17       	cp	r25, r24
     baa:	28 f0       	brcs	.+10     	; 0xbb6 <_isa_tx+0x194>
     bac:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <rf_polling_rx_packet>
     bb0:	18 2f       	mov	r17, r24
     bb2:	88 23       	and	r24, r24
     bb4:	b1 f3       	breq	.-20     	; 0xba2 <_isa_tx+0x180>
     bb6:	0e 94 33 10 	call	0x2066	; 0x2066 <rf_rx_off>
     bba:	11 30       	cpi	r17, 0x01	; 1
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <_isa_tx+0x19e>
     bbe:	69 c0       	rjmp	.+210    	; 0xc92 <_isa_tx+0x270>
     bc0:	e0 91 ac 02 	lds	r30, 0x02AC
     bc4:	f0 91 ad 02 	lds	r31, 0x02AD
     bc8:	90 81       	ld	r25, Z
     bca:	90 93 5a 06 	sts	0x065A, r25
     bce:	80 91 10 04 	lds	r24, 0x0410
     bd2:	87 ff       	sbrs	r24, 7
     bd4:	5e c0       	rjmp	.+188    	; 0xc92 <_isa_tx+0x270>
     bd6:	80 91 9b 03 	lds	r24, 0x039B
     bda:	82 30       	cpi	r24, 0x02	; 2
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <_isa_tx+0x1be>
     bde:	59 c0       	rjmp	.+178    	; 0xc92 <_isa_tx+0x270>
     be0:	97 ff       	sbrs	r25, 7
     be2:	57 c0       	rjmp	.+174    	; 0xc92 <_isa_tx+0x270>
     be4:	10 92 5b 06 	sts	0x065B, r1
     be8:	81 81       	ldd	r24, Z+1	; 0x01
     bea:	99 27       	eor	r25, r25
     bec:	98 2f       	mov	r25, r24
     bee:	88 27       	eor	r24, r24
     bf0:	22 81       	ldd	r18, Z+2	; 0x02
     bf2:	33 27       	eor	r19, r19
     bf4:	82 2b       	or	r24, r18
     bf6:	93 2b       	or	r25, r19
     bf8:	90 93 34 06 	sts	0x0634, r25
     bfc:	80 93 33 06 	sts	0x0633, r24
     c00:	20 91 31 06 	lds	r18, 0x0631
     c04:	30 91 32 06 	lds	r19, 0x0632
     c08:	6c 01       	movw	r12, r24
     c0a:	c2 1a       	sub	r12, r18
     c0c:	d3 0a       	sbc	r13, r19
     c0e:	d7 fc       	sbrc	r13, 7
     c10:	25 c0       	rjmp	.+74     	; 0xc5c <_isa_tx+0x23a>
     c12:	04 e6       	ldi	r16, 0x64	; 100
     c14:	19 e1       	ldi	r17, 0x19	; 25
     c16:	c6 01       	movw	r24, r12
     c18:	64 e6       	ldi	r22, 0x64	; 100
     c1a:	79 e1       	ldi	r23, 0x19	; 25
     c1c:	0e 94 6c 34 	call	0x68d8	; 0x68d8 <__divmodhi4>
     c20:	08 1b       	sub	r16, r24
     c22:	19 0b       	sbc	r17, r25
     c24:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
     c28:	f8 2e       	mov	r15, r24
     c2a:	0e 94 a0 2c 	call	0x5940	; 0x5940 <_nrk_os_timer_stop>
     c2e:	0e 94 b7 2c 	call	0x596e	; 0x596e <_nrk_os_timer_reset>
     c32:	8a e0       	ldi	r24, 0x0A	; 10
     c34:	0e 94 c6 2c 	call	0x598c	; 0x598c <_nrk_set_next_wakeup>
     c38:	c6 01       	movw	r24, r12
     c3a:	64 e6       	ldi	r22, 0x64	; 100
     c3c:	79 e1       	ldi	r23, 0x19	; 25
     c3e:	0e 94 6c 34 	call	0x68d8	; 0x68d8 <__divmodhi4>
     c42:	cb 01       	movw	r24, r22
     c44:	8f 5f       	subi	r24, 0xFF	; 255
     c46:	8f 0d       	add	r24, r15
     c48:	0e 94 ab 2c 	call	0x5956	; 0x5956 <_nrk_os_timer_set>
     c4c:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <_nrk_high_speed_timer_reset>
     c50:	b8 01       	movw	r22, r16
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <nrk_high_speed_timer_wait>
     c5a:	17 c0       	rjmp	.+46     	; 0xc8a <_isa_tx+0x268>
     c5c:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
     c60:	18 2f       	mov	r17, r24
     c62:	0e 94 a0 2c 	call	0x5940	; 0x5940 <_nrk_os_timer_stop>
     c66:	0e 94 b7 2c 	call	0x596e	; 0x596e <_nrk_os_timer_reset>
     c6a:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <_nrk_high_speed_timer_reset>
     c6e:	8a e0       	ldi	r24, 0x0A	; 10
     c70:	0e 94 c6 2c 	call	0x598c	; 0x598c <_nrk_set_next_wakeup>
     c74:	66 27       	eor	r22, r22
     c76:	77 27       	eor	r23, r23
     c78:	6c 19       	sub	r22, r12
     c7a:	7d 09       	sbc	r23, r13
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <nrk_high_speed_timer_wait>
     c84:	81 2f       	mov	r24, r17
     c86:	0e 94 ab 2c 	call	0x5956	; 0x5956 <_nrk_os_timer_set>
     c8a:	0e 94 ae 2c 	call	0x595c	; 0x595c <_nrk_os_timer_start>
     c8e:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <_nrk_high_speed_timer_reset>
     c92:	21 96       	adiw	r28, 0x01	; 1
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	df 90       	pop	r13
     caa:	cf 90       	pop	r12
     cac:	08 95       	ret

00000cae <_isa_rx>:
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	21 97       	sbiw	r28, 0x01	; 1
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	60 91 ba 02 	lds	r22, 0x02BA
     cce:	87 ea       	ldi	r24, 0xA7	; 167
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	0e 94 24 15 	call	0x2a48	; 0x2a48 <rf_set_rx>
     cd6:	0e 94 4b 10 	call	0x2096	; 0x2096 <rf_polling_rx_on>
     cda:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	8c 5f       	subi	r24, 0xFC	; 252
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	08 c0       	rjmp	.+16     	; 0xcf8 <_isa_rx+0x4a>
     ce8:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
     cec:	99 81       	ldd	r25, Y+1	; 0x01
     cee:	98 17       	cp	r25, r24
     cf0:	18 f4       	brcc	.+6      	; 0xcf8 <_isa_rx+0x4a>
     cf2:	0e 94 33 10 	call	0x2066	; 0x2066 <rf_rx_off>
     cf6:	95 c0       	rjmp	.+298    	; 0xe22 <_isa_rx+0x174>
     cf8:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <rf_rx_check_sfd>
     cfc:	88 23       	and	r24, r24
     cfe:	a1 f3       	breq	.-24     	; 0xce8 <_isa_rx+0x3a>
     d00:	0e 94 85 2c 	call	0x590a	; 0x590a <_nrk_high_speed_timer_get>
     d04:	90 93 56 06 	sts	0x0656, r25
     d08:	80 93 55 06 	sts	0x0655, r24
     d0c:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
     d10:	89 83       	std	Y+1, r24	; 0x01
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	8b 5f       	subi	r24, 0xFB	; 251
     d16:	89 83       	std	Y+1, r24	; 0x01
     d18:	06 c0       	rjmp	.+12     	; 0xd26 <_isa_rx+0x78>
     d1a:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
     d1e:	99 81       	ldd	r25, Y+1	; 0x01
     d20:	98 17       	cp	r25, r24
     d22:	08 f4       	brcc	.+2      	; 0xd26 <_isa_rx+0x78>
     d24:	7e c0       	rjmp	.+252    	; 0xe22 <_isa_rx+0x174>
     d26:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <rf_polling_rx_packet>
     d2a:	18 2f       	mov	r17, r24
     d2c:	88 23       	and	r24, r24
     d2e:	a9 f3       	breq	.-22     	; 0xd1a <_isa_rx+0x6c>
     d30:	0e 94 33 10 	call	0x2066	; 0x2066 <rf_rx_off>
     d34:	11 30       	cpi	r17, 0x01	; 1
     d36:	09 f0       	breq	.+2      	; 0xd3a <_isa_rx+0x8c>
     d38:	74 c0       	rjmp	.+232    	; 0xe22 <_isa_rx+0x174>
     d3a:	e1 e0       	ldi	r30, 0x01	; 1
     d3c:	ee 2e       	mov	r14, r30
     d3e:	f1 2c       	mov	r15, r1
     d40:	01 2d       	mov	r16, r1
     d42:	11 2d       	mov	r17, r1
     d44:	e0 92 9e 05 	sts	0x059E, r14
     d48:	f0 92 9f 05 	sts	0x059F, r15
     d4c:	00 93 a0 05 	sts	0x05A0, r16
     d50:	10 93 a1 05 	sts	0x05A1, r17
     d54:	80 91 2c 06 	lds	r24, 0x062C
     d58:	0e 94 98 21 	call	0x4330	; 0x4330 <nrk_event_signal>
     d5c:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <_nrk_high_speed_timer_reset>
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e1       	ldi	r23, 0x10	; 16
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <nrk_high_speed_timer_wait>
     d6c:	e0 91 ac 02 	lds	r30, 0x02AC
     d70:	f0 91 ad 02 	lds	r31, 0x02AD
     d74:	02 80       	ldd	r0, Z+2	; 0x02
     d76:	04 c0       	rjmp	.+8      	; 0xd80 <_isa_rx+0xd2>
     d78:	ee 0c       	add	r14, r14
     d7a:	ff 1c       	adc	r15, r15
     d7c:	00 1f       	adc	r16, r16
     d7e:	11 1f       	adc	r17, r17
     d80:	0a 94       	dec	r0
     d82:	d2 f7       	brpl	.-12     	; 0xd78 <_isa_rx+0xca>
     d84:	80 91 9a 02 	lds	r24, 0x029A
     d88:	90 91 9b 02 	lds	r25, 0x029B
     d8c:	a0 91 9c 02 	lds	r26, 0x029C
     d90:	b0 91 9d 02 	lds	r27, 0x029D
     d94:	e8 22       	and	r14, r24
     d96:	f9 22       	and	r15, r25
     d98:	0a 23       	and	r16, r26
     d9a:	1b 23       	and	r17, r27
     d9c:	e1 14       	cp	r14, r1
     d9e:	f1 04       	cpc	r15, r1
     da0:	01 05       	cpc	r16, r1
     da2:	11 05       	cpc	r17, r1
     da4:	f1 f1       	breq	.+124    	; 0xe22 <_isa_rx+0x174>
     da6:	20 91 10 04 	lds	r18, 0x0410
     daa:	27 ff       	sbrs	r18, 7
     dac:	3a c0       	rjmp	.+116    	; 0xe22 <_isa_rx+0x174>
     dae:	80 91 9b 03 	lds	r24, 0x039B
     db2:	88 23       	and	r24, r24
     db4:	11 f0       	breq	.+4      	; 0xdba <_isa_rx+0x10c>
     db6:	83 e8       	ldi	r24, 0x83	; 131
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <_isa_rx+0x10e>
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	80 93 5a 06 	sts	0x065A, r24
     dc0:	80 93 2d 05 	sts	0x052D, r24
     dc4:	8d e2       	ldi	r24, 0x2D	; 45
     dc6:	95 e0       	ldi	r25, 0x05	; 5
     dc8:	90 93 c9 02 	sts	0x02C9, r25
     dcc:	80 93 c8 02 	sts	0x02C8, r24
     dd0:	22 ff       	sbrs	r18, 2
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <_isa_rx+0x12a>
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	15 c0       	rjmp	.+42     	; 0xe02 <_isa_rx+0x154>
     dd8:	80 91 55 06 	lds	r24, 0x0655
     ddc:	90 91 56 06 	lds	r25, 0x0656
     de0:	20 91 37 06 	lds	r18, 0x0637
     de4:	30 91 38 06 	lds	r19, 0x0638
     de8:	82 1b       	sub	r24, r18
     dea:	93 0b       	sbc	r25, r19
     dec:	90 93 34 06 	sts	0x0634, r25
     df0:	80 93 33 06 	sts	0x0633, r24
     df4:	29 2f       	mov	r18, r25
     df6:	33 27       	eor	r19, r19
     df8:	20 93 2e 05 	sts	0x052E, r18
     dfc:	80 93 2f 05 	sts	0x052F, r24
     e00:	84 e0       	ldi	r24, 0x04	; 4
     e02:	80 93 c7 02 	sts	0x02C7, r24
     e06:	40 91 bc 02 	lds	r20, 0x02BC
     e0a:	50 91 bd 02 	lds	r21, 0x02BD
     e0e:	60 91 37 06 	lds	r22, 0x0637
     e12:	70 91 38 06 	lds	r23, 0x0638
     e16:	20 e5       	ldi	r18, 0x50	; 80
     e18:	36 e0       	ldi	r19, 0x06	; 6
     e1a:	85 ec       	ldi	r24, 0xC5	; 197
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <rf_tx_tdma_packet>
     e22:	21 96       	adiw	r28, 0x01	; 1
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	08 95       	ret

00000e3c <isa_init>:
  TaskOne.period.nano_secs = 20*NANOS_PER_MS;
  TaskOne.cpu_reserve.secs = 0;
  TaskOne.cpu_reserve.nano_secs = 20*NANOS_PER_MS;
  TaskOne.offset.secs = 0;
  TaskOne.offset.nano_secs= 50*NANOS_PER_MS;
  nrk_activate_task (&TaskOne);
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	08 2f       	mov	r16, r24
     e42:	16 2f       	mov	r17, r22


  nrk_kprintf( PSTR("Create Done\r\n") );
}
     e44:	0e 94 07 20 	call	0x400e	; 0x400e <nrk_signal_create>
     e48:	80 93 2c 06 	sts	0x062C, r24

     e4c:	8f 3f       	cpi	r24, 0xFF	; 255
     e4e:	19 f4       	brne	.+6      	; 0xe56 <isa_init+0x1a>

     e50:	86 e3       	ldi	r24, 0x36	; 54
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	08 c0       	rjmp	.+16     	; 0xe66 <isa_init+0x2a>
     e56:	0e 94 07 20 	call	0x400e	; 0x400e <nrk_signal_create>
     e5a:	80 93 39 06 	sts	0x0639, r24
     e5e:	8f 3f       	cpi	r24, 0xFF	; 255
     e60:	79 f4       	brne	.+30     	; 0xe80 <isa_init+0x44>
     e62:	8f e0       	ldi	r24, 0x0F	; 15
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	0e 94 1f 1b 	call	0x363e	; 0x363e <nrk_kprintf>
     e6a:	e0 91 0a 07 	lds	r30, 0x070A
     e6e:	f0 91 0b 07 	lds	r31, 0x070B
     e72:	60 85       	ldd	r22, Z+8	; 0x08
     e74:	8e e0       	ldi	r24, 0x0E	; 14
     e76:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <nrk_kernel_error_add>
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	78 c0       	rjmp	.+240    	; 0xf70 <isa_init+0x134>
     e80:	10 92 ad 02 	sts	0x02AD, r1
     e84:	10 92 ac 02 	sts	0x02AC, r1
     e88:	10 92 ab 02 	sts	0x02AB, r1
     e8c:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <_nrk_high_speed_timer_start>
     e90:	10 92 30 06 	sts	0x0630, r1
     e94:	10 92 2f 06 	sts	0x062F, r1
     e98:	84 e6       	ldi	r24, 0x64	; 100
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	90 93 3c 06 	sts	0x063C, r25
     ea0:	80 93 3b 06 	sts	0x063B, r24
     ea4:	10 92 54 06 	sts	0x0654, r1
     ea8:	10 92 5b 06 	sts	0x065B, r1
     eac:	00 93 9b 03 	sts	0x039B, r16
     eb0:	10 93 9e 02 	sts	0x029E, r17
     eb4:	10 92 9e 05 	sts	0x059E, r1
     eb8:	10 92 9f 05 	sts	0x059F, r1
     ebc:	10 92 a0 05 	sts	0x05A0, r1
     ec0:	10 92 a1 05 	sts	0x05A1, r1
     ec4:	10 92 c1 02 	sts	0x02C1, r1
     ec8:	10 92 c2 02 	sts	0x02C2, r1
     ecc:	10 92 c3 02 	sts	0x02C3, r1
     ed0:	10 92 c4 02 	sts	0x02C4, r1
     ed4:	84 e6       	ldi	r24, 0x64	; 100
     ed6:	80 93 c0 02 	sts	0x02C0, r24
     eda:	80 e4       	ldi	r24, 0x40	; 64
     edc:	9f e1       	ldi	r25, 0x1F	; 31
     ede:	90 93 bf 02 	sts	0x02BF, r25
     ee2:	80 93 be 02 	sts	0x02BE, r24
     ee6:	80 ea       	ldi	r24, 0xA0	; 160
     ee8:	9f e0       	ldi	r25, 0x0F	; 15
     eea:	90 93 bd 02 	sts	0x02BD, r25
     eee:	80 93 bc 02 	sts	0x02BC, r24
     ef2:	8c e0       	ldi	r24, 0x0C	; 12
     ef4:	80 93 ba 02 	sts	0x02BA, r24
     ef8:	80 e8       	ldi	r24, 0x80	; 128
     efa:	99 e1       	ldi	r25, 0x19	; 25
     efc:	90 93 b9 02 	sts	0x02B9, r25
     f00:	80 93 b8 02 	sts	0x02B8, r24
     f04:	ef e9       	ldi	r30, 0x9F	; 159
     f06:	f4 e0       	ldi	r31, 0x04	; 4
     f08:	11 92       	st	Z+, r1
     f0a:	84 e0       	ldi	r24, 0x04	; 4
     f0c:	e8 3b       	cpi	r30, 0xB8	; 184
     f0e:	f8 07       	cpc	r31, r24
     f10:	d9 f7       	brne	.-10     	; 0xf08 <isa_init+0xcc>
     f12:	10 92 97 03 	sts	0x0397, r1
     f16:	10 92 98 03 	sts	0x0398, r1
     f1a:	10 92 99 03 	sts	0x0399, r1
     f1e:	10 92 9a 03 	sts	0x039A, r1
     f22:	10 92 99 04 	sts	0x0499, r1
     f26:	10 92 9a 04 	sts	0x049A, r1
     f2a:	10 92 9b 04 	sts	0x049B, r1
     f2e:	10 92 9c 04 	sts	0x049C, r1
     f32:	20 e8       	ldi	r18, 0x80	; 128
     f34:	39 e1       	ldi	r19, 0x19	; 25
     f36:	40 e2       	ldi	r20, 0x20	; 32
     f38:	54 e2       	ldi	r21, 0x24	; 36
     f3a:	6c e0       	ldi	r22, 0x0C	; 12
     f3c:	87 ea       	ldi	r24, 0xA7	; 167
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <rf_init>
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	80 93 35 06 	sts	0x0635, r24
     f4a:	11 23       	and	r17, r17
     f4c:	49 f0       	breq	.+18     	; 0xf60 <isa_init+0x124>
     f4e:	e1 2f       	mov	r30, r17
     f50:	e1 50       	subi	r30, 0x01	; 1
     f52:	e0 93 3a 06 	sts	0x063A, r30
     f56:	ff 27       	eor	r31, r31
     f58:	e0 5c       	subi	r30, 0xC0	; 192
     f5a:	f9 4f       	sbci	r31, 0xF9	; 249
     f5c:	80 81       	ld	r24, Z
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <isa_init+0x12c>
     f60:	10 92 3a 06 	sts	0x063A, r1
     f64:	80 91 40 06 	lds	r24, 0x0640
     f68:	80 93 58 06 	sts	0x0658, r24
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	08 95       	ret

00000f76 <isa_wait_until_rx_or_tx>:
  }
  

}


     f76:	80 91 2c 06 	lds	r24, 0x062C
     f7a:	0e 94 90 20 	call	0x4120	; 0x4120 <nrk_signal_register>
void
     f7e:	80 91 39 06 	lds	r24, 0x0639
     f82:	0e 94 90 20 	call	0x4120	; 0x4120 <nrk_signal_register>
nrk_create_taskset()
     f86:	21 e0       	ldi	r18, 0x01	; 1
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	ca 01       	movw	r24, r20
     f90:	b9 01       	movw	r22, r18
     f92:	00 90 39 06 	lds	r0, 0x0639
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <isa_wait_until_rx_or_tx+0x2a>
     f98:	66 0f       	add	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	88 1f       	adc	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	d2 f7       	brpl	.-12     	; 0xf98 <isa_wait_until_rx_or_tx+0x22>
     fa4:	00 90 2c 06 	lds	r0, 0x062C
     fa8:	04 c0       	rjmp	.+8      	; 0xfb2 <isa_wait_until_rx_or_tx+0x3c>
     faa:	22 0f       	add	r18, r18
     fac:	33 1f       	adc	r19, r19
     fae:	44 1f       	adc	r20, r20
     fb0:	55 1f       	adc	r21, r21
     fb2:	0a 94       	dec	r0
     fb4:	d2 f7       	brpl	.-12     	; 0xfaa <isa_wait_until_rx_or_tx+0x34>
     fb6:	62 2b       	or	r22, r18
     fb8:	73 2b       	or	r23, r19
     fba:	84 2b       	or	r24, r20
     fbc:	95 2b       	or	r25, r21
     fbe:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <nrk_event_wait>
{
  TaskOne.task = Task1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	08 95       	ret

00000fc8 <isa_set_channel>:
  isa_rx_pkt_set_buffer(rx_buf, RF_MAX_PAYLOAD_SIZE);
  
  while(!isa_ready())  nrk_wait_until_next_period(); 

  /*while(isa_join_ready()!=1) nrk_wait_until_next_period();
    
     fc8:	80 93 ba 02 	sts	0x02BA, r24
    for(i=0;i<4;i++){  // set tx slots
     fcc:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <rf_set_channel>
     fd0:	08 95       	ret

00000fd2 <isa_nw_task>:
     fd2:	bf 92       	push	r11
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cc 24       	eor	r12, r12
     fe6:	dd 24       	eor	r13, r13
     fe8:	10 92 b8 04 	sts	0x04B8, r1
     fec:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <nrk_wait_until_next_period>
     ff0:	80 91 b8 04 	lds	r24, 0x04B8
     ff4:	88 23       	and	r24, r24
     ff6:	d1 f3       	breq	.-12     	; 0xfec <isa_nw_task+0x1a>
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	80 93 b8 04 	sts	0x04B8, r24
     ffe:	b0 90 21 02 	lds	r11, 0x0221
    1002:	8b 2d       	mov	r24, r11
    1004:	0e 94 40 17 	call	0x2e80	; 0x2e80 <nrk_gpio_clr>
    1008:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <_nrk_high_speed_timer_reset>
    100c:	0e 94 85 2c 	call	0x590a	; 0x590a <_nrk_high_speed_timer_get>
    1010:	90 93 38 06 	sts	0x0638, r25
    1014:	80 93 37 06 	sts	0x0637, r24
    1018:	80 91 3b 06 	lds	r24, 0x063B
    101c:	90 91 3c 06 	lds	r25, 0x063C
    1020:	90 93 a3 05 	sts	0x05A3, r25
    1024:	80 93 a2 05 	sts	0x05A2, r24
    1028:	85 36       	cpi	r24, 0x65	; 101
    102a:	91 05       	cpc	r25, r1
    102c:	30 f0       	brcs	.+12     	; 0x103a <isa_nw_task+0x68>
    102e:	85 56       	subi	r24, 0x65	; 101
    1030:	90 40       	sbci	r25, 0x00	; 0
    1032:	90 93 a3 05 	sts	0x05A3, r25
    1036:	80 93 a2 05 	sts	0x05A2, r24
    103a:	80 91 3b 06 	lds	r24, 0x063B
    103e:	90 91 3c 06 	lds	r25, 0x063C
    1042:	90 93 53 06 	sts	0x0653, r25
    1046:	80 93 52 06 	sts	0x0652, r24
    104a:	80 91 3b 06 	lds	r24, 0x063B
    104e:	90 91 3c 06 	lds	r25, 0x063C
    1052:	85 36       	cpi	r24, 0x65	; 101
    1054:	91 05       	cpc	r25, r1
    1056:	98 f0       	brcs	.+38     	; 0x107e <isa_nw_task+0xac>
    1058:	80 91 3b 06 	lds	r24, 0x063B
    105c:	90 91 3c 06 	lds	r25, 0x063C
    1060:	84 56       	subi	r24, 0x64	; 100
    1062:	90 40       	sbci	r25, 0x00	; 0
    1064:	90 93 3c 06 	sts	0x063C, r25
    1068:	80 93 3b 06 	sts	0x063B, r24
    106c:	80 91 2f 06 	lds	r24, 0x062F
    1070:	90 91 30 06 	lds	r25, 0x0630
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	90 93 30 06 	sts	0x0630, r25
    107a:	80 93 2f 06 	sts	0x062F, r24
    107e:	20 91 3b 06 	lds	r18, 0x063B
    1082:	30 91 3c 06 	lds	r19, 0x063C
    1086:	80 91 54 06 	lds	r24, 0x0654
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	09 f0       	breq	.+2      	; 0x1090 <isa_nw_task+0xbe>
    108e:	6a c0       	rjmp	.+212    	; 0x1164 <isa_nw_task+0x192>
    1090:	c9 01       	movw	r24, r18
    1092:	69 e1       	ldi	r22, 0x19	; 25
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	0e 94 58 34 	call	0x68b0	; 0x68b0 <__udivmodhi4>
    109a:	ec 01       	movw	r28, r24
    109c:	f1 e0       	ldi	r31, 0x01	; 1
    109e:	ef 2e       	mov	r14, r31
    10a0:	f1 2c       	mov	r15, r1
    10a2:	01 2d       	mov	r16, r1
    10a4:	11 2d       	mov	r17, r1
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <isa_nw_task+0xde>
    10a8:	ee 0c       	add	r14, r14
    10aa:	ff 1c       	adc	r15, r15
    10ac:	00 1f       	adc	r16, r16
    10ae:	11 1f       	adc	r17, r17
    10b0:	8a 95       	dec	r24
    10b2:	d2 f7       	brpl	.-12     	; 0x10a8 <isa_nw_task+0xd6>
    10b4:	e0 91 3a 06 	lds	r30, 0x063A
    10b8:	ec 0d       	add	r30, r12
    10ba:	e0 93 3a 06 	sts	0x063A, r30
    10be:	ff 27       	eor	r31, r31
    10c0:	ef 70       	andi	r30, 0x0F	; 15
    10c2:	f0 70       	andi	r31, 0x00	; 0
    10c4:	e0 5c       	subi	r30, 0xC0	; 192
    10c6:	f9 4f       	sbci	r31, 0xF9	; 249
    10c8:	80 81       	ld	r24, Z
    10ca:	80 93 58 06 	sts	0x0658, r24
    10ce:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <isa_set_channel>
    10d2:	80 91 99 04 	lds	r24, 0x0499
    10d6:	90 91 9a 04 	lds	r25, 0x049A
    10da:	a0 91 9b 04 	lds	r26, 0x049B
    10de:	b0 91 9c 04 	lds	r27, 0x049C
    10e2:	20 91 c1 02 	lds	r18, 0x02C1
    10e6:	30 91 c2 02 	lds	r19, 0x02C2
    10ea:	40 91 c3 02 	lds	r20, 0x02C3
    10ee:	50 91 c4 02 	lds	r21, 0x02C4
    10f2:	82 23       	and	r24, r18
    10f4:	93 23       	and	r25, r19
    10f6:	a4 23       	and	r26, r20
    10f8:	b5 23       	and	r27, r21
    10fa:	8e 21       	and	r24, r14
    10fc:	9f 21       	and	r25, r15
    10fe:	a0 23       	and	r26, r16
    1100:	b1 23       	and	r27, r17
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	a1 05       	cpc	r26, r1
    1106:	b1 05       	cpc	r27, r1
    1108:	31 f0       	breq	.+12     	; 0x1116 <isa_nw_task+0x144>
    110a:	8c 2f       	mov	r24, r28
    110c:	0e 94 11 05 	call	0xa22	; 0xa22 <_isa_tx>
    1110:	c0 93 36 06 	sts	0x0636, r28
    1114:	23 c0       	rjmp	.+70     	; 0x115c <isa_nw_task+0x18a>
    1116:	80 91 97 03 	lds	r24, 0x0397
    111a:	90 91 98 03 	lds	r25, 0x0398
    111e:	a0 91 99 03 	lds	r26, 0x0399
    1122:	b0 91 9a 03 	lds	r27, 0x039A
    1126:	e8 22       	and	r14, r24
    1128:	f9 22       	and	r15, r25
    112a:	0a 23       	and	r16, r26
    112c:	1b 23       	and	r17, r27
    112e:	e1 14       	cp	r14, r1
    1130:	f1 04       	cpc	r15, r1
    1132:	01 05       	cpc	r16, r1
    1134:	11 05       	cpc	r17, r1
    1136:	91 f0       	breq	.+36     	; 0x115c <isa_nw_task+0x18a>
    1138:	80 91 9e 05 	lds	r24, 0x059E
    113c:	90 91 9f 05 	lds	r25, 0x059F
    1140:	a0 91 a0 05 	lds	r26, 0x05A0
    1144:	b0 91 a1 05 	lds	r27, 0x05A1
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	a1 05       	cpc	r26, r1
    114c:	b1 05       	cpc	r27, r1
    114e:	31 f4       	brne	.+12     	; 0x115c <isa_nw_task+0x18a>
    1150:	8b 2d       	mov	r24, r11
    1152:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <nrk_gpio_set>
    1156:	8c 2f       	mov	r24, r28
    1158:	0e 94 57 06 	call	0xcae	; 0xcae <_isa_rx>
    115c:	8b 2d       	mov	r24, r11
    115e:	0e 94 40 17 	call	0x2e80	; 0x2e80 <nrk_gpio_clr>
    1162:	0e c0       	rjmp	.+28     	; 0x1180 <isa_nw_task+0x1ae>
    1164:	0e 94 85 03 	call	0x70a	; 0x70a <configDHDR>
    1168:	80 93 10 04 	sts	0x0410, r24
    116c:	80 91 9b 03 	lds	r24, 0x039B
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	19 f0       	breq	.+6      	; 0x117a <isa_nw_task+0x1a8>
    1174:	0e 94 40 04 	call	0x880	; 0x880 <_isa_join_sync>
    1178:	01 c0       	rjmp	.+2      	; 0x117c <isa_nw_task+0x1aa>
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	80 93 54 06 	sts	0x0654, r24
    1180:	90 91 5b 06 	lds	r25, 0x065B
    1184:	80 91 20 02 	lds	r24, 0x0220
    1188:	98 17       	cp	r25, r24
    118a:	38 f1       	brcs	.+78     	; 0x11da <isa_nw_task+0x208>
    118c:	80 91 9b 03 	lds	r24, 0x039B
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	19 f1       	breq	.+70     	; 0x11da <isa_nw_task+0x208>
    1194:	10 92 54 06 	sts	0x0654, r1
    1198:	10 92 5b 06 	sts	0x065B, r1
    119c:	84 e6       	ldi	r24, 0x64	; 100
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	90 93 3c 06 	sts	0x063C, r25
    11a4:	80 93 3b 06 	sts	0x063B, r24
    11a8:	e0 91 9e 02 	lds	r30, 0x029E
    11ac:	ee 23       	and	r30, r30
    11ae:	41 f0       	breq	.+16     	; 0x11c0 <isa_nw_task+0x1ee>
    11b0:	e1 50       	subi	r30, 0x01	; 1
    11b2:	e0 93 3a 06 	sts	0x063A, r30
    11b6:	ff 27       	eor	r31, r31
    11b8:	e0 5c       	subi	r30, 0xC0	; 192
    11ba:	f9 4f       	sbci	r31, 0xF9	; 249
    11bc:	80 81       	ld	r24, Z
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <isa_nw_task+0x1f6>
    11c0:	10 92 3a 06 	sts	0x063A, r1
    11c4:	80 91 40 06 	lds	r24, 0x0640
    11c8:	80 93 58 06 	sts	0x0658, r24
    11cc:	80 91 58 06 	lds	r24, 0x0658
    11d0:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <isa_set_channel>
    11d4:	cc 24       	eor	r12, r12
    11d6:	dd 24       	eor	r13, r13
    11d8:	17 cf       	rjmp	.-466    	; 0x1008 <isa_nw_task+0x36>
    11da:	80 91 3b 06 	lds	r24, 0x063B
    11de:	90 91 3c 06 	lds	r25, 0x063C
    11e2:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <isa_get_slots_until_next_wakeup>
    11e6:	6c 01       	movw	r12, r24
    11e8:	80 91 3b 06 	lds	r24, 0x063B
    11ec:	90 91 3c 06 	lds	r25, 0x063C
    11f0:	8c 0d       	add	r24, r12
    11f2:	9d 1d       	adc	r25, r13
    11f4:	90 93 3c 06 	sts	0x063C, r25
    11f8:	80 93 3b 06 	sts	0x063B, r24
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <nrk_led_clr>
    1204:	10 92 32 06 	sts	0x0632, r1
    1208:	10 92 31 06 	sts	0x0631, r1
    120c:	c6 01       	movw	r24, r12
    120e:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <nrk_wait_until_next_n_periods>
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <nrk_led_set>
    121a:	f6 ce       	rjmp	.-532    	; 0x1008 <isa_nw_task+0x36>

0000121c <isa_wait_until_rx_pkt>:
	isa_tx_pkt(tx_buf,length,configDHDR(),MY_TX_SLOT);
	isa_wait_until_rx_or_tx ();
	
	/*sprintf( &tx_buf2[PKT_DATA_START],"Hello from slot 2!");
	length=strlen(&tx_buf2[PKT_DATA_START])+PKT_DATA_START+1;
	isa_tx_pkt(tx_buf2,length,configDHDR(),2);
    121c:	80 91 2c 06 	lds	r24, 0x062C
    1220:	0e 94 90 20 	call	0x4120	; 0x4120 <nrk_signal_register>
	isa_wait_until_rx_or_tx ();*/
    1224:	80 91 9e 05 	lds	r24, 0x059E
    1228:	88 23       	and	r24, r24
    122a:	79 f4       	brne	.+30     	; 0x124a <isa_wait_until_rx_pkt+0x2e>

	
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	00 90 2c 06 	lds	r0, 0x062C
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <isa_wait_until_rx_pkt+0x26>
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	88 1f       	adc	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	d2 f7       	brpl	.-12     	; 0x123a <isa_wait_until_rx_pkt+0x1e>
    1246:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <nrk_event_wait>
  }
  
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	08 95       	ret

00001250 <isa_rx_pkt_get>:
    1250:	fc 01       	movw	r30, r24
    1252:	db 01       	movw	r26, r22
    1254:	80 91 9e 05 	lds	r24, 0x059E
    1258:	88 23       	and	r24, r24
    125a:	29 f4       	brne	.+10     	; 0x1266 <isa_rx_pkt_get+0x16>
    125c:	10 82       	st	Z, r1
    125e:	1c 92       	st	X, r1
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	08 95       	ret
    1266:	80 91 aa 02 	lds	r24, 0x02AA
    126a:	80 83       	st	Z, r24
    126c:	80 91 af 02 	lds	r24, 0x02AF
    1270:	8c 93       	st	X, r24
    1272:	80 91 ac 02 	lds	r24, 0x02AC
    1276:	90 91 ad 02 	lds	r25, 0x02AD
    127a:	08 95       	ret

0000127c <isa_set_schedule>:
#include <nrk_error.h>

/* For ISA */
/* This method is only for demo 1. Need to be updated!! */
int8_t isa_set_schedule (isa_node_mode_t isa_node_mode, uint8_t clk_src_id)
{
    127c:	28 2f       	mov	r18, r24
    char i =0;
    isa_clk_src_id = clk_src_id;//change
    127e:	60 93 92 03 	sts	0x0392, r22
    if (isa_node_mode==ISA_GATEWAY){
    1282:	82 30       	cpi	r24, 0x02	; 2
    1284:	d9 f4       	brne	.+54     	; 0x12bc <isa_set_schedule+0x40>
        isa_tdma_tx_mask |= ((uint32_t) 1) << 0;
    1286:	80 91 99 04 	lds	r24, 0x0499
    128a:	90 91 9a 04 	lds	r25, 0x049A
    128e:	a0 91 9b 04 	lds	r26, 0x049B
    1292:	b0 91 9c 04 	lds	r27, 0x049C
    1296:	81 60       	ori	r24, 0x01	; 1
    1298:	80 93 99 04 	sts	0x0499, r24
    129c:	90 93 9a 04 	sts	0x049A, r25
    12a0:	a0 93 9b 04 	sts	0x049B, r26
    12a4:	b0 93 9c 04 	sts	0x049C, r27
	isa_tdma_rx_mask |= ((uint32_t) 1) << 1;//change for test
	isa_tdma_rx_mask |= ((uint32_t) 1) << 2;
	isa_tdma_rx_mask |= ((uint32_t) 1) << 3;
    12a8:	80 91 97 03 	lds	r24, 0x0397
    12ac:	90 91 98 03 	lds	r25, 0x0398
    12b0:	a0 91 99 03 	lds	r26, 0x0399
    12b4:	b0 91 9a 03 	lds	r27, 0x039A
    12b8:	8e 60       	ori	r24, 0x0E	; 14
    12ba:	49 c0       	rjmp	.+146    	; 0x134e <isa_set_schedule+0xd2>
	isa_sched[0] = 1;
	isa_sched[1] = 1;//change for test
	isa_sched[2] = 1;
	isa_sched[3] = 1;
    }
    else if (isa_node_mode==ISA_REPEATER){ //change
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	59 f5       	brne	.+86     	; 0x1316 <isa_set_schedule+0x9a>
        isa_tdma_tx_mask |= ((uint32_t) 1) << 2;
    12c0:	80 91 99 04 	lds	r24, 0x0499
    12c4:	90 91 9a 04 	lds	r25, 0x049A
    12c8:	a0 91 9b 04 	lds	r26, 0x049B
    12cc:	b0 91 9c 04 	lds	r27, 0x049C
    12d0:	84 60       	ori	r24, 0x04	; 4
    12d2:	80 93 99 04 	sts	0x0499, r24
    12d6:	90 93 9a 04 	sts	0x049A, r25
    12da:	a0 93 9b 04 	sts	0x049B, r26
    12de:	b0 93 9c 04 	sts	0x049C, r27
	isa_tdma_rx_mask |= ((uint32_t) 1) << 0;//change for test
	isa_tdma_rx_mask |= ((uint32_t) 1) << 1;
	isa_tdma_rx_mask |= ((uint32_t) 1) << 3;
    12e2:	80 91 97 03 	lds	r24, 0x0397
    12e6:	90 91 98 03 	lds	r25, 0x0398
    12ea:	a0 91 99 03 	lds	r26, 0x0399
    12ee:	b0 91 9a 03 	lds	r27, 0x039A
    12f2:	8b 60       	ori	r24, 0x0B	; 11
    12f4:	80 93 97 03 	sts	0x0397, r24
    12f8:	90 93 98 03 	sts	0x0398, r25
    12fc:	a0 93 99 03 	sts	0x0399, r26
    1300:	b0 93 9a 03 	sts	0x039A, r27

	isa_sched[0] = 1;
    1304:	20 93 9f 04 	sts	0x049F, r18
	isa_sched[1] = 1;//change for test
    1308:	20 93 a0 04 	sts	0x04A0, r18
	isa_sched[2] = 1;
    130c:	20 93 a1 04 	sts	0x04A1, r18
	isa_sched[3] = 1;
    1310:	20 93 a2 04 	sts	0x04A2, r18
    1314:	2d c0       	rjmp	.+90     	; 0x1370 <isa_set_schedule+0xf4>

    }
    else if(isa_node_mode==ISA_RECIPIENT){
    1316:	88 23       	and	r24, r24
    1318:	59 f5       	brne	.+86     	; 0x1370 <isa_set_schedule+0xf4>
	isa_tdma_tx_mask |= ((uint32_t) 1) << 3;
    131a:	80 91 99 04 	lds	r24, 0x0499
    131e:	90 91 9a 04 	lds	r25, 0x049A
    1322:	a0 91 9b 04 	lds	r26, 0x049B
    1326:	b0 91 9c 04 	lds	r27, 0x049C
    132a:	88 60       	ori	r24, 0x08	; 8
    132c:	80 93 99 04 	sts	0x0499, r24
    1330:	90 93 9a 04 	sts	0x049A, r25
    1334:	a0 93 9b 04 	sts	0x049B, r26
    1338:	b0 93 9c 04 	sts	0x049C, r27
	isa_tdma_rx_mask |= ((uint32_t) 1) << 1;//change for test
	isa_tdma_rx_mask |= ((uint32_t) 1) << 2;
	isa_tdma_rx_mask |= ((uint32_t) 1) << 0;
    133c:	80 91 97 03 	lds	r24, 0x0397
    1340:	90 91 98 03 	lds	r25, 0x0398
    1344:	a0 91 99 03 	lds	r26, 0x0399
    1348:	b0 91 9a 03 	lds	r27, 0x039A
    134c:	87 60       	ori	r24, 0x07	; 7
    134e:	80 93 97 03 	sts	0x0397, r24
    1352:	90 93 98 03 	sts	0x0398, r25
    1356:	a0 93 99 03 	sts	0x0399, r26
    135a:	b0 93 9a 03 	sts	0x039A, r27

	isa_sched[0] = 1;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 93 9f 04 	sts	0x049F, r24
	isa_sched[1] = 1;//change for test
    1364:	80 93 a0 04 	sts	0x04A0, r24
	isa_sched[2] = 1;
    1368:	80 93 a1 04 	sts	0x04A1, r24
	isa_sched[3] = 1;
    136c:	80 93 a2 04 	sts	0x04A2, r24
    for(i=0;i<25;i++)
	printf("%d,",isa_sched[i]);
    printf("\n\r");*/
    
return NRK_OK;
}
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	08 95       	ret

00001376 <isa_get_schedule>:
 * 
 * Return: schedule value
 */
int8_t isa_get_schedule (uint8_t slot)
{
    if (slot > ISA_SLOTS_PER_FRAME)
    1376:	8a 31       	cpi	r24, 0x1A	; 26
    1378:	18 f0       	brcs	.+6      	; 0x1380 <isa_get_schedule+0xa>
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	9f ef       	ldi	r25, 0xFF	; 255
    137e:	08 95       	ret
        return NRK_ERROR;

    return isa_sched[slot];
    1380:	e8 2f       	mov	r30, r24
    1382:	ff 27       	eor	r31, r31
    1384:	e1 56       	subi	r30, 0x61	; 97
    1386:	fb 4f       	sbci	r31, 0xFB	; 251
    1388:	80 81       	ld	r24, Z
    138a:	99 27       	eor	r25, r25
    138c:	87 fd       	sbrc	r24, 7
    138e:	90 95       	com	r25
}
    1390:	08 95       	ret

00001392 <_isa_clear_sched_cache>:
 * This function is called by the timer interrupt at the
 * start of each ISA cycle to remove any cached scheduling
 * values.  Only call this if you are reseting the ISA frames.
 */
void _isa_clear_sched_cache ()
{
    1392:	ef e9       	ldi	r30, 0x9F	; 159
    1394:	f4 e0       	ldi	r31, 0x04	; 4
    uint8_t i;
// FIXME compress this shit later...
    for (i = 0; i < ISA_SLOTS_PER_FRAME; i++) {
        isa_sched[i] = 0;
    1396:	11 92       	st	Z+, r1
 */
void _isa_clear_sched_cache ()
{
    uint8_t i;
// FIXME compress this shit later...
    for (i = 0; i < ISA_SLOTS_PER_FRAME; i++) {
    1398:	84 e0       	ldi	r24, 0x04	; 4
    139a:	e8 3b       	cpi	r30, 0xB8	; 184
    139c:	f8 07       	cpc	r31, r24
    139e:	d9 f7       	brne	.-10     	; 0x1396 <_isa_clear_sched_cache+0x4>
    13a0:	08 95       	ret

000013a2 <isa_get_slots_until_next_wakeup>:
    uint8_t wrapped_slot;
    uint8_t current_local_slot;
    
//total_slot = (((uint16_t)current_frame)<<5) + current_slot; 
    min_slot = ISA_SLOTS_PER_FRAME + 1;
    current_local_slot = current_global_slot%25;
    13a2:	69 e1       	ldi	r22, 0x19	; 25
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	0e 94 58 34 	call	0x68b0	; 0x68b0 <__udivmodhi4>
    13aa:	68 2f       	mov	r22, r24

    //scheduled slot follows current slot
    for (test_slot = current_local_slot+1; test_slot < ISA_SLOTS_PER_FRAME; test_slot++) {
    13ac:	48 2f       	mov	r20, r24
    13ae:	0c c0       	rjmp	.+24     	; 0x13c8 <isa_get_slots_until_next_wakeup+0x26>
	//printf("isa_sched[%d] is %d.\n\r",test_slot,isa_sched[test_slot]);
        if(isa_sched[test_slot]==0) //slot is not scheduled
    13b0:	24 2f       	mov	r18, r20
    13b2:	33 27       	eor	r19, r19
    13b4:	f9 01       	movw	r30, r18
    13b6:	e1 56       	subi	r30, 0x61	; 97
    13b8:	fb 4f       	sbci	r31, 0xFB	; 251
    13ba:	80 81       	ld	r24, Z
    13bc:	88 23       	and	r24, r24
    13be:	21 f0       	breq	.+8      	; 0x13c8 <isa_get_slots_until_next_wakeup+0x26>
            continue;
	min_slot = test_slot-current_local_slot;
    13c0:	c9 01       	movw	r24, r18
    13c2:	86 1b       	sub	r24, r22
    13c4:	91 09       	sbc	r25, r1
    13c6:	08 95       	ret
//total_slot = (((uint16_t)current_frame)<<5) + current_slot; 
    min_slot = ISA_SLOTS_PER_FRAME + 1;
    current_local_slot = current_global_slot%25;

    //scheduled slot follows current slot
    for (test_slot = current_local_slot+1; test_slot < ISA_SLOTS_PER_FRAME; test_slot++) {
    13c8:	4f 5f       	subi	r20, 0xFF	; 255
    13ca:	49 31       	cpi	r20, 0x19	; 25
    13cc:	88 f3       	brcs	.-30     	; 0x13b0 <isa_get_slots_until_next_wakeup+0xe>
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
	return min_slot;
    }

    // scheduled slot wrapped back
    for (test_slot = 0; test_slot<=current_local_slot;test_slot++){ 
	if(isa_sched[test_slot]==0) //slot is not scheduled
    13d2:	42 2f       	mov	r20, r18
    13d4:	55 27       	eor	r21, r21
    13d6:	fa 01       	movw	r30, r20
    13d8:	e1 56       	subi	r30, 0x61	; 97
    13da:	fb 4f       	sbci	r31, 0xFB	; 251
    13dc:	80 81       	ld	r24, Z
    13de:	88 23       	and	r24, r24
    13e0:	39 f0       	breq	.+14     	; 0x13f0 <isa_get_slots_until_next_wakeup+0x4e>
            continue;
	min_slot = (ISA_SLOTS_PER_FRAME - current_local_slot + test_slot);
    13e2:	89 e1       	ldi	r24, 0x19	; 25
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	86 1b       	sub	r24, r22
    13e8:	91 09       	sbc	r25, r1
    13ea:	84 0f       	add	r24, r20
    13ec:	95 1f       	adc	r25, r21
    13ee:	08 95       	ret
	return min_slot;
    13f0:	2f 5f       	subi	r18, 0xFF	; 255
    13f2:	3f 4f       	sbci	r19, 0xFF	; 255
	min_slot = test_slot-current_local_slot;
	return min_slot;
    }

    // scheduled slot wrapped back
    for (test_slot = 0; test_slot<=current_local_slot;test_slot++){ 
    13f4:	62 17       	cp	r22, r18
    13f6:	68 f7       	brcc	.-38     	; 0x13d2 <isa_get_slots_until_next_wakeup+0x30>
	if(isa_sched[test_slot]==0) //slot is not scheduled
            continue;
	min_slot = (ISA_SLOTS_PER_FRAME - current_local_slot + test_slot);
	return min_slot;
    }
}
    13f8:	08 95       	ret

000013fa <init_adc>:


void init_adc()
{
// Initialize values here
  ADC_INIT ();
    13fa:	ea e7       	ldi	r30, 0x7A	; 122
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	83 e0       	ldi	r24, 0x03	; 3
    1400:	80 83       	st	Z, r24
    1402:	ac e7       	ldi	r26, 0x7C	; 124
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	80 e4       	ldi	r24, 0x40	; 64
    1408:	8c 93       	st	X, r24
  ADC_ENABLE ();
    140a:	80 81       	ld	r24, Z
    140c:	80 68       	ori	r24, 0x80	; 128
    140e:	80 83       	st	Z, r24
  channel=0;
    1410:	10 92 5d 06 	sts	0x065D, r1
  ADC_SET_CHANNEL (0);
    1414:	8c 91       	ld	r24, X
    1416:	80 7e       	andi	r24, 0xE0	; 224
    1418:	8c 93       	st	X, r24
    141a:	9c 91       	ld	r25, X
    141c:	8c 91       	ld	r24, X
    141e:	80 7e       	andi	r24, 0xE0	; 224
    1420:	89 2b       	or	r24, r25
    1422:	8c 93       	st	X, r24
    1424:	08 95       	ret

00001426 <delay>:
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
    1426:	88 ec       	ldi	r24, 0xC8	; 200
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 6f 2c 	call	0x58de	; 0x58de <nrk_spin_wait_us>
    142e:	08 95       	ret

00001430 <get_adc_val>:
}

uint16_t get_adc_val()
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
    1430:	80 91 7a 00 	lds	r24, 0x007A
    1434:	80 64       	ori	r24, 0x40	; 64
    1436:	80 93 7a 00 	sts	0x007A, r24
    143a:	80 91 7a 00 	lds	r24, 0x007A
    143e:	84 ff       	sbrs	r24, 4
    1440:	fc cf       	rjmp	.-8      	; 0x143a <get_adc_val+0xa>
	delay();
    1442:	0e 94 13 0a 	call	0x1426	; 0x1426 <delay>
	ADC_GET_SAMPLE_10(adc_val);
    1446:	20 91 78 00 	lds	r18, 0x0078
    144a:	33 27       	eor	r19, r19
    144c:	80 91 79 00 	lds	r24, 0x0079
    1450:	99 27       	eor	r25, r25
    1452:	98 2f       	mov	r25, r24
    1454:	88 27       	eor	r24, r24
	return adc_val;
}
    1456:	82 2b       	or	r24, r18
    1458:	93 2b       	or	r25, r19
    145a:	08 95       	ret

0000145c <read_voltage_status>:
// the cc2420 chip to search for the voltage.
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
{
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	22 97       	sbiw	r28, 0x02	; 2
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
volatile uint16_t val;
uint8_t check,level;
nrk_sem_t *radio_sem;

radio_sem= rf_get_sem();
    1476:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <rf_get_sem>
    147a:	8c 01       	movw	r16, r24

// if semaphore not created, then assume you own the radio 
if(radio_sem!=NULL)
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	11 f0       	breq	.+4      	; 0x1484 <read_voltage_status+0x28>
 nrk_sem_pend (radio_sem);
    1480:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>

    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    1484:	15 9a       	sbi	0x02, 5	; 2
    1486:	ff 24       	eor	r15, r15
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
{
val=0x0020 | level;
    1488:	8f 2d       	mov	r24, r15
    148a:	80 62       	ori	r24, 0x20	; 32
    148c:	99 27       	eor	r25, r25
    148e:	9a 83       	std	Y+2, r25	; 0x02
    1490:	89 83       	std	Y+1, r24	; 0x01
FASTSPI_SETREG(CC2420_BATTMON, val);
    1492:	40 98       	cbi	0x08, 0	; 8
    1494:	8b e1       	ldi	r24, 0x1B	; 27
    1496:	8e bd       	out	0x2e, r24	; 46
    1498:	0d b4       	in	r0, 0x2d	; 45
    149a:	07 fe       	sbrs	r0, 7
    149c:	fd cf       	rjmp	.-6      	; 0x1498 <read_voltage_status+0x3c>
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	89 2f       	mov	r24, r25
    14a4:	99 27       	eor	r25, r25
    14a6:	8e bd       	out	0x2e, r24	; 46
    14a8:	0d b4       	in	r0, 0x2d	; 45
    14aa:	07 fe       	sbrs	r0, 7
    14ac:	fd cf       	rjmp	.-6      	; 0x14a8 <read_voltage_status+0x4c>
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	9a 81       	ldd	r25, Y+2	; 0x02
    14b2:	8e bd       	out	0x2e, r24	; 46
    14b4:	0d b4       	in	r0, 0x2d	; 45
    14b6:	07 fe       	sbrs	r0, 7
    14b8:	fd cf       	rjmp	.-6      	; 0x14b4 <read_voltage_status+0x58>
    14ba:	40 9a       	sbi	0x08, 0	; 8
nrk_spin_wait_us(2);
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 6f 2c 	call	0x58de	; 0x58de <nrk_spin_wait_us>
FASTSPI_GETREG(CC2420_BATTMON, val);
    14c4:	40 98       	cbi	0x08, 0	; 8
    14c6:	8b e5       	ldi	r24, 0x5B	; 91
    14c8:	8e bd       	out	0x2e, r24	; 46
    14ca:	0d b4       	in	r0, 0x2d	; 45
    14cc:	07 fe       	sbrs	r0, 7
    14ce:	fd cf       	rjmp	.-6      	; 0x14ca <read_voltage_status+0x6e>
    14d0:	1e bc       	out	0x2e, r1	; 46
    14d2:	0d b4       	in	r0, 0x2d	; 45
    14d4:	07 fe       	sbrs	r0, 7
    14d6:	fd cf       	rjmp	.-6      	; 0x14d2 <read_voltage_status+0x76>
    14d8:	8e b5       	in	r24, 0x2e	; 46
    14da:	99 27       	eor	r25, r25
    14dc:	98 2f       	mov	r25, r24
    14de:	88 27       	eor	r24, r24
    14e0:	9a 83       	std	Y+2, r25	; 0x02
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	1e bc       	out	0x2e, r1	; 46
    14e6:	0d b4       	in	r0, 0x2d	; 45
    14e8:	07 fe       	sbrs	r0, 7
    14ea:	fd cf       	rjmp	.-6      	; 0x14e6 <read_voltage_status+0x8a>
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	9a 81       	ldd	r25, Y+2	; 0x02
    14f0:	2e b5       	in	r18, 0x2e	; 46
    14f2:	33 27       	eor	r19, r19
    14f4:	28 2b       	or	r18, r24
    14f6:	39 2b       	or	r19, r25
    14f8:	3a 83       	std	Y+2, r19	; 0x02
    14fa:	29 83       	std	Y+1, r18	; 0x01
    14fc:	40 9a       	sbi	0x08, 0	; 8
if(val&0x0040) break; 
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	86 fd       	sbrc	r24, 6
    1504:	05 c0       	rjmp	.+10     	; 0x1510 <read_voltage_status+0xb4>
level++;
    1506:	f3 94       	inc	r15
    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
    1508:	2f e1       	ldi	r18, 0x1F	; 31
    150a:	f2 16       	cp	r15, r18
    150c:	09 f0       	breq	.+2      	; 0x1510 <read_voltage_status+0xb4>
    150e:	bc cf       	rjmp	.-136    	; 0x1488 <read_voltage_status+0x2c>
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
if(val&0x0040) break; 
level++;
}
if(radio_sem!=NULL)
    1510:	01 15       	cp	r16, r1
    1512:	11 05       	cpc	r17, r1
    1514:	19 f0       	breq	.+6      	; 0x151c <read_voltage_status+0xc0>
 nrk_sem_post(radio_sem);
    1516:	c8 01       	movw	r24, r16
    1518:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
if(level==0)
    151c:	ff 20       	and	r15, r15
    151e:	c9 f4       	brne	.+50     	; 0x1552 <read_voltage_status+0xf6>
  {
  val=get_adc_val();
    1520:	0e 94 18 0a 	call	0x1430	; 0x1430 <get_adc_val>
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	9a 81       	ldd	r25, Y+2	; 0x02
    152c:	8f 3a       	cpi	r24, 0xAF	; 175
    152e:	91 05       	cpc	r25, r1
    1530:	30 f0       	brcs	.+12     	; 0x153e <read_voltage_status+0xe2>
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	9a 81       	ldd	r25, Y+2	; 0x02
    1536:	8e 5a       	subi	r24, 0xAE	; 174
    1538:	90 40       	sbci	r25, 0x00	; 0
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
  if(val<330) val=330;
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	8a 54       	subi	r24, 0x4A	; 74
    1544:	91 40       	sbci	r25, 0x01	; 1
    1546:	98 f4       	brcc	.+38     	; 0x156e <read_voltage_status+0x112>
    1548:	8a e4       	ldi	r24, 0x4A	; 74
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	9a 83       	std	Y+2, r25	; 0x02
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	0e c0       	rjmp	.+28     	; 0x156e <read_voltage_status+0x112>
  }
else val=(9000-(level*125)) / 27;
    1552:	2d e7       	ldi	r18, 0x7D	; 125
    1554:	f2 9e       	mul	r15, r18
    1556:	90 01       	movw	r18, r0
    1558:	11 24       	eor	r1, r1
    155a:	88 e2       	ldi	r24, 0x28	; 40
    155c:	93 e2       	ldi	r25, 0x23	; 35
    155e:	82 1b       	sub	r24, r18
    1560:	93 0b       	sbc	r25, r19
    1562:	6b e1       	ldi	r22, 0x1B	; 27
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	0e 94 6c 34 	call	0x68d8	; 0x68d8 <__divmodhi4>
    156a:	7a 83       	std	Y+2, r23	; 0x02
    156c:	69 83       	std	Y+1, r22	; 0x01

return val;
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	22 96       	adiw	r28, 0x02	; 2
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	ff 90       	pop	r15
    1588:	08 95       	ret

0000158a <dev_manager_ff_sensors>:
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	98 2f       	mov	r25, r24
    159c:	ea 01       	movw	r28, r20
    159e:	12 2f       	mov	r17, r18
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

     switch(action)
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <dev_manager_ff_sensors+0x1c>
    15a4:	81 c0       	rjmp	.+258    	; 0x16a8 <dev_manager_ff_sensors+0x11e>
    15a6:	83 30       	cpi	r24, 0x03	; 3
    15a8:	30 f4       	brcc	.+12     	; 0x15b6 <dev_manager_ff_sensors+0x2c>
    15aa:	88 23       	and	r24, r24
    15ac:	71 f0       	breq	.+28     	; 0x15ca <dev_manager_ff_sensors+0x40>
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <dev_manager_ff_sensors+0x2a>
    15b2:	d2 c0       	rjmp	.+420    	; 0x1758 <dev_manager_ff_sensors+0x1ce>
    15b4:	10 c0       	rjmp	.+32     	; 0x15d6 <dev_manager_ff_sensors+0x4c>
    15b6:	84 30       	cpi	r24, 0x04	; 4
    15b8:	09 f4       	brne	.+2      	; 0x15bc <dev_manager_ff_sensors+0x32>
    15ba:	81 c0       	rjmp	.+258    	; 0x16be <dev_manager_ff_sensors+0x134>
    15bc:	84 30       	cpi	r24, 0x04	; 4
    15be:	08 f4       	brcc	.+2      	; 0x15c2 <dev_manager_ff_sensors+0x38>
    15c0:	77 c0       	rjmp	.+238    	; 0x16b0 <dev_manager_ff_sensors+0x126>
    15c2:	85 30       	cpi	r24, 0x05	; 5
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <dev_manager_ff_sensors+0x3e>
    15c6:	c8 c0       	rjmp	.+400    	; 0x1758 <dev_manager_ff_sensors+0x1ce>
    15c8:	2d c0       	rjmp	.+90     	; 0x1624 <dev_manager_ff_sensors+0x9a>
     {
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
    15ca:	80 e8       	ldi	r24, 0x80	; 128
    15cc:	80 bb       	out	0x10, r24	; 16
			PORTF |= PWR_CTRL_MASK;
    15ce:	8f 9a       	sbi	0x11, 7	; 17
	     		init_adc();  
    15d0:	0e 94 fd 09 	call	0x13fa	; 0x13fa <init_adc>
    15d4:	6a c0       	rjmp	.+212    	; 0x16aa <dev_manager_ff_sensors+0x120>
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    15d6:	80 91 5c 06 	lds	r24, 0x065C
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <dev_manager_ff_sensors+0x56>
    15de:	c3 c0       	rjmp	.+390    	; 0x1766 <dev_manager_ff_sensors+0x1dc>
		    is_open=1; 
    15e0:	90 93 5c 06 	sts	0x065C, r25
		    if(opt&READ_FLAG)
    15e4:	77 27       	eor	r23, r23
    15e6:	60 ff       	sbrs	r22, 0
    15e8:	13 c0       	rjmp	.+38     	; 0x1610 <dev_manager_ff_sensors+0x86>
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
    15ea:	8f 98       	cbi	0x11, 7	; 17
  			channel=0;
    15ec:	10 92 5d 06 	sts	0x065D, r1
  			ADC_SET_CHANNEL (0);
    15f0:	80 91 7c 00 	lds	r24, 0x007C
    15f4:	80 7e       	andi	r24, 0xE0	; 224
    15f6:	80 93 7c 00 	sts	0x007C, r24
    15fa:	90 91 7c 00 	lds	r25, 0x007C
    15fe:	80 91 7c 00 	lds	r24, 0x007C
    1602:	80 7e       	andi	r24, 0xE0	; 224
    1604:	89 2b       	or	r24, r25
    1606:	80 93 7c 00 	sts	0x007C, r24
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    160a:	88 ee       	ldi	r24, 0xE8	; 232
    160c:	93 e0       	ldi	r25, 0x03	; 3
    160e:	9f c0       	rjmp	.+318    	; 0x174e <dev_manager_ff_sensors+0x1c4>
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
    1610:	61 fd       	sbrc	r22, 1
    1612:	a9 c0       	rjmp	.+338    	; 0x1766 <dev_manager_ff_sensors+0x1dc>
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
    1614:	62 fd       	sbrc	r22, 2
    1616:	a7 c0       	rjmp	.+334    	; 0x1766 <dev_manager_ff_sensors+0x1dc>
		    {
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
    1618:	67 70       	andi	r22, 0x07	; 7
    161a:	70 70       	andi	r23, 0x00	; 0
    161c:	67 2b       	or	r22, r23
    161e:	09 f4       	brne	.+2      	; 0x1622 <dev_manager_ff_sensors+0x98>
    1620:	a2 c0       	rjmp	.+324    	; 0x1766 <dev_manager_ff_sensors+0x1dc>
    1622:	97 c0       	rjmp	.+302    	; 0x1752 <dev_manager_ff_sensors+0x1c8>
		
	    

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
    1624:	82 2f       	mov	r24, r18
    1626:	81 50       	subi	r24, 0x01	; 1
    1628:	82 30       	cpi	r24, 0x02	; 2
    162a:	08 f0       	brcs	.+2      	; 0x162e <dev_manager_ff_sensors+0xa4>
    162c:	99 c0       	rjmp	.+306    	; 0x1760 <dev_manager_ff_sensors+0x1d6>
			if(channel!=BAT && channel<7)
    162e:	90 91 5d 06 	lds	r25, 0x065D
    1632:	89 2f       	mov	r24, r25
    1634:	81 50       	subi	r24, 0x01	; 1
    1636:	86 30       	cpi	r24, 0x06	; 6
    1638:	18 f4       	brcc	.+6      	; 0x1640 <dev_manager_ff_sensors+0xb6>
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();
    163a:	0e 94 18 0a 	call	0x1430	; 0x1430 <get_adc_val>
    163e:	22 c0       	rjmp	.+68     	; 0x1684 <dev_manager_ff_sensors+0xfa>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}


			} else if(channel==BAT)
    1640:	99 23       	and	r25, r25
    1642:	19 f4       	brne	.+6      	; 0x164a <dev_manager_ff_sensors+0xc0>
			{
			uint16_t tmp;
			tmp=read_voltage_status();
    1644:	0e 94 2e 0a 	call	0x145c	; 0x145c <read_voltage_status>
    1648:	1d c0       	rjmp	.+58     	; 0x1684 <dev_manager_ff_sensors+0xfa>
				}
			if(size==1)
				{
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
    164a:	97 30       	cpi	r25, 0x07	; 7
    164c:	51 f5       	brne	.+84     	; 0x16a2 <dev_manager_ff_sensors+0x118>
    164e:	f1 e0       	ldi	r31, 0x01	; 1
    1650:	cf 2e       	mov	r12, r31
    1652:	f4 e0       	ldi	r31, 0x04	; 4
    1654:	df 2e       	mov	r13, r31
    1656:	ee 24       	eor	r14, r14
    1658:	ff 24       	eor	r15, r15
    165a:	00 e0       	ldi	r16, 0x00	; 0
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
    165c:	0e 94 18 0a 	call	0x1430	; 0x1430 <get_adc_val>
    1660:	8c 15       	cp	r24, r12
    1662:	9d 05       	cpc	r25, r13
    1664:	08 f4       	brcc	.+2      	; 0x1668 <dev_manager_ff_sensors+0xde>
    1666:	6c 01       	movw	r12, r24
    1668:	e8 16       	cp	r14, r24
    166a:	f9 06       	cpc	r15, r25
    166c:	08 f4       	brcc	.+2      	; 0x1670 <dev_manager_ff_sensors+0xe6>
    166e:	7c 01       	movw	r14, r24
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
    1670:	8d e7       	ldi	r24, 0x7D	; 125
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 6f 2c 	call	0x58de	; 0x58de <nrk_spin_wait_us>
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
    1678:	0f 5f       	subi	r16, 0xFF	; 255
    167a:	00 34       	cpi	r16, 0x40	; 64
    167c:	79 f7       	brne	.-34     	; 0x165c <dev_manager_ff_sensors+0xd2>
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
				}
			 	val=max-min;	
    167e:	c7 01       	movw	r24, r14
    1680:	8c 19       	sub	r24, r12
    1682:	9d 09       	sbc	r25, r13
				if(size==2)
    1684:	12 30       	cpi	r17, 0x02	; 2
    1686:	31 f4       	brne	.+12     	; 0x1694 <dev_manager_ff_sensors+0x10a>
			      	{
					buffer[count]=val  & 0xFF;
    1688:	88 83       	st	Y, r24
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    168a:	89 2f       	mov	r24, r25
    168c:	99 27       	eor	r25, r25
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	08 c0       	rjmp	.+16     	; 0x16a4 <dev_manager_ff_sensors+0x11a>
				}

				if(size==1)
    1694:	11 30       	cpi	r17, 0x01	; 1
    1696:	29 f4       	brne	.+10     	; 0x16a2 <dev_manager_ff_sensors+0x118>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
    1698:	96 95       	lsr	r25
    169a:	87 95       	ror	r24
    169c:	96 95       	lsr	r25
    169e:	87 95       	ror	r24
    16a0:	88 83       	st	Y, r24
    16a2:	80 e0       	ldi	r24, 0x00	; 0
				}

			}
			
		      count++;
                      return count;
    16a4:	8f 5f       	subi	r24, 0xFF	; 255
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <dev_manager_ff_sensors+0x130>

             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
    16a8:	8f 9a       	sbi	0x11, 7	; 17
		    	is_open=0; 
    16aa:	10 92 5c 06 	sts	0x065C, r1
    16ae:	51 c0       	rjmp	.+162    	; 0x1752 <dev_manager_ff_sensors+0x1c8>
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
    16b0:	61 30       	cpi	r22, 0x01	; 1
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <dev_manager_ff_sensors+0x12c>
    16b4:	58 c0       	rjmp	.+176    	; 0x1766 <dev_manager_ff_sensors+0x1dc>
    16b6:	80 91 5d 06 	lds	r24, 0x065D
    16ba:	99 27       	eor	r25, r25
    16bc:	56 c0       	rjmp	.+172    	; 0x176a <dev_manager_ff_sensors+0x1e0>
	     		return NRK_ERROR;
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    16be:	61 30       	cpi	r22, 0x01	; 1
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <dev_manager_ff_sensors+0x13a>
    16c2:	51 c0       	rjmp	.+162    	; 0x1766 <dev_manager_ff_sensors+0x1dc>
			{
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
    16c4:	27 30       	cpi	r18, 0x07	; 7
    16c6:	d9 f4       	brne	.+54     	; 0x16fe <dev_manager_ff_sensors+0x174>
			  {
				channel=value;
    16c8:	20 93 5d 06 	sts	0x065D, r18
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
    16cc:	80 91 7c 00 	lds	r24, 0x007C
    16d0:	8f 77       	andi	r24, 0x7F	; 127
    16d2:	80 93 7c 00 	sts	0x007C, r24
    16d6:	80 91 7c 00 	lds	r24, 0x007C
    16da:	80 64       	ori	r24, 0x40	; 64
    16dc:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (AUDIO);
    16e0:	80 91 7c 00 	lds	r24, 0x007C
    16e4:	80 7e       	andi	r24, 0xE0	; 224
    16e6:	80 93 7c 00 	sts	0x007C, r24
    16ea:	90 91 7c 00 	lds	r25, 0x007C
    16ee:	80 91 7c 00 	lds	r24, 0x007C
    16f2:	93 60       	ori	r25, 0x03	; 3
    16f4:	80 7e       	andi	r24, 0xE0	; 224
    16f6:	98 2b       	or	r25, r24
    16f8:	90 93 7c 00 	sts	0x007C, r25
    16fc:	26 c0       	rjmp	.+76     	; 0x174a <dev_manager_ff_sensors+0x1c0>
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;

			  } else
			  {
				if(value>7) 
    16fe:	28 30       	cpi	r18, 0x08	; 8
    1700:	20 f0       	brcs	.+8      	; 0x170a <dev_manager_ff_sensors+0x180>
				{
					_nrk_errno_set(1);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_nrk_errno_set>
    1708:	2e c0       	rjmp	.+92     	; 0x1766 <dev_manager_ff_sensors+0x1dc>
					return NRK_ERROR;
				}
				channel=value;
    170a:	20 93 5d 06 	sts	0x065D, r18
				if(channel==LIGHT)
    170e:	21 30       	cpi	r18, 0x01	; 1
    1710:	49 f4       	brne	.+18     	; 0x1724 <dev_manager_ff_sensors+0x19a>
				   ADC_VREF_VCC();	
    1712:	80 91 7c 00 	lds	r24, 0x007C
    1716:	8f 77       	andi	r24, 0x7F	; 127
    1718:	80 93 7c 00 	sts	0x007C, r24
    171c:	80 91 7c 00 	lds	r24, 0x007C
    1720:	80 64       	ori	r24, 0x40	; 64
    1722:	03 c0       	rjmp	.+6      	; 0x172a <dev_manager_ff_sensors+0x1a0>
				else
				   ADC_VREF_2_56();	
    1724:	80 91 7c 00 	lds	r24, 0x007C
    1728:	80 6c       	ori	r24, 0xC0	; 192
    172a:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (channel);
    172e:	80 91 7c 00 	lds	r24, 0x007C
    1732:	80 7e       	andi	r24, 0xE0	; 224
    1734:	80 93 7c 00 	sts	0x007C, r24
    1738:	90 91 7c 00 	lds	r25, 0x007C
    173c:	80 91 7c 00 	lds	r24, 0x007C
    1740:	80 7e       	andi	r24, 0xE0	; 224
    1742:	89 2b       	or	r24, r25
    1744:	81 2b       	or	r24, r17
    1746:	80 93 7c 00 	sts	0x007C, r24
				nrk_spin_wait_us(ADC_SETUP_DELAY);
    174a:	88 ec       	ldi	r24, 0xC8	; 200
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 6f 2c 	call	0x58de	; 0x58de <nrk_spin_wait_us>
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	09 c0       	rjmp	.+18     	; 0x176a <dev_manager_ff_sensors+0x1e0>
				return NRK_OK;
			  }
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	8c e0       	ldi	r24, 0x0C	; 12
    175c:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <nrk_kernel_error_add>
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 c0       	rjmp	.+4      	; 0x176a <dev_manager_ff_sensors+0x1e0>
		 return 0;
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	df 90       	pop	r13
    1778:	cf 90       	pop	r12
    177a:	08 95       	ret

0000177c <halRfSetChannel>:

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    177c:	99 27       	eor	r25, r25
    do { \
    177e:	9c 01       	movw	r18, r24
    1780:	26 5a       	subi	r18, 0xA6	; 166
    1782:	3e 4b       	sbci	r19, 0xBE	; 190
    1784:	0b 97       	sbiw	r24, 0x0b	; 11
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	28 0f       	add	r18, r24
    1790:	39 1f       	adc	r19, r25
	ADMUX = BM(REFS0);  \
} while (0)

    1792:	f8 94       	cli
#define ADC_VREF_VCC() \
    1794:	40 98       	cbi	0x08, 0	; 8
    1796:	88 e1       	ldi	r24, 0x18	; 24
    1798:	8e bd       	out	0x2e, r24	; 46
    179a:	0d b4       	in	r0, 0x2d	; 45
    179c:	07 fe       	sbrs	r0, 7
    179e:	fd cf       	rjmp	.-6      	; 0x179a <halRfSetChannel+0x1e>
    17a0:	83 2f       	mov	r24, r19
    17a2:	99 27       	eor	r25, r25
    17a4:	8e bd       	out	0x2e, r24	; 46
    17a6:	0d b4       	in	r0, 0x2d	; 45
    17a8:	07 fe       	sbrs	r0, 7
    17aa:	fd cf       	rjmp	.-6      	; 0x17a6 <halRfSetChannel+0x2a>
    17ac:	2e bd       	out	0x2e, r18	; 46
    17ae:	0d b4       	in	r0, 0x2d	; 45
    17b0:	07 fe       	sbrs	r0, 7
    17b2:	fd cf       	rjmp	.-6      	; 0x17ae <halRfSetChannel+0x32>
    17b4:	40 9a       	sbi	0x08, 0	; 8
   do { \
    17b6:	78 94       	sei
    17b8:	08 95       	ret

000017ba <halRfWaitForCrystalOscillator>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
    17ba:	f8 94       	cli
	    FASTSPI_UPD_STATUS(spiStatusByte);
    17bc:	40 98       	cbi	0x08, 0	; 8
    17be:	1e bc       	out	0x2e, r1	; 46
    17c0:	0d b4       	in	r0, 0x2d	; 45
    17c2:	07 fe       	sbrs	r0, 7
    17c4:	fd cf       	rjmp	.-6      	; 0x17c0 <halRfWaitForCrystalOscillator+0x6>
    17c6:	8e b5       	in	r24, 0x2e	; 46
    17c8:	40 9a       	sbi	0x08, 0	; 8
	    ENABLE_GLOBAL_INT();
    17ca:	78 94       	sei
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    17cc:	86 ff       	sbrs	r24, 6
    17ce:	f5 cf       	rjmp	.-22     	; 0x17ba <halRfWaitForCrystalOscillator>
    17d0:	08 95       	ret

000017d2 <rf_security_last_pkt_status>:
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
    17d2:	80 91 73 06 	lds	r24, 0x0673
return last_pkt_encrypted;
}
    17d6:	99 27       	eor	r25, r25
    17d8:	08 95       	ret

000017da <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	dc 01       	movw	r26, r24
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
    17e0:	40 98       	cbi	0x08, 0	; 8
    17e2:	89 ec       	ldi	r24, 0xC9	; 201
    17e4:	8e bd       	out	0x2e, r24	; 46
    17e6:	0d b4       	in	r0, 0x2d	; 45
    17e8:	07 fe       	sbrs	r0, 7
    17ea:	fd cf       	rjmp	.-6      	; 0x17e6 <rf_security_set_ctr_counter+0xc>
    17ec:	80 e8       	ldi	r24, 0x80	; 128
    17ee:	8e bd       	out	0x2e, r24	; 46
    17f0:	0d b4       	in	r0, 0x2d	; 45
    17f2:	07 fe       	sbrs	r0, 7
    17f4:	fd cf       	rjmp	.-6      	; 0x17f0 <rf_security_set_ctr_counter+0x16>
    17f6:	92 e0       	ldi	r25, 0x02	; 2
    17f8:	91 50       	subi	r25, 0x01	; 1
    17fa:	fd 01       	movw	r30, r26
    17fc:	e9 0f       	add	r30, r25
    17fe:	f1 1d       	adc	r31, r1
    1800:	80 81       	ld	r24, Z
    1802:	8e bd       	out	0x2e, r24	; 46
    1804:	0d b4       	in	r0, 0x2d	; 45
    1806:	07 fe       	sbrs	r0, 7
    1808:	fd cf       	rjmp	.-6      	; 0x1804 <rf_security_set_ctr_counter+0x2a>
    180a:	99 23       	and	r25, r25
    180c:	a9 f7       	brne	.-22     	; 0x17f8 <rf_security_set_ctr_counter+0x1e>
    180e:	40 9a       	sbi	0x08, 0	; 8
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
    1810:	40 98       	cbi	0x08, 0	; 8
    1812:	8b ec       	ldi	r24, 0xCB	; 203
    1814:	8e bd       	out	0x2e, r24	; 46
    1816:	0d b4       	in	r0, 0x2d	; 45
    1818:	07 fe       	sbrs	r0, 7
    181a:	fd cf       	rjmp	.-6      	; 0x1816 <rf_security_set_ctr_counter+0x3c>
    181c:	80 e8       	ldi	r24, 0x80	; 128
    181e:	8e bd       	out	0x2e, r24	; 46
    1820:	0d b4       	in	r0, 0x2d	; 45
    1822:	07 fe       	sbrs	r0, 7
    1824:	fd cf       	rjmp	.-6      	; 0x1820 <rf_security_set_ctr_counter+0x46>
    1826:	92 e0       	ldi	r25, 0x02	; 2
    1828:	9d 01       	movw	r18, r26
    182a:	2e 5f       	subi	r18, 0xFE	; 254
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	e9 01       	movw	r28, r18
    1830:	91 50       	subi	r25, 0x01	; 1
    1832:	f9 01       	movw	r30, r18
    1834:	e9 0f       	add	r30, r25
    1836:	f1 1d       	adc	r31, r1
    1838:	80 81       	ld	r24, Z
    183a:	8e bd       	out	0x2e, r24	; 46
    183c:	0d b4       	in	r0, 0x2d	; 45
    183e:	07 fe       	sbrs	r0, 7
    1840:	fd cf       	rjmp	.-6      	; 0x183c <rf_security_set_ctr_counter+0x62>
    1842:	99 23       	and	r25, r25
    1844:	a1 f7       	brne	.-24     	; 0x182e <rf_security_set_ctr_counter+0x54>
    1846:	40 9a       	sbi	0x08, 0	; 8
tx_ctr[0]=counter[0];
    1848:	8c 91       	ld	r24, X
    184a:	80 93 74 06 	sts	0x0674, r24
tx_ctr[1]=counter[1];
    184e:	fd 01       	movw	r30, r26
    1850:	81 81       	ldd	r24, Z+1	; 0x01
    1852:	80 93 75 06 	sts	0x0675, r24
tx_ctr[2]=counter[2];
    1856:	88 81       	ld	r24, Y
    1858:	80 93 76 06 	sts	0x0676, r24
tx_ctr[3]=counter[3];
    185c:	83 81       	ldd	r24, Z+3	; 0x03
    185e:	80 93 77 06 	sts	0x0677, r24
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret

00001868 <rf_security_enable>:
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    1868:	40 98       	cbi	0x08, 0	; 8
    186a:	89 e1       	ldi	r24, 0x19	; 25
    186c:	8e bd       	out	0x2e, r24	; 46
    186e:	0d b4       	in	r0, 0x2d	; 45
    1870:	07 fe       	sbrs	r0, 7
    1872:	fd cf       	rjmp	.-6      	; 0x186e <rf_security_enable+0x6>
    1874:	83 e0       	ldi	r24, 0x03	; 3
    1876:	8e bd       	out	0x2e, r24	; 46
    1878:	0d b4       	in	r0, 0x2d	; 45
    187a:	07 fe       	sbrs	r0, 7
    187c:	fd cf       	rjmp	.-6      	; 0x1878 <rf_security_enable+0x10>
    187e:	86 e0       	ldi	r24, 0x06	; 6
    1880:	8e bd       	out	0x2e, r24	; 46
    1882:	0d b4       	in	r0, 0x2d	; 45
    1884:	07 fe       	sbrs	r0, 7
    1886:	fd cf       	rjmp	.-6      	; 0x1882 <rf_security_enable+0x1a>
    1888:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
    188a:	40 98       	cbi	0x08, 0	; 8
    188c:	8a e1       	ldi	r24, 0x1A	; 26
    188e:	8e bd       	out	0x2e, r24	; 46
    1890:	0d b4       	in	r0, 0x2d	; 45
    1892:	07 fe       	sbrs	r0, 7
    1894:	fd cf       	rjmp	.-6      	; 0x1890 <rf_security_enable+0x28>
    1896:	8e e0       	ldi	r24, 0x0E	; 14
    1898:	8e bd       	out	0x2e, r24	; 46
    189a:	0d b4       	in	r0, 0x2d	; 45
    189c:	07 fe       	sbrs	r0, 7
    189e:	fd cf       	rjmp	.-6      	; 0x189a <rf_security_enable+0x32>
    18a0:	8e e0       	ldi	r24, 0x0E	; 14
    18a2:	8e bd       	out	0x2e, r24	; 46
    18a4:	0d b4       	in	r0, 0x2d	; 45
    18a6:	07 fe       	sbrs	r0, 7
    18a8:	fd cf       	rjmp	.-6      	; 0x18a4 <rf_security_enable+0x3c>
    18aa:	40 9a       	sbi	0x08, 0	; 8

security_enable=1;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	80 93 64 06 	sts	0x0664, r24
    18b2:	08 95       	ret

000018b4 <rf_security_disable>:



void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
    18b4:	40 98       	cbi	0x08, 0	; 8
    18b6:	89 e1       	ldi	r24, 0x19	; 25
    18b8:	8e bd       	out	0x2e, r24	; 46
    18ba:	0d b4       	in	r0, 0x2d	; 45
    18bc:	07 fe       	sbrs	r0, 7
    18be:	fd cf       	rjmp	.-6      	; 0x18ba <rf_security_disable+0x6>
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	8e bd       	out	0x2e, r24	; 46
    18c4:	0d b4       	in	r0, 0x2d	; 45
    18c6:	07 fe       	sbrs	r0, 7
    18c8:	fd cf       	rjmp	.-6      	; 0x18c4 <rf_security_disable+0x10>
    18ca:	84 ec       	ldi	r24, 0xC4	; 196
    18cc:	8e bd       	out	0x2e, r24	; 46
    18ce:	0d b4       	in	r0, 0x2d	; 45
    18d0:	07 fe       	sbrs	r0, 7
    18d2:	fd cf       	rjmp	.-6      	; 0x18ce <rf_security_disable+0x1a>
    18d4:	40 9a       	sbi	0x08, 0	; 8
  security_enable=0;
    18d6:	10 92 64 06 	sts	0x0664, r1
    18da:	08 95       	ret

000018dc <rf_get_sem>:
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    18dc:	80 91 62 06 	lds	r24, 0x0662
    18e0:	90 91 63 06 	lds	r25, 0x0663
    18e4:	08 95       	ret

000018e6 <rf_addr_decode_enable>:
}


void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
    18e6:	20 91 65 06 	lds	r18, 0x0665
    18ea:	30 91 66 06 	lds	r19, 0x0666
    18ee:	38 60       	ori	r19, 0x08	; 8
    18f0:	30 93 66 06 	sts	0x0666, r19
    18f4:	20 93 65 06 	sts	0x0665, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    18f8:	40 98       	cbi	0x08, 0	; 8
    18fa:	81 e1       	ldi	r24, 0x11	; 17
    18fc:	8e bd       	out	0x2e, r24	; 46
    18fe:	0d b4       	in	r0, 0x2d	; 45
    1900:	07 fe       	sbrs	r0, 7
    1902:	fd cf       	rjmp	.-6      	; 0x18fe <rf_addr_decode_enable+0x18>
    1904:	83 2f       	mov	r24, r19
    1906:	99 27       	eor	r25, r25
    1908:	8e bd       	out	0x2e, r24	; 46
    190a:	0d b4       	in	r0, 0x2d	; 45
    190c:	07 fe       	sbrs	r0, 7
    190e:	fd cf       	rjmp	.-6      	; 0x190a <rf_addr_decode_enable+0x24>
    1910:	2e bd       	out	0x2e, r18	; 46
    1912:	0d b4       	in	r0, 0x2d	; 45
    1914:	07 fe       	sbrs	r0, 7
    1916:	fd cf       	rjmp	.-6      	; 0x1912 <rf_addr_decode_enable+0x2c>
    1918:	40 9a       	sbi	0x08, 0	; 8
    191a:	08 95       	ret

0000191c <rf_addr_decode_disable>:
}

void rf_addr_decode_disable()
{
    mdmctrl0 &= (~0x0800);
    191c:	20 91 65 06 	lds	r18, 0x0665
    1920:	30 91 66 06 	lds	r19, 0x0666
    1924:	37 7f       	andi	r19, 0xF7	; 247
    1926:	30 93 66 06 	sts	0x0666, r19
    192a:	20 93 65 06 	sts	0x0665, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    192e:	40 98       	cbi	0x08, 0	; 8
    1930:	81 e1       	ldi	r24, 0x11	; 17
    1932:	8e bd       	out	0x2e, r24	; 46
    1934:	0d b4       	in	r0, 0x2d	; 45
    1936:	07 fe       	sbrs	r0, 7
    1938:	fd cf       	rjmp	.-6      	; 0x1934 <rf_addr_decode_disable+0x18>
    193a:	83 2f       	mov	r24, r19
    193c:	99 27       	eor	r25, r25
    193e:	8e bd       	out	0x2e, r24	; 46
    1940:	0d b4       	in	r0, 0x2d	; 45
    1942:	07 fe       	sbrs	r0, 7
    1944:	fd cf       	rjmp	.-6      	; 0x1940 <rf_addr_decode_disable+0x24>
    1946:	2e bd       	out	0x2e, r18	; 46
    1948:	0d b4       	in	r0, 0x2d	; 45
    194a:	07 fe       	sbrs	r0, 7
    194c:	fd cf       	rjmp	.-6      	; 0x1948 <rf_addr_decode_disable+0x2c>
    194e:	40 9a       	sbi	0x08, 0	; 8
    1950:	08 95       	ret

00001952 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
    auto_ack_enable=1;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	80 93 72 06 	sts	0x0672, r24
    mdmctrl0 |= 0x0010;
    1958:	20 91 65 06 	lds	r18, 0x0665
    195c:	30 91 66 06 	lds	r19, 0x0666
    1960:	20 61       	ori	r18, 0x10	; 16
    1962:	30 93 66 06 	sts	0x0666, r19
    1966:	20 93 65 06 	sts	0x0665, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
    196a:	40 98       	cbi	0x08, 0	; 8
    196c:	81 e1       	ldi	r24, 0x11	; 17
    196e:	8e bd       	out	0x2e, r24	; 46
    1970:	0d b4       	in	r0, 0x2d	; 45
    1972:	07 fe       	sbrs	r0, 7
    1974:	fd cf       	rjmp	.-6      	; 0x1970 <rf_auto_ack_enable+0x1e>
    1976:	83 2f       	mov	r24, r19
    1978:	99 27       	eor	r25, r25
    197a:	8e bd       	out	0x2e, r24	; 46
    197c:	0d b4       	in	r0, 0x2d	; 45
    197e:	07 fe       	sbrs	r0, 7
    1980:	fd cf       	rjmp	.-6      	; 0x197c <rf_auto_ack_enable+0x2a>
    1982:	2e bd       	out	0x2e, r18	; 46
    1984:	0d b4       	in	r0, 0x2d	; 45
    1986:	07 fe       	sbrs	r0, 7
    1988:	fd cf       	rjmp	.-6      	; 0x1984 <rf_auto_ack_enable+0x32>
    198a:	40 9a       	sbi	0x08, 0	; 8
    198c:	08 95       	ret

0000198e <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
    auto_ack_enable=0;
    198e:	10 92 72 06 	sts	0x0672, r1
    mdmctrl0 &= (~0x0010);
    1992:	20 91 65 06 	lds	r18, 0x0665
    1996:	30 91 66 06 	lds	r19, 0x0666
    199a:	2f 7e       	andi	r18, 0xEF	; 239
    199c:	30 93 66 06 	sts	0x0666, r19
    19a0:	20 93 65 06 	sts	0x0665, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
    19a4:	40 98       	cbi	0x08, 0	; 8
    19a6:	81 e1       	ldi	r24, 0x11	; 17
    19a8:	8e bd       	out	0x2e, r24	; 46
    19aa:	0d b4       	in	r0, 0x2d	; 45
    19ac:	07 fe       	sbrs	r0, 7
    19ae:	fd cf       	rjmp	.-6      	; 0x19aa <rf_auto_ack_disable+0x1c>
    19b0:	83 2f       	mov	r24, r19
    19b2:	99 27       	eor	r25, r25
    19b4:	8e bd       	out	0x2e, r24	; 46
    19b6:	0d b4       	in	r0, 0x2d	; 45
    19b8:	07 fe       	sbrs	r0, 7
    19ba:	fd cf       	rjmp	.-6      	; 0x19b6 <rf_auto_ack_disable+0x28>
    19bc:	2e bd       	out	0x2e, r18	; 46
    19be:	0d b4       	in	r0, 0x2d	; 45
    19c0:	07 fe       	sbrs	r0, 7
    19c2:	fd cf       	rjmp	.-6      	; 0x19be <rf_auto_ack_disable+0x30>
    19c4:	40 9a       	sbi	0x08, 0	; 8
    19c6:	08 95       	ret

000019c8 <rf_busy>:

}

uint8_t rf_busy()
{
return SFD_IS_1;
    19c8:	89 b1       	in	r24, 0x09	; 9
    19ca:	99 27       	eor	r25, r25
    19cc:	66 e0       	ldi	r22, 0x06	; 6
    19ce:	96 95       	lsr	r25
    19d0:	87 95       	ror	r24
    19d2:	6a 95       	dec	r22
    19d4:	e1 f7       	brne	.-8      	; 0x19ce <rf_busy+0x6>
}
    19d6:	81 70       	andi	r24, 0x01	; 1
    19d8:	90 70       	andi	r25, 0x00	; 0
    19da:	08 95       	ret

000019dc <rf_rx_check_fifop>:

uint8_t rf_rx_check_fifop()
{
return FIFOP_IS_1;
    19dc:	8c b1       	in	r24, 0x0c	; 12
    19de:	99 27       	eor	r25, r25
    19e0:	87 fd       	sbrc	r24, 7
    19e2:	90 95       	com	r25
}
    19e4:	88 27       	eor	r24, r24
    19e6:	99 0f       	add	r25, r25
    19e8:	88 1f       	adc	r24, r24
    19ea:	99 27       	eor	r25, r25
    19ec:	08 95       	ret

000019ee <rf_rx_check_sfd>:


uint8_t rf_rx_check_sfd()
{
return SFD_IS_1;
    19ee:	89 b1       	in	r24, 0x09	; 9
    19f0:	99 27       	eor	r25, r25
    19f2:	e6 e0       	ldi	r30, 0x06	; 6
    19f4:	96 95       	lsr	r25
    19f6:	87 95       	ror	r24
    19f8:	ea 95       	dec	r30
    19fa:	e1 f7       	brne	.-8      	; 0x19f4 <rf_rx_check_sfd+0x6>
}
    19fc:	81 70       	andi	r24, 0x01	; 1
    19fe:	90 70       	andi	r25, 0x00	; 0
    1a00:	08 95       	ret

00001a02 <rf_rx_packet>:
}

int8_t rf_rx_packet()
{
int8_t tmp;
if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
    1a02:	80 91 78 06 	lds	r24, 0x0678
    1a06:	88 23       	and	r24, r24
    1a08:	19 f4       	brne	.+6      	; 0x1a10 <rf_rx_packet+0xe>
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	08 95       	ret
    1a10:	80 91 78 06 	lds	r24, 0x0678
    1a14:	10 92 78 06 	sts	0x0678, r1
    1a18:	99 27       	eor	r25, r25
    1a1a:	87 fd       	sbrc	r24, 7
    1a1c:	90 95       	com	r25
return 0;
}
    1a1e:	08 95       	ret

00001a20 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    1a20:	40 98       	cbi	0x08, 0	; 8
    1a22:	88 e0       	ldi	r24, 0x08	; 8
    1a24:	8e bd       	out	0x2e, r24	; 46
    1a26:	0d b4       	in	r0, 0x2d	; 45
    1a28:	07 fe       	sbrs	r0, 7
    1a2a:	fd cf       	rjmp	.-6      	; 0x1a26 <rf_flush_rx_fifo+0x6>
    1a2c:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    1a2e:	40 98       	cbi	0x08, 0	; 8
    1a30:	88 e0       	ldi	r24, 0x08	; 8
    1a32:	8e bd       	out	0x2e, r24	; 46
    1a34:	0d b4       	in	r0, 0x2d	; 45
    1a36:	07 fe       	sbrs	r0, 7
    1a38:	fd cf       	rjmp	.-6      	; 0x1a34 <rf_flush_rx_fifo+0x14>
    1a3a:	40 9a       	sbi	0x08, 0	; 8
    1a3c:	08 95       	ret

00001a3e <rf_carrier_off>:
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1a3e:	80 91 62 06 	lds	r24, 0x0662
    1a42:	90 91 63 06 	lds	r25, 0x0663
    1a46:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); // stop radio
    1a4a:	40 98       	cbi	0x08, 0	; 8
    1a4c:	86 e0       	ldi	r24, 0x06	; 6
    1a4e:	8e bd       	out	0x2e, r24	; 46
    1a50:	0d b4       	in	r0, 0x2d	; 45
    1a52:	07 fe       	sbrs	r0, 7
    1a54:	fd cf       	rjmp	.-6      	; 0x1a50 <rf_carrier_off+0x12>
    1a56:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    1a58:	80 91 62 06 	lds	r24, 0x0662
    1a5c:	90 91 63 06 	lds	r25, 0x0663
    1a60:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    1a64:	08 95       	ret

00001a66 <rf_carrier_on>:
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1a66:	80 91 62 06 	lds	r24, 0x0662
    1a6a:	90 91 63 06 	lds	r25, 0x0663
    1a6e:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_STXON); // tell radio to start sending
    1a72:	40 98       	cbi	0x08, 0	; 8
    1a74:	84 e0       	ldi	r24, 0x04	; 4
    1a76:	8e bd       	out	0x2e, r24	; 46
    1a78:	0d b4       	in	r0, 0x2d	; 45
    1a7a:	07 fe       	sbrs	r0, 7
    1a7c:	fd cf       	rjmp	.-6      	; 0x1a78 <rf_carrier_on+0x12>
    1a7e:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    1a80:	80 91 62 06 	lds	r24, 0x0662
    1a84:	90 91 63 06 	lds	r25, 0x0663
    1a88:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    1a8c:	08 95       	ret

00001a8e <rf_data_mode>:

/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode() {
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1a8e:	80 91 62 06 	lds	r24, 0x0662
    1a92:	90 91 63 06 	lds	r25, 0x0663
    1a96:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    1a9a:	40 98       	cbi	0x08, 0	; 8
    1a9c:	86 e0       	ldi	r24, 0x06	; 6
    1a9e:	8e bd       	out	0x2e, r24	; 46
    1aa0:	0d b4       	in	r0, 0x2d	; 45
    1aa2:	07 fe       	sbrs	r0, 7
    1aa4:	fd cf       	rjmp	.-6      	; 0x1aa0 <rf_data_mode+0x12>
    1aa6:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // default MDMCTRL1 value
    1aa8:	40 98       	cbi	0x08, 0	; 8
    1aaa:	82 e1       	ldi	r24, 0x12	; 18
    1aac:	8e bd       	out	0x2e, r24	; 46
    1aae:	0d b4       	in	r0, 0x2d	; 45
    1ab0:	07 fe       	sbrs	r0, 7
    1ab2:	fd cf       	rjmp	.-6      	; 0x1aae <rf_data_mode+0x20>
    1ab4:	85 e0       	ldi	r24, 0x05	; 5
    1ab6:	8e bd       	out	0x2e, r24	; 46
    1ab8:	0d b4       	in	r0, 0x2d	; 45
    1aba:	07 fe       	sbrs	r0, 7
    1abc:	fd cf       	rjmp	.-6      	; 0x1ab8 <rf_data_mode+0x2a>
    1abe:	1e bc       	out	0x2e, r1	; 46
    1ac0:	0d b4       	in	r0, 0x2d	; 45
    1ac2:	07 fe       	sbrs	r0, 7
    1ac4:	fd cf       	rjmp	.-6      	; 0x1ac0 <rf_data_mode+0x32>
    1ac6:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_DACTST, 0); // default value
    1ac8:	40 98       	cbi	0x08, 0	; 8
    1aca:	8e e2       	ldi	r24, 0x2E	; 46
    1acc:	8e bd       	out	0x2e, r24	; 46
    1ace:	0d b4       	in	r0, 0x2d	; 45
    1ad0:	07 fe       	sbrs	r0, 7
    1ad2:	fd cf       	rjmp	.-6      	; 0x1ace <rf_data_mode+0x40>
    1ad4:	1e bc       	out	0x2e, r1	; 46
    1ad6:	0d b4       	in	r0, 0x2d	; 45
    1ad8:	07 fe       	sbrs	r0, 7
    1ada:	fd cf       	rjmp	.-6      	; 0x1ad6 <rf_data_mode+0x48>
    1adc:	1e bc       	out	0x2e, r1	; 46
    1ade:	0d b4       	in	r0, 0x2d	; 45
    1ae0:	07 fe       	sbrs	r0, 7
    1ae2:	fd cf       	rjmp	.-6      	; 0x1ade <rf_data_mode+0x50>
    1ae4:	40 9a       	sbi	0x08, 0	; 8
        rf_flush_rx_fifo();
    1ae6:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <rf_flush_rx_fifo>
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    1aea:	80 91 62 06 	lds	r24, 0x0662
    1aee:	90 91 63 06 	lds	r25, 0x0663
    1af2:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    1af6:	08 95       	ret

00001af8 <rf_test_mode>:

void rf_test_mode()
{

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1af8:	80 91 62 06 	lds	r24, 0x0662
    1afc:	90 91 63 06 	lds	r25, 0x0663
    1b00:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    1b04:	40 98       	cbi	0x08, 0	; 8
    1b06:	86 e0       	ldi	r24, 0x06	; 6
    1b08:	8e bd       	out	0x2e, r24	; 46
    1b0a:	0d b4       	in	r0, 0x2d	; 45
    1b0c:	07 fe       	sbrs	r0, 7
    1b0e:	fd cf       	rjmp	.-6      	; 0x1b0a <rf_test_mode+0x12>
    1b10:	40 9a       	sbi	0x08, 0	; 8
	// RF studio" uses TX_MODE=3 (CC2420_MDMCTRL1=0x050C)
	// to send an unmodulated carrier; data sheet says TX_MODE 
	// can be 2 or 3. So it should not matter...
	// HOWEVER, using (TX_MODE=3) sometimes causes problems when 
	// going back to "data" mode!
	FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0508); // MDMCTRL1 with TX_MODE=2
    1b12:	40 98       	cbi	0x08, 0	; 8
    1b14:	82 e1       	ldi	r24, 0x12	; 18
    1b16:	8e bd       	out	0x2e, r24	; 46
    1b18:	0d b4       	in	r0, 0x2d	; 45
    1b1a:	07 fe       	sbrs	r0, 7
    1b1c:	fd cf       	rjmp	.-6      	; 0x1b18 <rf_test_mode+0x20>
    1b1e:	85 e0       	ldi	r24, 0x05	; 5
    1b20:	8e bd       	out	0x2e, r24	; 46
    1b22:	0d b4       	in	r0, 0x2d	; 45
    1b24:	07 fe       	sbrs	r0, 7
    1b26:	fd cf       	rjmp	.-6      	; 0x1b22 <rf_test_mode+0x2a>
    1b28:	88 e0       	ldi	r24, 0x08	; 8
    1b2a:	8e bd       	out	0x2e, r24	; 46
    1b2c:	0d b4       	in	r0, 0x2d	; 45
    1b2e:	07 fe       	sbrs	r0, 7
    1b30:	fd cf       	rjmp	.-6      	; 0x1b2c <rf_test_mode+0x34>
    1b32:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_SETREG(CC2420_DACTST, 0x1800); // send unmodulated carrier
    1b34:	40 98       	cbi	0x08, 0	; 8
    1b36:	8e e2       	ldi	r24, 0x2E	; 46
    1b38:	8e bd       	out	0x2e, r24	; 46
    1b3a:	0d b4       	in	r0, 0x2d	; 45
    1b3c:	07 fe       	sbrs	r0, 7
    1b3e:	fd cf       	rjmp	.-6      	; 0x1b3a <rf_test_mode+0x42>
    1b40:	88 e1       	ldi	r24, 0x18	; 24
    1b42:	8e bd       	out	0x2e, r24	; 46
    1b44:	0d b4       	in	r0, 0x2d	; 45
    1b46:	07 fe       	sbrs	r0, 7
    1b48:	fd cf       	rjmp	.-6      	; 0x1b44 <rf_test_mode+0x4c>
    1b4a:	1e bc       	out	0x2e, r1	; 46
    1b4c:	0d b4       	in	r0, 0x2d	; 45
    1b4e:	07 fe       	sbrs	r0, 7
    1b50:	fd cf       	rjmp	.-6      	; 0x1b4c <rf_test_mode+0x54>
    1b52:	40 9a       	sbi	0x08, 0	; 8
	rf_flush_rx_fifo();
    1b54:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <rf_flush_rx_fifo>

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    1b58:	80 91 62 06 	lds	r24, 0x0662
    1b5c:	90 91 63 06 	lds	r25, 0x0663
    1b60:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    1b64:	08 95       	ret

00001b66 <rf_set_cca_thresh>:
        FASTSPI_STROBE(CC2420_SFLUSHRX);
        FASTSPI_STROBE(CC2420_SFLUSHRX);
}

void rf_set_cca_thresh(int8_t t)
{
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	08 2f       	mov	r16, r24
// default is -32
// Higher number is less sensitive
uint16_t val;
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1b6c:	80 91 62 06 	lds	r24, 0x0662
    1b70:	90 91 63 06 	lds	r25, 0x0663
    1b74:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
#endif

val=(t<<8) | 0x80;
    1b78:	11 27       	eor	r17, r17
    1b7a:	07 fd       	sbrc	r16, 7
    1b7c:	10 95       	com	r17
    1b7e:	30 2f       	mov	r19, r16
    1b80:	22 27       	eor	r18, r18
    1b82:	20 68       	ori	r18, 0x80	; 128
FASTSPI_SETREG(CC2420_RSSI, val); 
    1b84:	40 98       	cbi	0x08, 0	; 8
    1b86:	83 e1       	ldi	r24, 0x13	; 19
    1b88:	8e bd       	out	0x2e, r24	; 46
    1b8a:	0d b4       	in	r0, 0x2d	; 45
    1b8c:	07 fe       	sbrs	r0, 7
    1b8e:	fd cf       	rjmp	.-6      	; 0x1b8a <rf_set_cca_thresh+0x24>
    1b90:	83 2f       	mov	r24, r19
    1b92:	99 27       	eor	r25, r25
    1b94:	8e bd       	out	0x2e, r24	; 46
    1b96:	0d b4       	in	r0, 0x2d	; 45
    1b98:	07 fe       	sbrs	r0, 7
    1b9a:	fd cf       	rjmp	.-6      	; 0x1b96 <rf_set_cca_thresh+0x30>
    1b9c:	2e bd       	out	0x2e, r18	; 46
    1b9e:	0d b4       	in	r0, 0x2d	; 45
    1ba0:	07 fe       	sbrs	r0, 7
    1ba2:	fd cf       	rjmp	.-6      	; 0x1b9e <rf_set_cca_thresh+0x38>
    1ba4:	40 9a       	sbi	0x08, 0	; 8

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    1ba6:	80 91 62 06 	lds	r24, 0x0662
    1baa:	90 91 63 06 	lds	r25, 0x0663
    1bae:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    1bb2:	1f 91       	pop	r17
    1bb4:	0f 91       	pop	r16
    1bb6:	08 95       	ret

00001bb8 <rf_polling_rx_packet>:
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet()
{
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	24 97       	sbiw	r28, 0x04	; 4
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
uint8_t tmp;
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1bcc:	80 91 62 06 	lds	r24, 0x0662
    1bd0:	90 91 63 06 	lds	r25, 0x0663
    1bd4:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
#endif

    if(FIFOP_IS_1 )
    1bd8:	67 9b       	sbis	0x0c, 7	; 12
    1bda:	34 c2       	rjmp	.+1128   	; 0x2044 <rf_polling_rx_packet+0x48c>
	uint16_t frameControlField;
	int8_t length;
	uint8_t pFooter[2];
	uint8_t checksum,rx_checksum,i;
			
	last_pkt_encrypted=0;
    1bdc:	10 92 73 06 	sts	0x0673, r1
    
//	while(!SFD_IS_1);
//  XXX Need to make sure SFD has gone down to be sure packet finished!
//	while(SFD_IS_1);
    // Clean up and exit in case of FIFO overflow, which is indicated by FIFOP = 1 and FIFO = 0
	if((FIFOP_IS_1) && (!(FIFO_IS_1))) {	   
    1be0:	67 9b       	sbis	0x0c, 7	; 12
    1be2:	25 c0       	rjmp	.+74     	; 0x1c2e <rf_polling_rx_packet+0x76>
    1be4:	31 99       	sbic	0x06, 1	; 6
    1be6:	23 c0       	rjmp	.+70     	; 0x1c2e <rf_polling_rx_packet+0x76>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    1be8:	40 98       	cbi	0x08, 0	; 8
    1bea:	8f e7       	ldi	r24, 0x7F	; 127
    1bec:	8e bd       	out	0x2e, r24	; 46
    1bee:	0d b4       	in	r0, 0x2d	; 45
    1bf0:	07 fe       	sbrs	r0, 7
    1bf2:	fd cf       	rjmp	.-6      	; 0x1bee <rf_polling_rx_packet+0x36>
    1bf4:	1e bc       	out	0x2e, r1	; 46
    1bf6:	0d b4       	in	r0, 0x2d	; 45
    1bf8:	07 fe       	sbrs	r0, 7
    1bfa:	fd cf       	rjmp	.-6      	; 0x1bf6 <rf_polling_rx_packet+0x3e>
    1bfc:	8e b5       	in	r24, 0x2e	; 46
    1bfe:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1c00:	40 98       	cbi	0x08, 0	; 8
    1c02:	88 e0       	ldi	r24, 0x08	; 8
    1c04:	8e bd       	out	0x2e, r24	; 46
    1c06:	0d b4       	in	r0, 0x2d	; 45
    1c08:	07 fe       	sbrs	r0, 7
    1c0a:	fd cf       	rjmp	.-6      	; 0x1c06 <rf_polling_rx_packet+0x4e>
    1c0c:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1c0e:	40 98       	cbi	0x08, 0	; 8
    1c10:	88 e0       	ldi	r24, 0x08	; 8
    1c12:	8e bd       	out	0x2e, r24	; 46
    1c14:	0d b4       	in	r0, 0x2d	; 45
    1c16:	07 fe       	sbrs	r0, 7
    1c18:	fd cf       	rjmp	.-6      	; 0x1c14 <rf_polling_rx_packet+0x5c>
    1c1a:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    1c1c:	80 91 62 06 	lds	r24, 0x0662
    1c20:	90 91 63 06 	lds	r25, 0x0663
    1c24:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    1c28:	8f ef       	ldi	r24, 0xFF	; 255
    1c2a:	9f ef       	ldi	r25, 0xFF	; 255
    1c2c:	13 c2       	rjmp	.+1062   	; 0x2054 <rf_polling_rx_packet+0x49c>
#endif
	    return -1;
	}

	// Payload length
	FASTSPI_READ_FIFO_BYTE(length);
    1c2e:	40 98       	cbi	0x08, 0	; 8
    1c30:	8f e7       	ldi	r24, 0x7F	; 127
    1c32:	8e bd       	out	0x2e, r24	; 46
    1c34:	0d b4       	in	r0, 0x2d	; 45
    1c36:	07 fe       	sbrs	r0, 7
    1c38:	fd cf       	rjmp	.-6      	; 0x1c34 <rf_polling_rx_packet+0x7c>
    1c3a:	1e bc       	out	0x2e, r1	; 46
    1c3c:	0d b4       	in	r0, 0x2d	; 45
    1c3e:	07 fe       	sbrs	r0, 7
    1c40:	fd cf       	rjmp	.-6      	; 0x1c3c <rf_polling_rx_packet+0x84>
    1c42:	4e b5       	in	r20, 0x2e	; 46
    1c44:	40 9a       	sbi	0x08, 0	; 8
	length &= RF_LENGTH_MASK; // Ignore MSB
    1c46:	4f 77       	andi	r20, 0x7F	; 127
    // Ignore the packet if the length is too short
    if(length==0){  
    1c48:	19 f5       	brne	.+70     	; 0x1c90 <rf_polling_rx_packet+0xd8>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    1c4a:	40 98       	cbi	0x08, 0	; 8
    1c4c:	8f e7       	ldi	r24, 0x7F	; 127
    1c4e:	8e bd       	out	0x2e, r24	; 46
    1c50:	0d b4       	in	r0, 0x2d	; 45
    1c52:	07 fe       	sbrs	r0, 7
    1c54:	fd cf       	rjmp	.-6      	; 0x1c50 <rf_polling_rx_packet+0x98>
    1c56:	1e bc       	out	0x2e, r1	; 46
    1c58:	0d b4       	in	r0, 0x2d	; 45
    1c5a:	07 fe       	sbrs	r0, 7
    1c5c:	fd cf       	rjmp	.-6      	; 0x1c58 <rf_polling_rx_packet+0xa0>
    1c5e:	8e b5       	in	r24, 0x2e	; 46
    1c60:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1c62:	40 98       	cbi	0x08, 0	; 8
    1c64:	88 e0       	ldi	r24, 0x08	; 8
    1c66:	8e bd       	out	0x2e, r24	; 46
    1c68:	0d b4       	in	r0, 0x2d	; 45
    1c6a:	07 fe       	sbrs	r0, 7
    1c6c:	fd cf       	rjmp	.-6      	; 0x1c68 <rf_polling_rx_packet+0xb0>
    1c6e:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1c70:	40 98       	cbi	0x08, 0	; 8
    1c72:	88 e0       	ldi	r24, 0x08	; 8
    1c74:	8e bd       	out	0x2e, r24	; 46
    1c76:	0d b4       	in	r0, 0x2d	; 45
    1c78:	07 fe       	sbrs	r0, 7
    1c7a:	fd cf       	rjmp	.-6      	; 0x1c76 <rf_polling_rx_packet+0xbe>
    1c7c:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    1c7e:	80 91 62 06 	lds	r24, 0x0662
    1c82:	90 91 63 06 	lds	r25, 0x0663
    1c86:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    1c8a:	8e ef       	ldi	r24, 0xFE	; 254
    1c8c:	9f ef       	ldi	r25, 0xFF	; 255
    1c8e:	e2 c1       	rjmp	.+964    	; 0x2054 <rf_polling_rx_packet+0x49c>
#endif
	return -2;
	}
    if (length < RF_ACK_PACKET_SIZE || (length-RF_PACKET_OVERHEAD_SIZE)> rfSettings.pRxInfo->max_length) {
    1c90:	45 30       	cpi	r20, 0x05	; 5
    1c92:	8c f0       	brlt	.+34     	; 0x1cb6 <rf_polling_rx_packet+0xfe>
    1c94:	e0 91 67 06 	lds	r30, 0x0667
    1c98:	f0 91 68 06 	lds	r31, 0x0668
    1c9c:	24 2f       	mov	r18, r20
    1c9e:	33 27       	eor	r19, r19
    1ca0:	27 fd       	sbrc	r18, 7
    1ca2:	30 95       	com	r19
    1ca4:	2b 50       	subi	r18, 0x0B	; 11
    1ca6:	30 40       	sbci	r19, 0x00	; 0
    1ca8:	84 81       	ldd	r24, Z+4	; 0x04
    1caa:	99 27       	eor	r25, r25
    1cac:	87 fd       	sbrc	r24, 7
    1cae:	90 95       	com	r25
    1cb0:	82 17       	cp	r24, r18
    1cb2:	93 07       	cpc	r25, r19
    1cb4:	f4 f5       	brge	.+124    	; 0x1d32 <rf_polling_rx_packet+0x17a>
    	FASTSPI_READ_FIFO_GARBAGE(length);
    1cb6:	40 98       	cbi	0x08, 0	; 8
    1cb8:	8f e7       	ldi	r24, 0x7F	; 127
    1cba:	8e bd       	out	0x2e, r24	; 46
    1cbc:	0d b4       	in	r0, 0x2d	; 45
    1cbe:	07 fe       	sbrs	r0, 7
    1cc0:	fd cf       	rjmp	.-6      	; 0x1cbc <rf_polling_rx_packet+0x104>
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	24 2f       	mov	r18, r20
    1cc8:	33 27       	eor	r19, r19
    1cca:	27 fd       	sbrc	r18, 7
    1ccc:	30 95       	com	r19
    1cce:	06 c0       	rjmp	.+12     	; 0x1cdc <rf_polling_rx_packet+0x124>
    1cd0:	1e bc       	out	0x2e, r1	; 46
    1cd2:	0d b4       	in	r0, 0x2d	; 45
    1cd4:	07 fe       	sbrs	r0, 7
    1cd6:	fd cf       	rjmp	.-6      	; 0x1cd2 <rf_polling_rx_packet+0x11a>
    1cd8:	6f 5f       	subi	r22, 0xFF	; 255
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255
    1cdc:	86 2f       	mov	r24, r22
    1cde:	99 27       	eor	r25, r25
    1ce0:	82 17       	cp	r24, r18
    1ce2:	93 07       	cpc	r25, r19
    1ce4:	14 f4       	brge	.+4      	; 0x1cea <rf_polling_rx_packet+0x132>
    1ce6:	31 99       	sbic	0x06, 1	; 6
    1ce8:	f3 cf       	rjmp	.-26     	; 0x1cd0 <rf_polling_rx_packet+0x118>
    1cea:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    1cec:	40 98       	cbi	0x08, 0	; 8
    1cee:	8f e7       	ldi	r24, 0x7F	; 127
    1cf0:	8e bd       	out	0x2e, r24	; 46
    1cf2:	0d b4       	in	r0, 0x2d	; 45
    1cf4:	07 fe       	sbrs	r0, 7
    1cf6:	fd cf       	rjmp	.-6      	; 0x1cf2 <rf_polling_rx_packet+0x13a>
    1cf8:	1e bc       	out	0x2e, r1	; 46
    1cfa:	0d b4       	in	r0, 0x2d	; 45
    1cfc:	07 fe       	sbrs	r0, 7
    1cfe:	fd cf       	rjmp	.-6      	; 0x1cfa <rf_polling_rx_packet+0x142>
    1d00:	8e b5       	in	r24, 0x2e	; 46
    1d02:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1d04:	40 98       	cbi	0x08, 0	; 8
    1d06:	88 e0       	ldi	r24, 0x08	; 8
    1d08:	8e bd       	out	0x2e, r24	; 46
    1d0a:	0d b4       	in	r0, 0x2d	; 45
    1d0c:	07 fe       	sbrs	r0, 7
    1d0e:	fd cf       	rjmp	.-6      	; 0x1d0a <rf_polling_rx_packet+0x152>
    1d10:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1d12:	40 98       	cbi	0x08, 0	; 8
    1d14:	88 e0       	ldi	r24, 0x08	; 8
    1d16:	8e bd       	out	0x2e, r24	; 46
    1d18:	0d b4       	in	r0, 0x2d	; 45
    1d1a:	07 fe       	sbrs	r0, 7
    1d1c:	fd cf       	rjmp	.-6      	; 0x1d18 <rf_polling_rx_packet+0x160>
    1d1e:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    1d20:	80 91 62 06 	lds	r24, 0x0662
    1d24:	90 91 63 06 	lds	r25, 0x0663
    1d28:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    1d2c:	8d ef       	ldi	r24, 0xFD	; 253
    1d2e:	9f ef       	ldi	r25, 0xFF	; 255
    1d30:	91 c1       	rjmp	.+802    	; 0x2054 <rf_polling_rx_packet+0x49c>
	return -3;
	//printf_u( "Bad length: %d %d\n",length, rfSettings.pRxInfo->max_length );
    // Otherwise, if the length is valid, then proceed with the rest of the packet
    } else {
        // Register the payload length
        rfSettings.pRxInfo->length = length - RF_PACKET_OVERHEAD_SIZE - CHECKSUM_OVERHEAD;
    1d32:	e0 91 67 06 	lds	r30, 0x0667
    1d36:	f0 91 68 06 	lds	r31, 0x0668
    1d3a:	4c 50       	subi	r20, 0x0C	; 12
    1d3c:	43 83       	std	Z+3, r20	; 0x03
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
    1d3e:	40 98       	cbi	0x08, 0	; 8
    1d40:	8f e7       	ldi	r24, 0x7F	; 127
    1d42:	8e bd       	out	0x2e, r24	; 46
    1d44:	0d b4       	in	r0, 0x2d	; 45
    1d46:	07 fe       	sbrs	r0, 7
    1d48:	fd cf       	rjmp	.-6      	; 0x1d44 <rf_polling_rx_packet+0x18c>
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	31 96       	adiw	r30, 0x01	; 1
    1d4e:	9e 01       	movw	r18, r28
    1d50:	2d 5f       	subi	r18, 0xFD	; 253
    1d52:	3f 4f       	sbci	r19, 0xFF	; 255
    1d54:	1e bc       	out	0x2e, r1	; 46
    1d56:	0d b4       	in	r0, 0x2d	; 45
    1d58:	07 fe       	sbrs	r0, 7
    1d5a:	fd cf       	rjmp	.-6      	; 0x1d56 <rf_polling_rx_packet+0x19e>
    1d5c:	8e b5       	in	r24, 0x2e	; 46
    1d5e:	81 93       	st	Z+, r24
    1d60:	e2 17       	cp	r30, r18
    1d62:	f3 07       	cpc	r31, r19
    1d64:	b9 f7       	brne	.-18     	; 0x1d54 <rf_polling_rx_packet+0x19c>
    1d66:	40 9a       	sbi	0x08, 0	; 8
        rfSettings.pRxInfo->ackRequest = !!(frameControlField & RF_FCF_ACK_BM);
    1d68:	e0 91 67 06 	lds	r30, 0x0667
    1d6c:	f0 91 68 06 	lds	r31, 0x0668
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	9a 81       	ldd	r25, Y+2	; 0x02
    1d74:	b5 e0       	ldi	r27, 0x05	; 5
    1d76:	96 95       	lsr	r25
    1d78:	87 95       	ror	r24
    1d7a:	ba 95       	dec	r27
    1d7c:	e1 f7       	brne	.-8      	; 0x1d76 <rf_polling_rx_packet+0x1be>
    1d7e:	81 70       	andi	r24, 0x01	; 1
    1d80:	87 83       	std	Z+7, r24	; 0x07
    	FASTSPI_READ_FIFO_BYTE(rfSettings.pRxInfo->seqNumber);
    1d82:	40 98       	cbi	0x08, 0	; 8
    1d84:	8f e7       	ldi	r24, 0x7F	; 127
    1d86:	8e bd       	out	0x2e, r24	; 46
    1d88:	0d b4       	in	r0, 0x2d	; 45
    1d8a:	07 fe       	sbrs	r0, 7
    1d8c:	fd cf       	rjmp	.-6      	; 0x1d88 <rf_polling_rx_packet+0x1d0>
    1d8e:	1e bc       	out	0x2e, r1	; 46
    1d90:	0d b4       	in	r0, 0x2d	; 45
    1d92:	07 fe       	sbrs	r0, 7
    1d94:	fd cf       	rjmp	.-6      	; 0x1d90 <rf_polling_rx_packet+0x1d8>
    1d96:	e0 91 67 06 	lds	r30, 0x0667
    1d9a:	f0 91 68 06 	lds	r31, 0x0668
    1d9e:	8e b5       	in	r24, 0x2e	; 46
    1da0:	80 83       	st	Z, r24
    1da2:	40 9a       	sbi	0x08, 0	; 8

		// Receive the rest of the packet
		} else {
*/
			// Skip the destination PAN and address (that's taken care of by harware address recognition!)
		FASTSPI_READ_FIFO_GARBAGE(4);
    1da4:	40 98       	cbi	0x08, 0	; 8
    1da6:	8f e7       	ldi	r24, 0x7F	; 127
    1da8:	8e bd       	out	0x2e, r24	; 46
    1daa:	0d b4       	in	r0, 0x2d	; 45
    1dac:	07 fe       	sbrs	r0, 7
    1dae:	fd cf       	rjmp	.-6      	; 0x1daa <rf_polling_rx_packet+0x1f2>
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	07 c0       	rjmp	.+14     	; 0x1dc2 <rf_polling_rx_packet+0x20a>
    1db4:	1e bc       	out	0x2e, r1	; 46
    1db6:	0d b4       	in	r0, 0x2d	; 45
    1db8:	07 fe       	sbrs	r0, 7
    1dba:	fd cf       	rjmp	.-6      	; 0x1db6 <rf_polling_rx_packet+0x1fe>
    1dbc:	8f 5f       	subi	r24, 0xFF	; 255
    1dbe:	84 30       	cpi	r24, 0x04	; 4
    1dc0:	11 f0       	breq	.+4      	; 0x1dc6 <rf_polling_rx_packet+0x20e>
    1dc2:	31 99       	sbic	0x06, 1	; 6
    1dc4:	f7 cf       	rjmp	.-18     	; 0x1db4 <rf_polling_rx_packet+0x1fc>
    1dc6:	40 9a       	sbi	0x08, 0	; 8

			// Read the source address
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rfSettings.pRxInfo->srcAddr, 2);
    1dc8:	40 98       	cbi	0x08, 0	; 8
    1dca:	8f e7       	ldi	r24, 0x7F	; 127
    1dcc:	8e bd       	out	0x2e, r24	; 46
    1dce:	0d b4       	in	r0, 0x2d	; 45
    1dd0:	07 fe       	sbrs	r0, 7
    1dd2:	fd cf       	rjmp	.-6      	; 0x1dce <rf_polling_rx_packet+0x216>
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	1e bc       	out	0x2e, r1	; 46
    1dda:	0d b4       	in	r0, 0x2d	; 45
    1ddc:	07 fe       	sbrs	r0, 7
    1dde:	fd cf       	rjmp	.-6      	; 0x1dda <rf_polling_rx_packet+0x222>
    1de0:	e0 91 67 06 	lds	r30, 0x0667
    1de4:	f0 91 68 06 	lds	r31, 0x0668
    1de8:	e2 0f       	add	r30, r18
    1dea:	f3 1f       	adc	r31, r19
    1dec:	8e b5       	in	r24, 0x2e	; 46
    1dee:	81 83       	std	Z+1, r24	; 0x01
    1df0:	2f 5f       	subi	r18, 0xFF	; 255
    1df2:	3f 4f       	sbci	r19, 0xFF	; 255
    1df4:	22 30       	cpi	r18, 0x02	; 2
    1df6:	31 05       	cpc	r19, r1
    1df8:	79 f7       	brne	.-34     	; 0x1dd8 <rf_polling_rx_packet+0x220>
    1dfa:	40 9a       	sbi	0x08, 0	; 8

		        if(frameControlField & RF_SEC_BM)
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1e00:	83 ff       	sbrs	r24, 3
    1e02:	56 c0       	rjmp	.+172    	; 0x1eb0 <rf_polling_rx_packet+0x2f8>
			{
				uint8_t n;
				// READ rx_ctr and set it
				FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rx_ctr, 4);
    1e04:	40 98       	cbi	0x08, 0	; 8
    1e06:	8f e7       	ldi	r24, 0x7F	; 127
    1e08:	8e bd       	out	0x2e, r24	; 46
    1e0a:	0d b4       	in	r0, 0x2d	; 45
    1e0c:	07 fe       	sbrs	r0, 7
    1e0e:	fd cf       	rjmp	.-6      	; 0x1e0a <rf_polling_rx_packet+0x252>
    1e10:	ee e5       	ldi	r30, 0x5E	; 94
    1e12:	f6 e0       	ldi	r31, 0x06	; 6
    1e14:	1e bc       	out	0x2e, r1	; 46
    1e16:	0d b4       	in	r0, 0x2d	; 45
    1e18:	07 fe       	sbrs	r0, 7
    1e1a:	fd cf       	rjmp	.-6      	; 0x1e16 <rf_polling_rx_packet+0x25e>
    1e1c:	8e b5       	in	r24, 0x2e	; 46
    1e1e:	81 93       	st	Z+, r24
    1e20:	86 e0       	ldi	r24, 0x06	; 6
    1e22:	e2 36       	cpi	r30, 0x62	; 98
    1e24:	f8 07       	cpc	r31, r24
    1e26:	b1 f7       	brne	.-20     	; 0x1e14 <rf_polling_rx_packet+0x25c>
    1e28:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[0],(CC2420RAM_RXNONCE+9),2,n); 
    1e2a:	40 98       	cbi	0x08, 0	; 8
    1e2c:	89 e9       	ldi	r24, 0x99	; 153
    1e2e:	8e bd       	out	0x2e, r24	; 46
    1e30:	0d b4       	in	r0, 0x2d	; 45
    1e32:	07 fe       	sbrs	r0, 7
    1e34:	fd cf       	rjmp	.-6      	; 0x1e30 <rf_polling_rx_packet+0x278>
    1e36:	80 e8       	ldi	r24, 0x80	; 128
    1e38:	8e bd       	out	0x2e, r24	; 46
    1e3a:	0d b4       	in	r0, 0x2d	; 45
    1e3c:	07 fe       	sbrs	r0, 7
    1e3e:	fd cf       	rjmp	.-6      	; 0x1e3a <rf_polling_rx_packet+0x282>
    1e40:	92 e0       	ldi	r25, 0x02	; 2
    1e42:	91 50       	subi	r25, 0x01	; 1
    1e44:	e9 2f       	mov	r30, r25
    1e46:	ff 27       	eor	r31, r31
    1e48:	e2 5a       	subi	r30, 0xA2	; 162
    1e4a:	f9 4f       	sbci	r31, 0xF9	; 249
    1e4c:	80 81       	ld	r24, Z
    1e4e:	8e bd       	out	0x2e, r24	; 46
    1e50:	0d b4       	in	r0, 0x2d	; 45
    1e52:	07 fe       	sbrs	r0, 7
    1e54:	fd cf       	rjmp	.-6      	; 0x1e50 <rf_polling_rx_packet+0x298>
    1e56:	99 23       	and	r25, r25
    1e58:	a1 f7       	brne	.-24     	; 0x1e42 <rf_polling_rx_packet+0x28a>
    1e5a:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[2],(CC2420RAM_RXNONCE+11),2,n); 
    1e5c:	40 98       	cbi	0x08, 0	; 8
    1e5e:	8b e9       	ldi	r24, 0x9B	; 155
    1e60:	8e bd       	out	0x2e, r24	; 46
    1e62:	0d b4       	in	r0, 0x2d	; 45
    1e64:	07 fe       	sbrs	r0, 7
    1e66:	fd cf       	rjmp	.-6      	; 0x1e62 <rf_polling_rx_packet+0x2aa>
    1e68:	80 e8       	ldi	r24, 0x80	; 128
    1e6a:	8e bd       	out	0x2e, r24	; 46
    1e6c:	0d b4       	in	r0, 0x2d	; 45
    1e6e:	07 fe       	sbrs	r0, 7
    1e70:	fd cf       	rjmp	.-6      	; 0x1e6c <rf_polling_rx_packet+0x2b4>
    1e72:	92 e0       	ldi	r25, 0x02	; 2
    1e74:	91 50       	subi	r25, 0x01	; 1
    1e76:	e9 2f       	mov	r30, r25
    1e78:	ff 27       	eor	r31, r31
    1e7a:	e0 5a       	subi	r30, 0xA0	; 160
    1e7c:	f9 4f       	sbci	r31, 0xF9	; 249
    1e7e:	80 81       	ld	r24, Z
    1e80:	8e bd       	out	0x2e, r24	; 46
    1e82:	0d b4       	in	r0, 0x2d	; 45
    1e84:	07 fe       	sbrs	r0, 7
    1e86:	fd cf       	rjmp	.-6      	; 0x1e82 <rf_polling_rx_packet+0x2ca>
    1e88:	99 23       	and	r25, r25
    1e8a:	a1 f7       	brne	.-24     	; 0x1e74 <rf_polling_rx_packet+0x2bc>
    1e8c:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_STROBE(CC2420_SRXDEC);  // if packet is encrypted then decrypt 
    1e8e:	40 98       	cbi	0x08, 0	; 8
    1e90:	8c e0       	ldi	r24, 0x0C	; 12
    1e92:	8e bd       	out	0x2e, r24	; 46
    1e94:	0d b4       	in	r0, 0x2d	; 45
    1e96:	07 fe       	sbrs	r0, 7
    1e98:	fd cf       	rjmp	.-6      	; 0x1e94 <rf_polling_rx_packet+0x2dc>
    1e9a:	40 9a       	sbi	0x08, 0	; 8
				last_pkt_encrypted=1;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	80 93 73 06 	sts	0x0673, r24
        			rfSettings.pRxInfo->length -= 4;
    1ea2:	e0 91 67 06 	lds	r30, 0x0667
    1ea6:	f0 91 68 06 	lds	r31, 0x0668
    1eaa:	83 81       	ldd	r24, Z+3	; 0x03
    1eac:	84 50       	subi	r24, 0x04	; 4
    1eae:	83 83       	std	Z+3, r24	; 0x03
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
    1eb0:	40 98       	cbi	0x08, 0	; 8
    1eb2:	8f e7       	ldi	r24, 0x7F	; 127
    1eb4:	8e bd       	out	0x2e, r24	; 46
    1eb6:	0d b4       	in	r0, 0x2d	; 45
    1eb8:	07 fe       	sbrs	r0, 7
    1eba:	fd cf       	rjmp	.-6      	; 0x1eb6 <rf_polling_rx_packet+0x2fe>
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	11 c0       	rjmp	.+34     	; 0x1ee4 <rf_polling_rx_packet+0x32c>
    1ec2:	1e bc       	out	0x2e, r1	; 46
    1ec4:	0d b4       	in	r0, 0x2d	; 45
    1ec6:	07 fe       	sbrs	r0, 7
    1ec8:	fd cf       	rjmp	.-6      	; 0x1ec4 <rf_polling_rx_packet+0x30c>
    1eca:	e0 91 67 06 	lds	r30, 0x0667
    1ece:	f0 91 68 06 	lds	r31, 0x0668
    1ed2:	05 80       	ldd	r0, Z+5	; 0x05
    1ed4:	f6 81       	ldd	r31, Z+6	; 0x06
    1ed6:	e0 2d       	mov	r30, r0
    1ed8:	e6 0f       	add	r30, r22
    1eda:	f1 1d       	adc	r31, r1
    1edc:	8e b5       	in	r24, 0x2e	; 46
    1ede:	80 83       	st	Z, r24
    1ee0:	4f 5f       	subi	r20, 0xFF	; 255
    1ee2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee4:	64 2f       	mov	r22, r20
    1ee6:	e0 91 67 06 	lds	r30, 0x0667
    1eea:	f0 91 68 06 	lds	r31, 0x0668
    1eee:	24 2f       	mov	r18, r20
    1ef0:	33 27       	eor	r19, r19
    1ef2:	83 81       	ldd	r24, Z+3	; 0x03
    1ef4:	99 27       	eor	r25, r25
    1ef6:	87 fd       	sbrc	r24, 7
    1ef8:	90 95       	com	r25
    1efa:	28 17       	cp	r18, r24
    1efc:	39 07       	cpc	r19, r25
    1efe:	0c f3       	brlt	.-62     	; 0x1ec2 <rf_polling_rx_packet+0x30a>
    1f00:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    1f02:	40 98       	cbi	0x08, 0	; 8
    1f04:	8f e7       	ldi	r24, 0x7F	; 127
    1f06:	8e bd       	out	0x2e, r24	; 46
    1f08:	0d b4       	in	r0, 0x2d	; 45
    1f0a:	07 fc       	sbrc	r0, 7
    1f0c:	0a c0       	rjmp	.+20     	; 0x1f22 <rf_polling_rx_packet+0x36a>
    1f0e:	fc cf       	rjmp	.-8      	; 0x1f08 <rf_polling_rx_packet+0x350>
    1f10:	0d b4       	in	r0, 0x2d	; 45
    1f12:	07 fe       	sbrs	r0, 7
    1f14:	fd cf       	rjmp	.-6      	; 0x1f10 <rf_polling_rx_packet+0x358>
    1f16:	5e b5       	in	r21, 0x2e	; 46
    1f18:	40 9a       	sbi	0x08, 0	; 8

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    1f1a:	40 98       	cbi	0x08, 0	; 8
    1f1c:	8f e7       	ldi	r24, 0x7F	; 127
    1f1e:	8e bd       	out	0x2e, r24	; 46
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <rf_polling_rx_packet+0x36e>
        			rfSettings.pRxInfo->length -= 4;
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    1f22:	1e bc       	out	0x2e, r1	; 46
    1f24:	f5 cf       	rjmp	.-22     	; 0x1f10 <rf_polling_rx_packet+0x358>

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    1f26:	0d b4       	in	r0, 0x2d	; 45
    1f28:	07 fe       	sbrs	r0, 7
    1f2a:	fd cf       	rjmp	.-6      	; 0x1f26 <rf_polling_rx_packet+0x36e>
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	33 96       	adiw	r30, 0x03	; 3
    1f30:	9e 01       	movw	r18, r28
    1f32:	2b 5f       	subi	r18, 0xFB	; 251
    1f34:	3f 4f       	sbci	r19, 0xFF	; 255
    1f36:	1e bc       	out	0x2e, r1	; 46
    1f38:	0d b4       	in	r0, 0x2d	; 45
    1f3a:	07 fe       	sbrs	r0, 7
    1f3c:	fd cf       	rjmp	.-6      	; 0x1f38 <rf_polling_rx_packet+0x380>
    1f3e:	8e b5       	in	r24, 0x2e	; 46
    1f40:	81 93       	st	Z+, r24
    1f42:	e2 17       	cp	r30, r18
    1f44:	f3 07       	cpc	r31, r19
    1f46:	b9 f7       	brne	.-18     	; 0x1f36 <rf_polling_rx_packet+0x37e>
    1f48:	40 9a       	sbi	0x08, 0	; 8
			rfSettings.pRxInfo->rssi = pFooter[0];
    1f4a:	e0 91 67 06 	lds	r30, 0x0667
    1f4e:	f0 91 68 06 	lds	r31, 0x0668
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	80 87       	std	Z+8, r24	; 0x08
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	0a c0       	rjmp	.+20     	; 0x1f72 <rf_polling_rx_packet+0x3ba>
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
    1f5e:	e0 91 67 06 	lds	r30, 0x0667
    1f62:	f0 91 68 06 	lds	r31, 0x0668
    1f66:	85 81       	ldd	r24, Z+5	; 0x05
    1f68:	96 81       	ldd	r25, Z+6	; 0x06
    1f6a:	a8 0f       	add	r26, r24
    1f6c:	b9 1f       	adc	r27, r25
    1f6e:	8c 91       	ld	r24, X
    1f70:	48 0f       	add	r20, r24
    1f72:	82 2f       	mov	r24, r18

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
			rfSettings.pRxInfo->rssi = pFooter[0];
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
    1f74:	e0 91 67 06 	lds	r30, 0x0667
    1f78:	f0 91 68 06 	lds	r31, 0x0668
    1f7c:	2f 5f       	subi	r18, 0xFF	; 255
    1f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f80:	a8 2f       	mov	r26, r24
    1f82:	bb 27       	eor	r27, r27
    1f84:	83 81       	ldd	r24, Z+3	; 0x03
    1f86:	99 27       	eor	r25, r25
    1f88:	87 fd       	sbrc	r24, 7
    1f8a:	90 95       	com	r25
    1f8c:	a8 17       	cp	r26, r24
    1f8e:	b9 07       	cpc	r27, r25
    1f90:	34 f3       	brlt	.-52     	; 0x1f5e <rf_polling_rx_packet+0x3a6>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
				//printf( "%d ", rfSettings.pRxInfo->pPayload[i]);
			}

			if(checksum!=rx_checksum) {
    1f92:	45 17       	cp	r20, r21
    1f94:	19 f1       	breq	.+70     	; 0x1fdc <rf_polling_rx_packet+0x424>
				//printf( "Checksum failed %d %d\r",rx_checksum, checksum );
	    			// always read 1 byte before flush (data sheet pg 62)
	   			FASTSPI_READ_FIFO_BYTE(tmp);  
    1f96:	40 98       	cbi	0x08, 0	; 8
    1f98:	8f e7       	ldi	r24, 0x7F	; 127
    1f9a:	8e bd       	out	0x2e, r24	; 46
    1f9c:	0d b4       	in	r0, 0x2d	; 45
    1f9e:	07 fe       	sbrs	r0, 7
    1fa0:	fd cf       	rjmp	.-6      	; 0x1f9c <rf_polling_rx_packet+0x3e4>
    1fa2:	1e bc       	out	0x2e, r1	; 46
    1fa4:	0d b4       	in	r0, 0x2d	; 45
    1fa6:	07 fe       	sbrs	r0, 7
    1fa8:	fd cf       	rjmp	.-6      	; 0x1fa4 <rf_polling_rx_packet+0x3ec>
    1faa:	8e b5       	in	r24, 0x2e	; 46
    1fac:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    1fae:	40 98       	cbi	0x08, 0	; 8
    1fb0:	88 e0       	ldi	r24, 0x08	; 8
    1fb2:	8e bd       	out	0x2e, r24	; 46
    1fb4:	0d b4       	in	r0, 0x2d	; 45
    1fb6:	07 fe       	sbrs	r0, 7
    1fb8:	fd cf       	rjmp	.-6      	; 0x1fb4 <rf_polling_rx_packet+0x3fc>
    1fba:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    1fbc:	40 98       	cbi	0x08, 0	; 8
    1fbe:	88 e0       	ldi	r24, 0x08	; 8
    1fc0:	8e bd       	out	0x2e, r24	; 46
    1fc2:	0d b4       	in	r0, 0x2d	; 45
    1fc4:	07 fe       	sbrs	r0, 7
    1fc6:	fd cf       	rjmp	.-6      	; 0x1fc2 <rf_polling_rx_packet+0x40a>
    1fc8:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
    1fca:	80 91 62 06 	lds	r24, 0x0662
    1fce:	90 91 63 06 	lds	r25, 0x0663
    1fd2:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    1fd6:	8c ef       	ldi	r24, 0xFC	; 252
    1fd8:	9f ef       	ldi	r25, 0xFF	; 255
    1fda:	3c c0       	rjmp	.+120    	; 0x2054 <rf_polling_rx_packet+0x49c>
#endif
				return -4;
			}	
			if (pFooter[1] & RF_CRC_OK_BM) {
    1fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fde:	87 ff       	sbrs	r24, 7
    1fe0:	0e c0       	rjmp	.+28     	; 0x1ffe <rf_polling_rx_packet+0x446>
				//rfSettings.pRxInfo = rf_rx_callback(rfSettings.pRxInfo);
				rx_ready++;
    1fe2:	80 91 78 06 	lds	r24, 0x0678
    1fe6:	8f 5f       	subi	r24, 0xFF	; 255
    1fe8:	80 93 78 06 	sts	0x0678, r24
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
    1fec:	80 91 62 06 	lds	r24, 0x0662
    1ff0:	90 91 63 06 	lds	r25, 0x0663
    1ff4:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	2b c0       	rjmp	.+86     	; 0x2054 <rf_polling_rx_packet+0x49c>
#endif
				return 1;
			} else
	    		{
	    		// always read 1 byte before flush (data sheet pg 62)
	   		FASTSPI_READ_FIFO_BYTE(tmp);  
    1ffe:	40 98       	cbi	0x08, 0	; 8
    2000:	8f e7       	ldi	r24, 0x7F	; 127
    2002:	8e bd       	out	0x2e, r24	; 46
    2004:	0d b4       	in	r0, 0x2d	; 45
    2006:	07 fe       	sbrs	r0, 7
    2008:	fd cf       	rjmp	.-6      	; 0x2004 <rf_polling_rx_packet+0x44c>
    200a:	1e bc       	out	0x2e, r1	; 46
    200c:	0d b4       	in	r0, 0x2d	; 45
    200e:	07 fe       	sbrs	r0, 7
    2010:	fd cf       	rjmp	.-6      	; 0x200c <rf_polling_rx_packet+0x454>
    2012:	8e b5       	in	r24, 0x2e	; 46
    2014:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_STROBE(CC2420_SFLUSHRX);
    2016:	40 98       	cbi	0x08, 0	; 8
    2018:	88 e0       	ldi	r24, 0x08	; 8
    201a:	8e bd       	out	0x2e, r24	; 46
    201c:	0d b4       	in	r0, 0x2d	; 45
    201e:	07 fe       	sbrs	r0, 7
    2020:	fd cf       	rjmp	.-6      	; 0x201c <rf_polling_rx_packet+0x464>
    2022:	40 9a       	sbi	0x08, 0	; 8
	    		FASTSPI_STROBE(CC2420_SFLUSHRX);
    2024:	40 98       	cbi	0x08, 0	; 8
    2026:	88 e0       	ldi	r24, 0x08	; 8
    2028:	8e bd       	out	0x2e, r24	; 46
    202a:	0d b4       	in	r0, 0x2d	; 45
    202c:	07 fe       	sbrs	r0, 7
    202e:	fd cf       	rjmp	.-6      	; 0x202a <rf_polling_rx_packet+0x472>
    2030:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    		nrk_sem_post(radio_sem);
    2032:	80 91 62 06 	lds	r24, 0x0662
    2036:	90 91 63 06 	lds	r25, 0x0663
    203a:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    203e:	8b ef       	ldi	r24, 0xFB	; 251
    2040:	9f ef       	ldi	r25, 0xFF	; 255
    2042:	08 c0       	rjmp	.+16     	; 0x2054 <rf_polling_rx_packet+0x49c>
	}


    }
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    2044:	80 91 62 06 	lds	r24, 0x0662
    2048:	90 91 63 06 	lds	r25, 0x0663
    204c:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	24 96       	adiw	r28, 0x04	; 4
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	08 95       	ret

00002066 <rf_rx_off>:
//  DESCRIPTION:
//      Disables the CC2420 receiver and the FIFOP interrupt.
//-------------------------------------------------------------------------------------------------------
void rf_rx_off(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    2066:	80 91 62 06 	lds	r24, 0x0662
    206a:	90 91 63 06 	lds	r25, 0x0663
    206e:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
#endif
	// XXX
    	//SET_VREG_INACTIVE();	
	rfSettings.receiveOn = FALSE;
    2072:	10 92 6f 06 	sts	0x066F, r1
	FASTSPI_STROBE(CC2420_SRFOFF);
    2076:	40 98       	cbi	0x08, 0	; 8
    2078:	86 e0       	ldi	r24, 0x06	; 6
    207a:	8e bd       	out	0x2e, r24	; 46
    207c:	0d b4       	in	r0, 0x2d	; 45
    207e:	07 fe       	sbrs	r0, 7
    2080:	fd cf       	rjmp	.-6      	; 0x207c <rf_rx_off+0x16>
    2082:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    2084:	10 92 78 06 	sts	0x0678, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2088:	80 91 62 06 	lds	r24, 0x0662
    208c:	90 91 63 06 	lds	r25, 0x0663
    2090:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    2094:	08 95       	ret

00002096 <rf_polling_rx_on>:
    //	ENABLE_FIFOP_INT();
} // rf_rx_on() 

void rf_polling_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    2096:	80 91 62 06 	lds	r24, 0x0662
    209a:	90 91 63 06 	lds	r25, 0x0663
    209e:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
#endif
    	rfSettings.receiveOn = TRUE;
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	80 93 6f 06 	sts	0x066F, r24
	FASTSPI_STROBE(CC2420_SRXON);
    20a8:	40 98       	cbi	0x08, 0	; 8
    20aa:	83 e0       	ldi	r24, 0x03	; 3
    20ac:	8e bd       	out	0x2e, r24	; 46
    20ae:	0d b4       	in	r0, 0x2d	; 45
    20b0:	07 fe       	sbrs	r0, 7
    20b2:	fd cf       	rjmp	.-6      	; 0x20ae <rf_polling_rx_on+0x18>
    20b4:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    20b6:	40 98       	cbi	0x08, 0	; 8
    20b8:	88 e0       	ldi	r24, 0x08	; 8
    20ba:	8e bd       	out	0x2e, r24	; 46
    20bc:	0d b4       	in	r0, 0x2d	; 45
    20be:	07 fe       	sbrs	r0, 7
    20c0:	fd cf       	rjmp	.-6      	; 0x20bc <rf_polling_rx_on+0x26>
    20c2:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    20c4:	10 92 78 06 	sts	0x0678, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    20c8:	80 91 62 06 	lds	r24, 0x0662
    20cc:	90 91 63 06 	lds	r25, 0x0663
    20d0:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    20d4:	08 95       	ret

000020d6 <rf_rx_on>:
//      Enables the CC2420 receiver and the FIFOP interrupt. When a packet is received through this
//      interrupt, it will call rf_rx_callback(...), which must be defined by the application
//-------------------------------------------------------------------------------------------------------
void rf_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    20d6:	80 91 62 06 	lds	r24, 0x0662
    20da:	90 91 63 06 	lds	r25, 0x0663
    20de:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
#endif
    	rfSettings.receiveOn = TRUE;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	80 93 6f 06 	sts	0x066F, r24
	FASTSPI_STROBE(CC2420_SRXON);
    20e8:	40 98       	cbi	0x08, 0	; 8
    20ea:	83 e0       	ldi	r24, 0x03	; 3
    20ec:	8e bd       	out	0x2e, r24	; 46
    20ee:	0d b4       	in	r0, 0x2d	; 45
    20f0:	07 fe       	sbrs	r0, 7
    20f2:	fd cf       	rjmp	.-6      	; 0x20ee <rf_rx_on+0x18>
    20f4:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    20f6:	40 98       	cbi	0x08, 0	; 8
    20f8:	88 e0       	ldi	r24, 0x08	; 8
    20fa:	8e bd       	out	0x2e, r24	; 46
    20fc:	0d b4       	in	r0, 0x2d	; 45
    20fe:	07 fe       	sbrs	r0, 7
    2100:	fd cf       	rjmp	.-6      	; 0x20fc <rf_rx_on+0x26>
    2102:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    2104:	10 92 78 06 	sts	0x0678, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2108:	80 91 62 06 	lds	r24, 0x0662
    210c:	90 91 63 06 	lds	r25, 0x0663
    2110:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    2114:	08 95       	ret

00002116 <rf_tx_power>:
{
return radio_sem;
}

void rf_tx_power(uint8_t pwr)
{
    2116:	1f 93       	push	r17
    2118:	18 2f       	mov	r17, r24
uint16_t tmp;
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    211a:	80 91 62 06 	lds	r24, 0x0662
    211e:	90 91 63 06 	lds	r25, 0x0663
    2122:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    2126:	21 2f       	mov	r18, r17
    2128:	33 27       	eor	r19, r19
    212a:	2f 71       	andi	r18, 0x1F	; 31
    212c:	30 70       	andi	r19, 0x00	; 0
    212e:	20 6e       	ori	r18, 0xE0	; 224
    2130:	30 6a       	ori	r19, 0xA0	; 160
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
    2132:	40 98       	cbi	0x08, 0	; 8
    2134:	85 e1       	ldi	r24, 0x15	; 21
    2136:	8e bd       	out	0x2e, r24	; 46
    2138:	0d b4       	in	r0, 0x2d	; 45
    213a:	07 fe       	sbrs	r0, 7
    213c:	fd cf       	rjmp	.-6      	; 0x2138 <rf_tx_power+0x22>
    213e:	83 2f       	mov	r24, r19
    2140:	99 27       	eor	r25, r25
    2142:	8e bd       	out	0x2e, r24	; 46
    2144:	0d b4       	in	r0, 0x2d	; 45
    2146:	07 fe       	sbrs	r0, 7
    2148:	fd cf       	rjmp	.-6      	; 0x2144 <rf_tx_power+0x2e>
    214a:	2e bd       	out	0x2e, r18	; 46
    214c:	0d b4       	in	r0, 0x2d	; 45
    214e:	07 fe       	sbrs	r0, 7
    2150:	fd cf       	rjmp	.-6      	; 0x214c <rf_tx_power+0x36>
    2152:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2154:	80 91 62 06 	lds	r24, 0x0662
    2158:	90 91 63 06 	lds	r25, 0x0663
    215c:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    2160:	1f 91       	pop	r17
    2162:	08 95       	ret

00002164 <rf_tx_packet>:
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    2164:	ef 92       	push	r14
    2166:	ff 92       	push	r15
    2168:	0f 93       	push	r16
    216a:	1f 93       	push	r17
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	22 97       	sbiw	r28, 0x02	; 2
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	8c 01       	movw	r16, r24
    uint8_t success;
    uint8_t spiStatusByte;
   uint8_t checksum,i;
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    2182:	80 91 62 06 	lds	r24, 0x0662
    2186:	90 91 63 06 	lds	r25, 0x0663
    218a:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
#endif

if(security_enable)
    218e:	50 91 64 06 	lds	r21, 0x0664
    2192:	55 23       	and	r21, r21
    2194:	39 f0       	breq	.+14     	; 0x21a4 <rf_tx_packet+0x40>
    FASTSPI_STROBE(CC2420_STXENC);
    2196:	40 98       	cbi	0x08, 0	; 8
    2198:	8d e0       	ldi	r24, 0x0D	; 13
    219a:	8e bd       	out	0x2e, r24	; 46
    219c:	0d b4       	in	r0, 0x2d	; 45
    219e:	07 fe       	sbrs	r0, 7
    21a0:	fd cf       	rjmp	.-6      	; 0x219c <rf_tx_packet+0x38>
    21a2:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    21a4:	f8 01       	movw	r30, r16
    21a6:	42 81       	ldd	r20, Z+2	; 0x02
    21a8:	64 2f       	mov	r22, r20
    21aa:	77 27       	eor	r23, r23
    21ac:	67 fd       	sbrc	r22, 7
    21ae:	70 95       	com	r23
    21b0:	a0 e0       	ldi	r26, 0x00	; 0
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	08 c0       	rjmp	.+16     	; 0x21c8 <rf_tx_packet+0x64>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    21b8:	f8 01       	movw	r30, r16
    21ba:	83 81       	ldd	r24, Z+3	; 0x03
    21bc:	94 81       	ldd	r25, Z+4	; 0x04
    21be:	e8 0e       	add	r14, r24
    21c0:	f9 1e       	adc	r15, r25
    21c2:	f7 01       	movw	r30, r14
    21c4:	80 81       	ld	r24, Z
    21c6:	a8 0f       	add	r26, r24
    21c8:	82 2f       	mov	r24, r18
    21ca:	2f 5f       	subi	r18, 0xFF	; 255
    21cc:	3f 4f       	sbci	r19, 0xFF	; 255

if(security_enable)
    FASTSPI_STROBE(CC2420_STXENC);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    21ce:	e8 2e       	mov	r14, r24
    21d0:	ff 24       	eor	r15, r15
    21d2:	e6 16       	cp	r14, r22
    21d4:	f7 06       	cpc	r15, r23
    21d6:	84 f3       	brlt	.-32     	; 0x21b8 <rf_tx_packet+0x54>
    }
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)

    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a slighly higher later since they assume TDMA
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    21d8:	94 2f       	mov	r25, r20
    21da:	94 5f       	subi	r25, 0xF4	; 244
    if(security_enable) packetLength+=4;  // for CTR counter
    21dc:	51 11       	cpse	r21, r1
    21de:	9c 5f       	subi	r25, 0xFC	; 252

   	// XXX 2 below are hacks...
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
    // Wait until the transceiver is idle
    while (FIFOP_IS_1 || SFD_IS_1);
    21e0:	67 99       	sbic	0x0c, 7	; 12
    21e2:	fe cf       	rjmp	.-4      	; 0x21e0 <rf_tx_packet+0x7c>
    21e4:	4e 99       	sbic	0x09, 6	; 9
    21e6:	fc cf       	rjmp	.-8      	; 0x21e0 <rf_tx_packet+0x7c>
    // Turn off global interrupts to avoid interference on the SPI interface
    DISABLE_GLOBAL_INT();
    21e8:	f8 94       	cli
	// Flush the TX FIFO just in case...
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    21ea:	40 98       	cbi	0x08, 0	; 8
    21ec:	89 e0       	ldi	r24, 0x09	; 9
    21ee:	8e bd       	out	0x2e, r24	; 46
    21f0:	0d b4       	in	r0, 0x2d	; 45
    21f2:	07 fe       	sbrs	r0, 7
    21f4:	fd cf       	rjmp	.-6      	; 0x21f0 <rf_tx_packet+0x8c>
    21f6:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    21f8:	40 98       	cbi	0x08, 0	; 8
    21fa:	89 e0       	ldi	r24, 0x09	; 9
    21fc:	8e bd       	out	0x2e, r24	; 46
    21fe:	0d b4       	in	r0, 0x2d	; 45
    2200:	07 fe       	sbrs	r0, 7
    2202:	fd cf       	rjmp	.-6      	; 0x21fe <rf_tx_packet+0x9a>
    2204:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/

    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    2206:	40 98       	cbi	0x08, 0	; 8
    2208:	8e e3       	ldi	r24, 0x3E	; 62
    220a:	8e bd       	out	0x2e, r24	; 46
    220c:	0d b4       	in	r0, 0x2d	; 45
    220e:	07 fc       	sbrc	r0, 7
    2210:	05 c0       	rjmp	.+10     	; 0x221c <__stack+0x1d>
    2212:	fc cf       	rjmp	.-8      	; 0x220c <__stack+0xd>
    2214:	0d b4       	in	r0, 0x2d	; 45
    2216:	07 fc       	sbrc	r0, 7
    2218:	30 c1       	rjmp	.+608    	; 0x247a <__stack+0x27b>
    221a:	fc cf       	rjmp	.-8      	; 0x2214 <__stack+0x15>
    221c:	9e bd       	out	0x2e, r25	; 46
    221e:	fa cf       	rjmp	.-12     	; 0x2214 <__stack+0x15>
    frameControlField = RF_FCF_NOACK;   // default
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    2220:	81 e6       	ldi	r24, 0x61	; 97
    2222:	98 e8       	ldi	r25, 0x88	; 136
    2224:	9a 83       	std	Y+2, r25	; 0x02
    2226:	89 83       	std	Y+1, r24	; 0x01
    if(security_enable) frameControlField |= RF_SEC_BM;
    2228:	55 23       	and	r21, r21
    222a:	29 f0       	breq	.+10     	; 0x2236 <__stack+0x37>
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	9a 81       	ldd	r25, Y+2	; 0x02
    2230:	88 60       	ori	r24, 0x08	; 8
    2232:	9a 83       	std	Y+2, r25	; 0x02
    2234:	89 83       	std	Y+1, r24	; 0x01
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    2236:	40 98       	cbi	0x08, 0	; 8
    2238:	8e e3       	ldi	r24, 0x3E	; 62
    223a:	8e bd       	out	0x2e, r24	; 46
    223c:	0d b4       	in	r0, 0x2d	; 45
    223e:	07 fe       	sbrs	r0, 7
    2240:	fd cf       	rjmp	.-6      	; 0x223c <__stack+0x3d>
    2242:	fe 01       	movw	r30, r28
    2244:	31 96       	adiw	r30, 0x01	; 1
    2246:	9e 01       	movw	r18, r28
    2248:	2d 5f       	subi	r18, 0xFD	; 253
    224a:	3f 4f       	sbci	r19, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	8e bd       	out	0x2e, r24	; 46
    2250:	0d b4       	in	r0, 0x2d	; 45
    2252:	07 fe       	sbrs	r0, 7
    2254:	fd cf       	rjmp	.-6      	; 0x2250 <__stack+0x51>
    2256:	31 96       	adiw	r30, 0x01	; 1
    2258:	e2 17       	cp	r30, r18
    225a:	f3 07       	cpc	r31, r19
    225c:	b9 f7       	brne	.-18     	; 0x224c <__stack+0x4d>
    225e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    2260:	40 98       	cbi	0x08, 0	; 8
    2262:	8e e3       	ldi	r24, 0x3E	; 62
    2264:	8e bd       	out	0x2e, r24	; 46
    2266:	0d b4       	in	r0, 0x2d	; 45
    2268:	07 fc       	sbrc	r0, 7
    226a:	05 c0       	rjmp	.+10     	; 0x2276 <__stack+0x77>
    226c:	fc cf       	rjmp	.-8      	; 0x2266 <__stack+0x67>
    226e:	0d b4       	in	r0, 0x2d	; 45
    2270:	07 fc       	sbrc	r0, 7
    2272:	0e c1       	rjmp	.+540    	; 0x2490 <__stack+0x291>
    2274:	fc cf       	rjmp	.-8      	; 0x226e <__stack+0x6f>
    2276:	80 91 69 06 	lds	r24, 0x0669
    227a:	8e bd       	out	0x2e, r24	; 46
    227c:	f8 cf       	rjmp	.-16     	; 0x226e <__stack+0x6f>
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    227e:	0d b4       	in	r0, 0x2d	; 45
    2280:	07 fe       	sbrs	r0, 7
    2282:	fd cf       	rjmp	.-6      	; 0x227e <__stack+0x7f>
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	f9 01       	movw	r30, r18
    228a:	e5 59       	subi	r30, 0x95	; 149
    228c:	f9 4f       	sbci	r31, 0xF9	; 249
    228e:	80 81       	ld	r24, Z
    2290:	8e bd       	out	0x2e, r24	; 46
    2292:	0d b4       	in	r0, 0x2d	; 45
    2294:	07 fe       	sbrs	r0, 7
    2296:	fd cf       	rjmp	.-6      	; 0x2292 <__stack+0x93>
    2298:	2f 5f       	subi	r18, 0xFF	; 255
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	22 30       	cpi	r18, 0x02	; 2
    229e:	31 05       	cpc	r19, r1
    22a0:	99 f7       	brne	.-26     	; 0x2288 <__stack+0x89>
    22a2:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    22a4:	40 98       	cbi	0x08, 0	; 8
    22a6:	8e e3       	ldi	r24, 0x3E	; 62
    22a8:	8e bd       	out	0x2e, r24	; 46
    22aa:	0d b4       	in	r0, 0x2d	; 45
    22ac:	07 fe       	sbrs	r0, 7
    22ae:	fd cf       	rjmp	.-6      	; 0x22aa <__stack+0xab>
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	f8 01       	movw	r30, r16
    22b6:	e2 0f       	add	r30, r18
    22b8:	f3 1f       	adc	r31, r19
    22ba:	80 81       	ld	r24, Z
    22bc:	8e bd       	out	0x2e, r24	; 46
    22be:	0d b4       	in	r0, 0x2d	; 45
    22c0:	07 fe       	sbrs	r0, 7
    22c2:	fd cf       	rjmp	.-6      	; 0x22be <__stack+0xbf>
    22c4:	2f 5f       	subi	r18, 0xFF	; 255
    22c6:	3f 4f       	sbci	r19, 0xFF	; 255
    22c8:	22 30       	cpi	r18, 0x02	; 2
    22ca:	31 05       	cpc	r19, r1
    22cc:	99 f7       	brne	.-26     	; 0x22b4 <__stack+0xb5>
    22ce:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    22d0:	40 98       	cbi	0x08, 0	; 8
    22d2:	8e e3       	ldi	r24, 0x3E	; 62
    22d4:	8e bd       	out	0x2e, r24	; 46
    22d6:	0d b4       	in	r0, 0x2d	; 45
    22d8:	07 fe       	sbrs	r0, 7
    22da:	fd cf       	rjmp	.-6      	; 0x22d6 <__stack+0xd7>
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	f9 01       	movw	r30, r18
    22e2:	e3 59       	subi	r30, 0x93	; 147
    22e4:	f9 4f       	sbci	r31, 0xF9	; 249
    22e6:	80 81       	ld	r24, Z
    22e8:	8e bd       	out	0x2e, r24	; 46
    22ea:	0d b4       	in	r0, 0x2d	; 45
    22ec:	07 fe       	sbrs	r0, 7
    22ee:	fd cf       	rjmp	.-6      	; 0x22ea <__stack+0xeb>
    22f0:	2f 5f       	subi	r18, 0xFF	; 255
    22f2:	3f 4f       	sbci	r19, 0xFF	; 255
    22f4:	22 30       	cpi	r18, 0x02	; 2
    22f6:	31 05       	cpc	r19, r1
    22f8:	99 f7       	brne	.-26     	; 0x22e0 <__stack+0xe1>
    22fa:	40 9a       	sbi	0x08, 0	; 8
    if(security_enable)
    22fc:	55 23       	and	r21, r21
    22fe:	99 f0       	breq	.+38     	; 0x2326 <__stack+0x127>
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
    2300:	40 98       	cbi	0x08, 0	; 8
    2302:	8e e3       	ldi	r24, 0x3E	; 62
    2304:	8e bd       	out	0x2e, r24	; 46
    2306:	0d b4       	in	r0, 0x2d	; 45
    2308:	07 fe       	sbrs	r0, 7
    230a:	fd cf       	rjmp	.-6      	; 0x2306 <__stack+0x107>
    230c:	e4 e7       	ldi	r30, 0x74	; 116
    230e:	f6 e0       	ldi	r31, 0x06	; 6
    2310:	80 81       	ld	r24, Z
    2312:	8e bd       	out	0x2e, r24	; 46
    2314:	0d b4       	in	r0, 0x2d	; 45
    2316:	07 fe       	sbrs	r0, 7
    2318:	fd cf       	rjmp	.-6      	; 0x2314 <__stack+0x115>
    231a:	31 96       	adiw	r30, 0x01	; 1
    231c:	86 e0       	ldi	r24, 0x06	; 6
    231e:	e8 37       	cpi	r30, 0x78	; 120
    2320:	f8 07       	cpc	r31, r24
    2322:	b1 f7       	brne	.-20     	; 0x2310 <__stack+0x111>
    2324:	40 9a       	sbi	0x08, 0	; 8
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    2326:	40 98       	cbi	0x08, 0	; 8
    2328:	8e e3       	ldi	r24, 0x3E	; 62
    232a:	8e bd       	out	0x2e, r24	; 46
    232c:	0d b4       	in	r0, 0x2d	; 45
    232e:	07 fe       	sbrs	r0, 7
    2330:	fd cf       	rjmp	.-6      	; 0x232c <__stack+0x12d>
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	0d c0       	rjmp	.+26     	; 0x2352 <__stack+0x153>
    2338:	f8 01       	movw	r30, r16
    233a:	83 81       	ldd	r24, Z+3	; 0x03
    233c:	94 81       	ldd	r25, Z+4	; 0x04
    233e:	48 0f       	add	r20, r24
    2340:	59 1f       	adc	r21, r25
    2342:	fa 01       	movw	r30, r20
    2344:	80 81       	ld	r24, Z
    2346:	8e bd       	out	0x2e, r24	; 46
    2348:	0d b4       	in	r0, 0x2d	; 45
    234a:	07 fe       	sbrs	r0, 7
    234c:	fd cf       	rjmp	.-6      	; 0x2348 <__stack+0x149>
    234e:	2f 5f       	subi	r18, 0xFF	; 255
    2350:	3f 4f       	sbci	r19, 0xFF	; 255
    2352:	42 2f       	mov	r20, r18
    2354:	55 27       	eor	r21, r21
    2356:	46 17       	cp	r20, r22
    2358:	57 07       	cpc	r21, r23
    235a:	74 f3       	brlt	.-36     	; 0x2338 <__stack+0x139>
    235c:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    235e:	40 98       	cbi	0x08, 0	; 8
    2360:	8e e3       	ldi	r24, 0x3E	; 62
    2362:	8e bd       	out	0x2e, r24	; 46
    2364:	0d b4       	in	r0, 0x2d	; 45
    2366:	07 fc       	sbrc	r0, 7
    2368:	05 c0       	rjmp	.+10     	; 0x2374 <__stack+0x175>
    236a:	fc cf       	rjmp	.-8      	; 0x2364 <__stack+0x165>
    236c:	0d b4       	in	r0, 0x2d	; 45
    236e:	07 fc       	sbrc	r0, 7
    2370:	94 c0       	rjmp	.+296    	; 0x249a <__stack+0x29b>
    2372:	fc cf       	rjmp	.-8      	; 0x236c <__stack+0x16d>
    2374:	ae bd       	out	0x2e, r26	; 46
    2376:	fa cf       	rjmp	.-12     	; 0x236c <__stack+0x16d>

if (pRTI->cca == TRUE)
{
    uint8_t cnt;
     if (!rfSettings.receiveOn)
    2378:	80 91 6f 06 	lds	r24, 0x066F
    237c:	88 23       	and	r24, r24
    237e:	39 f4       	brne	.+14     	; 0x238e <__stack+0x18f>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    2380:	40 98       	cbi	0x08, 0	; 8
    2382:	83 e0       	ldi	r24, 0x03	; 3
    2384:	8e bd       	out	0x2e, r24	; 46
    2386:	0d b4       	in	r0, 0x2d	; 45
    2388:	07 fe       	sbrs	r0, 7
    238a:	fd cf       	rjmp	.-6      	; 0x2386 <__stack+0x187>
    238c:	40 9a       	sbi	0x08, 0	; 8
	}
      
      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    238e:	40 98       	cbi	0x08, 0	; 8
    2390:	1e bc       	out	0x2e, r1	; 46
    2392:	0d b4       	in	r0, 0x2d	; 45
    2394:	07 fe       	sbrs	r0, 7
    2396:	fd cf       	rjmp	.-6      	; 0x2392 <__stack+0x193>
    2398:	8e b5       	in	r24, 0x2e	; 46
    239a:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));      
    239c:	81 ff       	sbrs	r24, 1
    239e:	f7 cf       	rjmp	.-18     	; 0x238e <__stack+0x18f>
    23a0:	00 e0       	ldi	r16, 0x00	; 0
      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    23a2:	40 98       	cbi	0x08, 0	; 8
    23a4:	85 e0       	ldi	r24, 0x05	; 5
    23a6:	8e bd       	out	0x2e, r24	; 46
    23a8:	0d b4       	in	r0, 0x2d	; 45
    23aa:	07 fe       	sbrs	r0, 7
    23ac:	fd cf       	rjmp	.-6      	; 0x23a8 <__stack+0x1a9>
    23ae:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    23b0:	40 98       	cbi	0x08, 0	; 8
    23b2:	1e bc       	out	0x2e, r1	; 46
    23b4:	0d b4       	in	r0, 0x2d	; 45
    23b6:	07 fe       	sbrs	r0, 7
    23b8:	fd cf       	rjmp	.-6      	; 0x23b4 <__stack+0x1b5>
    23ba:	1e b5       	in	r17, 0x2e	; 46
    23bc:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    23be:	0f 5f       	subi	r16, 0xFF	; 255
	  if (cnt > 100)
    23c0:	05 36       	cpi	r16, 0x65	; 101
    23c2:	51 f4       	brne	.+20     	; 0x23d8 <__stack+0x1d9>
	    {
	      ENABLE_GLOBAL_INT ();
    23c4:	78 94       	sei
	      nrk_sem_post(radio_sem);
    23c6:	80 91 62 06 	lds	r24, 0x0662
    23ca:	90 91 63 06 	lds	r25, 0x0663
    23ce:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	68 c0       	rjmp	.+208    	; 0x24a8 <__stack+0x2a9>
	      return FALSE;
	    }
	  halWait (100);
    23d8:	84 e6       	ldi	r24, 0x64	; 100
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	0e 94 80 1b 	call	0x3700	; 0x3700 <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    23e0:	13 fd       	sbrc	r17, 3
    23e2:	08 c0       	rjmp	.+16     	; 0x23f4 <__stack+0x1f5>
    23e4:	de cf       	rjmp	.-68     	; 0x23a2 <__stack+0x1a3>
    }
  else
    FASTSPI_STROBE (CC2420_STXON); 
    23e6:	40 98       	cbi	0x08, 0	; 8
    23e8:	84 e0       	ldi	r24, 0x04	; 4
    23ea:	8e bd       	out	0x2e, r24	; 46
    23ec:	0d b4       	in	r0, 0x2d	; 45
    23ee:	07 fe       	sbrs	r0, 7
    23f0:	fd cf       	rjmp	.-6      	; 0x23ec <__stack+0x1ed>
    23f2:	40 9a       	sbi	0x08, 0	; 8


  ENABLE_GLOBAL_INT();
    23f4:	78 94       	sei
	// Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
  while (!SFD_IS_1);
    23f6:	4e 9b       	sbis	0x09, 6	; 9
    23f8:	fe cf       	rjmp	.-4      	; 0x23f6 <__stack+0x1f7>
  success = TRUE;

	// Turn interrupts back on
//	ENABLE_GLOBAL_INT();

    while (SFD_IS_1); // wait for packet to finish
    23fa:	4e 99       	sbic	0x09, 6	; 9
    23fc:	fe cf       	rjmp	.-4      	; 0x23fa <__stack+0x1fb>

    // Wait for the acknowledge to be received, if any
    if (auto_ack_enable) {
    23fe:	80 91 72 06 	lds	r24, 0x0672
    2402:	88 23       	and	r24, r24
    2404:	91 f0       	breq	.+36     	; 0x242a <__stack+0x22b>
		//	while (SFD_IS_1);
        // We'll enter RX automatically, so just wait until we can be sure that the 
	// ack reception should have finished
        // The timeout consists of a 12-symbol turnaround time, the ack packet duration, 
	// and a small margin
        halWait((12 * RF_SYMBOL_DURATION) + (RF_ACK_DURATION) + (2 * RF_SYMBOL_DURATION) + 100);
    2406:	84 ea       	ldi	r24, 0xA4	; 164
    2408:	92 e0       	ldi	r25, 0x02	; 2
    240a:	0e 94 80 1b 	call	0x3700	; 0x3700 <halWait>

	if(FIFO_IS_1)
    240e:	31 9b       	sbis	0x06, 1	; 6
    2410:	0e c0       	rjmp	.+28     	; 0x242e <__stack+0x22f>
	{
	FASTSPI_READ_FIFO_BYTE(length);
    2412:	40 98       	cbi	0x08, 0	; 8
    2414:	8f e7       	ldi	r24, 0x7F	; 127
    2416:	8e bd       	out	0x2e, r24	; 46
    2418:	0d b4       	in	r0, 0x2d	; 45
    241a:	07 fe       	sbrs	r0, 7
    241c:	fd cf       	rjmp	.-6      	; 0x2418 <__stack+0x219>
    241e:	1e bc       	out	0x2e, r1	; 46
    2420:	0d b4       	in	r0, 0x2d	; 45
    2422:	07 fe       	sbrs	r0, 7
    2424:	fd cf       	rjmp	.-6      	; 0x2420 <__stack+0x221>
    2426:	8e b5       	in	r24, 0x2e	; 46
    2428:	40 9a       	sbi	0x08, 0	; 8
    242a:	11 e0       	ldi	r17, 0x01	; 1
    242c:	0f c0       	rjmp	.+30     	; 0x244c <__stack+0x24d>
	length &= RF_LENGTH_MASK; // Ignore MSB
	    success = TRUE;

	}else
	{
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    242e:	40 98       	cbi	0x08, 0	; 8
    2430:	88 e0       	ldi	r24, 0x08	; 8
    2432:	8e bd       	out	0x2e, r24	; 46
    2434:	0d b4       	in	r0, 0x2d	; 45
    2436:	07 fe       	sbrs	r0, 7
    2438:	fd cf       	rjmp	.-6      	; 0x2434 <__stack+0x235>
    243a:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    243c:	40 98       	cbi	0x08, 0	; 8
    243e:	88 e0       	ldi	r24, 0x08	; 8
    2440:	8e bd       	out	0x2e, r24	; 46
    2442:	0d b4       	in	r0, 0x2d	; 45
    2444:	07 fe       	sbrs	r0, 7
    2446:	fd cf       	rjmp	.-6      	; 0x2442 <__stack+0x243>
    2448:	40 9a       	sbi	0x08, 0	; 8
    244a:	10 e0       	ldi	r17, 0x00	; 0
    }

    
	// Turn off the receiver if it should not continue to be enabled
    
    DISABLE_GLOBAL_INT();	
    244c:	f8 94       	cli
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
    
	FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    244e:	40 98       	cbi	0x08, 0	; 8
    2450:	86 e0       	ldi	r24, 0x06	; 6
    2452:	8e bd       	out	0x2e, r24	; 46
    2454:	0d b4       	in	r0, 0x2d	; 45
    2456:	07 fe       	sbrs	r0, 7
    2458:	fd cf       	rjmp	.-6      	; 0x2454 <__stack+0x255>
    245a:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    245c:	78 94       	sei

    // agr XXX hack to test time issue
    //rf_rx_on(); 

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    245e:	80 91 69 06 	lds	r24, 0x0669
    2462:	8f 5f       	subi	r24, 0xFF	; 255
    2464:	80 93 69 06 	sts	0x0669, r24
//	while (SFD_IS_1);
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    2468:	80 91 62 06 	lds	r24, 0x0662
    246c:	90 91 63 06 	lds	r25, 0x0663
    2470:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
#endif
    return success;
    2474:	81 2f       	mov	r24, r17
    2476:	99 27       	eor	r25, r25
    2478:	17 c0       	rjmp	.+46     	; 0x24a8 <__stack+0x2a9>
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/

    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    247a:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = RF_FCF_NOACK;   // default
    247c:	81 e4       	ldi	r24, 0x41	; 65
    247e:	98 e8       	ldi	r25, 0x88	; 136
    2480:	9a 83       	std	Y+2, r25	; 0x02
    2482:	89 83       	std	Y+1, r24	; 0x01
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    2484:	80 91 72 06 	lds	r24, 0x0672
    2488:	88 23       	and	r24, r24
    248a:	09 f0       	breq	.+2      	; 0x248e <__stack+0x28f>
    248c:	c9 ce       	rjmp	.-622    	; 0x2220 <__stack+0x21>
    248e:	cc ce       	rjmp	.-616    	; 0x2228 <__stack+0x29>
    if(security_enable) frameControlField |= RF_SEC_BM;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    2490:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    2492:	40 98       	cbi	0x08, 0	; 8
    2494:	8e e3       	ldi	r24, 0x3E	; 62
    2496:	8e bd       	out	0x2e, r24	; 46
    2498:	f2 ce       	rjmp	.-540    	; 0x227e <__stack+0x7f>
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    if(security_enable)
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    249a:	40 9a       	sbi	0x08, 0	; 8

if (pRTI->cca == TRUE)
    249c:	f8 01       	movw	r30, r16
    249e:	85 81       	ldd	r24, Z+5	; 0x05
    24a0:	88 23       	and	r24, r24
    24a2:	09 f0       	breq	.+2      	; 0x24a6 <__stack+0x2a7>
    24a4:	69 cf       	rjmp	.-302    	; 0x2378 <__stack+0x179>
    24a6:	9f cf       	rjmp	.-194    	; 0x23e6 <__stack+0x1e7>
    24a8:	22 96       	adiw	r28, 0x02	; 2
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	1f 91       	pop	r17
    24ba:	0f 91       	pop	r16
    24bc:	ff 90       	pop	r15
    24be:	ef 90       	pop	r14
    24c0:	08 95       	ret

000024c2 <rf_tx_tdma_packet>:

/**************************************************************************
This function is the same as normal TX, only it records actual transmission
starting time for calculating offset for SYNC
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time, uint16_t *tx_start_time) {
    24c2:	8f 92       	push	r8
    24c4:	9f 92       	push	r9
    24c6:	bf 92       	push	r11
    24c8:	cf 92       	push	r12
    24ca:	df 92       	push	r13
    24cc:	ef 92       	push	r14
    24ce:	ff 92       	push	r15
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	22 97       	sbiw	r28, 0x02	; 2
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	8c 01       	movw	r16, r24
    24ea:	6b 01       	movw	r12, r22
    24ec:	7a 01       	movw	r14, r20
    24ee:	49 01       	movw	r8, r18
    	uint8_t spiStatusByte;
   	uint8_t checksum,i;
	uint8_t timestamp;

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend (radio_sem);
    24f0:	80 91 62 06 	lds	r24, 0x0662
    24f4:	90 91 63 06 	lds	r25, 0x0663
    24f8:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
#endif
	timestamp=_nrk_os_timer_get();
    24fc:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
	// XXX 2 below are hacks...
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    2500:	40 98       	cbi	0x08, 0	; 8
    2502:	88 e0       	ldi	r24, 0x08	; 8
    2504:	8e bd       	out	0x2e, r24	; 46
    2506:	0d b4       	in	r0, 0x2d	; 45
    2508:	07 fe       	sbrs	r0, 7
    250a:	fd cf       	rjmp	.-6      	; 0x2506 <rf_tx_tdma_packet+0x44>
    250c:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    250e:	40 98       	cbi	0x08, 0	; 8
    2510:	88 e0       	ldi	r24, 0x08	; 8
    2512:	8e bd       	out	0x2e, r24	; 46
    2514:	0d b4       	in	r0, 0x2d	; 45
    2516:	07 fe       	sbrs	r0, 7
    2518:	fd cf       	rjmp	.-6      	; 0x2514 <rf_tx_tdma_packet+0x52>
    251a:	40 9a       	sbi	0x08, 0	; 8
    // Wait until the transceiver is idle
     while (FIFOP_IS_1 || SFD_IS_1);
    251c:	67 99       	sbic	0x0c, 7	; 12
    251e:	fe cf       	rjmp	.-4      	; 0x251c <rf_tx_tdma_packet+0x5a>
    2520:	4e 99       	sbic	0x09, 6	; 9
    2522:	fc cf       	rjmp	.-8      	; 0x251c <rf_tx_tdma_packet+0x5a>
    // Turn off global interrupts to avoid interference on the SPI interface
      DISABLE_GLOBAL_INT();
    2524:	f8 94       	cli
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    2526:	40 98       	cbi	0x08, 0	; 8
    2528:	89 e0       	ldi	r24, 0x09	; 9
    252a:	8e bd       	out	0x2e, r24	; 46
    252c:	0d b4       	in	r0, 0x2d	; 45
    252e:	07 fe       	sbrs	r0, 7
    2530:	fd cf       	rjmp	.-6      	; 0x252c <rf_tx_tdma_packet+0x6a>
    2532:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    2534:	40 98       	cbi	0x08, 0	; 8
    2536:	89 e0       	ldi	r24, 0x09	; 9
    2538:	8e bd       	out	0x2e, r24	; 46
    253a:	0d b4       	in	r0, 0x2d	; 45
    253c:	07 fe       	sbrs	r0, 7
    253e:	fd cf       	rjmp	.-6      	; 0x253a <rf_tx_tdma_packet+0x78>
    2540:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    2542:	f8 01       	movw	r30, r16
    2544:	62 81       	ldd	r22, Z+2	; 0x02
    2546:	46 2f       	mov	r20, r22
    2548:	55 27       	eor	r21, r21
    254a:	47 fd       	sbrc	r20, 7
    254c:	50 95       	com	r21
    254e:	bb 24       	eor	r11, r11
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	07 c0       	rjmp	.+14     	; 0x2564 <rf_tx_tdma_packet+0xa2>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    2556:	f8 01       	movw	r30, r16
    2558:	83 81       	ldd	r24, Z+3	; 0x03
    255a:	94 81       	ldd	r25, Z+4	; 0x04
    255c:	a8 0f       	add	r26, r24
    255e:	b9 1f       	adc	r27, r25
    2560:	8c 91       	ld	r24, X
    2562:	b8 0e       	add	r11, r24
    2564:	82 2f       	mov	r24, r18
    2566:	2f 5f       	subi	r18, 0xFF	; 255
    2568:	3f 4f       	sbci	r19, 0xFF	; 255
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
	FASTSPI_STROBE(CC2420_SFLUSHTX);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    256a:	a8 2f       	mov	r26, r24
    256c:	bb 27       	eor	r27, r27
    256e:	a4 17       	cp	r26, r20
    2570:	b5 07       	cpc	r27, r21
    2572:	8c f3       	brlt	.-30     	; 0x2556 <rf_tx_tdma_packet+0x94>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    }
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    2574:	96 2f       	mov	r25, r22
    2576:	94 5f       	subi	r25, 0xF4	; 244
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    2578:	40 98       	cbi	0x08, 0	; 8
    257a:	8e e3       	ldi	r24, 0x3E	; 62
    257c:	8e bd       	out	0x2e, r24	; 46
    257e:	0d b4       	in	r0, 0x2d	; 45
    2580:	07 fc       	sbrc	r0, 7
    2582:	05 c0       	rjmp	.+10     	; 0x258e <rf_tx_tdma_packet+0xcc>
    2584:	fc cf       	rjmp	.-8      	; 0x257e <rf_tx_tdma_packet+0xbc>
    2586:	0d b4       	in	r0, 0x2d	; 45
    2588:	07 fc       	sbrc	r0, 7
    258a:	14 c1       	rjmp	.+552    	; 0x27b4 <rf_tx_tdma_packet+0x2f2>
    258c:	fc cf       	rjmp	.-8      	; 0x2586 <rf_tx_tdma_packet+0xc4>
    258e:	9e bd       	out	0x2e, r25	; 46
    2590:	fa cf       	rjmp	.-12     	; 0x2586 <rf_tx_tdma_packet+0xc4>
    2592:	81 e6       	ldi	r24, 0x61	; 97
    2594:	98 e8       	ldi	r25, 0x88	; 136
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    2596:	9a 83       	std	Y+2, r25	; 0x02
    2598:	89 83       	std	Y+1, r24	; 0x01
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    259a:	40 98       	cbi	0x08, 0	; 8
    259c:	8e e3       	ldi	r24, 0x3E	; 62
    259e:	8e bd       	out	0x2e, r24	; 46
    25a0:	0d b4       	in	r0, 0x2d	; 45
    25a2:	07 fe       	sbrs	r0, 7
    25a4:	fd cf       	rjmp	.-6      	; 0x25a0 <rf_tx_tdma_packet+0xde>
    25a6:	fe 01       	movw	r30, r28
    25a8:	31 96       	adiw	r30, 0x01	; 1
    25aa:	9e 01       	movw	r18, r28
    25ac:	2d 5f       	subi	r18, 0xFD	; 253
    25ae:	3f 4f       	sbci	r19, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	8e bd       	out	0x2e, r24	; 46
    25b4:	0d b4       	in	r0, 0x2d	; 45
    25b6:	07 fe       	sbrs	r0, 7
    25b8:	fd cf       	rjmp	.-6      	; 0x25b4 <rf_tx_tdma_packet+0xf2>
    25ba:	31 96       	adiw	r30, 0x01	; 1
    25bc:	e2 17       	cp	r30, r18
    25be:	f3 07       	cpc	r31, r19
    25c0:	b9 f7       	brne	.-18     	; 0x25b0 <rf_tx_tdma_packet+0xee>
    25c2:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    25c4:	40 98       	cbi	0x08, 0	; 8
    25c6:	8e e3       	ldi	r24, 0x3E	; 62
    25c8:	8e bd       	out	0x2e, r24	; 46
    25ca:	0d b4       	in	r0, 0x2d	; 45
    25cc:	07 fc       	sbrc	r0, 7
    25ce:	05 c0       	rjmp	.+10     	; 0x25da <rf_tx_tdma_packet+0x118>
    25d0:	fc cf       	rjmp	.-8      	; 0x25ca <rf_tx_tdma_packet+0x108>
    25d2:	0d b4       	in	r0, 0x2d	; 45
    25d4:	07 fc       	sbrc	r0, 7
    25d6:	f7 c0       	rjmp	.+494    	; 0x27c6 <rf_tx_tdma_packet+0x304>
    25d8:	fc cf       	rjmp	.-8      	; 0x25d2 <rf_tx_tdma_packet+0x110>
    25da:	80 91 69 06 	lds	r24, 0x0669
    25de:	8e bd       	out	0x2e, r24	; 46
    25e0:	f8 cf       	rjmp	.-16     	; 0x25d2 <rf_tx_tdma_packet+0x110>
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    25e2:	0d b4       	in	r0, 0x2d	; 45
    25e4:	07 fe       	sbrs	r0, 7
    25e6:	fd cf       	rjmp	.-6      	; 0x25e2 <rf_tx_tdma_packet+0x120>
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	f9 01       	movw	r30, r18
    25ee:	e5 59       	subi	r30, 0x95	; 149
    25f0:	f9 4f       	sbci	r31, 0xF9	; 249
    25f2:	80 81       	ld	r24, Z
    25f4:	8e bd       	out	0x2e, r24	; 46
    25f6:	0d b4       	in	r0, 0x2d	; 45
    25f8:	07 fe       	sbrs	r0, 7
    25fa:	fd cf       	rjmp	.-6      	; 0x25f6 <rf_tx_tdma_packet+0x134>
    25fc:	2f 5f       	subi	r18, 0xFF	; 255
    25fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2600:	22 30       	cpi	r18, 0x02	; 2
    2602:	31 05       	cpc	r19, r1
    2604:	99 f7       	brne	.-26     	; 0x25ec <rf_tx_tdma_packet+0x12a>
    2606:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    2608:	40 98       	cbi	0x08, 0	; 8
    260a:	8e e3       	ldi	r24, 0x3E	; 62
    260c:	8e bd       	out	0x2e, r24	; 46
    260e:	0d b4       	in	r0, 0x2d	; 45
    2610:	07 fe       	sbrs	r0, 7
    2612:	fd cf       	rjmp	.-6      	; 0x260e <rf_tx_tdma_packet+0x14c>
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	f8 01       	movw	r30, r16
    261a:	e2 0f       	add	r30, r18
    261c:	f3 1f       	adc	r31, r19
    261e:	80 81       	ld	r24, Z
    2620:	8e bd       	out	0x2e, r24	; 46
    2622:	0d b4       	in	r0, 0x2d	; 45
    2624:	07 fe       	sbrs	r0, 7
    2626:	fd cf       	rjmp	.-6      	; 0x2622 <rf_tx_tdma_packet+0x160>
    2628:	2f 5f       	subi	r18, 0xFF	; 255
    262a:	3f 4f       	sbci	r19, 0xFF	; 255
    262c:	22 30       	cpi	r18, 0x02	; 2
    262e:	31 05       	cpc	r19, r1
    2630:	99 f7       	brne	.-26     	; 0x2618 <rf_tx_tdma_packet+0x156>
    2632:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    2634:	40 98       	cbi	0x08, 0	; 8
    2636:	8e e3       	ldi	r24, 0x3E	; 62
    2638:	8e bd       	out	0x2e, r24	; 46
    263a:	0d b4       	in	r0, 0x2d	; 45
    263c:	07 fe       	sbrs	r0, 7
    263e:	fd cf       	rjmp	.-6      	; 0x263a <rf_tx_tdma_packet+0x178>
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	f9 01       	movw	r30, r18
    2646:	e3 59       	subi	r30, 0x93	; 147
    2648:	f9 4f       	sbci	r31, 0xF9	; 249
    264a:	80 81       	ld	r24, Z
    264c:	8e bd       	out	0x2e, r24	; 46
    264e:	0d b4       	in	r0, 0x2d	; 45
    2650:	07 fe       	sbrs	r0, 7
    2652:	fd cf       	rjmp	.-6      	; 0x264e <rf_tx_tdma_packet+0x18c>
    2654:	2f 5f       	subi	r18, 0xFF	; 255
    2656:	3f 4f       	sbci	r19, 0xFF	; 255
    2658:	22 30       	cpi	r18, 0x02	; 2
    265a:	31 05       	cpc	r19, r1
    265c:	99 f7       	brne	.-26     	; 0x2644 <rf_tx_tdma_packet+0x182>
    265e:	40 9a       	sbi	0x08, 0	; 8

    nrk_high_speed_timer_wait(slot_start_time,tx_guard_time);
    2660:	b7 01       	movw	r22, r14
    2662:	c6 01       	movw	r24, r12
    2664:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <nrk_high_speed_timer_wait>
    
if (pRTI->cca == TRUE)
    2668:	f8 01       	movw	r30, r16
    266a:	85 81       	ldd	r24, Z+5	; 0x05
    266c:	88 23       	and	r24, r24
    266e:	79 f1       	breq	.+94     	; 0x26ce <rf_tx_tdma_packet+0x20c>
    {
    uint8_t cnt;
      if (!rfSettings.receiveOn)
    2670:	80 91 6f 06 	lds	r24, 0x066F
    2674:	88 23       	and	r24, r24
    2676:	39 f4       	brne	.+14     	; 0x2686 <rf_tx_tdma_packet+0x1c4>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    2678:	40 98       	cbi	0x08, 0	; 8
    267a:	83 e0       	ldi	r24, 0x03	; 3
    267c:	8e bd       	out	0x2e, r24	; 46
    267e:	0d b4       	in	r0, 0x2d	; 45
    2680:	07 fe       	sbrs	r0, 7
    2682:	fd cf       	rjmp	.-6      	; 0x267e <rf_tx_tdma_packet+0x1bc>
    2684:	40 9a       	sbi	0x08, 0	; 8
    2686:	ee 24       	eor	r14, r14

      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    2688:	40 98       	cbi	0x08, 0	; 8
    268a:	85 e0       	ldi	r24, 0x05	; 5
    268c:	8e bd       	out	0x2e, r24	; 46
    268e:	0d b4       	in	r0, 0x2d	; 45
    2690:	07 fe       	sbrs	r0, 7
    2692:	fd cf       	rjmp	.-6      	; 0x268e <rf_tx_tdma_packet+0x1cc>
    2694:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    2696:	40 98       	cbi	0x08, 0	; 8
    2698:	1e bc       	out	0x2e, r1	; 46
    269a:	0d b4       	in	r0, 0x2d	; 45
    269c:	07 fe       	sbrs	r0, 7
    269e:	fd cf       	rjmp	.-6      	; 0x269a <rf_tx_tdma_packet+0x1d8>
    26a0:	fe b4       	in	r15, 0x2e	; 46
    26a2:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    26a4:	e3 94       	inc	r14
	  if (cnt > 100)
    26a6:	f5 e6       	ldi	r31, 0x65	; 101
    26a8:	ef 16       	cp	r14, r31
    26aa:	51 f4       	brne	.+20     	; 0x26c0 <rf_tx_tdma_packet+0x1fe>
	    {
	      ENABLE_GLOBAL_INT ();
    26ac:	78 94       	sei
		nrk_sem_post(radio_sem);
    26ae:	80 91 62 06 	lds	r24, 0x0662
    26b2:	90 91 63 06 	lds	r25, 0x0663
    26b6:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	8a c0       	rjmp	.+276    	; 0x27d4 <rf_tx_tdma_packet+0x312>
		//printf("transmission fail.\n\r");
	      return FALSE;
	    }
	  halWait (100);
    26c0:	84 e6       	ldi	r24, 0x64	; 100
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	0e 94 80 1b 	call	0x3700	; 0x3700 <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    26c8:	f3 fc       	sbrc	r15, 3
    26ca:	08 c0       	rjmp	.+16     	; 0x26dc <rf_tx_tdma_packet+0x21a>
    26cc:	dd cf       	rjmp	.-70     	; 0x2688 <rf_tx_tdma_packet+0x1c6>
	//printf("In basic_rf.c: cnt is %d\n\r", cnt);
    }
  else
    FASTSPI_STROBE (CC2420_STXON);
    26ce:	40 98       	cbi	0x08, 0	; 8
    26d0:	84 e0       	ldi	r24, 0x04	; 4
    26d2:	8e bd       	out	0x2e, r24	; 46
    26d4:	0d b4       	in	r0, 0x2d	; 45
    26d6:	07 fe       	sbrs	r0, 7
    26d8:	fd cf       	rjmp	.-6      	; 0x26d4 <rf_tx_tdma_packet+0x212>
    26da:	40 9a       	sbi	0x08, 0	; 8
	 //nrk_gpio_set(DEBUG_0);

    // get the high speed timer value
    *tx_start_time = TCNT1;
    26dc:	80 91 84 00 	lds	r24, 0x0084
    26e0:	90 91 85 00 	lds	r25, 0x0085
    26e4:	f4 01       	movw	r30, r8
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	80 83       	st	Z, r24
    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    26ea:	40 98       	cbi	0x08, 0	; 8
    26ec:	8e e3       	ldi	r24, 0x3E	; 62
    26ee:	8e bd       	out	0x2e, r24	; 46
    26f0:	0d b4       	in	r0, 0x2d	; 45
    26f2:	07 fe       	sbrs	r0, 7
    26f4:	fd cf       	rjmp	.-6      	; 0x26f0 <rf_tx_tdma_packet+0x22e>
    26f6:	f8 01       	movw	r30, r16
    26f8:	82 81       	ldd	r24, Z+2	; 0x02
    26fa:	48 2f       	mov	r20, r24
    26fc:	55 27       	eor	r21, r21
    26fe:	47 fd       	sbrc	r20, 7
    2700:	50 95       	com	r21
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	0c c0       	rjmp	.+24     	; 0x2720 <rf_tx_tdma_packet+0x25e>
    2708:	f8 01       	movw	r30, r16
    270a:	83 81       	ldd	r24, Z+3	; 0x03
    270c:	94 81       	ldd	r25, Z+4	; 0x04
    270e:	a8 0f       	add	r26, r24
    2710:	b9 1f       	adc	r27, r25
    2712:	8c 91       	ld	r24, X
    2714:	8e bd       	out	0x2e, r24	; 46
    2716:	0d b4       	in	r0, 0x2d	; 45
    2718:	07 fe       	sbrs	r0, 7
    271a:	fd cf       	rjmp	.-6      	; 0x2716 <rf_tx_tdma_packet+0x254>
    271c:	2f 5f       	subi	r18, 0xFF	; 255
    271e:	3f 4f       	sbci	r19, 0xFF	; 255
    2720:	a2 2f       	mov	r26, r18
    2722:	bb 27       	eor	r27, r27
    2724:	a4 17       	cp	r26, r20
    2726:	b5 07       	cpc	r27, r21
    2728:	7c f3       	brlt	.-34     	; 0x2708 <rf_tx_tdma_packet+0x246>
    272a:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    272c:	40 98       	cbi	0x08, 0	; 8
    272e:	8e e3       	ldi	r24, 0x3E	; 62
    2730:	8e bd       	out	0x2e, r24	; 46
    2732:	0d b4       	in	r0, 0x2d	; 45
    2734:	07 fc       	sbrc	r0, 7
    2736:	05 c0       	rjmp	.+10     	; 0x2742 <rf_tx_tdma_packet+0x280>
    2738:	fc cf       	rjmp	.-8      	; 0x2732 <rf_tx_tdma_packet+0x270>
    273a:	0d b4       	in	r0, 0x2d	; 45
    273c:	07 fc       	sbrc	r0, 7
    273e:	48 c0       	rjmp	.+144    	; 0x27d0 <rf_tx_tdma_packet+0x30e>
    2740:	fc cf       	rjmp	.-8      	; 0x273a <rf_tx_tdma_packet+0x278>
    2742:	be bc       	out	0x2e, r11	; 46
    2744:	fa cf       	rjmp	.-12     	; 0x273a <rf_tx_tdma_packet+0x278>

    //nrk_spin_wait_us(200);
//  FASTSPI_STROBE(CC2420_STXON);
   // Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
	while (!SFD_IS_1);
    2746:	4e 9b       	sbis	0x09, 6	; 9
    2748:	fe cf       	rjmp	.-4      	; 0x2746 <rf_tx_tdma_packet+0x284>
		success = rfSettings.ackReceived;
    }*/

    
	// Turn off the receiver if it should not continue to be enabled
    DISABLE_GLOBAL_INT();
    274a:	f8 94       	cli
    // XXX hack, temp out
    //if (!rfSettings.receiveOn) { while (SFD_IS_1); /*FASTSPI_STROBE(CC2420_SRFOFF);*/ }
    // while (SFD_IS_1); 
    while (SFD_IS_1); // wait for packet to finish
    274c:	4e 99       	sbic	0x09, 6	; 9
    274e:	fe cf       	rjmp	.-4      	; 0x274c <rf_tx_tdma_packet+0x28a>
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    2750:	40 98       	cbi	0x08, 0	; 8
    2752:	88 e0       	ldi	r24, 0x08	; 8
    2754:	8e bd       	out	0x2e, r24	; 46
    2756:	0d b4       	in	r0, 0x2d	; 45
    2758:	07 fe       	sbrs	r0, 7
    275a:	fd cf       	rjmp	.-6      	; 0x2756 <rf_tx_tdma_packet+0x294>
    275c:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    275e:	40 98       	cbi	0x08, 0	; 8
    2760:	88 e0       	ldi	r24, 0x08	; 8
    2762:	8e bd       	out	0x2e, r24	; 46
    2764:	0d b4       	in	r0, 0x2d	; 45
    2766:	07 fe       	sbrs	r0, 7
    2768:	fd cf       	rjmp	.-6      	; 0x2764 <rf_tx_tdma_packet+0x2a2>
    276a:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    276c:	40 98       	cbi	0x08, 0	; 8
    276e:	89 e0       	ldi	r24, 0x09	; 9
    2770:	8e bd       	out	0x2e, r24	; 46
    2772:	0d b4       	in	r0, 0x2d	; 45
    2774:	07 fe       	sbrs	r0, 7
    2776:	fd cf       	rjmp	.-6      	; 0x2772 <rf_tx_tdma_packet+0x2b0>
    2778:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    277a:	40 98       	cbi	0x08, 0	; 8
    277c:	89 e0       	ldi	r24, 0x09	; 9
    277e:	8e bd       	out	0x2e, r24	; 46
    2780:	0d b4       	in	r0, 0x2d	; 45
    2782:	07 fe       	sbrs	r0, 7
    2784:	fd cf       	rjmp	.-6      	; 0x2780 <rf_tx_tdma_packet+0x2be>
    2786:	40 9a       	sbi	0x08, 0	; 8

FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    2788:	40 98       	cbi	0x08, 0	; 8
    278a:	86 e0       	ldi	r24, 0x06	; 6
    278c:	8e bd       	out	0x2e, r24	; 46
    278e:	0d b4       	in	r0, 0x2d	; 45
    2790:	07 fe       	sbrs	r0, 7
    2792:	fd cf       	rjmp	.-6      	; 0x278e <rf_tx_tdma_packet+0x2cc>
    2794:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    2796:	78 94       	sei
    

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    2798:	80 91 69 06 	lds	r24, 0x0669
    279c:	8f 5f       	subi	r24, 0xFF	; 255
    279e:	80 93 69 06 	sts	0x0669, r24
//	while (SFD_IS_1);
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    27a2:	80 91 62 06 	lds	r24, 0x0662
    27a6:	90 91 63 06 	lds	r25, 0x0663
    27aa:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	10 c0       	rjmp	.+32     	; 0x27d4 <rf_tx_tdma_packet+0x312>
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    27b4:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    27b6:	f8 01       	movw	r30, r16
    27b8:	86 81       	ldd	r24, Z+6	; 0x06
    27ba:	88 23       	and	r24, r24
    27bc:	09 f0       	breq	.+2      	; 0x27c0 <rf_tx_tdma_packet+0x2fe>
    27be:	e9 ce       	rjmp	.-558    	; 0x2592 <rf_tx_tdma_packet+0xd0>
    27c0:	81 e4       	ldi	r24, 0x41	; 65
    27c2:	98 e8       	ldi	r25, 0x88	; 136
    27c4:	e8 ce       	rjmp	.-560    	; 0x2596 <rf_tx_tdma_packet+0xd4>
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    27c6:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    27c8:	40 98       	cbi	0x08, 0	; 8
    27ca:	8e e3       	ldi	r24, 0x3E	; 62
    27cc:	8e bd       	out	0x2e, r24	; 46
    27ce:	09 cf       	rjmp	.-494    	; 0x25e2 <rf_tx_tdma_packet+0x120>

    // get the high speed timer value
    *tx_start_time = TCNT1;
    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    27d0:	40 9a       	sbi	0x08, 0	; 8
    27d2:	b9 cf       	rjmp	.-142    	; 0x2746 <rf_tx_tdma_packet+0x284>
    27d4:	22 96       	adiw	r28, 0x02	; 2
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	df 91       	pop	r29
    27e2:	cf 91       	pop	r28
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	ff 90       	pop	r15
    27ea:	ef 90       	pop	r14
    27ec:	df 90       	pop	r13
    27ee:	cf 90       	pop	r12
    27f0:	bf 90       	pop	r11
    27f2:	9f 90       	pop	r9
    27f4:	8f 90       	pop	r8
    27f6:	08 95       	ret

000027f8 <rf_addr_decode_set_my_mac>:
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	22 97       	sbiw	r28, 0x02	; 2
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	9a 83       	std	Y+2, r25	; 0x02
    280e:	89 83       	std	Y+1, r24	; 0x01
uint8_t n;
    rfSettings.myAddr = my_mac;
    2810:	90 93 6e 06 	sts	0x066E, r25
    2814:	80 93 6d 06 	sts	0x066D, r24
    nrk_spin_wait_us(500);
    2818:	84 ef       	ldi	r24, 0xF4	; 244
    281a:	91 e0       	ldi	r25, 0x01	; 1
    281c:	0e 94 6f 2c 	call	0x58de	; 0x58de <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    2820:	40 98       	cbi	0x08, 0	; 8
    2822:	8a ee       	ldi	r24, 0xEA	; 234
    2824:	8e bd       	out	0x2e, r24	; 46
    2826:	0d b4       	in	r0, 0x2d	; 45
    2828:	07 fe       	sbrs	r0, 7
    282a:	fd cf       	rjmp	.-6      	; 0x2826 <rf_addr_decode_set_my_mac+0x2e>
    282c:	80 e8       	ldi	r24, 0x80	; 128
    282e:	8e bd       	out	0x2e, r24	; 46
    2830:	0d b4       	in	r0, 0x2d	; 45
    2832:	07 fe       	sbrs	r0, 7
    2834:	fd cf       	rjmp	.-6      	; 0x2830 <rf_addr_decode_set_my_mac+0x38>
    2836:	fe 01       	movw	r30, r28
    2838:	31 96       	adiw	r30, 0x01	; 1
    283a:	9e 01       	movw	r18, r28
    283c:	2d 5f       	subi	r18, 0xFD	; 253
    283e:	3f 4f       	sbci	r19, 0xFF	; 255
    2840:	80 81       	ld	r24, Z
    2842:	8e bd       	out	0x2e, r24	; 46
    2844:	0d b4       	in	r0, 0x2d	; 45
    2846:	07 fe       	sbrs	r0, 7
    2848:	fd cf       	rjmp	.-6      	; 0x2844 <rf_addr_decode_set_my_mac+0x4c>
    284a:	31 96       	adiw	r30, 0x01	; 1
    284c:	e2 17       	cp	r30, r18
    284e:	f3 07       	cpc	r31, r19
    2850:	b9 f7       	brne	.-18     	; 0x2840 <rf_addr_decode_set_my_mac+0x48>
    2852:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    2854:	84 ef       	ldi	r24, 0xF4	; 244
    2856:	91 e0       	ldi	r25, 0x01	; 1
    2858:	0e 94 6f 2c 	call	0x58de	; 0x58de <nrk_spin_wait_us>
    285c:	22 96       	adiw	r28, 0x02	; 2
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	df 91       	pop	r29
    286a:	cf 91       	pop	r28
    286c:	08 95       	ret

0000286e <rf_security_set_key>:
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    286e:	6f 92       	push	r6
    2870:	7f 92       	push	r7
    2872:	8f 92       	push	r8
    2874:	9f 92       	push	r9
    2876:	af 92       	push	r10
    2878:	bf 92       	push	r11
    287a:	cf 92       	push	r12
    287c:	df 92       	push	r13
    287e:	ef 92       	push	r14
    2880:	ff 92       	push	r15
    2882:	0f 93       	push	r16
    2884:	1f 93       	push	r17
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	22 97       	sbiw	r28, 0x02	; 2
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	f8 94       	cli
    2894:	de bf       	out	0x3e, r29	; 62
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	cd bf       	out	0x3d, r28	; 61
    289a:	8c 01       	movw	r16, r24
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    289c:	84 e6       	ldi	r24, 0x64	; 100
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	0e 94 6f 2c 	call	0x58de	; 0x58de <nrk_spin_wait_us>
    28a4:	78 01       	movw	r14, r16
    28a6:	c1 2c       	mov	r12, r1
    28a8:	b1 e0       	ldi	r27, 0x01	; 1
    28aa:	db 2e       	mov	r13, r27
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    28ac:	3e 01       	movw	r6, r28
    28ae:	08 94       	sec
    28b0:	61 1c       	adc	r6, r1
    28b2:	71 1c       	adc	r7, r1
    28b4:	a3 e0       	ldi	r26, 0x03	; 3
    28b6:	8a 2e       	mov	r8, r26
    28b8:	91 2c       	mov	r9, r1
    28ba:	8c 0e       	add	r8, r28
    28bc:	9d 1e       	adc	r9, r29

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    28be:	f7 01       	movw	r30, r14
    28c0:	80 81       	ld	r24, Z
    28c2:	21 81       	ldd	r18, Z+1	; 0x01
    28c4:	33 27       	eor	r19, r19
    28c6:	99 27       	eor	r25, r25
    28c8:	98 2f       	mov	r25, r24
    28ca:	88 27       	eor	r24, r24
    28cc:	28 2b       	or	r18, r24
    28ce:	39 2b       	or	r19, r25
    28d0:	3a 83       	std	Y+2, r19	; 0x02
    28d2:	29 83       	std	Y+1, r18	; 0x01
   	nrk_spin_wait_us(100); 
    28d4:	84 e6       	ldi	r24, 0x64	; 100
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	0e 94 6f 2c 	call	0x58de	; 0x58de <nrk_spin_wait_us>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    28dc:	40 98       	cbi	0x08, 0	; 8
    28de:	8c 2d       	mov	r24, r12
    28e0:	80 68       	ori	r24, 0x80	; 128
    28e2:	8e bd       	out	0x2e, r24	; 46
    28e4:	0d b4       	in	r0, 0x2d	; 45
    28e6:	07 fe       	sbrs	r0, 7
    28e8:	fd cf       	rjmp	.-6      	; 0x28e4 <rf_security_set_key+0x76>
    28ea:	c6 01       	movw	r24, r12
    28ec:	95 95       	asr	r25
    28ee:	87 95       	ror	r24
    28f0:	80 7c       	andi	r24, 0xC0	; 192
    28f2:	8e bd       	out	0x2e, r24	; 46
    28f4:	0d b4       	in	r0, 0x2d	; 45
    28f6:	07 fe       	sbrs	r0, 7
    28f8:	fd cf       	rjmp	.-6      	; 0x28f4 <rf_security_set_key+0x86>
    28fa:	83 01       	movw	r16, r6
    28fc:	53 01       	movw	r10, r6
    28fe:	f5 01       	movw	r30, r10
    2900:	80 81       	ld	r24, Z
    2902:	8e bd       	out	0x2e, r24	; 46
    2904:	0d b4       	in	r0, 0x2d	; 45
    2906:	07 fe       	sbrs	r0, 7
    2908:	fd cf       	rjmp	.-6      	; 0x2904 <rf_security_set_key+0x96>
    290a:	08 94       	sec
    290c:	a1 1c       	adc	r10, r1
    290e:	b1 1c       	adc	r11, r1
    2910:	a8 14       	cp	r10, r8
    2912:	b9 04       	cpc	r11, r9
    2914:	a1 f7       	brne	.-24     	; 0x28fe <rf_security_set_key+0x90>
    2916:	40 9a       	sbi	0x08, 0	; 8
    2918:	08 94       	sec
    291a:	e1 1c       	adc	r14, r1
    291c:	f1 1c       	adc	r15, r1
    291e:	82 e0       	ldi	r24, 0x02	; 2
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	c8 0e       	add	r12, r24
    2924:	d9 1e       	adc	r13, r25
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    2926:	90 e1       	ldi	r25, 0x10	; 16
    2928:	c9 16       	cp	r12, r25
    292a:	91 e0       	ldi	r25, 0x01	; 1
    292c:	d9 06       	cpc	r13, r25
    292e:	39 f6       	brne	.-114    	; 0x28be <rf_security_set_key+0x50>
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
    2930:	84 e6       	ldi	r24, 0x64	; 100
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	0e 94 6f 2c 	call	0x58de	; 0x58de <nrk_spin_wait_us>
    2938:	20 e1       	ldi	r18, 0x10	; 16
    293a:	31 e0       	ldi	r19, 0x01	; 1
    293c:	40 e4       	ldi	r20, 0x40	; 64
    293e:	51 e0       	ldi	r21, 0x01	; 1
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    2940:	1a 82       	std	Y+2, r1	; 0x02
    2942:	19 82       	std	Y+1, r1	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    2944:	40 98       	cbi	0x08, 0	; 8
    2946:	84 2f       	mov	r24, r20
    2948:	80 68       	ori	r24, 0x80	; 128
    294a:	8e bd       	out	0x2e, r24	; 46
    294c:	0d b4       	in	r0, 0x2d	; 45
    294e:	07 fe       	sbrs	r0, 7
    2950:	fd cf       	rjmp	.-6      	; 0x294c <rf_security_set_key+0xde>
    2952:	ca 01       	movw	r24, r20
    2954:	95 95       	asr	r25
    2956:	87 95       	ror	r24
    2958:	80 7c       	andi	r24, 0xC0	; 192
    295a:	8e bd       	out	0x2e, r24	; 46
    295c:	0d b4       	in	r0, 0x2d	; 45
    295e:	07 fe       	sbrs	r0, 7
    2960:	fd cf       	rjmp	.-6      	; 0x295c <rf_security_set_key+0xee>
    2962:	f8 01       	movw	r30, r16
    2964:	80 81       	ld	r24, Z
    2966:	8e bd       	out	0x2e, r24	; 46
    2968:	0d b4       	in	r0, 0x2d	; 45
    296a:	07 fe       	sbrs	r0, 7
    296c:	fd cf       	rjmp	.-6      	; 0x2968 <rf_security_set_key+0xfa>
    296e:	31 96       	adiw	r30, 0x01	; 1
    2970:	ea 15       	cp	r30, r10
    2972:	fb 05       	cpc	r31, r11
    2974:	b9 f7       	brne	.-18     	; 0x2964 <rf_security_set_key+0xf6>
    2976:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    2978:	40 98       	cbi	0x08, 0	; 8
    297a:	82 2f       	mov	r24, r18
    297c:	80 68       	ori	r24, 0x80	; 128
    297e:	8e bd       	out	0x2e, r24	; 46
    2980:	0d b4       	in	r0, 0x2d	; 45
    2982:	07 fe       	sbrs	r0, 7
    2984:	fd cf       	rjmp	.-6      	; 0x2980 <rf_security_set_key+0x112>
    2986:	c9 01       	movw	r24, r18
    2988:	95 95       	asr	r25
    298a:	87 95       	ror	r24
    298c:	80 7c       	andi	r24, 0xC0	; 192
    298e:	8e bd       	out	0x2e, r24	; 46
    2990:	0d b4       	in	r0, 0x2d	; 45
    2992:	07 fe       	sbrs	r0, 7
    2994:	fd cf       	rjmp	.-6      	; 0x2990 <rf_security_set_key+0x122>
    2996:	f8 01       	movw	r30, r16
    2998:	80 81       	ld	r24, Z
    299a:	8e bd       	out	0x2e, r24	; 46
    299c:	0d b4       	in	r0, 0x2d	; 45
    299e:	07 fe       	sbrs	r0, 7
    29a0:	fd cf       	rjmp	.-6      	; 0x299c <rf_security_set_key+0x12e>
    29a2:	31 96       	adiw	r30, 0x01	; 1
    29a4:	ea 15       	cp	r30, r10
    29a6:	fb 05       	cpc	r31, r11
    29a8:	b9 f7       	brne	.-18     	; 0x2998 <rf_security_set_key+0x12a>
    29aa:	40 9a       	sbi	0x08, 0	; 8
    29ac:	2e 5f       	subi	r18, 0xFE	; 254
    29ae:	3f 4f       	sbci	r19, 0xFF	; 255
    29b0:	4e 5f       	subi	r20, 0xFE	; 254
    29b2:	5f 4f       	sbci	r21, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
    29b4:	e1 e0       	ldi	r30, 0x01	; 1
    29b6:	2e 31       	cpi	r18, 0x1E	; 30
    29b8:	3e 07       	cpc	r19, r30
    29ba:	11 f6       	brne	.-124    	; 0x2940 <rf_security_set_key+0xd2>
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	9a 83       	std	Y+2, r25	; 0x02
    29c2:	89 83       	std	Y+1, r24	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    29c4:	40 98       	cbi	0x08, 0	; 8
    29c6:	8e ec       	ldi	r24, 0xCE	; 206
    29c8:	8e bd       	out	0x2e, r24	; 46
    29ca:	0d b4       	in	r0, 0x2d	; 45
    29cc:	07 fe       	sbrs	r0, 7
    29ce:	fd cf       	rjmp	.-6      	; 0x29ca <rf_security_set_key+0x15c>
    29d0:	80 e8       	ldi	r24, 0x80	; 128
    29d2:	8e bd       	out	0x2e, r24	; 46
    29d4:	0d b4       	in	r0, 0x2d	; 45
    29d6:	07 fe       	sbrs	r0, 7
    29d8:	fd cf       	rjmp	.-6      	; 0x29d4 <rf_security_set_key+0x166>
    29da:	f8 01       	movw	r30, r16
    29dc:	80 81       	ld	r24, Z
    29de:	8e bd       	out	0x2e, r24	; 46
    29e0:	0d b4       	in	r0, 0x2d	; 45
    29e2:	07 fe       	sbrs	r0, 7
    29e4:	fd cf       	rjmp	.-6      	; 0x29e0 <rf_security_set_key+0x172>
    29e6:	31 96       	adiw	r30, 0x01	; 1
    29e8:	ea 15       	cp	r30, r10
    29ea:	fb 05       	cpc	r31, r11
    29ec:	b9 f7       	brne	.-18     	; 0x29dc <rf_security_set_key+0x16e>
    29ee:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    29f0:	40 98       	cbi	0x08, 0	; 8
    29f2:	8e e9       	ldi	r24, 0x9E	; 158
    29f4:	8e bd       	out	0x2e, r24	; 46
    29f6:	0d b4       	in	r0, 0x2d	; 45
    29f8:	07 fe       	sbrs	r0, 7
    29fa:	fd cf       	rjmp	.-6      	; 0x29f6 <rf_security_set_key+0x188>
    29fc:	80 e8       	ldi	r24, 0x80	; 128
    29fe:	8e bd       	out	0x2e, r24	; 46
    2a00:	0d b4       	in	r0, 0x2d	; 45
    2a02:	07 fe       	sbrs	r0, 7
    2a04:	fd cf       	rjmp	.-6      	; 0x2a00 <rf_security_set_key+0x192>
    2a06:	f8 01       	movw	r30, r16
    2a08:	80 81       	ld	r24, Z
    2a0a:	8e bd       	out	0x2e, r24	; 46
    2a0c:	0d b4       	in	r0, 0x2d	; 45
    2a0e:	07 fe       	sbrs	r0, 7
    2a10:	fd cf       	rjmp	.-6      	; 0x2a0c <rf_security_set_key+0x19e>
    2a12:	0f 5f       	subi	r16, 0xFF	; 255
    2a14:	1f 4f       	sbci	r17, 0xFF	; 255
    2a16:	0a 15       	cp	r16, r10
    2a18:	1b 05       	cpc	r17, r11
    2a1a:	a9 f7       	brne	.-22     	; 0x2a06 <rf_security_set_key+0x198>
    2a1c:	40 9a       	sbi	0x08, 0	; 8
    2a1e:	22 96       	adiw	r28, 0x02	; 2
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	1f 91       	pop	r17
    2a30:	0f 91       	pop	r16
    2a32:	ff 90       	pop	r15
    2a34:	ef 90       	pop	r14
    2a36:	df 90       	pop	r13
    2a38:	cf 90       	pop	r12
    2a3a:	bf 90       	pop	r11
    2a3c:	af 90       	pop	r10
    2a3e:	9f 90       	pop	r9
    2a40:	8f 90       	pop	r8
    2a42:	7f 90       	pop	r7
    2a44:	6f 90       	pop	r6
    2a46:	08 95       	ret

00002a48 <rf_set_rx>:
}



void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
    2a48:	1f 93       	push	r17
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	ec 01       	movw	r28, r24
    2a50:	16 2f       	mov	r17, r22

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    2a52:	80 91 62 06 	lds	r24, 0x0662
    2a56:	90 91 63 06 	lds	r25, 0x0663
    2a5a:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2a5e:	40 98       	cbi	0x08, 0	; 8
    2a60:	88 e0       	ldi	r24, 0x08	; 8
    2a62:	8e bd       	out	0x2e, r24	; 46
    2a64:	0d b4       	in	r0, 0x2d	; 45
    2a66:	07 fe       	sbrs	r0, 7
    2a68:	fd cf       	rjmp	.-6      	; 0x2a64 <rf_set_rx+0x1c>
    2a6a:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2a6c:	40 98       	cbi	0x08, 0	; 8
    2a6e:	88 e0       	ldi	r24, 0x08	; 8
    2a70:	8e bd       	out	0x2e, r24	; 46
    2a72:	0d b4       	in	r0, 0x2d	; 45
    2a74:	07 fe       	sbrs	r0, 7
    2a76:	fd cf       	rjmp	.-6      	; 0x2a72 <rf_set_rx+0x2a>
    2a78:	40 9a       	sbi	0x08, 0	; 8
    halRfSetChannel(channel);
    2a7a:	81 2f       	mov	r24, r17
    2a7c:	0e 94 be 0b 	call	0x177c	; 0x177c <halRfSetChannel>
    rfSettings.pRxInfo = pRRI;
    2a80:	d0 93 68 06 	sts	0x0668, r29
    2a84:	c0 93 67 06 	sts	0x0667, r28

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2a88:	80 91 62 06 	lds	r24, 0x0662
    2a8c:	90 91 63 06 	lds	r25, 0x0663
    2a90:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    2a94:	df 91       	pop	r29
    2a96:	cf 91       	pop	r28
    2a98:	1f 91       	pop	r17
    2a9a:	08 95       	ret

00002a9c <rf_set_channel>:
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
void rf_set_channel( uint8_t channel )
{
    2a9c:	1f 93       	push	r17
    2a9e:	18 2f       	mov	r17, r24
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    2aa0:	80 91 62 06 	lds	r24, 0x0662
    2aa4:	90 91 63 06 	lds	r25, 0x0663
    2aa8:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
#endif
    halRfSetChannel(channel);
    2aac:	81 2f       	mov	r24, r17
    2aae:	0e 94 be 0b 	call	0x177c	; 0x177c <halRfSetChannel>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2ab2:	80 91 62 06 	lds	r24, 0x0662
    2ab6:	90 91 63 06 	lds	r25, 0x0663
    2aba:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
    2abe:	1f 91       	pop	r17
    2ac0:	08 95       	ret

00002ac2 <rf_init>:
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    2ac2:	df 92       	push	r13
    2ac4:	ef 92       	push	r14
    2ac6:	ff 92       	push	r15
    2ac8:	0f 93       	push	r16
    2aca:	1f 93       	push	r17
    2acc:	cf 93       	push	r28
    2ace:	df 93       	push	r29
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
    2ad4:	22 97       	sbiw	r28, 0x02	; 2
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	de bf       	out	0x3e, r29	; 62
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	cd bf       	out	0x3d, r28	; 61
    2ae0:	8c 01       	movw	r16, r24
    2ae2:	d6 2e       	mov	r13, r22
    2ae4:	5a 83       	std	Y+2, r21	; 0x02
    2ae6:	49 83       	std	Y+1, r20	; 0x01
    2ae8:	79 01       	movw	r14, r18
    uint8_t n;

#ifdef RADIO_PRIORITY_CEILING
   int8_t v;
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    2aea:	64 e1       	ldi	r22, 0x14	; 20
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	0e 94 c9 20 	call	0x4192	; 0x4192 <nrk_sem_create>
    2af2:	90 93 63 06 	sts	0x0663, r25
    2af6:	80 93 62 06 	sts	0x0662, r24
    if (radio_sem == NULL)
    2afa:	89 2b       	or	r24, r25
    2afc:	31 f4       	brne	.+12     	; 0x2b0a <rf_init+0x48>
      nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());
    2afe:	0e 94 10 24 	call	0x4820	; 0x4820 <nrk_get_pid>
    2b02:	68 2f       	mov	r22, r24
    2b04:	8f e0       	ldi	r24, 0x0F	; 15
    2b06:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <nrk_kernel_error_add>

  v = nrk_sem_pend (radio_sem);
    2b0a:	80 91 62 06 	lds	r24, 0x0662
    2b0e:	90 91 63 06 	lds	r25, 0x0663
    2b12:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_sem_pend>
  if (v == NRK_ERROR) {
    2b16:	8f 3f       	cpi	r24, 0xFF	; 255
    2b18:	21 f4       	brne	.+8      	; 0x2b22 <rf_init+0x60>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
    2b1a:	8a e8       	ldi	r24, 0x8A	; 138
    2b1c:	91 e0       	ldi	r25, 0x01	; 1
    2b1e:	0e 94 1f 1b 	call	0x363e	; 0x363e <nrk_kprintf>
  }
#endif

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    SET_VREG_ACTIVE();
    2b22:	15 9a       	sbi	0x02, 5	; 2
    halWait(1000);
    2b24:	88 ee       	ldi	r24, 0xE8	; 232
    2b26:	93 e0       	ldi	r25, 0x03	; 3
    2b28:	0e 94 80 1b 	call	0x3700	; 0x3700 <halWait>
    SET_RESET_ACTIVE();
    2b2c:	16 98       	cbi	0x02, 6	; 2
    halWait(1);
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	0e 94 80 1b 	call	0x3700	; 0x3700 <halWait>
    SET_RESET_INACTIVE();
    2b36:	16 9a       	sbi	0x02, 6	; 2
    halWait(100);
    2b38:	84 e6       	ldi	r24, 0x64	; 100
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	0e 94 80 1b 	call	0x3700	; 0x3700 <halWait>
    // Initialize the FIFOP external interrupt
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();
    2b40:	f8 94       	cli

    // Register modifications
    FASTSPI_STROBE(CC2420_SXOSCON);
    2b42:	40 98       	cbi	0x08, 0	; 8
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	8e bd       	out	0x2e, r24	; 46
    2b48:	0d b4       	in	r0, 0x2d	; 45
    2b4a:	07 fe       	sbrs	r0, 7
    2b4c:	fd cf       	rjmp	.-6      	; 0x2b48 <rf_init+0x86>
    2b4e:	40 9a       	sbi	0x08, 0	; 8
    mdmctrl0=0x02E2;
    2b50:	82 ee       	ldi	r24, 0xE2	; 226
    2b52:	92 e0       	ldi	r25, 0x02	; 2
    2b54:	90 93 66 06 	sts	0x0666, r25
    2b58:	80 93 65 06 	sts	0x0665, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    2b5c:	40 98       	cbi	0x08, 0	; 8
    2b5e:	81 e1       	ldi	r24, 0x11	; 17
    2b60:	8e bd       	out	0x2e, r24	; 46
    2b62:	0d b4       	in	r0, 0x2d	; 45
    2b64:	07 fe       	sbrs	r0, 7
    2b66:	fd cf       	rjmp	.-6      	; 0x2b62 <rf_init+0xa0>
    2b68:	82 e0       	ldi	r24, 0x02	; 2
    2b6a:	8e bd       	out	0x2e, r24	; 46
    2b6c:	0d b4       	in	r0, 0x2d	; 45
    2b6e:	07 fe       	sbrs	r0, 7
    2b70:	fd cf       	rjmp	.-6      	; 0x2b6c <rf_init+0xaa>
    2b72:	82 ee       	ldi	r24, 0xE2	; 226
    2b74:	8e bd       	out	0x2e, r24	; 46
    2b76:	0d b4       	in	r0, 0x2d	; 45
    2b78:	07 fe       	sbrs	r0, 7
    2b7a:	fd cf       	rjmp	.-6      	; 0x2b76 <rf_init+0xb4>
    2b7c:	40 9a       	sbi	0x08, 0	; 8
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    2b7e:	40 98       	cbi	0x08, 0	; 8
    2b80:	82 e1       	ldi	r24, 0x12	; 18
    2b82:	8e bd       	out	0x2e, r24	; 46
    2b84:	0d b4       	in	r0, 0x2d	; 45
    2b86:	07 fe       	sbrs	r0, 7
    2b88:	fd cf       	rjmp	.-6      	; 0x2b84 <rf_init+0xc2>
    2b8a:	85 e0       	ldi	r24, 0x05	; 5
    2b8c:	8e bd       	out	0x2e, r24	; 46
    2b8e:	0d b4       	in	r0, 0x2d	; 45
    2b90:	07 fe       	sbrs	r0, 7
    2b92:	fd cf       	rjmp	.-6      	; 0x2b8e <rf_init+0xcc>
    2b94:	1e bc       	out	0x2e, r1	; 46
    2b96:	0d b4       	in	r0, 0x2d	; 45
    2b98:	07 fe       	sbrs	r0, 7
    2b9a:	fd cf       	rjmp	.-6      	; 0x2b96 <rf_init+0xd4>
    2b9c:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    2b9e:	40 98       	cbi	0x08, 0	; 8
    2ba0:	8c e1       	ldi	r24, 0x1C	; 28
    2ba2:	8e bd       	out	0x2e, r24	; 46
    2ba4:	0d b4       	in	r0, 0x2d	; 45
    2ba6:	07 fe       	sbrs	r0, 7
    2ba8:	fd cf       	rjmp	.-6      	; 0x2ba4 <rf_init+0xe2>
    2baa:	1e bc       	out	0x2e, r1	; 46
    2bac:	0d b4       	in	r0, 0x2d	; 45
    2bae:	07 fe       	sbrs	r0, 7
    2bb0:	fd cf       	rjmp	.-6      	; 0x2bac <rf_init+0xea>
    2bb2:	8f e7       	ldi	r24, 0x7F	; 127
    2bb4:	8e bd       	out	0x2e, r24	; 46
    2bb6:	0d b4       	in	r0, 0x2d	; 45
    2bb8:	07 fe       	sbrs	r0, 7
    2bba:	fd cf       	rjmp	.-6      	; 0x2bb6 <rf_init+0xf4>
    2bbc:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    2bbe:	40 98       	cbi	0x08, 0	; 8
    2bc0:	89 e1       	ldi	r24, 0x19	; 25
    2bc2:	8e bd       	out	0x2e, r24	; 46
    2bc4:	0d b4       	in	r0, 0x2d	; 45
    2bc6:	07 fe       	sbrs	r0, 7
    2bc8:	fd cf       	rjmp	.-6      	; 0x2bc4 <rf_init+0x102>
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	8e bd       	out	0x2e, r24	; 46
    2bce:	0d b4       	in	r0, 0x2d	; 45
    2bd0:	07 fe       	sbrs	r0, 7
    2bd2:	fd cf       	rjmp	.-6      	; 0x2bce <rf_init+0x10c>
    2bd4:	84 ec       	ldi	r24, 0xC4	; 196
    2bd6:	8e bd       	out	0x2e, r24	; 46
    2bd8:	0d b4       	in	r0, 0x2d	; 45
    2bda:	07 fe       	sbrs	r0, 7
    2bdc:	fd cf       	rjmp	.-6      	; 0x2bd8 <rf_init+0x116>
    2bde:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
    2be0:	40 98       	cbi	0x08, 0	; 8
    2be2:	87 e1       	ldi	r24, 0x17	; 23
    2be4:	8e bd       	out	0x2e, r24	; 46
    2be6:	0d b4       	in	r0, 0x2d	; 45
    2be8:	07 fe       	sbrs	r0, 7
    2bea:	fd cf       	rjmp	.-6      	; 0x2be6 <rf_init+0x124>
    2bec:	8a e1       	ldi	r24, 0x1A	; 26
    2bee:	8e bd       	out	0x2e, r24	; 46
    2bf0:	0d b4       	in	r0, 0x2d	; 45
    2bf2:	07 fe       	sbrs	r0, 7
    2bf4:	fd cf       	rjmp	.-6      	; 0x2bf0 <rf_init+0x12e>
    2bf6:	86 e5       	ldi	r24, 0x56	; 86
    2bf8:	8e bd       	out	0x2e, r24	; 46
    2bfa:	0d b4       	in	r0, 0x2d	; 45
    2bfc:	07 fe       	sbrs	r0, 7
    2bfe:	fd cf       	rjmp	.-6      	; 0x2bfa <rf_init+0x138>
    2c00:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    2c02:	84 ef       	ldi	r24, 0xF4	; 244
    2c04:	91 e0       	ldi	r25, 0x01	; 1
    2c06:	0e 94 6f 2c 	call	0x58de	; 0x58de <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    2c0a:	40 98       	cbi	0x08, 0	; 8
    2c0c:	88 ee       	ldi	r24, 0xE8	; 232
    2c0e:	8e bd       	out	0x2e, r24	; 46
    2c10:	0d b4       	in	r0, 0x2d	; 45
    2c12:	07 fe       	sbrs	r0, 7
    2c14:	fd cf       	rjmp	.-6      	; 0x2c10 <rf_init+0x14e>
    2c16:	80 e8       	ldi	r24, 0x80	; 128
    2c18:	8e bd       	out	0x2e, r24	; 46
    2c1a:	0d b4       	in	r0, 0x2d	; 45
    2c1c:	07 fe       	sbrs	r0, 7
    2c1e:	fd cf       	rjmp	.-6      	; 0x2c1a <rf_init+0x158>
    2c20:	fe 01       	movw	r30, r28
    2c22:	31 96       	adiw	r30, 0x01	; 1
    2c24:	9e 01       	movw	r18, r28
    2c26:	2d 5f       	subi	r18, 0xFD	; 253
    2c28:	3f 4f       	sbci	r19, 0xFF	; 255
    2c2a:	80 81       	ld	r24, Z
    2c2c:	8e bd       	out	0x2e, r24	; 46
    2c2e:	0d b4       	in	r0, 0x2d	; 45
    2c30:	07 fe       	sbrs	r0, 7
    2c32:	fd cf       	rjmp	.-6      	; 0x2c2e <rf_init+0x16c>
    2c34:	31 96       	adiw	r30, 0x01	; 1
    2c36:	e2 17       	cp	r30, r18
    2c38:	f3 07       	cpc	r31, r19
    2c3a:	b9 f7       	brne	.-18     	; 0x2c2a <rf_init+0x168>
    2c3c:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    2c3e:	84 ef       	ldi	r24, 0xF4	; 244
    2c40:	91 e0       	ldi	r25, 0x01	; 1
    2c42:	0e 94 6f 2c 	call	0x58de	; 0x58de <nrk_spin_wait_us>

  	ENABLE_GLOBAL_INT();
    2c46:	78 94       	sei

    // Set the RF channel
    halRfSetChannel(channel);
    2c48:	8d 2d       	mov	r24, r13
    2c4a:	0e 94 be 0b 	call	0x177c	; 0x177c <halRfSetChannel>

    // Turn interrupts back on
	ENABLE_GLOBAL_INT();
    2c4e:	78 94       	sei

	// Set the protocol configuration
	rfSettings.pRxInfo = pRRI;
    2c50:	10 93 68 06 	sts	0x0668, r17
    2c54:	00 93 67 06 	sts	0x0667, r16
	rfSettings.panId = panId;
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5c:	90 93 6c 06 	sts	0x066C, r25
    2c60:	80 93 6b 06 	sts	0x066B, r24
	rfSettings.myAddr = myAddr;
    2c64:	f0 92 6e 06 	sts	0x066E, r15
    2c68:	e0 92 6d 06 	sts	0x066D, r14
	rfSettings.txSeqNumber = 0;
    2c6c:	10 92 69 06 	sts	0x0669, r1
        rfSettings.receiveOn = FALSE;
    2c70:	10 92 6f 06 	sts	0x066F, r1

	// Wait for the crystal oscillator to become stable
    halRfWaitForCrystalOscillator();
    2c74:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <halRfWaitForCrystalOscillator>
//    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
//    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
  //	ENABLE_GLOBAL_INT();

#ifdef RADIO_PRIORITY_CEILING
  v = nrk_sem_post (radio_sem);
    2c78:	80 91 62 06 	lds	r24, 0x0662
    2c7c:	90 91 63 06 	lds	r25, 0x0663
    2c80:	0e 94 44 21 	call	0x4288	; 0x4288 <nrk_sem_post>
  if (v == NRK_ERROR) {
    2c84:	8f 3f       	cpi	r24, 0xFF	; 255
    2c86:	39 f4       	brne	.+14     	; 0x2c96 <rf_init+0x1d4>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    2c88:	8d e5       	ldi	r24, 0x5D	; 93
    2c8a:	91 e0       	ldi	r25, 0x01	; 1
    2c8c:	0e 94 1f 1b 	call	0x363e	; 0x363e <nrk_kprintf>
    _nrk_errno_set (2);
    2c90:	82 e0       	ldi	r24, 0x02	; 2
    2c92:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_nrk_errno_set>
  }
#endif

auto_ack_enable=0;
    2c96:	10 92 72 06 	sts	0x0672, r1
security_enable=0;
    2c9a:	10 92 64 06 	sts	0x0664, r1
last_pkt_encrypted=0;
    2c9e:	10 92 73 06 	sts	0x0673, r1
    2ca2:	22 96       	adiw	r28, 0x02	; 2
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	f8 94       	cli
    2ca8:	de bf       	out	0x3e, r29	; 62
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	cd bf       	out	0x3d, r28	; 61
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	1f 91       	pop	r17
    2cb4:	0f 91       	pop	r16
    2cb6:	ff 90       	pop	r15
    2cb8:	ef 90       	pop	r14
    2cba:	df 90       	pop	r13
    2cbc:	08 95       	ret

00002cbe <getc1>:

char getc1()
{
char tmp;

if(uart_rx_buf_start!=uart_rx_buf_end)
    2cbe:	20 91 8b 06 	lds	r18, 0x068B
    2cc2:	80 91 79 06 	lds	r24, 0x0679
    2cc6:	28 17       	cp	r18, r24
    2cc8:	81 f0       	breq	.+32     	; 0x2cea <getc1+0x2c>
   {
   tmp=uart_rx_buf[uart_rx_buf_start];
    2cca:	e2 2f       	mov	r30, r18
    2ccc:	ff 27       	eor	r31, r31
    2cce:	e6 58       	subi	r30, 0x86	; 134
    2cd0:	f9 4f       	sbci	r31, 0xF9	; 249
    2cd2:	e0 81       	ld	r30, Z
   uart_rx_buf_start++;
    2cd4:	82 2f       	mov	r24, r18
    2cd6:	8f 5f       	subi	r24, 0xFF	; 255
    2cd8:	80 93 8b 06 	sts	0x068B, r24
   if(uart_rx_buf_start==MAX_RX_UART_BUF) uart_rx_buf_start=0;
    2cdc:	80 31       	cpi	r24, 0x10	; 16
    2cde:	11 f4       	brne	.+4      	; 0x2ce4 <getc1+0x26>
    2ce0:	10 92 8b 06 	sts	0x068B, r1
   return(tmp);
    2ce4:	8e 2f       	mov	r24, r30
    2ce6:	99 27       	eor	r25, r25
    2ce8:	08 95       	ret
   }
// if buffer empty, then we have to block for it
UART1_WAIT_AND_RECEIVE(tmp);
    2cea:	80 91 c8 00 	lds	r24, 0x00C8
    2cee:	87 ff       	sbrs	r24, 7
    2cf0:	fc cf       	rjmp	.-8      	; 0x2cea <getc1+0x2c>
    2cf2:	80 91 c8 00 	lds	r24, 0x00C8
    2cf6:	8f 77       	andi	r24, 0x7F	; 127
    2cf8:	80 93 c8 00 	sts	0x00C8, r24
    2cfc:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
    2d00:	99 27       	eor	r25, r25
}
    2d02:	08 95       	ret

00002d04 <nrk_uart_data_ready>:

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    2d04:	88 23       	and	r24, r24
    2d06:	51 f4       	brne	.+20     	; 0x2d1c <nrk_uart_data_ready+0x18>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    2d08:	80 91 c0 00 	lds	r24, 0x00C0
    2d0c:	99 27       	eor	r25, r25
    2d0e:	87 fd       	sbrc	r24, 7
    2d10:	90 95       	com	r25
    2d12:	88 27       	eor	r24, r24
    2d14:	99 0f       	add	r25, r25
    2d16:	88 1f       	adc	r24, r24
    2d18:	99 27       	eor	r25, r25
    2d1a:	08 95       	ret
        }
if(uart_num==1)
    2d1c:	81 30       	cpi	r24, 0x01	; 1
    2d1e:	19 f0       	breq	.+6      	; 0x2d26 <nrk_uart_data_ready+0x22>
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	08 95       	ret
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	90 91 8b 06 	lds	r25, 0x068B
    2d2e:	80 91 79 06 	lds	r24, 0x0679
    2d32:	98 17       	cp	r25, r24
    2d34:	11 f0       	breq	.+4      	; 0x2d3a <nrk_uart_data_ready+0x36>
    2d36:	21 e0       	ldi	r18, 0x01	; 1
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	c9 01       	movw	r24, r18
	{
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
}
    2d3c:	08 95       	ret

00002d3e <PORT_INIT>:
NRK_PIN( ADC_INPUT_6, ADC_INPUT_6, NRK_PORTF )
NRK_PIN( ADC_INPUT_7, ADC_INPUT_7, NRK_PORTF )

void PORT_INIT(void) 
{
        MCUCR |= BM(PUD); 
    2d3e:	85 b7       	in	r24, 0x35	; 53
    2d40:	80 61       	ori	r24, 0x10	; 16
    2d42:	85 bf       	out	0x35, r24	; 53
        DDRB  = BM(MOSI) | BM(SCK);  
    2d44:	86 e0       	ldi	r24, 0x06	; 6
    2d46:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
    2d48:	87 e0       	ldi	r24, 0x07	; 7
    2d4a:	85 b9       	out	0x05, r24	; 5
        DDRC  = BM(CSN); 
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	87 b9       	out	0x07, r24	; 7
        PORTC = BM(CSN); 
    2d50:	88 b9       	out	0x08, r24	; 8
        DDRE  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    2d52:	8c e3       	ldi	r24, 0x3C	; 60
    2d54:	8d b9       	out	0x0d, r24	; 13
        DDRD  = BM(UART1_TXD) | BM(DEBUG_2) | BM(DEBUG_3); 
    2d56:	8b e0       	ldi	r24, 0x0B	; 11
    2d58:	8a b9       	out	0x0a, r24	; 10
        PORTE  = BM(UART0_TXD) | BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    2d5a:	8e e3       	ldi	r24, 0x3E	; 62
    2d5c:	8e b9       	out	0x0e, r24	; 14
        DDRA  = BM(VREG_EN) | BM(RESET_N) | BM(DEBUG_0) | BM(DEBUG_1); 
    2d5e:	88 e7       	ldi	r24, 0x78	; 120
    2d60:	81 b9       	out	0x01, r24	; 1
        PORTA = BM(RESET_N); 
    2d62:	80 e4       	ldi	r24, 0x40	; 64
    2d64:	82 b9       	out	0x02, r24	; 2
    2d66:	08 95       	ret

00002d68 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    2d68:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <PORT_INIT>
SPI_INIT();
    2d6c:	80 e5       	ldi	r24, 0x50	; 80
    2d6e:	8c bd       	out	0x2c, r24	; 44
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	8d bd       	out	0x2d, r24	; 45
    2d74:	08 95       	ret

00002d76 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2d76:	8f 3f       	cpi	r24, 0xFF	; 255
    2d78:	09 f4       	brne	.+2      	; 0x2d7c <nrk_gpio_set+0x6>
    2d7a:	7f c0       	rjmp	.+254    	; 0x2e7a <nrk_gpio_set+0x104>
        switch (pin & 0x07) {
    2d7c:	48 2f       	mov	r20, r24
    2d7e:	55 27       	eor	r21, r21
    2d80:	9a 01       	movw	r18, r20
    2d82:	27 70       	andi	r18, 0x07	; 7
    2d84:	30 70       	andi	r19, 0x00	; 0
    2d86:	22 30       	cpi	r18, 0x02	; 2
    2d88:	31 05       	cpc	r19, r1
    2d8a:	a9 f1       	breq	.+106    	; 0x2df6 <nrk_gpio_set+0x80>
    2d8c:	23 30       	cpi	r18, 0x03	; 3
    2d8e:	31 05       	cpc	r19, r1
    2d90:	44 f4       	brge	.+16     	; 0x2da2 <nrk_gpio_set+0x2c>
    2d92:	21 15       	cp	r18, r1
    2d94:	31 05       	cpc	r19, r1
    2d96:	89 f0       	breq	.+34     	; 0x2dba <nrk_gpio_set+0x44>
    2d98:	21 30       	cpi	r18, 0x01	; 1
    2d9a:	31 05       	cpc	r19, r1
    2d9c:	09 f0       	breq	.+2      	; 0x2da0 <nrk_gpio_set+0x2a>
    2d9e:	6d c0       	rjmp	.+218    	; 0x2e7a <nrk_gpio_set+0x104>
    2da0:	1c c0       	rjmp	.+56     	; 0x2dda <nrk_gpio_set+0x64>
    2da2:	24 30       	cpi	r18, 0x04	; 4
    2da4:	31 05       	cpc	r19, r1
    2da6:	09 f4       	brne	.+2      	; 0x2daa <nrk_gpio_set+0x34>
    2da8:	46 c0       	rjmp	.+140    	; 0x2e36 <nrk_gpio_set+0xc0>
    2daa:	24 30       	cpi	r18, 0x04	; 4
    2dac:	31 05       	cpc	r19, r1
    2dae:	9c f1       	brlt	.+102    	; 0x2e16 <nrk_gpio_set+0xa0>
    2db0:	25 30       	cpi	r18, 0x05	; 5
    2db2:	31 05       	cpc	r19, r1
    2db4:	09 f0       	breq	.+2      	; 0x2db8 <nrk_gpio_set+0x42>
    2db6:	61 c0       	rjmp	.+194    	; 0x2e7a <nrk_gpio_set+0x104>
    2db8:	4e c0       	rjmp	.+156    	; 0x2e56 <nrk_gpio_set+0xe0>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2dba:	22 b1       	in	r18, 0x02	; 2
    2dbc:	a3 e0       	ldi	r26, 0x03	; 3
    2dbe:	56 95       	lsr	r21
    2dc0:	47 95       	ror	r20
    2dc2:	aa 95       	dec	r26
    2dc4:	e1 f7       	brne	.-8      	; 0x2dbe <nrk_gpio_set+0x48>
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <nrk_gpio_set+0x5a>
    2dcc:	88 0f       	add	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	4a 95       	dec	r20
    2dd2:	e2 f7       	brpl	.-8      	; 0x2dcc <nrk_gpio_set+0x56>
    2dd4:	28 2b       	or	r18, r24
    2dd6:	22 b9       	out	0x02, r18	; 2
    2dd8:	4d c0       	rjmp	.+154    	; 0x2e74 <nrk_gpio_set+0xfe>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2dda:	85 b1       	in	r24, 0x05	; 5
    2ddc:	f3 e0       	ldi	r31, 0x03	; 3
    2dde:	56 95       	lsr	r21
    2de0:	47 95       	ror	r20
    2de2:	fa 95       	dec	r31
    2de4:	e1 f7       	brne	.-8      	; 0x2dde <nrk_gpio_set+0x68>
    2de6:	02 c0       	rjmp	.+4      	; 0x2dec <nrk_gpio_set+0x76>
    2de8:	22 0f       	add	r18, r18
    2dea:	33 1f       	adc	r19, r19
    2dec:	4a 95       	dec	r20
    2dee:	e2 f7       	brpl	.-8      	; 0x2de8 <nrk_gpio_set+0x72>
    2df0:	82 2b       	or	r24, r18
    2df2:	85 b9       	out	0x05, r24	; 5
    2df4:	3f c0       	rjmp	.+126    	; 0x2e74 <nrk_gpio_set+0xfe>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2df6:	28 b1       	in	r18, 0x08	; 8
    2df8:	e3 e0       	ldi	r30, 0x03	; 3
    2dfa:	56 95       	lsr	r21
    2dfc:	47 95       	ror	r20
    2dfe:	ea 95       	dec	r30
    2e00:	e1 f7       	brne	.-8      	; 0x2dfa <nrk_gpio_set+0x84>
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <nrk_gpio_set+0x96>
    2e08:	88 0f       	add	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	4a 95       	dec	r20
    2e0e:	e2 f7       	brpl	.-8      	; 0x2e08 <nrk_gpio_set+0x92>
    2e10:	28 2b       	or	r18, r24
    2e12:	28 b9       	out	0x08, r18	; 8
    2e14:	2f c0       	rjmp	.+94     	; 0x2e74 <nrk_gpio_set+0xfe>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2e16:	2b b1       	in	r18, 0x0b	; 11
    2e18:	73 e0       	ldi	r23, 0x03	; 3
    2e1a:	56 95       	lsr	r21
    2e1c:	47 95       	ror	r20
    2e1e:	7a 95       	dec	r23
    2e20:	e1 f7       	brne	.-8      	; 0x2e1a <nrk_gpio_set+0xa4>
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <nrk_gpio_set+0xb6>
    2e28:	88 0f       	add	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	4a 95       	dec	r20
    2e2e:	e2 f7       	brpl	.-8      	; 0x2e28 <nrk_gpio_set+0xb2>
    2e30:	28 2b       	or	r18, r24
    2e32:	2b b9       	out	0x0b, r18	; 11
    2e34:	1f c0       	rjmp	.+62     	; 0x2e74 <nrk_gpio_set+0xfe>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2e36:	2e b1       	in	r18, 0x0e	; 14
    2e38:	63 e0       	ldi	r22, 0x03	; 3
    2e3a:	56 95       	lsr	r21
    2e3c:	47 95       	ror	r20
    2e3e:	6a 95       	dec	r22
    2e40:	e1 f7       	brne	.-8      	; 0x2e3a <nrk_gpio_set+0xc4>
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	02 c0       	rjmp	.+4      	; 0x2e4c <nrk_gpio_set+0xd6>
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	4a 95       	dec	r20
    2e4e:	e2 f7       	brpl	.-8      	; 0x2e48 <nrk_gpio_set+0xd2>
    2e50:	28 2b       	or	r18, r24
    2e52:	2e b9       	out	0x0e, r18	; 14
    2e54:	0f c0       	rjmp	.+30     	; 0x2e74 <nrk_gpio_set+0xfe>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2e56:	21 b3       	in	r18, 0x11	; 17
    2e58:	33 e0       	ldi	r19, 0x03	; 3
    2e5a:	56 95       	lsr	r21
    2e5c:	47 95       	ror	r20
    2e5e:	3a 95       	dec	r19
    2e60:	e1 f7       	brne	.-8      	; 0x2e5a <nrk_gpio_set+0xe4>
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	02 c0       	rjmp	.+4      	; 0x2e6c <nrk_gpio_set+0xf6>
    2e68:	88 0f       	add	r24, r24
    2e6a:	99 1f       	adc	r25, r25
    2e6c:	4a 95       	dec	r20
    2e6e:	e2 f7       	brpl	.-8      	; 0x2e68 <nrk_gpio_set+0xf2>
    2e70:	28 2b       	or	r18, r24
    2e72:	21 bb       	out	0x11, r18	; 17
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	08 95       	ret
    2e7a:	8f ef       	ldi	r24, 0xFF	; 255
    2e7c:	9f ef       	ldi	r25, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    2e7e:	08 95       	ret

00002e80 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2e80:	8f 3f       	cpi	r24, 0xFF	; 255
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <nrk_gpio_clr+0x6>
    2e84:	86 c0       	rjmp	.+268    	; 0x2f92 <nrk_gpio_clr+0x112>
        switch (pin & 0x07) {
    2e86:	48 2f       	mov	r20, r24
    2e88:	55 27       	eor	r21, r21
    2e8a:	9a 01       	movw	r18, r20
    2e8c:	27 70       	andi	r18, 0x07	; 7
    2e8e:	30 70       	andi	r19, 0x00	; 0
    2e90:	22 30       	cpi	r18, 0x02	; 2
    2e92:	31 05       	cpc	r19, r1
    2e94:	c1 f1       	breq	.+112    	; 0x2f06 <nrk_gpio_clr+0x86>
    2e96:	23 30       	cpi	r18, 0x03	; 3
    2e98:	31 05       	cpc	r19, r1
    2e9a:	44 f4       	brge	.+16     	; 0x2eac <nrk_gpio_clr+0x2c>
    2e9c:	21 15       	cp	r18, r1
    2e9e:	31 05       	cpc	r19, r1
    2ea0:	89 f0       	breq	.+34     	; 0x2ec4 <nrk_gpio_clr+0x44>
    2ea2:	21 30       	cpi	r18, 0x01	; 1
    2ea4:	31 05       	cpc	r19, r1
    2ea6:	09 f0       	breq	.+2      	; 0x2eaa <nrk_gpio_clr+0x2a>
    2ea8:	74 c0       	rjmp	.+232    	; 0x2f92 <nrk_gpio_clr+0x112>
    2eaa:	1d c0       	rjmp	.+58     	; 0x2ee6 <nrk_gpio_clr+0x66>
    2eac:	24 30       	cpi	r18, 0x04	; 4
    2eae:	31 05       	cpc	r19, r1
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <nrk_gpio_clr+0x34>
    2eb2:	4b c0       	rjmp	.+150    	; 0x2f4a <nrk_gpio_clr+0xca>
    2eb4:	24 30       	cpi	r18, 0x04	; 4
    2eb6:	31 05       	cpc	r19, r1
    2eb8:	bc f1       	brlt	.+110    	; 0x2f28 <nrk_gpio_clr+0xa8>
    2eba:	25 30       	cpi	r18, 0x05	; 5
    2ebc:	31 05       	cpc	r19, r1
    2ebe:	09 f0       	breq	.+2      	; 0x2ec2 <nrk_gpio_clr+0x42>
    2ec0:	68 c0       	rjmp	.+208    	; 0x2f92 <nrk_gpio_clr+0x112>
    2ec2:	54 c0       	rjmp	.+168    	; 0x2f6c <nrk_gpio_clr+0xec>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2ec4:	22 b1       	in	r18, 0x02	; 2
    2ec6:	73 e0       	ldi	r23, 0x03	; 3
    2ec8:	56 95       	lsr	r21
    2eca:	47 95       	ror	r20
    2ecc:	7a 95       	dec	r23
    2ece:	e1 f7       	brne	.-8      	; 0x2ec8 <nrk_gpio_clr+0x48>
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	02 c0       	rjmp	.+4      	; 0x2eda <nrk_gpio_clr+0x5a>
    2ed6:	88 0f       	add	r24, r24
    2ed8:	99 1f       	adc	r25, r25
    2eda:	4a 95       	dec	r20
    2edc:	e2 f7       	brpl	.-8      	; 0x2ed6 <nrk_gpio_clr+0x56>
    2ede:	80 95       	com	r24
    2ee0:	82 23       	and	r24, r18
    2ee2:	82 b9       	out	0x02, r24	; 2
    2ee4:	53 c0       	rjmp	.+166    	; 0x2f8c <nrk_gpio_clr+0x10c>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2ee6:	95 b1       	in	r25, 0x05	; 5
    2ee8:	63 e0       	ldi	r22, 0x03	; 3
    2eea:	56 95       	lsr	r21
    2eec:	47 95       	ror	r20
    2eee:	6a 95       	dec	r22
    2ef0:	e1 f7       	brne	.-8      	; 0x2eea <nrk_gpio_clr+0x6a>
    2ef2:	02 c0       	rjmp	.+4      	; 0x2ef8 <nrk_gpio_clr+0x78>
    2ef4:	22 0f       	add	r18, r18
    2ef6:	33 1f       	adc	r19, r19
    2ef8:	4a 95       	dec	r20
    2efa:	e2 f7       	brpl	.-8      	; 0x2ef4 <nrk_gpio_clr+0x74>
    2efc:	82 2f       	mov	r24, r18
    2efe:	80 95       	com	r24
    2f00:	89 23       	and	r24, r25
    2f02:	85 b9       	out	0x05, r24	; 5
    2f04:	43 c0       	rjmp	.+134    	; 0x2f8c <nrk_gpio_clr+0x10c>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2f06:	28 b1       	in	r18, 0x08	; 8
    2f08:	33 e0       	ldi	r19, 0x03	; 3
    2f0a:	56 95       	lsr	r21
    2f0c:	47 95       	ror	r20
    2f0e:	3a 95       	dec	r19
    2f10:	e1 f7       	brne	.-8      	; 0x2f0a <nrk_gpio_clr+0x8a>
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	02 c0       	rjmp	.+4      	; 0x2f1c <nrk_gpio_clr+0x9c>
    2f18:	88 0f       	add	r24, r24
    2f1a:	99 1f       	adc	r25, r25
    2f1c:	4a 95       	dec	r20
    2f1e:	e2 f7       	brpl	.-8      	; 0x2f18 <nrk_gpio_clr+0x98>
    2f20:	80 95       	com	r24
    2f22:	82 23       	and	r24, r18
    2f24:	88 b9       	out	0x08, r24	; 8
    2f26:	32 c0       	rjmp	.+100    	; 0x2f8c <nrk_gpio_clr+0x10c>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2f28:	2b b1       	in	r18, 0x0b	; 11
    2f2a:	93 e0       	ldi	r25, 0x03	; 3
    2f2c:	56 95       	lsr	r21
    2f2e:	47 95       	ror	r20
    2f30:	9a 95       	dec	r25
    2f32:	e1 f7       	brne	.-8      	; 0x2f2c <nrk_gpio_clr+0xac>
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <nrk_gpio_clr+0xbe>
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	4a 95       	dec	r20
    2f40:	e2 f7       	brpl	.-8      	; 0x2f3a <nrk_gpio_clr+0xba>
    2f42:	80 95       	com	r24
    2f44:	82 23       	and	r24, r18
    2f46:	8b b9       	out	0x0b, r24	; 11
    2f48:	21 c0       	rjmp	.+66     	; 0x2f8c <nrk_gpio_clr+0x10c>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2f4a:	2e b1       	in	r18, 0x0e	; 14
    2f4c:	83 e0       	ldi	r24, 0x03	; 3
    2f4e:	56 95       	lsr	r21
    2f50:	47 95       	ror	r20
    2f52:	8a 95       	dec	r24
    2f54:	e1 f7       	brne	.-8      	; 0x2f4e <nrk_gpio_clr+0xce>
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	02 c0       	rjmp	.+4      	; 0x2f60 <nrk_gpio_clr+0xe0>
    2f5c:	88 0f       	add	r24, r24
    2f5e:	99 1f       	adc	r25, r25
    2f60:	4a 95       	dec	r20
    2f62:	e2 f7       	brpl	.-8      	; 0x2f5c <nrk_gpio_clr+0xdc>
    2f64:	80 95       	com	r24
    2f66:	82 23       	and	r24, r18
    2f68:	8e b9       	out	0x0e, r24	; 14
    2f6a:	10 c0       	rjmp	.+32     	; 0x2f8c <nrk_gpio_clr+0x10c>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2f6c:	21 b3       	in	r18, 0x11	; 17
    2f6e:	b3 e0       	ldi	r27, 0x03	; 3
    2f70:	56 95       	lsr	r21
    2f72:	47 95       	ror	r20
    2f74:	ba 95       	dec	r27
    2f76:	e1 f7       	brne	.-8      	; 0x2f70 <nrk_gpio_clr+0xf0>
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	02 c0       	rjmp	.+4      	; 0x2f82 <nrk_gpio_clr+0x102>
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	4a 95       	dec	r20
    2f84:	e2 f7       	brpl	.-8      	; 0x2f7e <nrk_gpio_clr+0xfe>
    2f86:	80 95       	com	r24
    2f88:	82 23       	and	r24, r18
    2f8a:	81 bb       	out	0x11, r24	; 17
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	08 95       	ret
    2f92:	8f ef       	ldi	r24, 0xFF	; 255
    2f94:	9f ef       	ldi	r25, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    2f96:	08 95       	ret

00002f98 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2f98:	8f 3f       	cpi	r24, 0xFF	; 255
    2f9a:	a9 f1       	breq	.+106    	; 0x3006 <nrk_gpio_get+0x6e>
        switch (pin & 0x07) {
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	33 27       	eor	r19, r19
    2fa0:	c9 01       	movw	r24, r18
    2fa2:	87 70       	andi	r24, 0x07	; 7
    2fa4:	90 70       	andi	r25, 0x00	; 0
    2fa6:	82 30       	cpi	r24, 0x02	; 2
    2fa8:	91 05       	cpc	r25, r1
    2faa:	a9 f0       	breq	.+42     	; 0x2fd6 <nrk_gpio_get+0x3e>
    2fac:	83 30       	cpi	r24, 0x03	; 3
    2fae:	91 05       	cpc	r25, r1
    2fb0:	2c f4       	brge	.+10     	; 0x2fbc <nrk_gpio_get+0x24>
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	61 f0       	breq	.+24     	; 0x2fce <nrk_gpio_get+0x36>
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	31 f5       	brne	.+76     	; 0x3006 <nrk_gpio_get+0x6e>
    2fba:	0b c0       	rjmp	.+22     	; 0x2fd2 <nrk_gpio_get+0x3a>
    2fbc:	84 30       	cpi	r24, 0x04	; 4
    2fbe:	91 05       	cpc	r25, r1
    2fc0:	71 f0       	breq	.+28     	; 0x2fde <nrk_gpio_get+0x46>
    2fc2:	84 30       	cpi	r24, 0x04	; 4
    2fc4:	91 05       	cpc	r25, r1
    2fc6:	4c f0       	brlt	.+18     	; 0x2fda <nrk_gpio_get+0x42>
    2fc8:	05 97       	sbiw	r24, 0x05	; 5
    2fca:	e9 f4       	brne	.+58     	; 0x3006 <nrk_gpio_get+0x6e>
    2fcc:	0a c0       	rjmp	.+20     	; 0x2fe2 <nrk_gpio_get+0x4a>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    2fce:	80 b1       	in	r24, 0x00	; 0
    2fd0:	09 c0       	rjmp	.+18     	; 0x2fe4 <nrk_gpio_get+0x4c>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    2fd2:	83 b1       	in	r24, 0x03	; 3
    2fd4:	07 c0       	rjmp	.+14     	; 0x2fe4 <nrk_gpio_get+0x4c>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    2fd6:	86 b1       	in	r24, 0x06	; 6
    2fd8:	05 c0       	rjmp	.+10     	; 0x2fe4 <nrk_gpio_get+0x4c>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    2fda:	89 b1       	in	r24, 0x09	; 9
    2fdc:	03 c0       	rjmp	.+6      	; 0x2fe4 <nrk_gpio_get+0x4c>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    2fde:	8c b1       	in	r24, 0x0c	; 12
    2fe0:	01 c0       	rjmp	.+2      	; 0x2fe4 <nrk_gpio_get+0x4c>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    2fe2:	8f b1       	in	r24, 0x0f	; 15
    2fe4:	99 27       	eor	r25, r25
    2fe6:	e3 e0       	ldi	r30, 0x03	; 3
    2fe8:	36 95       	lsr	r19
    2fea:	27 95       	ror	r18
    2fec:	ea 95       	dec	r30
    2fee:	e1 f7       	brne	.-8      	; 0x2fe8 <nrk_gpio_get+0x50>
    2ff0:	02 c0       	rjmp	.+4      	; 0x2ff6 <nrk_gpio_get+0x5e>
    2ff2:	95 95       	asr	r25
    2ff4:	87 95       	ror	r24
    2ff6:	2a 95       	dec	r18
    2ff8:	e2 f7       	brpl	.-8      	; 0x2ff2 <nrk_gpio_get+0x5a>
    2ffa:	99 27       	eor	r25, r25
    2ffc:	87 fd       	sbrc	r24, 7
    2ffe:	90 95       	com	r25
    3000:	81 70       	andi	r24, 0x01	; 1
    3002:	90 70       	andi	r25, 0x00	; 0
    3004:	08 95       	ret
    3006:	8f ef       	ldi	r24, 0xFF	; 255
    3008:	9f ef       	ldi	r25, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    300a:	08 95       	ret

0000300c <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    300c:	8f 3f       	cpi	r24, 0xFF	; 255
    300e:	09 f4       	brne	.+2      	; 0x3012 <nrk_gpio_toggle+0x6>
    3010:	03 c1       	rjmp	.+518    	; 0x3218 <nrk_gpio_toggle+0x20c>
        switch (pin & 0x07) {
    3012:	28 2f       	mov	r18, r24
    3014:	33 27       	eor	r19, r19
    3016:	a9 01       	movw	r20, r18
    3018:	47 70       	andi	r20, 0x07	; 7
    301a:	50 70       	andi	r21, 0x00	; 0
    301c:	42 30       	cpi	r20, 0x02	; 2
    301e:	51 05       	cpc	r21, r1
    3020:	09 f4       	brne	.+2      	; 0x3024 <nrk_gpio_toggle+0x18>
    3022:	5c c0       	rjmp	.+184    	; 0x30dc <nrk_gpio_toggle+0xd0>
    3024:	43 30       	cpi	r20, 0x03	; 3
    3026:	51 05       	cpc	r21, r1
    3028:	44 f4       	brge	.+16     	; 0x303a <nrk_gpio_toggle+0x2e>
    302a:	41 15       	cp	r20, r1
    302c:	51 05       	cpc	r21, r1
    302e:	91 f0       	breq	.+36     	; 0x3054 <nrk_gpio_toggle+0x48>
    3030:	41 30       	cpi	r20, 0x01	; 1
    3032:	51 05       	cpc	r21, r1
    3034:	09 f0       	breq	.+2      	; 0x3038 <nrk_gpio_toggle+0x2c>
    3036:	f0 c0       	rjmp	.+480    	; 0x3218 <nrk_gpio_toggle+0x20c>
    3038:	34 c0       	rjmp	.+104    	; 0x30a2 <nrk_gpio_toggle+0x96>
    303a:	44 30       	cpi	r20, 0x04	; 4
    303c:	51 05       	cpc	r21, r1
    303e:	09 f4       	brne	.+2      	; 0x3042 <nrk_gpio_toggle+0x36>
    3040:	9b c0       	rjmp	.+310    	; 0x3178 <nrk_gpio_toggle+0x16c>
    3042:	44 30       	cpi	r20, 0x04	; 4
    3044:	51 05       	cpc	r21, r1
    3046:	0c f4       	brge	.+2      	; 0x304a <nrk_gpio_toggle+0x3e>
    3048:	70 c0       	rjmp	.+224    	; 0x312a <nrk_gpio_toggle+0x11e>
    304a:	45 30       	cpi	r20, 0x05	; 5
    304c:	51 05       	cpc	r21, r1
    304e:	09 f0       	breq	.+2      	; 0x3052 <nrk_gpio_toggle+0x46>
    3050:	e3 c0       	rjmp	.+454    	; 0x3218 <nrk_gpio_toggle+0x20c>
    3052:	b9 c0       	rjmp	.+370    	; 0x31c6 <nrk_gpio_toggle+0x1ba>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    3054:	80 b1       	in	r24, 0x00	; 0
    3056:	a9 01       	movw	r20, r18
    3058:	73 e0       	ldi	r23, 0x03	; 3
    305a:	56 95       	lsr	r21
    305c:	47 95       	ror	r20
    305e:	7a 95       	dec	r23
    3060:	e1 f7       	brne	.-8      	; 0x305a <nrk_gpio_toggle+0x4e>
    3062:	99 27       	eor	r25, r25
    3064:	04 2e       	mov	r0, r20
    3066:	02 c0       	rjmp	.+4      	; 0x306c <nrk_gpio_toggle+0x60>
    3068:	95 95       	asr	r25
    306a:	87 95       	ror	r24
    306c:	0a 94       	dec	r0
    306e:	e2 f7       	brpl	.-8      	; 0x3068 <nrk_gpio_toggle+0x5c>
    3070:	80 fd       	sbrc	r24, 0
    3072:	0b c0       	rjmp	.+22     	; 0x308a <nrk_gpio_toggle+0x7e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    3074:	22 b1       	in	r18, 0x02	; 2
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	02 c0       	rjmp	.+4      	; 0x3080 <nrk_gpio_toggle+0x74>
    307c:	88 0f       	add	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	4a 95       	dec	r20
    3082:	e2 f7       	brpl	.-8      	; 0x307c <nrk_gpio_toggle+0x70>
    3084:	28 2b       	or	r18, r24
    3086:	22 b9       	out	0x02, r18	; 2
    3088:	c4 c0       	rjmp	.+392    	; 0x3212 <nrk_gpio_toggle+0x206>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    308a:	22 b1       	in	r18, 0x02	; 2
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <nrk_gpio_toggle+0x8a>
    3092:	88 0f       	add	r24, r24
    3094:	99 1f       	adc	r25, r25
    3096:	4a 95       	dec	r20
    3098:	e2 f7       	brpl	.-8      	; 0x3092 <nrk_gpio_toggle+0x86>
    309a:	80 95       	com	r24
    309c:	82 23       	and	r24, r18
    309e:	82 b9       	out	0x02, r24	; 2
    30a0:	b8 c0       	rjmp	.+368    	; 0x3212 <nrk_gpio_toggle+0x206>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    30a2:	83 b1       	in	r24, 0x03	; 3
    30a4:	63 e0       	ldi	r22, 0x03	; 3
    30a6:	36 95       	lsr	r19
    30a8:	27 95       	ror	r18
    30aa:	6a 95       	dec	r22
    30ac:	e1 f7       	brne	.-8      	; 0x30a6 <nrk_gpio_toggle+0x9a>
    30ae:	99 27       	eor	r25, r25
    30b0:	02 2e       	mov	r0, r18
    30b2:	02 c0       	rjmp	.+4      	; 0x30b8 <nrk_gpio_toggle+0xac>
    30b4:	95 95       	asr	r25
    30b6:	87 95       	ror	r24
    30b8:	0a 94       	dec	r0
    30ba:	e2 f7       	brpl	.-8      	; 0x30b4 <nrk_gpio_toggle+0xa8>
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <nrk_gpio_toggle+0xb6>
    30be:	44 0f       	add	r20, r20
    30c0:	55 1f       	adc	r21, r21
    30c2:	2a 95       	dec	r18
    30c4:	e2 f7       	brpl	.-8      	; 0x30be <nrk_gpio_toggle+0xb2>
    30c6:	80 fd       	sbrc	r24, 0
    30c8:	03 c0       	rjmp	.+6      	; 0x30d0 <nrk_gpio_toggle+0xc4>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    30ca:	85 b1       	in	r24, 0x05	; 5
    30cc:	84 2b       	or	r24, r20
    30ce:	04 c0       	rjmp	.+8      	; 0x30d8 <nrk_gpio_toggle+0xcc>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    30d0:	95 b1       	in	r25, 0x05	; 5
    30d2:	84 2f       	mov	r24, r20
    30d4:	80 95       	com	r24
    30d6:	89 23       	and	r24, r25
    30d8:	85 b9       	out	0x05, r24	; 5
    30da:	9b c0       	rjmp	.+310    	; 0x3212 <nrk_gpio_toggle+0x206>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    30dc:	86 b1       	in	r24, 0x06	; 6
    30de:	a9 01       	movw	r20, r18
    30e0:	93 e0       	ldi	r25, 0x03	; 3
    30e2:	56 95       	lsr	r21
    30e4:	47 95       	ror	r20
    30e6:	9a 95       	dec	r25
    30e8:	e1 f7       	brne	.-8      	; 0x30e2 <nrk_gpio_toggle+0xd6>
    30ea:	99 27       	eor	r25, r25
    30ec:	04 2e       	mov	r0, r20
    30ee:	02 c0       	rjmp	.+4      	; 0x30f4 <nrk_gpio_toggle+0xe8>
    30f0:	95 95       	asr	r25
    30f2:	87 95       	ror	r24
    30f4:	0a 94       	dec	r0
    30f6:	e2 f7       	brpl	.-8      	; 0x30f0 <nrk_gpio_toggle+0xe4>
    30f8:	80 fd       	sbrc	r24, 0
    30fa:	0b c0       	rjmp	.+22     	; 0x3112 <nrk_gpio_toggle+0x106>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    30fc:	28 b1       	in	r18, 0x08	; 8
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <nrk_gpio_toggle+0xfc>
    3104:	88 0f       	add	r24, r24
    3106:	99 1f       	adc	r25, r25
    3108:	4a 95       	dec	r20
    310a:	e2 f7       	brpl	.-8      	; 0x3104 <nrk_gpio_toggle+0xf8>
    310c:	28 2b       	or	r18, r24
    310e:	28 b9       	out	0x08, r18	; 8
    3110:	80 c0       	rjmp	.+256    	; 0x3212 <nrk_gpio_toggle+0x206>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    3112:	28 b1       	in	r18, 0x08	; 8
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	02 c0       	rjmp	.+4      	; 0x311e <nrk_gpio_toggle+0x112>
    311a:	88 0f       	add	r24, r24
    311c:	99 1f       	adc	r25, r25
    311e:	4a 95       	dec	r20
    3120:	e2 f7       	brpl	.-8      	; 0x311a <nrk_gpio_toggle+0x10e>
    3122:	80 95       	com	r24
    3124:	82 23       	and	r24, r18
    3126:	88 b9       	out	0x08, r24	; 8
    3128:	74 c0       	rjmp	.+232    	; 0x3212 <nrk_gpio_toggle+0x206>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    312a:	89 b1       	in	r24, 0x09	; 9
    312c:	a9 01       	movw	r20, r18
    312e:	b3 e0       	ldi	r27, 0x03	; 3
    3130:	56 95       	lsr	r21
    3132:	47 95       	ror	r20
    3134:	ba 95       	dec	r27
    3136:	e1 f7       	brne	.-8      	; 0x3130 <nrk_gpio_toggle+0x124>
    3138:	99 27       	eor	r25, r25
    313a:	04 2e       	mov	r0, r20
    313c:	02 c0       	rjmp	.+4      	; 0x3142 <nrk_gpio_toggle+0x136>
    313e:	95 95       	asr	r25
    3140:	87 95       	ror	r24
    3142:	0a 94       	dec	r0
    3144:	e2 f7       	brpl	.-8      	; 0x313e <nrk_gpio_toggle+0x132>
    3146:	80 fd       	sbrc	r24, 0
    3148:	0b c0       	rjmp	.+22     	; 0x3160 <nrk_gpio_toggle+0x154>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    314a:	2b b1       	in	r18, 0x0b	; 11
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	02 c0       	rjmp	.+4      	; 0x3156 <nrk_gpio_toggle+0x14a>
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	4a 95       	dec	r20
    3158:	e2 f7       	brpl	.-8      	; 0x3152 <nrk_gpio_toggle+0x146>
    315a:	28 2b       	or	r18, r24
    315c:	2b b9       	out	0x0b, r18	; 11
    315e:	59 c0       	rjmp	.+178    	; 0x3212 <nrk_gpio_toggle+0x206>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    3160:	2b b1       	in	r18, 0x0b	; 11
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	02 c0       	rjmp	.+4      	; 0x316c <nrk_gpio_toggle+0x160>
    3168:	88 0f       	add	r24, r24
    316a:	99 1f       	adc	r25, r25
    316c:	4a 95       	dec	r20
    316e:	e2 f7       	brpl	.-8      	; 0x3168 <nrk_gpio_toggle+0x15c>
    3170:	80 95       	com	r24
    3172:	82 23       	and	r24, r18
    3174:	8b b9       	out	0x0b, r24	; 11
    3176:	4d c0       	rjmp	.+154    	; 0x3212 <nrk_gpio_toggle+0x206>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    3178:	8c b1       	in	r24, 0x0c	; 12
    317a:	a9 01       	movw	r20, r18
    317c:	a3 e0       	ldi	r26, 0x03	; 3
    317e:	56 95       	lsr	r21
    3180:	47 95       	ror	r20
    3182:	aa 95       	dec	r26
    3184:	e1 f7       	brne	.-8      	; 0x317e <nrk_gpio_toggle+0x172>
    3186:	99 27       	eor	r25, r25
    3188:	04 2e       	mov	r0, r20
    318a:	02 c0       	rjmp	.+4      	; 0x3190 <nrk_gpio_toggle+0x184>
    318c:	95 95       	asr	r25
    318e:	87 95       	ror	r24
    3190:	0a 94       	dec	r0
    3192:	e2 f7       	brpl	.-8      	; 0x318c <nrk_gpio_toggle+0x180>
    3194:	80 fd       	sbrc	r24, 0
    3196:	0b c0       	rjmp	.+22     	; 0x31ae <nrk_gpio_toggle+0x1a2>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    3198:	2e b1       	in	r18, 0x0e	; 14
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <nrk_gpio_toggle+0x198>
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	4a 95       	dec	r20
    31a6:	e2 f7       	brpl	.-8      	; 0x31a0 <nrk_gpio_toggle+0x194>
    31a8:	28 2b       	or	r18, r24
    31aa:	2e b9       	out	0x0e, r18	; 14
    31ac:	32 c0       	rjmp	.+100    	; 0x3212 <nrk_gpio_toggle+0x206>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    31ae:	2e b1       	in	r18, 0x0e	; 14
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	02 c0       	rjmp	.+4      	; 0x31ba <nrk_gpio_toggle+0x1ae>
    31b6:	88 0f       	add	r24, r24
    31b8:	99 1f       	adc	r25, r25
    31ba:	4a 95       	dec	r20
    31bc:	e2 f7       	brpl	.-8      	; 0x31b6 <nrk_gpio_toggle+0x1aa>
    31be:	80 95       	com	r24
    31c0:	82 23       	and	r24, r18
    31c2:	8e b9       	out	0x0e, r24	; 14
    31c4:	26 c0       	rjmp	.+76     	; 0x3212 <nrk_gpio_toggle+0x206>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    31c6:	8f b1       	in	r24, 0x0f	; 15
    31c8:	a9 01       	movw	r20, r18
    31ca:	f3 e0       	ldi	r31, 0x03	; 3
    31cc:	56 95       	lsr	r21
    31ce:	47 95       	ror	r20
    31d0:	fa 95       	dec	r31
    31d2:	e1 f7       	brne	.-8      	; 0x31cc <nrk_gpio_toggle+0x1c0>
    31d4:	99 27       	eor	r25, r25
    31d6:	04 2e       	mov	r0, r20
    31d8:	02 c0       	rjmp	.+4      	; 0x31de <nrk_gpio_toggle+0x1d2>
    31da:	95 95       	asr	r25
    31dc:	87 95       	ror	r24
    31de:	0a 94       	dec	r0
    31e0:	e2 f7       	brpl	.-8      	; 0x31da <nrk_gpio_toggle+0x1ce>
    31e2:	80 fd       	sbrc	r24, 0
    31e4:	0b c0       	rjmp	.+22     	; 0x31fc <nrk_gpio_toggle+0x1f0>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    31e6:	21 b3       	in	r18, 0x11	; 17
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	02 c0       	rjmp	.+4      	; 0x31f2 <nrk_gpio_toggle+0x1e6>
    31ee:	88 0f       	add	r24, r24
    31f0:	99 1f       	adc	r25, r25
    31f2:	4a 95       	dec	r20
    31f4:	e2 f7       	brpl	.-8      	; 0x31ee <nrk_gpio_toggle+0x1e2>
    31f6:	28 2b       	or	r18, r24
    31f8:	21 bb       	out	0x11, r18	; 17
    31fa:	0b c0       	rjmp	.+22     	; 0x3212 <nrk_gpio_toggle+0x206>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    31fc:	21 b3       	in	r18, 0x11	; 17
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	02 c0       	rjmp	.+4      	; 0x3208 <nrk_gpio_toggle+0x1fc>
    3204:	88 0f       	add	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	4a 95       	dec	r20
    320a:	e2 f7       	brpl	.-8      	; 0x3204 <nrk_gpio_toggle+0x1f8>
    320c:	80 95       	com	r24
    320e:	82 23       	and	r24, r18
    3210:	81 bb       	out	0x11, r24	; 17
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	08 95       	ret
    3218:	8f ef       	ldi	r24, 0xFF	; 255
    321a:	9f ef       	ldi	r25, 0xFF	; 255
                        }
                        break;
                default: return -1;
        }
        return 1;
}
    321c:	08 95       	ret

0000321e <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    321e:	8f 3f       	cpi	r24, 0xFF	; 255
    3220:	09 f4       	brne	.+2      	; 0x3224 <nrk_gpio_direction+0x6>
    3222:	12 c1       	rjmp	.+548    	; 0x3448 <nrk_gpio_direction+0x22a>
    3224:	48 2f       	mov	r20, r24
    3226:	55 27       	eor	r21, r21
        if (pin_direction == NRK_PIN_INPUT) {
    3228:	66 23       	and	r22, r22
    322a:	09 f0       	breq	.+2      	; 0x322e <nrk_gpio_direction+0x10>
    322c:	90 c0       	rjmp	.+288    	; 0x334e <nrk_gpio_direction+0x130>
                switch (pin & 0x07) {
    322e:	ca 01       	movw	r24, r20
    3230:	87 70       	andi	r24, 0x07	; 7
    3232:	90 70       	andi	r25, 0x00	; 0
    3234:	82 30       	cpi	r24, 0x02	; 2
    3236:	91 05       	cpc	r25, r1
    3238:	09 f4       	brne	.+2      	; 0x323c <nrk_gpio_direction+0x1e>
    323a:	3e c0       	rjmp	.+124    	; 0x32b8 <nrk_gpio_direction+0x9a>
    323c:	83 30       	cpi	r24, 0x03	; 3
    323e:	91 05       	cpc	r25, r1
    3240:	3c f4       	brge	.+14     	; 0x3250 <nrk_gpio_direction+0x32>
    3242:	00 97       	sbiw	r24, 0x00	; 0
    3244:	89 f0       	breq	.+34     	; 0x3268 <nrk_gpio_direction+0x4a>
    3246:	81 30       	cpi	r24, 0x01	; 1
    3248:	91 05       	cpc	r25, r1
    324a:	09 f0       	breq	.+2      	; 0x324e <nrk_gpio_direction+0x30>
    324c:	fd c0       	rjmp	.+506    	; 0x3448 <nrk_gpio_direction+0x22a>
    324e:	21 c0       	rjmp	.+66     	; 0x3292 <nrk_gpio_direction+0x74>
    3250:	84 30       	cpi	r24, 0x04	; 4
    3252:	91 05       	cpc	r25, r1
    3254:	09 f4       	brne	.+2      	; 0x3258 <nrk_gpio_direction+0x3a>
    3256:	54 c0       	rjmp	.+168    	; 0x3300 <nrk_gpio_direction+0xe2>
    3258:	84 30       	cpi	r24, 0x04	; 4
    325a:	91 05       	cpc	r25, r1
    325c:	0c f4       	brge	.+2      	; 0x3260 <nrk_gpio_direction+0x42>
    325e:	3e c0       	rjmp	.+124    	; 0x32dc <nrk_gpio_direction+0xbe>
    3260:	05 97       	sbiw	r24, 0x05	; 5
    3262:	09 f0       	breq	.+2      	; 0x3266 <nrk_gpio_direction+0x48>
    3264:	f1 c0       	rjmp	.+482    	; 0x3448 <nrk_gpio_direction+0x22a>
    3266:	5e c0       	rjmp	.+188    	; 0x3324 <nrk_gpio_direction+0x106>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    3268:	31 b1       	in	r19, 0x01	; 1
    326a:	b3 e0       	ldi	r27, 0x03	; 3
    326c:	56 95       	lsr	r21
    326e:	47 95       	ror	r20
    3270:	ba 95       	dec	r27
    3272:	e1 f7       	brne	.-8      	; 0x326c <nrk_gpio_direction+0x4e>
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	02 c0       	rjmp	.+4      	; 0x327e <nrk_gpio_direction+0x60>
    327a:	88 0f       	add	r24, r24
    327c:	99 1f       	adc	r25, r25
    327e:	4a 95       	dec	r20
    3280:	e2 f7       	brpl	.-8      	; 0x327a <nrk_gpio_direction+0x5c>
    3282:	28 2f       	mov	r18, r24
    3284:	20 95       	com	r18
    3286:	23 23       	and	r18, r19
    3288:	21 b9       	out	0x01, r18	; 1
                                PORTA |= BM((pin & 0xF8) >> 3); 
    328a:	22 b1       	in	r18, 0x02	; 2
    328c:	82 2b       	or	r24, r18
    328e:	82 b9       	out	0x02, r24	; 2
    3290:	d8 c0       	rjmp	.+432    	; 0x3442 <nrk_gpio_direction+0x224>
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    3292:	24 b1       	in	r18, 0x04	; 4
    3294:	a3 e0       	ldi	r26, 0x03	; 3
    3296:	56 95       	lsr	r21
    3298:	47 95       	ror	r20
    329a:	aa 95       	dec	r26
    329c:	e1 f7       	brne	.-8      	; 0x3296 <nrk_gpio_direction+0x78>
    329e:	02 c0       	rjmp	.+4      	; 0x32a4 <nrk_gpio_direction+0x86>
    32a0:	88 0f       	add	r24, r24
    32a2:	99 1f       	adc	r25, r25
    32a4:	4a 95       	dec	r20
    32a6:	e2 f7       	brpl	.-8      	; 0x32a0 <nrk_gpio_direction+0x82>
    32a8:	98 2f       	mov	r25, r24
    32aa:	80 95       	com	r24
    32ac:	82 23       	and	r24, r18
    32ae:	84 b9       	out	0x04, r24	; 4
                                PORTB |= BM((pin & 0xF8) >> 3); 
    32b0:	85 b1       	in	r24, 0x05	; 5
    32b2:	98 2b       	or	r25, r24
    32b4:	95 b9       	out	0x05, r25	; 5
    32b6:	c5 c0       	rjmp	.+394    	; 0x3442 <nrk_gpio_direction+0x224>
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    32b8:	37 b1       	in	r19, 0x07	; 7
    32ba:	f3 e0       	ldi	r31, 0x03	; 3
    32bc:	56 95       	lsr	r21
    32be:	47 95       	ror	r20
    32c0:	fa 95       	dec	r31
    32c2:	e1 f7       	brne	.-8      	; 0x32bc <nrk_gpio_direction+0x9e>
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	02 c0       	rjmp	.+4      	; 0x32ce <nrk_gpio_direction+0xb0>
    32ca:	88 0f       	add	r24, r24
    32cc:	99 1f       	adc	r25, r25
    32ce:	4a 95       	dec	r20
    32d0:	e2 f7       	brpl	.-8      	; 0x32ca <nrk_gpio_direction+0xac>
    32d2:	28 2f       	mov	r18, r24
    32d4:	20 95       	com	r18
    32d6:	23 23       	and	r18, r19
    32d8:	27 b9       	out	0x07, r18	; 7
    32da:	35 c0       	rjmp	.+106    	; 0x3346 <nrk_gpio_direction+0x128>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    32dc:	3a b1       	in	r19, 0x0a	; 10
    32de:	e3 e0       	ldi	r30, 0x03	; 3
    32e0:	56 95       	lsr	r21
    32e2:	47 95       	ror	r20
    32e4:	ea 95       	dec	r30
    32e6:	e1 f7       	brne	.-8      	; 0x32e0 <nrk_gpio_direction+0xc2>
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	02 c0       	rjmp	.+4      	; 0x32f2 <nrk_gpio_direction+0xd4>
    32ee:	88 0f       	add	r24, r24
    32f0:	99 1f       	adc	r25, r25
    32f2:	4a 95       	dec	r20
    32f4:	e2 f7       	brpl	.-8      	; 0x32ee <nrk_gpio_direction+0xd0>
    32f6:	28 2f       	mov	r18, r24
    32f8:	20 95       	com	r18
    32fa:	23 23       	and	r18, r19
    32fc:	2a b9       	out	0x0a, r18	; 10
    32fe:	23 c0       	rjmp	.+70     	; 0x3346 <nrk_gpio_direction+0x128>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    3300:	3d b1       	in	r19, 0x0d	; 13
    3302:	73 e0       	ldi	r23, 0x03	; 3
    3304:	56 95       	lsr	r21
    3306:	47 95       	ror	r20
    3308:	7a 95       	dec	r23
    330a:	e1 f7       	brne	.-8      	; 0x3304 <nrk_gpio_direction+0xe6>
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	02 c0       	rjmp	.+4      	; 0x3316 <nrk_gpio_direction+0xf8>
    3312:	88 0f       	add	r24, r24
    3314:	99 1f       	adc	r25, r25
    3316:	4a 95       	dec	r20
    3318:	e2 f7       	brpl	.-8      	; 0x3312 <nrk_gpio_direction+0xf4>
    331a:	28 2f       	mov	r18, r24
    331c:	20 95       	com	r18
    331e:	23 23       	and	r18, r19
    3320:	2d b9       	out	0x0d, r18	; 13
    3322:	11 c0       	rjmp	.+34     	; 0x3346 <nrk_gpio_direction+0x128>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    3324:	30 b3       	in	r19, 0x10	; 16
    3326:	63 e0       	ldi	r22, 0x03	; 3
    3328:	56 95       	lsr	r21
    332a:	47 95       	ror	r20
    332c:	6a 95       	dec	r22
    332e:	e1 f7       	brne	.-8      	; 0x3328 <nrk_gpio_direction+0x10a>
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	02 c0       	rjmp	.+4      	; 0x333a <nrk_gpio_direction+0x11c>
    3336:	88 0f       	add	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	4a 95       	dec	r20
    333c:	e2 f7       	brpl	.-8      	; 0x3336 <nrk_gpio_direction+0x118>
    333e:	28 2f       	mov	r18, r24
    3340:	20 95       	com	r18
    3342:	23 23       	and	r18, r19
    3344:	20 bb       	out	0x10, r18	; 16
                                PORTB |= BM((pin & 0xF8) >> 3); 
    3346:	25 b1       	in	r18, 0x05	; 5
    3348:	82 2b       	or	r24, r18
    334a:	85 b9       	out	0x05, r24	; 5
    334c:	7a c0       	rjmp	.+244    	; 0x3442 <nrk_gpio_direction+0x224>
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    334e:	9a 01       	movw	r18, r20
    3350:	27 70       	andi	r18, 0x07	; 7
    3352:	30 70       	andi	r19, 0x00	; 0
    3354:	22 30       	cpi	r18, 0x02	; 2
    3356:	31 05       	cpc	r19, r1
    3358:	a9 f1       	breq	.+106    	; 0x33c4 <nrk_gpio_direction+0x1a6>
    335a:	23 30       	cpi	r18, 0x03	; 3
    335c:	31 05       	cpc	r19, r1
    335e:	44 f4       	brge	.+16     	; 0x3370 <nrk_gpio_direction+0x152>
    3360:	21 15       	cp	r18, r1
    3362:	31 05       	cpc	r19, r1
    3364:	89 f0       	breq	.+34     	; 0x3388 <nrk_gpio_direction+0x16a>
    3366:	21 30       	cpi	r18, 0x01	; 1
    3368:	31 05       	cpc	r19, r1
    336a:	09 f0       	breq	.+2      	; 0x336e <nrk_gpio_direction+0x150>
    336c:	6d c0       	rjmp	.+218    	; 0x3448 <nrk_gpio_direction+0x22a>
    336e:	1c c0       	rjmp	.+56     	; 0x33a8 <nrk_gpio_direction+0x18a>
    3370:	24 30       	cpi	r18, 0x04	; 4
    3372:	31 05       	cpc	r19, r1
    3374:	09 f4       	brne	.+2      	; 0x3378 <nrk_gpio_direction+0x15a>
    3376:	46 c0       	rjmp	.+140    	; 0x3404 <nrk_gpio_direction+0x1e6>
    3378:	24 30       	cpi	r18, 0x04	; 4
    337a:	31 05       	cpc	r19, r1
    337c:	9c f1       	brlt	.+102    	; 0x33e4 <nrk_gpio_direction+0x1c6>
    337e:	25 30       	cpi	r18, 0x05	; 5
    3380:	31 05       	cpc	r19, r1
    3382:	09 f0       	breq	.+2      	; 0x3386 <nrk_gpio_direction+0x168>
    3384:	61 c0       	rjmp	.+194    	; 0x3448 <nrk_gpio_direction+0x22a>
    3386:	4e c0       	rjmp	.+156    	; 0x3424 <nrk_gpio_direction+0x206>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    3388:	21 b1       	in	r18, 0x01	; 1
    338a:	33 e0       	ldi	r19, 0x03	; 3
    338c:	56 95       	lsr	r21
    338e:	47 95       	ror	r20
    3390:	3a 95       	dec	r19
    3392:	e1 f7       	brne	.-8      	; 0x338c <nrk_gpio_direction+0x16e>
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	02 c0       	rjmp	.+4      	; 0x339e <nrk_gpio_direction+0x180>
    339a:	88 0f       	add	r24, r24
    339c:	99 1f       	adc	r25, r25
    339e:	4a 95       	dec	r20
    33a0:	e2 f7       	brpl	.-8      	; 0x339a <nrk_gpio_direction+0x17c>
    33a2:	28 2b       	or	r18, r24
    33a4:	21 b9       	out	0x01, r18	; 1
    33a6:	4d c0       	rjmp	.+154    	; 0x3442 <nrk_gpio_direction+0x224>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    33a8:	84 b1       	in	r24, 0x04	; 4
    33aa:	93 e0       	ldi	r25, 0x03	; 3
    33ac:	56 95       	lsr	r21
    33ae:	47 95       	ror	r20
    33b0:	9a 95       	dec	r25
    33b2:	e1 f7       	brne	.-8      	; 0x33ac <nrk_gpio_direction+0x18e>
    33b4:	02 c0       	rjmp	.+4      	; 0x33ba <nrk_gpio_direction+0x19c>
    33b6:	22 0f       	add	r18, r18
    33b8:	33 1f       	adc	r19, r19
    33ba:	4a 95       	dec	r20
    33bc:	e2 f7       	brpl	.-8      	; 0x33b6 <nrk_gpio_direction+0x198>
    33be:	82 2b       	or	r24, r18
    33c0:	84 b9       	out	0x04, r24	; 4
    33c2:	3f c0       	rjmp	.+126    	; 0x3442 <nrk_gpio_direction+0x224>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    33c4:	27 b1       	in	r18, 0x07	; 7
    33c6:	b3 e0       	ldi	r27, 0x03	; 3
    33c8:	56 95       	lsr	r21
    33ca:	47 95       	ror	r20
    33cc:	ba 95       	dec	r27
    33ce:	e1 f7       	brne	.-8      	; 0x33c8 <nrk_gpio_direction+0x1aa>
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	02 c0       	rjmp	.+4      	; 0x33da <nrk_gpio_direction+0x1bc>
    33d6:	88 0f       	add	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	4a 95       	dec	r20
    33dc:	e2 f7       	brpl	.-8      	; 0x33d6 <nrk_gpio_direction+0x1b8>
    33de:	28 2b       	or	r18, r24
    33e0:	27 b9       	out	0x07, r18	; 7
    33e2:	2f c0       	rjmp	.+94     	; 0x3442 <nrk_gpio_direction+0x224>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    33e4:	2a b1       	in	r18, 0x0a	; 10
    33e6:	a3 e0       	ldi	r26, 0x03	; 3
    33e8:	56 95       	lsr	r21
    33ea:	47 95       	ror	r20
    33ec:	aa 95       	dec	r26
    33ee:	e1 f7       	brne	.-8      	; 0x33e8 <nrk_gpio_direction+0x1ca>
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	02 c0       	rjmp	.+4      	; 0x33fa <nrk_gpio_direction+0x1dc>
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	4a 95       	dec	r20
    33fc:	e2 f7       	brpl	.-8      	; 0x33f6 <nrk_gpio_direction+0x1d8>
    33fe:	28 2b       	or	r18, r24
    3400:	2a b9       	out	0x0a, r18	; 10
    3402:	1f c0       	rjmp	.+62     	; 0x3442 <nrk_gpio_direction+0x224>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    3404:	2d b1       	in	r18, 0x0d	; 13
    3406:	f3 e0       	ldi	r31, 0x03	; 3
    3408:	56 95       	lsr	r21
    340a:	47 95       	ror	r20
    340c:	fa 95       	dec	r31
    340e:	e1 f7       	brne	.-8      	; 0x3408 <nrk_gpio_direction+0x1ea>
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	02 c0       	rjmp	.+4      	; 0x341a <nrk_gpio_direction+0x1fc>
    3416:	88 0f       	add	r24, r24
    3418:	99 1f       	adc	r25, r25
    341a:	4a 95       	dec	r20
    341c:	e2 f7       	brpl	.-8      	; 0x3416 <nrk_gpio_direction+0x1f8>
    341e:	28 2b       	or	r18, r24
    3420:	2d b9       	out	0x0d, r18	; 13
    3422:	0f c0       	rjmp	.+30     	; 0x3442 <nrk_gpio_direction+0x224>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    3424:	20 b3       	in	r18, 0x10	; 16
    3426:	e3 e0       	ldi	r30, 0x03	; 3
    3428:	56 95       	lsr	r21
    342a:	47 95       	ror	r20
    342c:	ea 95       	dec	r30
    342e:	e1 f7       	brne	.-8      	; 0x3428 <nrk_gpio_direction+0x20a>
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	02 c0       	rjmp	.+4      	; 0x343a <nrk_gpio_direction+0x21c>
    3436:	88 0f       	add	r24, r24
    3438:	99 1f       	adc	r25, r25
    343a:	4a 95       	dec	r20
    343c:	e2 f7       	brpl	.-8      	; 0x3436 <nrk_gpio_direction+0x218>
    343e:	28 2b       	or	r18, r24
    3440:	20 bb       	out	0x10, r18	; 16
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	08 95       	ret
    3448:	8f ef       	ldi	r24, 0xFF	; 255
    344a:	9f ef       	ldi	r25, 0xFF	; 255
                        default: return -1;
                }
        }
        return 1;
}
    344c:	08 95       	ret

0000344e <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    344e:	88 23       	and	r24, r24
    3450:	19 f0       	breq	.+6      	; 0x3458 <nrk_get_button+0xa>
    3452:	8f ef       	ldi	r24, 0xFF	; 255
    3454:	9f ef       	ldi	r25, 0xFF	; 255
    3456:	08 95       	ret
	 return( !(PINA & BM(BUTTON))); 
    3458:	80 b1       	in	r24, 0x00	; 0
    345a:	99 27       	eor	r25, r25
    345c:	87 fd       	sbrc	r24, 7
    345e:	90 95       	com	r25
    3460:	80 95       	com	r24
    3462:	90 95       	com	r25
    3464:	88 27       	eor	r24, r24
    3466:	99 0f       	add	r25, r25
    3468:	88 1f       	adc	r24, r24
    346a:	99 27       	eor	r25, r25
	} 
return -1;
}
    346c:	08 95       	ret

0000346e <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    346e:	00 97       	sbiw	r24, 0x00	; 0
    3470:	11 f4       	brne	.+4      	; 0x3476 <nrk_led_toggle+0x8>
    3472:	84 e1       	ldi	r24, 0x14	; 20
    3474:	09 c0       	rjmp	.+18     	; 0x3488 <nrk_led_toggle+0x1a>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    3476:	81 30       	cpi	r24, 0x01	; 1
    3478:	91 05       	cpc	r25, r1
    347a:	11 f4       	brne	.+4      	; 0x3480 <nrk_led_toggle+0x12>
    347c:	8c e1       	ldi	r24, 0x1C	; 28
    347e:	04 c0       	rjmp	.+8      	; 0x3488 <nrk_led_toggle+0x1a>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    3480:	82 30       	cpi	r24, 0x02	; 2
    3482:	91 05       	cpc	r25, r1
    3484:	31 f4       	brne	.+12     	; 0x3492 <nrk_led_toggle+0x24>
    3486:	84 e2       	ldi	r24, 0x24	; 36
    3488:	0e 94 06 18 	call	0x300c	; 0x300c <nrk_gpio_toggle>
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	08 95       	ret
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    3492:	03 97       	sbiw	r24, 0x03	; 3
    3494:	19 f0       	breq	.+6      	; 0x349c <nrk_led_toggle+0x2e>
    3496:	8f ef       	ldi	r24, 0xFF	; 255
    3498:	9f ef       	ldi	r25, 0xFF	; 255
    349a:	08 95       	ret
    349c:	8c e2       	ldi	r24, 0x2C	; 44
    349e:	0e 94 06 18 	call	0x300c	; 0x300c <nrk_gpio_toggle>
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	90 e0       	ldi	r25, 0x00	; 0
return -1;
}
    34a6:	08 95       	ret

000034a8 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	11 f4       	brne	.+4      	; 0x34b0 <nrk_led_clr+0x8>
    34ac:	84 e1       	ldi	r24, 0x14	; 20
    34ae:	09 c0       	rjmp	.+18     	; 0x34c2 <nrk_led_clr+0x1a>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    34b0:	81 30       	cpi	r24, 0x01	; 1
    34b2:	91 05       	cpc	r25, r1
    34b4:	11 f4       	brne	.+4      	; 0x34ba <nrk_led_clr+0x12>
    34b6:	8c e1       	ldi	r24, 0x1C	; 28
    34b8:	04 c0       	rjmp	.+8      	; 0x34c2 <nrk_led_clr+0x1a>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    34ba:	82 30       	cpi	r24, 0x02	; 2
    34bc:	91 05       	cpc	r25, r1
    34be:	31 f4       	brne	.+12     	; 0x34cc <nrk_led_clr+0x24>
    34c0:	84 e2       	ldi	r24, 0x24	; 36
    34c2:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <nrk_gpio_set>
    34c6:	81 e0       	ldi	r24, 0x01	; 1
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	08 95       	ret
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    34cc:	03 97       	sbiw	r24, 0x03	; 3
    34ce:	19 f0       	breq	.+6      	; 0x34d6 <nrk_led_clr+0x2e>
    34d0:	8f ef       	ldi	r24, 0xFF	; 255
    34d2:	9f ef       	ldi	r25, 0xFF	; 255
    34d4:	08 95       	ret
    34d6:	8c e2       	ldi	r24, 0x2C	; 44
    34d8:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <nrk_gpio_set>
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	90 e0       	ldi	r25, 0x00	; 0
return -1;
}
    34e0:	08 95       	ret

000034e2 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    34e2:	00 97       	sbiw	r24, 0x00	; 0
    34e4:	11 f4       	brne	.+4      	; 0x34ea <nrk_led_set+0x8>
    34e6:	84 e1       	ldi	r24, 0x14	; 20
    34e8:	09 c0       	rjmp	.+18     	; 0x34fc <nrk_led_set+0x1a>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    34ea:	81 30       	cpi	r24, 0x01	; 1
    34ec:	91 05       	cpc	r25, r1
    34ee:	11 f4       	brne	.+4      	; 0x34f4 <nrk_led_set+0x12>
    34f0:	8c e1       	ldi	r24, 0x1C	; 28
    34f2:	04 c0       	rjmp	.+8      	; 0x34fc <nrk_led_set+0x1a>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    34f4:	82 30       	cpi	r24, 0x02	; 2
    34f6:	91 05       	cpc	r25, r1
    34f8:	31 f4       	brne	.+12     	; 0x3506 <nrk_led_set+0x24>
    34fa:	84 e2       	ldi	r24, 0x24	; 36
    34fc:	0e 94 40 17 	call	0x2e80	; 0x2e80 <nrk_gpio_clr>
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	08 95       	ret
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    3506:	03 97       	sbiw	r24, 0x03	; 3
    3508:	19 f0       	breq	.+6      	; 0x3510 <nrk_led_set+0x2e>
    350a:	8f ef       	ldi	r24, 0xFF	; 255
    350c:	9f ef       	ldi	r25, 0xFF	; 255
    350e:	08 95       	ret
    3510:	8c e2       	ldi	r24, 0x2C	; 44
    3512:	0e 94 40 17 	call	0x2e80	; 0x2e80 <nrk_gpio_clr>
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	90 e0       	ldi	r25, 0x00	; 0
return -1;
}
    351a:	08 95       	ret

0000351c <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    351c:	88 23       	and	r24, r24
    351e:	19 f0       	breq	.+6      	; 0x3526 <nrk_gpio_pullups+0xa>
    3520:	85 b7       	in	r24, 0x35	; 53
    3522:	8f 7e       	andi	r24, 0xEF	; 239
    3524:	02 c0       	rjmp	.+4      	; 0x352a <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    3526:	85 b7       	in	r24, 0x35	; 53
    3528:	80 61       	ori	r24, 0x10	; 16
    352a:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    352c:	81 e0       	ldi	r24, 0x01	; 1
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	08 95       	ret

00003532 <putc0>:
PORTF &= ~BM(pin);
}
*/

void putc0(char x)
{
    3532:	98 2f       	mov	r25, r24
     UART0_WAIT_AND_SEND(x);
    3534:	80 91 c0 00 	lds	r24, 0x00C0
    3538:	85 ff       	sbrs	r24, 5
    353a:	fc cf       	rjmp	.-8      	; 0x3534 <putc0+0x2>
    353c:	80 91 c0 00 	lds	r24, 0x00C0
    3540:	8f 7d       	andi	r24, 0xDF	; 223
    3542:	80 93 c0 00 	sts	0x00C0, r24
    3546:	90 93 c6 00 	sts	0x00C6, r25
    354a:	08 95       	ret

0000354c <putc1>:
}

void putc1(char x)
{
    354c:	98 2f       	mov	r25, r24
     UART1_WAIT_AND_SEND(x);
    354e:	80 91 c8 00 	lds	r24, 0x00C8
    3552:	85 ff       	sbrs	r24, 5
    3554:	fc cf       	rjmp	.-8      	; 0x354e <putc1+0x2>
    3556:	90 93 ce 00 	sts	0x00CE, r25
    355a:	08 95       	ret

0000355c <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    355c:	29 2f       	mov	r18, r25
    355e:	33 27       	eor	r19, r19
    3560:	20 93 c5 00 	sts	0x00C5, r18
    3564:	80 93 c4 00 	sts	0x00C4, r24
    3568:	86 e0       	ldi	r24, 0x06	; 6
    356a:	80 93 c2 00 	sts	0x00C2, r24
    356e:	e1 ec       	ldi	r30, 0xC1	; 193
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	80 81       	ld	r24, Z
    3574:	8b 7f       	andi	r24, 0xFB	; 251
    3576:	80 83       	st	Z, r24
    3578:	a0 ec       	ldi	r26, 0xC0	; 192
    357a:	b0 e0       	ldi	r27, 0x00	; 0
    357c:	8c 91       	ld	r24, X
    357e:	82 60       	ori	r24, 0x02	; 2
    3580:	8c 93       	st	X, r24
ENABLE_UART0();
    3582:	80 81       	ld	r24, Z
    3584:	88 61       	ori	r24, 0x18	; 24
    3586:	80 83       	st	Z, r24
    3588:	08 95       	ret

0000358a <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    358a:	29 2f       	mov	r18, r25
    358c:	33 27       	eor	r19, r19
    358e:	20 93 cd 00 	sts	0x00CD, r18
    3592:	80 93 cc 00 	sts	0x00CC, r24
    3596:	86 e0       	ldi	r24, 0x06	; 6
    3598:	80 93 ca 00 	sts	0x00CA, r24
    359c:	e9 ec       	ldi	r30, 0xC9	; 201
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	8b 7f       	andi	r24, 0xFB	; 251
    35a4:	80 83       	st	Z, r24
    35a6:	a8 ec       	ldi	r26, 0xC8	; 200
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	8c 91       	ld	r24, X
    35ac:	82 60       	ori	r24, 0x02	; 2
    35ae:	8c 93       	st	X, r24
ENABLE_UART1();
    35b0:	80 81       	ld	r24, Z
    35b2:	88 61       	ori	r24, 0x18	; 24
    35b4:	80 83       	st	Z, r24
    35b6:	08 95       	ret

000035b8 <getc0>:


/* get one char from uart */
char getc0(void){
	unsigned char tmp;
	UART0_WAIT_AND_RECEIVE(tmp);
    35b8:	80 91 c0 00 	lds	r24, 0x00C0
    35bc:	87 ff       	sbrs	r24, 7
    35be:	fc cf       	rjmp	.-8      	; 0x35b8 <getc0>
    35c0:	80 91 c0 00 	lds	r24, 0x00C0
    35c4:	8f 77       	andi	r24, 0x7F	; 127
    35c6:	80 93 c0 00 	sts	0x00C0, r24
    35ca:	80 91 c6 00 	lds	r24, 0x00C6
	return tmp;
}
    35ce:	99 27       	eor	r25, r25
    35d0:	08 95       	ret

000035d2 <nrk_setup_uart>:
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{

  setup_uart1(baudrate);
    35d2:	0e 94 c5 1a 	call	0x358a	; 0x358a <setup_uart1>
  //setup_uart0(baudrate);

  stdout = fdevopen( (void *)putc1, (void *)getc1);
    35d6:	6f e5       	ldi	r22, 0x5F	; 95
    35d8:	76 e1       	ldi	r23, 0x16	; 22
    35da:	86 ea       	ldi	r24, 0xA6	; 166
    35dc:	9a e1       	ldi	r25, 0x1A	; 26
    35de:	0e 94 ee 31 	call	0x63dc	; 0x63dc <fdevopen>
    35e2:	90 93 32 07 	sts	0x0732, r25
    35e6:	80 93 31 07 	sts	0x0731, r24
  stdin = fdevopen( (void *)putc1, (void *)getc1);
    35ea:	6f e5       	ldi	r22, 0x5F	; 95
    35ec:	76 e1       	ldi	r23, 0x16	; 22
    35ee:	86 ea       	ldi	r24, 0xA6	; 166
    35f0:	9a e1       	ldi	r25, 0x1A	; 26
    35f2:	0e 94 ee 31 	call	0x63dc	; 0x63dc <fdevopen>
    35f6:	90 93 30 07 	sts	0x0730, r25
    35fa:	80 93 2f 07 	sts	0x072F, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    35fe:	0e 94 07 20 	call	0x400e	; 0x400e <nrk_signal_create>
    3602:	80 93 8a 06 	sts	0x068A, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    3606:	8f 3f       	cpi	r24, 0xFF	; 255
    3608:	19 f4       	brne	.+6      	; 0x3610 <nrk_setup_uart+0x3e>
    360a:	8e e0       	ldi	r24, 0x0E	; 14
    360c:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <nrk_error_add>
   uart_rx_buf_start=0;
    3610:	10 92 8b 06 	sts	0x068B, r1
   uart_rx_buf_end=0;
    3614:	10 92 79 06 	sts	0x0679, r1
   ENABLE_UART1_RX_INT();
    3618:	80 91 c9 00 	lds	r24, 0x00C9
    361c:	80 68       	ori	r24, 0x80	; 128
    361e:	80 93 c9 00 	sts	0x00C9, r24
    3622:	08 95       	ret

00003624 <nrk_uart_rx_signal_get>:
return 0;
}

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    3624:	80 91 8a 06 	lds	r24, 0x068A
    3628:	8f 3f       	cpi	r24, 0xFF	; 255
    362a:	19 f4       	brne	.+6      	; 0x3632 <nrk_uart_rx_signal_get+0xe>
    362c:	8e e0       	ldi	r24, 0x0E	; 14
    362e:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <nrk_error_add>
    3632:	80 91 8a 06 	lds	r24, 0x068A
   return uart_rx_signal;
}
    3636:	99 27       	eor	r25, r25
    3638:	87 fd       	sbrc	r24, 7
    363a:	90 95       	com	r25
    363c:	08 95       	ret

0000363e <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    363e:	cf 93       	push	r28
    3640:	df 93       	push	r29
    3642:	ec 01       	movw	r28, r24
    3644:	07 c0       	rjmp	.+14     	; 0x3654 <nrk_kprintf+0x16>
 char c;
   while((c=pgm_read_byte(addr++)))
        putchar(c);
    3646:	60 91 31 07 	lds	r22, 0x0731
    364a:	70 91 32 07 	lds	r23, 0x0732
    364e:	99 27       	eor	r25, r25
    3650:	0e 94 3c 32 	call	0x6478	; 0x6478 <fputc>
    3654:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
    3656:	21 96       	adiw	r28, 0x01	; 1
    3658:	84 91       	lpm	r24, Z
    365a:	88 23       	and	r24, r24
    365c:	a1 f7       	brne	.-24     	; 0x3646 <nrk_kprintf+0x8>
    365e:	df 91       	pop	r29
    3660:	cf 91       	pop	r28
    3662:	08 95       	ret

00003664 <__vector_36>:
uint8_t uart_rx_buf_start,uart_rx_buf_end;
char uart_rx_buf[MAX_RX_UART_BUF];
nrk_sig_t uart_rx_signal;

SIGNAL(USART1_RX_vect)
{
    3664:	1f 92       	push	r1
    3666:	0f 92       	push	r0
    3668:	0f b6       	in	r0, 0x3f	; 63
    366a:	0f 92       	push	r0
    366c:	11 24       	eor	r1, r1
    366e:	2f 93       	push	r18
    3670:	3f 93       	push	r19
    3672:	4f 93       	push	r20
    3674:	5f 93       	push	r21
    3676:	6f 93       	push	r22
    3678:	7f 93       	push	r23
    367a:	8f 93       	push	r24
    367c:	9f 93       	push	r25
    367e:	af 93       	push	r26
    3680:	bf 93       	push	r27
    3682:	ef 93       	push	r30
    3684:	ff 93       	push	r31
char c;
uint8_t sig;
//cli();
DISABLE_UART1_RX_INT();
    3686:	80 91 c9 00 	lds	r24, 0x00C9
    368a:	8f 77       	andi	r24, 0x7F	; 127
    368c:	80 93 c9 00 	sts	0x00C9, r24
   UART1_WAIT_AND_RECEIVE(c);
    3690:	80 91 c8 00 	lds	r24, 0x00C8
    3694:	87 ff       	sbrs	r24, 7
    3696:	fc cf       	rjmp	.-8      	; 0x3690 <__vector_36+0x2c>
    3698:	80 91 c8 00 	lds	r24, 0x00C8
    369c:	8f 77       	andi	r24, 0x7F	; 127
    369e:	80 93 c8 00 	sts	0x00C8, r24
    36a2:	90 91 ce 00 	lds	r25, 0x00CE
   uart_rx_buf[uart_rx_buf_end]=c;
    36a6:	80 91 79 06 	lds	r24, 0x0679
    36aa:	e8 2f       	mov	r30, r24
    36ac:	ff 27       	eor	r31, r31
    36ae:	e6 58       	subi	r30, 0x86	; 134
    36b0:	f9 4f       	sbci	r31, 0xF9	; 249
    36b2:	90 83       	st	Z, r25
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    36b4:	8f 5f       	subi	r24, 0xFF	; 255
    36b6:	80 93 79 06 	sts	0x0679, r24
   if(uart_rx_buf_end==MAX_RX_UART_BUF) uart_rx_buf_end=0;
    36ba:	80 31       	cpi	r24, 0x10	; 16
    36bc:	11 f4       	brne	.+4      	; 0x36c2 <__vector_36+0x5e>
    36be:	10 92 79 06 	sts	0x0679, r1
   nrk_event_signal(uart_rx_signal);
    36c2:	80 91 8a 06 	lds	r24, 0x068A
    36c6:	0e 94 98 21 	call	0x4330	; 0x4330 <nrk_event_signal>
CLEAR_UART1_RX_INT();
    36ca:	80 91 c8 00 	lds	r24, 0x00C8
    36ce:	8f 77       	andi	r24, 0x7F	; 127
    36d0:	80 93 c8 00 	sts	0x00C8, r24
ENABLE_UART1_RX_INT();
    36d4:	80 91 c9 00 	lds	r24, 0x00C9
    36d8:	80 68       	ori	r24, 0x80	; 128
    36da:	80 93 c9 00 	sts	0x00C9, r24
    36de:	ff 91       	pop	r31
    36e0:	ef 91       	pop	r30
    36e2:	bf 91       	pop	r27
    36e4:	af 91       	pop	r26
    36e6:	9f 91       	pop	r25
    36e8:	8f 91       	pop	r24
    36ea:	7f 91       	pop	r23
    36ec:	6f 91       	pop	r22
    36ee:	5f 91       	pop	r21
    36f0:	4f 91       	pop	r20
    36f2:	3f 91       	pop	r19
    36f4:	2f 91       	pop	r18
    36f6:	0f 90       	pop	r0
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	0f 90       	pop	r0
    36fc:	1f 90       	pop	r1
    36fe:	18 95       	reti

00003700 <halWait>:
	...
#include <nrk_events.h>

#ifndef MAX_RX_UART_BUF
#define MAX_RX_UART_BUF    16
#endif

    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	d1 f7       	brne	.-12     	; 0x3700 <halWait>
    370c:	08 95       	ret

0000370e <read_eeprom_current_image_checksum>:
ENABLE_UART1_RX_INT();
//sei();
}

char getc1()
{
    370e:	fc 01       	movw	r30, r24

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    3710:	a7 e0       	ldi	r26, 0x07	; 7
    3712:	b0 e0       	ldi	r27, 0x00	; 0
    3714:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <__eeprom_read_byte_1F2021>
    3718:	80 2d       	mov	r24, r0
char tmp;
    371a:	80 83       	st	Z, r24

if(uart_rx_buf_start!=uart_rx_buf_end)
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	08 95       	ret

00003722 <write_eeprom_current_image_checksum>:
   {
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    3722:	fc 01       	movw	r30, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    3724:	80 81       	ld	r24, Z
    3726:	a7 e0       	ldi	r26, 0x07	; 7
    3728:	b0 e0       	ldi	r27, 0x00	; 0
    372a:	08 2e       	mov	r0, r24
    372c:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <__eeprom_write_byte_1F2021>
   if(uart_rx_buf_start==MAX_RX_UART_BUF) uart_rx_buf_start=0;
   return(tmp);
   }
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	08 95       	ret

00003736 <nrk_eeprom_read_byte>:

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    3736:	dc 01       	movw	r26, r24
    3738:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <__eeprom_read_byte_1F2021>
    373c:	80 2d       	mov	r24, r0
*
*  This is the Open Source Version of Nano-RK included as part of a Dual
*  Licensing Model. If you are unsure which license to use please refer to:
*  http://www.nanork.org/nano-RK/wiki/Licensing
*
*  This program is free software: you can redistribute it and/or modify
    373e:	99 27       	eor	r25, r25
    3740:	08 95       	ret

00003742 <read_eeprom_mac_address>:
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
    3742:	fc 01       	movw	r30, r24
    3744:	a0 e0       	ldi	r26, 0x00	; 0
    3746:	b0 e0       	ldi	r27, 0x00	; 0
    3748:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <__eeprom_read_byte_1F2021>
    374c:	40 2d       	mov	r20, r0
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*  Contributing Authors (specific to this file):
*  Anthony Rowe
    374e:	43 83       	std	Z+3, r20	; 0x03
    3750:	a1 e0       	ldi	r26, 0x01	; 1
    3752:	b0 e0       	ldi	r27, 0x00	; 0
    3754:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <__eeprom_read_byte_1F2021>
    3758:	80 2d       	mov	r24, r0
*  Nuno Pereira
    375a:	82 83       	std	Z+2, r24	; 0x02
    375c:	a2 e0       	ldi	r26, 0x02	; 2
    375e:	b0 e0       	ldi	r27, 0x00	; 0
    3760:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <__eeprom_read_byte_1F2021>
    3764:	30 2d       	mov	r19, r0
*  Zane Starr
    3766:	31 83       	std	Z+1, r19	; 0x01
    3768:	a3 e0       	ldi	r26, 0x03	; 3
    376a:	b0 e0       	ldi	r27, 0x00	; 0
    376c:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <__eeprom_read_byte_1F2021>
    3770:	90 2d       	mov	r25, r0
*******************************************************************************/
    3772:	90 83       	st	Z, r25
    3774:	a4 e0       	ldi	r26, 0x04	; 4
    3776:	b0 e0       	ldi	r27, 0x00	; 0
    3778:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <__eeprom_read_byte_1F2021>
    377c:	20 2d       	mov	r18, r0

#include <include.h>
#include <ulib.h>
    377e:	83 0f       	add	r24, r19
#include <stdio.h>
    3780:	84 0f       	add	r24, r20
#include <hal.h>
#include <hal_firefly2_2.h>
    3782:	89 0f       	add	r24, r25
    3784:	28 17       	cp	r18, r24
    3786:	19 f4       	brne	.+6      	; 0x378e <read_eeprom_mac_address+0x4c>
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	08 95       	ret
    378e:	8f ef       	ldi	r24, 0xFF	; 255
    3790:	9f ef       	ldi	r25, 0xFF	; 255
#include <avr/interrupt.h>
#include <nrk_pin_define.h>
#include <nrk_error.h>
    3792:	08 95       	ret

00003794 <read_eeprom_channel>:
#include <nrk_events.h>

#ifdef NANORK
    3794:	fc 01       	movw	r30, r24
    3796:	a5 e0       	ldi	r26, 0x05	; 5
    3798:	b0 e0       	ldi	r27, 0x00	; 0
    379a:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <__eeprom_read_byte_1F2021>
    379e:	80 2d       	mov	r24, r0
#include <nrk_cfg.h>
    37a0:	80 83       	st	Z, r24
#endif

    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	08 95       	ret

000037a8 <read_eeprom_load_img_pages>:
#ifndef MAX_RX_UART_BUF
#define MAX_RX_UART_BUF    16
#endif


uint8_t uart_rx_buf_start,uart_rx_buf_end;
    37a8:	fc 01       	movw	r30, r24
    37aa:	a6 e0       	ldi	r26, 0x06	; 6
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <__eeprom_read_byte_1F2021>
    37b2:	80 2d       	mov	r24, r0
char uart_rx_buf[MAX_RX_UART_BUF];
    37b4:	80 83       	st	Z, r24
nrk_sig_t uart_rx_signal;

    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	08 95       	ret

000037bc <read_eeprom_aes_key>:
SIGNAL(USART1_RX_vect)
{
char c;
    37bc:	ac 01       	movw	r20, r24
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	d9 01       	movw	r26, r18
    37c4:	18 96       	adiw	r26, 0x08	; 8
    37c6:	0e 94 d8 34 	call	0x69b0	; 0x69b0 <__eeprom_read_byte_1F2021>
    37ca:	80 2d       	mov	r24, r0
uint8_t sig;
//cli();
DISABLE_UART1_RX_INT();
    37cc:	fa 01       	movw	r30, r20
    37ce:	e2 0f       	add	r30, r18
    37d0:	f3 1f       	adc	r31, r19
    37d2:	80 83       	st	Z, r24
    37d4:	2f 5f       	subi	r18, 0xFF	; 255
    37d6:	3f 4f       	sbci	r19, 0xFF	; 255

SIGNAL(USART1_RX_vect)
{
char c;
uint8_t sig;
//cli();
    37d8:	20 31       	cpi	r18, 0x10	; 16
    37da:	31 05       	cpc	r19, r1
    37dc:	91 f7       	brne	.-28     	; 0x37c2 <read_eeprom_aes_key+0x6>
DISABLE_UART1_RX_INT();
   UART1_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	08 95       	ret

000037e4 <nrk_eeprom_write_byte>:
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    37e4:	dc 01       	movw	r26, r24
    37e6:	06 2e       	mov	r0, r22
    37e8:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <__eeprom_write_byte_1F2021>
    37ec:	08 95       	ret

000037ee <write_eeprom_load_img_pages>:
#include <nrk_cfg.h>
#endif

#ifdef NRK_UART_BUF
#include <nrk_events.h>

    37ee:	fc 01       	movw	r30, r24
    37f0:	80 81       	ld	r24, Z
    37f2:	a6 e0       	ldi	r26, 0x06	; 6
    37f4:	b0 e0       	ldi	r27, 0x00	; 0
    37f6:	08 2e       	mov	r0, r24
    37f8:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <__eeprom_write_byte_1F2021>
#ifndef MAX_RX_UART_BUF
#define MAX_RX_UART_BUF    16
#endif
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	08 95       	ret

00003802 <write_eeprom_aes_key>:
DISABLE_UART1_RX_INT();
   UART1_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
   if(uart_rx_buf_end==MAX_RX_UART_BUF) uart_rx_buf_end=0;
    3802:	ac 01       	movw	r20, r24
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	d9 01       	movw	r26, r18
    380a:	18 96       	adiw	r26, 0x08	; 8
    380c:	fa 01       	movw	r30, r20
    380e:	e2 0f       	add	r30, r18
    3810:	f3 1f       	adc	r31, r19
    3812:	80 81       	ld	r24, Z
    3814:	08 2e       	mov	r0, r24
    3816:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <__eeprom_write_byte_1F2021>
    381a:	2f 5f       	subi	r18, 0xFF	; 255
    381c:	3f 4f       	sbci	r19, 0xFF	; 255
   nrk_event_signal(uart_rx_signal);
CLEAR_UART1_RX_INT();
    381e:	20 31       	cpi	r18, 0x10	; 16
    3820:	31 05       	cpc	r19, r1
    3822:	91 f7       	brne	.-28     	; 0x3808 <write_eeprom_aes_key+0x6>
ENABLE_UART1_RX_INT();
//sei();
}
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	08 95       	ret

0000382a <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    382a:	f8 94       	cli
    382c:	08 95       	ret

0000382e <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    382e:	78 94       	sei
    3830:	08 95       	ret

00003832 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    3832:	85 e6       	ldi	r24, 0x65	; 101
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	08 95       	ret

00003838 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    3838:	0e 94 5e 29 	call	0x52bc	; 0x52bc <_nrk_scheduler>
    383c:	08 95       	ret

0000383e <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    383e:	ef 92       	push	r14
    3840:	ff 92       	push	r15
    3842:	0f 93       	push	r16
    3844:	1f 93       	push	r17
    3846:	cf 93       	push	r28
    3848:	df 93       	push	r29
    384a:	ec 01       	movw	r28, r24
    384c:	8b 01       	movw	r16, r22
    384e:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    3850:	89 85       	ldd	r24, Y+9	; 0x09
    3852:	82 30       	cpi	r24, 0x02	; 2
    3854:	21 f0       	breq	.+8      	; 0x385e <nrk_TCB_init+0x20>
    	Task->task_ID=nrk_task_init_cnt;
    3856:	80 91 f9 06 	lds	r24, 0x06F9
    385a:	88 83       	st	Y, r24
    385c:	01 c0       	rjmp	.+2      	; 0x3860 <nrk_TCB_init+0x22>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    385e:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    3860:	80 91 f9 06 	lds	r24, 0x06F9
    3864:	83 30       	cpi	r24, 0x03	; 3
    3866:	20 f0       	brcs	.+8      	; 0x3870 <nrk_TCB_init+0x32>
    3868:	60 e0       	ldi	r22, 0x00	; 0
    386a:	87 e0       	ldi	r24, 0x07	; 7
    386c:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    3870:	89 85       	ldd	r24, Y+9	; 0x09
    3872:	82 30       	cpi	r24, 0x02	; 2
    3874:	29 f0       	breq	.+10     	; 0x3880 <nrk_TCB_init+0x42>
    3876:	80 91 f9 06 	lds	r24, 0x06F9
    387a:	8f 5f       	subi	r24, 0xFF	; 255
    387c:	80 93 f9 06 	sts	0x06F9, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    3880:	80 91 f9 06 	lds	r24, 0x06F9
    3884:	88 23       	and	r24, r24
    3886:	19 f4       	brne	.+6      	; 0x388e <nrk_TCB_init+0x50>
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	80 93 f9 06 	sts	0x06F9, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    388e:	88 81       	ld	r24, Y
    3890:	99 27       	eor	r25, r25
    3892:	87 fd       	sbrc	r24, 7
    3894:	90 95       	com	r25
    3896:	fc 01       	movw	r30, r24
    3898:	45 e0       	ldi	r20, 0x05	; 5
    389a:	ee 0f       	add	r30, r30
    389c:	ff 1f       	adc	r31, r31
    389e:	4a 95       	dec	r20
    38a0:	e1 f7       	brne	.-8      	; 0x389a <nrk_TCB_init+0x5c>
    38a2:	e8 0f       	add	r30, r24
    38a4:	f9 1f       	adc	r31, r25
    38a6:	e2 57       	subi	r30, 0x72	; 114
    38a8:	f9 4f       	sbci	r31, 0xF9	; 249
    38aa:	11 83       	std	Z+1, r17	; 0x01
    38ac:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    38ae:	88 81       	ld	r24, Y
    38b0:	99 27       	eor	r25, r25
    38b2:	87 fd       	sbrc	r24, 7
    38b4:	90 95       	com	r25
    38b6:	fc 01       	movw	r30, r24
    38b8:	35 e0       	ldi	r19, 0x05	; 5
    38ba:	ee 0f       	add	r30, r30
    38bc:	ff 1f       	adc	r31, r31
    38be:	3a 95       	dec	r19
    38c0:	e1 f7       	brne	.-8      	; 0x38ba <nrk_TCB_init+0x7c>
    38c2:	e8 0f       	add	r30, r24
    38c4:	f9 1f       	adc	r31, r25
    38c6:	e2 57       	subi	r30, 0x72	; 114
    38c8:	f9 4f       	sbci	r31, 0xF9	; 249
    38ca:	88 85       	ldd	r24, Y+8	; 0x08
    38cc:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    38ce:	88 81       	ld	r24, Y
    38d0:	99 27       	eor	r25, r25
    38d2:	87 fd       	sbrc	r24, 7
    38d4:	90 95       	com	r25
    38d6:	fc 01       	movw	r30, r24
    38d8:	25 e0       	ldi	r18, 0x05	; 5
    38da:	ee 0f       	add	r30, r30
    38dc:	ff 1f       	adc	r31, r31
    38de:	2a 95       	dec	r18
    38e0:	e1 f7       	brne	.-8      	; 0x38da <nrk_TCB_init+0x9c>
    38e2:	e8 0f       	add	r30, r24
    38e4:	f9 1f       	adc	r31, r25
    38e6:	e2 57       	subi	r30, 0x72	; 114
    38e8:	f9 4f       	sbci	r31, 0xF9	; 249
    38ea:	83 e0       	ldi	r24, 0x03	; 3
    38ec:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    38ee:	28 81       	ld	r18, Y
    38f0:	82 2f       	mov	r24, r18
    38f2:	99 27       	eor	r25, r25
    38f4:	87 fd       	sbrc	r24, 7
    38f6:	90 95       	com	r25
    38f8:	fc 01       	movw	r30, r24
    38fa:	05 e0       	ldi	r16, 0x05	; 5
    38fc:	ee 0f       	add	r30, r30
    38fe:	ff 1f       	adc	r31, r31
    3900:	0a 95       	dec	r16
    3902:	e1 f7       	brne	.-8      	; 0x38fc <nrk_TCB_init+0xbe>
    3904:	e8 0f       	add	r30, r24
    3906:	f9 1f       	adc	r31, r25
    3908:	e2 57       	subi	r30, 0x72	; 114
    390a:	f9 4f       	sbci	r31, 0xF9	; 249
    390c:	20 87       	std	Z+8, r18	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    390e:	88 81       	ld	r24, Y
    3910:	99 27       	eor	r25, r25
    3912:	87 fd       	sbrc	r24, 7
    3914:	90 95       	com	r25
    3916:	fc 01       	movw	r30, r24
    3918:	15 e0       	ldi	r17, 0x05	; 5
    391a:	ee 0f       	add	r30, r30
    391c:	ff 1f       	adc	r31, r31
    391e:	1a 95       	dec	r17
    3920:	e1 f7       	brne	.-8      	; 0x391a <nrk_TCB_init+0xdc>
    3922:	e8 0f       	add	r30, r24
    3924:	f9 1f       	adc	r31, r25
    3926:	e2 57       	subi	r30, 0x72	; 114
    3928:	f9 4f       	sbci	r31, 0xF9	; 249
    392a:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( Task->period );
    392c:	08 81       	ld	r16, Y
    392e:	11 27       	eor	r17, r17
    3930:	07 fd       	sbrc	r16, 7
    3932:	10 95       	com	r17
    3934:	2b 85       	ldd	r18, Y+11	; 0x0b
    3936:	3c 85       	ldd	r19, Y+12	; 0x0c
    3938:	4d 85       	ldd	r20, Y+13	; 0x0d
    393a:	5e 85       	ldd	r21, Y+14	; 0x0e
    393c:	6f 85       	ldd	r22, Y+15	; 0x0f
    393e:	78 89       	ldd	r23, Y+16	; 0x10
    3940:	89 89       	ldd	r24, Y+17	; 0x11
    3942:	9a 89       	ldd	r25, Y+18	; 0x12
    3944:	0e 94 83 27 	call	0x4f06	; 0x4f06 <_nrk_time_to_ticks>
    3948:	f8 01       	movw	r30, r16
    394a:	b5 e0       	ldi	r27, 0x05	; 5
    394c:	ee 0f       	add	r30, r30
    394e:	ff 1f       	adc	r31, r31
    3950:	ba 95       	dec	r27
    3952:	e1 f7       	brne	.-8      	; 0x394c <nrk_TCB_init+0x10e>
    3954:	e0 0f       	add	r30, r16
    3956:	f1 1f       	adc	r31, r17
    3958:	e2 57       	subi	r30, 0x72	; 114
    395a:	f9 4f       	sbci	r31, 0xF9	; 249
    395c:	94 8f       	std	Z+28, r25	; 0x1c
    395e:	83 8f       	std	Z+27, r24	; 0x1b
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( Task->offset);
    3960:	08 81       	ld	r16, Y
    3962:	11 27       	eor	r17, r17
    3964:	07 fd       	sbrc	r16, 7
    3966:	10 95       	com	r17
    3968:	2b 8d       	ldd	r18, Y+27	; 0x1b
    396a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    396c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    396e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3970:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3972:	78 a1       	ldd	r23, Y+32	; 0x20
    3974:	89 a1       	ldd	r24, Y+33	; 0x21
    3976:	9a a1       	ldd	r25, Y+34	; 0x22
    3978:	0e 94 83 27 	call	0x4f06	; 0x4f06 <_nrk_time_to_ticks>
    397c:	f8 01       	movw	r30, r16
    397e:	a5 e0       	ldi	r26, 0x05	; 5
    3980:	ee 0f       	add	r30, r30
    3982:	ff 1f       	adc	r31, r31
    3984:	aa 95       	dec	r26
    3986:	e1 f7       	brne	.-8      	; 0x3980 <nrk_TCB_init+0x142>
    3988:	e0 0f       	add	r30, r16
    398a:	f1 1f       	adc	r31, r17
    398c:	e2 57       	subi	r30, 0x72	; 114
    398e:	f9 4f       	sbci	r31, 0xF9	; 249
    3990:	96 8b       	std	Z+22, r25	; 0x16
    3992:	85 8b       	std	Z+21, r24	; 0x15
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    3994:	88 81       	ld	r24, Y
    3996:	99 27       	eor	r25, r25
    3998:	87 fd       	sbrc	r24, 7
    399a:	90 95       	com	r25
    399c:	fc 01       	movw	r30, r24
    399e:	75 e0       	ldi	r23, 0x05	; 5
    39a0:	ee 0f       	add	r30, r30
    39a2:	ff 1f       	adc	r31, r31
    39a4:	7a 95       	dec	r23
    39a6:	e1 f7       	brne	.-8      	; 0x39a0 <nrk_TCB_init+0x162>
    39a8:	e8 0f       	add	r30, r24
    39aa:	f9 1f       	adc	r31, r25
    39ac:	e2 57       	subi	r30, 0x72	; 114
    39ae:	f9 4f       	sbci	r31, 0xF9	; 249
    39b0:	85 89       	ldd	r24, Z+21	; 0x15
    39b2:	96 89       	ldd	r25, Z+22	; 0x16
    39b4:	23 8d       	ldd	r18, Z+27	; 0x1b
    39b6:	34 8d       	ldd	r19, Z+28	; 0x1c
    39b8:	82 0f       	add	r24, r18
    39ba:	93 1f       	adc	r25, r19
    39bc:	90 8f       	std	Z+24, r25	; 0x18
    39be:	87 8b       	std	Z+23, r24	; 0x17
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(Task->cpu_reserve);
    39c0:	08 81       	ld	r16, Y
    39c2:	11 27       	eor	r17, r17
    39c4:	07 fd       	sbrc	r16, 7
    39c6:	10 95       	com	r17
    39c8:	2b 89       	ldd	r18, Y+19	; 0x13
    39ca:	3c 89       	ldd	r19, Y+20	; 0x14
    39cc:	4d 89       	ldd	r20, Y+21	; 0x15
    39ce:	5e 89       	ldd	r21, Y+22	; 0x16
    39d0:	6f 89       	ldd	r22, Y+23	; 0x17
    39d2:	78 8d       	ldd	r23, Y+24	; 0x18
    39d4:	89 8d       	ldd	r24, Y+25	; 0x19
    39d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    39d8:	0e 94 83 27 	call	0x4f06	; 0x4f06 <_nrk_time_to_ticks>
    39dc:	f8 01       	movw	r30, r16
    39de:	65 e0       	ldi	r22, 0x05	; 5
    39e0:	ee 0f       	add	r30, r30
    39e2:	ff 1f       	adc	r31, r31
    39e4:	6a 95       	dec	r22
    39e6:	e1 f7       	brne	.-8      	; 0x39e0 <nrk_TCB_init+0x1a2>
    39e8:	e0 0f       	add	r30, r16
    39ea:	f1 1f       	adc	r31, r17
    39ec:	e2 57       	subi	r30, 0x72	; 114
    39ee:	f9 4f       	sbci	r31, 0xF9	; 249
    39f0:	96 8f       	std	Z+30, r25	; 0x1e
    39f2:	85 8f       	std	Z+29, r24	; 0x1d
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    39f4:	88 81       	ld	r24, Y
    39f6:	99 27       	eor	r25, r25
    39f8:	87 fd       	sbrc	r24, 7
    39fa:	90 95       	com	r25
    39fc:	fc 01       	movw	r30, r24
    39fe:	55 e0       	ldi	r21, 0x05	; 5
    3a00:	ee 0f       	add	r30, r30
    3a02:	ff 1f       	adc	r31, r31
    3a04:	5a 95       	dec	r21
    3a06:	e1 f7       	brne	.-8      	; 0x3a00 <nrk_TCB_init+0x1c2>
    3a08:	e8 0f       	add	r30, r24
    3a0a:	f9 1f       	adc	r31, r25
    3a0c:	e2 57       	subi	r30, 0x72	; 114
    3a0e:	f9 4f       	sbci	r31, 0xF9	; 249
    3a10:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a12:	96 8d       	ldd	r25, Z+30	; 0x1e
    3a14:	92 8f       	std	Z+26, r25	; 0x1a
    3a16:	81 8f       	std	Z+25, r24	; 0x19
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    3a18:	88 81       	ld	r24, Y
    3a1a:	99 27       	eor	r25, r25
    3a1c:	87 fd       	sbrc	r24, 7
    3a1e:	90 95       	com	r25
    3a20:	fc 01       	movw	r30, r24
    3a22:	45 e0       	ldi	r20, 0x05	; 5
    3a24:	ee 0f       	add	r30, r30
    3a26:	ff 1f       	adc	r31, r31
    3a28:	4a 95       	dec	r20
    3a2a:	e1 f7       	brne	.-8      	; 0x3a24 <nrk_TCB_init+0x1e6>
    3a2c:	e8 0f       	add	r30, r24
    3a2e:	f9 1f       	adc	r31, r25
    3a30:	e2 57       	subi	r30, 0x72	; 114
    3a32:	f9 4f       	sbci	r31, 0xF9	; 249
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	90 a3       	std	Z+32, r25	; 0x20
    3a3a:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    3a3c:	88 81       	ld	r24, Y
    3a3e:	99 27       	eor	r25, r25
    3a40:	87 fd       	sbrc	r24, 7
    3a42:	90 95       	com	r25
    3a44:	fc 01       	movw	r30, r24
    3a46:	35 e0       	ldi	r19, 0x05	; 5
    3a48:	ee 0f       	add	r30, r30
    3a4a:	ff 1f       	adc	r31, r31
    3a4c:	3a 95       	dec	r19
    3a4e:	e1 f7       	brne	.-8      	; 0x3a48 <nrk_TCB_init+0x20a>
    3a50:	e8 0f       	add	r30, r24
    3a52:	f9 1f       	adc	r31, r25
    3a54:	e2 57       	subi	r30, 0x72	; 114
    3a56:	f9 4f       	sbci	r31, 0xF9	; 249
    3a58:	f3 82       	std	Z+3, r15	; 0x03
    3a5a:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    3a5c:	88 81       	ld	r24, Y
    3a5e:	99 27       	eor	r25, r25
    3a60:	87 fd       	sbrc	r24, 7
    3a62:	90 95       	com	r25
    3a64:	fc 01       	movw	r30, r24
    3a66:	25 e0       	ldi	r18, 0x05	; 5
    3a68:	ee 0f       	add	r30, r30
    3a6a:	ff 1f       	adc	r31, r31
    3a6c:	2a 95       	dec	r18
    3a6e:	e1 f7       	brne	.-8      	; 0x3a68 <nrk_TCB_init+0x22a>
    3a70:	e8 0f       	add	r30, r24
    3a72:	f9 1f       	adc	r31, r25
    3a74:	e2 57       	subi	r30, 0x72	; 114
    3a76:	f9 4f       	sbci	r31, 0xF9	; 249
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	df 91       	pop	r29
    3a82:	cf 91       	pop	r28
    3a84:	1f 91       	pop	r17
    3a86:	0f 91       	pop	r16
    3a88:	ff 90       	pop	r15
    3a8a:	ef 90       	pop	r14
    3a8c:	08 95       	ret

00003a8e <nrk_start>:




void nrk_start (void)
{
    3a8e:	8f 92       	push	r8
    3a90:	9f 92       	push	r9
    3a92:	af 92       	push	r10
    3a94:	bf 92       	push	r11
    3a96:	cf 92       	push	r12
    3a98:	df 92       	push	r13
    3a9a:	ef 92       	push	r14
    3a9c:	ff 92       	push	r15
    3a9e:	0f 93       	push	r16
    3aa0:	1f 93       	push	r17
    3aa2:	cf 93       	push	r28
    3aa4:	df 93       	push	r29
    3aa6:	66 e9       	ldi	r22, 0x96	; 150
    3aa8:	a6 2e       	mov	r10, r22
    3aaa:	66 e0       	ldi	r22, 0x06	; 6
    3aac:	b6 2e       	mov	r11, r22
    3aae:	cc 24       	eor	r12, r12
    3ab0:	dd 24       	eor	r13, r13
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    3ab2:	45 01       	movw	r8, r10




void nrk_start (void)
{
    3ab4:	ec 2c       	mov	r14, r12
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    3ab6:	f5 01       	movw	r30, r10
    3ab8:	f0 80       	ld	r15, Z
	// only check activated tasks
	if(task_ID!=-1)
    3aba:	ff ef       	ldi	r31, 0xFF	; 255
    3abc:	ff 16       	cp	r15, r31
    3abe:	91 f0       	breq	.+36     	; 0x3ae4 <nrk_start+0x56>
    3ac0:	e4 01       	movw	r28, r8
    3ac2:	00 e0       	ldi	r16, 0x00	; 0
    3ac4:	10 e0       	ldi	r17, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    3ac6:	e0 16       	cp	r14, r16
    3ac8:	39 f0       	breq	.+14     	; 0x3ad8 <nrk_start+0x4a>
    3aca:	88 81       	ld	r24, Y
    3acc:	f8 16       	cp	r15, r24
    3ace:	21 f4       	brne	.+8      	; 0x3ad8 <nrk_start+0x4a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    3ad0:	6f 2d       	mov	r22, r15
    3ad2:	85 e0       	ldi	r24, 0x05	; 5
    3ad4:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <nrk_kernel_error_add>
    3ad8:	0f 5f       	subi	r16, 0xFF	; 255
    3ada:	1f 4f       	sbci	r17, 0xFF	; 255
    3adc:	a1 96       	adiw	r28, 0x21	; 33
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    3ade:	03 30       	cpi	r16, 0x03	; 3
    3ae0:	11 05       	cpc	r17, r1
    3ae2:	89 f7       	brne	.-30     	; 0x3ac6 <nrk_start+0x38>
    3ae4:	08 94       	sec
    3ae6:	c1 1c       	adc	r12, r1
    3ae8:	d1 1c       	adc	r13, r1
    3aea:	81 e2       	ldi	r24, 0x21	; 33
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	a8 0e       	add	r10, r24
    3af0:	b9 1e       	adc	r11, r25
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    3af2:	93 e0       	ldi	r25, 0x03	; 3
    3af4:	c9 16       	cp	r12, r25
    3af6:	d1 04       	cpc	r13, r1
    3af8:	e9 f6       	brne	.-70     	; 0x3ab4 <nrk_start+0x26>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    3afa:	0e 94 25 23 	call	0x464a	; 0x464a <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3afe:	28 2f       	mov	r18, r24
    3b00:	33 27       	eor	r19, r19
    3b02:	27 fd       	sbrc	r18, 7
    3b04:	30 95       	com	r19
    3b06:	f9 01       	movw	r30, r18
    3b08:	55 e0       	ldi	r21, 0x05	; 5
    3b0a:	ee 0f       	add	r30, r30
    3b0c:	ff 1f       	adc	r31, r31
    3b0e:	5a 95       	dec	r21
    3b10:	e1 f7       	brne	.-8      	; 0x3b0a <nrk_start+0x7c>
    3b12:	e2 0f       	add	r30, r18
    3b14:	f3 1f       	adc	r31, r19
    3b16:	e2 57       	subi	r30, 0x72	; 114
    3b18:	f9 4f       	sbci	r31, 0xF9	; 249
    3b1a:	32 85       	ldd	r19, Z+10	; 0x0a
    3b1c:	30 93 0c 07 	sts	0x070C, r19
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    3b20:	21 e2       	ldi	r18, 0x21	; 33
    3b22:	82 02       	muls	r24, r18
    3b24:	c0 01       	movw	r24, r0
    3b26:	11 24       	eor	r1, r1
    3b28:	82 57       	subi	r24, 0x72	; 114
    3b2a:	99 4f       	sbci	r25, 0xF9	; 249
    3b2c:	90 93 0b 07 	sts	0x070B, r25
    3b30:	80 93 0a 07 	sts	0x070A, r24
    3b34:	90 93 fc 06 	sts	0x06FC, r25
    3b38:	80 93 fb 06 	sts	0x06FB, r24
    nrk_cur_task_prio = nrk_high_ready_prio;
    3b3c:	30 93 fd 06 	sts	0x06FD, r19
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    3b40:	0e 94 5d 30 	call	0x60ba	; 0x60ba <nrk_target_start>
    nrk_stack_pointer_init(); 
    3b44:	0e 94 43 30 	call	0x6086	; 0x6086 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    3b48:	0e 94 81 30 	call	0x6102	; 0x6102 <nrk_start_high_ready_task>
    3b4c:	ff cf       	rjmp	.-2      	; 0x3b4c <nrk_start+0xbe>

00003b4e <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    3b4e:	0f 93       	push	r16
    3b50:	1f 93       	push	r17
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
    3b5a:	a3 97       	sbiw	r28, 0x23	; 35
    3b5c:	0f b6       	in	r0, 0x3f	; 63
    3b5e:	f8 94       	cli
    3b60:	de bf       	out	0x3e, r29	; 62
    3b62:	0f be       	out	0x3f, r0	; 63
    3b64:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    3b66:	0e 94 07 20 	call	0x400e	; 0x400e <nrk_signal_create>
    3b6a:	80 93 fa 06 	sts	0x06FA, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    3b6e:	8f 3f       	cpi	r24, 0xFF	; 255
    3b70:	21 f4       	brne	.+8      	; 0x3b7a <nrk_init+0x2c>
    3b72:	60 e0       	ldi	r22, 0x00	; 0
    3b74:	8e e0       	ldi	r24, 0x0E	; 14
    3b76:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <nrk_kernel_error_add>
	
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
   if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
    3b7a:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <_nrk_startup_ok>
    3b7e:	88 23       	and	r24, r24
    3b80:	21 f4       	brne	.+8      	; 0x3b8a <nrk_init+0x3c>
    3b82:	60 e0       	ldi	r22, 0x00	; 0
    3b84:	86 e0       	ldi	r24, 0x06	; 6
    3b86:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    3b8a:	10 92 fd 06 	sts	0x06FD, r1
    nrk_cur_task_TCB = NULL;
    3b8e:	10 92 0b 07 	sts	0x070B, r1
    3b92:	10 92 0a 07 	sts	0x070A, r1
    
    nrk_high_ready_TCB = NULL;
    3b96:	10 92 fc 06 	sts	0x06FC, r1
    3b9a:	10 92 fb 06 	sts	0x06FB, r1
    nrk_high_ready_prio = 0; 
    3b9e:	10 92 0c 07 	sts	0x070C, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    3ba2:	10 92 09 07 	sts	0x0709, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    3ba6:	8f ef       	ldi	r24, 0xFF	; 255
    3ba8:	80 93 f3 06 	sts	0x06F3, r24
    nrk_sem_list[i].value=-1;
    3bac:	80 93 f5 06 	sts	0x06F5, r24
    nrk_sem_list[i].resource_ceiling=-1;
    3bb0:	80 93 f4 06 	sts	0x06F4, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    3bb4:	80 93 f6 06 	sts	0x06F6, r24
    nrk_sem_list[i].value=-1;
    3bb8:	80 93 f8 06 	sts	0x06F8, r24
    nrk_sem_list[i].resource_ceiling=-1;
    3bbc:	80 93 f7 06 	sts	0x06F7, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    3bc0:	93 e6       	ldi	r25, 0x63	; 99
    3bc2:	90 93 98 06 	sts	0x0698, r25
        nrk_task_TCB[i].task_ID = -1; 
    3bc6:	80 93 96 06 	sts	0x0696, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    3bca:	90 93 b9 06 	sts	0x06B9, r25
        nrk_task_TCB[i].task_ID = -1; 
    3bce:	80 93 b7 06 	sts	0x06B7, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    3bd2:	90 93 da 06 	sts	0x06DA, r25
        nrk_task_TCB[i].task_ID = -1; 
    3bd6:	80 93 d8 06 	sts	0x06D8, r24
    3bda:	ed e0       	ldi	r30, 0x0D	; 13
    3bdc:	f7 e0       	ldi	r31, 0x07	; 7
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    3bde:	cf 01       	movw	r24, r30
    3be0:	05 96       	adiw	r24, 0x05	; 5
    3be2:	94 83       	std	Z+4, r25	; 0x04
    3be4:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    3be6:	f7 83       	std	Z+7, r31	; 0x07
    3be8:	e6 83       	std	Z+6, r30	; 0x06
    3bea:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    3bec:	27 e0       	ldi	r18, 0x07	; 7
    3bee:	8c 31       	cpi	r24, 0x1C	; 28
    3bf0:	92 07       	cpc	r25, r18
    3bf2:	a9 f7       	brne	.-22     	; 0x3bde <nrk_init+0x90>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    3bf4:	10 92 0f 07 	sts	0x070F, r1
    3bf8:	10 92 0e 07 	sts	0x070E, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    3bfc:	10 92 20 07 	sts	0x0720, r1
    3c00:	10 92 1f 07 	sts	0x071F, r1
	_head_node = NULL;
    3c04:	10 92 00 07 	sts	0x0700, r1
    3c08:	10 92 ff 06 	sts	0x06FF, r1
	_free_node = &_nrk_readyQ[0];
    3c0c:	0f 97       	sbiw	r24, 0x0f	; 15
    3c0e:	90 93 8d 06 	sts	0x068D, r25
    3c12:	80 93 8c 06 	sts	0x068C, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    3c16:	64 e4       	ldi	r22, 0x44	; 68
    3c18:	79 e2       	ldi	r23, 0x29	; 41
    3c1a:	8e 01       	movw	r16, r28
    3c1c:	0f 5f       	subi	r16, 0xFF	; 255
    3c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c20:	c8 01       	movw	r24, r16
    3c22:	0e 94 01 30 	call	0x6002	; 0x6002 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    3c26:	40 e8       	ldi	r20, 0x80	; 128
    3c28:	50 e0       	ldi	r21, 0x00	; 0
    3c2a:	6c ea       	ldi	r22, 0xAC	; 172
    3c2c:	75 e0       	ldi	r23, 0x05	; 5
    3c2e:	c8 01       	movw	r24, r16
    3c30:	0e 94 62 30 	call	0x60c4	; 0x60c4 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    3c34:	85 e5       	ldi	r24, 0x55	; 85
    3c36:	80 93 ac 05 	sts	0x05AC, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    3c3a:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.offset.secs = 0;
    3c3c:	1c 8e       	std	Y+28, r1	; 0x1c
    3c3e:	1d 8e       	std	Y+29, r1	; 0x1d
    3c40:	1e 8e       	std	Y+30, r1	; 0x1e
    3c42:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    3c44:	18 a2       	std	Y+32, r1	; 0x20
    3c46:	19 a2       	std	Y+33, r1	; 0x21
    3c48:	1a a2       	std	Y+34, r1	; 0x22
    3c4a:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    3c4c:	91 e0       	ldi	r25, 0x01	; 1
    3c4e:	98 87       	std	Y+8, r25	; 0x08
	IdleTask.Type = IDLE_TASK;
    3c50:	82 e0       	ldi	r24, 0x02	; 2
    3c52:	8a 87       	std	Y+10, r24	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    3c54:	9b 87       	std	Y+11, r25	; 0x0b
	nrk_activate_task(&IdleTask);
    3c56:	c8 01       	movw	r24, r16
    3c58:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <nrk_activate_task>
    3c5c:	a3 96       	adiw	r28, 0x23	; 35
    3c5e:	0f b6       	in	r0, 0x3f	; 63
    3c60:	f8 94       	cli
    3c62:	de bf       	out	0x3e, r29	; 62
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	cd bf       	out	0x3d, r28	; 61
    3c68:	df 91       	pop	r29
    3c6a:	cf 91       	pop	r28
    3c6c:	1f 91       	pop	r17
    3c6e:	0f 91       	pop	r16
    3c70:	08 95       	ret

00003c72 <nrk_halt>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    3c72:	f8 94       	cli
    3c74:	ff cf       	rjmp	.-2      	; 0x3c74 <nrk_halt+0x2>

00003c76 <_nrk_errno_set>:
#include <nrk.h>
#include <nrk_events.h>
#include <nrk_error.h>
#include <nrk_timer.h>
#include <nrk_cpu.h>

    3c76:	e0 91 0a 07 	lds	r30, 0x070A
    3c7a:	f0 91 0b 07 	lds	r31, 0x070B
    3c7e:	84 87       	std	Z+12, r24	; 0x0c
    3c80:	08 95       	ret

00003c82 <nrk_errno_get>:

//#ifndef RADIO_PRIORITY_CEILING
//  #define RADIO_PRIORITY_CEILING	20
//#endif
    3c82:	e0 91 0a 07 	lds	r30, 0x070A
    3c86:	f0 91 0b 07 	lds	r31, 0x070B
    3c8a:	84 85       	ldd	r24, Z+12	; 0x0c

nrk_sem_t *radio_sem;
    3c8c:	99 27       	eor	r25, r25
    3c8e:	08 95       	ret

00003c90 <nrk_error_get>:
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
tx_ctr[0]=counter[0];
tx_ctr[1]=counter[1];
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
    3c90:	dc 01       	movw	r26, r24
    3c92:	fb 01       	movw	r30, r22
}
    3c94:	80 91 9d 05 	lds	r24, 0x059D
    3c98:	88 23       	and	r24, r24
    3c9a:	19 f4       	brne	.+6      	; 0x3ca2 <nrk_error_get+0x12>
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	08 95       	ret


    3ca2:	80 83       	st	Z, r24
void rf_security_set_key(uint8_t *key)
    3ca4:	80 91 b7 02 	lds	r24, 0x02B7
    3ca8:	8c 93       	st	X, r24
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	90 e0       	ldi	r25, 0x00	; 0
{
uint8_t n,i;
    3cae:	08 95       	ret

00003cb0 <nrk_error_print>:
uint16_t key_buf;

// Set AES key
    3cb0:	1f 93       	push	r17
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    3cb2:	80 91 9d 05 	lds	r24, 0x059D
    3cb6:	88 23       	and	r24, r24
    3cb8:	09 f4       	brne	.+2      	; 0x3cbc <nrk_error_print+0xc>
    3cba:	9e c0       	rjmp	.+316    	; 0x3df8 <nrk_error_print+0x148>
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    3cbc:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    3cc0:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>
void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header

security_enable=1;
    3cc4:	82 e7       	ldi	r24, 0x72	; 114
    3cc6:	93 e0       	ldi	r25, 0x03	; 3
    3cc8:	0e 94 1f 1b 	call	0x363e	; 0x363e <nrk_kprintf>
}
    3ccc:	80 91 b7 02 	lds	r24, 0x02B7
    3cd0:	99 27       	eor	r25, r25
    3cd2:	9f 93       	push	r25
    3cd4:	8f 93       	push	r24
    3cd6:	82 e4       	ldi	r24, 0x42	; 66
    3cd8:	92 e0       	ldi	r25, 0x02	; 2
    3cda:	9f 93       	push	r25
    3cdc:	8f 93       	push	r24
    3cde:	0e 94 69 32 	call	0x64d2	; 0x64d2 <printf>

    3ce2:	8e e6       	ldi	r24, 0x6E	; 110
    3ce4:	93 e0       	ldi	r25, 0x03	; 3
    3ce6:	0e 94 1f 1b 	call	0x363e	; 0x363e <nrk_kprintf>

    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	0f 90       	pop	r0
    3cf0:	0f 90       	pop	r0
    3cf2:	80 91 9d 05 	lds	r24, 0x059D
    3cf6:	84 31       	cpi	r24, 0x14	; 20
    3cf8:	10 f0       	brcs	.+4      	; 0x3cfe <nrk_error_print+0x4e>

    3cfa:	10 92 9d 05 	sts	0x059D, r1
void rf_security_disable()
    3cfe:	80 91 9d 05 	lds	r24, 0x059D
    3d02:	99 27       	eor	r25, r25
    3d04:	aa 27       	eor	r26, r26
    3d06:	bb 27       	eor	r27, r27
    3d08:	fc 01       	movw	r30, r24
    3d0a:	31 97       	sbiw	r30, 0x01	; 1
    3d0c:	e2 31       	cpi	r30, 0x12	; 18
    3d0e:	f1 05       	cpc	r31, r1
    3d10:	f0 f5       	brcc	.+124    	; 0x3d8e <nrk_error_print+0xde>
    3d12:	ea 59       	subi	r30, 0x9A	; 154
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
    3d16:	ee 0f       	add	r30, r30
    3d18:	ff 1f       	adc	r31, r31
    3d1a:	05 90       	lpm	r0, Z+
    3d1c:	f4 91       	lpm	r31, Z
    3d1e:	e0 2d       	mov	r30, r0
    3d20:	09 94       	ijmp
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
  security_enable=0;
    3d22:	87 e4       	ldi	r24, 0x47	; 71
    3d24:	93 e0       	ldi	r25, 0x03	; 3
    3d26:	35 c0       	rjmp	.+106    	; 0x3d92 <nrk_error_print+0xe2>
}

//-------------------------------------------------------------------------------------------------------
    3d28:	83 e3       	ldi	r24, 0x33	; 51
    3d2a:	93 e0       	ldi	r25, 0x03	; 3
    3d2c:	32 c0       	rjmp	.+100    	; 0x3d92 <nrk_error_print+0xe2>
// The RF settings structure is declared here, since we'll always need halRfInit()
volatile RF_SETTINGS rfSettings;
volatile uint8_t rx_ready;
    3d2e:	8d e1       	ldi	r24, 0x1D	; 29
    3d30:	93 e0       	ldi	r25, 0x03	; 3
    3d32:	2f c0       	rjmp	.+94     	; 0x3d92 <nrk_error_print+0xe2>
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
    3d34:	82 e0       	ldi	r24, 0x02	; 2
    3d36:	93 e0       	ldi	r25, 0x03	; 3
    3d38:	2c c0       	rjmp	.+88     	; 0x3d92 <nrk_error_print+0xe2>
return radio_sem;
}

    3d3a:	8c ee       	ldi	r24, 0xEC	; 236
    3d3c:	92 e0       	ldi	r25, 0x02	; 2
    3d3e:	29 c0       	rjmp	.+82     	; 0x3d92 <nrk_error_print+0xe2>
void rf_tx_power(uint8_t pwr)
{
uint16_t tmp;
    3d40:	84 ed       	ldi	r24, 0xD4	; 212
    3d42:	92 e0       	ldi	r25, 0x02	; 2
    3d44:	26 c0       	rjmp	.+76     	; 0x3d92 <nrk_error_print+0xe2>
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    3d46:	81 ec       	ldi	r24, 0xC1	; 193
    3d48:	92 e0       	ldi	r25, 0x02	; 2
    3d4a:	23 c0       	rjmp	.+70     	; 0x3d92 <nrk_error_print+0xe2>
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    3d4c:	8e ea       	ldi	r24, 0xAE	; 174
    3d4e:	92 e0       	ldi	r25, 0x02	; 2
    3d50:	20 c0       	rjmp	.+64     	; 0x3d92 <nrk_error_print+0xe2>
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    3d52:	80 e9       	ldi	r24, 0x90	; 144
    3d54:	92 e0       	ldi	r25, 0x02	; 2
    3d56:	1d c0       	rjmp	.+58     	; 0x3d92 <nrk_error_print+0xe2>
#endif
}
void rf_set_channel( uint8_t channel )
    3d58:	8b e6       	ldi	r24, 0x6B	; 107
    3d5a:	92 e0       	ldi	r25, 0x02	; 2
    3d5c:	1a c0       	rjmp	.+52     	; 0x3d92 <nrk_error_print+0xe2>
{
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    3d5e:	8f e5       	ldi	r24, 0x5F	; 95
    3d60:	92 e0       	ldi	r25, 0x02	; 2
    3d62:	17 c0       	rjmp	.+46     	; 0x3d92 <nrk_error_print+0xe2>
#endif
    halRfSetChannel(channel);
#ifdef RADIO_PRIORITY_CEILING
    3d64:	84 e4       	ldi	r24, 0x44	; 68
    3d66:	92 e0       	ldi	r25, 0x02	; 2
    3d68:	14 c0       	rjmp	.+40     	; 0x3d92 <nrk_error_print+0xe2>
    nrk_sem_post(radio_sem);
#endif
}
    3d6a:	85 e3       	ldi	r24, 0x35	; 53
    3d6c:	92 e0       	ldi	r25, 0x02	; 2
    3d6e:	11 c0       	rjmp	.+34     	; 0x3d92 <nrk_error_print+0xe2>


void rf_addr_decode_enable()
    3d70:	84 e2       	ldi	r24, 0x24	; 36
    3d72:	92 e0       	ldi	r25, 0x02	; 2
    3d74:	0e c0       	rjmp	.+28     	; 0x3d92 <nrk_error_print+0xe2>
{
    mdmctrl0 |= 0x0800;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    3d76:	80 e1       	ldi	r24, 0x10	; 16
    3d78:	92 e0       	ldi	r25, 0x02	; 2
    3d7a:	0b c0       	rjmp	.+22     	; 0x3d92 <nrk_error_print+0xe2>
}

void rf_addr_decode_disable()
    3d7c:	80 ef       	ldi	r24, 0xF0	; 240
    3d7e:	91 e0       	ldi	r25, 0x01	; 1
    3d80:	08 c0       	rjmp	.+16     	; 0x3d92 <nrk_error_print+0xe2>
{
    mdmctrl0 &= (~0x0800);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    3d82:	88 ed       	ldi	r24, 0xD8	; 216
    3d84:	91 e0       	ldi	r25, 0x01	; 1
    3d86:	05 c0       	rjmp	.+10     	; 0x3d92 <nrk_error_print+0xe2>
}


    3d88:	8d eb       	ldi	r24, 0xBD	; 189
    3d8a:	91 e0       	ldi	r25, 0x01	; 1
    3d8c:	02 c0       	rjmp	.+4      	; 0x3d92 <nrk_error_print+0xe2>
void rf_auto_ack_enable()
{
    auto_ack_enable=1;
    3d8e:	86 eb       	ldi	r24, 0xB6	; 182
    3d90:	91 e0       	ldi	r25, 0x01	; 1
    3d92:	0e 94 1f 1b 	call	0x363e	; 0x363e <nrk_kprintf>
    mdmctrl0 |= 0x0010;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
    3d96:	60 91 31 07 	lds	r22, 0x0731
    3d9a:	70 91 32 07 	lds	r23, 0x0732
    3d9e:	8d e0       	ldi	r24, 0x0D	; 13
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	0e 94 3c 32 	call	0x6478	; 0x6478 <fputc>
}
    3da6:	60 91 31 07 	lds	r22, 0x0731
    3daa:	70 91 32 07 	lds	r23, 0x0732
    3dae:	8a e0       	ldi	r24, 0x0A	; 10
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	0e 94 3c 32 	call	0x6478	; 0x6478 <fputc>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    3db6:	82 e0       	ldi	r24, 0x02	; 2
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <nrk_led_set>
    halRfSetChannel(channel);
    3dbe:	83 e0       	ldi	r24, 0x03	; 3
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <nrk_led_clr>
    3dc6:	10 e0       	ldi	r17, 0x00	; 0
    rfSettings.pRxInfo = pRRI;

    3dc8:	88 ee       	ldi	r24, 0xE8	; 232
    3dca:	93 e0       	ldi	r25, 0x03	; 3
    3dcc:	0e 94 6f 2c 	call	0x58de	; 0x58de <nrk_spin_wait_us>
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    halRfSetChannel(channel);
    rfSettings.pRxInfo = pRRI;
    3dd0:	1f 5f       	subi	r17, 0xFF	; 255
    3dd2:	14 36       	cpi	r17, 0x64	; 100
    3dd4:	c9 f7       	brne	.-14     	; 0x3dc8 <nrk_error_print+0x118>

#ifdef RADIO_PRIORITY_CEILING
    3dd6:	83 e0       	ldi	r24, 0x03	; 3
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <nrk_led_set>
    nrk_sem_post(radio_sem);
    3dde:	82 e0       	ldi	r24, 0x02	; 2
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <nrk_led_clr>
    3de6:	10 e0       	ldi	r17, 0x00	; 0
#endif
}
    3de8:	88 ee       	ldi	r24, 0xE8	; 232
    3dea:	93 e0       	ldi	r25, 0x03	; 3
    3dec:	0e 94 6f 2c 	call	0x58de	; 0x58de <nrk_spin_wait_us>
    halRfSetChannel(channel);
    rfSettings.pRxInfo = pRRI;

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
    3df0:	1f 5f       	subi	r17, 0xFF	; 255
    3df2:	14 36       	cpi	r17, 0x64	; 100
    3df4:	c9 f7       	brne	.-14     	; 0x3de8 <nrk_error_print+0x138>
    3df6:	df cf       	rjmp	.-66     	; 0x3db6 <nrk_error_print+0x106>
//-------------------------------------------------------------------------------------------------------
//  void rf_init(RF_RX_INFO *pRRI, uint8_t channel, WORD panId, WORD myAddr)
//
//  DESCRIPTION:
//      Initializes CC2420 for radio communication via the basic RF library functions. Turns on the
//		voltage regulator, resets the CC2420, turns on the crystal oscillator, writes all necessary
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	1f 91       	pop	r17
    3dfe:	08 95       	ret

00003e00 <nrk_kernel_error_add>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
}

    3e00:	80 93 9d 05 	sts	0x059D, r24

    3e04:	60 93 b7 02 	sts	0x02B7, r22
void rf_security_set_ctr_counter(uint8_t *counter)
{
uint8_t n;
    3e08:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <nrk_error_print>
    3e0c:	08 95       	ret

00003e0e <nrk_error_add>:

nrk_sem_t *radio_sem;
uint8_t auto_ack_enable;
uint8_t security_enable;
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
    3e0e:	80 93 9d 05 	sts	0x059D, r24
uint8_t tx_ctr[4];
    3e12:	e0 91 0a 07 	lds	r30, 0x070A
    3e16:	f0 91 0b 07 	lds	r31, 0x070B
    3e1a:	80 85       	ldd	r24, Z+8	; 0x08
    3e1c:	80 93 b7 02 	sts	0x02B7, r24
uint8_t rx_ctr[4];

// Returns 1 if the last packet was encrypted, 0 otherwise
    3e20:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <nrk_error_print>
    3e24:	08 95       	ret

00003e26 <nrk_stack_check_pid>:



void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
    3e26:	99 27       	eor	r25, r25
    3e28:	87 fd       	sbrc	r24, 7
    3e2a:	90 95       	com	r25
    3e2c:	fc 01       	movw	r30, r24
    3e2e:	25 e0       	ldi	r18, 0x05	; 5
    3e30:	ee 0f       	add	r30, r30
    3e32:	ff 1f       	adc	r31, r31
    3e34:	2a 95       	dec	r18
    3e36:	e1 f7       	brne	.-8      	; 0x3e30 <nrk_stack_check_pid+0xa>
    3e38:	e8 0f       	add	r30, r24
    3e3a:	f9 1f       	adc	r31, r25
    3e3c:	e2 57       	subi	r30, 0x72	; 114
    3e3e:	f9 4f       	sbci	r31, 0xF9	; 249
    3e40:	a2 81       	ldd	r26, Z+2	; 0x02
    3e42:	b3 81       	ldd	r27, Z+3	; 0x03
  security_enable=0;
}
    3e44:	8c 91       	ld	r24, X
    3e46:	85 35       	cpi	r24, 0x55	; 85
    3e48:	29 f0       	breq	.+10     	; 0x3e54 <nrk_stack_check_pid+0x2e>

    3e4a:	85 e5       	ldi	r24, 0x55	; 85
    3e4c:	8c 93       	st	X, r24
    3e4e:	8f ef       	ldi	r24, 0xFF	; 255
    3e50:	9f ef       	ldi	r25, 0xFF	; 255
    3e52:	08 95       	ret
//-------------------------------------------------------------------------------------------------------
// The RF settings structure is declared here, since we'll always need halRfInit()
volatile RF_SETTINGS rfSettings;
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
    3e54:	80 81       	ld	r24, Z
    3e56:	91 81       	ldd	r25, Z+1	; 0x01
    3e58:	80 50       	subi	r24, 0x00	; 0
    3e5a:	92 42       	sbci	r25, 0x22	; 34
    3e5c:	18 f4       	brcc	.+6      	; 0x3e64 <nrk_stack_check_pid+0x3e>
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	08 95       	ret
nrk_sem_t* rf_get_sem()
    3e64:	82 e1       	ldi	r24, 0x12	; 18
    3e66:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <nrk_error_add>
    3e6a:	8f ef       	ldi	r24, 0xFF	; 255
    3e6c:	9f ef       	ldi	r25, 0xFF	; 255
{
return radio_sem;
}

void rf_tx_power(uint8_t pwr)
    3e6e:	08 95       	ret

00003e70 <dump_stack_info>:

#include <include.h>
#include <basic_rf.h>
#include <ulib.h>
#include <nrk.h>
#include <nrk_events.h>
    3e70:	6f 92       	push	r6
    3e72:	7f 92       	push	r7
    3e74:	8f 92       	push	r8
    3e76:	9f 92       	push	r9
    3e78:	af 92       	push	r10
    3e7a:	bf 92       	push	r11
    3e7c:	cf 92       	push	r12
    3e7e:	df 92       	push	r13
    3e80:	ef 92       	push	r14
    3e82:	ff 92       	push	r15
    3e84:	0f 93       	push	r16
    3e86:	1f 93       	push	r17
    3e88:	cf 93       	push	r28
    3e8a:	df 93       	push	r29
#include <nrk_error.h>
#include <nrk_timer.h>
#include <nrk_cpu.h>


    3e8c:	8e e7       	ldi	r24, 0x7E	; 126
    3e8e:	93 e0       	ldi	r25, 0x03	; 3
    3e90:	0e 94 1f 1b 	call	0x363e	; 0x363e <nrk_kprintf>
//#ifndef RADIO_PRIORITY_CEILING
//  #define RADIO_PRIORITY_CEILING	20
    3e94:	e0 91 0a 07 	lds	r30, 0x070A
    3e98:	f0 91 0b 07 	lds	r31, 0x070B
    3e9c:	80 85       	ldd	r24, Z+8	; 0x08
    3e9e:	99 27       	eor	r25, r25
    3ea0:	87 fd       	sbrc	r24, 7
    3ea2:	90 95       	com	r25
    3ea4:	9f 93       	push	r25
    3ea6:	8f 93       	push	r24
    3ea8:	85 e4       	ldi	r24, 0x45	; 69
    3eaa:	92 e0       	ldi	r25, 0x02	; 2
    3eac:	9f 93       	push	r25
    3eae:	8f 93       	push	r24
    3eb0:	0e 94 69 32 	call	0x64d2	; 0x64d2 <printf>
//#endif
    3eb4:	e0 91 0a 07 	lds	r30, 0x070A
    3eb8:	f0 91 0b 07 	lds	r31, 0x070B
    3ebc:	02 81       	ldd	r16, Z+2	; 0x02
    3ebe:	13 81       	ldd	r17, Z+3	; 0x03

nrk_sem_t *radio_sem;
    3ec0:	1f 93       	push	r17
    3ec2:	0f 93       	push	r16
    3ec4:	8e e4       	ldi	r24, 0x4E	; 78
    3ec6:	92 e0       	ldi	r25, 0x02	; 2
    3ec8:	9f 93       	push	r25
    3eca:	8f 93       	push	r24
    3ecc:	0e 94 69 32 	call	0x64d2	; 0x64d2 <printf>
uint8_t auto_ack_enable;
    3ed0:	f8 01       	movw	r30, r16
    3ed2:	80 81       	ld	r24, Z
    3ed4:	99 27       	eor	r25, r25
    3ed6:	9f 93       	push	r25
    3ed8:	8f 93       	push	r24
    3eda:	5b e5       	ldi	r21, 0x5B	; 91
    3edc:	c5 2e       	mov	r12, r21
    3ede:	52 e0       	ldi	r21, 0x02	; 2
    3ee0:	d5 2e       	mov	r13, r21
    3ee2:	df 92       	push	r13
    3ee4:	cf 92       	push	r12
    3ee6:	0e 94 69 32 	call	0x64d2	; 0x64d2 <printf>
uint8_t security_enable;
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
    3eea:	e0 91 0a 07 	lds	r30, 0x070A
    3eee:	f0 91 0b 07 	lds	r31, 0x070B
    3ef2:	80 81       	ld	r24, Z
    3ef4:	91 81       	ldd	r25, Z+1	; 0x01
    3ef6:	9f 93       	push	r25
    3ef8:	8f 93       	push	r24
    3efa:	48 e6       	ldi	r20, 0x68	; 104
    3efc:	e4 2e       	mov	r14, r20
    3efe:	42 e0       	ldi	r20, 0x02	; 2
    3f00:	f4 2e       	mov	r15, r20
    3f02:	ff 92       	push	r15
    3f04:	ef 92       	push	r14
    3f06:	0e 94 69 32 	call	0x64d2	; 0x64d2 <printf>
uint8_t tx_ctr[4];
    3f0a:	80 91 0a 07 	lds	r24, 0x070A
    3f0e:	90 91 0b 07 	lds	r25, 0x070B
    3f12:	9f 93       	push	r25
    3f14:	8f 93       	push	r24
    3f16:	02 e7       	ldi	r16, 0x72	; 114
    3f18:	12 e0       	ldi	r17, 0x02	; 2
    3f1a:	1f 93       	push	r17
    3f1c:	0f 93       	push	r16
    3f1e:	0e 94 69 32 	call	0x64d2	; 0x64d2 <printf>
    3f22:	ce e8       	ldi	r28, 0x8E	; 142
    3f24:	d6 e0       	ldi	r29, 0x06	; 6
    3f26:	aa 24       	eor	r10, r10
    3f28:	bb 24       	eor	r11, r11
    3f2a:	8d b7       	in	r24, 0x3d	; 61
    3f2c:	9e b7       	in	r25, 0x3e	; 62
    3f2e:	44 96       	adiw	r24, 0x14	; 20
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	f8 94       	cli
    3f34:	9e bf       	out	0x3e, r25	; 62
    3f36:	0f be       	out	0x3f, r0	; 63
    3f38:	8d bf       	out	0x3d, r24	; 61
uint8_t rx_ctr[4];

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
    3f3a:	32 e8       	ldi	r19, 0x82	; 130
    3f3c:	63 2e       	mov	r6, r19
    3f3e:	32 e0       	ldi	r19, 0x02	; 2
    3f40:	73 2e       	mov	r7, r19
}
    3f42:	46 01       	movw	r8, r12


void rf_security_set_ctr_counter(uint8_t *counter)
    3f44:	67 01       	movw	r12, r14
{
    3f46:	78 01       	movw	r14, r16
uint16_t mdmctrl0;
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
    3f48:	0a 81       	ldd	r16, Y+2	; 0x02
    3f4a:	1b 81       	ldd	r17, Y+3	; 0x03
{
return last_pkt_encrypted;
    3f4c:	1f 93       	push	r17
    3f4e:	0f 93       	push	r16
    3f50:	bf 92       	push	r11
    3f52:	af 92       	push	r10
    3f54:	7f 92       	push	r7
    3f56:	6f 92       	push	r6
    3f58:	0e 94 69 32 	call	0x64d2	; 0x64d2 <printf>
}
    3f5c:	f8 01       	movw	r30, r16
    3f5e:	80 81       	ld	r24, Z
    3f60:	99 27       	eor	r25, r25
    3f62:	9f 93       	push	r25
    3f64:	8f 93       	push	r24
    3f66:	9f 92       	push	r9
    3f68:	8f 92       	push	r8
    3f6a:	0e 94 69 32 	call	0x64d2	; 0x64d2 <printf>


void rf_security_set_ctr_counter(uint8_t *counter)
    3f6e:	88 81       	ld	r24, Y
    3f70:	99 81       	ldd	r25, Y+1	; 0x01
    3f72:	9f 93       	push	r25
    3f74:	8f 93       	push	r24
    3f76:	df 92       	push	r13
    3f78:	cf 92       	push	r12
    3f7a:	0e 94 69 32 	call	0x64d2	; 0x64d2 <printf>
{
    3f7e:	df 93       	push	r29
    3f80:	cf 93       	push	r28
    3f82:	ff 92       	push	r15
    3f84:	ef 92       	push	r14
    3f86:	0e 94 69 32 	call	0x64d2	; 0x64d2 <printf>
    3f8a:	08 94       	sec
    3f8c:	a1 1c       	adc	r10, r1
    3f8e:	b1 1c       	adc	r11, r1
    3f90:	a1 96       	adiw	r28, 0x21	; 33
uint8_t security_enable;
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];

    3f92:	8d b7       	in	r24, 0x3d	; 61
    3f94:	9e b7       	in	r25, 0x3e	; 62
    3f96:	42 96       	adiw	r24, 0x12	; 18
    3f98:	0f b6       	in	r0, 0x3f	; 63
    3f9a:	f8 94       	cli
    3f9c:	9e bf       	out	0x3e, r25	; 62
    3f9e:	0f be       	out	0x3f, r0	; 63
    3fa0:	8d bf       	out	0x3d, r24	; 61
    3fa2:	93 e0       	ldi	r25, 0x03	; 3
    3fa4:	a9 16       	cp	r10, r25
    3fa6:	b1 04       	cpc	r11, r1
    3fa8:	79 f6       	brne	.-98     	; 0x3f48 <dump_stack_info+0xd8>
    3faa:	df 91       	pop	r29
    3fac:	cf 91       	pop	r28
    3fae:	1f 91       	pop	r17
    3fb0:	0f 91       	pop	r16
    3fb2:	ff 90       	pop	r15
    3fb4:	ef 90       	pop	r14
    3fb6:	df 90       	pop	r13
    3fb8:	cf 90       	pop	r12
    3fba:	bf 90       	pop	r11
    3fbc:	af 90       	pop	r10
    3fbe:	9f 90       	pop	r9
    3fc0:	8f 90       	pop	r8
    3fc2:	7f 90       	pop	r7
    3fc4:	6f 90       	pop	r6
    3fc6:	08 95       	ret

00003fc8 <nrk_stack_check>:
}


void rf_security_set_key(uint8_t *key)
{
uint8_t n,i;
    3fc8:	cf 93       	push	r28
    3fca:	df 93       	push	r29
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    3fcc:	e0 91 0a 07 	lds	r30, 0x070A
    3fd0:	f0 91 0b 07 	lds	r31, 0x070B
    3fd4:	c2 81       	ldd	r28, Z+2	; 0x02
    3fd6:	d3 81       	ldd	r29, Z+3	; 0x03
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    3fd8:	88 81       	ld	r24, Y
    3fda:	85 35       	cpi	r24, 0x55	; 85
    3fdc:	39 f0       	breq	.+14     	; 0x3fec <nrk_stack_check+0x24>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}
    3fde:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <dump_stack_info>

// Set AES nonce to all zeros
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <nrk_error_add>
nrk_spin_wait_us(100); 
    3fe8:	85 e5       	ldi	r24, 0x55	; 85
    3fea:	88 83       	st	Y, r24
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    3fec:	e0 91 0a 07 	lds	r30, 0x070A
    3ff0:	f0 91 0b 07 	lds	r31, 0x070B
    3ff4:	80 81       	ld	r24, Z
    3ff6:	91 81       	ldd	r25, Z+1	; 0x01
    3ff8:	80 50       	subi	r24, 0x00	; 0
    3ffa:	92 42       	sbci	r25, 0x22	; 34
    3ffc:	28 f0       	brcs	.+10     	; 0x4008 <nrk_stack_check+0x40>
	}
	// block counter set 1
    3ffe:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <dump_stack_info>
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    4002:	82 e1       	ldi	r24, 0x12	; 18
    4004:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <nrk_error_add>
    4008:	df 91       	pop	r29
    400a:	cf 91       	pop	r28
    400c:	08 95       	ret

0000400e <nrk_signal_create>:
//  #define RADIO_PRIORITY_CEILING	20
//#endif

nrk_sem_t *radio_sem;
uint8_t auto_ack_enable;
uint8_t security_enable;
    400e:	40 91 93 03 	lds	r20, 0x0393
    4012:	50 91 94 03 	lds	r21, 0x0394
    4016:	60 91 95 03 	lds	r22, 0x0395
    401a:	70 91 96 03 	lds	r23, 0x0396
    401e:	20 e0       	ldi	r18, 0x00	; 0
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	db 01       	movw	r26, r22
    4024:	ca 01       	movw	r24, r20
    4026:	02 2e       	mov	r0, r18
    4028:	04 c0       	rjmp	.+8      	; 0x4032 <nrk_signal_create+0x24>
    402a:	b6 95       	lsr	r27
    402c:	a7 95       	ror	r26
    402e:	97 95       	ror	r25
    4030:	87 95       	ror	r24
    4032:	0a 94       	dec	r0
    4034:	d2 f7       	brpl	.-12     	; 0x402a <nrk_signal_create+0x1c>
    4036:	81 70       	andi	r24, 0x01	; 1
    4038:	90 70       	andi	r25, 0x00	; 0
    403a:	89 2b       	or	r24, r25
    403c:	e9 f4       	brne	.+58     	; 0x4078 <nrk_signal_create+0x6a>
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	a0 e0       	ldi	r26, 0x00	; 0
    4044:	b0 e0       	ldi	r27, 0x00	; 0
    4046:	02 2e       	mov	r0, r18
    4048:	04 c0       	rjmp	.+8      	; 0x4052 <nrk_signal_create+0x44>
    404a:	88 0f       	add	r24, r24
    404c:	99 1f       	adc	r25, r25
    404e:	aa 1f       	adc	r26, r26
    4050:	bb 1f       	adc	r27, r27
    4052:	0a 94       	dec	r0
    4054:	d2 f7       	brpl	.-12     	; 0x404a <nrk_signal_create+0x3c>
    4056:	84 2b       	or	r24, r20
    4058:	95 2b       	or	r25, r21
    405a:	a6 2b       	or	r26, r22
    405c:	b7 2b       	or	r27, r23
    405e:	80 93 93 03 	sts	0x0393, r24
    4062:	90 93 94 03 	sts	0x0394, r25
    4066:	a0 93 95 03 	sts	0x0395, r26
    406a:	b0 93 96 03 	sts	0x0396, r27
uint8_t tx_ctr[4];
    406e:	82 2f       	mov	r24, r18
    4070:	99 27       	eor	r25, r25
    4072:	87 fd       	sbrc	r24, 7
    4074:	90 95       	com	r25
    4076:	08 95       	ret
    4078:	2f 5f       	subi	r18, 0xFF	; 255
    407a:	3f 4f       	sbci	r19, 0xFF	; 255

//#ifndef RADIO_PRIORITY_CEILING
//  #define RADIO_PRIORITY_CEILING	20
//#endif

nrk_sem_t *radio_sem;
    407c:	20 32       	cpi	r18, 0x20	; 32
    407e:	31 05       	cpc	r19, r1
    4080:	81 f6       	brne	.-96     	; 0x4022 <nrk_signal_create+0x14>
    4082:	8f ef       	ldi	r24, 0xFF	; 255
    4084:	9f ef       	ldi	r25, 0xFF	; 255
uint8_t rx_ctr[4];

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
    4086:	08 95       	ret

00004088 <nrk_signal_get_registered_mask>:
}


    4088:	e0 91 0a 07 	lds	r30, 0x070A
    408c:	f0 91 0b 07 	lds	r31, 0x070B
    4090:	65 85       	ldd	r22, Z+13	; 0x0d
    4092:	76 85       	ldd	r23, Z+14	; 0x0e
    4094:	87 85       	ldd	r24, Z+15	; 0x0f
    4096:	90 89       	ldd	r25, Z+16	; 0x10
    4098:	08 95       	ret

0000409a <nrk_signal_unregister>:
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}
    409a:	ef 92       	push	r14
    409c:	ff 92       	push	r15
    409e:	0f 93       	push	r16
    40a0:	1f 93       	push	r17

void rf_security_enable(uint8_t *key)
{
    40a2:	21 e0       	ldi	r18, 0x01	; 1
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	40 e0       	ldi	r20, 0x00	; 0
    40a8:	50 e0       	ldi	r21, 0x00	; 0
    40aa:	04 c0       	rjmp	.+8      	; 0x40b4 <nrk_signal_unregister+0x1a>
    40ac:	22 0f       	add	r18, r18
    40ae:	33 1f       	adc	r19, r19
    40b0:	44 1f       	adc	r20, r20
    40b2:	55 1f       	adc	r21, r21
    40b4:	8a 95       	dec	r24
    40b6:	d2 f7       	brpl	.-12     	; 0x40ac <nrk_signal_unregister+0x12>
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
    40b8:	e0 91 0a 07 	lds	r30, 0x070A
    40bc:	f0 91 0b 07 	lds	r31, 0x070B
    40c0:	e5 84       	ldd	r14, Z+13	; 0x0d
    40c2:	f6 84       	ldd	r15, Z+14	; 0x0e
    40c4:	07 85       	ldd	r16, Z+15	; 0x0f
    40c6:	10 89       	ldd	r17, Z+16	; 0x10
    40c8:	da 01       	movw	r26, r20
    40ca:	c9 01       	movw	r24, r18
    40cc:	8e 21       	and	r24, r14
    40ce:	9f 21       	and	r25, r15
    40d0:	a0 23       	and	r26, r16
    40d2:	b1 23       	and	r27, r17
    40d4:	00 97       	sbiw	r24, 0x00	; 0
    40d6:	a1 05       	cpc	r26, r1
    40d8:	b1 05       	cpc	r27, r1
    40da:	19 f4       	brne	.+6      	; 0x40e2 <nrk_signal_unregister+0x48>
    40dc:	8f ef       	ldi	r24, 0xFF	; 255
    40de:	9f ef       	ldi	r25, 0xFF	; 255
    40e0:	1a c0       	rjmp	.+52     	; 0x4116 <nrk_signal_unregister+0x7c>

security_enable=1;
    40e2:	20 95       	com	r18
    40e4:	30 95       	com	r19
    40e6:	40 95       	com	r20
    40e8:	50 95       	com	r21
    40ea:	e2 22       	and	r14, r18
    40ec:	f3 22       	and	r15, r19
    40ee:	04 23       	and	r16, r20
    40f0:	15 23       	and	r17, r21
    40f2:	e5 86       	std	Z+13, r14	; 0x0d
    40f4:	f6 86       	std	Z+14, r15	; 0x0e
    40f6:	07 87       	std	Z+15, r16	; 0x0f
    40f8:	10 8b       	std	Z+16, r17	; 0x10
}
    40fa:	81 89       	ldd	r24, Z+17	; 0x11
    40fc:	92 89       	ldd	r25, Z+18	; 0x12
    40fe:	a3 89       	ldd	r26, Z+19	; 0x13
    4100:	b4 89       	ldd	r27, Z+20	; 0x14
    4102:	82 23       	and	r24, r18
    4104:	93 23       	and	r25, r19
    4106:	a4 23       	and	r26, r20
    4108:	b5 23       	and	r27, r21
    410a:	81 8b       	std	Z+17, r24	; 0x11
    410c:	92 8b       	std	Z+18, r25	; 0x12
    410e:	a3 8b       	std	Z+19, r26	; 0x13
    4110:	b4 8b       	std	Z+20, r27	; 0x14
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	1f 91       	pop	r17
    4118:	0f 91       	pop	r16
    411a:	ff 90       	pop	r15
    411c:	ef 90       	pop	r14
    411e:	08 95       	ret

00004120 <nrk_signal_register>:
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
  security_enable=0;
}

//-------------------------------------------------------------------------------------------------------
// The RF settings structure is declared here, since we'll always need halRfInit()
    4120:	68 2f       	mov	r22, r24
    4122:	77 27       	eor	r23, r23
    4124:	67 fd       	sbrc	r22, 7
    4126:	70 95       	com	r23
    4128:	80 91 93 03 	lds	r24, 0x0393
    412c:	90 91 94 03 	lds	r25, 0x0394
    4130:	a0 91 95 03 	lds	r26, 0x0395
    4134:	b0 91 96 03 	lds	r27, 0x0396
    4138:	06 2e       	mov	r0, r22
    413a:	04 c0       	rjmp	.+8      	; 0x4144 <nrk_signal_register+0x24>
    413c:	b6 95       	lsr	r27
    413e:	a7 95       	ror	r26
    4140:	97 95       	ror	r25
    4142:	87 95       	ror	r24
    4144:	0a 94       	dec	r0
    4146:	d2 f7       	brpl	.-12     	; 0x413c <nrk_signal_register+0x1c>
    4148:	81 70       	andi	r24, 0x01	; 1
    414a:	90 70       	andi	r25, 0x00	; 0
    414c:	89 2b       	or	r24, r25
    414e:	19 f4       	brne	.+6      	; 0x4156 <nrk_signal_register+0x36>
    4150:	8f ef       	ldi	r24, 0xFF	; 255
    4152:	9f ef       	ldi	r25, 0xFF	; 255
    4154:	08 95       	ret
volatile RF_SETTINGS rfSettings;
volatile uint8_t rx_ready;
    4156:	e0 91 0a 07 	lds	r30, 0x070A
    415a:	f0 91 0b 07 	lds	r31, 0x070B
    415e:	21 e0       	ldi	r18, 0x01	; 1
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	40 e0       	ldi	r20, 0x00	; 0
    4164:	50 e0       	ldi	r21, 0x00	; 0
    4166:	04 c0       	rjmp	.+8      	; 0x4170 <nrk_signal_register+0x50>
    4168:	22 0f       	add	r18, r18
    416a:	33 1f       	adc	r19, r19
    416c:	44 1f       	adc	r20, r20
    416e:	55 1f       	adc	r21, r21
    4170:	6a 95       	dec	r22
    4172:	d2 f7       	brpl	.-12     	; 0x4168 <nrk_signal_register+0x48>
    4174:	85 85       	ldd	r24, Z+13	; 0x0d
    4176:	96 85       	ldd	r25, Z+14	; 0x0e
    4178:	a7 85       	ldd	r26, Z+15	; 0x0f
    417a:	b0 89       	ldd	r27, Z+16	; 0x10
    417c:	82 2b       	or	r24, r18
    417e:	93 2b       	or	r25, r19
    4180:	a4 2b       	or	r26, r20
    4182:	b5 2b       	or	r27, r21
    4184:	85 87       	std	Z+13, r24	; 0x0d
    4186:	96 87       	std	Z+14, r25	; 0x0e
    4188:	a7 87       	std	Z+15, r26	; 0x0f
    418a:	b0 8b       	std	Z+16, r27	; 0x10
    418c:	81 e0       	ldi	r24, 0x01	; 1
    418e:	90 e0       	ldi	r25, 0x00	; 0
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    4190:	08 95       	ret

00004192 <nrk_sem_create>:
*/

    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    nrk_spin_wait_us(500);

    4192:	38 2f       	mov	r19, r24
  	ENABLE_GLOBAL_INT();

    4194:	80 91 09 07 	lds	r24, 0x0709
    4198:	88 23       	and	r24, r24
    419a:	19 f0       	breq	.+6      	; 0x41a2 <nrk_sem_create+0x10>
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	08 95       	ret
    // Set the RF channel
    halRfSetChannel(channel);

    // Turn interrupts back on
    41a2:	80 91 f3 06 	lds	r24, 0x06F3
    41a6:	8f 3f       	cpi	r24, 0xFF	; 255
    41a8:	11 f4       	brne	.+4      	; 0x41ae <nrk_sem_create+0x1c>
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	07 c0       	rjmp	.+14     	; 0x41bc <nrk_sem_create+0x2a>
    41ae:	80 91 f6 06 	lds	r24, 0x06F6
    41b2:	8f 3f       	cpi	r24, 0xFF	; 255
    41b4:	11 f0       	breq	.+4      	; 0x41ba <nrk_sem_create+0x28>
    41b6:	22 e0       	ldi	r18, 0x02	; 2
    41b8:	01 c0       	rjmp	.+2      	; 0x41bc <nrk_sem_create+0x2a>
    41ba:	21 e0       	ldi	r18, 0x01	; 1
	ENABLE_GLOBAL_INT();

	// Set the protocol configuration
    41bc:	82 2f       	mov	r24, r18
    41be:	99 27       	eor	r25, r25
    41c0:	fc 01       	movw	r30, r24
    41c2:	ee 0f       	add	r30, r30
    41c4:	ff 1f       	adc	r31, r31
    41c6:	e8 0f       	add	r30, r24
    41c8:	f9 1f       	adc	r31, r25
    41ca:	ed 50       	subi	r30, 0x0D	; 13
    41cc:	f9 4f       	sbci	r31, 0xF9	; 249
    41ce:	32 83       	std	Z+2, r19	; 0x02
	rfSettings.pRxInfo = pRRI;
    41d0:	30 83       	st	Z, r19
	rfSettings.panId = panId;
    41d2:	61 83       	std	Z+1, r22	; 0x01
	rfSettings.myAddr = myAddr;
    41d4:	81 e0       	ldi	r24, 0x01	; 1
    41d6:	80 93 09 07 	sts	0x0709, r24
	rfSettings.txSeqNumber = 0;
    41da:	83 e0       	ldi	r24, 0x03	; 3
    41dc:	28 9f       	mul	r18, r24
    41de:	c0 01       	movw	r24, r0
    41e0:	11 24       	eor	r1, r1
    41e2:	8d 50       	subi	r24, 0x0D	; 13
    41e4:	99 4f       	sbci	r25, 0xF9	; 249
        rfSettings.receiveOn = FALSE;
    41e6:	08 95       	ret

000041e8 <nrk_get_resource_index>:

	// Wait for the crystal oscillator to become stable
    halRfWaitForCrystalOscillator();

	// Write the short address and the PAN ID to the CC2420 RAM (requires that the XOSC is on and stable)
   //	DISABLE_GLOBAL_INT();
    41e8:	26 e0       	ldi	r18, 0x06	; 6
    41ea:	83 3f       	cpi	r24, 0xF3	; 243
    41ec:	92 07       	cpc	r25, r18
    41ee:	11 f4       	brne	.+4      	; 0x41f4 <nrk_get_resource_index+0xc>
    41f0:	80 e0       	ldi	r24, 0x00	; 0
    41f2:	07 c0       	rjmp	.+14     	; 0x4202 <nrk_get_resource_index+0x1a>
    41f4:	86 5f       	subi	r24, 0xF6	; 246
    41f6:	96 40       	sbci	r25, 0x06	; 6
    41f8:	19 f0       	breq	.+6      	; 0x4200 <nrk_get_resource_index+0x18>
    41fa:	8f ef       	ldi	r24, 0xFF	; 255
    41fc:	9f ef       	ldi	r25, 0xFF	; 255
    41fe:	08 95       	ret
    4200:	81 e0       	ldi	r24, 0x01	; 1
//    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
    4202:	99 27       	eor	r25, r25
    4204:	87 fd       	sbrc	r24, 7
    4206:	90 95       	com	r25
//    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
  //	ENABLE_GLOBAL_INT();
    4208:	08 95       	ret

0000420a <nrk_sem_delete>:
    // FIXME: remove later for auto ack
    myAddr=MY_MAC;
    panId=0x02;
    FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
//    FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AE2);  // Turn on automatic packet acknowledgment
    nrk_spin_wait_us(500);
    420a:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <nrk_get_resource_index>
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
    420e:	8f 3f       	cpi	r24, 0xFF	; 255
    4210:	11 f4       	brne	.+4      	; 0x4216 <nrk_sem_delete+0xc>
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	02 c0       	rjmp	.+4      	; 0x421a <nrk_sem_delete+0x10>
    nrk_spin_wait_us(500);
    4216:	82 30       	cpi	r24, 0x02	; 2
    4218:	29 f4       	brne	.+10     	; 0x4224 <nrk_sem_delete+0x1a>
    421a:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_nrk_errno_set>
    421e:	8f ef       	ldi	r24, 0xFF	; 255
    4220:	9f ef       	ldi	r25, 0xFF	; 255
    4222:	08 95       	ret
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    nrk_spin_wait_us(500);
    4224:	99 27       	eor	r25, r25
    4226:	87 fd       	sbrc	r24, 7
    4228:	90 95       	com	r25
    422a:	fc 01       	movw	r30, r24
    422c:	ee 0f       	add	r30, r30
    422e:	ff 1f       	adc	r31, r31
    4230:	e8 0f       	add	r30, r24
    4232:	f9 1f       	adc	r31, r25
    4234:	ed 50       	subi	r30, 0x0D	; 13
    4236:	f9 4f       	sbci	r31, 0xF9	; 249
    4238:	8f ef       	ldi	r24, 0xFF	; 255
    423a:	80 83       	st	Z, r24
    
    423c:	82 83       	std	Z+2, r24	; 0x02
   printf( "myAddr=%d\r\n",myAddr );
    423e:	81 83       	std	Z+1, r24	; 0x01
*/
    4240:	80 91 09 07 	lds	r24, 0x0709
    4244:	81 50       	subi	r24, 0x01	; 1
    4246:	80 93 09 07 	sts	0x0709, r24
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	90 e0       	ldi	r25, 0x00	; 0

    nrk_spin_wait_us(500);
    424e:	08 95       	ret

00004250 <nrk_sem_query>:
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
//-------------------------------------------------------------------------------------------------------
//  void rf_init(RF_RX_INFO *pRRI, uint8_t channel, WORD panId, WORD myAddr)
    4250:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <nrk_get_resource_index>
//
    4254:	8f 3f       	cpi	r24, 0xFF	; 255
    4256:	11 f4       	brne	.+4      	; 0x425c <nrk_sem_query+0xc>
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	02 c0       	rjmp	.+4      	; 0x4260 <nrk_sem_query+0x10>
//  DESCRIPTION:
    425c:	82 30       	cpi	r24, 0x02	; 2
    425e:	29 f4       	brne	.+10     	; 0x426a <nrk_sem_query+0x1a>
    4260:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_nrk_errno_set>
    4264:	8f ef       	ldi	r24, 0xFF	; 255
    4266:	9f ef       	ldi	r25, 0xFF	; 255
    4268:	08 95       	ret
//      Initializes CC2420 for radio communication via the basic RF library functions. Turns on the
//		voltage regulator, resets the CC2420, turns on the crystal oscillator, writes all necessary
    426a:	99 27       	eor	r25, r25
    426c:	87 fd       	sbrc	r24, 7
    426e:	90 95       	com	r25
    4270:	fc 01       	movw	r30, r24
    4272:	ee 0f       	add	r30, r30
    4274:	ff 1f       	adc	r31, r31
    4276:	e8 0f       	add	r30, r24
    4278:	f9 1f       	adc	r31, r25
    427a:	ed 50       	subi	r30, 0x0D	; 13
    427c:	f9 4f       	sbci	r31, 0xF9	; 249
    427e:	82 81       	ldd	r24, Z+2	; 0x02
    4280:	99 27       	eor	r25, r25
    4282:	87 fd       	sbrc	r24, 7
    4284:	90 95       	com	r25
//		registers and protocol addresses (for automatic address recognition). Note that the crystal
    4286:	08 95       	ret

00004288 <nrk_sem_post>:
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
  }
#endif

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    SET_VREG_ACTIVE();
    4288:	1f 93       	push	r17
    428a:	cf 93       	push	r28
    428c:	df 93       	push	r29
    halWait(1000);
    428e:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <nrk_get_resource_index>
    4292:	18 2f       	mov	r17, r24
    SET_RESET_ACTIVE();
    halWait(1);
    4294:	8f 3f       	cpi	r24, 0xFF	; 255
    4296:	11 f4       	brne	.+4      	; 0x429c <nrk_sem_post+0x14>
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	03 c0       	rjmp	.+6      	; 0x42a2 <nrk_sem_post+0x1a>
    SET_RESET_INACTIVE();
    429c:	82 30       	cpi	r24, 0x02	; 2
    429e:	31 f4       	brne	.+12     	; 0x42ac <nrk_sem_post+0x24>
    42a0:	82 e0       	ldi	r24, 0x02	; 2
    42a2:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_nrk_errno_set>
    42a6:	8f ef       	ldi	r24, 0xFF	; 255
    42a8:	9f ef       	ldi	r25, 0xFF	; 255
    42aa:	3e c0       	rjmp	.+124    	; 0x4328 <nrk_sem_post+0xa0>
    halWait(100);

    42ac:	99 27       	eor	r25, r25
    42ae:	87 fd       	sbrc	r24, 7
    42b0:	90 95       	com	r25
    42b2:	ec 01       	movw	r28, r24
    42b4:	cc 0f       	add	r28, r28
    42b6:	dd 1f       	adc	r29, r29
    42b8:	c8 0f       	add	r28, r24
    42ba:	d9 1f       	adc	r29, r25
    42bc:	cd 50       	subi	r28, 0x0D	; 13
    42be:	d9 4f       	sbci	r29, 0xF9	; 249
    42c0:	9a 81       	ldd	r25, Y+2	; 0x02
    42c2:	88 81       	ld	r24, Y
    42c4:	98 17       	cp	r25, r24
    42c6:	74 f5       	brge	.+92     	; 0x4324 <nrk_sem_post+0x9c>
    // Initialize the FIFOP external interrupt
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();
    42c8:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>

    // Turn off all interrupts while we're accessing the CC2420 registers
    42cc:	8a 81       	ldd	r24, Y+2	; 0x02
    42ce:	8f 5f       	subi	r24, 0xFF	; 255
    42d0:	8a 83       	std	Y+2, r24	; 0x02
	DISABLE_GLOBAL_INT();
    42d2:	e0 91 0a 07 	lds	r30, 0x070A
    42d6:	f0 91 0b 07 	lds	r31, 0x070B
    42da:	14 82       	std	Z+4, r1	; 0x04
    42dc:	e5 e9       	ldi	r30, 0x95	; 149
    42de:	f6 e0       	ldi	r31, 0x06	; 6

    // Register modifications
    FASTSPI_STROBE(CC2420_SXOSCON);
    mdmctrl0=0x02E2;
    42e0:	21 2f       	mov	r18, r17
    42e2:	33 27       	eor	r19, r19
    42e4:	27 fd       	sbrc	r18, 7
    42e6:	30 95       	com	r19
    42e8:	43 2f       	mov	r20, r19
    42ea:	53 2f       	mov	r21, r19

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();

    // Register modifications
    FASTSPI_STROBE(CC2420_SXOSCON);
    42ec:	80 81       	ld	r24, Z
    42ee:	82 30       	cpi	r24, 0x02	; 2
    42f0:	91 f4       	brne	.+36     	; 0x4316 <nrk_sem_post+0x8e>
    mdmctrl0=0x02E2;
    42f2:	82 85       	ldd	r24, Z+10	; 0x0a
    42f4:	93 85       	ldd	r25, Z+11	; 0x0b
    42f6:	a4 85       	ldd	r26, Z+12	; 0x0c
    42f8:	b5 85       	ldd	r27, Z+13	; 0x0d
    42fa:	82 17       	cp	r24, r18
    42fc:	93 07       	cpc	r25, r19
    42fe:	a4 07       	cpc	r26, r20
    4300:	b5 07       	cpc	r27, r21
    4302:	49 f4       	brne	.+18     	; 0x4316 <nrk_sem_post+0x8e>
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
    4304:	83 e0       	ldi	r24, 0x03	; 3
    4306:	82 83       	std	Z+2, r24	; 0x02
						// Turn on hw addre decoding 
    4308:	17 86       	std	Z+15, r1	; 0x0f
    430a:	16 86       	std	Z+14, r1	; 0x0e
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    430c:	10 82       	st	Z, r1
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    430e:	12 86       	std	Z+10, r1	; 0x0a
    4310:	13 86       	std	Z+11, r1	; 0x0b
    4312:	14 86       	std	Z+12, r1	; 0x0c
    4314:	15 86       	std	Z+13, r1	; 0x0d
    4316:	b1 96       	adiw	r30, 0x21	; 33
    //ENABLE_FIFOP_INT();

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();

    // Register modifications
    4318:	86 e0       	ldi	r24, 0x06	; 6
    431a:	e8 3f       	cpi	r30, 0xF8	; 248
    431c:	f8 07       	cpc	r31, r24
    431e:	31 f7       	brne	.-52     	; 0x42ec <nrk_sem_post+0x64>
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
					    // reference bias current to RX
					    // bandpass filter is set to 3uA 
    4320:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>
    4324:	81 e0       	ldi	r24, 0x01	; 1
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	df 91       	pop	r29
    432a:	cf 91       	pop	r28
    432c:	1f 91       	pop	r17
    432e:	08 95       	ret

00004330 <nrk_event_signal>:
{
return radio_sem;
}

void rf_tx_power(uint8_t pwr)
{
    4330:	df 92       	push	r13
    4332:	ef 92       	push	r14
    4334:	ff 92       	push	r15
    4336:	0f 93       	push	r16
    4338:	1f 93       	push	r17
uint16_t tmp;
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    tmp=0xA0E0;
    433a:	e1 e0       	ldi	r30, 0x01	; 1
    433c:	ee 2e       	mov	r14, r30
    433e:	f1 2c       	mov	r15, r1
    4340:	01 2d       	mov	r16, r1
    4342:	11 2d       	mov	r17, r1
    4344:	04 c0       	rjmp	.+8      	; 0x434e <nrk_event_signal+0x1e>
    4346:	ee 0c       	add	r14, r14
    4348:	ff 1c       	adc	r15, r15
    434a:	00 1f       	adc	r16, r16
    434c:	11 1f       	adc	r17, r17
    434e:	8a 95       	dec	r24
    4350:	d2 f7       	brpl	.-12     	; 0x4346 <nrk_event_signal+0x16>
    tmp=tmp | (pwr&0x1F);  
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
#ifdef RADIO_PRIORITY_CEILING
    4352:	80 91 93 03 	lds	r24, 0x0393
    4356:	90 91 94 03 	lds	r25, 0x0394
    435a:	a0 91 95 03 	lds	r26, 0x0395
    435e:	b0 91 96 03 	lds	r27, 0x0396
    4362:	8e 21       	and	r24, r14
    4364:	9f 21       	and	r25, r15
    4366:	a0 23       	and	r26, r16
    4368:	b1 23       	and	r27, r17
    436a:	00 97       	sbiw	r24, 0x00	; 0
    436c:	a1 05       	cpc	r26, r1
    436e:	b1 05       	cpc	r27, r1
    4370:	11 f4       	brne	.+4      	; 0x4376 <nrk_event_signal+0x46>
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	43 c0       	rjmp	.+134    	; 0x43fc <nrk_event_signal+0xcc>
    nrk_sem_post(radio_sem);
#endif
}
    4376:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>
    437a:	e5 e9       	ldi	r30, 0x95	; 149
    437c:	f6 e0       	ldi	r31, 0x06	; 6
    437e:	dd 24       	eor	r13, r13
{
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    halRfSetChannel(channel);
#ifdef RADIO_PRIORITY_CEILING
    4380:	80 81       	ld	r24, Z
    4382:	81 30       	cpi	r24, 0x01	; 1
    4384:	b9 f4       	brne	.+46     	; 0x43b4 <nrk_event_signal+0x84>
    nrk_sem_post(radio_sem);
    4386:	82 85       	ldd	r24, Z+10	; 0x0a
    4388:	93 85       	ldd	r25, Z+11	; 0x0b
    438a:	a4 85       	ldd	r26, Z+12	; 0x0c
    438c:	b5 85       	ldd	r27, Z+13	; 0x0d
    438e:	8e 21       	and	r24, r14
    4390:	9f 21       	and	r25, r15
    4392:	a0 23       	and	r26, r16
    4394:	b1 23       	and	r27, r17
    4396:	00 97       	sbiw	r24, 0x00	; 0
    4398:	a1 05       	cpc	r26, r1
    439a:	b1 05       	cpc	r27, r1
    439c:	59 f0       	breq	.+22     	; 0x43b4 <nrk_event_signal+0x84>
#endif
}
    439e:	83 e0       	ldi	r24, 0x03	; 3
    43a0:	82 83       	std	Z+2, r24	; 0x02

    43a2:	17 86       	std	Z+15, r1	; 0x0f
    43a4:	16 86       	std	Z+14, r1	; 0x0e

    43a6:	10 82       	st	Z, r1
void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
    43a8:	e2 86       	std	Z+10, r14	; 0x0a
    43aa:	f3 86       	std	Z+11, r15	; 0x0b
    43ac:	04 87       	std	Z+12, r16	; 0x0c
    43ae:	15 87       	std	Z+13, r17	; 0x0d
    43b0:	dd 24       	eor	r13, r13
    43b2:	d3 94       	inc	r13
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}

void rf_addr_decode_disable()
    43b4:	80 81       	ld	r24, Z
    43b6:	82 30       	cpi	r24, 0x02	; 2
    43b8:	a1 f4       	brne	.+40     	; 0x43e2 <nrk_event_signal+0xb2>
{
    43ba:	82 85       	ldd	r24, Z+10	; 0x0a
    43bc:	93 85       	ldd	r25, Z+11	; 0x0b
    43be:	a4 85       	ldd	r26, Z+12	; 0x0c
    43c0:	b5 85       	ldd	r27, Z+13	; 0x0d
    43c2:	8e 15       	cp	r24, r14
    43c4:	9f 05       	cpc	r25, r15
    43c6:	a0 07       	cpc	r26, r16
    43c8:	b1 07       	cpc	r27, r17
    43ca:	59 f4       	brne	.+22     	; 0x43e2 <nrk_event_signal+0xb2>
    mdmctrl0 &= (~0x0800);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    43cc:	83 e0       	ldi	r24, 0x03	; 3
    43ce:	82 83       	std	Z+2, r24	; 0x02
}
    43d0:	17 86       	std	Z+15, r1	; 0x0f
    43d2:	16 86       	std	Z+14, r1	; 0x0e

    43d4:	10 82       	st	Z, r1

void rf_auto_ack_enable()
{
    43d6:	12 86       	std	Z+10, r1	; 0x0a
    43d8:	13 86       	std	Z+11, r1	; 0x0b
    43da:	14 86       	std	Z+12, r1	; 0x0c
    43dc:	15 86       	std	Z+13, r1	; 0x0d
    43de:	dd 24       	eor	r13, r13
    43e0:	d3 94       	inc	r13
    43e2:	b1 96       	adiw	r30, 0x21	; 33
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
void rf_set_channel( uint8_t channel )
    43e4:	86 e0       	ldi	r24, 0x06	; 6
    43e6:	e8 3f       	cpi	r30, 0xF8	; 248
    43e8:	f8 07       	cpc	r31, r24
    43ea:	51 f6       	brne	.-108    	; 0x4380 <nrk_event_signal+0x50>
    auto_ack_enable=1;
    mdmctrl0 |= 0x0010;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
}

void rf_auto_ack_disable()
    43ec:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>
{
    43f0:	dd 20       	and	r13, r13
    43f2:	19 f0       	breq	.+6      	; 0x43fa <nrk_event_signal+0xca>
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	05 c0       	rjmp	.+10     	; 0x4404 <nrk_event_signal+0xd4>
    auto_ack_enable=0;
    mdmctrl0 &= (~0x0010);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}

    43fa:	82 e0       	ldi	r24, 0x02	; 2
    43fc:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_nrk_errno_set>
    4400:	8f ef       	ldi	r24, 0xFF	; 255
    4402:	9f ef       	ldi	r25, 0xFF	; 255
    4404:	1f 91       	pop	r17
    4406:	0f 91       	pop	r16
    4408:	ff 90       	pop	r15
    440a:	ef 90       	pop	r14
    440c:	df 90       	pop	r13
    440e:	08 95       	ret

00004410 <nrk_signal_delete>:
void rf_security_set_ctr_counter(uint8_t *counter)
{
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
    4410:	ef 92       	push	r14
    4412:	ff 92       	push	r15
    4414:	0f 93       	push	r16
    4416:	1f 93       	push	r17
    4418:	cf 93       	push	r28
    441a:	df 93       	push	r29
tx_ctr[0]=counter[0];
tx_ctr[1]=counter[1];
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
    441c:	c8 2f       	mov	r28, r24
    441e:	dd 27       	eor	r29, r29
    4420:	c7 fd       	sbrc	r28, 7
    4422:	d0 95       	com	r29
    4424:	f1 e0       	ldi	r31, 0x01	; 1
    4426:	ef 2e       	mov	r14, r31
    4428:	f1 2c       	mov	r15, r1
    442a:	01 2d       	mov	r16, r1
    442c:	11 2d       	mov	r17, r1
    442e:	0c 2e       	mov	r0, r28
    4430:	04 c0       	rjmp	.+8      	; 0x443a <nrk_signal_delete+0x2a>
    4432:	ee 0c       	add	r14, r14
    4434:	ff 1c       	adc	r15, r15
    4436:	00 1f       	adc	r16, r16
    4438:	11 1f       	adc	r17, r17
    443a:	0a 94       	dec	r0
    443c:	d2 f7       	brpl	.-12     	; 0x4432 <nrk_signal_delete+0x22>
}

    443e:	80 91 93 03 	lds	r24, 0x0393
    4442:	90 91 94 03 	lds	r25, 0x0394
    4446:	a0 91 95 03 	lds	r26, 0x0395
    444a:	b0 91 96 03 	lds	r27, 0x0396
    444e:	8e 21       	and	r24, r14
    4450:	9f 21       	and	r25, r15
    4452:	a0 23       	and	r26, r16
    4454:	b1 23       	and	r27, r17
    4456:	00 97       	sbiw	r24, 0x00	; 0
    4458:	a1 05       	cpc	r26, r1
    445a:	b1 05       	cpc	r27, r1
    445c:	19 f4       	brne	.+6      	; 0x4464 <nrk_signal_delete+0x54>
    445e:	8f ef       	ldi	r24, 0xFF	; 255
    4460:	9f ef       	ldi	r25, 0xFF	; 255
    4462:	5d c0       	rjmp	.+186    	; 0x451e <nrk_signal_delete+0x10e>

void rf_security_set_key(uint8_t *key)
    4464:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>
    4468:	ee e8       	ldi	r30, 0x8E	; 142
    446a:	f6 e0       	ldi	r31, 0x06	; 6
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

    446c:	a8 01       	movw	r20, r16
    446e:	97 01       	movw	r18, r14
    4470:	20 95       	com	r18
    4472:	30 95       	com	r19
    4474:	40 95       	com	r20
    4476:	50 95       	com	r21
}


void rf_security_set_key(uint8_t *key)
{
uint8_t n,i;
    4478:	80 85       	ldd	r24, Z+8	; 0x08
    447a:	8f 3f       	cpi	r24, 0xFF	; 255
    447c:	41 f1       	breq	.+80     	; 0x44ce <nrk_signal_delete+0xbe>
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    447e:	85 85       	ldd	r24, Z+13	; 0x0d
    4480:	96 85       	ldd	r25, Z+14	; 0x0e
    4482:	a7 85       	ldd	r26, Z+15	; 0x0f
    4484:	b0 89       	ldd	r27, Z+16	; 0x10
    4486:	8e 15       	cp	r24, r14
    4488:	9f 05       	cpc	r25, r15
    448a:	a0 07       	cpc	r26, r16
    448c:	b1 07       	cpc	r27, r17
    448e:	39 f4       	brne	.+14     	; 0x449e <nrk_signal_delete+0x8e>
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    4490:	11 8a       	std	Z+17, r1	; 0x11
    4492:	12 8a       	std	Z+18, r1	; 0x12
    4494:	13 8a       	std	Z+19, r1	; 0x13
    4496:	14 8a       	std	Z+20, r1	; 0x14
   	nrk_spin_wait_us(100); 
    4498:	17 82       	std	Z+7, r1	; 0x07
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    449a:	83 e0       	ldi	r24, 0x03	; 3
    449c:	81 87       	std	Z+9, r24	; 0x09
	}

    449e:	85 85       	ldd	r24, Z+13	; 0x0d
    44a0:	96 85       	ldd	r25, Z+14	; 0x0e
    44a2:	a7 85       	ldd	r26, Z+15	; 0x0f
    44a4:	b0 89       	ldd	r27, Z+16	; 0x10
    44a6:	82 23       	and	r24, r18
    44a8:	93 23       	and	r25, r19
    44aa:	a4 23       	and	r26, r20
    44ac:	b5 23       	and	r27, r21
    44ae:	85 87       	std	Z+13, r24	; 0x0d
    44b0:	96 87       	std	Z+14, r25	; 0x0e
    44b2:	a7 87       	std	Z+15, r26	; 0x0f
    44b4:	b0 8b       	std	Z+16, r27	; 0x10
// Set AES nonce to all zeros
    44b6:	81 89       	ldd	r24, Z+17	; 0x11
    44b8:	92 89       	ldd	r25, Z+18	; 0x12
    44ba:	a3 89       	ldd	r26, Z+19	; 0x13
    44bc:	b4 89       	ldd	r27, Z+20	; 0x14
    44be:	82 23       	and	r24, r18
    44c0:	93 23       	and	r25, r19
    44c2:	a4 23       	and	r26, r20
    44c4:	b5 23       	and	r27, r21
    44c6:	81 8b       	std	Z+17, r24	; 0x11
    44c8:	92 8b       	std	Z+18, r25	; 0x12
    44ca:	a3 8b       	std	Z+19, r26	; 0x13
    44cc:	b4 8b       	std	Z+20, r27	; 0x14
    44ce:	b1 96       	adiw	r30, 0x21	; 33
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    44d0:	86 e0       	ldi	r24, 0x06	; 6
    44d2:	e1 3f       	cpi	r30, 0xF1	; 241
    44d4:	f8 07       	cpc	r31, r24
    44d6:	81 f6       	brne	.-96     	; 0x4478 <nrk_signal_delete+0x68>

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    44d8:	2e ef       	ldi	r18, 0xFE	; 254
    44da:	3f ef       	ldi	r19, 0xFF	; 255
    44dc:	4f ef       	ldi	r20, 0xFF	; 255
    44de:	5f ef       	ldi	r21, 0xFF	; 255
    44e0:	04 c0       	rjmp	.+8      	; 0x44ea <nrk_signal_delete+0xda>
    44e2:	22 0f       	add	r18, r18
    44e4:	33 1f       	adc	r19, r19
    44e6:	44 1f       	adc	r20, r20
    44e8:	55 1f       	adc	r21, r21
    44ea:	ca 95       	dec	r28
    44ec:	d2 f7       	brpl	.-12     	; 0x44e2 <nrk_signal_delete+0xd2>
    44ee:	80 91 93 03 	lds	r24, 0x0393
    44f2:	90 91 94 03 	lds	r25, 0x0394
    44f6:	a0 91 95 03 	lds	r26, 0x0395
    44fa:	b0 91 96 03 	lds	r27, 0x0396
    44fe:	82 23       	and	r24, r18
    4500:	93 23       	and	r25, r19
    4502:	a4 23       	and	r26, r20
    4504:	b5 23       	and	r27, r21
    4506:	80 93 93 03 	sts	0x0393, r24
    450a:	90 93 94 03 	sts	0x0394, r25
    450e:	a0 93 95 03 	sts	0x0395, r26
    4512:	b0 93 96 03 	sts	0x0396, r27
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    4516:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>
    451a:	81 e0       	ldi	r24, 0x01	; 1
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	df 91       	pop	r29
    4520:	cf 91       	pop	r28
    4522:	1f 91       	pop	r17
    4524:	0f 91       	pop	r16
    4526:	ff 90       	pop	r15
    4528:	ef 90       	pop	r14
    452a:	08 95       	ret

0000452c <nrk_sem_pend>:
//		registers and protocol addresses (for automatic address recognition). Note that the crystal
//		oscillator will remain on (forever).
//
//  ARGUMENTS:
//      RF_RX_INFO *pRRI
//          A pointer the RF_RX_INFO data structure to be used during the first packet reception.
    452c:	1f 93       	push	r17
    452e:	cf 93       	push	r28
    4530:	df 93       	push	r29
//			The structure can be switched upon packet reception.
//      uint8_t channel
    4532:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <nrk_get_resource_index>
    4536:	18 2f       	mov	r17, r24
//          The RF channel to be used (11 = 2405 MHz to 26 = 2480 MHz)
    4538:	8f 3f       	cpi	r24, 0xFF	; 255
    453a:	11 f4       	brne	.+4      	; 0x4540 <nrk_sem_pend+0x14>
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	03 c0       	rjmp	.+6      	; 0x4546 <nrk_sem_pend+0x1a>
//      WORD panId
    4540:	82 30       	cpi	r24, 0x02	; 2
    4542:	31 f4       	brne	.+12     	; 0x4550 <nrk_sem_pend+0x24>
    4544:	82 e0       	ldi	r24, 0x02	; 2
    4546:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_nrk_errno_set>
    454a:	8f ef       	ldi	r24, 0xFF	; 255
    454c:	9f ef       	ldi	r25, 0xFF	; 255
    454e:	3e c0       	rjmp	.+124    	; 0x45cc <nrk_sem_pend+0xa0>
//          The personal area network identification number
//      WORD myAddr
    4550:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
    4554:	81 2f       	mov	r24, r17
    4556:	99 27       	eor	r25, r25
    4558:	87 fd       	sbrc	r24, 7
    455a:	90 95       	com	r25
    455c:	ec 01       	movw	r28, r24
    455e:	cc 0f       	add	r28, r28
    4560:	dd 1f       	adc	r29, r29
    4562:	c8 0f       	add	r28, r24
    4564:	d9 1f       	adc	r29, r25
    4566:	cd 50       	subi	r28, 0x0D	; 13
    4568:	d9 4f       	sbci	r29, 0xF9	; 249
    456a:	8a 81       	ldd	r24, Y+2	; 0x02
    456c:	88 23       	and	r24, r24
    456e:	d9 f4       	brne	.+54     	; 0x45a6 <nrk_sem_pend+0x7a>
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
    4570:	e0 91 0a 07 	lds	r30, 0x070A
    4574:	f0 91 0b 07 	lds	r31, 0x070B
    4578:	87 81       	ldd	r24, Z+7	; 0x07
    457a:	82 60       	ori	r24, 0x02	; 2
    457c:	87 83       	std	Z+7, r24	; 0x07
//-------------------------------------------------------------------------------------------------------
    457e:	e0 91 0a 07 	lds	r30, 0x070A
    4582:	f0 91 0b 07 	lds	r31, 0x070B
    4586:	81 2f       	mov	r24, r17
    4588:	99 27       	eor	r25, r25
    458a:	87 fd       	sbrc	r24, 7
    458c:	90 95       	com	r25
    458e:	a9 2f       	mov	r26, r25
    4590:	b9 2f       	mov	r27, r25
    4592:	81 8b       	std	Z+17, r24	; 0x11
    4594:	92 8b       	std	Z+18, r25	; 0x12
    4596:	a3 8b       	std	Z+19, r26	; 0x13
    4598:	b4 8b       	std	Z+20, r27	; 0x14
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    uint8_t n;
    459a:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>

    459e:	80 e0       	ldi	r24, 0x00	; 0
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <nrk_wait_until_ticks>
#ifdef RADIO_PRIORITY_CEILING
   int8_t v;
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    45a6:	8a 81       	ldd	r24, Y+2	; 0x02
    45a8:	81 50       	subi	r24, 0x01	; 1
    45aa:	8a 83       	std	Y+2, r24	; 0x02
    if (radio_sem == NULL)
    45ac:	e0 91 0a 07 	lds	r30, 0x070A
    45b0:	f0 91 0b 07 	lds	r31, 0x070B
    45b4:	89 81       	ldd	r24, Y+1	; 0x01
    45b6:	83 87       	std	Z+11, r24	; 0x0b
      nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());
    45b8:	e0 91 0a 07 	lds	r30, 0x070A
    45bc:	f0 91 0b 07 	lds	r31, 0x070B
    45c0:	81 e0       	ldi	r24, 0x01	; 1
    45c2:	84 83       	std	Z+4, r24	; 0x04

    45c4:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	df 91       	pop	r29
    45ce:	cf 91       	pop	r28
    45d0:	1f 91       	pop	r17
    45d2:	08 95       	ret

000045d4 <nrk_event_wait>:

void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
uint8_t n;
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    45d4:	9b 01       	movw	r18, r22
    45d6:	ac 01       	movw	r20, r24
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    nrk_spin_wait_us(500);
}
    45d8:	e0 91 0a 07 	lds	r30, 0x070A
    45dc:	f0 91 0b 07 	lds	r31, 0x070B
    45e0:	85 85       	ldd	r24, Z+13	; 0x0d
    45e2:	96 85       	ldd	r25, Z+14	; 0x0e
    45e4:	a7 85       	ldd	r26, Z+15	; 0x0f
    45e6:	b0 89       	ldd	r27, Z+16	; 0x10
    45e8:	82 23       	and	r24, r18
    45ea:	93 23       	and	r25, r19
    45ec:	a4 23       	and	r26, r20
    45ee:	b5 23       	and	r27, r21
    45f0:	00 97       	sbiw	r24, 0x00	; 0
    45f2:	a1 05       	cpc	r26, r1
    45f4:	b1 05       	cpc	r27, r1
    45f6:	29 f4       	brne	.+10     	; 0x4602 <nrk_event_wait+0x2e>
    45f8:	60 e0       	ldi	r22, 0x00	; 0
    45fa:	70 e0       	ldi	r23, 0x00	; 0
    45fc:	80 e0       	ldi	r24, 0x00	; 0
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	08 95       	ret


    4602:	21 8b       	std	Z+17, r18	; 0x11
    4604:	32 8b       	std	Z+18, r19	; 0x12
    4606:	43 8b       	std	Z+19, r20	; 0x13
    4608:	54 8b       	std	Z+20, r21	; 0x14

    460a:	81 e0       	ldi	r24, 0x01	; 1
    460c:	87 83       	std	Z+7, r24	; 0x07
{

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif

    460e:	00 90 fa 06 	lds	r0, 0x06FA
    4612:	04 c0       	rjmp	.+8      	; 0x461c <nrk_event_wait+0x48>
    4614:	56 95       	lsr	r21
    4616:	47 95       	ror	r20
    4618:	37 95       	ror	r19
    461a:	27 95       	ror	r18
    461c:	0a 94       	dec	r0
    461e:	d2 f7       	brpl	.-12     	; 0x4614 <nrk_event_wait+0x40>
    4620:	c9 01       	movw	r24, r18
    4622:	81 70       	andi	r24, 0x01	; 1
    4624:	90 70       	andi	r25, 0x00	; 0
    4626:	89 2b       	or	r24, r25
    4628:	19 f0       	breq	.+6      	; 0x4630 <nrk_event_wait+0x5c>
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    462a:	0e 94 d6 24 	call	0x49ac	; 0x49ac <nrk_wait_until_nw>
    462e:	04 c0       	rjmp	.+8      	; 0x4638 <nrk_event_wait+0x64>
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    halRfSetChannel(channel);
    4630:	80 e0       	ldi	r24, 0x00	; 0
    4632:	90 e0       	ldi	r25, 0x00	; 0
    4634:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <nrk_wait_until_ticks>
    rfSettings.pRxInfo = pRRI;

    4638:	e0 91 0a 07 	lds	r30, 0x070A
    463c:	f0 91 0b 07 	lds	r31, 0x070B
    4640:	61 89       	ldd	r22, Z+17	; 0x11
    4642:	72 89       	ldd	r23, Z+18	; 0x12
    4644:	83 89       	ldd	r24, Z+19	; 0x13
    4646:	94 89       	ldd	r25, Z+20	; 0x14
#ifdef RADIO_PRIORITY_CEILING
    4648:	08 95       	ret

0000464a <nrk_get_high_ready_task_ID>:


//#ifndef RADIO_PRIORITY_CEILING
//  #define RADIO_PRIORITY_CEILING	20
//#endif

    464a:	e0 91 ff 06 	lds	r30, 0x06FF
    464e:	f0 91 00 07 	lds	r31, 0x0700
    4652:	80 81       	ld	r24, Z
nrk_sem_t *radio_sem;
uint8_t auto_ack_enable;
    4654:	99 27       	eor	r25, r25
    4656:	08 95       	ret

00004658 <nrk_print_readyQ>:
uint8_t security_enable;
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];
    4658:	e0 91 ff 06 	lds	r30, 0x06FF
    465c:	f0 91 00 07 	lds	r31, 0x0700
    4660:	03 c0       	rjmp	.+6      	; 0x4668 <nrk_print_readyQ+0x10>

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
    4662:	03 80       	ldd	r0, Z+3	; 0x03
    4664:	f4 81       	ldd	r31, Z+4	; 0x04
    4666:	e0 2d       	mov	r30, r0
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];

// Returns 1 if the last packet was encrypted, 0 otherwise
    4668:	30 97       	sbiw	r30, 0x00	; 0
    466a:	d9 f7       	brne	.-10     	; 0x4662 <nrk_print_readyQ+0xa>
    466c:	08 95       	ret

0000466e <nrk_add_to_readyQ>:
}


void rf_security_set_ctr_counter(uint8_t *counter)
{
uint8_t n;
    466e:	cf 93       	push	r28
    4670:	df 93       	push	r29
    4672:	48 2f       	mov	r20, r24
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
tx_ctr[0]=counter[0];
tx_ctr[1]=counter[1];
tx_ctr[2]=counter[2];
    4674:	c0 91 8c 06 	lds	r28, 0x068C
    4678:	d0 91 8d 06 	lds	r29, 0x068D
    467c:	20 97       	sbiw	r28, 0x00	; 0
    467e:	09 f4       	brne	.+2      	; 0x4682 <nrk_add_to_readyQ+0x14>
    4680:	7a c0       	rjmp	.+244    	; 0x4776 <nrk_add_to_readyQ+0x108>
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
    4682:	a0 91 ff 06 	lds	r26, 0x06FF
    4686:	b0 91 00 07 	lds	r27, 0x0700
{
uint8_t n,i;
uint16_t key_buf;
    468a:	10 97       	sbiw	r26, 0x00	; 0
    468c:	b9 f1       	breq	.+110    	; 0x46fc <nrk_add_to_readyQ+0x8e>

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    468e:	99 27       	eor	r25, r25
    4690:	87 fd       	sbrc	r24, 7
    4692:	90 95       	com	r25
    4694:	9c 01       	movw	r18, r24
    4696:	65 e0       	ldi	r22, 0x05	; 5
    4698:	22 0f       	add	r18, r18
    469a:	33 1f       	adc	r19, r19
    469c:	6a 95       	dec	r22
    469e:	e1 f7       	brne	.-8      	; 0x4698 <nrk_add_to_readyQ+0x2a>
    46a0:	28 0f       	add	r18, r24
    46a2:	39 1f       	adc	r19, r25
    46a4:	22 57       	subi	r18, 0x72	; 114
    46a6:	39 4f       	sbci	r19, 0xF9	; 249
{
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    46a8:	8c 91       	ld	r24, X
    46aa:	99 27       	eor	r25, r25
    46ac:	bc 01       	movw	r22, r24
    46ae:	55 e0       	ldi	r21, 0x05	; 5
    46b0:	66 0f       	add	r22, r22
    46b2:	77 1f       	adc	r23, r23
    46b4:	5a 95       	dec	r21
    46b6:	e1 f7       	brne	.-8      	; 0x46b0 <nrk_add_to_readyQ+0x42>
    46b8:	68 0f       	add	r22, r24
    46ba:	79 1f       	adc	r23, r25
    46bc:	62 57       	subi	r22, 0x72	; 114
    46be:	79 4f       	sbci	r23, 0xF9	; 249
    46c0:	fb 01       	movw	r30, r22
    46c2:	84 81       	ldd	r24, Z+4	; 0x04
    46c4:	88 23       	and	r24, r24
    46c6:	29 f0       	breq	.+10     	; 0x46d2 <nrk_add_to_readyQ+0x64>
for(i=0; i<8; i++ )
    46c8:	93 85       	ldd	r25, Z+11	; 0x0b
    46ca:	f9 01       	movw	r30, r18
    46cc:	82 85       	ldd	r24, Z+10	; 0x0a
    46ce:	98 17       	cp	r25, r24
    46d0:	a8 f0       	brcs	.+42     	; 0x46fc <nrk_add_to_readyQ+0x8e>
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    46d2:	f9 01       	movw	r30, r18
    46d4:	84 81       	ldd	r24, Z+4	; 0x04
    46d6:	88 23       	and	r24, r24
    46d8:	31 f0       	breq	.+12     	; 0x46e6 <nrk_add_to_readyQ+0x78>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    46da:	fb 01       	movw	r30, r22
    46dc:	92 85       	ldd	r25, Z+10	; 0x0a
    46de:	f9 01       	movw	r30, r18
    46e0:	83 85       	ldd	r24, Z+11	; 0x0b
    46e2:	98 17       	cp	r25, r24
    46e4:	58 f0       	brcs	.+22     	; 0x46fc <nrk_add_to_readyQ+0x8e>
	}

// Set AES nonce to all zeros
    46e6:	fb 01       	movw	r30, r22
    46e8:	92 85       	ldd	r25, Z+10	; 0x0a
    46ea:	f9 01       	movw	r30, r18
    46ec:	82 85       	ldd	r24, Z+10	; 0x0a
    46ee:	98 17       	cp	r25, r24
    46f0:	28 f0       	brcs	.+10     	; 0x46fc <nrk_add_to_readyQ+0x8e>
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    46f2:	fd 01       	movw	r30, r26
    46f4:	a3 81       	ldd	r26, Z+3	; 0x03
    46f6:	b4 81       	ldd	r27, Z+4	; 0x04
void rf_security_set_key(uint8_t *key)
{
uint8_t n,i;
uint16_t key_buf;

// Set AES key
    46f8:	10 97       	sbiw	r26, 0x00	; 0
    46fa:	b1 f6       	brne	.-84     	; 0x46a8 <nrk_add_to_readyQ+0x3a>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    46fc:	48 83       	st	Y, r20
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
    46fe:	e0 91 8c 06 	lds	r30, 0x068C
    4702:	f0 91 8d 06 	lds	r31, 0x068D
    4706:	23 81       	ldd	r18, Z+3	; 0x03
    4708:	34 81       	ldd	r19, Z+4	; 0x04
    470a:	30 93 8d 06 	sts	0x068D, r19
    470e:	20 93 8c 06 	sts	0x068C, r18

security_enable=1;
    4712:	80 91 ff 06 	lds	r24, 0x06FF
    4716:	90 91 00 07 	lds	r25, 0x0700
    471a:	a8 17       	cp	r26, r24
    471c:	b9 07       	cpc	r27, r25
    471e:	a1 f4       	brne	.+40     	; 0x4748 <nrk_add_to_readyQ+0xda>
}

    4720:	10 97       	sbiw	r26, 0x00	; 0
    4722:	31 f0       	breq	.+12     	; 0x4730 <nrk_add_to_readyQ+0xc2>

    4724:	bc 83       	std	Y+4, r27	; 0x04
    4726:	ab 83       	std	Y+3, r26	; 0x03

    4728:	1a 82       	std	Y+2, r1	; 0x02
    472a:	19 82       	std	Y+1, r1	; 0x01
void rf_security_disable()
    472c:	fd 01       	movw	r30, r26
    472e:	05 c0       	rjmp	.+10     	; 0x473a <nrk_add_to_readyQ+0xcc>
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
  security_enable=0;
    4730:	1c 82       	std	Y+4, r1	; 0x04
    4732:	1b 82       	std	Y+3, r1	; 0x03
}
    4734:	1a 82       	std	Y+2, r1	; 0x02
    4736:	19 82       	std	Y+1, r1	; 0x01

    4738:	f9 01       	movw	r30, r18
    473a:	d2 83       	std	Z+2, r29	; 0x02
    473c:	c1 83       	std	Z+1, r28	; 0x01
//-------------------------------------------------------------------------------------------------------
// The RF settings structure is declared here, since we'll always need halRfInit()
    473e:	d0 93 00 07 	sts	0x0700, r29
    4742:	c0 93 ff 06 	sts	0x06FF, r28
    4746:	17 c0       	rjmp	.+46     	; 0x4776 <nrk_add_to_readyQ+0x108>
    4748:	fd 01       	movw	r30, r26
    474a:	81 81       	ldd	r24, Z+1	; 0x01
    474c:	92 81       	ldd	r25, Z+2	; 0x02
volatile RF_SETTINGS rfSettings;
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
    474e:	a2 17       	cp	r26, r18
    4750:	b3 07       	cpc	r27, r19
    4752:	51 f0       	breq	.+20     	; 0x4768 <nrk_add_to_readyQ+0xfa>
{
return radio_sem;
}
    4754:	9a 83       	std	Y+2, r25	; 0x02
    4756:	89 83       	std	Y+1, r24	; 0x01

    4758:	bc 83       	std	Y+4, r27	; 0x04
    475a:	ab 83       	std	Y+3, r26	; 0x03
void rf_tx_power(uint8_t pwr)
    475c:	81 81       	ldd	r24, Z+1	; 0x01
    475e:	92 81       	ldd	r25, Z+2	; 0x02
    4760:	fc 01       	movw	r30, r24
    4762:	d4 83       	std	Z+4, r29	; 0x04
    4764:	c3 83       	std	Z+3, r28	; 0x03
    4766:	04 c0       	rjmp	.+8      	; 0x4770 <nrk_add_to_readyQ+0x102>
{
uint16_t tmp;
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    4768:	1c 82       	std	Y+4, r1	; 0x04
    476a:	1b 82       	std	Y+3, r1	; 0x03
#endif
    476c:	9a 83       	std	Y+2, r25	; 0x02
    476e:	89 83       	std	Y+1, r24	; 0x01
    tmp=0xA0E0;
    4770:	fd 01       	movw	r30, r26
    4772:	d2 83       	std	Z+2, r29	; 0x02
    4774:	c1 83       	std	Z+1, r28	; 0x01
    4776:	df 91       	pop	r29
    4778:	cf 91       	pop	r28
    477a:	08 95       	ret

0000477c <nrk_rem_from_readyQ>:
    nrk_sem_post(radio_sem);
#endif
}
void rf_set_channel( uint8_t channel )
{
#ifdef RADIO_PRIORITY_CEILING
    477c:	cf 93       	push	r28
    477e:	df 93       	push	r29
    mdmctrl0 |= 0x0010;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
}

void rf_auto_ack_disable()
{
    4780:	a0 91 ff 06 	lds	r26, 0x06FF
    4784:	b0 91 00 07 	lds	r27, 0x0700
    4788:	10 97       	sbiw	r26, 0x00	; 0
    478a:	09 f4       	brne	.+2      	; 0x478e <nrk_rem_from_readyQ+0x12>
    478c:	46 c0       	rjmp	.+140    	; 0x481a <nrk_rem_from_readyQ+0x9e>
    auto_ack_enable=0;
    mdmctrl0 &= (~0x0010);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}

    478e:	48 2f       	mov	r20, r24
    4790:	55 27       	eor	r21, r21
    4792:	47 fd       	sbrc	r20, 7
    4794:	50 95       	com	r21
    4796:	8c 91       	ld	r24, X
    4798:	99 27       	eor	r25, r25
    479a:	84 17       	cp	r24, r20
    479c:	95 07       	cpc	r25, r21
    479e:	69 f4       	brne	.+26     	; 0x47ba <nrk_rem_from_readyQ+0x3e>

void rf_addr_decode_set_my_mac(uint16_t my_mac)
    47a0:	ed 01       	movw	r28, r26
    47a2:	eb 81       	ldd	r30, Y+3	; 0x03
    47a4:	fc 81       	ldd	r31, Y+4	; 0x04
    47a6:	f0 93 00 07 	sts	0x0700, r31
    47aa:	e0 93 ff 06 	sts	0x06FF, r30
{
    47ae:	12 82       	std	Z+2, r1	; 0x02
    47b0:	11 82       	std	Z+1, r1	; 0x01
    47b2:	16 c0       	rjmp	.+44     	; 0x47e0 <nrk_rem_from_readyQ+0x64>
uint8_t n;
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    47b4:	d9 01       	movw	r26, r18

void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
uint8_t n;
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    47b6:	23 2b       	or	r18, r19
    47b8:	81 f1       	breq	.+96     	; 0x481a <nrk_rem_from_readyQ+0x9e>
    47ba:	8c 91       	ld	r24, X
    47bc:	99 27       	eor	r25, r25
    47be:	fd 01       	movw	r30, r26
    47c0:	23 81       	ldd	r18, Z+3	; 0x03
    47c2:	34 81       	ldd	r19, Z+4	; 0x04
    47c4:	84 17       	cp	r24, r20
    47c6:	95 07       	cpc	r25, r21
    47c8:	a9 f7       	brne	.-22     	; 0x47b4 <nrk_rem_from_readyQ+0x38>
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    nrk_spin_wait_us(500);
}



    47ca:	c1 81       	ldd	r28, Z+1	; 0x01
    47cc:	d2 81       	ldd	r29, Z+2	; 0x02
    47ce:	3c 83       	std	Y+4, r19	; 0x04
    47d0:	2b 83       	std	Y+3, r18	; 0x03
void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
    47d2:	83 81       	ldd	r24, Z+3	; 0x03
    47d4:	94 81       	ldd	r25, Z+4	; 0x04
    47d6:	00 97       	sbiw	r24, 0x00	; 0
    47d8:	19 f0       	breq	.+6      	; 0x47e0 <nrk_rem_from_readyQ+0x64>
{
    47da:	fc 01       	movw	r30, r24
    47dc:	d2 83       	std	Z+2, r29	; 0x02
    47de:	c1 83       	std	Z+1, r28	; 0x01
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    47e0:	e0 91 8c 06 	lds	r30, 0x068C
    47e4:	f0 91 8d 06 	lds	r31, 0x068D
    47e8:	30 97       	sbiw	r30, 0x00	; 0
    47ea:	41 f4       	brne	.+16     	; 0x47fc <nrk_rem_from_readyQ+0x80>
    halRfSetChannel(channel);
    47ec:	b0 93 8d 06 	sts	0x068D, r27
    47f0:	a0 93 8c 06 	sts	0x068C, r26
    rfSettings.pRxInfo = pRRI;
    47f4:	ed 01       	movw	r28, r26
    47f6:	1c 82       	std	Y+4, r1	; 0x04
    47f8:	1b 82       	std	Y+3, r1	; 0x03
    47fa:	09 c0       	rjmp	.+18     	; 0x480e <nrk_rem_from_readyQ+0x92>

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    47fc:	ed 01       	movw	r28, r26
    47fe:	fc 83       	std	Y+4, r31	; 0x04
    4800:	eb 83       	std	Y+3, r30	; 0x03
#endif
    4802:	b2 83       	std	Z+2, r27	; 0x02
    4804:	a1 83       	std	Z+1, r26	; 0x01
}
    4806:	b0 93 8d 06 	sts	0x068D, r27
    480a:	a0 93 8c 06 	sts	0x068C, r26
//-------------------------------------------------------------------------------------------------------
//  void rf_init(RF_RX_INFO *pRRI, uint8_t channel, WORD panId, WORD myAddr)
    480e:	e0 91 8c 06 	lds	r30, 0x068C
    4812:	f0 91 8d 06 	lds	r31, 0x068D
    4816:	12 82       	std	Z+2, r1	; 0x02
    4818:	11 82       	std	Z+1, r1	; 0x01
    481a:	df 91       	pop	r29
    481c:	cf 91       	pop	r28
    481e:	08 95       	ret

00004820 <nrk_get_pid>:
//	ENABLE_GLOBAL_INT();

    // Wait for the acknowledge to be received, if any
    /*if (pRTI->ackRequest) {
		rfSettings.ackReceived = FALSE;

    4820:	e0 91 0a 07 	lds	r30, 0x070A
    4824:	f0 91 0b 07 	lds	r31, 0x070B
    4828:	80 85       	ldd	r24, Z+8	; 0x08
		// Wait for the SFD to go low again
		while (SFD_IS_1);
    482a:	99 27       	eor	r25, r25
    482c:	08 95       	ret

0000482e <_nrk_wait_for_scheduler>:
	      ENABLE_GLOBAL_INT ();
		nrk_sem_post(radio_sem);
		//printf("transmission fail.\n\r");
	      return FALSE;
	    }
	  halWait (100);
    482e:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <nrk_idle>
	}
    4832:	e0 91 0a 07 	lds	r30, 0x070A
    4836:	f0 91 0b 07 	lds	r31, 0x070B
    483a:	85 81       	ldd	r24, Z+5	; 0x05
    483c:	88 23       	and	r24, r24
    483e:	b9 f7       	brne	.-18     	; 0x482e <_nrk_wait_for_scheduler>
    4840:	08 95       	ret

00004842 <nrk_wait>:
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    4842:	ff 92       	push	r15
    4844:	0f 93       	push	r16
    4846:	1f 93       	push	r17
    4848:	cf 93       	push	r28
    484a:	df 93       	push	r29
    484c:	cd b7       	in	r28, 0x3d	; 61
    484e:	de b7       	in	r29, 0x3e	; 62
    4850:	28 97       	sbiw	r28, 0x08	; 8
    4852:	0f b6       	in	r0, 0x3f	; 63
    4854:	f8 94       	cli
    4856:	de bf       	out	0x3e, r29	; 62
    4858:	0f be       	out	0x3f, r0	; 63
    485a:	cd bf       	out	0x3d, r28	; 61
    485c:	29 83       	std	Y+1, r18	; 0x01
    485e:	3a 83       	std	Y+2, r19	; 0x02
    4860:	4b 83       	std	Y+3, r20	; 0x03
    4862:	5c 83       	std	Y+4, r21	; 0x04
    4864:	6d 83       	std	Y+5, r22	; 0x05
    4866:	7e 83       	std	Y+6, r23	; 0x06
    4868:	8f 83       	std	Y+7, r24	; 0x07
    486a:	98 87       	std	Y+8, r25	; 0x08
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address

    nrk_high_speed_timer_wait(slot_start_time,tx_guard_time);
    
    486c:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <nrk_stack_check>
if (pRTI->cca == TRUE)
    {
    4870:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>
    uint8_t cnt;
    4874:	e0 91 0a 07 	lds	r30, 0x070A
    4878:	f0 91 0b 07 	lds	r31, 0x070B
    487c:	81 e0       	ldi	r24, 0x01	; 1
    487e:	85 83       	std	Z+5, r24	; 0x05
      if (!rfSettings.receiveOn)
    4880:	81 e0       	ldi	r24, 0x01	; 1
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	90 a3       	std	Z+32, r25	; 0x20
    4886:	87 8f       	std	Z+31, r24	; 0x1f
	{
    4888:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
    488c:	f8 2e       	mov	r15, r24
	  FASTSPI_STROBE (CC2420_SRXON);
	}

    488e:	29 81       	ldd	r18, Y+1	; 0x01
    4890:	3a 81       	ldd	r19, Y+2	; 0x02
    4892:	4b 81       	ldd	r20, Y+3	; 0x03
    4894:	5c 81       	ldd	r21, Y+4	; 0x04
    4896:	6d 81       	ldd	r22, Y+5	; 0x05
    4898:	7e 81       	ldd	r23, Y+6	; 0x06
    489a:	8f 81       	ldd	r24, Y+7	; 0x07
    489c:	98 85       	ldd	r25, Y+8	; 0x08
    489e:	0e 94 83 27 	call	0x4f06	; 0x4f06 <_nrk_time_to_ticks>
      // Wait for the RSSI value to become valid
      /*do
    48a2:	e0 91 0a 07 	lds	r30, 0x070A
    48a6:	f0 91 0b 07 	lds	r31, 0x070B
    48aa:	0f 2d       	mov	r16, r15
    48ac:	11 27       	eor	r17, r17
    48ae:	80 0f       	add	r24, r16
    48b0:	91 1f       	adc	r25, r17
    48b2:	96 8b       	std	Z+22, r25	; 0x16
    48b4:	85 8b       	std	Z+21, r24	; 0x15
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    48b6:	87 ef       	ldi	r24, 0xF7	; 247
    48b8:	8f 15       	cp	r24, r15
    48ba:	70 f0       	brcs	.+28     	; 0x48d8 <nrk_wait+0x96>
	}
    48bc:	0e 94 c1 2c 	call	0x5982	; 0x5982 <_nrk_get_next_wakeup>
    48c0:	0e 5f       	subi	r16, 0xFE	; 254
    48c2:	1f 4f       	sbci	r17, 0xFF	; 255
    48c4:	99 27       	eor	r25, r25
    48c6:	80 17       	cp	r24, r16
    48c8:	91 07       	cpc	r25, r17
    48ca:	34 f0       	brlt	.+12     	; 0x48d8 <nrk_wait+0x96>
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));*/
    48cc:	8f 2d       	mov	r24, r15
    48ce:	8e 5f       	subi	r24, 0xFE	; 254

    48d0:	80 93 59 06 	sts	0x0659, r24
      // TX begins after the CCA check has passed
    48d4:	0e 94 c6 2c 	call	0x598c	; 0x598c <_nrk_set_next_wakeup>
      cnt = 0;
      do
    48d8:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    48dc:	0e 94 17 24 	call	0x482e	; 0x482e <_nrk_wait_for_scheduler>
	  FASTSPI_UPD_STATUS (spiStatusByte);
	  cnt++;
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	28 96       	adiw	r28, 0x08	; 8
    48e6:	0f b6       	in	r0, 0x3f	; 63
    48e8:	f8 94       	cli
    48ea:	de bf       	out	0x3e, r29	; 62
    48ec:	0f be       	out	0x3f, r0	; 63
    48ee:	cd bf       	out	0x3d, r28	; 61
    48f0:	df 91       	pop	r29
    48f2:	cf 91       	pop	r28
    48f4:	1f 91       	pop	r17
    48f6:	0f 91       	pop	r16
    48f8:	ff 90       	pop	r15
    48fa:	08 95       	ret

000048fc <nrk_wait_until>:
	//printf("In basic_rf.c: cnt is %d\n\r", cnt);
    }
  else
    FASTSPI_STROBE (CC2420_STXON);
	 //nrk_gpio_set(DEBUG_0);

    48fc:	8f 92       	push	r8
    48fe:	9f 92       	push	r9
    4900:	af 92       	push	r10
    4902:	bf 92       	push	r11
    4904:	cf 92       	push	r12
    4906:	df 92       	push	r13
    4908:	ef 92       	push	r14
    490a:	ff 92       	push	r15
    490c:	0f 93       	push	r16
    490e:	1f 93       	push	r17
    4910:	cf 93       	push	r28
    4912:	df 93       	push	r29
    4914:	cd b7       	in	r28, 0x3d	; 61
    4916:	de b7       	in	r29, 0x3e	; 62
    4918:	60 97       	sbiw	r28, 0x10	; 16
    491a:	0f b6       	in	r0, 0x3f	; 63
    491c:	f8 94       	cli
    491e:	de bf       	out	0x3e, r29	; 62
    4920:	0f be       	out	0x3f, r0	; 63
    4922:	cd bf       	out	0x3d, r28	; 61
    4924:	29 87       	std	Y+9, r18	; 0x09
    4926:	3a 87       	std	Y+10, r19	; 0x0a
    4928:	4b 87       	std	Y+11, r20	; 0x0b
    492a:	5c 87       	std	Y+12, r21	; 0x0c
    492c:	6d 87       	std	Y+13, r22	; 0x0d
    492e:	7e 87       	std	Y+14, r23	; 0x0e
    4930:	8f 87       	std	Y+15, r24	; 0x0f
    4932:	98 8b       	std	Y+16, r25	; 0x10
    // get the high speed timer value
    *tx_start_time = TCNT1;
    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    4934:	ce 01       	movw	r24, r28
    4936:	01 96       	adiw	r24, 0x01	; 1
    4938:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <nrk_time_get>
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum

    493c:	89 80       	ldd	r8, Y+1	; 0x01
    493e:	9a 80       	ldd	r9, Y+2	; 0x02
    4940:	ab 80       	ldd	r10, Y+3	; 0x03
    4942:	bc 80       	ldd	r11, Y+4	; 0x04
    4944:	cd 80       	ldd	r12, Y+5	; 0x05
    4946:	de 80       	ldd	r13, Y+6	; 0x06
    4948:	ef 80       	ldd	r14, Y+7	; 0x07
    494a:	f8 84       	ldd	r15, Y+8	; 0x08
    494c:	09 85       	ldd	r16, Y+9	; 0x09
    494e:	1a 85       	ldd	r17, Y+10	; 0x0a
    4950:	2b 85       	ldd	r18, Y+11	; 0x0b
    4952:	3c 85       	ldd	r19, Y+12	; 0x0c
    4954:	4d 85       	ldd	r20, Y+13	; 0x0d
    4956:	5e 85       	ldd	r21, Y+14	; 0x0e
    4958:	6f 85       	ldd	r22, Y+15	; 0x0f
    495a:	78 89       	ldd	r23, Y+16	; 0x10
    495c:	ce 01       	movw	r24, r28
    495e:	09 96       	adiw	r24, 0x09	; 9
    4960:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <nrk_time_sub>

    4964:	88 23       	and	r24, r24
    4966:	19 f4       	brne	.+6      	; 0x496e <nrk_wait_until+0x72>
    4968:	8f ef       	ldi	r24, 0xFF	; 255
    496a:	9f ef       	ldi	r25, 0xFF	; 255
    496c:	0c c0       	rjmp	.+24     	; 0x4986 <nrk_wait_until+0x8a>
    //nrk_spin_wait_us(200);
//  FASTSPI_STROBE(CC2420_STXON);
   // Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
	while (!SFD_IS_1);
	success = TRUE;
    496e:	29 85       	ldd	r18, Y+9	; 0x09
    4970:	3a 85       	ldd	r19, Y+10	; 0x0a
    4972:	4b 85       	ldd	r20, Y+11	; 0x0b
    4974:	5c 85       	ldd	r21, Y+12	; 0x0c
    4976:	6d 85       	ldd	r22, Y+13	; 0x0d
    4978:	7e 85       	ldd	r23, Y+14	; 0x0e
    497a:	8f 85       	ldd	r24, Y+15	; 0x0f
    497c:	98 89       	ldd	r25, Y+16	; 0x10
    497e:	0e 94 21 24 	call	0x4842	; 0x4842 <nrk_wait>
    4982:	81 e0       	ldi	r24, 0x01	; 1
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	60 96       	adiw	r28, 0x10	; 16
    4988:	0f b6       	in	r0, 0x3f	; 63
    498a:	f8 94       	cli
    498c:	de bf       	out	0x3e, r29	; 62
    498e:	0f be       	out	0x3f, r0	; 63
    4990:	cd bf       	out	0x3d, r28	; 61
    4992:	df 91       	pop	r29
    4994:	cf 91       	pop	r28
    4996:	1f 91       	pop	r17
    4998:	0f 91       	pop	r16
    499a:	ff 90       	pop	r15
    499c:	ef 90       	pop	r14
    499e:	df 90       	pop	r13
    49a0:	cf 90       	pop	r12
    49a2:	bf 90       	pop	r11
    49a4:	af 90       	pop	r10
    49a6:	9f 90       	pop	r9
    49a8:	8f 90       	pop	r8
    49aa:	08 95       	ret

000049ac <nrk_wait_until_nw>:
     while (FIFOP_IS_1 || SFD_IS_1);
    // Turn off global interrupts to avoid interference on the SPI interface
      DISABLE_GLOBAL_INT();
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    49ac:	1f 93       	push	r17

    checksum=0;
    49ae:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>
    for(i=0; i<pRTI->length; i++ )
    49b2:	e0 91 0a 07 	lds	r30, 0x070A
    49b6:	f0 91 0b 07 	lds	r31, 0x070B
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	85 83       	std	Z+5, r24	; 0x05
    {
    49be:	86 83       	std	Z+6, r24	; 0x06
	// lets do our own payload checksum because we don't trust the CRC
    49c0:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
    49c4:	18 2f       	mov	r17, r24
	checksum+=pRTI->pPayload[i];
    }
    49c6:	88 3f       	cpi	r24, 0xF8	; 248
    49c8:	80 f4       	brcc	.+32     	; 0x49ea <nrk_wait_until_nw+0x3e>
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    49ca:	0e 94 c1 2c 	call	0x5982	; 0x5982 <_nrk_get_next_wakeup>
    49ce:	21 2f       	mov	r18, r17
    49d0:	33 27       	eor	r19, r19
    49d2:	2e 5f       	subi	r18, 0xFE	; 254
    49d4:	3f 4f       	sbci	r19, 0xFF	; 255
    49d6:	99 27       	eor	r25, r25
    49d8:	82 17       	cp	r24, r18
    49da:	93 07       	cpc	r25, r19
    49dc:	34 f0       	brlt	.+12     	; 0x49ea <nrk_wait_until_nw+0x3e>
    //printf("packet length is %d, packet is %s.\n\r",packetLength,pRTI->pPayload);
    49de:	81 2f       	mov	r24, r17
    49e0:	8e 5f       	subi	r24, 0xFE	; 254
    //nrk_set_led(3);
    49e2:	80 93 59 06 	sts	0x0659, r24
    //do { } while(_nrk_get_high_speed_timer()<(tx_guard_time));
    49e6:	0e 94 c6 2c 	call	0x598c	; 0x598c <_nrk_set_next_wakeup>
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    49ea:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>
    // Slots for example are at a higher layer since they assume TDMA
    
    49ee:	0e 94 17 24 	call	0x482e	; 0x482e <_nrk_wait_for_scheduler>
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    49f2:	81 e0       	ldi	r24, 0x01	; 1
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	1f 91       	pop	r17
    49f8:	08 95       	ret

000049fa <nrk_set_next_wakeup>:
    nrk_sem_pend (radio_sem);
#endif
	// XXX
    	//SET_VREG_INACTIVE();	
	rfSettings.receiveOn = FALSE;
	FASTSPI_STROBE(CC2420_SRFOFF);
    49fa:	1f 93       	push	r17
    49fc:	cf 93       	push	r28
    49fe:	df 93       	push	r29
    4a00:	cd b7       	in	r28, 0x3d	; 61
    4a02:	de b7       	in	r29, 0x3e	; 62
    4a04:	28 97       	sbiw	r28, 0x08	; 8
    4a06:	0f b6       	in	r0, 0x3f	; 63
    4a08:	f8 94       	cli
    4a0a:	de bf       	out	0x3e, r29	; 62
    4a0c:	0f be       	out	0x3f, r0	; 63
    4a0e:	cd bf       	out	0x3d, r28	; 61
    4a10:	29 83       	std	Y+1, r18	; 0x01
    4a12:	3a 83       	std	Y+2, r19	; 0x02
    4a14:	4b 83       	std	Y+3, r20	; 0x03
    4a16:	5c 83       	std	Y+4, r21	; 0x04
    4a18:	6d 83       	std	Y+5, r22	; 0x05
    4a1a:	7e 83       	std	Y+6, r23	; 0x06
    4a1c:	8f 83       	std	Y+7, r24	; 0x07
    4a1e:	98 87       	std	Y+8, r25	; 0x08
	rx_ready=0;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    4a20:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>
#endif
    4a24:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
    4a28:	18 2f       	mov	r17, r24
    //	DISABLE_FIFOP_INT();
    4a2a:	29 81       	ldd	r18, Y+1	; 0x01
    4a2c:	3a 81       	ldd	r19, Y+2	; 0x02
    4a2e:	4b 81       	ldd	r20, Y+3	; 0x03
    4a30:	5c 81       	ldd	r21, Y+4	; 0x04
    4a32:	6d 81       	ldd	r22, Y+5	; 0x05
    4a34:	7e 81       	ldd	r23, Y+6	; 0x06
    4a36:	8f 81       	ldd	r24, Y+7	; 0x07
    4a38:	98 85       	ldd	r25, Y+8	; 0x08
    4a3a:	0e 94 83 27 	call	0x4f06	; 0x4f06 <_nrk_time_to_ticks>
} // rf_rx_off() 
    4a3e:	83 30       	cpi	r24, 0x03	; 3
    4a40:	91 05       	cpc	r25, r1
    4a42:	18 f4       	brcc	.+6      	; 0x4a4a <nrk_set_next_wakeup+0x50>
    4a44:	8f ef       	ldi	r24, 0xFF	; 255
    4a46:	9f ef       	ldi	r25, 0xFF	; 255
    4a48:	0c c0       	rjmp	.+24     	; 0x4a62 <nrk_set_next_wakeup+0x68>


    4a4a:	e0 91 0a 07 	lds	r30, 0x070A
    4a4e:	f0 91 0b 07 	lds	r31, 0x070B
    4a52:	81 0f       	add	r24, r17
    4a54:	91 1d       	adc	r25, r1
    4a56:	96 8b       	std	Z+22, r25	; 0x16
    4a58:	85 8b       	std	Z+21, r24	; 0x15
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time, uint16_t *tx_start_time) {
	uint16_t frameControlField;
    	uint8_t packetLength;
    	uint8_t success;
    	uint8_t spiStatusByte;
   	uint8_t checksum,i;
    4a5a:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>
    4a5e:	81 e0       	ldi	r24, 0x01	; 1
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	28 96       	adiw	r28, 0x08	; 8
    4a64:	0f b6       	in	r0, 0x3f	; 63
    4a66:	f8 94       	cli
    4a68:	de bf       	out	0x3e, r29	; 62
    4a6a:	0f be       	out	0x3f, r0	; 63
    4a6c:	cd bf       	out	0x3d, r28	; 61
    4a6e:	df 91       	pop	r29
    4a70:	cf 91       	pop	r28
    4a72:	1f 91       	pop	r17
    4a74:	08 95       	ret

00004a76 <nrk_wait_until_ticks>:
/**********************************************************
// Here is a sample of the rf_rx_callback() that should
// be placed in your application

RF_RX_INFO* rf_rx_callback(RF_RX_INFO *pRRI) {
	// Its okay to leave this empty...    
    4a76:	0f 93       	push	r16
    4a78:	1f 93       	push	r17
    4a7a:	8c 01       	movw	r16, r24
	return pRRI;
}  
    4a7c:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>
***********************************************************/
    4a80:	e0 91 0a 07 	lds	r30, 0x070A
    4a84:	f0 91 0b 07 	lds	r31, 0x070B
    4a88:	81 e0       	ldi	r24, 0x01	; 1
    4a8a:	85 83       	std	Z+5, r24	; 0x05

    4a8c:	16 8b       	std	Z+22, r17	; 0x16
    4a8e:	05 8b       	std	Z+21, r16	; 0x15

    4a90:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
    4a94:	08 2f       	mov	r16, r24


    4a96:	88 3f       	cpi	r24, 0xF8	; 248
    4a98:	80 f4       	brcc	.+32     	; 0x4aba <nrk_wait_until_ticks+0x44>
//-------------------------------------------------------------------------------------------------------
    4a9a:	0e 94 c1 2c 	call	0x5982	; 0x5982 <_nrk_get_next_wakeup>
    4a9e:	20 2f       	mov	r18, r16
    4aa0:	33 27       	eor	r19, r19
    4aa2:	2e 5f       	subi	r18, 0xFE	; 254
    4aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    4aa6:	99 27       	eor	r25, r25
    4aa8:	82 17       	cp	r24, r18
    4aaa:	93 07       	cpc	r25, r19
    4aac:	34 f0       	brlt	.+12     	; 0x4aba <nrk_wait_until_ticks+0x44>
//  void rf_rx_off(void)
    4aae:	80 2f       	mov	r24, r16
    4ab0:	8e 5f       	subi	r24, 0xFE	; 254
//
    4ab2:	80 93 59 06 	sts	0x0659, r24
//  DESCRIPTION:
    4ab6:	0e 94 c6 2c 	call	0x598c	; 0x598c <_nrk_set_next_wakeup>
//      Disables the CC2420 receiver and the FIFOP interrupt.
//-------------------------------------------------------------------------------------------------------
void rf_rx_off(void) {
    4aba:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    4abe:	0e 94 17 24 	call	0x482e	; 0x482e <_nrk_wait_for_scheduler>
#endif
	// XXX
    4ac2:	81 e0       	ldi	r24, 0x01	; 1
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	1f 91       	pop	r17
    4ac8:	0f 91       	pop	r16
    4aca:	08 95       	ret

00004acc <nrk_wait_ticks>:
//  DESCRIPTION:
//      Enables the CC2420 receiver and the FIFOP interrupt. When a packet is received through this
//      interrupt, it will call rf_rx_callback(...), which must be defined by the application
//-------------------------------------------------------------------------------------------------------
void rf_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    4acc:	ff 92       	push	r15
    4ace:	0f 93       	push	r16
    4ad0:	1f 93       	push	r17
    4ad2:	cf 93       	push	r28
    4ad4:	df 93       	push	r29
    4ad6:	8c 01       	movw	r16, r24
    nrk_sem_pend (radio_sem);
#endif
    4ad8:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>
    	rfSettings.receiveOn = TRUE;
    4adc:	e0 91 0a 07 	lds	r30, 0x070A
    4ae0:	f0 91 0b 07 	lds	r31, 0x070B
    4ae4:	81 e0       	ldi	r24, 0x01	; 1
    4ae6:	85 83       	std	Z+5, r24	; 0x05
	FASTSPI_STROBE(CC2420_SRXON);
    4ae8:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
    4aec:	f8 2e       	mov	r15, r24
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    4aee:	e0 91 0a 07 	lds	r30, 0x070A
    4af2:	f0 91 0b 07 	lds	r31, 0x070B
    4af6:	c8 2f       	mov	r28, r24
    4af8:	dd 27       	eor	r29, r29
    4afa:	0c 0f       	add	r16, r28
    4afc:	1d 1f       	adc	r17, r29
    4afe:	16 8b       	std	Z+22, r17	; 0x16
    4b00:	05 8b       	std	Z+21, r16	; 0x15
	rx_ready=0;
#ifdef RADIO_PRIORITY_CEILING
    4b02:	87 ef       	ldi	r24, 0xF7	; 247
    4b04:	8f 15       	cp	r24, r15
    4b06:	68 f0       	brcs	.+26     	; 0x4b22 <nrk_wait_ticks+0x56>
    nrk_sem_post(radio_sem);
    4b08:	0e 94 c1 2c 	call	0x5982	; 0x5982 <_nrk_get_next_wakeup>
    4b0c:	22 96       	adiw	r28, 0x02	; 2
    4b0e:	99 27       	eor	r25, r25
    4b10:	8c 17       	cp	r24, r28
    4b12:	9d 07       	cpc	r25, r29
    4b14:	34 f0       	brlt	.+12     	; 0x4b22 <nrk_wait_ticks+0x56>
#endif
    4b16:	8f 2d       	mov	r24, r15
    4b18:	8e 5f       	subi	r24, 0xFE	; 254
    //	ENABLE_FIFOP_INT();
    4b1a:	80 93 59 06 	sts	0x0659, r24
} // rf_rx_on() 
    4b1e:	0e 94 c6 2c 	call	0x598c	; 0x598c <_nrk_set_next_wakeup>

void rf_polling_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    4b22:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>
    nrk_sem_pend (radio_sem);
#endif
    4b26:	0e 94 17 24 	call	0x482e	; 0x482e <_nrk_wait_for_scheduler>
    	rfSettings.receiveOn = TRUE;
	FASTSPI_STROBE(CC2420_SRXON);
    4b2a:	81 e0       	ldi	r24, 0x01	; 1
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	df 91       	pop	r29
    4b30:	cf 91       	pop	r28
    4b32:	1f 91       	pop	r17
    4b34:	0f 91       	pop	r16
    4b36:	ff 90       	pop	r15
    4b38:	08 95       	ret

00004b3a <nrk_wait_until_next_n_periods>:
    // Set the RF channel
    halRfSetChannel(channel);

    // Turn interrupts back on
	ENABLE_GLOBAL_INT();

    4b3a:	1f 93       	push	r17
    4b3c:	cf 93       	push	r28
    4b3e:	df 93       	push	r29
    4b40:	ec 01       	movw	r28, r24
	// Set the protocol configuration
	rfSettings.pRxInfo = pRRI;
	rfSettings.panId = panId;
    4b42:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <nrk_stack_check>
	rfSettings.myAddr = myAddr;
	rfSettings.txSeqNumber = 0;
    4b46:	20 97       	sbiw	r28, 0x00	; 0
    4b48:	11 f4       	brne	.+4      	; 0x4b4e <nrk_wait_until_next_n_periods+0x14>
    4b4a:	c1 e0       	ldi	r28, 0x01	; 1
    4b4c:	d0 e0       	ldi	r29, 0x00	; 0
        rfSettings.receiveOn = FALSE;

	// Wait for the crystal oscillator to become stable
    4b4e:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>
    halRfWaitForCrystalOscillator();
    4b52:	e0 91 0a 07 	lds	r30, 0x070A
    4b56:	f0 91 0b 07 	lds	r31, 0x070B
    4b5a:	81 e0       	ldi	r24, 0x01	; 1
    4b5c:	85 83       	std	Z+5, r24	; 0x05

    4b5e:	d0 a3       	std	Z+32, r29	; 0x20
    4b60:	c7 8f       	std	Z+31, r28	; 0x1f
	// Write the short address and the PAN ID to the CC2420 RAM (requires that the XOSC is on and stable)
    4b62:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
    4b66:	18 2f       	mov	r17, r24
   //	DISABLE_GLOBAL_INT();
//    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
//    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
  //	ENABLE_GLOBAL_INT();

    4b68:	88 3f       	cpi	r24, 0xF8	; 248
    4b6a:	80 f4       	brcc	.+32     	; 0x4b8c <nrk_wait_until_next_n_periods+0x52>
#ifdef RADIO_PRIORITY_CEILING
    4b6c:	0e 94 c1 2c 	call	0x5982	; 0x5982 <_nrk_get_next_wakeup>
    4b70:	21 2f       	mov	r18, r17
    4b72:	33 27       	eor	r19, r19
    4b74:	2e 5f       	subi	r18, 0xFE	; 254
    4b76:	3f 4f       	sbci	r19, 0xFF	; 255
    4b78:	99 27       	eor	r25, r25
    4b7a:	82 17       	cp	r24, r18
    4b7c:	93 07       	cpc	r25, r19
    4b7e:	34 f0       	brlt	.+12     	; 0x4b8c <nrk_wait_until_next_n_periods+0x52>
  v = nrk_sem_post (radio_sem);
    4b80:	81 2f       	mov	r24, r17
    4b82:	8e 5f       	subi	r24, 0xFE	; 254
  if (v == NRK_ERROR) {
    4b84:	80 93 59 06 	sts	0x0659, r24
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    4b88:	0e 94 c6 2c 	call	0x598c	; 0x598c <_nrk_set_next_wakeup>
    _nrk_errno_set (2);
  }
#endif
    4b8c:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>

    4b90:	0e 94 17 24 	call	0x482e	; 0x482e <_nrk_wait_for_scheduler>
auto_ack_enable=0;
security_enable=0;
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	df 91       	pop	r29
    4b9a:	cf 91       	pop	r28
    4b9c:	1f 91       	pop	r17
    4b9e:	08 95       	ret

00004ba0 <nrk_wait_until_next_period>:
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
					    // reference bias current to RX
					    // bandpass filter is set to 3uA 

/*
    // FIXME: remove later for auto ack
    4ba0:	1f 93       	push	r17
    myAddr=MY_MAC;
    panId=0x02;
    FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
    4ba2:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <nrk_stack_check>
//    FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AE2);  // Turn on automatic packet acknowledgment
    nrk_spin_wait_us(500);
    4ba6:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>
    nrk_spin_wait_us(500);
    4baa:	e0 91 0a 07 	lds	r30, 0x070A
    4bae:	f0 91 0b 07 	lds	r31, 0x070B
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	90 a3       	std	Z+32, r25	; 0x20
    4bb8:	87 8f       	std	Z+31, r24	; 0x1f
    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
    4bba:	81 e0       	ldi	r24, 0x01	; 1
    4bbc:	85 83       	std	Z+5, r24	; 0x05
    nrk_spin_wait_us(500);
    4bbe:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
    4bc2:	18 2f       	mov	r17, r24
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    nrk_spin_wait_us(500);
    
   printf( "myAddr=%d\r\n",myAddr );
    4bc4:	88 3f       	cpi	r24, 0xF8	; 248
    4bc6:	80 f4       	brcc	.+32     	; 0x4be8 <nrk_wait_until_next_period+0x48>
*/
    4bc8:	0e 94 c1 2c 	call	0x5982	; 0x5982 <_nrk_get_next_wakeup>
    4bcc:	21 2f       	mov	r18, r17
    4bce:	33 27       	eor	r19, r19
    4bd0:	2e 5f       	subi	r18, 0xFE	; 254
    4bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd4:	99 27       	eor	r25, r25
    4bd6:	82 17       	cp	r24, r18
    4bd8:	93 07       	cpc	r25, r19
    4bda:	34 f0       	brlt	.+12     	; 0x4be8 <nrk_wait_until_next_period+0x48>

    4bdc:	81 2f       	mov	r24, r17
    4bde:	8e 5f       	subi	r24, 0xFE	; 254
    nrk_spin_wait_us(500);
    4be0:	80 93 59 06 	sts	0x0659, r24
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    nrk_spin_wait_us(500);
    4be4:	0e 94 c6 2c 	call	0x598c	; 0x598c <_nrk_set_next_wakeup>

  	ENABLE_GLOBAL_INT();

    4be8:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>
    // Set the RF channel
    4bec:	0e 94 17 24 	call	0x482e	; 0x482e <_nrk_wait_for_scheduler>
    halRfSetChannel(channel);

    4bf0:	81 e0       	ldi	r24, 0x01	; 1
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
    4bf4:	1f 91       	pop	r17
    4bf6:	08 95       	ret

00004bf8 <nrk_terminate_task>:
    // Register modifications
    FASTSPI_STROBE(CC2420_SXOSCON);
    mdmctrl0=0x02E2;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    4bf8:	e0 91 0a 07 	lds	r30, 0x070A
    4bfc:	f0 91 0b 07 	lds	r31, 0x070B
    4c00:	80 85       	ldd	r24, Z+8	; 0x08
    4c02:	0e 94 be 23 	call	0x477c	; 0x477c <nrk_rem_from_readyQ>
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    4c06:	e0 91 0a 07 	lds	r30, 0x070A
    4c0a:	f0 91 0b 07 	lds	r31, 0x070B
    4c0e:	84 e0       	ldi	r24, 0x04	; 4
    4c10:	81 87       	std	Z+9, r24	; 0x09
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
    4c12:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <nrk_wait_until_next_period>
					    // reference bias current to RX
					    // bandpass filter is set to 3uA 
    4c16:	81 e0       	ldi	r24, 0x01	; 1
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	08 95       	ret

00004c1c <nrk_activate_task>:
//      Initializes CC2420 for radio communication via the basic RF library functions. Turns on the
//		voltage regulator, resets the CC2420, turns on the crystal oscillator, writes all necessary
//		registers and protocol addresses (for automatic address recognition). Note that the crystal
//		oscillator will remain on (forever).
//
//  ARGUMENTS:
    4c1c:	ef 92       	push	r14
    4c1e:	ff 92       	push	r15
    4c20:	0f 93       	push	r16
    4c22:	1f 93       	push	r17
    4c24:	cf 93       	push	r28
    4c26:	df 93       	push	r29
    4c28:	ec 01       	movw	r28, r24
//      RF_RX_INFO *pRRI
//          A pointer the RF_RX_INFO data structure to be used during the first packet reception.
//			The structure can be switched upon packet reception.
//      uint8_t channel
    4c2a:	4b 81       	ldd	r20, Y+3	; 0x03
    4c2c:	5c 81       	ldd	r21, Y+4	; 0x04
    4c2e:	69 81       	ldd	r22, Y+1	; 0x01
    4c30:	7a 81       	ldd	r23, Y+2	; 0x02
    4c32:	8d 81       	ldd	r24, Y+5	; 0x05
    4c34:	9e 81       	ldd	r25, Y+6	; 0x06
    4c36:	0e 94 05 30 	call	0x600a	; 0x600a <nrk_task_stk_init>
    4c3a:	bc 01       	movw	r22, r24
//          The RF channel to be used (11 = 2405 MHz to 26 = 2480 MHz)
//      WORD panId
//          The personal area network identification number
//      WORD myAddr
    4c3c:	8f 81       	ldd	r24, Y+7	; 0x07
    4c3e:	88 23       	and	r24, r24
    4c40:	69 f0       	breq	.+26     	; 0x4c5c <nrk_activate_task+0x40>
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
    4c42:	4b 81       	ldd	r20, Y+3	; 0x03
    4c44:	5c 81       	ldd	r21, Y+4	; 0x04
    4c46:	ee 24       	eor	r14, r14
    4c48:	ff 24       	eor	r15, r15
    4c4a:	00 e0       	ldi	r16, 0x00	; 0
    4c4c:	10 e0       	ldi	r17, 0x00	; 0
    4c4e:	20 e0       	ldi	r18, 0x00	; 0
    4c50:	30 e0       	ldi	r19, 0x00	; 0
    4c52:	ce 01       	movw	r24, r28
    4c54:	0e 94 1f 1c 	call	0x383e	; 0x383e <nrk_TCB_init>
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
    4c58:	1f 82       	std	Y+7, r1	; 0x07
    4c5a:	16 c0       	rjmp	.+44     	; 0x4c88 <nrk_activate_task+0x6c>
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    uint8_t n;
    4c5c:	88 81       	ld	r24, Y
    4c5e:	99 27       	eor	r25, r25
    4c60:	87 fd       	sbrc	r24, 7
    4c62:	90 95       	com	r25
    4c64:	fc 01       	movw	r30, r24
    4c66:	a5 e0       	ldi	r26, 0x05	; 5
    4c68:	ee 0f       	add	r30, r30
    4c6a:	ff 1f       	adc	r31, r31
    4c6c:	aa 95       	dec	r26
    4c6e:	e1 f7       	brne	.-8      	; 0x4c68 <nrk_activate_task+0x4c>
    4c70:	e8 0f       	add	r30, r24
    4c72:	f9 1f       	adc	r31, r25
    4c74:	e2 57       	subi	r30, 0x72	; 114
    4c76:	f9 4f       	sbci	r31, 0xF9	; 249
    4c78:	81 85       	ldd	r24, Z+9	; 0x09
    4c7a:	83 30       	cpi	r24, 0x03	; 3
    4c7c:	19 f0       	breq	.+6      	; 0x4c84 <nrk_activate_task+0x68>
    4c7e:	8f ef       	ldi	r24, 0xFF	; 255
    4c80:	9f ef       	ldi	r25, 0xFF	; 255
    4c82:	1b c0       	rjmp	.+54     	; 0x4cba <nrk_activate_task+0x9e>

#ifdef RADIO_PRIORITY_CEILING
   int8_t v;
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    4c84:	71 83       	std	Z+1, r23	; 0x01
    4c86:	60 83       	st	Z, r22
    SET_RESET_ACTIVE();
    halWait(1);
    SET_RESET_INACTIVE();
    halWait(100);

    // Initialize the FIFOP external interrupt
    4c88:	88 81       	ld	r24, Y
    4c8a:	99 27       	eor	r25, r25
    4c8c:	87 fd       	sbrc	r24, 7
    4c8e:	90 95       	com	r25
    4c90:	fc 01       	movw	r30, r24
    4c92:	75 e0       	ldi	r23, 0x05	; 5
    4c94:	ee 0f       	add	r30, r30
    4c96:	ff 1f       	adc	r31, r31
    4c98:	7a 95       	dec	r23
    4c9a:	e1 f7       	brne	.-8      	; 0x4c94 <nrk_activate_task+0x78>
    4c9c:	e8 0f       	add	r30, r24
    4c9e:	f9 1f       	adc	r31, r25
    4ca0:	e2 57       	subi	r30, 0x72	; 114
    4ca2:	f9 4f       	sbci	r31, 0xF9	; 249
    4ca4:	85 89       	ldd	r24, Z+21	; 0x15
    4ca6:	96 89       	ldd	r25, Z+22	; 0x16
    4ca8:	89 2b       	or	r24, r25
    4caa:	29 f4       	brne	.+10     	; 0x4cb6 <nrk_activate_task+0x9a>
    //FIFOP_INT_INIT();
    4cac:	82 e0       	ldi	r24, 0x02	; 2
    4cae:	81 87       	std	Z+9, r24	; 0x09
    //ENABLE_FIFOP_INT();
    4cb0:	88 81       	ld	r24, Y
    4cb2:	0e 94 37 23 	call	0x466e	; 0x466e <nrk_add_to_readyQ>
    4cb6:	81 e0       	ldi	r24, 0x01	; 1
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	df 91       	pop	r29
    4cbc:	cf 91       	pop	r28
    4cbe:	1f 91       	pop	r17
    4cc0:	0f 91       	pop	r16
    4cc2:	ff 90       	pop	r15
    4cc4:	ef 90       	pop	r14
    4cc6:	08 95       	ret

00004cc8 <nrk_time_sub>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
uint8_t n;
// CTR counter value
    4cc8:	8f 92       	push	r8
    4cca:	9f 92       	push	r9
    4ccc:	af 92       	push	r10
    4cce:	bf 92       	push	r11
    4cd0:	cf 92       	push	r12
    4cd2:	df 92       	push	r13
    4cd4:	ef 92       	push	r14
    4cd6:	ff 92       	push	r15
    4cd8:	0f 93       	push	r16
    4cda:	1f 93       	push	r17
    4cdc:	cf 93       	push	r28
    4cde:	df 93       	push	r29
    4ce0:	cd b7       	in	r28, 0x3d	; 61
    4ce2:	de b7       	in	r29, 0x3e	; 62
    4ce4:	60 97       	sbiw	r28, 0x10	; 16
    4ce6:	0f b6       	in	r0, 0x3f	; 63
    4ce8:	f8 94       	cli
    4cea:	de bf       	out	0x3e, r29	; 62
    4cec:	0f be       	out	0x3f, r0	; 63
    4cee:	cd bf       	out	0x3d, r28	; 61
    4cf0:	fc 01       	movw	r30, r24
    4cf2:	09 83       	std	Y+1, r16	; 0x01
    4cf4:	1a 83       	std	Y+2, r17	; 0x02
    4cf6:	2b 83       	std	Y+3, r18	; 0x03
    4cf8:	3c 83       	std	Y+4, r19	; 0x04
    4cfa:	4d 83       	std	Y+5, r20	; 0x05
    4cfc:	5e 83       	std	Y+6, r21	; 0x06
    4cfe:	6f 83       	std	Y+7, r22	; 0x07
    4d00:	78 87       	std	Y+8, r23	; 0x08
    4d02:	89 86       	std	Y+9, r8	; 0x09
    4d04:	9a 86       	std	Y+10, r9	; 0x0a
    4d06:	ab 86       	std	Y+11, r10	; 0x0b
    4d08:	bc 86       	std	Y+12, r11	; 0x0c
    4d0a:	cd 86       	std	Y+13, r12	; 0x0d
    4d0c:	de 86       	std	Y+14, r13	; 0x0e
    4d0e:	ef 86       	std	Y+15, r14	; 0x0f
    4d10:	f8 8a       	std	Y+16, r15	; 0x10
    4d12:	2d 81       	ldd	r18, Y+5	; 0x05
    4d14:	3e 81       	ldd	r19, Y+6	; 0x06
    4d16:	4f 81       	ldd	r20, Y+7	; 0x07
    4d18:	58 85       	ldd	r21, Y+8	; 0x08
    4d1a:	89 81       	ldd	r24, Y+1	; 0x01
    4d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d1e:	ab 81       	ldd	r26, Y+3	; 0x03
    4d20:	bc 81       	ldd	r27, Y+4	; 0x04
    4d22:	ad 84       	ldd	r10, Y+13	; 0x0d
    4d24:	be 84       	ldd	r11, Y+14	; 0x0e
    4d26:	cf 84       	ldd	r12, Y+15	; 0x0f
    4d28:	d8 88       	ldd	r13, Y+16	; 0x10
    4d2a:	e9 84       	ldd	r14, Y+9	; 0x09
    4d2c:	fa 84       	ldd	r15, Y+10	; 0x0a
    4d2e:	0b 85       	ldd	r16, Y+11	; 0x0b
    4d30:	1c 85       	ldd	r17, Y+12	; 0x0c
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
    4d32:	8e 15       	cp	r24, r14
    4d34:	9f 05       	cpc	r25, r15
    4d36:	a0 07       	cpc	r26, r16
    4d38:	b1 07       	cpc	r27, r17
    4d3a:	08 f4       	brcc	.+2      	; 0x4d3e <nrk_time_sub+0x76>
    4d3c:	3f c0       	rjmp	.+126    	; 0x4dbc <nrk_time_sub+0xf4>
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
    4d3e:	e8 16       	cp	r14, r24
    4d40:	f9 06       	cpc	r15, r25
    4d42:	0a 07       	cpc	r16, r26
    4d44:	1b 07       	cpc	r17, r27
    4d46:	91 f4       	brne	.+36     	; 0x4d6c <nrk_time_sub+0xa4>
tx_ctr[0]=counter[0];
tx_ctr[1]=counter[1];
    4d48:	2a 15       	cp	r18, r10
    4d4a:	3b 05       	cpc	r19, r11
    4d4c:	4c 05       	cpc	r20, r12
    4d4e:	5d 05       	cpc	r21, r13
    4d50:	a8 f1       	brcs	.+106    	; 0x4dbc <nrk_time_sub+0xf4>
tx_ctr[2]=counter[2];
    4d52:	2a 19       	sub	r18, r10
    4d54:	3b 09       	sbc	r19, r11
    4d56:	4c 09       	sbc	r20, r12
    4d58:	5d 09       	sbc	r21, r13
    4d5a:	24 83       	std	Z+4, r18	; 0x04
    4d5c:	35 83       	std	Z+5, r19	; 0x05
    4d5e:	46 83       	std	Z+6, r20	; 0x06
    4d60:	57 83       	std	Z+7, r21	; 0x07
tx_ctr[3]=counter[3];
    4d62:	10 82       	st	Z, r1
    4d64:	11 82       	std	Z+1, r1	; 0x01
    4d66:	12 82       	std	Z+2, r1	; 0x02
    4d68:	13 82       	std	Z+3, r1	; 0x03
    4d6a:	1c c0       	rjmp	.+56     	; 0x4da4 <nrk_time_sub+0xdc>
}


    4d6c:	2a 15       	cp	r18, r10
    4d6e:	3b 05       	cpc	r19, r11
    4d70:	4c 05       	cpc	r20, r12
    4d72:	5d 05       	cpc	r21, r13
    4d74:	d0 f4       	brcc	.+52     	; 0x4daa <nrk_time_sub+0xe2>
void rf_security_set_key(uint8_t *key)
{
uint8_t n,i;
uint16_t key_buf;
    4d76:	01 97       	sbiw	r24, 0x01	; 1
    4d78:	a1 09       	sbc	r26, r1
    4d7a:	b1 09       	sbc	r27, r1
    4d7c:	8e 19       	sub	r24, r14
    4d7e:	9f 09       	sbc	r25, r15
    4d80:	a0 0b       	sbc	r26, r16
    4d82:	b1 0b       	sbc	r27, r17
    4d84:	80 83       	st	Z, r24
    4d86:	91 83       	std	Z+1, r25	; 0x01
    4d88:	a2 83       	std	Z+2, r26	; 0x02
    4d8a:	b3 83       	std	Z+3, r27	; 0x03

    4d8c:	20 50       	subi	r18, 0x00	; 0
    4d8e:	36 43       	sbci	r19, 0x36	; 54
    4d90:	45 46       	sbci	r20, 0x65	; 101
    4d92:	54 4c       	sbci	r21, 0xC4	; 196
    4d94:	2a 19       	sub	r18, r10
    4d96:	3b 09       	sbc	r19, r11
    4d98:	4c 09       	sbc	r20, r12
    4d9a:	5d 09       	sbc	r21, r13
    4d9c:	24 83       	std	Z+4, r18	; 0x04
    4d9e:	35 83       	std	Z+5, r19	; 0x05
    4da0:	46 83       	std	Z+6, r20	; 0x06
    4da2:	57 83       	std	Z+7, r21	; 0x07
    4da4:	81 e0       	ldi	r24, 0x01	; 1
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	0b c0       	rjmp	.+22     	; 0x4dc0 <nrk_time_sub+0xf8>
// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    4daa:	8e 19       	sub	r24, r14
    4dac:	9f 09       	sbc	r25, r15
    4dae:	a0 0b       	sbc	r26, r16
    4db0:	b1 0b       	sbc	r27, r17
    4db2:	80 83       	st	Z, r24
    4db4:	91 83       	std	Z+1, r25	; 0x01
    4db6:	a2 83       	std	Z+2, r26	; 0x02
    4db8:	b3 83       	std	Z+3, r27	; 0x03
    4dba:	ec cf       	rjmp	.-40     	; 0x4d94 <nrk_time_sub+0xcc>
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    4dbc:	80 e0       	ldi	r24, 0x00	; 0
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	60 96       	adiw	r28, 0x10	; 16
    4dc2:	0f b6       	in	r0, 0x3f	; 63
    4dc4:	f8 94       	cli
    4dc6:	de bf       	out	0x3e, r29	; 62
    4dc8:	0f be       	out	0x3f, r0	; 63
    4dca:	cd bf       	out	0x3d, r28	; 61
    4dcc:	df 91       	pop	r29
    4dce:	cf 91       	pop	r28
    4dd0:	1f 91       	pop	r17
    4dd2:	0f 91       	pop	r16
    4dd4:	ff 90       	pop	r15
    4dd6:	ef 90       	pop	r14
    4dd8:	df 90       	pop	r13
    4dda:	cf 90       	pop	r12
    4ddc:	bf 90       	pop	r11
    4dde:	af 90       	pop	r10
    4de0:	9f 90       	pop	r9
    4de2:	8f 90       	pop	r8
    4de4:	08 95       	ret

00004de6 <nrk_time_compact_nanos>:
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header

security_enable=1;
}

    4de6:	fc 01       	movw	r30, r24
    4de8:	13 c0       	rjmp	.+38     	; 0x4e10 <nrk_time_compact_nanos+0x2a>


void rf_security_disable()
    4dea:	80 50       	subi	r24, 0x00	; 0
    4dec:	9a 4c       	sbci	r25, 0xCA	; 202
    4dee:	aa 49       	sbci	r26, 0x9A	; 154
    4df0:	bb 43       	sbci	r27, 0x3B	; 59
    4df2:	84 83       	std	Z+4, r24	; 0x04
    4df4:	95 83       	std	Z+5, r25	; 0x05
    4df6:	a6 83       	std	Z+6, r26	; 0x06
    4df8:	b7 83       	std	Z+7, r27	; 0x07
{
    4dfa:	80 81       	ld	r24, Z
    4dfc:	91 81       	ldd	r25, Z+1	; 0x01
    4dfe:	a2 81       	ldd	r26, Z+2	; 0x02
    4e00:	b3 81       	ldd	r27, Z+3	; 0x03
    4e02:	01 96       	adiw	r24, 0x01	; 1
    4e04:	a1 1d       	adc	r26, r1
    4e06:	b1 1d       	adc	r27, r1
    4e08:	80 83       	st	Z, r24
    4e0a:	91 83       	std	Z+1, r25	; 0x01
    4e0c:	a2 83       	std	Z+2, r26	; 0x02
    4e0e:	b3 83       	std	Z+3, r27	; 0x03
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header

security_enable=1;
}


    4e10:	84 81       	ldd	r24, Z+4	; 0x04
    4e12:	95 81       	ldd	r25, Z+5	; 0x05
    4e14:	a6 81       	ldd	r26, Z+6	; 0x06
    4e16:	b7 81       	ldd	r27, Z+7	; 0x07
    4e18:	80 30       	cpi	r24, 0x00	; 0
    4e1a:	2a ec       	ldi	r18, 0xCA	; 202
    4e1c:	92 07       	cpc	r25, r18
    4e1e:	2a e9       	ldi	r18, 0x9A	; 154
    4e20:	a2 07       	cpc	r26, r18
    4e22:	2b e3       	ldi	r18, 0x3B	; 59
    4e24:	b2 07       	cpc	r27, r18
    4e26:	08 f7       	brcc	.-62     	; 0x4dea <nrk_time_compact_nanos+0x4>
    4e28:	08 95       	ret

00004e2a <nrk_time_add>:
// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    4e2a:	8f 92       	push	r8
    4e2c:	9f 92       	push	r9
    4e2e:	af 92       	push	r10
    4e30:	bf 92       	push	r11
    4e32:	cf 92       	push	r12
    4e34:	df 92       	push	r13
    4e36:	ef 92       	push	r14
    4e38:	ff 92       	push	r15
    4e3a:	0f 93       	push	r16
    4e3c:	1f 93       	push	r17
    4e3e:	cf 93       	push	r28
    4e40:	df 93       	push	r29
    4e42:	cd b7       	in	r28, 0x3d	; 61
    4e44:	de b7       	in	r29, 0x3e	; 62
    4e46:	60 97       	sbiw	r28, 0x10	; 16
    4e48:	0f b6       	in	r0, 0x3f	; 63
    4e4a:	f8 94       	cli
    4e4c:	de bf       	out	0x3e, r29	; 62
    4e4e:	0f be       	out	0x3f, r0	; 63
    4e50:	cd bf       	out	0x3d, r28	; 61
    4e52:	fc 01       	movw	r30, r24
    4e54:	09 83       	std	Y+1, r16	; 0x01
    4e56:	1a 83       	std	Y+2, r17	; 0x02
    4e58:	2b 83       	std	Y+3, r18	; 0x03
    4e5a:	3c 83       	std	Y+4, r19	; 0x04
    4e5c:	4d 83       	std	Y+5, r20	; 0x05
    4e5e:	5e 83       	std	Y+6, r21	; 0x06
    4e60:	6f 83       	std	Y+7, r22	; 0x07
    4e62:	78 87       	std	Y+8, r23	; 0x08
    4e64:	89 86       	std	Y+9, r8	; 0x09
    4e66:	9a 86       	std	Y+10, r9	; 0x0a
    4e68:	ab 86       	std	Y+11, r10	; 0x0b
    4e6a:	bc 86       	std	Y+12, r11	; 0x0c
    4e6c:	cd 86       	std	Y+13, r12	; 0x0d
    4e6e:	de 86       	std	Y+14, r13	; 0x0e
    4e70:	ef 86       	std	Y+15, r14	; 0x0f
    4e72:	f8 8a       	std	Y+16, r15	; 0x10
    4e74:	ad 80       	ldd	r10, Y+5	; 0x05
    4e76:	be 80       	ldd	r11, Y+6	; 0x06
    4e78:	cf 80       	ldd	r12, Y+7	; 0x07
    4e7a:	d8 84       	ldd	r13, Y+8	; 0x08
    4e7c:	ed 84       	ldd	r14, Y+13	; 0x0d
    4e7e:	fe 84       	ldd	r15, Y+14	; 0x0e
    4e80:	0f 85       	ldd	r16, Y+15	; 0x0f
    4e82:	18 89       	ldd	r17, Y+16	; 0x10
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    4e84:	89 85       	ldd	r24, Y+9	; 0x09
    4e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e88:	ab 85       	ldd	r26, Y+11	; 0x0b
    4e8a:	bc 85       	ldd	r27, Y+12	; 0x0c
    4e8c:	29 81       	ldd	r18, Y+1	; 0x01
    4e8e:	3a 81       	ldd	r19, Y+2	; 0x02
    4e90:	4b 81       	ldd	r20, Y+3	; 0x03
    4e92:	5c 81       	ldd	r21, Y+4	; 0x04
    4e94:	82 0f       	add	r24, r18
    4e96:	93 1f       	adc	r25, r19
    4e98:	a4 1f       	adc	r26, r20
    4e9a:	b5 1f       	adc	r27, r21
    4e9c:	80 83       	st	Z, r24
    4e9e:	91 83       	std	Z+1, r25	; 0x01
    4ea0:	a2 83       	std	Z+2, r26	; 0x02
    4ea2:	b3 83       	std	Z+3, r27	; 0x03
	}
    4ea4:	ea 0c       	add	r14, r10
    4ea6:	fb 1c       	adc	r15, r11
    4ea8:	0c 1d       	adc	r16, r12
    4eaa:	1d 1d       	adc	r17, r13
    4eac:	e4 82       	std	Z+4, r14	; 0x04
    4eae:	f5 82       	std	Z+5, r15	; 0x05
    4eb0:	06 83       	std	Z+6, r16	; 0x06
    4eb2:	17 83       	std	Z+7, r17	; 0x07
	// block counter set 1
    4eb4:	cf 01       	movw	r24, r30
    4eb6:	0e 94 f3 26 	call	0x4de6	; 0x4de6 <nrk_time_compact_nanos>
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    4eba:	81 e0       	ldi	r24, 0x01	; 1
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	60 96       	adiw	r28, 0x10	; 16
    4ec0:	0f b6       	in	r0, 0x3f	; 63
    4ec2:	f8 94       	cli
    4ec4:	de bf       	out	0x3e, r29	; 62
    4ec6:	0f be       	out	0x3f, r0	; 63
    4ec8:	cd bf       	out	0x3d, r28	; 61
    4eca:	df 91       	pop	r29
    4ecc:	cf 91       	pop	r28
    4ece:	1f 91       	pop	r17
    4ed0:	0f 91       	pop	r16
    4ed2:	ff 90       	pop	r15
    4ed4:	ef 90       	pop	r14
    4ed6:	df 90       	pop	r13
    4ed8:	cf 90       	pop	r12
    4eda:	bf 90       	pop	r11
    4edc:	af 90       	pop	r10
    4ede:	9f 90       	pop	r9
    4ee0:	8f 90       	pop	r8
    4ee2:	08 95       	ret

00004ee4 <nrk_time_set>:
}

//-------------------------------------------------------------------------------------------------------
// The RF settings structure is declared here, since we'll always need halRfInit()
volatile RF_SETTINGS rfSettings;
volatile uint8_t rx_ready;
    4ee4:	60 93 01 07 	sts	0x0701, r22
    4ee8:	70 93 02 07 	sts	0x0702, r23
    4eec:	80 93 03 07 	sts	0x0703, r24
    4ef0:	90 93 04 07 	sts	0x0704, r25
//-------------------------------------------------------------------------------------------------------
    4ef4:	20 93 05 07 	sts	0x0705, r18
    4ef8:	30 93 06 07 	sts	0x0706, r19
    4efc:	40 93 07 07 	sts	0x0707, r20
    4f00:	50 93 08 07 	sts	0x0708, r21
    4f04:	08 95       	ret

00004f06 <_nrk_time_to_ticks>:
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    4f06:	8f 92       	push	r8
    4f08:	9f 92       	push	r9
    4f0a:	af 92       	push	r10
    4f0c:	bf 92       	push	r11
    4f0e:	cf 92       	push	r12
    4f10:	df 92       	push	r13
    4f12:	ef 92       	push	r14
    4f14:	ff 92       	push	r15
    4f16:	0f 93       	push	r16
    4f18:	1f 93       	push	r17
    4f1a:	cf 93       	push	r28
    4f1c:	df 93       	push	r29
    4f1e:	cd b7       	in	r28, 0x3d	; 61
    4f20:	de b7       	in	r29, 0x3e	; 62
    4f22:	28 97       	sbiw	r28, 0x08	; 8
    4f24:	0f b6       	in	r0, 0x3f	; 63
    4f26:	f8 94       	cli
    4f28:	de bf       	out	0x3e, r29	; 62
    4f2a:	0f be       	out	0x3f, r0	; 63
    4f2c:	cd bf       	out	0x3d, r28	; 61
    4f2e:	29 83       	std	Y+1, r18	; 0x01
    4f30:	3a 83       	std	Y+2, r19	; 0x02
    4f32:	4b 83       	std	Y+3, r20	; 0x03
    4f34:	5c 83       	std	Y+4, r21	; 0x04
    4f36:	6d 83       	std	Y+5, r22	; 0x05
    4f38:	7e 83       	std	Y+6, r23	; 0x06
    4f3a:	8f 83       	std	Y+7, r24	; 0x07
    4f3c:	98 87       	std	Y+8, r25	; 0x08
    4f3e:	8d 80       	ldd	r8, Y+5	; 0x05
    4f40:	9e 80       	ldd	r9, Y+6	; 0x06
    4f42:	af 80       	ldd	r10, Y+7	; 0x07
    4f44:	b8 84       	ldd	r11, Y+8	; 0x08
    4f46:	e9 80       	ldd	r14, Y+1	; 0x01
    4f48:	fa 80       	ldd	r15, Y+2	; 0x02
    4f4a:	0b 81       	ldd	r16, Y+3	; 0x03
    4f4c:	1c 81       	ldd	r17, Y+4	; 0x04

void rf_tx_power(uint8_t pwr)
{
uint16_t tmp;
    //tmp=0x5070;
    4f4e:	e1 14       	cp	r14, r1
    4f50:	f1 04       	cpc	r15, r1
    4f52:	01 05       	cpc	r16, r1
    4f54:	11 05       	cpc	r17, r1
    4f56:	01 f1       	breq	.+64     	; 0x4f98 <_nrk_time_to_ticks+0x92>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    4f58:	80 e0       	ldi	r24, 0x00	; 0
    4f5a:	9a ec       	ldi	r25, 0xCA	; 202
    4f5c:	aa e9       	ldi	r26, 0x9A	; 154
    4f5e:	bb e3       	ldi	r27, 0x3B	; 59
    4f60:	88 0e       	add	r8, r24
    4f62:	99 1e       	adc	r9, r25
    4f64:	aa 1e       	adc	r10, r26
    4f66:	bb 1e       	adc	r11, r27
#endif
    tmp=0xA0E0;
    4f68:	c5 01       	movw	r24, r10
    4f6a:	b4 01       	movw	r22, r8
    4f6c:	23 eb       	ldi	r18, 0xB3	; 179
    4f6e:	36 ee       	ldi	r19, 0xE6	; 230
    4f70:	4e e0       	ldi	r20, 0x0E	; 14
    4f72:	50 e0       	ldi	r21, 0x00	; 0
    4f74:	0e 94 7f 34 	call	0x68fe	; 0x68fe <__udivmodsi4>
    4f78:	69 01       	movw	r12, r18
    tmp=tmp | (pwr&0x1F);  
    4f7a:	08 94       	sec
    4f7c:	e1 08       	sbc	r14, r1
    4f7e:	f1 08       	sbc	r15, r1
    4f80:	01 09       	sbc	r16, r1
    4f82:	11 09       	sbc	r17, r1
    4f84:	8a e0       	ldi	r24, 0x0A	; 10
    4f86:	ee 0c       	add	r14, r14
    4f88:	ff 1c       	adc	r15, r15
    4f8a:	00 1f       	adc	r16, r16
    4f8c:	11 1f       	adc	r17, r17
    4f8e:	8a 95       	dec	r24
    4f90:	d1 f7       	brne	.-12     	; 0x4f86 <_nrk_time_to_ticks+0x80>
    4f92:	ce 0c       	add	r12, r14
    4f94:	df 1c       	adc	r13, r15
    4f96:	09 c0       	rjmp	.+18     	; 0x4faa <_nrk_time_to_ticks+0xa4>
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    4f98:	c5 01       	movw	r24, r10
    4f9a:	b4 01       	movw	r22, r8
    4f9c:	23 eb       	ldi	r18, 0xB3	; 179
    4f9e:	36 ee       	ldi	r19, 0xE6	; 230
    4fa0:	4e e0       	ldi	r20, 0x0E	; 14
    4fa2:	50 e0       	ldi	r21, 0x00	; 0
    4fa4:	0e 94 7f 34 	call	0x68fe	; 0x68fe <__udivmodsi4>
    4fa8:	69 01       	movw	r12, r18
    4faa:	b6 01       	movw	r22, r12
    4fac:	02 c0       	rjmp	.+4      	; 0x4fb2 <_nrk_time_to_ticks+0xac>
#endif
}
void rf_set_channel( uint8_t channel )
{
    4fae:	60 50       	subi	r22, 0x00	; 0
    4fb0:	74 40       	sbci	r23, 0x04	; 4
    4fb2:	94 e0       	ldi	r25, 0x04	; 4
    4fb4:	61 30       	cpi	r22, 0x01	; 1
    4fb6:	79 07       	cpc	r23, r25
    4fb8:	d0 f7       	brcc	.-12     	; 0x4fae <_nrk_time_to_ticks+0xa8>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    4fba:	88 27       	eor	r24, r24
    4fbc:	99 27       	eor	r25, r25
    4fbe:	23 eb       	ldi	r18, 0xB3	; 179
    4fc0:	36 ee       	ldi	r19, 0xE6	; 230
    4fc2:	4e e0       	ldi	r20, 0x0E	; 14
    4fc4:	50 e0       	ldi	r21, 0x00	; 0
    4fc6:	0e 94 39 34 	call	0x6872	; 0x6872 <__mulsi3>
    4fca:	67 5a       	subi	r22, 0xA7	; 167
    4fcc:	7c 48       	sbci	r23, 0x8C	; 140
    4fce:	88 4f       	sbci	r24, 0xF8	; 248
    4fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd2:	68 15       	cp	r22, r8
    4fd4:	79 05       	cpc	r23, r9
    4fd6:	8a 05       	cpc	r24, r10
    4fd8:	9b 05       	cpc	r25, r11
    4fda:	18 f4       	brcc	.+6      	; 0x4fe2 <_nrk_time_to_ticks+0xdc>
    4fdc:	08 94       	sec
    4fde:	c1 1c       	adc	r12, r1
    4fe0:	d1 1c       	adc	r13, r1
    halRfSetChannel(channel);
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
    4fe2:	c6 01       	movw	r24, r12
    4fe4:	28 96       	adiw	r28, 0x08	; 8
    4fe6:	0f b6       	in	r0, 0x3f	; 63
    4fe8:	f8 94       	cli
    4fea:	de bf       	out	0x3e, r29	; 62
    4fec:	0f be       	out	0x3f, r0	; 63
    4fee:	cd bf       	out	0x3d, r28	; 61
    4ff0:	df 91       	pop	r29
    4ff2:	cf 91       	pop	r28
    4ff4:	1f 91       	pop	r17
    4ff6:	0f 91       	pop	r16
    4ff8:	ff 90       	pop	r15
    4ffa:	ef 90       	pop	r14
    4ffc:	df 90       	pop	r13
    4ffe:	cf 90       	pop	r12
    5000:	bf 90       	pop	r11
    5002:	af 90       	pop	r10
    5004:	9f 90       	pop	r9
    5006:	8f 90       	pop	r8
    5008:	08 95       	ret

0000500a <_nrk_ticks_to_time>:


void rf_addr_decode_enable()
    500a:	2f 92       	push	r2
    500c:	3f 92       	push	r3
    500e:	4f 92       	push	r4
    5010:	5f 92       	push	r5
    5012:	6f 92       	push	r6
    5014:	7f 92       	push	r7
    5016:	8f 92       	push	r8
    5018:	9f 92       	push	r9
    501a:	af 92       	push	r10
    501c:	bf 92       	push	r11
    501e:	cf 92       	push	r12
    5020:	df 92       	push	r13
    5022:	ef 92       	push	r14
    5024:	ff 92       	push	r15
    5026:	0f 93       	push	r16
    5028:	1f 93       	push	r17
    502a:	cf 93       	push	r28
    502c:	df 93       	push	r29
    502e:	cd b7       	in	r28, 0x3d	; 61
    5030:	de b7       	in	r29, 0x3e	; 62
    5032:	28 97       	sbiw	r28, 0x08	; 8
    5034:	0f b6       	in	r0, 0x3f	; 63
    5036:	f8 94       	cli
    5038:	de bf       	out	0x3e, r29	; 62
    503a:	0f be       	out	0x3f, r0	; 63
    503c:	cd bf       	out	0x3d, r28	; 61
    503e:	7b 01       	movw	r14, r22
    5040:	8c 01       	movw	r16, r24
{
    mdmctrl0 |= 0x0800;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}

void rf_addr_decode_disable()
    5042:	73 70       	andi	r23, 0x03	; 3
    5044:	80 70       	andi	r24, 0x00	; 0
    5046:	90 70       	andi	r25, 0x00	; 0
    5048:	23 eb       	ldi	r18, 0xB3	; 179
    504a:	36 ee       	ldi	r19, 0xE6	; 230
    504c:	4e e0       	ldi	r20, 0x0E	; 14
    504e:	50 e0       	ldi	r21, 0x00	; 0
    5050:	0e 94 39 34 	call	0x6872	; 0x6872 <__mulsi3>
    5054:	6d 83       	std	Y+5, r22	; 0x05
    5056:	7e 83       	std	Y+6, r23	; 0x06
    5058:	8f 83       	std	Y+7, r24	; 0x07
    505a:	98 87       	std	Y+8, r25	; 0x08
    505c:	9a e0       	ldi	r25, 0x0A	; 10
    505e:	16 95       	lsr	r17
    5060:	07 95       	ror	r16
    5062:	f7 94       	ror	r15
    5064:	e7 94       	ror	r14
    5066:	9a 95       	dec	r25
    5068:	d1 f7       	brne	.-12     	; 0x505e <_nrk_ticks_to_time+0x54>
    506a:	e9 82       	std	Y+1, r14	; 0x01
    506c:	fa 82       	std	Y+2, r15	; 0x02
    506e:	0b 83       	std	Y+3, r16	; 0x03
    5070:	1c 83       	std	Y+4, r17	; 0x04
    5072:	98 85       	ldd	r25, Y+8	; 0x08
    5074:	29 80       	ldd	r2, Y+1	; 0x01
    5076:	3a 80       	ldd	r3, Y+2	; 0x02
    5078:	4b 80       	ldd	r4, Y+3	; 0x03
    507a:	5c 80       	ldd	r5, Y+4	; 0x04
    507c:	6d 80       	ldd	r6, Y+5	; 0x05
    507e:	7e 80       	ldd	r7, Y+6	; 0x06
    5080:	8f 80       	ldd	r8, Y+7	; 0x07
{
    5082:	22 2d       	mov	r18, r2
    5084:	33 2d       	mov	r19, r3
    5086:	44 2d       	mov	r20, r4
    5088:	55 2d       	mov	r21, r5
    508a:	66 2d       	mov	r22, r6
    508c:	77 2d       	mov	r23, r7
    508e:	88 2d       	mov	r24, r8
    5090:	28 96       	adiw	r28, 0x08	; 8
    5092:	0f b6       	in	r0, 0x3f	; 63
    5094:	f8 94       	cli
    5096:	de bf       	out	0x3e, r29	; 62
    5098:	0f be       	out	0x3f, r0	; 63
    509a:	cd bf       	out	0x3d, r28	; 61
    509c:	df 91       	pop	r29
    509e:	cf 91       	pop	r28
    50a0:	1f 91       	pop	r17
    50a2:	0f 91       	pop	r16
    50a4:	ff 90       	pop	r15
    50a6:	ef 90       	pop	r14
    50a8:	df 90       	pop	r13
    50aa:	cf 90       	pop	r12
    50ac:	bf 90       	pop	r11
    50ae:	af 90       	pop	r10
    50b0:	9f 90       	pop	r9
    50b2:	8f 90       	pop	r8
    50b4:	7f 90       	pop	r7
    50b6:	6f 90       	pop	r6
    50b8:	5f 90       	pop	r5
    50ba:	4f 90       	pop	r4
    50bc:	3f 90       	pop	r3
    50be:	2f 90       	pop	r2
    50c0:	08 95       	ret

000050c2 <_nrk_time_to_ticks_long>:
    mdmctrl0 &= (~0x0800);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}
    50c2:	af 92       	push	r10
    50c4:	bf 92       	push	r11
    50c6:	cf 92       	push	r12
    50c8:	df 92       	push	r13
    50ca:	ef 92       	push	r14
    50cc:	ff 92       	push	r15
    50ce:	0f 93       	push	r16
    50d0:	1f 93       	push	r17
    50d2:	cf 93       	push	r28
    50d4:	df 93       	push	r29
    50d6:	cd b7       	in	r28, 0x3d	; 61
    50d8:	de b7       	in	r29, 0x3e	; 62
    50da:	28 97       	sbiw	r28, 0x08	; 8
    50dc:	0f b6       	in	r0, 0x3f	; 63
    50de:	f8 94       	cli
    50e0:	de bf       	out	0x3e, r29	; 62
    50e2:	0f be       	out	0x3f, r0	; 63
    50e4:	cd bf       	out	0x3d, r28	; 61
    50e6:	29 83       	std	Y+1, r18	; 0x01
    50e8:	3a 83       	std	Y+2, r19	; 0x02
    50ea:	4b 83       	std	Y+3, r20	; 0x03
    50ec:	5c 83       	std	Y+4, r21	; 0x04
    50ee:	6d 83       	std	Y+5, r22	; 0x05
    50f0:	7e 83       	std	Y+6, r23	; 0x06
    50f2:	8f 83       	std	Y+7, r24	; 0x07
    50f4:	98 87       	std	Y+8, r25	; 0x08
    50f6:	ad 80       	ldd	r10, Y+5	; 0x05
    50f8:	be 80       	ldd	r11, Y+6	; 0x06
    50fa:	cf 80       	ldd	r12, Y+7	; 0x07
    50fc:	d8 84       	ldd	r13, Y+8	; 0x08
    50fe:	e9 80       	ldd	r14, Y+1	; 0x01
    5100:	fa 80       	ldd	r15, Y+2	; 0x02
    5102:	0b 81       	ldd	r16, Y+3	; 0x03
    5104:	1c 81       	ldd	r17, Y+4	; 0x04


void rf_auto_ack_enable()
{
    5106:	e1 14       	cp	r14, r1
    5108:	f1 04       	cpc	r15, r1
    510a:	01 05       	cpc	r16, r1
    510c:	11 05       	cpc	r17, r1
    510e:	09 f1       	breq	.+66     	; 0x5152 <_nrk_time_to_ticks_long+0x90>
    auto_ack_enable=1;
    mdmctrl0 |= 0x0010;
    5110:	80 e0       	ldi	r24, 0x00	; 0
    5112:	9a ec       	ldi	r25, 0xCA	; 202
    5114:	aa e9       	ldi	r26, 0x9A	; 154
    5116:	bb e3       	ldi	r27, 0x3B	; 59
    5118:	a8 0e       	add	r10, r24
    511a:	b9 1e       	adc	r11, r25
    511c:	ca 1e       	adc	r12, r26
    511e:	db 1e       	adc	r13, r27
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
}
    5120:	c6 01       	movw	r24, r12
    5122:	b5 01       	movw	r22, r10
    5124:	23 eb       	ldi	r18, 0xB3	; 179
    5126:	36 ee       	ldi	r19, 0xE6	; 230
    5128:	4e e0       	ldi	r20, 0x0E	; 14
    512a:	50 e0       	ldi	r21, 0x00	; 0
    512c:	0e 94 7f 34 	call	0x68fe	; 0x68fe <__udivmodsi4>

    5130:	08 94       	sec
    5132:	e1 08       	sbc	r14, r1
    5134:	f1 08       	sbc	r15, r1
    5136:	01 09       	sbc	r16, r1
    5138:	11 09       	sbc	r17, r1
    513a:	6a e0       	ldi	r22, 0x0A	; 10
    513c:	ee 0c       	add	r14, r14
    513e:	ff 1c       	adc	r15, r15
    5140:	00 1f       	adc	r16, r16
    5142:	11 1f       	adc	r17, r17
    5144:	6a 95       	dec	r22
    5146:	d1 f7       	brne	.-12     	; 0x513c <_nrk_time_to_ticks_long+0x7a>
    5148:	e2 0e       	add	r14, r18
    514a:	f3 1e       	adc	r15, r19
    514c:	04 1f       	adc	r16, r20
    514e:	15 1f       	adc	r17, r21
    5150:	0a c0       	rjmp	.+20     	; 0x5166 <_nrk_time_to_ticks_long+0xa4>
void rf_auto_ack_disable()
{
    auto_ack_enable=0;
    5152:	c6 01       	movw	r24, r12
    5154:	b5 01       	movw	r22, r10
    5156:	23 eb       	ldi	r18, 0xB3	; 179
    5158:	36 ee       	ldi	r19, 0xE6	; 230
    515a:	4e e0       	ldi	r20, 0x0E	; 14
    515c:	50 e0       	ldi	r21, 0x00	; 0
    515e:	0e 94 7f 34 	call	0x68fe	; 0x68fe <__udivmodsi4>
    5162:	79 01       	movw	r14, r18
    5164:	8a 01       	movw	r16, r20
    5166:	c8 01       	movw	r24, r16
    5168:	b7 01       	movw	r22, r14
    516a:	04 c0       	rjmp	.+8      	; 0x5174 <_nrk_time_to_ticks_long+0xb2>
    mdmctrl0 &= (~0x0010);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}

    516c:	60 50       	subi	r22, 0x00	; 0
    516e:	74 40       	sbci	r23, 0x04	; 4
    5170:	80 40       	sbci	r24, 0x00	; 0
    5172:	90 40       	sbci	r25, 0x00	; 0
    5174:	61 30       	cpi	r22, 0x01	; 1
    5176:	a4 e0       	ldi	r26, 0x04	; 4
    5178:	7a 07       	cpc	r23, r26
    517a:	a0 e0       	ldi	r26, 0x00	; 0
    517c:	8a 07       	cpc	r24, r26
    517e:	a0 e0       	ldi	r26, 0x00	; 0
    5180:	9a 07       	cpc	r25, r26
    5182:	a0 f7       	brcc	.-24     	; 0x516c <_nrk_time_to_ticks_long+0xaa>

void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
    5184:	23 eb       	ldi	r18, 0xB3	; 179
    5186:	36 ee       	ldi	r19, 0xE6	; 230
    5188:	4e e0       	ldi	r20, 0x0E	; 14
    518a:	50 e0       	ldi	r21, 0x00	; 0
    518c:	0e 94 39 34 	call	0x6872	; 0x6872 <__mulsi3>
    5190:	67 5a       	subi	r22, 0xA7	; 167
    5192:	7c 48       	sbci	r23, 0x8C	; 140
    5194:	88 4f       	sbci	r24, 0xF8	; 248
    5196:	9f 4f       	sbci	r25, 0xFF	; 255
    5198:	6a 15       	cp	r22, r10
    519a:	7b 05       	cpc	r23, r11
    519c:	8c 05       	cpc	r24, r12
    519e:	9d 05       	cpc	r25, r13
    51a0:	28 f4       	brcc	.+10     	; 0x51ac <_nrk_time_to_ticks_long+0xea>
    51a2:	08 94       	sec
    51a4:	e1 1c       	adc	r14, r1
    51a6:	f1 1c       	adc	r15, r1
    51a8:	01 1d       	adc	r16, r1
    51aa:	11 1d       	adc	r17, r1
uint8_t n;
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    nrk_spin_wait_us(500);
    51ac:	c8 01       	movw	r24, r16
    51ae:	b7 01       	movw	r22, r14
    51b0:	28 96       	adiw	r28, 0x08	; 8
    51b2:	0f b6       	in	r0, 0x3f	; 63
    51b4:	f8 94       	cli
    51b6:	de bf       	out	0x3e, r29	; 62
    51b8:	0f be       	out	0x3f, r0	; 63
    51ba:	cd bf       	out	0x3d, r28	; 61
    51bc:	df 91       	pop	r29
    51be:	cf 91       	pop	r28
    51c0:	1f 91       	pop	r17
    51c2:	0f 91       	pop	r16
    51c4:	ff 90       	pop	r15
    51c6:	ef 90       	pop	r14
    51c8:	df 90       	pop	r13
    51ca:	cf 90       	pop	r12
    51cc:	bf 90       	pop	r11
    51ce:	af 90       	pop	r10
    51d0:	08 95       	ret

000051d2 <nrk_time_get>:
//#ifndef RADIO_PRIORITY_CEILING
//  #define RADIO_PRIORITY_CEILING	20
//#endif

nrk_sem_t *radio_sem;
uint8_t auto_ack_enable;
    51d2:	ef 92       	push	r14
    51d4:	ff 92       	push	r15
    51d6:	0f 93       	push	r16
    51d8:	1f 93       	push	r17
    51da:	cf 93       	push	r28
    51dc:	df 93       	push	r29
    51de:	ec 01       	movw	r28, r24
uint8_t security_enable;
    51e0:	80 91 01 07 	lds	r24, 0x0701
    51e4:	90 91 02 07 	lds	r25, 0x0702
    51e8:	a0 91 03 07 	lds	r26, 0x0703
    51ec:	b0 91 04 07 	lds	r27, 0x0704
    51f0:	88 83       	st	Y, r24
    51f2:	99 83       	std	Y+1, r25	; 0x01
    51f4:	aa 83       	std	Y+2, r26	; 0x02
    51f6:	bb 83       	std	Y+3, r27	; 0x03
uint8_t last_pkt_encrypted;
    51f8:	e0 90 05 07 	lds	r14, 0x0705
    51fc:	f0 90 06 07 	lds	r15, 0x0706
    5200:	00 91 07 07 	lds	r16, 0x0707
    5204:	10 91 08 07 	lds	r17, 0x0708
    5208:	ec 82       	std	Y+4, r14	; 0x04
    520a:	fd 82       	std	Y+5, r15	; 0x05
    520c:	0e 83       	std	Y+6, r16	; 0x06
    520e:	1f 83       	std	Y+7, r17	; 0x07
uint16_t mdmctrl0;
uint8_t tx_ctr[4];
    5210:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
    5214:	99 27       	eor	r25, r25
    5216:	aa 27       	eor	r26, r26
    5218:	bb 27       	eor	r27, r27
    521a:	bc 01       	movw	r22, r24
    521c:	cd 01       	movw	r24, r26
    521e:	23 eb       	ldi	r18, 0xB3	; 179
    5220:	36 ee       	ldi	r19, 0xE6	; 230
    5222:	4e e0       	ldi	r20, 0x0E	; 14
    5224:	50 e0       	ldi	r21, 0x00	; 0
    5226:	0e 94 39 34 	call	0x6872	; 0x6872 <__mulsi3>
    522a:	e6 0e       	add	r14, r22
    522c:	f7 1e       	adc	r15, r23
    522e:	08 1f       	adc	r16, r24
    5230:	19 1f       	adc	r17, r25
    5232:	ec 82       	std	Y+4, r14	; 0x04
    5234:	fd 82       	std	Y+5, r15	; 0x05
    5236:	0e 83       	std	Y+6, r16	; 0x06
    5238:	1f 83       	std	Y+7, r17	; 0x07
    523a:	13 c0       	rjmp	.+38     	; 0x5262 <nrk_time_get+0x90>
uint8_t rx_ctr[4];

// Returns 1 if the last packet was encrypted, 0 otherwise
    523c:	80 50       	subi	r24, 0x00	; 0
    523e:	9a 4c       	sbci	r25, 0xCA	; 202
    5240:	aa 49       	sbci	r26, 0x9A	; 154
    5242:	bb 43       	sbci	r27, 0x3B	; 59
    5244:	8c 83       	std	Y+4, r24	; 0x04
    5246:	9d 83       	std	Y+5, r25	; 0x05
    5248:	ae 83       	std	Y+6, r26	; 0x06
    524a:	bf 83       	std	Y+7, r27	; 0x07
uint8_t rf_security_last_pkt_status()
    524c:	88 81       	ld	r24, Y
    524e:	99 81       	ldd	r25, Y+1	; 0x01
    5250:	aa 81       	ldd	r26, Y+2	; 0x02
    5252:	bb 81       	ldd	r27, Y+3	; 0x03
    5254:	01 96       	adiw	r24, 0x01	; 1
    5256:	a1 1d       	adc	r26, r1
    5258:	b1 1d       	adc	r27, r1
    525a:	88 83       	st	Y, r24
    525c:	99 83       	std	Y+1, r25	; 0x01
    525e:	aa 83       	std	Y+2, r26	; 0x02
    5260:	bb 83       	std	Y+3, r27	; 0x03
uint8_t auto_ack_enable;
uint8_t security_enable;
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];
    5262:	8c 81       	ldd	r24, Y+4	; 0x04
    5264:	9d 81       	ldd	r25, Y+5	; 0x05
    5266:	ae 81       	ldd	r26, Y+6	; 0x06
    5268:	bf 81       	ldd	r27, Y+7	; 0x07
    526a:	80 30       	cpi	r24, 0x00	; 0
    526c:	2a ec       	ldi	r18, 0xCA	; 202
    526e:	92 07       	cpc	r25, r18
    5270:	2a e9       	ldi	r18, 0x9A	; 154
    5272:	a2 07       	cpc	r26, r18
    5274:	2b e3       	ldi	r18, 0x3B	; 59
    5276:	b2 07       	cpc	r27, r18
    5278:	08 f7       	brcc	.-62     	; 0x523c <nrk_time_get+0x6a>
    527a:	df 91       	pop	r29
    527c:	cf 91       	pop	r28
    527e:	1f 91       	pop	r17
    5280:	0f 91       	pop	r16
    5282:	ff 90       	pop	r15
    5284:	ef 90       	pop	r14
    5286:	08 95       	ret

00005288 <nrk_idle_task>:
//#ifndef RADIO_PRIORITY_CEILING
//  #define RADIO_PRIORITY_CEILING	20
//#endif

nrk_sem_t *radio_sem;
uint8_t auto_ack_enable;
    5288:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <nrk_stack_check>
uint8_t security_enable;
uint8_t last_pkt_encrypted;
    528c:	0e 94 c1 2c 	call	0x5982	; 0x5982 <_nrk_get_next_wakeup>
    5290:	8b 30       	cpi	r24, 0x0B	; 11
    5292:	18 f4       	brcc	.+6      	; 0x529a <nrk_idle_task+0x12>
uint16_t mdmctrl0;
uint8_t tx_ctr[4];
    5294:	81 e0       	ldi	r24, 0x01	; 1
    5296:	80 93 fe 06 	sts	0x06FE, r24
{
return last_pkt_encrypted;
}


void rf_security_set_ctr_counter(uint8_t *counter)
    529a:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <nrk_idle>
{
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
    529e:	80 91 ac 05 	lds	r24, 0x05AC
    52a2:	85 35       	cpi	r24, 0x55	; 85
    52a4:	19 f0       	breq	.+6      	; 0x52ac <nrk_idle_task+0x24>
    52a6:	88 e0       	ldi	r24, 0x08	; 8
    52a8:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <nrk_error_add>
tx_ctr[0]=counter[0];
tx_ctr[1]=counter[1];
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}
    52ac:	80 91 7e 21 	lds	r24, 0x217E
    52b0:	85 35       	cpi	r24, 0x55	; 85
    52b2:	51 f3       	breq	.-44     	; 0x5288 <nrk_idle_task>
    52b4:	88 e0       	ldi	r24, 0x08	; 8
    52b6:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <nrk_error_add>
    52ba:	e6 cf       	rjmp	.-52     	; 0x5288 <nrk_idle_task>

000052bc <_nrk_scheduler>:
uint8_t auto_ack_enable;
uint8_t security_enable;
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];
    52bc:	8f 92       	push	r8
    52be:	9f 92       	push	r9
    52c0:	af 92       	push	r10
    52c2:	bf 92       	push	r11
    52c4:	cf 92       	push	r12
    52c6:	df 92       	push	r13
    52c8:	ef 92       	push	r14
    52ca:	ff 92       	push	r15
    52cc:	0f 93       	push	r16
    52ce:	1f 93       	push	r17
    52d0:	cf 93       	push	r28
    52d2:	df 93       	push	r29

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
    52d4:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>
}


void rf_security_set_ctr_counter(uint8_t *counter)
    52d8:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <_nrk_high_speed_timer_reset>
{
    52dc:	0e 94 85 2c 	call	0x590a	; 0x590a <_nrk_high_speed_timer_get>
    52e0:	4c 01       	movw	r8, r24
uint8_t n;
// CTR counter value
    52e2:	8a ef       	ldi	r24, 0xFA	; 250
    52e4:	0e 94 c6 2c 	call	0x598c	; 0x598c <_nrk_set_next_wakeup>
void rf_security_set_key(uint8_t *key)
{
uint8_t n,i;
uint16_t key_buf;

// Set AES key
    52e8:	60 91 59 06 	lds	r22, 0x0659
    52ec:	77 27       	eor	r23, r23
    52ee:	88 27       	eor	r24, r24
    52f0:	99 27       	eor	r25, r25
    52f2:	23 eb       	ldi	r18, 0xB3	; 179
    52f4:	36 ee       	ldi	r19, 0xE6	; 230
    52f6:	4e e0       	ldi	r20, 0x0E	; 14
    52f8:	50 e0       	ldi	r21, 0x00	; 0
    52fa:	0e 94 39 34 	call	0x6872	; 0x6872 <__mulsi3>
    52fe:	7b 01       	movw	r14, r22
    5300:	8c 01       	movw	r16, r24
    5302:	80 91 05 07 	lds	r24, 0x0705
    5306:	90 91 06 07 	lds	r25, 0x0706
    530a:	a0 91 07 07 	lds	r26, 0x0707
    530e:	b0 91 08 07 	lds	r27, 0x0708
    5312:	e8 0e       	add	r14, r24
    5314:	f9 1e       	adc	r15, r25
    5316:	0a 1f       	adc	r16, r26
    5318:	1b 1f       	adc	r17, r27
nrk_spin_wait_us(100); 
    531a:	c8 01       	movw	r24, r16
    531c:	b7 01       	movw	r22, r14
    531e:	0e 94 7f 34 	call	0x68fe	; 0x68fe <__udivmodsi4>
    5322:	a8 01       	movw	r20, r16
    5324:	97 01       	movw	r18, r14
    5326:	26 1b       	sub	r18, r22
    5328:	37 0b       	sbc	r19, r23
    532a:	48 0b       	sbc	r20, r24
    532c:	59 0b       	sbc	r21, r25
    532e:	80 91 01 07 	lds	r24, 0x0701
    5332:	90 91 02 07 	lds	r25, 0x0702
    5336:	a0 91 03 07 	lds	r26, 0x0703
    533a:	b0 91 04 07 	lds	r27, 0x0704
    533e:	1b c0       	rjmp	.+54     	; 0x5376 <_nrk_scheduler+0xba>
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

    5340:	e1 2c       	mov	r14, r1
    5342:	66 e3       	ldi	r22, 0x36	; 54
    5344:	f6 2e       	mov	r15, r22
    5346:	65 e6       	ldi	r22, 0x65	; 101
    5348:	06 2f       	mov	r16, r22
    534a:	64 ec       	ldi	r22, 0xC4	; 196
    534c:	16 2f       	mov	r17, r22
    534e:	e2 0e       	add	r14, r18
    5350:	f3 1e       	adc	r15, r19
    5352:	04 1f       	adc	r16, r20
    5354:	15 1f       	adc	r17, r21
void rf_security_enable(uint8_t *key)
{
    5356:	c8 01       	movw	r24, r16
    5358:	b7 01       	movw	r22, r14
    535a:	23 eb       	ldi	r18, 0xB3	; 179
    535c:	36 ee       	ldi	r19, 0xE6	; 230
    535e:	4e e0       	ldi	r20, 0x0E	; 14
    5360:	50 e0       	ldi	r21, 0x00	; 0
    5362:	0e 94 7f 34 	call	0x68fe	; 0x68fe <__udivmodsi4>
    5366:	a8 01       	movw	r20, r16
    5368:	97 01       	movw	r18, r14
    536a:	26 1b       	sub	r18, r22
    536c:	37 0b       	sbc	r19, r23
    536e:	48 0b       	sbc	r20, r24
    5370:	59 0b       	sbc	r21, r25
    5372:	d6 01       	movw	r26, r12
    5374:	c5 01       	movw	r24, r10
    5376:	5c 01       	movw	r10, r24
    5378:	6d 01       	movw	r12, r26
    537a:	08 94       	sec
    537c:	a1 1c       	adc	r10, r1
    537e:	b1 1c       	adc	r11, r1
    5380:	c1 1c       	adc	r12, r1
    5382:	d1 1c       	adc	r13, r1
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    5384:	20 30       	cpi	r18, 0x00	; 0
    5386:	6a ec       	ldi	r22, 0xCA	; 202
    5388:	36 07       	cpc	r19, r22
    538a:	6a e9       	ldi	r22, 0x9A	; 154
    538c:	46 07       	cpc	r20, r22
    538e:	6b e3       	ldi	r22, 0x3B	; 59
    5390:	56 07       	cpc	r21, r22
    5392:	b0 f6       	brcc	.-84     	; 0x5340 <_nrk_scheduler+0x84>
    5394:	80 93 01 07 	sts	0x0701, r24
    5398:	90 93 02 07 	sts	0x0702, r25
    539c:	a0 93 03 07 	sts	0x0703, r26
    53a0:	b0 93 04 07 	sts	0x0704, r27
    53a4:	20 93 05 07 	sts	0x0705, r18
    53a8:	30 93 06 07 	sts	0x0706, r19
    53ac:	40 93 07 07 	sts	0x0707, r20
    53b0:	50 93 08 07 	sts	0x0708, r21
void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header

security_enable=1;
    53b4:	e0 91 0a 07 	lds	r30, 0x070A
    53b8:	f0 91 0b 07 	lds	r31, 0x070B
    53bc:	85 81       	ldd	r24, Z+5	; 0x05
    53be:	88 23       	and	r24, r24
    53c0:	19 f1       	breq	.+70     	; 0x5408 <_nrk_scheduler+0x14c>
    53c2:	81 85       	ldd	r24, Z+9	; 0x09
    53c4:	84 30       	cpi	r24, 0x04	; 4
    53c6:	01 f1       	breq	.+64     	; 0x5408 <_nrk_scheduler+0x14c>
}



    53c8:	87 81       	ldd	r24, Z+7	; 0x07
    53ca:	82 30       	cpi	r24, 0x02	; 2
    53cc:	29 f0       	breq	.+10     	; 0x53d8 <_nrk_scheduler+0x11c>
void rf_security_disable()
{
    53ce:	88 23       	and	r24, r24
    53d0:	41 f0       	breq	.+16     	; 0x53e2 <_nrk_scheduler+0x126>
    53d2:	86 81       	ldd	r24, Z+6	; 0x06
    53d4:	88 23       	and	r24, r24
    53d6:	11 f4       	brne	.+4      	; 0x53dc <_nrk_scheduler+0x120>
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
    53d8:	85 e0       	ldi	r24, 0x05	; 5
    53da:	01 c0       	rjmp	.+2      	; 0x53de <_nrk_scheduler+0x122>
  security_enable=0;
}
    53dc:	83 e0       	ldi	r24, 0x03	; 3
    53de:	81 87       	std	Z+9, r24	; 0x09
    53e0:	0c c0       	rjmp	.+24     	; 0x53fa <_nrk_scheduler+0x13e>

//-------------------------------------------------------------------------------------------------------
// The RF settings structure is declared here, since we'll always need halRfInit()
    53e2:	83 e0       	ldi	r24, 0x03	; 3
    53e4:	81 87       	std	Z+9, r24	; 0x09
volatile RF_SETTINGS rfSettings;
    53e6:	e0 91 0a 07 	lds	r30, 0x070A
    53ea:	f0 91 0b 07 	lds	r31, 0x070B
    53ee:	17 82       	std	Z+7, r1	; 0x07
volatile uint8_t rx_ready;
    53f0:	e0 91 0a 07 	lds	r30, 0x070A
    53f4:	f0 91 0b 07 	lds	r31, 0x070B
    53f8:	16 82       	std	Z+6, r1	; 0x06
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
    53fa:	e0 91 0a 07 	lds	r30, 0x070A
    53fe:	f0 91 0b 07 	lds	r31, 0x070B
    5402:	80 85       	ldd	r24, Z+8	; 0x08
    5404:	0e 94 be 23 	call	0x477c	; 0x477c <nrk_rem_from_readyQ>
}

void rf_tx_power(uint8_t pwr)
{
uint16_t tmp;
    //tmp=0x5070;
    5408:	e0 91 0a 07 	lds	r30, 0x070A
    540c:	f0 91 0b 07 	lds	r31, 0x070B
    5410:	85 8d       	ldd	r24, Z+29	; 0x1d
    5412:	96 8d       	ldd	r25, Z+30	; 0x1e
    5414:	89 2b       	or	r24, r25
    5416:	91 f1       	breq	.+100    	; 0x547c <_nrk_scheduler+0x1c0>
    5418:	60 85       	ldd	r22, Z+8	; 0x08
    541a:	66 23       	and	r22, r22
    541c:	79 f1       	breq	.+94     	; 0x547c <_nrk_scheduler+0x1c0>
    541e:	81 85       	ldd	r24, Z+9	; 0x09
    5420:	84 30       	cpi	r24, 0x04	; 4
    5422:	61 f1       	breq	.+88     	; 0x547c <_nrk_scheduler+0x1c0>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    5424:	21 8d       	ldd	r18, Z+25	; 0x19
    5426:	32 8d       	ldd	r19, Z+26	; 0x1a
    5428:	80 91 59 06 	lds	r24, 0x0659
    542c:	99 27       	eor	r25, r25
    542e:	28 17       	cp	r18, r24
    5430:	39 07       	cpc	r19, r25
    5432:	50 f4       	brcc	.+20     	; 0x5448 <_nrk_scheduler+0x18c>
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
#ifdef RADIO_PRIORITY_CEILING
    5434:	82 e0       	ldi	r24, 0x02	; 2
    5436:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <nrk_kernel_error_add>
    nrk_sem_post(radio_sem);
    543a:	e0 91 0a 07 	lds	r30, 0x070A
    543e:	f0 91 0b 07 	lds	r31, 0x070B
    5442:	12 8e       	std	Z+26, r1	; 0x1a
    5444:	11 8e       	std	Z+25, r1	; 0x19
    5446:	04 c0       	rjmp	.+8      	; 0x5450 <_nrk_scheduler+0x194>
#endif
}
    5448:	28 1b       	sub	r18, r24
    544a:	39 0b       	sbc	r19, r25
    544c:	32 8f       	std	Z+26, r19	; 0x1a
    544e:	21 8f       	std	Z+25, r18	; 0x19
void rf_set_channel( uint8_t channel )
{
    5450:	e0 91 0a 07 	lds	r30, 0x070A
    5454:	f0 91 0b 07 	lds	r31, 0x070B
    5458:	10 85       	ldd	r17, Z+8	; 0x08
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    545a:	81 8d       	ldd	r24, Z+25	; 0x19
    545c:	92 8d       	ldd	r25, Z+26	; 0x1a
    545e:	89 2b       	or	r24, r25
    5460:	69 f4       	brne	.+26     	; 0x547c <_nrk_scheduler+0x1c0>
#endif
    halRfSetChannel(channel);
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    5462:	61 2f       	mov	r22, r17
    5464:	83 e0       	ldi	r24, 0x03	; 3
    5466:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <nrk_kernel_error_add>
#endif
    546a:	e0 91 0a 07 	lds	r30, 0x070A
    546e:	f0 91 0b 07 	lds	r31, 0x070B
    5472:	83 e0       	ldi	r24, 0x03	; 3
    5474:	81 87       	std	Z+9, r24	; 0x09
}
    5476:	81 2f       	mov	r24, r17
    5478:	0e 94 be 23 	call	0x477c	; 0x477c <nrk_rem_from_readyQ>
    547c:	ce e8       	ldi	r28, 0x8E	; 142
    547e:	d6 e0       	ldi	r29, 0x06	; 6
    5480:	00 e6       	ldi	r16, 0x60	; 96
    5482:	1a ee       	ldi	r17, 0xEA	; 234
    5484:	cc 24       	eor	r12, r12
    5486:	dd 24       	eor	r13, r13
    5488:	4c 2d       	mov	r20, r12
{
    mdmctrl0 |= 0x0800;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}

void rf_addr_decode_disable()
    548a:	88 85       	ldd	r24, Y+8	; 0x08
    548c:	8f 3f       	cpi	r24, 0xFF	; 255
    548e:	09 f4       	brne	.+2      	; 0x5492 <_nrk_scheduler+0x1d6>
    5490:	89 c0       	rjmp	.+274    	; 0x55a4 <_nrk_scheduler+0x2e8>
{
    5492:	1d 82       	std	Y+5, r1	; 0x05
    mdmctrl0 &= (~0x0800);
    5494:	88 23       	and	r24, r24
    5496:	91 f1       	breq	.+100    	; 0x54fc <_nrk_scheduler+0x240>
    5498:	89 85       	ldd	r24, Y+9	; 0x09
    549a:	84 30       	cpi	r24, 0x04	; 4
    549c:	79 f1       	breq	.+94     	; 0x54fc <_nrk_scheduler+0x240>
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}
    549e:	2d 89       	ldd	r18, Y+21	; 0x15
    54a0:	3e 89       	ldd	r19, Y+22	; 0x16
    54a2:	80 91 59 06 	lds	r24, 0x0659
    54a6:	99 27       	eor	r25, r25
    54a8:	28 17       	cp	r18, r24
    54aa:	39 07       	cpc	r19, r25
    54ac:	28 f0       	brcs	.+10     	; 0x54b8 <_nrk_scheduler+0x1fc>

    54ae:	28 1b       	sub	r18, r24
    54b0:	39 0b       	sbc	r19, r25
    54b2:	3e 8b       	std	Y+22, r19	; 0x16
    54b4:	2d 8b       	std	Y+21, r18	; 0x15
    54b6:	02 c0       	rjmp	.+4      	; 0x54bc <_nrk_scheduler+0x200>

void rf_auto_ack_enable()
    54b8:	1e 8a       	std	Y+22, r1	; 0x16
    54ba:	1d 8a       	std	Y+21, r1	; 0x15
{
    auto_ack_enable=1;
    mdmctrl0 |= 0x0010;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
}
    54bc:	2f 89       	ldd	r18, Y+23	; 0x17
    54be:	38 8d       	ldd	r19, Y+24	; 0x18
    54c0:	28 17       	cp	r18, r24
    54c2:	39 07       	cpc	r19, r25
    54c4:	28 f0       	brcs	.+10     	; 0x54d0 <_nrk_scheduler+0x214>

    54c6:	28 1b       	sub	r18, r24
    54c8:	39 0b       	sbc	r19, r25
    54ca:	38 8f       	std	Y+24, r19	; 0x18
    54cc:	2f 8b       	std	Y+23, r18	; 0x17
    54ce:	0e c0       	rjmp	.+28     	; 0x54ec <_nrk_scheduler+0x230>
void rf_auto_ack_disable()
{
    54d0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    54d2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    54d4:	86 17       	cp	r24, r22
    54d6:	97 07       	cpc	r25, r23
    54d8:	28 f4       	brcc	.+10     	; 0x54e4 <_nrk_scheduler+0x228>
    auto_ack_enable=0;
    54da:	68 1b       	sub	r22, r24
    54dc:	79 0b       	sbc	r23, r25
    54de:	78 8f       	std	Y+24, r23	; 0x18
    54e0:	6f 8b       	std	Y+23, r22	; 0x17
    54e2:	04 c0       	rjmp	.+8      	; 0x54ec <_nrk_scheduler+0x230>
    mdmctrl0 &= (~0x0010);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
    54e4:	0e 94 58 34 	call	0x68b0	; 0x68b0 <__udivmodhi4>
    54e8:	98 8f       	std	Y+24, r25	; 0x18
    54ea:	8f 8b       	std	Y+23, r24	; 0x17
}

    54ec:	8f 89       	ldd	r24, Y+23	; 0x17
    54ee:	98 8d       	ldd	r25, Y+24	; 0x18
    54f0:	89 2b       	or	r24, r25
    54f2:	21 f4       	brne	.+8      	; 0x54fc <_nrk_scheduler+0x240>
    54f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54f8:	98 8f       	std	Y+24, r25	; 0x18
    54fa:	8f 8b       	std	Y+23, r24	; 0x17

void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
uint8_t n;
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    54fc:	89 85       	ldd	r24, Y+9	; 0x09
    54fe:	83 30       	cpi	r24, 0x03	; 3
    5500:	09 f0       	breq	.+2      	; 0x5504 <_nrk_scheduler+0x248>
    5502:	50 c0       	rjmp	.+160    	; 0x55a4 <_nrk_scheduler+0x2e8>
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    nrk_spin_wait_us(500);
}
    5504:	8d 89       	ldd	r24, Y+21	; 0x15
    5506:	9e 89       	ldd	r25, Y+22	; 0x16
    5508:	89 2b       	or	r24, r25
    550a:	09 f0       	breq	.+2      	; 0x550e <_nrk_scheduler+0x252>
    550c:	43 c0       	rjmp	.+134    	; 0x5594 <_nrk_scheduler+0x2d8>


    550e:	8f 81       	ldd	r24, Y+7	; 0x07
    5510:	88 23       	and	r24, r24
    5512:	a1 f0       	breq	.+40     	; 0x553c <_nrk_scheduler+0x280>
    5514:	8e 81       	ldd	r24, Y+6	; 0x06
    5516:	88 23       	and	r24, r24
    5518:	89 f0       	breq	.+34     	; 0x553c <_nrk_scheduler+0x280>
    551a:	81 e0       	ldi	r24, 0x01	; 1
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	a0 e0       	ldi	r26, 0x00	; 0
    5520:	b0 e0       	ldi	r27, 0x00	; 0
    5522:	00 90 fa 06 	lds	r0, 0x06FA
    5526:	04 c0       	rjmp	.+8      	; 0x5530 <_nrk_scheduler+0x274>
    5528:	88 0f       	add	r24, r24
    552a:	99 1f       	adc	r25, r25
    552c:	aa 1f       	adc	r26, r26
    552e:	bb 1f       	adc	r27, r27
    5530:	0a 94       	dec	r0
    5532:	d2 f7       	brpl	.-12     	; 0x5528 <_nrk_scheduler+0x26c>
    5534:	89 8b       	std	Y+17, r24	; 0x11
    5536:	9a 8b       	std	Y+18, r25	; 0x12
    5538:	ab 8b       	std	Y+19, r26	; 0x13
    553a:	bc 8b       	std	Y+20, r27	; 0x14

void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
    553c:	1f 82       	std	Y+7, r1	; 0x07
{
    553e:	1e 82       	std	Y+6, r1	; 0x06

    5540:	1d 82       	std	Y+5, r1	; 0x05
#ifdef RADIO_PRIORITY_CEILING
    5542:	2f 8d       	ldd	r18, Y+31	; 0x1f
    5544:	38 a1       	ldd	r19, Y+32	; 0x20
    5546:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5548:	9e 8d       	ldd	r25, Y+30	; 0x1e
    554a:	21 30       	cpi	r18, 0x01	; 1
    554c:	31 05       	cpc	r19, r1
    554e:	61 f4       	brne	.+24     	; 0x5568 <_nrk_scheduler+0x2ac>
    nrk_sem_pend (radio_sem);
#endif
    5550:	9a 8f       	std	Y+26, r25	; 0x1a
    5552:	89 8f       	std	Y+25, r24	; 0x19

    5554:	82 e0       	ldi	r24, 0x02	; 2
    5556:	89 87       	std	Y+9, r24	; 0x09
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    5558:	8f 89       	ldd	r24, Y+23	; 0x17
    555a:	98 8d       	ldd	r25, Y+24	; 0x18
    555c:	9e 8b       	std	Y+22, r25	; 0x16
    555e:	8d 8b       	std	Y+21, r24	; 0x15
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    5560:	84 2f       	mov	r24, r20
    5562:	0e 94 37 23 	call	0x466e	; 0x466e <nrk_add_to_readyQ>
    5566:	16 c0       	rjmp	.+44     	; 0x5594 <_nrk_scheduler+0x2d8>
    halRfSetChannel(channel);
    rfSettings.pRxInfo = pRRI;

    5568:	9a 8f       	std	Y+26, r25	; 0x1a
    556a:	89 8f       	std	Y+25, r24	; 0x19
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
    556c:	21 50       	subi	r18, 0x01	; 1
    556e:	30 40       	sbci	r19, 0x00	; 0
    5570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5574:	ac 01       	movw	r20, r24
    5576:	24 9f       	mul	r18, r20
    5578:	c0 01       	movw	r24, r0
    557a:	25 9f       	mul	r18, r21
    557c:	90 0d       	add	r25, r0
    557e:	34 9f       	mul	r19, r20
    5580:	90 0d       	add	r25, r0
    5582:	11 24       	eor	r1, r1
    5584:	9e 8b       	std	Y+22, r25	; 0x16
    5586:	8d 8b       	std	Y+21, r24	; 0x15
}
    5588:	98 8f       	std	Y+24, r25	; 0x18
    558a:	8f 8b       	std	Y+23, r24	; 0x17
//-------------------------------------------------------------------------------------------------------
    558c:	81 e0       	ldi	r24, 0x01	; 1
    558e:	90 e0       	ldi	r25, 0x00	; 0
    5590:	98 a3       	std	Y+32, r25	; 0x20
    5592:	8f 8f       	std	Y+31, r24	; 0x1f
//  void rf_init(RF_RX_INFO *pRRI, uint8_t channel, WORD panId, WORD myAddr)
//
//  DESCRIPTION:
//      Initializes CC2420 for radio communication via the basic RF library functions. Turns on the
//		voltage regulator, resets the CC2420, turns on the crystal oscillator, writes all necessary
//		registers and protocol addresses (for automatic address recognition). Note that the crystal
    5594:	8d 89       	ldd	r24, Y+21	; 0x15
    5596:	9e 89       	ldd	r25, Y+22	; 0x16
    5598:	00 97       	sbiw	r24, 0x00	; 0
    559a:	21 f0       	breq	.+8      	; 0x55a4 <_nrk_scheduler+0x2e8>
    559c:	80 17       	cp	r24, r16
    559e:	91 07       	cpc	r25, r17
    55a0:	08 f4       	brcc	.+2      	; 0x55a4 <_nrk_scheduler+0x2e8>
    55a2:	8c 01       	movw	r16, r24
    55a4:	08 94       	sec
    55a6:	c1 1c       	adc	r12, r1
    55a8:	d1 1c       	adc	r13, r1
    55aa:	a1 96       	adiw	r28, 0x21	; 33
void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}

    55ac:	53 e0       	ldi	r21, 0x03	; 3
    55ae:	c5 16       	cp	r12, r21
    55b0:	d1 04       	cpc	r13, r1
    55b2:	09 f0       	breq	.+2      	; 0x55b6 <_nrk_scheduler+0x2fa>
    55b4:	69 cf       	rjmp	.-302    	; 0x5488 <_nrk_scheduler+0x1cc>
//      WORD panId
//          The personal area network identification number
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
    55b6:	0e 94 25 23 	call	0x464a	; 0x464a <nrk_get_high_ready_task_ID>
    55ba:	e8 2e       	mov	r14, r24
//-------------------------------------------------------------------------------------------------------
    55bc:	99 27       	eor	r25, r25
    55be:	87 fd       	sbrc	r24, 7
    55c0:	90 95       	com	r25
    55c2:	fc 01       	movw	r30, r24
    55c4:	25 e0       	ldi	r18, 0x05	; 5
    55c6:	ee 0f       	add	r30, r30
    55c8:	ff 1f       	adc	r31, r31
    55ca:	2a 95       	dec	r18
    55cc:	e1 f7       	brne	.-8      	; 0x55c6 <_nrk_scheduler+0x30a>
    55ce:	e8 0f       	add	r30, r24
    55d0:	f9 1f       	adc	r31, r25
    55d2:	e2 57       	subi	r30, 0x72	; 114
    55d4:	f9 4f       	sbci	r31, 0xF9	; 249
    55d6:	42 85       	ldd	r20, Z+10	; 0x0a
    55d8:	40 93 0c 07 	sts	0x070C, r20
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    55dc:	81 e2       	ldi	r24, 0x21	; 33
    55de:	6e 2d       	mov	r22, r14
    55e0:	68 02       	muls	r22, r24
    55e2:	90 01       	movw	r18, r0
    55e4:	11 24       	eor	r1, r1
    55e6:	22 57       	subi	r18, 0x72	; 114
    55e8:	39 4f       	sbci	r19, 0xF9	; 249
    55ea:	30 93 fc 06 	sts	0x06FC, r19
    55ee:	20 93 fb 06 	sts	0x06FB, r18
#ifdef RADIO_PRIORITY_CEILING
   int8_t v;
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    if (radio_sem == NULL)
      nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());

    55f2:	ee 20       	and	r14, r14
    55f4:	91 f0       	breq	.+36     	; 0x561a <_nrk_scheduler+0x35e>
  v = nrk_sem_pend (radio_sem);
  if (v == NRK_ERROR) {
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
    55f6:	85 8d       	ldd	r24, Z+29	; 0x1d
    55f8:	96 8d       	ldd	r25, Z+30	; 0x1e
    55fa:	89 2b       	or	r24, r25
    55fc:	51 f0       	breq	.+20     	; 0x5612 <_nrk_scheduler+0x356>
    55fe:	81 8d       	ldd	r24, Z+25	; 0x19
    5600:	92 8d       	ldd	r25, Z+26	; 0x1a
    5602:	8a 3f       	cpi	r24, 0xFA	; 250
    5604:	91 05       	cpc	r25, r1
    5606:	28 f4       	brcc	.+10     	; 0x5612 <_nrk_scheduler+0x356>
    5608:	80 17       	cp	r24, r16
    560a:	91 07       	cpc	r25, r17
    560c:	e0 f4       	brcc	.+56     	; 0x5646 <_nrk_scheduler+0x38a>
    560e:	8c 01       	movw	r16, r24
    5610:	1a c0       	rjmp	.+52     	; 0x5646 <_nrk_scheduler+0x38a>
    5612:	0b 3f       	cpi	r16, 0xFB	; 251
    5614:	11 05       	cpc	r17, r1
    5616:	b8 f0       	brcs	.+46     	; 0x5646 <_nrk_scheduler+0x38a>
    5618:	14 c0       	rjmp	.+40     	; 0x5642 <_nrk_scheduler+0x386>
    // Initialize the FIFOP external interrupt
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();
    561a:	0b 30       	cpi	r16, 0x0B	; 11
    561c:	11 05       	cpc	r17, r1
    561e:	98 f0       	brcs	.+38     	; 0x5646 <_nrk_scheduler+0x38a>

    // Register modifications
    5620:	c8 01       	movw	r24, r16
    5622:	0a 97       	sbiw	r24, 0x0a	; 10
    5624:	8a 3f       	cpi	r24, 0xFA	; 250
    5626:	91 05       	cpc	r25, r1
    5628:	30 f4       	brcc	.+12     	; 0x5636 <_nrk_scheduler+0x37a>
    562a:	8c 01       	movw	r16, r24
    562c:	09 97       	sbiw	r24, 0x09	; 9
    562e:	58 f4       	brcc	.+22     	; 0x5646 <_nrk_scheduler+0x38a>
    5630:	09 e0       	ldi	r16, 0x09	; 9
    5632:	10 e0       	ldi	r17, 0x00	; 0
    5634:	08 c0       	rjmp	.+16     	; 0x5646 <_nrk_scheduler+0x38a>
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    5636:	05 50       	subi	r16, 0x05	; 5
    5638:	11 40       	sbci	r17, 0x01	; 1
    563a:	18 f4       	brcc	.+6      	; 0x5642 <_nrk_scheduler+0x386>
    563c:	00 ef       	ldi	r16, 0xF0	; 240
    563e:	10 e0       	ldi	r17, 0x00	; 0
    5640:	02 c0       	rjmp	.+4      	; 0x5646 <_nrk_scheduler+0x38a>
    5642:	0a ef       	ldi	r16, 0xFA	; 250
    5644:	10 e0       	ldi	r17, 0x00	; 0

    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    nrk_spin_wait_us(500);

  	ENABLE_GLOBAL_INT();
    5646:	40 93 fd 06 	sts	0x06FD, r20

    564a:	30 93 0b 07 	sts	0x070B, r19
    564e:	20 93 0a 07 	sts	0x070A, r18

    // Turn interrupts back on
	ENABLE_GLOBAL_INT();

	// Set the protocol configuration
	rfSettings.pRxInfo = pRRI;
    5652:	00 93 59 06 	sts	0x0659, r16
	rfSettings.panId = panId;
	rfSettings.myAddr = myAddr;
	rfSettings.txSeqNumber = 0;
    5656:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
    565a:	99 27       	eor	r25, r25
    565c:	80 17       	cp	r24, r16
    565e:	91 07       	cpc	r25, r17
    5660:	40 f0       	brcs	.+16     	; 0x5672 <_nrk_scheduler+0x3b6>
//    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
//    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
  //	ENABLE_GLOBAL_INT();

#ifdef RADIO_PRIORITY_CEILING
  v = nrk_sem_post (radio_sem);
    5662:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <_nrk_os_timer_get>
    5666:	08 2f       	mov	r16, r24
    5668:	11 27       	eor	r17, r17
    566a:	0e 5f       	subi	r16, 0xFE	; 254
    566c:	1f 4f       	sbci	r17, 0xFF	; 255
  if (v == NRK_ERROR) {
    566e:	00 93 59 06 	sts	0x0659, r16
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    _nrk_errno_set (2);
  }
    5672:	ee 20       	and	r14, r14
    5674:	11 f0       	breq	.+4      	; 0x567a <_nrk_scheduler+0x3be>
    5676:	10 92 fe 06 	sts	0x06FE, r1
#endif

    567a:	80 2f       	mov	r24, r16
    567c:	0e 94 c6 2c 	call	0x598c	; 0x598c <_nrk_set_next_wakeup>
auto_ack_enable=0;
security_enable=0;
last_pkt_encrypted=0;
} // rf_init() 
    5680:	6e ee       	ldi	r22, 0xEE	; 238
    5682:	72 e0       	ldi	r23, 0x02	; 2
    5684:	c4 01       	movw	r24, r8
    5686:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <nrk_high_speed_timer_wait>


    568a:	0e 94 54 30 	call	0x60a8	; 0x60a8 <nrk_stack_pointer_restore>
//-------------------------------------------------------------------------------------------------------
//  void rf_rx_on(void)
    568e:	0e 94 81 30 	call	0x6102	; 0x6102 <nrk_start_high_ready_task>
    5692:	df 91       	pop	r29
    5694:	cf 91       	pop	r28
    5696:	1f 91       	pop	r17
    5698:	0f 91       	pop	r16
    569a:	ff 90       	pop	r15
    569c:	ef 90       	pop	r14
    569e:	df 90       	pop	r13
    56a0:	cf 90       	pop	r12
    56a2:	bf 90       	pop	r11
    56a4:	af 90       	pop	r10
    56a6:	9f 90       	pop	r9
    56a8:	8f 90       	pop	r8
    56aa:	08 95       	ret

000056ac <nrk_register_driver>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
uint8_t n;
// CTR counter value
    56ac:	20 91 21 07 	lds	r18, 0x0721
    56b0:	12 16       	cp	r1, r18
    56b2:	1c f4       	brge	.+6      	; 0x56ba <nrk_register_driver+0xe>
    56b4:	8f ef       	ldi	r24, 0xFF	; 255
    56b6:	9f ef       	ldi	r25, 0xFF	; 255
    56b8:	08 95       	ret
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
    56ba:	e2 2f       	mov	r30, r18
    56bc:	ff 27       	eor	r31, r31
    56be:	e7 fd       	sbrc	r30, 7
    56c0:	f0 95       	com	r31
    56c2:	ee 0f       	add	r30, r30
    56c4:	ff 1f       	adc	r31, r31
    56c6:	ee 0f       	add	r30, r30
    56c8:	ff 1f       	adc	r31, r31
    56ca:	df 01       	movw	r26, r30
    56cc:	ae 5d       	subi	r26, 0xDE	; 222
    56ce:	b8 4f       	sbci	r27, 0xF8	; 248
    56d0:	6c 93       	st	X, r22
tx_ctr[0]=counter[0];
    56d2:	ec 5d       	subi	r30, 0xDC	; 220
    56d4:	f8 4f       	sbci	r31, 0xF8	; 248
    56d6:	91 83       	std	Z+1, r25	; 0x01
    56d8:	80 83       	st	Z, r24
tx_ctr[1]=counter[1];
    56da:	2f 5f       	subi	r18, 0xFF	; 255
    56dc:	20 93 21 07 	sts	0x0721, r18
    56e0:	81 e0       	ldi	r24, 0x01	; 1
    56e2:	90 e0       	ldi	r25, 0x00	; 0
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


    56e4:	08 95       	ret

000056e6 <nrk_open>:
void rf_security_set_key(uint8_t *key)
{
uint8_t n,i;
uint16_t key_buf;
    56e6:	0f 93       	push	r16
    56e8:	1f 93       	push	r17
    56ea:	cf 93       	push	r28
    56ec:	df 93       	push	r29
    56ee:	06 2f       	mov	r16, r22

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    56f0:	90 91 21 07 	lds	r25, 0x0721
    56f4:	a9 2f       	mov	r26, r25
    56f6:	bb 27       	eor	r27, r27
    56f8:	a7 fd       	sbrc	r26, 7
    56fa:	b0 95       	com	r27
    56fc:	40 e0       	ldi	r20, 0x00	; 0
    56fe:	50 e0       	ldi	r21, 0x00	; 0
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    5700:	68 2f       	mov	r22, r24
    5702:	77 27       	eor	r23, r23
    5704:	34 c0       	rjmp	.+104    	; 0x576e <nrk_open+0x88>
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    5706:	4f 5f       	subi	r20, 0xFF	; 255
    5708:	5f 4f       	sbci	r21, 0xFF	; 255
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    570a:	e9 01       	movw	r28, r18
    570c:	cc 0f       	add	r28, r28
    570e:	dd 1f       	adc	r29, r29
    5710:	cc 0f       	add	r28, r28
    5712:	dd 1f       	adc	r29, r29
    5714:	fe 01       	movw	r30, r28
    5716:	ee 5d       	subi	r30, 0xDE	; 222
    5718:	f8 4f       	sbci	r31, 0xF8	; 248
    571a:	80 81       	ld	r24, Z
    571c:	99 27       	eor	r25, r25
    571e:	87 fd       	sbrc	r24, 7
    5720:	90 95       	com	r25
    5722:	86 17       	cp	r24, r22
    5724:	97 07       	cpc	r25, r23
    5726:	19 f5       	brne	.+70     	; 0x576e <nrk_open+0x88>
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    5728:	f9 01       	movw	r30, r18
    572a:	ea 5d       	subi	r30, 0xDA	; 218
    572c:	f8 4f       	sbci	r31, 0xF8	; 248
    572e:	80 81       	ld	r24, Z
    5730:	88 23       	and	r24, r24
    5732:	71 f4       	brne	.+28     	; 0x5750 <nrk_open+0x6a>
	}

// Set AES nonce to all zeros
    5734:	81 e0       	ldi	r24, 0x01	; 1
    5736:	80 83       	st	Z, r24
nrk_spin_wait_us(100); 
    5738:	fe 01       	movw	r30, r28
    573a:	ec 5d       	subi	r30, 0xDC	; 220
    573c:	f8 4f       	sbci	r31, 0xF8	; 248
    573e:	01 90       	ld	r0, Z+
    5740:	f0 81       	ld	r31, Z
    5742:	e0 2d       	mov	r30, r0
    5744:	20 e0       	ldi	r18, 0x00	; 0
    5746:	40 e0       	ldi	r20, 0x00	; 0
    5748:	50 e0       	ldi	r21, 0x00	; 0
    574a:	60 2f       	mov	r22, r16
    574c:	80 e0       	ldi	r24, 0x00	; 0
    574e:	09 95       	icall
for(i=0; i<7; i++ )
	{
    5750:	cc 5d       	subi	r28, 0xDC	; 220
    5752:	d8 4f       	sbci	r29, 0xF8	; 248
    5754:	e8 81       	ld	r30, Y
    5756:	f9 81       	ldd	r31, Y+1	; 0x01
    5758:	20 e0       	ldi	r18, 0x00	; 0
    575a:	40 e0       	ldi	r20, 0x00	; 0
    575c:	50 e0       	ldi	r21, 0x00	; 0
    575e:	60 2f       	mov	r22, r16
    5760:	81 e0       	ldi	r24, 0x01	; 1
    5762:	09 95       	icall
    	key_buf=0; 
    5764:	81 2f       	mov	r24, r17
    5766:	99 27       	eor	r25, r25
    5768:	87 fd       	sbrc	r24, 7
    576a:	90 95       	com	r25
    576c:	08 c0       	rjmp	.+16     	; 0x577e <nrk_open+0x98>
    576e:	14 2f       	mov	r17, r20
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    5770:	24 2f       	mov	r18, r20
    5772:	33 27       	eor	r19, r19
    5774:	2a 17       	cp	r18, r26
    5776:	3b 07       	cpc	r19, r27
    5778:	34 f2       	brlt	.-116    	; 0x5706 <nrk_open+0x20>
    577a:	8f ef       	ldi	r24, 0xFF	; 255
    577c:	9f ef       	ldi	r25, 0xFF	; 255
    577e:	df 91       	pop	r29
    5780:	cf 91       	pop	r28
    5782:	1f 91       	pop	r17
    5784:	0f 91       	pop	r16
    5786:	08 95       	ret

00005788 <nrk_get_status>:
#endif
}


void rf_addr_decode_enable()
{
    5788:	e8 2f       	mov	r30, r24
    578a:	ff 27       	eor	r31, r31
    578c:	80 91 21 07 	lds	r24, 0x0721
    5790:	99 27       	eor	r25, r25
    5792:	87 fd       	sbrc	r24, 7
    5794:	90 95       	com	r25
    5796:	8e 17       	cp	r24, r30
    5798:	9f 07       	cpc	r25, r31
    579a:	34 f4       	brge	.+12     	; 0x57a8 <nrk_get_status+0x20>
    mdmctrl0 |= 0x0800;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    579c:	81 e0       	ldi	r24, 0x01	; 1
    579e:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_nrk_errno_set>
    57a2:	8f ef       	ldi	r24, 0xFF	; 255
    57a4:	9f ef       	ldi	r25, 0xFF	; 255
    57a6:	08 95       	ret
}

void rf_addr_decode_disable()
{
    57a8:	ee 0f       	add	r30, r30
    57aa:	ff 1f       	adc	r31, r31
    57ac:	ee 0f       	add	r30, r30
    57ae:	ff 1f       	adc	r31, r31
    57b0:	ec 5d       	subi	r30, 0xDC	; 220
    57b2:	f8 4f       	sbci	r31, 0xF8	; 248
    57b4:	01 90       	ld	r0, Z+
    57b6:	f0 81       	ld	r31, Z
    57b8:	e0 2d       	mov	r30, r0
    57ba:	20 e0       	ldi	r18, 0x00	; 0
    57bc:	40 e0       	ldi	r20, 0x00	; 0
    57be:	50 e0       	ldi	r21, 0x00	; 0
    57c0:	83 e0       	ldi	r24, 0x03	; 3
    57c2:	09 95       	icall
    57c4:	99 27       	eor	r25, r25
    57c6:	87 fd       	sbrc	r24, 7
    57c8:	90 95       	com	r25
    mdmctrl0 &= (~0x0800);
    57ca:	08 95       	ret

000057cc <nrk_set_status>:
    nrk_sem_post(radio_sem);
#endif
}
void rf_set_channel( uint8_t channel )
{
#ifdef RADIO_PRIORITY_CEILING
    57cc:	24 2f       	mov	r18, r20
    nrk_sem_pend (radio_sem);
    57ce:	e8 2f       	mov	r30, r24
    57d0:	ff 27       	eor	r31, r31
    57d2:	80 91 21 07 	lds	r24, 0x0721
    57d6:	99 27       	eor	r25, r25
    57d8:	87 fd       	sbrc	r24, 7
    57da:	90 95       	com	r25
    57dc:	8e 17       	cp	r24, r30
    57de:	9f 07       	cpc	r25, r31
    57e0:	34 f4       	brge	.+12     	; 0x57ee <nrk_set_status+0x22>
#endif
    halRfSetChannel(channel);
    57e2:	81 e0       	ldi	r24, 0x01	; 1
    57e4:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_nrk_errno_set>
    57e8:	8f ef       	ldi	r24, 0xFF	; 255
    57ea:	9f ef       	ldi	r25, 0xFF	; 255
    57ec:	08 95       	ret
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
    57ee:	ee 0f       	add	r30, r30
    57f0:	ff 1f       	adc	r31, r31
    57f2:	ee 0f       	add	r30, r30
    57f4:	ff 1f       	adc	r31, r31
    57f6:	ec 5d       	subi	r30, 0xDC	; 220
    57f8:	f8 4f       	sbci	r31, 0xF8	; 248
    57fa:	01 90       	ld	r0, Z+
    57fc:	f0 81       	ld	r31, Z
    57fe:	e0 2d       	mov	r30, r0
    5800:	40 e0       	ldi	r20, 0x00	; 0
    5802:	50 e0       	ldi	r21, 0x00	; 0
    5804:	84 e0       	ldi	r24, 0x04	; 4
    5806:	09 95       	icall
    5808:	99 27       	eor	r25, r25
    580a:	87 fd       	sbrc	r24, 7
    580c:	90 95       	com	r25
}
    580e:	08 95       	ret

00005810 <nrk_read>:

void rf_tx_power(uint8_t pwr)
{
uint16_t tmp;
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    5810:	24 2f       	mov	r18, r20
    nrk_sem_pend (radio_sem);
    5812:	e8 2f       	mov	r30, r24
    5814:	ff 27       	eor	r31, r31
    5816:	80 91 21 07 	lds	r24, 0x0721
    581a:	99 27       	eor	r25, r25
    581c:	87 fd       	sbrc	r24, 7
    581e:	90 95       	com	r25
    5820:	8e 17       	cp	r24, r30
    5822:	9f 07       	cpc	r25, r31
    5824:	34 f4       	brge	.+12     	; 0x5832 <nrk_read+0x22>
#endif
    tmp=0xA0E0;
    5826:	81 e0       	ldi	r24, 0x01	; 1
    5828:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_nrk_errno_set>
    582c:	8f ef       	ldi	r24, 0xFF	; 255
    582e:	9f ef       	ldi	r25, 0xFF	; 255
    5830:	08 95       	ret
    tmp=tmp | (pwr&0x1F);  
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    5832:	ee 0f       	add	r30, r30
    5834:	ff 1f       	adc	r31, r31
    5836:	ee 0f       	add	r30, r30
    5838:	ff 1f       	adc	r31, r31
    583a:	ec 5d       	subi	r30, 0xDC	; 220
    583c:	f8 4f       	sbci	r31, 0xF8	; 248
    583e:	01 90       	ld	r0, Z+
    5840:	f0 81       	ld	r31, Z
    5842:	e0 2d       	mov	r30, r0
    5844:	ab 01       	movw	r20, r22
    5846:	60 e0       	ldi	r22, 0x00	; 0
    5848:	85 e0       	ldi	r24, 0x05	; 5
    584a:	09 95       	icall
    584c:	99 27       	eor	r25, r25
    584e:	87 fd       	sbrc	r24, 7
    5850:	90 95       	com	r25
#endif
}
    5852:	08 95       	ret

00005854 <nrk_write>:
  security_enable=0;
}

//-------------------------------------------------------------------------------------------------------
// The RF settings structure is declared here, since we'll always need halRfInit()
volatile RF_SETTINGS rfSettings;
    5854:	24 2f       	mov	r18, r20
volatile uint8_t rx_ready;
    5856:	e8 2f       	mov	r30, r24
    5858:	ff 27       	eor	r31, r31
    585a:	80 91 21 07 	lds	r24, 0x0721
    585e:	99 27       	eor	r25, r25
    5860:	87 fd       	sbrc	r24, 7
    5862:	90 95       	com	r25
    5864:	8e 17       	cp	r24, r30
    5866:	9f 07       	cpc	r25, r31
    5868:	34 f4       	brge	.+12     	; 0x5876 <nrk_write+0x22>
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
    586a:	81 e0       	ldi	r24, 0x01	; 1
    586c:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_nrk_errno_set>
    5870:	8f ef       	ldi	r24, 0xFF	; 255
    5872:	9f ef       	ldi	r25, 0xFF	; 255
    5874:	08 95       	ret
{
return radio_sem;
}

    5876:	ee 0f       	add	r30, r30
    5878:	ff 1f       	adc	r31, r31
    587a:	ee 0f       	add	r30, r30
    587c:	ff 1f       	adc	r31, r31
    587e:	ec 5d       	subi	r30, 0xDC	; 220
    5880:	f8 4f       	sbci	r31, 0xF8	; 248
    5882:	01 90       	ld	r0, Z+
    5884:	f0 81       	ld	r31, Z
    5886:	e0 2d       	mov	r30, r0
    5888:	ab 01       	movw	r20, r22
    588a:	60 e0       	ldi	r22, 0x00	; 0
    588c:	86 e0       	ldi	r24, 0x06	; 6
    588e:	09 95       	icall
    5890:	99 27       	eor	r25, r25
    5892:	87 fd       	sbrc	r24, 7
    5894:	90 95       	com	r25
void rf_tx_power(uint8_t pwr)
{
    5896:	08 95       	ret

00005898 <nrk_close>:
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

void rf_security_enable(uint8_t *key)
{
    5898:	e8 2f       	mov	r30, r24
    589a:	ff 27       	eor	r31, r31
    589c:	80 91 21 07 	lds	r24, 0x0721
    58a0:	99 27       	eor	r25, r25
    58a2:	87 fd       	sbrc	r24, 7
    58a4:	90 95       	com	r25
    58a6:	8e 17       	cp	r24, r30
    58a8:	9f 07       	cpc	r25, r31
    58aa:	34 f4       	brge	.+12     	; 0x58b8 <nrk_close+0x20>
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
    58ac:	81 e0       	ldi	r24, 0x01	; 1
    58ae:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_nrk_errno_set>
    58b2:	8f ef       	ldi	r24, 0xFF	; 255
    58b4:	9f ef       	ldi	r25, 0xFF	; 255
    58b6:	08 95       	ret

security_enable=1;
}

    58b8:	ee 0f       	add	r30, r30
    58ba:	ff 1f       	adc	r31, r31
    58bc:	ee 0f       	add	r30, r30
    58be:	ff 1f       	adc	r31, r31
    58c0:	ec 5d       	subi	r30, 0xDC	; 220
    58c2:	f8 4f       	sbci	r31, 0xF8	; 248
    58c4:	01 90       	ld	r0, Z+
    58c6:	f0 81       	ld	r31, Z
    58c8:	e0 2d       	mov	r30, r0
    58ca:	20 e0       	ldi	r18, 0x00	; 0
    58cc:	40 e0       	ldi	r20, 0x00	; 0
    58ce:	50 e0       	ldi	r21, 0x00	; 0
    58d0:	60 e0       	ldi	r22, 0x00	; 0
    58d2:	82 e0       	ldi	r24, 0x02	; 2
    58d4:	09 95       	icall


void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
  security_enable=0;
    58d6:	99 27       	eor	r25, r25
    58d8:	87 fd       	sbrc	r24, 7
    58da:	90 95       	com	r25
}
    58dc:	08 95       	ret

000058de <nrk_spin_wait_us>:
	...


//#ifndef RADIO_PRIORITY_CEILING
//  #define RADIO_PRIORITY_CEILING	20
//#endif

    58e6:	01 97       	sbiw	r24, 0x01	; 1
    58e8:	d1 f7       	brne	.-12     	; 0x58de <nrk_spin_wait_us>
    58ea:	08 95       	ret

000058ec <_nrk_high_speed_timer_stop>:

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    58ec:	10 92 81 00 	sts	0x0081, r1
    58f0:	08 95       	ret

000058f2 <_nrk_high_speed_timer_start>:
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
    58f2:	81 e0       	ldi	r24, 0x01	; 1
    58f4:	80 93 81 00 	sts	0x0081, r24
    58f8:	08 95       	ret

000058fa <_nrk_high_speed_timer_reset>:
	{
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    58fa:	83 b5       	in	r24, 0x23	; 35
    58fc:	81 60       	ori	r24, 0x01	; 1
    58fe:	83 bd       	out	0x23, r24	; 35
    	key_buf=1; 
    5900:	10 92 85 00 	sts	0x0085, r1
    5904:	10 92 84 00 	sts	0x0084, r1
    5908:	08 95       	ret

0000590a <_nrk_high_speed_timer_get>:
// The RF settings structure is declared here, since we'll always need halRfInit()
volatile RF_SETTINGS rfSettings;
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
    590a:	cf 93       	push	r28
    590c:	df 93       	push	r29
    590e:	cd b7       	in	r28, 0x3d	; 61
    5910:	de b7       	in	r29, 0x3e	; 62
    5912:	22 97       	sbiw	r28, 0x02	; 2
    5914:	0f b6       	in	r0, 0x3f	; 63
    5916:	f8 94       	cli
    5918:	de bf       	out	0x3e, r29	; 62
    591a:	0f be       	out	0x3f, r0	; 63
    591c:	cd bf       	out	0x3d, r28	; 61
return radio_sem;
}

    591e:	80 91 84 00 	lds	r24, 0x0084
    5922:	90 91 85 00 	lds	r25, 0x0085
    5926:	9a 83       	std	Y+2, r25	; 0x02
    5928:	89 83       	std	Y+1, r24	; 0x01
void rf_tx_power(uint8_t pwr)
{
    592a:	89 81       	ldd	r24, Y+1	; 0x01
    592c:	9a 81       	ldd	r25, Y+2	; 0x02
    592e:	22 96       	adiw	r28, 0x02	; 2
    5930:	0f b6       	in	r0, 0x3f	; 63
    5932:	f8 94       	cli
    5934:	de bf       	out	0x3e, r29	; 62
    5936:	0f be       	out	0x3f, r0	; 63
    5938:	cd bf       	out	0x3d, r28	; 61
    593a:	df 91       	pop	r29
    593c:	cf 91       	pop	r28
    593e:	08 95       	ret

00005940 <_nrk_os_timer_stop>:
uint16_t tmp;
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    5940:	10 92 b1 00 	sts	0x00B1, r1
    tmp=0xA0E0;
    5944:	e0 e7       	ldi	r30, 0x70	; 112
    5946:	f0 e0       	ldi	r31, 0x00	; 0
    5948:	80 81       	ld	r24, Z
    594a:	8d 7f       	andi	r24, 0xFD	; 253
    594c:	80 83       	st	Z, r24
    tmp=tmp | (pwr&0x1F);  
    594e:	80 81       	ld	r24, Z
    5950:	8e 7f       	andi	r24, 0xFE	; 254
    5952:	80 83       	st	Z, r24
    5954:	08 95       	ret

00005956 <_nrk_os_timer_set>:
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
    5956:	80 93 b2 00 	sts	0x00B2, r24
    595a:	08 95       	ret

0000595c <_nrk_os_timer_start>:
{
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    halRfSetChannel(channel);
#ifdef RADIO_PRIORITY_CEILING
    595c:	e0 e7       	ldi	r30, 0x70	; 112
    595e:	f0 e0       	ldi	r31, 0x00	; 0
    5960:	80 81       	ld	r24, Z
    5962:	83 60       	ori	r24, 0x03	; 3
    5964:	80 83       	st	Z, r24
    nrk_sem_post(radio_sem);
    5966:	83 e0       	ldi	r24, 0x03	; 3
    5968:	80 93 b1 00 	sts	0x00B1, r24
    596c:	08 95       	ret

0000596e <_nrk_os_timer_reset>:
#endif
}


void rf_addr_decode_enable()
{
    596e:	83 b5       	in	r24, 0x23	; 35
    5970:	82 60       	ori	r24, 0x02	; 2
    5972:	83 bd       	out	0x23, r24	; 35
    mdmctrl0 |= 0x0800;
    5974:	10 92 b2 00 	sts	0x00B2, r1
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    5978:	10 92 3d 06 	sts	0x063D, r1
}
    597c:	10 92 59 06 	sts	0x0659, r1
    5980:	08 95       	ret

00005982 <_nrk_get_next_wakeup>:

void rf_addr_decode_disable()
{
    mdmctrl0 &= (~0x0800);
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}
    5982:	80 91 b3 00 	lds	r24, 0x00B3
    5986:	8f 5f       	subi	r24, 0xFF	; 255

    5988:	99 27       	eor	r25, r25
    598a:	08 95       	ret

0000598c <_nrk_set_next_wakeup>:

void rf_auto_ack_enable()
{
    auto_ack_enable=1;
    598c:	81 50       	subi	r24, 0x01	; 1
    598e:	80 93 b3 00 	sts	0x00B3, r24
    5992:	08 95       	ret

00005994 <nrk_timer_int_stop>:
    mdmctrl0 |= 0x0010;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
}

void rf_auto_ack_disable()
{
    5994:	88 23       	and	r24, r24
    5996:	11 f4       	brne	.+4      	; 0x599c <nrk_timer_int_stop+0x8>
    auto_ack_enable=0;
    mdmctrl0 &= (~0x0010);
    5998:	10 92 71 00 	sts	0x0071, r1
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}

    599c:	8f ef       	ldi	r24, 0xFF	; 255
    599e:	9f ef       	ldi	r25, 0xFF	; 255
    59a0:	08 95       	ret

000059a2 <nrk_timer_int_reset>:

void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
uint8_t n;
    59a2:	88 23       	and	r24, r24
    59a4:	19 f0       	breq	.+6      	; 0x59ac <nrk_timer_int_reset+0xa>
    59a6:	8f ef       	ldi	r24, 0xFF	; 255
    59a8:	9f ef       	ldi	r25, 0xFF	; 255
    59aa:	08 95       	ret
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    59ac:	10 92 95 00 	sts	0x0095, r1
    59b0:	10 92 94 00 	sts	0x0094, r1
    59b4:	81 e0       	ldi	r24, 0x01	; 1
    59b6:	90 e0       	ldi	r25, 0x00	; 0
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    nrk_spin_wait_us(500);
}

    59b8:	08 95       	ret

000059ba <nrk_timer_int_read>:


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
    59ba:	88 23       	and	r24, r24
    59bc:	19 f0       	breq	.+6      	; 0x59c4 <nrk_timer_int_read+0xa>
    59be:	80 e0       	ldi	r24, 0x00	; 0
    59c0:	90 e0       	ldi	r25, 0x00	; 0
    59c2:	08 95       	ret

#ifdef RADIO_PRIORITY_CEILING
    59c4:	80 91 94 00 	lds	r24, 0x0094
    59c8:	90 91 95 00 	lds	r25, 0x0095
    nrk_sem_pend (radio_sem);
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    59cc:	08 95       	ret

000059ce <nrk_timer_int_start>:
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    halRfSetChannel(channel);
    rfSettings.pRxInfo = pRRI;

    59ce:	88 23       	and	r24, r24
    59d0:	19 f0       	breq	.+6      	; 0x59d8 <nrk_timer_int_start+0xa>
    59d2:	8f ef       	ldi	r24, 0xFF	; 255
    59d4:	9f ef       	ldi	r25, 0xFF	; 255
    59d6:	08 95       	ret
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    59d8:	82 e0       	ldi	r24, 0x02	; 2
    59da:	80 93 71 00 	sts	0x0071, r24
    59de:	81 e0       	ldi	r24, 0x01	; 1
    59e0:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
//-------------------------------------------------------------------------------------------------------
//  void rf_init(RF_RX_INFO *pRRI, uint8_t channel, WORD panId, WORD myAddr)
    59e2:	08 95       	ret

000059e4 <nrk_timer_int_configure>:
//
//  DESCRIPTION:
//      Initializes CC2420 for radio communication via the basic RF library functions. Turns on the
//		voltage regulator, resets the CC2420, turns on the crystal oscillator, writes all necessary
    59e4:	88 23       	and	r24, r24
    59e6:	19 f0       	breq	.+6      	; 0x59ee <nrk_timer_int_configure+0xa>
    59e8:	8f ef       	ldi	r24, 0xFF	; 255
    59ea:	9f ef       	ldi	r25, 0xFF	; 255
    59ec:	08 95       	ret
//		registers and protocol addresses (for automatic address recognition). Note that the crystal
//		oscillator will remain on (forever).
    59ee:	cb 01       	movw	r24, r22
    59f0:	01 97       	sbiw	r24, 0x01	; 1
    59f2:	05 97       	sbiw	r24, 0x05	; 5
    59f4:	10 f4       	brcc	.+4      	; 0x59fa <nrk_timer_int_configure+0x16>
    59f6:	60 93 57 06 	sts	0x0657, r22
//
    59fa:	10 92 90 00 	sts	0x0090, r1
//  ARGUMENTS:
    59fe:	88 e0       	ldi	r24, 0x08	; 8
    5a00:	80 93 91 00 	sts	0x0091, r24
//      RF_RX_INFO *pRRI
    5a04:	85 2f       	mov	r24, r21
    5a06:	99 27       	eor	r25, r25
    5a08:	80 93 99 00 	sts	0x0099, r24
//          A pointer the RF_RX_INFO data structure to be used during the first packet reception.
    5a0c:	40 93 98 00 	sts	0x0098, r20
//			The structure can be switched upon packet reception.
    5a10:	30 93 2e 06 	sts	0x062E, r19
    5a14:	20 93 2d 06 	sts	0x062D, r18
//      uint8_t channel
    5a18:	80 91 57 06 	lds	r24, 0x0657
    5a1c:	81 30       	cpi	r24, 0x01	; 1
    5a1e:	21 f4       	brne	.+8      	; 0x5a28 <nrk_timer_int_configure+0x44>
    5a20:	80 91 91 00 	lds	r24, 0x0091
    5a24:	81 60       	ori	r24, 0x01	; 1
    5a26:	0b c0       	rjmp	.+22     	; 0x5a3e <nrk_timer_int_configure+0x5a>
//          The RF channel to be used (11 = 2405 MHz to 26 = 2480 MHz)
//      WORD panId
    5a28:	82 30       	cpi	r24, 0x02	; 2
    5a2a:	21 f4       	brne	.+8      	; 0x5a34 <nrk_timer_int_configure+0x50>
    5a2c:	80 91 91 00 	lds	r24, 0x0091
    5a30:	82 60       	ori	r24, 0x02	; 2
    5a32:	05 c0       	rjmp	.+10     	; 0x5a3e <nrk_timer_int_configure+0x5a>
//          The personal area network identification number
//      WORD myAddr
    5a34:	83 30       	cpi	r24, 0x03	; 3
    5a36:	31 f4       	brne	.+12     	; 0x5a44 <nrk_timer_int_configure+0x60>
    5a38:	80 91 91 00 	lds	r24, 0x0091
    5a3c:	83 60       	ori	r24, 0x03	; 3
    5a3e:	80 93 91 00 	sts	0x0091, r24
    5a42:	08 c0       	rjmp	.+16     	; 0x5a54 <nrk_timer_int_configure+0x70>
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
    5a44:	84 30       	cpi	r24, 0x04	; 4
    5a46:	21 f4       	brne	.+8      	; 0x5a50 <nrk_timer_int_configure+0x6c>
    5a48:	80 91 91 00 	lds	r24, 0x0091
    5a4c:	84 60       	ori	r24, 0x04	; 4
    5a4e:	f7 cf       	rjmp	.-18     	; 0x5a3e <nrk_timer_int_configure+0x5a>
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
    5a50:	85 30       	cpi	r24, 0x05	; 5
    5a52:	19 f0       	breq	.+6      	; 0x5a5a <nrk_timer_int_configure+0x76>
    5a54:	81 e0       	ldi	r24, 0x01	; 1
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	08 95       	ret
    5a5a:	80 91 91 00 	lds	r24, 0x0091
    5a5e:	85 60       	ori	r24, 0x05	; 5
    5a60:	80 93 91 00 	sts	0x0091, r24
    5a64:	81 e0       	ldi	r24, 0x01	; 1
    5a66:	90 e0       	ldi	r25, 0x00	; 0
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    uint8_t n;

#ifdef RADIO_PRIORITY_CEILING
   int8_t v;
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    5a68:	08 95       	ret

00005a6a <_nrk_os_timer_get>:
    if (radio_sem == NULL)
      nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());

  v = nrk_sem_pend (radio_sem);
  if (v == NRK_ERROR) {
    5a6a:	80 91 b2 00 	lds	r24, 0x00B2
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
    5a6e:	99 27       	eor	r25, r25
    5a70:	08 95       	ret

00005a72 <__vector_13>:

    // Register modifications
    FASTSPI_STROBE(CC2420_SXOSCON);
    mdmctrl0=0x02E2;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
    5a72:	0f 92       	push	r0
    5a74:	0f b6       	in	r0, 0x3f	; 63
    5a76:	0f 92       	push	r0
    5a78:	1f 92       	push	r1
    5a7a:	2f 92       	push	r2
    5a7c:	3f 92       	push	r3
    5a7e:	4f 92       	push	r4
    5a80:	5f 92       	push	r5
    5a82:	6f 92       	push	r6
    5a84:	7f 92       	push	r7
    5a86:	8f 92       	push	r8
    5a88:	9f 92       	push	r9
    5a8a:	af 92       	push	r10
    5a8c:	bf 92       	push	r11
    5a8e:	cf 92       	push	r12
    5a90:	df 92       	push	r13
    5a92:	ef 92       	push	r14
    5a94:	ff 92       	push	r15
    5a96:	0f 93       	push	r16
    5a98:	1f 93       	push	r17
    5a9a:	2f 93       	push	r18
    5a9c:	3f 93       	push	r19
    5a9e:	4f 93       	push	r20
    5aa0:	5f 93       	push	r21
    5aa2:	6f 93       	push	r22
    5aa4:	7f 93       	push	r23
    5aa6:	8f 93       	push	r24
    5aa8:	9f 93       	push	r25
    5aaa:	af 93       	push	r26
    5aac:	bf 93       	push	r27
    5aae:	cf 93       	push	r28
    5ab0:	df 93       	push	r29
    5ab2:	ef 93       	push	r30
    5ab4:	ff 93       	push	r31
    5ab6:	a0 91 0a 07 	lds	r26, 0x070A
    5aba:	b0 91 0b 07 	lds	r27, 0x070B
    5abe:	0d b6       	in	r0, 0x3d	; 61
    5ac0:	0d 92       	st	X+, r0
    5ac2:	0e b6       	in	r0, 0x3e	; 62
    5ac4:	0d 92       	st	X+, r0
    5ac6:	1f 92       	push	r1
    5ac8:	a0 91 9d 04 	lds	r26, 0x049D
    5acc:	b0 91 9e 04 	lds	r27, 0x049E
    5ad0:	1e 90       	ld	r1, -X
    5ad2:	be bf       	out	0x3e, r27	; 62
    5ad4:	ad bf       	out	0x3d, r26	; 61
    5ad6:	08 95       	ret

00005ad8 <__vector_17>:
#endif

auto_ack_enable=0;
security_enable=0;
last_pkt_encrypted=0;
} // rf_init() 
    5ad8:	1f 92       	push	r1
    5ada:	0f 92       	push	r0
    5adc:	0f b6       	in	r0, 0x3f	; 63
    5ade:	0f 92       	push	r0
    5ae0:	11 24       	eor	r1, r1
    5ae2:	0f 90       	pop	r0
    5ae4:	0f be       	out	0x3f, r0	; 63
    5ae6:	0f 90       	pop	r0
    5ae8:	1f 90       	pop	r1
    5aea:	18 95       	reti

00005aec <__vector_32>:
   //	DISABLE_GLOBAL_INT();
//    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
//    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
  //	ENABLE_GLOBAL_INT();

#ifdef RADIO_PRIORITY_CEILING
    5aec:	1f 92       	push	r1
    5aee:	0f 92       	push	r0
    5af0:	0f b6       	in	r0, 0x3f	; 63
    5af2:	0f 92       	push	r0
    5af4:	11 24       	eor	r1, r1
    5af6:	2f 93       	push	r18
    5af8:	3f 93       	push	r19
    5afa:	4f 93       	push	r20
    5afc:	5f 93       	push	r21
    5afe:	6f 93       	push	r22
    5b00:	7f 93       	push	r23
    5b02:	8f 93       	push	r24
    5b04:	9f 93       	push	r25
    5b06:	af 93       	push	r26
    5b08:	bf 93       	push	r27
    5b0a:	ef 93       	push	r30
    5b0c:	ff 93       	push	r31
  v = nrk_sem_post (radio_sem);
    5b0e:	e0 91 2d 06 	lds	r30, 0x062D
    5b12:	f0 91 2e 06 	lds	r31, 0x062E
    5b16:	30 97       	sbiw	r30, 0x00	; 0
    5b18:	11 f0       	breq	.+4      	; 0x5b1e <__vector_32+0x32>
    5b1a:	09 95       	icall
    5b1c:	04 c0       	rjmp	.+8      	; 0x5b26 <__vector_32+0x3a>
  if (v == NRK_ERROR) {
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    5b1e:	60 e0       	ldi	r22, 0x00	; 0
    5b20:	8a e0       	ldi	r24, 0x0A	; 10
    5b22:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <nrk_kernel_error_add>
    5b26:	ff 91       	pop	r31
    5b28:	ef 91       	pop	r30
    5b2a:	bf 91       	pop	r27
    5b2c:	af 91       	pop	r26
    5b2e:	9f 91       	pop	r25
    5b30:	8f 91       	pop	r24
    5b32:	7f 91       	pop	r23
    5b34:	6f 91       	pop	r22
    5b36:	5f 91       	pop	r21
    5b38:	4f 91       	pop	r20
    5b3a:	3f 91       	pop	r19
    5b3c:	2f 91       	pop	r18
    5b3e:	0f 90       	pop	r0
    5b40:	0f be       	out	0x3f, r0	; 63
    5b42:	0f 90       	pop	r0
    5b44:	1f 90       	pop	r1
    5b46:	18 95       	reti

00005b48 <__vector_default>:
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
  }
#endif

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    SET_VREG_ACTIVE();
    5b48:	1f 92       	push	r1
    5b4a:	0f 92       	push	r0
    5b4c:	0f b6       	in	r0, 0x3f	; 63
    5b4e:	0f 92       	push	r0
    5b50:	11 24       	eor	r1, r1
    5b52:	2f 93       	push	r18
    5b54:	3f 93       	push	r19
    5b56:	4f 93       	push	r20
    5b58:	5f 93       	push	r21
    5b5a:	6f 93       	push	r22
    5b5c:	7f 93       	push	r23
    5b5e:	8f 93       	push	r24
    5b60:	9f 93       	push	r25
    5b62:	af 93       	push	r26
    5b64:	bf 93       	push	r27
    5b66:	ef 93       	push	r30
    5b68:	ff 93       	push	r31
    halWait(1000);
    5b6a:	60 e0       	ldi	r22, 0x00	; 0
    5b6c:	8a e0       	ldi	r24, 0x0A	; 10
    5b6e:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <nrk_kernel_error_add>
    5b72:	ff cf       	rjmp	.-2      	; 0x5b72 <__vector_default+0x2a>

00005b74 <nrk_high_speed_timer_wait>:
void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header

security_enable=1;
    5b74:	cf 93       	push	r28
    5b76:	df 93       	push	r29
    5b78:	cd b7       	in	r28, 0x3d	; 61
    5b7a:	de b7       	in	r29, 0x3e	; 62
    5b7c:	22 97       	sbiw	r28, 0x02	; 2
    5b7e:	0f b6       	in	r0, 0x3f	; 63
    5b80:	f8 94       	cli
    5b82:	de bf       	out	0x3e, r29	; 62
    5b84:	0f be       	out	0x3f, r0	; 63
    5b86:	cd bf       	out	0x3d, r28	; 61
    5b88:	fc 01       	movw	r30, r24
}

    5b8a:	8f ef       	ldi	r24, 0xFF	; 255
    5b8c:	e9 37       	cpi	r30, 0x79	; 121
    5b8e:	f8 07       	cpc	r31, r24
    5b90:	10 f0       	brcs	.+4      	; 0x5b96 <nrk_high_speed_timer_wait+0x22>
    5b92:	e0 e0       	ldi	r30, 0x00	; 0
    5b94:	f0 e0       	ldi	r31, 0x00	; 0

    5b96:	9f 01       	movw	r18, r30
    5b98:	44 27       	eor	r20, r20
    5b9a:	55 27       	eor	r21, r21
    5b9c:	cb 01       	movw	r24, r22
    5b9e:	aa 27       	eor	r26, r26
    5ba0:	bb 27       	eor	r27, r27
    5ba2:	28 0f       	add	r18, r24
    5ba4:	39 1f       	adc	r19, r25
    5ba6:	4a 1f       	adc	r20, r26
    5ba8:	5b 1f       	adc	r21, r27

void rf_security_disable()
    5baa:	21 30       	cpi	r18, 0x01	; 1
    5bac:	80 e0       	ldi	r24, 0x00	; 0
    5bae:	38 07       	cpc	r19, r24
    5bb0:	81 e0       	ldi	r24, 0x01	; 1
    5bb2:	48 07       	cpc	r20, r24
    5bb4:	80 e0       	ldi	r24, 0x00	; 0
    5bb6:	58 07       	cpc	r21, r24
    5bb8:	78 f0       	brcs	.+30     	; 0x5bd8 <nrk_high_speed_timer_wait+0x64>
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}

    5bba:	80 91 84 00 	lds	r24, 0x0084
    5bbe:	90 91 85 00 	lds	r25, 0x0085
    5bc2:	9a 83       	std	Y+2, r25	; 0x02
    5bc4:	89 83       	std	Y+1, r24	; 0x01
void rf_tx_power(uint8_t pwr)
{
    5bc6:	89 81       	ldd	r24, Y+1	; 0x01
    5bc8:	9a 81       	ldd	r25, Y+2	; 0x02

void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
  security_enable=0;
}
    5bca:	e8 17       	cp	r30, r24
    5bcc:	f9 07       	cpc	r31, r25
    5bce:	a8 f3       	brcs	.-22     	; 0x5bba <nrk_high_speed_timer_wait+0x46>


void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
  security_enable=0;
    5bd0:	20 50       	subi	r18, 0x00	; 0
    5bd2:	30 40       	sbci	r19, 0x00	; 0
    5bd4:	41 40       	sbci	r20, 0x01	; 1
    5bd6:	50 40       	sbci	r21, 0x00	; 0
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}

    5bd8:	80 91 84 00 	lds	r24, 0x0084
    5bdc:	90 91 85 00 	lds	r25, 0x0085
    5be0:	9a 83       	std	Y+2, r25	; 0x02
    5be2:	89 83       	std	Y+1, r24	; 0x01
void rf_tx_power(uint8_t pwr)
{
    5be4:	89 81       	ldd	r24, Y+1	; 0x01
    5be6:	9a 81       	ldd	r25, Y+2	; 0x02
  security_enable=0;
}

//-------------------------------------------------------------------------------------------------------
// The RF settings structure is declared here, since we'll always need halRfInit()
volatile RF_SETTINGS rfSettings;
    5be8:	82 17       	cp	r24, r18
    5bea:	93 07       	cpc	r25, r19
    5bec:	a8 f3       	brcs	.-22     	; 0x5bd8 <nrk_high_speed_timer_wait+0x64>
    5bee:	22 96       	adiw	r28, 0x02	; 2
    5bf0:	0f b6       	in	r0, 0x3f	; 63
    5bf2:	f8 94       	cli
    5bf4:	de bf       	out	0x3e, r29	; 62
    5bf6:	0f be       	out	0x3f, r0	; 63
    5bf8:	cd bf       	out	0x3d, r28	; 61
    5bfa:	df 91       	pop	r29
    5bfc:	cf 91       	pop	r28
    5bfe:	08 95       	ret

00005c00 <_nrk_setup_timer>:

nrk_sem_t *radio_sem;
uint8_t auto_ack_enable;
uint8_t security_enable;
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
    5c00:	ef 92       	push	r14
    5c02:	ff 92       	push	r15
    5c04:	1f 93       	push	r17
uint8_t tx_ctr[4];
    5c06:	9e ef       	ldi	r25, 0xFE	; 254
    5c08:	90 93 59 06 	sts	0x0659, r25
uint8_t rx_ctr[4];

// Returns 1 if the last packet was encrypted, 0 otherwise
    5c0c:	80 e2       	ldi	r24, 0x20	; 32
    5c0e:	80 93 b6 00 	sts	0x00B6, r24
uint8_t rf_security_last_pkt_status()
    5c12:	90 93 b3 00 	sts	0x00B3, r25
{
    5c16:	13 e0       	ldi	r17, 0x03	; 3
    5c18:	17 bb       	out	0x17, r17	; 23
return last_pkt_encrypted;
    5c1a:	82 e0       	ldi	r24, 0x02	; 2
    5c1c:	80 93 b0 00 	sts	0x00B0, r24
}
    5c20:	91 eb       	ldi	r25, 0xB1	; 177
    5c22:	e9 2e       	mov	r14, r25
    5c24:	f1 2c       	mov	r15, r1
    5c26:	f7 01       	movw	r30, r14
    5c28:	10 83       	st	Z, r17

    5c2a:	83 b5       	in	r24, 0x23	; 35
    5c2c:	82 60       	ori	r24, 0x02	; 2
    5c2e:	83 bd       	out	0x23, r24	; 35

void rf_security_set_ctr_counter(uint8_t *counter)
    5c30:	17 bb       	out	0x17, r17	; 23
{
uint8_t n;
    5c32:	14 bd       	out	0x24, r17	; 36
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
    5c34:	83 b5       	in	r24, 0x23	; 35
    5c36:	82 60       	ori	r24, 0x02	; 2
    5c38:	83 bd       	out	0x23, r24	; 35
tx_ctr[0]=counter[0];
tx_ctr[1]=counter[1];
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
    5c3a:	10 92 80 00 	sts	0x0080, r1
}
    5c3e:	81 e0       	ldi	r24, 0x01	; 1
    5c40:	80 93 81 00 	sts	0x0081, r24

    5c44:	10 92 85 00 	sts	0x0085, r1
    5c48:	10 92 84 00 	sts	0x0084, r1

    5c4c:	83 b5       	in	r24, 0x23	; 35
    5c4e:	82 60       	ori	r24, 0x02	; 2
    5c50:	83 bd       	out	0x23, r24	; 35
void rf_security_set_key(uint8_t *key)
    5c52:	83 b5       	in	r24, 0x23	; 35
    5c54:	81 60       	ori	r24, 0x01	; 1
    5c56:	83 bd       	out	0x23, r24	; 35
{
uint8_t n,i;
    5c58:	0e 94 b7 2c 	call	0x596e	; 0x596e <_nrk_os_timer_reset>
{
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    halRfSetChannel(channel);
#ifdef RADIO_PRIORITY_CEILING
    5c5c:	e0 e7       	ldi	r30, 0x70	; 112
    5c5e:	f0 e0       	ldi	r31, 0x00	; 0
    5c60:	80 81       	ld	r24, Z
    5c62:	83 60       	ori	r24, 0x03	; 3
    5c64:	80 83       	st	Z, r24
    nrk_sem_post(radio_sem);
    5c66:	f7 01       	movw	r30, r14
    5c68:	10 83       	st	Z, r17

void rf_security_set_key(uint8_t *key)
{
uint8_t n,i;
uint16_t key_buf;

    5c6a:	10 92 3d 06 	sts	0x063D, r1
    5c6e:	1f 91       	pop	r17
    5c70:	ff 90       	pop	r15
    5c72:	ef 90       	pop	r14
    5c74:	08 95       	ret

00005c76 <nrk_ext_int_enable>:
#include <ulib.h>
#include <nrk.h>
#include <nrk_events.h>
#include <nrk_error.h>
#include <nrk_timer.h>
#include <nrk_cpu.h>
    5c76:	88 23       	and	r24, r24
    5c78:	11 f4       	brne	.+4      	; 0x5c7e <nrk_ext_int_enable+0x8>
    5c7a:	e8 9a       	sbi	0x1d, 0	; 29
    5c7c:	33 c0       	rjmp	.+102    	; 0x5ce4 <nrk_ext_int_enable+0x6e>

    5c7e:	81 30       	cpi	r24, 0x01	; 1
    5c80:	11 f4       	brne	.+4      	; 0x5c86 <nrk_ext_int_enable+0x10>
    5c82:	e9 9a       	sbi	0x1d, 1	; 29
    5c84:	2f c0       	rjmp	.+94     	; 0x5ce4 <nrk_ext_int_enable+0x6e>

    5c86:	82 30       	cpi	r24, 0x02	; 2
    5c88:	11 f4       	brne	.+4      	; 0x5c8e <nrk_ext_int_enable+0x18>
    5c8a:	ea 9a       	sbi	0x1d, 2	; 29
    5c8c:	2b c0       	rjmp	.+86     	; 0x5ce4 <nrk_ext_int_enable+0x6e>
//#ifndef RADIO_PRIORITY_CEILING
    5c8e:	83 30       	cpi	r24, 0x03	; 3
    5c90:	21 f4       	brne	.+8      	; 0x5c9a <nrk_ext_int_enable+0x24>
    5c92:	80 91 6b 00 	lds	r24, 0x006B
    5c96:	81 60       	ori	r24, 0x01	; 1
    5c98:	23 c0       	rjmp	.+70     	; 0x5ce0 <nrk_ext_int_enable+0x6a>
//  #define RADIO_PRIORITY_CEILING	20
    5c9a:	84 30       	cpi	r24, 0x04	; 4
    5c9c:	21 f4       	brne	.+8      	; 0x5ca6 <nrk_ext_int_enable+0x30>
    5c9e:	80 91 6b 00 	lds	r24, 0x006B
    5ca2:	82 60       	ori	r24, 0x02	; 2
    5ca4:	1d c0       	rjmp	.+58     	; 0x5ce0 <nrk_ext_int_enable+0x6a>
//#endif
    5ca6:	85 30       	cpi	r24, 0x05	; 5
    5ca8:	21 f4       	brne	.+8      	; 0x5cb2 <nrk_ext_int_enable+0x3c>
    5caa:	80 91 6b 00 	lds	r24, 0x006B
    5cae:	84 60       	ori	r24, 0x04	; 4
    5cb0:	17 c0       	rjmp	.+46     	; 0x5ce0 <nrk_ext_int_enable+0x6a>

    5cb2:	86 30       	cpi	r24, 0x06	; 6
    5cb4:	21 f4       	brne	.+8      	; 0x5cbe <nrk_ext_int_enable+0x48>
    5cb6:	80 91 6b 00 	lds	r24, 0x006B
    5cba:	88 60       	ori	r24, 0x08	; 8
    5cbc:	11 c0       	rjmp	.+34     	; 0x5ce0 <nrk_ext_int_enable+0x6a>
nrk_sem_t *radio_sem;
    5cbe:	87 30       	cpi	r24, 0x07	; 7
    5cc0:	21 f4       	brne	.+8      	; 0x5cca <nrk_ext_int_enable+0x54>
    5cc2:	80 91 6b 00 	lds	r24, 0x006B
    5cc6:	80 61       	ori	r24, 0x10	; 16
    5cc8:	0b c0       	rjmp	.+22     	; 0x5ce0 <nrk_ext_int_enable+0x6a>
uint8_t auto_ack_enable;
    5cca:	88 30       	cpi	r24, 0x08	; 8
    5ccc:	21 f4       	brne	.+8      	; 0x5cd6 <nrk_ext_int_enable+0x60>
    5cce:	80 91 6b 00 	lds	r24, 0x006B
    5cd2:	80 62       	ori	r24, 0x20	; 32
    5cd4:	05 c0       	rjmp	.+10     	; 0x5ce0 <nrk_ext_int_enable+0x6a>
uint8_t security_enable;
    5cd6:	89 30       	cpi	r24, 0x09	; 9
    5cd8:	41 f4       	brne	.+16     	; 0x5cea <nrk_ext_int_enable+0x74>
    5cda:	80 91 6b 00 	lds	r24, 0x006B
    5cde:	80 64       	ori	r24, 0x40	; 64
    5ce0:	80 93 6b 00 	sts	0x006B, r24
    5ce4:	81 e0       	ldi	r24, 0x01	; 1
    5ce6:	90 e0       	ldi	r25, 0x00	; 0
    5ce8:	08 95       	ret
uint8_t last_pkt_encrypted;
    5cea:	8a 30       	cpi	r24, 0x0A	; 10
    5cec:	19 f0       	breq	.+6      	; 0x5cf4 <nrk_ext_int_enable+0x7e>
    5cee:	8f ef       	ldi	r24, 0xFF	; 255
    5cf0:	9f ef       	ldi	r25, 0xFF	; 255
    5cf2:	08 95       	ret
    5cf4:	80 91 6b 00 	lds	r24, 0x006B
    5cf8:	80 68       	ori	r24, 0x80	; 128
    5cfa:	80 93 6b 00 	sts	0x006B, r24
    5cfe:	81 e0       	ldi	r24, 0x01	; 1
    5d00:	90 e0       	ldi	r25, 0x00	; 0
uint16_t mdmctrl0;
uint8_t tx_ctr[4];
    5d02:	08 95       	ret

00005d04 <nrk_ext_int_disable>:
uint8_t rx_ctr[4];

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
    5d04:	88 23       	and	r24, r24
    5d06:	11 f4       	brne	.+4      	; 0x5d0c <nrk_ext_int_disable+0x8>
    5d08:	e8 98       	cbi	0x1d, 0	; 29
    5d0a:	31 c0       	rjmp	.+98     	; 0x5d6e <nrk_ext_int_disable+0x6a>
{
    5d0c:	81 30       	cpi	r24, 0x01	; 1
    5d0e:	11 f0       	breq	.+4      	; 0x5d14 <nrk_ext_int_disable+0x10>
return last_pkt_encrypted;
    5d10:	82 30       	cpi	r24, 0x02	; 2
    5d12:	11 f4       	brne	.+4      	; 0x5d18 <nrk_ext_int_disable+0x14>
    5d14:	e9 98       	cbi	0x1d, 1	; 29
    5d16:	2b c0       	rjmp	.+86     	; 0x5d6e <nrk_ext_int_disable+0x6a>
}
    5d18:	83 30       	cpi	r24, 0x03	; 3
    5d1a:	21 f4       	brne	.+8      	; 0x5d24 <nrk_ext_int_disable+0x20>
    5d1c:	80 91 6b 00 	lds	r24, 0x006B
    5d20:	8e 7f       	andi	r24, 0xFE	; 254
    5d22:	23 c0       	rjmp	.+70     	; 0x5d6a <nrk_ext_int_disable+0x66>

    5d24:	84 30       	cpi	r24, 0x04	; 4
    5d26:	21 f4       	brne	.+8      	; 0x5d30 <nrk_ext_int_disable+0x2c>
    5d28:	80 91 6b 00 	lds	r24, 0x006B
    5d2c:	8d 7f       	andi	r24, 0xFD	; 253
    5d2e:	1d c0       	rjmp	.+58     	; 0x5d6a <nrk_ext_int_disable+0x66>

    5d30:	85 30       	cpi	r24, 0x05	; 5
    5d32:	21 f4       	brne	.+8      	; 0x5d3c <nrk_ext_int_disable+0x38>
    5d34:	80 91 6b 00 	lds	r24, 0x006B
    5d38:	8b 7f       	andi	r24, 0xFB	; 251
    5d3a:	17 c0       	rjmp	.+46     	; 0x5d6a <nrk_ext_int_disable+0x66>
void rf_security_set_ctr_counter(uint8_t *counter)
    5d3c:	86 30       	cpi	r24, 0x06	; 6
    5d3e:	21 f4       	brne	.+8      	; 0x5d48 <nrk_ext_int_disable+0x44>
    5d40:	80 91 6b 00 	lds	r24, 0x006B
    5d44:	87 7f       	andi	r24, 0xF7	; 247
    5d46:	11 c0       	rjmp	.+34     	; 0x5d6a <nrk_ext_int_disable+0x66>
{
    5d48:	87 30       	cpi	r24, 0x07	; 7
    5d4a:	21 f4       	brne	.+8      	; 0x5d54 <nrk_ext_int_disable+0x50>
    5d4c:	80 91 6b 00 	lds	r24, 0x006B
    5d50:	8f 7e       	andi	r24, 0xEF	; 239
    5d52:	0b c0       	rjmp	.+22     	; 0x5d6a <nrk_ext_int_disable+0x66>
uint8_t n;
    5d54:	88 30       	cpi	r24, 0x08	; 8
    5d56:	21 f4       	brne	.+8      	; 0x5d60 <nrk_ext_int_disable+0x5c>
    5d58:	80 91 6b 00 	lds	r24, 0x006B
    5d5c:	8f 7d       	andi	r24, 0xDF	; 223
    5d5e:	05 c0       	rjmp	.+10     	; 0x5d6a <nrk_ext_int_disable+0x66>
// CTR counter value
    5d60:	89 30       	cpi	r24, 0x09	; 9
    5d62:	41 f4       	brne	.+16     	; 0x5d74 <nrk_ext_int_disable+0x70>
    5d64:	80 91 6b 00 	lds	r24, 0x006B
    5d68:	8f 7b       	andi	r24, 0xBF	; 191
    5d6a:	80 93 6b 00 	sts	0x006B, r24
    5d6e:	81 e0       	ldi	r24, 0x01	; 1
    5d70:	90 e0       	ldi	r25, 0x00	; 0
    5d72:	08 95       	ret
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
    5d74:	8a 30       	cpi	r24, 0x0A	; 10
    5d76:	19 f0       	breq	.+6      	; 0x5d7e <nrk_ext_int_disable+0x7a>
    5d78:	8f ef       	ldi	r24, 0xFF	; 255
    5d7a:	9f ef       	ldi	r25, 0xFF	; 255
    5d7c:	08 95       	ret
    5d7e:	80 91 6b 00 	lds	r24, 0x006B
    5d82:	8f 77       	andi	r24, 0x7F	; 127
    5d84:	80 93 6b 00 	sts	0x006B, r24
    5d88:	81 e0       	ldi	r24, 0x01	; 1
    5d8a:	90 e0       	ldi	r25, 0x00	; 0
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
tx_ctr[0]=counter[0];
    5d8c:	08 95       	ret

00005d8e <nrk_ext_int_configure>:
tx_ctr[1]=counter[1];
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}


    5d8e:	88 23       	and	r24, r24
    5d90:	39 f5       	brne	.+78     	; 0x5de0 <nrk_ext_int_configure+0x52>
void rf_security_set_key(uint8_t *key)
{
    5d92:	50 93 2a 07 	sts	0x072A, r21
    5d96:	40 93 29 07 	sts	0x0729, r20
uint8_t n,i;
    5d9a:	66 23       	and	r22, r22
    5d9c:	21 f4       	brne	.+8      	; 0x5da6 <nrk_ext_int_configure+0x18>
    5d9e:	80 91 69 00 	lds	r24, 0x0069
    5da2:	8c 7f       	andi	r24, 0xFC	; 252
    5da4:	45 c0       	rjmp	.+138    	; 0x5e30 <nrk_ext_int_configure+0xa2>
uint16_t key_buf;
    5da6:	61 30       	cpi	r22, 0x01	; 1
    5da8:	49 f4       	brne	.+18     	; 0x5dbc <nrk_ext_int_configure+0x2e>

    5daa:	80 91 69 00 	lds	r24, 0x0069
    5dae:	8d 7f       	andi	r24, 0xFD	; 253
    5db0:	80 93 69 00 	sts	0x0069, r24
    5db4:	80 91 69 00 	lds	r24, 0x0069
    5db8:	81 60       	ori	r24, 0x01	; 1
    5dba:	3a c0       	rjmp	.+116    	; 0x5e30 <nrk_ext_int_configure+0xa2>
// Set AES key
    5dbc:	62 30       	cpi	r22, 0x02	; 2
    5dbe:	49 f4       	brne	.+18     	; 0x5dd2 <nrk_ext_int_configure+0x44>
nrk_spin_wait_us(100); 
    5dc0:	80 91 69 00 	lds	r24, 0x0069
    5dc4:	82 60       	ori	r24, 0x02	; 2
    5dc6:	80 93 69 00 	sts	0x0069, r24
    5dca:	80 91 69 00 	lds	r24, 0x0069
    5dce:	8e 7f       	andi	r24, 0xFE	; 254
    5dd0:	2f c0       	rjmp	.+94     	; 0x5e30 <nrk_ext_int_configure+0xa2>
for(i=0; i<8; i++ )
    5dd2:	63 30       	cpi	r22, 0x03	; 3
    5dd4:	09 f0       	breq	.+2      	; 0x5dd8 <nrk_ext_int_configure+0x4a>
    5dd6:	69 c0       	rjmp	.+210    	; 0x5eaa <nrk_ext_int_configure+0x11c>
    5dd8:	80 91 69 00 	lds	r24, 0x0069
    5ddc:	83 60       	ori	r24, 0x03	; 3
    5dde:	28 c0       	rjmp	.+80     	; 0x5e30 <nrk_ext_int_configure+0xa2>
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    5de0:	81 30       	cpi	r24, 0x01	; 1
    5de2:	49 f5       	brne	.+82     	; 0x5e36 <nrk_ext_int_configure+0xa8>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}
    5de4:	50 93 28 07 	sts	0x0728, r21
    5de8:	40 93 27 07 	sts	0x0727, r20

    5dec:	66 23       	and	r22, r22
    5dee:	21 f4       	brne	.+8      	; 0x5df8 <nrk_ext_int_configure+0x6a>
    5df0:	80 91 69 00 	lds	r24, 0x0069
    5df4:	83 7f       	andi	r24, 0xF3	; 243
    5df6:	1c c0       	rjmp	.+56     	; 0x5e30 <nrk_ext_int_configure+0xa2>
// Set AES nonce to all zeros
    5df8:	61 30       	cpi	r22, 0x01	; 1
    5dfa:	49 f4       	brne	.+18     	; 0x5e0e <nrk_ext_int_configure+0x80>
nrk_spin_wait_us(100); 
    5dfc:	80 91 69 00 	lds	r24, 0x0069
    5e00:	87 7f       	andi	r24, 0xF7	; 247
    5e02:	80 93 69 00 	sts	0x0069, r24
    5e06:	80 91 69 00 	lds	r24, 0x0069
    5e0a:	84 60       	ori	r24, 0x04	; 4
    5e0c:	11 c0       	rjmp	.+34     	; 0x5e30 <nrk_ext_int_configure+0xa2>
for(i=0; i<7; i++ )
    5e0e:	62 30       	cpi	r22, 0x02	; 2
    5e10:	49 f4       	brne	.+18     	; 0x5e24 <nrk_ext_int_configure+0x96>
	{
    5e12:	80 91 69 00 	lds	r24, 0x0069
    5e16:	88 60       	ori	r24, 0x08	; 8
    5e18:	80 93 69 00 	sts	0x0069, r24
    5e1c:	80 91 69 00 	lds	r24, 0x0069
    5e20:	8b 7f       	andi	r24, 0xFB	; 251
    5e22:	06 c0       	rjmp	.+12     	; 0x5e30 <nrk_ext_int_configure+0xa2>
    	key_buf=0; 
    5e24:	63 30       	cpi	r22, 0x03	; 3
    5e26:	09 f0       	breq	.+2      	; 0x5e2a <nrk_ext_int_configure+0x9c>
    5e28:	40 c0       	rjmp	.+128    	; 0x5eaa <nrk_ext_int_configure+0x11c>
    5e2a:	80 91 69 00 	lds	r24, 0x0069
    5e2e:	8c 60       	ori	r24, 0x0C	; 12
    5e30:	80 93 69 00 	sts	0x0069, r24
    5e34:	37 c0       	rjmp	.+110    	; 0x5ea4 <nrk_ext_int_configure+0x116>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
    5e36:	82 30       	cpi	r24, 0x02	; 2
    5e38:	31 f5       	brne	.+76     	; 0x5e86 <nrk_ext_int_configure+0xf8>
	// block counter set 1
    	key_buf=1; 
    5e3a:	50 93 28 07 	sts	0x0728, r21
    5e3e:	40 93 27 07 	sts	0x0727, r20
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    5e42:	66 23       	and	r22, r22
    5e44:	21 f4       	brne	.+8      	; 0x5e4e <nrk_ext_int_configure+0xc0>
    5e46:	80 91 69 00 	lds	r24, 0x0069
    5e4a:	8f 7c       	andi	r24, 0xCF	; 207
    5e4c:	f1 cf       	rjmp	.-30     	; 0x5e30 <nrk_ext_int_configure+0xa2>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    5e4e:	61 30       	cpi	r22, 0x01	; 1
    5e50:	49 f4       	brne	.+18     	; 0x5e64 <nrk_ext_int_configure+0xd6>
}
    5e52:	80 91 69 00 	lds	r24, 0x0069
    5e56:	8f 7d       	andi	r24, 0xDF	; 223
    5e58:	80 93 69 00 	sts	0x0069, r24
    5e5c:	80 91 69 00 	lds	r24, 0x0069
    5e60:	80 61       	ori	r24, 0x10	; 16
    5e62:	e6 cf       	rjmp	.-52     	; 0x5e30 <nrk_ext_int_configure+0xa2>

    5e64:	62 30       	cpi	r22, 0x02	; 2
    5e66:	49 f4       	brne	.+18     	; 0x5e7a <nrk_ext_int_configure+0xec>
void rf_security_enable(uint8_t *key)
    5e68:	80 91 69 00 	lds	r24, 0x0069
    5e6c:	80 62       	ori	r24, 0x20	; 32
    5e6e:	80 93 69 00 	sts	0x0069, r24
    5e72:	80 91 69 00 	lds	r24, 0x0069
    5e76:	8f 7e       	andi	r24, 0xEF	; 239
    5e78:	db cf       	rjmp	.-74     	; 0x5e30 <nrk_ext_int_configure+0xa2>
{
    5e7a:	63 30       	cpi	r22, 0x03	; 3
    5e7c:	b1 f4       	brne	.+44     	; 0x5eaa <nrk_ext_int_configure+0x11c>
    5e7e:	80 91 69 00 	lds	r24, 0x0069
    5e82:	80 63       	ori	r24, 0x30	; 48
    5e84:	d5 cf       	rjmp	.-86     	; 0x5e30 <nrk_ext_int_configure+0xa2>
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header

security_enable=1;
}

    5e86:	83 50       	subi	r24, 0x03	; 3
    5e88:	88 30       	cpi	r24, 0x08	; 8
    5e8a:	18 f0       	brcs	.+6      	; 0x5e92 <nrk_ext_int_configure+0x104>
    5e8c:	8f ef       	ldi	r24, 0xFF	; 255
    5e8e:	9f ef       	ldi	r25, 0xFF	; 255
    5e90:	08 95       	ret

    5e92:	80 91 68 00 	lds	r24, 0x0068
    5e96:	81 60       	ori	r24, 0x01	; 1
    5e98:	80 93 68 00 	sts	0x0068, r24

    5e9c:	50 93 2e 07 	sts	0x072E, r21
    5ea0:	40 93 2d 07 	sts	0x072D, r20
    5ea4:	81 e0       	ldi	r24, 0x01	; 1
    5ea6:	90 e0       	ldi	r25, 0x00	; 0
    5ea8:	08 95       	ret
void rf_security_disable()
    5eaa:	81 e0       	ldi	r24, 0x01	; 1
    5eac:	90 e0       	ldi	r25, 0x00	; 0
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
  security_enable=0;
    5eae:	08 95       	ret

00005eb0 <__vector_1>:
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    5eb0:	1f 92       	push	r1
    5eb2:	0f 92       	push	r0
    5eb4:	0f b6       	in	r0, 0x3f	; 63
    5eb6:	0f 92       	push	r0
    5eb8:	11 24       	eor	r1, r1
    5eba:	2f 93       	push	r18
    5ebc:	3f 93       	push	r19
    5ebe:	4f 93       	push	r20
    5ec0:	5f 93       	push	r21
    5ec2:	6f 93       	push	r22
    5ec4:	7f 93       	push	r23
    5ec6:	8f 93       	push	r24
    5ec8:	9f 93       	push	r25
    5eca:	af 93       	push	r26
    5ecc:	bf 93       	push	r27
    5ece:	ef 93       	push	r30
    5ed0:	ff 93       	push	r31

    5ed2:	e0 91 29 07 	lds	r30, 0x0729
    5ed6:	f0 91 2a 07 	lds	r31, 0x072A
    5eda:	30 97       	sbiw	r30, 0x00	; 0
    5edc:	11 f0       	breq	.+4      	; 0x5ee2 <__vector_1+0x32>
    5ede:	09 95       	icall
    5ee0:	04 c0       	rjmp	.+8      	; 0x5eea <__vector_1+0x3a>
void rf_tx_power(uint8_t pwr)
{
    5ee2:	60 e0       	ldi	r22, 0x00	; 0
    5ee4:	8a e0       	ldi	r24, 0x0A	; 10
    5ee6:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <nrk_kernel_error_add>
    5eea:	ff 91       	pop	r31
    5eec:	ef 91       	pop	r30
    5eee:	bf 91       	pop	r27
    5ef0:	af 91       	pop	r26
    5ef2:	9f 91       	pop	r25
    5ef4:	8f 91       	pop	r24
    5ef6:	7f 91       	pop	r23
    5ef8:	6f 91       	pop	r22
    5efa:	5f 91       	pop	r21
    5efc:	4f 91       	pop	r20
    5efe:	3f 91       	pop	r19
    5f00:	2f 91       	pop	r18
    5f02:	0f 90       	pop	r0
    5f04:	0f be       	out	0x3f, r0	; 63
    5f06:	0f 90       	pop	r0
    5f08:	1f 90       	pop	r1
    5f0a:	18 95       	reti

00005f0c <__vector_9>:
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
  security_enable=0;
}

//-------------------------------------------------------------------------------------------------------
    5f0c:	1f 92       	push	r1
    5f0e:	0f 92       	push	r0
    5f10:	0f b6       	in	r0, 0x3f	; 63
    5f12:	0f 92       	push	r0
    5f14:	11 24       	eor	r1, r1
    5f16:	2f 93       	push	r18
    5f18:	3f 93       	push	r19
    5f1a:	4f 93       	push	r20
    5f1c:	5f 93       	push	r21
    5f1e:	6f 93       	push	r22
    5f20:	7f 93       	push	r23
    5f22:	8f 93       	push	r24
    5f24:	9f 93       	push	r25
    5f26:	af 93       	push	r26
    5f28:	bf 93       	push	r27
    5f2a:	ef 93       	push	r30
    5f2c:	ff 93       	push	r31
// The RF settings structure is declared here, since we'll always need halRfInit()
    5f2e:	e0 91 2d 07 	lds	r30, 0x072D
    5f32:	f0 91 2e 07 	lds	r31, 0x072E
    5f36:	30 97       	sbiw	r30, 0x00	; 0
    5f38:	11 f0       	breq	.+4      	; 0x5f3e <__vector_9+0x32>
    5f3a:	09 95       	icall
    5f3c:	04 c0       	rjmp	.+8      	; 0x5f46 <__vector_9+0x3a>
volatile RF_SETTINGS rfSettings;
volatile uint8_t rx_ready;
    5f3e:	60 e0       	ldi	r22, 0x00	; 0
    5f40:	8a e0       	ldi	r24, 0x0A	; 10
    5f42:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <nrk_kernel_error_add>
    5f46:	ff 91       	pop	r31
    5f48:	ef 91       	pop	r30
    5f4a:	bf 91       	pop	r27
    5f4c:	af 91       	pop	r26
    5f4e:	9f 91       	pop	r25
    5f50:	8f 91       	pop	r24
    5f52:	7f 91       	pop	r23
    5f54:	6f 91       	pop	r22
    5f56:	5f 91       	pop	r21
    5f58:	4f 91       	pop	r20
    5f5a:	3f 91       	pop	r19
    5f5c:	2f 91       	pop	r18
    5f5e:	0f 90       	pop	r0
    5f60:	0f be       	out	0x3f, r0	; 63
    5f62:	0f 90       	pop	r0
    5f64:	1f 90       	pop	r1
    5f66:	18 95       	reti

00005f68 <_nrk_startup_ok>:
#include <include.h>
#include <basic_rf.h>
#include <ulib.h>
#include <nrk.h>
#include <nrk_events.h>
#include <nrk_error.h>
    5f68:	80 91 b0 00 	lds	r24, 0x00B0
    5f6c:	90 e0       	ldi	r25, 0x00	; 0
    5f6e:	81 11       	cpse	r24, r1
    5f70:	91 e0       	ldi	r25, 0x01	; 1
    5f72:	81 e0       	ldi	r24, 0x01	; 1
    5f74:	98 27       	eor	r25, r24
#include <nrk_timer.h>
#include <nrk_cpu.h>
    5f76:	89 2f       	mov	r24, r25
    5f78:	99 27       	eor	r25, r25
    5f7a:	08 95       	ret

00005f7c <update_watchdog>:


//#ifndef RADIO_PRIORITY_CEILING
    5f7c:	08 95       	ret

00005f7e <nrk_watchdog_check>:
{
return last_pkt_encrypted;
}


void rf_security_set_ctr_counter(uint8_t *counter)
    5f7e:	04 b6       	in	r0, 0x34	; 52
    5f80:	03 fc       	sbrc	r0, 3
    5f82:	03 c0       	rjmp	.+6      	; 0x5f8a <nrk_watchdog_check+0xc>
    5f84:	81 e0       	ldi	r24, 0x01	; 1
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	08 95       	ret
    5f8a:	8f ef       	ldi	r24, 0xFF	; 255
    5f8c:	9f ef       	ldi	r25, 0xFF	; 255
{
uint8_t n;
    5f8e:	08 95       	ret

00005f90 <nrk_watchdog_reset>:
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
tx_ctr[0]=counter[0];
    5f90:	a8 95       	wdr
    5f92:	08 95       	ret

00005f94 <nrk_watchdog_disable>:
#include <include.h>
#include <basic_rf.h>
#include <ulib.h>
#include <nrk.h>
#include <nrk_events.h>
#include <nrk_error.h>
    5f94:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>
{
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
tx_ctr[0]=counter[0];
    5f98:	a8 95       	wdr
#include <ulib.h>
#include <nrk.h>
#include <nrk_events.h>
#include <nrk_error.h>
#include <nrk_timer.h>
#include <nrk_cpu.h>
    5f9a:	84 b7       	in	r24, 0x34	; 52
    5f9c:	87 7f       	andi	r24, 0xF7	; 247
    5f9e:	84 bf       	out	0x34, r24	; 52

    5fa0:	e0 e6       	ldi	r30, 0x60	; 96
    5fa2:	f0 e0       	ldi	r31, 0x00	; 0
    5fa4:	80 81       	ld	r24, Z
    5fa6:	88 61       	ori	r24, 0x18	; 24
    5fa8:	80 83       	st	Z, r24

    5faa:	10 82       	st	Z, r1
//#ifndef RADIO_PRIORITY_CEILING
    5fac:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>
    5fb0:	08 95       	ret

00005fb2 <nrk_watchdog_enable>:
//#endif

nrk_sem_t *radio_sem;
uint8_t auto_ack_enable;
uint8_t security_enable;
uint8_t last_pkt_encrypted;
    5fb2:	0e 94 15 1c 	call	0x382a	; 0x382a <nrk_int_disable>
uint16_t mdmctrl0;
    5fb6:	84 b7       	in	r24, 0x34	; 52
    5fb8:	87 7f       	andi	r24, 0xF7	; 247
    5fba:	84 bf       	out	0x34, r24	; 52
{
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
tx_ctr[0]=counter[0];
    5fbc:	a8 95       	wdr
uint8_t auto_ack_enable;
uint8_t security_enable;
uint8_t last_pkt_encrypted;
uint16_t mdmctrl0;
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];
    5fbe:	e0 e6       	ldi	r30, 0x60	; 96
    5fc0:	f0 e0       	ldi	r31, 0x00	; 0
    5fc2:	80 81       	ld	r24, Z
    5fc4:	88 61       	ori	r24, 0x18	; 24
    5fc6:	80 83       	st	Z, r24

    5fc8:	8d e0       	ldi	r24, 0x0D	; 13
    5fca:	80 83       	st	Z, r24
// Returns 1 if the last packet was encrypted, 0 otherwise
    5fcc:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>
    5fd0:	08 95       	ret

00005fd2 <nrk_battery_save>:
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
tx_ctr[0]=counter[0];
tx_ctr[1]=counter[1];
tx_ctr[2]=counter[2];
tx_ctr[3]=counter[3];
}
    5fd2:	08 95       	ret

00005fd4 <nrk_sleep>:
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

    5fd4:	83 b7       	in	r24, 0x33	; 51
    5fd6:	81 7f       	andi	r24, 0xF1	; 241
    5fd8:	86 60       	ori	r24, 0x06	; 6
    5fda:	83 bf       	out	0x33, r24	; 51
// Set AES nonce to all zeros
    5fdc:	83 b7       	in	r24, 0x33	; 51
    5fde:	81 60       	ori	r24, 0x01	; 1
    5fe0:	83 bf       	out	0x33, r24	; 51
    5fe2:	88 95       	sleep
    5fe4:	83 b7       	in	r24, 0x33	; 51
    5fe6:	8e 7f       	andi	r24, 0xFE	; 254
    5fe8:	83 bf       	out	0x33, r24	; 51
    5fea:	08 95       	ret

00005fec <nrk_idle>:
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
    5fec:	83 b7       	in	r24, 0x33	; 51
    5fee:	81 7f       	andi	r24, 0xF1	; 241
    5ff0:	83 bf       	out	0x33, r24	; 51
	// block counter set 1
    5ff2:	83 b7       	in	r24, 0x33	; 51
    5ff4:	81 60       	ori	r24, 0x01	; 1
    5ff6:	83 bf       	out	0x33, r24	; 51
    5ff8:	88 95       	sleep
    5ffa:	83 b7       	in	r24, 0x33	; 51
    5ffc:	8e 7f       	andi	r24, 0xFE	; 254
    5ffe:	83 bf       	out	0x33, r24	; 51
    6000:	08 95       	ret

00006002 <nrk_task_set_entry_function>:
    	key_buf=1; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

void rf_security_enable(uint8_t *key)
    6002:	fc 01       	movw	r30, r24
    6004:	76 83       	std	Z+6, r23	; 0x06
    6006:	65 83       	std	Z+5, r22	; 0x05
    6008:	08 95       	ret

0000600a <nrk_task_stk_init>:


void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
  security_enable=0;
    600a:	fb 01       	movw	r30, r22
    600c:	da 01       	movw	r26, r20
}

//-------------------------------------------------------------------------------------------------------
// The RF settings structure is declared here, since we'll always need halRfInit()
volatile RF_SETTINGS rfSettings;
volatile uint8_t rx_ready;
    600e:	25 e5       	ldi	r18, 0x55	; 85
    6010:	2c 93       	st	X, r18
{
uint16_t tmp;
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    6012:	32 97       	sbiw	r30, 0x02	; 2
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    6014:	29 2f       	mov	r18, r25
    6016:	33 27       	eor	r19, r19
    6018:	20 83       	st	Z, r18
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
    601a:	81 83       	std	Z+1, r24	; 0x01
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    601c:	32 97       	sbiw	r30, 0x02	; 2
    601e:	11 82       	std	Z+1, r1	; 0x01
    6020:	10 82       	st	Z, r1
#endif
    6022:	32 97       	sbiw	r30, 0x02	; 2
    6024:	11 82       	std	Z+1, r1	; 0x01
    6026:	10 82       	st	Z, r1
}
    6028:	32 97       	sbiw	r30, 0x02	; 2
    602a:	11 82       	std	Z+1, r1	; 0x01
    602c:	10 82       	st	Z, r1
void rf_set_channel( uint8_t channel )
    602e:	32 97       	sbiw	r30, 0x02	; 2
    6030:	11 82       	std	Z+1, r1	; 0x01
    6032:	10 82       	st	Z, r1
{
    6034:	32 97       	sbiw	r30, 0x02	; 2
    6036:	11 82       	std	Z+1, r1	; 0x01
    6038:	10 82       	st	Z, r1
#ifdef RADIO_PRIORITY_CEILING
    603a:	32 97       	sbiw	r30, 0x02	; 2
    603c:	11 82       	std	Z+1, r1	; 0x01
    603e:	10 82       	st	Z, r1
    nrk_sem_pend (radio_sem);
    6040:	32 97       	sbiw	r30, 0x02	; 2
    6042:	11 82       	std	Z+1, r1	; 0x01
    6044:	10 82       	st	Z, r1
#endif
    6046:	32 97       	sbiw	r30, 0x02	; 2
    6048:	11 82       	std	Z+1, r1	; 0x01
    604a:	10 82       	st	Z, r1
    halRfSetChannel(channel);
#ifdef RADIO_PRIORITY_CEILING
    604c:	32 97       	sbiw	r30, 0x02	; 2
    604e:	11 82       	std	Z+1, r1	; 0x01
    6050:	10 82       	st	Z, r1
    nrk_sem_post(radio_sem);
    6052:	32 97       	sbiw	r30, 0x02	; 2
    6054:	11 82       	std	Z+1, r1	; 0x01
    6056:	10 82       	st	Z, r1
#endif
    6058:	32 97       	sbiw	r30, 0x02	; 2
    605a:	11 82       	std	Z+1, r1	; 0x01
    605c:	10 82       	st	Z, r1
}
    605e:	32 97       	sbiw	r30, 0x02	; 2
    6060:	11 82       	std	Z+1, r1	; 0x01
    6062:	10 82       	st	Z, r1

    6064:	32 97       	sbiw	r30, 0x02	; 2
    6066:	11 82       	std	Z+1, r1	; 0x01
    6068:	10 82       	st	Z, r1

    606a:	32 97       	sbiw	r30, 0x02	; 2
    606c:	11 82       	std	Z+1, r1	; 0x01
    606e:	10 82       	st	Z, r1
void rf_addr_decode_enable()
    6070:	32 97       	sbiw	r30, 0x02	; 2
    6072:	11 82       	std	Z+1, r1	; 0x01
    6074:	10 82       	st	Z, r1
{
    6076:	32 97       	sbiw	r30, 0x02	; 2
    6078:	11 82       	std	Z+1, r1	; 0x01
    607a:	10 82       	st	Z, r1
    mdmctrl0 |= 0x0800;
    607c:	32 97       	sbiw	r30, 0x02	; 2
    607e:	11 82       	std	Z+1, r1	; 0x01
    6080:	10 82       	st	Z, r1
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
}

void rf_addr_decode_disable()
    6082:	cf 01       	movw	r24, r30
    6084:	08 95       	ret

00006086 <nrk_stack_pointer_init>:

void rf_auto_ack_enable()
{
    auto_ack_enable=1;
    mdmctrl0 |= 0x0010;
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
    6086:	85 e5       	ldi	r24, 0x55	; 85
    6088:	80 93 7e 21 	sts	0x217E, r24
}

    608c:	ee ef       	ldi	r30, 0xFE	; 254
    608e:	f1 e2       	ldi	r31, 0x21	; 33
    6090:	f0 93 9e 04 	sts	0x049E, r31
    6094:	e0 93 9d 04 	sts	0x049D, r30
void rf_auto_ack_disable()
{
    6098:	2c e1       	ldi	r18, 0x1C	; 28
    609a:	3c e1       	ldi	r19, 0x1C	; 28
    609c:	83 2f       	mov	r24, r19
    609e:	99 27       	eor	r25, r25
    60a0:	80 83       	st	Z, r24
    auto_ack_enable=0;
    60a2:	20 93 ff 21 	sts	0x21FF, r18
    60a6:	08 95       	ret

000060a8 <nrk_stack_pointer_restore>:
    rfSettings.myAddr = my_mac;
    nrk_spin_wait_us(500);
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    nrk_spin_wait_us(500);
}

    60a8:	2c e1       	ldi	r18, 0x1C	; 28
    60aa:	3c e1       	ldi	r19, 0x1C	; 28
    60ac:	83 2f       	mov	r24, r19
    60ae:	99 27       	eor	r25, r25
    60b0:	80 93 fe 21 	sts	0x21FE, r24

    60b4:	20 93 ff 21 	sts	0x21FF, r18
    60b8:	08 95       	ret

000060ba <nrk_target_start>:
void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
#endif
    60ba:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <_nrk_setup_timer>

    60be:	0e 94 17 1c 	call	0x382e	; 0x382e <nrk_int_enable>
    60c2:	08 95       	ret

000060c4 <nrk_task_set_stk>:

void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header

    60c4:	ef 92       	push	r14
    60c6:	ff 92       	push	r15
    60c8:	0f 93       	push	r16
    60ca:	1f 93       	push	r17
    60cc:	cf 93       	push	r28
    60ce:	df 93       	push	r29
    60d0:	7c 01       	movw	r14, r24
    60d2:	8b 01       	movw	r16, r22
    60d4:	ea 01       	movw	r28, r20
security_enable=1;
}
    60d6:	40 32       	cpi	r20, 0x20	; 32
    60d8:	51 05       	cpc	r21, r1
    60da:	18 f4       	brcc	.+6      	; 0x60e2 <nrk_task_set_stk+0x1e>
    60dc:	81 e1       	ldi	r24, 0x11	; 17
    60de:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <nrk_error_add>

    60e2:	c8 01       	movw	r24, r16
    60e4:	01 97       	sbiw	r24, 0x01	; 1
    60e6:	8c 0f       	add	r24, r28
    60e8:	9d 1f       	adc	r25, r29
    60ea:	f7 01       	movw	r30, r14
    60ec:	92 83       	std	Z+2, r25	; 0x02
    60ee:	81 83       	std	Z+1, r24	; 0x01

    60f0:	14 83       	std	Z+4, r17	; 0x04
    60f2:	03 83       	std	Z+3, r16	; 0x03
    60f4:	df 91       	pop	r29
    60f6:	cf 91       	pop	r28
    60f8:	1f 91       	pop	r17
    60fa:	0f 91       	pop	r16
    60fc:	ff 90       	pop	r15
    60fe:	ef 90       	pop	r14
    6100:	08 95       	ret

00006102 <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    6102:	a0 91 fb 06 	lds	r26, 0x06FB
	lds r27,nrk_high_ready_TCB+1
    6106:	b0 91 fc 06 	lds	r27, 0x06FC

    	;x points to &OSTCB[x]
    
	ld r28,x+
    610a:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    610c:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    610e:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    6110:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    6112:	ff 91       	pop	r31
	pop r30
    6114:	ef 91       	pop	r30
	pop r29
    6116:	df 91       	pop	r29
	pop r28
    6118:	cf 91       	pop	r28
	pop r27
    611a:	bf 91       	pop	r27
	pop r26
    611c:	af 91       	pop	r26
	pop r25
    611e:	9f 91       	pop	r25
	pop r24			
    6120:	8f 91       	pop	r24
	pop r23
    6122:	7f 91       	pop	r23
	pop r22
    6124:	6f 91       	pop	r22
	pop r21
    6126:	5f 91       	pop	r21
	pop r20	
    6128:	4f 91       	pop	r20
	pop r19
    612a:	3f 91       	pop	r19
	pop r18	
    612c:	2f 91       	pop	r18
	pop r17
    612e:	1f 91       	pop	r17
	pop r16
    6130:	0f 91       	pop	r16
	pop r15
    6132:	ff 90       	pop	r15
	pop r14
    6134:	ef 90       	pop	r14
	pop r13
    6136:	df 90       	pop	r13
	pop r12
    6138:	cf 90       	pop	r12
	pop r11
    613a:	bf 90       	pop	r11
	pop r10
    613c:	af 90       	pop	r10
	pop r9
    613e:	9f 90       	pop	r9
	pop r8
    6140:	8f 90       	pop	r8
	pop r7
    6142:	7f 90       	pop	r7
	pop r6
    6144:	6f 90       	pop	r6
	pop r5
    6146:	5f 90       	pop	r5
	pop r4
    6148:	4f 90       	pop	r4
	pop r3
    614a:	3f 90       	pop	r3
	pop r2
    614c:	2f 90       	pop	r2
	pop r1
    614e:	1f 90       	pop	r1
	pop r0
    6150:	0f 90       	pop	r0
	out __SREG__, r0
    6152:	0f be       	out	0x3f, r0	; 63
	pop r0	
    6154:	0f 90       	pop	r0
	   
    	reti 
    6156:	18 95       	reti

00006158 <vfprintf>:
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    nrk_cur_task_TCB = NULL;
    6158:	ab e0       	ldi	r26, 0x0B	; 11
    615a:	b0 e0       	ldi	r27, 0x00	; 0
    615c:	e2 eb       	ldi	r30, 0xB2	; 178
    615e:	f0 e3       	ldi	r31, 0x30	; 48
    6160:	0c 94 a1 34 	jmp	0x6942	; 0x6942 <__prologue_saves__>
    6164:	4c 01       	movw	r8, r24
    6166:	6b 01       	movw	r12, r22
    6168:	7a 01       	movw	r14, r20
    
    nrk_high_ready_TCB = NULL;
    nrk_high_ready_prio = 0; 

   #ifdef NRK_STATS_TRACKER
    616a:	fc 01       	movw	r30, r24
    616c:	17 82       	std	Z+7, r1	; 0x07
    616e:	16 82       	std	Z+6, r1	; 0x06
	nrk_stats_reset();
   #endif
    6170:	83 81       	ldd	r24, Z+3	; 0x03
    6172:	81 fd       	sbrc	r24, 1
    6174:	08 c0       	rjmp	.+16     	; 0x6186 <vfprintf+0x2e>
    6176:	8f ef       	ldi	r24, 0xFF	; 255
    6178:	9f ef       	ldi	r25, 0xFF	; 255
    617a:	1a c1       	rjmp	.+564    	; 0x63b0 <vfprintf+0x258>
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
	nrk_activate_task(&IdleTask);
	
}

    617c:	22 e0       	ldi	r18, 0x02	; 2
    617e:	30 e0       	ldi	r19, 0x00	; 0
    6180:	e2 0e       	add	r14, r18
    6182:	f3 1e       	adc	r15, r19
    6184:	0c c0       	rjmp	.+24     	; 0x619e <vfprintf+0x46>
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    6186:	94 e9       	ldi	r25, 0x94	; 148
    6188:	29 2e       	mov	r2, r25
    618a:	93 e0       	ldi	r25, 0x03	; 3
    618c:	39 2e       	mov	r3, r25
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    618e:	3e 01       	movw	r6, r28
    6190:	08 94       	sec
    6192:	61 1c       	adc	r6, r1
    6194:	71 1c       	adc	r7, r1
    6196:	8d e8       	ldi	r24, 0x8D	; 141
    6198:	48 2e       	mov	r4, r24
    619a:	83 e0       	ldi	r24, 0x03	; 3
    619c:	58 2e       	mov	r5, r24

    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    619e:	f4 01       	movw	r30, r8
    61a0:	03 81       	ldd	r16, Z+3	; 0x03
    61a2:	f6 01       	movw	r30, r12
    61a4:	03 fd       	sbrc	r16, 3
    61a6:	85 91       	lpm	r24, Z+
    61a8:	03 ff       	sbrs	r16, 3
    61aa:	81 91       	ld	r24, Z+
    61ac:	6f 01       	movw	r12, r30
    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    61ae:	88 23       	and	r24, r24
    61b0:	09 f4       	brne	.+2      	; 0x61b4 <vfprintf+0x5c>
    61b2:	fb c0       	rjmp	.+502    	; 0x63aa <vfprintf+0x252>

    61b4:	85 32       	cpi	r24, 0x25	; 37
    61b6:	59 f4       	brne	.+22     	; 0x61ce <vfprintf+0x76>
for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    61b8:	03 fd       	sbrc	r16, 3
    61ba:	65 91       	lpm	r22, Z+
    61bc:	03 ff       	sbrs	r16, 3
    61be:	61 91       	ld	r22, Z+
    61c0:	6f 01       	movw	r12, r30
{
    61c2:	65 32       	cpi	r22, 0x25	; 37
    61c4:	19 f0       	breq	.+6      	; 0x61cc <vfprintf+0x74>
    61c6:	16 2f       	mov	r17, r22
    61c8:	bb 24       	eor	r11, r11
    61ca:	1c c0       	rjmp	.+56     	; 0x6204 <vfprintf+0xac>
    61cc:	85 e2       	ldi	r24, 0x25	; 37
    nrk_sem_list[i].count=-1;
    nrk_sem_list[i].value=-1;
    61ce:	b4 01       	movw	r22, r8
    61d0:	99 27       	eor	r25, r25
    61d2:	2a c0       	rjmp	.+84     	; 0x6228 <vfprintf+0xd0>
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    61d4:	11 23       	and	r17, r17
    61d6:	59 f1       	breq	.+86     	; 0x622e <vfprintf+0xd6>
    61d8:	61 2f       	mov	r22, r17
    61da:	77 27       	eor	r23, r23
    61dc:	c1 01       	movw	r24, r2
    61de:	0e 94 dc 31 	call	0x63b8	; 0x63b8 <strchr_P>
    61e2:	89 2b       	or	r24, r25
    61e4:	49 f4       	brne	.+18     	; 0x61f8 <vfprintf+0xa0>
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    61e6:	13 32       	cpi	r17, 0x23	; 35
    61e8:	19 f4       	brne	.+6      	; 0x61f0 <vfprintf+0x98>
        nrk_task_TCB[i].task_ID = -1; 
    61ea:	f0 e1       	ldi	r31, 0x10	; 16
    61ec:	bf 2a       	or	r11, r31
    61ee:	04 c0       	rjmp	.+8      	; 0x61f8 <vfprintf+0xa0>
        }
  
       
    61f0:	1c 36       	cpi	r17, 0x6C	; 108
    61f2:	61 f4       	brne	.+24     	; 0x620c <vfprintf+0xb4>
    // Setup a double linked list of Ready Tasks 
    61f4:	20 e8       	ldi	r18, 0x80	; 128
    61f6:	b2 2a       	or	r11, r18
    nrk_sem_list[i].value=-1;
    nrk_sem_list[i].resource_ceiling=-1;
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
    61f8:	f6 01       	movw	r30, r12
    61fa:	03 fd       	sbrc	r16, 3
    61fc:	15 91       	lpm	r17, Z+
    61fe:	03 ff       	sbrs	r16, 3
    6200:	11 91       	ld	r17, Z+
    6202:	6f 01       	movw	r12, r30
    nrk_sem_list[i].count=-1;
    nrk_sem_list[i].value=-1;
    nrk_sem_list[i].resource_ceiling=-1;
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    6204:	b7 fe       	sbrs	r11, 7
    6206:	e6 cf       	rjmp	.-52     	; 0x61d4 <vfprintf+0x7c>
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    6208:	11 23       	and	r17, r17
    620a:	89 f0       	breq	.+34     	; 0x622e <vfprintf+0xd6>
    620c:	61 2f       	mov	r22, r17
    620e:	77 27       	eor	r23, r23
    6210:	c2 01       	movw	r24, r4
    6212:	0e 94 dc 31 	call	0x63b8	; 0x63b8 <strchr_P>
    6216:	89 2b       	or	r24, r25
    6218:	51 f0       	breq	.+20     	; 0x622e <vfprintf+0xd6>
	_head_node = NULL;
    621a:	24 e0       	ldi	r18, 0x04	; 4
    621c:	30 e0       	ldi	r19, 0x00	; 0
    621e:	e2 0e       	add	r14, r18
    6220:	f3 1e       	adc	r15, r19
	_free_node = &_nrk_readyQ[0];
    6222:	b4 01       	movw	r22, r8
    6224:	8f e3       	ldi	r24, 0x3F	; 63
    6226:	90 e0       	ldi	r25, 0x00	; 0
    6228:	0e 94 3c 32 	call	0x6478	; 0x6478 <fputc>
    622c:	b8 cf       	rjmp	.-144    	; 0x619e <vfprintf+0x46>
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    622e:	13 36       	cpi	r17, 0x63	; 99
    6230:	29 f0       	breq	.+10     	; 0x623c <vfprintf+0xe4>
    6232:	13 37       	cpi	r17, 0x73	; 115
    6234:	81 f0       	breq	.+32     	; 0x6256 <vfprintf+0xfe>
    6236:	13 35       	cpi	r17, 0x53	; 83
    6238:	f9 f4       	brne	.+62     	; 0x6278 <vfprintf+0x120>
    623a:	0b c0       	rjmp	.+22     	; 0x6252 <vfprintf+0xfa>
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.offset.secs = 0;
    623c:	87 01       	movw	r16, r14
    623e:	0e 5f       	subi	r16, 0xFE	; 254
    6240:	1f 4f       	sbci	r17, 0xFF	; 255
    6242:	b4 01       	movw	r22, r8
    6244:	f7 01       	movw	r30, r14
    6246:	80 81       	ld	r24, Z
    6248:	91 81       	ldd	r25, Z+1	; 0x01
    624a:	0e 94 3c 32 	call	0x6478	; 0x6478 <fputc>
    624e:	78 01       	movw	r14, r16
    6250:	a6 cf       	rjmp	.-180    	; 0x619e <vfprintf+0x46>
	IdleTask.offset.nano_secs = 0;
	IdleTask.FirstActivation = TRUE;
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
    6252:	f1 e0       	ldi	r31, 0x01	; 1
    6254:	bf 2a       	or	r11, r31
	nrk_activate_task(&IdleTask);
	
}

    6256:	f7 01       	movw	r30, r14
    6258:	00 81       	ld	r16, Z
    625a:	11 81       	ldd	r17, Z+1	; 0x01
    625c:	04 c0       	rjmp	.+8      	; 0x6266 <vfprintf+0x10e>


    625e:	b4 01       	movw	r22, r8
    6260:	99 27       	eor	r25, r25
    6262:	0e 94 3c 32 	call	0x6478	; 0x6478 <fputc>
	IdleTask.SchType = PREEMPTIVE;
	nrk_activate_task(&IdleTask);
	
}


    6266:	f8 01       	movw	r30, r16
    6268:	b0 fc       	sbrc	r11, 0
    626a:	85 91       	lpm	r24, Z+
    626c:	b0 fe       	sbrs	r11, 0
    626e:	81 91       	ld	r24, Z+
    6270:	8f 01       	movw	r16, r30
    6272:	88 23       	and	r24, r24
    6274:	a1 f7       	brne	.-24     	; 0x625e <vfprintf+0x106>
    6276:	82 cf       	rjmp	.-252    	; 0x617c <vfprintf+0x24>






    6278:	14 36       	cpi	r17, 0x64	; 100
    627a:	11 f0       	breq	.+4      	; 0x6280 <vfprintf+0x128>
    627c:	19 36       	cpi	r17, 0x69	; 105
    627e:	49 f5       	brne	.+82     	; 0x62d2 <vfprintf+0x17a>
void nrk_start (void)
    6280:	b7 fe       	sbrs	r11, 7
    6282:	0a c0       	rjmp	.+20     	; 0x6298 <vfprintf+0x140>
    6284:	f7 01       	movw	r30, r14
    6286:	60 81       	ld	r22, Z
    6288:	71 81       	ldd	r23, Z+1	; 0x01
    628a:	82 81       	ldd	r24, Z+2	; 0x02
    628c:	93 81       	ldd	r25, Z+3	; 0x03
    628e:	24 e0       	ldi	r18, 0x04	; 4
    6290:	30 e0       	ldi	r19, 0x00	; 0
    6292:	e2 0e       	add	r14, r18
    6294:	f3 1e       	adc	r15, r19
    6296:	0d c0       	rjmp	.+26     	; 0x62b2 <vfprintf+0x15a>
    6298:	f7 01       	movw	r30, r14
    629a:	80 81       	ld	r24, Z
    629c:	91 81       	ldd	r25, Z+1	; 0x01
    629e:	9c 01       	movw	r18, r24
    62a0:	b9 01       	movw	r22, r18
    62a2:	88 27       	eor	r24, r24
    62a4:	77 fd       	sbrc	r23, 7
    62a6:	80 95       	com	r24
    62a8:	98 2f       	mov	r25, r24
    62aa:	42 e0       	ldi	r20, 0x02	; 2
    62ac:	50 e0       	ldi	r21, 0x00	; 0
    62ae:	e4 0e       	add	r14, r20
    62b0:	f5 1e       	adc	r15, r21
{
    62b2:	5f ee       	ldi	r21, 0xEF	; 239
    62b4:	b5 22       	and	r11, r21
	int8_t task_ID;
    62b6:	97 ff       	sbrs	r25, 7
    62b8:	09 c0       	rjmp	.+18     	; 0x62cc <vfprintf+0x174>
	uint8_t i,j;
    62ba:	90 95       	com	r25
    62bc:	80 95       	com	r24
    62be:	70 95       	com	r23
    62c0:	61 95       	neg	r22
    62c2:	7f 4f       	sbci	r23, 0xFF	; 255
    62c4:	8f 4f       	sbci	r24, 0xFF	; 255
    62c6:	9f 4f       	sbci	r25, 0xFF	; 255
//	NRK_STK *x;
//	unsigned char *stkc;

    62c8:	e0 e4       	ldi	r30, 0x40	; 64
    62ca:	be 2a       	or	r11, r30
	/*
		- Get highest priority task from rdy list
    62cc:	2a e0       	ldi	r18, 0x0A	; 10
    62ce:	30 e0       	ldi	r19, 0x00	; 0
    62d0:	3a c0       	rjmp	.+116    	; 0x6346 <vfprintf+0x1ee>
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
    62d2:	10 37       	cpi	r17, 0x70	; 112
    62d4:	b1 f0       	breq	.+44     	; 0x6302 <vfprintf+0x1aa>
    62d6:	11 37       	cpi	r17, 0x71	; 113
    62d8:	30 f4       	brcc	.+12     	; 0x62e6 <vfprintf+0x18e>
    62da:	18 35       	cpi	r17, 0x58	; 88
    62dc:	c9 f0       	breq	.+50     	; 0x6310 <vfprintf+0x1b8>
    62de:	1f 36       	cpi	r17, 0x6F	; 111
    62e0:	09 f0       	breq	.+2      	; 0x62e4 <vfprintf+0x18c>
    62e2:	63 c0       	rjmp	.+198    	; 0x63aa <vfprintf+0x252>
    62e4:	06 c0       	rjmp	.+12     	; 0x62f2 <vfprintf+0x19a>
    62e6:	15 37       	cpi	r17, 0x75	; 117
    62e8:	39 f0       	breq	.+14     	; 0x62f8 <vfprintf+0x1a0>
    62ea:	18 37       	cpi	r17, 0x78	; 120
    62ec:	09 f0       	breq	.+2      	; 0x62f0 <vfprintf+0x198>
    62ee:	5d c0       	rjmp	.+186    	; 0x63aa <vfprintf+0x252>
    62f0:	0a c0       	rjmp	.+20     	; 0x6306 <vfprintf+0x1ae>
    62f2:	28 e0       	ldi	r18, 0x08	; 8
    62f4:	30 e0       	ldi	r19, 0x00	; 0
    62f6:	10 c0       	rjmp	.+32     	; 0x6318 <vfprintf+0x1c0>
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
    62f8:	ff ee       	ldi	r31, 0xEF	; 239
    62fa:	bf 22       	and	r11, r31
    62fc:	2a e0       	ldi	r18, 0x0A	; 10
    62fe:	30 e0       	ldi	r19, 0x00	; 0
    6300:	0b c0       	rjmp	.+22     	; 0x6318 <vfprintf+0x1c0>
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    6302:	20 e1       	ldi	r18, 0x10	; 16
    6304:	b2 2a       	or	r11, r18

			}
		}
    6306:	34 e2       	ldi	r19, 0x24	; 36
    6308:	b3 2a       	or	r11, r19
    630a:	20 e1       	ldi	r18, 0x10	; 16
    630c:	30 e0       	ldi	r19, 0x00	; 0
    630e:	04 c0       	rjmp	.+8      	; 0x6318 <vfprintf+0x1c0>
	}

    }

    6310:	44 e0       	ldi	r20, 0x04	; 4
    6312:	b4 2a       	or	r11, r20
    6314:	20 e1       	ldi	r18, 0x10	; 16
    6316:	32 e0       	ldi	r19, 0x02	; 2
    task_ID = nrk_get_high_ready_task_ID();	
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    6318:	b7 fe       	sbrs	r11, 7
    631a:	0a c0       	rjmp	.+20     	; 0x6330 <vfprintf+0x1d8>
    631c:	f7 01       	movw	r30, r14
    631e:	60 81       	ld	r22, Z
    6320:	71 81       	ldd	r23, Z+1	; 0x01
    6322:	82 81       	ldd	r24, Z+2	; 0x02
    6324:	93 81       	ldd	r25, Z+3	; 0x03
    6326:	44 e0       	ldi	r20, 0x04	; 4
    6328:	50 e0       	ldi	r21, 0x00	; 0
    632a:	e4 0e       	add	r14, r20
    632c:	f5 1e       	adc	r15, r21
    632e:	0b c0       	rjmp	.+22     	; 0x6346 <vfprintf+0x1ee>
    6330:	f7 01       	movw	r30, r14
    6332:	80 81       	ld	r24, Z
    6334:	91 81       	ldd	r25, Z+1	; 0x01
    6336:	ac 01       	movw	r20, r24
    6338:	ba 01       	movw	r22, r20
    633a:	88 27       	eor	r24, r24
    633c:	99 27       	eor	r25, r25
    633e:	e2 e0       	ldi	r30, 0x02	; 2
    6340:	f0 e0       	ldi	r31, 0x00	; 0
    6342:	ee 0e       	add	r14, r30
    6344:	ff 1e       	adc	r15, r31
    6346:	a3 01       	movw	r20, r6
    6348:	0e 94 ba 32 	call	0x6574	; 0x6574 <__ultoa_invert>
    634c:	a8 2e       	mov	r10, r24
    634e:	a6 18       	sub	r10, r6
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP;
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    6350:	0b 2d       	mov	r16, r11
    6352:	11 27       	eor	r17, r17
    6354:	06 ff       	sbrs	r16, 6
    6356:	05 c0       	rjmp	.+10     	; 0x6362 <vfprintf+0x20a>
    
    6358:	b4 01       	movw	r22, r8
    635a:	8d e2       	ldi	r24, 0x2D	; 45
    635c:	90 e0       	ldi	r25, 0x00	; 0
    635e:	0e 94 3c 32 	call	0x6478	; 0x6478 <fputc>
    //TODO: this way on msp
    6362:	04 ff       	sbrs	r16, 4
    6364:	15 c0       	rjmp	.+42     	; 0x6390 <vfprintf+0x238>
    6366:	fe 01       	movw	r30, r28
    6368:	ea 0d       	add	r30, r10
    636a:	f1 1d       	adc	r31, r1
    636c:	80 81       	ld	r24, Z
    636e:	80 33       	cpi	r24, 0x30	; 48
    6370:	79 f0       	breq	.+30     	; 0x6390 <vfprintf+0x238>
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    6372:	b4 01       	movw	r22, r8
    6374:	80 e3       	ldi	r24, 0x30	; 48
    6376:	90 e0       	ldi	r25, 0x00	; 0
    6378:	0e 94 3c 32 	call	0x6478	; 0x6478 <fputc>
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
    637c:	02 ff       	sbrs	r16, 2
    637e:	08 c0       	rjmp	.+16     	; 0x6390 <vfprintf+0x238>
*/
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	
    6380:	00 72       	andi	r16, 0x20	; 32
    6382:	10 70       	andi	r17, 0x00	; 0
    6384:	b4 01       	movw	r22, r8
    6386:	c8 01       	movw	r24, r16
    6388:	88 5a       	subi	r24, 0xA8	; 168
    638a:	9f 4f       	sbci	r25, 0xFF	; 255
    638c:	0e 94 3c 32 	call	0x6478	; 0x6478 <fputc>

    // you should never get here    
    while(1);
    6390:	aa 94       	dec	r10
    6392:	f3 01       	movw	r30, r6
    6394:	ea 0d       	add	r30, r10
    6396:	f1 1d       	adc	r31, r1
    6398:	80 81       	ld	r24, Z
    639a:	b4 01       	movw	r22, r8
    639c:	99 27       	eor	r25, r25
    639e:	0e 94 3c 32 	call	0x6478	; 0x6478 <fputc>
}
    63a2:	aa 20       	and	r10, r10
    63a4:	09 f4       	brne	.+2      	; 0x63a8 <vfprintf+0x250>
    63a6:	fb ce       	rjmp	.-522    	; 0x619e <vfprintf+0x46>
    63a8:	f3 cf       	rjmp	.-26     	; 0x6390 <vfprintf+0x238>


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
	
    63aa:	f4 01       	movw	r30, r8
    63ac:	86 81       	ldd	r24, Z+6	; 0x06
    63ae:	97 81       	ldd	r25, Z+7	; 0x07
    63b0:	e2 e1       	ldi	r30, 0x12	; 18
    63b2:	2b 96       	adiw	r28, 0x0b	; 11
    63b4:	0c 94 bd 34 	jmp	0x697a	; 0x697a <__epilogue_restores__>

000063b8 <strchr_P>:
    63b8:	fc 01       	movw	r30, r24
    63ba:	05 90       	lpm	r0, Z+
    63bc:	06 16       	cp	r0, r22
    63be:	21 f0       	breq	.+8      	; 0x63c8 <strchr_P+0x10>
    63c0:	00 20       	and	r0, r0
    63c2:	d9 f7       	brne	.-10     	; 0x63ba <strchr_P+0x2>
    63c4:	c0 01       	movw	r24, r0
    63c6:	08 95       	ret
    63c8:	31 97       	sbiw	r30, 0x01	; 1
    63ca:	cf 01       	movw	r24, r30
    63cc:	08 95       	ret

000063ce <strcpy>:
    63ce:	fb 01       	movw	r30, r22
    63d0:	dc 01       	movw	r26, r24
    63d2:	01 90       	ld	r0, Z+
    63d4:	0d 92       	st	X+, r0
    63d6:	00 20       	and	r0, r0
    63d8:	e1 f7       	brne	.-8      	; 0x63d2 <strcpy+0x4>
    63da:	08 95       	ret

000063dc <fdevopen>:
   #ifdef NRK_STARTUP_VOLTAGE_CHECK
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif

   #ifdef NRK_REBOOT_ON_ERROR
   #ifndef NRK_WATCHDOG
    63dc:	ef 92       	push	r14
    63de:	ff 92       	push	r15
    63e0:	0f 93       	push	r16
    63e2:	1f 93       	push	r17
    63e4:	cf 93       	push	r28
    63e6:	df 93       	push	r29
    63e8:	8c 01       	movw	r16, r24
    63ea:	7b 01       	movw	r14, r22
   while(1)
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    63ec:	89 2b       	or	r24, r25
    63ee:	11 f4       	brne	.+4      	; 0x63f4 <fdevopen+0x18>
    63f0:	67 2b       	or	r22, r23
    63f2:	d1 f1       	breq	.+116    	; 0x6468 <fdevopen+0x8c>
    		for (i = 0; i < 100; i++)
      			nrk_spin_wait_us (1000);
	   }
    63f4:	6e e0       	ldi	r22, 0x0E	; 14
    63f6:	70 e0       	ldi	r23, 0x00	; 0
    63f8:	81 e0       	ldi	r24, 0x01	; 1
    63fa:	90 e0       	ldi	r25, 0x00	; 0
    63fc:	0e 94 18 33 	call	0x6630	; 0x6630 <calloc>
    6400:	fc 01       	movw	r30, r24
    6402:	00 97       	sbiw	r24, 0x00	; 0
    6404:	89 f1       	breq	.+98     	; 0x6468 <fdevopen+0x8c>
    6406:	dc 01       	movw	r26, r24
   #endif
   #endif

    6408:	80 e8       	ldi	r24, 0x80	; 128
    640a:	83 83       	std	Z+3, r24	; 0x03
    #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
    640c:	e1 14       	cp	r14, r1
    640e:	f1 04       	cpc	r15, r1
    6410:	71 f0       	breq	.+28     	; 0x642e <fdevopen+0x52>
	{
    6412:	f3 86       	std	Z+11, r15	; 0x0b
    6414:	e2 86       	std	Z+10, r14	; 0x0a
    	nrk_watchdog_disable();
    6416:	81 e8       	ldi	r24, 0x81	; 129
    6418:	83 83       	std	Z+3, r24	; 0x03
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
    641a:	80 91 2f 07 	lds	r24, 0x072F
    641e:	90 91 30 07 	lds	r25, 0x0730
    6422:	89 2b       	or	r24, r25
    6424:	21 f4       	brne	.+8      	; 0x642e <fdevopen+0x52>
	}
    6426:	f0 93 30 07 	sts	0x0730, r31
    642a:	e0 93 2f 07 	sts	0x072F, r30
    nrk_watchdog_enable();
    #endif
  
    642e:	01 15       	cp	r16, r1
    6430:	11 05       	cpc	r17, r1
    6432:	e1 f0       	breq	.+56     	; 0x646c <fdevopen+0x90>
  // nrk_stack_pointer_init(); 
    6434:	11 87       	std	Z+9, r17	; 0x09
    6436:	00 87       	std	Z+8, r16	; 0x08
/* 
    6438:	83 81       	ldd	r24, Z+3	; 0x03
    643a:	82 60       	ori	r24, 0x02	; 2
    643c:	83 83       	std	Z+3, r24	; 0x03
    #ifdef KERNEL_STK_ARRAY
    643e:	80 91 31 07 	lds	r24, 0x0731
    6442:	90 91 32 07 	lds	r25, 0x0732
    6446:	89 2b       	or	r24, r25
    6448:	89 f4       	brne	.+34     	; 0x646c <fdevopen+0x90>
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    644a:	f0 93 32 07 	sts	0x0732, r31
    644e:	e0 93 31 07 	sts	0x0731, r30
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    6452:	80 91 33 07 	lds	r24, 0x0733
    6456:	90 91 34 07 	lds	r25, 0x0734
    645a:	89 2b       	or	r24, r25
    645c:	39 f4       	brne	.+14     	; 0x646c <fdevopen+0x90>
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    645e:	f0 93 34 07 	sts	0x0734, r31
    6462:	e0 93 33 07 	sts	0x0733, r30
    6466:	02 c0       	rjmp	.+4      	; 0x646c <fdevopen+0x90>
    6468:	a0 e0       	ldi	r26, 0x00	; 0
    646a:	b0 e0       	ldi	r27, 0x00	; 0
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    646c:	cd 01       	movw	r24, r26
    646e:	e6 e0       	ldi	r30, 0x06	; 6
    6470:	cd b7       	in	r28, 0x3d	; 61
    6472:	de b7       	in	r29, 0x3e	; 62
    6474:	0c 94 c9 34 	jmp	0x6992	; 0x6992 <__epilogue_restores__+0x18>

00006478 <fputc>:
#include <nrk_idle_task.h>
#include <nrk_defs.h>
#include <nrk_cpu.h>
#include <nrk_scheduler.h>
#include <nrk_error.h>
#include <nrk_events.h>
    6478:	0f 93       	push	r16
    647a:	1f 93       	push	r17
    647c:	cf 93       	push	r28
    647e:	df 93       	push	r29
    6480:	8c 01       	movw	r16, r24
    6482:	eb 01       	movw	r28, r22
#include <nrk_stack_check.h>
#include <nrk_status.h>
    6484:	8b 81       	ldd	r24, Y+3	; 0x03
    6486:	99 27       	eor	r25, r25
    6488:	81 ff       	sbrs	r24, 1
    648a:	1b c0       	rjmp	.+54     	; 0x64c2 <fputc+0x4a>
#include <nrk_watchdog.h>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
    648c:	82 ff       	sbrs	r24, 2
    648e:	0d c0       	rjmp	.+26     	; 0x64aa <fputc+0x32>
#include <nrk_stats.h>
    6490:	2e 81       	ldd	r18, Y+6	; 0x06
    6492:	3f 81       	ldd	r19, Y+7	; 0x07
    6494:	8c 81       	ldd	r24, Y+4	; 0x04
    6496:	9d 81       	ldd	r25, Y+5	; 0x05
    6498:	28 17       	cp	r18, r24
    649a:	39 07       	cpc	r19, r25
    649c:	64 f4       	brge	.+24     	; 0x64b6 <fputc+0x3e>

    649e:	e8 81       	ld	r30, Y
    64a0:	f9 81       	ldd	r31, Y+1	; 0x01
    64a2:	01 93       	st	Z+, r16
    64a4:	f9 83       	std	Y+1, r31	; 0x01
    64a6:	e8 83       	st	Y, r30
    64a8:	06 c0       	rjmp	.+12     	; 0x64b6 <fputc+0x3e>
inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};

    64aa:	e8 85       	ldd	r30, Y+8	; 0x08
    64ac:	f9 85       	ldd	r31, Y+9	; 0x09
    64ae:	80 2f       	mov	r24, r16
    64b0:	09 95       	icall
    64b2:	89 2b       	or	r24, r25
    64b4:	31 f4       	brne	.+12     	; 0x64c2 <fputc+0x4a>
inline void nrk_int_enable(void) {
    64b6:	8e 81       	ldd	r24, Y+6	; 0x06
    64b8:	9f 81       	ldd	r25, Y+7	; 0x07
    64ba:	01 96       	adiw	r24, 0x01	; 1
    64bc:	9f 83       	std	Y+7, r25	; 0x07
    64be:	8e 83       	std	Y+6, r24	; 0x06
    64c0:	02 c0       	rjmp	.+4      	; 0x64c6 <fputc+0x4e>
  ENABLE_GLOBAL_INT();
    64c2:	0f ef       	ldi	r16, 0xFF	; 255
    64c4:	1f ef       	ldi	r17, 0xFF	; 255
};

uint8_t nrk_task_init_cnt;

    64c6:	c8 01       	movw	r24, r16
    64c8:	df 91       	pop	r29
    64ca:	cf 91       	pop	r28
    64cc:	1f 91       	pop	r17
    64ce:	0f 91       	pop	r16
    64d0:	08 95       	ret

000064d2 <printf>:
#include <nrk_task.h>
#include <nrk_idle_task.h>
#include <nrk_defs.h>
#include <nrk_cpu.h>
#include <nrk_scheduler.h>
#include <nrk_error.h>
    64d2:	a2 e0       	ldi	r26, 0x02	; 2
    64d4:	b0 e0       	ldi	r27, 0x00	; 0
    64d6:	ef e6       	ldi	r30, 0x6F	; 111
    64d8:	f2 e3       	ldi	r31, 0x32	; 50
    64da:	0c 94 b1 34 	jmp	0x6962	; 0x6962 <__prologue_saves__+0x20>
    64de:	fe 01       	movw	r30, r28
    64e0:	37 96       	adiw	r30, 0x07	; 7
    64e2:	61 91       	ld	r22, Z+
    64e4:	71 91       	ld	r23, Z+
#include <nrk_events.h>
#include <nrk_stack_check.h>
#include <nrk_status.h>
#include <nrk_watchdog.h>
    64e6:	fa 83       	std	Y+2, r31	; 0x02
    64e8:	e9 83       	std	Y+1, r30	; 0x01
#include <nrk_reserve.h>
    64ea:	af 01       	movw	r20, r30
    64ec:	80 91 31 07 	lds	r24, 0x0731
    64f0:	90 91 32 07 	lds	r25, 0x0732
    64f4:	0e 94 ac 30 	call	0x6158	; 0x6158 <vfprintf>
    64f8:	e2 e0       	ldi	r30, 0x02	; 2
    64fa:	22 96       	adiw	r28, 0x02	; 2
    64fc:	0c 94 cd 34 	jmp	0x699a	; 0x699a <__epilogue_restores__+0x20>

00006500 <putchar>:
#include <nrk_cpu.h>
#include <nrk_scheduler.h>
#include <nrk_error.h>
#include <nrk_events.h>
#include <nrk_stack_check.h>
#include <nrk_status.h>
    6500:	60 91 31 07 	lds	r22, 0x0731
    6504:	70 91 32 07 	lds	r23, 0x0732
    6508:	0e 94 3c 32 	call	0x6478	; 0x6478 <fputc>
    650c:	08 95       	ret

0000650e <puts>:
#include <nrk_idle_task.h>
#include <nrk_defs.h>
#include <nrk_cpu.h>
#include <nrk_scheduler.h>
#include <nrk_error.h>
#include <nrk_events.h>
    650e:	0f 93       	push	r16
    6510:	1f 93       	push	r17
    6512:	cf 93       	push	r28
    6514:	df 93       	push	r29
    6516:	8c 01       	movw	r16, r24
#include <nrk_stack_check.h>
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_reserve.h>
    6518:	e0 91 31 07 	lds	r30, 0x0731
    651c:	f0 91 32 07 	lds	r31, 0x0732
    6520:	83 81       	ldd	r24, Z+3	; 0x03
    6522:	81 ff       	sbrs	r24, 1
    6524:	1f c0       	rjmp	.+62     	; 0x6564 <puts+0x56>
    6526:	c0 e0       	ldi	r28, 0x00	; 0
    6528:	d0 e0       	ldi	r29, 0x00	; 0
    652a:	0a c0       	rjmp	.+20     	; 0x6540 <puts+0x32>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
    652c:	fd 01       	movw	r30, r26
    652e:	20 85       	ldd	r18, Z+8	; 0x08
    6530:	31 85       	ldd	r19, Z+9	; 0x09
    6532:	bd 01       	movw	r22, r26
    6534:	f9 01       	movw	r30, r18
    6536:	09 95       	icall
    6538:	89 2b       	or	r24, r25
    653a:	11 f0       	breq	.+4      	; 0x6540 <puts+0x32>
    653c:	cf ef       	ldi	r28, 0xFF	; 255
    653e:	df ef       	ldi	r29, 0xFF	; 255
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

    6540:	f8 01       	movw	r30, r16
    6542:	81 91       	ld	r24, Z+
    6544:	8f 01       	movw	r16, r30
    6546:	a0 91 31 07 	lds	r26, 0x0731
    654a:	b0 91 32 07 	lds	r27, 0x0732
    654e:	88 23       	and	r24, r24
    6550:	69 f7       	brne	.-38     	; 0x652c <puts+0x1e>
inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};
    6552:	fd 01       	movw	r30, r26
    6554:	20 85       	ldd	r18, Z+8	; 0x08
    6556:	31 85       	ldd	r19, Z+9	; 0x09
    6558:	bd 01       	movw	r22, r26
    655a:	8a e0       	ldi	r24, 0x0A	; 10
    655c:	f9 01       	movw	r30, r18
    655e:	09 95       	icall
    6560:	89 2b       	or	r24, r25
    6562:	11 f0       	breq	.+4      	; 0x6568 <puts+0x5a>
    6564:	cf ef       	ldi	r28, 0xFF	; 255
    6566:	df ef       	ldi	r29, 0xFF	; 255

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
};
    6568:	ce 01       	movw	r24, r28
    656a:	df 91       	pop	r29
    656c:	cf 91       	pop	r28
    656e:	1f 91       	pop	r17
    6570:	0f 91       	pop	r16
    6572:	08 95       	ret

00006574 <__ultoa_invert>:
    6574:	fa 01       	movw	r30, r20
    6576:	aa 27       	eor	r26, r26
    6578:	28 30       	cpi	r18, 0x08	; 8
    657a:	51 f1       	breq	.+84     	; 0x65d0 <__ultoa_invert+0x5c>
    657c:	20 31       	cpi	r18, 0x10	; 16
    657e:	81 f1       	breq	.+96     	; 0x65e0 <__ultoa_invert+0x6c>
    6580:	e8 94       	clt
    6582:	6f 93       	push	r22
    6584:	6e 7f       	andi	r22, 0xFE	; 254
    6586:	6e 5f       	subi	r22, 0xFE	; 254
    6588:	7f 4f       	sbci	r23, 0xFF	; 255
    658a:	8f 4f       	sbci	r24, 0xFF	; 255
    658c:	9f 4f       	sbci	r25, 0xFF	; 255
    658e:	af 4f       	sbci	r26, 0xFF	; 255
    6590:	b1 e0       	ldi	r27, 0x01	; 1
    6592:	3e d0       	rcall	.+124    	; 0x6610 <__ultoa_invert+0x9c>
    6594:	b4 e0       	ldi	r27, 0x04	; 4
    6596:	3c d0       	rcall	.+120    	; 0x6610 <__ultoa_invert+0x9c>
    6598:	67 0f       	add	r22, r23
    659a:	78 1f       	adc	r23, r24
    659c:	89 1f       	adc	r24, r25
    659e:	9a 1f       	adc	r25, r26
    65a0:	a1 1d       	adc	r26, r1
    65a2:	68 0f       	add	r22, r24
    65a4:	79 1f       	adc	r23, r25
    65a6:	8a 1f       	adc	r24, r26
    65a8:	91 1d       	adc	r25, r1
    65aa:	a1 1d       	adc	r26, r1
    65ac:	6a 0f       	add	r22, r26
    65ae:	71 1d       	adc	r23, r1
    65b0:	81 1d       	adc	r24, r1
    65b2:	91 1d       	adc	r25, r1
    65b4:	a1 1d       	adc	r26, r1
    65b6:	20 d0       	rcall	.+64     	; 0x65f8 <__ultoa_invert+0x84>
    65b8:	09 f4       	brne	.+2      	; 0x65bc <__ultoa_invert+0x48>
    65ba:	68 94       	set
    65bc:	3f 91       	pop	r19
    65be:	2a e0       	ldi	r18, 0x0A	; 10
    65c0:	26 9f       	mul	r18, r22
    65c2:	11 24       	eor	r1, r1
    65c4:	30 19       	sub	r19, r0
    65c6:	30 5d       	subi	r19, 0xD0	; 208
    65c8:	31 93       	st	Z+, r19
    65ca:	de f6       	brtc	.-74     	; 0x6582 <__ultoa_invert+0xe>
    65cc:	cf 01       	movw	r24, r30
    65ce:	08 95       	ret
    65d0:	46 2f       	mov	r20, r22
    65d2:	47 70       	andi	r20, 0x07	; 7
    65d4:	40 5d       	subi	r20, 0xD0	; 208
    65d6:	41 93       	st	Z+, r20
    65d8:	b3 e0       	ldi	r27, 0x03	; 3
    65da:	0f d0       	rcall	.+30     	; 0x65fa <__ultoa_invert+0x86>
    65dc:	c9 f7       	brne	.-14     	; 0x65d0 <__ultoa_invert+0x5c>
    65de:	f6 cf       	rjmp	.-20     	; 0x65cc <__ultoa_invert+0x58>
    65e0:	46 2f       	mov	r20, r22
    65e2:	4f 70       	andi	r20, 0x0F	; 15
    65e4:	40 5d       	subi	r20, 0xD0	; 208
    65e6:	4a 33       	cpi	r20, 0x3A	; 58
    65e8:	18 f0       	brcs	.+6      	; 0x65f0 <__ultoa_invert+0x7c>
    65ea:	49 5d       	subi	r20, 0xD9	; 217
    65ec:	31 fd       	sbrc	r19, 1
    65ee:	40 52       	subi	r20, 0x20	; 32
    65f0:	41 93       	st	Z+, r20
    65f2:	02 d0       	rcall	.+4      	; 0x65f8 <__ultoa_invert+0x84>
    65f4:	a9 f7       	brne	.-22     	; 0x65e0 <__ultoa_invert+0x6c>
    65f6:	ea cf       	rjmp	.-44     	; 0x65cc <__ultoa_invert+0x58>
    65f8:	b4 e0       	ldi	r27, 0x04	; 4
    65fa:	a6 95       	lsr	r26
    65fc:	97 95       	ror	r25
    65fe:	87 95       	ror	r24
    6600:	77 95       	ror	r23
    6602:	67 95       	ror	r22
    6604:	ba 95       	dec	r27
    6606:	c9 f7       	brne	.-14     	; 0x65fa <__ultoa_invert+0x86>
    6608:	00 97       	sbiw	r24, 0x00	; 0
    660a:	61 05       	cpc	r22, r1
    660c:	71 05       	cpc	r23, r1
    660e:	08 95       	ret
    6610:	9b 01       	movw	r18, r22
    6612:	ac 01       	movw	r20, r24
    6614:	0a 2e       	mov	r0, r26
    6616:	06 94       	lsr	r0
    6618:	57 95       	ror	r21
    661a:	47 95       	ror	r20
    661c:	37 95       	ror	r19
    661e:	27 95       	ror	r18
    6620:	ba 95       	dec	r27
    6622:	c9 f7       	brne	.-14     	; 0x6616 <__ultoa_invert+0xa2>
    6624:	62 0f       	add	r22, r18
    6626:	73 1f       	adc	r23, r19
    6628:	84 1f       	adc	r24, r20
    662a:	95 1f       	adc	r25, r21
    662c:	a0 1d       	adc	r26, r0
    662e:	08 95       	ret

00006630 <calloc>:
#include <nrk_idle_task.h>
#include <nrk_defs.h>
#include <nrk_cpu.h>
#include <nrk_scheduler.h>
#include <nrk_error.h>
#include <nrk_events.h>
    6630:	0f 93       	push	r16
    6632:	1f 93       	push	r17
    6634:	cf 93       	push	r28
    6636:	df 93       	push	r29
#include <nrk_stack_check.h>
#include <nrk_status.h>
#include <nrk_watchdog.h>
    6638:	68 9f       	mul	r22, r24
    663a:	80 01       	movw	r16, r0
    663c:	69 9f       	mul	r22, r25
    663e:	10 0d       	add	r17, r0
    6640:	78 9f       	mul	r23, r24
    6642:	10 0d       	add	r17, r0
    6644:	11 24       	eor	r1, r1
    6646:	c8 01       	movw	r24, r16
    6648:	0e 94 34 33 	call	0x6668	; 0x6668 <malloc>
    664c:	ec 01       	movw	r28, r24
    664e:	00 97       	sbiw	r24, 0x00	; 0
    6650:	29 f0       	breq	.+10     	; 0x665c <calloc+0x2c>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
    6652:	a8 01       	movw	r20, r16
    6654:	60 e0       	ldi	r22, 0x00	; 0
    6656:	70 e0       	ldi	r23, 0x00	; 0
    6658:	0e 94 32 34 	call	0x6864	; 0x6864 <memset>
#include <nrk_stats.h>

    665c:	ce 01       	movw	r24, r28
    665e:	df 91       	pop	r29
    6660:	cf 91       	pop	r28
    6662:	1f 91       	pop	r17
    6664:	0f 91       	pop	r16
    6666:	08 95       	ret

00006668 <malloc>:

/**
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
 *  - Init event list
    6668:	cf 93       	push	r28
    666a:	df 93       	push	r29
    666c:	ac 01       	movw	r20, r24
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    666e:	02 97       	sbiw	r24, 0x02	; 2
    6670:	10 f4       	brcc	.+4      	; 0x6676 <malloc+0xe>
    6672:	42 e0       	ldi	r20, 0x02	; 2
    6674:	50 e0       	ldi	r21, 0x00	; 0
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif

   #ifdef NRK_REBOOT_ON_ERROR
   #ifndef NRK_WATCHDOG
   while(1)
    6676:	a0 91 37 07 	lds	r26, 0x0737
    667a:	b0 91 38 07 	lds	r27, 0x0738
    667e:	fd 01       	movw	r30, r26
    6680:	c0 e0       	ldi	r28, 0x00	; 0
    6682:	d0 e0       	ldi	r29, 0x00	; 0
    6684:	20 e0       	ldi	r18, 0x00	; 0
    6686:	30 e0       	ldi	r19, 0x00	; 0
    6688:	20 c0       	rjmp	.+64     	; 0x66ca <malloc+0x62>
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
    668a:	80 81       	ld	r24, Z
    668c:	91 81       	ldd	r25, Z+1	; 0x01
    668e:	84 17       	cp	r24, r20
    6690:	95 07       	cpc	r25, r21
    6692:	69 f4       	brne	.+26     	; 0x66ae <malloc+0x46>
    6694:	82 81       	ldd	r24, Z+2	; 0x02
    6696:	93 81       	ldd	r25, Z+3	; 0x03
      			nrk_spin_wait_us (1000);
	   }
   #endif
   #endif

    6698:	20 97       	sbiw	r28, 0x00	; 0
    669a:	19 f0       	breq	.+6      	; 0x66a2 <malloc+0x3a>
    #ifdef NRK_WATCHDOG
    669c:	9b 83       	std	Y+3, r25	; 0x03
    669e:	8a 83       	std	Y+2, r24	; 0x02
    66a0:	04 c0       	rjmp	.+8      	; 0x66aa <malloc+0x42>
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    66a2:	90 93 38 07 	sts	0x0738, r25
    66a6:	80 93 37 07 	sts	0x0737, r24
    	nrk_watchdog_disable();
    66aa:	9f 01       	movw	r18, r30
    66ac:	32 c0       	rjmp	.+100    	; 0x6712 <malloc+0xaa>
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    66ae:	48 17       	cp	r20, r24
    66b0:	59 07       	cpc	r21, r25
    66b2:	38 f4       	brcc	.+14     	; 0x66c2 <malloc+0x5a>
    nrk_watchdog_enable();
    66b4:	21 15       	cp	r18, r1
    66b6:	31 05       	cpc	r19, r1
    66b8:	19 f0       	breq	.+6      	; 0x66c0 <malloc+0x58>
    66ba:	82 17       	cp	r24, r18
    66bc:	93 07       	cpc	r25, r19
    66be:	08 f4       	brcc	.+2      	; 0x66c2 <malloc+0x5a>
    66c0:	9c 01       	movw	r18, r24

   #ifdef NRK_REBOOT_ON_ERROR
   #ifndef NRK_WATCHDOG
   while(1)
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    66c2:	ef 01       	movw	r28, r30
    66c4:	02 80       	ldd	r0, Z+2	; 0x02
    66c6:	f3 81       	ldd	r31, Z+3	; 0x03
    66c8:	e0 2d       	mov	r30, r0
   #endif

   #ifdef NRK_REBOOT_ON_ERROR
   #ifndef NRK_WATCHDOG
   while(1)
	   {
    66ca:	30 97       	sbiw	r30, 0x00	; 0
    66cc:	f1 f6       	brne	.-68     	; 0x668a <malloc+0x22>
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    #endif
    66ce:	21 15       	cp	r18, r1
    66d0:	31 05       	cpc	r19, r1
    66d2:	99 f1       	breq	.+102    	; 0x673a <malloc+0xd2>
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    66d4:	c9 01       	movw	r24, r18
    66d6:	84 1b       	sub	r24, r20
    66d8:	95 0b       	sbc	r25, r21
    66da:	04 97       	sbiw	r24, 0x04	; 4
    66dc:	08 f4       	brcc	.+2      	; 0x66e0 <malloc+0x78>
    66de:	a9 01       	movw	r20, r18
    66e0:	e0 e0       	ldi	r30, 0x00	; 0
    66e2:	f0 e0       	ldi	r31, 0x00	; 0
    66e4:	28 c0       	rjmp	.+80     	; 0x6736 <malloc+0xce>
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    66e6:	8d 91       	ld	r24, X+
    66e8:	9c 91       	ld	r25, X
    66ea:	11 97       	sbiw	r26, 0x01	; 1
    66ec:	82 17       	cp	r24, r18
    66ee:	93 07       	cpc	r25, r19
    66f0:	f9 f4       	brne	.+62     	; 0x6730 <malloc+0xc8>
    
    66f2:	48 17       	cp	r20, r24
    66f4:	59 07       	cpc	r21, r25
    66f6:	81 f4       	brne	.+32     	; 0x6718 <malloc+0xb0>
    66f8:	ed 01       	movw	r28, r26
    66fa:	8a 81       	ldd	r24, Y+2	; 0x02
    66fc:	9b 81       	ldd	r25, Y+3	; 0x03
    nrk_cur_task_prio = 0;
    nrk_cur_task_TCB = NULL;
    
    nrk_high_ready_TCB = NULL;
    nrk_high_ready_prio = 0; 
    66fe:	30 97       	sbiw	r30, 0x00	; 0
    6700:	19 f0       	breq	.+6      	; 0x6708 <malloc+0xa0>

    6702:	93 83       	std	Z+3, r25	; 0x03
    6704:	82 83       	std	Z+2, r24	; 0x02
    6706:	04 c0       	rjmp	.+8      	; 0x6710 <malloc+0xa8>
   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
    6708:	90 93 38 07 	sts	0x0738, r25
    670c:	80 93 37 07 	sts	0x0737, r24
   #endif
    6710:	9d 01       	movw	r18, r26
    6712:	2e 5f       	subi	r18, 0xFE	; 254
    6714:	3f 4f       	sbci	r19, 0xFF	; 255
    6716:	4c c0       	rjmp	.+152    	; 0x67b0 <malloc+0x148>
{
    nrk_sem_list[i].count=-1;
    nrk_sem_list[i].value=-1;
    nrk_sem_list[i].resource_ceiling=-1;
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    6718:	84 1b       	sub	r24, r20
    671a:	95 0b       	sbc	r25, r21
    //nrk_resource_ceiling[i]=-1;
    
    671c:	fd 01       	movw	r30, r26
    671e:	e8 0f       	add	r30, r24
    6720:	f9 1f       	adc	r31, r25
}        
    6722:	41 93       	st	Z+, r20
    6724:	51 93       	st	Z+, r21
    for (i= 0; i<NRK_MAX_TASKS; i++)
    6726:	02 97       	sbiw	r24, 0x02	; 2
    6728:	8d 93       	st	X+, r24
    672a:	9c 93       	st	X, r25
	{
    672c:	9f 01       	movw	r18, r30
    672e:	40 c0       	rjmp	.+128    	; 0x67b0 <malloc+0x148>
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
    6730:	fd 01       	movw	r30, r26
    6732:	a2 81       	ldd	r26, Z+2	; 0x02
    6734:	b3 81       	ldd	r27, Z+3	; 0x03
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
*/	
 
    6736:	10 97       	sbiw	r26, 0x00	; 0
    6738:	b1 f6       	brne	.-84     	; 0x66e6 <malloc+0x7e>
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    673a:	80 91 35 07 	lds	r24, 0x0735
    673e:	90 91 36 07 	lds	r25, 0x0736
    6742:	89 2b       	or	r24, r25
    6744:	41 f4       	brne	.+16     	; 0x6756 <malloc+0xee>
	_head_node = NULL;
    6746:	80 91 95 02 	lds	r24, 0x0295
    674a:	90 91 96 02 	lds	r25, 0x0296
    674e:	90 93 36 07 	sts	0x0736, r25
    6752:	80 93 35 07 	sts	0x0735, r24
	_free_node = &_nrk_readyQ[0];
    6756:	20 91 97 02 	lds	r18, 0x0297
    675a:	30 91 98 02 	lds	r19, 0x0298
	
    675e:	21 15       	cp	r18, r1
    6760:	31 05       	cpc	r19, r1
    6762:	49 f4       	brne	.+18     	; 0x6776 <malloc+0x10e>
	
    6764:	8d b7       	in	r24, 0x3d	; 61
    6766:	28 2f       	mov	r18, r24
    6768:	33 27       	eor	r19, r19
    676a:	80 91 93 02 	lds	r24, 0x0293
    676e:	90 91 94 02 	lds	r25, 0x0294
    6772:	28 1b       	sub	r18, r24
    6774:	39 0b       	sbc	r19, r25
	
    6776:	a0 91 35 07 	lds	r26, 0x0735
    677a:	b0 91 36 07 	lds	r27, 0x0736
    677e:	2a 1b       	sub	r18, r26
    6780:	3b 0b       	sbc	r19, r27

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    6782:	24 17       	cp	r18, r20
    6784:	35 07       	cpc	r19, r21
    6786:	90 f0       	brcs	.+36     	; 0x67ac <malloc+0x144>
    6788:	ca 01       	movw	r24, r20
    678a:	02 96       	adiw	r24, 0x02	; 2
    678c:	28 17       	cp	r18, r24
    678e:	39 07       	cpc	r19, r25
    6790:	68 f0       	brcs	.+26     	; 0x67ac <malloc+0x144>
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    6792:	9d 01       	movw	r18, r26
    6794:	2e 5f       	subi	r18, 0xFE	; 254
    6796:	3f 4f       	sbci	r19, 0xFF	; 255
    6798:	c9 01       	movw	r24, r18
    679a:	84 0f       	add	r24, r20
    679c:	95 1f       	adc	r25, r21
    679e:	90 93 36 07 	sts	0x0736, r25
    67a2:	80 93 35 07 	sts	0x0735, r24
	IdleTask.offset.secs = 0;
    67a6:	4d 93       	st	X+, r20
    67a8:	5c 93       	st	X, r21
    67aa:	02 c0       	rjmp	.+4      	; 0x67b0 <malloc+0x148>
	IdleTask.offset.nano_secs = 0;
    67ac:	20 e0       	ldi	r18, 0x00	; 0
    67ae:	30 e0       	ldi	r19, 0x00	; 0
	IdleTask.FirstActivation = TRUE;
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
	nrk_activate_task(&IdleTask);
	
}
    67b0:	c9 01       	movw	r24, r18
    67b2:	df 91       	pop	r29
    67b4:	cf 91       	pop	r28
    67b6:	08 95       	ret

000067b8 <free>:




    67b8:	cf 93       	push	r28
    67ba:	df 93       	push	r29




void nrk_start (void)
    67bc:	00 97       	sbiw	r24, 0x00	; 0
    67be:	09 f4       	brne	.+2      	; 0x67c2 <free+0xa>
    67c0:	4e c0       	rjmp	.+156    	; 0x685e <free+0xa6>
{
	int8_t task_ID;
	uint8_t i,j;
//	NRK_STK *x;
    67c2:	ec 01       	movw	r28, r24
    67c4:	22 97       	sbiw	r28, 0x02	; 2
//	unsigned char *stkc;

    67c6:	1b 82       	std	Y+3, r1	; 0x03
    67c8:	1a 82       	std	Y+2, r1	; 0x02
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    67ca:	a0 91 37 07 	lds	r26, 0x0737
    67ce:	b0 91 38 07 	lds	r27, 0x0738
    67d2:	10 97       	sbiw	r26, 0x00	; 0
    67d4:	11 f1       	breq	.+68     	; 0x681a <free+0x62>
    67d6:	40 e0       	ldi	r20, 0x00	; 0
    67d8:	50 e0       	ldi	r21, 0x00	; 0
    67da:	01 c0       	rjmp	.+2      	; 0x67de <free+0x26>
    {
	task_ID = nrk_task_TCB[i].task_ID;
    67dc:	dc 01       	movw	r26, r24
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);

			}
		}
    67de:	ac 17       	cp	r26, r28
    67e0:	bd 07       	cpc	r27, r29
    67e2:	00 f1       	brcs	.+64     	; 0x6824 <free+0x6c>
	}

    }
    67e4:	bb 83       	std	Y+3, r27	; 0x03
    67e6:	aa 83       	std	Y+2, r26	; 0x02

    67e8:	fe 01       	movw	r30, r28
    67ea:	21 91       	ld	r18, Z+
    67ec:	31 91       	ld	r19, Z+
    67ee:	e2 0f       	add	r30, r18
    67f0:	f3 1f       	adc	r31, r19
    67f2:	ea 17       	cp	r30, r26
    67f4:	fb 07       	cpc	r31, r27
    67f6:	71 f4       	brne	.+28     	; 0x6814 <free+0x5c>
    task_ID = nrk_get_high_ready_task_ID();	
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    67f8:	8d 91       	ld	r24, X+
    67fa:	9c 91       	ld	r25, X
    67fc:	11 97       	sbiw	r26, 0x01	; 1
    67fe:	28 0f       	add	r18, r24
    6800:	39 1f       	adc	r19, r25
    6802:	2e 5f       	subi	r18, 0xFE	; 254
    6804:	3f 4f       	sbci	r19, 0xFF	; 255
    6806:	39 83       	std	Y+1, r19	; 0x01
    6808:	28 83       	st	Y, r18
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    680a:	fd 01       	movw	r30, r26
    680c:	82 81       	ldd	r24, Z+2	; 0x02
    680e:	93 81       	ldd	r25, Z+3	; 0x03
    6810:	9b 83       	std	Y+3, r25	; 0x03
    6812:	8a 83       	std	Y+2, r24	; 0x02
    nrk_cur_task_prio = nrk_high_ready_prio;
		
    6814:	41 15       	cp	r20, r1
    6816:	51 05       	cpc	r21, r1
    6818:	59 f4       	brne	.+22     	; 0x6830 <free+0x78>
//    nrk_stack_pointer_restore();

    681a:	d0 93 38 07 	sts	0x0738, r29
    681e:	c0 93 37 07 	sts	0x0737, r28
    6822:	1d c0       	rjmp	.+58     	; 0x685e <free+0xa6>
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);

			}
    6824:	fd 01       	movw	r30, r26
    6826:	82 81       	ldd	r24, Z+2	; 0x02
    6828:	93 81       	ldd	r25, Z+3	; 0x03
    682a:	ad 01       	movw	r20, r26
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);

    682c:	00 97       	sbiw	r24, 0x00	; 0
    682e:	b1 f6       	brne	.-84     	; 0x67dc <free+0x24>
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    6830:	fa 01       	movw	r30, r20
    6832:	d3 83       	std	Z+3, r29	; 0x03
    6834:	c2 83       	std	Z+2, r28	; 0x02
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    6836:	21 91       	ld	r18, Z+
    6838:	31 91       	ld	r19, Z+
    683a:	e2 0f       	add	r30, r18
    683c:	f3 1f       	adc	r31, r19
    683e:	ec 17       	cp	r30, r28
    6840:	fd 07       	cpc	r31, r29
    6842:	69 f4       	brne	.+26     	; 0x685e <free+0xa6>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    6844:	88 81       	ld	r24, Y
    6846:	99 81       	ldd	r25, Y+1	; 0x01
    6848:	28 0f       	add	r18, r24
    684a:	39 1f       	adc	r19, r25
    684c:	2e 5f       	subi	r18, 0xFE	; 254
    684e:	3f 4f       	sbci	r19, 0xFF	; 255
    6850:	fa 01       	movw	r30, r20
    6852:	31 83       	std	Z+1, r19	; 0x01
    6854:	20 83       	st	Z, r18
    nrk_start_high_ready_task();	
    6856:	8a 81       	ldd	r24, Y+2	; 0x02
    6858:	9b 81       	ldd	r25, Y+3	; 0x03
    685a:	93 83       	std	Z+3, r25	; 0x03
    685c:	82 83       	std	Z+2, r24	; 0x02
    685e:	df 91       	pop	r29
    6860:	cf 91       	pop	r28
    6862:	08 95       	ret

00006864 <memset>:
    6864:	dc 01       	movw	r26, r24
    6866:	01 c0       	rjmp	.+2      	; 0x686a <memset+0x6>
    6868:	6d 93       	st	X+, r22
    686a:	41 50       	subi	r20, 0x01	; 1
    686c:	50 40       	sbci	r21, 0x00	; 0
    686e:	e0 f7       	brcc	.-8      	; 0x6868 <memset+0x4>
    6870:	08 95       	ret

00006872 <__mulsi3>:
    6872:	62 9f       	mul	r22, r18
    6874:	d0 01       	movw	r26, r0
    6876:	73 9f       	mul	r23, r19
    6878:	f0 01       	movw	r30, r0
    687a:	82 9f       	mul	r24, r18
    687c:	e0 0d       	add	r30, r0
    687e:	f1 1d       	adc	r31, r1
    6880:	64 9f       	mul	r22, r20
    6882:	e0 0d       	add	r30, r0
    6884:	f1 1d       	adc	r31, r1
    6886:	92 9f       	mul	r25, r18
    6888:	f0 0d       	add	r31, r0
    688a:	83 9f       	mul	r24, r19
    688c:	f0 0d       	add	r31, r0
    688e:	74 9f       	mul	r23, r20
    6890:	f0 0d       	add	r31, r0
    6892:	65 9f       	mul	r22, r21
    6894:	f0 0d       	add	r31, r0
    6896:	99 27       	eor	r25, r25
    6898:	72 9f       	mul	r23, r18
    689a:	b0 0d       	add	r27, r0
    689c:	e1 1d       	adc	r30, r1
    689e:	f9 1f       	adc	r31, r25
    68a0:	63 9f       	mul	r22, r19
    68a2:	b0 0d       	add	r27, r0
    68a4:	e1 1d       	adc	r30, r1
    68a6:	f9 1f       	adc	r31, r25
    68a8:	bd 01       	movw	r22, r26
    68aa:	cf 01       	movw	r24, r30
    68ac:	11 24       	eor	r1, r1
    68ae:	08 95       	ret

000068b0 <__udivmodhi4>:
    68b0:	aa 1b       	sub	r26, r26
    68b2:	bb 1b       	sub	r27, r27
    68b4:	51 e1       	ldi	r21, 0x11	; 17
    68b6:	07 c0       	rjmp	.+14     	; 0x68c6 <__udivmodhi4_ep>

000068b8 <__udivmodhi4_loop>:
    68b8:	aa 1f       	adc	r26, r26
    68ba:	bb 1f       	adc	r27, r27
    68bc:	a6 17       	cp	r26, r22
    68be:	b7 07       	cpc	r27, r23
    68c0:	10 f0       	brcs	.+4      	; 0x68c6 <__udivmodhi4_ep>
    68c2:	a6 1b       	sub	r26, r22
    68c4:	b7 0b       	sbc	r27, r23

000068c6 <__udivmodhi4_ep>:
    68c6:	88 1f       	adc	r24, r24
    68c8:	99 1f       	adc	r25, r25
    68ca:	5a 95       	dec	r21
    68cc:	a9 f7       	brne	.-22     	; 0x68b8 <__udivmodhi4_loop>
    68ce:	80 95       	com	r24
    68d0:	90 95       	com	r25
    68d2:	bc 01       	movw	r22, r24
    68d4:	cd 01       	movw	r24, r26
    68d6:	08 95       	ret

000068d8 <__divmodhi4>:
    68d8:	97 fb       	bst	r25, 7
    68da:	09 2e       	mov	r0, r25
    68dc:	07 26       	eor	r0, r23
    68de:	0a d0       	rcall	.+20     	; 0x68f4 <__divmodhi4_neg1>
    68e0:	77 fd       	sbrc	r23, 7
    68e2:	04 d0       	rcall	.+8      	; 0x68ec <__divmodhi4_neg2>
    68e4:	e5 df       	rcall	.-54     	; 0x68b0 <__udivmodhi4>
    68e6:	06 d0       	rcall	.+12     	; 0x68f4 <__divmodhi4_neg1>
    68e8:	00 20       	and	r0, r0
    68ea:	1a f4       	brpl	.+6      	; 0x68f2 <__divmodhi4_exit>

000068ec <__divmodhi4_neg2>:
    68ec:	70 95       	com	r23
    68ee:	61 95       	neg	r22
    68f0:	7f 4f       	sbci	r23, 0xFF	; 255

000068f2 <__divmodhi4_exit>:
    68f2:	08 95       	ret

000068f4 <__divmodhi4_neg1>:
    68f4:	f6 f7       	brtc	.-4      	; 0x68f2 <__divmodhi4_exit>
    68f6:	90 95       	com	r25
    68f8:	81 95       	neg	r24
    68fa:	9f 4f       	sbci	r25, 0xFF	; 255
    68fc:	08 95       	ret

000068fe <__udivmodsi4>:
    68fe:	a1 e2       	ldi	r26, 0x21	; 33
    6900:	1a 2e       	mov	r1, r26
    6902:	aa 1b       	sub	r26, r26
    6904:	bb 1b       	sub	r27, r27
    6906:	fd 01       	movw	r30, r26
    6908:	0d c0       	rjmp	.+26     	; 0x6924 <__udivmodsi4_ep>

0000690a <__udivmodsi4_loop>:
    690a:	aa 1f       	adc	r26, r26
    690c:	bb 1f       	adc	r27, r27
    690e:	ee 1f       	adc	r30, r30
    6910:	ff 1f       	adc	r31, r31
    6912:	a2 17       	cp	r26, r18
    6914:	b3 07       	cpc	r27, r19
    6916:	e4 07       	cpc	r30, r20
    6918:	f5 07       	cpc	r31, r21
    691a:	20 f0       	brcs	.+8      	; 0x6924 <__udivmodsi4_ep>
    691c:	a2 1b       	sub	r26, r18
    691e:	b3 0b       	sbc	r27, r19
    6920:	e4 0b       	sbc	r30, r20
    6922:	f5 0b       	sbc	r31, r21

00006924 <__udivmodsi4_ep>:
    6924:	66 1f       	adc	r22, r22
    6926:	77 1f       	adc	r23, r23
    6928:	88 1f       	adc	r24, r24
    692a:	99 1f       	adc	r25, r25
    692c:	1a 94       	dec	r1
    692e:	69 f7       	brne	.-38     	; 0x690a <__udivmodsi4_loop>
    6930:	60 95       	com	r22
    6932:	70 95       	com	r23
    6934:	80 95       	com	r24
    6936:	90 95       	com	r25
    6938:	9b 01       	movw	r18, r22
    693a:	ac 01       	movw	r20, r24
    693c:	bd 01       	movw	r22, r26
    693e:	cf 01       	movw	r24, r30
    6940:	08 95       	ret

00006942 <__prologue_saves__>:
    6942:	2f 92       	push	r2
    6944:	3f 92       	push	r3
    6946:	4f 92       	push	r4
    6948:	5f 92       	push	r5
    694a:	6f 92       	push	r6
    694c:	7f 92       	push	r7
    694e:	8f 92       	push	r8
    6950:	9f 92       	push	r9
    6952:	af 92       	push	r10
    6954:	bf 92       	push	r11
    6956:	cf 92       	push	r12
    6958:	df 92       	push	r13
    695a:	ef 92       	push	r14
    695c:	ff 92       	push	r15
    695e:	0f 93       	push	r16
    6960:	1f 93       	push	r17
    6962:	cf 93       	push	r28
    6964:	df 93       	push	r29
    6966:	cd b7       	in	r28, 0x3d	; 61
    6968:	de b7       	in	r29, 0x3e	; 62
    696a:	ca 1b       	sub	r28, r26
    696c:	db 0b       	sbc	r29, r27
    696e:	0f b6       	in	r0, 0x3f	; 63
    6970:	f8 94       	cli
    6972:	de bf       	out	0x3e, r29	; 62
    6974:	0f be       	out	0x3f, r0	; 63
    6976:	cd bf       	out	0x3d, r28	; 61
    6978:	09 94       	ijmp

0000697a <__epilogue_restores__>:
    697a:	2a 88       	ldd	r2, Y+18	; 0x12
    697c:	39 88       	ldd	r3, Y+17	; 0x11
    697e:	48 88       	ldd	r4, Y+16	; 0x10
    6980:	5f 84       	ldd	r5, Y+15	; 0x0f
    6982:	6e 84       	ldd	r6, Y+14	; 0x0e
    6984:	7d 84       	ldd	r7, Y+13	; 0x0d
    6986:	8c 84       	ldd	r8, Y+12	; 0x0c
    6988:	9b 84       	ldd	r9, Y+11	; 0x0b
    698a:	aa 84       	ldd	r10, Y+10	; 0x0a
    698c:	b9 84       	ldd	r11, Y+9	; 0x09
    698e:	c8 84       	ldd	r12, Y+8	; 0x08
    6990:	df 80       	ldd	r13, Y+7	; 0x07
    6992:	ee 80       	ldd	r14, Y+6	; 0x06
    6994:	fd 80       	ldd	r15, Y+5	; 0x05
    6996:	0c 81       	ldd	r16, Y+4	; 0x04
    6998:	1b 81       	ldd	r17, Y+3	; 0x03
    699a:	aa 81       	ldd	r26, Y+2	; 0x02
    699c:	b9 81       	ldd	r27, Y+1	; 0x01
    699e:	ce 0f       	add	r28, r30
    69a0:	d1 1d       	adc	r29, r1
    69a2:	0f b6       	in	r0, 0x3f	; 63
    69a4:	f8 94       	cli
    69a6:	de bf       	out	0x3e, r29	; 62
    69a8:	0f be       	out	0x3f, r0	; 63
    69aa:	cd bf       	out	0x3d, r28	; 61
    69ac:	ed 01       	movw	r28, r26
    69ae:	08 95       	ret

000069b0 <__eeprom_read_byte_1F2021>:
    69b0:	f9 99       	sbic	0x1f, 1	; 31
    69b2:	fe cf       	rjmp	.-4      	; 0x69b0 <__eeprom_read_byte_1F2021>
    69b4:	b2 bd       	out	0x22, r27	; 34
    69b6:	a1 bd       	out	0x21, r26	; 33
    69b8:	f8 9a       	sbi	0x1f, 0	; 31
    69ba:	11 96       	adiw	r26, 0x01	; 1
    69bc:	00 b4       	in	r0, 0x20	; 32
    69be:	08 95       	ret

000069c0 <__eeprom_write_byte_1F2021>:
    69c0:	f9 99       	sbic	0x1f, 1	; 31
    69c2:	fe cf       	rjmp	.-4      	; 0x69c0 <__eeprom_write_byte_1F2021>
    69c4:	b2 bd       	out	0x22, r27	; 34
    69c6:	a1 bd       	out	0x21, r26	; 33
    69c8:	00 bc       	out	0x20, r0	; 32
    69ca:	11 96       	adiw	r26, 0x01	; 1
    69cc:	0f b6       	in	r0, 0x3f	; 63
    69ce:	f8 94       	cli
    69d0:	fa 9a       	sbi	0x1f, 2	; 31
    69d2:	f9 9a       	sbi	0x1f, 1	; 31
    69d4:	0f be       	out	0x3f, r0	; 63
    69d6:	08 95       	ret

000069d8 <_exit>:
    69d8:	ff cf       	rjmp	.-2      	; 0x69d8 <_exit>
