
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000186  00800200  00005dba  00005e2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005dba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004c2  00800386  00005f40  00005fb4  2**0
                  ALLOC
  3 .stab         0000d944  00000000  00000000  00005fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00005931  00000000  00000000  000138f8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__ctors_end>
       4:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <__vector_1>
       8:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
       c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      10:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      14:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      18:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      1c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      20:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      24:	0c 94 ca 29 	jmp	0x5394	; 0x5394 <__vector_9>
      28:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      2c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      30:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      34:	0c 94 7d 27 	jmp	0x4efa	; 0x4efa <__vector_13>
      38:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      3c:	0c 94 7d 27 	jmp	0x4efa	; 0x4efa <__vector_13>
      40:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      44:	0c 94 b0 27 	jmp	0x4f60	; 0x4f60 <__vector_17>
      48:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      4c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      50:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      54:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      58:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      5c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      60:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      64:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      68:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      6c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      70:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      74:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      78:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      7c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      80:	0c 94 ba 27 	jmp	0x4f74	; 0x4f74 <__vector_32>
      84:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      88:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      8c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      90:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      94:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      98:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      9c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      a0:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      a4:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      a8:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      ac:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      b0:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      b4:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      b8:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      bc:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      c0:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      c4:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      c8:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      cc:	b2 19       	sub	r27, r2
      ce:	b8 19       	sub	r27, r8
      d0:	bb 19       	sub	r27, r11
      d2:	be 19       	sub	r27, r14
      d4:	c1 19       	sub	r28, r1
      d6:	c4 19       	sub	r28, r4
      d8:	ca 19       	sub	r28, r10
      da:	c7 19       	sub	r28, r7
      dc:	cd 19       	sub	r28, r13
      de:	d0 19       	sub	r29, r0
      e0:	d3 19       	sub	r29, r3
      e2:	d9 19       	sub	r29, r9
      e4:	dc 19       	sub	r29, r12
      e6:	df 19       	sub	r29, r15
      e8:	e2 19       	sub	r30, r2
      ea:	d6 19       	sub	r29, r6
      ec:	af 19       	sub	r26, r15
      ee:	b5 19       	sub	r27, r5

000000f0 <__c.2358>:
      f0:	4e 61 6e 6f 2d 52 4b 20 56 65 72 73 69 6f 6e 20     Nano-RK Version 
	...

00000101 <__c.2397>:
     101:	0d 0a 4e 61 6e 6f 2d 52 4b 20 54 61 73 6b 20 53     ..Nano-RK Task S
     111:	74 61 74 69 73 74 69 63 73 3a 0d 0a 00              tatistics:...

0000011e <__c.2375>:
     11e:	0d 0a 00                                            ...

00000121 <__c.2373>:
     121:	0d 0a 20 20 20 4f 76 65 72 66 6c 6f 77 20 45 72     ..   Overflow Er
     131:	72 6f 72 20 53 74 61 74 75 73 3a 20 00              ror Status: .

0000013e <__c.2371>:
     13e:	0d 0a 20 20 20 4b 65 72 6e 65 6c 20 56 69 6f 6c     ..   Kernel Viol
     14e:	61 74 69 6f 6e 73 3a 20 00                          ations: .

00000157 <__c.2369>:
     157:	0d 0a 20 20 20 50 72 65 65 6d 70 74 69 6f 6e 73     ..   Preemptions
     167:	3a 20 00                                            : .

0000016a <__c.2367>:
     16a:	0d 0a 20 20 20 53 77 61 70 2d 69 6e 73 3a 20 00     ..   Swap-ins: .

0000017a <__c.2365>:
     17a:	0d 0a 20 20 20 54 69 6d 65 20 5b 4d 69 6e 2c 4c     ..   Time [Min,L
     18a:	61 73 74 2c 4d 61 78 5d 3a 20 00                    ast,Max]: .

00000195 <__c.2363>:
     195:	0d 0a 20 20 20 54 6f 74 61 6c 20 43 50 55 3a 20     ..   Total CPU: 
	...

000001a6 <__c.2361>:
     1a6:	0d 0a 20 20 20 49 64 6c 65 20 54 61 73 6b 20 44     ..   Idle Task D
     1b6:	65 65 70 20 53 6c 65 65 70 20 54 69 6d 65 3a 20     eep Sleep Time: 
	...

000001c7 <__c.2359>:
     1c7:	0d 0a 20 20 20 54 6f 74 61 6c 20 53 79 73 74 65     ..   Total Syste
     1d7:	6d 20 55 70 74 69 6d 65 3a 20 00                    m Uptime: .

000001e2 <__c.2357>:
     1e2:	20 54 61 73 6b 20 49 44 3a 20 00                     Task ID: .

000001ed <__c.2381>:
     1ed:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001f4 <__c.2378>:
     1f4:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     204:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

0000020f <__c.2375>:
     20f:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     21f:	20 53 69 67 6e 61 6c 00                              Signal.

00000227 <__c.2372>:
     227:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     237:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000247 <__c.2369>:
     247:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     257:	72 6f 72 00                                         ror.

0000025b <__c.2366>:
     25b:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

0000026c <__c.2363>:
     26c:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000027b <__c.2360>:
     27b:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     28b:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000296 <__c.2357>:
     296:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000002a2 <__c.2354>:
     2a2:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2b2:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2c2:	20 6f 6b 3f 00                                       ok?.

000002c7 <__c.2351>:
     2c7:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2d7:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002e5 <__c.2348>:
     2e5:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     2f5:	72 74 00                                            rt.

000002f8 <__c.2345>:
     2f8:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     308:	49 44 00                                            ID.

0000030b <__c.2342>:
     30b:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     31b:	20 57 61 6b 65 75 70 00                              Wakeup.

00000323 <__c.2339>:
     323:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     333:	6c 61 74 65 64 00                                   lated.

00000339 <__c.2336>:
     339:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     349:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000354 <__c.2333>:
     354:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     364:	69 6e 74 65 72 00                                   inter.

0000036a <__c.2330>:
     36a:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     37a:	6c 6f 77 00                                         low.

0000037e <__c.2326>:
     37e:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     38e:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     39e:	6e 6f 75 67 68 21 00                                nough!.

000003a5 <__c.2323>:
     3a5:	29 3a 20 00                                         ): .

000003a9 <__c.2321>:
     3a9:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000003b5 <__c.2254>:
     3b5:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000003c4 <__c.2047>:
     3c4:	45 46 47 65 66 67 00                                EFGefg.

000003cb <__c.2041>:
     3cb:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

000003dc <__ctors_end>:
     3dc:	11 24       	eor	r1, r1
     3de:	1f be       	out	0x3f, r1	; 63
     3e0:	cf ef       	ldi	r28, 0xFF	; 255
     3e2:	d1 e2       	ldi	r29, 0x21	; 33
     3e4:	de bf       	out	0x3e, r29	; 62
     3e6:	cd bf       	out	0x3d, r28	; 61

000003e8 <__do_copy_data>:
     3e8:	13 e0       	ldi	r17, 0x03	; 3
     3ea:	a0 e0       	ldi	r26, 0x00	; 0
     3ec:	b2 e0       	ldi	r27, 0x02	; 2
     3ee:	ea eb       	ldi	r30, 0xBA	; 186
     3f0:	fd e5       	ldi	r31, 0x5D	; 93
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	0b bf       	out	0x3b, r16	; 59
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <__do_copy_data+0x14>
     3f8:	07 90       	elpm	r0, Z+
     3fa:	0d 92       	st	X+, r0
     3fc:	a6 38       	cpi	r26, 0x86	; 134
     3fe:	b1 07       	cpc	r27, r17
     400:	d9 f7       	brne	.-10     	; 0x3f8 <__do_copy_data+0x10>

00000402 <__do_clear_bss>:
     402:	18 e0       	ldi	r17, 0x08	; 8
     404:	a6 e8       	ldi	r26, 0x86	; 134
     406:	b3 e0       	ldi	r27, 0x03	; 3
     408:	01 c0       	rjmp	.+2      	; 0x40c <.do_clear_bss_start>

0000040a <.do_clear_bss_loop>:
     40a:	1d 92       	st	X+, r1

0000040c <.do_clear_bss_start>:
     40c:	a8 34       	cpi	r26, 0x48	; 72
     40e:	b1 07       	cpc	r27, r17
     410:	e1 f7       	brne	.-8      	; 0x40a <.do_clear_bss_loop>
     412:	0e 94 90 04 	call	0x920	; 0x920 <main>
     416:	0c 94 dc 2e 	jmp	0x5db8	; 0x5db8 <_exit>

0000041a <__bad_interrupt>:
     41a:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__vector_default>

0000041e <kill_stack>:


}

uint8_t kill_stack(uint8_t val)
{
     41e:	af 92       	push	r10
     420:	bf 92       	push	r11
     422:	df 92       	push	r13
     424:	ef 92       	push	r14
     426:	ff 92       	push	r15
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	2a 97       	sbiw	r28, 0x0a	; 10
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
     440:	d8 2e       	mov	r13, r24
     442:	7e 01       	movw	r14, r28
     444:	08 94       	sec
     446:	e1 1c       	adc	r14, r1
     448:	f1 1c       	adc	r15, r1
     44a:	87 01       	movw	r16, r14
     44c:	9e 2d       	mov	r25, r14
char bad_memory[10];
uint8_t i;
for(i=0; i<10; i++ ) bad_memory[i]=i;
     44e:	9e 01       	movw	r18, r28
     450:	25 5f       	subi	r18, 0xF5	; 245
     452:	3f 4f       	sbci	r19, 0xFF	; 255
     454:	80 2f       	mov	r24, r16
     456:	89 1b       	sub	r24, r25
     458:	f8 01       	movw	r30, r16
     45a:	81 93       	st	Z+, r24
     45c:	8f 01       	movw	r16, r30
     45e:	e2 17       	cp	r30, r18
     460:	f3 07       	cpc	r31, r19
     462:	c1 f7       	brne	.-16     	; 0x454 <kill_stack+0x36>
for(i=0; i<10; i++ ) printf( "%d ", bad_memory[i]);
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	a8 2e       	mov	r10, r24
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	b8 2e       	mov	r11, r24
     46c:	f7 01       	movw	r30, r14
     46e:	81 91       	ld	r24, Z+
     470:	7f 01       	movw	r14, r30
     472:	99 27       	eor	r25, r25
     474:	9f 93       	push	r25
     476:	8f 93       	push	r24
     478:	bf 92       	push	r11
     47a:	af 92       	push	r10
     47c:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	e0 16       	cp	r14, r16
     48a:	f1 06       	cpc	r15, r17
     48c:	79 f7       	brne	.-34     	; 0x46c <kill_stack+0x4e>
   printf( "Die Stack %d\r\n",val );
     48e:	8d 2d       	mov	r24, r13
     490:	99 27       	eor	r25, r25
     492:	9f 93       	push	r25
     494:	8f 93       	push	r24
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	92 e0       	ldi	r25, 0x02	; 2
     49a:	9f 93       	push	r25
     49c:	8f 93       	push	r24
     49e:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
if(val>1) kill_stack(val-1);
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	fd 15       	cp	r31, r13
     4ae:	20 f4       	brcc	.+8      	; 0x4b8 <kill_stack+0x9a>
     4b0:	8d 2d       	mov	r24, r13
     4b2:	81 50       	subi	r24, 0x01	; 1
     4b4:	0e 94 0f 02 	call	0x41e	; 0x41e <kill_stack>
return 0;
}
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	2a 96       	adiw	r28, 0x0a	; 10
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	df 90       	pop	r13
     4d6:	bf 90       	pop	r11
     4d8:	af 90       	pop	r10
     4da:	08 95       	ret

000004dc <nrk_create_taskset>:
	}
}

void
nrk_create_taskset()
{
     4dc:	bf 92       	push	r11
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
  nrk_task_set_entry_function( &TaskOne, Task1);
     4ea:	0d e2       	ldi	r16, 0x2D	; 45
     4ec:	14 e0       	ldi	r17, 0x04	; 4
     4ee:	61 e4       	ldi	r22, 0x41	; 65
     4f0:	74 e0       	ldi	r23, 0x04	; 4
     4f2:	c8 01       	movw	r24, r16
     4f4:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_task_set_entry_function>
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
     4f8:	40 e8       	ldi	r20, 0x80	; 128
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	6f ef       	ldi	r22, 0xFF	; 255
     4fe:	74 e0       	ldi	r23, 0x04	; 4
     500:	c8 01       	movw	r24, r16
     502:	0e 94 a6 2a 	call	0x554c	; 0x554c <nrk_task_set_stk>
  TaskOne.prio = 1;
     506:	bb 24       	eor	r11, r11
     508:	b3 94       	inc	r11
     50a:	b0 92 35 04 	sts	0x0435, r11
  TaskOne.FirstActivation = TRUE;
     50e:	b0 92 34 04 	sts	0x0434, r11
  TaskOne.Type = BASIC_TASK;
     512:	b0 92 36 04 	sts	0x0436, r11
  TaskOne.SchType = PREEMPTIVE;
     516:	b0 92 37 04 	sts	0x0437, r11
  TaskOne.period.secs = 0;
     51a:	10 92 38 04 	sts	0x0438, r1
     51e:	10 92 39 04 	sts	0x0439, r1
     522:	10 92 3a 04 	sts	0x043A, r1
     526:	10 92 3b 04 	sts	0x043B, r1
  TaskOne.period.nano_secs = 50*NANOS_PER_MS;
     52a:	80 e8       	ldi	r24, 0x80	; 128
     52c:	90 ef       	ldi	r25, 0xF0	; 240
     52e:	aa ef       	ldi	r26, 0xFA	; 250
     530:	b2 e0       	ldi	r27, 0x02	; 2
     532:	80 93 3c 04 	sts	0x043C, r24
     536:	90 93 3d 04 	sts	0x043D, r25
     53a:	a0 93 3e 04 	sts	0x043E, r26
     53e:	b0 93 3f 04 	sts	0x043F, r27
  TaskOne.cpu_reserve.secs = 0;
     542:	10 92 40 04 	sts	0x0440, r1
     546:	10 92 41 04 	sts	0x0441, r1
     54a:	10 92 42 04 	sts	0x0442, r1
     54e:	10 92 43 04 	sts	0x0443, r1
  TaskOne.cpu_reserve.nano_secs = 50*NANOS_PER_MS;
     552:	80 93 44 04 	sts	0x0444, r24
     556:	90 93 45 04 	sts	0x0445, r25
     55a:	a0 93 46 04 	sts	0x0446, r26
     55e:	b0 93 47 04 	sts	0x0447, r27
  TaskOne.offset.secs = 0;
     562:	10 92 48 04 	sts	0x0448, r1
     566:	10 92 49 04 	sts	0x0449, r1
     56a:	10 92 4a 04 	sts	0x044A, r1
     56e:	10 92 4b 04 	sts	0x044B, r1
  TaskOne.offset.nano_secs= 0;
     572:	10 92 4c 04 	sts	0x044C, r1
     576:	10 92 4d 04 	sts	0x044D, r1
     57a:	10 92 4e 04 	sts	0x044E, r1
     57e:	10 92 4f 04 	sts	0x044F, r1
  nrk_activate_task (&TaskOne);
     582:	c8 01       	movw	r24, r16
     584:	0e 94 14 21 	call	0x4228	; 0x4228 <nrk_activate_task>

  nrk_task_set_entry_function( &TaskTwo, Task2);
     588:	0a e1       	ldi	r16, 0x1A	; 26
     58a:	17 e0       	ldi	r17, 0x07	; 7
     58c:	62 e1       	ldi	r22, 0x12	; 18
     58e:	74 e0       	ldi	r23, 0x04	; 4
     590:	c8 01       	movw	r24, r16
     592:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_task_set_entry_function>
  nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
     596:	40 e8       	ldi	r20, 0x80	; 128
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	68 e5       	ldi	r22, 0x58	; 88
     59c:	74 e0       	ldi	r23, 0x04	; 4
     59e:	c8 01       	movw	r24, r16
     5a0:	0e 94 a6 2a 	call	0x554c	; 0x554c <nrk_task_set_stk>
  TaskTwo.prio = 2;
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	80 93 22 07 	sts	0x0722, r24
  TaskTwo.FirstActivation = TRUE;
     5aa:	b0 92 21 07 	sts	0x0721, r11
  TaskTwo.Type = BASIC_TASK;
     5ae:	b0 92 23 07 	sts	0x0723, r11
  TaskTwo.SchType = PREEMPTIVE;
     5b2:	b0 92 24 07 	sts	0x0724, r11
  TaskTwo.period.secs = 0;
     5b6:	10 92 25 07 	sts	0x0725, r1
     5ba:	10 92 26 07 	sts	0x0726, r1
     5be:	10 92 27 07 	sts	0x0727, r1
     5c2:	10 92 28 07 	sts	0x0728, r1
  TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	95 e6       	ldi	r25, 0x65	; 101
     5ca:	ad ec       	ldi	r26, 0xCD	; 205
     5cc:	bd e1       	ldi	r27, 0x1D	; 29
     5ce:	80 93 29 07 	sts	0x0729, r24
     5d2:	90 93 2a 07 	sts	0x072A, r25
     5d6:	a0 93 2b 07 	sts	0x072B, r26
     5da:	b0 93 2c 07 	sts	0x072C, r27
  TaskTwo.cpu_reserve.secs = 0;
     5de:	10 92 2d 07 	sts	0x072D, r1
     5e2:	10 92 2e 07 	sts	0x072E, r1
     5e6:	10 92 2f 07 	sts	0x072F, r1
     5ea:	10 92 30 07 	sts	0x0730, r1
  TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     5ee:	c1 2c       	mov	r12, r1
     5f0:	91 ee       	ldi	r25, 0xE1	; 225
     5f2:	d9 2e       	mov	r13, r25
     5f4:	95 ef       	ldi	r25, 0xF5	; 245
     5f6:	e9 2e       	mov	r14, r25
     5f8:	95 e0       	ldi	r25, 0x05	; 5
     5fa:	f9 2e       	mov	r15, r25
     5fc:	c0 92 31 07 	sts	0x0731, r12
     600:	d0 92 32 07 	sts	0x0732, r13
     604:	e0 92 33 07 	sts	0x0733, r14
     608:	f0 92 34 07 	sts	0x0734, r15
  TaskTwo.offset.secs = 0;
     60c:	10 92 35 07 	sts	0x0735, r1
     610:	10 92 36 07 	sts	0x0736, r1
     614:	10 92 37 07 	sts	0x0737, r1
     618:	10 92 38 07 	sts	0x0738, r1
  TaskTwo.offset.nano_secs= 0;
     61c:	10 92 39 07 	sts	0x0739, r1
     620:	10 92 3a 07 	sts	0x073A, r1
     624:	10 92 3b 07 	sts	0x073B, r1
     628:	10 92 3c 07 	sts	0x073C, r1
  //nrk_activate_task (&TaskTwo);


  nrk_task_set_entry_function( &TaskThree, Task3);
     62c:	0c ed       	ldi	r16, 0xDC	; 220
     62e:	14 e0       	ldi	r17, 0x04	; 4
     630:	63 ee       	ldi	r22, 0xE3	; 227
     632:	73 e0       	ldi	r23, 0x03	; 3
     634:	c8 01       	movw	r24, r16
     636:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_task_set_entry_function>
  nrk_task_set_stk( &TaskThree, Stack3, NRK_APP_STACKSIZE);
     63a:	40 e8       	ldi	r20, 0x80	; 128
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	6b ea       	ldi	r22, 0xAB	; 171
     640:	73 e0       	ldi	r23, 0x03	; 3
     642:	c8 01       	movw	r24, r16
     644:	0e 94 a6 2a 	call	0x554c	; 0x554c <nrk_task_set_stk>
  TaskThree.prio = 3;
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	80 93 e4 04 	sts	0x04E4, r24
  TaskThree.FirstActivation = TRUE;
     64e:	b0 92 e3 04 	sts	0x04E3, r11
  TaskThree.Type = BASIC_TASK;
     652:	b0 92 e5 04 	sts	0x04E5, r11
  TaskThree.SchType = PREEMPTIVE;
     656:	b0 92 e6 04 	sts	0x04E6, r11
  TaskThree.period.secs = 1;
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	a0 e0       	ldi	r26, 0x00	; 0
     660:	b0 e0       	ldi	r27, 0x00	; 0
     662:	80 93 e7 04 	sts	0x04E7, r24
     666:	90 93 e8 04 	sts	0x04E8, r25
     66a:	a0 93 e9 04 	sts	0x04E9, r26
     66e:	b0 93 ea 04 	sts	0x04EA, r27
  TaskThree.period.nano_secs = 0;
     672:	10 92 eb 04 	sts	0x04EB, r1
     676:	10 92 ec 04 	sts	0x04EC, r1
     67a:	10 92 ed 04 	sts	0x04ED, r1
     67e:	10 92 ee 04 	sts	0x04EE, r1
  TaskThree.cpu_reserve.secs = 0;
     682:	10 92 ef 04 	sts	0x04EF, r1
     686:	10 92 f0 04 	sts	0x04F0, r1
     68a:	10 92 f1 04 	sts	0x04F1, r1
     68e:	10 92 f2 04 	sts	0x04F2, r1
  TaskThree.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     692:	c0 92 f3 04 	sts	0x04F3, r12
     696:	d0 92 f4 04 	sts	0x04F4, r13
     69a:	e0 92 f5 04 	sts	0x04F5, r14
     69e:	f0 92 f6 04 	sts	0x04F6, r15
  TaskThree.offset.secs = 0;
     6a2:	10 92 f7 04 	sts	0x04F7, r1
     6a6:	10 92 f8 04 	sts	0x04F8, r1
     6aa:	10 92 f9 04 	sts	0x04F9, r1
     6ae:	10 92 fa 04 	sts	0x04FA, r1
  TaskThree.offset.nano_secs= 0;
     6b2:	10 92 fb 04 	sts	0x04FB, r1
     6b6:	10 92 fc 04 	sts	0x04FC, r1
     6ba:	10 92 fd 04 	sts	0x04FD, r1
     6be:	10 92 fe 04 	sts	0x04FE, r1
  //nrk_activate_task (&TaskThree);


  nrk_task_set_entry_function( &TaskFour, Task4);
     6c2:	06 e8       	ldi	r16, 0x86	; 134
     6c4:	13 e0       	ldi	r17, 0x03	; 3
     6c6:	64 eb       	ldi	r22, 0xB4	; 180
     6c8:	73 e0       	ldi	r23, 0x03	; 3
     6ca:	c8 01       	movw	r24, r16
     6cc:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_task_set_entry_function>
  nrk_task_set_stk( &TaskFour, Stack4, NRK_APP_STACKSIZE);
     6d0:	40 e8       	ldi	r20, 0x80	; 128
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	6a e9       	ldi	r22, 0x9A	; 154
     6d6:	76 e0       	ldi	r23, 0x06	; 6
     6d8:	c8 01       	movw	r24, r16
     6da:	0e 94 a6 2a 	call	0x554c	; 0x554c <nrk_task_set_stk>
  TaskFour.prio = 4;
     6de:	84 e0       	ldi	r24, 0x04	; 4
     6e0:	80 93 8e 03 	sts	0x038E, r24
  TaskFour.FirstActivation = TRUE;
     6e4:	b0 92 8d 03 	sts	0x038D, r11
  TaskFour.Type = BASIC_TASK;
     6e8:	b0 92 8f 03 	sts	0x038F, r11
  TaskFour.SchType = PREEMPTIVE;
     6ec:	b0 92 90 03 	sts	0x0390, r11
  TaskFour.period.secs = 2;
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	80 93 91 03 	sts	0x0391, r24
     6fc:	90 93 92 03 	sts	0x0392, r25
     700:	a0 93 93 03 	sts	0x0393, r26
     704:	b0 93 94 03 	sts	0x0394, r27
  TaskFour.period.nano_secs = 0;
     708:	10 92 95 03 	sts	0x0395, r1
     70c:	10 92 96 03 	sts	0x0396, r1
     710:	10 92 97 03 	sts	0x0397, r1
     714:	10 92 98 03 	sts	0x0398, r1
  TaskFour.cpu_reserve.secs = 0;
     718:	10 92 99 03 	sts	0x0399, r1
     71c:	10 92 9a 03 	sts	0x039A, r1
     720:	10 92 9b 03 	sts	0x039B, r1
     724:	10 92 9c 03 	sts	0x039C, r1
  TaskFour.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     728:	c0 92 9d 03 	sts	0x039D, r12
     72c:	d0 92 9e 03 	sts	0x039E, r13
     730:	e0 92 9f 03 	sts	0x039F, r14
     734:	f0 92 a0 03 	sts	0x03A0, r15
  TaskFour.offset.secs = 0;
     738:	10 92 a1 03 	sts	0x03A1, r1
     73c:	10 92 a2 03 	sts	0x03A2, r1
     740:	10 92 a3 03 	sts	0x03A3, r1
     744:	10 92 a4 03 	sts	0x03A4, r1
  TaskFour.offset.nano_secs= 0;
     748:	10 92 a5 03 	sts	0x03A5, r1
     74c:	10 92 a6 03 	sts	0x03A6, r1
     750:	10 92 a7 03 	sts	0x03A7, r1
     754:	10 92 a8 03 	sts	0x03A8, r1
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	cf 90       	pop	r12
     764:	bf 90       	pop	r11
     766:	08 95       	ret

00000768 <Task4>:
	cnt++;
	}
}

void Task4()
{
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
uint16_t cnt;

  printf( "Task4 PID=%u\r\n",nrk_get_pid());
     772:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <nrk_get_pid>
     776:	99 27       	eor	r25, r25
     778:	9f 93       	push	r25
     77a:	8f 93       	push	r24
     77c:	83 e1       	ldi	r24, 0x13	; 19
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	9f 93       	push	r25
     782:	8f 93       	push	r24
     784:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
  cnt=0;
  while(1) {
	nrk_led_toggle(RED_LED);
	nrk_gpio_toggle(NRK_DEBUG_3);
     788:	f0 90 ae 02 	lds	r15, 0x02AE
     78c:	c0 e0       	ldi	r28, 0x00	; 0
     78e:	d0 e0       	ldi	r29, 0x00	; 0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
	printf( "Task4 cnt=%u\r\n",cnt );
     798:	02 e2       	ldi	r16, 0x22	; 34
     79a:	12 e0       	ldi	r17, 0x02	; 2
uint16_t cnt;

  printf( "Task4 PID=%u\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
	nrk_led_toggle(RED_LED);
     79c:	83 e0       	ldi	r24, 0x03	; 3
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 19 12 	call	0x2432	; 0x2432 <nrk_led_toggle>
	nrk_gpio_toggle(NRK_DEBUG_3);
     7a4:	8f 2d       	mov	r24, r15
     7a6:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <nrk_gpio_toggle>
	printf( "Task4 cnt=%u\r\n",cnt );
     7aa:	df 93       	push	r29
     7ac:	cf 93       	push	r28
     7ae:	1f 93       	push	r17
     7b0:	0f 93       	push	r16
     7b2:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
	nrk_wait_until_next_period();
     7b6:	0e 94 ac 20 	call	0x4158	; 0x4158 <nrk_wait_until_next_period>
	cnt++;
     7ba:	21 96       	adiw	r28, 0x01	; 1
	}
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	eb cf       	rjmp	.-42     	; 0x79c <Task4+0x34>

000007c6 <Task3>:
	cnt--;
	}
}

void Task3()
{
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
uint16_t cnt;
  printf( "Task3 PID=%u\r\n",nrk_get_pid());
     7d0:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <nrk_get_pid>
     7d4:	99 27       	eor	r25, r25
     7d6:	9f 93       	push	r25
     7d8:	8f 93       	push	r24
     7da:	81 e3       	ldi	r24, 0x31	; 49
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	9f 93       	push	r25
     7e0:	8f 93       	push	r24
     7e2:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
  cnt=0;
  while(1) {
	nrk_led_toggle(GREEN_LED);
	nrk_gpio_toggle(NRK_DEBUG_2);
     7e6:	f0 90 ad 02 	lds	r15, 0x02AD
     7ea:	c0 e0       	ldi	r28, 0x00	; 0
     7ec:	d0 e0       	ldi	r29, 0x00	; 0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
	printf( "Task3 cnt=%u\r\n",cnt );
     7f6:	00 e4       	ldi	r16, 0x40	; 64
     7f8:	12 e0       	ldi	r17, 0x02	; 2
{
uint16_t cnt;
  printf( "Task3 PID=%u\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
	nrk_led_toggle(GREEN_LED);
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 19 12 	call	0x2432	; 0x2432 <nrk_led_toggle>
	nrk_gpio_toggle(NRK_DEBUG_2);
     802:	8f 2d       	mov	r24, r15
     804:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <nrk_gpio_toggle>
	printf( "Task3 cnt=%u\r\n",cnt );
     808:	df 93       	push	r29
     80a:	cf 93       	push	r28
     80c:	1f 93       	push	r17
     80e:	0f 93       	push	r16
     810:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
	nrk_wait_until_next_period();
     814:	0e 94 ac 20 	call	0x4158	; 0x4158 <nrk_wait_until_next_period>
	cnt++;
     818:	21 96       	adiw	r28, 0x01	; 1
	}
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	eb cf       	rjmp	.-42     	; 0x7fa <Task3+0x34>

00000824 <Task2>:
	//cnt++;
	}
}

void Task2()
{
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
  int16_t cnt;
  printf( "Task2 PID=%u\r\n",nrk_get_pid());
     82e:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <nrk_get_pid>
     832:	99 27       	eor	r25, r25
     834:	9f 93       	push	r25
     836:	8f 93       	push	r24
     838:	8f e4       	ldi	r24, 0x4F	; 79
     83a:	92 e0       	ldi	r25, 0x02	; 2
     83c:	9f 93       	push	r25
     83e:	8f 93       	push	r24
     840:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
  cnt=0;
  while(1) {
	nrk_led_toggle(BLUE_LED);
	nrk_gpio_toggle(NRK_DEBUG_1);
     844:	f0 90 a3 02 	lds	r15, 0x02A3
     848:	c0 e0       	ldi	r28, 0x00	; 0
     84a:	d0 e0       	ldi	r29, 0x00	; 0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
	printf( "Task2 signed cnt=%d\r\n",cnt );
     854:	0e e5       	ldi	r16, 0x5E	; 94
     856:	12 e0       	ldi	r17, 0x02	; 2
{
  int16_t cnt;
  printf( "Task2 PID=%u\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
	nrk_led_toggle(BLUE_LED);
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 19 12 	call	0x2432	; 0x2432 <nrk_led_toggle>
	nrk_gpio_toggle(NRK_DEBUG_1);
     860:	8f 2d       	mov	r24, r15
     862:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <nrk_gpio_toggle>
	printf( "Task2 signed cnt=%d\r\n",cnt );
     866:	df 93       	push	r29
     868:	cf 93       	push	r28
     86a:	1f 93       	push	r17
     86c:	0f 93       	push	r16
     86e:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
	nrk_wait_until_next_period();
     872:	0e 94 ac 20 	call	0x4158	; 0x4158 <nrk_wait_until_next_period>
	//nrk_stats_display_pid(nrk_get_pid());
	cnt--;
     876:	21 97       	sbiw	r28, 0x01	; 1
	}
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	eb cf       	rjmp	.-42     	; 0x858 <Task2+0x34>

00000882 <Task1>:
  
  return 0;
}

void Task1()
{
     882:	0f 93       	push	r16
     884:	1f 93       	push	r17
nrk_time_t t;
uint16_t cnt;
uint16_t wait_high_time;
uint8_t cur_TCNT2;
cnt=0;
nrk_kprintf( PSTR("Nano-RK Version ") );
     886:	80 ef       	ldi	r24, 0xF0	; 240
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
printf( "%d\r\n",NRK_VERSION );
     88e:	85 e6       	ldi	r24, 0x65	; 101
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	9f 93       	push	r25
     894:	8f 93       	push	r24
     896:	84 e7       	ldi	r24, 0x74	; 116
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	9f 93       	push	r25
     89c:	8f 93       	push	r24
     89e:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>

printf( "My node's address is %u\r\n",NODE_ADDR );
     8a2:	1f 92       	push	r1
     8a4:	1f 92       	push	r1
     8a6:	89 e7       	ldi	r24, 0x79	; 121
     8a8:	92 e0       	ldi	r25, 0x02	; 2
     8aa:	9f 93       	push	r25
     8ac:	8f 93       	push	r24
     8ae:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
  
printf( "Task1 PID=%u\r\n",nrk_get_pid());
     8b2:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <nrk_get_pid>
     8b6:	99 27       	eor	r25, r25
     8b8:	9f 93       	push	r25
     8ba:	8f 93       	push	r24
     8bc:	83 e9       	ldi	r24, 0x93	; 147
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	9f 93       	push	r25
     8c2:	8f 93       	push	r24
     8c4:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
//_nrk_high_speed_timer_start();
  while(1) {
	//_nrk_high_speed_timer_reset();
	nrk_led_toggle(ORANGE_LED);
	nrk_gpio_set(NRK_DEBUG_0);
     8c8:	10 91 a2 02 	lds	r17, 0x02A2
	nrk_gpio_toggle(NRK_DEBUG_1);
     8cc:	00 91 a3 02 	lds	r16, 0x02A3
     8d0:	8d b7       	in	r24, 0x3d	; 61
     8d2:	9e b7       	in	r25, 0x3e	; 62
     8d4:	0c 96       	adiw	r24, 0x0c	; 12
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	9e bf       	out	0x3e, r25	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	8d bf       	out	0x3d, r24	; 61
  
printf( "Task1 PID=%u\r\n",nrk_get_pid());
//_nrk_high_speed_timer_start();
  while(1) {
	//_nrk_high_speed_timer_reset();
	nrk_led_toggle(ORANGE_LED);
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 19 12 	call	0x2432	; 0x2432 <nrk_led_toggle>
	nrk_gpio_set(NRK_DEBUG_0);
     8e8:	81 2f       	mov	r24, r17
     8ea:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <nrk_gpio_set>
	nrk_gpio_toggle(NRK_DEBUG_1);
     8ee:	80 2f       	mov	r24, r16
     8f0:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <nrk_gpio_toggle>
	//printf( "Task1 cnt=%u\r\n, %d.",cnt);
	do{
		cur_TCNT2 = _nrk_os_timer_get();		
     8f4:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_nrk_os_timer_get>
	}while(cur_TCNT2<=20);
     8f8:	85 31       	cpi	r24, 0x15	; 21
     8fa:	e0 f3       	brcs	.-8      	; 0x8f4 <Task1+0x72>
	/*while(cnt++<=10)
	{
		while(_nrk_high_speed_timer_get()<50000);
		_nrk_high_speed_timer_reset();
	}*/
	_nrk_high_speed_timer_reset();
     8fc:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <_nrk_high_speed_timer_reset>
	//_nrk_os_timer_reset();
	//printf("1st TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//wait_high_time = _nrk_high_speed_timer_get() + 2577;
	do{}while(TCNT1<2577);
     900:	80 91 84 00 	lds	r24, 0x0084
     904:	90 91 85 00 	lds	r25, 0x0085
     908:	81 51       	subi	r24, 0x11	; 17
     90a:	9a 40       	sbci	r25, 0x0A	; 10
     90c:	c8 f3       	brcs	.-14     	; 0x900 <Task1+0x7e>
	//nrk_high_speed_timer_wait(,2577);//time escape 0.5ms
	//printf("2nd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//_nrk_high_speed_timer_reset();
	//printf("3rd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	_nrk_os_timer_set(20);
     90e:	84 e1       	ldi	r24, 0x14	; 20
     910:	0e 94 ef 26 	call	0x4dde	; 0x4dde <_nrk_os_timer_set>
	//printf("TCNT1 is %d cnt is %d.\n\r",_nrk_high_speed_timer_get(),cnt);
	nrk_gpio_clr(NRK_DEBUG_0);
     914:	81 2f       	mov	r24, r17
     916:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <nrk_gpio_clr>
	nrk_wait_until_next_period();
     91a:	0e 94 ac 20 	call	0x4158	; 0x4158 <nrk_wait_until_next_period>
     91e:	e0 cf       	rjmp	.-64     	; 0x8e0 <Task1+0x5e>

00000920 <main>:
void nrk_create_taskset();
uint8_t kill_stack(uint8_t val);

int
main ()
{
     920:	cf ef       	ldi	r28, 0xFF	; 255
     922:	d1 e2       	ldi	r29, 0x21	; 33
     924:	de bf       	out	0x3e, r29	; 62
     926:	cd bf       	out	0x3d, r28	; 61
  nrk_setup_ports();
     928:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
     92c:	87 e0       	ldi	r24, 0x07	; 7
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 cb 12 	call	0x2596	; 0x2596 <nrk_setup_uart>

  nrk_init();
     934:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <nrk_init>

  nrk_led_clr(ORANGE_LED);
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 36 12 	call	0x246c	; 0x246c <nrk_led_clr>
  nrk_led_clr(BLUE_LED);
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 36 12 	call	0x246c	; 0x246c <nrk_led_clr>
  nrk_led_clr(GREEN_LED);
     948:	82 e0       	ldi	r24, 0x02	; 2
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 36 12 	call	0x246c	; 0x246c <nrk_led_clr>
  nrk_led_clr(RED_LED);
     950:	83 e0       	ldi	r24, 0x03	; 3
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 36 12 	call	0x246c	; 0x246c <nrk_led_clr>
 
  nrk_time_set(0,0);
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	40 e0       	ldi	r20, 0x00	; 0
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 78 22 	call	0x44f0	; 0x44f0 <nrk_time_set>
  nrk_create_taskset ();
     96c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <nrk_create_taskset>
  nrk_start();
     970:	0e 94 c6 14 	call	0x298c	; 0x298c <nrk_start>
  
  return 0;
}
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0c 94 dc 2e 	jmp	0x5db8	; 0x5db8 <_exit>

0000097c <halRfSetChannel>:
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
     97c:	99 27       	eor	r25, r25
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
     97e:	9c 01       	movw	r18, r24
     980:	26 5a       	subi	r18, 0xA6	; 166
     982:	3e 4b       	sbci	r19, 0xBE	; 190
     984:	0b 97       	sbiw	r24, 0x0b	; 11
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
     986:	88 0f       	add	r24, r24
     988:	99 1f       	adc	r25, r25
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	28 0f       	add	r18, r24
     990:	39 1f       	adc	r19, r25
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
     992:	f8 94       	cli
	FASTSPI_SETREG(CC2420_FSCTRL, f);
     994:	40 98       	cbi	0x08, 0	; 8
     996:	88 e1       	ldi	r24, 0x18	; 24
     998:	8e bd       	out	0x2e, r24	; 46
     99a:	0d b4       	in	r0, 0x2d	; 45
     99c:	07 fe       	sbrs	r0, 7
     99e:	fd cf       	rjmp	.-6      	; 0x99a <halRfSetChannel+0x1e>
     9a0:	83 2f       	mov	r24, r19
     9a2:	99 27       	eor	r25, r25
     9a4:	8e bd       	out	0x2e, r24	; 46
     9a6:	0d b4       	in	r0, 0x2d	; 45
     9a8:	07 fe       	sbrs	r0, 7
     9aa:	fd cf       	rjmp	.-6      	; 0x9a6 <halRfSetChannel+0x2a>
     9ac:	2e bd       	out	0x2e, r18	; 46
     9ae:	0d b4       	in	r0, 0x2d	; 45
     9b0:	07 fe       	sbrs	r0, 7
     9b2:	fd cf       	rjmp	.-6      	; 0x9ae <halRfSetChannel+0x32>
     9b4:	40 9a       	sbi	0x08, 0	; 8
	ENABLE_GLOBAL_INT();
     9b6:	78 94       	sei
     9b8:	08 95       	ret

000009ba <halRfWaitForCrystalOscillator>:
NRK_STK Stack2[NRK_APP_STACKSIZE];
nrk_task_type TaskTwo;
void Task2 (void);

NRK_STK Stack3[NRK_APP_STACKSIZE];
nrk_task_type TaskThree;
     9ba:	f8 94       	cli
void Task3 (void);
     9bc:	40 98       	cbi	0x08, 0	; 8
     9be:	1e bc       	out	0x2e, r1	; 46
     9c0:	0d b4       	in	r0, 0x2d	; 45
     9c2:	07 fe       	sbrs	r0, 7
     9c4:	fd cf       	rjmp	.-6      	; 0x9c0 <halRfWaitForCrystalOscillator+0x6>
     9c6:	8e b5       	in	r24, 0x2e	; 46
     9c8:	40 9a       	sbi	0x08, 0	; 8

     9ca:	78 94       	sei

     9cc:	86 ff       	sbrs	r24, 6
     9ce:	f5 cf       	rjmp	.-22     	; 0x9ba <halRfWaitForCrystalOscillator>
     9d0:	08 95       	ret

000009d2 <rf_security_last_pkt_status>:
NRK_STK Stack4[NRK_APP_STACKSIZE];
nrk_task_type TaskFour;
void Task4 (void);

void nrk_create_taskset();
uint8_t kill_stack(uint8_t val);
     9d2:	80 91 52 07 	lds	r24, 0x0752

int
     9d6:	99 27       	eor	r25, r25
     9d8:	08 95       	ret

000009da <rf_security_set_ctr_counter>:
main ()
{
  nrk_setup_ports();
  nrk_setup_uart(UART_BAUDRATE_115K2);
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	dc 01       	movw	r26, r24

  nrk_init();

     9e0:	40 98       	cbi	0x08, 0	; 8
     9e2:	89 ec       	ldi	r24, 0xC9	; 201
     9e4:	8e bd       	out	0x2e, r24	; 46
     9e6:	0d b4       	in	r0, 0x2d	; 45
     9e8:	07 fe       	sbrs	r0, 7
     9ea:	fd cf       	rjmp	.-6      	; 0x9e6 <rf_security_set_ctr_counter+0xc>
     9ec:	80 e8       	ldi	r24, 0x80	; 128
     9ee:	8e bd       	out	0x2e, r24	; 46
     9f0:	0d b4       	in	r0, 0x2d	; 45
     9f2:	07 fe       	sbrs	r0, 7
     9f4:	fd cf       	rjmp	.-6      	; 0x9f0 <rf_security_set_ctr_counter+0x16>
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	91 50       	subi	r25, 0x01	; 1
     9fa:	fd 01       	movw	r30, r26
     9fc:	e9 0f       	add	r30, r25
     9fe:	f1 1d       	adc	r31, r1
     a00:	80 81       	ld	r24, Z
     a02:	8e bd       	out	0x2e, r24	; 46
     a04:	0d b4       	in	r0, 0x2d	; 45
     a06:	07 fe       	sbrs	r0, 7
     a08:	fd cf       	rjmp	.-6      	; 0xa04 <rf_security_set_ctr_counter+0x2a>
     a0a:	99 23       	and	r25, r25
     a0c:	a9 f7       	brne	.-22     	; 0x9f8 <rf_security_set_ctr_counter+0x1e>
     a0e:	40 9a       	sbi	0x08, 0	; 8
  nrk_led_clr(ORANGE_LED);
     a10:	40 98       	cbi	0x08, 0	; 8
     a12:	8b ec       	ldi	r24, 0xCB	; 203
     a14:	8e bd       	out	0x2e, r24	; 46
     a16:	0d b4       	in	r0, 0x2d	; 45
     a18:	07 fe       	sbrs	r0, 7
     a1a:	fd cf       	rjmp	.-6      	; 0xa16 <rf_security_set_ctr_counter+0x3c>
     a1c:	80 e8       	ldi	r24, 0x80	; 128
     a1e:	8e bd       	out	0x2e, r24	; 46
     a20:	0d b4       	in	r0, 0x2d	; 45
     a22:	07 fe       	sbrs	r0, 7
     a24:	fd cf       	rjmp	.-6      	; 0xa20 <rf_security_set_ctr_counter+0x46>
     a26:	92 e0       	ldi	r25, 0x02	; 2
     a28:	9d 01       	movw	r18, r26
     a2a:	2e 5f       	subi	r18, 0xFE	; 254
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	e9 01       	movw	r28, r18
     a30:	91 50       	subi	r25, 0x01	; 1
     a32:	f9 01       	movw	r30, r18
     a34:	e9 0f       	add	r30, r25
     a36:	f1 1d       	adc	r31, r1
     a38:	80 81       	ld	r24, Z
     a3a:	8e bd       	out	0x2e, r24	; 46
     a3c:	0d b4       	in	r0, 0x2d	; 45
     a3e:	07 fe       	sbrs	r0, 7
     a40:	fd cf       	rjmp	.-6      	; 0xa3c <rf_security_set_ctr_counter+0x62>
     a42:	99 23       	and	r25, r25
     a44:	a1 f7       	brne	.-24     	; 0xa2e <rf_security_set_ctr_counter+0x54>
     a46:	40 9a       	sbi	0x08, 0	; 8
  nrk_led_clr(BLUE_LED);
     a48:	8c 91       	ld	r24, X
     a4a:	80 93 53 07 	sts	0x0753, r24
  nrk_led_clr(GREEN_LED);
     a4e:	fd 01       	movw	r30, r26
     a50:	81 81       	ldd	r24, Z+1	; 0x01
     a52:	80 93 54 07 	sts	0x0754, r24
  nrk_led_clr(RED_LED);
     a56:	88 81       	ld	r24, Y
     a58:	80 93 55 07 	sts	0x0755, r24
 
     a5c:	83 81       	ldd	r24, Z+3	; 0x03
     a5e:	80 93 56 07 	sts	0x0756, r24
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <rf_security_enable>:
		cur_TCNT2 = _nrk_os_timer_get();		
	}while(cur_TCNT2<=20);
	//printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);
	
	//printf("current TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	/*do{
     a68:	40 98       	cbi	0x08, 0	; 8
     a6a:	89 e1       	ldi	r24, 0x19	; 25
     a6c:	8e bd       	out	0x2e, r24	; 46
     a6e:	0d b4       	in	r0, 0x2d	; 45
     a70:	07 fe       	sbrs	r0, 7
     a72:	fd cf       	rjmp	.-6      	; 0xa6e <rf_security_enable+0x6>
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	8e bd       	out	0x2e, r24	; 46
     a78:	0d b4       	in	r0, 0x2d	; 45
     a7a:	07 fe       	sbrs	r0, 7
     a7c:	fd cf       	rjmp	.-6      	; 0xa78 <rf_security_enable+0x10>
     a7e:	86 e0       	ldi	r24, 0x06	; 6
     a80:	8e bd       	out	0x2e, r24	; 46
     a82:	0d b4       	in	r0, 0x2d	; 45
     a84:	07 fe       	sbrs	r0, 7
     a86:	fd cf       	rjmp	.-6      	; 0xa82 <rf_security_enable+0x1a>
     a88:	40 9a       	sbi	0x08, 0	; 8
		cur_TCNT2 = _nrk_os_timer_get();		
     a8a:	40 98       	cbi	0x08, 0	; 8
     a8c:	8a e1       	ldi	r24, 0x1A	; 26
     a8e:	8e bd       	out	0x2e, r24	; 46
     a90:	0d b4       	in	r0, 0x2d	; 45
     a92:	07 fe       	sbrs	r0, 7
     a94:	fd cf       	rjmp	.-6      	; 0xa90 <rf_security_enable+0x28>
     a96:	8e e0       	ldi	r24, 0x0E	; 14
     a98:	8e bd       	out	0x2e, r24	; 46
     a9a:	0d b4       	in	r0, 0x2d	; 45
     a9c:	07 fe       	sbrs	r0, 7
     a9e:	fd cf       	rjmp	.-6      	; 0xa9a <rf_security_enable+0x32>
     aa0:	8e e0       	ldi	r24, 0x0E	; 14
     aa2:	8e bd       	out	0x2e, r24	; 46
     aa4:	0d b4       	in	r0, 0x2d	; 45
     aa6:	07 fe       	sbrs	r0, 7
     aa8:	fd cf       	rjmp	.-6      	; 0xaa4 <rf_security_enable+0x3c>
     aaa:	40 9a       	sbi	0x08, 0	; 8
	}while(cur_TCNT2!=100);
	printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);*/
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	80 93 43 07 	sts	0x0743, r24
     ab2:	08 95       	ret

00000ab4 <rf_security_disable>:
	/*while(cnt++<=10)
	{
		while(_nrk_high_speed_timer_get()<50000);
		_nrk_high_speed_timer_reset();
	}*/
	_nrk_high_speed_timer_reset();
     ab4:	40 98       	cbi	0x08, 0	; 8
     ab6:	89 e1       	ldi	r24, 0x19	; 25
     ab8:	8e bd       	out	0x2e, r24	; 46
     aba:	0d b4       	in	r0, 0x2d	; 45
     abc:	07 fe       	sbrs	r0, 7
     abe:	fd cf       	rjmp	.-6      	; 0xaba <rf_security_disable+0x6>
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	8e bd       	out	0x2e, r24	; 46
     ac4:	0d b4       	in	r0, 0x2d	; 45
     ac6:	07 fe       	sbrs	r0, 7
     ac8:	fd cf       	rjmp	.-6      	; 0xac4 <rf_security_disable+0x10>
     aca:	84 ec       	ldi	r24, 0xC4	; 196
     acc:	8e bd       	out	0x2e, r24	; 46
     ace:	0d b4       	in	r0, 0x2d	; 45
     ad0:	07 fe       	sbrs	r0, 7
     ad2:	fd cf       	rjmp	.-6      	; 0xace <rf_security_disable+0x1a>
     ad4:	40 9a       	sbi	0x08, 0	; 8
	//_nrk_os_timer_reset();
     ad6:	10 92 43 07 	sts	0x0743, r1
     ada:	08 95       	ret

00000adc <rf_get_sem>:
	//_nrk_high_speed_timer_reset();
	//printf("3rd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	_nrk_os_timer_set(20);
	//printf("TCNT1 is %d cnt is %d.\n\r",_nrk_high_speed_timer_get(),cnt);
	nrk_gpio_clr(NRK_DEBUG_0);
	nrk_wait_until_next_period();
     adc:	80 91 41 07 	lds	r24, 0x0741
     ae0:	90 91 42 07 	lds	r25, 0x0742
     ae4:	08 95       	ret

00000ae6 <rf_tx_power>:
	// At time 50, the OS will halt and print statistics
	// This requires the NRK_STATS_TRACKER #define in nrk_cfg.h
	// if(cnt==50)  {
	//	nrk_stats_display_all();
	//	nrk_halt();
	//	}
     ae6:	28 2f       	mov	r18, r24
     ae8:	33 27       	eor	r19, r19
     aea:	2f 71       	andi	r18, 0x1F	; 31
     aec:	30 70       	andi	r19, 0x00	; 0
     aee:	20 6e       	ori	r18, 0xE0	; 224
     af0:	30 6a       	ori	r19, 0xA0	; 160

     af2:	40 98       	cbi	0x08, 0	; 8
     af4:	85 e1       	ldi	r24, 0x15	; 21
     af6:	8e bd       	out	0x2e, r24	; 46
     af8:	0d b4       	in	r0, 0x2d	; 45
     afa:	07 fe       	sbrs	r0, 7
     afc:	fd cf       	rjmp	.-6      	; 0xaf8 <rf_tx_power+0x12>
     afe:	83 2f       	mov	r24, r19
     b00:	99 27       	eor	r25, r25
     b02:	8e bd       	out	0x2e, r24	; 46
     b04:	0d b4       	in	r0, 0x2d	; 45
     b06:	07 fe       	sbrs	r0, 7
     b08:	fd cf       	rjmp	.-6      	; 0xb04 <rf_tx_power+0x1e>
     b0a:	2e bd       	out	0x2e, r18	; 46
     b0c:	0d b4       	in	r0, 0x2d	; 45
     b0e:	07 fe       	sbrs	r0, 7
     b10:	fd cf       	rjmp	.-6      	; 0xb0c <rf_tx_power+0x26>
     b12:	40 9a       	sbi	0x08, 0	; 8
     b14:	08 95       	ret

00000b16 <rf_addr_decode_enable>:
	printf( "Task2 signed cnt=%d\r\n",cnt );
	nrk_wait_until_next_period();
	//nrk_stats_display_pid(nrk_get_pid());
	cnt--;
	}
}
     b16:	20 91 44 07 	lds	r18, 0x0744
     b1a:	30 91 45 07 	lds	r19, 0x0745
     b1e:	38 60       	ori	r19, 0x08	; 8
     b20:	30 93 45 07 	sts	0x0745, r19
     b24:	20 93 44 07 	sts	0x0744, r18

     b28:	40 98       	cbi	0x08, 0	; 8
     b2a:	81 e1       	ldi	r24, 0x11	; 17
     b2c:	8e bd       	out	0x2e, r24	; 46
     b2e:	0d b4       	in	r0, 0x2d	; 45
     b30:	07 fe       	sbrs	r0, 7
     b32:	fd cf       	rjmp	.-6      	; 0xb2e <rf_addr_decode_enable+0x18>
     b34:	83 2f       	mov	r24, r19
     b36:	99 27       	eor	r25, r25
     b38:	8e bd       	out	0x2e, r24	; 46
     b3a:	0d b4       	in	r0, 0x2d	; 45
     b3c:	07 fe       	sbrs	r0, 7
     b3e:	fd cf       	rjmp	.-6      	; 0xb3a <rf_addr_decode_enable+0x24>
     b40:	2e bd       	out	0x2e, r18	; 46
     b42:	0d b4       	in	r0, 0x2d	; 45
     b44:	07 fe       	sbrs	r0, 7
     b46:	fd cf       	rjmp	.-6      	; 0xb42 <rf_addr_decode_enable+0x2c>
     b48:	40 9a       	sbi	0x08, 0	; 8
     b4a:	08 95       	ret

00000b4c <rf_addr_decode_disable>:
void Task3()
{
uint16_t cnt;
  printf( "Task3 PID=%u\r\n",nrk_get_pid());
  cnt=0;
     b4c:	20 91 44 07 	lds	r18, 0x0744
     b50:	30 91 45 07 	lds	r19, 0x0745
     b54:	37 7f       	andi	r19, 0xF7	; 247
     b56:	30 93 45 07 	sts	0x0745, r19
     b5a:	20 93 44 07 	sts	0x0744, r18
  while(1) {
     b5e:	40 98       	cbi	0x08, 0	; 8
     b60:	81 e1       	ldi	r24, 0x11	; 17
     b62:	8e bd       	out	0x2e, r24	; 46
     b64:	0d b4       	in	r0, 0x2d	; 45
     b66:	07 fe       	sbrs	r0, 7
     b68:	fd cf       	rjmp	.-6      	; 0xb64 <rf_addr_decode_disable+0x18>
     b6a:	83 2f       	mov	r24, r19
     b6c:	99 27       	eor	r25, r25
     b6e:	8e bd       	out	0x2e, r24	; 46
     b70:	0d b4       	in	r0, 0x2d	; 45
     b72:	07 fe       	sbrs	r0, 7
     b74:	fd cf       	rjmp	.-6      	; 0xb70 <rf_addr_decode_disable+0x24>
     b76:	2e bd       	out	0x2e, r18	; 46
     b78:	0d b4       	in	r0, 0x2d	; 45
     b7a:	07 fe       	sbrs	r0, 7
     b7c:	fd cf       	rjmp	.-6      	; 0xb78 <rf_addr_decode_disable+0x2c>
     b7e:	40 9a       	sbi	0x08, 0	; 8
     b80:	08 95       	ret

00000b82 <rf_auto_ack_enable>:
	nrk_led_toggle(GREEN_LED);
	nrk_gpio_toggle(NRK_DEBUG_2);
	printf( "Task3 cnt=%u\r\n",cnt );
	nrk_wait_until_next_period();
	cnt++;
	}
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	80 93 51 07 	sts	0x0751, r24
}
     b88:	20 91 44 07 	lds	r18, 0x0744
     b8c:	30 91 45 07 	lds	r19, 0x0745
     b90:	20 61       	ori	r18, 0x10	; 16
     b92:	30 93 45 07 	sts	0x0745, r19
     b96:	20 93 44 07 	sts	0x0744, r18

     b9a:	40 98       	cbi	0x08, 0	; 8
     b9c:	81 e1       	ldi	r24, 0x11	; 17
     b9e:	8e bd       	out	0x2e, r24	; 46
     ba0:	0d b4       	in	r0, 0x2d	; 45
     ba2:	07 fe       	sbrs	r0, 7
     ba4:	fd cf       	rjmp	.-6      	; 0xba0 <rf_auto_ack_enable+0x1e>
     ba6:	83 2f       	mov	r24, r19
     ba8:	99 27       	eor	r25, r25
     baa:	8e bd       	out	0x2e, r24	; 46
     bac:	0d b4       	in	r0, 0x2d	; 45
     bae:	07 fe       	sbrs	r0, 7
     bb0:	fd cf       	rjmp	.-6      	; 0xbac <rf_auto_ack_enable+0x2a>
     bb2:	2e bd       	out	0x2e, r18	; 46
     bb4:	0d b4       	in	r0, 0x2d	; 45
     bb6:	07 fe       	sbrs	r0, 7
     bb8:	fd cf       	rjmp	.-6      	; 0xbb4 <rf_auto_ack_enable+0x32>
     bba:	40 9a       	sbi	0x08, 0	; 8
     bbc:	08 95       	ret

00000bbe <rf_auto_ack_disable>:
void Task4()
{
uint16_t cnt;

  printf( "Task4 PID=%u\r\n",nrk_get_pid());
     bbe:	10 92 51 07 	sts	0x0751, r1
  cnt=0;
     bc2:	20 91 44 07 	lds	r18, 0x0744
     bc6:	30 91 45 07 	lds	r19, 0x0745
     bca:	2f 7e       	andi	r18, 0xEF	; 239
     bcc:	30 93 45 07 	sts	0x0745, r19
     bd0:	20 93 44 07 	sts	0x0744, r18
  while(1) {
     bd4:	40 98       	cbi	0x08, 0	; 8
     bd6:	81 e1       	ldi	r24, 0x11	; 17
     bd8:	8e bd       	out	0x2e, r24	; 46
     bda:	0d b4       	in	r0, 0x2d	; 45
     bdc:	07 fe       	sbrs	r0, 7
     bde:	fd cf       	rjmp	.-6      	; 0xbda <rf_auto_ack_disable+0x1c>
     be0:	83 2f       	mov	r24, r19
     be2:	99 27       	eor	r25, r25
     be4:	8e bd       	out	0x2e, r24	; 46
     be6:	0d b4       	in	r0, 0x2d	; 45
     be8:	07 fe       	sbrs	r0, 7
     bea:	fd cf       	rjmp	.-6      	; 0xbe6 <rf_auto_ack_disable+0x28>
     bec:	2e bd       	out	0x2e, r18	; 46
     bee:	0d b4       	in	r0, 0x2d	; 45
     bf0:	07 fe       	sbrs	r0, 7
     bf2:	fd cf       	rjmp	.-6      	; 0xbee <rf_auto_ack_disable+0x30>
     bf4:	40 9a       	sbi	0x08, 0	; 8
     bf6:	08 95       	ret

00000bf8 <rf_rx_on>:
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 4e 07 	sts	0x074E, r24
     bfe:	40 98       	cbi	0x08, 0	; 8
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	8e bd       	out	0x2e, r24	; 46
     c04:	0d b4       	in	r0, 0x2d	; 45
     c06:	07 fe       	sbrs	r0, 7
     c08:	fd cf       	rjmp	.-6      	; 0xc04 <rf_rx_on+0xc>
     c0a:	40 9a       	sbi	0x08, 0	; 8
     c0c:	40 98       	cbi	0x08, 0	; 8
     c0e:	88 e0       	ldi	r24, 0x08	; 8
     c10:	8e bd       	out	0x2e, r24	; 46
     c12:	0d b4       	in	r0, 0x2d	; 45
     c14:	07 fe       	sbrs	r0, 7
     c16:	fd cf       	rjmp	.-6      	; 0xc12 <rf_rx_on+0x1a>
     c18:	40 9a       	sbi	0x08, 0	; 8
     c1a:	10 92 57 07 	sts	0x0757, r1
     c1e:	08 95       	ret

00000c20 <rf_polling_rx_on>:
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	80 93 4e 07 	sts	0x074E, r24
     c26:	40 98       	cbi	0x08, 0	; 8
     c28:	83 e0       	ldi	r24, 0x03	; 3
     c2a:	8e bd       	out	0x2e, r24	; 46
     c2c:	0d b4       	in	r0, 0x2d	; 45
     c2e:	07 fe       	sbrs	r0, 7
     c30:	fd cf       	rjmp	.-6      	; 0xc2c <rf_polling_rx_on+0xc>
     c32:	40 9a       	sbi	0x08, 0	; 8
     c34:	40 98       	cbi	0x08, 0	; 8
     c36:	88 e0       	ldi	r24, 0x08	; 8
     c38:	8e bd       	out	0x2e, r24	; 46
     c3a:	0d b4       	in	r0, 0x2d	; 45
     c3c:	07 fe       	sbrs	r0, 7
     c3e:	fd cf       	rjmp	.-6      	; 0xc3a <rf_polling_rx_on+0x1a>
     c40:	40 9a       	sbi	0x08, 0	; 8
     c42:	10 92 57 07 	sts	0x0757, r1
     c46:	08 95       	ret

00000c48 <rf_rx_off>:
     c48:	10 92 4e 07 	sts	0x074E, r1
     c4c:	40 98       	cbi	0x08, 0	; 8
     c4e:	86 e0       	ldi	r24, 0x06	; 6
     c50:	8e bd       	out	0x2e, r24	; 46
     c52:	0d b4       	in	r0, 0x2d	; 45
     c54:	07 fe       	sbrs	r0, 7
     c56:	fd cf       	rjmp	.-6      	; 0xc52 <rf_rx_off+0xa>
     c58:	40 9a       	sbi	0x08, 0	; 8
     c5a:	10 92 57 07 	sts	0x0757, r1
     c5e:	08 95       	ret

00000c60 <rf_busy>:
     c60:	89 b1       	in	r24, 0x09	; 9
     c62:	99 27       	eor	r25, r25
     c64:	76 e0       	ldi	r23, 0x06	; 6
     c66:	96 95       	lsr	r25
     c68:	87 95       	ror	r24
     c6a:	7a 95       	dec	r23
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <rf_busy+0x6>
     c6e:	81 70       	andi	r24, 0x01	; 1
     c70:	90 70       	andi	r25, 0x00	; 0
     c72:	08 95       	ret

00000c74 <rf_rx_check_fifop>:
     c74:	8c b1       	in	r24, 0x0c	; 12
     c76:	99 27       	eor	r25, r25
     c78:	87 fd       	sbrc	r24, 7
     c7a:	90 95       	com	r25
     c7c:	88 27       	eor	r24, r24
     c7e:	99 0f       	add	r25, r25
     c80:	88 1f       	adc	r24, r24
     c82:	99 27       	eor	r25, r25
     c84:	08 95       	ret

00000c86 <rf_rx_check_sfd>:
     c86:	89 b1       	in	r24, 0x09	; 9
     c88:	99 27       	eor	r25, r25
     c8a:	f6 e0       	ldi	r31, 0x06	; 6
     c8c:	96 95       	lsr	r25
     c8e:	87 95       	ror	r24
     c90:	fa 95       	dec	r31
     c92:	e1 f7       	brne	.-8      	; 0xc8c <rf_rx_check_sfd+0x6>
     c94:	81 70       	andi	r24, 0x01	; 1
     c96:	90 70       	andi	r25, 0x00	; 0
     c98:	08 95       	ret

00000c9a <rf_polling_rx_packet>:
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	24 97       	sbiw	r28, 0x04	; 4
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	67 99       	sbic	0x0c, 7	; 12
     cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <rf_polling_rx_packet+0x1e>
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0f c2       	rjmp	.+1054   	; 0x10d6 <rf_polling_rx_packet+0x43c>
     cb8:	10 92 52 07 	sts	0x0752, r1
     cbc:	67 9b       	sbis	0x0c, 7	; 12
     cbe:	1f c0       	rjmp	.+62     	; 0xcfe <rf_polling_rx_packet+0x64>
     cc0:	31 99       	sbic	0x06, 1	; 6
     cc2:	1d c0       	rjmp	.+58     	; 0xcfe <rf_polling_rx_packet+0x64>
     cc4:	40 98       	cbi	0x08, 0	; 8
     cc6:	8f e7       	ldi	r24, 0x7F	; 127
     cc8:	8e bd       	out	0x2e, r24	; 46
     cca:	0d b4       	in	r0, 0x2d	; 45
     ccc:	07 fe       	sbrs	r0, 7
     cce:	fd cf       	rjmp	.-6      	; 0xcca <rf_polling_rx_packet+0x30>
     cd0:	1e bc       	out	0x2e, r1	; 46
     cd2:	0d b4       	in	r0, 0x2d	; 45
     cd4:	07 fe       	sbrs	r0, 7
     cd6:	fd cf       	rjmp	.-6      	; 0xcd2 <rf_polling_rx_packet+0x38>
     cd8:	8e b5       	in	r24, 0x2e	; 46
     cda:	40 9a       	sbi	0x08, 0	; 8
     cdc:	40 98       	cbi	0x08, 0	; 8
     cde:	88 e0       	ldi	r24, 0x08	; 8
     ce0:	8e bd       	out	0x2e, r24	; 46
     ce2:	0d b4       	in	r0, 0x2d	; 45
     ce4:	07 fe       	sbrs	r0, 7
     ce6:	fd cf       	rjmp	.-6      	; 0xce2 <rf_polling_rx_packet+0x48>
     ce8:	40 9a       	sbi	0x08, 0	; 8
     cea:	40 98       	cbi	0x08, 0	; 8
     cec:	88 e0       	ldi	r24, 0x08	; 8
     cee:	8e bd       	out	0x2e, r24	; 46
     cf0:	0d b4       	in	r0, 0x2d	; 45
     cf2:	07 fe       	sbrs	r0, 7
     cf4:	fd cf       	rjmp	.-6      	; 0xcf0 <rf_polling_rx_packet+0x56>
     cf6:	40 9a       	sbi	0x08, 0	; 8
     cf8:	8f ef       	ldi	r24, 0xFF	; 255
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	ec c1       	rjmp	.+984    	; 0x10d6 <rf_polling_rx_packet+0x43c>
     cfe:	40 98       	cbi	0x08, 0	; 8
     d00:	8f e7       	ldi	r24, 0x7F	; 127
     d02:	8e bd       	out	0x2e, r24	; 46
     d04:	0d b4       	in	r0, 0x2d	; 45
     d06:	07 fe       	sbrs	r0, 7
     d08:	fd cf       	rjmp	.-6      	; 0xd04 <rf_polling_rx_packet+0x6a>
     d0a:	1e bc       	out	0x2e, r1	; 46
     d0c:	0d b4       	in	r0, 0x2d	; 45
     d0e:	07 fe       	sbrs	r0, 7
     d10:	fd cf       	rjmp	.-6      	; 0xd0c <rf_polling_rx_packet+0x72>
     d12:	4e b5       	in	r20, 0x2e	; 46
     d14:	40 9a       	sbi	0x08, 0	; 8
     d16:	4f 77       	andi	r20, 0x7F	; 127
     d18:	e9 f4       	brne	.+58     	; 0xd54 <rf_polling_rx_packet+0xba>
     d1a:	40 98       	cbi	0x08, 0	; 8
     d1c:	8f e7       	ldi	r24, 0x7F	; 127
     d1e:	8e bd       	out	0x2e, r24	; 46
     d20:	0d b4       	in	r0, 0x2d	; 45
     d22:	07 fe       	sbrs	r0, 7
     d24:	fd cf       	rjmp	.-6      	; 0xd20 <rf_polling_rx_packet+0x86>
     d26:	1e bc       	out	0x2e, r1	; 46
     d28:	0d b4       	in	r0, 0x2d	; 45
     d2a:	07 fe       	sbrs	r0, 7
     d2c:	fd cf       	rjmp	.-6      	; 0xd28 <rf_polling_rx_packet+0x8e>
     d2e:	8e b5       	in	r24, 0x2e	; 46
     d30:	40 9a       	sbi	0x08, 0	; 8
     d32:	40 98       	cbi	0x08, 0	; 8
     d34:	88 e0       	ldi	r24, 0x08	; 8
     d36:	8e bd       	out	0x2e, r24	; 46
     d38:	0d b4       	in	r0, 0x2d	; 45
     d3a:	07 fe       	sbrs	r0, 7
     d3c:	fd cf       	rjmp	.-6      	; 0xd38 <rf_polling_rx_packet+0x9e>
     d3e:	40 9a       	sbi	0x08, 0	; 8
     d40:	40 98       	cbi	0x08, 0	; 8
     d42:	88 e0       	ldi	r24, 0x08	; 8
     d44:	8e bd       	out	0x2e, r24	; 46
     d46:	0d b4       	in	r0, 0x2d	; 45
     d48:	07 fe       	sbrs	r0, 7
     d4a:	fd cf       	rjmp	.-6      	; 0xd46 <rf_polling_rx_packet+0xac>
     d4c:	40 9a       	sbi	0x08, 0	; 8
     d4e:	8e ef       	ldi	r24, 0xFE	; 254
     d50:	9f ef       	ldi	r25, 0xFF	; 255
     d52:	c1 c1       	rjmp	.+898    	; 0x10d6 <rf_polling_rx_packet+0x43c>
     d54:	45 30       	cpi	r20, 0x05	; 5
     d56:	8c f0       	brlt	.+34     	; 0xd7a <rf_polling_rx_packet+0xe0>
     d58:	e0 91 46 07 	lds	r30, 0x0746
     d5c:	f0 91 47 07 	lds	r31, 0x0747
     d60:	24 2f       	mov	r18, r20
     d62:	33 27       	eor	r19, r19
     d64:	27 fd       	sbrc	r18, 7
     d66:	30 95       	com	r19
     d68:	2b 50       	subi	r18, 0x0B	; 11
     d6a:	30 40       	sbci	r19, 0x00	; 0
     d6c:	84 81       	ldd	r24, Z+4	; 0x04
     d6e:	99 27       	eor	r25, r25
     d70:	87 fd       	sbrc	r24, 7
     d72:	90 95       	com	r25
     d74:	82 17       	cp	r24, r18
     d76:	93 07       	cpc	r25, r19
     d78:	c4 f5       	brge	.+112    	; 0xdea <rf_polling_rx_packet+0x150>
     d7a:	40 98       	cbi	0x08, 0	; 8
     d7c:	8f e7       	ldi	r24, 0x7F	; 127
     d7e:	8e bd       	out	0x2e, r24	; 46
     d80:	0d b4       	in	r0, 0x2d	; 45
     d82:	07 fe       	sbrs	r0, 7
     d84:	fd cf       	rjmp	.-6      	; 0xd80 <rf_polling_rx_packet+0xe6>
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	24 2f       	mov	r18, r20
     d8c:	33 27       	eor	r19, r19
     d8e:	27 fd       	sbrc	r18, 7
     d90:	30 95       	com	r19
     d92:	06 c0       	rjmp	.+12     	; 0xda0 <rf_polling_rx_packet+0x106>
     d94:	1e bc       	out	0x2e, r1	; 46
     d96:	0d b4       	in	r0, 0x2d	; 45
     d98:	07 fe       	sbrs	r0, 7
     d9a:	fd cf       	rjmp	.-6      	; 0xd96 <rf_polling_rx_packet+0xfc>
     d9c:	6f 5f       	subi	r22, 0xFF	; 255
     d9e:	7f 4f       	sbci	r23, 0xFF	; 255
     da0:	86 2f       	mov	r24, r22
     da2:	99 27       	eor	r25, r25
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	14 f4       	brge	.+4      	; 0xdae <rf_polling_rx_packet+0x114>
     daa:	31 99       	sbic	0x06, 1	; 6
     dac:	f3 cf       	rjmp	.-26     	; 0xd94 <rf_polling_rx_packet+0xfa>
     dae:	40 9a       	sbi	0x08, 0	; 8
     db0:	40 98       	cbi	0x08, 0	; 8
     db2:	8f e7       	ldi	r24, 0x7F	; 127
     db4:	8e bd       	out	0x2e, r24	; 46
     db6:	0d b4       	in	r0, 0x2d	; 45
     db8:	07 fe       	sbrs	r0, 7
     dba:	fd cf       	rjmp	.-6      	; 0xdb6 <rf_polling_rx_packet+0x11c>
     dbc:	1e bc       	out	0x2e, r1	; 46
     dbe:	0d b4       	in	r0, 0x2d	; 45
     dc0:	07 fe       	sbrs	r0, 7
     dc2:	fd cf       	rjmp	.-6      	; 0xdbe <rf_polling_rx_packet+0x124>
     dc4:	8e b5       	in	r24, 0x2e	; 46
     dc6:	40 9a       	sbi	0x08, 0	; 8
     dc8:	40 98       	cbi	0x08, 0	; 8
     dca:	88 e0       	ldi	r24, 0x08	; 8
     dcc:	8e bd       	out	0x2e, r24	; 46
     dce:	0d b4       	in	r0, 0x2d	; 45
     dd0:	07 fe       	sbrs	r0, 7
     dd2:	fd cf       	rjmp	.-6      	; 0xdce <rf_polling_rx_packet+0x134>
     dd4:	40 9a       	sbi	0x08, 0	; 8
     dd6:	40 98       	cbi	0x08, 0	; 8
     dd8:	88 e0       	ldi	r24, 0x08	; 8
     dda:	8e bd       	out	0x2e, r24	; 46
     ddc:	0d b4       	in	r0, 0x2d	; 45
     dde:	07 fe       	sbrs	r0, 7
     de0:	fd cf       	rjmp	.-6      	; 0xddc <rf_polling_rx_packet+0x142>
     de2:	40 9a       	sbi	0x08, 0	; 8
     de4:	8d ef       	ldi	r24, 0xFD	; 253
     de6:	9f ef       	ldi	r25, 0xFF	; 255
     de8:	76 c1       	rjmp	.+748    	; 0x10d6 <rf_polling_rx_packet+0x43c>
     dea:	e0 91 46 07 	lds	r30, 0x0746
     dee:	f0 91 47 07 	lds	r31, 0x0747
     df2:	4c 50       	subi	r20, 0x0C	; 12
     df4:	43 83       	std	Z+3, r20	; 0x03
     df6:	40 98       	cbi	0x08, 0	; 8
     df8:	8f e7       	ldi	r24, 0x7F	; 127
     dfa:	8e bd       	out	0x2e, r24	; 46
     dfc:	0d b4       	in	r0, 0x2d	; 45
     dfe:	07 fe       	sbrs	r0, 7
     e00:	fd cf       	rjmp	.-6      	; 0xdfc <rf_polling_rx_packet+0x162>
     e02:	fe 01       	movw	r30, r28
     e04:	31 96       	adiw	r30, 0x01	; 1
     e06:	9e 01       	movw	r18, r28
     e08:	2d 5f       	subi	r18, 0xFD	; 253
     e0a:	3f 4f       	sbci	r19, 0xFF	; 255
     e0c:	1e bc       	out	0x2e, r1	; 46
     e0e:	0d b4       	in	r0, 0x2d	; 45
     e10:	07 fe       	sbrs	r0, 7
     e12:	fd cf       	rjmp	.-6      	; 0xe0e <rf_polling_rx_packet+0x174>
     e14:	8e b5       	in	r24, 0x2e	; 46
     e16:	81 93       	st	Z+, r24
     e18:	e2 17       	cp	r30, r18
     e1a:	f3 07       	cpc	r31, r19
     e1c:	b9 f7       	brne	.-18     	; 0xe0c <rf_polling_rx_packet+0x172>
     e1e:	40 9a       	sbi	0x08, 0	; 8
     e20:	e0 91 46 07 	lds	r30, 0x0746
     e24:	f0 91 47 07 	lds	r31, 0x0747
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	a5 e0       	ldi	r26, 0x05	; 5
     e2e:	96 95       	lsr	r25
     e30:	87 95       	ror	r24
     e32:	aa 95       	dec	r26
     e34:	e1 f7       	brne	.-8      	; 0xe2e <rf_polling_rx_packet+0x194>
     e36:	81 70       	andi	r24, 0x01	; 1
     e38:	87 83       	std	Z+7, r24	; 0x07
     e3a:	40 98       	cbi	0x08, 0	; 8
     e3c:	8f e7       	ldi	r24, 0x7F	; 127
     e3e:	8e bd       	out	0x2e, r24	; 46
     e40:	0d b4       	in	r0, 0x2d	; 45
     e42:	07 fe       	sbrs	r0, 7
     e44:	fd cf       	rjmp	.-6      	; 0xe40 <rf_polling_rx_packet+0x1a6>
     e46:	1e bc       	out	0x2e, r1	; 46
     e48:	0d b4       	in	r0, 0x2d	; 45
     e4a:	07 fe       	sbrs	r0, 7
     e4c:	fd cf       	rjmp	.-6      	; 0xe48 <rf_polling_rx_packet+0x1ae>
     e4e:	e0 91 46 07 	lds	r30, 0x0746
     e52:	f0 91 47 07 	lds	r31, 0x0747
     e56:	8e b5       	in	r24, 0x2e	; 46
     e58:	80 83       	st	Z, r24
     e5a:	40 9a       	sbi	0x08, 0	; 8
     e5c:	40 98       	cbi	0x08, 0	; 8
     e5e:	8f e7       	ldi	r24, 0x7F	; 127
     e60:	8e bd       	out	0x2e, r24	; 46
     e62:	0d b4       	in	r0, 0x2d	; 45
     e64:	07 fe       	sbrs	r0, 7
     e66:	fd cf       	rjmp	.-6      	; 0xe62 <rf_polling_rx_packet+0x1c8>
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	07 c0       	rjmp	.+14     	; 0xe7a <rf_polling_rx_packet+0x1e0>
     e6c:	1e bc       	out	0x2e, r1	; 46
     e6e:	0d b4       	in	r0, 0x2d	; 45
     e70:	07 fe       	sbrs	r0, 7
     e72:	fd cf       	rjmp	.-6      	; 0xe6e <rf_polling_rx_packet+0x1d4>
     e74:	8f 5f       	subi	r24, 0xFF	; 255
     e76:	84 30       	cpi	r24, 0x04	; 4
     e78:	11 f0       	breq	.+4      	; 0xe7e <rf_polling_rx_packet+0x1e4>
     e7a:	31 99       	sbic	0x06, 1	; 6
     e7c:	f7 cf       	rjmp	.-18     	; 0xe6c <rf_polling_rx_packet+0x1d2>
     e7e:	40 9a       	sbi	0x08, 0	; 8
     e80:	40 98       	cbi	0x08, 0	; 8
     e82:	8f e7       	ldi	r24, 0x7F	; 127
     e84:	8e bd       	out	0x2e, r24	; 46
     e86:	0d b4       	in	r0, 0x2d	; 45
     e88:	07 fe       	sbrs	r0, 7
     e8a:	fd cf       	rjmp	.-6      	; 0xe86 <rf_polling_rx_packet+0x1ec>
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	1e bc       	out	0x2e, r1	; 46
     e92:	0d b4       	in	r0, 0x2d	; 45
     e94:	07 fe       	sbrs	r0, 7
     e96:	fd cf       	rjmp	.-6      	; 0xe92 <rf_polling_rx_packet+0x1f8>
     e98:	e0 91 46 07 	lds	r30, 0x0746
     e9c:	f0 91 47 07 	lds	r31, 0x0747
     ea0:	e2 0f       	add	r30, r18
     ea2:	f3 1f       	adc	r31, r19
     ea4:	8e b5       	in	r24, 0x2e	; 46
     ea6:	81 83       	std	Z+1, r24	; 0x01
     ea8:	2f 5f       	subi	r18, 0xFF	; 255
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
     eac:	22 30       	cpi	r18, 0x02	; 2
     eae:	31 05       	cpc	r19, r1
     eb0:	79 f7       	brne	.-34     	; 0xe90 <rf_polling_rx_packet+0x1f6>
     eb2:	40 9a       	sbi	0x08, 0	; 8
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	83 ff       	sbrs	r24, 3
     eba:	56 c0       	rjmp	.+172    	; 0xf68 <rf_polling_rx_packet+0x2ce>
     ebc:	40 98       	cbi	0x08, 0	; 8
     ebe:	8f e7       	ldi	r24, 0x7F	; 127
     ec0:	8e bd       	out	0x2e, r24	; 46
     ec2:	0d b4       	in	r0, 0x2d	; 45
     ec4:	07 fe       	sbrs	r0, 7
     ec6:	fd cf       	rjmp	.-6      	; 0xec2 <rf_polling_rx_packet+0x228>
     ec8:	ed e3       	ldi	r30, 0x3D	; 61
     eca:	f7 e0       	ldi	r31, 0x07	; 7
     ecc:	1e bc       	out	0x2e, r1	; 46
     ece:	0d b4       	in	r0, 0x2d	; 45
     ed0:	07 fe       	sbrs	r0, 7
     ed2:	fd cf       	rjmp	.-6      	; 0xece <rf_polling_rx_packet+0x234>
     ed4:	8e b5       	in	r24, 0x2e	; 46
     ed6:	81 93       	st	Z+, r24
     ed8:	87 e0       	ldi	r24, 0x07	; 7
     eda:	e1 34       	cpi	r30, 0x41	; 65
     edc:	f8 07       	cpc	r31, r24
     ede:	b1 f7       	brne	.-20     	; 0xecc <rf_polling_rx_packet+0x232>
     ee0:	40 9a       	sbi	0x08, 0	; 8
     ee2:	40 98       	cbi	0x08, 0	; 8
     ee4:	89 e9       	ldi	r24, 0x99	; 153
     ee6:	8e bd       	out	0x2e, r24	; 46
     ee8:	0d b4       	in	r0, 0x2d	; 45
     eea:	07 fe       	sbrs	r0, 7
     eec:	fd cf       	rjmp	.-6      	; 0xee8 <rf_polling_rx_packet+0x24e>
     eee:	80 e8       	ldi	r24, 0x80	; 128
     ef0:	8e bd       	out	0x2e, r24	; 46
     ef2:	0d b4       	in	r0, 0x2d	; 45
     ef4:	07 fe       	sbrs	r0, 7
     ef6:	fd cf       	rjmp	.-6      	; 0xef2 <rf_polling_rx_packet+0x258>
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	91 50       	subi	r25, 0x01	; 1
     efc:	e9 2f       	mov	r30, r25
     efe:	ff 27       	eor	r31, r31
     f00:	e3 5c       	subi	r30, 0xC3	; 195
     f02:	f8 4f       	sbci	r31, 0xF8	; 248
     f04:	80 81       	ld	r24, Z
     f06:	8e bd       	out	0x2e, r24	; 46
     f08:	0d b4       	in	r0, 0x2d	; 45
     f0a:	07 fe       	sbrs	r0, 7
     f0c:	fd cf       	rjmp	.-6      	; 0xf08 <rf_polling_rx_packet+0x26e>
     f0e:	99 23       	and	r25, r25
     f10:	a1 f7       	brne	.-24     	; 0xefa <rf_polling_rx_packet+0x260>
     f12:	40 9a       	sbi	0x08, 0	; 8
     f14:	40 98       	cbi	0x08, 0	; 8
     f16:	8b e9       	ldi	r24, 0x9B	; 155
     f18:	8e bd       	out	0x2e, r24	; 46
     f1a:	0d b4       	in	r0, 0x2d	; 45
     f1c:	07 fe       	sbrs	r0, 7
     f1e:	fd cf       	rjmp	.-6      	; 0xf1a <rf_polling_rx_packet+0x280>
     f20:	80 e8       	ldi	r24, 0x80	; 128
     f22:	8e bd       	out	0x2e, r24	; 46
     f24:	0d b4       	in	r0, 0x2d	; 45
     f26:	07 fe       	sbrs	r0, 7
     f28:	fd cf       	rjmp	.-6      	; 0xf24 <rf_polling_rx_packet+0x28a>
     f2a:	92 e0       	ldi	r25, 0x02	; 2
     f2c:	91 50       	subi	r25, 0x01	; 1
     f2e:	e9 2f       	mov	r30, r25
     f30:	ff 27       	eor	r31, r31
     f32:	e1 5c       	subi	r30, 0xC1	; 193
     f34:	f8 4f       	sbci	r31, 0xF8	; 248
     f36:	80 81       	ld	r24, Z
     f38:	8e bd       	out	0x2e, r24	; 46
     f3a:	0d b4       	in	r0, 0x2d	; 45
     f3c:	07 fe       	sbrs	r0, 7
     f3e:	fd cf       	rjmp	.-6      	; 0xf3a <rf_polling_rx_packet+0x2a0>
     f40:	99 23       	and	r25, r25
     f42:	a1 f7       	brne	.-24     	; 0xf2c <rf_polling_rx_packet+0x292>
     f44:	40 9a       	sbi	0x08, 0	; 8
     f46:	40 98       	cbi	0x08, 0	; 8
     f48:	8c e0       	ldi	r24, 0x0C	; 12
     f4a:	8e bd       	out	0x2e, r24	; 46
     f4c:	0d b4       	in	r0, 0x2d	; 45
     f4e:	07 fe       	sbrs	r0, 7
     f50:	fd cf       	rjmp	.-6      	; 0xf4c <rf_polling_rx_packet+0x2b2>
     f52:	40 9a       	sbi	0x08, 0	; 8
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	80 93 52 07 	sts	0x0752, r24
     f5a:	e0 91 46 07 	lds	r30, 0x0746
     f5e:	f0 91 47 07 	lds	r31, 0x0747
     f62:	83 81       	ldd	r24, Z+3	; 0x03
     f64:	84 50       	subi	r24, 0x04	; 4
     f66:	83 83       	std	Z+3, r24	; 0x03
     f68:	40 98       	cbi	0x08, 0	; 8
     f6a:	8f e7       	ldi	r24, 0x7F	; 127
     f6c:	8e bd       	out	0x2e, r24	; 46
     f6e:	0d b4       	in	r0, 0x2d	; 45
     f70:	07 fe       	sbrs	r0, 7
     f72:	fd cf       	rjmp	.-6      	; 0xf6e <rf_polling_rx_packet+0x2d4>
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	11 c0       	rjmp	.+34     	; 0xf9c <rf_polling_rx_packet+0x302>
     f7a:	1e bc       	out	0x2e, r1	; 46
     f7c:	0d b4       	in	r0, 0x2d	; 45
     f7e:	07 fe       	sbrs	r0, 7
     f80:	fd cf       	rjmp	.-6      	; 0xf7c <rf_polling_rx_packet+0x2e2>
     f82:	e0 91 46 07 	lds	r30, 0x0746
     f86:	f0 91 47 07 	lds	r31, 0x0747
     f8a:	05 80       	ldd	r0, Z+5	; 0x05
     f8c:	f6 81       	ldd	r31, Z+6	; 0x06
     f8e:	e0 2d       	mov	r30, r0
     f90:	e6 0f       	add	r30, r22
     f92:	f1 1d       	adc	r31, r1
     f94:	8e b5       	in	r24, 0x2e	; 46
     f96:	80 83       	st	Z, r24
     f98:	4f 5f       	subi	r20, 0xFF	; 255
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255
     f9c:	64 2f       	mov	r22, r20
     f9e:	e0 91 46 07 	lds	r30, 0x0746
     fa2:	f0 91 47 07 	lds	r31, 0x0747
     fa6:	24 2f       	mov	r18, r20
     fa8:	33 27       	eor	r19, r19
     faa:	83 81       	ldd	r24, Z+3	; 0x03
     fac:	99 27       	eor	r25, r25
     fae:	87 fd       	sbrc	r24, 7
     fb0:	90 95       	com	r25
     fb2:	28 17       	cp	r18, r24
     fb4:	39 07       	cpc	r19, r25
     fb6:	0c f3       	brlt	.-62     	; 0xf7a <rf_polling_rx_packet+0x2e0>
     fb8:	40 9a       	sbi	0x08, 0	; 8
     fba:	40 98       	cbi	0x08, 0	; 8
     fbc:	8f e7       	ldi	r24, 0x7F	; 127
     fbe:	8e bd       	out	0x2e, r24	; 46
     fc0:	0d b4       	in	r0, 0x2d	; 45
     fc2:	07 fc       	sbrc	r0, 7
     fc4:	0a c0       	rjmp	.+20     	; 0xfda <rf_polling_rx_packet+0x340>
     fc6:	fc cf       	rjmp	.-8      	; 0xfc0 <rf_polling_rx_packet+0x326>
     fc8:	0d b4       	in	r0, 0x2d	; 45
     fca:	07 fe       	sbrs	r0, 7
     fcc:	fd cf       	rjmp	.-6      	; 0xfc8 <rf_polling_rx_packet+0x32e>
     fce:	5e b5       	in	r21, 0x2e	; 46
     fd0:	40 9a       	sbi	0x08, 0	; 8
     fd2:	40 98       	cbi	0x08, 0	; 8
     fd4:	8f e7       	ldi	r24, 0x7F	; 127
     fd6:	8e bd       	out	0x2e, r24	; 46
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <rf_polling_rx_packet+0x344>
     fda:	1e bc       	out	0x2e, r1	; 46
     fdc:	f5 cf       	rjmp	.-22     	; 0xfc8 <rf_polling_rx_packet+0x32e>
     fde:	0d b4       	in	r0, 0x2d	; 45
     fe0:	07 fe       	sbrs	r0, 7
     fe2:	fd cf       	rjmp	.-6      	; 0xfde <rf_polling_rx_packet+0x344>
     fe4:	fe 01       	movw	r30, r28
     fe6:	33 96       	adiw	r30, 0x03	; 3
     fe8:	9e 01       	movw	r18, r28
     fea:	2b 5f       	subi	r18, 0xFB	; 251
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	1e bc       	out	0x2e, r1	; 46
     ff0:	0d b4       	in	r0, 0x2d	; 45
     ff2:	07 fe       	sbrs	r0, 7
     ff4:	fd cf       	rjmp	.-6      	; 0xff0 <rf_polling_rx_packet+0x356>
     ff6:	8e b5       	in	r24, 0x2e	; 46
     ff8:	81 93       	st	Z+, r24
     ffa:	e2 17       	cp	r30, r18
     ffc:	f3 07       	cpc	r31, r19
     ffe:	b9 f7       	brne	.-18     	; 0xfee <rf_polling_rx_packet+0x354>
    1000:	40 9a       	sbi	0x08, 0	; 8
    1002:	e0 91 46 07 	lds	r30, 0x0746
    1006:	f0 91 47 07 	lds	r31, 0x0747
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	80 87       	std	Z+8, r24	; 0x08
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	0a c0       	rjmp	.+20     	; 0x102a <rf_polling_rx_packet+0x390>
    1016:	e0 91 46 07 	lds	r30, 0x0746
    101a:	f0 91 47 07 	lds	r31, 0x0747
    101e:	85 81       	ldd	r24, Z+5	; 0x05
    1020:	96 81       	ldd	r25, Z+6	; 0x06
    1022:	a8 0f       	add	r26, r24
    1024:	b9 1f       	adc	r27, r25
    1026:	8c 91       	ld	r24, X
    1028:	48 0f       	add	r20, r24
    102a:	82 2f       	mov	r24, r18
    102c:	e0 91 46 07 	lds	r30, 0x0746
    1030:	f0 91 47 07 	lds	r31, 0x0747
    1034:	2f 5f       	subi	r18, 0xFF	; 255
    1036:	3f 4f       	sbci	r19, 0xFF	; 255
    1038:	a8 2f       	mov	r26, r24
    103a:	bb 27       	eor	r27, r27
    103c:	83 81       	ldd	r24, Z+3	; 0x03
    103e:	99 27       	eor	r25, r25
    1040:	87 fd       	sbrc	r24, 7
    1042:	90 95       	com	r25
    1044:	a8 17       	cp	r26, r24
    1046:	b9 07       	cpc	r27, r25
    1048:	34 f3       	brlt	.-52     	; 0x1016 <rf_polling_rx_packet+0x37c>
    104a:	45 17       	cp	r20, r21
    104c:	e9 f0       	breq	.+58     	; 0x1088 <rf_polling_rx_packet+0x3ee>
    104e:	40 98       	cbi	0x08, 0	; 8
    1050:	8f e7       	ldi	r24, 0x7F	; 127
    1052:	8e bd       	out	0x2e, r24	; 46
    1054:	0d b4       	in	r0, 0x2d	; 45
    1056:	07 fe       	sbrs	r0, 7
    1058:	fd cf       	rjmp	.-6      	; 0x1054 <rf_polling_rx_packet+0x3ba>
    105a:	1e bc       	out	0x2e, r1	; 46
    105c:	0d b4       	in	r0, 0x2d	; 45
    105e:	07 fe       	sbrs	r0, 7
    1060:	fd cf       	rjmp	.-6      	; 0x105c <rf_polling_rx_packet+0x3c2>
    1062:	8e b5       	in	r24, 0x2e	; 46
    1064:	40 9a       	sbi	0x08, 0	; 8
    1066:	40 98       	cbi	0x08, 0	; 8
    1068:	88 e0       	ldi	r24, 0x08	; 8
    106a:	8e bd       	out	0x2e, r24	; 46
    106c:	0d b4       	in	r0, 0x2d	; 45
    106e:	07 fe       	sbrs	r0, 7
    1070:	fd cf       	rjmp	.-6      	; 0x106c <rf_polling_rx_packet+0x3d2>
    1072:	40 9a       	sbi	0x08, 0	; 8
    1074:	40 98       	cbi	0x08, 0	; 8
    1076:	88 e0       	ldi	r24, 0x08	; 8
    1078:	8e bd       	out	0x2e, r24	; 46
    107a:	0d b4       	in	r0, 0x2d	; 45
    107c:	07 fe       	sbrs	r0, 7
    107e:	fd cf       	rjmp	.-6      	; 0x107a <rf_polling_rx_packet+0x3e0>
    1080:	40 9a       	sbi	0x08, 0	; 8
    1082:	8c ef       	ldi	r24, 0xFC	; 252
    1084:	9f ef       	ldi	r25, 0xFF	; 255
    1086:	27 c0       	rjmp	.+78     	; 0x10d6 <rf_polling_rx_packet+0x43c>
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	87 ff       	sbrs	r24, 7
    108c:	08 c0       	rjmp	.+16     	; 0x109e <rf_polling_rx_packet+0x404>
    108e:	80 91 57 07 	lds	r24, 0x0757
    1092:	8f 5f       	subi	r24, 0xFF	; 255
    1094:	80 93 57 07 	sts	0x0757, r24
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	1c c0       	rjmp	.+56     	; 0x10d6 <rf_polling_rx_packet+0x43c>
    109e:	40 98       	cbi	0x08, 0	; 8
    10a0:	8f e7       	ldi	r24, 0x7F	; 127
    10a2:	8e bd       	out	0x2e, r24	; 46
    10a4:	0d b4       	in	r0, 0x2d	; 45
    10a6:	07 fe       	sbrs	r0, 7
    10a8:	fd cf       	rjmp	.-6      	; 0x10a4 <rf_polling_rx_packet+0x40a>
    10aa:	1e bc       	out	0x2e, r1	; 46
    10ac:	0d b4       	in	r0, 0x2d	; 45
    10ae:	07 fe       	sbrs	r0, 7
    10b0:	fd cf       	rjmp	.-6      	; 0x10ac <rf_polling_rx_packet+0x412>
    10b2:	8e b5       	in	r24, 0x2e	; 46
    10b4:	40 9a       	sbi	0x08, 0	; 8
    10b6:	40 98       	cbi	0x08, 0	; 8
    10b8:	88 e0       	ldi	r24, 0x08	; 8
    10ba:	8e bd       	out	0x2e, r24	; 46
    10bc:	0d b4       	in	r0, 0x2d	; 45
    10be:	07 fe       	sbrs	r0, 7
    10c0:	fd cf       	rjmp	.-6      	; 0x10bc <rf_polling_rx_packet+0x422>
    10c2:	40 9a       	sbi	0x08, 0	; 8
    10c4:	40 98       	cbi	0x08, 0	; 8
    10c6:	88 e0       	ldi	r24, 0x08	; 8
    10c8:	8e bd       	out	0x2e, r24	; 46
    10ca:	0d b4       	in	r0, 0x2d	; 45
    10cc:	07 fe       	sbrs	r0, 7
    10ce:	fd cf       	rjmp	.-6      	; 0x10ca <rf_polling_rx_packet+0x430>
    10d0:	40 9a       	sbi	0x08, 0	; 8
    10d2:	8b ef       	ldi	r24, 0xFB	; 251
    10d4:	9f ef       	ldi	r25, 0xFF	; 255
    10d6:	24 96       	adiw	r28, 0x04	; 4
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	08 95       	ret

000010e8 <rf_rx_packet>:
    10e8:	80 91 57 07 	lds	r24, 0x0757
    10ec:	88 23       	and	r24, r24
    10ee:	19 f4       	brne	.+6      	; 0x10f6 <rf_rx_packet+0xe>
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	08 95       	ret
    10f6:	80 91 57 07 	lds	r24, 0x0757
    10fa:	10 92 57 07 	sts	0x0757, r1
    10fe:	99 27       	eor	r25, r25
    1100:	87 fd       	sbrc	r24, 7
    1102:	90 95       	com	r25
    1104:	08 95       	ret

00001106 <rf_flush_rx_fifo>:
    1106:	40 98       	cbi	0x08, 0	; 8
    1108:	88 e0       	ldi	r24, 0x08	; 8
    110a:	8e bd       	out	0x2e, r24	; 46
    110c:	0d b4       	in	r0, 0x2d	; 45
    110e:	07 fe       	sbrs	r0, 7
    1110:	fd cf       	rjmp	.-6      	; 0x110c <rf_flush_rx_fifo+0x6>
    1112:	40 9a       	sbi	0x08, 0	; 8
    1114:	40 98       	cbi	0x08, 0	; 8
    1116:	88 e0       	ldi	r24, 0x08	; 8
    1118:	8e bd       	out	0x2e, r24	; 46
    111a:	0d b4       	in	r0, 0x2d	; 45
    111c:	07 fe       	sbrs	r0, 7
    111e:	fd cf       	rjmp	.-6      	; 0x111a <rf_flush_rx_fifo+0x14>
    1120:	40 9a       	sbi	0x08, 0	; 8
    1122:	08 95       	ret

00001124 <rf_set_cca_thresh>:
    1124:	99 27       	eor	r25, r25
    1126:	87 fd       	sbrc	r24, 7
    1128:	90 95       	com	r25
    112a:	38 2f       	mov	r19, r24
    112c:	22 27       	eor	r18, r18
    112e:	20 68       	ori	r18, 0x80	; 128
    1130:	40 98       	cbi	0x08, 0	; 8
    1132:	83 e1       	ldi	r24, 0x13	; 19
    1134:	8e bd       	out	0x2e, r24	; 46
    1136:	0d b4       	in	r0, 0x2d	; 45
    1138:	07 fe       	sbrs	r0, 7
    113a:	fd cf       	rjmp	.-6      	; 0x1136 <rf_set_cca_thresh+0x12>
    113c:	83 2f       	mov	r24, r19
    113e:	99 27       	eor	r25, r25
    1140:	8e bd       	out	0x2e, r24	; 46
    1142:	0d b4       	in	r0, 0x2d	; 45
    1144:	07 fe       	sbrs	r0, 7
    1146:	fd cf       	rjmp	.-6      	; 0x1142 <rf_set_cca_thresh+0x1e>
    1148:	2e bd       	out	0x2e, r18	; 46
    114a:	0d b4       	in	r0, 0x2d	; 45
    114c:	07 fe       	sbrs	r0, 7
    114e:	fd cf       	rjmp	.-6      	; 0x114a <rf_set_cca_thresh+0x26>
    1150:	40 9a       	sbi	0x08, 0	; 8
    1152:	08 95       	ret

00001154 <rf_test_mode>:
    1154:	40 98       	cbi	0x08, 0	; 8
    1156:	86 e0       	ldi	r24, 0x06	; 6
    1158:	8e bd       	out	0x2e, r24	; 46
    115a:	0d b4       	in	r0, 0x2d	; 45
    115c:	07 fe       	sbrs	r0, 7
    115e:	fd cf       	rjmp	.-6      	; 0x115a <rf_test_mode+0x6>
    1160:	40 9a       	sbi	0x08, 0	; 8
    1162:	40 98       	cbi	0x08, 0	; 8
    1164:	82 e1       	ldi	r24, 0x12	; 18
    1166:	8e bd       	out	0x2e, r24	; 46
    1168:	0d b4       	in	r0, 0x2d	; 45
    116a:	07 fe       	sbrs	r0, 7
    116c:	fd cf       	rjmp	.-6      	; 0x1168 <rf_test_mode+0x14>
    116e:	85 e0       	ldi	r24, 0x05	; 5
    1170:	8e bd       	out	0x2e, r24	; 46
    1172:	0d b4       	in	r0, 0x2d	; 45
    1174:	07 fe       	sbrs	r0, 7
    1176:	fd cf       	rjmp	.-6      	; 0x1172 <rf_test_mode+0x1e>
    1178:	88 e0       	ldi	r24, 0x08	; 8
    117a:	8e bd       	out	0x2e, r24	; 46
    117c:	0d b4       	in	r0, 0x2d	; 45
    117e:	07 fe       	sbrs	r0, 7
    1180:	fd cf       	rjmp	.-6      	; 0x117c <rf_test_mode+0x28>
    1182:	40 9a       	sbi	0x08, 0	; 8
    1184:	40 98       	cbi	0x08, 0	; 8
    1186:	8e e2       	ldi	r24, 0x2E	; 46
    1188:	8e bd       	out	0x2e, r24	; 46
    118a:	0d b4       	in	r0, 0x2d	; 45
    118c:	07 fe       	sbrs	r0, 7
    118e:	fd cf       	rjmp	.-6      	; 0x118a <rf_test_mode+0x36>
    1190:	88 e1       	ldi	r24, 0x18	; 24
    1192:	8e bd       	out	0x2e, r24	; 46
    1194:	0d b4       	in	r0, 0x2d	; 45
    1196:	07 fe       	sbrs	r0, 7
    1198:	fd cf       	rjmp	.-6      	; 0x1194 <rf_test_mode+0x40>
    119a:	1e bc       	out	0x2e, r1	; 46
    119c:	0d b4       	in	r0, 0x2d	; 45
    119e:	07 fe       	sbrs	r0, 7
    11a0:	fd cf       	rjmp	.-6      	; 0x119c <rf_test_mode+0x48>
    11a2:	40 9a       	sbi	0x08, 0	; 8
    11a4:	0e 94 83 08 	call	0x1106	; 0x1106 <rf_flush_rx_fifo>
    11a8:	08 95       	ret

000011aa <rf_data_mode>:
    11aa:	40 98       	cbi	0x08, 0	; 8
    11ac:	86 e0       	ldi	r24, 0x06	; 6
    11ae:	8e bd       	out	0x2e, r24	; 46
    11b0:	0d b4       	in	r0, 0x2d	; 45
    11b2:	07 fe       	sbrs	r0, 7
    11b4:	fd cf       	rjmp	.-6      	; 0x11b0 <rf_data_mode+0x6>
    11b6:	40 9a       	sbi	0x08, 0	; 8
    11b8:	40 98       	cbi	0x08, 0	; 8
    11ba:	82 e1       	ldi	r24, 0x12	; 18
    11bc:	8e bd       	out	0x2e, r24	; 46
    11be:	0d b4       	in	r0, 0x2d	; 45
    11c0:	07 fe       	sbrs	r0, 7
    11c2:	fd cf       	rjmp	.-6      	; 0x11be <rf_data_mode+0x14>
    11c4:	85 e0       	ldi	r24, 0x05	; 5
    11c6:	8e bd       	out	0x2e, r24	; 46
    11c8:	0d b4       	in	r0, 0x2d	; 45
    11ca:	07 fe       	sbrs	r0, 7
    11cc:	fd cf       	rjmp	.-6      	; 0x11c8 <rf_data_mode+0x1e>
    11ce:	1e bc       	out	0x2e, r1	; 46
    11d0:	0d b4       	in	r0, 0x2d	; 45
    11d2:	07 fe       	sbrs	r0, 7
    11d4:	fd cf       	rjmp	.-6      	; 0x11d0 <rf_data_mode+0x26>
    11d6:	40 9a       	sbi	0x08, 0	; 8
    11d8:	40 98       	cbi	0x08, 0	; 8
    11da:	8e e2       	ldi	r24, 0x2E	; 46
    11dc:	8e bd       	out	0x2e, r24	; 46
    11de:	0d b4       	in	r0, 0x2d	; 45
    11e0:	07 fe       	sbrs	r0, 7
    11e2:	fd cf       	rjmp	.-6      	; 0x11de <rf_data_mode+0x34>
    11e4:	1e bc       	out	0x2e, r1	; 46
    11e6:	0d b4       	in	r0, 0x2d	; 45
    11e8:	07 fe       	sbrs	r0, 7
    11ea:	fd cf       	rjmp	.-6      	; 0x11e6 <rf_data_mode+0x3c>
    11ec:	1e bc       	out	0x2e, r1	; 46
    11ee:	0d b4       	in	r0, 0x2d	; 45
    11f0:	07 fe       	sbrs	r0, 7
    11f2:	fd cf       	rjmp	.-6      	; 0x11ee <rf_data_mode+0x44>
    11f4:	40 9a       	sbi	0x08, 0	; 8
    11f6:	0e 94 83 08 	call	0x1106	; 0x1106 <rf_flush_rx_fifo>
    11fa:	08 95       	ret

000011fc <rf_carrier_on>:
    11fc:	40 98       	cbi	0x08, 0	; 8
    11fe:	84 e0       	ldi	r24, 0x04	; 4
    1200:	8e bd       	out	0x2e, r24	; 46
    1202:	0d b4       	in	r0, 0x2d	; 45
    1204:	07 fe       	sbrs	r0, 7
    1206:	fd cf       	rjmp	.-6      	; 0x1202 <rf_carrier_on+0x6>
    1208:	40 9a       	sbi	0x08, 0	; 8
    120a:	08 95       	ret

0000120c <rf_carrier_off>:
    120c:	40 98       	cbi	0x08, 0	; 8
    120e:	86 e0       	ldi	r24, 0x06	; 6
    1210:	8e bd       	out	0x2e, r24	; 46
    1212:	0d b4       	in	r0, 0x2d	; 45
    1214:	07 fe       	sbrs	r0, 7
    1216:	fd cf       	rjmp	.-6      	; 0x1212 <rf_carrier_off+0x6>
    1218:	40 9a       	sbi	0x08, 0	; 8
    121a:	08 95       	ret

0000121c <rf_tx_packet>:
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	22 97       	sbiw	r28, 0x02	; 2
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	dc 01       	movw	r26, r24
    123a:	50 91 43 07 	lds	r21, 0x0743
    123e:	55 23       	and	r21, r21
    1240:	39 f0       	breq	.+14     	; 0x1250 <rf_tx_packet+0x34>
    1242:	40 98       	cbi	0x08, 0	; 8
    1244:	8d e0       	ldi	r24, 0x0D	; 13
    1246:	8e bd       	out	0x2e, r24	; 46
    1248:	0d b4       	in	r0, 0x2d	; 45
    124a:	07 fe       	sbrs	r0, 7
    124c:	fd cf       	rjmp	.-6      	; 0x1248 <rf_tx_packet+0x2c>
    124e:	40 9a       	sbi	0x08, 0	; 8
    1250:	fd 01       	movw	r30, r26
    1252:	42 81       	ldd	r20, Z+2	; 0x02
    1254:	64 2f       	mov	r22, r20
    1256:	77 27       	eor	r23, r23
    1258:	67 fd       	sbrc	r22, 7
    125a:	70 95       	com	r23
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	08 c0       	rjmp	.+16     	; 0x1274 <rf_tx_packet+0x58>
    1264:	fd 01       	movw	r30, r26
    1266:	83 81       	ldd	r24, Z+3	; 0x03
    1268:	94 81       	ldd	r25, Z+4	; 0x04
    126a:	e8 0e       	add	r14, r24
    126c:	f9 1e       	adc	r15, r25
    126e:	f7 01       	movw	r30, r14
    1270:	80 81       	ld	r24, Z
    1272:	18 0f       	add	r17, r24
    1274:	82 2f       	mov	r24, r18
    1276:	2f 5f       	subi	r18, 0xFF	; 255
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	e8 2e       	mov	r14, r24
    127c:	ff 24       	eor	r15, r15
    127e:	e6 16       	cp	r14, r22
    1280:	f7 06       	cpc	r15, r23
    1282:	84 f3       	brlt	.-32     	; 0x1264 <rf_tx_packet+0x48>
    1284:	94 2f       	mov	r25, r20
    1286:	94 5f       	subi	r25, 0xF4	; 244
    1288:	51 11       	cpse	r21, r1
    128a:	9c 5f       	subi	r25, 0xFC	; 252
    128c:	67 99       	sbic	0x0c, 7	; 12
    128e:	fe cf       	rjmp	.-4      	; 0x128c <rf_tx_packet+0x70>
    1290:	4e 99       	sbic	0x09, 6	; 9
    1292:	fc cf       	rjmp	.-8      	; 0x128c <rf_tx_packet+0x70>
    1294:	f8 94       	cli
    1296:	40 98       	cbi	0x08, 0	; 8
    1298:	89 e0       	ldi	r24, 0x09	; 9
    129a:	8e bd       	out	0x2e, r24	; 46
    129c:	0d b4       	in	r0, 0x2d	; 45
    129e:	07 fe       	sbrs	r0, 7
    12a0:	fd cf       	rjmp	.-6      	; 0x129c <rf_tx_packet+0x80>
    12a2:	40 9a       	sbi	0x08, 0	; 8
    12a4:	40 98       	cbi	0x08, 0	; 8
    12a6:	89 e0       	ldi	r24, 0x09	; 9
    12a8:	8e bd       	out	0x2e, r24	; 46
    12aa:	0d b4       	in	r0, 0x2d	; 45
    12ac:	07 fe       	sbrs	r0, 7
    12ae:	fd cf       	rjmp	.-6      	; 0x12aa <rf_tx_packet+0x8e>
    12b0:	40 9a       	sbi	0x08, 0	; 8
    12b2:	40 98       	cbi	0x08, 0	; 8
    12b4:	8e e3       	ldi	r24, 0x3E	; 62
    12b6:	8e bd       	out	0x2e, r24	; 46
    12b8:	0d b4       	in	r0, 0x2d	; 45
    12ba:	07 fc       	sbrc	r0, 7
    12bc:	05 c0       	rjmp	.+10     	; 0x12c8 <rf_tx_packet+0xac>
    12be:	fc cf       	rjmp	.-8      	; 0x12b8 <rf_tx_packet+0x9c>
    12c0:	0d b4       	in	r0, 0x2d	; 45
    12c2:	07 fc       	sbrc	r0, 7
    12c4:	2a c1       	rjmp	.+596    	; 0x151a <rf_tx_packet+0x2fe>
    12c6:	fc cf       	rjmp	.-8      	; 0x12c0 <rf_tx_packet+0xa4>
    12c8:	9e bd       	out	0x2e, r25	; 46
    12ca:	fa cf       	rjmp	.-12     	; 0x12c0 <rf_tx_packet+0xa4>
    12cc:	81 e6       	ldi	r24, 0x61	; 97
    12ce:	98 e8       	ldi	r25, 0x88	; 136
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	55 23       	and	r21, r21
    12d6:	29 f0       	breq	.+10     	; 0x12e2 <rf_tx_packet+0xc6>
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	9a 81       	ldd	r25, Y+2	; 0x02
    12dc:	88 60       	ori	r24, 0x08	; 8
    12de:	9a 83       	std	Y+2, r25	; 0x02
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	40 98       	cbi	0x08, 0	; 8
    12e4:	8e e3       	ldi	r24, 0x3E	; 62
    12e6:	8e bd       	out	0x2e, r24	; 46
    12e8:	0d b4       	in	r0, 0x2d	; 45
    12ea:	07 fe       	sbrs	r0, 7
    12ec:	fd cf       	rjmp	.-6      	; 0x12e8 <rf_tx_packet+0xcc>
    12ee:	fe 01       	movw	r30, r28
    12f0:	31 96       	adiw	r30, 0x01	; 1
    12f2:	9e 01       	movw	r18, r28
    12f4:	2d 5f       	subi	r18, 0xFD	; 253
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	80 81       	ld	r24, Z
    12fa:	8e bd       	out	0x2e, r24	; 46
    12fc:	0d b4       	in	r0, 0x2d	; 45
    12fe:	07 fe       	sbrs	r0, 7
    1300:	fd cf       	rjmp	.-6      	; 0x12fc <rf_tx_packet+0xe0>
    1302:	31 96       	adiw	r30, 0x01	; 1
    1304:	e2 17       	cp	r30, r18
    1306:	f3 07       	cpc	r31, r19
    1308:	b9 f7       	brne	.-18     	; 0x12f8 <rf_tx_packet+0xdc>
    130a:	40 9a       	sbi	0x08, 0	; 8
    130c:	40 98       	cbi	0x08, 0	; 8
    130e:	8e e3       	ldi	r24, 0x3E	; 62
    1310:	8e bd       	out	0x2e, r24	; 46
    1312:	0d b4       	in	r0, 0x2d	; 45
    1314:	07 fc       	sbrc	r0, 7
    1316:	05 c0       	rjmp	.+10     	; 0x1322 <rf_tx_packet+0x106>
    1318:	fc cf       	rjmp	.-8      	; 0x1312 <rf_tx_packet+0xf6>
    131a:	0d b4       	in	r0, 0x2d	; 45
    131c:	07 fc       	sbrc	r0, 7
    131e:	08 c1       	rjmp	.+528    	; 0x1530 <rf_tx_packet+0x314>
    1320:	fc cf       	rjmp	.-8      	; 0x131a <rf_tx_packet+0xfe>
    1322:	80 91 48 07 	lds	r24, 0x0748
    1326:	8e bd       	out	0x2e, r24	; 46
    1328:	f8 cf       	rjmp	.-16     	; 0x131a <rf_tx_packet+0xfe>
    132a:	0d b4       	in	r0, 0x2d	; 45
    132c:	07 fe       	sbrs	r0, 7
    132e:	fd cf       	rjmp	.-6      	; 0x132a <rf_tx_packet+0x10e>
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	f9 01       	movw	r30, r18
    1336:	e6 5b       	subi	r30, 0xB6	; 182
    1338:	f8 4f       	sbci	r31, 0xF8	; 248
    133a:	80 81       	ld	r24, Z
    133c:	8e bd       	out	0x2e, r24	; 46
    133e:	0d b4       	in	r0, 0x2d	; 45
    1340:	07 fe       	sbrs	r0, 7
    1342:	fd cf       	rjmp	.-6      	; 0x133e <rf_tx_packet+0x122>
    1344:	2f 5f       	subi	r18, 0xFF	; 255
    1346:	3f 4f       	sbci	r19, 0xFF	; 255
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	99 f7       	brne	.-26     	; 0x1334 <rf_tx_packet+0x118>
    134e:	40 9a       	sbi	0x08, 0	; 8
    1350:	40 98       	cbi	0x08, 0	; 8
    1352:	8e e3       	ldi	r24, 0x3E	; 62
    1354:	8e bd       	out	0x2e, r24	; 46
    1356:	0d b4       	in	r0, 0x2d	; 45
    1358:	07 fe       	sbrs	r0, 7
    135a:	fd cf       	rjmp	.-6      	; 0x1356 <rf_tx_packet+0x13a>
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	fd 01       	movw	r30, r26
    1362:	e2 0f       	add	r30, r18
    1364:	f3 1f       	adc	r31, r19
    1366:	80 81       	ld	r24, Z
    1368:	8e bd       	out	0x2e, r24	; 46
    136a:	0d b4       	in	r0, 0x2d	; 45
    136c:	07 fe       	sbrs	r0, 7
    136e:	fd cf       	rjmp	.-6      	; 0x136a <rf_tx_packet+0x14e>
    1370:	2f 5f       	subi	r18, 0xFF	; 255
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	99 f7       	brne	.-26     	; 0x1360 <rf_tx_packet+0x144>
    137a:	40 9a       	sbi	0x08, 0	; 8
    137c:	40 98       	cbi	0x08, 0	; 8
    137e:	8e e3       	ldi	r24, 0x3E	; 62
    1380:	8e bd       	out	0x2e, r24	; 46
    1382:	0d b4       	in	r0, 0x2d	; 45
    1384:	07 fe       	sbrs	r0, 7
    1386:	fd cf       	rjmp	.-6      	; 0x1382 <rf_tx_packet+0x166>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	f9 01       	movw	r30, r18
    138e:	e4 5b       	subi	r30, 0xB4	; 180
    1390:	f8 4f       	sbci	r31, 0xF8	; 248
    1392:	80 81       	ld	r24, Z
    1394:	8e bd       	out	0x2e, r24	; 46
    1396:	0d b4       	in	r0, 0x2d	; 45
    1398:	07 fe       	sbrs	r0, 7
    139a:	fd cf       	rjmp	.-6      	; 0x1396 <rf_tx_packet+0x17a>
    139c:	2f 5f       	subi	r18, 0xFF	; 255
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	99 f7       	brne	.-26     	; 0x138c <rf_tx_packet+0x170>
    13a6:	40 9a       	sbi	0x08, 0	; 8
    13a8:	55 23       	and	r21, r21
    13aa:	99 f0       	breq	.+38     	; 0x13d2 <rf_tx_packet+0x1b6>
    13ac:	40 98       	cbi	0x08, 0	; 8
    13ae:	8e e3       	ldi	r24, 0x3E	; 62
    13b0:	8e bd       	out	0x2e, r24	; 46
    13b2:	0d b4       	in	r0, 0x2d	; 45
    13b4:	07 fe       	sbrs	r0, 7
    13b6:	fd cf       	rjmp	.-6      	; 0x13b2 <rf_tx_packet+0x196>
    13b8:	e3 e5       	ldi	r30, 0x53	; 83
    13ba:	f7 e0       	ldi	r31, 0x07	; 7
    13bc:	80 81       	ld	r24, Z
    13be:	8e bd       	out	0x2e, r24	; 46
    13c0:	0d b4       	in	r0, 0x2d	; 45
    13c2:	07 fe       	sbrs	r0, 7
    13c4:	fd cf       	rjmp	.-6      	; 0x13c0 <rf_tx_packet+0x1a4>
    13c6:	31 96       	adiw	r30, 0x01	; 1
    13c8:	87 e0       	ldi	r24, 0x07	; 7
    13ca:	e7 35       	cpi	r30, 0x57	; 87
    13cc:	f8 07       	cpc	r31, r24
    13ce:	b1 f7       	brne	.-20     	; 0x13bc <rf_tx_packet+0x1a0>
    13d0:	40 9a       	sbi	0x08, 0	; 8
    13d2:	40 98       	cbi	0x08, 0	; 8
    13d4:	8e e3       	ldi	r24, 0x3E	; 62
    13d6:	8e bd       	out	0x2e, r24	; 46
    13d8:	0d b4       	in	r0, 0x2d	; 45
    13da:	07 fe       	sbrs	r0, 7
    13dc:	fd cf       	rjmp	.-6      	; 0x13d8 <rf_tx_packet+0x1bc>
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	0d c0       	rjmp	.+26     	; 0x13fe <rf_tx_packet+0x1e2>
    13e4:	fd 01       	movw	r30, r26
    13e6:	83 81       	ldd	r24, Z+3	; 0x03
    13e8:	94 81       	ldd	r25, Z+4	; 0x04
    13ea:	48 0f       	add	r20, r24
    13ec:	59 1f       	adc	r21, r25
    13ee:	fa 01       	movw	r30, r20
    13f0:	80 81       	ld	r24, Z
    13f2:	8e bd       	out	0x2e, r24	; 46
    13f4:	0d b4       	in	r0, 0x2d	; 45
    13f6:	07 fe       	sbrs	r0, 7
    13f8:	fd cf       	rjmp	.-6      	; 0x13f4 <rf_tx_packet+0x1d8>
    13fa:	2f 5f       	subi	r18, 0xFF	; 255
    13fc:	3f 4f       	sbci	r19, 0xFF	; 255
    13fe:	42 2f       	mov	r20, r18
    1400:	55 27       	eor	r21, r21
    1402:	46 17       	cp	r20, r22
    1404:	57 07       	cpc	r21, r23
    1406:	74 f3       	brlt	.-36     	; 0x13e4 <rf_tx_packet+0x1c8>
    1408:	40 9a       	sbi	0x08, 0	; 8
    140a:	40 98       	cbi	0x08, 0	; 8
    140c:	8e e3       	ldi	r24, 0x3E	; 62
    140e:	8e bd       	out	0x2e, r24	; 46
    1410:	0d b4       	in	r0, 0x2d	; 45
    1412:	07 fc       	sbrc	r0, 7
    1414:	05 c0       	rjmp	.+10     	; 0x1420 <rf_tx_packet+0x204>
    1416:	fc cf       	rjmp	.-8      	; 0x1410 <rf_tx_packet+0x1f4>
    1418:	0d b4       	in	r0, 0x2d	; 45
    141a:	07 fc       	sbrc	r0, 7
    141c:	8e c0       	rjmp	.+284    	; 0x153a <rf_tx_packet+0x31e>
    141e:	fc cf       	rjmp	.-8      	; 0x1418 <rf_tx_packet+0x1fc>
    1420:	1e bd       	out	0x2e, r17	; 46
    1422:	fa cf       	rjmp	.-12     	; 0x1418 <rf_tx_packet+0x1fc>
    1424:	80 91 4e 07 	lds	r24, 0x074E
    1428:	88 23       	and	r24, r24
    142a:	39 f4       	brne	.+14     	; 0x143a <rf_tx_packet+0x21e>
    142c:	40 98       	cbi	0x08, 0	; 8
    142e:	83 e0       	ldi	r24, 0x03	; 3
    1430:	8e bd       	out	0x2e, r24	; 46
    1432:	0d b4       	in	r0, 0x2d	; 45
    1434:	07 fe       	sbrs	r0, 7
    1436:	fd cf       	rjmp	.-6      	; 0x1432 <rf_tx_packet+0x216>
    1438:	40 9a       	sbi	0x08, 0	; 8
    143a:	40 98       	cbi	0x08, 0	; 8
    143c:	1e bc       	out	0x2e, r1	; 46
    143e:	0d b4       	in	r0, 0x2d	; 45
    1440:	07 fe       	sbrs	r0, 7
    1442:	fd cf       	rjmp	.-6      	; 0x143e <rf_tx_packet+0x222>
    1444:	8e b5       	in	r24, 0x2e	; 46
    1446:	40 9a       	sbi	0x08, 0	; 8
    1448:	81 ff       	sbrs	r24, 1
    144a:	f7 cf       	rjmp	.-18     	; 0x143a <rf_tx_packet+0x21e>
    144c:	00 e0       	ldi	r16, 0x00	; 0
    144e:	40 98       	cbi	0x08, 0	; 8
    1450:	85 e0       	ldi	r24, 0x05	; 5
    1452:	8e bd       	out	0x2e, r24	; 46
    1454:	0d b4       	in	r0, 0x2d	; 45
    1456:	07 fe       	sbrs	r0, 7
    1458:	fd cf       	rjmp	.-6      	; 0x1454 <rf_tx_packet+0x238>
    145a:	40 9a       	sbi	0x08, 0	; 8
    145c:	40 98       	cbi	0x08, 0	; 8
    145e:	1e bc       	out	0x2e, r1	; 46
    1460:	0d b4       	in	r0, 0x2d	; 45
    1462:	07 fe       	sbrs	r0, 7
    1464:	fd cf       	rjmp	.-6      	; 0x1460 <rf_tx_packet+0x244>
    1466:	1e b5       	in	r17, 0x2e	; 46
    1468:	40 9a       	sbi	0x08, 0	; 8
    146a:	0f 5f       	subi	r16, 0xFF	; 255
    146c:	05 36       	cpi	r16, 0x65	; 101
    146e:	51 f4       	brne	.+20     	; 0x1484 <rf_tx_packet+0x268>
    1470:	78 94       	sei
    1472:	80 91 41 07 	lds	r24, 0x0741
    1476:	90 91 42 07 	lds	r25, 0x0742
    147a:	0e 94 20 1c 	call	0x3840	; 0x3840 <nrk_sem_post>
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	62 c0       	rjmp	.+196    	; 0x1548 <rf_tx_packet+0x32c>
    1484:	84 e6       	ldi	r24, 0x64	; 100
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 ff 12 	call	0x25fe	; 0x25fe <halWait>
    148c:	13 fd       	sbrc	r17, 3
    148e:	08 c0       	rjmp	.+16     	; 0x14a0 <rf_tx_packet+0x284>
    1490:	de cf       	rjmp	.-68     	; 0x144e <rf_tx_packet+0x232>
    1492:	40 98       	cbi	0x08, 0	; 8
    1494:	84 e0       	ldi	r24, 0x04	; 4
    1496:	8e bd       	out	0x2e, r24	; 46
    1498:	0d b4       	in	r0, 0x2d	; 45
    149a:	07 fe       	sbrs	r0, 7
    149c:	fd cf       	rjmp	.-6      	; 0x1498 <rf_tx_packet+0x27c>
    149e:	40 9a       	sbi	0x08, 0	; 8
    14a0:	78 94       	sei
    14a2:	4e 9b       	sbis	0x09, 6	; 9
    14a4:	fe cf       	rjmp	.-4      	; 0x14a2 <rf_tx_packet+0x286>
    14a6:	4e 99       	sbic	0x09, 6	; 9
    14a8:	fe cf       	rjmp	.-4      	; 0x14a6 <rf_tx_packet+0x28a>
    14aa:	80 91 51 07 	lds	r24, 0x0751
    14ae:	88 23       	and	r24, r24
    14b0:	91 f0       	breq	.+36     	; 0x14d6 <rf_tx_packet+0x2ba>
    14b2:	84 ea       	ldi	r24, 0xA4	; 164
    14b4:	92 e0       	ldi	r25, 0x02	; 2
    14b6:	0e 94 ff 12 	call	0x25fe	; 0x25fe <halWait>
    14ba:	31 9b       	sbis	0x06, 1	; 6
    14bc:	0e c0       	rjmp	.+28     	; 0x14da <rf_tx_packet+0x2be>
    14be:	40 98       	cbi	0x08, 0	; 8
    14c0:	8f e7       	ldi	r24, 0x7F	; 127
    14c2:	8e bd       	out	0x2e, r24	; 46
    14c4:	0d b4       	in	r0, 0x2d	; 45
    14c6:	07 fe       	sbrs	r0, 7
    14c8:	fd cf       	rjmp	.-6      	; 0x14c4 <rf_tx_packet+0x2a8>
    14ca:	1e bc       	out	0x2e, r1	; 46
    14cc:	0d b4       	in	r0, 0x2d	; 45
    14ce:	07 fe       	sbrs	r0, 7
    14d0:	fd cf       	rjmp	.-6      	; 0x14cc <rf_tx_packet+0x2b0>
    14d2:	8e b5       	in	r24, 0x2e	; 46
    14d4:	40 9a       	sbi	0x08, 0	; 8
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	0f c0       	rjmp	.+30     	; 0x14f8 <rf_tx_packet+0x2dc>
    14da:	40 98       	cbi	0x08, 0	; 8
    14dc:	88 e0       	ldi	r24, 0x08	; 8
    14de:	8e bd       	out	0x2e, r24	; 46
    14e0:	0d b4       	in	r0, 0x2d	; 45
    14e2:	07 fe       	sbrs	r0, 7
    14e4:	fd cf       	rjmp	.-6      	; 0x14e0 <rf_tx_packet+0x2c4>
    14e6:	40 9a       	sbi	0x08, 0	; 8
    14e8:	40 98       	cbi	0x08, 0	; 8
    14ea:	88 e0       	ldi	r24, 0x08	; 8
    14ec:	8e bd       	out	0x2e, r24	; 46
    14ee:	0d b4       	in	r0, 0x2d	; 45
    14f0:	07 fe       	sbrs	r0, 7
    14f2:	fd cf       	rjmp	.-6      	; 0x14ee <rf_tx_packet+0x2d2>
    14f4:	40 9a       	sbi	0x08, 0	; 8
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	f8 94       	cli
    14fa:	40 98       	cbi	0x08, 0	; 8
    14fc:	86 e0       	ldi	r24, 0x06	; 6
    14fe:	8e bd       	out	0x2e, r24	; 46
    1500:	0d b4       	in	r0, 0x2d	; 45
    1502:	07 fe       	sbrs	r0, 7
    1504:	fd cf       	rjmp	.-6      	; 0x1500 <rf_tx_packet+0x2e4>
    1506:	40 9a       	sbi	0x08, 0	; 8
    1508:	78 94       	sei
    150a:	80 91 48 07 	lds	r24, 0x0748
    150e:	8f 5f       	subi	r24, 0xFF	; 255
    1510:	80 93 48 07 	sts	0x0748, r24
    1514:	89 2f       	mov	r24, r25
    1516:	99 27       	eor	r25, r25
    1518:	17 c0       	rjmp	.+46     	; 0x1548 <rf_tx_packet+0x32c>
    151a:	40 9a       	sbi	0x08, 0	; 8
    151c:	81 e4       	ldi	r24, 0x41	; 65
    151e:	98 e8       	ldi	r25, 0x88	; 136
    1520:	9a 83       	std	Y+2, r25	; 0x02
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	80 91 51 07 	lds	r24, 0x0751
    1528:	88 23       	and	r24, r24
    152a:	09 f0       	breq	.+2      	; 0x152e <rf_tx_packet+0x312>
    152c:	cf ce       	rjmp	.-610    	; 0x12cc <rf_tx_packet+0xb0>
    152e:	d2 ce       	rjmp	.-604    	; 0x12d4 <rf_tx_packet+0xb8>
    1530:	40 9a       	sbi	0x08, 0	; 8
    1532:	40 98       	cbi	0x08, 0	; 8
    1534:	8e e3       	ldi	r24, 0x3E	; 62
    1536:	8e bd       	out	0x2e, r24	; 46
    1538:	f8 ce       	rjmp	.-528    	; 0x132a <rf_tx_packet+0x10e>
    153a:	40 9a       	sbi	0x08, 0	; 8
    153c:	fd 01       	movw	r30, r26
    153e:	85 81       	ldd	r24, Z+5	; 0x05
    1540:	88 23       	and	r24, r24
    1542:	09 f0       	breq	.+2      	; 0x1546 <rf_tx_packet+0x32a>
    1544:	6f cf       	rjmp	.-290    	; 0x1424 <rf_tx_packet+0x208>
    1546:	a5 cf       	rjmp	.-182    	; 0x1492 <rf_tx_packet+0x276>
    1548:	22 96       	adiw	r28, 0x02	; 2
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	08 95       	ret

00001562 <rf_tx_tdma_packet>:
    1562:	bf 92       	push	r11
    1564:	cf 92       	push	r12
    1566:	df 92       	push	r13
    1568:	ef 92       	push	r14
    156a:	ff 92       	push	r15
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	22 97       	sbiw	r28, 0x02	; 2
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	8c 01       	movw	r16, r24
    1586:	6b 01       	movw	r12, r22
    1588:	7a 01       	movw	r14, r20
    158a:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_nrk_os_timer_get>
    158e:	40 98       	cbi	0x08, 0	; 8
    1590:	88 e0       	ldi	r24, 0x08	; 8
    1592:	8e bd       	out	0x2e, r24	; 46
    1594:	0d b4       	in	r0, 0x2d	; 45
    1596:	07 fe       	sbrs	r0, 7
    1598:	fd cf       	rjmp	.-6      	; 0x1594 <rf_tx_tdma_packet+0x32>
    159a:	40 9a       	sbi	0x08, 0	; 8
    159c:	40 98       	cbi	0x08, 0	; 8
    159e:	88 e0       	ldi	r24, 0x08	; 8
    15a0:	8e bd       	out	0x2e, r24	; 46
    15a2:	0d b4       	in	r0, 0x2d	; 45
    15a4:	07 fe       	sbrs	r0, 7
    15a6:	fd cf       	rjmp	.-6      	; 0x15a2 <rf_tx_tdma_packet+0x40>
    15a8:	40 9a       	sbi	0x08, 0	; 8
    15aa:	67 99       	sbic	0x0c, 7	; 12
    15ac:	fe cf       	rjmp	.-4      	; 0x15aa <rf_tx_tdma_packet+0x48>
    15ae:	4e 99       	sbic	0x09, 6	; 9
    15b0:	fc cf       	rjmp	.-8      	; 0x15aa <rf_tx_tdma_packet+0x48>
    15b2:	f8 94       	cli
    15b4:	40 98       	cbi	0x08, 0	; 8
    15b6:	89 e0       	ldi	r24, 0x09	; 9
    15b8:	8e bd       	out	0x2e, r24	; 46
    15ba:	0d b4       	in	r0, 0x2d	; 45
    15bc:	07 fe       	sbrs	r0, 7
    15be:	fd cf       	rjmp	.-6      	; 0x15ba <rf_tx_tdma_packet+0x58>
    15c0:	40 9a       	sbi	0x08, 0	; 8
    15c2:	40 98       	cbi	0x08, 0	; 8
    15c4:	89 e0       	ldi	r24, 0x09	; 9
    15c6:	8e bd       	out	0x2e, r24	; 46
    15c8:	0d b4       	in	r0, 0x2d	; 45
    15ca:	07 fe       	sbrs	r0, 7
    15cc:	fd cf       	rjmp	.-6      	; 0x15c8 <rf_tx_tdma_packet+0x66>
    15ce:	40 9a       	sbi	0x08, 0	; 8
    15d0:	f8 01       	movw	r30, r16
    15d2:	62 81       	ldd	r22, Z+2	; 0x02
    15d4:	46 2f       	mov	r20, r22
    15d6:	55 27       	eor	r21, r21
    15d8:	47 fd       	sbrc	r20, 7
    15da:	50 95       	com	r21
    15dc:	bb 24       	eor	r11, r11
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	07 c0       	rjmp	.+14     	; 0x15f2 <rf_tx_tdma_packet+0x90>
    15e4:	f8 01       	movw	r30, r16
    15e6:	83 81       	ldd	r24, Z+3	; 0x03
    15e8:	94 81       	ldd	r25, Z+4	; 0x04
    15ea:	a8 0f       	add	r26, r24
    15ec:	b9 1f       	adc	r27, r25
    15ee:	8c 91       	ld	r24, X
    15f0:	b8 0e       	add	r11, r24
    15f2:	82 2f       	mov	r24, r18
    15f4:	2f 5f       	subi	r18, 0xFF	; 255
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	a8 2f       	mov	r26, r24
    15fa:	bb 27       	eor	r27, r27
    15fc:	a4 17       	cp	r26, r20
    15fe:	b5 07       	cpc	r27, r21
    1600:	8c f3       	brlt	.-30     	; 0x15e4 <rf_tx_tdma_packet+0x82>
    1602:	96 2f       	mov	r25, r22
    1604:	94 5f       	subi	r25, 0xF4	; 244
    1606:	40 98       	cbi	0x08, 0	; 8
    1608:	8e e3       	ldi	r24, 0x3E	; 62
    160a:	8e bd       	out	0x2e, r24	; 46
    160c:	0d b4       	in	r0, 0x2d	; 45
    160e:	07 fc       	sbrc	r0, 7
    1610:	05 c0       	rjmp	.+10     	; 0x161c <rf_tx_tdma_packet+0xba>
    1612:	fc cf       	rjmp	.-8      	; 0x160c <rf_tx_tdma_packet+0xaa>
    1614:	0d b4       	in	r0, 0x2d	; 45
    1616:	07 fc       	sbrc	r0, 7
    1618:	10 c1       	rjmp	.+544    	; 0x183a <rf_tx_tdma_packet+0x2d8>
    161a:	fc cf       	rjmp	.-8      	; 0x1614 <rf_tx_tdma_packet+0xb2>
    161c:	9e bd       	out	0x2e, r25	; 46
    161e:	fa cf       	rjmp	.-12     	; 0x1614 <rf_tx_tdma_packet+0xb2>
    1620:	81 e6       	ldi	r24, 0x61	; 97
    1622:	98 e8       	ldi	r25, 0x88	; 136
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	40 98       	cbi	0x08, 0	; 8
    162a:	8e e3       	ldi	r24, 0x3E	; 62
    162c:	8e bd       	out	0x2e, r24	; 46
    162e:	0d b4       	in	r0, 0x2d	; 45
    1630:	07 fe       	sbrs	r0, 7
    1632:	fd cf       	rjmp	.-6      	; 0x162e <rf_tx_tdma_packet+0xcc>
    1634:	fe 01       	movw	r30, r28
    1636:	31 96       	adiw	r30, 0x01	; 1
    1638:	9e 01       	movw	r18, r28
    163a:	2d 5f       	subi	r18, 0xFD	; 253
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	80 81       	ld	r24, Z
    1640:	8e bd       	out	0x2e, r24	; 46
    1642:	0d b4       	in	r0, 0x2d	; 45
    1644:	07 fe       	sbrs	r0, 7
    1646:	fd cf       	rjmp	.-6      	; 0x1642 <rf_tx_tdma_packet+0xe0>
    1648:	31 96       	adiw	r30, 0x01	; 1
    164a:	e2 17       	cp	r30, r18
    164c:	f3 07       	cpc	r31, r19
    164e:	b9 f7       	brne	.-18     	; 0x163e <rf_tx_tdma_packet+0xdc>
    1650:	40 9a       	sbi	0x08, 0	; 8
    1652:	40 98       	cbi	0x08, 0	; 8
    1654:	8e e3       	ldi	r24, 0x3E	; 62
    1656:	8e bd       	out	0x2e, r24	; 46
    1658:	0d b4       	in	r0, 0x2d	; 45
    165a:	07 fc       	sbrc	r0, 7
    165c:	05 c0       	rjmp	.+10     	; 0x1668 <rf_tx_tdma_packet+0x106>
    165e:	fc cf       	rjmp	.-8      	; 0x1658 <rf_tx_tdma_packet+0xf6>
    1660:	0d b4       	in	r0, 0x2d	; 45
    1662:	07 fc       	sbrc	r0, 7
    1664:	f3 c0       	rjmp	.+486    	; 0x184c <rf_tx_tdma_packet+0x2ea>
    1666:	fc cf       	rjmp	.-8      	; 0x1660 <rf_tx_tdma_packet+0xfe>
    1668:	80 91 48 07 	lds	r24, 0x0748
    166c:	8e bd       	out	0x2e, r24	; 46
    166e:	f8 cf       	rjmp	.-16     	; 0x1660 <rf_tx_tdma_packet+0xfe>
    1670:	0d b4       	in	r0, 0x2d	; 45
    1672:	07 fe       	sbrs	r0, 7
    1674:	fd cf       	rjmp	.-6      	; 0x1670 <rf_tx_tdma_packet+0x10e>
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	f9 01       	movw	r30, r18
    167c:	e6 5b       	subi	r30, 0xB6	; 182
    167e:	f8 4f       	sbci	r31, 0xF8	; 248
    1680:	80 81       	ld	r24, Z
    1682:	8e bd       	out	0x2e, r24	; 46
    1684:	0d b4       	in	r0, 0x2d	; 45
    1686:	07 fe       	sbrs	r0, 7
    1688:	fd cf       	rjmp	.-6      	; 0x1684 <rf_tx_tdma_packet+0x122>
    168a:	2f 5f       	subi	r18, 0xFF	; 255
    168c:	3f 4f       	sbci	r19, 0xFF	; 255
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	99 f7       	brne	.-26     	; 0x167a <rf_tx_tdma_packet+0x118>
    1694:	40 9a       	sbi	0x08, 0	; 8
    1696:	40 98       	cbi	0x08, 0	; 8
    1698:	8e e3       	ldi	r24, 0x3E	; 62
    169a:	8e bd       	out	0x2e, r24	; 46
    169c:	0d b4       	in	r0, 0x2d	; 45
    169e:	07 fe       	sbrs	r0, 7
    16a0:	fd cf       	rjmp	.-6      	; 0x169c <rf_tx_tdma_packet+0x13a>
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	f8 01       	movw	r30, r16
    16a8:	e2 0f       	add	r30, r18
    16aa:	f3 1f       	adc	r31, r19
    16ac:	80 81       	ld	r24, Z
    16ae:	8e bd       	out	0x2e, r24	; 46
    16b0:	0d b4       	in	r0, 0x2d	; 45
    16b2:	07 fe       	sbrs	r0, 7
    16b4:	fd cf       	rjmp	.-6      	; 0x16b0 <rf_tx_tdma_packet+0x14e>
    16b6:	2f 5f       	subi	r18, 0xFF	; 255
    16b8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ba:	22 30       	cpi	r18, 0x02	; 2
    16bc:	31 05       	cpc	r19, r1
    16be:	99 f7       	brne	.-26     	; 0x16a6 <rf_tx_tdma_packet+0x144>
    16c0:	40 9a       	sbi	0x08, 0	; 8
    16c2:	40 98       	cbi	0x08, 0	; 8
    16c4:	8e e3       	ldi	r24, 0x3E	; 62
    16c6:	8e bd       	out	0x2e, r24	; 46
    16c8:	0d b4       	in	r0, 0x2d	; 45
    16ca:	07 fe       	sbrs	r0, 7
    16cc:	fd cf       	rjmp	.-6      	; 0x16c8 <rf_tx_tdma_packet+0x166>
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	f9 01       	movw	r30, r18
    16d4:	e4 5b       	subi	r30, 0xB4	; 180
    16d6:	f8 4f       	sbci	r31, 0xF8	; 248
    16d8:	80 81       	ld	r24, Z
    16da:	8e bd       	out	0x2e, r24	; 46
    16dc:	0d b4       	in	r0, 0x2d	; 45
    16de:	07 fe       	sbrs	r0, 7
    16e0:	fd cf       	rjmp	.-6      	; 0x16dc <rf_tx_tdma_packet+0x17a>
    16e2:	2f 5f       	subi	r18, 0xFF	; 255
    16e4:	3f 4f       	sbci	r19, 0xFF	; 255
    16e6:	22 30       	cpi	r18, 0x02	; 2
    16e8:	31 05       	cpc	r19, r1
    16ea:	99 f7       	brne	.-26     	; 0x16d2 <rf_tx_tdma_packet+0x170>
    16ec:	40 9a       	sbi	0x08, 0	; 8
    16ee:	b7 01       	movw	r22, r14
    16f0:	c6 01       	movw	r24, r12
    16f2:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <nrk_high_speed_timer_wait>
    16f6:	f8 01       	movw	r30, r16
    16f8:	85 81       	ldd	r24, Z+5	; 0x05
    16fa:	88 23       	and	r24, r24
    16fc:	c1 f1       	breq	.+112    	; 0x176e <rf_tx_tdma_packet+0x20c>
    16fe:	80 91 4e 07 	lds	r24, 0x074E
    1702:	88 23       	and	r24, r24
    1704:	39 f4       	brne	.+14     	; 0x1714 <rf_tx_tdma_packet+0x1b2>
    1706:	40 98       	cbi	0x08, 0	; 8
    1708:	83 e0       	ldi	r24, 0x03	; 3
    170a:	8e bd       	out	0x2e, r24	; 46
    170c:	0d b4       	in	r0, 0x2d	; 45
    170e:	07 fe       	sbrs	r0, 7
    1710:	fd cf       	rjmp	.-6      	; 0x170c <rf_tx_tdma_packet+0x1aa>
    1712:	40 9a       	sbi	0x08, 0	; 8
    1714:	40 98       	cbi	0x08, 0	; 8
    1716:	1e bc       	out	0x2e, r1	; 46
    1718:	0d b4       	in	r0, 0x2d	; 45
    171a:	07 fe       	sbrs	r0, 7
    171c:	fd cf       	rjmp	.-6      	; 0x1718 <rf_tx_tdma_packet+0x1b6>
    171e:	8e b5       	in	r24, 0x2e	; 46
    1720:	40 9a       	sbi	0x08, 0	; 8
    1722:	81 ff       	sbrs	r24, 1
    1724:	f7 cf       	rjmp	.-18     	; 0x1714 <rf_tx_tdma_packet+0x1b2>
    1726:	ee 24       	eor	r14, r14
    1728:	40 98       	cbi	0x08, 0	; 8
    172a:	85 e0       	ldi	r24, 0x05	; 5
    172c:	8e bd       	out	0x2e, r24	; 46
    172e:	0d b4       	in	r0, 0x2d	; 45
    1730:	07 fe       	sbrs	r0, 7
    1732:	fd cf       	rjmp	.-6      	; 0x172e <rf_tx_tdma_packet+0x1cc>
    1734:	40 9a       	sbi	0x08, 0	; 8
    1736:	40 98       	cbi	0x08, 0	; 8
    1738:	1e bc       	out	0x2e, r1	; 46
    173a:	0d b4       	in	r0, 0x2d	; 45
    173c:	07 fe       	sbrs	r0, 7
    173e:	fd cf       	rjmp	.-6      	; 0x173a <rf_tx_tdma_packet+0x1d8>
    1740:	fe b4       	in	r15, 0x2e	; 46
    1742:	40 9a       	sbi	0x08, 0	; 8
    1744:	e3 94       	inc	r14
    1746:	f5 e6       	ldi	r31, 0x65	; 101
    1748:	ef 16       	cp	r14, r31
    174a:	51 f4       	brne	.+20     	; 0x1760 <rf_tx_tdma_packet+0x1fe>
    174c:	78 94       	sei
    174e:	80 91 41 07 	lds	r24, 0x0741
    1752:	90 91 42 07 	lds	r25, 0x0742
    1756:	0e 94 20 1c 	call	0x3840	; 0x3840 <nrk_sem_post>
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	7d c0       	rjmp	.+250    	; 0x185a <rf_tx_tdma_packet+0x2f8>
    1760:	84 e6       	ldi	r24, 0x64	; 100
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 ff 12 	call	0x25fe	; 0x25fe <halWait>
    1768:	f3 fc       	sbrc	r15, 3
    176a:	08 c0       	rjmp	.+16     	; 0x177c <rf_tx_tdma_packet+0x21a>
    176c:	dd cf       	rjmp	.-70     	; 0x1728 <rf_tx_tdma_packet+0x1c6>
    176e:	40 98       	cbi	0x08, 0	; 8
    1770:	84 e0       	ldi	r24, 0x04	; 4
    1772:	8e bd       	out	0x2e, r24	; 46
    1774:	0d b4       	in	r0, 0x2d	; 45
    1776:	07 fe       	sbrs	r0, 7
    1778:	fd cf       	rjmp	.-6      	; 0x1774 <rf_tx_tdma_packet+0x212>
    177a:	40 9a       	sbi	0x08, 0	; 8
    177c:	40 98       	cbi	0x08, 0	; 8
    177e:	8e e3       	ldi	r24, 0x3E	; 62
    1780:	8e bd       	out	0x2e, r24	; 46
    1782:	0d b4       	in	r0, 0x2d	; 45
    1784:	07 fe       	sbrs	r0, 7
    1786:	fd cf       	rjmp	.-6      	; 0x1782 <rf_tx_tdma_packet+0x220>
    1788:	f8 01       	movw	r30, r16
    178a:	82 81       	ldd	r24, Z+2	; 0x02
    178c:	48 2f       	mov	r20, r24
    178e:	55 27       	eor	r21, r21
    1790:	47 fd       	sbrc	r20, 7
    1792:	50 95       	com	r21
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	0c c0       	rjmp	.+24     	; 0x17b2 <rf_tx_tdma_packet+0x250>
    179a:	f8 01       	movw	r30, r16
    179c:	83 81       	ldd	r24, Z+3	; 0x03
    179e:	94 81       	ldd	r25, Z+4	; 0x04
    17a0:	a8 0f       	add	r26, r24
    17a2:	b9 1f       	adc	r27, r25
    17a4:	8c 91       	ld	r24, X
    17a6:	8e bd       	out	0x2e, r24	; 46
    17a8:	0d b4       	in	r0, 0x2d	; 45
    17aa:	07 fe       	sbrs	r0, 7
    17ac:	fd cf       	rjmp	.-6      	; 0x17a8 <rf_tx_tdma_packet+0x246>
    17ae:	2f 5f       	subi	r18, 0xFF	; 255
    17b0:	3f 4f       	sbci	r19, 0xFF	; 255
    17b2:	a2 2f       	mov	r26, r18
    17b4:	bb 27       	eor	r27, r27
    17b6:	a4 17       	cp	r26, r20
    17b8:	b5 07       	cpc	r27, r21
    17ba:	7c f3       	brlt	.-34     	; 0x179a <rf_tx_tdma_packet+0x238>
    17bc:	40 9a       	sbi	0x08, 0	; 8
    17be:	40 98       	cbi	0x08, 0	; 8
    17c0:	8e e3       	ldi	r24, 0x3E	; 62
    17c2:	8e bd       	out	0x2e, r24	; 46
    17c4:	0d b4       	in	r0, 0x2d	; 45
    17c6:	07 fc       	sbrc	r0, 7
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <rf_tx_tdma_packet+0x272>
    17ca:	fc cf       	rjmp	.-8      	; 0x17c4 <rf_tx_tdma_packet+0x262>
    17cc:	0d b4       	in	r0, 0x2d	; 45
    17ce:	07 fc       	sbrc	r0, 7
    17d0:	42 c0       	rjmp	.+132    	; 0x1856 <rf_tx_tdma_packet+0x2f4>
    17d2:	fc cf       	rjmp	.-8      	; 0x17cc <rf_tx_tdma_packet+0x26a>
    17d4:	be bc       	out	0x2e, r11	; 46
    17d6:	fa cf       	rjmp	.-12     	; 0x17cc <rf_tx_tdma_packet+0x26a>
    17d8:	4e 9b       	sbis	0x09, 6	; 9
    17da:	fe cf       	rjmp	.-4      	; 0x17d8 <rf_tx_tdma_packet+0x276>
    17dc:	f8 94       	cli
    17de:	4e 99       	sbic	0x09, 6	; 9
    17e0:	fe cf       	rjmp	.-4      	; 0x17de <rf_tx_tdma_packet+0x27c>
    17e2:	40 98       	cbi	0x08, 0	; 8
    17e4:	88 e0       	ldi	r24, 0x08	; 8
    17e6:	8e bd       	out	0x2e, r24	; 46
    17e8:	0d b4       	in	r0, 0x2d	; 45
    17ea:	07 fe       	sbrs	r0, 7
    17ec:	fd cf       	rjmp	.-6      	; 0x17e8 <rf_tx_tdma_packet+0x286>
    17ee:	40 9a       	sbi	0x08, 0	; 8
    17f0:	40 98       	cbi	0x08, 0	; 8
    17f2:	88 e0       	ldi	r24, 0x08	; 8
    17f4:	8e bd       	out	0x2e, r24	; 46
    17f6:	0d b4       	in	r0, 0x2d	; 45
    17f8:	07 fe       	sbrs	r0, 7
    17fa:	fd cf       	rjmp	.-6      	; 0x17f6 <rf_tx_tdma_packet+0x294>
    17fc:	40 9a       	sbi	0x08, 0	; 8
    17fe:	40 98       	cbi	0x08, 0	; 8
    1800:	89 e0       	ldi	r24, 0x09	; 9
    1802:	8e bd       	out	0x2e, r24	; 46
    1804:	0d b4       	in	r0, 0x2d	; 45
    1806:	07 fe       	sbrs	r0, 7
    1808:	fd cf       	rjmp	.-6      	; 0x1804 <rf_tx_tdma_packet+0x2a2>
    180a:	40 9a       	sbi	0x08, 0	; 8
    180c:	40 98       	cbi	0x08, 0	; 8
    180e:	89 e0       	ldi	r24, 0x09	; 9
    1810:	8e bd       	out	0x2e, r24	; 46
    1812:	0d b4       	in	r0, 0x2d	; 45
    1814:	07 fe       	sbrs	r0, 7
    1816:	fd cf       	rjmp	.-6      	; 0x1812 <rf_tx_tdma_packet+0x2b0>
    1818:	40 9a       	sbi	0x08, 0	; 8
    181a:	40 98       	cbi	0x08, 0	; 8
    181c:	86 e0       	ldi	r24, 0x06	; 6
    181e:	8e bd       	out	0x2e, r24	; 46
    1820:	0d b4       	in	r0, 0x2d	; 45
    1822:	07 fe       	sbrs	r0, 7
    1824:	fd cf       	rjmp	.-6      	; 0x1820 <rf_tx_tdma_packet+0x2be>
    1826:	40 9a       	sbi	0x08, 0	; 8
    1828:	78 94       	sei
    182a:	80 91 48 07 	lds	r24, 0x0748
    182e:	8f 5f       	subi	r24, 0xFF	; 255
    1830:	80 93 48 07 	sts	0x0748, r24
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	10 c0       	rjmp	.+32     	; 0x185a <rf_tx_tdma_packet+0x2f8>
    183a:	40 9a       	sbi	0x08, 0	; 8
    183c:	f8 01       	movw	r30, r16
    183e:	86 81       	ldd	r24, Z+6	; 0x06
    1840:	88 23       	and	r24, r24
    1842:	09 f0       	breq	.+2      	; 0x1846 <rf_tx_tdma_packet+0x2e4>
    1844:	ed ce       	rjmp	.-550    	; 0x1620 <rf_tx_tdma_packet+0xbe>
    1846:	81 e4       	ldi	r24, 0x41	; 65
    1848:	98 e8       	ldi	r25, 0x88	; 136
    184a:	ec ce       	rjmp	.-552    	; 0x1624 <rf_tx_tdma_packet+0xc2>
    184c:	40 9a       	sbi	0x08, 0	; 8
    184e:	40 98       	cbi	0x08, 0	; 8
    1850:	8e e3       	ldi	r24, 0x3E	; 62
    1852:	8e bd       	out	0x2e, r24	; 46
    1854:	0d cf       	rjmp	.-486    	; 0x1670 <rf_tx_tdma_packet+0x10e>
    1856:	40 9a       	sbi	0x08, 0	; 8
    1858:	bf cf       	rjmp	.-130    	; 0x17d8 <rf_tx_tdma_packet+0x276>
    185a:	22 96       	adiw	r28, 0x02	; 2
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	df 90       	pop	r13
    1874:	cf 90       	pop	r12
    1876:	bf 90       	pop	r11
    1878:	08 95       	ret

0000187a <rf_addr_decode_set_my_mac>:
  while(1) {
	nrk_led_toggle(RED_LED);
	nrk_gpio_toggle(NRK_DEBUG_3);
	printf( "Task4 cnt=%u\r\n",cnt );
	nrk_wait_until_next_period();
	cnt++;
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	22 97       	sbiw	r28, 0x02	; 2
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	9a 83       	std	Y+2, r25	; 0x02
    1890:	89 83       	std	Y+1, r24	; 0x01
	}
}
    1892:	90 93 4d 07 	sts	0x074D, r25
    1896:	80 93 4c 07 	sts	0x074C, r24

    189a:	84 ef       	ldi	r24, 0xF4	; 244
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <nrk_spin_wait_us>
void
    18a2:	40 98       	cbi	0x08, 0	; 8
    18a4:	8a ee       	ldi	r24, 0xEA	; 234
    18a6:	8e bd       	out	0x2e, r24	; 46
    18a8:	0d b4       	in	r0, 0x2d	; 45
    18aa:	07 fe       	sbrs	r0, 7
    18ac:	fd cf       	rjmp	.-6      	; 0x18a8 <rf_addr_decode_set_my_mac+0x2e>
    18ae:	80 e8       	ldi	r24, 0x80	; 128
    18b0:	8e bd       	out	0x2e, r24	; 46
    18b2:	0d b4       	in	r0, 0x2d	; 45
    18b4:	07 fe       	sbrs	r0, 7
    18b6:	fd cf       	rjmp	.-6      	; 0x18b2 <rf_addr_decode_set_my_mac+0x38>
    18b8:	fe 01       	movw	r30, r28
    18ba:	31 96       	adiw	r30, 0x01	; 1
    18bc:	9e 01       	movw	r18, r28
    18be:	2d 5f       	subi	r18, 0xFD	; 253
    18c0:	3f 4f       	sbci	r19, 0xFF	; 255
    18c2:	80 81       	ld	r24, Z
    18c4:	8e bd       	out	0x2e, r24	; 46
    18c6:	0d b4       	in	r0, 0x2d	; 45
    18c8:	07 fe       	sbrs	r0, 7
    18ca:	fd cf       	rjmp	.-6      	; 0x18c6 <rf_addr_decode_set_my_mac+0x4c>
    18cc:	31 96       	adiw	r30, 0x01	; 1
    18ce:	e2 17       	cp	r30, r18
    18d0:	f3 07       	cpc	r31, r19
    18d2:	b9 f7       	brne	.-18     	; 0x18c2 <rf_addr_decode_set_my_mac+0x48>
    18d4:	40 9a       	sbi	0x08, 0	; 8
nrk_create_taskset()
    18d6:	84 ef       	ldi	r24, 0xF4	; 244
    18d8:	91 e0       	ldi	r25, 0x01	; 1
    18da:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <nrk_spin_wait_us>
    18de:	22 96       	adiw	r28, 0x02	; 2
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <rf_security_set_key>:
 
  nrk_time_set(0,0);
  nrk_create_taskset ();
  nrk_start();
  
  return 0;
    18f0:	6f 92       	push	r6
    18f2:	7f 92       	push	r7
    18f4:	8f 92       	push	r8
    18f6:	9f 92       	push	r9
    18f8:	af 92       	push	r10
    18fa:	bf 92       	push	r11
    18fc:	cf 92       	push	r12
    18fe:	df 92       	push	r13
    1900:	ef 92       	push	r14
    1902:	ff 92       	push	r15
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	22 97       	sbiw	r28, 0x02	; 2
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	8c 01       	movw	r16, r24
}

void Task1()
{
nrk_time_t t;
    191e:	84 e6       	ldi	r24, 0x64	; 100
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <nrk_spin_wait_us>
    1926:	78 01       	movw	r14, r16
    1928:	c1 2c       	mov	r12, r1
    192a:	b1 e0       	ldi	r27, 0x01	; 1
    192c:	db 2e       	mov	r13, r27
uint16_t cnt;
uint16_t wait_high_time;
uint8_t cur_TCNT2;
cnt=0;
nrk_kprintf( PSTR("Nano-RK Version ") );
    192e:	3e 01       	movw	r6, r28
    1930:	08 94       	sec
    1932:	61 1c       	adc	r6, r1
    1934:	71 1c       	adc	r7, r1
    1936:	a3 e0       	ldi	r26, 0x03	; 3
    1938:	8a 2e       	mov	r8, r26
    193a:	91 2c       	mov	r9, r1
    193c:	8c 0e       	add	r8, r28
    193e:	9d 1e       	adc	r9, r29
void Task1()
{
nrk_time_t t;
uint16_t cnt;
uint16_t wait_high_time;
uint8_t cur_TCNT2;
    1940:	f7 01       	movw	r30, r14
    1942:	80 81       	ld	r24, Z
    1944:	21 81       	ldd	r18, Z+1	; 0x01
    1946:	33 27       	eor	r19, r19
    1948:	99 27       	eor	r25, r25
    194a:	98 2f       	mov	r25, r24
    194c:	88 27       	eor	r24, r24
    194e:	28 2b       	or	r18, r24
    1950:	39 2b       	or	r19, r25
    1952:	3a 83       	std	Y+2, r19	; 0x02
    1954:	29 83       	std	Y+1, r18	; 0x01
cnt=0;
    1956:	84 e6       	ldi	r24, 0x64	; 100
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <nrk_spin_wait_us>
nrk_kprintf( PSTR("Nano-RK Version ") );
    195e:	40 98       	cbi	0x08, 0	; 8
    1960:	8c 2d       	mov	r24, r12
    1962:	80 68       	ori	r24, 0x80	; 128
    1964:	8e bd       	out	0x2e, r24	; 46
    1966:	0d b4       	in	r0, 0x2d	; 45
    1968:	07 fe       	sbrs	r0, 7
    196a:	fd cf       	rjmp	.-6      	; 0x1966 <rf_security_set_key+0x76>
    196c:	c6 01       	movw	r24, r12
    196e:	95 95       	asr	r25
    1970:	87 95       	ror	r24
    1972:	80 7c       	andi	r24, 0xC0	; 192
    1974:	8e bd       	out	0x2e, r24	; 46
    1976:	0d b4       	in	r0, 0x2d	; 45
    1978:	07 fe       	sbrs	r0, 7
    197a:	fd cf       	rjmp	.-6      	; 0x1976 <rf_security_set_key+0x86>
    197c:	83 01       	movw	r16, r6
    197e:	53 01       	movw	r10, r6
    1980:	f5 01       	movw	r30, r10
    1982:	80 81       	ld	r24, Z
    1984:	8e bd       	out	0x2e, r24	; 46
    1986:	0d b4       	in	r0, 0x2d	; 45
    1988:	07 fe       	sbrs	r0, 7
    198a:	fd cf       	rjmp	.-6      	; 0x1986 <rf_security_set_key+0x96>
    198c:	08 94       	sec
    198e:	a1 1c       	adc	r10, r1
    1990:	b1 1c       	adc	r11, r1
    1992:	a8 14       	cp	r10, r8
    1994:	b9 04       	cpc	r11, r9
    1996:	a1 f7       	brne	.-24     	; 0x1980 <rf_security_set_key+0x90>
    1998:	40 9a       	sbi	0x08, 0	; 8
    199a:	08 94       	sec
    199c:	e1 1c       	adc	r14, r1
    199e:	f1 1c       	adc	r15, r1
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	c8 0e       	add	r12, r24
    19a6:	d9 1e       	adc	r13, r25
}

void Task1()
{
nrk_time_t t;
uint16_t cnt;
    19a8:	90 e1       	ldi	r25, 0x10	; 16
    19aa:	c9 16       	cp	r12, r25
    19ac:	91 e0       	ldi	r25, 0x01	; 1
    19ae:	d9 06       	cpc	r13, r25
    19b0:	39 f6       	brne	.-114    	; 0x1940 <rf_security_set_key+0x50>
cnt=0;
nrk_kprintf( PSTR("Nano-RK Version ") );
printf( "%d\r\n",NRK_VERSION );

printf( "My node's address is %u\r\n",NODE_ADDR );
  
    19b2:	84 e6       	ldi	r24, 0x64	; 100
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <nrk_spin_wait_us>
    19ba:	20 e1       	ldi	r18, 0x10	; 16
    19bc:	31 e0       	ldi	r19, 0x01	; 1
    19be:	40 e4       	ldi	r20, 0x40	; 64
    19c0:	51 e0       	ldi	r21, 0x01	; 1
printf( "Task1 PID=%u\r\n",nrk_get_pid());
//_nrk_high_speed_timer_start();
  while(1) {
    19c2:	1a 82       	std	Y+2, r1	; 0x02
    19c4:	19 82       	std	Y+1, r1	; 0x01
	//_nrk_high_speed_timer_reset();
    19c6:	40 98       	cbi	0x08, 0	; 8
    19c8:	84 2f       	mov	r24, r20
    19ca:	80 68       	ori	r24, 0x80	; 128
    19cc:	8e bd       	out	0x2e, r24	; 46
    19ce:	0d b4       	in	r0, 0x2d	; 45
    19d0:	07 fe       	sbrs	r0, 7
    19d2:	fd cf       	rjmp	.-6      	; 0x19ce <rf_security_set_key+0xde>
    19d4:	ca 01       	movw	r24, r20
    19d6:	95 95       	asr	r25
    19d8:	87 95       	ror	r24
    19da:	80 7c       	andi	r24, 0xC0	; 192
    19dc:	8e bd       	out	0x2e, r24	; 46
    19de:	0d b4       	in	r0, 0x2d	; 45
    19e0:	07 fe       	sbrs	r0, 7
    19e2:	fd cf       	rjmp	.-6      	; 0x19de <rf_security_set_key+0xee>
    19e4:	f8 01       	movw	r30, r16
    19e6:	80 81       	ld	r24, Z
    19e8:	8e bd       	out	0x2e, r24	; 46
    19ea:	0d b4       	in	r0, 0x2d	; 45
    19ec:	07 fe       	sbrs	r0, 7
    19ee:	fd cf       	rjmp	.-6      	; 0x19ea <rf_security_set_key+0xfa>
    19f0:	31 96       	adiw	r30, 0x01	; 1
    19f2:	ea 15       	cp	r30, r10
    19f4:	fb 05       	cpc	r31, r11
    19f6:	b9 f7       	brne	.-18     	; 0x19e6 <rf_security_set_key+0xf6>
    19f8:	40 9a       	sbi	0x08, 0	; 8
	nrk_led_toggle(ORANGE_LED);
    19fa:	40 98       	cbi	0x08, 0	; 8
    19fc:	82 2f       	mov	r24, r18
    19fe:	80 68       	ori	r24, 0x80	; 128
    1a00:	8e bd       	out	0x2e, r24	; 46
    1a02:	0d b4       	in	r0, 0x2d	; 45
    1a04:	07 fe       	sbrs	r0, 7
    1a06:	fd cf       	rjmp	.-6      	; 0x1a02 <rf_security_set_key+0x112>
    1a08:	c9 01       	movw	r24, r18
    1a0a:	95 95       	asr	r25
    1a0c:	87 95       	ror	r24
    1a0e:	80 7c       	andi	r24, 0xC0	; 192
    1a10:	8e bd       	out	0x2e, r24	; 46
    1a12:	0d b4       	in	r0, 0x2d	; 45
    1a14:	07 fe       	sbrs	r0, 7
    1a16:	fd cf       	rjmp	.-6      	; 0x1a12 <rf_security_set_key+0x122>
    1a18:	f8 01       	movw	r30, r16
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8e bd       	out	0x2e, r24	; 46
    1a1e:	0d b4       	in	r0, 0x2d	; 45
    1a20:	07 fe       	sbrs	r0, 7
    1a22:	fd cf       	rjmp	.-6      	; 0x1a1e <rf_security_set_key+0x12e>
    1a24:	31 96       	adiw	r30, 0x01	; 1
    1a26:	ea 15       	cp	r30, r10
    1a28:	fb 05       	cpc	r31, r11
    1a2a:	b9 f7       	brne	.-18     	; 0x1a1a <rf_security_set_key+0x12a>
    1a2c:	40 9a       	sbi	0x08, 0	; 8
    1a2e:	2e 5f       	subi	r18, 0xFE	; 254
    1a30:	3f 4f       	sbci	r19, 0xFF	; 255
    1a32:	4e 5f       	subi	r20, 0xFE	; 254
    1a34:	5f 4f       	sbci	r21, 0xFF	; 255
nrk_kprintf( PSTR("Nano-RK Version ") );
printf( "%d\r\n",NRK_VERSION );

printf( "My node's address is %u\r\n",NODE_ADDR );
  
printf( "Task1 PID=%u\r\n",nrk_get_pid());
    1a36:	e1 e0       	ldi	r30, 0x01	; 1
    1a38:	2e 31       	cpi	r18, 0x1E	; 30
    1a3a:	3e 07       	cpc	r19, r30
    1a3c:	11 f6       	brne	.-124    	; 0x19c2 <rf_security_set_key+0xd2>
  while(1) {
	//_nrk_high_speed_timer_reset();
	nrk_led_toggle(ORANGE_LED);
	nrk_gpio_set(NRK_DEBUG_0);
	nrk_gpio_toggle(NRK_DEBUG_1);
	//printf( "Task1 cnt=%u\r\n, %d.",cnt);
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9a 83       	std	Y+2, r25	; 0x02
    1a44:	89 83       	std	Y+1, r24	; 0x01
	do{
    1a46:	40 98       	cbi	0x08, 0	; 8
    1a48:	8e ec       	ldi	r24, 0xCE	; 206
    1a4a:	8e bd       	out	0x2e, r24	; 46
    1a4c:	0d b4       	in	r0, 0x2d	; 45
    1a4e:	07 fe       	sbrs	r0, 7
    1a50:	fd cf       	rjmp	.-6      	; 0x1a4c <rf_security_set_key+0x15c>
    1a52:	80 e8       	ldi	r24, 0x80	; 128
    1a54:	8e bd       	out	0x2e, r24	; 46
    1a56:	0d b4       	in	r0, 0x2d	; 45
    1a58:	07 fe       	sbrs	r0, 7
    1a5a:	fd cf       	rjmp	.-6      	; 0x1a56 <rf_security_set_key+0x166>
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	80 81       	ld	r24, Z
    1a60:	8e bd       	out	0x2e, r24	; 46
    1a62:	0d b4       	in	r0, 0x2d	; 45
    1a64:	07 fe       	sbrs	r0, 7
    1a66:	fd cf       	rjmp	.-6      	; 0x1a62 <rf_security_set_key+0x172>
    1a68:	31 96       	adiw	r30, 0x01	; 1
    1a6a:	ea 15       	cp	r30, r10
    1a6c:	fb 05       	cpc	r31, r11
    1a6e:	b9 f7       	brne	.-18     	; 0x1a5e <rf_security_set_key+0x16e>
    1a70:	40 9a       	sbi	0x08, 0	; 8
		cur_TCNT2 = _nrk_os_timer_get();		
    1a72:	40 98       	cbi	0x08, 0	; 8
    1a74:	8e e9       	ldi	r24, 0x9E	; 158
    1a76:	8e bd       	out	0x2e, r24	; 46
    1a78:	0d b4       	in	r0, 0x2d	; 45
    1a7a:	07 fe       	sbrs	r0, 7
    1a7c:	fd cf       	rjmp	.-6      	; 0x1a78 <rf_security_set_key+0x188>
    1a7e:	80 e8       	ldi	r24, 0x80	; 128
    1a80:	8e bd       	out	0x2e, r24	; 46
    1a82:	0d b4       	in	r0, 0x2d	; 45
    1a84:	07 fe       	sbrs	r0, 7
    1a86:	fd cf       	rjmp	.-6      	; 0x1a82 <rf_security_set_key+0x192>
    1a88:	f8 01       	movw	r30, r16
    1a8a:	80 81       	ld	r24, Z
    1a8c:	8e bd       	out	0x2e, r24	; 46
    1a8e:	0d b4       	in	r0, 0x2d	; 45
    1a90:	07 fe       	sbrs	r0, 7
    1a92:	fd cf       	rjmp	.-6      	; 0x1a8e <rf_security_set_key+0x19e>
    1a94:	0f 5f       	subi	r16, 0xFF	; 255
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	0a 15       	cp	r16, r10
    1a9a:	1b 05       	cpc	r17, r11
    1a9c:	a9 f7       	brne	.-22     	; 0x1a88 <rf_security_set_key+0x198>
    1a9e:	40 9a       	sbi	0x08, 0	; 8
    1aa0:	22 96       	adiw	r28, 0x02	; 2
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	df 90       	pop	r13
    1aba:	cf 90       	pop	r12
    1abc:	bf 90       	pop	r11
    1abe:	af 90       	pop	r10
    1ac0:	9f 90       	pop	r9
    1ac2:	8f 90       	pop	r8
    1ac4:	7f 90       	pop	r7
    1ac6:	6f 90       	pop	r6
    1ac8:	08 95       	ret

00001aca <rf_set_rx>:
{
  nrk_task_set_entry_function( &TaskOne, Task1);
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
  TaskOne.prio = 1;
  TaskOne.FirstActivation = TRUE;
  TaskOne.Type = BASIC_TASK;
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	ec 01       	movw	r28, r24
  TaskOne.SchType = PREEMPTIVE;
  TaskOne.period.secs = 0;
  TaskOne.period.nano_secs = 50*NANOS_PER_MS;
  TaskOne.cpu_reserve.secs = 0;
  TaskOne.cpu_reserve.nano_secs = 50*NANOS_PER_MS;
  TaskOne.offset.secs = 0;
    1ad0:	40 98       	cbi	0x08, 0	; 8
    1ad2:	88 e0       	ldi	r24, 0x08	; 8
    1ad4:	8e bd       	out	0x2e, r24	; 46
    1ad6:	0d b4       	in	r0, 0x2d	; 45
    1ad8:	07 fe       	sbrs	r0, 7
    1ada:	fd cf       	rjmp	.-6      	; 0x1ad6 <rf_set_rx+0xc>
    1adc:	40 9a       	sbi	0x08, 0	; 8
  TaskOne.offset.nano_secs= 0;
    1ade:	40 98       	cbi	0x08, 0	; 8
    1ae0:	88 e0       	ldi	r24, 0x08	; 8
    1ae2:	8e bd       	out	0x2e, r24	; 46
    1ae4:	0d b4       	in	r0, 0x2d	; 45
    1ae6:	07 fe       	sbrs	r0, 7
    1ae8:	fd cf       	rjmp	.-6      	; 0x1ae4 <rf_set_rx+0x1a>
    1aea:	40 9a       	sbi	0x08, 0	; 8
  nrk_activate_task (&TaskOne);
    1aec:	86 2f       	mov	r24, r22
    1aee:	0e 94 be 04 	call	0x97c	; 0x97c <halRfSetChannel>

    1af2:	d0 93 47 07 	sts	0x0747, r29
    1af6:	c0 93 46 07 	sts	0x0746, r28
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	08 95       	ret

00001b00 <rf_set_channel>:

void Task2()
{
  int16_t cnt;
  printf( "Task2 PID=%u\r\n",nrk_get_pid());
  cnt=0;
    1b00:	0e 94 be 04 	call	0x97c	; 0x97c <halRfSetChannel>
    1b04:	08 95       	ret

00001b06 <rf_init>:
  TaskThree.period.nano_secs = 0;
  TaskThree.cpu_reserve.secs = 0;
  TaskThree.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
  TaskThree.offset.secs = 0;
  TaskThree.offset.nano_secs= 0;
  //nrk_activate_task (&TaskThree);
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	22 97       	sbiw	r28, 0x02	; 2
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	8c 01       	movw	r16, r24
    1b26:	d6 2e       	mov	r13, r22
    1b28:	5a 83       	std	Y+2, r21	; 0x02
    1b2a:	49 83       	std	Y+1, r20	; 0x01
    1b2c:	79 01       	movw	r14, r18
  TaskFour.cpu_reserve.secs = 0;
  TaskFour.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
  TaskFour.offset.secs = 0;
  TaskFour.offset.nano_secs= 0;
  //nrk_activate_task (&TaskFour);

    1b2e:	15 9a       	sbi	0x02, 5	; 2

    1b30:	88 ee       	ldi	r24, 0xE8	; 232
    1b32:	93 e0       	ldi	r25, 0x03	; 3
    1b34:	0e 94 ff 12 	call	0x25fe	; 0x25fe <halWait>
}
    1b38:	16 98       	cbi	0x02, 6	; 2

    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <halWait>
uint8_t kill_stack(uint8_t val)
    1b42:	16 9a       	sbi	0x02, 6	; 2
{
    1b44:	84 e6       	ldi	r24, 0x64	; 100
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 ff 12 	call	0x25fe	; 0x25fe <halWait>
uint8_t i;
for(i=0; i<10; i++ ) bad_memory[i]=i;
for(i=0; i<10; i++ ) printf( "%d ", bad_memory[i]);
   printf( "Die Stack %d\r\n",val );
if(val>1) kill_stack(val-1);
return 0;
    1b4c:	f8 94       	cli
}


    1b4e:	40 98       	cbi	0x08, 0	; 8
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	8e bd       	out	0x2e, r24	; 46
    1b54:	0d b4       	in	r0, 0x2d	; 45
    1b56:	07 fe       	sbrs	r0, 7
    1b58:	fd cf       	rjmp	.-6      	; 0x1b54 <rf_init+0x4e>
    1b5a:	40 9a       	sbi	0x08, 0	; 8
    1b5c:	82 ee       	ldi	r24, 0xE2	; 226
    1b5e:	92 e0       	ldi	r25, 0x02	; 2
    1b60:	90 93 45 07 	sts	0x0745, r25
    1b64:	80 93 44 07 	sts	0x0744, r24
    1b68:	40 98       	cbi	0x08, 0	; 8
    1b6a:	81 e1       	ldi	r24, 0x11	; 17
    1b6c:	8e bd       	out	0x2e, r24	; 46
    1b6e:	0d b4       	in	r0, 0x2d	; 45
    1b70:	07 fe       	sbrs	r0, 7
    1b72:	fd cf       	rjmp	.-6      	; 0x1b6e <rf_init+0x68>
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	8e bd       	out	0x2e, r24	; 46
    1b78:	0d b4       	in	r0, 0x2d	; 45
    1b7a:	07 fe       	sbrs	r0, 7
    1b7c:	fd cf       	rjmp	.-6      	; 0x1b78 <rf_init+0x72>
    1b7e:	82 ee       	ldi	r24, 0xE2	; 226
    1b80:	8e bd       	out	0x2e, r24	; 46
    1b82:	0d b4       	in	r0, 0x2d	; 45
    1b84:	07 fe       	sbrs	r0, 7
    1b86:	fd cf       	rjmp	.-6      	; 0x1b82 <rf_init+0x7c>
    1b88:	40 9a       	sbi	0x08, 0	; 8
    1b8a:	40 98       	cbi	0x08, 0	; 8
    1b8c:	82 e1       	ldi	r24, 0x12	; 18
    1b8e:	8e bd       	out	0x2e, r24	; 46
    1b90:	0d b4       	in	r0, 0x2d	; 45
    1b92:	07 fe       	sbrs	r0, 7
    1b94:	fd cf       	rjmp	.-6      	; 0x1b90 <rf_init+0x8a>
    1b96:	85 e0       	ldi	r24, 0x05	; 5
    1b98:	8e bd       	out	0x2e, r24	; 46
    1b9a:	0d b4       	in	r0, 0x2d	; 45
    1b9c:	07 fe       	sbrs	r0, 7
    1b9e:	fd cf       	rjmp	.-6      	; 0x1b9a <rf_init+0x94>
    1ba0:	1e bc       	out	0x2e, r1	; 46
    1ba2:	0d b4       	in	r0, 0x2d	; 45
    1ba4:	07 fe       	sbrs	r0, 7
    1ba6:	fd cf       	rjmp	.-6      	; 0x1ba2 <rf_init+0x9c>
    1ba8:	40 9a       	sbi	0x08, 0	; 8
    1baa:	40 98       	cbi	0x08, 0	; 8
    1bac:	8c e1       	ldi	r24, 0x1C	; 28
    1bae:	8e bd       	out	0x2e, r24	; 46
    1bb0:	0d b4       	in	r0, 0x2d	; 45
    1bb2:	07 fe       	sbrs	r0, 7
    1bb4:	fd cf       	rjmp	.-6      	; 0x1bb0 <rf_init+0xaa>
    1bb6:	1e bc       	out	0x2e, r1	; 46
    1bb8:	0d b4       	in	r0, 0x2d	; 45
    1bba:	07 fe       	sbrs	r0, 7
    1bbc:	fd cf       	rjmp	.-6      	; 0x1bb8 <rf_init+0xb2>
    1bbe:	8f e7       	ldi	r24, 0x7F	; 127
    1bc0:	8e bd       	out	0x2e, r24	; 46
    1bc2:	0d b4       	in	r0, 0x2d	; 45
    1bc4:	07 fe       	sbrs	r0, 7
    1bc6:	fd cf       	rjmp	.-6      	; 0x1bc2 <rf_init+0xbc>
    1bc8:	40 9a       	sbi	0x08, 0	; 8
    1bca:	40 98       	cbi	0x08, 0	; 8
    1bcc:	89 e1       	ldi	r24, 0x19	; 25
    1bce:	8e bd       	out	0x2e, r24	; 46
    1bd0:	0d b4       	in	r0, 0x2d	; 45
    1bd2:	07 fe       	sbrs	r0, 7
    1bd4:	fd cf       	rjmp	.-6      	; 0x1bd0 <rf_init+0xca>
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	8e bd       	out	0x2e, r24	; 46
    1bda:	0d b4       	in	r0, 0x2d	; 45
    1bdc:	07 fe       	sbrs	r0, 7
    1bde:	fd cf       	rjmp	.-6      	; 0x1bda <rf_init+0xd4>
    1be0:	84 ec       	ldi	r24, 0xC4	; 196
    1be2:	8e bd       	out	0x2e, r24	; 46
    1be4:	0d b4       	in	r0, 0x2d	; 45
    1be6:	07 fe       	sbrs	r0, 7
    1be8:	fd cf       	rjmp	.-6      	; 0x1be4 <rf_init+0xde>
    1bea:	40 9a       	sbi	0x08, 0	; 8
    1bec:	40 98       	cbi	0x08, 0	; 8
    1bee:	87 e1       	ldi	r24, 0x17	; 23
    1bf0:	8e bd       	out	0x2e, r24	; 46
    1bf2:	0d b4       	in	r0, 0x2d	; 45
    1bf4:	07 fe       	sbrs	r0, 7
    1bf6:	fd cf       	rjmp	.-6      	; 0x1bf2 <rf_init+0xec>
    1bf8:	8a e1       	ldi	r24, 0x1A	; 26
    1bfa:	8e bd       	out	0x2e, r24	; 46
    1bfc:	0d b4       	in	r0, 0x2d	; 45
    1bfe:	07 fe       	sbrs	r0, 7
    1c00:	fd cf       	rjmp	.-6      	; 0x1bfc <rf_init+0xf6>
    1c02:	86 e5       	ldi	r24, 0x56	; 86
    1c04:	8e bd       	out	0x2e, r24	; 46
    1c06:	0d b4       	in	r0, 0x2d	; 45
    1c08:	07 fe       	sbrs	r0, 7
    1c0a:	fd cf       	rjmp	.-6      	; 0x1c06 <rf_init+0x100>
    1c0c:	40 9a       	sbi	0x08, 0	; 8
    1c0e:	84 ef       	ldi	r24, 0xF4	; 244
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <nrk_spin_wait_us>
    1c16:	40 98       	cbi	0x08, 0	; 8
    1c18:	88 ee       	ldi	r24, 0xE8	; 232
    1c1a:	8e bd       	out	0x2e, r24	; 46
    1c1c:	0d b4       	in	r0, 0x2d	; 45
    1c1e:	07 fe       	sbrs	r0, 7
    1c20:	fd cf       	rjmp	.-6      	; 0x1c1c <rf_init+0x116>
    1c22:	80 e8       	ldi	r24, 0x80	; 128
    1c24:	8e bd       	out	0x2e, r24	; 46
    1c26:	0d b4       	in	r0, 0x2d	; 45
    1c28:	07 fe       	sbrs	r0, 7
    1c2a:	fd cf       	rjmp	.-6      	; 0x1c26 <rf_init+0x120>
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	31 96       	adiw	r30, 0x01	; 1
    1c30:	9e 01       	movw	r18, r28
    1c32:	2d 5f       	subi	r18, 0xFD	; 253
    1c34:	3f 4f       	sbci	r19, 0xFF	; 255
    1c36:	80 81       	ld	r24, Z
    1c38:	8e bd       	out	0x2e, r24	; 46
    1c3a:	0d b4       	in	r0, 0x2d	; 45
    1c3c:	07 fe       	sbrs	r0, 7
    1c3e:	fd cf       	rjmp	.-6      	; 0x1c3a <rf_init+0x134>
    1c40:	31 96       	adiw	r30, 0x01	; 1
    1c42:	e2 17       	cp	r30, r18
    1c44:	f3 07       	cpc	r31, r19
    1c46:	b9 f7       	brne	.-18     	; 0x1c36 <rf_init+0x130>
    1c48:	40 9a       	sbi	0x08, 0	; 8
    1c4a:	84 ef       	ldi	r24, 0xF4	; 244
    1c4c:	91 e0       	ldi	r25, 0x01	; 1
    1c4e:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <nrk_spin_wait_us>
    1c52:	78 94       	sei
    1c54:	8d 2d       	mov	r24, r13
    1c56:	0e 94 be 04 	call	0x97c	; 0x97c <halRfSetChannel>
    1c5a:	78 94       	sei
    1c5c:	10 93 47 07 	sts	0x0747, r17
    1c60:	00 93 46 07 	sts	0x0746, r16
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	9a 81       	ldd	r25, Y+2	; 0x02
    1c68:	90 93 4b 07 	sts	0x074B, r25
    1c6c:	80 93 4a 07 	sts	0x074A, r24
    1c70:	f0 92 4d 07 	sts	0x074D, r15
    1c74:	e0 92 4c 07 	sts	0x074C, r14
    1c78:	10 92 48 07 	sts	0x0748, r1
    1c7c:	10 92 4e 07 	sts	0x074E, r1
    1c80:	0e 94 dd 04 	call	0x9ba	; 0x9ba <halRfWaitForCrystalOscillator>
    1c84:	10 92 51 07 	sts	0x0751, r1
    1c88:	10 92 43 07 	sts	0x0743, r1
    1c8c:	10 92 52 07 	sts	0x0752, r1
    1c90:	22 96       	adiw	r28, 0x02	; 2
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	1f 91       	pop	r17
    1ca2:	0f 91       	pop	r16
    1ca4:	ff 90       	pop	r15
    1ca6:	ef 90       	pop	r14
    1ca8:	df 90       	pop	r13
    1caa:	08 95       	ret

00001cac <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    1cac:	8f ef       	ldi	r24, 0xFF	; 255
    1cae:	9f ef       	ldi	r25, 0xFF	; 255
    1cb0:	08 95       	ret

00001cb2 <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    1cb2:	81 30       	cpi	r24, 0x01	; 1
    1cb4:	51 f4       	brne	.+20     	; 0x1cca <nrk_uart_data_ready+0x18>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1cb6:	80 91 c8 00 	lds	r24, 0x00C8
    1cba:	99 27       	eor	r25, r25
    1cbc:	87 fd       	sbrc	r24, 7
    1cbe:	90 95       	com	r25
    1cc0:	88 27       	eor	r24, r24
    1cc2:	99 0f       	add	r25, r25
    1cc4:	88 1f       	adc	r24, r24
    1cc6:	99 27       	eor	r25, r25
    1cc8:	08 95       	ret
        }
if(uart_num==0)
    1cca:	88 23       	and	r24, r24
    1ccc:	19 f0       	breq	.+6      	; 0x1cd4 <nrk_uart_data_ready+0x22>
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	08 95       	ret
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    1cd4:	80 91 c0 00 	lds	r24, 0x00C0
    1cd8:	99 27       	eor	r25, r25
    1cda:	87 fd       	sbrc	r24, 7
    1cdc:	90 95       	com	r25
    1cde:	88 27       	eor	r24, r24
    1ce0:	99 0f       	add	r25, r25
    1ce2:	88 1f       	adc	r24, r24
    1ce4:	99 27       	eor	r25, r25
        }
return 0;
}
    1ce6:	08 95       	ret

00001ce8 <getc1>:

char getc1(void){
        unsigned char tmp;
        UART1_WAIT_AND_RECEIVE(tmp);
    1ce8:	80 91 c8 00 	lds	r24, 0x00C8
    1cec:	87 ff       	sbrs	r24, 7
    1cee:	fc cf       	rjmp	.-8      	; 0x1ce8 <getc1>
    1cf0:	80 91 c8 00 	lds	r24, 0x00C8
    1cf4:	8f 77       	andi	r24, 0x7F	; 127
    1cf6:	80 93 c8 00 	sts	0x00C8, r24
    1cfa:	80 91 ce 00 	lds	r24, 0x00CE
        return tmp;
}
    1cfe:	99 27       	eor	r25, r25
    1d00:	08 95       	ret

00001d02 <PORT_INIT>:
NRK_PIN( ADC_INPUT_6, ADC_INPUT_6, NRK_PORTF )
NRK_PIN( ADC_INPUT_7, ADC_INPUT_7, NRK_PORTF )

void PORT_INIT(void) 
{
        MCUCR |= BM(PUD); 
    1d02:	85 b7       	in	r24, 0x35	; 53
    1d04:	80 61       	ori	r24, 0x10	; 16
    1d06:	85 bf       	out	0x35, r24	; 53
        DDRB  = BM(MOSI) | BM(SCK);  
    1d08:	86 e0       	ldi	r24, 0x06	; 6
    1d0a:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
    1d0c:	87 e0       	ldi	r24, 0x07	; 7
    1d0e:	85 b9       	out	0x05, r24	; 5
        DDRC  = BM(CSN); 
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	87 b9       	out	0x07, r24	; 7
        PORTC = BM(CSN); 
    1d14:	88 b9       	out	0x08, r24	; 8
        DDRE  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    1d16:	8c e3       	ldi	r24, 0x3C	; 60
    1d18:	8d b9       	out	0x0d, r24	; 13
        DDRD  = BM(UART1_TXD) | BM(DEBUG_2) | BM(DEBUG_3); 
    1d1a:	8b e0       	ldi	r24, 0x0B	; 11
    1d1c:	8a b9       	out	0x0a, r24	; 10
        PORTE  = BM(UART0_TXD) | BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    1d1e:	8e e3       	ldi	r24, 0x3E	; 62
    1d20:	8e b9       	out	0x0e, r24	; 14
        DDRA  = BM(VREG_EN) | BM(RESET_N) | BM(DEBUG_0) | BM(DEBUG_1); 
    1d22:	88 e7       	ldi	r24, 0x78	; 120
    1d24:	81 b9       	out	0x01, r24	; 1
        PORTA = BM(RESET_N); 
    1d26:	80 e4       	ldi	r24, 0x40	; 64
    1d28:	82 b9       	out	0x02, r24	; 2
    1d2a:	08 95       	ret

00001d2c <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    1d2c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <PORT_INIT>
SPI_INIT();
    1d30:	80 e5       	ldi	r24, 0x50	; 80
    1d32:	8c bd       	out	0x2c, r24	; 44
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	8d bd       	out	0x2d, r24	; 45
    1d38:	08 95       	ret

00001d3a <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1d3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <nrk_gpio_set+0x6>
    1d3e:	7f c0       	rjmp	.+254    	; 0x1e3e <nrk_gpio_set+0x104>
        switch (pin & 0x07) {
    1d40:	48 2f       	mov	r20, r24
    1d42:	55 27       	eor	r21, r21
    1d44:	9a 01       	movw	r18, r20
    1d46:	27 70       	andi	r18, 0x07	; 7
    1d48:	30 70       	andi	r19, 0x00	; 0
    1d4a:	22 30       	cpi	r18, 0x02	; 2
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	a9 f1       	breq	.+106    	; 0x1dba <nrk_gpio_set+0x80>
    1d50:	23 30       	cpi	r18, 0x03	; 3
    1d52:	31 05       	cpc	r19, r1
    1d54:	44 f4       	brge	.+16     	; 0x1d66 <nrk_gpio_set+0x2c>
    1d56:	21 15       	cp	r18, r1
    1d58:	31 05       	cpc	r19, r1
    1d5a:	89 f0       	breq	.+34     	; 0x1d7e <nrk_gpio_set+0x44>
    1d5c:	21 30       	cpi	r18, 0x01	; 1
    1d5e:	31 05       	cpc	r19, r1
    1d60:	09 f0       	breq	.+2      	; 0x1d64 <nrk_gpio_set+0x2a>
    1d62:	6d c0       	rjmp	.+218    	; 0x1e3e <nrk_gpio_set+0x104>
    1d64:	1c c0       	rjmp	.+56     	; 0x1d9e <nrk_gpio_set+0x64>
    1d66:	24 30       	cpi	r18, 0x04	; 4
    1d68:	31 05       	cpc	r19, r1
    1d6a:	09 f4       	brne	.+2      	; 0x1d6e <nrk_gpio_set+0x34>
    1d6c:	46 c0       	rjmp	.+140    	; 0x1dfa <nrk_gpio_set+0xc0>
    1d6e:	24 30       	cpi	r18, 0x04	; 4
    1d70:	31 05       	cpc	r19, r1
    1d72:	9c f1       	brlt	.+102    	; 0x1dda <nrk_gpio_set+0xa0>
    1d74:	25 30       	cpi	r18, 0x05	; 5
    1d76:	31 05       	cpc	r19, r1
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <nrk_gpio_set+0x42>
    1d7a:	61 c0       	rjmp	.+194    	; 0x1e3e <nrk_gpio_set+0x104>
    1d7c:	4e c0       	rjmp	.+156    	; 0x1e1a <nrk_gpio_set+0xe0>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1d7e:	22 b1       	in	r18, 0x02	; 2
    1d80:	b3 e0       	ldi	r27, 0x03	; 3
    1d82:	56 95       	lsr	r21
    1d84:	47 95       	ror	r20
    1d86:	ba 95       	dec	r27
    1d88:	e1 f7       	brne	.-8      	; 0x1d82 <nrk_gpio_set+0x48>
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <nrk_gpio_set+0x5a>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	4a 95       	dec	r20
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <nrk_gpio_set+0x56>
    1d98:	28 2b       	or	r18, r24
    1d9a:	22 b9       	out	0x02, r18	; 2
    1d9c:	4d c0       	rjmp	.+154    	; 0x1e38 <nrk_gpio_set+0xfe>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1d9e:	85 b1       	in	r24, 0x05	; 5
    1da0:	a3 e0       	ldi	r26, 0x03	; 3
    1da2:	56 95       	lsr	r21
    1da4:	47 95       	ror	r20
    1da6:	aa 95       	dec	r26
    1da8:	e1 f7       	brne	.-8      	; 0x1da2 <nrk_gpio_set+0x68>
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <nrk_gpio_set+0x76>
    1dac:	22 0f       	add	r18, r18
    1dae:	33 1f       	adc	r19, r19
    1db0:	4a 95       	dec	r20
    1db2:	e2 f7       	brpl	.-8      	; 0x1dac <nrk_gpio_set+0x72>
    1db4:	82 2b       	or	r24, r18
    1db6:	85 b9       	out	0x05, r24	; 5
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <nrk_gpio_set+0xfe>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1dba:	28 b1       	in	r18, 0x08	; 8
    1dbc:	f3 e0       	ldi	r31, 0x03	; 3
    1dbe:	56 95       	lsr	r21
    1dc0:	47 95       	ror	r20
    1dc2:	fa 95       	dec	r31
    1dc4:	e1 f7       	brne	.-8      	; 0x1dbe <nrk_gpio_set+0x84>
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <nrk_gpio_set+0x96>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	4a 95       	dec	r20
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <nrk_gpio_set+0x92>
    1dd4:	28 2b       	or	r18, r24
    1dd6:	28 b9       	out	0x08, r18	; 8
    1dd8:	2f c0       	rjmp	.+94     	; 0x1e38 <nrk_gpio_set+0xfe>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1dda:	2b b1       	in	r18, 0x0b	; 11
    1ddc:	e3 e0       	ldi	r30, 0x03	; 3
    1dde:	56 95       	lsr	r21
    1de0:	47 95       	ror	r20
    1de2:	ea 95       	dec	r30
    1de4:	e1 f7       	brne	.-8      	; 0x1dde <nrk_gpio_set+0xa4>
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <nrk_gpio_set+0xb6>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	4a 95       	dec	r20
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <nrk_gpio_set+0xb2>
    1df4:	28 2b       	or	r18, r24
    1df6:	2b b9       	out	0x0b, r18	; 11
    1df8:	1f c0       	rjmp	.+62     	; 0x1e38 <nrk_gpio_set+0xfe>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1dfa:	2e b1       	in	r18, 0x0e	; 14
    1dfc:	73 e0       	ldi	r23, 0x03	; 3
    1dfe:	56 95       	lsr	r21
    1e00:	47 95       	ror	r20
    1e02:	7a 95       	dec	r23
    1e04:	e1 f7       	brne	.-8      	; 0x1dfe <nrk_gpio_set+0xc4>
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <nrk_gpio_set+0xd6>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	4a 95       	dec	r20
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <nrk_gpio_set+0xd2>
    1e14:	28 2b       	or	r18, r24
    1e16:	2e b9       	out	0x0e, r18	; 14
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <nrk_gpio_set+0xfe>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1e1a:	21 b3       	in	r18, 0x11	; 17
    1e1c:	63 e0       	ldi	r22, 0x03	; 3
    1e1e:	56 95       	lsr	r21
    1e20:	47 95       	ror	r20
    1e22:	6a 95       	dec	r22
    1e24:	e1 f7       	brne	.-8      	; 0x1e1e <nrk_gpio_set+0xe4>
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <nrk_gpio_set+0xf6>
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	4a 95       	dec	r20
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <nrk_gpio_set+0xf2>
    1e34:	28 2b       	or	r18, r24
    1e36:	21 bb       	out	0x11, r18	; 17
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	08 95       	ret
    1e3e:	8f ef       	ldi	r24, 0xFF	; 255
    1e40:	9f ef       	ldi	r25, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    1e42:	08 95       	ret

00001e44 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1e44:	8f 3f       	cpi	r24, 0xFF	; 255
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <nrk_gpio_clr+0x6>
    1e48:	86 c0       	rjmp	.+268    	; 0x1f56 <nrk_gpio_clr+0x112>
        switch (pin & 0x07) {
    1e4a:	48 2f       	mov	r20, r24
    1e4c:	55 27       	eor	r21, r21
    1e4e:	9a 01       	movw	r18, r20
    1e50:	27 70       	andi	r18, 0x07	; 7
    1e52:	30 70       	andi	r19, 0x00	; 0
    1e54:	22 30       	cpi	r18, 0x02	; 2
    1e56:	31 05       	cpc	r19, r1
    1e58:	c1 f1       	breq	.+112    	; 0x1eca <nrk_gpio_clr+0x86>
    1e5a:	23 30       	cpi	r18, 0x03	; 3
    1e5c:	31 05       	cpc	r19, r1
    1e5e:	44 f4       	brge	.+16     	; 0x1e70 <nrk_gpio_clr+0x2c>
    1e60:	21 15       	cp	r18, r1
    1e62:	31 05       	cpc	r19, r1
    1e64:	89 f0       	breq	.+34     	; 0x1e88 <nrk_gpio_clr+0x44>
    1e66:	21 30       	cpi	r18, 0x01	; 1
    1e68:	31 05       	cpc	r19, r1
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <nrk_gpio_clr+0x2a>
    1e6c:	74 c0       	rjmp	.+232    	; 0x1f56 <nrk_gpio_clr+0x112>
    1e6e:	1d c0       	rjmp	.+58     	; 0x1eaa <nrk_gpio_clr+0x66>
    1e70:	24 30       	cpi	r18, 0x04	; 4
    1e72:	31 05       	cpc	r19, r1
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <nrk_gpio_clr+0x34>
    1e76:	4b c0       	rjmp	.+150    	; 0x1f0e <nrk_gpio_clr+0xca>
    1e78:	24 30       	cpi	r18, 0x04	; 4
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	bc f1       	brlt	.+110    	; 0x1eec <nrk_gpio_clr+0xa8>
    1e7e:	25 30       	cpi	r18, 0x05	; 5
    1e80:	31 05       	cpc	r19, r1
    1e82:	09 f0       	breq	.+2      	; 0x1e86 <nrk_gpio_clr+0x42>
    1e84:	68 c0       	rjmp	.+208    	; 0x1f56 <nrk_gpio_clr+0x112>
    1e86:	54 c0       	rjmp	.+168    	; 0x1f30 <nrk_gpio_clr+0xec>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1e88:	22 b1       	in	r18, 0x02	; 2
    1e8a:	e3 e0       	ldi	r30, 0x03	; 3
    1e8c:	56 95       	lsr	r21
    1e8e:	47 95       	ror	r20
    1e90:	ea 95       	dec	r30
    1e92:	e1 f7       	brne	.-8      	; 0x1e8c <nrk_gpio_clr+0x48>
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <nrk_gpio_clr+0x5a>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	4a 95       	dec	r20
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <nrk_gpio_clr+0x56>
    1ea2:	80 95       	com	r24
    1ea4:	82 23       	and	r24, r18
    1ea6:	82 b9       	out	0x02, r24	; 2
    1ea8:	53 c0       	rjmp	.+166    	; 0x1f50 <nrk_gpio_clr+0x10c>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1eaa:	95 b1       	in	r25, 0x05	; 5
    1eac:	73 e0       	ldi	r23, 0x03	; 3
    1eae:	56 95       	lsr	r21
    1eb0:	47 95       	ror	r20
    1eb2:	7a 95       	dec	r23
    1eb4:	e1 f7       	brne	.-8      	; 0x1eae <nrk_gpio_clr+0x6a>
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <nrk_gpio_clr+0x78>
    1eb8:	22 0f       	add	r18, r18
    1eba:	33 1f       	adc	r19, r19
    1ebc:	4a 95       	dec	r20
    1ebe:	e2 f7       	brpl	.-8      	; 0x1eb8 <nrk_gpio_clr+0x74>
    1ec0:	82 2f       	mov	r24, r18
    1ec2:	80 95       	com	r24
    1ec4:	89 23       	and	r24, r25
    1ec6:	85 b9       	out	0x05, r24	; 5
    1ec8:	43 c0       	rjmp	.+134    	; 0x1f50 <nrk_gpio_clr+0x10c>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1eca:	28 b1       	in	r18, 0x08	; 8
    1ecc:	63 e0       	ldi	r22, 0x03	; 3
    1ece:	56 95       	lsr	r21
    1ed0:	47 95       	ror	r20
    1ed2:	6a 95       	dec	r22
    1ed4:	e1 f7       	brne	.-8      	; 0x1ece <nrk_gpio_clr+0x8a>
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <nrk_gpio_clr+0x9c>
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	4a 95       	dec	r20
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <nrk_gpio_clr+0x98>
    1ee4:	80 95       	com	r24
    1ee6:	82 23       	and	r24, r18
    1ee8:	88 b9       	out	0x08, r24	; 8
    1eea:	32 c0       	rjmp	.+100    	; 0x1f50 <nrk_gpio_clr+0x10c>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1eec:	2b b1       	in	r18, 0x0b	; 11
    1eee:	33 e0       	ldi	r19, 0x03	; 3
    1ef0:	56 95       	lsr	r21
    1ef2:	47 95       	ror	r20
    1ef4:	3a 95       	dec	r19
    1ef6:	e1 f7       	brne	.-8      	; 0x1ef0 <nrk_gpio_clr+0xac>
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <nrk_gpio_clr+0xbe>
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	4a 95       	dec	r20
    1f04:	e2 f7       	brpl	.-8      	; 0x1efe <nrk_gpio_clr+0xba>
    1f06:	80 95       	com	r24
    1f08:	82 23       	and	r24, r18
    1f0a:	8b b9       	out	0x0b, r24	; 11
    1f0c:	21 c0       	rjmp	.+66     	; 0x1f50 <nrk_gpio_clr+0x10c>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1f0e:	2e b1       	in	r18, 0x0e	; 14
    1f10:	93 e0       	ldi	r25, 0x03	; 3
    1f12:	56 95       	lsr	r21
    1f14:	47 95       	ror	r20
    1f16:	9a 95       	dec	r25
    1f18:	e1 f7       	brne	.-8      	; 0x1f12 <nrk_gpio_clr+0xce>
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <nrk_gpio_clr+0xe0>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	4a 95       	dec	r20
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <nrk_gpio_clr+0xdc>
    1f28:	80 95       	com	r24
    1f2a:	82 23       	and	r24, r18
    1f2c:	8e b9       	out	0x0e, r24	; 14
    1f2e:	10 c0       	rjmp	.+32     	; 0x1f50 <nrk_gpio_clr+0x10c>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1f30:	21 b3       	in	r18, 0x11	; 17
    1f32:	83 e0       	ldi	r24, 0x03	; 3
    1f34:	56 95       	lsr	r21
    1f36:	47 95       	ror	r20
    1f38:	8a 95       	dec	r24
    1f3a:	e1 f7       	brne	.-8      	; 0x1f34 <nrk_gpio_clr+0xf0>
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <nrk_gpio_clr+0x102>
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	4a 95       	dec	r20
    1f48:	e2 f7       	brpl	.-8      	; 0x1f42 <nrk_gpio_clr+0xfe>
    1f4a:	80 95       	com	r24
    1f4c:	82 23       	and	r24, r18
    1f4e:	81 bb       	out	0x11, r24	; 17
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	08 95       	ret
    1f56:	8f ef       	ldi	r24, 0xFF	; 255
    1f58:	9f ef       	ldi	r25, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    1f5a:	08 95       	ret

00001f5c <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1f5c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f5e:	a9 f1       	breq	.+106    	; 0x1fca <nrk_gpio_get+0x6e>
        switch (pin & 0x07) {
    1f60:	28 2f       	mov	r18, r24
    1f62:	33 27       	eor	r19, r19
    1f64:	c9 01       	movw	r24, r18
    1f66:	87 70       	andi	r24, 0x07	; 7
    1f68:	90 70       	andi	r25, 0x00	; 0
    1f6a:	82 30       	cpi	r24, 0x02	; 2
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	a9 f0       	breq	.+42     	; 0x1f9a <nrk_gpio_get+0x3e>
    1f70:	83 30       	cpi	r24, 0x03	; 3
    1f72:	91 05       	cpc	r25, r1
    1f74:	2c f4       	brge	.+10     	; 0x1f80 <nrk_gpio_get+0x24>
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	61 f0       	breq	.+24     	; 0x1f92 <nrk_gpio_get+0x36>
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	31 f5       	brne	.+76     	; 0x1fca <nrk_gpio_get+0x6e>
    1f7e:	0b c0       	rjmp	.+22     	; 0x1f96 <nrk_gpio_get+0x3a>
    1f80:	84 30       	cpi	r24, 0x04	; 4
    1f82:	91 05       	cpc	r25, r1
    1f84:	71 f0       	breq	.+28     	; 0x1fa2 <nrk_gpio_get+0x46>
    1f86:	84 30       	cpi	r24, 0x04	; 4
    1f88:	91 05       	cpc	r25, r1
    1f8a:	4c f0       	brlt	.+18     	; 0x1f9e <nrk_gpio_get+0x42>
    1f8c:	05 97       	sbiw	r24, 0x05	; 5
    1f8e:	e9 f4       	brne	.+58     	; 0x1fca <nrk_gpio_get+0x6e>
    1f90:	0a c0       	rjmp	.+20     	; 0x1fa6 <nrk_gpio_get+0x4a>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    1f92:	80 b1       	in	r24, 0x00	; 0
    1f94:	09 c0       	rjmp	.+18     	; 0x1fa8 <nrk_gpio_get+0x4c>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    1f96:	83 b1       	in	r24, 0x03	; 3
    1f98:	07 c0       	rjmp	.+14     	; 0x1fa8 <nrk_gpio_get+0x4c>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1f9a:	86 b1       	in	r24, 0x06	; 6
    1f9c:	05 c0       	rjmp	.+10     	; 0x1fa8 <nrk_gpio_get+0x4c>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    1f9e:	89 b1       	in	r24, 0x09	; 9
    1fa0:	03 c0       	rjmp	.+6      	; 0x1fa8 <nrk_gpio_get+0x4c>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    1fa2:	8c b1       	in	r24, 0x0c	; 12
    1fa4:	01 c0       	rjmp	.+2      	; 0x1fa8 <nrk_gpio_get+0x4c>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    1fa6:	8f b1       	in	r24, 0x0f	; 15
    1fa8:	99 27       	eor	r25, r25
    1faa:	f3 e0       	ldi	r31, 0x03	; 3
    1fac:	36 95       	lsr	r19
    1fae:	27 95       	ror	r18
    1fb0:	fa 95       	dec	r31
    1fb2:	e1 f7       	brne	.-8      	; 0x1fac <nrk_gpio_get+0x50>
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <nrk_gpio_get+0x5e>
    1fb6:	95 95       	asr	r25
    1fb8:	87 95       	ror	r24
    1fba:	2a 95       	dec	r18
    1fbc:	e2 f7       	brpl	.-8      	; 0x1fb6 <nrk_gpio_get+0x5a>
    1fbe:	99 27       	eor	r25, r25
    1fc0:	87 fd       	sbrc	r24, 7
    1fc2:	90 95       	com	r25
    1fc4:	81 70       	andi	r24, 0x01	; 1
    1fc6:	90 70       	andi	r25, 0x00	; 0
    1fc8:	08 95       	ret
    1fca:	8f ef       	ldi	r24, 0xFF	; 255
    1fcc:	9f ef       	ldi	r25, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    1fce:	08 95       	ret

00001fd0 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1fd0:	8f 3f       	cpi	r24, 0xFF	; 255
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <nrk_gpio_toggle+0x6>
    1fd4:	03 c1       	rjmp	.+518    	; 0x21dc <nrk_gpio_toggle+0x20c>
        switch (pin & 0x07) {
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	33 27       	eor	r19, r19
    1fda:	a9 01       	movw	r20, r18
    1fdc:	47 70       	andi	r20, 0x07	; 7
    1fde:	50 70       	andi	r21, 0x00	; 0
    1fe0:	42 30       	cpi	r20, 0x02	; 2
    1fe2:	51 05       	cpc	r21, r1
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <nrk_gpio_toggle+0x18>
    1fe6:	5c c0       	rjmp	.+184    	; 0x20a0 <nrk_gpio_toggle+0xd0>
    1fe8:	43 30       	cpi	r20, 0x03	; 3
    1fea:	51 05       	cpc	r21, r1
    1fec:	44 f4       	brge	.+16     	; 0x1ffe <nrk_gpio_toggle+0x2e>
    1fee:	41 15       	cp	r20, r1
    1ff0:	51 05       	cpc	r21, r1
    1ff2:	91 f0       	breq	.+36     	; 0x2018 <nrk_gpio_toggle+0x48>
    1ff4:	41 30       	cpi	r20, 0x01	; 1
    1ff6:	51 05       	cpc	r21, r1
    1ff8:	09 f0       	breq	.+2      	; 0x1ffc <nrk_gpio_toggle+0x2c>
    1ffa:	f0 c0       	rjmp	.+480    	; 0x21dc <nrk_gpio_toggle+0x20c>
    1ffc:	34 c0       	rjmp	.+104    	; 0x2066 <nrk_gpio_toggle+0x96>
    1ffe:	44 30       	cpi	r20, 0x04	; 4
    2000:	51 05       	cpc	r21, r1
    2002:	09 f4       	brne	.+2      	; 0x2006 <nrk_gpio_toggle+0x36>
    2004:	9b c0       	rjmp	.+310    	; 0x213c <nrk_gpio_toggle+0x16c>
    2006:	44 30       	cpi	r20, 0x04	; 4
    2008:	51 05       	cpc	r21, r1
    200a:	0c f4       	brge	.+2      	; 0x200e <nrk_gpio_toggle+0x3e>
    200c:	70 c0       	rjmp	.+224    	; 0x20ee <nrk_gpio_toggle+0x11e>
    200e:	45 30       	cpi	r20, 0x05	; 5
    2010:	51 05       	cpc	r21, r1
    2012:	09 f0       	breq	.+2      	; 0x2016 <nrk_gpio_toggle+0x46>
    2014:	e3 c0       	rjmp	.+454    	; 0x21dc <nrk_gpio_toggle+0x20c>
    2016:	b9 c0       	rjmp	.+370    	; 0x218a <nrk_gpio_toggle+0x1ba>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2018:	80 b1       	in	r24, 0x00	; 0
    201a:	a9 01       	movw	r20, r18
    201c:	73 e0       	ldi	r23, 0x03	; 3
    201e:	56 95       	lsr	r21
    2020:	47 95       	ror	r20
    2022:	7a 95       	dec	r23
    2024:	e1 f7       	brne	.-8      	; 0x201e <nrk_gpio_toggle+0x4e>
    2026:	99 27       	eor	r25, r25
    2028:	04 2e       	mov	r0, r20
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <nrk_gpio_toggle+0x60>
    202c:	95 95       	asr	r25
    202e:	87 95       	ror	r24
    2030:	0a 94       	dec	r0
    2032:	e2 f7       	brpl	.-8      	; 0x202c <nrk_gpio_toggle+0x5c>
    2034:	80 fd       	sbrc	r24, 0
    2036:	0b c0       	rjmp	.+22     	; 0x204e <nrk_gpio_toggle+0x7e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    2038:	22 b1       	in	r18, 0x02	; 2
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <nrk_gpio_toggle+0x74>
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	4a 95       	dec	r20
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <nrk_gpio_toggle+0x70>
    2048:	28 2b       	or	r18, r24
    204a:	22 b9       	out	0x02, r18	; 2
    204c:	c4 c0       	rjmp	.+392    	; 0x21d6 <nrk_gpio_toggle+0x206>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    204e:	22 b1       	in	r18, 0x02	; 2
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	02 c0       	rjmp	.+4      	; 0x205a <nrk_gpio_toggle+0x8a>
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	4a 95       	dec	r20
    205c:	e2 f7       	brpl	.-8      	; 0x2056 <nrk_gpio_toggle+0x86>
    205e:	80 95       	com	r24
    2060:	82 23       	and	r24, r18
    2062:	82 b9       	out	0x02, r24	; 2
    2064:	b8 c0       	rjmp	.+368    	; 0x21d6 <nrk_gpio_toggle+0x206>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    2066:	83 b1       	in	r24, 0x03	; 3
    2068:	63 e0       	ldi	r22, 0x03	; 3
    206a:	36 95       	lsr	r19
    206c:	27 95       	ror	r18
    206e:	6a 95       	dec	r22
    2070:	e1 f7       	brne	.-8      	; 0x206a <nrk_gpio_toggle+0x9a>
    2072:	99 27       	eor	r25, r25
    2074:	02 2e       	mov	r0, r18
    2076:	02 c0       	rjmp	.+4      	; 0x207c <nrk_gpio_toggle+0xac>
    2078:	95 95       	asr	r25
    207a:	87 95       	ror	r24
    207c:	0a 94       	dec	r0
    207e:	e2 f7       	brpl	.-8      	; 0x2078 <nrk_gpio_toggle+0xa8>
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <nrk_gpio_toggle+0xb6>
    2082:	44 0f       	add	r20, r20
    2084:	55 1f       	adc	r21, r21
    2086:	2a 95       	dec	r18
    2088:	e2 f7       	brpl	.-8      	; 0x2082 <nrk_gpio_toggle+0xb2>
    208a:	80 fd       	sbrc	r24, 0
    208c:	03 c0       	rjmp	.+6      	; 0x2094 <nrk_gpio_toggle+0xc4>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    208e:	85 b1       	in	r24, 0x05	; 5
    2090:	84 2b       	or	r24, r20
    2092:	04 c0       	rjmp	.+8      	; 0x209c <nrk_gpio_toggle+0xcc>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    2094:	95 b1       	in	r25, 0x05	; 5
    2096:	84 2f       	mov	r24, r20
    2098:	80 95       	com	r24
    209a:	89 23       	and	r24, r25
    209c:	85 b9       	out	0x05, r24	; 5
    209e:	9b c0       	rjmp	.+310    	; 0x21d6 <nrk_gpio_toggle+0x206>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    20a0:	86 b1       	in	r24, 0x06	; 6
    20a2:	a9 01       	movw	r20, r18
    20a4:	23 e0       	ldi	r18, 0x03	; 3
    20a6:	56 95       	lsr	r21
    20a8:	47 95       	ror	r20
    20aa:	2a 95       	dec	r18
    20ac:	e1 f7       	brne	.-8      	; 0x20a6 <nrk_gpio_toggle+0xd6>
    20ae:	99 27       	eor	r25, r25
    20b0:	04 2e       	mov	r0, r20
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <nrk_gpio_toggle+0xe8>
    20b4:	95 95       	asr	r25
    20b6:	87 95       	ror	r24
    20b8:	0a 94       	dec	r0
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <nrk_gpio_toggle+0xe4>
    20bc:	80 fd       	sbrc	r24, 0
    20be:	0b c0       	rjmp	.+22     	; 0x20d6 <nrk_gpio_toggle+0x106>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    20c0:	28 b1       	in	r18, 0x08	; 8
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <nrk_gpio_toggle+0xfc>
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	4a 95       	dec	r20
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <nrk_gpio_toggle+0xf8>
    20d0:	28 2b       	or	r18, r24
    20d2:	28 b9       	out	0x08, r18	; 8
    20d4:	80 c0       	rjmp	.+256    	; 0x21d6 <nrk_gpio_toggle+0x206>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    20d6:	28 b1       	in	r18, 0x08	; 8
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <nrk_gpio_toggle+0x112>
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	4a 95       	dec	r20
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <nrk_gpio_toggle+0x10e>
    20e6:	80 95       	com	r24
    20e8:	82 23       	and	r24, r18
    20ea:	88 b9       	out	0x08, r24	; 8
    20ec:	74 c0       	rjmp	.+232    	; 0x21d6 <nrk_gpio_toggle+0x206>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    20ee:	89 b1       	in	r24, 0x09	; 9
    20f0:	a9 01       	movw	r20, r18
    20f2:	93 e0       	ldi	r25, 0x03	; 3
    20f4:	56 95       	lsr	r21
    20f6:	47 95       	ror	r20
    20f8:	9a 95       	dec	r25
    20fa:	e1 f7       	brne	.-8      	; 0x20f4 <nrk_gpio_toggle+0x124>
    20fc:	99 27       	eor	r25, r25
    20fe:	04 2e       	mov	r0, r20
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <nrk_gpio_toggle+0x136>
    2102:	95 95       	asr	r25
    2104:	87 95       	ror	r24
    2106:	0a 94       	dec	r0
    2108:	e2 f7       	brpl	.-8      	; 0x2102 <nrk_gpio_toggle+0x132>
    210a:	80 fd       	sbrc	r24, 0
    210c:	0b c0       	rjmp	.+22     	; 0x2124 <nrk_gpio_toggle+0x154>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    210e:	2b b1       	in	r18, 0x0b	; 11
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	02 c0       	rjmp	.+4      	; 0x211a <nrk_gpio_toggle+0x14a>
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	4a 95       	dec	r20
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <nrk_gpio_toggle+0x146>
    211e:	28 2b       	or	r18, r24
    2120:	2b b9       	out	0x0b, r18	; 11
    2122:	59 c0       	rjmp	.+178    	; 0x21d6 <nrk_gpio_toggle+0x206>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    2124:	2b b1       	in	r18, 0x0b	; 11
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <nrk_gpio_toggle+0x160>
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	4a 95       	dec	r20
    2132:	e2 f7       	brpl	.-8      	; 0x212c <nrk_gpio_toggle+0x15c>
    2134:	80 95       	com	r24
    2136:	82 23       	and	r24, r18
    2138:	8b b9       	out	0x0b, r24	; 11
    213a:	4d c0       	rjmp	.+154    	; 0x21d6 <nrk_gpio_toggle+0x206>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    213c:	8c b1       	in	r24, 0x0c	; 12
    213e:	a9 01       	movw	r20, r18
    2140:	b3 e0       	ldi	r27, 0x03	; 3
    2142:	56 95       	lsr	r21
    2144:	47 95       	ror	r20
    2146:	ba 95       	dec	r27
    2148:	e1 f7       	brne	.-8      	; 0x2142 <nrk_gpio_toggle+0x172>
    214a:	99 27       	eor	r25, r25
    214c:	04 2e       	mov	r0, r20
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <nrk_gpio_toggle+0x184>
    2150:	95 95       	asr	r25
    2152:	87 95       	ror	r24
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <nrk_gpio_toggle+0x180>
    2158:	80 fd       	sbrc	r24, 0
    215a:	0b c0       	rjmp	.+22     	; 0x2172 <nrk_gpio_toggle+0x1a2>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    215c:	2e b1       	in	r18, 0x0e	; 14
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <nrk_gpio_toggle+0x198>
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	4a 95       	dec	r20
    216a:	e2 f7       	brpl	.-8      	; 0x2164 <nrk_gpio_toggle+0x194>
    216c:	28 2b       	or	r18, r24
    216e:	2e b9       	out	0x0e, r18	; 14
    2170:	32 c0       	rjmp	.+100    	; 0x21d6 <nrk_gpio_toggle+0x206>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    2172:	2e b1       	in	r18, 0x0e	; 14
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	02 c0       	rjmp	.+4      	; 0x217e <nrk_gpio_toggle+0x1ae>
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	4a 95       	dec	r20
    2180:	e2 f7       	brpl	.-8      	; 0x217a <nrk_gpio_toggle+0x1aa>
    2182:	80 95       	com	r24
    2184:	82 23       	and	r24, r18
    2186:	8e b9       	out	0x0e, r24	; 14
    2188:	26 c0       	rjmp	.+76     	; 0x21d6 <nrk_gpio_toggle+0x206>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    218a:	8f b1       	in	r24, 0x0f	; 15
    218c:	a9 01       	movw	r20, r18
    218e:	a3 e0       	ldi	r26, 0x03	; 3
    2190:	56 95       	lsr	r21
    2192:	47 95       	ror	r20
    2194:	aa 95       	dec	r26
    2196:	e1 f7       	brne	.-8      	; 0x2190 <nrk_gpio_toggle+0x1c0>
    2198:	99 27       	eor	r25, r25
    219a:	04 2e       	mov	r0, r20
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <nrk_gpio_toggle+0x1d2>
    219e:	95 95       	asr	r25
    21a0:	87 95       	ror	r24
    21a2:	0a 94       	dec	r0
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <nrk_gpio_toggle+0x1ce>
    21a6:	80 fd       	sbrc	r24, 0
    21a8:	0b c0       	rjmp	.+22     	; 0x21c0 <nrk_gpio_toggle+0x1f0>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    21aa:	21 b3       	in	r18, 0x11	; 17
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <nrk_gpio_toggle+0x1e6>
    21b2:	88 0f       	add	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	4a 95       	dec	r20
    21b8:	e2 f7       	brpl	.-8      	; 0x21b2 <nrk_gpio_toggle+0x1e2>
    21ba:	28 2b       	or	r18, r24
    21bc:	21 bb       	out	0x11, r18	; 17
    21be:	0b c0       	rjmp	.+22     	; 0x21d6 <nrk_gpio_toggle+0x206>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    21c0:	21 b3       	in	r18, 0x11	; 17
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <nrk_gpio_toggle+0x1fc>
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	4a 95       	dec	r20
    21ce:	e2 f7       	brpl	.-8      	; 0x21c8 <nrk_gpio_toggle+0x1f8>
    21d0:	80 95       	com	r24
    21d2:	82 23       	and	r24, r18
    21d4:	81 bb       	out	0x11, r24	; 17
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	08 95       	ret
    21dc:	8f ef       	ldi	r24, 0xFF	; 255
    21de:	9f ef       	ldi	r25, 0xFF	; 255
                        }
                        break;
                default: return -1;
        }
        return 1;
}
    21e0:	08 95       	ret

000021e2 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    21e2:	8f 3f       	cpi	r24, 0xFF	; 255
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <nrk_gpio_direction+0x6>
    21e6:	12 c1       	rjmp	.+548    	; 0x240c <__stack+0x20d>
    21e8:	48 2f       	mov	r20, r24
    21ea:	55 27       	eor	r21, r21
        if (pin_direction == NRK_PIN_INPUT) {
    21ec:	66 23       	and	r22, r22
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <nrk_gpio_direction+0x10>
    21f0:	90 c0       	rjmp	.+288    	; 0x2312 <__stack+0x113>
                switch (pin & 0x07) {
    21f2:	ca 01       	movw	r24, r20
    21f4:	87 70       	andi	r24, 0x07	; 7
    21f6:	90 70       	andi	r25, 0x00	; 0
    21f8:	82 30       	cpi	r24, 0x02	; 2
    21fa:	91 05       	cpc	r25, r1
    21fc:	09 f4       	brne	.+2      	; 0x2200 <__stack+0x1>
    21fe:	3e c0       	rjmp	.+124    	; 0x227c <__stack+0x7d>
    2200:	83 30       	cpi	r24, 0x03	; 3
    2202:	91 05       	cpc	r25, r1
    2204:	3c f4       	brge	.+14     	; 0x2214 <__stack+0x15>
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	89 f0       	breq	.+34     	; 0x222c <__stack+0x2d>
    220a:	81 30       	cpi	r24, 0x01	; 1
    220c:	91 05       	cpc	r25, r1
    220e:	09 f0       	breq	.+2      	; 0x2212 <__stack+0x13>
    2210:	fd c0       	rjmp	.+506    	; 0x240c <__stack+0x20d>
    2212:	21 c0       	rjmp	.+66     	; 0x2256 <__stack+0x57>
    2214:	84 30       	cpi	r24, 0x04	; 4
    2216:	91 05       	cpc	r25, r1
    2218:	09 f4       	brne	.+2      	; 0x221c <__stack+0x1d>
    221a:	54 c0       	rjmp	.+168    	; 0x22c4 <__stack+0xc5>
    221c:	84 30       	cpi	r24, 0x04	; 4
    221e:	91 05       	cpc	r25, r1
    2220:	0c f4       	brge	.+2      	; 0x2224 <__stack+0x25>
    2222:	3e c0       	rjmp	.+124    	; 0x22a0 <__stack+0xa1>
    2224:	05 97       	sbiw	r24, 0x05	; 5
    2226:	09 f0       	breq	.+2      	; 0x222a <__stack+0x2b>
    2228:	f1 c0       	rjmp	.+482    	; 0x240c <__stack+0x20d>
    222a:	5e c0       	rjmp	.+188    	; 0x22e8 <__stack+0xe9>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    222c:	31 b1       	in	r19, 0x01	; 1
    222e:	b3 e0       	ldi	r27, 0x03	; 3
    2230:	56 95       	lsr	r21
    2232:	47 95       	ror	r20
    2234:	ba 95       	dec	r27
    2236:	e1 f7       	brne	.-8      	; 0x2230 <__stack+0x31>
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <__stack+0x43>
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	4a 95       	dec	r20
    2244:	e2 f7       	brpl	.-8      	; 0x223e <__stack+0x3f>
    2246:	28 2f       	mov	r18, r24
    2248:	20 95       	com	r18
    224a:	23 23       	and	r18, r19
    224c:	21 b9       	out	0x01, r18	; 1
                                PORTA |= BM((pin & 0xF8) >> 3); 
    224e:	22 b1       	in	r18, 0x02	; 2
    2250:	82 2b       	or	r24, r18
    2252:	82 b9       	out	0x02, r24	; 2
    2254:	d8 c0       	rjmp	.+432    	; 0x2406 <__stack+0x207>
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    2256:	24 b1       	in	r18, 0x04	; 4
    2258:	a3 e0       	ldi	r26, 0x03	; 3
    225a:	56 95       	lsr	r21
    225c:	47 95       	ror	r20
    225e:	aa 95       	dec	r26
    2260:	e1 f7       	brne	.-8      	; 0x225a <__stack+0x5b>
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <__stack+0x69>
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	4a 95       	dec	r20
    226a:	e2 f7       	brpl	.-8      	; 0x2264 <__stack+0x65>
    226c:	98 2f       	mov	r25, r24
    226e:	80 95       	com	r24
    2270:	82 23       	and	r24, r18
    2272:	84 b9       	out	0x04, r24	; 4
                                PORTB |= BM((pin & 0xF8) >> 3); 
    2274:	85 b1       	in	r24, 0x05	; 5
    2276:	98 2b       	or	r25, r24
    2278:	95 b9       	out	0x05, r25	; 5
    227a:	c5 c0       	rjmp	.+394    	; 0x2406 <__stack+0x207>
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    227c:	37 b1       	in	r19, 0x07	; 7
    227e:	f3 e0       	ldi	r31, 0x03	; 3
    2280:	56 95       	lsr	r21
    2282:	47 95       	ror	r20
    2284:	fa 95       	dec	r31
    2286:	e1 f7       	brne	.-8      	; 0x2280 <__stack+0x81>
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <__stack+0x93>
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	4a 95       	dec	r20
    2294:	e2 f7       	brpl	.-8      	; 0x228e <__stack+0x8f>
    2296:	28 2f       	mov	r18, r24
    2298:	20 95       	com	r18
    229a:	23 23       	and	r18, r19
    229c:	27 b9       	out	0x07, r18	; 7
    229e:	35 c0       	rjmp	.+106    	; 0x230a <__stack+0x10b>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    22a0:	3a b1       	in	r19, 0x0a	; 10
    22a2:	e3 e0       	ldi	r30, 0x03	; 3
    22a4:	56 95       	lsr	r21
    22a6:	47 95       	ror	r20
    22a8:	ea 95       	dec	r30
    22aa:	e1 f7       	brne	.-8      	; 0x22a4 <__stack+0xa5>
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <__stack+0xb7>
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	4a 95       	dec	r20
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <__stack+0xb3>
    22ba:	28 2f       	mov	r18, r24
    22bc:	20 95       	com	r18
    22be:	23 23       	and	r18, r19
    22c0:	2a b9       	out	0x0a, r18	; 10
    22c2:	23 c0       	rjmp	.+70     	; 0x230a <__stack+0x10b>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    22c4:	3d b1       	in	r19, 0x0d	; 13
    22c6:	73 e0       	ldi	r23, 0x03	; 3
    22c8:	56 95       	lsr	r21
    22ca:	47 95       	ror	r20
    22cc:	7a 95       	dec	r23
    22ce:	e1 f7       	brne	.-8      	; 0x22c8 <__stack+0xc9>
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <__stack+0xdb>
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	4a 95       	dec	r20
    22dc:	e2 f7       	brpl	.-8      	; 0x22d6 <__stack+0xd7>
    22de:	28 2f       	mov	r18, r24
    22e0:	20 95       	com	r18
    22e2:	23 23       	and	r18, r19
    22e4:	2d b9       	out	0x0d, r18	; 13
    22e6:	11 c0       	rjmp	.+34     	; 0x230a <__stack+0x10b>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    22e8:	30 b3       	in	r19, 0x10	; 16
    22ea:	63 e0       	ldi	r22, 0x03	; 3
    22ec:	56 95       	lsr	r21
    22ee:	47 95       	ror	r20
    22f0:	6a 95       	dec	r22
    22f2:	e1 f7       	brne	.-8      	; 0x22ec <__stack+0xed>
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <__stack+0xff>
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	4a 95       	dec	r20
    2300:	e2 f7       	brpl	.-8      	; 0x22fa <__stack+0xfb>
    2302:	28 2f       	mov	r18, r24
    2304:	20 95       	com	r18
    2306:	23 23       	and	r18, r19
    2308:	20 bb       	out	0x10, r18	; 16
                                PORTB |= BM((pin & 0xF8) >> 3); 
    230a:	25 b1       	in	r18, 0x05	; 5
    230c:	82 2b       	or	r24, r18
    230e:	85 b9       	out	0x05, r24	; 5
    2310:	7a c0       	rjmp	.+244    	; 0x2406 <__stack+0x207>
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    2312:	9a 01       	movw	r18, r20
    2314:	27 70       	andi	r18, 0x07	; 7
    2316:	30 70       	andi	r19, 0x00	; 0
    2318:	22 30       	cpi	r18, 0x02	; 2
    231a:	31 05       	cpc	r19, r1
    231c:	a9 f1       	breq	.+106    	; 0x2388 <__stack+0x189>
    231e:	23 30       	cpi	r18, 0x03	; 3
    2320:	31 05       	cpc	r19, r1
    2322:	44 f4       	brge	.+16     	; 0x2334 <__stack+0x135>
    2324:	21 15       	cp	r18, r1
    2326:	31 05       	cpc	r19, r1
    2328:	89 f0       	breq	.+34     	; 0x234c <__stack+0x14d>
    232a:	21 30       	cpi	r18, 0x01	; 1
    232c:	31 05       	cpc	r19, r1
    232e:	09 f0       	breq	.+2      	; 0x2332 <__stack+0x133>
    2330:	6d c0       	rjmp	.+218    	; 0x240c <__stack+0x20d>
    2332:	1c c0       	rjmp	.+56     	; 0x236c <__stack+0x16d>
    2334:	24 30       	cpi	r18, 0x04	; 4
    2336:	31 05       	cpc	r19, r1
    2338:	09 f4       	brne	.+2      	; 0x233c <__stack+0x13d>
    233a:	46 c0       	rjmp	.+140    	; 0x23c8 <__stack+0x1c9>
    233c:	24 30       	cpi	r18, 0x04	; 4
    233e:	31 05       	cpc	r19, r1
    2340:	9c f1       	brlt	.+102    	; 0x23a8 <__stack+0x1a9>
    2342:	25 30       	cpi	r18, 0x05	; 5
    2344:	31 05       	cpc	r19, r1
    2346:	09 f0       	breq	.+2      	; 0x234a <__stack+0x14b>
    2348:	61 c0       	rjmp	.+194    	; 0x240c <__stack+0x20d>
    234a:	4e c0       	rjmp	.+156    	; 0x23e8 <__stack+0x1e9>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    234c:	21 b1       	in	r18, 0x01	; 1
    234e:	33 e0       	ldi	r19, 0x03	; 3
    2350:	56 95       	lsr	r21
    2352:	47 95       	ror	r20
    2354:	3a 95       	dec	r19
    2356:	e1 f7       	brne	.-8      	; 0x2350 <__stack+0x151>
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <__stack+0x163>
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	4a 95       	dec	r20
    2364:	e2 f7       	brpl	.-8      	; 0x235e <__stack+0x15f>
    2366:	28 2b       	or	r18, r24
    2368:	21 b9       	out	0x01, r18	; 1
    236a:	4d c0       	rjmp	.+154    	; 0x2406 <__stack+0x207>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    236c:	84 b1       	in	r24, 0x04	; 4
    236e:	93 e0       	ldi	r25, 0x03	; 3
    2370:	56 95       	lsr	r21
    2372:	47 95       	ror	r20
    2374:	9a 95       	dec	r25
    2376:	e1 f7       	brne	.-8      	; 0x2370 <__stack+0x171>
    2378:	02 c0       	rjmp	.+4      	; 0x237e <__stack+0x17f>
    237a:	22 0f       	add	r18, r18
    237c:	33 1f       	adc	r19, r19
    237e:	4a 95       	dec	r20
    2380:	e2 f7       	brpl	.-8      	; 0x237a <__stack+0x17b>
    2382:	82 2b       	or	r24, r18
    2384:	84 b9       	out	0x04, r24	; 4
    2386:	3f c0       	rjmp	.+126    	; 0x2406 <__stack+0x207>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    2388:	27 b1       	in	r18, 0x07	; 7
    238a:	b3 e0       	ldi	r27, 0x03	; 3
    238c:	56 95       	lsr	r21
    238e:	47 95       	ror	r20
    2390:	ba 95       	dec	r27
    2392:	e1 f7       	brne	.-8      	; 0x238c <__stack+0x18d>
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	02 c0       	rjmp	.+4      	; 0x239e <__stack+0x19f>
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	4a 95       	dec	r20
    23a0:	e2 f7       	brpl	.-8      	; 0x239a <__stack+0x19b>
    23a2:	28 2b       	or	r18, r24
    23a4:	27 b9       	out	0x07, r18	; 7
    23a6:	2f c0       	rjmp	.+94     	; 0x2406 <__stack+0x207>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    23a8:	2a b1       	in	r18, 0x0a	; 10
    23aa:	a3 e0       	ldi	r26, 0x03	; 3
    23ac:	56 95       	lsr	r21
    23ae:	47 95       	ror	r20
    23b0:	aa 95       	dec	r26
    23b2:	e1 f7       	brne	.-8      	; 0x23ac <__stack+0x1ad>
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <__stack+0x1bf>
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	4a 95       	dec	r20
    23c0:	e2 f7       	brpl	.-8      	; 0x23ba <__stack+0x1bb>
    23c2:	28 2b       	or	r18, r24
    23c4:	2a b9       	out	0x0a, r18	; 10
    23c6:	1f c0       	rjmp	.+62     	; 0x2406 <__stack+0x207>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    23c8:	2d b1       	in	r18, 0x0d	; 13
    23ca:	f3 e0       	ldi	r31, 0x03	; 3
    23cc:	56 95       	lsr	r21
    23ce:	47 95       	ror	r20
    23d0:	fa 95       	dec	r31
    23d2:	e1 f7       	brne	.-8      	; 0x23cc <__stack+0x1cd>
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <__stack+0x1df>
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	4a 95       	dec	r20
    23e0:	e2 f7       	brpl	.-8      	; 0x23da <__stack+0x1db>
    23e2:	28 2b       	or	r18, r24
    23e4:	2d b9       	out	0x0d, r18	; 13
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <__stack+0x207>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    23e8:	20 b3       	in	r18, 0x10	; 16
    23ea:	e3 e0       	ldi	r30, 0x03	; 3
    23ec:	56 95       	lsr	r21
    23ee:	47 95       	ror	r20
    23f0:	ea 95       	dec	r30
    23f2:	e1 f7       	brne	.-8      	; 0x23ec <__stack+0x1ed>
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <__stack+0x1ff>
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	4a 95       	dec	r20
    2400:	e2 f7       	brpl	.-8      	; 0x23fa <__stack+0x1fb>
    2402:	28 2b       	or	r18, r24
    2404:	20 bb       	out	0x10, r18	; 16
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	08 95       	ret
    240c:	8f ef       	ldi	r24, 0xFF	; 255
    240e:	9f ef       	ldi	r25, 0xFF	; 255
                        default: return -1;
                }
        }
        return 1;
}
    2410:	08 95       	ret

00002412 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    2412:	88 23       	and	r24, r24
    2414:	19 f0       	breq	.+6      	; 0x241c <nrk_get_button+0xa>
    2416:	8f ef       	ldi	r24, 0xFF	; 255
    2418:	9f ef       	ldi	r25, 0xFF	; 255
    241a:	08 95       	ret
	 return( !(PINA & BM(BUTTON))); 
    241c:	80 b1       	in	r24, 0x00	; 0
    241e:	99 27       	eor	r25, r25
    2420:	87 fd       	sbrc	r24, 7
    2422:	90 95       	com	r25
    2424:	80 95       	com	r24
    2426:	90 95       	com	r25
    2428:	88 27       	eor	r24, r24
    242a:	99 0f       	add	r25, r25
    242c:	88 1f       	adc	r24, r24
    242e:	99 27       	eor	r25, r25
	} 
return -1;
}
    2430:	08 95       	ret

00002432 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	11 f4       	brne	.+4      	; 0x243a <nrk_led_toggle+0x8>
    2436:	84 e1       	ldi	r24, 0x14	; 20
    2438:	09 c0       	rjmp	.+18     	; 0x244c <nrk_led_toggle+0x1a>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    243a:	81 30       	cpi	r24, 0x01	; 1
    243c:	91 05       	cpc	r25, r1
    243e:	11 f4       	brne	.+4      	; 0x2444 <nrk_led_toggle+0x12>
    2440:	8c e1       	ldi	r24, 0x1C	; 28
    2442:	04 c0       	rjmp	.+8      	; 0x244c <nrk_led_toggle+0x1a>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    2444:	82 30       	cpi	r24, 0x02	; 2
    2446:	91 05       	cpc	r25, r1
    2448:	31 f4       	brne	.+12     	; 0x2456 <nrk_led_toggle+0x24>
    244a:	84 e2       	ldi	r24, 0x24	; 36
    244c:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <nrk_gpio_toggle>
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	08 95       	ret
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    2456:	03 97       	sbiw	r24, 0x03	; 3
    2458:	19 f0       	breq	.+6      	; 0x2460 <nrk_led_toggle+0x2e>
    245a:	8f ef       	ldi	r24, 0xFF	; 255
    245c:	9f ef       	ldi	r25, 0xFF	; 255
    245e:	08 95       	ret
    2460:	8c e2       	ldi	r24, 0x2C	; 44
    2462:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <nrk_gpio_toggle>
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
return -1;
}
    246a:	08 95       	ret

0000246c <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	11 f4       	brne	.+4      	; 0x2474 <nrk_led_clr+0x8>
    2470:	84 e1       	ldi	r24, 0x14	; 20
    2472:	09 c0       	rjmp	.+18     	; 0x2486 <nrk_led_clr+0x1a>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    2474:	81 30       	cpi	r24, 0x01	; 1
    2476:	91 05       	cpc	r25, r1
    2478:	11 f4       	brne	.+4      	; 0x247e <nrk_led_clr+0x12>
    247a:	8c e1       	ldi	r24, 0x1C	; 28
    247c:	04 c0       	rjmp	.+8      	; 0x2486 <nrk_led_clr+0x1a>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    247e:	82 30       	cpi	r24, 0x02	; 2
    2480:	91 05       	cpc	r25, r1
    2482:	31 f4       	brne	.+12     	; 0x2490 <nrk_led_clr+0x24>
    2484:	84 e2       	ldi	r24, 0x24	; 36
    2486:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <nrk_gpio_set>
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	08 95       	ret
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    2490:	03 97       	sbiw	r24, 0x03	; 3
    2492:	19 f0       	breq	.+6      	; 0x249a <nrk_led_clr+0x2e>
    2494:	8f ef       	ldi	r24, 0xFF	; 255
    2496:	9f ef       	ldi	r25, 0xFF	; 255
    2498:	08 95       	ret
    249a:	8c e2       	ldi	r24, 0x2C	; 44
    249c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <nrk_gpio_set>
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
return -1;
}
    24a4:	08 95       	ret

000024a6 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	11 f4       	brne	.+4      	; 0x24ae <nrk_led_set+0x8>
    24aa:	84 e1       	ldi	r24, 0x14	; 20
    24ac:	09 c0       	rjmp	.+18     	; 0x24c0 <nrk_led_set+0x1a>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    24ae:	81 30       	cpi	r24, 0x01	; 1
    24b0:	91 05       	cpc	r25, r1
    24b2:	11 f4       	brne	.+4      	; 0x24b8 <nrk_led_set+0x12>
    24b4:	8c e1       	ldi	r24, 0x1C	; 28
    24b6:	04 c0       	rjmp	.+8      	; 0x24c0 <nrk_led_set+0x1a>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    24b8:	82 30       	cpi	r24, 0x02	; 2
    24ba:	91 05       	cpc	r25, r1
    24bc:	31 f4       	brne	.+12     	; 0x24ca <nrk_led_set+0x24>
    24be:	84 e2       	ldi	r24, 0x24	; 36
    24c0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <nrk_gpio_clr>
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	08 95       	ret
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    24ca:	03 97       	sbiw	r24, 0x03	; 3
    24cc:	19 f0       	breq	.+6      	; 0x24d4 <nrk_led_set+0x2e>
    24ce:	8f ef       	ldi	r24, 0xFF	; 255
    24d0:	9f ef       	ldi	r25, 0xFF	; 255
    24d2:	08 95       	ret
    24d4:	8c e2       	ldi	r24, 0x2C	; 44
    24d6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <nrk_gpio_clr>
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
return -1;
}
    24de:	08 95       	ret

000024e0 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    24e0:	88 23       	and	r24, r24
    24e2:	19 f0       	breq	.+6      	; 0x24ea <nrk_gpio_pullups+0xa>
    24e4:	85 b7       	in	r24, 0x35	; 53
    24e6:	8f 7e       	andi	r24, 0xEF	; 239
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    24ea:	85 b7       	in	r24, 0x35	; 53
    24ec:	80 61       	ori	r24, 0x10	; 16
    24ee:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	08 95       	ret

000024f6 <putc0>:
PORTF &= ~BM(pin);
}
*/

void putc0(char x)
{
    24f6:	98 2f       	mov	r25, r24
     UART0_WAIT_AND_SEND(x);
    24f8:	80 91 c0 00 	lds	r24, 0x00C0
    24fc:	85 ff       	sbrs	r24, 5
    24fe:	fc cf       	rjmp	.-8      	; 0x24f8 <putc0+0x2>
    2500:	80 91 c0 00 	lds	r24, 0x00C0
    2504:	8f 7d       	andi	r24, 0xDF	; 223
    2506:	80 93 c0 00 	sts	0x00C0, r24
    250a:	90 93 c6 00 	sts	0x00C6, r25
    250e:	08 95       	ret

00002510 <putc1>:
}

void putc1(char x)
{
    2510:	98 2f       	mov	r25, r24
     UART1_WAIT_AND_SEND(x);
    2512:	80 91 c8 00 	lds	r24, 0x00C8
    2516:	85 ff       	sbrs	r24, 5
    2518:	fc cf       	rjmp	.-8      	; 0x2512 <putc1+0x2>
    251a:	90 93 ce 00 	sts	0x00CE, r25
    251e:	08 95       	ret

00002520 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2520:	29 2f       	mov	r18, r25
    2522:	33 27       	eor	r19, r19
    2524:	20 93 c5 00 	sts	0x00C5, r18
    2528:	80 93 c4 00 	sts	0x00C4, r24
    252c:	86 e0       	ldi	r24, 0x06	; 6
    252e:	80 93 c2 00 	sts	0x00C2, r24
    2532:	e1 ec       	ldi	r30, 0xC1	; 193
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	8b 7f       	andi	r24, 0xFB	; 251
    253a:	80 83       	st	Z, r24
    253c:	a0 ec       	ldi	r26, 0xC0	; 192
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	8c 91       	ld	r24, X
    2542:	82 60       	ori	r24, 0x02	; 2
    2544:	8c 93       	st	X, r24
ENABLE_UART0();
    2546:	80 81       	ld	r24, Z
    2548:	88 61       	ori	r24, 0x18	; 24
    254a:	80 83       	st	Z, r24
    254c:	08 95       	ret

0000254e <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    254e:	29 2f       	mov	r18, r25
    2550:	33 27       	eor	r19, r19
    2552:	20 93 cd 00 	sts	0x00CD, r18
    2556:	80 93 cc 00 	sts	0x00CC, r24
    255a:	86 e0       	ldi	r24, 0x06	; 6
    255c:	80 93 ca 00 	sts	0x00CA, r24
    2560:	e9 ec       	ldi	r30, 0xC9	; 201
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	8b 7f       	andi	r24, 0xFB	; 251
    2568:	80 83       	st	Z, r24
    256a:	a8 ec       	ldi	r26, 0xC8	; 200
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	8c 91       	ld	r24, X
    2570:	82 60       	ori	r24, 0x02	; 2
    2572:	8c 93       	st	X, r24
ENABLE_UART1();
    2574:	80 81       	ld	r24, Z
    2576:	88 61       	ori	r24, 0x18	; 24
    2578:	80 83       	st	Z, r24
    257a:	08 95       	ret

0000257c <getc0>:


/* get one char from uart */
char getc0(void){
	unsigned char tmp;
	UART0_WAIT_AND_RECEIVE(tmp);
    257c:	80 91 c0 00 	lds	r24, 0x00C0
    2580:	87 ff       	sbrs	r24, 7
    2582:	fc cf       	rjmp	.-8      	; 0x257c <getc0>
    2584:	80 91 c0 00 	lds	r24, 0x00C0
    2588:	8f 77       	andi	r24, 0x7F	; 127
    258a:	80 93 c0 00 	sts	0x00C0, r24
    258e:	80 91 c6 00 	lds	r24, 0x00C6
	return tmp;
}
    2592:	99 27       	eor	r25, r25
    2594:	08 95       	ret

00002596 <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    2596:	ef 92       	push	r14
    2598:	ff 92       	push	r15
    259a:	0f 93       	push	r16
    259c:	1f 93       	push	r17

  setup_uart1(baudrate);
    259e:	0e 94 a7 12 	call	0x254e	; 0x254e <setup_uart1>
  //setup_uart0(baudrate);

  stdout = fdevopen( (void *)putc1, (void *)getc1);
    25a2:	04 e7       	ldi	r16, 0x74	; 116
    25a4:	1e e0       	ldi	r17, 0x0E	; 14
    25a6:	58 e8       	ldi	r21, 0x88	; 136
    25a8:	e5 2e       	mov	r14, r21
    25aa:	52 e1       	ldi	r21, 0x12	; 18
    25ac:	f5 2e       	mov	r15, r21
    25ae:	b8 01       	movw	r22, r16
    25b0:	c7 01       	movw	r24, r14
    25b2:	0e 94 2b 2c 	call	0x5856	; 0x5856 <fdevopen>
    25b6:	90 93 41 08 	sts	0x0841, r25
    25ba:	80 93 40 08 	sts	0x0840, r24
  stdin = fdevopen( (void *)putc1, (void *)getc1);
    25be:	b8 01       	movw	r22, r16
    25c0:	c7 01       	movw	r24, r14
    25c2:	0e 94 2b 2c 	call	0x5856	; 0x5856 <fdevopen>
    25c6:	90 93 3f 08 	sts	0x083F, r25
    25ca:	80 93 3e 08 	sts	0x083E, r24
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	ff 90       	pop	r15
    25d4:	ef 90       	pop	r14
    25d6:	08 95       	ret

000025d8 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    25d8:	cf 93       	push	r28
    25da:	df 93       	push	r29
    25dc:	ec 01       	movw	r28, r24
    25de:	07 c0       	rjmp	.+14     	; 0x25ee <nrk_kprintf+0x16>
 char c;
   while((c=pgm_read_byte(addr++)))
        putchar(c);
    25e0:	60 91 40 08 	lds	r22, 0x0840
    25e4:	70 91 41 08 	lds	r23, 0x0841
    25e8:	99 27       	eor	r25, r25
    25ea:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <fputc>
    25ee:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
    25f0:	21 96       	adiw	r28, 0x01	; 1
    25f2:	84 91       	lpm	r24, Z
    25f4:	88 23       	and	r24, r24
    25f6:	a1 f7       	brne	.-24     	; 0x25e0 <nrk_kprintf+0x8>
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	08 95       	ret

000025fe <halWait>:
	...
#include <nrk_events.h>

#ifndef MAX_RX_UART_BUF
#define MAX_RX_UART_BUF    16
#endif

    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	d1 f7       	brne	.-12     	; 0x25fe <halWait>
    260a:	08 95       	ret

0000260c <read_eeprom_current_image_checksum>:
ENABLE_UART1_RX_INT();
//sei();
}

char getc1()
{
    260c:	fc 01       	movw	r30, r24

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    260e:	a7 e0       	ldi	r26, 0x07	; 7
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__eeprom_read_byte_1F2021>
    2616:	80 2d       	mov	r24, r0
char tmp;
    2618:	80 83       	st	Z, r24

if(uart_rx_buf_start!=uart_rx_buf_end)
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	08 95       	ret

00002620 <write_eeprom_current_image_checksum>:
   {
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    2620:	fc 01       	movw	r30, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    2622:	80 81       	ld	r24, Z
    2624:	a7 e0       	ldi	r26, 0x07	; 7
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	08 2e       	mov	r0, r24
    262a:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__eeprom_write_byte_1F2021>
   if(uart_rx_buf_start==MAX_RX_UART_BUF) uart_rx_buf_start=0;
   return(tmp);
   }
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	08 95       	ret

00002634 <nrk_eeprom_read_byte>:

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    2634:	dc 01       	movw	r26, r24
    2636:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__eeprom_read_byte_1F2021>
    263a:	80 2d       	mov	r24, r0
*
*  This is the Open Source Version of Nano-RK included as part of a Dual
*  Licensing Model. If you are unsure which license to use please refer to:
*  http://www.nanork.org/nano-RK/wiki/Licensing
*
*  This program is free software: you can redistribute it and/or modify
    263c:	99 27       	eor	r25, r25
    263e:	08 95       	ret

00002640 <read_eeprom_mac_address>:
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
    2640:	fc 01       	movw	r30, r24
    2642:	a0 e0       	ldi	r26, 0x00	; 0
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__eeprom_read_byte_1F2021>
    264a:	40 2d       	mov	r20, r0
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*  Contributing Authors (specific to this file):
*  Anthony Rowe
    264c:	43 83       	std	Z+3, r20	; 0x03
    264e:	a1 e0       	ldi	r26, 0x01	; 1
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__eeprom_read_byte_1F2021>
    2656:	80 2d       	mov	r24, r0
*  Nuno Pereira
    2658:	82 83       	std	Z+2, r24	; 0x02
    265a:	a2 e0       	ldi	r26, 0x02	; 2
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__eeprom_read_byte_1F2021>
    2662:	30 2d       	mov	r19, r0
*  Zane Starr
    2664:	31 83       	std	Z+1, r19	; 0x01
    2666:	a3 e0       	ldi	r26, 0x03	; 3
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__eeprom_read_byte_1F2021>
    266e:	90 2d       	mov	r25, r0
*******************************************************************************/
    2670:	90 83       	st	Z, r25
    2672:	a4 e0       	ldi	r26, 0x04	; 4
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__eeprom_read_byte_1F2021>
    267a:	20 2d       	mov	r18, r0

#include <include.h>
#include <ulib.h>
    267c:	83 0f       	add	r24, r19
#include <stdio.h>
    267e:	84 0f       	add	r24, r20
#include <hal.h>
#include <hal_firefly2_2.h>
    2680:	89 0f       	add	r24, r25
    2682:	28 17       	cp	r18, r24
    2684:	19 f4       	brne	.+6      	; 0x268c <read_eeprom_mac_address+0x4c>
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	08 95       	ret
    268c:	8f ef       	ldi	r24, 0xFF	; 255
    268e:	9f ef       	ldi	r25, 0xFF	; 255
#include <avr/interrupt.h>
#include <nrk_pin_define.h>
#include <nrk_error.h>
    2690:	08 95       	ret

00002692 <read_eeprom_channel>:
#include <nrk_events.h>

#ifdef NANORK
    2692:	fc 01       	movw	r30, r24
    2694:	a5 e0       	ldi	r26, 0x05	; 5
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__eeprom_read_byte_1F2021>
    269c:	80 2d       	mov	r24, r0
#include <nrk_cfg.h>
    269e:	80 83       	st	Z, r24
#endif

    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	08 95       	ret

000026a6 <read_eeprom_load_img_pages>:
#ifndef MAX_RX_UART_BUF
#define MAX_RX_UART_BUF    16
#endif


uint8_t uart_rx_buf_start,uart_rx_buf_end;
    26a6:	fc 01       	movw	r30, r24
    26a8:	a6 e0       	ldi	r26, 0x06	; 6
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__eeprom_read_byte_1F2021>
    26b0:	80 2d       	mov	r24, r0
char uart_rx_buf[MAX_RX_UART_BUF];
    26b2:	80 83       	st	Z, r24
nrk_sig_t uart_rx_signal;

    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	08 95       	ret

000026ba <read_eeprom_aes_key>:
SIGNAL(USART1_RX_vect)
{
char c;
    26ba:	ac 01       	movw	r20, r24
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	d9 01       	movw	r26, r18
    26c2:	18 96       	adiw	r26, 0x08	; 8
    26c4:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__eeprom_read_byte_1F2021>
    26c8:	80 2d       	mov	r24, r0
uint8_t sig;
//cli();
DISABLE_UART1_RX_INT();
    26ca:	fa 01       	movw	r30, r20
    26cc:	e2 0f       	add	r30, r18
    26ce:	f3 1f       	adc	r31, r19
    26d0:	80 83       	st	Z, r24
    26d2:	2f 5f       	subi	r18, 0xFF	; 255
    26d4:	3f 4f       	sbci	r19, 0xFF	; 255

SIGNAL(USART1_RX_vect)
{
char c;
uint8_t sig;
//cli();
    26d6:	20 31       	cpi	r18, 0x10	; 16
    26d8:	31 05       	cpc	r19, r1
    26da:	91 f7       	brne	.-28     	; 0x26c0 <read_eeprom_aes_key+0x6>
DISABLE_UART1_RX_INT();
   UART1_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	08 95       	ret

000026e2 <nrk_eeprom_write_byte>:
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    26e2:	dc 01       	movw	r26, r24
    26e4:	06 2e       	mov	r0, r22
    26e6:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__eeprom_write_byte_1F2021>
    26ea:	08 95       	ret

000026ec <write_eeprom_load_img_pages>:
#include <nrk_cfg.h>
#endif

#ifdef NRK_UART_BUF
#include <nrk_events.h>

    26ec:	fc 01       	movw	r30, r24
    26ee:	80 81       	ld	r24, Z
    26f0:	a6 e0       	ldi	r26, 0x06	; 6
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	08 2e       	mov	r0, r24
    26f6:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__eeprom_write_byte_1F2021>
#ifndef MAX_RX_UART_BUF
#define MAX_RX_UART_BUF    16
#endif
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	08 95       	ret

00002700 <write_eeprom_aes_key>:
DISABLE_UART1_RX_INT();
   UART1_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
   if(uart_rx_buf_end==MAX_RX_UART_BUF) uart_rx_buf_end=0;
    2700:	ac 01       	movw	r20, r24
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	d9 01       	movw	r26, r18
    2708:	18 96       	adiw	r26, 0x08	; 8
    270a:	fa 01       	movw	r30, r20
    270c:	e2 0f       	add	r30, r18
    270e:	f3 1f       	adc	r31, r19
    2710:	80 81       	ld	r24, Z
    2712:	08 2e       	mov	r0, r24
    2714:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__eeprom_write_byte_1F2021>
    2718:	2f 5f       	subi	r18, 0xFF	; 255
    271a:	3f 4f       	sbci	r19, 0xFF	; 255
   nrk_event_signal(uart_rx_signal);
CLEAR_UART1_RX_INT();
    271c:	20 31       	cpi	r18, 0x10	; 16
    271e:	31 05       	cpc	r19, r1
    2720:	91 f7       	brne	.-28     	; 0x2706 <write_eeprom_aes_key+0x6>
ENABLE_UART1_RX_INT();
//sei();
}
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	08 95       	ret

00002728 <nrk_int_disable>:
#ifdef NRK_UART_BUF
#include <nrk_events.h>

#ifndef MAX_RX_UART_BUF
#define MAX_RX_UART_BUF    16
#endif
    2728:	f8 94       	cli
    272a:	08 95       	ret

0000272c <nrk_int_enable>:


uint8_t uart_rx_buf_start,uart_rx_buf_end;
char uart_rx_buf[MAX_RX_UART_BUF];
    272c:	78 94       	sei
    272e:	08 95       	ret

00002730 <nrk_version>:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
    2730:	85 e6       	ldi	r24, 0x65	; 101
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	08 95       	ret

00002736 <_nrk_timer_tick>:
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    2736:	0e 94 6e 24 	call	0x48dc	; 0x48dc <_nrk_scheduler>
    273a:	08 95       	ret

0000273c <nrk_TCB_init>:
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    273c:	ef 92       	push	r14
    273e:	ff 92       	push	r15
    2740:	0f 93       	push	r16
    2742:	1f 93       	push	r17
    2744:	cf 93       	push	r28
    2746:	df 93       	push	r29
    2748:	ec 01       	movw	r28, r24
    274a:	8b 01       	movw	r16, r22
    274c:	7a 01       	movw	r14, r20
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
    274e:	89 85       	ldd	r24, Y+9	; 0x09
    2750:	82 30       	cpi	r24, 0x02	; 2
    2752:	21 f0       	breq	.+8      	; 0x275c <nrk_TCB_init+0x20>
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2754:	80 91 04 08 	lds	r24, 0x0804
    2758:	88 83       	st	Y, r24
    275a:	01 c0       	rjmp	.+2      	; 0x275e <nrk_TCB_init+0x22>
                default: return -1;
    275c:	18 82       	st	Y, r1
        }
        return 1;
    275e:	80 91 04 08 	lds	r24, 0x0804
    2762:	85 30       	cpi	r24, 0x05	; 5
    2764:	20 f0       	brcs	.+8      	; 0x276e <nrk_TCB_init+0x32>
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	87 e0       	ldi	r24, 0x07	; 7
    276a:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_kernel_error_add>
}
    276e:	89 85       	ldd	r24, Y+9	; 0x09
    2770:	82 30       	cpi	r24, 0x02	; 2
    2772:	29 f0       	breq	.+10     	; 0x277e <nrk_TCB_init+0x42>
    2774:	80 91 04 08 	lds	r24, 0x0804
    2778:	8f 5f       	subi	r24, 0xFF	; 255
    277a:	80 93 04 08 	sts	0x0804, r24

    277e:	80 91 04 08 	lds	r24, 0x0804
    2782:	88 23       	and	r24, r24
    2784:	19 f4       	brne	.+6      	; 0x278c <nrk_TCB_init+0x50>
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	80 93 04 08 	sts	0x0804, r24
int8_t nrk_gpio_get(uint8_t pin)
{
    278c:	88 81       	ld	r24, Y
    278e:	99 27       	eor	r25, r25
    2790:	87 fd       	sbrc	r24, 7
    2792:	90 95       	com	r25
    2794:	fc 01       	movw	r30, r24
    2796:	45 e0       	ldi	r20, 0x05	; 5
    2798:	ee 0f       	add	r30, r30
    279a:	ff 1f       	adc	r31, r31
    279c:	4a 95       	dec	r20
    279e:	e1 f7       	brne	.-8      	; 0x2798 <nrk_TCB_init+0x5c>
    27a0:	e8 0f       	add	r30, r24
    27a2:	f9 1f       	adc	r31, r25
    27a4:	e6 5a       	subi	r30, 0xA6	; 166
    27a6:	f8 4f       	sbci	r31, 0xF8	; 248
    27a8:	11 83       	std	Z+1, r17	; 0x01
    27aa:	00 83       	st	Z, r16
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    27ac:	88 81       	ld	r24, Y
    27ae:	99 27       	eor	r25, r25
    27b0:	87 fd       	sbrc	r24, 7
    27b2:	90 95       	com	r25
    27b4:	fc 01       	movw	r30, r24
    27b6:	35 e0       	ldi	r19, 0x05	; 5
    27b8:	ee 0f       	add	r30, r30
    27ba:	ff 1f       	adc	r31, r31
    27bc:	3a 95       	dec	r19
    27be:	e1 f7       	brne	.-8      	; 0x27b8 <nrk_TCB_init+0x7c>
    27c0:	e8 0f       	add	r30, r24
    27c2:	f9 1f       	adc	r31, r25
    27c4:	e6 5a       	subi	r30, 0xA6	; 166
    27c6:	f8 4f       	sbci	r31, 0xF8	; 248
    27c8:	88 85       	ldd	r24, Y+8	; 0x08
    27ca:	82 87       	std	Z+10, r24	; 0x0a
        switch (pin & 0x07) {
    27cc:	88 81       	ld	r24, Y
    27ce:	99 27       	eor	r25, r25
    27d0:	87 fd       	sbrc	r24, 7
    27d2:	90 95       	com	r25
    27d4:	fc 01       	movw	r30, r24
    27d6:	25 e0       	ldi	r18, 0x05	; 5
    27d8:	ee 0f       	add	r30, r30
    27da:	ff 1f       	adc	r31, r31
    27dc:	2a 95       	dec	r18
    27de:	e1 f7       	brne	.-8      	; 0x27d8 <nrk_TCB_init+0x9c>
    27e0:	e8 0f       	add	r30, r24
    27e2:	f9 1f       	adc	r31, r25
    27e4:	e6 5a       	subi	r30, 0xA6	; 166
    27e6:	f8 4f       	sbci	r31, 0xF8	; 248
    27e8:	83 e0       	ldi	r24, 0x03	; 3
    27ea:	81 87       	std	Z+9, r24	; 0x09
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    27ec:	28 81       	ld	r18, Y
    27ee:	82 2f       	mov	r24, r18
    27f0:	99 27       	eor	r25, r25
    27f2:	87 fd       	sbrc	r24, 7
    27f4:	90 95       	com	r25
    27f6:	fc 01       	movw	r30, r24
    27f8:	05 e0       	ldi	r16, 0x05	; 5
    27fa:	ee 0f       	add	r30, r30
    27fc:	ff 1f       	adc	r31, r31
    27fe:	0a 95       	dec	r16
    2800:	e1 f7       	brne	.-8      	; 0x27fa <nrk_TCB_init+0xbe>
    2802:	e8 0f       	add	r30, r24
    2804:	f9 1f       	adc	r31, r25
    2806:	e6 5a       	subi	r30, 0xA6	; 166
    2808:	f8 4f       	sbci	r31, 0xF8	; 248
    280a:	20 87       	std	Z+8, r18	; 0x08
                case NRK_PORTB:
    280c:	88 81       	ld	r24, Y
    280e:	99 27       	eor	r25, r25
    2810:	87 fd       	sbrc	r24, 7
    2812:	90 95       	com	r25
    2814:	fc 01       	movw	r30, r24
    2816:	15 e0       	ldi	r17, 0x05	; 5
    2818:	ee 0f       	add	r30, r30
    281a:	ff 1f       	adc	r31, r31
    281c:	1a 95       	dec	r17
    281e:	e1 f7       	brne	.-8      	; 0x2818 <nrk_TCB_init+0xdc>
    2820:	e8 0f       	add	r30, r24
    2822:	f9 1f       	adc	r31, r25
    2824:	e6 5a       	subi	r30, 0xA6	; 166
    2826:	f8 4f       	sbci	r31, 0xF8	; 248
    2828:	15 82       	std	Z+5, r1	; 0x05
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    282a:	08 81       	ld	r16, Y
    282c:	11 27       	eor	r17, r17
    282e:	07 fd       	sbrc	r16, 7
    2830:	10 95       	com	r17
    2832:	2b 85       	ldd	r18, Y+11	; 0x0b
    2834:	3c 85       	ldd	r19, Y+12	; 0x0c
    2836:	4d 85       	ldd	r20, Y+13	; 0x0d
    2838:	5e 85       	ldd	r21, Y+14	; 0x0e
    283a:	6f 85       	ldd	r22, Y+15	; 0x0f
    283c:	78 89       	ldd	r23, Y+16	; 0x10
    283e:	89 89       	ldd	r24, Y+17	; 0x11
    2840:	9a 89       	ldd	r25, Y+18	; 0x12
    2842:	0e 94 89 22 	call	0x4512	; 0x4512 <_nrk_time_to_ticks>
    2846:	f8 01       	movw	r30, r16
    2848:	b5 e0       	ldi	r27, 0x05	; 5
    284a:	ee 0f       	add	r30, r30
    284c:	ff 1f       	adc	r31, r31
    284e:	ba 95       	dec	r27
    2850:	e1 f7       	brne	.-8      	; 0x284a <nrk_TCB_init+0x10e>
    2852:	e0 0f       	add	r30, r16
    2854:	f1 1f       	adc	r31, r17
    2856:	e6 5a       	subi	r30, 0xA6	; 166
    2858:	f8 4f       	sbci	r31, 0xF8	; 248
    285a:	94 8f       	std	Z+28, r25	; 0x1c
    285c:	83 8f       	std	Z+27, r24	; 0x1b
                case NRK_PORTC:
    285e:	08 81       	ld	r16, Y
    2860:	11 27       	eor	r17, r17
    2862:	07 fd       	sbrc	r16, 7
    2864:	10 95       	com	r17
    2866:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2868:	3c 8d       	ldd	r19, Y+28	; 0x1c
    286a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    286c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    286e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2870:	78 a1       	ldd	r23, Y+32	; 0x20
    2872:	89 a1       	ldd	r24, Y+33	; 0x21
    2874:	9a a1       	ldd	r25, Y+34	; 0x22
    2876:	0e 94 89 22 	call	0x4512	; 0x4512 <_nrk_time_to_ticks>
    287a:	f8 01       	movw	r30, r16
    287c:	a5 e0       	ldi	r26, 0x05	; 5
    287e:	ee 0f       	add	r30, r30
    2880:	ff 1f       	adc	r31, r31
    2882:	aa 95       	dec	r26
    2884:	e1 f7       	brne	.-8      	; 0x287e <nrk_TCB_init+0x142>
    2886:	e0 0f       	add	r30, r16
    2888:	f1 1f       	adc	r31, r17
    288a:	e6 5a       	subi	r30, 0xA6	; 166
    288c:	f8 4f       	sbci	r31, 0xF8	; 248
    288e:	96 8b       	std	Z+22, r25	; 0x16
    2890:	85 8b       	std	Z+21, r24	; 0x15
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    2892:	88 81       	ld	r24, Y
    2894:	99 27       	eor	r25, r25
    2896:	87 fd       	sbrc	r24, 7
    2898:	90 95       	com	r25
    289a:	fc 01       	movw	r30, r24
    289c:	75 e0       	ldi	r23, 0x05	; 5
    289e:	ee 0f       	add	r30, r30
    28a0:	ff 1f       	adc	r31, r31
    28a2:	7a 95       	dec	r23
    28a4:	e1 f7       	brne	.-8      	; 0x289e <nrk_TCB_init+0x162>
    28a6:	e8 0f       	add	r30, r24
    28a8:	f9 1f       	adc	r31, r25
    28aa:	e6 5a       	subi	r30, 0xA6	; 166
    28ac:	f8 4f       	sbci	r31, 0xF8	; 248
    28ae:	85 89       	ldd	r24, Z+21	; 0x15
    28b0:	96 89       	ldd	r25, Z+22	; 0x16
    28b2:	23 8d       	ldd	r18, Z+27	; 0x1b
    28b4:	34 8d       	ldd	r19, Z+28	; 0x1c
    28b6:	82 0f       	add	r24, r18
    28b8:	93 1f       	adc	r25, r19
    28ba:	90 8f       	std	Z+24, r25	; 0x18
    28bc:	87 8b       	std	Z+23, r24	; 0x17
                case NRK_PORTD:
    28be:	08 81       	ld	r16, Y
    28c0:	11 27       	eor	r17, r17
    28c2:	07 fd       	sbrc	r16, 7
    28c4:	10 95       	com	r17
    28c6:	2b 89       	ldd	r18, Y+19	; 0x13
    28c8:	3c 89       	ldd	r19, Y+20	; 0x14
    28ca:	4d 89       	ldd	r20, Y+21	; 0x15
    28cc:	5e 89       	ldd	r21, Y+22	; 0x16
    28ce:	6f 89       	ldd	r22, Y+23	; 0x17
    28d0:	78 8d       	ldd	r23, Y+24	; 0x18
    28d2:	89 8d       	ldd	r24, Y+25	; 0x19
    28d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28d6:	0e 94 89 22 	call	0x4512	; 0x4512 <_nrk_time_to_ticks>
    28da:	f8 01       	movw	r30, r16
    28dc:	65 e0       	ldi	r22, 0x05	; 5
    28de:	ee 0f       	add	r30, r30
    28e0:	ff 1f       	adc	r31, r31
    28e2:	6a 95       	dec	r22
    28e4:	e1 f7       	brne	.-8      	; 0x28de <nrk_TCB_init+0x1a2>
    28e6:	e0 0f       	add	r30, r16
    28e8:	f1 1f       	adc	r31, r17
    28ea:	e6 5a       	subi	r30, 0xA6	; 166
    28ec:	f8 4f       	sbci	r31, 0xF8	; 248
    28ee:	96 8f       	std	Z+30, r25	; 0x1e
    28f0:	85 8f       	std	Z+29, r24	; 0x1d
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    28f2:	88 81       	ld	r24, Y
    28f4:	99 27       	eor	r25, r25
    28f6:	87 fd       	sbrc	r24, 7
    28f8:	90 95       	com	r25
    28fa:	fc 01       	movw	r30, r24
    28fc:	55 e0       	ldi	r21, 0x05	; 5
    28fe:	ee 0f       	add	r30, r30
    2900:	ff 1f       	adc	r31, r31
    2902:	5a 95       	dec	r21
    2904:	e1 f7       	brne	.-8      	; 0x28fe <nrk_TCB_init+0x1c2>
    2906:	e8 0f       	add	r30, r24
    2908:	f9 1f       	adc	r31, r25
    290a:	e6 5a       	subi	r30, 0xA6	; 166
    290c:	f8 4f       	sbci	r31, 0xF8	; 248
    290e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2910:	96 8d       	ldd	r25, Z+30	; 0x1e
    2912:	92 8f       	std	Z+26, r25	; 0x1a
    2914:	81 8f       	std	Z+25, r24	; 0x19
                case NRK_PORTE:
    2916:	88 81       	ld	r24, Y
    2918:	99 27       	eor	r25, r25
    291a:	87 fd       	sbrc	r24, 7
    291c:	90 95       	com	r25
    291e:	fc 01       	movw	r30, r24
    2920:	45 e0       	ldi	r20, 0x05	; 5
    2922:	ee 0f       	add	r30, r30
    2924:	ff 1f       	adc	r31, r31
    2926:	4a 95       	dec	r20
    2928:	e1 f7       	brne	.-8      	; 0x2922 <nrk_TCB_init+0x1e6>
    292a:	e8 0f       	add	r30, r24
    292c:	f9 1f       	adc	r31, r25
    292e:	e6 5a       	subi	r30, 0xA6	; 166
    2930:	f8 4f       	sbci	r31, 0xF8	; 248
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	90 a3       	std	Z+32, r25	; 0x20
    2938:	87 8f       	std	Z+31, r24	; 0x1f
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    293a:	88 81       	ld	r24, Y
    293c:	99 27       	eor	r25, r25
    293e:	87 fd       	sbrc	r24, 7
    2940:	90 95       	com	r25
    2942:	fc 01       	movw	r30, r24
    2944:	35 e0       	ldi	r19, 0x05	; 5
    2946:	ee 0f       	add	r30, r30
    2948:	ff 1f       	adc	r31, r31
    294a:	3a 95       	dec	r19
    294c:	e1 f7       	brne	.-8      	; 0x2946 <nrk_TCB_init+0x20a>
    294e:	e8 0f       	add	r30, r24
    2950:	f9 1f       	adc	r31, r25
    2952:	e6 5a       	subi	r30, 0xA6	; 166
    2954:	f8 4f       	sbci	r31, 0xF8	; 248
    2956:	f3 82       	std	Z+3, r15	; 0x03
    2958:	e2 82       	std	Z+2, r14	; 0x02
                case NRK_PORTF:
    295a:	88 81       	ld	r24, Y
    295c:	99 27       	eor	r25, r25
    295e:	87 fd       	sbrc	r24, 7
    2960:	90 95       	com	r25
    2962:	fc 01       	movw	r30, r24
    2964:	25 e0       	ldi	r18, 0x05	; 5
    2966:	ee 0f       	add	r30, r30
    2968:	ff 1f       	adc	r31, r31
    296a:	2a 95       	dec	r18
    296c:	e1 f7       	brne	.-8      	; 0x2966 <nrk_TCB_init+0x22a>
    296e:	e8 0f       	add	r30, r24
    2970:	f9 1f       	adc	r31, r25
    2972:	e6 5a       	subi	r30, 0xA6	; 166
    2974:	f8 4f       	sbci	r31, 0xF8	; 248
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	84 87       	std	Z+12, r24	; 0x0c
        }
        return 1;
}

int8_t nrk_gpio_toggle(uint8_t pin)
{
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	ff 90       	pop	r15
    2988:	ef 90       	pop	r14
    298a:	08 95       	ret

0000298c <nrk_start>:


//-------------------------------
// Port F
NRK_PIN( ADC_INPUT_0, ADC_INPUT_0, NRK_PORTF )
NRK_PIN( ADC_INPUT_1, ADC_INPUT_1, NRK_PORTF )
    298c:	8f 92       	push	r8
    298e:	9f 92       	push	r9
    2990:	af 92       	push	r10
    2992:	bf 92       	push	r11
    2994:	cf 92       	push	r12
    2996:	df 92       	push	r13
    2998:	ef 92       	push	r14
    299a:	ff 92       	push	r15
    299c:	0f 93       	push	r16
    299e:	1f 93       	push	r17
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	62 e6       	ldi	r22, 0x62	; 98
    29a6:	a6 2e       	mov	r10, r22
    29a8:	67 e0       	ldi	r22, 0x07	; 7
    29aa:	b6 2e       	mov	r11, r22
    29ac:	cc 24       	eor	r12, r12
    29ae:	dd 24       	eor	r13, r13
        MCUCR |= BM(PUD); 
        DDRB  = BM(MOSI) | BM(SCK);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
        DDRC  = BM(CSN); 
        PORTC = BM(CSN); 
        DDRE  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    29b0:	45 01       	movw	r8, r10


//-------------------------------
// Port F
NRK_PIN( ADC_INPUT_0, ADC_INPUT_0, NRK_PORTF )
NRK_PIN( ADC_INPUT_1, ADC_INPUT_1, NRK_PORTF )
    29b2:	ec 2c       	mov	r14, r12
void PORT_INIT(void) 
{
        MCUCR |= BM(PUD); 
        DDRB  = BM(MOSI) | BM(SCK);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
        DDRC  = BM(CSN); 
    29b4:	f5 01       	movw	r30, r10
    29b6:	f0 80       	ld	r15, Z
        PORTC = BM(CSN); 
        DDRE  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    29b8:	ff ef       	ldi	r31, 0xFF	; 255
    29ba:	ff 16       	cp	r15, r31
    29bc:	91 f0       	breq	.+36     	; 0x29e2 <nrk_start+0x56>
    29be:	e4 01       	movw	r28, r8
    29c0:	00 e0       	ldi	r16, 0x00	; 0
    29c2:	10 e0       	ldi	r17, 0x00	; 0
        DDRD  = BM(UART1_TXD) | BM(DEBUG_2) | BM(DEBUG_3); 
        PORTE  = BM(UART0_TXD) | BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
        DDRA  = BM(VREG_EN) | BM(RESET_N) | BM(DEBUG_0) | BM(DEBUG_1); 
        PORTA = BM(RESET_N); 
    29c4:	e0 16       	cp	r14, r16
    29c6:	39 f0       	breq	.+14     	; 0x29d6 <nrk_start+0x4a>
    29c8:	88 81       	ld	r24, Y
    29ca:	f8 16       	cp	r15, r24
    29cc:	21 f4       	brne	.+8      	; 0x29d6 <nrk_start+0x4a>
} 

    29ce:	6f 2d       	mov	r22, r15
    29d0:	85 e0       	ldi	r24, 0x05	; 5
    29d2:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_kernel_error_add>
    29d6:	0f 5f       	subi	r16, 0xFF	; 255
    29d8:	1f 4f       	sbci	r17, 0xFF	; 255
    29da:	a1 96       	adiw	r28, 0x21	; 33
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
        DDRC  = BM(CSN); 
        PORTC = BM(CSN); 
        DDRE  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
        DDRD  = BM(UART1_TXD) | BM(DEBUG_2) | BM(DEBUG_3); 
        PORTE  = BM(UART0_TXD) | BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    29dc:	05 30       	cpi	r16, 0x05	; 5
    29de:	11 05       	cpc	r17, r1
    29e0:	89 f7       	brne	.-30     	; 0x29c4 <nrk_start+0x38>
    29e2:	08 94       	sec
    29e4:	c1 1c       	adc	r12, r1
    29e6:	d1 1c       	adc	r13, r1
    29e8:	81 e2       	ldi	r24, 0x21	; 33
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	a8 0e       	add	r10, r24
    29ee:	b9 1e       	adc	r11, r25
NRK_PIN( ADC_INPUT_7, ADC_INPUT_7, NRK_PORTF )

void PORT_INIT(void) 
{
        MCUCR |= BM(PUD); 
        DDRB  = BM(MOSI) | BM(SCK);  
    29f0:	95 e0       	ldi	r25, 0x05	; 5
    29f2:	c9 16       	cp	r12, r25
    29f4:	d1 04       	cpc	r13, r1
    29f6:	e9 f6       	brne	.-70     	; 0x29b2 <nrk_start+0x26>
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    29f8:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <nrk_get_high_ready_task_ID>
        switch (pin & 0x07) {
    29fc:	28 2f       	mov	r18, r24
    29fe:	33 27       	eor	r19, r19
    2a00:	27 fd       	sbrc	r18, 7
    2a02:	30 95       	com	r19
    2a04:	f9 01       	movw	r30, r18
    2a06:	55 e0       	ldi	r21, 0x05	; 5
    2a08:	ee 0f       	add	r30, r30
    2a0a:	ff 1f       	adc	r31, r31
    2a0c:	5a 95       	dec	r21
    2a0e:	e1 f7       	brne	.-8      	; 0x2a08 <nrk_start+0x7c>
    2a10:	e2 0f       	add	r30, r18
    2a12:	f3 1f       	adc	r31, r19
    2a14:	e6 5a       	subi	r30, 0xA6	; 166
    2a16:	f8 4f       	sbci	r31, 0xF8	; 248
    2a18:	32 85       	ldd	r19, Z+10	; 0x0a
    2a1a:	30 93 17 08 	sts	0x0817, r19
                case NRK_PORTA:
    2a1e:	21 e2       	ldi	r18, 0x21	; 33
    2a20:	82 02       	muls	r24, r18
    2a22:	c0 01       	movw	r24, r0
    2a24:	11 24       	eor	r1, r1
    2a26:	86 5a       	subi	r24, 0xA6	; 166
    2a28:	98 4f       	sbci	r25, 0xF8	; 248
    2a2a:	90 93 16 08 	sts	0x0816, r25
    2a2e:	80 93 15 08 	sts	0x0815, r24
    2a32:	90 93 07 08 	sts	0x0807, r25
    2a36:	80 93 06 08 	sts	0x0806, r24
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2a3a:	30 93 08 08 	sts	0x0808, r19
        }
        return 1;
}

int8_t nrk_gpio_clr(uint8_t pin)
{
    2a3e:	0e 94 a1 2a 	call	0x5542	; 0x5542 <nrk_target_start>
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2a42:	0e 94 87 2a 	call	0x550e	; 0x550e <nrk_stack_pointer_init>
        switch (pin & 0x07) {
    2a46:	0e 94 c5 2a 	call	0x558a	; 0x558a <nrk_start_high_ready_task>
    2a4a:	ff cf       	rjmp	.-2      	; 0x2a4a <nrk_start+0xbe>

00002a4c <nrk_init>:
CLEAR_UART1_RX_INT();
ENABLE_UART1_RX_INT();
//sei();
}

char getc1()
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	a3 97       	sbiw	r28, 0x23	; 35
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
{
char tmp;

if(uart_rx_buf_start!=uart_rx_buf_end)
   {
   tmp=uart_rx_buf[uart_rx_buf_start];
    2a64:	0e 94 11 1b 	call	0x3622	; 0x3622 <nrk_signal_create>
    2a68:	80 93 05 08 	sts	0x0805, r24
   uart_rx_buf_start++;
    2a6c:	8f 3f       	cpi	r24, 0xFF	; 255
    2a6e:	21 f4       	brne	.+8      	; 0x2a78 <nrk_init+0x2c>
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	8e e0       	ldi	r24, 0x0E	; 14
    2a74:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_kernel_error_add>
   if(uart_rx_buf_start==MAX_RX_UART_BUF) uart_rx_buf_start=0;
   return(tmp);
   }
    2a78:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <_nrk_startup_ok>
    2a7c:	88 23       	and	r24, r24
    2a7e:	21 f4       	brne	.+8      	; 0x2a88 <nrk_init+0x3c>
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	86 e0       	ldi	r24, 0x06	; 6
    2a84:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_kernel_error_add>
if(uart_num==1)
	{
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
}
    2a88:	0e 94 03 2a 	call	0x5406	; 0x5406 <nrk_watchdog_check>
    2a8c:	8f 3f       	cpi	r24, 0xFF	; 255
    2a8e:	31 f4       	brne	.+12     	; 0x2a9c <nrk_init+0x50>

nrk_sig_t nrk_uart_rx_signal_get()
    2a90:	0e 94 0e 2a 	call	0x541c	; 0x541c <nrk_watchdog_disable>
{
    2a94:	60 e0       	ldi	r22, 0x00	; 0
    2a96:	80 e1       	ldi	r24, 0x10	; 16
    2a98:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_kernel_error_add>
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
   return uart_rx_signal;
    2a9c:	0e 94 1d 2a 	call	0x543a	; 0x543a <nrk_watchdog_enable>
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
}
    2aa0:	10 92 08 08 	sts	0x0808, r1

    2aa4:	10 92 16 08 	sts	0x0816, r1
    2aa8:	10 92 15 08 	sts	0x0815, r1
char getc1(void){
        unsigned char tmp;
    2aac:	10 92 07 08 	sts	0x0807, r1
    2ab0:	10 92 06 08 	sts	0x0806, r1
        UART1_WAIT_AND_RECEIVE(tmp);
    2ab4:	10 92 17 08 	sts	0x0817, r1
        return tmp;
}

    2ab8:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <nrk_stats_reset>
void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
        putchar(c);
}
    2abc:	10 92 14 08 	sts	0x0814, r1

void nrk_setup_ports()
{
PORT_INIT();
    2ac0:	8f ef       	ldi	r24, 0xFF	; 255
    2ac2:	80 93 01 08 	sts	0x0801, r24
SPI_INIT();
    2ac6:	80 93 03 08 	sts	0x0803, r24
}
    2aca:	80 93 02 08 	sts	0x0802, r24
    2ace:	ea e5       	ldi	r30, 0x5A	; 90
    2ad0:	f7 e0       	ldi	r31, 0x07	; 7
// GPIO related definitions
//---------------------------------------------------------------------------------------------
// Define high-level nrk pins mappings to hardware pins and ports
// This is used for nrk_gpio_... functions.
// Raw GPIO mapping can be found in the nrk_pin_define.h file.
//---------------------------------------------------------------------------------------------
    2ad2:	83 e6       	ldi	r24, 0x63	; 99
    2ad4:	82 87       	std	Z+10, r24	; 0x0a

    2ad6:	8f ef       	ldi	r24, 0xFF	; 255
    2ad8:	80 87       	std	Z+8, r24	; 0x08
    2ada:	b1 96       	adiw	r30, 0x21	; 33

//---------------------------------------------------------------------------------------------
// GPIO related definitions
//---------------------------------------------------------------------------------------------
// Define high-level nrk pins mappings to hardware pins and ports
// This is used for nrk_gpio_... functions.
    2adc:	27 e0       	ldi	r18, 0x07	; 7
    2ade:	ef 3f       	cpi	r30, 0xFF	; 255
    2ae0:	f2 07       	cpc	r31, r18
    2ae2:	b9 f7       	brne	.-18     	; 0x2ad2 <nrk_init+0x86>
    2ae4:	e8 e1       	ldi	r30, 0x18	; 24
    2ae6:	f8 e0       	ldi	r31, 0x08	; 8
// Port A
NRK_PIN( DEBUG_0,DEBUG_0, NRK_PORTA )
NRK_PIN( DEBUG_1,DEBUG_1, NRK_PORTA )
NRK_PIN( BUTTON,BUTTON, NRK_PORTA )
//-------------------------------
// Port B
    2ae8:	cf 01       	movw	r24, r30
    2aea:	05 96       	adiw	r24, 0x05	; 5
    2aec:	94 83       	std	Z+4, r25	; 0x04
    2aee:	83 83       	std	Z+3, r24	; 0x03
NRK_PIN( SPI_SS,SPI_SS, NRK_PORTB )
    2af0:	f7 83       	std	Z+7, r31	; 0x07
    2af2:	e6 83       	std	Z+6, r30	; 0x06
    2af4:	fc 01       	movw	r30, r24

//-------------------------------
// Port A
NRK_PIN( DEBUG_0,DEBUG_0, NRK_PORTA )
NRK_PIN( DEBUG_1,DEBUG_1, NRK_PORTA )
NRK_PIN( BUTTON,BUTTON, NRK_PORTA )
    2af6:	28 e0       	ldi	r18, 0x08	; 8
    2af8:	81 33       	cpi	r24, 0x31	; 49
    2afa:	92 07       	cpc	r25, r18
    2afc:	a9 f7       	brne	.-22     	; 0x2ae8 <nrk_init+0x9c>
//-------------------------------
// Port B
NRK_PIN( SPI_SS,SPI_SS, NRK_PORTB )
NRK_PIN( SCK,SCK, NRK_PORTB )
NRK_PIN( MOSI,MOSI, NRK_PORTB )
NRK_PIN( MISO,MISO, NRK_PORTB )
    2afe:	10 92 1a 08 	sts	0x081A, r1
    2b02:	10 92 19 08 	sts	0x0819, r1
NRK_PIN( GPIO26,4, NRK_PORTB )
    2b06:	10 92 35 08 	sts	0x0835, r1
    2b0a:	10 92 34 08 	sts	0x0834, r1
NRK_PIN( MMC_11,5, NRK_PORTB )
    2b0e:	10 92 0b 08 	sts	0x080B, r1
    2b12:	10 92 0a 08 	sts	0x080A, r1
NRK_PIN( MMC_10,6, NRK_PORTB )
    2b16:	49 97       	sbiw	r24, 0x19	; 25
    2b18:	90 93 59 07 	sts	0x0759, r25
    2b1c:	80 93 58 07 	sts	0x0758, r24
NRK_PIN( MMC_9,7, NRK_PORTB )

//-------------------------------
// Port D
NRK_PIN( DEBUG_2,DEBUG_2, NRK_PORTD )
    2b20:	6a e4       	ldi	r22, 0x4A	; 74
    2b22:	74 e2       	ldi	r23, 0x24	; 36
    2b24:	8e 01       	movw	r16, r28
    2b26:	0f 5f       	subi	r16, 0xFF	; 255
    2b28:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2a:	c8 01       	movw	r24, r16
    2b2c:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_task_set_entry_function>
NRK_PIN( DEBUG_3,DEBUG_3, NRK_PORTD )
    2b30:	40 e8       	ldi	r20, 0x80	; 128
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	6a e1       	ldi	r22, 0x1A	; 26
    2b36:	76 e0       	ldi	r23, 0x06	; 6
    2b38:	c8 01       	movw	r24, r16
    2b3a:	0e 94 a6 2a 	call	0x554c	; 0x554c <nrk_task_set_stk>
NRK_PIN( UART1_RXD,UART1_RXD, NRK_PORTD )
    2b3e:	85 e5       	ldi	r24, 0x55	; 85
    2b40:	80 93 1a 06 	sts	0x061A, r24
NRK_PIN( UART1_TXD,UART1_TXD, NRK_PORTD )
NRK_PIN( CCA,CCA, NRK_PORTD )
    2b44:	19 86       	std	Y+9, r1	; 0x09
NRK_PIN( SFD,SFD, NRK_PORTD )
    2b46:	1c 8e       	std	Y+28, r1	; 0x1c
    2b48:	1d 8e       	std	Y+29, r1	; 0x1d
    2b4a:	1e 8e       	std	Y+30, r1	; 0x1e
    2b4c:	1f 8e       	std	Y+31, r1	; 0x1f

    2b4e:	18 a2       	std	Y+32, r1	; 0x20
    2b50:	19 a2       	std	Y+33, r1	; 0x21
    2b52:	1a a2       	std	Y+34, r1	; 0x22
    2b54:	1b a2       	std	Y+35, r1	; 0x23
//-------------------------------
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	98 87       	std	Y+8, r25	; 0x08
// Port E
    2b5a:	82 e0       	ldi	r24, 0x02	; 2
    2b5c:	8a 87       	std	Y+10, r24	; 0x0a
NRK_PIN( UART0_RXD,UART0_RXD, NRK_PORTE )
    2b5e:	9b 87       	std	Y+11, r25	; 0x0b
NRK_PIN( UART0_TXD,UART0_TXD, NRK_PORTE )
    2b60:	c8 01       	movw	r24, r16
    2b62:	0e 94 14 21 	call	0x4228	; 0x4228 <nrk_activate_task>
    2b66:	a3 96       	adiw	r28, 0x23	; 35
    2b68:	0f b6       	in	r0, 0x3f	; 63
    2b6a:	f8 94       	cli
    2b6c:	de bf       	out	0x3e, r29	; 62
    2b6e:	0f be       	out	0x3f, r0	; 63
    2b70:	cd bf       	out	0x3d, r28	; 61
    2b72:	df 91       	pop	r29
    2b74:	cf 91       	pop	r28
    2b76:	1f 91       	pop	r17
    2b78:	0f 91       	pop	r16
    2b7a:	08 95       	ret

00002b7c <nrk_halt>:
#ifdef NRK_UART_BUF
#include <nrk_events.h>

#ifndef MAX_RX_UART_BUF
#define MAX_RX_UART_BUF    16
#endif
    2b7c:	f8 94       	cli
    2b7e:	ff cf       	rjmp	.-2      	; 0x2b7e <nrk_halt+0x2>

00002b80 <nrk_stats_reset>:
#ifdef NRK_STATS_TRACKER
void nrk_stats_reset()
{
uint8_t i;

_nrk_stats_sleep_time.secs=0;
    2b80:	10 92 50 04 	sts	0x0450, r1
    2b84:	10 92 51 04 	sts	0x0451, r1
    2b88:	10 92 52 04 	sts	0x0452, r1
    2b8c:	10 92 53 04 	sts	0x0453, r1
_nrk_stats_sleep_time.nano_secs=0;
    2b90:	10 92 54 04 	sts	0x0454, r1
    2b94:	10 92 55 04 	sts	0x0455, r1
    2b98:	10 92 56 04 	sts	0x0456, r1
    2b9c:	10 92 57 04 	sts	0x0457, r1
    2ba0:	e3 e8       	ldi	r30, 0x83	; 131
    2ba2:	f5 e0       	ldi	r31, 0x05	; 5
for(i=0; i<NRK_MAX_TASKS; i++ )
	{
	cur_task_stats[i].total_ticks=0;
    2ba4:	10 82       	st	Z, r1
    2ba6:	11 82       	std	Z+1, r1	; 0x01
    2ba8:	12 82       	std	Z+2, r1	; 0x02
    2baa:	13 82       	std	Z+3, r1	; 0x03
	cur_task_stats[i].max_exec_ticks=0;
    2bac:	10 86       	std	Z+8, r1	; 0x08
    2bae:	11 86       	std	Z+9, r1	; 0x09
    2bb0:	12 86       	std	Z+10, r1	; 0x0a
    2bb2:	13 86       	std	Z+11, r1	; 0x0b
	cur_task_stats[i].min_exec_ticks=0;
    2bb4:	14 82       	std	Z+4, r1	; 0x04
    2bb6:	15 82       	std	Z+5, r1	; 0x05
    2bb8:	16 82       	std	Z+6, r1	; 0x06
    2bba:	17 82       	std	Z+7, r1	; 0x07
	cur_task_stats[i].last_exec_ticks=0;
    2bbc:	14 86       	std	Z+12, r1	; 0x0c
    2bbe:	15 86       	std	Z+13, r1	; 0x0d
    2bc0:	16 86       	std	Z+14, r1	; 0x0e
    2bc2:	17 86       	std	Z+15, r1	; 0x0f
	cur_task_stats[i].swapped_in=0;
    2bc4:	10 8a       	std	Z+16, r1	; 0x10
    2bc6:	11 8a       	std	Z+17, r1	; 0x11
    2bc8:	12 8a       	std	Z+18, r1	; 0x12
    2bca:	13 8a       	std	Z+19, r1	; 0x13
	cur_task_stats[i].preempted=0;
    2bcc:	10 8e       	std	Z+24, r1	; 0x18
    2bce:	11 8e       	std	Z+25, r1	; 0x19
    2bd0:	12 8e       	std	Z+26, r1	; 0x1a
    2bd2:	13 8e       	std	Z+27, r1	; 0x1b
	cur_task_stats[i].violations=0;
    2bd4:	14 8e       	std	Z+28, r1	; 0x1c
	cur_task_stats[i].overflow=0;
    2bd6:	15 8e       	std	Z+29, r1	; 0x1d
    2bd8:	7e 96       	adiw	r30, 0x1e	; 30
{
uint8_t i;

_nrk_stats_sleep_time.secs=0;
_nrk_stats_sleep_time.nano_secs=0;
for(i=0; i<NRK_MAX_TASKS; i++ )
    2bda:	86 e0       	ldi	r24, 0x06	; 6
    2bdc:	e9 31       	cpi	r30, 0x19	; 25
    2bde:	f8 07       	cpc	r31, r24
    2be0:	09 f7       	brne	.-62     	; 0x2ba4 <nrk_stats_reset+0x24>
    2be2:	08 95       	ret

00002be4 <nrk_stats_get_deep_sleep>:
_nrk_stats_sleep_time.nano_secs+=t*NANOS_PER_TICK;
nrk_time_compact_nanos(&_nrk_stats_sleep_time);
}

void nrk_stats_get_deep_sleep(nrk_time_t *t)
{
    2be4:	fc 01       	movw	r30, r24
t->secs=_nrk_stats_sleep_time.secs;
    2be6:	80 91 50 04 	lds	r24, 0x0450
    2bea:	90 91 51 04 	lds	r25, 0x0451
    2bee:	a0 91 52 04 	lds	r26, 0x0452
    2bf2:	b0 91 53 04 	lds	r27, 0x0453
    2bf6:	80 83       	st	Z, r24
    2bf8:	91 83       	std	Z+1, r25	; 0x01
    2bfa:	a2 83       	std	Z+2, r26	; 0x02
    2bfc:	b3 83       	std	Z+3, r27	; 0x03
t->nano_secs=_nrk_stats_sleep_time.nano_secs;
    2bfe:	80 91 54 04 	lds	r24, 0x0454
    2c02:	90 91 55 04 	lds	r25, 0x0455
    2c06:	a0 91 56 04 	lds	r26, 0x0456
    2c0a:	b0 91 57 04 	lds	r27, 0x0457
    2c0e:	84 83       	std	Z+4, r24	; 0x04
    2c10:	95 83       	std	Z+5, r25	; 0x05
    2c12:	a6 83       	std	Z+6, r26	; 0x06
    2c14:	b7 83       	std	Z+7, r27	; 0x07
    2c16:	08 95       	ret

00002c18 <_nrk_stats_add_violation>:
}

void _nrk_stats_add_violation(uint8_t task_id)
{
//if( cur_task_stats[task_id].overflow==1) return;
cur_task_stats[task_id].violations++;
    2c18:	99 27       	eor	r25, r25
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	35 e0       	ldi	r19, 0x05	; 5
    2c1e:	ee 0f       	add	r30, r30
    2c20:	ff 1f       	adc	r31, r31
    2c22:	3a 95       	dec	r19
    2c24:	e1 f7       	brne	.-8      	; 0x2c1e <_nrk_stats_add_violation+0x6>
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	e8 1b       	sub	r30, r24
    2c2c:	f9 0b       	sbc	r31, r25
    2c2e:	ed 57       	subi	r30, 0x7D	; 125
    2c30:	fa 4f       	sbci	r31, 0xFA	; 250
    2c32:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c34:	8f 5f       	subi	r24, 0xFF	; 255
    2c36:	84 8f       	std	Z+28, r24	; 0x1c
if(cur_task_stats[task_id].violations==255) cur_task_stats[task_id].overflow=1;
    2c38:	8f 3f       	cpi	r24, 0xFF	; 255
    2c3a:	11 f4       	brne	.+4      	; 0x2c40 <_nrk_stats_add_violation+0x28>
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	85 8f       	std	Z+29, r24	; 0x1d
    2c40:	08 95       	ret

00002c42 <_nrk_stats_task_start>:

// task_id is the PID of the task in question
void _nrk_stats_task_start(uint8_t task_id)
{
// if( cur_task_stats[task_id].overflow==1) return;
cur_task_stats[task_id].cur_ticks=0;
    2c42:	99 27       	eor	r25, r25
    2c44:	fc 01       	movw	r30, r24
    2c46:	55 e0       	ldi	r21, 0x05	; 5
    2c48:	ee 0f       	add	r30, r30
    2c4a:	ff 1f       	adc	r31, r31
    2c4c:	5a 95       	dec	r21
    2c4e:	e1 f7       	brne	.-8      	; 0x2c48 <_nrk_stats_task_start+0x6>
    2c50:	88 0f       	add	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	e8 1b       	sub	r30, r24
    2c56:	f9 0b       	sbc	r31, r25
    2c58:	ed 57       	subi	r30, 0x7D	; 125
    2c5a:	fa 4f       	sbci	r31, 0xFA	; 250
    2c5c:	14 8a       	std	Z+20, r1	; 0x14
    2c5e:	15 8a       	std	Z+21, r1	; 0x15
    2c60:	16 8a       	std	Z+22, r1	; 0x16
    2c62:	17 8a       	std	Z+23, r1	; 0x17
cur_task_stats[task_id].swapped_in++;
    2c64:	80 89       	ldd	r24, Z+16	; 0x10
    2c66:	91 89       	ldd	r25, Z+17	; 0x11
    2c68:	a2 89       	ldd	r26, Z+18	; 0x12
    2c6a:	b3 89       	ldd	r27, Z+19	; 0x13
    2c6c:	01 96       	adiw	r24, 0x01	; 1
    2c6e:	a1 1d       	adc	r26, r1
    2c70:	b1 1d       	adc	r27, r1
    2c72:	80 8b       	std	Z+16, r24	; 0x10
    2c74:	91 8b       	std	Z+17, r25	; 0x11
    2c76:	a2 8b       	std	Z+18, r26	; 0x12
    2c78:	b3 8b       	std	Z+19, r27	; 0x13
if(cur_task_stats[task_id].swapped_in==255) cur_task_stats[task_id].overflow=1;
    2c7a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c7c:	91 05       	cpc	r25, r1
    2c7e:	a1 05       	cpc	r26, r1
    2c80:	b1 05       	cpc	r27, r1
    2c82:	11 f4       	brne	.+4      	; 0x2c88 <_nrk_stats_task_start+0x46>
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	85 8f       	std	Z+29, r24	; 0x1d
    2c88:	08 95       	ret

00002c8a <_nrk_stats_task_preempted>:
}


void _nrk_stats_task_preempted(uint8_t task_id, uint8_t ticks)
{
    2c8a:	26 2f       	mov	r18, r22
// if( cur_task_stats[task_id].overflow==1) return;
cur_task_stats[task_id].preempted++;
    2c8c:	99 27       	eor	r25, r25
    2c8e:	fc 01       	movw	r30, r24
    2c90:	75 e0       	ldi	r23, 0x05	; 5
    2c92:	ee 0f       	add	r30, r30
    2c94:	ff 1f       	adc	r31, r31
    2c96:	7a 95       	dec	r23
    2c98:	e1 f7       	brne	.-8      	; 0x2c92 <_nrk_stats_task_preempted+0x8>
    2c9a:	88 0f       	add	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	e8 1b       	sub	r30, r24
    2ca0:	f9 0b       	sbc	r31, r25
    2ca2:	ed 57       	subi	r30, 0x7D	; 125
    2ca4:	fa 4f       	sbci	r31, 0xFA	; 250
    2ca6:	80 8d       	ldd	r24, Z+24	; 0x18
    2ca8:	91 8d       	ldd	r25, Z+25	; 0x19
    2caa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2cac:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2cae:	01 96       	adiw	r24, 0x01	; 1
    2cb0:	a1 1d       	adc	r26, r1
    2cb2:	b1 1d       	adc	r27, r1
    2cb4:	80 8f       	std	Z+24, r24	; 0x18
    2cb6:	91 8f       	std	Z+25, r25	; 0x19
    2cb8:	a2 8f       	std	Z+26, r26	; 0x1a
    2cba:	b3 8f       	std	Z+27, r27	; 0x1b
cur_task_stats[task_id].cur_ticks+=ticks;
    2cbc:	33 27       	eor	r19, r19
    2cbe:	44 27       	eor	r20, r20
    2cc0:	55 27       	eor	r21, r21
    2cc2:	84 89       	ldd	r24, Z+20	; 0x14
    2cc4:	95 89       	ldd	r25, Z+21	; 0x15
    2cc6:	a6 89       	ldd	r26, Z+22	; 0x16
    2cc8:	b7 89       	ldd	r27, Z+23	; 0x17
    2cca:	82 0f       	add	r24, r18
    2ccc:	93 1f       	adc	r25, r19
    2cce:	a4 1f       	adc	r26, r20
    2cd0:	b5 1f       	adc	r27, r21
    2cd2:	84 8b       	std	Z+20, r24	; 0x14
    2cd4:	95 8b       	std	Z+21, r25	; 0x15
    2cd6:	a6 8b       	std	Z+22, r26	; 0x16
    2cd8:	b7 8b       	std	Z+23, r27	; 0x17
cur_task_stats[task_id].total_ticks+=ticks;
    2cda:	80 81       	ld	r24, Z
    2cdc:	91 81       	ldd	r25, Z+1	; 0x01
    2cde:	a2 81       	ldd	r26, Z+2	; 0x02
    2ce0:	b3 81       	ldd	r27, Z+3	; 0x03
    2ce2:	28 0f       	add	r18, r24
    2ce4:	39 1f       	adc	r19, r25
    2ce6:	4a 1f       	adc	r20, r26
    2ce8:	5b 1f       	adc	r21, r27
    2cea:	20 83       	st	Z, r18
    2cec:	31 83       	std	Z+1, r19	; 0x01
    2cee:	42 83       	std	Z+2, r20	; 0x02
    2cf0:	53 83       	std	Z+3, r21	; 0x03
    2cf2:	08 95       	ret

00002cf4 <_nrk_stats_task_suspend>:
}

void _nrk_stats_task_suspend(uint8_t task_id, uint8_t ticks)
{
    2cf4:	ef 92       	push	r14
    2cf6:	ff 92       	push	r15
    2cf8:	0f 93       	push	r16
    2cfa:	1f 93       	push	r17
    2cfc:	26 2f       	mov	r18, r22
if( cur_task_stats[task_id].overflow==1) return;
    2cfe:	68 2f       	mov	r22, r24
    2d00:	77 27       	eor	r23, r23
    2d02:	cb 01       	movw	r24, r22
    2d04:	88 0f       	add	r24, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	fb 01       	movw	r30, r22
    2d0a:	15 e0       	ldi	r17, 0x05	; 5
    2d0c:	ee 0f       	add	r30, r30
    2d0e:	ff 1f       	adc	r31, r31
    2d10:	1a 95       	dec	r17
    2d12:	e1 f7       	brne	.-8      	; 0x2d0c <_nrk_stats_task_suspend+0x18>
    2d14:	e8 1b       	sub	r30, r24
    2d16:	f9 0b       	sbc	r31, r25
    2d18:	ed 57       	subi	r30, 0x7D	; 125
    2d1a:	fa 4f       	sbci	r31, 0xFA	; 250
    2d1c:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d1e:	81 30       	cpi	r24, 0x01	; 1
    2d20:	09 f4       	brne	.+2      	; 0x2d24 <_nrk_stats_task_suspend+0x30>
    2d22:	49 c0       	rjmp	.+146    	; 0x2db6 <_nrk_stats_task_suspend+0xc2>
cur_task_stats[task_id].last_exec_ticks = cur_task_stats[task_id].cur_ticks+ticks;
    2d24:	33 27       	eor	r19, r19
    2d26:	44 27       	eor	r20, r20
    2d28:	55 27       	eor	r21, r21
    2d2a:	e4 88       	ldd	r14, Z+20	; 0x14
    2d2c:	f5 88       	ldd	r15, Z+21	; 0x15
    2d2e:	06 89       	ldd	r16, Z+22	; 0x16
    2d30:	17 89       	ldd	r17, Z+23	; 0x17
    2d32:	e2 0e       	add	r14, r18
    2d34:	f3 1e       	adc	r15, r19
    2d36:	04 1f       	adc	r16, r20
    2d38:	15 1f       	adc	r17, r21
    2d3a:	e4 86       	std	Z+12, r14	; 0x0c
    2d3c:	f5 86       	std	Z+13, r15	; 0x0d
    2d3e:	06 87       	std	Z+14, r16	; 0x0e
    2d40:	17 87       	std	Z+15, r17	; 0x0f
cur_task_stats[task_id].total_ticks+=ticks;
    2d42:	80 81       	ld	r24, Z
    2d44:	91 81       	ldd	r25, Z+1	; 0x01
    2d46:	a2 81       	ldd	r26, Z+2	; 0x02
    2d48:	b3 81       	ldd	r27, Z+3	; 0x03
    2d4a:	28 0f       	add	r18, r24
    2d4c:	39 1f       	adc	r19, r25
    2d4e:	4a 1f       	adc	r20, r26
    2d50:	5b 1f       	adc	r21, r27
    2d52:	20 83       	st	Z, r18
    2d54:	31 83       	std	Z+1, r19	; 0x01
    2d56:	42 83       	std	Z+2, r20	; 0x02
    2d58:	53 83       	std	Z+3, r21	; 0x03

if(cur_task_stats[task_id].min_exec_ticks==0 || cur_task_stats[task_id].last_exec_ticks<cur_task_stats[task_id].min_exec_ticks) 
    2d5a:	84 81       	ldd	r24, Z+4	; 0x04
    2d5c:	95 81       	ldd	r25, Z+5	; 0x05
    2d5e:	a6 81       	ldd	r26, Z+6	; 0x06
    2d60:	b7 81       	ldd	r27, Z+7	; 0x07
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	a1 05       	cpc	r26, r1
    2d66:	b1 05       	cpc	r27, r1
    2d68:	29 f0       	breq	.+10     	; 0x2d74 <_nrk_stats_task_suspend+0x80>
    2d6a:	e8 16       	cp	r14, r24
    2d6c:	f9 06       	cpc	r15, r25
    2d6e:	0a 07       	cpc	r16, r26
    2d70:	1b 07       	cpc	r17, r27
    2d72:	20 f4       	brcc	.+8      	; 0x2d7c <_nrk_stats_task_suspend+0x88>
	cur_task_stats[task_id].min_exec_ticks=cur_task_stats[task_id].last_exec_ticks;
    2d74:	e4 82       	std	Z+4, r14	; 0x04
    2d76:	f5 82       	std	Z+5, r15	; 0x05
    2d78:	06 83       	std	Z+6, r16	; 0x06
    2d7a:	17 83       	std	Z+7, r17	; 0x07

if(cur_task_stats[task_id].last_exec_ticks>cur_task_stats[task_id].max_exec_ticks)
    2d7c:	fb 01       	movw	r30, r22
    2d7e:	b5 e0       	ldi	r27, 0x05	; 5
    2d80:	ee 0f       	add	r30, r30
    2d82:	ff 1f       	adc	r31, r31
    2d84:	ba 95       	dec	r27
    2d86:	e1 f7       	brne	.-8      	; 0x2d80 <_nrk_stats_task_suspend+0x8c>
    2d88:	66 0f       	add	r22, r22
    2d8a:	77 1f       	adc	r23, r23
    2d8c:	e6 1b       	sub	r30, r22
    2d8e:	f7 0b       	sbc	r31, r23
    2d90:	ed 57       	subi	r30, 0x7D	; 125
    2d92:	fa 4f       	sbci	r31, 0xFA	; 250
    2d94:	24 85       	ldd	r18, Z+12	; 0x0c
    2d96:	35 85       	ldd	r19, Z+13	; 0x0d
    2d98:	46 85       	ldd	r20, Z+14	; 0x0e
    2d9a:	57 85       	ldd	r21, Z+15	; 0x0f
    2d9c:	80 85       	ldd	r24, Z+8	; 0x08
    2d9e:	91 85       	ldd	r25, Z+9	; 0x09
    2da0:	a2 85       	ldd	r26, Z+10	; 0x0a
    2da2:	b3 85       	ldd	r27, Z+11	; 0x0b
    2da4:	82 17       	cp	r24, r18
    2da6:	93 07       	cpc	r25, r19
    2da8:	a4 07       	cpc	r26, r20
    2daa:	b5 07       	cpc	r27, r21
    2dac:	20 f4       	brcc	.+8      	; 0x2db6 <_nrk_stats_task_suspend+0xc2>
	cur_task_stats[task_id].max_exec_ticks=cur_task_stats[task_id].last_exec_ticks;
    2dae:	20 87       	std	Z+8, r18	; 0x08
    2db0:	31 87       	std	Z+9, r19	; 0x09
    2db2:	42 87       	std	Z+10, r20	; 0x0a
    2db4:	53 87       	std	Z+11, r21	; 0x0b
    2db6:	1f 91       	pop	r17
    2db8:	0f 91       	pop	r16
    2dba:	ff 90       	pop	r15
    2dbc:	ef 90       	pop	r14
    2dbe:	08 95       	ret

00002dc0 <nrk_stats_get>:
	nrk_stats_display_pid(i);
}


int8_t nrk_stats_get(uint8_t pid, nrk_task_stat_t *t)
{
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	eb 01       	movw	r28, r22
if(pid>=NRK_MAX_TASKS) return NRK_ERROR;
    2dc6:	85 30       	cpi	r24, 0x05	; 5
    2dc8:	18 f0       	brcs	.+6      	; 0x2dd0 <nrk_stats_get+0x10>
    2dca:	8f ef       	ldi	r24, 0xFF	; 255
    2dcc:	9f ef       	ldi	r25, 0xFF	; 255
    2dce:	4b c0       	rjmp	.+150    	; 0x2e66 <nrk_stats_get+0xa6>

t->total_ticks=cur_task_stats[pid].total_ticks;
    2dd0:	99 27       	eor	r25, r25
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	35 e0       	ldi	r19, 0x05	; 5
    2dd6:	ee 0f       	add	r30, r30
    2dd8:	ff 1f       	adc	r31, r31
    2dda:	3a 95       	dec	r19
    2ddc:	e1 f7       	brne	.-8      	; 0x2dd6 <nrk_stats_get+0x16>
    2dde:	88 0f       	add	r24, r24
    2de0:	99 1f       	adc	r25, r25
    2de2:	e8 1b       	sub	r30, r24
    2de4:	f9 0b       	sbc	r31, r25
    2de6:	ed 57       	subi	r30, 0x7D	; 125
    2de8:	fa 4f       	sbci	r31, 0xFA	; 250
    2dea:	80 81       	ld	r24, Z
    2dec:	91 81       	ldd	r25, Z+1	; 0x01
    2dee:	a2 81       	ldd	r26, Z+2	; 0x02
    2df0:	b3 81       	ldd	r27, Z+3	; 0x03
    2df2:	88 83       	st	Y, r24
    2df4:	99 83       	std	Y+1, r25	; 0x01
    2df6:	aa 83       	std	Y+2, r26	; 0x02
    2df8:	bb 83       	std	Y+3, r27	; 0x03
t->min_exec_ticks=cur_task_stats[pid].min_exec_ticks;
    2dfa:	84 81       	ldd	r24, Z+4	; 0x04
    2dfc:	95 81       	ldd	r25, Z+5	; 0x05
    2dfe:	a6 81       	ldd	r26, Z+6	; 0x06
    2e00:	b7 81       	ldd	r27, Z+7	; 0x07
    2e02:	8c 83       	std	Y+4, r24	; 0x04
    2e04:	9d 83       	std	Y+5, r25	; 0x05
    2e06:	ae 83       	std	Y+6, r26	; 0x06
    2e08:	bf 83       	std	Y+7, r27	; 0x07
t->max_exec_ticks=cur_task_stats[pid].max_exec_ticks;
    2e0a:	80 85       	ldd	r24, Z+8	; 0x08
    2e0c:	91 85       	ldd	r25, Z+9	; 0x09
    2e0e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2e10:	b3 85       	ldd	r27, Z+11	; 0x0b
    2e12:	88 87       	std	Y+8, r24	; 0x08
    2e14:	99 87       	std	Y+9, r25	; 0x09
    2e16:	aa 87       	std	Y+10, r26	; 0x0a
    2e18:	bb 87       	std	Y+11, r27	; 0x0b
t->last_exec_ticks=cur_task_stats[pid].last_exec_ticks;
    2e1a:	84 85       	ldd	r24, Z+12	; 0x0c
    2e1c:	95 85       	ldd	r25, Z+13	; 0x0d
    2e1e:	a6 85       	ldd	r26, Z+14	; 0x0e
    2e20:	b7 85       	ldd	r27, Z+15	; 0x0f
    2e22:	8c 87       	std	Y+12, r24	; 0x0c
    2e24:	9d 87       	std	Y+13, r25	; 0x0d
    2e26:	ae 87       	std	Y+14, r26	; 0x0e
    2e28:	bf 87       	std	Y+15, r27	; 0x0f
t->swapped_in=cur_task_stats[pid].swapped_in;
    2e2a:	80 89       	ldd	r24, Z+16	; 0x10
    2e2c:	91 89       	ldd	r25, Z+17	; 0x11
    2e2e:	a2 89       	ldd	r26, Z+18	; 0x12
    2e30:	b3 89       	ldd	r27, Z+19	; 0x13
    2e32:	88 8b       	std	Y+16, r24	; 0x10
    2e34:	99 8b       	std	Y+17, r25	; 0x11
    2e36:	aa 8b       	std	Y+18, r26	; 0x12
    2e38:	bb 8b       	std	Y+19, r27	; 0x13
t->cur_ticks=cur_task_stats[pid].cur_ticks;
    2e3a:	84 89       	ldd	r24, Z+20	; 0x14
    2e3c:	95 89       	ldd	r25, Z+21	; 0x15
    2e3e:	a6 89       	ldd	r26, Z+22	; 0x16
    2e40:	b7 89       	ldd	r27, Z+23	; 0x17
    2e42:	8c 8b       	std	Y+20, r24	; 0x14
    2e44:	9d 8b       	std	Y+21, r25	; 0x15
    2e46:	ae 8b       	std	Y+22, r26	; 0x16
    2e48:	bf 8b       	std	Y+23, r27	; 0x17
t->preempted=cur_task_stats[pid].preempted;
    2e4a:	80 8d       	ldd	r24, Z+24	; 0x18
    2e4c:	91 8d       	ldd	r25, Z+25	; 0x19
    2e4e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2e50:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2e52:	88 8f       	std	Y+24, r24	; 0x18
    2e54:	99 8f       	std	Y+25, r25	; 0x19
    2e56:	aa 8f       	std	Y+26, r26	; 0x1a
    2e58:	bb 8f       	std	Y+27, r27	; 0x1b
t->violations=cur_task_stats[pid].violations;
    2e5a:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e5c:	8c 8f       	std	Y+28, r24	; 0x1c
t->overflow=cur_task_stats[pid].overflow;
    2e5e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e60:	8d 8f       	std	Y+29, r24	; 0x1d
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	08 95       	ret

00002e6c <nrk_stats_display_pid>:
}



void nrk_stats_display_pid(uint8_t pid)
{
    2e6c:	ef 92       	push	r14
    2e6e:	ff 92       	push	r15
    2e70:	0f 93       	push	r16
    2e72:	1f 93       	push	r17
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	60 97       	sbiw	r28, 0x10	; 16
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
    2e88:	18 2f       	mov	r17, r24
nrk_time_t t;

	nrk_kprintf( PSTR( " Task ID: "));
    2e8a:	82 ee       	ldi	r24, 0xE2	; 226
    2e8c:	91 e0       	ldi	r25, 0x01	; 1
    2e8e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
	printf( "%d",pid );
    2e92:	e1 2e       	mov	r14, r17
    2e94:	ff 24       	eor	r15, r15
    2e96:	ff 92       	push	r15
    2e98:	ef 92       	push	r14
    2e9a:	83 ec       	ldi	r24, 0xC3	; 195
    2e9c:	92 e0       	ldi	r25, 0x02	; 2
    2e9e:	9f 93       	push	r25
    2ea0:	8f 93       	push	r24
    2ea2:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
if(pid==NRK_IDLE_TASK_ID)
    2ea6:	0f 90       	pop	r0
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	11 23       	and	r17, r17
    2eb0:	09 f0       	breq	.+2      	; 0x2eb4 <nrk_stats_display_pid+0x48>
    2eb2:	52 c0       	rjmp	.+164    	; 0x2f58 <nrk_stats_display_pid+0xec>
   {
	nrk_kprintf( PSTR( "\r\n   Total System Uptime: "));
    2eb4:	87 ec       	ldi	r24, 0xC7	; 199
    2eb6:	91 e0       	ldi	r25, 0x01	; 1
    2eb8:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
	nrk_time_get(&t);	
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	01 96       	adiw	r24, 0x01	; 1
    2ec0:	0e 94 ef 23 	call	0x47de	; 0x47de <nrk_time_get>
	printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    2ec4:	6d 81       	ldd	r22, Y+5	; 0x05
    2ec6:	7e 81       	ldd	r23, Y+6	; 0x06
    2ec8:	8f 81       	ldd	r24, Y+7	; 0x07
    2eca:	98 85       	ldd	r25, Y+8	; 0x08
    2ecc:	20 e4       	ldi	r18, 0x40	; 64
    2ece:	32 e4       	ldi	r19, 0x42	; 66
    2ed0:	4f e0       	ldi	r20, 0x0F	; 15
    2ed2:	50 e0       	ldi	r21, 0x00	; 0
    2ed4:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <__udivmodsi4>
    2ed8:	5f 93       	push	r21
    2eda:	4f 93       	push	r20
    2edc:	3f 93       	push	r19
    2ede:	2f 93       	push	r18
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee4:	ab 81       	ldd	r26, Y+3	; 0x03
    2ee6:	bc 81       	ldd	r27, Y+4	; 0x04
    2ee8:	bf 93       	push	r27
    2eea:	af 93       	push	r26
    2eec:	9f 93       	push	r25
    2eee:	8f 93       	push	r24
    2ef0:	06 ec       	ldi	r16, 0xC6	; 198
    2ef2:	12 e0       	ldi	r17, 0x02	; 2
    2ef4:	1f 93       	push	r17
    2ef6:	0f 93       	push	r16
    2ef8:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
	nrk_kprintf( PSTR( "\r\n   Idle Task Deep Sleep Time: "));
    2efc:	86 ea       	ldi	r24, 0xA6	; 166
    2efe:	91 e0       	ldi	r25, 0x01	; 1
    2f00:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
	//t=_nrk_ticks_to_time(_nrk_stats_sleep_time);
	//printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
	printf( "%lu secs %lu ms", _nrk_stats_sleep_time.secs, _nrk_stats_sleep_time.nano_secs/NANOS_PER_MS);
    2f04:	60 91 54 04 	lds	r22, 0x0454
    2f08:	70 91 55 04 	lds	r23, 0x0455
    2f0c:	80 91 56 04 	lds	r24, 0x0456
    2f10:	90 91 57 04 	lds	r25, 0x0457
    2f14:	20 e4       	ldi	r18, 0x40	; 64
    2f16:	32 e4       	ldi	r19, 0x42	; 66
    2f18:	4f e0       	ldi	r20, 0x0F	; 15
    2f1a:	50 e0       	ldi	r21, 0x00	; 0
    2f1c:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <__udivmodsi4>
    2f20:	5f 93       	push	r21
    2f22:	4f 93       	push	r20
    2f24:	3f 93       	push	r19
    2f26:	2f 93       	push	r18
    2f28:	80 91 50 04 	lds	r24, 0x0450
    2f2c:	90 91 51 04 	lds	r25, 0x0451
    2f30:	a0 91 52 04 	lds	r26, 0x0452
    2f34:	b0 91 53 04 	lds	r27, 0x0453
    2f38:	bf 93       	push	r27
    2f3a:	af 93       	push	r26
    2f3c:	9f 93       	push	r25
    2f3e:	8f 93       	push	r24
    2f40:	1f 93       	push	r17
    2f42:	0f 93       	push	r16
    2f44:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
    2f48:	8d b7       	in	r24, 0x3d	; 61
    2f4a:	9e b7       	in	r25, 0x3e	; 62
    2f4c:	44 96       	adiw	r24, 0x14	; 20
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	9e bf       	out	0x3e, r25	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	8d bf       	out	0x3d, r24	; 61
   } 
	nrk_kprintf( PSTR( "\r\n   Total CPU: "));
    2f58:	85 e9       	ldi	r24, 0x95	; 149
    2f5a:	91 e0       	ldi	r25, 0x01	; 1
    2f5c:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
	t=_nrk_ticks_to_time(cur_task_stats[pid].total_ticks);
    2f60:	c7 01       	movw	r24, r14
    2f62:	88 0f       	add	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	f7 01       	movw	r30, r14
    2f68:	45 e0       	ldi	r20, 0x05	; 5
    2f6a:	ee 0f       	add	r30, r30
    2f6c:	ff 1f       	adc	r31, r31
    2f6e:	4a 95       	dec	r20
    2f70:	e1 f7       	brne	.-8      	; 0x2f6a <nrk_stats_display_pid+0xfe>
    2f72:	e8 1b       	sub	r30, r24
    2f74:	f9 0b       	sbc	r31, r25
    2f76:	ed 57       	subi	r30, 0x7D	; 125
    2f78:	fa 4f       	sbci	r31, 0xFA	; 250
    2f7a:	60 81       	ld	r22, Z
    2f7c:	71 81       	ldd	r23, Z+1	; 0x01
    2f7e:	82 81       	ldd	r24, Z+2	; 0x02
    2f80:	93 81       	ldd	r25, Z+3	; 0x03
    2f82:	0e 94 0b 23 	call	0x4616	; 0x4616 <_nrk_ticks_to_time>
    2f86:	29 87       	std	Y+9, r18	; 0x09
    2f88:	3a 87       	std	Y+10, r19	; 0x0a
    2f8a:	4b 87       	std	Y+11, r20	; 0x0b
    2f8c:	5c 87       	std	Y+12, r21	; 0x0c
    2f8e:	6d 87       	std	Y+13, r22	; 0x0d
    2f90:	7e 87       	std	Y+14, r23	; 0x0e
    2f92:	8f 87       	std	Y+15, r24	; 0x0f
    2f94:	98 8b       	std	Y+16, r25	; 0x10
    2f96:	de 01       	movw	r26, r28
    2f98:	11 96       	adiw	r26, 0x01	; 1
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	39 96       	adiw	r30, 0x09	; 9
    2f9e:	88 e0       	ldi	r24, 0x08	; 8
    2fa0:	01 90       	ld	r0, Z+
    2fa2:	0d 92       	st	X+, r0
    2fa4:	81 50       	subi	r24, 0x01	; 1
    2fa6:	e1 f7       	brne	.-8      	; 0x2fa0 <nrk_stats_display_pid+0x134>
	printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    2fa8:	6d 81       	ldd	r22, Y+5	; 0x05
    2faa:	7e 81       	ldd	r23, Y+6	; 0x06
    2fac:	8f 81       	ldd	r24, Y+7	; 0x07
    2fae:	98 85       	ldd	r25, Y+8	; 0x08
    2fb0:	20 e4       	ldi	r18, 0x40	; 64
    2fb2:	32 e4       	ldi	r19, 0x42	; 66
    2fb4:	4f e0       	ldi	r20, 0x0F	; 15
    2fb6:	50 e0       	ldi	r21, 0x00	; 0
    2fb8:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <__udivmodsi4>
    2fbc:	5f 93       	push	r21
    2fbe:	4f 93       	push	r20
    2fc0:	3f 93       	push	r19
    2fc2:	2f 93       	push	r18
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc8:	ab 81       	ldd	r26, Y+3	; 0x03
    2fca:	bc 81       	ldd	r27, Y+4	; 0x04
    2fcc:	bf 93       	push	r27
    2fce:	af 93       	push	r26
    2fd0:	9f 93       	push	r25
    2fd2:	8f 93       	push	r24
    2fd4:	86 ec       	ldi	r24, 0xC6	; 198
    2fd6:	92 e0       	ldi	r25, 0x02	; 2
    2fd8:	9f 93       	push	r25
    2fda:	8f 93       	push	r24
    2fdc:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
	nrk_kprintf( PSTR( "\r\n   Time [Min,Last,Max]: "));
    2fe0:	8a e7       	ldi	r24, 0x7A	; 122
    2fe2:	91 e0       	ldi	r25, 0x01	; 1
    2fe4:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
	t=_nrk_ticks_to_time(cur_task_stats[pid].min_exec_ticks);
    2fe8:	c7 01       	movw	r24, r14
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	f7 01       	movw	r30, r14
    2ff0:	25 e0       	ldi	r18, 0x05	; 5
    2ff2:	ee 0f       	add	r30, r30
    2ff4:	ff 1f       	adc	r31, r31
    2ff6:	2a 95       	dec	r18
    2ff8:	e1 f7       	brne	.-8      	; 0x2ff2 <nrk_stats_display_pid+0x186>
    2ffa:	e8 1b       	sub	r30, r24
    2ffc:	f9 0b       	sbc	r31, r25
    2ffe:	ed 57       	subi	r30, 0x7D	; 125
    3000:	fa 4f       	sbci	r31, 0xFA	; 250
    3002:	64 81       	ldd	r22, Z+4	; 0x04
    3004:	75 81       	ldd	r23, Z+5	; 0x05
    3006:	86 81       	ldd	r24, Z+6	; 0x06
    3008:	97 81       	ldd	r25, Z+7	; 0x07
    300a:	0e 94 0b 23 	call	0x4616	; 0x4616 <_nrk_ticks_to_time>
    300e:	29 87       	std	Y+9, r18	; 0x09
    3010:	3a 87       	std	Y+10, r19	; 0x0a
    3012:	4b 87       	std	Y+11, r20	; 0x0b
    3014:	5c 87       	std	Y+12, r21	; 0x0c
    3016:	6d 87       	std	Y+13, r22	; 0x0d
    3018:	7e 87       	std	Y+14, r23	; 0x0e
    301a:	8f 87       	std	Y+15, r24	; 0x0f
    301c:	98 8b       	std	Y+16, r25	; 0x10
    301e:	de 01       	movw	r26, r28
    3020:	11 96       	adiw	r26, 0x01	; 1
    3022:	fe 01       	movw	r30, r28
    3024:	39 96       	adiw	r30, 0x09	; 9
    3026:	88 e0       	ldi	r24, 0x08	; 8
    3028:	01 90       	ld	r0, Z+
    302a:	0d 92       	st	X+, r0
    302c:	81 50       	subi	r24, 0x01	; 1
    302e:	e1 f7       	brne	.-8      	; 0x3028 <nrk_stats_display_pid+0x1bc>
	printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
    3030:	6d 81       	ldd	r22, Y+5	; 0x05
    3032:	7e 81       	ldd	r23, Y+6	; 0x06
    3034:	8f 81       	ldd	r24, Y+7	; 0x07
    3036:	98 85       	ldd	r25, Y+8	; 0x08
    3038:	20 e4       	ldi	r18, 0x40	; 64
    303a:	32 e4       	ldi	r19, 0x42	; 66
    303c:	4f e0       	ldi	r20, 0x0F	; 15
    303e:	50 e0       	ldi	r21, 0x00	; 0
    3040:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <__udivmodsi4>
    3044:	5f 93       	push	r21
    3046:	4f 93       	push	r20
    3048:	3f 93       	push	r19
    304a:	2f 93       	push	r18
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	9a 81       	ldd	r25, Y+2	; 0x02
    3050:	ab 81       	ldd	r26, Y+3	; 0x03
    3052:	bc 81       	ldd	r27, Y+4	; 0x04
    3054:	bf 93       	push	r27
    3056:	af 93       	push	r26
    3058:	9f 93       	push	r25
    305a:	8f 93       	push	r24
    305c:	86 ed       	ldi	r24, 0xD6	; 214
    305e:	92 e0       	ldi	r25, 0x02	; 2
    3060:	9f 93       	push	r25
    3062:	8f 93       	push	r24
    3064:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
	t=_nrk_ticks_to_time(cur_task_stats[pid].last_exec_ticks);
    3068:	c7 01       	movw	r24, r14
    306a:	88 0f       	add	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	f7 01       	movw	r30, r14
    3070:	15 e0       	ldi	r17, 0x05	; 5
    3072:	ee 0f       	add	r30, r30
    3074:	ff 1f       	adc	r31, r31
    3076:	1a 95       	dec	r17
    3078:	e1 f7       	brne	.-8      	; 0x3072 <nrk_stats_display_pid+0x206>
    307a:	e8 1b       	sub	r30, r24
    307c:	f9 0b       	sbc	r31, r25
    307e:	ed 57       	subi	r30, 0x7D	; 125
    3080:	fa 4f       	sbci	r31, 0xFA	; 250
    3082:	64 85       	ldd	r22, Z+12	; 0x0c
    3084:	75 85       	ldd	r23, Z+13	; 0x0d
    3086:	86 85       	ldd	r24, Z+14	; 0x0e
    3088:	97 85       	ldd	r25, Z+15	; 0x0f
    308a:	0e 94 0b 23 	call	0x4616	; 0x4616 <_nrk_ticks_to_time>
    308e:	29 87       	std	Y+9, r18	; 0x09
    3090:	3a 87       	std	Y+10, r19	; 0x0a
    3092:	4b 87       	std	Y+11, r20	; 0x0b
    3094:	5c 87       	std	Y+12, r21	; 0x0c
    3096:	6d 87       	std	Y+13, r22	; 0x0d
    3098:	7e 87       	std	Y+14, r23	; 0x0e
    309a:	8f 87       	std	Y+15, r24	; 0x0f
    309c:	98 8b       	std	Y+16, r25	; 0x10
    309e:	de 01       	movw	r26, r28
    30a0:	11 96       	adiw	r26, 0x01	; 1
    30a2:	fe 01       	movw	r30, r28
    30a4:	39 96       	adiw	r30, 0x09	; 9
    30a6:	88 e0       	ldi	r24, 0x08	; 8
    30a8:	01 90       	ld	r0, Z+
    30aa:	0d 92       	st	X+, r0
    30ac:	81 50       	subi	r24, 0x01	; 1
    30ae:	e1 f7       	brne	.-8      	; 0x30a8 <nrk_stats_display_pid+0x23c>
	printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
    30b0:	6d 81       	ldd	r22, Y+5	; 0x05
    30b2:	7e 81       	ldd	r23, Y+6	; 0x06
    30b4:	8f 81       	ldd	r24, Y+7	; 0x07
    30b6:	98 85       	ldd	r25, Y+8	; 0x08
    30b8:	20 e4       	ldi	r18, 0x40	; 64
    30ba:	32 e4       	ldi	r19, 0x42	; 66
    30bc:	4f e0       	ldi	r20, 0x0F	; 15
    30be:	50 e0       	ldi	r21, 0x00	; 0
    30c0:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <__udivmodsi4>
    30c4:	5f 93       	push	r21
    30c6:	4f 93       	push	r20
    30c8:	3f 93       	push	r19
    30ca:	2f 93       	push	r18
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	9a 81       	ldd	r25, Y+2	; 0x02
    30d0:	ab 81       	ldd	r26, Y+3	; 0x03
    30d2:	bc 81       	ldd	r27, Y+4	; 0x04
    30d4:	bf 93       	push	r27
    30d6:	af 93       	push	r26
    30d8:	9f 93       	push	r25
    30da:	8f 93       	push	r24
    30dc:	86 ed       	ldi	r24, 0xD6	; 214
    30de:	92 e0       	ldi	r25, 0x02	; 2
    30e0:	9f 93       	push	r25
    30e2:	8f 93       	push	r24
    30e4:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
	t=_nrk_ticks_to_time(cur_task_stats[pid].max_exec_ticks);
    30e8:	c7 01       	movw	r24, r14
    30ea:	88 0f       	add	r24, r24
    30ec:	99 1f       	adc	r25, r25
    30ee:	f7 01       	movw	r30, r14
    30f0:	a5 e0       	ldi	r26, 0x05	; 5
    30f2:	ee 0f       	add	r30, r30
    30f4:	ff 1f       	adc	r31, r31
    30f6:	aa 95       	dec	r26
    30f8:	e1 f7       	brne	.-8      	; 0x30f2 <nrk_stats_display_pid+0x286>
    30fa:	e8 1b       	sub	r30, r24
    30fc:	f9 0b       	sbc	r31, r25
    30fe:	ed 57       	subi	r30, 0x7D	; 125
    3100:	fa 4f       	sbci	r31, 0xFA	; 250
    3102:	60 85       	ldd	r22, Z+8	; 0x08
    3104:	71 85       	ldd	r23, Z+9	; 0x09
    3106:	82 85       	ldd	r24, Z+10	; 0x0a
    3108:	93 85       	ldd	r25, Z+11	; 0x0b
    310a:	0e 94 0b 23 	call	0x4616	; 0x4616 <_nrk_ticks_to_time>
    310e:	29 87       	std	Y+9, r18	; 0x09
    3110:	3a 87       	std	Y+10, r19	; 0x0a
    3112:	4b 87       	std	Y+11, r20	; 0x0b
    3114:	5c 87       	std	Y+12, r21	; 0x0c
    3116:	6d 87       	std	Y+13, r22	; 0x0d
    3118:	7e 87       	std	Y+14, r23	; 0x0e
    311a:	8f 87       	std	Y+15, r24	; 0x0f
    311c:	98 8b       	std	Y+16, r25	; 0x10
    311e:	de 01       	movw	r26, r28
    3120:	11 96       	adiw	r26, 0x01	; 1
    3122:	fe 01       	movw	r30, r28
    3124:	39 96       	adiw	r30, 0x09	; 9
    3126:	88 e0       	ldi	r24, 0x08	; 8
    3128:	01 90       	ld	r0, Z+
    312a:	0d 92       	st	X+, r0
    312c:	81 50       	subi	r24, 0x01	; 1
    312e:	e1 f7       	brne	.-8      	; 0x3128 <nrk_stats_display_pid+0x2bc>
	printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    3130:	6d 81       	ldd	r22, Y+5	; 0x05
    3132:	7e 81       	ldd	r23, Y+6	; 0x06
    3134:	8f 81       	ldd	r24, Y+7	; 0x07
    3136:	98 85       	ldd	r25, Y+8	; 0x08
    3138:	20 e4       	ldi	r18, 0x40	; 64
    313a:	32 e4       	ldi	r19, 0x42	; 66
    313c:	4f e0       	ldi	r20, 0x0F	; 15
    313e:	50 e0       	ldi	r21, 0x00	; 0
    3140:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <__udivmodsi4>
    3144:	5f 93       	push	r21
    3146:	4f 93       	push	r20
    3148:	3f 93       	push	r19
    314a:	2f 93       	push	r18
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	9a 81       	ldd	r25, Y+2	; 0x02
    3150:	ab 81       	ldd	r26, Y+3	; 0x03
    3152:	bc 81       	ldd	r27, Y+4	; 0x04
    3154:	bf 93       	push	r27
    3156:	af 93       	push	r26
    3158:	9f 93       	push	r25
    315a:	8f 93       	push	r24
    315c:	86 ec       	ldi	r24, 0xC6	; 198
    315e:	92 e0       	ldi	r25, 0x02	; 2
    3160:	9f 93       	push	r25
    3162:	8f 93       	push	r24
    3164:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
	nrk_kprintf( PSTR( "\r\n   Swap-ins: "));
    3168:	ed b7       	in	r30, 0x3d	; 61
    316a:	fe b7       	in	r31, 0x3e	; 62
    316c:	b8 96       	adiw	r30, 0x28	; 40
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	fe bf       	out	0x3e, r31	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	ed bf       	out	0x3d, r30	; 61
    3178:	8a e6       	ldi	r24, 0x6A	; 106
    317a:	91 e0       	ldi	r25, 0x01	; 1
    317c:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
	printf( "%lu",cur_task_stats[pid].swapped_in );
    3180:	87 01       	movw	r16, r14
    3182:	75 e0       	ldi	r23, 0x05	; 5
    3184:	00 0f       	add	r16, r16
    3186:	11 1f       	adc	r17, r17
    3188:	7a 95       	dec	r23
    318a:	e1 f7       	brne	.-8      	; 0x3184 <nrk_stats_display_pid+0x318>
    318c:	ee 0c       	add	r14, r14
    318e:	ff 1c       	adc	r15, r15
    3190:	0e 19       	sub	r16, r14
    3192:	1f 09       	sbc	r17, r15
    3194:	0d 57       	subi	r16, 0x7D	; 125
    3196:	1a 4f       	sbci	r17, 0xFA	; 250
    3198:	f8 01       	movw	r30, r16
    319a:	80 89       	ldd	r24, Z+16	; 0x10
    319c:	91 89       	ldd	r25, Z+17	; 0x11
    319e:	a2 89       	ldd	r26, Z+18	; 0x12
    31a0:	b3 89       	ldd	r27, Z+19	; 0x13
    31a2:	bf 93       	push	r27
    31a4:	af 93       	push	r26
    31a6:	9f 93       	push	r25
    31a8:	8f 93       	push	r24
    31aa:	58 ee       	ldi	r21, 0xE8	; 232
    31ac:	e5 2e       	mov	r14, r21
    31ae:	52 e0       	ldi	r21, 0x02	; 2
    31b0:	f5 2e       	mov	r15, r21
    31b2:	ff 92       	push	r15
    31b4:	ef 92       	push	r14
    31b6:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
	nrk_kprintf( PSTR( "\r\n   Preemptions: "));
    31ba:	87 e5       	ldi	r24, 0x57	; 87
    31bc:	91 e0       	ldi	r25, 0x01	; 1
    31be:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
	printf( "%lu",cur_task_stats[pid].preempted);
    31c2:	f8 01       	movw	r30, r16
    31c4:	80 8d       	ldd	r24, Z+24	; 0x18
    31c6:	91 8d       	ldd	r25, Z+25	; 0x19
    31c8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    31ca:	b3 8d       	ldd	r27, Z+27	; 0x1b
    31cc:	bf 93       	push	r27
    31ce:	af 93       	push	r26
    31d0:	9f 93       	push	r25
    31d2:	8f 93       	push	r24
    31d4:	ff 92       	push	r15
    31d6:	ef 92       	push	r14
    31d8:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
	nrk_kprintf( PSTR( "\r\n   Kernel Violations: "));
    31dc:	8e e3       	ldi	r24, 0x3E	; 62
    31de:	91 e0       	ldi	r25, 0x01	; 1
    31e0:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
	printf( "%u",cur_task_stats[pid].violations);
    31e4:	f8 01       	movw	r30, r16
    31e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    31e8:	99 27       	eor	r25, r25
    31ea:	9f 93       	push	r25
    31ec:	8f 93       	push	r24
    31ee:	4c ee       	ldi	r20, 0xEC	; 236
    31f0:	e4 2e       	mov	r14, r20
    31f2:	42 e0       	ldi	r20, 0x02	; 2
    31f4:	f4 2e       	mov	r15, r20
    31f6:	ff 92       	push	r15
    31f8:	ef 92       	push	r14
    31fa:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
	nrk_kprintf( PSTR( "\r\n   Overflow Error Status: "));
    31fe:	81 e2       	ldi	r24, 0x21	; 33
    3200:	91 e0       	ldi	r25, 0x01	; 1
    3202:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
	printf( "%u",cur_task_stats[pid].overflow);
    3206:	f8 01       	movw	r30, r16
    3208:	85 8d       	ldd	r24, Z+29	; 0x1d
    320a:	99 27       	eor	r25, r25
    320c:	9f 93       	push	r25
    320e:	8f 93       	push	r24
    3210:	ff 92       	push	r15
    3212:	ef 92       	push	r14
    3214:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
	nrk_kprintf( PSTR("\r\n") );
    3218:	8e e1       	ldi	r24, 0x1E	; 30
    321a:	91 e0       	ldi	r25, 0x01	; 1
    321c:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
    3220:	8d b7       	in	r24, 0x3d	; 61
    3222:	9e b7       	in	r25, 0x3e	; 62
    3224:	44 96       	adiw	r24, 0x14	; 20
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	9e bf       	out	0x3e, r25	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	8d bf       	out	0x3d, r24	; 61
    3230:	60 96       	adiw	r28, 0x10	; 16
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	f8 94       	cli
    3236:	de bf       	out	0x3e, r29	; 62
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	cd bf       	out	0x3d, r28	; 61
    323c:	df 91       	pop	r29
    323e:	cf 91       	pop	r28
    3240:	1f 91       	pop	r17
    3242:	0f 91       	pop	r16
    3244:	ff 90       	pop	r15
    3246:	ef 90       	pop	r14
    3248:	08 95       	ret

0000324a <nrk_stats_display_all>:

}


void nrk_stats_display_all()
{
    324a:	cf 93       	push	r28
    324c:	df 93       	push	r29
uint8_t i;
nrk_kprintf( PSTR( "\r\nNano-RK Task Statistics:\r\n" ));
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	91 e0       	ldi	r25, 0x01	; 1
    3252:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
    3256:	c0 e0       	ldi	r28, 0x00	; 0
    3258:	d0 e0       	ldi	r29, 0x00	; 0

for(i=0; i<NRK_MAX_TASKS; i++ )
	nrk_stats_display_pid(i);
    325a:	8c 2f       	mov	r24, r28
    325c:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <nrk_stats_display_pid>
    3260:	21 96       	adiw	r28, 0x01	; 1
void nrk_stats_display_all()
{
uint8_t i;
nrk_kprintf( PSTR( "\r\nNano-RK Task Statistics:\r\n" ));

for(i=0; i<NRK_MAX_TASKS; i++ )
    3262:	c5 30       	cpi	r28, 0x05	; 5
    3264:	d1 05       	cpc	r29, r1
    3266:	c9 f7       	brne	.-14     	; 0x325a <nrk_stats_display_all+0x10>
    3268:	df 91       	pop	r29
    326a:	cf 91       	pop	r28
    326c:	08 95       	ret

0000326e <_nrk_stats_sleep>:


void _nrk_stats_sleep(uint8_t t)
{
//_nrk_stats_sleep_time+=t;
_nrk_stats_sleep_time.nano_secs+=t*NANOS_PER_TICK;
    326e:	99 27       	eor	r25, r25
    3270:	aa 27       	eor	r26, r26
    3272:	bb 27       	eor	r27, r27
    3274:	bc 01       	movw	r22, r24
    3276:	cd 01       	movw	r24, r26
    3278:	23 eb       	ldi	r18, 0xB3	; 179
    327a:	36 ee       	ldi	r19, 0xE6	; 230
    327c:	4e e0       	ldi	r20, 0x0E	; 14
    327e:	50 e0       	ldi	r21, 0x00	; 0
    3280:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsi3>
    3284:	20 91 54 04 	lds	r18, 0x0454
    3288:	30 91 55 04 	lds	r19, 0x0455
    328c:	40 91 56 04 	lds	r20, 0x0456
    3290:	50 91 57 04 	lds	r21, 0x0457
    3294:	26 0f       	add	r18, r22
    3296:	37 1f       	adc	r19, r23
    3298:	48 1f       	adc	r20, r24
    329a:	59 1f       	adc	r21, r25
    329c:	20 93 54 04 	sts	0x0454, r18
    32a0:	30 93 55 04 	sts	0x0455, r19
    32a4:	40 93 56 04 	sts	0x0456, r20
    32a8:	50 93 57 04 	sts	0x0457, r21
nrk_time_compact_nanos(&_nrk_stats_sleep_time);
    32ac:	80 e5       	ldi	r24, 0x50	; 80
    32ae:	94 e0       	ldi	r25, 0x04	; 4
    32b0:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_time_compact_nanos>
    32b4:	08 95       	ret

000032b6 <_nrk_errno_set>:
#include <nrk_stats.h>


NRK_STK Stack1[NRK_APP_STACKSIZE];
nrk_task_type TaskOne;
void Task1(void);
    32b6:	e0 91 15 08 	lds	r30, 0x0815
    32ba:	f0 91 16 08 	lds	r31, 0x0816
    32be:	84 87       	std	Z+12, r24	; 0x0c
    32c0:	08 95       	ret

000032c2 <nrk_errno_get>:

NRK_STK Stack2[NRK_APP_STACKSIZE];
nrk_task_type TaskTwo;
void Task2 (void);
    32c2:	e0 91 15 08 	lds	r30, 0x0815
    32c6:	f0 91 16 08 	lds	r31, 0x0816
    32ca:	84 85       	ldd	r24, Z+12	; 0x0c

NRK_STK Stack3[NRK_APP_STACKSIZE];
    32cc:	99 27       	eor	r25, r25
    32ce:	08 95       	ret

000032d0 <nrk_error_get>:

  nrk_led_clr(ORANGE_LED);
  nrk_led_clr(BLUE_LED);
  nrk_led_clr(GREEN_LED);
  nrk_led_clr(RED_LED);
 
    32d0:	dc 01       	movw	r26, r24
    32d2:	fb 01       	movw	r30, r22
  nrk_time_set(0,0);
    32d4:	80 91 19 06 	lds	r24, 0x0619
    32d8:	88 23       	and	r24, r24
    32da:	19 f4       	brne	.+6      	; 0x32e2 <nrk_error_get+0x12>
    32dc:	80 e0       	ldi	r24, 0x00	; 0
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	08 95       	ret
  nrk_create_taskset ();
  nrk_start();
    32e2:	80 83       	st	Z, r24
  
    32e4:	80 91 2b 04 	lds	r24, 0x042B
    32e8:	8c 93       	st	X, r24
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	90 e0       	ldi	r25, 0x00	; 0
  return 0;
}
    32ee:	08 95       	ret

000032f0 <nrk_error_print>:

void Task1()
{
    32f0:	1f 93       	push	r17
nrk_time_t t;
uint16_t cnt;
    32f2:	80 91 19 06 	lds	r24, 0x0619
    32f6:	88 23       	and	r24, r24
    32f8:	19 f4       	brne	.+6      	; 0x3300 <nrk_error_print+0x10>
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	88 c0       	rjmp	.+272    	; 0x3410 <nrk_error_print+0x120>
	
	//printf("current TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	/*do{
		cur_TCNT2 = _nrk_os_timer_get();		
	}while(cur_TCNT2!=100);
	printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);*/
    3300:	89 ea       	ldi	r24, 0xA9	; 169
    3302:	93 e0       	ldi	r25, 0x03	; 3
    3304:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
	//_nrk_os_timer_set(40);// time escape 100ms
    3308:	80 91 2b 04 	lds	r24, 0x042B
    330c:	99 27       	eor	r25, r25
    330e:	9f 93       	push	r25
    3310:	8f 93       	push	r24
    3312:	8f ee       	ldi	r24, 0xEF	; 239
    3314:	92 e0       	ldi	r25, 0x02	; 2
    3316:	9f 93       	push	r25
    3318:	8f 93       	push	r24
    331a:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
	/*while(cnt++<=10)
    331e:	85 ea       	ldi	r24, 0xA5	; 165
    3320:	93 e0       	ldi	r25, 0x03	; 3
    3322:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
	{
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	80 91 19 06 	lds	r24, 0x0619
    3332:	84 31       	cpi	r24, 0x14	; 20
    3334:	10 f0       	brcs	.+4      	; 0x333a <nrk_error_print+0x4a>
		while(_nrk_high_speed_timer_get()<50000);
    3336:	10 92 19 06 	sts	0x0619, r1
		_nrk_high_speed_timer_reset();
    333a:	80 91 19 06 	lds	r24, 0x0619
    333e:	99 27       	eor	r25, r25
    3340:	aa 27       	eor	r26, r26
    3342:	bb 27       	eor	r27, r27
    3344:	fc 01       	movw	r30, r24
    3346:	31 97       	sbiw	r30, 0x01	; 1
    3348:	e2 31       	cpi	r30, 0x12	; 18
    334a:	f1 05       	cpc	r31, r1
    334c:	f0 f5       	brcc	.+124    	; 0x33ca <nrk_error_print+0xda>
    334e:	ea 59       	subi	r30, 0x9A	; 154
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	ee 0f       	add	r30, r30
    3354:	ff 1f       	adc	r31, r31
    3356:	05 90       	lpm	r0, Z+
    3358:	f4 91       	lpm	r31, Z
    335a:	e0 2d       	mov	r30, r0
    335c:	09 94       	ijmp
	}*/
	_nrk_high_speed_timer_reset();
	//_nrk_os_timer_reset();
    335e:	8e e7       	ldi	r24, 0x7E	; 126
    3360:	93 e0       	ldi	r25, 0x03	; 3
    3362:	35 c0       	rjmp	.+106    	; 0x33ce <nrk_error_print+0xde>
	//printf("1st TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//wait_high_time = _nrk_high_speed_timer_get() + 2577;
	do{}while(TCNT1<2577);
    3364:	8a e6       	ldi	r24, 0x6A	; 106
    3366:	93 e0       	ldi	r25, 0x03	; 3
    3368:	32 c0       	rjmp	.+100    	; 0x33ce <nrk_error_print+0xde>
	//nrk_high_speed_timer_wait(,2577);//time escape 0.5ms
	//printf("2nd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//_nrk_high_speed_timer_reset();
    336a:	84 e5       	ldi	r24, 0x54	; 84
    336c:	93 e0       	ldi	r25, 0x03	; 3
    336e:	2f c0       	rjmp	.+94     	; 0x33ce <nrk_error_print+0xde>
	//printf("3rd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	_nrk_os_timer_set(20);
	//printf("TCNT1 is %d cnt is %d.\n\r",_nrk_high_speed_timer_get(),cnt);
    3370:	89 e3       	ldi	r24, 0x39	; 57
    3372:	93 e0       	ldi	r25, 0x03	; 3
    3374:	2c c0       	rjmp	.+88     	; 0x33ce <nrk_error_print+0xde>
	nrk_gpio_clr(NRK_DEBUG_0);
	nrk_wait_until_next_period();
	
    3376:	83 e2       	ldi	r24, 0x23	; 35
    3378:	93 e0       	ldi	r25, 0x03	; 3
    337a:	29 c0       	rjmp	.+82     	; 0x33ce <nrk_error_print+0xde>
        // Uncomment this line to cause a stack overflow
	// if(cnt>20) kill_stack(10);

    337c:	8b e0       	ldi	r24, 0x0B	; 11
    337e:	93 e0       	ldi	r25, 0x03	; 3
    3380:	26 c0       	rjmp	.+76     	; 0x33ce <nrk_error_print+0xde>
	// At time 50, the OS will halt and print statistics
	// This requires the NRK_STATS_TRACKER #define in nrk_cfg.h
	// if(cnt==50)  {
    3382:	88 ef       	ldi	r24, 0xF8	; 248
    3384:	92 e0       	ldi	r25, 0x02	; 2
    3386:	23 c0       	rjmp	.+70     	; 0x33ce <nrk_error_print+0xde>
	//	nrk_stats_display_all();
	//	nrk_halt();
	//	}
    3388:	85 ee       	ldi	r24, 0xE5	; 229
    338a:	92 e0       	ldi	r25, 0x02	; 2
    338c:	20 c0       	rjmp	.+64     	; 0x33ce <nrk_error_print+0xde>

	cnt=0;
	//cnt++;
    338e:	87 ec       	ldi	r24, 0xC7	; 199
    3390:	92 e0       	ldi	r25, 0x02	; 2
    3392:	1d c0       	rjmp	.+58     	; 0x33ce <nrk_error_print+0xde>
	}
}

    3394:	82 ea       	ldi	r24, 0xA2	; 162
    3396:	92 e0       	ldi	r25, 0x02	; 2
    3398:	1a c0       	rjmp	.+52     	; 0x33ce <nrk_error_print+0xde>
void Task2()
{
  int16_t cnt;
    339a:	86 e9       	ldi	r24, 0x96	; 150
    339c:	92 e0       	ldi	r25, 0x02	; 2
    339e:	17 c0       	rjmp	.+46     	; 0x33ce <nrk_error_print+0xde>
  printf( "Task2 PID=%u\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
    33a0:	8b e7       	ldi	r24, 0x7B	; 123
    33a2:	92 e0       	ldi	r25, 0x02	; 2
    33a4:	14 c0       	rjmp	.+40     	; 0x33ce <nrk_error_print+0xde>
	nrk_led_toggle(BLUE_LED);
	nrk_gpio_toggle(NRK_DEBUG_1);
	printf( "Task2 signed cnt=%d\r\n",cnt );
    33a6:	8c e6       	ldi	r24, 0x6C	; 108
    33a8:	92 e0       	ldi	r25, 0x02	; 2
    33aa:	11 c0       	rjmp	.+34     	; 0x33ce <nrk_error_print+0xde>
	nrk_wait_until_next_period();
	//nrk_stats_display_pid(nrk_get_pid());
	cnt--;
    33ac:	8b e5       	ldi	r24, 0x5B	; 91
    33ae:	92 e0       	ldi	r25, 0x02	; 2
    33b0:	0e c0       	rjmp	.+28     	; 0x33ce <nrk_error_print+0xde>
	}
}

    33b2:	87 e4       	ldi	r24, 0x47	; 71
    33b4:	92 e0       	ldi	r25, 0x02	; 2
    33b6:	0b c0       	rjmp	.+22     	; 0x33ce <nrk_error_print+0xde>
void Task3()
{
uint16_t cnt;
    33b8:	87 e2       	ldi	r24, 0x27	; 39
    33ba:	92 e0       	ldi	r25, 0x02	; 2
    33bc:	08 c0       	rjmp	.+16     	; 0x33ce <nrk_error_print+0xde>
  printf( "Task3 PID=%u\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
    33be:	8f e0       	ldi	r24, 0x0F	; 15
    33c0:	92 e0       	ldi	r25, 0x02	; 2
    33c2:	05 c0       	rjmp	.+10     	; 0x33ce <nrk_error_print+0xde>
	nrk_led_toggle(GREEN_LED);
	nrk_gpio_toggle(NRK_DEBUG_2);
	printf( "Task3 cnt=%u\r\n",cnt );
    33c4:	84 ef       	ldi	r24, 0xF4	; 244
    33c6:	91 e0       	ldi	r25, 0x01	; 1
    33c8:	02 c0       	rjmp	.+4      	; 0x33ce <nrk_error_print+0xde>
	nrk_wait_until_next_period();
	cnt++;
	}
    33ca:	8d ee       	ldi	r24, 0xED	; 237
    33cc:	91 e0       	ldi	r25, 0x01	; 1
    33ce:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
}

    33d2:	60 91 40 08 	lds	r22, 0x0840
    33d6:	70 91 41 08 	lds	r23, 0x0841
    33da:	8d e0       	ldi	r24, 0x0D	; 13
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <fputc>
void Task4()
    33e2:	60 91 40 08 	lds	r22, 0x0840
    33e6:	70 91 41 08 	lds	r23, 0x0841
    33ea:	8a e0       	ldi	r24, 0x0A	; 10
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <fputc>
{
uint16_t cnt;

  printf( "Task4 PID=%u\r\n",nrk_get_pid());
    33f2:	80 91 19 06 	lds	r24, 0x0619
    33f6:	80 31       	cpi	r24, 0x10	; 16
    33f8:	29 f0       	breq	.+10     	; 0x3404 <nrk_error_print+0x114>
  cnt=0;
  while(1) {
    33fa:	0e 94 1d 2a 	call	0x543a	; 0x543a <nrk_watchdog_enable>
	nrk_led_toggle(RED_LED);
    33fe:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>
    3402:	ff cf       	rjmp	.-2      	; 0x3402 <nrk_error_print+0x112>
  TaskTwo.FirstActivation = TRUE;
  TaskTwo.Type = BASIC_TASK;
  TaskTwo.SchType = PREEMPTIVE;
  TaskTwo.period.secs = 0;
  TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
  TaskTwo.cpu_reserve.secs = 0;
    3404:	10 92 19 06 	sts	0x0619, r1
  TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
    3408:	81 2f       	mov	r24, r17
    340a:	99 27       	eor	r25, r25
    340c:	87 fd       	sbrc	r24, 7
    340e:	90 95       	com	r25
    3410:	1f 91       	pop	r17
    3412:	08 95       	ret

00003414 <nrk_kernel_error_add>:

void nrk_create_taskset();
uint8_t kill_stack(uint8_t val);

int
main ()
    3414:	80 93 19 06 	sts	0x0619, r24
{
    3418:	60 93 2b 04 	sts	0x042B, r22
  nrk_setup_ports();
  nrk_setup_uart(UART_BAUDRATE_115K2);

    341c:	0e 94 78 19 	call	0x32f0	; 0x32f0 <nrk_error_print>
    3420:	08 95       	ret

00003422 <nrk_error_add>:

NRK_STK Stack3[NRK_APP_STACKSIZE];
nrk_task_type TaskThree;
void Task3 (void);


    3422:	80 93 19 06 	sts	0x0619, r24
NRK_STK Stack4[NRK_APP_STACKSIZE];
    3426:	e0 91 15 08 	lds	r30, 0x0815
    342a:	f0 91 16 08 	lds	r31, 0x0816
    342e:	80 85       	ldd	r24, Z+8	; 0x08
    3430:	80 93 2b 04 	sts	0x042B, r24
nrk_task_type TaskFour;
void Task4 (void);

    3434:	0e 94 78 19 	call	0x32f0	; 0x32f0 <nrk_error_print>
    3438:	08 95       	ret

0000343a <nrk_stack_check_pid>:
	/*while(cnt++<=10)
	{
		while(_nrk_high_speed_timer_get()<50000);
		_nrk_high_speed_timer_reset();
	}*/
	_nrk_high_speed_timer_reset();
    343a:	99 27       	eor	r25, r25
    343c:	87 fd       	sbrc	r24, 7
    343e:	90 95       	com	r25
    3440:	fc 01       	movw	r30, r24
    3442:	25 e0       	ldi	r18, 0x05	; 5
    3444:	ee 0f       	add	r30, r30
    3446:	ff 1f       	adc	r31, r31
    3448:	2a 95       	dec	r18
    344a:	e1 f7       	brne	.-8      	; 0x3444 <nrk_stack_check_pid+0xa>
    344c:	e8 0f       	add	r30, r24
    344e:	f9 1f       	adc	r31, r25
    3450:	e6 5a       	subi	r30, 0xA6	; 166
    3452:	f8 4f       	sbci	r31, 0xF8	; 248
    3454:	a2 81       	ldd	r26, Z+2	; 0x02
    3456:	b3 81       	ldd	r27, Z+3	; 0x03
	//_nrk_os_timer_reset();
	//printf("1st TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
    3458:	8c 91       	ld	r24, X
    345a:	85 35       	cpi	r24, 0x55	; 85
    345c:	29 f0       	breq	.+10     	; 0x3468 <nrk_stack_check_pid+0x2e>
	//wait_high_time = _nrk_high_speed_timer_get() + 2577;
    345e:	85 e5       	ldi	r24, 0x55	; 85
    3460:	8c 93       	st	X, r24
    3462:	8f ef       	ldi	r24, 0xFF	; 255
    3464:	9f ef       	ldi	r25, 0xFF	; 255
    3466:	08 95       	ret
	do{}while(TCNT1<2577);
	//nrk_high_speed_timer_wait(,2577);//time escape 0.5ms
	//printf("2nd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//_nrk_high_speed_timer_reset();
	//printf("3rd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
    3468:	80 81       	ld	r24, Z
    346a:	91 81       	ldd	r25, Z+1	; 0x01
    346c:	80 50       	subi	r24, 0x00	; 0
    346e:	92 42       	sbci	r25, 0x22	; 34
    3470:	18 f4       	brcc	.+6      	; 0x3478 <nrk_stack_check_pid+0x3e>
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	08 95       	ret
	_nrk_os_timer_set(20);
    3478:	82 e1       	ldi	r24, 0x12	; 18
    347a:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_error_add>
    347e:	8f ef       	ldi	r24, 0xFF	; 255
    3480:	9f ef       	ldi	r25, 0xFF	; 255
	//printf("TCNT1 is %d cnt is %d.\n\r",_nrk_high_speed_timer_get(),cnt);
	nrk_gpio_clr(NRK_DEBUG_0);
	nrk_wait_until_next_period();
	
        // Uncomment this line to cause a stack overflow
    3482:	08 95       	ret

00003484 <dump_stack_info>:
#include <hal.h>
#include <nrk_error.h>
#include <nrk_timer.h>
#include <nrk_stack_check.h>
#include <nrk_stats.h>

    3484:	6f 92       	push	r6
    3486:	7f 92       	push	r7
    3488:	8f 92       	push	r8
    348a:	9f 92       	push	r9
    348c:	af 92       	push	r10
    348e:	bf 92       	push	r11
    3490:	cf 92       	push	r12
    3492:	df 92       	push	r13
    3494:	ef 92       	push	r14
    3496:	ff 92       	push	r15
    3498:	0f 93       	push	r16
    349a:	1f 93       	push	r17
    349c:	cf 93       	push	r28
    349e:	df 93       	push	r29

NRK_STK Stack1[NRK_APP_STACKSIZE];
nrk_task_type TaskOne;
void Task1(void);

    34a0:	85 eb       	ldi	r24, 0xB5	; 181
    34a2:	93 e0       	ldi	r25, 0x03	; 3
    34a4:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <nrk_kprintf>
NRK_STK Stack2[NRK_APP_STACKSIZE];
nrk_task_type TaskTwo;
    34a8:	e0 91 15 08 	lds	r30, 0x0815
    34ac:	f0 91 16 08 	lds	r31, 0x0816
    34b0:	80 85       	ldd	r24, Z+8	; 0x08
    34b2:	99 27       	eor	r25, r25
    34b4:	87 fd       	sbrc	r24, 7
    34b6:	90 95       	com	r25
    34b8:	9f 93       	push	r25
    34ba:	8f 93       	push	r24
    34bc:	82 ef       	ldi	r24, 0xF2	; 242
    34be:	92 e0       	ldi	r25, 0x02	; 2
    34c0:	9f 93       	push	r25
    34c2:	8f 93       	push	r24
    34c4:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
void Task2 (void);
    34c8:	e0 91 15 08 	lds	r30, 0x0815
    34cc:	f0 91 16 08 	lds	r31, 0x0816
    34d0:	02 81       	ldd	r16, Z+2	; 0x02
    34d2:	13 81       	ldd	r17, Z+3	; 0x03

NRK_STK Stack3[NRK_APP_STACKSIZE];
    34d4:	1f 93       	push	r17
    34d6:	0f 93       	push	r16
    34d8:	8b ef       	ldi	r24, 0xFB	; 251
    34da:	92 e0       	ldi	r25, 0x02	; 2
    34dc:	9f 93       	push	r25
    34de:	8f 93       	push	r24
    34e0:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
nrk_task_type TaskThree;
    34e4:	f8 01       	movw	r30, r16
    34e6:	80 81       	ld	r24, Z
    34e8:	99 27       	eor	r25, r25
    34ea:	9f 93       	push	r25
    34ec:	8f 93       	push	r24
    34ee:	58 e0       	ldi	r21, 0x08	; 8
    34f0:	c5 2e       	mov	r12, r21
    34f2:	53 e0       	ldi	r21, 0x03	; 3
    34f4:	d5 2e       	mov	r13, r21
    34f6:	df 92       	push	r13
    34f8:	cf 92       	push	r12
    34fa:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
void Task3 (void);


    34fe:	e0 91 15 08 	lds	r30, 0x0815
    3502:	f0 91 16 08 	lds	r31, 0x0816
    3506:	80 81       	ld	r24, Z
    3508:	91 81       	ldd	r25, Z+1	; 0x01
    350a:	9f 93       	push	r25
    350c:	8f 93       	push	r24
    350e:	45 e1       	ldi	r20, 0x15	; 21
    3510:	e4 2e       	mov	r14, r20
    3512:	43 e0       	ldi	r20, 0x03	; 3
    3514:	f4 2e       	mov	r15, r20
    3516:	ff 92       	push	r15
    3518:	ef 92       	push	r14
    351a:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
NRK_STK Stack4[NRK_APP_STACKSIZE];
    351e:	80 91 15 08 	lds	r24, 0x0815
    3522:	90 91 16 08 	lds	r25, 0x0816
    3526:	9f 93       	push	r25
    3528:	8f 93       	push	r24
    352a:	0f e1       	ldi	r16, 0x1F	; 31
    352c:	13 e0       	ldi	r17, 0x03	; 3
    352e:	1f 93       	push	r17
    3530:	0f 93       	push	r16
    3532:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
    3536:	ca e5       	ldi	r28, 0x5A	; 90
    3538:	d7 e0       	ldi	r29, 0x07	; 7
    353a:	aa 24       	eor	r10, r10
    353c:	bb 24       	eor	r11, r11
    353e:	8d b7       	in	r24, 0x3d	; 61
    3540:	9e b7       	in	r25, 0x3e	; 62
    3542:	44 96       	adiw	r24, 0x14	; 20
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	9e bf       	out	0x3e, r25	; 62
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	8d bf       	out	0x3d, r24	; 61
nrk_task_type TaskFour;
void Task4 (void);

void nrk_create_taskset();
uint8_t kill_stack(uint8_t val);

    354e:	3f e2       	ldi	r19, 0x2F	; 47
    3550:	63 2e       	mov	r6, r19
    3552:	33 e0       	ldi	r19, 0x03	; 3
    3554:	73 2e       	mov	r7, r19
int
    3556:	46 01       	movw	r8, r12
main ()
{
  nrk_setup_ports();
    3558:	67 01       	movw	r12, r14
  nrk_setup_uart(UART_BAUDRATE_115K2);
    355a:	78 01       	movw	r14, r16

NRK_STK Stack4[NRK_APP_STACKSIZE];
nrk_task_type TaskFour;
void Task4 (void);

void nrk_create_taskset();
    355c:	0a 81       	ldd	r16, Y+2	; 0x02
    355e:	1b 81       	ldd	r17, Y+3	; 0x03
uint8_t kill_stack(uint8_t val);

    3560:	1f 93       	push	r17
    3562:	0f 93       	push	r16
    3564:	bf 92       	push	r11
    3566:	af 92       	push	r10
    3568:	7f 92       	push	r7
    356a:	6f 92       	push	r6
    356c:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
int
    3570:	f8 01       	movw	r30, r16
    3572:	80 81       	ld	r24, Z
    3574:	99 27       	eor	r25, r25
    3576:	9f 93       	push	r25
    3578:	8f 93       	push	r24
    357a:	9f 92       	push	r9
    357c:	8f 92       	push	r8
    357e:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
main ()
{
  nrk_setup_ports();
    3582:	88 81       	ld	r24, Y
    3584:	99 81       	ldd	r25, Y+1	; 0x01
    3586:	9f 93       	push	r25
    3588:	8f 93       	push	r24
    358a:	df 92       	push	r13
    358c:	cf 92       	push	r12
    358e:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
  nrk_setup_uart(UART_BAUDRATE_115K2);
    3592:	df 93       	push	r29
    3594:	cf 93       	push	r28
    3596:	ff 92       	push	r15
    3598:	ef 92       	push	r14
    359a:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
    359e:	08 94       	sec
    35a0:	a1 1c       	adc	r10, r1
    35a2:	b1 1c       	adc	r11, r1
    35a4:	a1 96       	adiw	r28, 0x21	; 33
void Task3 (void);


NRK_STK Stack4[NRK_APP_STACKSIZE];
nrk_task_type TaskFour;
void Task4 (void);
    35a6:	8d b7       	in	r24, 0x3d	; 61
    35a8:	9e b7       	in	r25, 0x3e	; 62
    35aa:	42 96       	adiw	r24, 0x12	; 18
    35ac:	0f b6       	in	r0, 0x3f	; 63
    35ae:	f8 94       	cli
    35b0:	9e bf       	out	0x3e, r25	; 62
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	8d bf       	out	0x3d, r24	; 61
    35b6:	95 e0       	ldi	r25, 0x05	; 5
    35b8:	a9 16       	cp	r10, r25
    35ba:	b1 04       	cpc	r11, r1
    35bc:	79 f6       	brne	.-98     	; 0x355c <dump_stack_info+0xd8>
    35be:	df 91       	pop	r29
    35c0:	cf 91       	pop	r28
    35c2:	1f 91       	pop	r17
    35c4:	0f 91       	pop	r16
    35c6:	ff 90       	pop	r15
    35c8:	ef 90       	pop	r14
    35ca:	df 90       	pop	r13
    35cc:	cf 90       	pop	r12
    35ce:	bf 90       	pop	r11
    35d0:	af 90       	pop	r10
    35d2:	9f 90       	pop	r9
    35d4:	8f 90       	pop	r8
    35d6:	7f 90       	pop	r7
    35d8:	6f 90       	pop	r6
    35da:	08 95       	ret

000035dc <nrk_stack_check>:
  nrk_time_set(0,0);
  nrk_create_taskset ();
  nrk_start();
  
  return 0;
}
    35dc:	cf 93       	push	r28
    35de:	df 93       	push	r29

void Task1()
{
nrk_time_t t;
uint16_t cnt;
uint16_t wait_high_time;
    35e0:	e0 91 15 08 	lds	r30, 0x0815
    35e4:	f0 91 16 08 	lds	r31, 0x0816
    35e8:	c2 81       	ldd	r28, Z+2	; 0x02
    35ea:	d3 81       	ldd	r29, Z+3	; 0x03
uint8_t cur_TCNT2;
cnt=0;
    35ec:	88 81       	ld	r24, Y
    35ee:	85 35       	cpi	r24, 0x55	; 85
    35f0:	39 f0       	breq	.+14     	; 0x3600 <nrk_stack_check+0x24>
nrk_kprintf( PSTR("Nano-RK Version ") );
printf( "%d\r\n",NRK_VERSION );
    35f2:	0e 94 42 1a 	call	0x3484	; 0x3484 <dump_stack_info>

printf( "My node's address is %u\r\n",NODE_ADDR );
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_error_add>
  
    35fc:	85 e5       	ldi	r24, 0x55	; 85
    35fe:	88 83       	st	Y, r24
printf( "Task1 PID=%u\r\n",nrk_get_pid());
//_nrk_high_speed_timer_start();
  while(1) {
	//_nrk_high_speed_timer_reset();
	nrk_led_toggle(ORANGE_LED);
    3600:	e0 91 15 08 	lds	r30, 0x0815
    3604:	f0 91 16 08 	lds	r31, 0x0816
    3608:	80 81       	ld	r24, Z
    360a:	91 81       	ldd	r25, Z+1	; 0x01
    360c:	80 50       	subi	r24, 0x00	; 0
    360e:	92 42       	sbci	r25, 0x22	; 34
    3610:	28 f0       	brcs	.+10     	; 0x361c <nrk_stack_check+0x40>
	nrk_gpio_set(NRK_DEBUG_0);
	nrk_gpio_toggle(NRK_DEBUG_1);
    3612:	0e 94 42 1a 	call	0x3484	; 0x3484 <dump_stack_info>
	//printf( "Task1 cnt=%u\r\n, %d.",cnt);
	do{
    3616:	82 e1       	ldi	r24, 0x12	; 18
    3618:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_error_add>
    361c:	df 91       	pop	r29
    361e:	cf 91       	pop	r28
    3620:	08 95       	ret

00003622 <nrk_signal_create>:
nrk_task_type TaskTwo;
void Task2 (void);

NRK_STK Stack3[NRK_APP_STACKSIZE];
nrk_task_type TaskThree;
void Task3 (void);
    3622:	40 91 d8 04 	lds	r20, 0x04D8
    3626:	50 91 d9 04 	lds	r21, 0x04D9
    362a:	60 91 da 04 	lds	r22, 0x04DA
    362e:	70 91 db 04 	lds	r23, 0x04DB
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	db 01       	movw	r26, r22
    3638:	ca 01       	movw	r24, r20
    363a:	02 2e       	mov	r0, r18
    363c:	04 c0       	rjmp	.+8      	; 0x3646 <nrk_signal_create+0x24>
    363e:	b6 95       	lsr	r27
    3640:	a7 95       	ror	r26
    3642:	97 95       	ror	r25
    3644:	87 95       	ror	r24
    3646:	0a 94       	dec	r0
    3648:	d2 f7       	brpl	.-12     	; 0x363e <nrk_signal_create+0x1c>
    364a:	81 70       	andi	r24, 0x01	; 1
    364c:	90 70       	andi	r25, 0x00	; 0
    364e:	89 2b       	or	r24, r25
    3650:	e9 f4       	brne	.+58     	; 0x368c <nrk_signal_create+0x6a>


    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	a0 e0       	ldi	r26, 0x00	; 0
    3658:	b0 e0       	ldi	r27, 0x00	; 0
    365a:	02 2e       	mov	r0, r18
    365c:	04 c0       	rjmp	.+8      	; 0x3666 <nrk_signal_create+0x44>
    365e:	88 0f       	add	r24, r24
    3660:	99 1f       	adc	r25, r25
    3662:	aa 1f       	adc	r26, r26
    3664:	bb 1f       	adc	r27, r27
    3666:	0a 94       	dec	r0
    3668:	d2 f7       	brpl	.-12     	; 0x365e <nrk_signal_create+0x3c>
    366a:	84 2b       	or	r24, r20
    366c:	95 2b       	or	r25, r21
    366e:	a6 2b       	or	r26, r22
    3670:	b7 2b       	or	r27, r23
    3672:	80 93 d8 04 	sts	0x04D8, r24
    3676:	90 93 d9 04 	sts	0x04D9, r25
    367a:	a0 93 da 04 	sts	0x04DA, r26
    367e:	b0 93 db 04 	sts	0x04DB, r27
NRK_STK Stack4[NRK_APP_STACKSIZE];
    3682:	82 2f       	mov	r24, r18
    3684:	99 27       	eor	r25, r25
    3686:	87 fd       	sbrc	r24, 7
    3688:	90 95       	com	r25
    368a:	08 95       	ret
    368c:	2f 5f       	subi	r18, 0xFF	; 255
    368e:	3f 4f       	sbci	r19, 0xFF	; 255

NRK_STK Stack2[NRK_APP_STACKSIZE];
nrk_task_type TaskTwo;
void Task2 (void);

NRK_STK Stack3[NRK_APP_STACKSIZE];
    3690:	20 32       	cpi	r18, 0x20	; 32
    3692:	31 05       	cpc	r19, r1
    3694:	81 f6       	brne	.-96     	; 0x3636 <nrk_signal_create+0x14>
    3696:	8f ef       	ldi	r24, 0xFF	; 255
    3698:	9f ef       	ldi	r25, 0xFF	; 255
nrk_task_type TaskFour;
void Task4 (void);

void nrk_create_taskset();
uint8_t kill_stack(uint8_t val);

    369a:	08 95       	ret

0000369c <nrk_signal_get_registered_mask>:
int
main ()
{
    369c:	e0 91 15 08 	lds	r30, 0x0815
    36a0:	f0 91 16 08 	lds	r31, 0x0816
    36a4:	65 85       	ldd	r22, Z+13	; 0x0d
    36a6:	76 85       	ldd	r23, Z+14	; 0x0e
    36a8:	87 85       	ldd	r24, Z+15	; 0x0f
    36aa:	90 89       	ldd	r25, Z+16	; 0x10
    36ac:	08 95       	ret

000036ae <nrk_signal_unregister>:
	nrk_gpio_set(NRK_DEBUG_0);
	nrk_gpio_toggle(NRK_DEBUG_1);
	//printf( "Task1 cnt=%u\r\n, %d.",cnt);
	do{
		cur_TCNT2 = _nrk_os_timer_get();		
	}while(cur_TCNT2<=20);
    36ae:	ef 92       	push	r14
    36b0:	ff 92       	push	r15
    36b2:	0f 93       	push	r16
    36b4:	1f 93       	push	r17
	//printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);
	
	//printf("current TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
    36b6:	21 e0       	ldi	r18, 0x01	; 1
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	40 e0       	ldi	r20, 0x00	; 0
    36bc:	50 e0       	ldi	r21, 0x00	; 0
    36be:	04 c0       	rjmp	.+8      	; 0x36c8 <nrk_signal_unregister+0x1a>
    36c0:	22 0f       	add	r18, r18
    36c2:	33 1f       	adc	r19, r19
    36c4:	44 1f       	adc	r20, r20
    36c6:	55 1f       	adc	r21, r21
    36c8:	8a 95       	dec	r24
    36ca:	d2 f7       	brpl	.-12     	; 0x36c0 <nrk_signal_unregister+0x12>
	/*do{
		cur_TCNT2 = _nrk_os_timer_get();		
    36cc:	e0 91 15 08 	lds	r30, 0x0815
    36d0:	f0 91 16 08 	lds	r31, 0x0816
    36d4:	e5 84       	ldd	r14, Z+13	; 0x0d
    36d6:	f6 84       	ldd	r15, Z+14	; 0x0e
    36d8:	07 85       	ldd	r16, Z+15	; 0x0f
    36da:	10 89       	ldd	r17, Z+16	; 0x10
    36dc:	da 01       	movw	r26, r20
    36de:	c9 01       	movw	r24, r18
    36e0:	8e 21       	and	r24, r14
    36e2:	9f 21       	and	r25, r15
    36e4:	a0 23       	and	r26, r16
    36e6:	b1 23       	and	r27, r17
    36e8:	00 97       	sbiw	r24, 0x00	; 0
    36ea:	a1 05       	cpc	r26, r1
    36ec:	b1 05       	cpc	r27, r1
    36ee:	19 f4       	brne	.+6      	; 0x36f6 <nrk_signal_unregister+0x48>
    36f0:	8f ef       	ldi	r24, 0xFF	; 255
    36f2:	9f ef       	ldi	r25, 0xFF	; 255
    36f4:	1a c0       	rjmp	.+52     	; 0x372a <nrk_signal_unregister+0x7c>
	}while(cur_TCNT2!=100);
	printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);*/
    36f6:	20 95       	com	r18
    36f8:	30 95       	com	r19
    36fa:	40 95       	com	r20
    36fc:	50 95       	com	r21
    36fe:	e2 22       	and	r14, r18
    3700:	f3 22       	and	r15, r19
    3702:	04 23       	and	r16, r20
    3704:	15 23       	and	r17, r21
    3706:	e5 86       	std	Z+13, r14	; 0x0d
    3708:	f6 86       	std	Z+14, r15	; 0x0e
    370a:	07 87       	std	Z+15, r16	; 0x0f
    370c:	10 8b       	std	Z+16, r17	; 0x10
	//_nrk_os_timer_set(40);// time escape 100ms
    370e:	81 89       	ldd	r24, Z+17	; 0x11
    3710:	92 89       	ldd	r25, Z+18	; 0x12
    3712:	a3 89       	ldd	r26, Z+19	; 0x13
    3714:	b4 89       	ldd	r27, Z+20	; 0x14
    3716:	82 23       	and	r24, r18
    3718:	93 23       	and	r25, r19
    371a:	a4 23       	and	r26, r20
    371c:	b5 23       	and	r27, r21
    371e:	81 8b       	std	Z+17, r24	; 0x11
    3720:	92 8b       	std	Z+18, r25	; 0x12
    3722:	a3 8b       	std	Z+19, r26	; 0x13
    3724:	b4 8b       	std	Z+20, r27	; 0x14
    3726:	81 e0       	ldi	r24, 0x01	; 1
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	1f 91       	pop	r17
    372c:	0f 91       	pop	r16
    372e:	ff 90       	pop	r15
    3730:	ef 90       	pop	r14
    3732:	08 95       	ret

00003734 <nrk_signal_register>:
	_nrk_high_speed_timer_reset();
	//_nrk_os_timer_reset();
	//printf("1st TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//wait_high_time = _nrk_high_speed_timer_get() + 2577;
	do{}while(TCNT1<2577);
	//nrk_high_speed_timer_wait(,2577);//time escape 0.5ms
    3734:	68 2f       	mov	r22, r24
    3736:	77 27       	eor	r23, r23
    3738:	67 fd       	sbrc	r22, 7
    373a:	70 95       	com	r23
    373c:	80 91 d8 04 	lds	r24, 0x04D8
    3740:	90 91 d9 04 	lds	r25, 0x04D9
    3744:	a0 91 da 04 	lds	r26, 0x04DA
    3748:	b0 91 db 04 	lds	r27, 0x04DB
    374c:	06 2e       	mov	r0, r22
    374e:	04 c0       	rjmp	.+8      	; 0x3758 <nrk_signal_register+0x24>
    3750:	b6 95       	lsr	r27
    3752:	a7 95       	ror	r26
    3754:	97 95       	ror	r25
    3756:	87 95       	ror	r24
    3758:	0a 94       	dec	r0
    375a:	d2 f7       	brpl	.-12     	; 0x3750 <nrk_signal_register+0x1c>
    375c:	81 70       	andi	r24, 0x01	; 1
    375e:	90 70       	andi	r25, 0x00	; 0
    3760:	89 2b       	or	r24, r25
    3762:	19 f4       	brne	.+6      	; 0x376a <nrk_signal_register+0x36>
    3764:	8f ef       	ldi	r24, 0xFF	; 255
    3766:	9f ef       	ldi	r25, 0xFF	; 255
    3768:	08 95       	ret
	//printf("2nd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//_nrk_high_speed_timer_reset();
    376a:	e0 91 15 08 	lds	r30, 0x0815
    376e:	f0 91 16 08 	lds	r31, 0x0816
    3772:	21 e0       	ldi	r18, 0x01	; 1
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	40 e0       	ldi	r20, 0x00	; 0
    3778:	50 e0       	ldi	r21, 0x00	; 0
    377a:	04 c0       	rjmp	.+8      	; 0x3784 <nrk_signal_register+0x50>
    377c:	22 0f       	add	r18, r18
    377e:	33 1f       	adc	r19, r19
    3780:	44 1f       	adc	r20, r20
    3782:	55 1f       	adc	r21, r21
    3784:	6a 95       	dec	r22
    3786:	d2 f7       	brpl	.-12     	; 0x377c <nrk_signal_register+0x48>
    3788:	85 85       	ldd	r24, Z+13	; 0x0d
    378a:	96 85       	ldd	r25, Z+14	; 0x0e
    378c:	a7 85       	ldd	r26, Z+15	; 0x0f
    378e:	b0 89       	ldd	r27, Z+16	; 0x10
    3790:	82 2b       	or	r24, r18
    3792:	93 2b       	or	r25, r19
    3794:	a4 2b       	or	r26, r20
    3796:	b5 2b       	or	r27, r21
    3798:	85 87       	std	Z+13, r24	; 0x0d
    379a:	96 87       	std	Z+14, r25	; 0x0e
    379c:	a7 87       	std	Z+15, r26	; 0x0f
    379e:	b0 8b       	std	Z+16, r27	; 0x10
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	90 e0       	ldi	r25, 0x00	; 0
	//printf("3rd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	_nrk_os_timer_set(20);
	//printf("TCNT1 is %d cnt is %d.\n\r",_nrk_high_speed_timer_get(),cnt);
	nrk_gpio_clr(NRK_DEBUG_0);
	nrk_wait_until_next_period();
    37a4:	08 95       	ret

000037a6 <nrk_sem_create>:
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	08 95       	ret

000037ac <nrk_get_resource_index>:
    37ac:	81 50       	subi	r24, 0x01	; 1
    37ae:	98 40       	sbci	r25, 0x08	; 8
    37b0:	19 f0       	breq	.+6      	; 0x37b8 <nrk_get_resource_index+0xc>
    37b2:	8f ef       	ldi	r24, 0xFF	; 255
    37b4:	9f ef       	ldi	r25, 0xFF	; 255
    37b6:	08 95       	ret
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	08 95       	ret

000037be <nrk_sem_delete>:
    37be:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <nrk_get_resource_index>
    37c2:	8f 3f       	cpi	r24, 0xFF	; 255
    37c4:	11 f4       	brne	.+4      	; 0x37ca <nrk_sem_delete+0xc>
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	03 c0       	rjmp	.+6      	; 0x37d0 <nrk_sem_delete+0x12>
    37ca:	81 30       	cpi	r24, 0x01	; 1
    37cc:	31 f4       	brne	.+12     	; 0x37da <nrk_sem_delete+0x1c>
    37ce:	82 e0       	ldi	r24, 0x02	; 2
    37d0:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_nrk_errno_set>
    37d4:	8f ef       	ldi	r24, 0xFF	; 255
    37d6:	9f ef       	ldi	r25, 0xFF	; 255
    37d8:	08 95       	ret
    37da:	99 27       	eor	r25, r25
    37dc:	87 fd       	sbrc	r24, 7
    37de:	90 95       	com	r25
    37e0:	fc 01       	movw	r30, r24
    37e2:	ee 0f       	add	r30, r30
    37e4:	ff 1f       	adc	r31, r31
    37e6:	e8 0f       	add	r30, r24
    37e8:	f9 1f       	adc	r31, r25
    37ea:	ef 5f       	subi	r30, 0xFF	; 255
    37ec:	f7 4f       	sbci	r31, 0xF7	; 247
    37ee:	8f ef       	ldi	r24, 0xFF	; 255
    37f0:	80 83       	st	Z, r24
    37f2:	82 83       	std	Z+2, r24	; 0x02
    37f4:	81 83       	std	Z+1, r24	; 0x01
    37f6:	80 91 14 08 	lds	r24, 0x0814
    37fa:	81 50       	subi	r24, 0x01	; 1
    37fc:	80 93 14 08 	sts	0x0814, r24
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	08 95       	ret

00003806 <nrk_sem_query>:
  nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
  TaskTwo.prio = 2;
  TaskTwo.FirstActivation = TRUE;
  TaskTwo.Type = BASIC_TASK;
  TaskTwo.SchType = PREEMPTIVE;
  TaskTwo.period.secs = 0;
    3806:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <nrk_get_resource_index>
  TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
    380a:	8f 3f       	cpi	r24, 0xFF	; 255
    380c:	11 f4       	brne	.+4      	; 0x3812 <nrk_sem_query+0xc>
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	03 c0       	rjmp	.+6      	; 0x3818 <nrk_sem_query+0x12>
  TaskTwo.cpu_reserve.secs = 0;
    3812:	81 30       	cpi	r24, 0x01	; 1
    3814:	31 f4       	brne	.+12     	; 0x3822 <nrk_sem_query+0x1c>
    3816:	82 e0       	ldi	r24, 0x02	; 2
    3818:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_nrk_errno_set>
    381c:	8f ef       	ldi	r24, 0xFF	; 255
    381e:	9f ef       	ldi	r25, 0xFF	; 255
    3820:	08 95       	ret
  TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
  TaskTwo.offset.secs = 0;
    3822:	99 27       	eor	r25, r25
    3824:	87 fd       	sbrc	r24, 7
    3826:	90 95       	com	r25
    3828:	fc 01       	movw	r30, r24
    382a:	ee 0f       	add	r30, r30
    382c:	ff 1f       	adc	r31, r31
    382e:	e8 0f       	add	r30, r24
    3830:	f9 1f       	adc	r31, r25
    3832:	ef 5f       	subi	r30, 0xFF	; 255
    3834:	f7 4f       	sbci	r31, 0xF7	; 247
    3836:	82 81       	ldd	r24, Z+2	; 0x02
    3838:	99 27       	eor	r25, r25
    383a:	87 fd       	sbrc	r24, 7
    383c:	90 95       	com	r25
  TaskTwo.offset.nano_secs= 0;
    383e:	08 95       	ret

00003840 <nrk_sem_post>:
  TaskFour.cpu_reserve.secs = 0;
  TaskFour.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
  TaskFour.offset.secs = 0;
  TaskFour.offset.nano_secs= 0;
  //nrk_activate_task (&TaskFour);

    3840:	1f 93       	push	r17
    3842:	cf 93       	push	r28
    3844:	df 93       	push	r29

    3846:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <nrk_get_resource_index>
    384a:	18 2f       	mov	r17, r24
}

    384c:	8f 3f       	cpi	r24, 0xFF	; 255
    384e:	11 f4       	brne	.+4      	; 0x3854 <nrk_sem_post+0x14>
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	03 c0       	rjmp	.+6      	; 0x385a <nrk_sem_post+0x1a>
uint8_t kill_stack(uint8_t val)
    3854:	81 30       	cpi	r24, 0x01	; 1
    3856:	31 f4       	brne	.+12     	; 0x3864 <nrk_sem_post+0x24>
    3858:	82 e0       	ldi	r24, 0x02	; 2
    385a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_nrk_errno_set>
    385e:	8f ef       	ldi	r24, 0xFF	; 255
    3860:	9f ef       	ldi	r25, 0xFF	; 255
    3862:	3e c0       	rjmp	.+124    	; 0x38e0 <nrk_sem_post+0xa0>
{
char bad_memory[10];
    3864:	99 27       	eor	r25, r25
    3866:	87 fd       	sbrc	r24, 7
    3868:	90 95       	com	r25
    386a:	ec 01       	movw	r28, r24
    386c:	cc 0f       	add	r28, r28
    386e:	dd 1f       	adc	r29, r29
    3870:	c8 0f       	add	r28, r24
    3872:	d9 1f       	adc	r29, r25
    3874:	cf 5f       	subi	r28, 0xFF	; 255
    3876:	d7 4f       	sbci	r29, 0xF7	; 247
    3878:	9a 81       	ldd	r25, Y+2	; 0x02
    387a:	88 81       	ld	r24, Y
    387c:	98 17       	cp	r25, r24
    387e:	74 f5       	brge	.+92     	; 0x38dc <nrk_sem_post+0x9c>
uint8_t i;
for(i=0; i<10; i++ ) bad_memory[i]=i;
for(i=0; i<10; i++ ) printf( "%d ", bad_memory[i]);
    3880:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>
   printf( "Die Stack %d\r\n",val );
if(val>1) kill_stack(val-1);
    3884:	8a 81       	ldd	r24, Y+2	; 0x02
    3886:	8f 5f       	subi	r24, 0xFF	; 255
    3888:	8a 83       	std	Y+2, r24	; 0x02
return 0;
    388a:	e0 91 15 08 	lds	r30, 0x0815
    388e:	f0 91 16 08 	lds	r31, 0x0816
    3892:	14 82       	std	Z+4, r1	; 0x04
    3894:	e1 e6       	ldi	r30, 0x61	; 97
    3896:	f7 e0       	ldi	r31, 0x07	; 7
}


    3898:	21 2f       	mov	r18, r17
    389a:	33 27       	eor	r19, r19
    389c:	27 fd       	sbrc	r18, 7
    389e:	30 95       	com	r19
    38a0:	43 2f       	mov	r20, r19
    38a2:	53 2f       	mov	r21, r19
   printf( "Die Stack %d\r\n",val );
if(val>1) kill_stack(val-1);
return 0;
}


    38a4:	80 81       	ld	r24, Z
    38a6:	82 30       	cpi	r24, 0x02	; 2
    38a8:	91 f4       	brne	.+36     	; 0x38ce <nrk_sem_post+0x8e>
    38aa:	82 85       	ldd	r24, Z+10	; 0x0a
    38ac:	93 85       	ldd	r25, Z+11	; 0x0b
    38ae:	a4 85       	ldd	r26, Z+12	; 0x0c
    38b0:	b5 85       	ldd	r27, Z+13	; 0x0d
    38b2:	82 17       	cp	r24, r18
    38b4:	93 07       	cpc	r25, r19
    38b6:	a4 07       	cpc	r26, r20
    38b8:	b5 07       	cpc	r27, r21
    38ba:	49 f4       	brne	.+18     	; 0x38ce <nrk_sem_post+0x8e>
    38bc:	83 e0       	ldi	r24, 0x03	; 3
    38be:	82 83       	std	Z+2, r24	; 0x02
    38c0:	17 86       	std	Z+15, r1	; 0x0f
    38c2:	16 86       	std	Z+14, r1	; 0x0e
    38c4:	10 82       	st	Z, r1
    38c6:	12 86       	std	Z+10, r1	; 0x0a
    38c8:	13 86       	std	Z+11, r1	; 0x0b
    38ca:	14 86       	std	Z+12, r1	; 0x0c
    38cc:	15 86       	std	Z+13, r1	; 0x0d
    38ce:	b1 96       	adiw	r30, 0x21	; 33
for(i=0; i<10; i++ ) printf( "%d ", bad_memory[i]);
   printf( "Die Stack %d\r\n",val );
if(val>1) kill_stack(val-1);
return 0;
}

    38d0:	88 e0       	ldi	r24, 0x08	; 8
    38d2:	e6 30       	cpi	r30, 0x06	; 6
    38d4:	f8 07       	cpc	r31, r24
    38d6:	31 f7       	brne	.-52     	; 0x38a4 <nrk_sem_post+0x64>
    38d8:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	df 91       	pop	r29
    38e2:	cf 91       	pop	r28
    38e4:	1f 91       	pop	r17
    38e6:	08 95       	ret

000038e8 <nrk_event_signal>:
	//printf("TCNT1 is %d cnt is %d.\n\r",_nrk_high_speed_timer_get(),cnt);
	nrk_gpio_clr(NRK_DEBUG_0);
	nrk_wait_until_next_period();
	
        // Uncomment this line to cause a stack overflow
	// if(cnt>20) kill_stack(10);
    38e8:	df 92       	push	r13
    38ea:	ef 92       	push	r14
    38ec:	ff 92       	push	r15
    38ee:	0f 93       	push	r16
    38f0:	1f 93       	push	r17

	// At time 50, the OS will halt and print statistics
	// This requires the NRK_STATS_TRACKER #define in nrk_cfg.h
	// if(cnt==50)  {
	//	nrk_stats_display_all();
	//	nrk_halt();
    38f2:	51 e0       	ldi	r21, 0x01	; 1
    38f4:	e5 2e       	mov	r14, r21
    38f6:	f1 2c       	mov	r15, r1
    38f8:	01 2d       	mov	r16, r1
    38fa:	11 2d       	mov	r17, r1
    38fc:	04 c0       	rjmp	.+8      	; 0x3906 <nrk_event_signal+0x1e>
    38fe:	ee 0c       	add	r14, r14
    3900:	ff 1c       	adc	r15, r15
    3902:	00 1f       	adc	r16, r16
    3904:	11 1f       	adc	r17, r17
    3906:	8a 95       	dec	r24
    3908:	d2 f7       	brpl	.-12     	; 0x38fe <nrk_event_signal+0x16>
	//	}

	cnt=0;
    390a:	80 91 d8 04 	lds	r24, 0x04D8
    390e:	90 91 d9 04 	lds	r25, 0x04D9
    3912:	a0 91 da 04 	lds	r26, 0x04DA
    3916:	b0 91 db 04 	lds	r27, 0x04DB
    391a:	8e 21       	and	r24, r14
    391c:	9f 21       	and	r25, r15
    391e:	a0 23       	and	r26, r16
    3920:	b1 23       	and	r27, r17
    3922:	00 97       	sbiw	r24, 0x00	; 0
    3924:	a1 05       	cpc	r26, r1
    3926:	b1 05       	cpc	r27, r1
    3928:	11 f4       	brne	.+4      	; 0x392e <nrk_event_signal+0x46>
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	43 c0       	rjmp	.+134    	; 0x39b4 <nrk_event_signal+0xcc>
	//cnt++;
	}
}
    392e:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>
    3932:	e1 e6       	ldi	r30, 0x61	; 97
    3934:	f7 e0       	ldi	r31, 0x07	; 7
    3936:	dd 24       	eor	r13, r13
void Task2()
{
  int16_t cnt;
  printf( "Task2 PID=%u\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
    3938:	80 81       	ld	r24, Z
    393a:	81 30       	cpi	r24, 0x01	; 1
    393c:	b9 f4       	brne	.+46     	; 0x396c <nrk_event_signal+0x84>
	nrk_led_toggle(BLUE_LED);
    393e:	82 85       	ldd	r24, Z+10	; 0x0a
    3940:	93 85       	ldd	r25, Z+11	; 0x0b
    3942:	a4 85       	ldd	r26, Z+12	; 0x0c
    3944:	b5 85       	ldd	r27, Z+13	; 0x0d
    3946:	8e 21       	and	r24, r14
    3948:	9f 21       	and	r25, r15
    394a:	a0 23       	and	r26, r16
    394c:	b1 23       	and	r27, r17
    394e:	00 97       	sbiw	r24, 0x00	; 0
    3950:	a1 05       	cpc	r26, r1
    3952:	b1 05       	cpc	r27, r1
    3954:	59 f0       	breq	.+22     	; 0x396c <nrk_event_signal+0x84>
	nrk_gpio_toggle(NRK_DEBUG_1);
	printf( "Task2 signed cnt=%d\r\n",cnt );
    3956:	83 e0       	ldi	r24, 0x03	; 3
    3958:	82 83       	std	Z+2, r24	; 0x02
	nrk_wait_until_next_period();
    395a:	17 86       	std	Z+15, r1	; 0x0f
    395c:	16 86       	std	Z+14, r1	; 0x0e
	//nrk_stats_display_pid(nrk_get_pid());
    395e:	10 82       	st	Z, r1
	cnt--;
	}
}
    3960:	e2 86       	std	Z+10, r14	; 0x0a
    3962:	f3 86       	std	Z+11, r15	; 0x0b
    3964:	04 87       	std	Z+12, r16	; 0x0c
    3966:	15 87       	std	Z+13, r17	; 0x0d
    3968:	dd 24       	eor	r13, r13
    396a:	d3 94       	inc	r13

void Task3()
{
uint16_t cnt;
    396c:	80 81       	ld	r24, Z
    396e:	82 30       	cpi	r24, 0x02	; 2
    3970:	a1 f4       	brne	.+40     	; 0x399a <nrk_event_signal+0xb2>
  printf( "Task3 PID=%u\r\n",nrk_get_pid());
    3972:	82 85       	ldd	r24, Z+10	; 0x0a
    3974:	93 85       	ldd	r25, Z+11	; 0x0b
    3976:	a4 85       	ldd	r26, Z+12	; 0x0c
    3978:	b5 85       	ldd	r27, Z+13	; 0x0d
    397a:	8e 15       	cp	r24, r14
    397c:	9f 05       	cpc	r25, r15
    397e:	a0 07       	cpc	r26, r16
    3980:	b1 07       	cpc	r27, r17
    3982:	59 f4       	brne	.+22     	; 0x399a <nrk_event_signal+0xb2>
  cnt=0;
  while(1) {
    3984:	83 e0       	ldi	r24, 0x03	; 3
    3986:	82 83       	std	Z+2, r24	; 0x02
	nrk_led_toggle(GREEN_LED);
    3988:	17 86       	std	Z+15, r1	; 0x0f
    398a:	16 86       	std	Z+14, r1	; 0x0e
	nrk_gpio_toggle(NRK_DEBUG_2);
    398c:	10 82       	st	Z, r1
	printf( "Task3 cnt=%u\r\n",cnt );
	nrk_wait_until_next_period();
	cnt++;
    398e:	12 86       	std	Z+10, r1	; 0x0a
    3990:	13 86       	std	Z+11, r1	; 0x0b
    3992:	14 86       	std	Z+12, r1	; 0x0c
    3994:	15 86       	std	Z+13, r1	; 0x0d
    3996:	dd 24       	eor	r13, r13
    3998:	d3 94       	inc	r13
    399a:	b1 96       	adiw	r30, 0x21	; 33

	cnt=0;
	//cnt++;
	}
}

    399c:	88 e0       	ldi	r24, 0x08	; 8
    399e:	e6 30       	cpi	r30, 0x06	; 6
    39a0:	f8 07       	cpc	r31, r24
    39a2:	51 f6       	brne	.-108    	; 0x3938 <nrk_event_signal+0x50>
	}
}

void Task4()
{
uint16_t cnt;
    39a4:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>

    39a8:	dd 20       	and	r13, r13
    39aa:	19 f0       	breq	.+6      	; 0x39b2 <nrk_event_signal+0xca>
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	05 c0       	rjmp	.+10     	; 0x39bc <nrk_event_signal+0xd4>
  printf( "Task4 PID=%u\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
	nrk_led_toggle(RED_LED);
	nrk_gpio_toggle(NRK_DEBUG_3);
    39b2:	82 e0       	ldi	r24, 0x02	; 2
    39b4:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_nrk_errno_set>
    39b8:	8f ef       	ldi	r24, 0xFF	; 255
    39ba:	9f ef       	ldi	r25, 0xFF	; 255
    39bc:	1f 91       	pop	r17
    39be:	0f 91       	pop	r16
    39c0:	ff 90       	pop	r15
    39c2:	ef 90       	pop	r14
    39c4:	df 90       	pop	r13
    39c6:	08 95       	ret

000039c8 <nrk_signal_delete>:
  nrk_setup_ports();
  nrk_setup_uart(UART_BAUDRATE_115K2);

  nrk_init();

  nrk_led_clr(ORANGE_LED);
    39c8:	ef 92       	push	r14
    39ca:	ff 92       	push	r15
    39cc:	0f 93       	push	r16
    39ce:	1f 93       	push	r17
    39d0:	cf 93       	push	r28
    39d2:	df 93       	push	r29
  nrk_led_clr(BLUE_LED);
  nrk_led_clr(GREEN_LED);
  nrk_led_clr(RED_LED);
 
    39d4:	c8 2f       	mov	r28, r24
    39d6:	dd 27       	eor	r29, r29
    39d8:	c7 fd       	sbrc	r28, 7
    39da:	d0 95       	com	r29
    39dc:	61 e0       	ldi	r22, 0x01	; 1
    39de:	e6 2e       	mov	r14, r22
    39e0:	f1 2c       	mov	r15, r1
    39e2:	01 2d       	mov	r16, r1
    39e4:	11 2d       	mov	r17, r1
    39e6:	0c 2e       	mov	r0, r28
    39e8:	04 c0       	rjmp	.+8      	; 0x39f2 <nrk_signal_delete+0x2a>
    39ea:	ee 0c       	add	r14, r14
    39ec:	ff 1c       	adc	r15, r15
    39ee:	00 1f       	adc	r16, r16
    39f0:	11 1f       	adc	r17, r17
    39f2:	0a 94       	dec	r0
    39f4:	d2 f7       	brpl	.-12     	; 0x39ea <nrk_signal_delete+0x22>
  nrk_time_set(0,0);
  nrk_create_taskset ();
    39f6:	80 91 d8 04 	lds	r24, 0x04D8
    39fa:	90 91 d9 04 	lds	r25, 0x04D9
    39fe:	a0 91 da 04 	lds	r26, 0x04DA
    3a02:	b0 91 db 04 	lds	r27, 0x04DB
    3a06:	8e 21       	and	r24, r14
    3a08:	9f 21       	and	r25, r15
    3a0a:	a0 23       	and	r26, r16
    3a0c:	b1 23       	and	r27, r17
    3a0e:	00 97       	sbiw	r24, 0x00	; 0
    3a10:	a1 05       	cpc	r26, r1
    3a12:	b1 05       	cpc	r27, r1
    3a14:	19 f4       	brne	.+6      	; 0x3a1c <nrk_signal_delete+0x54>
    3a16:	8f ef       	ldi	r24, 0xFF	; 255
    3a18:	9f ef       	ldi	r25, 0xFF	; 255
    3a1a:	5d c0       	rjmp	.+186    	; 0x3ad6 <nrk_signal_delete+0x10e>
  nrk_start();
  
    3a1c:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>
    3a20:	ea e5       	ldi	r30, 0x5A	; 90
    3a22:	f7 e0       	ldi	r31, 0x07	; 7
uint16_t wait_high_time;
uint8_t cur_TCNT2;
cnt=0;
nrk_kprintf( PSTR("Nano-RK Version ") );
printf( "%d\r\n",NRK_VERSION );

    3a24:	a8 01       	movw	r20, r16
    3a26:	97 01       	movw	r18, r14
    3a28:	20 95       	com	r18
    3a2a:	30 95       	com	r19
    3a2c:	40 95       	com	r20
    3a2e:	50 95       	com	r21
  nrk_time_set(0,0);
  nrk_create_taskset ();
  nrk_start();
  
  return 0;
}
    3a30:	80 85       	ldd	r24, Z+8	; 0x08
    3a32:	8f 3f       	cpi	r24, 0xFF	; 255
    3a34:	41 f1       	breq	.+80     	; 0x3a86 <nrk_signal_delete+0xbe>

void Task1()
{
nrk_time_t t;
    3a36:	85 85       	ldd	r24, Z+13	; 0x0d
    3a38:	96 85       	ldd	r25, Z+14	; 0x0e
    3a3a:	a7 85       	ldd	r26, Z+15	; 0x0f
    3a3c:	b0 89       	ldd	r27, Z+16	; 0x10
    3a3e:	8e 15       	cp	r24, r14
    3a40:	9f 05       	cpc	r25, r15
    3a42:	a0 07       	cpc	r26, r16
    3a44:	b1 07       	cpc	r27, r17
    3a46:	39 f4       	brne	.+14     	; 0x3a56 <nrk_signal_delete+0x8e>
uint16_t cnt;
uint16_t wait_high_time;
uint8_t cur_TCNT2;
    3a48:	11 8a       	std	Z+17, r1	; 0x11
    3a4a:	12 8a       	std	Z+18, r1	; 0x12
    3a4c:	13 8a       	std	Z+19, r1	; 0x13
    3a4e:	14 8a       	std	Z+20, r1	; 0x14
cnt=0;
    3a50:	17 82       	std	Z+7, r1	; 0x07
nrk_kprintf( PSTR("Nano-RK Version ") );
    3a52:	83 e0       	ldi	r24, 0x03	; 3
    3a54:	81 87       	std	Z+9, r24	; 0x09
printf( "%d\r\n",NRK_VERSION );

    3a56:	85 85       	ldd	r24, Z+13	; 0x0d
    3a58:	96 85       	ldd	r25, Z+14	; 0x0e
    3a5a:	a7 85       	ldd	r26, Z+15	; 0x0f
    3a5c:	b0 89       	ldd	r27, Z+16	; 0x10
    3a5e:	82 23       	and	r24, r18
    3a60:	93 23       	and	r25, r19
    3a62:	a4 23       	and	r26, r20
    3a64:	b5 23       	and	r27, r21
    3a66:	85 87       	std	Z+13, r24	; 0x0d
    3a68:	96 87       	std	Z+14, r25	; 0x0e
    3a6a:	a7 87       	std	Z+15, r26	; 0x0f
    3a6c:	b0 8b       	std	Z+16, r27	; 0x10
printf( "My node's address is %u\r\n",NODE_ADDR );
    3a6e:	81 89       	ldd	r24, Z+17	; 0x11
    3a70:	92 89       	ldd	r25, Z+18	; 0x12
    3a72:	a3 89       	ldd	r26, Z+19	; 0x13
    3a74:	b4 89       	ldd	r27, Z+20	; 0x14
    3a76:	82 23       	and	r24, r18
    3a78:	93 23       	and	r25, r19
    3a7a:	a4 23       	and	r26, r20
    3a7c:	b5 23       	and	r27, r21
    3a7e:	81 8b       	std	Z+17, r24	; 0x11
    3a80:	92 8b       	std	Z+18, r25	; 0x12
    3a82:	a3 8b       	std	Z+19, r26	; 0x13
    3a84:	b4 8b       	std	Z+20, r27	; 0x14
    3a86:	b1 96       	adiw	r30, 0x21	; 33
 
  nrk_time_set(0,0);
  nrk_create_taskset ();
  nrk_start();
  
  return 0;
    3a88:	87 e0       	ldi	r24, 0x07	; 7
    3a8a:	ef 3f       	cpi	r30, 0xFF	; 255
    3a8c:	f8 07       	cpc	r31, r24
    3a8e:	81 f6       	brne	.-96     	; 0x3a30 <nrk_signal_delete+0x68>

printf( "My node's address is %u\r\n",NODE_ADDR );
  
printf( "Task1 PID=%u\r\n",nrk_get_pid());
//_nrk_high_speed_timer_start();
  while(1) {
    3a90:	2e ef       	ldi	r18, 0xFE	; 254
    3a92:	3f ef       	ldi	r19, 0xFF	; 255
    3a94:	4f ef       	ldi	r20, 0xFF	; 255
    3a96:	5f ef       	ldi	r21, 0xFF	; 255
    3a98:	04 c0       	rjmp	.+8      	; 0x3aa2 <nrk_signal_delete+0xda>
    3a9a:	22 0f       	add	r18, r18
    3a9c:	33 1f       	adc	r19, r19
    3a9e:	44 1f       	adc	r20, r20
    3aa0:	55 1f       	adc	r21, r21
    3aa2:	ca 95       	dec	r28
    3aa4:	d2 f7       	brpl	.-12     	; 0x3a9a <nrk_signal_delete+0xd2>
    3aa6:	80 91 d8 04 	lds	r24, 0x04D8
    3aaa:	90 91 d9 04 	lds	r25, 0x04D9
    3aae:	a0 91 da 04 	lds	r26, 0x04DA
    3ab2:	b0 91 db 04 	lds	r27, 0x04DB
    3ab6:	82 23       	and	r24, r18
    3ab8:	93 23       	and	r25, r19
    3aba:	a4 23       	and	r26, r20
    3abc:	b5 23       	and	r27, r21
    3abe:	80 93 d8 04 	sts	0x04D8, r24
    3ac2:	90 93 d9 04 	sts	0x04D9, r25
    3ac6:	a0 93 da 04 	sts	0x04DA, r26
    3aca:	b0 93 db 04 	sts	0x04DB, r27
	//_nrk_high_speed_timer_reset();
    3ace:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	df 91       	pop	r29
    3ad8:	cf 91       	pop	r28
    3ada:	1f 91       	pop	r17
    3adc:	0f 91       	pop	r16
    3ade:	ff 90       	pop	r15
    3ae0:	ef 90       	pop	r14
    3ae2:	08 95       	ret

00003ae4 <nrk_sem_pend>:
  TaskTwo.offset.nano_secs= 0;
  //nrk_activate_task (&TaskTwo);


  nrk_task_set_entry_function( &TaskThree, Task3);
  nrk_task_set_stk( &TaskThree, Stack3, NRK_APP_STACKSIZE);
    3ae4:	1f 93       	push	r17
    3ae6:	cf 93       	push	r28
    3ae8:	df 93       	push	r29
  TaskThree.prio = 3;
  TaskThree.FirstActivation = TRUE;
    3aea:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <nrk_get_resource_index>
    3aee:	18 2f       	mov	r17, r24
  TaskThree.Type = BASIC_TASK;
    3af0:	8f 3f       	cpi	r24, 0xFF	; 255
    3af2:	11 f4       	brne	.+4      	; 0x3af8 <nrk_sem_pend+0x14>
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	03 c0       	rjmp	.+6      	; 0x3afe <nrk_sem_pend+0x1a>
  TaskThree.SchType = PREEMPTIVE;
    3af8:	81 30       	cpi	r24, 0x01	; 1
    3afa:	31 f4       	brne	.+12     	; 0x3b08 <nrk_sem_pend+0x24>
    3afc:	82 e0       	ldi	r24, 0x02	; 2
    3afe:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_nrk_errno_set>
    3b02:	8f ef       	ldi	r24, 0xFF	; 255
    3b04:	9f ef       	ldi	r25, 0xFF	; 255
    3b06:	3e c0       	rjmp	.+124    	; 0x3b84 <nrk_sem_pend+0xa0>
  TaskThree.period.secs = 1;
  TaskThree.period.nano_secs = 0;
    3b08:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>
  TaskThree.cpu_reserve.secs = 0;
    3b0c:	81 2f       	mov	r24, r17
    3b0e:	99 27       	eor	r25, r25
    3b10:	87 fd       	sbrc	r24, 7
    3b12:	90 95       	com	r25
    3b14:	ec 01       	movw	r28, r24
    3b16:	cc 0f       	add	r28, r28
    3b18:	dd 1f       	adc	r29, r29
    3b1a:	c8 0f       	add	r28, r24
    3b1c:	d9 1f       	adc	r29, r25
    3b1e:	cf 5f       	subi	r28, 0xFF	; 255
    3b20:	d7 4f       	sbci	r29, 0xF7	; 247
    3b22:	8a 81       	ldd	r24, Y+2	; 0x02
    3b24:	88 23       	and	r24, r24
    3b26:	d9 f4       	brne	.+54     	; 0x3b5e <nrk_sem_pend+0x7a>
  TaskThree.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
  TaskThree.offset.secs = 0;
    3b28:	e0 91 15 08 	lds	r30, 0x0815
    3b2c:	f0 91 16 08 	lds	r31, 0x0816
    3b30:	87 81       	ldd	r24, Z+7	; 0x07
    3b32:	82 60       	ori	r24, 0x02	; 2
    3b34:	87 83       	std	Z+7, r24	; 0x07
  TaskThree.offset.nano_secs= 0;
    3b36:	e0 91 15 08 	lds	r30, 0x0815
    3b3a:	f0 91 16 08 	lds	r31, 0x0816
    3b3e:	81 2f       	mov	r24, r17
    3b40:	99 27       	eor	r25, r25
    3b42:	87 fd       	sbrc	r24, 7
    3b44:	90 95       	com	r25
    3b46:	a9 2f       	mov	r26, r25
    3b48:	b9 2f       	mov	r27, r25
    3b4a:	81 8b       	std	Z+17, r24	; 0x11
    3b4c:	92 8b       	std	Z+18, r25	; 0x12
    3b4e:	a3 8b       	std	Z+19, r26	; 0x13
    3b50:	b4 8b       	std	Z+20, r27	; 0x14
  //nrk_activate_task (&TaskThree);

    3b52:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>

    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	0e 94 17 20 	call	0x402e	; 0x402e <nrk_wait_until_ticks>
  nrk_task_set_entry_function( &TaskFour, Task4);
  nrk_task_set_stk( &TaskFour, Stack4, NRK_APP_STACKSIZE);
  TaskFour.prio = 4;
    3b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b60:	81 50       	subi	r24, 0x01	; 1
    3b62:	8a 83       	std	Y+2, r24	; 0x02
  TaskFour.FirstActivation = TRUE;
    3b64:	e0 91 15 08 	lds	r30, 0x0815
    3b68:	f0 91 16 08 	lds	r31, 0x0816
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
    3b6e:	83 87       	std	Z+11, r24	; 0x0b
  TaskFour.Type = BASIC_TASK;
    3b70:	e0 91 15 08 	lds	r30, 0x0815
    3b74:	f0 91 16 08 	lds	r31, 0x0816
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	84 83       	std	Z+4, r24	; 0x04
  TaskFour.SchType = PREEMPTIVE;
    3b7c:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	df 91       	pop	r29
    3b86:	cf 91       	pop	r28
    3b88:	1f 91       	pop	r17
    3b8a:	08 95       	ret

00003b8c <nrk_event_wait>:
	printf( "Task4 cnt=%u\r\n",cnt );
	nrk_wait_until_next_period();
	cnt++;
	}
}

    3b8c:	9b 01       	movw	r18, r22
    3b8e:	ac 01       	movw	r20, r24
void
nrk_create_taskset()
{
    3b90:	e0 91 15 08 	lds	r30, 0x0815
    3b94:	f0 91 16 08 	lds	r31, 0x0816
    3b98:	85 85       	ldd	r24, Z+13	; 0x0d
    3b9a:	96 85       	ldd	r25, Z+14	; 0x0e
    3b9c:	a7 85       	ldd	r26, Z+15	; 0x0f
    3b9e:	b0 89       	ldd	r27, Z+16	; 0x10
    3ba0:	82 23       	and	r24, r18
    3ba2:	93 23       	and	r25, r19
    3ba4:	a4 23       	and	r26, r20
    3ba6:	b5 23       	and	r27, r21
    3ba8:	00 97       	sbiw	r24, 0x00	; 0
    3baa:	a1 05       	cpc	r26, r1
    3bac:	b1 05       	cpc	r27, r1
    3bae:	29 f4       	brne	.+10     	; 0x3bba <nrk_event_wait+0x2e>
    3bb0:	60 e0       	ldi	r22, 0x00	; 0
    3bb2:	70 e0       	ldi	r23, 0x00	; 0
    3bb4:	80 e0       	ldi	r24, 0x00	; 0
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	08 95       	ret
  nrk_task_set_entry_function( &TaskOne, Task1);
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
    3bba:	21 8b       	std	Z+17, r18	; 0x11
    3bbc:	32 8b       	std	Z+18, r19	; 0x12
    3bbe:	43 8b       	std	Z+19, r20	; 0x13
    3bc0:	54 8b       	std	Z+20, r21	; 0x14
  TaskOne.prio = 1;
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
    3bc4:	87 83       	std	Z+7, r24	; 0x07
  TaskOne.Type = BASIC_TASK;
  TaskOne.SchType = PREEMPTIVE;
  TaskOne.period.secs = 0;
  TaskOne.period.nano_secs = 50*NANOS_PER_MS;
  TaskOne.cpu_reserve.secs = 0;
  TaskOne.cpu_reserve.nano_secs = 50*NANOS_PER_MS;
    3bc6:	00 90 05 08 	lds	r0, 0x0805
    3bca:	04 c0       	rjmp	.+8      	; 0x3bd4 <nrk_event_wait+0x48>
    3bcc:	56 95       	lsr	r21
    3bce:	47 95       	ror	r20
    3bd0:	37 95       	ror	r19
    3bd2:	27 95       	ror	r18
    3bd4:	0a 94       	dec	r0
    3bd6:	d2 f7       	brpl	.-12     	; 0x3bcc <nrk_event_wait+0x40>
    3bd8:	c9 01       	movw	r24, r18
    3bda:	81 70       	andi	r24, 0x01	; 1
    3bdc:	90 70       	andi	r25, 0x00	; 0
    3bde:	89 2b       	or	r24, r25
    3be0:	19 f0       	breq	.+6      	; 0x3be8 <nrk_event_wait+0x5c>
  TaskOne.offset.secs = 0;
    3be2:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <nrk_wait_until_nw>
    3be6:	04 c0       	rjmp	.+8      	; 0x3bf0 <nrk_event_wait+0x64>
  TaskOne.offset.nano_secs= 0;
  nrk_activate_task (&TaskOne);
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	0e 94 17 20 	call	0x402e	; 0x402e <nrk_wait_until_ticks>

  nrk_task_set_entry_function( &TaskTwo, Task2);
    3bf0:	e0 91 15 08 	lds	r30, 0x0815
    3bf4:	f0 91 16 08 	lds	r31, 0x0816
    3bf8:	61 89       	ldd	r22, Z+17	; 0x11
    3bfa:	72 89       	ldd	r23, Z+18	; 0x12
    3bfc:	83 89       	ldd	r24, Z+19	; 0x13
    3bfe:	94 89       	ldd	r25, Z+20	; 0x14
  nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
    3c00:	08 95       	ret

00003c02 <nrk_get_high_ready_task_ID>:
void Task1(void);

NRK_STK Stack2[NRK_APP_STACKSIZE];
nrk_task_type TaskTwo;
void Task2 (void);

    3c02:	e0 91 0a 08 	lds	r30, 0x080A
    3c06:	f0 91 0b 08 	lds	r31, 0x080B
    3c0a:	80 81       	ld	r24, Z
NRK_STK Stack3[NRK_APP_STACKSIZE];
nrk_task_type TaskThree;
    3c0c:	99 27       	eor	r25, r25
    3c0e:	08 95       	ret

00003c10 <nrk_print_readyQ>:
void Task3 (void);


NRK_STK Stack4[NRK_APP_STACKSIZE];
nrk_task_type TaskFour;
    3c10:	e0 91 0a 08 	lds	r30, 0x080A
    3c14:	f0 91 0b 08 	lds	r31, 0x080B
    3c18:	03 c0       	rjmp	.+6      	; 0x3c20 <nrk_print_readyQ+0x10>
void Task4 (void);

void nrk_create_taskset();
uint8_t kill_stack(uint8_t val);
    3c1a:	03 80       	ldd	r0, Z+3	; 0x03
    3c1c:	f4 81       	ldd	r31, Z+4	; 0x04
    3c1e:	e0 2d       	mov	r30, r0


NRK_STK Stack4[NRK_APP_STACKSIZE];
nrk_task_type TaskFour;
void Task4 (void);

    3c20:	30 97       	sbiw	r30, 0x00	; 0
    3c22:	d9 f7       	brne	.-10     	; 0x3c1a <nrk_print_readyQ+0xa>
    3c24:	08 95       	ret

00003c26 <nrk_add_to_readyQ>:
int
main ()
{
  nrk_setup_ports();
  nrk_setup_uart(UART_BAUDRATE_115K2);

    3c26:	cf 93       	push	r28
    3c28:	df 93       	push	r29
    3c2a:	48 2f       	mov	r20, r24
  nrk_init();

  nrk_led_clr(ORANGE_LED);
  nrk_led_clr(BLUE_LED);
  nrk_led_clr(GREEN_LED);
  nrk_led_clr(RED_LED);
    3c2c:	c0 91 58 07 	lds	r28, 0x0758
    3c30:	d0 91 59 07 	lds	r29, 0x0759
    3c34:	20 97       	sbiw	r28, 0x00	; 0
    3c36:	09 f4       	brne	.+2      	; 0x3c3a <nrk_add_to_readyQ+0x14>
    3c38:	7a c0       	rjmp	.+244    	; 0x3d2e <nrk_add_to_readyQ+0x108>
 
  nrk_time_set(0,0);
  nrk_create_taskset ();
  nrk_start();
  
    3c3a:	a0 91 0a 08 	lds	r26, 0x080A
    3c3e:	b0 91 0b 08 	lds	r27, 0x080B
  return 0;
}

    3c42:	10 97       	sbiw	r26, 0x00	; 0
    3c44:	b9 f1       	breq	.+110    	; 0x3cb4 <nrk_add_to_readyQ+0x8e>
void Task1()
{
nrk_time_t t;
uint16_t cnt;
    3c46:	99 27       	eor	r25, r25
    3c48:	87 fd       	sbrc	r24, 7
    3c4a:	90 95       	com	r25
    3c4c:	9c 01       	movw	r18, r24
    3c4e:	65 e0       	ldi	r22, 0x05	; 5
    3c50:	22 0f       	add	r18, r18
    3c52:	33 1f       	adc	r19, r19
    3c54:	6a 95       	dec	r22
    3c56:	e1 f7       	brne	.-8      	; 0x3c50 <nrk_add_to_readyQ+0x2a>
    3c58:	28 0f       	add	r18, r24
    3c5a:	39 1f       	adc	r19, r25
    3c5c:	26 5a       	subi	r18, 0xA6	; 166
    3c5e:	38 4f       	sbci	r19, 0xF8	; 248
  return 0;
}

void Task1()
{
nrk_time_t t;
    3c60:	8c 91       	ld	r24, X
    3c62:	99 27       	eor	r25, r25
    3c64:	bc 01       	movw	r22, r24
    3c66:	55 e0       	ldi	r21, 0x05	; 5
    3c68:	66 0f       	add	r22, r22
    3c6a:	77 1f       	adc	r23, r23
    3c6c:	5a 95       	dec	r21
    3c6e:	e1 f7       	brne	.-8      	; 0x3c68 <nrk_add_to_readyQ+0x42>
    3c70:	68 0f       	add	r22, r24
    3c72:	79 1f       	adc	r23, r25
    3c74:	66 5a       	subi	r22, 0xA6	; 166
    3c76:	78 4f       	sbci	r23, 0xF8	; 248
    3c78:	fb 01       	movw	r30, r22
    3c7a:	84 81       	ldd	r24, Z+4	; 0x04
    3c7c:	88 23       	and	r24, r24
    3c7e:	29 f0       	breq	.+10     	; 0x3c8a <nrk_add_to_readyQ+0x64>
uint16_t cnt;
    3c80:	93 85       	ldd	r25, Z+11	; 0x0b
    3c82:	f9 01       	movw	r30, r18
    3c84:	82 85       	ldd	r24, Z+10	; 0x0a
    3c86:	98 17       	cp	r25, r24
    3c88:	a8 f0       	brcs	.+42     	; 0x3cb4 <nrk_add_to_readyQ+0x8e>
uint16_t wait_high_time;
uint8_t cur_TCNT2;
cnt=0;
    3c8a:	f9 01       	movw	r30, r18
    3c8c:	84 81       	ldd	r24, Z+4	; 0x04
    3c8e:	88 23       	and	r24, r24
    3c90:	31 f0       	breq	.+12     	; 0x3c9e <nrk_add_to_readyQ+0x78>
nrk_kprintf( PSTR("Nano-RK Version ") );
    3c92:	fb 01       	movw	r30, r22
    3c94:	92 85       	ldd	r25, Z+10	; 0x0a
    3c96:	f9 01       	movw	r30, r18
    3c98:	83 85       	ldd	r24, Z+11	; 0x0b
    3c9a:	98 17       	cp	r25, r24
    3c9c:	58 f0       	brcs	.+22     	; 0x3cb4 <nrk_add_to_readyQ+0x8e>
printf( "%d\r\n",NRK_VERSION );

printf( "My node's address is %u\r\n",NODE_ADDR );
    3c9e:	fb 01       	movw	r30, r22
    3ca0:	92 85       	ldd	r25, Z+10	; 0x0a
    3ca2:	f9 01       	movw	r30, r18
    3ca4:	82 85       	ldd	r24, Z+10	; 0x0a
    3ca6:	98 17       	cp	r25, r24
    3ca8:	28 f0       	brcs	.+10     	; 0x3cb4 <nrk_add_to_readyQ+0x8e>
  
printf( "Task1 PID=%u\r\n",nrk_get_pid());
//_nrk_high_speed_timer_start();
  while(1) {
    3caa:	fd 01       	movw	r30, r26
    3cac:	a3 81       	ldd	r26, Z+3	; 0x03
    3cae:	b4 81       	ldd	r27, Z+4	; 0x04
  
  return 0;
}

void Task1()
{
    3cb0:	10 97       	sbiw	r26, 0x00	; 0
    3cb2:	b1 f6       	brne	.-84     	; 0x3c60 <nrk_add_to_readyQ+0x3a>
		cur_TCNT2 = _nrk_os_timer_get();		
	}while(cur_TCNT2<=20);
	//printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);
	
	//printf("current TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	/*do{
    3cb4:	48 83       	st	Y, r20
		cur_TCNT2 = _nrk_os_timer_get();		
    3cb6:	e0 91 58 07 	lds	r30, 0x0758
    3cba:	f0 91 59 07 	lds	r31, 0x0759
    3cbe:	23 81       	ldd	r18, Z+3	; 0x03
    3cc0:	34 81       	ldd	r19, Z+4	; 0x04
    3cc2:	30 93 59 07 	sts	0x0759, r19
    3cc6:	20 93 58 07 	sts	0x0758, r18
	}while(cur_TCNT2!=100);
	printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);*/
    3cca:	80 91 0a 08 	lds	r24, 0x080A
    3cce:	90 91 0b 08 	lds	r25, 0x080B
    3cd2:	a8 17       	cp	r26, r24
    3cd4:	b9 07       	cpc	r27, r25
    3cd6:	a1 f4       	brne	.+40     	; 0x3d00 <nrk_add_to_readyQ+0xda>
	//_nrk_os_timer_set(40);// time escape 100ms
	/*while(cnt++<=10)
    3cd8:	10 97       	sbiw	r26, 0x00	; 0
    3cda:	31 f0       	breq	.+12     	; 0x3ce8 <nrk_add_to_readyQ+0xc2>
	{
    3cdc:	bc 83       	std	Y+4, r27	; 0x04
    3cde:	ab 83       	std	Y+3, r26	; 0x03
		while(_nrk_high_speed_timer_get()<50000);
    3ce0:	1a 82       	std	Y+2, r1	; 0x02
    3ce2:	19 82       	std	Y+1, r1	; 0x01
		_nrk_high_speed_timer_reset();
    3ce4:	fd 01       	movw	r30, r26
    3ce6:	05 c0       	rjmp	.+10     	; 0x3cf2 <nrk_add_to_readyQ+0xcc>
	}*/
	_nrk_high_speed_timer_reset();
	//_nrk_os_timer_reset();
    3ce8:	1c 82       	std	Y+4, r1	; 0x04
    3cea:	1b 82       	std	Y+3, r1	; 0x03
	//printf("1st TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
    3cec:	1a 82       	std	Y+2, r1	; 0x02
    3cee:	19 82       	std	Y+1, r1	; 0x01
	//wait_high_time = _nrk_high_speed_timer_get() + 2577;
    3cf0:	f9 01       	movw	r30, r18
    3cf2:	d2 83       	std	Z+2, r29	; 0x02
    3cf4:	c1 83       	std	Z+1, r28	; 0x01
	do{}while(TCNT1<2577);
	//nrk_high_speed_timer_wait(,2577);//time escape 0.5ms
    3cf6:	d0 93 0b 08 	sts	0x080B, r29
    3cfa:	c0 93 0a 08 	sts	0x080A, r28
    3cfe:	17 c0       	rjmp	.+46     	; 0x3d2e <nrk_add_to_readyQ+0x108>
    3d00:	fd 01       	movw	r30, r26
    3d02:	81 81       	ldd	r24, Z+1	; 0x01
    3d04:	92 81       	ldd	r25, Z+2	; 0x02
	//printf("2nd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//_nrk_high_speed_timer_reset();
	//printf("3rd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	_nrk_os_timer_set(20);
    3d06:	a2 17       	cp	r26, r18
    3d08:	b3 07       	cpc	r27, r19
    3d0a:	51 f0       	breq	.+20     	; 0x3d20 <nrk_add_to_readyQ+0xfa>
	//printf("TCNT1 is %d cnt is %d.\n\r",_nrk_high_speed_timer_get(),cnt);
	nrk_gpio_clr(NRK_DEBUG_0);
	nrk_wait_until_next_period();
    3d0c:	9a 83       	std	Y+2, r25	; 0x02
    3d0e:	89 83       	std	Y+1, r24	; 0x01
	
    3d10:	bc 83       	std	Y+4, r27	; 0x04
    3d12:	ab 83       	std	Y+3, r26	; 0x03
        // Uncomment this line to cause a stack overflow
    3d14:	81 81       	ldd	r24, Z+1	; 0x01
    3d16:	92 81       	ldd	r25, Z+2	; 0x02
    3d18:	fc 01       	movw	r30, r24
    3d1a:	d4 83       	std	Z+4, r29	; 0x04
    3d1c:	c3 83       	std	Z+3, r28	; 0x03
    3d1e:	04 c0       	rjmp	.+8      	; 0x3d28 <nrk_add_to_readyQ+0x102>
	// if(cnt>20) kill_stack(10);

	// At time 50, the OS will halt and print statistics
	// This requires the NRK_STATS_TRACKER #define in nrk_cfg.h
	// if(cnt==50)  {
    3d20:	1c 82       	std	Y+4, r1	; 0x04
    3d22:	1b 82       	std	Y+3, r1	; 0x03
	//	nrk_stats_display_all();
    3d24:	9a 83       	std	Y+2, r25	; 0x02
    3d26:	89 83       	std	Y+1, r24	; 0x01
	//	nrk_halt();
    3d28:	fd 01       	movw	r30, r26
    3d2a:	d2 83       	std	Z+2, r29	; 0x02
    3d2c:	c1 83       	std	Z+1, r28	; 0x01
    3d2e:	df 91       	pop	r29
    3d30:	cf 91       	pop	r28
    3d32:	08 95       	ret

00003d34 <nrk_rem_from_readyQ>:
	//cnt++;
	}
}

void Task2()
{
    3d34:	cf 93       	push	r28
    3d36:	df 93       	push	r29
}

void Task4()
{
uint16_t cnt;

    3d38:	a0 91 0a 08 	lds	r26, 0x080A
    3d3c:	b0 91 0b 08 	lds	r27, 0x080B
    3d40:	10 97       	sbiw	r26, 0x00	; 0
    3d42:	09 f4       	brne	.+2      	; 0x3d46 <nrk_rem_from_readyQ+0x12>
    3d44:	46 c0       	rjmp	.+140    	; 0x3dd2 <nrk_rem_from_readyQ+0x9e>
  printf( "Task4 PID=%u\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
	nrk_led_toggle(RED_LED);
	nrk_gpio_toggle(NRK_DEBUG_3);
    3d46:	48 2f       	mov	r20, r24
    3d48:	55 27       	eor	r21, r21
    3d4a:	47 fd       	sbrc	r20, 7
    3d4c:	50 95       	com	r21
    3d4e:	8c 91       	ld	r24, X
    3d50:	99 27       	eor	r25, r25
    3d52:	84 17       	cp	r24, r20
    3d54:	95 07       	cpc	r25, r21
    3d56:	69 f4       	brne	.+26     	; 0x3d72 <nrk_rem_from_readyQ+0x3e>
	printf( "Task4 cnt=%u\r\n",cnt );
	nrk_wait_until_next_period();
    3d58:	ed 01       	movw	r28, r26
    3d5a:	eb 81       	ldd	r30, Y+3	; 0x03
    3d5c:	fc 81       	ldd	r31, Y+4	; 0x04
    3d5e:	f0 93 0b 08 	sts	0x080B, r31
    3d62:	e0 93 0a 08 	sts	0x080A, r30
	cnt++;
    3d66:	12 82       	std	Z+2, r1	; 0x02
    3d68:	11 82       	std	Z+1, r1	; 0x01
    3d6a:	16 c0       	rjmp	.+44     	; 0x3d98 <nrk_rem_from_readyQ+0x64>
	}
}

void
    3d6c:	d9 01       	movw	r26, r18
	printf( "Task4 cnt=%u\r\n",cnt );
	nrk_wait_until_next_period();
	cnt++;
	}
}

    3d6e:	23 2b       	or	r18, r19
    3d70:	81 f1       	breq	.+96     	; 0x3dd2 <nrk_rem_from_readyQ+0x9e>
    3d72:	8c 91       	ld	r24, X
    3d74:	99 27       	eor	r25, r25
    3d76:	fd 01       	movw	r30, r26
    3d78:	23 81       	ldd	r18, Z+3	; 0x03
    3d7a:	34 81       	ldd	r19, Z+4	; 0x04
    3d7c:	84 17       	cp	r24, r20
    3d7e:	95 07       	cpc	r25, r21
    3d80:	a9 f7       	brne	.-22     	; 0x3d6c <nrk_rem_from_readyQ+0x38>
void
nrk_create_taskset()
{
  nrk_task_set_entry_function( &TaskOne, Task1);
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
  TaskOne.prio = 1;
    3d82:	c1 81       	ldd	r28, Z+1	; 0x01
    3d84:	d2 81       	ldd	r29, Z+2	; 0x02
    3d86:	3c 83       	std	Y+4, r19	; 0x04
    3d88:	2b 83       	std	Y+3, r18	; 0x03
  TaskOne.FirstActivation = TRUE;
    3d8a:	83 81       	ldd	r24, Z+3	; 0x03
    3d8c:	94 81       	ldd	r25, Z+4	; 0x04
    3d8e:	00 97       	sbiw	r24, 0x00	; 0
    3d90:	19 f0       	breq	.+6      	; 0x3d98 <nrk_rem_from_readyQ+0x64>
  TaskOne.Type = BASIC_TASK;
    3d92:	fc 01       	movw	r30, r24
    3d94:	d2 83       	std	Z+2, r29	; 0x02
    3d96:	c1 83       	std	Z+1, r28	; 0x01
  TaskOne.period.secs = 0;
  TaskOne.period.nano_secs = 50*NANOS_PER_MS;
  TaskOne.cpu_reserve.secs = 0;
  TaskOne.cpu_reserve.nano_secs = 50*NANOS_PER_MS;
  TaskOne.offset.secs = 0;
  TaskOne.offset.nano_secs= 0;
    3d98:	e0 91 58 07 	lds	r30, 0x0758
    3d9c:	f0 91 59 07 	lds	r31, 0x0759
    3da0:	30 97       	sbiw	r30, 0x00	; 0
    3da2:	41 f4       	brne	.+16     	; 0x3db4 <nrk_rem_from_readyQ+0x80>
  nrk_activate_task (&TaskOne);
    3da4:	b0 93 59 07 	sts	0x0759, r27
    3da8:	a0 93 58 07 	sts	0x0758, r26

    3dac:	ed 01       	movw	r28, r26
    3dae:	1c 82       	std	Y+4, r1	; 0x04
    3db0:	1b 82       	std	Y+3, r1	; 0x03
    3db2:	09 c0       	rjmp	.+18     	; 0x3dc6 <nrk_rem_from_readyQ+0x92>
  nrk_task_set_entry_function( &TaskTwo, Task2);
  nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
  TaskTwo.prio = 2;
    3db4:	ed 01       	movw	r28, r26
    3db6:	fc 83       	std	Y+4, r31	; 0x04
    3db8:	eb 83       	std	Y+3, r30	; 0x03
  TaskTwo.FirstActivation = TRUE;
    3dba:	b2 83       	std	Z+2, r27	; 0x02
    3dbc:	a1 83       	std	Z+1, r26	; 0x01
  TaskTwo.Type = BASIC_TASK;
    3dbe:	b0 93 59 07 	sts	0x0759, r27
    3dc2:	a0 93 58 07 	sts	0x0758, r26
  TaskTwo.SchType = PREEMPTIVE;
  TaskTwo.period.secs = 0;
    3dc6:	e0 91 58 07 	lds	r30, 0x0758
    3dca:	f0 91 59 07 	lds	r31, 0x0759
    3dce:	12 82       	std	Z+2, r1	; 0x02
    3dd0:	11 82       	std	Z+1, r1	; 0x01
    3dd2:	df 91       	pop	r29
    3dd4:	cf 91       	pop	r28
    3dd6:	08 95       	ret

00003dd8 <nrk_get_pid>:
    3dd8:	e0 91 15 08 	lds	r30, 0x0815
    3ddc:	f0 91 16 08 	lds	r31, 0x0816
    3de0:	80 85       	ldd	r24, Z+8	; 0x08
    3de2:	99 27       	eor	r25, r25
    3de4:	08 95       	ret

00003de6 <_nrk_wait_for_scheduler>:
    3de6:	0e 94 3a 2a 	call	0x5474	; 0x5474 <nrk_idle>
    3dea:	e0 91 15 08 	lds	r30, 0x0815
    3dee:	f0 91 16 08 	lds	r31, 0x0816
    3df2:	85 81       	ldd	r24, Z+5	; 0x05
    3df4:	88 23       	and	r24, r24
    3df6:	b9 f7       	brne	.-18     	; 0x3de6 <_nrk_wait_for_scheduler>
    3df8:	08 95       	ret

00003dfa <nrk_wait>:
    3dfa:	ff 92       	push	r15
    3dfc:	0f 93       	push	r16
    3dfe:	1f 93       	push	r17
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	28 97       	sbiw	r28, 0x08	; 8
    3e0a:	0f b6       	in	r0, 0x3f	; 63
    3e0c:	f8 94       	cli
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	0f be       	out	0x3f, r0	; 63
    3e12:	cd bf       	out	0x3d, r28	; 61
    3e14:	29 83       	std	Y+1, r18	; 0x01
    3e16:	3a 83       	std	Y+2, r19	; 0x02
    3e18:	4b 83       	std	Y+3, r20	; 0x03
    3e1a:	5c 83       	std	Y+4, r21	; 0x04
    3e1c:	6d 83       	std	Y+5, r22	; 0x05
    3e1e:	7e 83       	std	Y+6, r23	; 0x06
    3e20:	8f 83       	std	Y+7, r24	; 0x07
    3e22:	98 87       	std	Y+8, r25	; 0x08
    3e24:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <nrk_stack_check>
    3e28:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>
    3e2c:	e0 91 15 08 	lds	r30, 0x0815
    3e30:	f0 91 16 08 	lds	r31, 0x0816
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	85 83       	std	Z+5, r24	; 0x05
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	90 a3       	std	Z+32, r25	; 0x20
    3e3e:	87 8f       	std	Z+31, r24	; 0x1f
    3e40:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_nrk_os_timer_get>
    3e44:	f8 2e       	mov	r15, r24
    3e46:	29 81       	ldd	r18, Y+1	; 0x01
    3e48:	3a 81       	ldd	r19, Y+2	; 0x02
    3e4a:	4b 81       	ldd	r20, Y+3	; 0x03
    3e4c:	5c 81       	ldd	r21, Y+4	; 0x04
    3e4e:	6d 81       	ldd	r22, Y+5	; 0x05
    3e50:	7e 81       	ldd	r23, Y+6	; 0x06
    3e52:	8f 81       	ldd	r24, Y+7	; 0x07
    3e54:	98 85       	ldd	r25, Y+8	; 0x08
    3e56:	0e 94 89 22 	call	0x4512	; 0x4512 <_nrk_time_to_ticks>
    3e5a:	e0 91 15 08 	lds	r30, 0x0815
    3e5e:	f0 91 16 08 	lds	r31, 0x0816
    3e62:	0f 2d       	mov	r16, r15
    3e64:	11 27       	eor	r17, r17
    3e66:	80 0f       	add	r24, r16
    3e68:	91 1f       	adc	r25, r17
    3e6a:	96 8b       	std	Z+22, r25	; 0x16
    3e6c:	85 8b       	std	Z+21, r24	; 0x15
    3e6e:	87 ef       	ldi	r24, 0xF7	; 247
    3e70:	8f 15       	cp	r24, r15
    3e72:	70 f0       	brcs	.+28     	; 0x3e90 <nrk_wait+0x96>
    3e74:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <_nrk_get_next_wakeup>
    3e78:	0e 5f       	subi	r16, 0xFE	; 254
    3e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e7c:	99 27       	eor	r25, r25
    3e7e:	80 17       	cp	r24, r16
    3e80:	91 07       	cpc	r25, r17
    3e82:	34 f0       	brlt	.+12     	; 0x3e90 <nrk_wait+0x96>
    3e84:	8f 2d       	mov	r24, r15
    3e86:	8e 5f       	subi	r24, 0xFE	; 254
    3e88:	80 93 82 05 	sts	0x0582, r24
    3e8c:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_nrk_set_next_wakeup>
    3e90:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>
    3e94:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <_nrk_wait_for_scheduler>
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	28 96       	adiw	r28, 0x08	; 8
    3e9e:	0f b6       	in	r0, 0x3f	; 63
    3ea0:	f8 94       	cli
    3ea2:	de bf       	out	0x3e, r29	; 62
    3ea4:	0f be       	out	0x3f, r0	; 63
    3ea6:	cd bf       	out	0x3d, r28	; 61
    3ea8:	df 91       	pop	r29
    3eaa:	cf 91       	pop	r28
    3eac:	1f 91       	pop	r17
    3eae:	0f 91       	pop	r16
    3eb0:	ff 90       	pop	r15
    3eb2:	08 95       	ret

00003eb4 <nrk_wait_until>:
    3eb4:	8f 92       	push	r8
    3eb6:	9f 92       	push	r9
    3eb8:	af 92       	push	r10
    3eba:	bf 92       	push	r11
    3ebc:	cf 92       	push	r12
    3ebe:	df 92       	push	r13
    3ec0:	ef 92       	push	r14
    3ec2:	ff 92       	push	r15
    3ec4:	0f 93       	push	r16
    3ec6:	1f 93       	push	r17
    3ec8:	cf 93       	push	r28
    3eca:	df 93       	push	r29
    3ecc:	cd b7       	in	r28, 0x3d	; 61
    3ece:	de b7       	in	r29, 0x3e	; 62
    3ed0:	60 97       	sbiw	r28, 0x10	; 16
    3ed2:	0f b6       	in	r0, 0x3f	; 63
    3ed4:	f8 94       	cli
    3ed6:	de bf       	out	0x3e, r29	; 62
    3ed8:	0f be       	out	0x3f, r0	; 63
    3eda:	cd bf       	out	0x3d, r28	; 61
    3edc:	29 87       	std	Y+9, r18	; 0x09
    3ede:	3a 87       	std	Y+10, r19	; 0x0a
    3ee0:	4b 87       	std	Y+11, r20	; 0x0b
    3ee2:	5c 87       	std	Y+12, r21	; 0x0c
    3ee4:	6d 87       	std	Y+13, r22	; 0x0d
    3ee6:	7e 87       	std	Y+14, r23	; 0x0e
    3ee8:	8f 87       	std	Y+15, r24	; 0x0f
    3eea:	98 8b       	std	Y+16, r25	; 0x10
    3eec:	ce 01       	movw	r24, r28
    3eee:	01 96       	adiw	r24, 0x01	; 1
    3ef0:	0e 94 ef 23 	call	0x47de	; 0x47de <nrk_time_get>
    3ef4:	89 80       	ldd	r8, Y+1	; 0x01
    3ef6:	9a 80       	ldd	r9, Y+2	; 0x02
    3ef8:	ab 80       	ldd	r10, Y+3	; 0x03
    3efa:	bc 80       	ldd	r11, Y+4	; 0x04
    3efc:	cd 80       	ldd	r12, Y+5	; 0x05
    3efe:	de 80       	ldd	r13, Y+6	; 0x06
    3f00:	ef 80       	ldd	r14, Y+7	; 0x07
    3f02:	f8 84       	ldd	r15, Y+8	; 0x08
    3f04:	09 85       	ldd	r16, Y+9	; 0x09
    3f06:	1a 85       	ldd	r17, Y+10	; 0x0a
    3f08:	2b 85       	ldd	r18, Y+11	; 0x0b
    3f0a:	3c 85       	ldd	r19, Y+12	; 0x0c
    3f0c:	4d 85       	ldd	r20, Y+13	; 0x0d
    3f0e:	5e 85       	ldd	r21, Y+14	; 0x0e
    3f10:	6f 85       	ldd	r22, Y+15	; 0x0f
    3f12:	78 89       	ldd	r23, Y+16	; 0x10
    3f14:	ce 01       	movw	r24, r28
    3f16:	09 96       	adiw	r24, 0x09	; 9
    3f18:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <nrk_time_sub>
    3f1c:	88 23       	and	r24, r24
    3f1e:	19 f4       	brne	.+6      	; 0x3f26 <nrk_wait_until+0x72>
    3f20:	8f ef       	ldi	r24, 0xFF	; 255
    3f22:	9f ef       	ldi	r25, 0xFF	; 255
    3f24:	0c c0       	rjmp	.+24     	; 0x3f3e <nrk_wait_until+0x8a>
    3f26:	29 85       	ldd	r18, Y+9	; 0x09
    3f28:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f2a:	4b 85       	ldd	r20, Y+11	; 0x0b
    3f2c:	5c 85       	ldd	r21, Y+12	; 0x0c
    3f2e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3f30:	7e 85       	ldd	r23, Y+14	; 0x0e
    3f32:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f34:	98 89       	ldd	r25, Y+16	; 0x10
    3f36:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <nrk_wait>
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	60 96       	adiw	r28, 0x10	; 16
    3f40:	0f b6       	in	r0, 0x3f	; 63
    3f42:	f8 94       	cli
    3f44:	de bf       	out	0x3e, r29	; 62
    3f46:	0f be       	out	0x3f, r0	; 63
    3f48:	cd bf       	out	0x3d, r28	; 61
    3f4a:	df 91       	pop	r29
    3f4c:	cf 91       	pop	r28
    3f4e:	1f 91       	pop	r17
    3f50:	0f 91       	pop	r16
    3f52:	ff 90       	pop	r15
    3f54:	ef 90       	pop	r14
    3f56:	df 90       	pop	r13
    3f58:	cf 90       	pop	r12
    3f5a:	bf 90       	pop	r11
    3f5c:	af 90       	pop	r10
    3f5e:	9f 90       	pop	r9
    3f60:	8f 90       	pop	r8
    3f62:	08 95       	ret

00003f64 <nrk_wait_until_nw>:
    3f64:	1f 93       	push	r17
    3f66:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>
    3f6a:	e0 91 15 08 	lds	r30, 0x0815
    3f6e:	f0 91 16 08 	lds	r31, 0x0816
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	85 83       	std	Z+5, r24	; 0x05
    3f76:	86 83       	std	Z+6, r24	; 0x06
    3f78:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_nrk_os_timer_get>
    3f7c:	18 2f       	mov	r17, r24
    3f7e:	88 3f       	cpi	r24, 0xF8	; 248
    3f80:	80 f4       	brcc	.+32     	; 0x3fa2 <nrk_wait_until_nw+0x3e>
    3f82:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <_nrk_get_next_wakeup>
    3f86:	21 2f       	mov	r18, r17
    3f88:	33 27       	eor	r19, r19
    3f8a:	2e 5f       	subi	r18, 0xFE	; 254
    3f8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f8e:	99 27       	eor	r25, r25
    3f90:	82 17       	cp	r24, r18
    3f92:	93 07       	cpc	r25, r19
    3f94:	34 f0       	brlt	.+12     	; 0x3fa2 <nrk_wait_until_nw+0x3e>
    3f96:	81 2f       	mov	r24, r17
    3f98:	8e 5f       	subi	r24, 0xFE	; 254
    3f9a:	80 93 82 05 	sts	0x0582, r24
    3f9e:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_nrk_set_next_wakeup>
    3fa2:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>
    3fa6:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <_nrk_wait_for_scheduler>
    3faa:	81 e0       	ldi	r24, 0x01	; 1
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	1f 91       	pop	r17
    3fb0:	08 95       	ret

00003fb2 <nrk_set_next_wakeup>:
    3fb2:	1f 93       	push	r17
    3fb4:	cf 93       	push	r28
    3fb6:	df 93       	push	r29
    3fb8:	cd b7       	in	r28, 0x3d	; 61
    3fba:	de b7       	in	r29, 0x3e	; 62
    3fbc:	28 97       	sbiw	r28, 0x08	; 8
    3fbe:	0f b6       	in	r0, 0x3f	; 63
    3fc0:	f8 94       	cli
    3fc2:	de bf       	out	0x3e, r29	; 62
    3fc4:	0f be       	out	0x3f, r0	; 63
    3fc6:	cd bf       	out	0x3d, r28	; 61
    3fc8:	29 83       	std	Y+1, r18	; 0x01
    3fca:	3a 83       	std	Y+2, r19	; 0x02
    3fcc:	4b 83       	std	Y+3, r20	; 0x03
    3fce:	5c 83       	std	Y+4, r21	; 0x04
    3fd0:	6d 83       	std	Y+5, r22	; 0x05
    3fd2:	7e 83       	std	Y+6, r23	; 0x06
    3fd4:	8f 83       	std	Y+7, r24	; 0x07
    3fd6:	98 87       	std	Y+8, r25	; 0x08
    3fd8:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>
    3fdc:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_nrk_os_timer_get>
    3fe0:	18 2f       	mov	r17, r24
    3fe2:	29 81       	ldd	r18, Y+1	; 0x01
    3fe4:	3a 81       	ldd	r19, Y+2	; 0x02
    3fe6:	4b 81       	ldd	r20, Y+3	; 0x03
    3fe8:	5c 81       	ldd	r21, Y+4	; 0x04
    3fea:	6d 81       	ldd	r22, Y+5	; 0x05
    3fec:	7e 81       	ldd	r23, Y+6	; 0x06
    3fee:	8f 81       	ldd	r24, Y+7	; 0x07
    3ff0:	98 85       	ldd	r25, Y+8	; 0x08
    3ff2:	0e 94 89 22 	call	0x4512	; 0x4512 <_nrk_time_to_ticks>
    3ff6:	83 30       	cpi	r24, 0x03	; 3
    3ff8:	91 05       	cpc	r25, r1
    3ffa:	18 f4       	brcc	.+6      	; 0x4002 <nrk_set_next_wakeup+0x50>
    3ffc:	8f ef       	ldi	r24, 0xFF	; 255
    3ffe:	9f ef       	ldi	r25, 0xFF	; 255
    4000:	0c c0       	rjmp	.+24     	; 0x401a <nrk_set_next_wakeup+0x68>
    4002:	e0 91 15 08 	lds	r30, 0x0815
    4006:	f0 91 16 08 	lds	r31, 0x0816
    400a:	81 0f       	add	r24, r17
    400c:	91 1d       	adc	r25, r1
    400e:	96 8b       	std	Z+22, r25	; 0x16
    4010:	85 8b       	std	Z+21, r24	; 0x15
    4012:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	28 96       	adiw	r28, 0x08	; 8
    401c:	0f b6       	in	r0, 0x3f	; 63
    401e:	f8 94       	cli
    4020:	de bf       	out	0x3e, r29	; 62
    4022:	0f be       	out	0x3f, r0	; 63
    4024:	cd bf       	out	0x3d, r28	; 61
    4026:	df 91       	pop	r29
    4028:	cf 91       	pop	r28
    402a:	1f 91       	pop	r17
    402c:	08 95       	ret

0000402e <nrk_wait_until_ticks>:
    402e:	0f 93       	push	r16
    4030:	1f 93       	push	r17
    4032:	8c 01       	movw	r16, r24
    4034:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>
    4038:	e0 91 15 08 	lds	r30, 0x0815
    403c:	f0 91 16 08 	lds	r31, 0x0816
    4040:	81 e0       	ldi	r24, 0x01	; 1
    4042:	85 83       	std	Z+5, r24	; 0x05
    4044:	16 8b       	std	Z+22, r17	; 0x16
    4046:	05 8b       	std	Z+21, r16	; 0x15
    4048:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_nrk_os_timer_get>
    404c:	08 2f       	mov	r16, r24
    404e:	88 3f       	cpi	r24, 0xF8	; 248
    4050:	80 f4       	brcc	.+32     	; 0x4072 <nrk_wait_until_ticks+0x44>
    4052:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <_nrk_get_next_wakeup>
    4056:	20 2f       	mov	r18, r16
    4058:	33 27       	eor	r19, r19
    405a:	2e 5f       	subi	r18, 0xFE	; 254
    405c:	3f 4f       	sbci	r19, 0xFF	; 255
    405e:	99 27       	eor	r25, r25
    4060:	82 17       	cp	r24, r18
    4062:	93 07       	cpc	r25, r19
    4064:	34 f0       	brlt	.+12     	; 0x4072 <nrk_wait_until_ticks+0x44>
    4066:	80 2f       	mov	r24, r16
    4068:	8e 5f       	subi	r24, 0xFE	; 254
    406a:	80 93 82 05 	sts	0x0582, r24
    406e:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_nrk_set_next_wakeup>
    4072:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>
    4076:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <_nrk_wait_for_scheduler>
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	1f 91       	pop	r17
    4080:	0f 91       	pop	r16
    4082:	08 95       	ret

00004084 <nrk_wait_ticks>:
    4084:	ff 92       	push	r15
    4086:	0f 93       	push	r16
    4088:	1f 93       	push	r17
    408a:	cf 93       	push	r28
    408c:	df 93       	push	r29
    408e:	8c 01       	movw	r16, r24
    4090:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>
    4094:	e0 91 15 08 	lds	r30, 0x0815
    4098:	f0 91 16 08 	lds	r31, 0x0816
    409c:	81 e0       	ldi	r24, 0x01	; 1
    409e:	85 83       	std	Z+5, r24	; 0x05
    40a0:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_nrk_os_timer_get>
    40a4:	f8 2e       	mov	r15, r24
    40a6:	e0 91 15 08 	lds	r30, 0x0815
    40aa:	f0 91 16 08 	lds	r31, 0x0816
    40ae:	c8 2f       	mov	r28, r24
    40b0:	dd 27       	eor	r29, r29
    40b2:	0c 0f       	add	r16, r28
    40b4:	1d 1f       	adc	r17, r29
    40b6:	16 8b       	std	Z+22, r17	; 0x16
    40b8:	05 8b       	std	Z+21, r16	; 0x15
    40ba:	87 ef       	ldi	r24, 0xF7	; 247
    40bc:	8f 15       	cp	r24, r15
    40be:	68 f0       	brcs	.+26     	; 0x40da <nrk_wait_ticks+0x56>
    40c0:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <_nrk_get_next_wakeup>
    40c4:	22 96       	adiw	r28, 0x02	; 2
    40c6:	99 27       	eor	r25, r25
    40c8:	8c 17       	cp	r24, r28
    40ca:	9d 07       	cpc	r25, r29
    40cc:	34 f0       	brlt	.+12     	; 0x40da <nrk_wait_ticks+0x56>
    40ce:	8f 2d       	mov	r24, r15
    40d0:	8e 5f       	subi	r24, 0xFE	; 254
    40d2:	80 93 82 05 	sts	0x0582, r24
    40d6:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_nrk_set_next_wakeup>
    40da:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>
    40de:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <_nrk_wait_for_scheduler>
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	df 91       	pop	r29
    40e8:	cf 91       	pop	r28
    40ea:	1f 91       	pop	r17
    40ec:	0f 91       	pop	r16
    40ee:	ff 90       	pop	r15
    40f0:	08 95       	ret

000040f2 <nrk_wait_until_next_n_periods>:
    40f2:	1f 93       	push	r17
    40f4:	cf 93       	push	r28
    40f6:	df 93       	push	r29
    40f8:	ec 01       	movw	r28, r24
    40fa:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <nrk_stack_check>
    40fe:	20 97       	sbiw	r28, 0x00	; 0
    4100:	11 f4       	brne	.+4      	; 0x4106 <nrk_wait_until_next_n_periods+0x14>
    4102:	c1 e0       	ldi	r28, 0x01	; 1
    4104:	d0 e0       	ldi	r29, 0x00	; 0
    4106:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>
    410a:	e0 91 15 08 	lds	r30, 0x0815
    410e:	f0 91 16 08 	lds	r31, 0x0816
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	85 83       	std	Z+5, r24	; 0x05
    4116:	d0 a3       	std	Z+32, r29	; 0x20
    4118:	c7 8f       	std	Z+31, r28	; 0x1f
    411a:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_nrk_os_timer_get>
    411e:	18 2f       	mov	r17, r24
    4120:	88 3f       	cpi	r24, 0xF8	; 248
    4122:	80 f4       	brcc	.+32     	; 0x4144 <nrk_wait_until_next_n_periods+0x52>
    4124:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <_nrk_get_next_wakeup>
    4128:	21 2f       	mov	r18, r17
    412a:	33 27       	eor	r19, r19
    412c:	2e 5f       	subi	r18, 0xFE	; 254
    412e:	3f 4f       	sbci	r19, 0xFF	; 255
    4130:	99 27       	eor	r25, r25
    4132:	82 17       	cp	r24, r18
    4134:	93 07       	cpc	r25, r19
    4136:	34 f0       	brlt	.+12     	; 0x4144 <nrk_wait_until_next_n_periods+0x52>
    4138:	81 2f       	mov	r24, r17
    413a:	8e 5f       	subi	r24, 0xFE	; 254
    413c:	80 93 82 05 	sts	0x0582, r24
    4140:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_nrk_set_next_wakeup>
    4144:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>
    4148:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <_nrk_wait_for_scheduler>
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	df 91       	pop	r29
    4152:	cf 91       	pop	r28
    4154:	1f 91       	pop	r17
    4156:	08 95       	ret

00004158 <nrk_wait_until_next_period>:
    4158:	0f 93       	push	r16
    415a:	1f 93       	push	r17
    415c:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <nrk_stack_check>
    4160:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>
    4164:	e0 91 15 08 	lds	r30, 0x0815
    4168:	f0 91 16 08 	lds	r31, 0x0816
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	90 a3       	std	Z+32, r25	; 0x20
    4172:	87 8f       	std	Z+31, r24	; 0x1f
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	85 83       	std	Z+5, r24	; 0x05
    4178:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_nrk_os_timer_get>
    417c:	08 2f       	mov	r16, r24
    417e:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <_nrk_get_next_wakeup>
    4182:	99 27       	eor	r25, r25
    4184:	9f 93       	push	r25
    4186:	8f 93       	push	r24
    4188:	80 e4       	ldi	r24, 0x40	; 64
    418a:	93 e0       	ldi	r25, 0x03	; 3
    418c:	9f 93       	push	r25
    418e:	8f 93       	push	r24
    4190:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
    4194:	0f 90       	pop	r0
    4196:	0f 90       	pop	r0
    4198:	0f 90       	pop	r0
    419a:	0f 90       	pop	r0
    419c:	08 3f       	cpi	r16, 0xF8	; 248
    419e:	80 f4       	brcc	.+32     	; 0x41c0 <nrk_wait_until_next_period+0x68>
    41a0:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <_nrk_get_next_wakeup>
    41a4:	20 2f       	mov	r18, r16
    41a6:	33 27       	eor	r19, r19
    41a8:	2e 5f       	subi	r18, 0xFE	; 254
    41aa:	3f 4f       	sbci	r19, 0xFF	; 255
    41ac:	99 27       	eor	r25, r25
    41ae:	82 17       	cp	r24, r18
    41b0:	93 07       	cpc	r25, r19
    41b2:	34 f0       	brlt	.+12     	; 0x41c0 <nrk_wait_until_next_period+0x68>
    41b4:	80 2f       	mov	r24, r16
    41b6:	8e 5f       	subi	r24, 0xFE	; 254
    41b8:	80 93 82 05 	sts	0x0582, r24
    41bc:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_nrk_set_next_wakeup>
    41c0:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <_nrk_get_next_wakeup>
    41c4:	08 2f       	mov	r16, r24
    41c6:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_nrk_os_timer_get>
    41ca:	11 27       	eor	r17, r17
    41cc:	1f 93       	push	r17
    41ce:	0f 93       	push	r16
    41d0:	99 27       	eor	r25, r25
    41d2:	9f 93       	push	r25
    41d4:	8f 93       	push	r24
    41d6:	89 e5       	ldi	r24, 0x59	; 89
    41d8:	93 e0       	ldi	r25, 0x03	; 3
    41da:	9f 93       	push	r25
    41dc:	8f 93       	push	r24
    41de:	0e 94 a6 2c 	call	0x594c	; 0x594c <printf>
    41e2:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>
    41e6:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <_nrk_wait_for_scheduler>
    41ea:	8d b7       	in	r24, 0x3d	; 61
    41ec:	9e b7       	in	r25, 0x3e	; 62
    41ee:	06 96       	adiw	r24, 0x06	; 6
    41f0:	0f b6       	in	r0, 0x3f	; 63
    41f2:	f8 94       	cli
    41f4:	9e bf       	out	0x3e, r25	; 62
    41f6:	0f be       	out	0x3f, r0	; 63
    41f8:	8d bf       	out	0x3d, r24	; 61
    41fa:	81 e0       	ldi	r24, 0x01	; 1
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	1f 91       	pop	r17
    4200:	0f 91       	pop	r16
    4202:	08 95       	ret

00004204 <nrk_terminate_task>:


    4204:	e0 91 15 08 	lds	r30, 0x0815
    4208:	f0 91 16 08 	lds	r31, 0x0816
    420c:	80 85       	ldd	r24, Z+8	; 0x08
    420e:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <nrk_rem_from_readyQ>
    4212:	e0 91 15 08 	lds	r30, 0x0815
    4216:	f0 91 16 08 	lds	r31, 0x0816
    421a:	84 e0       	ldi	r24, 0x04	; 4
    421c:	81 87       	std	Z+9, r24	; 0x09
    421e:	0e 94 ac 20 	call	0x4158	; 0x4158 <nrk_wait_until_next_period>
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	08 95       	ret

00004228 <nrk_activate_task>:
  TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
  TaskTwo.offset.secs = 0;
  TaskTwo.offset.nano_secs= 0;
  //nrk_activate_task (&TaskTwo);


    4228:	ef 92       	push	r14
    422a:	ff 92       	push	r15
    422c:	0f 93       	push	r16
    422e:	1f 93       	push	r17
    4230:	cf 93       	push	r28
    4232:	df 93       	push	r29
    4234:	ec 01       	movw	r28, r24
  nrk_task_set_entry_function( &TaskThree, Task3);
  nrk_task_set_stk( &TaskThree, Stack3, NRK_APP_STACKSIZE);
  TaskThree.prio = 3;
  TaskThree.FirstActivation = TRUE;
    4236:	4b 81       	ldd	r20, Y+3	; 0x03
    4238:	5c 81       	ldd	r21, Y+4	; 0x04
    423a:	69 81       	ldd	r22, Y+1	; 0x01
    423c:	7a 81       	ldd	r23, Y+2	; 0x02
    423e:	8d 81       	ldd	r24, Y+5	; 0x05
    4240:	9e 81       	ldd	r25, Y+6	; 0x06
    4242:	0e 94 49 2a 	call	0x5492	; 0x5492 <nrk_task_stk_init>
    4246:	bc 01       	movw	r22, r24
  TaskThree.Type = BASIC_TASK;
  TaskThree.SchType = PREEMPTIVE;
  TaskThree.period.secs = 1;
  TaskThree.period.nano_secs = 0;
    4248:	8f 81       	ldd	r24, Y+7	; 0x07
    424a:	88 23       	and	r24, r24
    424c:	69 f0       	breq	.+26     	; 0x4268 <nrk_activate_task+0x40>
  TaskThree.cpu_reserve.secs = 0;
    424e:	4b 81       	ldd	r20, Y+3	; 0x03
    4250:	5c 81       	ldd	r21, Y+4	; 0x04
    4252:	ee 24       	eor	r14, r14
    4254:	ff 24       	eor	r15, r15
    4256:	00 e0       	ldi	r16, 0x00	; 0
    4258:	10 e0       	ldi	r17, 0x00	; 0
    425a:	20 e0       	ldi	r18, 0x00	; 0
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	ce 01       	movw	r24, r28
    4260:	0e 94 9e 13 	call	0x273c	; 0x273c <nrk_TCB_init>
  TaskThree.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
    4264:	1f 82       	std	Y+7, r1	; 0x07
    4266:	16 c0       	rjmp	.+44     	; 0x4294 <nrk_activate_task+0x6c>
  TaskThree.offset.secs = 0;
  TaskThree.offset.nano_secs= 0;
  //nrk_activate_task (&TaskThree);

    4268:	88 81       	ld	r24, Y
    426a:	99 27       	eor	r25, r25
    426c:	87 fd       	sbrc	r24, 7
    426e:	90 95       	com	r25
    4270:	fc 01       	movw	r30, r24
    4272:	a5 e0       	ldi	r26, 0x05	; 5
    4274:	ee 0f       	add	r30, r30
    4276:	ff 1f       	adc	r31, r31
    4278:	aa 95       	dec	r26
    427a:	e1 f7       	brne	.-8      	; 0x4274 <nrk_activate_task+0x4c>
    427c:	e8 0f       	add	r30, r24
    427e:	f9 1f       	adc	r31, r25
    4280:	e6 5a       	subi	r30, 0xA6	; 166
    4282:	f8 4f       	sbci	r31, 0xF8	; 248
    4284:	81 85       	ldd	r24, Z+9	; 0x09
    4286:	83 30       	cpi	r24, 0x03	; 3
    4288:	19 f0       	breq	.+6      	; 0x4290 <nrk_activate_task+0x68>
    428a:	8f ef       	ldi	r24, 0xFF	; 255
    428c:	9f ef       	ldi	r25, 0xFF	; 255
    428e:	1b c0       	rjmp	.+54     	; 0x42c6 <nrk_activate_task+0x9e>

  nrk_task_set_entry_function( &TaskFour, Task4);
  nrk_task_set_stk( &TaskFour, Stack4, NRK_APP_STACKSIZE);
  TaskFour.prio = 4;
    4290:	71 83       	std	Z+1, r23	; 0x01
    4292:	60 83       	st	Z, r22
}

uint8_t kill_stack(uint8_t val)
{
char bad_memory[10];
uint8_t i;
    4294:	88 81       	ld	r24, Y
    4296:	99 27       	eor	r25, r25
    4298:	87 fd       	sbrc	r24, 7
    429a:	90 95       	com	r25
    429c:	fc 01       	movw	r30, r24
    429e:	75 e0       	ldi	r23, 0x05	; 5
    42a0:	ee 0f       	add	r30, r30
    42a2:	ff 1f       	adc	r31, r31
    42a4:	7a 95       	dec	r23
    42a6:	e1 f7       	brne	.-8      	; 0x42a0 <nrk_activate_task+0x78>
    42a8:	e8 0f       	add	r30, r24
    42aa:	f9 1f       	adc	r31, r25
    42ac:	e6 5a       	subi	r30, 0xA6	; 166
    42ae:	f8 4f       	sbci	r31, 0xF8	; 248
    42b0:	85 89       	ldd	r24, Z+21	; 0x15
    42b2:	96 89       	ldd	r25, Z+22	; 0x16
    42b4:	89 2b       	or	r24, r25
    42b6:	29 f4       	brne	.+10     	; 0x42c2 <nrk_activate_task+0x9a>
for(i=0; i<10; i++ ) bad_memory[i]=i;
    42b8:	82 e0       	ldi	r24, 0x02	; 2
    42ba:	81 87       	std	Z+9, r24	; 0x09
for(i=0; i<10; i++ ) printf( "%d ", bad_memory[i]);
    42bc:	88 81       	ld	r24, Y
    42be:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <nrk_add_to_readyQ>
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	df 91       	pop	r29
    42c8:	cf 91       	pop	r28
    42ca:	1f 91       	pop	r17
    42cc:	0f 91       	pop	r16
    42ce:	ff 90       	pop	r15
    42d0:	ef 90       	pop	r14
    42d2:	08 95       	ret

000042d4 <nrk_time_sub>:
main ()
{
  nrk_setup_ports();
  nrk_setup_uart(UART_BAUDRATE_115K2);

  nrk_init();
    42d4:	8f 92       	push	r8
    42d6:	9f 92       	push	r9
    42d8:	af 92       	push	r10
    42da:	bf 92       	push	r11
    42dc:	cf 92       	push	r12
    42de:	df 92       	push	r13
    42e0:	ef 92       	push	r14
    42e2:	ff 92       	push	r15
    42e4:	0f 93       	push	r16
    42e6:	1f 93       	push	r17
    42e8:	cf 93       	push	r28
    42ea:	df 93       	push	r29
    42ec:	cd b7       	in	r28, 0x3d	; 61
    42ee:	de b7       	in	r29, 0x3e	; 62
    42f0:	60 97       	sbiw	r28, 0x10	; 16
    42f2:	0f b6       	in	r0, 0x3f	; 63
    42f4:	f8 94       	cli
    42f6:	de bf       	out	0x3e, r29	; 62
    42f8:	0f be       	out	0x3f, r0	; 63
    42fa:	cd bf       	out	0x3d, r28	; 61
    42fc:	fc 01       	movw	r30, r24
    42fe:	09 83       	std	Y+1, r16	; 0x01
    4300:	1a 83       	std	Y+2, r17	; 0x02
    4302:	2b 83       	std	Y+3, r18	; 0x03
    4304:	3c 83       	std	Y+4, r19	; 0x04
    4306:	4d 83       	std	Y+5, r20	; 0x05
    4308:	5e 83       	std	Y+6, r21	; 0x06
    430a:	6f 83       	std	Y+7, r22	; 0x07
    430c:	78 87       	std	Y+8, r23	; 0x08
    430e:	89 86       	std	Y+9, r8	; 0x09
    4310:	9a 86       	std	Y+10, r9	; 0x0a
    4312:	ab 86       	std	Y+11, r10	; 0x0b
    4314:	bc 86       	std	Y+12, r11	; 0x0c
    4316:	cd 86       	std	Y+13, r12	; 0x0d
    4318:	de 86       	std	Y+14, r13	; 0x0e
    431a:	ef 86       	std	Y+15, r14	; 0x0f
    431c:	f8 8a       	std	Y+16, r15	; 0x10
    431e:	2d 81       	ldd	r18, Y+5	; 0x05
    4320:	3e 81       	ldd	r19, Y+6	; 0x06
    4322:	4f 81       	ldd	r20, Y+7	; 0x07
    4324:	58 85       	ldd	r21, Y+8	; 0x08
    4326:	89 81       	ldd	r24, Y+1	; 0x01
    4328:	9a 81       	ldd	r25, Y+2	; 0x02
    432a:	ab 81       	ldd	r26, Y+3	; 0x03
    432c:	bc 81       	ldd	r27, Y+4	; 0x04
    432e:	ad 84       	ldd	r10, Y+13	; 0x0d
    4330:	be 84       	ldd	r11, Y+14	; 0x0e
    4332:	cf 84       	ldd	r12, Y+15	; 0x0f
    4334:	d8 88       	ldd	r13, Y+16	; 0x10
    4336:	e9 84       	ldd	r14, Y+9	; 0x09
    4338:	fa 84       	ldd	r15, Y+10	; 0x0a
    433a:	0b 85       	ldd	r16, Y+11	; 0x0b
    433c:	1c 85       	ldd	r17, Y+12	; 0x0c

    433e:	8e 15       	cp	r24, r14
    4340:	9f 05       	cpc	r25, r15
    4342:	a0 07       	cpc	r26, r16
    4344:	b1 07       	cpc	r27, r17
    4346:	08 f4       	brcc	.+2      	; 0x434a <nrk_time_sub+0x76>
    4348:	3f c0       	rjmp	.+126    	; 0x43c8 <nrk_time_sub+0xf4>
  nrk_led_clr(ORANGE_LED);
    434a:	e8 16       	cp	r14, r24
    434c:	f9 06       	cpc	r15, r25
    434e:	0a 07       	cpc	r16, r26
    4350:	1b 07       	cpc	r17, r27
    4352:	91 f4       	brne	.+36     	; 0x4378 <nrk_time_sub+0xa4>
  nrk_led_clr(BLUE_LED);
  nrk_led_clr(GREEN_LED);
    4354:	2a 15       	cp	r18, r10
    4356:	3b 05       	cpc	r19, r11
    4358:	4c 05       	cpc	r20, r12
    435a:	5d 05       	cpc	r21, r13
    435c:	a8 f1       	brcs	.+106    	; 0x43c8 <nrk_time_sub+0xf4>
  nrk_led_clr(RED_LED);
    435e:	2a 19       	sub	r18, r10
    4360:	3b 09       	sbc	r19, r11
    4362:	4c 09       	sbc	r20, r12
    4364:	5d 09       	sbc	r21, r13
    4366:	24 83       	std	Z+4, r18	; 0x04
    4368:	35 83       	std	Z+5, r19	; 0x05
    436a:	46 83       	std	Z+6, r20	; 0x06
    436c:	57 83       	std	Z+7, r21	; 0x07
 
    436e:	10 82       	st	Z, r1
    4370:	11 82       	std	Z+1, r1	; 0x01
    4372:	12 82       	std	Z+2, r1	; 0x02
    4374:	13 82       	std	Z+3, r1	; 0x03
    4376:	1c c0       	rjmp	.+56     	; 0x43b0 <nrk_time_sub+0xdc>
  nrk_time_set(0,0);
  nrk_create_taskset ();
  nrk_start();
    4378:	2a 15       	cp	r18, r10
    437a:	3b 05       	cpc	r19, r11
    437c:	4c 05       	cpc	r20, r12
    437e:	5d 05       	cpc	r21, r13
    4380:	d0 f4       	brcc	.+52     	; 0x43b6 <nrk_time_sub+0xe2>
  
  return 0;
}

    4382:	01 97       	sbiw	r24, 0x01	; 1
    4384:	a1 09       	sbc	r26, r1
    4386:	b1 09       	sbc	r27, r1
    4388:	8e 19       	sub	r24, r14
    438a:	9f 09       	sbc	r25, r15
    438c:	a0 0b       	sbc	r26, r16
    438e:	b1 0b       	sbc	r27, r17
    4390:	80 83       	st	Z, r24
    4392:	91 83       	std	Z+1, r25	; 0x01
    4394:	a2 83       	std	Z+2, r26	; 0x02
    4396:	b3 83       	std	Z+3, r27	; 0x03
void Task1()
    4398:	20 50       	subi	r18, 0x00	; 0
    439a:	36 43       	sbci	r19, 0x36	; 54
    439c:	45 46       	sbci	r20, 0x65	; 101
    439e:	54 4c       	sbci	r21, 0xC4	; 196
    43a0:	2a 19       	sub	r18, r10
    43a2:	3b 09       	sbc	r19, r11
    43a4:	4c 09       	sbc	r20, r12
    43a6:	5d 09       	sbc	r21, r13
    43a8:	24 83       	std	Z+4, r18	; 0x04
    43aa:	35 83       	std	Z+5, r19	; 0x05
    43ac:	46 83       	std	Z+6, r20	; 0x06
    43ae:	57 83       	std	Z+7, r21	; 0x07
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	0b c0       	rjmp	.+22     	; 0x43cc <nrk_time_sub+0xf8>
{
nrk_time_t t;
uint16_t cnt;
uint16_t wait_high_time;
    43b6:	8e 19       	sub	r24, r14
    43b8:	9f 09       	sbc	r25, r15
    43ba:	a0 0b       	sbc	r26, r16
    43bc:	b1 0b       	sbc	r27, r17
    43be:	80 83       	st	Z, r24
    43c0:	91 83       	std	Z+1, r25	; 0x01
    43c2:	a2 83       	std	Z+2, r26	; 0x02
    43c4:	b3 83       	std	Z+3, r27	; 0x03
    43c6:	ec cf       	rjmp	.-40     	; 0x43a0 <nrk_time_sub+0xcc>
uint8_t cur_TCNT2;
cnt=0;
    43c8:	80 e0       	ldi	r24, 0x00	; 0
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	60 96       	adiw	r28, 0x10	; 16
    43ce:	0f b6       	in	r0, 0x3f	; 63
    43d0:	f8 94       	cli
    43d2:	de bf       	out	0x3e, r29	; 62
    43d4:	0f be       	out	0x3f, r0	; 63
    43d6:	cd bf       	out	0x3d, r28	; 61
    43d8:	df 91       	pop	r29
    43da:	cf 91       	pop	r28
    43dc:	1f 91       	pop	r17
    43de:	0f 91       	pop	r16
    43e0:	ff 90       	pop	r15
    43e2:	ef 90       	pop	r14
    43e4:	df 90       	pop	r13
    43e6:	cf 90       	pop	r12
    43e8:	bf 90       	pop	r11
    43ea:	af 90       	pop	r10
    43ec:	9f 90       	pop	r9
    43ee:	8f 90       	pop	r8
    43f0:	08 95       	ret

000043f2 <nrk_time_compact_nanos>:
	/*do{
		cur_TCNT2 = _nrk_os_timer_get();		
	}while(cur_TCNT2!=100);
	printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);*/
	//_nrk_os_timer_set(40);// time escape 100ms
	/*while(cnt++<=10)
    43f2:	fc 01       	movw	r30, r24
    43f4:	13 c0       	rjmp	.+38     	; 0x441c <nrk_time_compact_nanos+0x2a>
	{
		while(_nrk_high_speed_timer_get()<50000);
		_nrk_high_speed_timer_reset();
    43f6:	80 50       	subi	r24, 0x00	; 0
    43f8:	9a 4c       	sbci	r25, 0xCA	; 202
    43fa:	aa 49       	sbci	r26, 0x9A	; 154
    43fc:	bb 43       	sbci	r27, 0x3B	; 59
    43fe:	84 83       	std	Z+4, r24	; 0x04
    4400:	95 83       	std	Z+5, r25	; 0x05
    4402:	a6 83       	std	Z+6, r26	; 0x06
    4404:	b7 83       	std	Z+7, r27	; 0x07
	}*/
    4406:	80 81       	ld	r24, Z
    4408:	91 81       	ldd	r25, Z+1	; 0x01
    440a:	a2 81       	ldd	r26, Z+2	; 0x02
    440c:	b3 81       	ldd	r27, Z+3	; 0x03
    440e:	01 96       	adiw	r24, 0x01	; 1
    4410:	a1 1d       	adc	r26, r1
    4412:	b1 1d       	adc	r27, r1
    4414:	80 83       	st	Z, r24
    4416:	91 83       	std	Z+1, r25	; 0x01
    4418:	a2 83       	std	Z+2, r26	; 0x02
    441a:	b3 83       	std	Z+3, r27	; 0x03
		cur_TCNT2 = _nrk_os_timer_get();		
	}while(cur_TCNT2!=100);
	printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);*/
	//_nrk_os_timer_set(40);// time escape 100ms
	/*while(cnt++<=10)
	{
    441c:	84 81       	ldd	r24, Z+4	; 0x04
    441e:	95 81       	ldd	r25, Z+5	; 0x05
    4420:	a6 81       	ldd	r26, Z+6	; 0x06
    4422:	b7 81       	ldd	r27, Z+7	; 0x07
    4424:	80 30       	cpi	r24, 0x00	; 0
    4426:	2a ec       	ldi	r18, 0xCA	; 202
    4428:	92 07       	cpc	r25, r18
    442a:	2a e9       	ldi	r18, 0x9A	; 154
    442c:	a2 07       	cpc	r26, r18
    442e:	2b e3       	ldi	r18, 0x3B	; 59
    4430:	b2 07       	cpc	r27, r18
    4432:	08 f7       	brcc	.-62     	; 0x43f6 <nrk_time_compact_nanos+0x4>
    4434:	08 95       	ret

00004436 <nrk_time_add>:
printf( "My node's address is %u\r\n",NODE_ADDR );
  
printf( "Task1 PID=%u\r\n",nrk_get_pid());
//_nrk_high_speed_timer_start();
  while(1) {
	//_nrk_high_speed_timer_reset();
    4436:	8f 92       	push	r8
    4438:	9f 92       	push	r9
    443a:	af 92       	push	r10
    443c:	bf 92       	push	r11
    443e:	cf 92       	push	r12
    4440:	df 92       	push	r13
    4442:	ef 92       	push	r14
    4444:	ff 92       	push	r15
    4446:	0f 93       	push	r16
    4448:	1f 93       	push	r17
    444a:	cf 93       	push	r28
    444c:	df 93       	push	r29
    444e:	cd b7       	in	r28, 0x3d	; 61
    4450:	de b7       	in	r29, 0x3e	; 62
    4452:	60 97       	sbiw	r28, 0x10	; 16
    4454:	0f b6       	in	r0, 0x3f	; 63
    4456:	f8 94       	cli
    4458:	de bf       	out	0x3e, r29	; 62
    445a:	0f be       	out	0x3f, r0	; 63
    445c:	cd bf       	out	0x3d, r28	; 61
    445e:	fc 01       	movw	r30, r24
    4460:	09 83       	std	Y+1, r16	; 0x01
    4462:	1a 83       	std	Y+2, r17	; 0x02
    4464:	2b 83       	std	Y+3, r18	; 0x03
    4466:	3c 83       	std	Y+4, r19	; 0x04
    4468:	4d 83       	std	Y+5, r20	; 0x05
    446a:	5e 83       	std	Y+6, r21	; 0x06
    446c:	6f 83       	std	Y+7, r22	; 0x07
    446e:	78 87       	std	Y+8, r23	; 0x08
    4470:	89 86       	std	Y+9, r8	; 0x09
    4472:	9a 86       	std	Y+10, r9	; 0x0a
    4474:	ab 86       	std	Y+11, r10	; 0x0b
    4476:	bc 86       	std	Y+12, r11	; 0x0c
    4478:	cd 86       	std	Y+13, r12	; 0x0d
    447a:	de 86       	std	Y+14, r13	; 0x0e
    447c:	ef 86       	std	Y+15, r14	; 0x0f
    447e:	f8 8a       	std	Y+16, r15	; 0x10
    4480:	ad 80       	ldd	r10, Y+5	; 0x05
    4482:	be 80       	ldd	r11, Y+6	; 0x06
    4484:	cf 80       	ldd	r12, Y+7	; 0x07
    4486:	d8 84       	ldd	r13, Y+8	; 0x08
    4488:	ed 84       	ldd	r14, Y+13	; 0x0d
    448a:	fe 84       	ldd	r15, Y+14	; 0x0e
    448c:	0f 85       	ldd	r16, Y+15	; 0x0f
    448e:	18 89       	ldd	r17, Y+16	; 0x10
	nrk_led_toggle(ORANGE_LED);
    4490:	89 85       	ldd	r24, Y+9	; 0x09
    4492:	9a 85       	ldd	r25, Y+10	; 0x0a
    4494:	ab 85       	ldd	r26, Y+11	; 0x0b
    4496:	bc 85       	ldd	r27, Y+12	; 0x0c
    4498:	29 81       	ldd	r18, Y+1	; 0x01
    449a:	3a 81       	ldd	r19, Y+2	; 0x02
    449c:	4b 81       	ldd	r20, Y+3	; 0x03
    449e:	5c 81       	ldd	r21, Y+4	; 0x04
    44a0:	82 0f       	add	r24, r18
    44a2:	93 1f       	adc	r25, r19
    44a4:	a4 1f       	adc	r26, r20
    44a6:	b5 1f       	adc	r27, r21
    44a8:	80 83       	st	Z, r24
    44aa:	91 83       	std	Z+1, r25	; 0x01
    44ac:	a2 83       	std	Z+2, r26	; 0x02
    44ae:	b3 83       	std	Z+3, r27	; 0x03
	nrk_gpio_set(NRK_DEBUG_0);
    44b0:	ea 0c       	add	r14, r10
    44b2:	fb 1c       	adc	r15, r11
    44b4:	0c 1d       	adc	r16, r12
    44b6:	1d 1d       	adc	r17, r13
    44b8:	e4 82       	std	Z+4, r14	; 0x04
    44ba:	f5 82       	std	Z+5, r15	; 0x05
    44bc:	06 83       	std	Z+6, r16	; 0x06
    44be:	17 83       	std	Z+7, r17	; 0x07
	nrk_gpio_toggle(NRK_DEBUG_1);
    44c0:	cf 01       	movw	r24, r30
    44c2:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <nrk_time_compact_nanos>
	//printf( "Task1 cnt=%u\r\n, %d.",cnt);
	do{
    44c6:	81 e0       	ldi	r24, 0x01	; 1
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	60 96       	adiw	r28, 0x10	; 16
    44cc:	0f b6       	in	r0, 0x3f	; 63
    44ce:	f8 94       	cli
    44d0:	de bf       	out	0x3e, r29	; 62
    44d2:	0f be       	out	0x3f, r0	; 63
    44d4:	cd bf       	out	0x3d, r28	; 61
    44d6:	df 91       	pop	r29
    44d8:	cf 91       	pop	r28
    44da:	1f 91       	pop	r17
    44dc:	0f 91       	pop	r16
    44de:	ff 90       	pop	r15
    44e0:	ef 90       	pop	r14
    44e2:	df 90       	pop	r13
    44e4:	cf 90       	pop	r12
    44e6:	bf 90       	pop	r11
    44e8:	af 90       	pop	r10
    44ea:	9f 90       	pop	r9
    44ec:	8f 90       	pop	r8
    44ee:	08 95       	ret

000044f0 <nrk_time_set>:
	//printf("1st TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//wait_high_time = _nrk_high_speed_timer_get() + 2577;
	do{}while(TCNT1<2577);
	//nrk_high_speed_timer_wait(,2577);//time escape 0.5ms
	//printf("2nd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//_nrk_high_speed_timer_reset();
    44f0:	60 93 0c 08 	sts	0x080C, r22
    44f4:	70 93 0d 08 	sts	0x080D, r23
    44f8:	80 93 0e 08 	sts	0x080E, r24
    44fc:	90 93 0f 08 	sts	0x080F, r25
	//printf("3rd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
    4500:	20 93 10 08 	sts	0x0810, r18
    4504:	30 93 11 08 	sts	0x0811, r19
    4508:	40 93 12 08 	sts	0x0812, r20
    450c:	50 93 13 08 	sts	0x0813, r21
    4510:	08 95       	ret

00004512 <_nrk_time_to_ticks>:
	_nrk_os_timer_set(20);
	//printf("TCNT1 is %d cnt is %d.\n\r",_nrk_high_speed_timer_get(),cnt);
	nrk_gpio_clr(NRK_DEBUG_0);
	nrk_wait_until_next_period();
    4512:	8f 92       	push	r8
    4514:	9f 92       	push	r9
    4516:	af 92       	push	r10
    4518:	bf 92       	push	r11
    451a:	cf 92       	push	r12
    451c:	df 92       	push	r13
    451e:	ef 92       	push	r14
    4520:	ff 92       	push	r15
    4522:	0f 93       	push	r16
    4524:	1f 93       	push	r17
    4526:	cf 93       	push	r28
    4528:	df 93       	push	r29
    452a:	cd b7       	in	r28, 0x3d	; 61
    452c:	de b7       	in	r29, 0x3e	; 62
    452e:	28 97       	sbiw	r28, 0x08	; 8
    4530:	0f b6       	in	r0, 0x3f	; 63
    4532:	f8 94       	cli
    4534:	de bf       	out	0x3e, r29	; 62
    4536:	0f be       	out	0x3f, r0	; 63
    4538:	cd bf       	out	0x3d, r28	; 61
    453a:	29 83       	std	Y+1, r18	; 0x01
    453c:	3a 83       	std	Y+2, r19	; 0x02
    453e:	4b 83       	std	Y+3, r20	; 0x03
    4540:	5c 83       	std	Y+4, r21	; 0x04
    4542:	6d 83       	std	Y+5, r22	; 0x05
    4544:	7e 83       	std	Y+6, r23	; 0x06
    4546:	8f 83       	std	Y+7, r24	; 0x07
    4548:	98 87       	std	Y+8, r25	; 0x08
    454a:	8d 80       	ldd	r8, Y+5	; 0x05
    454c:	9e 80       	ldd	r9, Y+6	; 0x06
    454e:	af 80       	ldd	r10, Y+7	; 0x07
    4550:	b8 84       	ldd	r11, Y+8	; 0x08
    4552:	e9 80       	ldd	r14, Y+1	; 0x01
    4554:	fa 80       	ldd	r15, Y+2	; 0x02
    4556:	0b 81       	ldd	r16, Y+3	; 0x03
    4558:	1c 81       	ldd	r17, Y+4	; 0x04
	
        // Uncomment this line to cause a stack overflow
	// if(cnt>20) kill_stack(10);

	// At time 50, the OS will halt and print statistics
    455a:	e1 14       	cp	r14, r1
    455c:	f1 04       	cpc	r15, r1
    455e:	01 05       	cpc	r16, r1
    4560:	11 05       	cpc	r17, r1
    4562:	01 f1       	breq	.+64     	; 0x45a4 <_nrk_time_to_ticks+0x92>
	// This requires the NRK_STATS_TRACKER #define in nrk_cfg.h
	// if(cnt==50)  {
    4564:	80 e0       	ldi	r24, 0x00	; 0
    4566:	9a ec       	ldi	r25, 0xCA	; 202
    4568:	aa e9       	ldi	r26, 0x9A	; 154
    456a:	bb e3       	ldi	r27, 0x3B	; 59
    456c:	88 0e       	add	r8, r24
    456e:	99 1e       	adc	r9, r25
    4570:	aa 1e       	adc	r10, r26
    4572:	bb 1e       	adc	r11, r27
	//	nrk_stats_display_all();
	//	nrk_halt();
    4574:	c5 01       	movw	r24, r10
    4576:	b4 01       	movw	r22, r8
    4578:	23 eb       	ldi	r18, 0xB3	; 179
    457a:	36 ee       	ldi	r19, 0xE6	; 230
    457c:	4e e0       	ldi	r20, 0x0E	; 14
    457e:	50 e0       	ldi	r21, 0x00	; 0
    4580:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <__udivmodsi4>
    4584:	69 01       	movw	r12, r18
	//	}
    4586:	08 94       	sec
    4588:	e1 08       	sbc	r14, r1
    458a:	f1 08       	sbc	r15, r1
    458c:	01 09       	sbc	r16, r1
    458e:	11 09       	sbc	r17, r1
    4590:	8a e0       	ldi	r24, 0x0A	; 10
    4592:	ee 0c       	add	r14, r14
    4594:	ff 1c       	adc	r15, r15
    4596:	00 1f       	adc	r16, r16
    4598:	11 1f       	adc	r17, r17
    459a:	8a 95       	dec	r24
    459c:	d1 f7       	brne	.-12     	; 0x4592 <_nrk_time_to_ticks+0x80>
    459e:	ce 0c       	add	r12, r14
    45a0:	df 1c       	adc	r13, r15
    45a2:	09 c0       	rjmp	.+18     	; 0x45b6 <_nrk_time_to_ticks+0xa4>

	cnt=0;
	//cnt++;
    45a4:	c5 01       	movw	r24, r10
    45a6:	b4 01       	movw	r22, r8
    45a8:	23 eb       	ldi	r18, 0xB3	; 179
    45aa:	36 ee       	ldi	r19, 0xE6	; 230
    45ac:	4e e0       	ldi	r20, 0x0E	; 14
    45ae:	50 e0       	ldi	r21, 0x00	; 0
    45b0:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <__udivmodsi4>
    45b4:	69 01       	movw	r12, r18
    45b6:	b6 01       	movw	r22, r12
    45b8:	02 c0       	rjmp	.+4      	; 0x45be <_nrk_time_to_ticks+0xac>
	}
}

void Task2()
    45ba:	60 50       	subi	r22, 0x00	; 0
    45bc:	74 40       	sbci	r23, 0x04	; 4
    45be:	94 e0       	ldi	r25, 0x04	; 4
    45c0:	61 30       	cpi	r22, 0x01	; 1
    45c2:	79 07       	cpc	r23, r25
    45c4:	d0 f7       	brcc	.-12     	; 0x45ba <_nrk_time_to_ticks+0xa8>
{
  int16_t cnt;
  printf( "Task2 PID=%u\r\n",nrk_get_pid());
    45c6:	88 27       	eor	r24, r24
    45c8:	99 27       	eor	r25, r25
    45ca:	23 eb       	ldi	r18, 0xB3	; 179
    45cc:	36 ee       	ldi	r19, 0xE6	; 230
    45ce:	4e e0       	ldi	r20, 0x0E	; 14
    45d0:	50 e0       	ldi	r21, 0x00	; 0
    45d2:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsi3>
    45d6:	67 5a       	subi	r22, 0xA7	; 167
    45d8:	7c 48       	sbci	r23, 0x8C	; 140
    45da:	88 4f       	sbci	r24, 0xF8	; 248
    45dc:	9f 4f       	sbci	r25, 0xFF	; 255
    45de:	68 15       	cp	r22, r8
    45e0:	79 05       	cpc	r23, r9
    45e2:	8a 05       	cpc	r24, r10
    45e4:	9b 05       	cpc	r25, r11
    45e6:	18 f4       	brcc	.+6      	; 0x45ee <_nrk_time_to_ticks+0xdc>
    45e8:	08 94       	sec
    45ea:	c1 1c       	adc	r12, r1
    45ec:	d1 1c       	adc	r13, r1
  cnt=0;
  while(1) {
	nrk_led_toggle(BLUE_LED);
	nrk_gpio_toggle(NRK_DEBUG_1);
	printf( "Task2 signed cnt=%d\r\n",cnt );
    45ee:	c6 01       	movw	r24, r12
    45f0:	28 96       	adiw	r28, 0x08	; 8
    45f2:	0f b6       	in	r0, 0x3f	; 63
    45f4:	f8 94       	cli
    45f6:	de bf       	out	0x3e, r29	; 62
    45f8:	0f be       	out	0x3f, r0	; 63
    45fa:	cd bf       	out	0x3d, r28	; 61
    45fc:	df 91       	pop	r29
    45fe:	cf 91       	pop	r28
    4600:	1f 91       	pop	r17
    4602:	0f 91       	pop	r16
    4604:	ff 90       	pop	r15
    4606:	ef 90       	pop	r14
    4608:	df 90       	pop	r13
    460a:	cf 90       	pop	r12
    460c:	bf 90       	pop	r11
    460e:	af 90       	pop	r10
    4610:	9f 90       	pop	r9
    4612:	8f 90       	pop	r8
    4614:	08 95       	ret

00004616 <_nrk_ticks_to_time>:
	nrk_wait_until_next_period();
	//nrk_stats_display_pid(nrk_get_pid());
	cnt--;
    4616:	2f 92       	push	r2
    4618:	3f 92       	push	r3
    461a:	4f 92       	push	r4
    461c:	5f 92       	push	r5
    461e:	6f 92       	push	r6
    4620:	7f 92       	push	r7
    4622:	8f 92       	push	r8
    4624:	9f 92       	push	r9
    4626:	af 92       	push	r10
    4628:	bf 92       	push	r11
    462a:	cf 92       	push	r12
    462c:	df 92       	push	r13
    462e:	ef 92       	push	r14
    4630:	ff 92       	push	r15
    4632:	0f 93       	push	r16
    4634:	1f 93       	push	r17
    4636:	cf 93       	push	r28
    4638:	df 93       	push	r29
    463a:	cd b7       	in	r28, 0x3d	; 61
    463c:	de b7       	in	r29, 0x3e	; 62
    463e:	28 97       	sbiw	r28, 0x08	; 8
    4640:	0f b6       	in	r0, 0x3f	; 63
    4642:	f8 94       	cli
    4644:	de bf       	out	0x3e, r29	; 62
    4646:	0f be       	out	0x3f, r0	; 63
    4648:	cd bf       	out	0x3d, r28	; 61
    464a:	7b 01       	movw	r14, r22
    464c:	8c 01       	movw	r16, r24
	}
}

void Task3()
{
uint16_t cnt;
    464e:	73 70       	andi	r23, 0x03	; 3
    4650:	80 70       	andi	r24, 0x00	; 0
    4652:	90 70       	andi	r25, 0x00	; 0
    4654:	23 eb       	ldi	r18, 0xB3	; 179
    4656:	36 ee       	ldi	r19, 0xE6	; 230
    4658:	4e e0       	ldi	r20, 0x0E	; 14
    465a:	50 e0       	ldi	r21, 0x00	; 0
    465c:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsi3>
    4660:	6d 83       	std	Y+5, r22	; 0x05
    4662:	7e 83       	std	Y+6, r23	; 0x06
    4664:	8f 83       	std	Y+7, r24	; 0x07
    4666:	98 87       	std	Y+8, r25	; 0x08
    4668:	9a e0       	ldi	r25, 0x0A	; 10
    466a:	16 95       	lsr	r17
    466c:	07 95       	ror	r16
    466e:	f7 94       	ror	r15
    4670:	e7 94       	ror	r14
    4672:	9a 95       	dec	r25
    4674:	d1 f7       	brne	.-12     	; 0x466a <_nrk_ticks_to_time+0x54>
    4676:	e9 82       	std	Y+1, r14	; 0x01
    4678:	fa 82       	std	Y+2, r15	; 0x02
    467a:	0b 83       	std	Y+3, r16	; 0x03
    467c:	1c 83       	std	Y+4, r17	; 0x04
    467e:	98 85       	ldd	r25, Y+8	; 0x08
    4680:	29 80       	ldd	r2, Y+1	; 0x01
    4682:	3a 80       	ldd	r3, Y+2	; 0x02
    4684:	4b 80       	ldd	r4, Y+3	; 0x03
    4686:	5c 80       	ldd	r5, Y+4	; 0x04
    4688:	6d 80       	ldd	r6, Y+5	; 0x05
    468a:	7e 80       	ldd	r7, Y+6	; 0x06
    468c:	8f 80       	ldd	r8, Y+7	; 0x07
  printf( "Task3 PID=%u\r\n",nrk_get_pid());
    468e:	22 2d       	mov	r18, r2
    4690:	33 2d       	mov	r19, r3
    4692:	44 2d       	mov	r20, r4
    4694:	55 2d       	mov	r21, r5
    4696:	66 2d       	mov	r22, r6
    4698:	77 2d       	mov	r23, r7
    469a:	88 2d       	mov	r24, r8
    469c:	28 96       	adiw	r28, 0x08	; 8
    469e:	0f b6       	in	r0, 0x3f	; 63
    46a0:	f8 94       	cli
    46a2:	de bf       	out	0x3e, r29	; 62
    46a4:	0f be       	out	0x3f, r0	; 63
    46a6:	cd bf       	out	0x3d, r28	; 61
    46a8:	df 91       	pop	r29
    46aa:	cf 91       	pop	r28
    46ac:	1f 91       	pop	r17
    46ae:	0f 91       	pop	r16
    46b0:	ff 90       	pop	r15
    46b2:	ef 90       	pop	r14
    46b4:	df 90       	pop	r13
    46b6:	cf 90       	pop	r12
    46b8:	bf 90       	pop	r11
    46ba:	af 90       	pop	r10
    46bc:	9f 90       	pop	r9
    46be:	8f 90       	pop	r8
    46c0:	7f 90       	pop	r7
    46c2:	6f 90       	pop	r6
    46c4:	5f 90       	pop	r5
    46c6:	4f 90       	pop	r4
    46c8:	3f 90       	pop	r3
    46ca:	2f 90       	pop	r2
    46cc:	08 95       	ret

000046ce <_nrk_time_to_ticks_long>:
  cnt=0;
  while(1) {
	nrk_led_toggle(GREEN_LED);
    46ce:	af 92       	push	r10
    46d0:	bf 92       	push	r11
    46d2:	cf 92       	push	r12
    46d4:	df 92       	push	r13
    46d6:	ef 92       	push	r14
    46d8:	ff 92       	push	r15
    46da:	0f 93       	push	r16
    46dc:	1f 93       	push	r17
    46de:	cf 93       	push	r28
    46e0:	df 93       	push	r29
    46e2:	cd b7       	in	r28, 0x3d	; 61
    46e4:	de b7       	in	r29, 0x3e	; 62
    46e6:	28 97       	sbiw	r28, 0x08	; 8
    46e8:	0f b6       	in	r0, 0x3f	; 63
    46ea:	f8 94       	cli
    46ec:	de bf       	out	0x3e, r29	; 62
    46ee:	0f be       	out	0x3f, r0	; 63
    46f0:	cd bf       	out	0x3d, r28	; 61
    46f2:	29 83       	std	Y+1, r18	; 0x01
    46f4:	3a 83       	std	Y+2, r19	; 0x02
    46f6:	4b 83       	std	Y+3, r20	; 0x03
    46f8:	5c 83       	std	Y+4, r21	; 0x04
    46fa:	6d 83       	std	Y+5, r22	; 0x05
    46fc:	7e 83       	std	Y+6, r23	; 0x06
    46fe:	8f 83       	std	Y+7, r24	; 0x07
    4700:	98 87       	std	Y+8, r25	; 0x08
    4702:	ad 80       	ldd	r10, Y+5	; 0x05
    4704:	be 80       	ldd	r11, Y+6	; 0x06
    4706:	cf 80       	ldd	r12, Y+7	; 0x07
    4708:	d8 84       	ldd	r13, Y+8	; 0x08
    470a:	e9 80       	ldd	r14, Y+1	; 0x01
    470c:	fa 80       	ldd	r15, Y+2	; 0x02
    470e:	0b 81       	ldd	r16, Y+3	; 0x03
    4710:	1c 81       	ldd	r17, Y+4	; 0x04
	nrk_gpio_toggle(NRK_DEBUG_2);
	printf( "Task3 cnt=%u\r\n",cnt );
	nrk_wait_until_next_period();
	cnt++;
    4712:	e1 14       	cp	r14, r1
    4714:	f1 04       	cpc	r15, r1
    4716:	01 05       	cpc	r16, r1
    4718:	11 05       	cpc	r17, r1
    471a:	09 f1       	breq	.+66     	; 0x475e <_nrk_time_to_ticks_long+0x90>
	}
}
    471c:	80 e0       	ldi	r24, 0x00	; 0
    471e:	9a ec       	ldi	r25, 0xCA	; 202
    4720:	aa e9       	ldi	r26, 0x9A	; 154
    4722:	bb e3       	ldi	r27, 0x3B	; 59
    4724:	a8 0e       	add	r10, r24
    4726:	b9 1e       	adc	r11, r25
    4728:	ca 1e       	adc	r12, r26
    472a:	db 1e       	adc	r13, r27

void Task4()
    472c:	c6 01       	movw	r24, r12
    472e:	b5 01       	movw	r22, r10
    4730:	23 eb       	ldi	r18, 0xB3	; 179
    4732:	36 ee       	ldi	r19, 0xE6	; 230
    4734:	4e e0       	ldi	r20, 0x0E	; 14
    4736:	50 e0       	ldi	r21, 0x00	; 0
    4738:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <__udivmodsi4>
{
    473c:	08 94       	sec
    473e:	e1 08       	sbc	r14, r1
    4740:	f1 08       	sbc	r15, r1
    4742:	01 09       	sbc	r16, r1
    4744:	11 09       	sbc	r17, r1
    4746:	6a e0       	ldi	r22, 0x0A	; 10
    4748:	ee 0c       	add	r14, r14
    474a:	ff 1c       	adc	r15, r15
    474c:	00 1f       	adc	r16, r16
    474e:	11 1f       	adc	r17, r17
    4750:	6a 95       	dec	r22
    4752:	d1 f7       	brne	.-12     	; 0x4748 <_nrk_time_to_ticks_long+0x7a>
    4754:	e2 0e       	add	r14, r18
    4756:	f3 1e       	adc	r15, r19
    4758:	04 1f       	adc	r16, r20
    475a:	15 1f       	adc	r17, r21
    475c:	0a c0       	rjmp	.+20     	; 0x4772 <_nrk_time_to_ticks_long+0xa4>
uint16_t cnt;

  printf( "Task4 PID=%u\r\n",nrk_get_pid());
    475e:	c6 01       	movw	r24, r12
    4760:	b5 01       	movw	r22, r10
    4762:	23 eb       	ldi	r18, 0xB3	; 179
    4764:	36 ee       	ldi	r19, 0xE6	; 230
    4766:	4e e0       	ldi	r20, 0x0E	; 14
    4768:	50 e0       	ldi	r21, 0x00	; 0
    476a:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <__udivmodsi4>
    476e:	79 01       	movw	r14, r18
    4770:	8a 01       	movw	r16, r20
    4772:	c8 01       	movw	r24, r16
    4774:	b7 01       	movw	r22, r14
    4776:	04 c0       	rjmp	.+8      	; 0x4780 <_nrk_time_to_ticks_long+0xb2>
  cnt=0;
  while(1) {
	nrk_led_toggle(RED_LED);
	nrk_gpio_toggle(NRK_DEBUG_3);
    4778:	60 50       	subi	r22, 0x00	; 0
    477a:	74 40       	sbci	r23, 0x04	; 4
    477c:	80 40       	sbci	r24, 0x00	; 0
    477e:	90 40       	sbci	r25, 0x00	; 0
    4780:	61 30       	cpi	r22, 0x01	; 1
    4782:	a4 e0       	ldi	r26, 0x04	; 4
    4784:	7a 07       	cpc	r23, r26
    4786:	a0 e0       	ldi	r26, 0x00	; 0
    4788:	8a 07       	cpc	r24, r26
    478a:	a0 e0       	ldi	r26, 0x00	; 0
    478c:	9a 07       	cpc	r25, r26
    478e:	a0 f7       	brcc	.-24     	; 0x4778 <_nrk_time_to_ticks_long+0xaa>
	printf( "Task4 cnt=%u\r\n",cnt );
	nrk_wait_until_next_period();
	cnt++;
    4790:	23 eb       	ldi	r18, 0xB3	; 179
    4792:	36 ee       	ldi	r19, 0xE6	; 230
    4794:	4e e0       	ldi	r20, 0x0E	; 14
    4796:	50 e0       	ldi	r21, 0x00	; 0
    4798:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsi3>
    479c:	67 5a       	subi	r22, 0xA7	; 167
    479e:	7c 48       	sbci	r23, 0x8C	; 140
    47a0:	88 4f       	sbci	r24, 0xF8	; 248
    47a2:	9f 4f       	sbci	r25, 0xFF	; 255
    47a4:	6a 15       	cp	r22, r10
    47a6:	7b 05       	cpc	r23, r11
    47a8:	8c 05       	cpc	r24, r12
    47aa:	9d 05       	cpc	r25, r13
    47ac:	28 f4       	brcc	.+10     	; 0x47b8 <_nrk_time_to_ticks_long+0xea>
    47ae:	08 94       	sec
    47b0:	e1 1c       	adc	r14, r1
    47b2:	f1 1c       	adc	r15, r1
    47b4:	01 1d       	adc	r16, r1
    47b6:	11 1d       	adc	r17, r1
	}
}

void
nrk_create_taskset()
    47b8:	c8 01       	movw	r24, r16
    47ba:	b7 01       	movw	r22, r14
    47bc:	28 96       	adiw	r28, 0x08	; 8
    47be:	0f b6       	in	r0, 0x3f	; 63
    47c0:	f8 94       	cli
    47c2:	de bf       	out	0x3e, r29	; 62
    47c4:	0f be       	out	0x3f, r0	; 63
    47c6:	cd bf       	out	0x3d, r28	; 61
    47c8:	df 91       	pop	r29
    47ca:	cf 91       	pop	r28
    47cc:	1f 91       	pop	r17
    47ce:	0f 91       	pop	r16
    47d0:	ff 90       	pop	r15
    47d2:	ef 90       	pop	r14
    47d4:	df 90       	pop	r13
    47d6:	cf 90       	pop	r12
    47d8:	bf 90       	pop	r11
    47da:	af 90       	pop	r10
    47dc:	08 95       	ret

000047de <nrk_time_get>:
NRK_STK Stack2[NRK_APP_STACKSIZE];
nrk_task_type TaskTwo;
void Task2 (void);

NRK_STK Stack3[NRK_APP_STACKSIZE];
nrk_task_type TaskThree;
    47de:	ef 92       	push	r14
    47e0:	ff 92       	push	r15
    47e2:	0f 93       	push	r16
    47e4:	1f 93       	push	r17
    47e6:	cf 93       	push	r28
    47e8:	df 93       	push	r29
    47ea:	ec 01       	movw	r28, r24
void Task3 (void);
    47ec:	80 91 0c 08 	lds	r24, 0x080C
    47f0:	90 91 0d 08 	lds	r25, 0x080D
    47f4:	a0 91 0e 08 	lds	r26, 0x080E
    47f8:	b0 91 0f 08 	lds	r27, 0x080F
    47fc:	88 83       	st	Y, r24
    47fe:	99 83       	std	Y+1, r25	; 0x01
    4800:	aa 83       	std	Y+2, r26	; 0x02
    4802:	bb 83       	std	Y+3, r27	; 0x03

    4804:	e0 90 10 08 	lds	r14, 0x0810
    4808:	f0 90 11 08 	lds	r15, 0x0811
    480c:	00 91 12 08 	lds	r16, 0x0812
    4810:	10 91 13 08 	lds	r17, 0x0813
    4814:	ec 82       	std	Y+4, r14	; 0x04
    4816:	fd 82       	std	Y+5, r15	; 0x05
    4818:	0e 83       	std	Y+6, r16	; 0x06
    481a:	1f 83       	std	Y+7, r17	; 0x07

NRK_STK Stack4[NRK_APP_STACKSIZE];
    481c:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_nrk_os_timer_get>
    4820:	99 27       	eor	r25, r25
    4822:	aa 27       	eor	r26, r26
    4824:	bb 27       	eor	r27, r27
    4826:	bc 01       	movw	r22, r24
    4828:	cd 01       	movw	r24, r26
    482a:	23 eb       	ldi	r18, 0xB3	; 179
    482c:	36 ee       	ldi	r19, 0xE6	; 230
    482e:	4e e0       	ldi	r20, 0x0E	; 14
    4830:	50 e0       	ldi	r21, 0x00	; 0
    4832:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsi3>
    4836:	e6 0e       	add	r14, r22
    4838:	f7 1e       	adc	r15, r23
    483a:	08 1f       	adc	r16, r24
    483c:	19 1f       	adc	r17, r25
    483e:	ec 82       	std	Y+4, r14	; 0x04
    4840:	fd 82       	std	Y+5, r15	; 0x05
    4842:	0e 83       	std	Y+6, r16	; 0x06
    4844:	1f 83       	std	Y+7, r17	; 0x07
    4846:	13 c0       	rjmp	.+38     	; 0x486e <nrk_time_get+0x90>
nrk_task_type TaskFour;
void Task4 (void);

    4848:	80 50       	subi	r24, 0x00	; 0
    484a:	9a 4c       	sbci	r25, 0xCA	; 202
    484c:	aa 49       	sbci	r26, 0x9A	; 154
    484e:	bb 43       	sbci	r27, 0x3B	; 59
    4850:	8c 83       	std	Y+4, r24	; 0x04
    4852:	9d 83       	std	Y+5, r25	; 0x05
    4854:	ae 83       	std	Y+6, r26	; 0x06
    4856:	bf 83       	std	Y+7, r27	; 0x07
void nrk_create_taskset();
    4858:	88 81       	ld	r24, Y
    485a:	99 81       	ldd	r25, Y+1	; 0x01
    485c:	aa 81       	ldd	r26, Y+2	; 0x02
    485e:	bb 81       	ldd	r27, Y+3	; 0x03
    4860:	01 96       	adiw	r24, 0x01	; 1
    4862:	a1 1d       	adc	r26, r1
    4864:	b1 1d       	adc	r27, r1
    4866:	88 83       	st	Y, r24
    4868:	99 83       	std	Y+1, r25	; 0x01
    486a:	aa 83       	std	Y+2, r26	; 0x02
    486c:	bb 83       	std	Y+3, r27	; 0x03
nrk_task_type TaskThree;
void Task3 (void);


NRK_STK Stack4[NRK_APP_STACKSIZE];
nrk_task_type TaskFour;
    486e:	8c 81       	ldd	r24, Y+4	; 0x04
    4870:	9d 81       	ldd	r25, Y+5	; 0x05
    4872:	ae 81       	ldd	r26, Y+6	; 0x06
    4874:	bf 81       	ldd	r27, Y+7	; 0x07
    4876:	80 30       	cpi	r24, 0x00	; 0
    4878:	2a ec       	ldi	r18, 0xCA	; 202
    487a:	92 07       	cpc	r25, r18
    487c:	2a e9       	ldi	r18, 0x9A	; 154
    487e:	a2 07       	cpc	r26, r18
    4880:	2b e3       	ldi	r18, 0x3B	; 59
    4882:	b2 07       	cpc	r27, r18
    4884:	08 f7       	brcc	.-62     	; 0x4848 <nrk_time_get+0x6a>
    4886:	df 91       	pop	r29
    4888:	cf 91       	pop	r28
    488a:	1f 91       	pop	r17
    488c:	0f 91       	pop	r16
    488e:	ff 90       	pop	r15
    4890:	ef 90       	pop	r14
    4892:	08 95       	ret

00004894 <nrk_idle_task>:
NRK_STK Stack2[NRK_APP_STACKSIZE];
nrk_task_type TaskTwo;
void Task2 (void);

NRK_STK Stack3[NRK_APP_STACKSIZE];
nrk_task_type TaskThree;
    4894:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <nrk_stack_check>
void Task3 (void);

    4898:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <_nrk_get_next_wakeup>
    489c:	8b 30       	cpi	r24, 0x0B	; 11
    489e:	30 f4       	brcc	.+12     	; 0x48ac <nrk_idle_task+0x18>

NRK_STK Stack4[NRK_APP_STACKSIZE];
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	80 93 09 08 	sts	0x0809, r24
nrk_task_type TaskFour;
    48a6:	0e 94 3a 2a 	call	0x5474	; 0x5474 <nrk_idle>
    48aa:	09 c0       	rjmp	.+18     	; 0x48be <nrk_idle_task+0x2a>
void Task4 (void);

void nrk_create_taskset();
uint8_t kill_stack(uint8_t val);

    48ac:	8a e0       	ldi	r24, 0x0A	; 10
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <nrk_spin_wait_us>
int
    48b4:	82 e0       	ldi	r24, 0x02	; 2
    48b6:	80 93 09 08 	sts	0x0809, r24
main ()
    48ba:	0e 94 2e 2a 	call	0x545c	; 0x545c <nrk_sleep>
  nrk_setup_ports();
  nrk_setup_uart(UART_BAUDRATE_115K2);

  nrk_init();

  nrk_led_clr(ORANGE_LED);
    48be:	80 91 1a 06 	lds	r24, 0x061A
    48c2:	85 35       	cpi	r24, 0x55	; 85
    48c4:	19 f0       	breq	.+6      	; 0x48cc <nrk_idle_task+0x38>
    48c6:	88 e0       	ldi	r24, 0x08	; 8
    48c8:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_error_add>
  nrk_led_clr(BLUE_LED);
  nrk_led_clr(GREEN_LED);
  nrk_led_clr(RED_LED);
 
  nrk_time_set(0,0);
    48cc:	80 91 7e 21 	lds	r24, 0x217E
    48d0:	85 35       	cpi	r24, 0x55	; 85
    48d2:	01 f3       	breq	.-64     	; 0x4894 <nrk_idle_task>
    48d4:	88 e0       	ldi	r24, 0x08	; 8
    48d6:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_error_add>
    48da:	dc cf       	rjmp	.-72     	; 0x4894 <nrk_idle_task>

000048dc <_nrk_scheduler>:
nrk_task_type TaskThree;
void Task3 (void);


NRK_STK Stack4[NRK_APP_STACKSIZE];
nrk_task_type TaskFour;
    48dc:	8f 92       	push	r8
    48de:	9f 92       	push	r9
    48e0:	af 92       	push	r10
    48e2:	bf 92       	push	r11
    48e4:	cf 92       	push	r12
    48e6:	df 92       	push	r13
    48e8:	ef 92       	push	r14
    48ea:	ff 92       	push	r15
    48ec:	0f 93       	push	r16
    48ee:	1f 93       	push	r17
    48f0:	cf 93       	push	r28
    48f2:	df 93       	push	r29
void Task4 (void);

void nrk_create_taskset();
uint8_t kill_stack(uint8_t val);

    48f4:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>
int
main ()
{
  nrk_setup_ports();
    48f8:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <_nrk_high_speed_timer_reset>
  nrk_setup_uart(UART_BAUDRATE_115K2);
    48fc:	0e 94 c9 26 	call	0x4d92	; 0x4d92 <_nrk_high_speed_timer_get>
    4900:	4c 01       	movw	r8, r24

  nrk_init();
    4902:	8a ef       	ldi	r24, 0xFA	; 250
    4904:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_nrk_set_next_wakeup>

  nrk_led_clr(ORANGE_LED);
  nrk_led_clr(BLUE_LED);
  nrk_led_clr(GREEN_LED);
  nrk_led_clr(RED_LED);
    4908:	0e 94 0c 2a 	call	0x5418	; 0x5418 <nrk_watchdog_reset>
  
  return 0;
}

void Task1()
{
    490c:	d0 90 82 05 	lds	r13, 0x0582
    4910:	6d 2d       	mov	r22, r13
    4912:	77 27       	eor	r23, r23
    4914:	88 27       	eor	r24, r24
    4916:	99 27       	eor	r25, r25
    4918:	23 eb       	ldi	r18, 0xB3	; 179
    491a:	36 ee       	ldi	r19, 0xE6	; 230
    491c:	4e e0       	ldi	r20, 0x0E	; 14
    491e:	50 e0       	ldi	r21, 0x00	; 0
    4920:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsi3>
    4924:	7b 01       	movw	r14, r22
    4926:	8c 01       	movw	r16, r24
    4928:	80 91 10 08 	lds	r24, 0x0810
    492c:	90 91 11 08 	lds	r25, 0x0811
    4930:	a0 91 12 08 	lds	r26, 0x0812
    4934:	b0 91 13 08 	lds	r27, 0x0813
    4938:	e8 0e       	add	r14, r24
    493a:	f9 1e       	adc	r15, r25
    493c:	0a 1f       	adc	r16, r26
    493e:	1b 1f       	adc	r17, r27
nrk_time_t t;
    4940:	c8 01       	movw	r24, r16
    4942:	b7 01       	movw	r22, r14
    4944:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <__udivmodsi4>
    4948:	e6 1a       	sub	r14, r22
    494a:	f7 0a       	sbc	r15, r23
    494c:	08 0b       	sbc	r16, r24
    494e:	19 0b       	sbc	r17, r25
    4950:	e0 92 10 08 	sts	0x0810, r14
    4954:	f0 92 11 08 	sts	0x0811, r15
    4958:	00 93 12 08 	sts	0x0812, r16
    495c:	10 93 13 08 	sts	0x0813, r17
uint16_t cnt;
uint16_t wait_high_time;
uint8_t cur_TCNT2;
    4960:	e0 91 15 08 	lds	r30, 0x0815
    4964:	f0 91 16 08 	lds	r31, 0x0816
    4968:	90 85       	ldd	r25, Z+8	; 0x08
    496a:	99 23       	and	r25, r25
    496c:	b9 f4       	brne	.+46     	; 0x499c <_nrk_scheduler+0xc0>
cnt=0;
nrk_kprintf( PSTR("Nano-RK Version ") );
    496e:	80 91 09 08 	lds	r24, 0x0809
    4972:	82 30       	cpi	r24, 0x02	; 2
    4974:	19 f4       	brne	.+6      	; 0x497c <_nrk_scheduler+0xa0>
    4976:	8d 2d       	mov	r24, r13
    4978:	0e 94 37 19 	call	0x326e	; 0x326e <_nrk_stats_sleep>
printf( "%d\r\n",NRK_VERSION );
    497c:	e0 91 15 08 	lds	r30, 0x0815
    4980:	f0 91 16 08 	lds	r31, 0x0816
    4984:	60 91 82 05 	lds	r22, 0x0582
    4988:	80 85       	ldd	r24, Z+8	; 0x08
    498a:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_nrk_stats_task_preempted>

printf( "My node's address is %u\r\n",NODE_ADDR );
    498e:	e0 91 15 08 	lds	r30, 0x0815
    4992:	f0 91 16 08 	lds	r31, 0x0816
    4996:	60 e0       	ldi	r22, 0x00	; 0
    4998:	80 85       	ldd	r24, Z+8	; 0x08
    499a:	05 c0       	rjmp	.+10     	; 0x49a6 <_nrk_scheduler+0xca>
  
printf( "Task1 PID=%u\r\n",nrk_get_pid());
//_nrk_high_speed_timer_start();
  while(1) {
    499c:	85 81       	ldd	r24, Z+5	; 0x05
    499e:	88 23       	and	r24, r24
    49a0:	29 f0       	breq	.+10     	; 0x49ac <_nrk_scheduler+0xd0>
	//_nrk_high_speed_timer_reset();
    49a2:	6d 2d       	mov	r22, r13
    49a4:	89 2f       	mov	r24, r25
    49a6:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <_nrk_stats_task_suspend>
    49aa:	04 c0       	rjmp	.+8      	; 0x49b4 <_nrk_scheduler+0xd8>
	nrk_led_toggle(ORANGE_LED);
	nrk_gpio_set(NRK_DEBUG_0);
    49ac:	6d 2d       	mov	r22, r13
    49ae:	89 2f       	mov	r24, r25
    49b0:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_nrk_stats_task_preempted>
    49b4:	80 91 0c 08 	lds	r24, 0x080C
    49b8:	90 91 0d 08 	lds	r25, 0x080D
    49bc:	a0 91 0e 08 	lds	r26, 0x080E
    49c0:	b0 91 0f 08 	lds	r27, 0x080F
    49c4:	20 91 10 08 	lds	r18, 0x0810
    49c8:	30 91 11 08 	lds	r19, 0x0811
    49cc:	40 91 12 08 	lds	r20, 0x0812
    49d0:	50 91 13 08 	lds	r21, 0x0813
    49d4:	1b c0       	rjmp	.+54     	; 0x4a0c <_nrk_scheduler+0x130>
	nrk_gpio_toggle(NRK_DEBUG_1);
	//printf( "Task1 cnt=%u\r\n, %d.",cnt);
	do{
		cur_TCNT2 = _nrk_os_timer_get();		
	}while(cur_TCNT2<=20);
	//printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);
    49d6:	e1 2c       	mov	r14, r1
    49d8:	66 e3       	ldi	r22, 0x36	; 54
    49da:	f6 2e       	mov	r15, r22
    49dc:	65 e6       	ldi	r22, 0x65	; 101
    49de:	06 2f       	mov	r16, r22
    49e0:	64 ec       	ldi	r22, 0xC4	; 196
    49e2:	16 2f       	mov	r17, r22
    49e4:	e2 0e       	add	r14, r18
    49e6:	f3 1e       	adc	r15, r19
    49e8:	04 1f       	adc	r16, r20
    49ea:	15 1f       	adc	r17, r21
	
	//printf("current TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
    49ec:	c8 01       	movw	r24, r16
    49ee:	b7 01       	movw	r22, r14
    49f0:	23 eb       	ldi	r18, 0xB3	; 179
    49f2:	36 ee       	ldi	r19, 0xE6	; 230
    49f4:	4e e0       	ldi	r20, 0x0E	; 14
    49f6:	50 e0       	ldi	r21, 0x00	; 0
    49f8:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <__udivmodsi4>
    49fc:	a8 01       	movw	r20, r16
    49fe:	97 01       	movw	r18, r14
    4a00:	26 1b       	sub	r18, r22
    4a02:	37 0b       	sbc	r19, r23
    4a04:	48 0b       	sbc	r20, r24
    4a06:	59 0b       	sbc	r21, r25
    4a08:	d6 01       	movw	r26, r12
    4a0a:	c5 01       	movw	r24, r10
    4a0c:	5c 01       	movw	r10, r24
    4a0e:	6d 01       	movw	r12, r26
    4a10:	08 94       	sec
    4a12:	a1 1c       	adc	r10, r1
    4a14:	b1 1c       	adc	r11, r1
    4a16:	c1 1c       	adc	r12, r1
    4a18:	d1 1c       	adc	r13, r1
	nrk_led_toggle(ORANGE_LED);
	nrk_gpio_set(NRK_DEBUG_0);
	nrk_gpio_toggle(NRK_DEBUG_1);
	//printf( "Task1 cnt=%u\r\n, %d.",cnt);
	do{
		cur_TCNT2 = _nrk_os_timer_get();		
    4a1a:	20 30       	cpi	r18, 0x00	; 0
    4a1c:	6a ec       	ldi	r22, 0xCA	; 202
    4a1e:	36 07       	cpc	r19, r22
    4a20:	6a e9       	ldi	r22, 0x9A	; 154
    4a22:	46 07       	cpc	r20, r22
    4a24:	6b e3       	ldi	r22, 0x3B	; 59
    4a26:	56 07       	cpc	r21, r22
    4a28:	b0 f6       	brcc	.-84     	; 0x49d6 <_nrk_scheduler+0xfa>
    4a2a:	80 93 0c 08 	sts	0x080C, r24
    4a2e:	90 93 0d 08 	sts	0x080D, r25
    4a32:	a0 93 0e 08 	sts	0x080E, r26
    4a36:	b0 93 0f 08 	sts	0x080F, r27
    4a3a:	20 93 10 08 	sts	0x0810, r18
    4a3e:	30 93 11 08 	sts	0x0811, r19
    4a42:	40 93 12 08 	sts	0x0812, r20
    4a46:	50 93 13 08 	sts	0x0813, r21
	
	//printf("current TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	/*do{
		cur_TCNT2 = _nrk_os_timer_get();		
	}while(cur_TCNT2!=100);
	printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);*/
    4a4a:	e0 91 15 08 	lds	r30, 0x0815
    4a4e:	f0 91 16 08 	lds	r31, 0x0816
    4a52:	85 81       	ldd	r24, Z+5	; 0x05
    4a54:	88 23       	and	r24, r24
    4a56:	19 f1       	breq	.+70     	; 0x4a9e <_nrk_scheduler+0x1c2>
    4a58:	81 85       	ldd	r24, Z+9	; 0x09
    4a5a:	84 30       	cpi	r24, 0x04	; 4
    4a5c:	01 f1       	breq	.+64     	; 0x4a9e <_nrk_scheduler+0x1c2>
	//_nrk_os_timer_set(40);// time escape 100ms
	/*while(cnt++<=10)
	{
		while(_nrk_high_speed_timer_get()<50000);
    4a5e:	87 81       	ldd	r24, Z+7	; 0x07
    4a60:	82 30       	cpi	r24, 0x02	; 2
    4a62:	29 f0       	breq	.+10     	; 0x4a6e <_nrk_scheduler+0x192>
		_nrk_high_speed_timer_reset();
	}*/
    4a64:	88 23       	and	r24, r24
    4a66:	41 f0       	breq	.+16     	; 0x4a78 <_nrk_scheduler+0x19c>
    4a68:	86 81       	ldd	r24, Z+6	; 0x06
    4a6a:	88 23       	and	r24, r24
    4a6c:	11 f4       	brne	.+4      	; 0x4a72 <_nrk_scheduler+0x196>
	_nrk_high_speed_timer_reset();
    4a6e:	85 e0       	ldi	r24, 0x05	; 5
    4a70:	01 c0       	rjmp	.+2      	; 0x4a74 <_nrk_scheduler+0x198>
	//_nrk_os_timer_reset();
	//printf("1st TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
    4a72:	83 e0       	ldi	r24, 0x03	; 3
    4a74:	81 87       	std	Z+9, r24	; 0x09
    4a76:	0c c0       	rjmp	.+24     	; 0x4a90 <_nrk_scheduler+0x1b4>
	//wait_high_time = _nrk_high_speed_timer_get() + 2577;
	do{}while(TCNT1<2577);
	//nrk_high_speed_timer_wait(,2577);//time escape 0.5ms
    4a78:	83 e0       	ldi	r24, 0x03	; 3
    4a7a:	81 87       	std	Z+9, r24	; 0x09
	//printf("2nd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
    4a7c:	e0 91 15 08 	lds	r30, 0x0815
    4a80:	f0 91 16 08 	lds	r31, 0x0816
    4a84:	17 82       	std	Z+7, r1	; 0x07
	//_nrk_high_speed_timer_reset();
    4a86:	e0 91 15 08 	lds	r30, 0x0815
    4a8a:	f0 91 16 08 	lds	r31, 0x0816
    4a8e:	16 82       	std	Z+6, r1	; 0x06
	//printf("3rd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	_nrk_os_timer_set(20);
    4a90:	e0 91 15 08 	lds	r30, 0x0815
    4a94:	f0 91 16 08 	lds	r31, 0x0816
    4a98:	80 85       	ldd	r24, Z+8	; 0x08
    4a9a:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <nrk_rem_from_readyQ>
	nrk_wait_until_next_period();
	
        // Uncomment this line to cause a stack overflow
	// if(cnt>20) kill_stack(10);

	// At time 50, the OS will halt and print statistics
    4a9e:	e0 91 15 08 	lds	r30, 0x0815
    4aa2:	f0 91 16 08 	lds	r31, 0x0816
    4aa6:	85 8d       	ldd	r24, Z+29	; 0x1d
    4aa8:	96 8d       	ldd	r25, Z+30	; 0x1e
    4aaa:	89 2b       	or	r24, r25
    4aac:	e9 f1       	breq	.+122    	; 0x4b28 <_nrk_scheduler+0x24c>
    4aae:	40 85       	ldd	r20, Z+8	; 0x08
    4ab0:	44 23       	and	r20, r20
    4ab2:	d1 f1       	breq	.+116    	; 0x4b28 <_nrk_scheduler+0x24c>
    4ab4:	81 85       	ldd	r24, Z+9	; 0x09
    4ab6:	84 30       	cpi	r24, 0x04	; 4
    4ab8:	b9 f1       	breq	.+110    	; 0x4b28 <_nrk_scheduler+0x24c>
	// This requires the NRK_STATS_TRACKER #define in nrk_cfg.h
	// if(cnt==50)  {
    4aba:	21 8d       	ldd	r18, Z+25	; 0x19
    4abc:	32 8d       	ldd	r19, Z+26	; 0x1a
    4abe:	80 91 82 05 	lds	r24, 0x0582
    4ac2:	99 27       	eor	r25, r25
    4ac4:	28 17       	cp	r18, r24
    4ac6:	39 07       	cpc	r19, r25
    4ac8:	90 f4       	brcc	.+36     	; 0x4aee <_nrk_scheduler+0x212>
	//	nrk_stats_display_all();
	//	nrk_halt();
	//	}
    4aca:	84 2f       	mov	r24, r20
    4acc:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <_nrk_stats_add_violation>

	cnt=0;
    4ad0:	e0 91 15 08 	lds	r30, 0x0815
    4ad4:	f0 91 16 08 	lds	r31, 0x0816
    4ad8:	60 85       	ldd	r22, Z+8	; 0x08
    4ada:	82 e0       	ldi	r24, 0x02	; 2
    4adc:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_kernel_error_add>
	//cnt++;
    4ae0:	e0 91 15 08 	lds	r30, 0x0815
    4ae4:	f0 91 16 08 	lds	r31, 0x0816
    4ae8:	12 8e       	std	Z+26, r1	; 0x1a
    4aea:	11 8e       	std	Z+25, r1	; 0x19
    4aec:	04 c0       	rjmp	.+8      	; 0x4af6 <_nrk_scheduler+0x21a>
	}
}
    4aee:	28 1b       	sub	r18, r24
    4af0:	39 0b       	sbc	r19, r25
    4af2:	32 8f       	std	Z+26, r19	; 0x1a
    4af4:	21 8f       	std	Z+25, r18	; 0x19

void Task2()
    4af6:	e0 91 15 08 	lds	r30, 0x0815
    4afa:	f0 91 16 08 	lds	r31, 0x0816
    4afe:	e0 84       	ldd	r14, Z+8	; 0x08
{
  int16_t cnt;
    4b00:	81 8d       	ldd	r24, Z+25	; 0x19
    4b02:	92 8d       	ldd	r25, Z+26	; 0x1a
    4b04:	89 2b       	or	r24, r25
    4b06:	81 f4       	brne	.+32     	; 0x4b28 <_nrk_scheduler+0x24c>
  printf( "Task2 PID=%u\r\n",nrk_get_pid());
  cnt=0;
    4b08:	8e 2d       	mov	r24, r14
    4b0a:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <_nrk_stats_add_violation>
  while(1) {
	nrk_led_toggle(BLUE_LED);
    4b0e:	6e 2d       	mov	r22, r14
    4b10:	83 e0       	ldi	r24, 0x03	; 3
    4b12:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_kernel_error_add>
	nrk_gpio_toggle(NRK_DEBUG_1);
    4b16:	e0 91 15 08 	lds	r30, 0x0815
    4b1a:	f0 91 16 08 	lds	r31, 0x0816
    4b1e:	83 e0       	ldi	r24, 0x03	; 3
    4b20:	81 87       	std	Z+9, r24	; 0x09
	printf( "Task2 signed cnt=%d\r\n",cnt );
    4b22:	8e 2d       	mov	r24, r14
    4b24:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <nrk_rem_from_readyQ>
    4b28:	ca e5       	ldi	r28, 0x5A	; 90
    4b2a:	d7 e0       	ldi	r29, 0x07	; 7
    4b2c:	00 e6       	ldi	r16, 0x60	; 96
    4b2e:	1a ee       	ldi	r17, 0xEA	; 234
    4b30:	cc 24       	eor	r12, r12
    4b32:	dd 24       	eor	r13, r13
    4b34:	4c 2d       	mov	r20, r12
	}
}

void Task3()
{
uint16_t cnt;
    4b36:	88 85       	ldd	r24, Y+8	; 0x08
    4b38:	8f 3f       	cpi	r24, 0xFF	; 255
    4b3a:	09 f4       	brne	.+2      	; 0x4b3e <_nrk_scheduler+0x262>
    4b3c:	89 c0       	rjmp	.+274    	; 0x4c50 <_nrk_scheduler+0x374>
  printf( "Task3 PID=%u\r\n",nrk_get_pid());
    4b3e:	1d 82       	std	Y+5, r1	; 0x05
  cnt=0;
    4b40:	88 23       	and	r24, r24
    4b42:	91 f1       	breq	.+100    	; 0x4ba8 <_nrk_scheduler+0x2cc>
    4b44:	89 85       	ldd	r24, Y+9	; 0x09
    4b46:	84 30       	cpi	r24, 0x04	; 4
    4b48:	79 f1       	breq	.+94     	; 0x4ba8 <_nrk_scheduler+0x2cc>
  while(1) {
	nrk_led_toggle(GREEN_LED);
    4b4a:	2d 89       	ldd	r18, Y+21	; 0x15
    4b4c:	3e 89       	ldd	r19, Y+22	; 0x16
    4b4e:	80 91 82 05 	lds	r24, 0x0582
    4b52:	99 27       	eor	r25, r25
    4b54:	28 17       	cp	r18, r24
    4b56:	39 07       	cpc	r19, r25
    4b58:	28 f0       	brcs	.+10     	; 0x4b64 <_nrk_scheduler+0x288>
	nrk_gpio_toggle(NRK_DEBUG_2);
    4b5a:	28 1b       	sub	r18, r24
    4b5c:	39 0b       	sbc	r19, r25
    4b5e:	3e 8b       	std	Y+22, r19	; 0x16
    4b60:	2d 8b       	std	Y+21, r18	; 0x15
    4b62:	02 c0       	rjmp	.+4      	; 0x4b68 <_nrk_scheduler+0x28c>
	printf( "Task3 cnt=%u\r\n",cnt );
	nrk_wait_until_next_period();
    4b64:	1e 8a       	std	Y+22, r1	; 0x16
    4b66:	1d 8a       	std	Y+21, r1	; 0x15
	cnt++;
	}
}

void Task4()
    4b68:	2f 89       	ldd	r18, Y+23	; 0x17
    4b6a:	38 8d       	ldd	r19, Y+24	; 0x18
    4b6c:	28 17       	cp	r18, r24
    4b6e:	39 07       	cpc	r19, r25
    4b70:	28 f0       	brcs	.+10     	; 0x4b7c <_nrk_scheduler+0x2a0>
{
    4b72:	28 1b       	sub	r18, r24
    4b74:	39 0b       	sbc	r19, r25
    4b76:	38 8f       	std	Y+24, r19	; 0x18
    4b78:	2f 8b       	std	Y+23, r18	; 0x17
    4b7a:	0e c0       	rjmp	.+28     	; 0x4b98 <_nrk_scheduler+0x2bc>
uint16_t cnt;

    4b7c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4b7e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    4b80:	86 17       	cp	r24, r22
    4b82:	97 07       	cpc	r25, r23
    4b84:	28 f4       	brcc	.+10     	; 0x4b90 <_nrk_scheduler+0x2b4>
  printf( "Task4 PID=%u\r\n",nrk_get_pid());
    4b86:	68 1b       	sub	r22, r24
    4b88:	79 0b       	sbc	r23, r25
    4b8a:	78 8f       	std	Y+24, r23	; 0x18
    4b8c:	6f 8b       	std	Y+23, r22	; 0x17
    4b8e:	04 c0       	rjmp	.+8      	; 0x4b98 <_nrk_scheduler+0x2bc>
  cnt=0;
  while(1) {
    4b90:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <__udivmodhi4>
    4b94:	98 8f       	std	Y+24, r25	; 0x18
    4b96:	8f 8b       	std	Y+23, r24	; 0x17
	nrk_led_toggle(RED_LED);
	nrk_gpio_toggle(NRK_DEBUG_3);
    4b98:	8f 89       	ldd	r24, Y+23	; 0x17
    4b9a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b9c:	89 2b       	or	r24, r25
    4b9e:	21 f4       	brne	.+8      	; 0x4ba8 <_nrk_scheduler+0x2cc>
    4ba0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ba2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ba4:	98 8f       	std	Y+24, r25	; 0x18
    4ba6:	8f 8b       	std	Y+23, r24	; 0x17
	printf( "Task4 cnt=%u\r\n",cnt );
	nrk_wait_until_next_period();
	cnt++;
	}
}

    4ba8:	89 85       	ldd	r24, Y+9	; 0x09
    4baa:	83 30       	cpi	r24, 0x03	; 3
    4bac:	09 f0       	breq	.+2      	; 0x4bb0 <_nrk_scheduler+0x2d4>
    4bae:	50 c0       	rjmp	.+160    	; 0x4c50 <_nrk_scheduler+0x374>
void
nrk_create_taskset()
{
    4bb0:	8d 89       	ldd	r24, Y+21	; 0x15
    4bb2:	9e 89       	ldd	r25, Y+22	; 0x16
    4bb4:	89 2b       	or	r24, r25
    4bb6:	09 f0       	breq	.+2      	; 0x4bba <_nrk_scheduler+0x2de>
    4bb8:	43 c0       	rjmp	.+134    	; 0x4c40 <_nrk_scheduler+0x364>
  nrk_task_set_entry_function( &TaskOne, Task1);
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
    4bba:	8f 81       	ldd	r24, Y+7	; 0x07
    4bbc:	88 23       	and	r24, r24
    4bbe:	a1 f0       	breq	.+40     	; 0x4be8 <_nrk_scheduler+0x30c>
    4bc0:	8e 81       	ldd	r24, Y+6	; 0x06
    4bc2:	88 23       	and	r24, r24
    4bc4:	89 f0       	breq	.+34     	; 0x4be8 <_nrk_scheduler+0x30c>
    4bc6:	81 e0       	ldi	r24, 0x01	; 1
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	a0 e0       	ldi	r26, 0x00	; 0
    4bcc:	b0 e0       	ldi	r27, 0x00	; 0
    4bce:	00 90 05 08 	lds	r0, 0x0805
    4bd2:	04 c0       	rjmp	.+8      	; 0x4bdc <_nrk_scheduler+0x300>
    4bd4:	88 0f       	add	r24, r24
    4bd6:	99 1f       	adc	r25, r25
    4bd8:	aa 1f       	adc	r26, r26
    4bda:	bb 1f       	adc	r27, r27
    4bdc:	0a 94       	dec	r0
    4bde:	d2 f7       	brpl	.-12     	; 0x4bd4 <_nrk_scheduler+0x2f8>
    4be0:	89 8b       	std	Y+17, r24	; 0x11
    4be2:	9a 8b       	std	Y+18, r25	; 0x12
    4be4:	ab 8b       	std	Y+19, r26	; 0x13
    4be6:	bc 8b       	std	Y+20, r27	; 0x14
  TaskOne.prio = 1;
  TaskOne.FirstActivation = TRUE;
    4be8:	1f 82       	std	Y+7, r1	; 0x07
  TaskOne.Type = BASIC_TASK;
    4bea:	1e 82       	std	Y+6, r1	; 0x06
  TaskOne.SchType = PREEMPTIVE;
    4bec:	1d 82       	std	Y+5, r1	; 0x05
  TaskOne.period.secs = 0;
    4bee:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4bf0:	38 a1       	ldd	r19, Y+32	; 0x20
    4bf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bf4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4bf6:	21 30       	cpi	r18, 0x01	; 1
    4bf8:	31 05       	cpc	r19, r1
    4bfa:	61 f4       	brne	.+24     	; 0x4c14 <_nrk_scheduler+0x338>
  TaskOne.period.nano_secs = 50*NANOS_PER_MS;
  TaskOne.cpu_reserve.secs = 0;
    4bfc:	9a 8f       	std	Y+26, r25	; 0x1a
    4bfe:	89 8f       	std	Y+25, r24	; 0x19
  TaskOne.cpu_reserve.nano_secs = 50*NANOS_PER_MS;
    4c00:	82 e0       	ldi	r24, 0x02	; 2
    4c02:	89 87       	std	Y+9, r24	; 0x09
  TaskOne.offset.secs = 0;
    4c04:	8f 89       	ldd	r24, Y+23	; 0x17
    4c06:	98 8d       	ldd	r25, Y+24	; 0x18
    4c08:	9e 8b       	std	Y+22, r25	; 0x16
    4c0a:	8d 8b       	std	Y+21, r24	; 0x15
  TaskOne.offset.nano_secs= 0;
    4c0c:	84 2f       	mov	r24, r20
    4c0e:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <nrk_add_to_readyQ>
    4c12:	16 c0       	rjmp	.+44     	; 0x4c40 <_nrk_scheduler+0x364>
  nrk_activate_task (&TaskOne);

  nrk_task_set_entry_function( &TaskTwo, Task2);
    4c14:	9a 8f       	std	Y+26, r25	; 0x1a
    4c16:	89 8f       	std	Y+25, r24	; 0x19
  nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
  TaskTwo.prio = 2;
  TaskTwo.FirstActivation = TRUE;
    4c18:	21 50       	subi	r18, 0x01	; 1
    4c1a:	30 40       	sbci	r19, 0x00	; 0
    4c1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c20:	ac 01       	movw	r20, r24
    4c22:	24 9f       	mul	r18, r20
    4c24:	c0 01       	movw	r24, r0
    4c26:	25 9f       	mul	r18, r21
    4c28:	90 0d       	add	r25, r0
    4c2a:	34 9f       	mul	r19, r20
    4c2c:	90 0d       	add	r25, r0
    4c2e:	11 24       	eor	r1, r1
    4c30:	9e 8b       	std	Y+22, r25	; 0x16
    4c32:	8d 8b       	std	Y+21, r24	; 0x15
  TaskTwo.Type = BASIC_TASK;
    4c34:	98 8f       	std	Y+24, r25	; 0x18
    4c36:	8f 8b       	std	Y+23, r24	; 0x17
  TaskTwo.SchType = PREEMPTIVE;
    4c38:	81 e0       	ldi	r24, 0x01	; 1
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	98 a3       	std	Y+32, r25	; 0x20
    4c3e:	8f 8f       	std	Y+31, r24	; 0x1f
  TaskTwo.period.secs = 0;
  TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
  TaskTwo.cpu_reserve.secs = 0;
  TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
  TaskTwo.offset.secs = 0;
  TaskTwo.offset.nano_secs= 0;
    4c40:	8d 89       	ldd	r24, Y+21	; 0x15
    4c42:	9e 89       	ldd	r25, Y+22	; 0x16
    4c44:	00 97       	sbiw	r24, 0x00	; 0
    4c46:	21 f0       	breq	.+8      	; 0x4c50 <_nrk_scheduler+0x374>
    4c48:	80 17       	cp	r24, r16
    4c4a:	91 07       	cpc	r25, r17
    4c4c:	08 f4       	brcc	.+2      	; 0x4c50 <_nrk_scheduler+0x374>
    4c4e:	8c 01       	movw	r16, r24
    4c50:	08 94       	sec
    4c52:	c1 1c       	adc	r12, r1
    4c54:	d1 1c       	adc	r13, r1
    4c56:	a1 96       	adiw	r28, 0x21	; 33
	cnt--;
	}
}

void Task3()
{
    4c58:	55 e0       	ldi	r21, 0x05	; 5
    4c5a:	c5 16       	cp	r12, r21
    4c5c:	d1 04       	cpc	r13, r1
    4c5e:	09 f0       	breq	.+2      	; 0x4c62 <_nrk_scheduler+0x386>
    4c60:	69 cf       	rjmp	.-302    	; 0x4b34 <_nrk_scheduler+0x258>
  TaskThree.FirstActivation = TRUE;
  TaskThree.Type = BASIC_TASK;
  TaskThree.SchType = PREEMPTIVE;
  TaskThree.period.secs = 1;
  TaskThree.period.nano_secs = 0;
  TaskThree.cpu_reserve.secs = 0;
    4c62:	e0 91 15 08 	lds	r30, 0x0815
    4c66:	f0 91 16 08 	lds	r31, 0x0816
    4c6a:	80 85       	ldd	r24, Z+8	; 0x08
    4c6c:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_nrk_stats_task_start>
  TaskThree.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
  TaskThree.offset.secs = 0;
    4c70:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <nrk_get_high_ready_task_ID>
    4c74:	e8 2e       	mov	r14, r24
  TaskThree.offset.nano_secs= 0;
    4c76:	99 27       	eor	r25, r25
    4c78:	87 fd       	sbrc	r24, 7
    4c7a:	90 95       	com	r25
    4c7c:	fc 01       	movw	r30, r24
    4c7e:	25 e0       	ldi	r18, 0x05	; 5
    4c80:	ee 0f       	add	r30, r30
    4c82:	ff 1f       	adc	r31, r31
    4c84:	2a 95       	dec	r18
    4c86:	e1 f7       	brne	.-8      	; 0x4c80 <_nrk_scheduler+0x3a4>
    4c88:	e8 0f       	add	r30, r24
    4c8a:	f9 1f       	adc	r31, r25
    4c8c:	e6 5a       	subi	r30, 0xA6	; 166
    4c8e:	f8 4f       	sbci	r31, 0xF8	; 248
    4c90:	42 85       	ldd	r20, Z+10	; 0x0a
    4c92:	40 93 17 08 	sts	0x0817, r20
  //nrk_activate_task (&TaskThree);
    4c96:	81 e2       	ldi	r24, 0x21	; 33
    4c98:	6e 2d       	mov	r22, r14
    4c9a:	68 02       	muls	r22, r24
    4c9c:	90 01       	movw	r18, r0
    4c9e:	11 24       	eor	r1, r1
    4ca0:	26 5a       	subi	r18, 0xA6	; 166
    4ca2:	38 4f       	sbci	r19, 0xF8	; 248
    4ca4:	30 93 07 08 	sts	0x0807, r19
    4ca8:	20 93 06 08 	sts	0x0806, r18
  nrk_task_set_entry_function( &TaskFour, Task4);
  nrk_task_set_stk( &TaskFour, Stack4, NRK_APP_STACKSIZE);
  TaskFour.prio = 4;
  TaskFour.FirstActivation = TRUE;
  TaskFour.Type = BASIC_TASK;
  TaskFour.SchType = PREEMPTIVE;
    4cac:	ee 20       	and	r14, r14
    4cae:	91 f0       	breq	.+36     	; 0x4cd4 <_nrk_scheduler+0x3f8>
  TaskFour.period.secs = 2;
  TaskFour.period.nano_secs = 0;
  TaskFour.cpu_reserve.secs = 0;
    4cb0:	85 8d       	ldd	r24, Z+29	; 0x1d
    4cb2:	96 8d       	ldd	r25, Z+30	; 0x1e
    4cb4:	89 2b       	or	r24, r25
    4cb6:	51 f0       	breq	.+20     	; 0x4ccc <_nrk_scheduler+0x3f0>
    4cb8:	81 8d       	ldd	r24, Z+25	; 0x19
    4cba:	92 8d       	ldd	r25, Z+26	; 0x1a
    4cbc:	8a 3f       	cpi	r24, 0xFA	; 250
    4cbe:	91 05       	cpc	r25, r1
    4cc0:	28 f4       	brcc	.+10     	; 0x4ccc <_nrk_scheduler+0x3f0>
    4cc2:	80 17       	cp	r24, r16
    4cc4:	91 07       	cpc	r25, r17
    4cc6:	e0 f4       	brcc	.+56     	; 0x4d00 <_nrk_scheduler+0x424>
    4cc8:	8c 01       	movw	r16, r24
    4cca:	1a c0       	rjmp	.+52     	; 0x4d00 <_nrk_scheduler+0x424>
    4ccc:	0b 3f       	cpi	r16, 0xFB	; 251
    4cce:	11 05       	cpc	r17, r1
    4cd0:	b8 f0       	brcs	.+46     	; 0x4d00 <_nrk_scheduler+0x424>
    4cd2:	14 c0       	rjmp	.+40     	; 0x4cfc <_nrk_scheduler+0x420>
uint8_t i;
for(i=0; i<10; i++ ) bad_memory[i]=i;
for(i=0; i<10; i++ ) printf( "%d ", bad_memory[i]);
   printf( "Die Stack %d\r\n",val );
if(val>1) kill_stack(val-1);
return 0;
    4cd4:	0b 30       	cpi	r16, 0x0B	; 11
    4cd6:	11 05       	cpc	r17, r1
    4cd8:	98 f0       	brcs	.+38     	; 0x4d00 <_nrk_scheduler+0x424>
}

    4cda:	c8 01       	movw	r24, r16
    4cdc:	0a 97       	sbiw	r24, 0x0a	; 10
    4cde:	8a 3f       	cpi	r24, 0xFA	; 250
    4ce0:	91 05       	cpc	r25, r1
    4ce2:	30 f4       	brcc	.+12     	; 0x4cf0 <_nrk_scheduler+0x414>
    4ce4:	8c 01       	movw	r16, r24
    4ce6:	09 97       	sbiw	r24, 0x09	; 9
    4ce8:	58 f4       	brcc	.+22     	; 0x4d00 <_nrk_scheduler+0x424>
    4cea:	09 e0       	ldi	r16, 0x09	; 9
    4cec:	10 e0       	ldi	r17, 0x00	; 0
    4cee:	08 c0       	rjmp	.+16     	; 0x4d00 <_nrk_scheduler+0x424>
    4cf0:	05 50       	subi	r16, 0x05	; 5
    4cf2:	11 40       	sbci	r17, 0x01	; 1
    4cf4:	18 f4       	brcc	.+6      	; 0x4cfc <_nrk_scheduler+0x420>
    4cf6:	00 ef       	ldi	r16, 0xF0	; 240
    4cf8:	10 e0       	ldi	r17, 0x00	; 0
    4cfa:	02 c0       	rjmp	.+4      	; 0x4d00 <_nrk_scheduler+0x424>
    4cfc:	0a ef       	ldi	r16, 0xFA	; 250
    4cfe:	10 e0       	ldi	r17, 0x00	; 0
    4d00:	40 93 08 08 	sts	0x0808, r20
    4d04:	30 93 16 08 	sts	0x0816, r19
    4d08:	20 93 15 08 	sts	0x0815, r18
    4d0c:	00 93 82 05 	sts	0x0582, r16
    4d10:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_nrk_os_timer_get>
    4d14:	99 27       	eor	r25, r25
    4d16:	80 17       	cp	r24, r16
    4d18:	91 07       	cpc	r25, r17
    4d1a:	40 f0       	brcs	.+16     	; 0x4d2c <_nrk_scheduler+0x450>
    4d1c:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_nrk_os_timer_get>
    4d20:	08 2f       	mov	r16, r24
    4d22:	11 27       	eor	r17, r17
    4d24:	0e 5f       	subi	r16, 0xFE	; 254
    4d26:	1f 4f       	sbci	r17, 0xFF	; 255
    4d28:	00 93 82 05 	sts	0x0582, r16
    4d2c:	ee 20       	and	r14, r14
    4d2e:	11 f0       	breq	.+4      	; 0x4d34 <_nrk_scheduler+0x458>
    4d30:	10 92 09 08 	sts	0x0809, r1
    4d34:	80 2f       	mov	r24, r16
    4d36:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_nrk_set_next_wakeup>
    4d3a:	6e ee       	ldi	r22, 0xEE	; 238
    4d3c:	72 e0       	ldi	r23, 0x02	; 2
    4d3e:	c4 01       	movw	r24, r8
    4d40:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <nrk_high_speed_timer_wait>
    4d44:	0e 94 98 2a 	call	0x5530	; 0x5530 <nrk_stack_pointer_restore>
    4d48:	0e 94 c5 2a 	call	0x558a	; 0x558a <nrk_start_high_ready_task>
    4d4c:	df 91       	pop	r29
    4d4e:	cf 91       	pop	r28
    4d50:	1f 91       	pop	r17
    4d52:	0f 91       	pop	r16
    4d54:	ff 90       	pop	r15
    4d56:	ef 90       	pop	r14
    4d58:	df 90       	pop	r13
    4d5a:	cf 90       	pop	r12
    4d5c:	bf 90       	pop	r11
    4d5e:	af 90       	pop	r10
    4d60:	9f 90       	pop	r9
    4d62:	8f 90       	pop	r8
    4d64:	08 95       	ret

00004d66 <nrk_spin_wait_us>:
	...
void Task1(void);

NRK_STK Stack2[NRK_APP_STACKSIZE];
nrk_task_type TaskTwo;
void Task2 (void);

    4d6e:	01 97       	sbiw	r24, 0x01	; 1
    4d70:	d1 f7       	brne	.-12     	; 0x4d66 <nrk_spin_wait_us>
    4d72:	08 95       	ret

00004d74 <_nrk_high_speed_timer_stop>:
void Task1()
{
nrk_time_t t;
uint16_t cnt;
uint16_t wait_high_time;
uint8_t cur_TCNT2;
    4d74:	10 92 81 00 	sts	0x0081, r1
    4d78:	08 95       	ret

00004d7a <_nrk_high_speed_timer_start>:
cnt=0;
nrk_kprintf( PSTR("Nano-RK Version ") );
printf( "%d\r\n",NRK_VERSION );

printf( "My node's address is %u\r\n",NODE_ADDR );
    4d7a:	81 e0       	ldi	r24, 0x01	; 1
    4d7c:	80 93 81 00 	sts	0x0081, r24
    4d80:	08 95       	ret

00004d82 <_nrk_high_speed_timer_reset>:
//_nrk_high_speed_timer_start();
  while(1) {
	//_nrk_high_speed_timer_reset();
	nrk_led_toggle(ORANGE_LED);
	nrk_gpio_set(NRK_DEBUG_0);
	nrk_gpio_toggle(NRK_DEBUG_1);
    4d82:	83 b5       	in	r24, 0x23	; 35
    4d84:	81 60       	ori	r24, 0x01	; 1
    4d86:	83 bd       	out	0x23, r24	; 35
	//printf( "Task1 cnt=%u\r\n, %d.",cnt);
    4d88:	10 92 85 00 	sts	0x0085, r1
    4d8c:	10 92 84 00 	sts	0x0084, r1
    4d90:	08 95       	ret

00004d92 <_nrk_high_speed_timer_get>:
	//nrk_high_speed_timer_wait(,2577);//time escape 0.5ms
	//printf("2nd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//_nrk_high_speed_timer_reset();
	//printf("3rd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	_nrk_os_timer_set(20);
	//printf("TCNT1 is %d cnt is %d.\n\r",_nrk_high_speed_timer_get(),cnt);
    4d92:	cf 93       	push	r28
    4d94:	df 93       	push	r29
    4d96:	cd b7       	in	r28, 0x3d	; 61
    4d98:	de b7       	in	r29, 0x3e	; 62
    4d9a:	22 97       	sbiw	r28, 0x02	; 2
    4d9c:	0f b6       	in	r0, 0x3f	; 63
    4d9e:	f8 94       	cli
    4da0:	de bf       	out	0x3e, r29	; 62
    4da2:	0f be       	out	0x3f, r0	; 63
    4da4:	cd bf       	out	0x3d, r28	; 61
	nrk_gpio_clr(NRK_DEBUG_0);
	nrk_wait_until_next_period();
	
    4da6:	80 91 84 00 	lds	r24, 0x0084
    4daa:	90 91 85 00 	lds	r25, 0x0085
    4dae:	9a 83       	std	Y+2, r25	; 0x02
    4db0:	89 83       	std	Y+1, r24	; 0x01
        // Uncomment this line to cause a stack overflow
	// if(cnt>20) kill_stack(10);
    4db2:	89 81       	ldd	r24, Y+1	; 0x01
    4db4:	9a 81       	ldd	r25, Y+2	; 0x02
    4db6:	22 96       	adiw	r28, 0x02	; 2
    4db8:	0f b6       	in	r0, 0x3f	; 63
    4dba:	f8 94       	cli
    4dbc:	de bf       	out	0x3e, r29	; 62
    4dbe:	0f be       	out	0x3f, r0	; 63
    4dc0:	cd bf       	out	0x3d, r28	; 61
    4dc2:	df 91       	pop	r29
    4dc4:	cf 91       	pop	r28
    4dc6:	08 95       	ret

00004dc8 <_nrk_os_timer_stop>:

	// At time 50, the OS will halt and print statistics
	// This requires the NRK_STATS_TRACKER #define in nrk_cfg.h
	// if(cnt==50)  {
	//	nrk_stats_display_all();
    4dc8:	10 92 b1 00 	sts	0x00B1, r1
	//	nrk_halt();
    4dcc:	e0 e7       	ldi	r30, 0x70	; 112
    4dce:	f0 e0       	ldi	r31, 0x00	; 0
    4dd0:	80 81       	ld	r24, Z
    4dd2:	8d 7f       	andi	r24, 0xFD	; 253
    4dd4:	80 83       	st	Z, r24
	//	}
    4dd6:	80 81       	ld	r24, Z
    4dd8:	8e 7f       	andi	r24, 0xFE	; 254
    4dda:	80 83       	st	Z, r24
    4ddc:	08 95       	ret

00004dde <_nrk_os_timer_set>:

	cnt=0;
	//cnt++;
	}
}
    4dde:	80 93 b2 00 	sts	0x00B2, r24
    4de2:	08 95       	ret

00004de4 <_nrk_os_timer_start>:
void Task2()
{
  int16_t cnt;
  printf( "Task2 PID=%u\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
    4de4:	e0 e7       	ldi	r30, 0x70	; 112
    4de6:	f0 e0       	ldi	r31, 0x00	; 0
    4de8:	80 81       	ld	r24, Z
    4dea:	83 60       	ori	r24, 0x03	; 3
    4dec:	80 83       	st	Z, r24
	nrk_led_toggle(BLUE_LED);
    4dee:	83 e0       	ldi	r24, 0x03	; 3
    4df0:	80 93 b1 00 	sts	0x00B1, r24
    4df4:	08 95       	ret

00004df6 <_nrk_os_timer_reset>:
	nrk_gpio_toggle(NRK_DEBUG_1);
	printf( "Task2 signed cnt=%d\r\n",cnt );
	nrk_wait_until_next_period();
	//nrk_stats_display_pid(nrk_get_pid());
	cnt--;
	}
    4df6:	83 b5       	in	r24, 0x23	; 35
    4df8:	82 60       	ori	r24, 0x02	; 2
    4dfa:	83 bd       	out	0x23, r24	; 35
}
    4dfc:	10 92 b2 00 	sts	0x00B2, r1

    4e00:	10 92 2c 04 	sts	0x042C, r1
void Task3()
    4e04:	10 92 82 05 	sts	0x0582, r1
    4e08:	08 95       	ret

00004e0a <_nrk_get_next_wakeup>:
{
uint16_t cnt;
  printf( "Task3 PID=%u\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
	nrk_led_toggle(GREEN_LED);
    4e0a:	80 91 b3 00 	lds	r24, 0x00B3
    4e0e:	8f 5f       	subi	r24, 0xFF	; 255
	nrk_gpio_toggle(NRK_DEBUG_2);
    4e10:	99 27       	eor	r25, r25
    4e12:	08 95       	ret

00004e14 <_nrk_set_next_wakeup>:
	printf( "Task3 cnt=%u\r\n",cnt );
	nrk_wait_until_next_period();
	cnt++;
	}
    4e14:	81 50       	subi	r24, 0x01	; 1
    4e16:	80 93 b3 00 	sts	0x00B3, r24
    4e1a:	08 95       	ret

00004e1c <nrk_timer_int_stop>:
}

void Task4()
{
uint16_t cnt;

    4e1c:	88 23       	and	r24, r24
    4e1e:	11 f4       	brne	.+4      	; 0x4e24 <nrk_timer_int_stop+0x8>
  printf( "Task4 PID=%u\r\n",nrk_get_pid());
  cnt=0;
    4e20:	10 92 71 00 	sts	0x0071, r1
  while(1) {
	nrk_led_toggle(RED_LED);
	nrk_gpio_toggle(NRK_DEBUG_3);
    4e24:	8f ef       	ldi	r24, 0xFF	; 255
    4e26:	9f ef       	ldi	r25, 0xFF	; 255
    4e28:	08 95       	ret

00004e2a <nrk_timer_int_reset>:
	printf( "Task4 cnt=%u\r\n",cnt );
	nrk_wait_until_next_period();
	cnt++;
	}
    4e2a:	88 23       	and	r24, r24
    4e2c:	19 f0       	breq	.+6      	; 0x4e34 <nrk_timer_int_reset+0xa>
    4e2e:	8f ef       	ldi	r24, 0xFF	; 255
    4e30:	9f ef       	ldi	r25, 0xFF	; 255
    4e32:	08 95       	ret
}

    4e34:	10 92 95 00 	sts	0x0095, r1
    4e38:	10 92 94 00 	sts	0x0094, r1
    4e3c:	81 e0       	ldi	r24, 0x01	; 1
    4e3e:	90 e0       	ldi	r25, 0x00	; 0
void
nrk_create_taskset()
{
  nrk_task_set_entry_function( &TaskOne, Task1);
    4e40:	08 95       	ret

00004e42 <nrk_timer_int_read>:
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
  TaskOne.prio = 1;
  TaskOne.FirstActivation = TRUE;
  TaskOne.Type = BASIC_TASK;
    4e42:	88 23       	and	r24, r24
    4e44:	19 f0       	breq	.+6      	; 0x4e4c <nrk_timer_int_read+0xa>
    4e46:	80 e0       	ldi	r24, 0x00	; 0
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	08 95       	ret
  TaskOne.SchType = PREEMPTIVE;
  TaskOne.period.secs = 0;
    4e4c:	80 91 94 00 	lds	r24, 0x0094
    4e50:	90 91 95 00 	lds	r25, 0x0095
  TaskOne.period.nano_secs = 50*NANOS_PER_MS;
  TaskOne.cpu_reserve.secs = 0;
  TaskOne.cpu_reserve.nano_secs = 50*NANOS_PER_MS;
  TaskOne.offset.secs = 0;
    4e54:	08 95       	ret

00004e56 <nrk_timer_int_start>:
  TaskOne.offset.nano_secs= 0;
  nrk_activate_task (&TaskOne);

  nrk_task_set_entry_function( &TaskTwo, Task2);
    4e56:	88 23       	and	r24, r24
    4e58:	19 f0       	breq	.+6      	; 0x4e60 <nrk_timer_int_start+0xa>
    4e5a:	8f ef       	ldi	r24, 0xFF	; 255
    4e5c:	9f ef       	ldi	r25, 0xFF	; 255
    4e5e:	08 95       	ret
  nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
  TaskTwo.prio = 2;
    4e60:	82 e0       	ldi	r24, 0x02	; 2
    4e62:	80 93 71 00 	sts	0x0071, r24
    4e66:	81 e0       	ldi	r24, 0x01	; 1
    4e68:	90 e0       	ldi	r25, 0x00	; 0
  TaskTwo.FirstActivation = TRUE;
  TaskTwo.Type = BASIC_TASK;
  TaskTwo.SchType = PREEMPTIVE;
  TaskTwo.period.secs = 0;
    4e6a:	08 95       	ret

00004e6c <nrk_timer_int_configure>:
  TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
  TaskTwo.cpu_reserve.secs = 0;
  TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
  TaskTwo.offset.secs = 0;
    4e6c:	88 23       	and	r24, r24
    4e6e:	19 f0       	breq	.+6      	; 0x4e76 <nrk_timer_int_configure+0xa>
    4e70:	8f ef       	ldi	r24, 0xFF	; 255
    4e72:	9f ef       	ldi	r25, 0xFF	; 255
    4e74:	08 95       	ret
  TaskTwo.offset.nano_secs= 0;
  //nrk_activate_task (&TaskTwo);
    4e76:	cb 01       	movw	r24, r22
    4e78:	01 97       	sbiw	r24, 0x01	; 1
    4e7a:	05 97       	sbiw	r24, 0x05	; 5
    4e7c:	10 f4       	brcc	.+4      	; 0x4e82 <nrk_timer_int_configure+0x16>
    4e7e:	60 93 81 05 	sts	0x0581, r22

    4e82:	10 92 90 00 	sts	0x0090, r1

    4e86:	88 e0       	ldi	r24, 0x08	; 8
    4e88:	80 93 91 00 	sts	0x0091, r24
  nrk_task_set_entry_function( &TaskThree, Task3);
    4e8c:	85 2f       	mov	r24, r21
    4e8e:	99 27       	eor	r25, r25
    4e90:	80 93 99 00 	sts	0x0099, r24
  nrk_task_set_stk( &TaskThree, Stack3, NRK_APP_STACKSIZE);
    4e94:	40 93 98 00 	sts	0x0098, r20
  TaskThree.prio = 3;
    4e98:	30 93 aa 03 	sts	0x03AA, r19
    4e9c:	20 93 a9 03 	sts	0x03A9, r18
  TaskThree.FirstActivation = TRUE;
    4ea0:	80 91 81 05 	lds	r24, 0x0581
    4ea4:	81 30       	cpi	r24, 0x01	; 1
    4ea6:	21 f4       	brne	.+8      	; 0x4eb0 <nrk_timer_int_configure+0x44>
    4ea8:	80 91 91 00 	lds	r24, 0x0091
    4eac:	81 60       	ori	r24, 0x01	; 1
    4eae:	0b c0       	rjmp	.+22     	; 0x4ec6 <nrk_timer_int_configure+0x5a>
  TaskThree.Type = BASIC_TASK;
  TaskThree.SchType = PREEMPTIVE;
    4eb0:	82 30       	cpi	r24, 0x02	; 2
    4eb2:	21 f4       	brne	.+8      	; 0x4ebc <nrk_timer_int_configure+0x50>
    4eb4:	80 91 91 00 	lds	r24, 0x0091
    4eb8:	82 60       	ori	r24, 0x02	; 2
    4eba:	05 c0       	rjmp	.+10     	; 0x4ec6 <nrk_timer_int_configure+0x5a>
  TaskThree.period.secs = 1;
  TaskThree.period.nano_secs = 0;
    4ebc:	83 30       	cpi	r24, 0x03	; 3
    4ebe:	31 f4       	brne	.+12     	; 0x4ecc <nrk_timer_int_configure+0x60>
    4ec0:	80 91 91 00 	lds	r24, 0x0091
    4ec4:	83 60       	ori	r24, 0x03	; 3
    4ec6:	80 93 91 00 	sts	0x0091, r24
    4eca:	08 c0       	rjmp	.+16     	; 0x4edc <nrk_timer_int_configure+0x70>
  TaskThree.cpu_reserve.secs = 0;
  TaskThree.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
    4ecc:	84 30       	cpi	r24, 0x04	; 4
    4ece:	21 f4       	brne	.+8      	; 0x4ed8 <nrk_timer_int_configure+0x6c>
    4ed0:	80 91 91 00 	lds	r24, 0x0091
    4ed4:	84 60       	ori	r24, 0x04	; 4
    4ed6:	f7 cf       	rjmp	.-18     	; 0x4ec6 <nrk_timer_int_configure+0x5a>
  TaskThree.offset.secs = 0;
  TaskThree.offset.nano_secs= 0;
    4ed8:	85 30       	cpi	r24, 0x05	; 5
    4eda:	19 f0       	breq	.+6      	; 0x4ee2 <nrk_timer_int_configure+0x76>
    4edc:	81 e0       	ldi	r24, 0x01	; 1
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	08 95       	ret
    4ee2:	80 91 91 00 	lds	r24, 0x0091
    4ee6:	85 60       	ori	r24, 0x05	; 5
    4ee8:	80 93 91 00 	sts	0x0091, r24
    4eec:	81 e0       	ldi	r24, 0x01	; 1
    4eee:	90 e0       	ldi	r25, 0x00	; 0
  //nrk_activate_task (&TaskThree);


  nrk_task_set_entry_function( &TaskFour, Task4);
  nrk_task_set_stk( &TaskFour, Stack4, NRK_APP_STACKSIZE);
  TaskFour.prio = 4;
    4ef0:	08 95       	ret

00004ef2 <_nrk_os_timer_get>:
  TaskFour.FirstActivation = TRUE;
  TaskFour.Type = BASIC_TASK;
  TaskFour.SchType = PREEMPTIVE;
  TaskFour.period.secs = 2;
  TaskFour.period.nano_secs = 0;
    4ef2:	80 91 b2 00 	lds	r24, 0x00B2
  TaskFour.cpu_reserve.secs = 0;
    4ef6:	99 27       	eor	r25, r25
    4ef8:	08 95       	ret

00004efa <__vector_13>:
}


    4efa:	0f 92       	push	r0
    4efc:	0f b6       	in	r0, 0x3f	; 63
    4efe:	0f 92       	push	r0
    4f00:	1f 92       	push	r1
    4f02:	2f 92       	push	r2
    4f04:	3f 92       	push	r3
    4f06:	4f 92       	push	r4
    4f08:	5f 92       	push	r5
    4f0a:	6f 92       	push	r6
    4f0c:	7f 92       	push	r7
    4f0e:	8f 92       	push	r8
    4f10:	9f 92       	push	r9
    4f12:	af 92       	push	r10
    4f14:	bf 92       	push	r11
    4f16:	cf 92       	push	r12
    4f18:	df 92       	push	r13
    4f1a:	ef 92       	push	r14
    4f1c:	ff 92       	push	r15
    4f1e:	0f 93       	push	r16
    4f20:	1f 93       	push	r17
    4f22:	2f 93       	push	r18
    4f24:	3f 93       	push	r19
    4f26:	4f 93       	push	r20
    4f28:	5f 93       	push	r21
    4f2a:	6f 93       	push	r22
    4f2c:	7f 93       	push	r23
    4f2e:	8f 93       	push	r24
    4f30:	9f 93       	push	r25
    4f32:	af 93       	push	r26
    4f34:	bf 93       	push	r27
    4f36:	cf 93       	push	r28
    4f38:	df 93       	push	r29
    4f3a:	ef 93       	push	r30
    4f3c:	ff 93       	push	r31
    4f3e:	a0 91 15 08 	lds	r26, 0x0815
    4f42:	b0 91 16 08 	lds	r27, 0x0816
    4f46:	0d b6       	in	r0, 0x3d	; 61
    4f48:	0d 92       	st	X+, r0
    4f4a:	0e b6       	in	r0, 0x3e	; 62
    4f4c:	0d 92       	st	X+, r0
    4f4e:	1f 92       	push	r1
    4f50:	a0 91 7f 05 	lds	r26, 0x057F
    4f54:	b0 91 80 05 	lds	r27, 0x0580
    4f58:	1e 90       	ld	r1, -X
    4f5a:	be bf       	out	0x3e, r27	; 62
    4f5c:	ad bf       	out	0x3d, r26	; 61
    4f5e:	08 95       	ret

00004f60 <__vector_17>:
    4f60:	1f 92       	push	r1
    4f62:	0f 92       	push	r0
    4f64:	0f b6       	in	r0, 0x3f	; 63
    4f66:	0f 92       	push	r0
    4f68:	11 24       	eor	r1, r1
    4f6a:	0f 90       	pop	r0
    4f6c:	0f be       	out	0x3f, r0	; 63
    4f6e:	0f 90       	pop	r0
    4f70:	1f 90       	pop	r1
    4f72:	18 95       	reti

00004f74 <__vector_32>:
    4f74:	1f 92       	push	r1
    4f76:	0f 92       	push	r0
    4f78:	0f b6       	in	r0, 0x3f	; 63
    4f7a:	0f 92       	push	r0
    4f7c:	11 24       	eor	r1, r1
    4f7e:	2f 93       	push	r18
    4f80:	3f 93       	push	r19
    4f82:	4f 93       	push	r20
    4f84:	5f 93       	push	r21
    4f86:	6f 93       	push	r22
    4f88:	7f 93       	push	r23
    4f8a:	8f 93       	push	r24
    4f8c:	9f 93       	push	r25
    4f8e:	af 93       	push	r26
    4f90:	bf 93       	push	r27
    4f92:	ef 93       	push	r30
    4f94:	ff 93       	push	r31
    4f96:	e0 91 a9 03 	lds	r30, 0x03A9
    4f9a:	f0 91 aa 03 	lds	r31, 0x03AA
    4f9e:	30 97       	sbiw	r30, 0x00	; 0
    4fa0:	11 f0       	breq	.+4      	; 0x4fa6 <__vector_32+0x32>
    4fa2:	09 95       	icall
    4fa4:	04 c0       	rjmp	.+8      	; 0x4fae <__vector_32+0x3a>
    4fa6:	60 e0       	ldi	r22, 0x00	; 0
    4fa8:	8a e0       	ldi	r24, 0x0A	; 10
    4faa:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_kernel_error_add>
    4fae:	ff 91       	pop	r31
    4fb0:	ef 91       	pop	r30
    4fb2:	bf 91       	pop	r27
    4fb4:	af 91       	pop	r26
    4fb6:	9f 91       	pop	r25
    4fb8:	8f 91       	pop	r24
    4fba:	7f 91       	pop	r23
    4fbc:	6f 91       	pop	r22
    4fbe:	5f 91       	pop	r21
    4fc0:	4f 91       	pop	r20
    4fc2:	3f 91       	pop	r19
    4fc4:	2f 91       	pop	r18
    4fc6:	0f 90       	pop	r0
    4fc8:	0f be       	out	0x3f, r0	; 63
    4fca:	0f 90       	pop	r0
    4fcc:	1f 90       	pop	r1
    4fce:	18 95       	reti

00004fd0 <__vector_default>:
  TaskFour.cpu_reserve.secs = 0;
  TaskFour.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
  TaskFour.offset.secs = 0;
  TaskFour.offset.nano_secs= 0;
  //nrk_activate_task (&TaskFour);

    4fd0:	1f 92       	push	r1
    4fd2:	0f 92       	push	r0
    4fd4:	0f b6       	in	r0, 0x3f	; 63
    4fd6:	0f 92       	push	r0
    4fd8:	11 24       	eor	r1, r1
    4fda:	2f 93       	push	r18
    4fdc:	3f 93       	push	r19
    4fde:	4f 93       	push	r20
    4fe0:	5f 93       	push	r21
    4fe2:	6f 93       	push	r22
    4fe4:	7f 93       	push	r23
    4fe6:	8f 93       	push	r24
    4fe8:	9f 93       	push	r25
    4fea:	af 93       	push	r26
    4fec:	bf 93       	push	r27
    4fee:	ef 93       	push	r30
    4ff0:	ff 93       	push	r31

    4ff2:	60 e0       	ldi	r22, 0x00	; 0
    4ff4:	8a e0       	ldi	r24, 0x0A	; 10
    4ff6:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_kernel_error_add>
    4ffa:	ff cf       	rjmp	.-2      	; 0x4ffa <__vector_default+0x2a>

00004ffc <nrk_high_speed_timer_wait>:
	
	//printf("current TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	/*do{
		cur_TCNT2 = _nrk_os_timer_get();		
	}while(cur_TCNT2!=100);
	printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);*/
    4ffc:	cf 93       	push	r28
    4ffe:	df 93       	push	r29
    5000:	cd b7       	in	r28, 0x3d	; 61
    5002:	de b7       	in	r29, 0x3e	; 62
    5004:	22 97       	sbiw	r28, 0x02	; 2
    5006:	0f b6       	in	r0, 0x3f	; 63
    5008:	f8 94       	cli
    500a:	de bf       	out	0x3e, r29	; 62
    500c:	0f be       	out	0x3f, r0	; 63
    500e:	cd bf       	out	0x3d, r28	; 61
    5010:	fc 01       	movw	r30, r24
	//_nrk_os_timer_set(40);// time escape 100ms
	/*while(cnt++<=10)
    5012:	8f ef       	ldi	r24, 0xFF	; 255
    5014:	e9 37       	cpi	r30, 0x79	; 121
    5016:	f8 07       	cpc	r31, r24
    5018:	10 f0       	brcs	.+4      	; 0x501e <nrk_high_speed_timer_wait+0x22>
    501a:	e0 e0       	ldi	r30, 0x00	; 0
    501c:	f0 e0       	ldi	r31, 0x00	; 0
	{
    501e:	9f 01       	movw	r18, r30
    5020:	44 27       	eor	r20, r20
    5022:	55 27       	eor	r21, r21
    5024:	cb 01       	movw	r24, r22
    5026:	aa 27       	eor	r26, r26
    5028:	bb 27       	eor	r27, r27
    502a:	28 0f       	add	r18, r24
    502c:	39 1f       	adc	r19, r25
    502e:	4a 1f       	adc	r20, r26
    5030:	5b 1f       	adc	r21, r27
		while(_nrk_high_speed_timer_get()<50000);
		_nrk_high_speed_timer_reset();
    5032:	21 30       	cpi	r18, 0x01	; 1
    5034:	80 e0       	ldi	r24, 0x00	; 0
    5036:	38 07       	cpc	r19, r24
    5038:	81 e0       	ldi	r24, 0x01	; 1
    503a:	48 07       	cpc	r20, r24
    503c:	80 e0       	ldi	r24, 0x00	; 0
    503e:	58 07       	cpc	r21, r24
    5040:	78 f0       	brcs	.+30     	; 0x5060 <nrk_high_speed_timer_wait+0x64>
	//printf("3rd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	_nrk_os_timer_set(20);
	//printf("TCNT1 is %d cnt is %d.\n\r",_nrk_high_speed_timer_get(),cnt);
	nrk_gpio_clr(NRK_DEBUG_0);
	nrk_wait_until_next_period();
	
    5042:	80 91 84 00 	lds	r24, 0x0084
    5046:	90 91 85 00 	lds	r25, 0x0085
    504a:	9a 83       	std	Y+2, r25	; 0x02
    504c:	89 83       	std	Y+1, r24	; 0x01
        // Uncomment this line to cause a stack overflow
	// if(cnt>20) kill_stack(10);
    504e:	89 81       	ldd	r24, Y+1	; 0x01
    5050:	9a 81       	ldd	r25, Y+2	; 0x02
		while(_nrk_high_speed_timer_get()<50000);
		_nrk_high_speed_timer_reset();
	}*/
	_nrk_high_speed_timer_reset();
	//_nrk_os_timer_reset();
	//printf("1st TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
    5052:	e8 17       	cp	r30, r24
    5054:	f9 07       	cpc	r31, r25
    5056:	a8 f3       	brcs	.-22     	; 0x5042 <nrk_high_speed_timer_wait+0x46>
	{
		while(_nrk_high_speed_timer_get()<50000);
		_nrk_high_speed_timer_reset();
	}*/
	_nrk_high_speed_timer_reset();
	//_nrk_os_timer_reset();
    5058:	20 50       	subi	r18, 0x00	; 0
    505a:	30 40       	sbci	r19, 0x00	; 0
    505c:	41 40       	sbci	r20, 0x01	; 1
    505e:	50 40       	sbci	r21, 0x00	; 0
	//printf("3rd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	_nrk_os_timer_set(20);
	//printf("TCNT1 is %d cnt is %d.\n\r",_nrk_high_speed_timer_get(),cnt);
	nrk_gpio_clr(NRK_DEBUG_0);
	nrk_wait_until_next_period();
	
    5060:	80 91 84 00 	lds	r24, 0x0084
    5064:	90 91 85 00 	lds	r25, 0x0085
    5068:	9a 83       	std	Y+2, r25	; 0x02
    506a:	89 83       	std	Y+1, r24	; 0x01
        // Uncomment this line to cause a stack overflow
	// if(cnt>20) kill_stack(10);
    506c:	89 81       	ldd	r24, Y+1	; 0x01
    506e:	9a 81       	ldd	r25, Y+2	; 0x02
	//_nrk_os_timer_reset();
	//printf("1st TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//wait_high_time = _nrk_high_speed_timer_get() + 2577;
	do{}while(TCNT1<2577);
	//nrk_high_speed_timer_wait(,2577);//time escape 0.5ms
	//printf("2nd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
    5070:	82 17       	cp	r24, r18
    5072:	93 07       	cpc	r25, r19
    5074:	a8 f3       	brcs	.-22     	; 0x5060 <nrk_high_speed_timer_wait+0x64>
    5076:	22 96       	adiw	r28, 0x02	; 2
    5078:	0f b6       	in	r0, 0x3f	; 63
    507a:	f8 94       	cli
    507c:	de bf       	out	0x3e, r29	; 62
    507e:	0f be       	out	0x3f, r0	; 63
    5080:	cd bf       	out	0x3d, r28	; 61
    5082:	df 91       	pop	r29
    5084:	cf 91       	pop	r28
    5086:	08 95       	ret

00005088 <_nrk_setup_timer>:

NRK_STK Stack3[NRK_APP_STACKSIZE];
nrk_task_type TaskThree;
void Task3 (void);


    5088:	ef 92       	push	r14
    508a:	ff 92       	push	r15
    508c:	1f 93       	push	r17
NRK_STK Stack4[NRK_APP_STACKSIZE];
    508e:	9e ef       	ldi	r25, 0xFE	; 254
    5090:	90 93 82 05 	sts	0x0582, r25
nrk_task_type TaskFour;
void Task4 (void);

    5094:	80 e2       	ldi	r24, 0x20	; 32
    5096:	80 93 b6 00 	sts	0x00B6, r24
void nrk_create_taskset();
    509a:	90 93 b3 00 	sts	0x00B3, r25
uint8_t kill_stack(uint8_t val);
    509e:	13 e0       	ldi	r17, 0x03	; 3
    50a0:	17 bb       	out	0x17, r17	; 23

    50a2:	82 e0       	ldi	r24, 0x02	; 2
    50a4:	80 93 b0 00 	sts	0x00B0, r24
int
    50a8:	91 eb       	ldi	r25, 0xB1	; 177
    50aa:	e9 2e       	mov	r14, r25
    50ac:	f1 2c       	mov	r15, r1
    50ae:	f7 01       	movw	r30, r14
    50b0:	10 83       	st	Z, r17
main ()
    50b2:	83 b5       	in	r24, 0x23	; 35
    50b4:	82 60       	ori	r24, 0x02	; 2
    50b6:	83 bd       	out	0x23, r24	; 35
{
  nrk_setup_ports();
    50b8:	17 bb       	out	0x17, r17	; 23
  nrk_setup_uart(UART_BAUDRATE_115K2);

    50ba:	14 bd       	out	0x24, r17	; 36
  nrk_init();

  nrk_led_clr(ORANGE_LED);
    50bc:	83 b5       	in	r24, 0x23	; 35
    50be:	82 60       	ori	r24, 0x02	; 2
    50c0:	83 bd       	out	0x23, r24	; 35
  nrk_led_clr(BLUE_LED);
  nrk_led_clr(GREEN_LED);
  nrk_led_clr(RED_LED);
 
    50c2:	10 92 80 00 	sts	0x0080, r1
  nrk_time_set(0,0);
    50c6:	81 e0       	ldi	r24, 0x01	; 1
    50c8:	80 93 81 00 	sts	0x0081, r24
  nrk_create_taskset ();
    50cc:	10 92 85 00 	sts	0x0085, r1
    50d0:	10 92 84 00 	sts	0x0084, r1
  nrk_start();
    50d4:	83 b5       	in	r24, 0x23	; 35
    50d6:	82 60       	ori	r24, 0x02	; 2
    50d8:	83 bd       	out	0x23, r24	; 35
  
    50da:	83 b5       	in	r24, 0x23	; 35
    50dc:	81 60       	ori	r24, 0x01	; 1
    50de:	83 bd       	out	0x23, r24	; 35
  return 0;
}
    50e0:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <_nrk_os_timer_reset>
void Task2()
{
  int16_t cnt;
  printf( "Task2 PID=%u\r\n",nrk_get_pid());
  cnt=0;
  while(1) {
    50e4:	e0 e7       	ldi	r30, 0x70	; 112
    50e6:	f0 e0       	ldi	r31, 0x00	; 0
    50e8:	80 81       	ld	r24, Z
    50ea:	83 60       	ori	r24, 0x03	; 3
    50ec:	80 83       	st	Z, r24
	nrk_led_toggle(BLUE_LED);
    50ee:	f7 01       	movw	r30, r14
    50f0:	10 83       	st	Z, r17
  nrk_start();
  
  return 0;
}

void Task1()
    50f2:	10 92 2c 04 	sts	0x042C, r1
    50f6:	1f 91       	pop	r17
    50f8:	ff 90       	pop	r15
    50fa:	ef 90       	pop	r14
    50fc:	08 95       	ret

000050fe <nrk_ext_int_enable>:
#include <nrk_stack_check.h>
#include <nrk_stats.h>


NRK_STK Stack1[NRK_APP_STACKSIZE];
nrk_task_type TaskOne;
    50fe:	88 23       	and	r24, r24
    5100:	11 f4       	brne	.+4      	; 0x5106 <nrk_ext_int_enable+0x8>
    5102:	e8 9a       	sbi	0x1d, 0	; 29
    5104:	33 c0       	rjmp	.+102    	; 0x516c <nrk_ext_int_enable+0x6e>
void Task1(void);
    5106:	81 30       	cpi	r24, 0x01	; 1
    5108:	11 f4       	brne	.+4      	; 0x510e <nrk_ext_int_enable+0x10>
    510a:	e9 9a       	sbi	0x1d, 1	; 29
    510c:	2f c0       	rjmp	.+94     	; 0x516c <nrk_ext_int_enable+0x6e>

    510e:	82 30       	cpi	r24, 0x02	; 2
    5110:	11 f4       	brne	.+4      	; 0x5116 <nrk_ext_int_enable+0x18>
    5112:	ea 9a       	sbi	0x1d, 2	; 29
    5114:	2b c0       	rjmp	.+86     	; 0x516c <nrk_ext_int_enable+0x6e>
NRK_STK Stack2[NRK_APP_STACKSIZE];
    5116:	83 30       	cpi	r24, 0x03	; 3
    5118:	21 f4       	brne	.+8      	; 0x5122 <nrk_ext_int_enable+0x24>
    511a:	80 91 6b 00 	lds	r24, 0x006B
    511e:	81 60       	ori	r24, 0x01	; 1
    5120:	23 c0       	rjmp	.+70     	; 0x5168 <nrk_ext_int_enable+0x6a>
nrk_task_type TaskTwo;
    5122:	84 30       	cpi	r24, 0x04	; 4
    5124:	21 f4       	brne	.+8      	; 0x512e <nrk_ext_int_enable+0x30>
    5126:	80 91 6b 00 	lds	r24, 0x006B
    512a:	82 60       	ori	r24, 0x02	; 2
    512c:	1d c0       	rjmp	.+58     	; 0x5168 <nrk_ext_int_enable+0x6a>
void Task2 (void);
    512e:	85 30       	cpi	r24, 0x05	; 5
    5130:	21 f4       	brne	.+8      	; 0x513a <nrk_ext_int_enable+0x3c>
    5132:	80 91 6b 00 	lds	r24, 0x006B
    5136:	84 60       	ori	r24, 0x04	; 4
    5138:	17 c0       	rjmp	.+46     	; 0x5168 <nrk_ext_int_enable+0x6a>

    513a:	86 30       	cpi	r24, 0x06	; 6
    513c:	21 f4       	brne	.+8      	; 0x5146 <nrk_ext_int_enable+0x48>
    513e:	80 91 6b 00 	lds	r24, 0x006B
    5142:	88 60       	ori	r24, 0x08	; 8
    5144:	11 c0       	rjmp	.+34     	; 0x5168 <nrk_ext_int_enable+0x6a>
NRK_STK Stack3[NRK_APP_STACKSIZE];
    5146:	87 30       	cpi	r24, 0x07	; 7
    5148:	21 f4       	brne	.+8      	; 0x5152 <nrk_ext_int_enable+0x54>
    514a:	80 91 6b 00 	lds	r24, 0x006B
    514e:	80 61       	ori	r24, 0x10	; 16
    5150:	0b c0       	rjmp	.+22     	; 0x5168 <nrk_ext_int_enable+0x6a>
nrk_task_type TaskThree;
    5152:	88 30       	cpi	r24, 0x08	; 8
    5154:	21 f4       	brne	.+8      	; 0x515e <nrk_ext_int_enable+0x60>
    5156:	80 91 6b 00 	lds	r24, 0x006B
    515a:	80 62       	ori	r24, 0x20	; 32
    515c:	05 c0       	rjmp	.+10     	; 0x5168 <nrk_ext_int_enable+0x6a>
void Task3 (void);
    515e:	89 30       	cpi	r24, 0x09	; 9
    5160:	41 f4       	brne	.+16     	; 0x5172 <nrk_ext_int_enable+0x74>
    5162:	80 91 6b 00 	lds	r24, 0x006B
    5166:	80 64       	ori	r24, 0x40	; 64
    5168:	80 93 6b 00 	sts	0x006B, r24
    516c:	81 e0       	ldi	r24, 0x01	; 1
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	08 95       	ret

    5172:	8a 30       	cpi	r24, 0x0A	; 10
    5174:	19 f0       	breq	.+6      	; 0x517c <nrk_ext_int_enable+0x7e>
    5176:	8f ef       	ldi	r24, 0xFF	; 255
    5178:	9f ef       	ldi	r25, 0xFF	; 255
    517a:	08 95       	ret
    517c:	80 91 6b 00 	lds	r24, 0x006B
    5180:	80 68       	ori	r24, 0x80	; 128
    5182:	80 93 6b 00 	sts	0x006B, r24
    5186:	81 e0       	ldi	r24, 0x01	; 1
    5188:	90 e0       	ldi	r25, 0x00	; 0

NRK_STK Stack4[NRK_APP_STACKSIZE];
    518a:	08 95       	ret

0000518c <nrk_ext_int_disable>:
nrk_task_type TaskFour;
void Task4 (void);

void nrk_create_taskset();
    518c:	88 23       	and	r24, r24
    518e:	11 f4       	brne	.+4      	; 0x5194 <nrk_ext_int_disable+0x8>
    5190:	e8 98       	cbi	0x1d, 0	; 29
    5192:	31 c0       	rjmp	.+98     	; 0x51f6 <nrk_ext_int_disable+0x6a>
uint8_t kill_stack(uint8_t val);
    5194:	81 30       	cpi	r24, 0x01	; 1
    5196:	11 f0       	breq	.+4      	; 0x519c <nrk_ext_int_disable+0x10>

    5198:	82 30       	cpi	r24, 0x02	; 2
    519a:	11 f4       	brne	.+4      	; 0x51a0 <nrk_ext_int_disable+0x14>
    519c:	e9 98       	cbi	0x1d, 1	; 29
    519e:	2b c0       	rjmp	.+86     	; 0x51f6 <nrk_ext_int_disable+0x6a>
int
    51a0:	83 30       	cpi	r24, 0x03	; 3
    51a2:	21 f4       	brne	.+8      	; 0x51ac <nrk_ext_int_disable+0x20>
    51a4:	80 91 6b 00 	lds	r24, 0x006B
    51a8:	8e 7f       	andi	r24, 0xFE	; 254
    51aa:	23 c0       	rjmp	.+70     	; 0x51f2 <nrk_ext_int_disable+0x66>
main ()
    51ac:	84 30       	cpi	r24, 0x04	; 4
    51ae:	21 f4       	brne	.+8      	; 0x51b8 <nrk_ext_int_disable+0x2c>
    51b0:	80 91 6b 00 	lds	r24, 0x006B
    51b4:	8d 7f       	andi	r24, 0xFD	; 253
    51b6:	1d c0       	rjmp	.+58     	; 0x51f2 <nrk_ext_int_disable+0x66>
{
    51b8:	85 30       	cpi	r24, 0x05	; 5
    51ba:	21 f4       	brne	.+8      	; 0x51c4 <nrk_ext_int_disable+0x38>
    51bc:	80 91 6b 00 	lds	r24, 0x006B
    51c0:	8b 7f       	andi	r24, 0xFB	; 251
    51c2:	17 c0       	rjmp	.+46     	; 0x51f2 <nrk_ext_int_disable+0x66>
  nrk_setup_ports();
    51c4:	86 30       	cpi	r24, 0x06	; 6
    51c6:	21 f4       	brne	.+8      	; 0x51d0 <nrk_ext_int_disable+0x44>
    51c8:	80 91 6b 00 	lds	r24, 0x006B
    51cc:	87 7f       	andi	r24, 0xF7	; 247
    51ce:	11 c0       	rjmp	.+34     	; 0x51f2 <nrk_ext_int_disable+0x66>
  nrk_setup_uart(UART_BAUDRATE_115K2);
    51d0:	87 30       	cpi	r24, 0x07	; 7
    51d2:	21 f4       	brne	.+8      	; 0x51dc <nrk_ext_int_disable+0x50>
    51d4:	80 91 6b 00 	lds	r24, 0x006B
    51d8:	8f 7e       	andi	r24, 0xEF	; 239
    51da:	0b c0       	rjmp	.+22     	; 0x51f2 <nrk_ext_int_disable+0x66>

    51dc:	88 30       	cpi	r24, 0x08	; 8
    51de:	21 f4       	brne	.+8      	; 0x51e8 <nrk_ext_int_disable+0x5c>
    51e0:	80 91 6b 00 	lds	r24, 0x006B
    51e4:	8f 7d       	andi	r24, 0xDF	; 223
    51e6:	05 c0       	rjmp	.+10     	; 0x51f2 <nrk_ext_int_disable+0x66>
  nrk_init();
    51e8:	89 30       	cpi	r24, 0x09	; 9
    51ea:	41 f4       	brne	.+16     	; 0x51fc <nrk_ext_int_disable+0x70>
    51ec:	80 91 6b 00 	lds	r24, 0x006B
    51f0:	8f 7b       	andi	r24, 0xBF	; 191
    51f2:	80 93 6b 00 	sts	0x006B, r24
    51f6:	81 e0       	ldi	r24, 0x01	; 1
    51f8:	90 e0       	ldi	r25, 0x00	; 0
    51fa:	08 95       	ret

    51fc:	8a 30       	cpi	r24, 0x0A	; 10
    51fe:	19 f0       	breq	.+6      	; 0x5206 <nrk_ext_int_disable+0x7a>
    5200:	8f ef       	ldi	r24, 0xFF	; 255
    5202:	9f ef       	ldi	r25, 0xFF	; 255
    5204:	08 95       	ret
    5206:	80 91 6b 00 	lds	r24, 0x006B
    520a:	8f 77       	andi	r24, 0x7F	; 127
    520c:	80 93 6b 00 	sts	0x006B, r24
    5210:	81 e0       	ldi	r24, 0x01	; 1
    5212:	90 e0       	ldi	r25, 0x00	; 0
  nrk_led_clr(ORANGE_LED);
  nrk_led_clr(BLUE_LED);
    5214:	08 95       	ret

00005216 <nrk_ext_int_configure>:
  nrk_led_clr(GREEN_LED);
  nrk_led_clr(RED_LED);
 
  nrk_time_set(0,0);
  nrk_create_taskset ();
  nrk_start();
    5216:	88 23       	and	r24, r24
    5218:	39 f5       	brne	.+78     	; 0x5268 <nrk_ext_int_configure+0x52>
  
  return 0;
    521a:	50 93 39 08 	sts	0x0839, r21
    521e:	40 93 38 08 	sts	0x0838, r20
}
    5222:	66 23       	and	r22, r22
    5224:	21 f4       	brne	.+8      	; 0x522e <nrk_ext_int_configure+0x18>
    5226:	80 91 69 00 	lds	r24, 0x0069
    522a:	8c 7f       	andi	r24, 0xFC	; 252
    522c:	45 c0       	rjmp	.+138    	; 0x52b8 <nrk_ext_int_configure+0xa2>

    522e:	61 30       	cpi	r22, 0x01	; 1
    5230:	49 f4       	brne	.+18     	; 0x5244 <nrk_ext_int_configure+0x2e>
void Task1()
    5232:	80 91 69 00 	lds	r24, 0x0069
    5236:	8d 7f       	andi	r24, 0xFD	; 253
    5238:	80 93 69 00 	sts	0x0069, r24
    523c:	80 91 69 00 	lds	r24, 0x0069
    5240:	81 60       	ori	r24, 0x01	; 1
    5242:	3a c0       	rjmp	.+116    	; 0x52b8 <nrk_ext_int_configure+0xa2>
{
    5244:	62 30       	cpi	r22, 0x02	; 2
    5246:	49 f4       	brne	.+18     	; 0x525a <nrk_ext_int_configure+0x44>
nrk_time_t t;
    5248:	80 91 69 00 	lds	r24, 0x0069
    524c:	82 60       	ori	r24, 0x02	; 2
    524e:	80 93 69 00 	sts	0x0069, r24
    5252:	80 91 69 00 	lds	r24, 0x0069
    5256:	8e 7f       	andi	r24, 0xFE	; 254
    5258:	2f c0       	rjmp	.+94     	; 0x52b8 <nrk_ext_int_configure+0xa2>
uint16_t cnt;
    525a:	63 30       	cpi	r22, 0x03	; 3
    525c:	09 f0       	breq	.+2      	; 0x5260 <nrk_ext_int_configure+0x4a>
    525e:	69 c0       	rjmp	.+210    	; 0x5332 <nrk_ext_int_configure+0x11c>
    5260:	80 91 69 00 	lds	r24, 0x0069
    5264:	83 60       	ori	r24, 0x03	; 3
    5266:	28 c0       	rjmp	.+80     	; 0x52b8 <nrk_ext_int_configure+0xa2>
uint16_t wait_high_time;
uint8_t cur_TCNT2;
cnt=0;
    5268:	81 30       	cpi	r24, 0x01	; 1
    526a:	49 f5       	brne	.+82     	; 0x52be <nrk_ext_int_configure+0xa8>
nrk_kprintf( PSTR("Nano-RK Version ") );
printf( "%d\r\n",NRK_VERSION );
    526c:	50 93 37 08 	sts	0x0837, r21
    5270:	40 93 36 08 	sts	0x0836, r20

    5274:	66 23       	and	r22, r22
    5276:	21 f4       	brne	.+8      	; 0x5280 <nrk_ext_int_configure+0x6a>
    5278:	80 91 69 00 	lds	r24, 0x0069
    527c:	83 7f       	andi	r24, 0xF3	; 243
    527e:	1c c0       	rjmp	.+56     	; 0x52b8 <nrk_ext_int_configure+0xa2>
printf( "My node's address is %u\r\n",NODE_ADDR );
    5280:	61 30       	cpi	r22, 0x01	; 1
    5282:	49 f4       	brne	.+18     	; 0x5296 <nrk_ext_int_configure+0x80>
  
    5284:	80 91 69 00 	lds	r24, 0x0069
    5288:	87 7f       	andi	r24, 0xF7	; 247
    528a:	80 93 69 00 	sts	0x0069, r24
    528e:	80 91 69 00 	lds	r24, 0x0069
    5292:	84 60       	ori	r24, 0x04	; 4
    5294:	11 c0       	rjmp	.+34     	; 0x52b8 <nrk_ext_int_configure+0xa2>
printf( "Task1 PID=%u\r\n",nrk_get_pid());
    5296:	62 30       	cpi	r22, 0x02	; 2
    5298:	49 f4       	brne	.+18     	; 0x52ac <nrk_ext_int_configure+0x96>
//_nrk_high_speed_timer_start();
    529a:	80 91 69 00 	lds	r24, 0x0069
    529e:	88 60       	ori	r24, 0x08	; 8
    52a0:	80 93 69 00 	sts	0x0069, r24
    52a4:	80 91 69 00 	lds	r24, 0x0069
    52a8:	8b 7f       	andi	r24, 0xFB	; 251
    52aa:	06 c0       	rjmp	.+12     	; 0x52b8 <nrk_ext_int_configure+0xa2>
  while(1) {
    52ac:	63 30       	cpi	r22, 0x03	; 3
    52ae:	09 f0       	breq	.+2      	; 0x52b2 <nrk_ext_int_configure+0x9c>
    52b0:	40 c0       	rjmp	.+128    	; 0x5332 <nrk_ext_int_configure+0x11c>
    52b2:	80 91 69 00 	lds	r24, 0x0069
    52b6:	8c 60       	ori	r24, 0x0C	; 12
    52b8:	80 93 69 00 	sts	0x0069, r24
    52bc:	37 c0       	rjmp	.+110    	; 0x532c <nrk_ext_int_configure+0x116>
	//_nrk_high_speed_timer_reset();
	nrk_led_toggle(ORANGE_LED);
	nrk_gpio_set(NRK_DEBUG_0);
    52be:	82 30       	cpi	r24, 0x02	; 2
    52c0:	31 f5       	brne	.+76     	; 0x530e <nrk_ext_int_configure+0xf8>
	nrk_gpio_toggle(NRK_DEBUG_1);
	//printf( "Task1 cnt=%u\r\n, %d.",cnt);
    52c2:	50 93 37 08 	sts	0x0837, r21
    52c6:	40 93 36 08 	sts	0x0836, r20
	do{
    52ca:	66 23       	and	r22, r22
    52cc:	21 f4       	brne	.+8      	; 0x52d6 <nrk_ext_int_configure+0xc0>
    52ce:	80 91 69 00 	lds	r24, 0x0069
    52d2:	8f 7c       	andi	r24, 0xCF	; 207
    52d4:	f1 cf       	rjmp	.-30     	; 0x52b8 <nrk_ext_int_configure+0xa2>
		cur_TCNT2 = _nrk_os_timer_get();		
    52d6:	61 30       	cpi	r22, 0x01	; 1
    52d8:	49 f4       	brne	.+18     	; 0x52ec <nrk_ext_int_configure+0xd6>
	}while(cur_TCNT2<=20);
    52da:	80 91 69 00 	lds	r24, 0x0069
    52de:	8f 7d       	andi	r24, 0xDF	; 223
    52e0:	80 93 69 00 	sts	0x0069, r24
    52e4:	80 91 69 00 	lds	r24, 0x0069
    52e8:	80 61       	ori	r24, 0x10	; 16
    52ea:	e6 cf       	rjmp	.-52     	; 0x52b8 <nrk_ext_int_configure+0xa2>
	//printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);
    52ec:	62 30       	cpi	r22, 0x02	; 2
    52ee:	49 f4       	brne	.+18     	; 0x5302 <nrk_ext_int_configure+0xec>
	
    52f0:	80 91 69 00 	lds	r24, 0x0069
    52f4:	80 62       	ori	r24, 0x20	; 32
    52f6:	80 93 69 00 	sts	0x0069, r24
    52fa:	80 91 69 00 	lds	r24, 0x0069
    52fe:	8f 7e       	andi	r24, 0xEF	; 239
    5300:	db cf       	rjmp	.-74     	; 0x52b8 <nrk_ext_int_configure+0xa2>
	//printf("current TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
    5302:	63 30       	cpi	r22, 0x03	; 3
    5304:	b1 f4       	brne	.+44     	; 0x5332 <nrk_ext_int_configure+0x11c>
    5306:	80 91 69 00 	lds	r24, 0x0069
    530a:	80 63       	ori	r24, 0x30	; 48
    530c:	d5 cf       	rjmp	.-86     	; 0x52b8 <nrk_ext_int_configure+0xa2>
	/*do{
		cur_TCNT2 = _nrk_os_timer_get();		
	}while(cur_TCNT2!=100);
	printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);*/
	//_nrk_os_timer_set(40);// time escape 100ms
	/*while(cnt++<=10)
    530e:	83 50       	subi	r24, 0x03	; 3
    5310:	88 30       	cpi	r24, 0x08	; 8
    5312:	18 f0       	brcs	.+6      	; 0x531a <nrk_ext_int_configure+0x104>
    5314:	8f ef       	ldi	r24, 0xFF	; 255
    5316:	9f ef       	ldi	r25, 0xFF	; 255
    5318:	08 95       	ret
	{
    531a:	80 91 68 00 	lds	r24, 0x0068
    531e:	81 60       	ori	r24, 0x01	; 1
    5320:	80 93 68 00 	sts	0x0068, r24
		while(_nrk_high_speed_timer_get()<50000);
    5324:	50 93 3d 08 	sts	0x083D, r21
    5328:	40 93 3c 08 	sts	0x083C, r20
    532c:	81 e0       	ldi	r24, 0x01	; 1
    532e:	90 e0       	ldi	r25, 0x00	; 0
    5330:	08 95       	ret
		_nrk_high_speed_timer_reset();
    5332:	81 e0       	ldi	r24, 0x01	; 1
    5334:	90 e0       	ldi	r25, 0x00	; 0
	}*/
	_nrk_high_speed_timer_reset();
	//_nrk_os_timer_reset();
    5336:	08 95       	ret

00005338 <__vector_1>:
	//_nrk_high_speed_timer_reset();
	//printf("3rd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	_nrk_os_timer_set(20);
	//printf("TCNT1 is %d cnt is %d.\n\r",_nrk_high_speed_timer_get(),cnt);
	nrk_gpio_clr(NRK_DEBUG_0);
	nrk_wait_until_next_period();
    5338:	1f 92       	push	r1
    533a:	0f 92       	push	r0
    533c:	0f b6       	in	r0, 0x3f	; 63
    533e:	0f 92       	push	r0
    5340:	11 24       	eor	r1, r1
    5342:	2f 93       	push	r18
    5344:	3f 93       	push	r19
    5346:	4f 93       	push	r20
    5348:	5f 93       	push	r21
    534a:	6f 93       	push	r22
    534c:	7f 93       	push	r23
    534e:	8f 93       	push	r24
    5350:	9f 93       	push	r25
    5352:	af 93       	push	r26
    5354:	bf 93       	push	r27
    5356:	ef 93       	push	r30
    5358:	ff 93       	push	r31
	
    535a:	e0 91 38 08 	lds	r30, 0x0838
    535e:	f0 91 39 08 	lds	r31, 0x0839
    5362:	30 97       	sbiw	r30, 0x00	; 0
    5364:	11 f0       	breq	.+4      	; 0x536a <__vector_1+0x32>
    5366:	09 95       	icall
    5368:	04 c0       	rjmp	.+8      	; 0x5372 <__vector_1+0x3a>
        // Uncomment this line to cause a stack overflow
	// if(cnt>20) kill_stack(10);
    536a:	60 e0       	ldi	r22, 0x00	; 0
    536c:	8a e0       	ldi	r24, 0x0A	; 10
    536e:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_kernel_error_add>
    5372:	ff 91       	pop	r31
    5374:	ef 91       	pop	r30
    5376:	bf 91       	pop	r27
    5378:	af 91       	pop	r26
    537a:	9f 91       	pop	r25
    537c:	8f 91       	pop	r24
    537e:	7f 91       	pop	r23
    5380:	6f 91       	pop	r22
    5382:	5f 91       	pop	r21
    5384:	4f 91       	pop	r20
    5386:	3f 91       	pop	r19
    5388:	2f 91       	pop	r18
    538a:	0f 90       	pop	r0
    538c:	0f be       	out	0x3f, r0	; 63
    538e:	0f 90       	pop	r0
    5390:	1f 90       	pop	r1
    5392:	18 95       	reti

00005394 <__vector_9>:
	}*/
	_nrk_high_speed_timer_reset();
	//_nrk_os_timer_reset();
	//printf("1st TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//wait_high_time = _nrk_high_speed_timer_get() + 2577;
	do{}while(TCNT1<2577);
    5394:	1f 92       	push	r1
    5396:	0f 92       	push	r0
    5398:	0f b6       	in	r0, 0x3f	; 63
    539a:	0f 92       	push	r0
    539c:	11 24       	eor	r1, r1
    539e:	2f 93       	push	r18
    53a0:	3f 93       	push	r19
    53a2:	4f 93       	push	r20
    53a4:	5f 93       	push	r21
    53a6:	6f 93       	push	r22
    53a8:	7f 93       	push	r23
    53aa:	8f 93       	push	r24
    53ac:	9f 93       	push	r25
    53ae:	af 93       	push	r26
    53b0:	bf 93       	push	r27
    53b2:	ef 93       	push	r30
    53b4:	ff 93       	push	r31
	//nrk_high_speed_timer_wait(,2577);//time escape 0.5ms
    53b6:	e0 91 3c 08 	lds	r30, 0x083C
    53ba:	f0 91 3d 08 	lds	r31, 0x083D
    53be:	30 97       	sbiw	r30, 0x00	; 0
    53c0:	11 f0       	breq	.+4      	; 0x53c6 <__vector_9+0x32>
    53c2:	09 95       	icall
    53c4:	04 c0       	rjmp	.+8      	; 0x53ce <__vector_9+0x3a>
	//printf("2nd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//_nrk_high_speed_timer_reset();
    53c6:	60 e0       	ldi	r22, 0x00	; 0
    53c8:	8a e0       	ldi	r24, 0x0A	; 10
    53ca:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_kernel_error_add>
    53ce:	ff 91       	pop	r31
    53d0:	ef 91       	pop	r30
    53d2:	bf 91       	pop	r27
    53d4:	af 91       	pop	r26
    53d6:	9f 91       	pop	r25
    53d8:	8f 91       	pop	r24
    53da:	7f 91       	pop	r23
    53dc:	6f 91       	pop	r22
    53de:	5f 91       	pop	r21
    53e0:	4f 91       	pop	r20
    53e2:	3f 91       	pop	r19
    53e4:	2f 91       	pop	r18
    53e6:	0f 90       	pop	r0
    53e8:	0f be       	out	0x3f, r0	; 63
    53ea:	0f 90       	pop	r0
    53ec:	1f 90       	pop	r1
    53ee:	18 95       	reti

000053f0 <_nrk_startup_ok>:
#include <nrk_error.h>
#include <nrk_timer.h>
#include <nrk_stack_check.h>
#include <nrk_stats.h>


    53f0:	80 91 b0 00 	lds	r24, 0x00B0
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	81 11       	cpse	r24, r1
    53f8:	91 e0       	ldi	r25, 0x01	; 1
    53fa:	81 e0       	ldi	r24, 0x01	; 1
    53fc:	98 27       	eor	r25, r24
NRK_STK Stack1[NRK_APP_STACKSIZE];
nrk_task_type TaskOne;
    53fe:	89 2f       	mov	r24, r25
    5400:	99 27       	eor	r25, r25
    5402:	08 95       	ret

00005404 <update_watchdog>:
void Task1(void);

NRK_STK Stack2[NRK_APP_STACKSIZE];
    5404:	08 95       	ret

00005406 <nrk_watchdog_check>:
uint8_t kill_stack(uint8_t val);

int
main ()
{
  nrk_setup_ports();
    5406:	04 b6       	in	r0, 0x34	; 52
    5408:	03 fc       	sbrc	r0, 3
    540a:	03 c0       	rjmp	.+6      	; 0x5412 <nrk_watchdog_check+0xc>
    540c:	81 e0       	ldi	r24, 0x01	; 1
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	08 95       	ret
    5412:	8f ef       	ldi	r24, 0xFF	; 255
    5414:	9f ef       	ldi	r25, 0xFF	; 255
  nrk_setup_uart(UART_BAUDRATE_115K2);

    5416:	08 95       	ret

00005418 <nrk_watchdog_reset>:
  nrk_init();

  nrk_led_clr(ORANGE_LED);
  nrk_led_clr(BLUE_LED);
    5418:	a8 95       	wdr
    541a:	08 95       	ret

0000541c <nrk_watchdog_disable>:
#include <nrk_error.h>
#include <nrk_timer.h>
#include <nrk_stack_check.h>
#include <nrk_stats.h>


    541c:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>
  nrk_setup_uart(UART_BAUDRATE_115K2);

  nrk_init();

  nrk_led_clr(ORANGE_LED);
  nrk_led_clr(BLUE_LED);
    5420:	a8 95       	wdr
#include <nrk_stack_check.h>
#include <nrk_stats.h>


NRK_STK Stack1[NRK_APP_STACKSIZE];
nrk_task_type TaskOne;
    5422:	84 b7       	in	r24, 0x34	; 52
    5424:	87 7f       	andi	r24, 0xF7	; 247
    5426:	84 bf       	out	0x34, r24	; 52
void Task1(void);
    5428:	e0 e6       	ldi	r30, 0x60	; 96
    542a:	f0 e0       	ldi	r31, 0x00	; 0
    542c:	80 81       	ld	r24, Z
    542e:	88 61       	ori	r24, 0x18	; 24
    5430:	80 83       	st	Z, r24

    5432:	10 82       	st	Z, r1
NRK_STK Stack2[NRK_APP_STACKSIZE];
    5434:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>
    5438:	08 95       	ret

0000543a <nrk_watchdog_enable>:
void Task2 (void);

NRK_STK Stack3[NRK_APP_STACKSIZE];
nrk_task_type TaskThree;
void Task3 (void);

    543a:	0e 94 94 13 	call	0x2728	; 0x2728 <nrk_int_disable>

    543e:	84 b7       	in	r24, 0x34	; 52
    5440:	87 7f       	andi	r24, 0xF7	; 247
    5442:	84 bf       	out	0x34, r24	; 52
  nrk_setup_uart(UART_BAUDRATE_115K2);

  nrk_init();

  nrk_led_clr(ORANGE_LED);
  nrk_led_clr(BLUE_LED);
    5444:	a8 95       	wdr
nrk_task_type TaskThree;
void Task3 (void);


NRK_STK Stack4[NRK_APP_STACKSIZE];
nrk_task_type TaskFour;
    5446:	e0 e6       	ldi	r30, 0x60	; 96
    5448:	f0 e0       	ldi	r31, 0x00	; 0
    544a:	80 81       	ld	r24, Z
    544c:	88 61       	ori	r24, 0x18	; 24
    544e:	80 83       	st	Z, r24
void Task4 (void);
    5450:	8d e0       	ldi	r24, 0x0D	; 13
    5452:	80 83       	st	Z, r24

    5454:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>
    5458:	08 95       	ret

0000545a <nrk_battery_save>:
  nrk_led_clr(ORANGE_LED);
  nrk_led_clr(BLUE_LED);
  nrk_led_clr(GREEN_LED);
  nrk_led_clr(RED_LED);
 
  nrk_time_set(0,0);
    545a:	08 95       	ret

0000545c <nrk_sleep>:
uint16_t wait_high_time;
uint8_t cur_TCNT2;
cnt=0;
nrk_kprintf( PSTR("Nano-RK Version ") );
printf( "%d\r\n",NRK_VERSION );

    545c:	83 b7       	in	r24, 0x33	; 51
    545e:	81 7f       	andi	r24, 0xF1	; 241
    5460:	86 60       	ori	r24, 0x06	; 6
    5462:	83 bf       	out	0x33, r24	; 51
printf( "My node's address is %u\r\n",NODE_ADDR );
    5464:	83 b7       	in	r24, 0x33	; 51
    5466:	81 60       	ori	r24, 0x01	; 1
    5468:	83 bf       	out	0x33, r24	; 51
    546a:	88 95       	sleep
    546c:	83 b7       	in	r24, 0x33	; 51
    546e:	8e 7f       	andi	r24, 0xFE	; 254
    5470:	83 bf       	out	0x33, r24	; 51
    5472:	08 95       	ret

00005474 <nrk_idle>:
printf( "Task1 PID=%u\r\n",nrk_get_pid());
//_nrk_high_speed_timer_start();
  while(1) {
	//_nrk_high_speed_timer_reset();
	nrk_led_toggle(ORANGE_LED);
	nrk_gpio_set(NRK_DEBUG_0);
    5474:	83 b7       	in	r24, 0x33	; 51
    5476:	81 7f       	andi	r24, 0xF1	; 241
    5478:	83 bf       	out	0x33, r24	; 51
	nrk_gpio_toggle(NRK_DEBUG_1);
    547a:	83 b7       	in	r24, 0x33	; 51
    547c:	81 60       	ori	r24, 0x01	; 1
    547e:	83 bf       	out	0x33, r24	; 51
    5480:	88 95       	sleep
    5482:	83 b7       	in	r24, 0x33	; 51
    5484:	8e 7f       	andi	r24, 0xFE	; 254
    5486:	83 bf       	out	0x33, r24	; 51
    5488:	08 95       	ret

0000548a <nrk_task_set_entry_function>:
	//printf( "Task1 cnt=%u\r\n, %d.",cnt);
	do{
		cur_TCNT2 = _nrk_os_timer_get();		
	}while(cur_TCNT2<=20);
	//printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);
	
    548a:	fc 01       	movw	r30, r24
    548c:	76 83       	std	Z+6, r23	; 0x06
    548e:	65 83       	std	Z+5, r22	; 0x05
    5490:	08 95       	ret

00005492 <nrk_task_stk_init>:
	{
		while(_nrk_high_speed_timer_get()<50000);
		_nrk_high_speed_timer_reset();
	}*/
	_nrk_high_speed_timer_reset();
	//_nrk_os_timer_reset();
    5492:	fb 01       	movw	r30, r22
    5494:	da 01       	movw	r26, r20
	//printf("1st TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//wait_high_time = _nrk_high_speed_timer_get() + 2577;
	do{}while(TCNT1<2577);
	//nrk_high_speed_timer_wait(,2577);//time escape 0.5ms
	//printf("2nd TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	//_nrk_high_speed_timer_reset();
    5496:	25 e5       	ldi	r18, 0x55	; 85
    5498:	2c 93       	st	X, r18
	// if(cnt>20) kill_stack(10);

	// At time 50, the OS will halt and print statistics
	// This requires the NRK_STATS_TRACKER #define in nrk_cfg.h
	// if(cnt==50)  {
	//	nrk_stats_display_all();
    549a:	32 97       	sbiw	r30, 0x02	; 2
	//	nrk_halt();
	//	}
    549c:	29 2f       	mov	r18, r25
    549e:	33 27       	eor	r19, r19
    54a0:	20 83       	st	Z, r18

    54a2:	81 83       	std	Z+1, r24	; 0x01
	cnt=0;
	//cnt++;
    54a4:	32 97       	sbiw	r30, 0x02	; 2
    54a6:	11 82       	std	Z+1, r1	; 0x01
    54a8:	10 82       	st	Z, r1
	}
    54aa:	32 97       	sbiw	r30, 0x02	; 2
    54ac:	11 82       	std	Z+1, r1	; 0x01
    54ae:	10 82       	st	Z, r1
}
    54b0:	32 97       	sbiw	r30, 0x02	; 2
    54b2:	11 82       	std	Z+1, r1	; 0x01
    54b4:	10 82       	st	Z, r1

    54b6:	32 97       	sbiw	r30, 0x02	; 2
    54b8:	11 82       	std	Z+1, r1	; 0x01
    54ba:	10 82       	st	Z, r1
void Task2()
    54bc:	32 97       	sbiw	r30, 0x02	; 2
    54be:	11 82       	std	Z+1, r1	; 0x01
    54c0:	10 82       	st	Z, r1
{
    54c2:	32 97       	sbiw	r30, 0x02	; 2
    54c4:	11 82       	std	Z+1, r1	; 0x01
    54c6:	10 82       	st	Z, r1
  int16_t cnt;
    54c8:	32 97       	sbiw	r30, 0x02	; 2
    54ca:	11 82       	std	Z+1, r1	; 0x01
    54cc:	10 82       	st	Z, r1
  printf( "Task2 PID=%u\r\n",nrk_get_pid());
    54ce:	32 97       	sbiw	r30, 0x02	; 2
    54d0:	11 82       	std	Z+1, r1	; 0x01
    54d2:	10 82       	st	Z, r1
  cnt=0;
  while(1) {
    54d4:	32 97       	sbiw	r30, 0x02	; 2
    54d6:	11 82       	std	Z+1, r1	; 0x01
    54d8:	10 82       	st	Z, r1
	nrk_led_toggle(BLUE_LED);
    54da:	32 97       	sbiw	r30, 0x02	; 2
    54dc:	11 82       	std	Z+1, r1	; 0x01
    54de:	10 82       	st	Z, r1
	nrk_gpio_toggle(NRK_DEBUG_1);
    54e0:	32 97       	sbiw	r30, 0x02	; 2
    54e2:	11 82       	std	Z+1, r1	; 0x01
    54e4:	10 82       	st	Z, r1
	printf( "Task2 signed cnt=%d\r\n",cnt );
    54e6:	32 97       	sbiw	r30, 0x02	; 2
    54e8:	11 82       	std	Z+1, r1	; 0x01
    54ea:	10 82       	st	Z, r1
	nrk_wait_until_next_period();
    54ec:	32 97       	sbiw	r30, 0x02	; 2
    54ee:	11 82       	std	Z+1, r1	; 0x01
    54f0:	10 82       	st	Z, r1
	//nrk_stats_display_pid(nrk_get_pid());
    54f2:	32 97       	sbiw	r30, 0x02	; 2
    54f4:	11 82       	std	Z+1, r1	; 0x01
    54f6:	10 82       	st	Z, r1
	cnt--;
    54f8:	32 97       	sbiw	r30, 0x02	; 2
    54fa:	11 82       	std	Z+1, r1	; 0x01
    54fc:	10 82       	st	Z, r1
	}
    54fe:	32 97       	sbiw	r30, 0x02	; 2
    5500:	11 82       	std	Z+1, r1	; 0x01
    5502:	10 82       	st	Z, r1
}
    5504:	32 97       	sbiw	r30, 0x02	; 2
    5506:	11 82       	std	Z+1, r1	; 0x01
    5508:	10 82       	st	Z, r1

void Task3()
{
uint16_t cnt;
    550a:	cf 01       	movw	r24, r30
    550c:	08 95       	ret

0000550e <nrk_stack_pointer_init>:
	printf( "Task3 cnt=%u\r\n",cnt );
	nrk_wait_until_next_period();
	cnt++;
	}
}

    550e:	85 e5       	ldi	r24, 0x55	; 85
    5510:	80 93 7e 21 	sts	0x217E, r24
void Task4()
{
    5514:	ee ef       	ldi	r30, 0xFE	; 254
    5516:	f1 e2       	ldi	r31, 0x21	; 33
    5518:	f0 93 80 05 	sts	0x0580, r31
    551c:	e0 93 7f 05 	sts	0x057F, r30
uint16_t cnt;

    5520:	2b e9       	ldi	r18, 0x9B	; 155
    5522:	33 e1       	ldi	r19, 0x13	; 19
    5524:	83 2f       	mov	r24, r19
    5526:	99 27       	eor	r25, r25
    5528:	80 83       	st	Z, r24
  printf( "Task4 PID=%u\r\n",nrk_get_pid());
    552a:	20 93 ff 21 	sts	0x21FF, r18
    552e:	08 95       	ret

00005530 <nrk_stack_pointer_restore>:
}

void
nrk_create_taskset()
{
  nrk_task_set_entry_function( &TaskOne, Task1);
    5530:	2b e9       	ldi	r18, 0x9B	; 155
    5532:	33 e1       	ldi	r19, 0x13	; 19
    5534:	83 2f       	mov	r24, r19
    5536:	99 27       	eor	r25, r25
    5538:	80 93 fe 21 	sts	0x21FE, r24
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
    553c:	20 93 ff 21 	sts	0x21FF, r18
    5540:	08 95       	ret

00005542 <nrk_target_start>:
  TaskOne.FirstActivation = TRUE;
  TaskOne.Type = BASIC_TASK;
  TaskOne.SchType = PREEMPTIVE;
  TaskOne.period.secs = 0;
  TaskOne.period.nano_secs = 50*NANOS_PER_MS;
  TaskOne.cpu_reserve.secs = 0;
    5542:	0e 94 44 28 	call	0x5088	; 0x5088 <_nrk_setup_timer>
  TaskOne.cpu_reserve.nano_secs = 50*NANOS_PER_MS;
    5546:	0e 94 96 13 	call	0x272c	; 0x272c <nrk_int_enable>
    554a:	08 95       	ret

0000554c <nrk_task_set_stk>:
	//printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);
	
	//printf("current TCNT1 is %d.\n\r",_nrk_high_speed_timer_get());
	/*do{
		cur_TCNT2 = _nrk_os_timer_get();		
	}while(cur_TCNT2!=100);
    554c:	ef 92       	push	r14
    554e:	ff 92       	push	r15
    5550:	0f 93       	push	r16
    5552:	1f 93       	push	r17
    5554:	cf 93       	push	r28
    5556:	df 93       	push	r29
    5558:	7c 01       	movw	r14, r24
    555a:	8b 01       	movw	r16, r22
    555c:	ea 01       	movw	r28, r20
	printf("Task1 cnt=%u, current TCNT2 is %d\n\r",cnt, cur_TCNT2);*/
	//_nrk_os_timer_set(40);// time escape 100ms
    555e:	40 32       	cpi	r20, 0x20	; 32
    5560:	51 05       	cpc	r21, r1
    5562:	18 f4       	brcc	.+6      	; 0x556a <nrk_task_set_stk+0x1e>
    5564:	81 e1       	ldi	r24, 0x11	; 17
    5566:	0e 94 11 1a 	call	0x3422	; 0x3422 <nrk_error_add>
	/*while(cnt++<=10)
    556a:	c8 01       	movw	r24, r16
    556c:	01 97       	sbiw	r24, 0x01	; 1
    556e:	8c 0f       	add	r24, r28
    5570:	9d 1f       	adc	r25, r29
    5572:	f7 01       	movw	r30, r14
    5574:	92 83       	std	Z+2, r25	; 0x02
    5576:	81 83       	std	Z+1, r24	; 0x01
	{
    5578:	14 83       	std	Z+4, r17	; 0x04
    557a:	03 83       	std	Z+3, r16	; 0x03
    557c:	df 91       	pop	r29
    557e:	cf 91       	pop	r28
    5580:	1f 91       	pop	r17
    5582:	0f 91       	pop	r16
    5584:	ff 90       	pop	r15
    5586:	ef 90       	pop	r14
    5588:	08 95       	ret

0000558a <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    558a:	a0 91 06 08 	lds	r26, 0x0806
	lds r27,nrk_high_ready_TCB+1
    558e:	b0 91 07 08 	lds	r27, 0x0807

    	;x points to &OSTCB[x]
    
	ld r28,x+
    5592:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    5594:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    5596:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    5598:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    559a:	ff 91       	pop	r31
	pop r30
    559c:	ef 91       	pop	r30
	pop r29
    559e:	df 91       	pop	r29
	pop r28
    55a0:	cf 91       	pop	r28
	pop r27
    55a2:	bf 91       	pop	r27
	pop r26
    55a4:	af 91       	pop	r26
	pop r25
    55a6:	9f 91       	pop	r25
	pop r24			
    55a8:	8f 91       	pop	r24
	pop r23
    55aa:	7f 91       	pop	r23
	pop r22
    55ac:	6f 91       	pop	r22
	pop r21
    55ae:	5f 91       	pop	r21
	pop r20	
    55b0:	4f 91       	pop	r20
	pop r19
    55b2:	3f 91       	pop	r19
	pop r18	
    55b4:	2f 91       	pop	r18
	pop r17
    55b6:	1f 91       	pop	r17
	pop r16
    55b8:	0f 91       	pop	r16
	pop r15
    55ba:	ff 90       	pop	r15
	pop r14
    55bc:	ef 90       	pop	r14
	pop r13
    55be:	df 90       	pop	r13
	pop r12
    55c0:	cf 90       	pop	r12
	pop r11
    55c2:	bf 90       	pop	r11
	pop r10
    55c4:	af 90       	pop	r10
	pop r9
    55c6:	9f 90       	pop	r9
	pop r8
    55c8:	8f 90       	pop	r8
	pop r7
    55ca:	7f 90       	pop	r7
	pop r6
    55cc:	6f 90       	pop	r6
	pop r5
    55ce:	5f 90       	pop	r5
	pop r4
    55d0:	4f 90       	pop	r4
	pop r3
    55d2:	3f 90       	pop	r3
	pop r2
    55d4:	2f 90       	pop	r2
	pop r1
    55d6:	1f 90       	pop	r1
	pop r0
    55d8:	0f 90       	pop	r0
	out __SREG__, r0
    55da:	0f be       	out	0x3f, r0	; 63
	pop r0	
    55dc:	0f 90       	pop	r0
	   
    	reti 
    55de:	18 95       	reti

000055e0 <vfprintf>:
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
}

    55e0:	ab e0       	ldi	r26, 0x0B	; 11
    55e2:	b0 e0       	ldi	r27, 0x00	; 0
    55e4:	e6 ef       	ldi	r30, 0xF6	; 246
    55e6:	fa e2       	ldi	r31, 0x2A	; 42
    55e8:	0c 94 91 2e 	jmp	0x5d22	; 0x5d22 <__prologue_saves__>
    55ec:	4c 01       	movw	r8, r24
    55ee:	6b 01       	movw	r12, r22
    55f0:	7a 01       	movw	r14, r20
char getc1(void){
        unsigned char tmp;
        UART1_WAIT_AND_RECEIVE(tmp);
        return tmp;
}
    55f2:	fc 01       	movw	r30, r24
    55f4:	17 82       	std	Z+7, r1	; 0x07
    55f6:	16 82       	std	Z+6, r1	; 0x06

#endif
    55f8:	83 81       	ldd	r24, Z+3	; 0x03
    55fa:	81 fd       	sbrc	r24, 1
    55fc:	08 c0       	rjmp	.+16     	; 0x560e <vfprintf+0x2e>
    55fe:	8f ef       	ldi	r24, 0xFF	; 255
    5600:	9f ef       	ldi	r25, 0xFF	; 255
    5602:	1a c1       	rjmp	.+564    	; 0x5838 <vfprintf+0x258>
// Port E
NRK_PIN( UART0_RXD,UART0_RXD, NRK_PORTE )
NRK_PIN( UART0_TXD,UART0_TXD, NRK_PORTE )
NRK_PIN( LED_0,LED_0, NRK_PORTE )
NRK_PIN( LED_1,LED_1, NRK_PORTE )
NRK_PIN( LED_2,LED_2, NRK_PORTE )
    5604:	22 e0       	ldi	r18, 0x02	; 2
    5606:	30 e0       	ldi	r19, 0x00	; 0
    5608:	e2 0e       	add	r14, r18
    560a:	f3 1e       	adc	r15, r19
    560c:	0c c0       	rjmp	.+24     	; 0x5626 <vfprintf+0x46>
   while((c=pgm_read_byte(addr++)))
        putchar(c);
}

void nrk_setup_ports()
{
    560e:	9b ec       	ldi	r25, 0xCB	; 203
    5610:	29 2e       	mov	r2, r25
    5612:	93 e0       	ldi	r25, 0x03	; 3
    5614:	39 2e       	mov	r3, r25
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTB:
    5616:	3e 01       	movw	r6, r28
    5618:	08 94       	sec
    561a:	61 1c       	adc	r6, r1
    561c:	71 1c       	adc	r7, r1
    561e:	84 ec       	ldi	r24, 0xC4	; 196
    5620:	48 2e       	mov	r4, r24
    5622:	83 e0       	ldi	r24, 0x03	; 3
    5624:	58 2e       	mov	r5, r24

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
        putchar(c);
    5626:	f4 01       	movw	r30, r8
    5628:	03 81       	ldd	r16, Z+3	; 0x03
    562a:	f6 01       	movw	r30, r12
    562c:	03 fd       	sbrc	r16, 3
    562e:	85 91       	lpm	r24, Z+
    5630:	03 ff       	sbrs	r16, 3
    5632:	81 91       	ld	r24, Z+
    5634:	6f 01       	movw	r12, r30
}
    5636:	88 23       	and	r24, r24
    5638:	09 f4       	brne	.+2      	; 0x563c <vfprintf+0x5c>
    563a:	fb c0       	rjmp	.+502    	; 0x5832 <vfprintf+0x252>

    563c:	85 32       	cpi	r24, 0x25	; 37
    563e:	59 f4       	brne	.+22     	; 0x5656 <vfprintf+0x76>
void nrk_setup_ports()
    5640:	03 fd       	sbrc	r16, 3
    5642:	65 91       	lpm	r22, Z+
    5644:	03 ff       	sbrs	r16, 3
    5646:	61 91       	ld	r22, Z+
    5648:	6f 01       	movw	r12, r30
{
    564a:	65 32       	cpi	r22, 0x25	; 37
    564c:	19 f0       	breq	.+6      	; 0x5654 <vfprintf+0x74>
    564e:	16 2f       	mov	r17, r22
    5650:	bb 24       	eor	r11, r11
    5652:	1c c0       	rjmp	.+56     	; 0x568c <vfprintf+0xac>
    5654:	85 e2       	ldi	r24, 0x25	; 37
PORT_INIT();
SPI_INIT();
    5656:	b4 01       	movw	r22, r8
    5658:	99 27       	eor	r25, r25
    565a:	2a c0       	rjmp	.+84     	; 0x56b0 <vfprintf+0xd0>

//---------------------------------------------------------------------------------------------
// GPIO related definitions
//---------------------------------------------------------------------------------------------
// Define high-level nrk pins mappings to hardware pins and ports
// This is used for nrk_gpio_... functions.
    565c:	11 23       	and	r17, r17
    565e:	59 f1       	breq	.+86     	; 0x56b6 <vfprintf+0xd6>
    5660:	61 2f       	mov	r22, r17
    5662:	77 27       	eor	r23, r23
    5664:	c1 01       	movw	r24, r2
    5666:	0e 94 20 2c 	call	0x5840	; 0x5840 <strchr_P>
    566a:	89 2b       	or	r24, r25
    566c:	49 f4       	brne	.+18     	; 0x5680 <vfprintf+0xa0>
// Raw GPIO mapping can be found in the nrk_pin_define.h file.
//---------------------------------------------------------------------------------------------
    566e:	13 32       	cpi	r17, 0x23	; 35
    5670:	19 f4       	brne	.+6      	; 0x5678 <vfprintf+0x98>

    5672:	f0 e1       	ldi	r31, 0x10	; 16
    5674:	bf 2a       	or	r11, r31
    5676:	04 c0       	rjmp	.+8      	; 0x5680 <vfprintf+0xa0>
//-------------------------------
// Port A
NRK_PIN( DEBUG_0,DEBUG_0, NRK_PORTA )
    5678:	1c 36       	cpi	r17, 0x6C	; 108
    567a:	61 f4       	brne	.+24     	; 0x5694 <vfprintf+0xb4>
NRK_PIN( DEBUG_1,DEBUG_1, NRK_PORTA )
    567c:	20 e8       	ldi	r18, 0x80	; 128
    567e:	b2 2a       	or	r11, r18
SPI_INIT();
}

//---------------------------------------------------------------------------------------------
// GPIO related definitions
//---------------------------------------------------------------------------------------------
    5680:	f6 01       	movw	r30, r12
    5682:	03 fd       	sbrc	r16, 3
    5684:	15 91       	lpm	r17, Z+
    5686:	03 ff       	sbrs	r16, 3
    5688:	11 91       	ld	r17, Z+
    568a:	6f 01       	movw	r12, r30
PORT_INIT();
SPI_INIT();
}

//---------------------------------------------------------------------------------------------
// GPIO related definitions
    568c:	b7 fe       	sbrs	r11, 7
    568e:	e6 cf       	rjmp	.-52     	; 0x565c <vfprintf+0x7c>
// Port B
NRK_PIN( SPI_SS,SPI_SS, NRK_PORTB )
NRK_PIN( SCK,SCK, NRK_PORTB )
NRK_PIN( MOSI,MOSI, NRK_PORTB )
NRK_PIN( MISO,MISO, NRK_PORTB )
NRK_PIN( GPIO26,4, NRK_PORTB )
    5690:	11 23       	and	r17, r17
    5692:	89 f0       	breq	.+34     	; 0x56b6 <vfprintf+0xd6>
    5694:	61 2f       	mov	r22, r17
    5696:	77 27       	eor	r23, r23
    5698:	c2 01       	movw	r24, r4
    569a:	0e 94 20 2c 	call	0x5840	; 0x5840 <strchr_P>
    569e:	89 2b       	or	r24, r25
    56a0:	51 f0       	breq	.+20     	; 0x56b6 <vfprintf+0xd6>
NRK_PIN( MMC_11,5, NRK_PORTB )
    56a2:	24 e0       	ldi	r18, 0x04	; 4
    56a4:	30 e0       	ldi	r19, 0x00	; 0
    56a6:	e2 0e       	add	r14, r18
    56a8:	f3 1e       	adc	r15, r19
NRK_PIN( MMC_10,6, NRK_PORTB )
    56aa:	b4 01       	movw	r22, r8
    56ac:	8f e3       	ldi	r24, 0x3F	; 63
    56ae:	90 e0       	ldi	r25, 0x00	; 0
    56b0:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <fputc>
    56b4:	b8 cf       	rjmp	.-144    	; 0x5626 <vfprintf+0x46>

//-------------------------------
// Port D
NRK_PIN( DEBUG_2,DEBUG_2, NRK_PORTD )
NRK_PIN( DEBUG_3,DEBUG_3, NRK_PORTD )
NRK_PIN( UART1_RXD,UART1_RXD, NRK_PORTD )
    56b6:	13 36       	cpi	r17, 0x63	; 99
    56b8:	29 f0       	breq	.+10     	; 0x56c4 <vfprintf+0xe4>
    56ba:	13 37       	cpi	r17, 0x73	; 115
    56bc:	81 f0       	breq	.+32     	; 0x56de <vfprintf+0xfe>
    56be:	13 35       	cpi	r17, 0x53	; 83
    56c0:	f9 f4       	brne	.+62     	; 0x5700 <vfprintf+0x120>
    56c2:	0b c0       	rjmp	.+22     	; 0x56da <vfprintf+0xfa>
NRK_PIN( UART1_TXD,UART1_TXD, NRK_PORTD )
NRK_PIN( CCA,CCA, NRK_PORTD )
NRK_PIN( SFD,SFD, NRK_PORTD )
    56c4:	87 01       	movw	r16, r14
    56c6:	0e 5f       	subi	r16, 0xFE	; 254
    56c8:	1f 4f       	sbci	r17, 0xFF	; 255
    56ca:	b4 01       	movw	r22, r8
    56cc:	f7 01       	movw	r30, r14
    56ce:	80 81       	ld	r24, Z
    56d0:	91 81       	ldd	r25, Z+1	; 0x01
    56d2:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <fputc>
    56d6:	78 01       	movw	r14, r16
    56d8:	a6 cf       	rjmp	.-180    	; 0x5626 <vfprintf+0x46>

//-------------------------------
// Port E
NRK_PIN( UART0_RXD,UART0_RXD, NRK_PORTE )
    56da:	f1 e0       	ldi	r31, 0x01	; 1
    56dc:	bf 2a       	or	r11, r31
NRK_PIN( UART0_TXD,UART0_TXD, NRK_PORTE )
NRK_PIN( LED_0,LED_0, NRK_PORTE )
NRK_PIN( LED_1,LED_1, NRK_PORTE )
NRK_PIN( LED_2,LED_2, NRK_PORTE )
    56de:	f7 01       	movw	r30, r14
    56e0:	00 81       	ld	r16, Z
    56e2:	11 81       	ldd	r17, Z+1	; 0x01
    56e4:	04 c0       	rjmp	.+8      	; 0x56ee <vfprintf+0x10e>
NRK_PIN( LED_3,LED_3, NRK_PORTE )
NRK_PIN( GPIO34,GPIO34, NRK_PORTE )
    56e6:	b4 01       	movw	r22, r8
    56e8:	99 27       	eor	r25, r25
    56ea:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <fputc>
NRK_PIN( UART0_RXD,UART0_RXD, NRK_PORTE )
NRK_PIN( UART0_TXD,UART0_TXD, NRK_PORTE )
NRK_PIN( LED_0,LED_0, NRK_PORTE )
NRK_PIN( LED_1,LED_1, NRK_PORTE )
NRK_PIN( LED_2,LED_2, NRK_PORTE )
NRK_PIN( LED_3,LED_3, NRK_PORTE )
    56ee:	f8 01       	movw	r30, r16
    56f0:	b0 fc       	sbrc	r11, 0
    56f2:	85 91       	lpm	r24, Z+
    56f4:	b0 fe       	sbrs	r11, 0
    56f6:	81 91       	ld	r24, Z+
    56f8:	8f 01       	movw	r16, r30
    56fa:	88 23       	and	r24, r24
    56fc:	a1 f7       	brne	.-24     	; 0x56e6 <vfprintf+0x106>
    56fe:	82 cf       	rjmp	.-252    	; 0x5604 <vfprintf+0x24>
NRK_PIN( GPIO34,GPIO34, NRK_PORTE )
NRK_PIN( FIFOP, FIFOP, NRK_PORTE )


//-------------------------------
// Port F
    5700:	14 36       	cpi	r17, 0x64	; 100
    5702:	11 f0       	breq	.+4      	; 0x5708 <vfprintf+0x128>
    5704:	19 36       	cpi	r17, 0x69	; 105
    5706:	49 f5       	brne	.+82     	; 0x575a <vfprintf+0x17a>
NRK_PIN( ADC_INPUT_0, ADC_INPUT_0, NRK_PORTF )
    5708:	b7 fe       	sbrs	r11, 7
    570a:	0a c0       	rjmp	.+20     	; 0x5720 <vfprintf+0x140>
    570c:	f7 01       	movw	r30, r14
    570e:	60 81       	ld	r22, Z
    5710:	71 81       	ldd	r23, Z+1	; 0x01
    5712:	82 81       	ldd	r24, Z+2	; 0x02
    5714:	93 81       	ldd	r25, Z+3	; 0x03
    5716:	24 e0       	ldi	r18, 0x04	; 4
    5718:	30 e0       	ldi	r19, 0x00	; 0
    571a:	e2 0e       	add	r14, r18
    571c:	f3 1e       	adc	r15, r19
    571e:	0d c0       	rjmp	.+26     	; 0x573a <vfprintf+0x15a>
    5720:	f7 01       	movw	r30, r14
    5722:	80 81       	ld	r24, Z
    5724:	91 81       	ldd	r25, Z+1	; 0x01
    5726:	9c 01       	movw	r18, r24
    5728:	b9 01       	movw	r22, r18
    572a:	88 27       	eor	r24, r24
    572c:	77 fd       	sbrc	r23, 7
    572e:	80 95       	com	r24
    5730:	98 2f       	mov	r25, r24
    5732:	42 e0       	ldi	r20, 0x02	; 2
    5734:	50 e0       	ldi	r21, 0x00	; 0
    5736:	e4 0e       	add	r14, r20
    5738:	f5 1e       	adc	r15, r21
NRK_PIN( ADC_INPUT_1, ADC_INPUT_1, NRK_PORTF )
    573a:	5f ee       	ldi	r21, 0xEF	; 239
    573c:	b5 22       	and	r11, r21
NRK_PIN( ADC_INPUT_2, ADC_INPUT_2, NRK_PORTF )
    573e:	97 ff       	sbrs	r25, 7
    5740:	09 c0       	rjmp	.+18     	; 0x5754 <vfprintf+0x174>
NRK_PIN( ADC_INPUT_3, ADC_INPUT_3, NRK_PORTF )
    5742:	90 95       	com	r25
    5744:	80 95       	com	r24
    5746:	70 95       	com	r23
    5748:	61 95       	neg	r22
    574a:	7f 4f       	sbci	r23, 0xFF	; 255
    574c:	8f 4f       	sbci	r24, 0xFF	; 255
    574e:	9f 4f       	sbci	r25, 0xFF	; 255
NRK_PIN( ADC_INPUT_4, ADC_INPUT_4, NRK_PORTF )
NRK_PIN( ADC_INPUT_5, ADC_INPUT_5, NRK_PORTF )
NRK_PIN( ADC_INPUT_6, ADC_INPUT_6, NRK_PORTF )
    5750:	e0 e4       	ldi	r30, 0x40	; 64
    5752:	be 2a       	or	r11, r30
NRK_PIN( ADC_INPUT_7, ADC_INPUT_7, NRK_PORTF )

    5754:	2a e0       	ldi	r18, 0x0A	; 10
    5756:	30 e0       	ldi	r19, 0x00	; 0
    5758:	3a c0       	rjmp	.+116    	; 0x57ce <vfprintf+0x1ee>
void PORT_INIT(void) 
{
        MCUCR |= BM(PUD); 
        DDRB  = BM(MOSI) | BM(SCK);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
    575a:	10 37       	cpi	r17, 0x70	; 112
    575c:	b1 f0       	breq	.+44     	; 0x578a <vfprintf+0x1aa>
    575e:	11 37       	cpi	r17, 0x71	; 113
    5760:	30 f4       	brcc	.+12     	; 0x576e <vfprintf+0x18e>
    5762:	18 35       	cpi	r17, 0x58	; 88
    5764:	c9 f0       	breq	.+50     	; 0x5798 <vfprintf+0x1b8>
    5766:	1f 36       	cpi	r17, 0x6F	; 111
    5768:	09 f0       	breq	.+2      	; 0x576c <vfprintf+0x18c>
    576a:	63 c0       	rjmp	.+198    	; 0x5832 <vfprintf+0x252>
    576c:	06 c0       	rjmp	.+12     	; 0x577a <vfprintf+0x19a>
    576e:	15 37       	cpi	r17, 0x75	; 117
    5770:	39 f0       	breq	.+14     	; 0x5780 <vfprintf+0x1a0>
    5772:	18 37       	cpi	r17, 0x78	; 120
    5774:	09 f0       	breq	.+2      	; 0x5778 <vfprintf+0x198>
    5776:	5d c0       	rjmp	.+186    	; 0x5832 <vfprintf+0x252>
    5778:	0a c0       	rjmp	.+20     	; 0x578e <vfprintf+0x1ae>
    577a:	28 e0       	ldi	r18, 0x08	; 8
    577c:	30 e0       	ldi	r19, 0x00	; 0
    577e:	10 c0       	rjmp	.+32     	; 0x57a0 <vfprintf+0x1c0>
        DDRC  = BM(CSN); 
        PORTC = BM(CSN); 
    5780:	ff ee       	ldi	r31, 0xEF	; 239
    5782:	bf 22       	and	r11, r31
    5784:	2a e0       	ldi	r18, 0x0A	; 10
    5786:	30 e0       	ldi	r19, 0x00	; 0
    5788:	0b c0       	rjmp	.+22     	; 0x57a0 <vfprintf+0x1c0>
        DDRD  = BM(UART1_TXD) | BM(DEBUG_2) | BM(DEBUG_3); 
        PORTE  = BM(UART0_TXD) | BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
        DDRA  = BM(VREG_EN) | BM(RESET_N) | BM(DEBUG_0) | BM(DEBUG_1); 
        PORTA = BM(RESET_N); 
} 

    578a:	20 e1       	ldi	r18, 0x10	; 16
    578c:	b2 2a       	or	r11, r18


//-------------------------------
    578e:	34 e2       	ldi	r19, 0x24	; 36
    5790:	b3 2a       	or	r11, r19
    5792:	20 e1       	ldi	r18, 0x10	; 16
    5794:	30 e0       	ldi	r19, 0x00	; 0
    5796:	04 c0       	rjmp	.+8      	; 0x57a0 <vfprintf+0x1c0>
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
    5798:	44 e0       	ldi	r20, 0x04	; 4
    579a:	b4 2a       	or	r11, r20
    579c:	20 e1       	ldi	r18, 0x10	; 16
    579e:	32 e0       	ldi	r19, 0x02	; 2
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
    57a0:	b7 fe       	sbrs	r11, 7
    57a2:	0a c0       	rjmp	.+20     	; 0x57b8 <vfprintf+0x1d8>
    57a4:	f7 01       	movw	r30, r14
    57a6:	60 81       	ld	r22, Z
    57a8:	71 81       	ldd	r23, Z+1	; 0x01
    57aa:	82 81       	ldd	r24, Z+2	; 0x02
    57ac:	93 81       	ldd	r25, Z+3	; 0x03
    57ae:	44 e0       	ldi	r20, 0x04	; 4
    57b0:	50 e0       	ldi	r21, 0x00	; 0
    57b2:	e4 0e       	add	r14, r20
    57b4:	f5 1e       	adc	r15, r21
    57b6:	0b c0       	rjmp	.+22     	; 0x57ce <vfprintf+0x1ee>
    57b8:	f7 01       	movw	r30, r14
    57ba:	80 81       	ld	r24, Z
    57bc:	91 81       	ldd	r25, Z+1	; 0x01
    57be:	ac 01       	movw	r20, r24
    57c0:	ba 01       	movw	r22, r20
    57c2:	88 27       	eor	r24, r24
    57c4:	99 27       	eor	r25, r25
    57c6:	e2 e0       	ldi	r30, 0x02	; 2
    57c8:	f0 e0       	ldi	r31, 0x00	; 0
    57ca:	ee 0e       	add	r14, r30
    57cc:	ff 1e       	adc	r15, r31
    57ce:	a3 01       	movw	r20, r6
    57d0:	0e 94 bd 2c 	call	0x597a	; 0x597a <__ultoa_invert>
    57d4:	a8 2e       	mov	r10, r24
    57d6:	a6 18       	sub	r10, r6
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
    57d8:	0b 2d       	mov	r16, r11
    57da:	11 27       	eor	r17, r17
    57dc:	06 ff       	sbrs	r16, 6
    57de:	05 c0       	rjmp	.+10     	; 0x57ea <vfprintf+0x20a>
        }
    57e0:	b4 01       	movw	r22, r8
    57e2:	8d e2       	ldi	r24, 0x2D	; 45
    57e4:	90 e0       	ldi	r25, 0x00	; 0
    57e6:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <fputc>
        return 1;
    57ea:	04 ff       	sbrs	r16, 4
    57ec:	15 c0       	rjmp	.+42     	; 0x5818 <vfprintf+0x238>
    57ee:	fe 01       	movw	r30, r28
    57f0:	ea 0d       	add	r30, r10
    57f2:	f1 1d       	adc	r31, r1
    57f4:	80 81       	ld	r24, Z
    57f6:	80 33       	cpi	r24, 0x30	; 48
    57f8:	79 f0       	breq	.+30     	; 0x5818 <vfprintf+0x238>
}
    57fa:	b4 01       	movw	r22, r8
    57fc:	80 e3       	ldi	r24, 0x30	; 48
    57fe:	90 e0       	ldi	r25, 0x00	; 0
    5800:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <fputc>

    5804:	02 ff       	sbrs	r16, 2
    5806:	08 c0       	rjmp	.+16     	; 0x5818 <vfprintf+0x238>
int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
    5808:	00 72       	andi	r16, 0x20	; 32
    580a:	10 70       	andi	r17, 0x00	; 0
    580c:	b4 01       	movw	r22, r8
    580e:	c8 01       	movw	r24, r16
    5810:	88 5a       	subi	r24, 0xA8	; 168
    5812:	9f 4f       	sbci	r25, 0xFF	; 255
    5814:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <fputc>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTB:
    5818:	aa 94       	dec	r10
    581a:	f3 01       	movw	r30, r6
    581c:	ea 0d       	add	r30, r10
    581e:	f1 1d       	adc	r31, r1
    5820:	80 81       	ld	r24, Z
    5822:	b4 01       	movw	r22, r8
    5824:	99 27       	eor	r25, r25
    5826:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <fputc>
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    582a:	aa 20       	and	r10, r10
    582c:	09 f4       	brne	.+2      	; 0x5830 <vfprintf+0x250>
    582e:	fb ce       	rjmp	.-522    	; 0x5626 <vfprintf+0x46>
    5830:	f3 cf       	rjmp	.-26     	; 0x5818 <vfprintf+0x238>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTE:
    5832:	f4 01       	movw	r30, r8
    5834:	86 81       	ldd	r24, Z+6	; 0x06
    5836:	97 81       	ldd	r25, Z+7	; 0x07
    5838:	e2 e1       	ldi	r30, 0x12	; 18
    583a:	2b 96       	adiw	r28, 0x0b	; 11
    583c:	0c 94 ad 2e 	jmp	0x5d5a	; 0x5d5a <__epilogue_restores__>

00005840 <strchr_P>:
    5840:	fc 01       	movw	r30, r24
    5842:	05 90       	lpm	r0, Z+
    5844:	06 16       	cp	r0, r22
    5846:	21 f0       	breq	.+8      	; 0x5850 <strchr_P+0x10>
    5848:	00 20       	and	r0, r0
    584a:	d9 f7       	brne	.-10     	; 0x5842 <strchr_P+0x2>
    584c:	c0 01       	movw	r24, r0
    584e:	08 95       	ret
    5850:	31 97       	sbiw	r30, 0x01	; 1
    5852:	cf 01       	movw	r24, r30
    5854:	08 95       	ret

00005856 <fdevopen>:
   not use for new code.
*/

FILE *
fdevopen(int (*put)(char, FILE *), int (*get)(FILE *))
{
    5856:	ef 92       	push	r14
    5858:	ff 92       	push	r15
    585a:	0f 93       	push	r16
    585c:	1f 93       	push	r17
    585e:	cf 93       	push	r28
    5860:	df 93       	push	r29
    5862:	8c 01       	movw	r16, r24
    5864:	7b 01       	movw	r14, r22
	FILE *s;

	if (put == 0 && get == 0)
    5866:	89 2b       	or	r24, r25
    5868:	11 f4       	brne	.+4      	; 0x586e <fdevopen+0x18>
    586a:	67 2b       	or	r22, r23
    586c:	d1 f1       	breq	.+116    	; 0x58e2 <fdevopen+0x8c>
		return 0;

	if ((s = calloc(1, sizeof(FILE))) == 0)
    586e:	6e e0       	ldi	r22, 0x0E	; 14
    5870:	70 e0       	ldi	r23, 0x00	; 0
    5872:	81 e0       	ldi	r24, 0x01	; 1
    5874:	90 e0       	ldi	r25, 0x00	; 0
    5876:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <calloc>
    587a:	fc 01       	movw	r30, r24
    587c:	00 97       	sbiw	r24, 0x00	; 0
    587e:	89 f1       	breq	.+98     	; 0x58e2 <fdevopen+0x8c>
    5880:	dc 01       	movw	r26, r24
		return 0;

	s->flags = __SMALLOC;
    5882:	80 e8       	ldi	r24, 0x80	; 128
    5884:	83 83       	std	Z+3, r24	; 0x03

	if (get != 0) {
    5886:	e1 14       	cp	r14, r1
    5888:	f1 04       	cpc	r15, r1
    588a:	71 f0       	breq	.+28     	; 0x58a8 <fdevopen+0x52>
		s->get = get;
    588c:	f3 86       	std	Z+11, r15	; 0x0b
    588e:	e2 86       	std	Z+10, r14	; 0x0a
		s->flags |= __SRD;
    5890:	81 e8       	ldi	r24, 0x81	; 129
    5892:	83 83       	std	Z+3, r24	; 0x03
		if (stdin == 0)
    5894:	80 91 3e 08 	lds	r24, 0x083E
    5898:	90 91 3f 08 	lds	r25, 0x083F
    589c:	89 2b       	or	r24, r25
    589e:	21 f4       	brne	.+8      	; 0x58a8 <fdevopen+0x52>
			stdin = s;
    58a0:	f0 93 3f 08 	sts	0x083F, r31
    58a4:	e0 93 3e 08 	sts	0x083E, r30
	}

	if (put != 0) {
    58a8:	01 15       	cp	r16, r1
    58aa:	11 05       	cpc	r17, r1
    58ac:	e1 f0       	breq	.+56     	; 0x58e6 <fdevopen+0x90>
		s->put = put;
    58ae:	11 87       	std	Z+9, r17	; 0x09
    58b0:	00 87       	std	Z+8, r16	; 0x08
		s->flags |= __SWR;
    58b2:	83 81       	ldd	r24, Z+3	; 0x03
    58b4:	82 60       	ori	r24, 0x02	; 2
    58b6:	83 83       	std	Z+3, r24	; 0x03
		if (stdout == 0) {
    58b8:	80 91 40 08 	lds	r24, 0x0840
    58bc:	90 91 41 08 	lds	r25, 0x0841
    58c0:	89 2b       	or	r24, r25
    58c2:	89 f4       	brne	.+34     	; 0x58e6 <fdevopen+0x90>
			stdout = s;
    58c4:	f0 93 41 08 	sts	0x0841, r31
    58c8:	e0 93 40 08 	sts	0x0840, r30
			if (stderr == 0)
    58cc:	80 91 42 08 	lds	r24, 0x0842
    58d0:	90 91 43 08 	lds	r25, 0x0843
    58d4:	89 2b       	or	r24, r25
    58d6:	39 f4       	brne	.+14     	; 0x58e6 <fdevopen+0x90>
				stderr = s;
    58d8:	f0 93 43 08 	sts	0x0843, r31
    58dc:	e0 93 42 08 	sts	0x0842, r30
    58e0:	02 c0       	rjmp	.+4      	; 0x58e6 <fdevopen+0x90>
    58e2:	a0 e0       	ldi	r26, 0x00	; 0
    58e4:	b0 e0       	ldi	r27, 0x00	; 0
		}
	}

	return s;
}
    58e6:	cd 01       	movw	r24, r26
    58e8:	e6 e0       	ldi	r30, 0x06	; 6
    58ea:	cd b7       	in	r28, 0x3d	; 61
    58ec:	de b7       	in	r29, 0x3e	; 62
    58ee:	0c 94 b9 2e 	jmp	0x5d72	; 0x5d72 <__epilogue_restores__+0x18>

000058f2 <fputc>:
#include <avr/interrupt.h>
#include <nrk_pin_define.h>
#include <nrk_error.h>
#include <nrk_events.h>

#ifdef NANORK
    58f2:	0f 93       	push	r16
    58f4:	1f 93       	push	r17
    58f6:	cf 93       	push	r28
    58f8:	df 93       	push	r29
    58fa:	8c 01       	movw	r16, r24
    58fc:	eb 01       	movw	r28, r22
#include <nrk_cfg.h>
#endif
    58fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5900:	99 27       	eor	r25, r25
    5902:	81 ff       	sbrs	r24, 1
    5904:	1b c0       	rjmp	.+54     	; 0x593c <fputc+0x4a>

#ifdef NRK_UART_BUF
#include <nrk_events.h>
    5906:	82 ff       	sbrs	r24, 2
    5908:	0d c0       	rjmp	.+26     	; 0x5924 <fputc+0x32>

    590a:	2e 81       	ldd	r18, Y+6	; 0x06
    590c:	3f 81       	ldd	r19, Y+7	; 0x07
    590e:	8c 81       	ldd	r24, Y+4	; 0x04
    5910:	9d 81       	ldd	r25, Y+5	; 0x05
    5912:	28 17       	cp	r18, r24
    5914:	39 07       	cpc	r19, r25
    5916:	64 f4       	brge	.+24     	; 0x5930 <fputc+0x3e>
#ifndef MAX_RX_UART_BUF
    5918:	e8 81       	ld	r30, Y
    591a:	f9 81       	ldd	r31, Y+1	; 0x01
    591c:	01 93       	st	Z+, r16
    591e:	f9 83       	std	Y+1, r31	; 0x01
    5920:	e8 83       	st	Y, r30
    5922:	06 c0       	rjmp	.+12     	; 0x5930 <fputc+0x3e>
#define MAX_RX_UART_BUF    16
#endif


    5924:	e8 85       	ldd	r30, Y+8	; 0x08
    5926:	f9 85       	ldd	r31, Y+9	; 0x09
    5928:	80 2f       	mov	r24, r16
    592a:	09 95       	icall
    592c:	89 2b       	or	r24, r25
    592e:	31 f4       	brne	.+12     	; 0x593c <fputc+0x4a>
uint8_t uart_rx_buf_start,uart_rx_buf_end;
    5930:	8e 81       	ldd	r24, Y+6	; 0x06
    5932:	9f 81       	ldd	r25, Y+7	; 0x07
    5934:	01 96       	adiw	r24, 0x01	; 1
    5936:	9f 83       	std	Y+7, r25	; 0x07
    5938:	8e 83       	std	Y+6, r24	; 0x06
    593a:	02 c0       	rjmp	.+4      	; 0x5940 <fputc+0x4e>
char uart_rx_buf[MAX_RX_UART_BUF];
    593c:	0f ef       	ldi	r16, 0xFF	; 255
    593e:	1f ef       	ldi	r17, 0xFF	; 255
nrk_sig_t uart_rx_signal;

SIGNAL(USART1_RX_vect)
{
    5940:	c8 01       	movw	r24, r16
    5942:	df 91       	pop	r29
    5944:	cf 91       	pop	r28
    5946:	1f 91       	pop	r17
    5948:	0f 91       	pop	r16
    594a:	08 95       	ret

0000594c <printf>:
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#include "stdio_private.h"

    594c:	a2 e0       	ldi	r26, 0x02	; 2
    594e:	b0 e0       	ldi	r27, 0x00	; 0
    5950:	ec ea       	ldi	r30, 0xAC	; 172
    5952:	fc e2       	ldi	r31, 0x2C	; 44
    5954:	0c 94 a1 2e 	jmp	0x5d42	; 0x5d42 <__prologue_saves__+0x20>
    5958:	fe 01       	movw	r30, r28
    595a:	37 96       	adiw	r30, 0x07	; 7
    595c:	61 91       	ld	r22, Z+
    595e:	71 91       	ld	r23, Z+
/** \file */

/** \ingroup avr_stdio
   This function is a replacement for \c fopen().
    5960:	fa 83       	std	Y+2, r31	; 0x02
    5962:	e9 83       	std	Y+1, r30	; 0x01

    5964:	af 01       	movw	r20, r30
    5966:	80 91 40 08 	lds	r24, 0x0840
    596a:	90 91 41 08 	lds	r25, 0x0841
    596e:	0e 94 f0 2a 	call	0x55e0	; 0x55e0 <vfprintf>
    5972:	e2 e0       	ldi	r30, 0x02	; 2
    5974:	22 96       	adiw	r28, 0x02	; 2
    5976:	0c 94 bd 2e 	jmp	0x5d7a	; 0x5d7a <__epilogue_restores__+0x20>

0000597a <__ultoa_invert>:
    597a:	fa 01       	movw	r30, r20
    597c:	aa 27       	eor	r26, r26
    597e:	28 30       	cpi	r18, 0x08	; 8
    5980:	51 f1       	breq	.+84     	; 0x59d6 <__ultoa_invert+0x5c>
    5982:	20 31       	cpi	r18, 0x10	; 16
    5984:	81 f1       	breq	.+96     	; 0x59e6 <__ultoa_invert+0x6c>
    5986:	e8 94       	clt
    5988:	6f 93       	push	r22
    598a:	6e 7f       	andi	r22, 0xFE	; 254
    598c:	6e 5f       	subi	r22, 0xFE	; 254
    598e:	7f 4f       	sbci	r23, 0xFF	; 255
    5990:	8f 4f       	sbci	r24, 0xFF	; 255
    5992:	9f 4f       	sbci	r25, 0xFF	; 255
    5994:	af 4f       	sbci	r26, 0xFF	; 255
    5996:	b1 e0       	ldi	r27, 0x01	; 1
    5998:	3e d0       	rcall	.+124    	; 0x5a16 <__ultoa_invert+0x9c>
    599a:	b4 e0       	ldi	r27, 0x04	; 4
    599c:	3c d0       	rcall	.+120    	; 0x5a16 <__ultoa_invert+0x9c>
    599e:	67 0f       	add	r22, r23
    59a0:	78 1f       	adc	r23, r24
    59a2:	89 1f       	adc	r24, r25
    59a4:	9a 1f       	adc	r25, r26
    59a6:	a1 1d       	adc	r26, r1
    59a8:	68 0f       	add	r22, r24
    59aa:	79 1f       	adc	r23, r25
    59ac:	8a 1f       	adc	r24, r26
    59ae:	91 1d       	adc	r25, r1
    59b0:	a1 1d       	adc	r26, r1
    59b2:	6a 0f       	add	r22, r26
    59b4:	71 1d       	adc	r23, r1
    59b6:	81 1d       	adc	r24, r1
    59b8:	91 1d       	adc	r25, r1
    59ba:	a1 1d       	adc	r26, r1
    59bc:	20 d0       	rcall	.+64     	; 0x59fe <__ultoa_invert+0x84>
    59be:	09 f4       	brne	.+2      	; 0x59c2 <__ultoa_invert+0x48>
    59c0:	68 94       	set
    59c2:	3f 91       	pop	r19
    59c4:	2a e0       	ldi	r18, 0x0A	; 10
    59c6:	26 9f       	mul	r18, r22
    59c8:	11 24       	eor	r1, r1
    59ca:	30 19       	sub	r19, r0
    59cc:	30 5d       	subi	r19, 0xD0	; 208
    59ce:	31 93       	st	Z+, r19
    59d0:	de f6       	brtc	.-74     	; 0x5988 <__ultoa_invert+0xe>
    59d2:	cf 01       	movw	r24, r30
    59d4:	08 95       	ret
    59d6:	46 2f       	mov	r20, r22
    59d8:	47 70       	andi	r20, 0x07	; 7
    59da:	40 5d       	subi	r20, 0xD0	; 208
    59dc:	41 93       	st	Z+, r20
    59de:	b3 e0       	ldi	r27, 0x03	; 3
    59e0:	0f d0       	rcall	.+30     	; 0x5a00 <__ultoa_invert+0x86>
    59e2:	c9 f7       	brne	.-14     	; 0x59d6 <__ultoa_invert+0x5c>
    59e4:	f6 cf       	rjmp	.-20     	; 0x59d2 <__ultoa_invert+0x58>
    59e6:	46 2f       	mov	r20, r22
    59e8:	4f 70       	andi	r20, 0x0F	; 15
    59ea:	40 5d       	subi	r20, 0xD0	; 208
    59ec:	4a 33       	cpi	r20, 0x3A	; 58
    59ee:	18 f0       	brcs	.+6      	; 0x59f6 <__ultoa_invert+0x7c>
    59f0:	49 5d       	subi	r20, 0xD9	; 217
    59f2:	31 fd       	sbrc	r19, 1
    59f4:	40 52       	subi	r20, 0x20	; 32
    59f6:	41 93       	st	Z+, r20
    59f8:	02 d0       	rcall	.+4      	; 0x59fe <__ultoa_invert+0x84>
    59fa:	a9 f7       	brne	.-22     	; 0x59e6 <__ultoa_invert+0x6c>
    59fc:	ea cf       	rjmp	.-44     	; 0x59d2 <__ultoa_invert+0x58>
    59fe:	b4 e0       	ldi	r27, 0x04	; 4
    5a00:	a6 95       	lsr	r26
    5a02:	97 95       	ror	r25
    5a04:	87 95       	ror	r24
    5a06:	77 95       	ror	r23
    5a08:	67 95       	ror	r22
    5a0a:	ba 95       	dec	r27
    5a0c:	c9 f7       	brne	.-14     	; 0x5a00 <__ultoa_invert+0x86>
    5a0e:	00 97       	sbiw	r24, 0x00	; 0
    5a10:	61 05       	cpc	r22, r1
    5a12:	71 05       	cpc	r23, r1
    5a14:	08 95       	ret
    5a16:	9b 01       	movw	r18, r22
    5a18:	ac 01       	movw	r20, r24
    5a1a:	0a 2e       	mov	r0, r26
    5a1c:	06 94       	lsr	r0
    5a1e:	57 95       	ror	r21
    5a20:	47 95       	ror	r20
    5a22:	37 95       	ror	r19
    5a24:	27 95       	ror	r18
    5a26:	ba 95       	dec	r27
    5a28:	c9 f7       	brne	.-14     	; 0x5a1c <__ultoa_invert+0xa2>
    5a2a:	62 0f       	add	r22, r18
    5a2c:	73 1f       	adc	r23, r19
    5a2e:	84 1f       	adc	r24, r20
    5a30:	95 1f       	adc	r25, r21
    5a32:	a0 1d       	adc	r26, r0
    5a34:	08 95       	ret

00005a36 <calloc>:
#include <avr/interrupt.h>
#include <nrk_pin_define.h>
#include <nrk_error.h>
#include <nrk_events.h>

#ifdef NANORK
    5a36:	0f 93       	push	r16
    5a38:	1f 93       	push	r17
    5a3a:	cf 93       	push	r28
    5a3c:	df 93       	push	r29
#include <nrk_cfg.h>
#endif

    5a3e:	68 9f       	mul	r22, r24
    5a40:	80 01       	movw	r16, r0
    5a42:	69 9f       	mul	r22, r25
    5a44:	10 0d       	add	r17, r0
    5a46:	78 9f       	mul	r23, r24
    5a48:	10 0d       	add	r17, r0
    5a4a:	11 24       	eor	r1, r1
    5a4c:	c8 01       	movw	r24, r16
    5a4e:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <malloc>
    5a52:	ec 01       	movw	r28, r24
    5a54:	00 97       	sbiw	r24, 0x00	; 0
    5a56:	29 f0       	breq	.+10     	; 0x5a62 <calloc+0x2c>
#ifdef NRK_UART_BUF
#include <nrk_events.h>
    5a58:	a8 01       	movw	r20, r16
    5a5a:	60 e0       	ldi	r22, 0x00	; 0
    5a5c:	70 e0       	ldi	r23, 0x00	; 0
    5a5e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <memset>

#ifndef MAX_RX_UART_BUF
    5a62:	ce 01       	movw	r24, r28
    5a64:	df 91       	pop	r29
    5a66:	cf 91       	pop	r28
    5a68:	1f 91       	pop	r17
    5a6a:	0f 91       	pop	r16
    5a6c:	08 95       	ret

00005a6e <malloc>:
   \c int type.  If an error occurs when trying to read from the
   device, it shall return \c _FDEV_ERR.
   If an end-of-file condition was reached while reading from the
   device, \c _FDEV_EOF shall be returned.

   If both functions are provided, the stream is opened with read
    5a6e:	cf 93       	push	r28
    5a70:	df 93       	push	r29
    5a72:	ac 01       	movw	r20, r24

   fdevopen() uses calloc() (und thus malloc()) in order to allocate
   the storage for the new stream.

   \note If the macro __STDIO_FDEVOPEN_COMPAT_12 is declared before
   including <stdio.h>, a function prototype for fdevopen() will be
    5a74:	02 97       	sbiw	r24, 0x02	; 2
    5a76:	10 f4       	brcc	.+4      	; 0x5a7c <malloc+0xe>
    5a78:	42 e0       	ldi	r20, 0x02	; 2
    5a7a:	50 e0       	ldi	r21, 0x00	; 0
*/

FILE *
fdevopen(int (*put)(char, FILE *), int (*get)(FILE *))
{
	FILE *s;
    5a7c:	a0 91 46 08 	lds	r26, 0x0846
    5a80:	b0 91 47 08 	lds	r27, 0x0847
    5a84:	fd 01       	movw	r30, r26
    5a86:	c0 e0       	ldi	r28, 0x00	; 0
    5a88:	d0 e0       	ldi	r29, 0x00	; 0
    5a8a:	20 e0       	ldi	r18, 0x00	; 0
    5a8c:	30 e0       	ldi	r19, 0x00	; 0
    5a8e:	20 c0       	rjmp	.+64     	; 0x5ad0 <malloc+0x62>

	if (put == 0 && get == 0)
		return 0;
    5a90:	80 81       	ld	r24, Z
    5a92:	91 81       	ldd	r25, Z+1	; 0x01
    5a94:	84 17       	cp	r24, r20
    5a96:	95 07       	cpc	r25, r21
    5a98:	69 f4       	brne	.+26     	; 0x5ab4 <malloc+0x46>
    5a9a:	82 81       	ldd	r24, Z+2	; 0x02
    5a9c:	93 81       	ldd	r25, Z+3	; 0x03

	if ((s = calloc(1, sizeof(FILE))) == 0)
		return 0;

	s->flags = __SMALLOC;
    5a9e:	20 97       	sbiw	r28, 0x00	; 0
    5aa0:	19 f0       	breq	.+6      	; 0x5aa8 <malloc+0x3a>

    5aa2:	9b 83       	std	Y+3, r25	; 0x03
    5aa4:	8a 83       	std	Y+2, r24	; 0x02
    5aa6:	04 c0       	rjmp	.+8      	; 0x5ab0 <malloc+0x42>
	if (get != 0) {
		s->get = get;
    5aa8:	90 93 47 08 	sts	0x0847, r25
    5aac:	80 93 46 08 	sts	0x0846, r24
		s->flags |= __SRD;
    5ab0:	9f 01       	movw	r18, r30
    5ab2:	32 c0       	rjmp	.+100    	; 0x5b18 <malloc+0xaa>
		if (stdin == 0)
			stdin = s;
    5ab4:	48 17       	cp	r20, r24
    5ab6:	59 07       	cpc	r21, r25
    5ab8:	38 f4       	brcc	.+14     	; 0x5ac8 <malloc+0x5a>
	}
    5aba:	21 15       	cp	r18, r1
    5abc:	31 05       	cpc	r19, r1
    5abe:	19 f0       	breq	.+6      	; 0x5ac6 <malloc+0x58>
    5ac0:	82 17       	cp	r24, r18
    5ac2:	93 07       	cpc	r25, r19
    5ac4:	08 f4       	brcc	.+2      	; 0x5ac8 <malloc+0x5a>
    5ac6:	9c 01       	movw	r18, r24
FILE *
fdevopen(int (*put)(char, FILE *), int (*get)(FILE *))
{
	FILE *s;

	if (put == 0 && get == 0)
    5ac8:	ef 01       	movw	r28, r30
    5aca:	02 80       	ldd	r0, Z+2	; 0x02
    5acc:	f3 81       	ldd	r31, Z+3	; 0x03
    5ace:	e0 2d       	mov	r30, r0

FILE *
fdevopen(int (*put)(char, FILE *), int (*get)(FILE *))
{
	FILE *s;

    5ad0:	30 97       	sbiw	r30, 0x00	; 0
    5ad2:	f1 f6       	brne	.-68     	; 0x5a90 <malloc+0x22>
		}
	}

	return s;
}
    5ad4:	21 15       	cp	r18, r1
    5ad6:	31 05       	cpc	r19, r1
    5ad8:	99 f1       	breq	.+102    	; 0x5b40 <malloc+0xd2>
    5ada:	c9 01       	movw	r24, r18
    5adc:	84 1b       	sub	r24, r20
    5ade:	95 0b       	sbc	r25, r21
    5ae0:	04 97       	sbiw	r24, 0x04	; 4
    5ae2:	08 f4       	brcc	.+2      	; 0x5ae6 <malloc+0x78>
    5ae4:	a9 01       	movw	r20, r18
    5ae6:	e0 e0       	ldi	r30, 0x00	; 0
    5ae8:	f0 e0       	ldi	r31, 0x00	; 0
    5aea:	28 c0       	rjmp	.+80     	; 0x5b3c <malloc+0xce>
    5aec:	8d 91       	ld	r24, X+
    5aee:	9c 91       	ld	r25, X
    5af0:	11 97       	sbiw	r26, 0x01	; 1
    5af2:	82 17       	cp	r24, r18
    5af4:	93 07       	cpc	r25, r19
    5af6:	f9 f4       	brne	.+62     	; 0x5b36 <malloc+0xc8>
    5af8:	48 17       	cp	r20, r24
    5afa:	59 07       	cpc	r21, r25
    5afc:	81 f4       	brne	.+32     	; 0x5b1e <malloc+0xb0>
    5afe:	ed 01       	movw	r28, r26
    5b00:	8a 81       	ldd	r24, Y+2	; 0x02
    5b02:	9b 81       	ldd	r25, Y+3	; 0x03
    5b04:	30 97       	sbiw	r30, 0x00	; 0
    5b06:	19 f0       	breq	.+6      	; 0x5b0e <malloc+0xa0>
    5b08:	93 83       	std	Z+3, r25	; 0x03
    5b0a:	82 83       	std	Z+2, r24	; 0x02
    5b0c:	04 c0       	rjmp	.+8      	; 0x5b16 <malloc+0xa8>
    5b0e:	90 93 47 08 	sts	0x0847, r25
    5b12:	80 93 46 08 	sts	0x0846, r24
    5b16:	9d 01       	movw	r18, r26
    5b18:	2e 5f       	subi	r18, 0xFE	; 254
    5b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    5b1c:	4c c0       	rjmp	.+152    	; 0x5bb6 <malloc+0x148>
    5b1e:	84 1b       	sub	r24, r20
    5b20:	95 0b       	sbc	r25, r21
    5b22:	fd 01       	movw	r30, r26
    5b24:	e8 0f       	add	r30, r24
    5b26:	f9 1f       	adc	r31, r25
    5b28:	41 93       	st	Z+, r20
    5b2a:	51 93       	st	Z+, r21
    5b2c:	02 97       	sbiw	r24, 0x02	; 2
    5b2e:	8d 93       	st	X+, r24
    5b30:	9c 93       	st	X, r25
    5b32:	9f 01       	movw	r18, r30
    5b34:	40 c0       	rjmp	.+128    	; 0x5bb6 <malloc+0x148>
    5b36:	fd 01       	movw	r30, r26
    5b38:	a2 81       	ldd	r26, Z+2	; 0x02
    5b3a:	b3 81       	ldd	r27, Z+3	; 0x03
}
    5b3c:	10 97       	sbiw	r26, 0x00	; 0
    5b3e:	b1 f6       	brne	.-84     	; 0x5aec <malloc+0x7e>
    5b40:	80 91 44 08 	lds	r24, 0x0844
    5b44:	90 91 45 08 	lds	r25, 0x0845
    5b48:	89 2b       	or	r24, r25
    5b4a:	41 f4       	brne	.+16     	; 0x5b5c <malloc+0xee>
    5b4c:	80 91 81 03 	lds	r24, 0x0381
    5b50:	90 91 82 03 	lds	r25, 0x0382
    5b54:	90 93 45 08 	sts	0x0845, r25
    5b58:	80 93 44 08 	sts	0x0844, r24
    5b5c:	20 91 83 03 	lds	r18, 0x0383
    5b60:	30 91 84 03 	lds	r19, 0x0384
    5b64:	21 15       	cp	r18, r1
    5b66:	31 05       	cpc	r19, r1
    5b68:	49 f4       	brne	.+18     	; 0x5b7c <malloc+0x10e>
    5b6a:	8d b7       	in	r24, 0x3d	; 61
    5b6c:	28 2f       	mov	r18, r24
    5b6e:	33 27       	eor	r19, r19
    5b70:	80 91 7f 03 	lds	r24, 0x037F
    5b74:	90 91 80 03 	lds	r25, 0x0380
    5b78:	28 1b       	sub	r18, r24
    5b7a:	39 0b       	sbc	r19, r25
    5b7c:	a0 91 44 08 	lds	r26, 0x0844
    5b80:	b0 91 45 08 	lds	r27, 0x0845
    5b84:	2a 1b       	sub	r18, r26
    5b86:	3b 0b       	sbc	r19, r27
    5b88:	24 17       	cp	r18, r20
    5b8a:	35 07       	cpc	r19, r21
    5b8c:	90 f0       	brcs	.+36     	; 0x5bb2 <malloc+0x144>
    5b8e:	ca 01       	movw	r24, r20
    5b90:	02 96       	adiw	r24, 0x02	; 2
    5b92:	28 17       	cp	r18, r24
    5b94:	39 07       	cpc	r19, r25
    5b96:	68 f0       	brcs	.+26     	; 0x5bb2 <malloc+0x144>
    5b98:	9d 01       	movw	r18, r26
    5b9a:	2e 5f       	subi	r18, 0xFE	; 254
    5b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    5b9e:	c9 01       	movw	r24, r18
    5ba0:	84 0f       	add	r24, r20
    5ba2:	95 1f       	adc	r25, r21
    5ba4:	90 93 45 08 	sts	0x0845, r25
    5ba8:	80 93 44 08 	sts	0x0844, r24
    5bac:	4d 93       	st	X+, r20
    5bae:	5c 93       	st	X, r21
    5bb0:	02 c0       	rjmp	.+4      	; 0x5bb6 <malloc+0x148>
    5bb2:	20 e0       	ldi	r18, 0x00	; 0
    5bb4:	30 e0       	ldi	r19, 0x00	; 0
    5bb6:	c9 01       	movw	r24, r18
    5bb8:	df 91       	pop	r29
    5bba:	cf 91       	pop	r28
    5bbc:	08 95       	ret

00005bbe <free>:
    5bbe:	cf 93       	push	r28
    5bc0:	df 93       	push	r29
    5bc2:	00 97       	sbiw	r24, 0x00	; 0
    5bc4:	09 f4       	brne	.+2      	; 0x5bc8 <free+0xa>
    5bc6:	4e c0       	rjmp	.+156    	; 0x5c64 <free+0xa6>
    5bc8:	ec 01       	movw	r28, r24
    5bca:	22 97       	sbiw	r28, 0x02	; 2
    5bcc:	1b 82       	std	Y+3, r1	; 0x03
    5bce:	1a 82       	std	Y+2, r1	; 0x02
    5bd0:	a0 91 46 08 	lds	r26, 0x0846
    5bd4:	b0 91 47 08 	lds	r27, 0x0847
    5bd8:	10 97       	sbiw	r26, 0x00	; 0
    5bda:	11 f1       	breq	.+68     	; 0x5c20 <free+0x62>
    5bdc:	40 e0       	ldi	r20, 0x00	; 0
    5bde:	50 e0       	ldi	r21, 0x00	; 0
    5be0:	01 c0       	rjmp	.+2      	; 0x5be4 <free+0x26>
    5be2:	dc 01       	movw	r26, r24
    5be4:	ac 17       	cp	r26, r28
    5be6:	bd 07       	cpc	r27, r29
    5be8:	00 f1       	brcs	.+64     	; 0x5c2a <free+0x6c>
    5bea:	bb 83       	std	Y+3, r27	; 0x03
    5bec:	aa 83       	std	Y+2, r26	; 0x02
    5bee:	fe 01       	movw	r30, r28
    5bf0:	21 91       	ld	r18, Z+
    5bf2:	31 91       	ld	r19, Z+
    5bf4:	e2 0f       	add	r30, r18
    5bf6:	f3 1f       	adc	r31, r19
    5bf8:	ea 17       	cp	r30, r26
    5bfa:	fb 07       	cpc	r31, r27
    5bfc:	71 f4       	brne	.+28     	; 0x5c1a <free+0x5c>
    5bfe:	8d 91       	ld	r24, X+
    5c00:	9c 91       	ld	r25, X
    5c02:	11 97       	sbiw	r26, 0x01	; 1
    5c04:	28 0f       	add	r18, r24
    5c06:	39 1f       	adc	r19, r25
    5c08:	2e 5f       	subi	r18, 0xFE	; 254
    5c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c0c:	39 83       	std	Y+1, r19	; 0x01
    5c0e:	28 83       	st	Y, r18
    5c10:	fd 01       	movw	r30, r26
    5c12:	82 81       	ldd	r24, Z+2	; 0x02
    5c14:	93 81       	ldd	r25, Z+3	; 0x03
    5c16:	9b 83       	std	Y+3, r25	; 0x03
    5c18:	8a 83       	std	Y+2, r24	; 0x02
    5c1a:	41 15       	cp	r20, r1
    5c1c:	51 05       	cpc	r21, r1
    5c1e:	59 f4       	brne	.+22     	; 0x5c36 <free+0x78>
    5c20:	d0 93 47 08 	sts	0x0847, r29
    5c24:	c0 93 46 08 	sts	0x0846, r28
    5c28:	1d c0       	rjmp	.+58     	; 0x5c64 <free+0xa6>
    5c2a:	fd 01       	movw	r30, r26
    5c2c:	82 81       	ldd	r24, Z+2	; 0x02
    5c2e:	93 81       	ldd	r25, Z+3	; 0x03
    5c30:	ad 01       	movw	r20, r26
    5c32:	00 97       	sbiw	r24, 0x00	; 0
    5c34:	b1 f6       	brne	.-84     	; 0x5be2 <free+0x24>
    5c36:	fa 01       	movw	r30, r20
    5c38:	d3 83       	std	Z+3, r29	; 0x03
    5c3a:	c2 83       	std	Z+2, r28	; 0x02
    5c3c:	21 91       	ld	r18, Z+
    5c3e:	31 91       	ld	r19, Z+
    5c40:	e2 0f       	add	r30, r18
    5c42:	f3 1f       	adc	r31, r19
    5c44:	ec 17       	cp	r30, r28
    5c46:	fd 07       	cpc	r31, r29
    5c48:	69 f4       	brne	.+26     	; 0x5c64 <free+0xa6>
    5c4a:	88 81       	ld	r24, Y
    5c4c:	99 81       	ldd	r25, Y+1	; 0x01
    5c4e:	28 0f       	add	r18, r24
    5c50:	39 1f       	adc	r19, r25
    5c52:	2e 5f       	subi	r18, 0xFE	; 254
    5c54:	3f 4f       	sbci	r19, 0xFF	; 255
    5c56:	fa 01       	movw	r30, r20
    5c58:	31 83       	std	Z+1, r19	; 0x01
    5c5a:	20 83       	st	Z, r18
    5c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    5c60:	93 83       	std	Z+3, r25	; 0x03
    5c62:	82 83       	std	Z+2, r24	; 0x02
    5c64:	df 91       	pop	r29
    5c66:	cf 91       	pop	r28
    5c68:	08 95       	ret

00005c6a <memset>:
    5c6a:	dc 01       	movw	r26, r24
    5c6c:	01 c0       	rjmp	.+2      	; 0x5c70 <memset+0x6>
    5c6e:	6d 93       	st	X+, r22
    5c70:	41 50       	subi	r20, 0x01	; 1
    5c72:	50 40       	sbci	r21, 0x00	; 0
    5c74:	e0 f7       	brcc	.-8      	; 0x5c6e <memset+0x4>
    5c76:	08 95       	ret

00005c78 <__mulsi3>:
    5c78:	62 9f       	mul	r22, r18
    5c7a:	d0 01       	movw	r26, r0
    5c7c:	73 9f       	mul	r23, r19
    5c7e:	f0 01       	movw	r30, r0
    5c80:	82 9f       	mul	r24, r18
    5c82:	e0 0d       	add	r30, r0
    5c84:	f1 1d       	adc	r31, r1
    5c86:	64 9f       	mul	r22, r20
    5c88:	e0 0d       	add	r30, r0
    5c8a:	f1 1d       	adc	r31, r1
    5c8c:	92 9f       	mul	r25, r18
    5c8e:	f0 0d       	add	r31, r0
    5c90:	83 9f       	mul	r24, r19
    5c92:	f0 0d       	add	r31, r0
    5c94:	74 9f       	mul	r23, r20
    5c96:	f0 0d       	add	r31, r0
    5c98:	65 9f       	mul	r22, r21
    5c9a:	f0 0d       	add	r31, r0
    5c9c:	99 27       	eor	r25, r25
    5c9e:	72 9f       	mul	r23, r18
    5ca0:	b0 0d       	add	r27, r0
    5ca2:	e1 1d       	adc	r30, r1
    5ca4:	f9 1f       	adc	r31, r25
    5ca6:	63 9f       	mul	r22, r19
    5ca8:	b0 0d       	add	r27, r0
    5caa:	e1 1d       	adc	r30, r1
    5cac:	f9 1f       	adc	r31, r25
    5cae:	bd 01       	movw	r22, r26
    5cb0:	cf 01       	movw	r24, r30
    5cb2:	11 24       	eor	r1, r1
    5cb4:	08 95       	ret

00005cb6 <__udivmodhi4>:
    5cb6:	aa 1b       	sub	r26, r26
    5cb8:	bb 1b       	sub	r27, r27
    5cba:	51 e1       	ldi	r21, 0x11	; 17
    5cbc:	07 c0       	rjmp	.+14     	; 0x5ccc <__udivmodhi4_ep>

00005cbe <__udivmodhi4_loop>:
    5cbe:	aa 1f       	adc	r26, r26
    5cc0:	bb 1f       	adc	r27, r27
    5cc2:	a6 17       	cp	r26, r22
    5cc4:	b7 07       	cpc	r27, r23
    5cc6:	10 f0       	brcs	.+4      	; 0x5ccc <__udivmodhi4_ep>
    5cc8:	a6 1b       	sub	r26, r22
    5cca:	b7 0b       	sbc	r27, r23

00005ccc <__udivmodhi4_ep>:
    5ccc:	88 1f       	adc	r24, r24
    5cce:	99 1f       	adc	r25, r25
    5cd0:	5a 95       	dec	r21
    5cd2:	a9 f7       	brne	.-22     	; 0x5cbe <__udivmodhi4_loop>
    5cd4:	80 95       	com	r24
    5cd6:	90 95       	com	r25
    5cd8:	bc 01       	movw	r22, r24
    5cda:	cd 01       	movw	r24, r26
    5cdc:	08 95       	ret

00005cde <__udivmodsi4>:
    5cde:	a1 e2       	ldi	r26, 0x21	; 33
    5ce0:	1a 2e       	mov	r1, r26
    5ce2:	aa 1b       	sub	r26, r26
    5ce4:	bb 1b       	sub	r27, r27
    5ce6:	fd 01       	movw	r30, r26
    5ce8:	0d c0       	rjmp	.+26     	; 0x5d04 <__udivmodsi4_ep>

00005cea <__udivmodsi4_loop>:
    5cea:	aa 1f       	adc	r26, r26
    5cec:	bb 1f       	adc	r27, r27
    5cee:	ee 1f       	adc	r30, r30
    5cf0:	ff 1f       	adc	r31, r31
    5cf2:	a2 17       	cp	r26, r18
    5cf4:	b3 07       	cpc	r27, r19
    5cf6:	e4 07       	cpc	r30, r20
    5cf8:	f5 07       	cpc	r31, r21
    5cfa:	20 f0       	brcs	.+8      	; 0x5d04 <__udivmodsi4_ep>
    5cfc:	a2 1b       	sub	r26, r18
    5cfe:	b3 0b       	sbc	r27, r19
    5d00:	e4 0b       	sbc	r30, r20
    5d02:	f5 0b       	sbc	r31, r21

00005d04 <__udivmodsi4_ep>:
    5d04:	66 1f       	adc	r22, r22
    5d06:	77 1f       	adc	r23, r23
    5d08:	88 1f       	adc	r24, r24
    5d0a:	99 1f       	adc	r25, r25
    5d0c:	1a 94       	dec	r1
    5d0e:	69 f7       	brne	.-38     	; 0x5cea <__udivmodsi4_loop>
    5d10:	60 95       	com	r22
    5d12:	70 95       	com	r23
    5d14:	80 95       	com	r24
    5d16:	90 95       	com	r25
    5d18:	9b 01       	movw	r18, r22
    5d1a:	ac 01       	movw	r20, r24
    5d1c:	bd 01       	movw	r22, r26
    5d1e:	cf 01       	movw	r24, r30
    5d20:	08 95       	ret

00005d22 <__prologue_saves__>:
    5d22:	2f 92       	push	r2
    5d24:	3f 92       	push	r3
    5d26:	4f 92       	push	r4
    5d28:	5f 92       	push	r5
    5d2a:	6f 92       	push	r6
    5d2c:	7f 92       	push	r7
    5d2e:	8f 92       	push	r8
    5d30:	9f 92       	push	r9
    5d32:	af 92       	push	r10
    5d34:	bf 92       	push	r11
    5d36:	cf 92       	push	r12
    5d38:	df 92       	push	r13
    5d3a:	ef 92       	push	r14
    5d3c:	ff 92       	push	r15
    5d3e:	0f 93       	push	r16
    5d40:	1f 93       	push	r17
    5d42:	cf 93       	push	r28
    5d44:	df 93       	push	r29
    5d46:	cd b7       	in	r28, 0x3d	; 61
    5d48:	de b7       	in	r29, 0x3e	; 62
    5d4a:	ca 1b       	sub	r28, r26
    5d4c:	db 0b       	sbc	r29, r27
    5d4e:	0f b6       	in	r0, 0x3f	; 63
    5d50:	f8 94       	cli
    5d52:	de bf       	out	0x3e, r29	; 62
    5d54:	0f be       	out	0x3f, r0	; 63
    5d56:	cd bf       	out	0x3d, r28	; 61
    5d58:	09 94       	ijmp

00005d5a <__epilogue_restores__>:
    5d5a:	2a 88       	ldd	r2, Y+18	; 0x12
    5d5c:	39 88       	ldd	r3, Y+17	; 0x11
    5d5e:	48 88       	ldd	r4, Y+16	; 0x10
    5d60:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d62:	6e 84       	ldd	r6, Y+14	; 0x0e
    5d64:	7d 84       	ldd	r7, Y+13	; 0x0d
    5d66:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d68:	9b 84       	ldd	r9, Y+11	; 0x0b
    5d6a:	aa 84       	ldd	r10, Y+10	; 0x0a
    5d6c:	b9 84       	ldd	r11, Y+9	; 0x09
    5d6e:	c8 84       	ldd	r12, Y+8	; 0x08
    5d70:	df 80       	ldd	r13, Y+7	; 0x07
    5d72:	ee 80       	ldd	r14, Y+6	; 0x06
    5d74:	fd 80       	ldd	r15, Y+5	; 0x05
    5d76:	0c 81       	ldd	r16, Y+4	; 0x04
    5d78:	1b 81       	ldd	r17, Y+3	; 0x03
    5d7a:	aa 81       	ldd	r26, Y+2	; 0x02
    5d7c:	b9 81       	ldd	r27, Y+1	; 0x01
    5d7e:	ce 0f       	add	r28, r30
    5d80:	d1 1d       	adc	r29, r1
    5d82:	0f b6       	in	r0, 0x3f	; 63
    5d84:	f8 94       	cli
    5d86:	de bf       	out	0x3e, r29	; 62
    5d88:	0f be       	out	0x3f, r0	; 63
    5d8a:	cd bf       	out	0x3d, r28	; 61
    5d8c:	ed 01       	movw	r28, r26
    5d8e:	08 95       	ret

00005d90 <__eeprom_read_byte_1F2021>:
    5d90:	f9 99       	sbic	0x1f, 1	; 31
    5d92:	fe cf       	rjmp	.-4      	; 0x5d90 <__eeprom_read_byte_1F2021>
    5d94:	b2 bd       	out	0x22, r27	; 34
    5d96:	a1 bd       	out	0x21, r26	; 33
    5d98:	f8 9a       	sbi	0x1f, 0	; 31
    5d9a:	11 96       	adiw	r26, 0x01	; 1
    5d9c:	00 b4       	in	r0, 0x20	; 32
    5d9e:	08 95       	ret

00005da0 <__eeprom_write_byte_1F2021>:
    5da0:	f9 99       	sbic	0x1f, 1	; 31
    5da2:	fe cf       	rjmp	.-4      	; 0x5da0 <__eeprom_write_byte_1F2021>
    5da4:	b2 bd       	out	0x22, r27	; 34
    5da6:	a1 bd       	out	0x21, r26	; 33
    5da8:	00 bc       	out	0x20, r0	; 32
    5daa:	11 96       	adiw	r26, 0x01	; 1
    5dac:	0f b6       	in	r0, 0x3f	; 63
    5dae:	f8 94       	cli
    5db0:	fa 9a       	sbi	0x1f, 2	; 31
    5db2:	f9 9a       	sbi	0x1f, 1	; 31
    5db4:	0f be       	out	0x3f, r0	; 63
    5db6:	08 95       	ret

00005db8 <_exit>:
    5db8:	ff cf       	rjmp	.-2      	; 0x5db8 <_exit>
