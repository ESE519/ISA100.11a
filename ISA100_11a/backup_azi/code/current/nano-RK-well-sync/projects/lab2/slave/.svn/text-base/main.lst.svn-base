   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 144               	.global	nrk_register_drivers
 146               	nrk_register_drivers:
 147               		.stabd	46,0,0
   1:main.c        **** #include <nrk.h>
   2:main.c        **** #include <include.h>
   3:main.c        **** #include <ulib.h>
   4:main.c        **** #include <stdio.h>
   5:main.c        **** #include <avr/sleep.h>
   6:main.c        **** #include <hal.h>
   7:main.c        **** #include <rt_link.h>
   8:main.c        **** #include <nrk_error.h>
   9:main.c        **** #include <nrk_events.h>
  10:main.c        **** #include <nrk_driver.h>
  11:main.c        **** #include <nrk_driver_list.h>
  12:main.c        **** #include <ff_basic_sensor.h>
  13:main.c        **** #include  <math.h>
  14:main.c        **** 
  15:main.c        **** 
  16:main.c        **** #define MY_CHANNEL 13 
  17:main.c        **** #define MOLE_ID 4
  18:main.c        **** #define LIGHT_DIFF 20 // Determined experimentally
  19:main.c        **** 
  20:main.c        **** 
  21:main.c        **** 
  22:main.c        **** #define MASTER_TX_SLOT  0
  23:main.c        **** 
  24:main.c        **** #define MY_TX_SLOT ((MOLE_ID*2)+2)
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  28:main.c        **** nrk_task_type TaskOne;
  29:main.c        **** void Task1(void);
  30:main.c        **** 
  31:main.c        **** 
  32:main.c        **** void nrk_create_taskset();
  33:main.c        **** 
  34:main.c        **** uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
  35:main.c        **** uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
  36:main.c        **** 
  37:main.c        **** nrk_time_t timestart;
  38:main.c        **** nrk_time_t timeend;
  39:main.c        **** nrk_time_t newtime;
  40:main.c        **** nrk_time_t timeout;
  41:main.c        **** 
  42:main.c        **** 
  43:main.c        **** int
  44:main.c        **** main ()
  45:main.c        **** {
  46:main.c        **** 
  47:main.c        ****   nrk_setup_ports();
  48:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  49:main.c        ****   
  50:main.c        **** 
  51:main.c        ****   nrk_kprintf( PSTR("Starting up...\r\n") );
  52:main.c        **** 
  53:main.c        **** 	
  54:main.c        ****   nrk_init();
  55:main.c        **** 
  56:main.c        ****   nrk_led_clr(0);
  57:main.c        ****   nrk_led_clr(1);
  58:main.c        ****   nrk_led_clr(2);
  59:main.c        ****   nrk_led_clr(3);
  60:main.c        ****   
  61:main.c        ****   nrk_time_set(0,0);
  62:main.c        **** 
  63:main.c        ****   
  64:main.c        ****   nrk_register_drivers();
  65:main.c        ****   rtl_task_config();
  66:main.c        ****   nrk_create_taskset ();
  67:main.c        **** 
  68:main.c        ****   nrk_start();
  69:main.c        ****   
  70:main.c        ****   return 0;
  71:main.c        **** }
  72:main.c        **** 
  73:main.c        **** void Task1()
  74:main.c        **** {
  75:main.c        ****   uint8_t j, i;
  76:main.c        ****   uint8_t rssi, slot,length, mole_id;
  77:main.c        ****   uint8_t *local_rx_buf;
  78:main.c        ****   uint8_t fd,val;
  79:main.c        ****   uint16_t light = 0;
  80:main.c        ****   uint16_t light_avg = 0;
  81:main.c        ****   uint8_t whacked = 0;
  82:main.c        **** 
  83:main.c        ****   printf( "Task1 PID=%d\r\n",nrk_get_pid());
  84:main.c        ****   printf( "Node ID=%d\r\n",MOLE_ID);
  85:main.c        **** 
  86:main.c        ****   nrk_led_set(GREEN_LED); 
  87:main.c        **** 
  88:main.c        ****   rtl_init (RTL_MOBILE);
  89:main.c        ****   rtl_set_channel(MY_CHANNEL);
  90:main.c        ****   
  91:main.c        ****   rtl_set_schedule( RTL_RX, MASTER_TX_SLOT, 1 );
  92:main.c        ****   rtl_set_schedule( RTL_TX, MY_TX_SLOT, 1 );
  93:main.c        ****   
  94:main.c        ****   rtl_start();
  95:main.c        ****  
  96:main.c        ****   rtl_rx_pkt_set_buffer(rx_buf, RF_MAX_PAYLOAD_SIZE);
  97:main.c        ****  
  98:main.c        ****   while(!rtl_ready())  nrk_wait_until_next_period(); 
  99:main.c        ****   fd=nrk_open(FIREFLY_SENSOR_BASIC,READ);
 100:main.c        ****   if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
 101:main.c        **** 
 102:main.c        ****   nrk_time_get(&timeout);
 103:main.c        ****   nrk_time_get(&timeend);
 104:main.c        **** 
 105:main.c        ****   val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
 106:main.c        ****   
 107:main.c        ****   // Get current lighting
 108:main.c        ****   for(i=0;i<5;i++){
 109:main.c        **** 	nrk_read(fd,&light,2);
 110:main.c        **** 	light_avg += light;
 111:main.c        ****   }
 112:main.c        ****   
 113:main.c        ****   /*nrk_read(fd,&light,2);
 114:main.c        ****   light_avg += light;
 115:main.c        ****   nrk_read(fd,&light,2);
 116:main.c        ****   light_avg += light;
 117:main.c        ****   nrk_read(fd,&light,2);
 118:main.c        ****   light_avg += light;
 119:main.c        ****   nrk_read(fd,&light,2);
 120:main.c        ****   light_avg += light;
 121:main.c        ****   nrk_read(fd,&light,2);
 122:main.c        ****   light_avg += light;*/
 123:main.c        ****   
 124:main.c        ****   light_avg /= 5;
 125:main.c        ****   
 126:main.c        ****   //printf( "Light value = %d\r\n", light);
 127:main.c        **** 	while(1) {
 128:main.c        **** 		if( rtl_tx_pkt_check(MY_TX_SLOT)!=0 ) {
 129:main.c        **** 			nrk_led_clr(RED_LED);
 130:main.c        **** 			printf( "Pending on slot %d\r\n",MY_TX_SLOT );
 131:main.c        **** 		} else {
 132:main.c        **** 			//read sensor output to see whether mole is whacked, and print reading
 133:main.c        **** 			nrk_read(fd,&light,2);
 134:main.c        **** 			printf( "Light value = %d\r\n", light);
 135:main.c        **** 			
 136:main.c        **** 			// if light closed or mole whacked, then transmit '1' - indicates the master to change the mole
 137:main.c        **** 			// If the light darkens by a pre-set difference, count as a whack
 138:main.c        **** 			if (light_avg+LIGHT_DIFF < light || whacked == 1) {
 139:main.c        **** 				sprintf(&tx_buf[PKT_DATA_START],"MOLE_ID=%d LIGHT=1", MOLE_ID);
 140:main.c        **** 			} else {
 141:main.c        **** 				sprintf(&tx_buf[PKT_DATA_START],"MOLE_ID=%d LIGHT=0", MOLE_ID);
 142:main.c        **** 				// Update average
 143:main.c        **** 				/*light_avg = 0;
 144:main.c        **** 				for(i=0;i<5;i++){
 145:main.c        **** 					nrk_read(fd,&light,2);
 146:main.c        **** 					light_avg += light;
 147:main.c        ****   				}
 148:main.c        **** 				light_avg /= 5;*/
 149:main.c        **** 				light_avg *= 5;
 150:main.c        **** 				light_avg += light;
 151:main.c        **** 				light_avg /= 6;				
 152:main.c        **** 				//light_avg >>= 1;
 153:main.c        **** 				//light_avg &= 0xffff;
 154:main.c        **** 			}
 155:main.c        **** 			
 156:main.c        **** 			// Transmit
 157:main.c        **** 			length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+1;
 158:main.c        **** 			rtl_tx_pkt( tx_buf, length, MY_TX_SLOT);
 159:main.c        **** 			printf( "\nTX on slot %d\r\n",MY_TX_SLOT);
 160:main.c        **** 			for(i=PKT_DATA_START;i<length;i++)
 161:main.c        **** 				printf("%c",tx_buf[i]);
 162:main.c        **** 			nrk_led_toggle(BLUE_LED);
 163:main.c        **** 		}
 164:main.c        **** 	 
 165:main.c        **** 		if( rtl_rx_pkt_check()!=0 ) {
 166:main.c        **** 			local_rx_buf=rtl_rx_pkt_get(&length, &rssi, &slot);
 167:main.c        **** 			printf( "RX on slot %d %d: ",slot,length );
 168:main.c        **** 			  
 169:main.c        **** 			for(i=PKT_DATA_START; i<length; i++ )
 170:main.c        **** 				printf( "%c",local_rx_buf[i] );
 171:main.c        **** 
 172:main.c        **** 			// buffer position 37 stores the next mole id from the master
 173:main.c        **** 			// if that is equal to MYMOLEID then turn on the led
 174:main.c        **** 			if((local_rx_buf[37]-48) == MOLE_ID) {
 175:main.c        **** 				if (light_avg + LIGHT_DIFF < light || whacked == 1) {
 176:main.c        **** 					whacked = 1;
 177:main.c        **** 					nrk_led_clr(RED_LED);
 178:main.c        **** 				} else {
 179:main.c        **** 					nrk_led_set(RED_LED);
 180:main.c        **** 				}
 181:main.c        **** 			} else {
 182:main.c        **** 				whacked = 0;
 183:main.c        **** 				nrk_led_clr(RED_LED);
 184:main.c        **** 			}
 185:main.c        **** 			
 186:main.c        **** 			//printf(" rounds value  %d ", local_rx_buf[51]-48);
 187:main.c        **** 			//printf("\n NEW: %c",local_rx_buf[37]);
 188:main.c        **** 			//nrk_kprintf( PSTR("\r\n") );
 189:main.c        **** 			rtl_rx_pkt_release();
 190:main.c        **** 		}
 191:main.c        **** 
 192:main.c        **** 		//	if((local_rx_buf[51]-48)>=9)
 193:main.c        **** 		//	  nrk_led_clr(RED_LED);
 194:main.c        **** 		  
 195:main.c        **** 		rtl_wait_until_rx_pkt();
 196:main.c        **** 		
 197:main.c        **** 	}
 198:main.c        **** }
 199:main.c        **** 
 200:main.c        **** void
 201:main.c        **** nrk_create_taskset()
 202:main.c        **** {
 203:main.c        **** 
 204:main.c        **** 
 205:main.c        ****   TaskOne.task = Task1;
 206:main.c        ****   TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE-1];
 207:main.c        ****   TaskOne.Pbos = (void *) &Stack1[0];
 208:main.c        ****   TaskOne.prio = 2;
 209:main.c        ****   TaskOne.FirstActivation = TRUE;
 210:main.c        ****   TaskOne.Type = BASIC_TASK;
 211:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 212:main.c        ****   TaskOne.period.secs = 1;
 213:main.c        ****   TaskOne.period.nano_secs = 0;
 214:main.c        ****   TaskOne.cpu_reserve.secs = 0;
 215:main.c        ****   TaskOne.cpu_reserve.nano_secs = 0;
 216:main.c        ****   TaskOne.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 217:main.c        ****   TaskOne.offset.secs = 0;
 218:main.c        ****   TaskOne.offset.nano_secs= 0;
 219:main.c        ****   nrk_activate_task (&TaskOne);
 220:main.c        **** 
 221:main.c        **** 
 222:main.c        ****   nrk_kprintf( PSTR("Create Done\r\n") );
 223:main.c        **** }
 224:main.c        **** 
 225:main.c        **** 
 226:main.c        **** void nrk_register_drivers()
 227:main.c        **** {
 149               	.LM0:
 150               	.LFBB1:
 151               	/* prologue: frame size=0 */
 152               	/* prologue end (size=0) */
 228:main.c        **** int8_t val;
 229:main.c        **** 
 230:main.c        **** // Register the Basic FireFly Sensor device driver
 231:main.c        **** // Make sure to add: 
 232:main.c        **** //	 #define NRK_MAX_DRIVER_CNT  
 233:main.c        **** //	 in nrk_cfg.h
 234:main.c        **** // Make sure to add: 
 235:main.c        **** //	 SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
 236:main.c        **** //	 in makefile
 237:main.c        **** val=nrk_register_driver( &dev_manager_ff_sensors,FIREFLY_SENSOR_BASIC);
 154               	.LM1:
 155 0000 61E0      		ldi r22,lo8(1)
 156 0002 80E0      		ldi r24,lo8(pm(dev_manager_ff_sensors))
 157 0004 90E0      		ldi r25,hi8(pm(dev_manager_ff_sensors))
 158 0006 0E94 0000 		call nrk_register_driver
 238:main.c        **** if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
 160               	.LM2:
 161 000a 8F3F      		cpi r24,lo8(-1)
 162 000c 01F4      		brne .L4
 164               	.LM3:
 165 000e 80E0      		ldi r24,lo8(__c.2601)
 166 0010 90E0      		ldi r25,hi8(__c.2601)
 167 0012 0E94 0000 		call nrk_kprintf
 168               	.L4:
 169 0016 0895      		ret
 170               	/* epilogue: frame size=0 */
 171               	/* epilogue: noreturn */
 172               	/* epilogue end (size=0) */
 173               	/* function nrk_register_drivers size 12 (12) */
 175               	.Lscope1:
 177               		.stabd	78,0,0
 179               	.global	nrk_create_taskset
 181               	nrk_create_taskset:
 182               		.stabd	46,0,0
 184               	.LM4:
 185               	.LFBB2:
 186               	/* prologue: frame size=0 */
 187               	/* prologue end (size=0) */
 189               	.LM5:
 190 0018 80E0      		ldi r24,lo8(pm(Task1))
 191 001a 90E0      		ldi r25,hi8(pm(Task1))
 192 001c 9093 0000 		sts (TaskOne+5)+1,r25
 193 0020 8093 0000 		sts TaskOne+5,r24
 195               	.LM6:
 196 0024 80E0      		ldi r24,lo8(Stack1+511)
 197 0026 90E0      		ldi r25,hi8(Stack1+511)
 198 0028 9093 0000 		sts (TaskOne+1)+1,r25
 199 002c 8093 0000 		sts TaskOne+1,r24
 201               	.LM7:
 202 0030 80E0      		ldi r24,lo8(Stack1)
 203 0032 90E0      		ldi r25,hi8(Stack1)
 204 0034 9093 0000 		sts (TaskOne+3)+1,r25
 205 0038 8093 0000 		sts TaskOne+3,r24
 207               	.LM8:
 208 003c 82E0      		ldi r24,lo8(2)
 209 003e 8093 0000 		sts TaskOne+8,r24
 211               	.LM9:
 212 0042 81E0      		ldi r24,lo8(1)
 213 0044 8093 0000 		sts TaskOne+7,r24
 215               	.LM10:
 216 0048 8093 0000 		sts TaskOne+9,r24
 218               	.LM11:
 219 004c 8093 0000 		sts TaskOne+10,r24
 221               	.LM12:
 222 0050 81E0      		ldi r24,lo8(1)
 223 0052 90E0      		ldi r25,hi8(1)
 224 0054 A0E0      		ldi r26,hlo8(1)
 225 0056 B0E0      		ldi r27,hhi8(1)
 226 0058 8093 0000 		sts TaskOne+11,r24
 227 005c 9093 0000 		sts (TaskOne+11)+1,r25
 228 0060 A093 0000 		sts (TaskOne+11)+2,r26
 229 0064 B093 0000 		sts (TaskOne+11)+3,r27
 231               	.LM13:
 232 0068 1092 0000 		sts TaskOne+15,__zero_reg__
 233 006c 1092 0000 		sts (TaskOne+15)+1,__zero_reg__
 234 0070 1092 0000 		sts (TaskOne+15)+2,__zero_reg__
 235 0074 1092 0000 		sts (TaskOne+15)+3,__zero_reg__
 237               	.LM14:
 238 0078 1092 0000 		sts TaskOne+19,__zero_reg__
 239 007c 1092 0000 		sts (TaskOne+19)+1,__zero_reg__
 240 0080 1092 0000 		sts (TaskOne+19)+2,__zero_reg__
 241 0084 1092 0000 		sts (TaskOne+19)+3,__zero_reg__
 243               	.LM15:
 244 0088 80E0      		ldi r24,lo8(100000000)
 245 008a 91EE      		ldi r25,hi8(100000000)
 246 008c A5EF      		ldi r26,hlo8(100000000)
 247 008e B5E0      		ldi r27,hhi8(100000000)
 248 0090 8093 0000 		sts TaskOne+23,r24
 249 0094 9093 0000 		sts (TaskOne+23)+1,r25
 250 0098 A093 0000 		sts (TaskOne+23)+2,r26
 251 009c B093 0000 		sts (TaskOne+23)+3,r27
 253               	.LM16:
 254 00a0 1092 0000 		sts TaskOne+27,__zero_reg__
 255 00a4 1092 0000 		sts (TaskOne+27)+1,__zero_reg__
 256 00a8 1092 0000 		sts (TaskOne+27)+2,__zero_reg__
 257 00ac 1092 0000 		sts (TaskOne+27)+3,__zero_reg__
 259               	.LM17:
 260 00b0 1092 0000 		sts TaskOne+31,__zero_reg__
 261 00b4 1092 0000 		sts (TaskOne+31)+1,__zero_reg__
 262 00b8 1092 0000 		sts (TaskOne+31)+2,__zero_reg__
 263 00bc 1092 0000 		sts (TaskOne+31)+3,__zero_reg__
 265               	.LM18:
 266 00c0 80E0      		ldi r24,lo8(TaskOne)
 267 00c2 90E0      		ldi r25,hi8(TaskOne)
 268 00c4 0E94 0000 		call nrk_activate_task
 270               	.LM19:
 271 00c8 80E0      		ldi r24,lo8(__c.2595)
 272 00ca 90E0      		ldi r25,hi8(__c.2595)
 273 00cc 0E94 0000 		call nrk_kprintf
 274               	/* epilogue: frame size=0 */
 275 00d0 0895      		ret
 276               	/* epilogue end (size=1) */
 277               	/* function nrk_create_taskset size 93 (92) */
 279               	.Lscope2:
 281               		.stabd	78,0,0
 282               		.data
 283               	.LC0:
 284 0000 5461 736B 		.string	"Task1 PID=%d\r\n"
 284      3120 5049 
 284      443D 2564 
 284      0D0A 00
 285               	.LC1:
 286 000f 4E6F 6465 		.string	"Node ID=%d\r\n"
 286      2049 443D 
 286      2564 0D0A 
 286      00
 287               	.LC2:
 288 001c 5065 6E64 		.string	"Pending on slot %d\r\n"
 288      696E 6720 
 288      6F6E 2073 
 288      6C6F 7420 
 288      2564 0D0A 
 289               	.LC3:
 290 0031 4C69 6768 		.string	"Light value = %d\r\n"
 290      7420 7661 
 290      6C75 6520 
 290      3D20 2564 
 290      0D0A 00
 291               	.LC4:
 292 0044 4D4F 4C45 		.string	"MOLE_ID=%d LIGHT=1"
 292      5F49 443D 
 292      2564 204C 
 292      4947 4854 
 292      3D31 00
 293               	.LC5:
 294 0057 4D4F 4C45 		.string	"MOLE_ID=%d LIGHT=0"
 294      5F49 443D 
 294      2564 204C 
 294      4947 4854 
 294      3D30 00
 295               	.LC6:
 296 006a 0A54 5820 		.string	"\nTX on slot %d\r\n"
 296      6F6E 2073 
 296      6C6F 7420 
 296      2564 0D0A 
 296      00
 297               	.LC7:
 298 007b 5258 206F 		.string	"RX on slot %d %d: "
 298      6E20 736C 
 298      6F74 2025 
 298      6420 2564 
 298      3A20 00
 299               		.text
 301               	.global	Task1
 303               	Task1:
 304               		.stabd	46,0,0
 306               	.LM20:
 307               	.LFBB3:
 308               	/* prologue: frame size=5 */
 309 00d2 2F92      		push r2
 310 00d4 3F92      		push r3
 311 00d6 4F92      		push r4
 312 00d8 5F92      		push r5
 313 00da 6F92      		push r6
 314 00dc 7F92      		push r7
 315 00de 9F92      		push r9
 316 00e0 AF92      		push r10
 317 00e2 BF92      		push r11
 318 00e4 CF92      		push r12
 319 00e6 DF92      		push r13
 320 00e8 EF92      		push r14
 321 00ea FF92      		push r15
 322 00ec 0F93      		push r16
 323 00ee 1F93      		push r17
 324 00f0 CF93      		push r28
 325 00f2 DF93      		push r29
 326 00f4 CDB7      		in r28,__SP_L__
 327 00f6 DEB7      		in r29,__SP_H__
 328 00f8 2597      		sbiw r28,5
 329 00fa 0FB6      		in __tmp_reg__,__SREG__
 330 00fc F894      		cli
 331 00fe DEBF      		out __SP_H__,r29
 332 0100 0FBE      		out __SREG__,__tmp_reg__
 333 0102 CDBF      		out __SP_L__,r28
 334               	/* prologue end (size=25) */
 336               	.LM21:
 337 0104 1D82      		std Y+5,__zero_reg__
 338 0106 1C82      		std Y+4,__zero_reg__
 340               	.LM22:
 341 0108 0E94 0000 		call nrk_get_pid
 342 010c 9927      		clr r25
 343 010e 9F93      		push r25
 344 0110 8F93      		push r24
 345 0112 80E0      		ldi r24,lo8(.LC0)
 346 0114 90E0      		ldi r25,hi8(.LC0)
 347 0116 9F93      		push r25
 348 0118 8F93      		push r24
 349 011a 0E94 0000 		call printf
 351               	.LM23:
 352 011e 84E0      		ldi r24,lo8(4)
 353 0120 90E0      		ldi r25,hi8(4)
 354 0122 9F93      		push r25
 355 0124 8F93      		push r24
 356 0126 80E0      		ldi r24,lo8(.LC1)
 357 0128 90E0      		ldi r25,hi8(.LC1)
 358 012a 9F93      		push r25
 359 012c 8F93      		push r24
 360 012e 0E94 0000 		call printf
 362               	.LM24:
 363 0132 82E0      		ldi r24,lo8(2)
 364 0134 90E0      		ldi r25,hi8(2)
 365 0136 0E94 0000 		call nrk_led_set
 367               	.LM25:
 368 013a 80E0      		ldi r24,lo8(0)
 369 013c 0E94 0000 		call rtl_init
 371               	.LM26:
 372 0140 8DE0      		ldi r24,lo8(13)
 373 0142 0E94 0000 		call rtl_set_channel
 375               	.LM27:
 376 0146 41E0      		ldi r20,lo8(1)
 377 0148 60E0      		ldi r22,lo8(0)
 378 014a 80E0      		ldi r24,lo8(0)
 379 014c 0E94 0000 		call rtl_set_schedule
 381               	.LM28:
 382 0150 41E0      		ldi r20,lo8(1)
 383 0152 6AE0      		ldi r22,lo8(10)
 384 0154 81E0      		ldi r24,lo8(1)
 385 0156 0E94 0000 		call rtl_set_schedule
 387               	.LM29:
 388 015a 0E94 0000 		call rtl_start
 390               	.LM30:
 391 015e 64E7      		ldi r22,lo8(116)
 392 0160 80E0      		ldi r24,lo8(rx_buf)
 393 0162 90E0      		ldi r25,hi8(rx_buf)
 394 0164 0E94 0000 		call rtl_rx_pkt_set_buffer
 396               	.LM31:
 397 0168 8DB7      		in r24,__SP_L__
 398 016a 9EB7      		in r25,__SP_H__
 399 016c 0896      		adiw r24,8
 400 016e 0FB6      		in __tmp_reg__,__SREG__
 401 0170 F894      		cli
 402 0172 9EBF      		out __SP_H__,r25
 403 0174 0FBE      		out __SREG__,__tmp_reg__
 404 0176 8DBF      		out __SP_L__,r24
 405 0178 00C0      		rjmp .L8
 406               	.L9:
 408               	.LM32:
 409 017a 0E94 0000 		call nrk_wait_until_next_period
 410               	.L8:
 411 017e 0E94 0000 		call rtl_ready
 412 0182 8823      		tst r24
 413 0184 01F0      		breq .L9
 415               	.LM33:
 416 0186 65E0      		ldi r22,lo8(5)
 417 0188 81E0      		ldi r24,lo8(1)
 418 018a 0E94 0000 		call nrk_open
 419 018e 982E      		mov r9,r24
 421               	.LM34:
 422 0190 80E0      		ldi r24,lo8(timeout)
 423 0192 90E0      		ldi r25,hi8(timeout)
 424 0194 0E94 0000 		call nrk_time_get
 426               	.LM35:
 427 0198 80E0      		ldi r24,lo8(timeend)
 428 019a 90E0      		ldi r25,hi8(timeend)
 429 019c 0E94 0000 		call nrk_time_get
 431               	.LM36:
 432 01a0 41E0      		ldi r20,lo8(1)
 433 01a2 61E0      		ldi r22,lo8(1)
 434 01a4 892D      		mov r24,r9
 435 01a6 0E94 0000 		call nrk_set_status
 436 01aa FF24      		clr r15
 437 01ac 00E0      		ldi r16,lo8(0)
 438 01ae 10E0      		ldi r17,hi8(0)
 440               	.LM37:
 441 01b0 64E0      		ldi r22,lo8(4)
 442 01b2 C62E      		mov r12,r22
 443 01b4 D12C      		mov r13,__zero_reg__
 444 01b6 CC0E      		add r12,r28
 445 01b8 DD1E      		adc r13,r29
 446               	.L11:
 447 01ba 3601      		movw r6,r12
 448 01bc 42E0      		ldi r20,lo8(2)
 449 01be B601      		movw r22,r12
 450 01c0 892D      		mov r24,r9
 451 01c2 0E94 0000 		call nrk_read
 453               	.LM38:
 454 01c6 8C81      		ldd r24,Y+4
 455 01c8 9D81      		ldd r25,Y+5
 456 01ca 080F      		add r16,r24
 457 01cc 191F      		adc r17,r25
 459               	.LM39:
 460 01ce F394      		inc r15
 461 01d0 95E0      		ldi r25,lo8(5)
 462 01d2 F916      		cp r15,r25
 463 01d4 01F4      		brne .L11
 465               	.LM40:
 466 01d6 C801      		movw r24,r16
 467 01d8 65E0      		ldi r22,lo8(5)
 468 01da 70E0      		ldi r23,hi8(5)
 469 01dc 0E94 0000 		call __udivmodhi4
 470 01e0 6B01      		movw r12,r22
 471 01e2 00E0      		ldi r16,lo8(0)
 473               	.LM41:
 474 01e4 50E0      		ldi r21,lo8(tx_buf+3)
 475 01e6 A52E      		mov r10,r21
 476 01e8 50E0      		ldi r21,hi8(tx_buf+3)
 477 01ea B52E      		mov r11,r21
 479               	.LM42:
 480 01ec 43E0      		ldi r20,lo8(3)
 481 01ee 242E      		mov r2,r20
 482 01f0 312C      		mov r3,__zero_reg__
 483 01f2 2C0E      		add r2,r28
 484 01f4 3D1E      		adc r3,r29
 486               	.LM43:
 487 01f6 30E0      		ldi r19,lo8(.LC7)
 488 01f8 432E      		mov r4,r19
 489 01fa 30E0      		ldi r19,hi8(.LC7)
 490 01fc 532E      		mov r5,r19
 491               	.L13:
 493               	.LM44:
 494 01fe 8AE0      		ldi r24,lo8(10)
 495 0200 0E94 0000 		call rtl_tx_pkt_check
 496 0204 8823      		tst r24
 497 0206 01F0      		breq .L14
 499               	.LM45:
 500 0208 83E0      		ldi r24,lo8(3)
 501 020a 90E0      		ldi r25,hi8(3)
 502 020c 0E94 0000 		call nrk_led_clr
 504               	.LM46:
 505 0210 8AE0      		ldi r24,lo8(10)
 506 0212 90E0      		ldi r25,hi8(10)
 507 0214 9F93      		push r25
 508 0216 8F93      		push r24
 509 0218 E0E0      		ldi r30,lo8(.LC2)
 510 021a F0E0      		ldi r31,hi8(.LC2)
 511 021c FF93      		push r31
 512 021e EF93      		push r30
 513 0220 0E94 0000 		call printf
 514 0224 0F90      		pop __tmp_reg__
 515 0226 0F90      		pop __tmp_reg__
 516 0228 0F90      		pop __tmp_reg__
 517 022a 0F90      		pop __tmp_reg__
 518 022c 00C0      		rjmp .L16
 519               	.L14:
 521               	.LM47:
 522 022e 42E0      		ldi r20,lo8(2)
 523 0230 B301      		movw r22,r6
 524 0232 892D      		mov r24,r9
 525 0234 0E94 0000 		call nrk_read
 527               	.LM48:
 528 0238 8C81      		ldd r24,Y+4
 529 023a 9D81      		ldd r25,Y+5
 530 023c 9F93      		push r25
 531 023e 8F93      		push r24
 532 0240 80E0      		ldi r24,lo8(.LC3)
 533 0242 90E0      		ldi r25,hi8(.LC3)
 534 0244 9F93      		push r25
 535 0246 8F93      		push r24
 536 0248 0E94 0000 		call printf
 538               	.LM49:
 539 024c 9601      		movw r18,r12
 540 024e 2C5E      		subi r18,lo8(-(20))
 541 0250 3F4F      		sbci r19,hi8(-(20))
 542 0252 0F90      		pop __tmp_reg__
 543 0254 0F90      		pop __tmp_reg__
 544 0256 0F90      		pop __tmp_reg__
 545 0258 0F90      		pop __tmp_reg__
 546 025a 8C81      		ldd r24,Y+4
 547 025c 9D81      		ldd r25,Y+5
 548 025e 2817      		cp r18,r24
 549 0260 3907      		cpc r19,r25
 550 0262 00F0      		brlo .L17
 551 0264 0130      		cpi r16,lo8(1)
 552 0266 01F4      		brne .L19
 553               	.L17:
 555               	.LM50:
 556 0268 84E0      		ldi r24,lo8(4)
 557 026a 90E0      		ldi r25,hi8(4)
 558 026c 9F93      		push r25
 559 026e 8F93      		push r24
 560 0270 E0E0      		ldi r30,lo8(.LC4)
 561 0272 F0E0      		ldi r31,hi8(.LC4)
 562 0274 FF93      		push r31
 563 0276 EF93      		push r30
 564 0278 BF92      		push r11
 565 027a AF92      		push r10
 566 027c 0E94 0000 		call sprintf
 567 0280 00C0      		rjmp .L38
 568               	.L19:
 570               	.LM51:
 571 0282 84E0      		ldi r24,lo8(4)
 572 0284 90E0      		ldi r25,hi8(4)
 573 0286 9F93      		push r25
 574 0288 8F93      		push r24
 575 028a E0E0      		ldi r30,lo8(.LC5)
 576 028c F0E0      		ldi r31,hi8(.LC5)
 577 028e FF93      		push r31
 578 0290 EF93      		push r30
 579 0292 BF92      		push r11
 580 0294 AF92      		push r10
 581 0296 0E94 0000 		call sprintf
 583               	.LM52:
 584 029a C601      		movw r24,r12
 585 029c 880F      		lsl r24
 586 029e 991F      		rol r25
 587 02a0 880F      		lsl r24
 588 02a2 991F      		rol r25
 589 02a4 8C0D      		add r24,r12
 590 02a6 9D1D      		adc r25,r13
 592               	.LM53:
 593 02a8 2C81      		ldd r18,Y+4
 594 02aa 3D81      		ldd r19,Y+5
 596               	.LM54:
 597 02ac 820F      		add r24,r18
 598 02ae 931F      		adc r25,r19
 599 02b0 66E0      		ldi r22,lo8(6)
 600 02b2 70E0      		ldi r23,hi8(6)
 601 02b4 0E94 0000 		call __udivmodhi4
 602 02b8 6B01      		movw r12,r22
 603               	.L38:
 604 02ba 8DB7      		in r24,__SP_L__
 605 02bc 9EB7      		in r25,__SP_H__
 606 02be 0696      		adiw r24,6
 607 02c0 0FB6      		in __tmp_reg__,__SREG__
 608 02c2 F894      		cli
 609 02c4 9EBF      		out __SP_H__,r25
 610 02c6 0FBE      		out __SREG__,__tmp_reg__
 611 02c8 8DBF      		out __SP_L__,r24
 613               	.LM55:
 614 02ca F501      		movw r30,r10
 615 02cc 0190      		ld __tmp_reg__,Z+
 616 02ce 0020      		tst __tmp_reg__
 617 02d0 01F4      		brne .-6
 618 02d2 E050      		subi r30,lo8(tx_buf+4)
 619 02d4 F040      		sbci r31,hi8(tx_buf+4)
 620 02d6 EC5F      		subi r30,lo8(-(4))
 621 02d8 EB83      		std Y+3,r30
 623               	.LM56:
 624 02da 4AE0      		ldi r20,lo8(10)
 625 02dc 6E2F      		mov r22,r30
 626 02de 80E0      		ldi r24,lo8(tx_buf)
 627 02e0 90E0      		ldi r25,hi8(tx_buf)
 628 02e2 0E94 0000 		call rtl_tx_pkt
 630               	.LM57:
 631 02e6 8AE0      		ldi r24,lo8(10)
 632 02e8 90E0      		ldi r25,hi8(10)
 633 02ea 9F93      		push r25
 634 02ec 8F93      		push r24
 635 02ee E0E0      		ldi r30,lo8(.LC6)
 636 02f0 F0E0      		ldi r31,hi8(.LC6)
 637 02f2 FF93      		push r31
 638 02f4 EF93      		push r30
 639 02f6 0E94 0000 		call printf
 640 02fa 13E0      		ldi r17,lo8(3)
 642               	.LM58:
 643 02fc 0F90      		pop __tmp_reg__
 644 02fe 0F90      		pop __tmp_reg__
 645 0300 0F90      		pop __tmp_reg__
 646 0302 0F90      		pop __tmp_reg__
 647 0304 00C0      		rjmp .L21
 648               	.L22:
 650               	.LM59:
 651 0306 E12F      		mov r30,r17
 652 0308 FF27      		clr r31
 653 030a E050      		subi r30,lo8(-(tx_buf))
 654 030c F040      		sbci r31,hi8(-(tx_buf))
 655 030e 8081      		ld r24,Z
 656 0310 9927      		clr r25
 657 0312 0E94 0000 		call putchar
 659               	.LM60:
 660 0316 1F5F      		subi r17,lo8(-(1))
 661               	.L21:
 662 0318 8B81      		ldd r24,Y+3
 663 031a 1817      		cp r17,r24
 664 031c 00F0      		brlo .L22
 666               	.LM61:
 667 031e 81E0      		ldi r24,lo8(1)
 668 0320 90E0      		ldi r25,hi8(1)
 669 0322 0E94 0000 		call nrk_led_toggle
 670               	.L16:
 672               	.LM62:
 673 0326 0E94 0000 		call rtl_rx_pkt_check
 674 032a 8823      		tst r24
 675 032c 01F4      		brne .+2
 676 032e 00C0      		rjmp .L24
 678               	.LM63:
 679 0330 AE01      		movw r20,r28
 680 0332 4E5F      		subi r20,lo8(-(2))
 681 0334 5F4F      		sbci r21,hi8(-(2))
 682 0336 BE01      		movw r22,r28
 683 0338 6F5F      		subi r22,lo8(-(1))
 684 033a 7F4F      		sbci r23,hi8(-(1))
 685 033c C101      		movw r24,r2
 686 033e 0E94 0000 		call rtl_rx_pkt_get
 687 0342 7C01      		movw r14,r24
 689               	.LM64:
 690 0344 8B81      		ldd r24,Y+3
 691 0346 9927      		clr r25
 692 0348 9F93      		push r25
 693 034a 8F93      		push r24
 694 034c 8A81      		ldd r24,Y+2
 695 034e 9927      		clr r25
 696 0350 9F93      		push r25
 697 0352 8F93      		push r24
 698 0354 5F92      		push r5
 699 0356 4F92      		push r4
 700 0358 0E94 0000 		call printf
 701 035c 13E0      		ldi r17,lo8(3)
 703               	.LM65:
 704 035e 8DB7      		in r24,__SP_L__
 705 0360 9EB7      		in r25,__SP_H__
 706 0362 0696      		adiw r24,6
 707 0364 0FB6      		in __tmp_reg__,__SREG__
 708 0366 F894      		cli
 709 0368 9EBF      		out __SP_H__,r25
 710 036a 0FBE      		out __SREG__,__tmp_reg__
 711 036c 8DBF      		out __SP_L__,r24
 712 036e 00C0      		rjmp .L26
 713               	.L27:
 715               	.LM66:
 716 0370 F701      		movw r30,r14
 717 0372 E10F      		add r30,r17
 718 0374 F11D      		adc r31,__zero_reg__
 719 0376 8081      		ld r24,Z
 720 0378 9927      		clr r25
 721 037a 0E94 0000 		call putchar
 723               	.LM67:
 724 037e 1F5F      		subi r17,lo8(-(1))
 725               	.L26:
 726 0380 8B81      		ldd r24,Y+3
 727 0382 1817      		cp r17,r24
 728 0384 00F0      		brlo .L27
 730               	.LM68:
 731 0386 F701      		movw r30,r14
 732 0388 85A1      		ldd r24,Z+37
 733 038a 8433      		cpi r24,lo8(52)
 734 038c 01F4      		brne .L29
 736               	.LM69:
 737 038e 9601      		movw r18,r12
 738 0390 2C5E      		subi r18,lo8(-(20))
 739 0392 3F4F      		sbci r19,hi8(-(20))
 740 0394 8C81      		ldd r24,Y+4
 741 0396 9D81      		ldd r25,Y+5
 742 0398 2817      		cp r18,r24
 743 039a 3907      		cpc r19,r25
 744 039c 00F0      		brlo .L31
 745 039e 0130      		cpi r16,lo8(1)
 746 03a0 01F4      		brne .L33
 747               	.L31:
 749               	.LM70:
 750 03a2 83E0      		ldi r24,lo8(3)
 751 03a4 90E0      		ldi r25,hi8(3)
 752 03a6 0E94 0000 		call nrk_led_clr
 753 03aa 01E0      		ldi r16,lo8(1)
 754 03ac 00C0      		rjmp .L34
 755               	.L33:
 757               	.LM71:
 758 03ae 83E0      		ldi r24,lo8(3)
 759 03b0 90E0      		ldi r25,hi8(3)
 760 03b2 0E94 0000 		call nrk_led_set
 761 03b6 00C0      		rjmp .L34
 762               	.L29:
 764               	.LM72:
 765 03b8 83E0      		ldi r24,lo8(3)
 766 03ba 90E0      		ldi r25,hi8(3)
 767 03bc 0E94 0000 		call nrk_led_clr
 768 03c0 00E0      		ldi r16,lo8(0)
 769               	.L34:
 771               	.LM73:
 772 03c2 0E94 0000 		call rtl_rx_pkt_release
 773               	.L24:
 775               	.LM74:
 776 03c6 0E94 0000 		call rtl_wait_until_rx_pkt
 777 03ca 00C0      		rjmp .L13
 778               	/* epilogue: frame size=5 */
 779               	/* epilogue: noreturn */
 780               	/* epilogue end (size=0) */
 781               	/* function Task1 size 381 (356) */
 794               	.Lscope3:
 796               		.stabd	78,0,0
 798               	.global	main
 800               	main:
 801               		.stabd	46,0,0
 803               	.LM75:
 804               	.LFBB4:
 805               	/* prologue: frame size=0 */
 806 03cc C0E0      		ldi r28,lo8(__stack - 0)
 807 03ce D0E0      		ldi r29,hi8(__stack - 0)
 808 03d0 DEBF      		out __SP_H__,r29
 809 03d2 CDBF      		out __SP_L__,r28
 810               	/* prologue end (size=4) */
 812               	.LM76:
 813 03d4 0E94 0000 		call nrk_setup_ports
 815               	.LM77:
 816 03d8 87E0      		ldi r24,lo8(7)
 817 03da 90E0      		ldi r25,hi8(7)
 818 03dc 0E94 0000 		call nrk_setup_uart
 820               	.LM78:
 821 03e0 80E0      		ldi r24,lo8(__c.2522)
 822 03e2 90E0      		ldi r25,hi8(__c.2522)
 823 03e4 0E94 0000 		call nrk_kprintf
 825               	.LM79:
 826 03e8 0E94 0000 		call nrk_init
 828               	.LM80:
 829 03ec 80E0      		ldi r24,lo8(0)
 830 03ee 90E0      		ldi r25,hi8(0)
 831 03f0 0E94 0000 		call nrk_led_clr
 833               	.LM81:
 834 03f4 81E0      		ldi r24,lo8(1)
 835 03f6 90E0      		ldi r25,hi8(1)
 836 03f8 0E94 0000 		call nrk_led_clr
 838               	.LM82:
 839 03fc 82E0      		ldi r24,lo8(2)
 840 03fe 90E0      		ldi r25,hi8(2)
 841 0400 0E94 0000 		call nrk_led_clr
 843               	.LM83:
 844 0404 83E0      		ldi r24,lo8(3)
 845 0406 90E0      		ldi r25,hi8(3)
 846 0408 0E94 0000 		call nrk_led_clr
 848               	.LM84:
 849 040c 20E0      		ldi r18,lo8(0)
 850 040e 30E0      		ldi r19,hi8(0)
 851 0410 40E0      		ldi r20,hlo8(0)
 852 0412 50E0      		ldi r21,hhi8(0)
 853 0414 60E0      		ldi r22,lo8(0)
 854 0416 70E0      		ldi r23,hi8(0)
 855 0418 80E0      		ldi r24,hlo8(0)
 856 041a 90E0      		ldi r25,hhi8(0)
 857 041c 0E94 0000 		call nrk_time_set
 859               	.LM85:
 860 0420 0E94 0000 		call nrk_register_drivers
 862               	.LM86:
 863 0424 0E94 0000 		call rtl_task_config
 865               	.LM87:
 866 0428 0E94 0000 		call nrk_create_taskset
 868               	.LM88:
 869 042c 0E94 0000 		call nrk_start
 871               	.LM89:
 872 0430 80E0      		ldi r24,lo8(0)
 873 0432 90E0      		ldi r25,hi8(0)
 874               	/* epilogue: frame size=0 */
 875 0434 0C94 0000 		jmp exit
 876               	/* epilogue end (size=2) */
 877               	/* function main size 54 (48) */
 879               	.Lscope4:
 881               		.stabd	78,0,0
 882               		.section	.progmem.data,"a",@progbits
 885               	__c.2601:
 886 0000 4661 696C 		.string	"Failed to load my ADC driver\r\n"
 886      6564 2074 
 886      6F20 6C6F 
 886      6164 206D 
 886      7920 4144 
 889               	__c.2595:
 890 001f 4372 6561 		.string	"Create Done\r\n"
 890      7465 2044 
 890      6F6E 650D 
 890      0A00 
 893               	__c.2522:
 894 002d 5374 6172 		.string	"Starting up...\r\n"
 894      7469 6E67 
 894      2075 702E 
 894      2E2E 0D0A 
 894      00
 895               		.comm _nrk_signal_list,4,1
 896               		.comm nrk_idle_task_stk,128,1
 897               		.comm nrk_kernel_stk_ptr,2,1
 898               		.comm rtl_task,35,1
 899               		.comm rtl_task_stack,128,1
 900               		.comm rtl_node_mode,1,1
 901               		.comm last_slot,2,1
 902               		.comm last_slot_time,8,1
 903               		.comm _rtl_sync_ok,1,1
 904               		.comm _rtl_ready,1,1
 905               		.comm _rtl_time_token,1,1
 906               		.comm _rtl_time_token_status,1,1
 907               		.comm rtl_tsync_tx,7,1
 908               		.comm rtl_tsync_buf,3,1
 909               		.comm _rtl_contention_pending,1,1
 910               		.comm _rtl_contention_slots,1,1
 911               		.comm rtl_rfRxInfo,9,1
 912               		.comm rtl_rx_data_ready,1,1
 913               		.comm rtl_rx_slot,1,1
 914               		.comm rtl_rx_buf,116,1
 915               		.comm rtl_rfTxInfo,7,1
 916               		.comm rtl_tx_info,99,1
 917               		.comm rtl_abs_tx_slot,2,1
 918               		.comm rtl_abs_tx_ready,1,1
 919               		.comm rtl_tx_data_ready,4,1
 920               		.comm rtl_param,9,1
 921               		.comm rtl_tdma_rx_mask,4,1
 922               		.comm rtl_tdma_tx_mask,4,1
 923               		.comm rx_callback,2,1
 924               		.comm tx_callback,2,1
 925               		.comm abs_callback,2,1
 926               		.comm slot_callback,2,1
 927               		.comm cycle_callback,2,1
 928               		.comm error_task,1,1
 929               		.comm error_num,1,1
 930               		.comm Stack1,512,1
 931               		.comm TaskOne,35,1
 932               		.comm tx_buf,116,1
 933               		.comm rx_buf,116,1
 934               		.comm timestart,8,1
 935               		.comm timeend,8,1
 936               		.comm newtime,8,1
 937               		.comm timeout,8,1
 984               		.text
 986               	.Letext0:
 987               	/* File "main.c": code  540 = 0x021c ( 508), prologues  29, epilogues   3 */
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccbtFjWE.s:2      *ABS*:0000003f __SREG__
     /tmp/ccbtFjWE.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccbtFjWE.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccbtFjWE.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccbtFjWE.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccbtFjWE.s:146    .text:00000000 nrk_register_drivers
     /tmp/ccbtFjWE.s:885    .progmem.data:00000000 __c.2601
     /tmp/ccbtFjWE.s:181    .text:00000018 nrk_create_taskset
     /tmp/ccbtFjWE.s:303    .text:000000d2 Task1
                            *COM*:00000023 TaskOne
                            *COM*:00000200 Stack1
     /tmp/ccbtFjWE.s:889    .progmem.data:0000001f __c.2595
                            *COM*:00000074 rx_buf
                            *COM*:00000008 timeout
                            *COM*:00000008 timeend
                            *COM*:00000074 tx_buf
     /tmp/ccbtFjWE.s:800    .text:000003cc main
     /tmp/ccbtFjWE.s:893    .progmem.data:0000002d __c.2522
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000023 rtl_task
                            *COM*:00000080 rtl_task_stack
                            *COM*:00000001 rtl_node_mode
                            *COM*:00000002 last_slot
                            *COM*:00000008 last_slot_time
                            *COM*:00000001 _rtl_sync_ok
                            *COM*:00000001 _rtl_ready
                            *COM*:00000001 _rtl_time_token
                            *COM*:00000001 _rtl_time_token_status
                            *COM*:00000007 rtl_tsync_tx
                            *COM*:00000003 rtl_tsync_buf
                            *COM*:00000001 _rtl_contention_pending
                            *COM*:00000001 _rtl_contention_slots
                            *COM*:00000009 rtl_rfRxInfo
                            *COM*:00000001 rtl_rx_data_ready
                            *COM*:00000001 rtl_rx_slot
                            *COM*:00000074 rtl_rx_buf
                            *COM*:00000007 rtl_rfTxInfo
                            *COM*:00000063 rtl_tx_info
                            *COM*:00000002 rtl_abs_tx_slot
                            *COM*:00000001 rtl_abs_tx_ready
                            *COM*:00000004 rtl_tx_data_ready
                            *COM*:00000009 rtl_param
                            *COM*:00000004 rtl_tdma_rx_mask
                            *COM*:00000004 rtl_tdma_tx_mask
                            *COM*:00000002 rx_callback
                            *COM*:00000002 tx_callback
                            *COM*:00000002 abs_callback
                            *COM*:00000002 slot_callback
                            *COM*:00000002 cycle_callback
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000008 timestart
                            *COM*:00000008 newtime

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
dev_manager_ff_sensors
nrk_register_driver
nrk_kprintf
nrk_activate_task
nrk_get_pid
printf
nrk_led_set
rtl_init
rtl_set_channel
rtl_set_schedule
rtl_start
rtl_rx_pkt_set_buffer
nrk_wait_until_next_period
rtl_ready
nrk_open
nrk_time_get
nrk_set_status
nrk_read
__udivmodhi4
rtl_tx_pkt_check
nrk_led_clr
sprintf
rtl_tx_pkt
putchar
nrk_led_toggle
rtl_rx_pkt_check
rtl_rx_pkt_get
rtl_rx_pkt_release
rtl_wait_until_rx_pkt
__stack
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
rtl_task_config
nrk_start
exit
