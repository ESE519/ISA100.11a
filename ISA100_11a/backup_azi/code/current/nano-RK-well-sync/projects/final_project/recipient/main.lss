
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800200  0000758a  000075fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000758a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007a0  008002d2  0000765c  000076d0  2**0
                  ALLOC
  3 .stab         000118b0  00000000  00000000  000076d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007183  00000000  00000000  00018f80  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 37 02 	jmp	0x46e	; 0x46e <__ctors_end>
       4:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <__vector_1>
       8:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
       c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      10:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      14:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      18:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      1c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      20:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      24:	0c 94 f8 34 	jmp	0x69f0	; 0x69f0 <__vector_9>
      28:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      2c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      30:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      34:	0c 94 ab 32 	jmp	0x6556	; 0x6556 <__vector_13>
      38:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      3c:	0c 94 ab 32 	jmp	0x6556	; 0x6556 <__vector_13>
      40:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      44:	0c 94 de 32 	jmp	0x65bc	; 0x65bc <__vector_17>
      48:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      4c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      50:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      54:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      58:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      5c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      60:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      64:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      68:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      6c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      70:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      74:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      78:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      7c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      80:	0c 94 e8 32 	jmp	0x65d0	; 0x65d0 <__vector_32>
      84:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      88:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      8c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      90:	0c 94 a4 20 	jmp	0x4148	; 0x4148 <__vector_36>
      94:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      98:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      9c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      a0:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      a4:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      a8:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      ac:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      b0:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      b4:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      b8:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      bc:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      c0:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      c4:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      c8:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      cc:	02 24       	eor	r0, r2
      ce:	08 24       	eor	r0, r8
      d0:	0b 24       	eor	r0, r11
      d2:	0e 24       	eor	r0, r14
      d4:	11 24       	eor	r1, r1
      d6:	14 24       	eor	r1, r4
      d8:	1a 24       	eor	r1, r10
      da:	17 24       	eor	r1, r7
      dc:	1d 24       	eor	r1, r13
      de:	20 24       	eor	r2, r0
      e0:	23 24       	eor	r2, r3
      e2:	29 24       	eor	r2, r9
      e4:	2c 24       	eor	r2, r12
      e6:	2f 24       	eor	r2, r15
      e8:	32 24       	eor	r3, r2
      ea:	26 24       	eor	r2, r6
      ec:	ff 23       	and	r31, r31
      ee:	05 24       	eor	r0, r5

000000f0 <__c.2458>:
      f0:	43 72 65 61 74 65 20 44 6f 6e 65 0d 0a 00           Create Done...

000000fe <__c.2402>:
      fe:	45 52 52 4f 52 3a 20 63 72 65 61 74 69 6e 67 20     ERROR: creating 
     10e:	70 61 63 6b 65 74 20 72 65 63 6f 72 64 20 73 69     packet record si
     11e:	67 6e 61 6c 20 66 61 69 6c 65 64 0d 0a 00           gnal failed...

0000012c <__c.2388>:
     12c:	53 74 61 72 74 69 6e 67 20 75 70 2e 2e 2e 0d 0a     Starting up.....
	...

0000013d <__c.2642>:
     13d:	49 53 41 20 45 52 52 4f 52 3a 20 63 72 65 61 74     ISA ERROR: creat
     14d:	69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66 61     ing tx signal fa
     15d:	69 6c 65 64 0d 0a 00                                iled...

00000164 <__c.2640>:
     164:	49 53 41 20 45 52 52 4f 52 3a 20 63 72 65 61 74     ISA ERROR: creat
     174:	69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66 61     ing rx signal fa
     184:	69 6c 65 64 0d 0a 00                                iled...

0000018b <__c.2340>:
     18b:	53 4c 49 50 20 52 58 20 65 72 72 6f 72 3a 20 6e     SLIP RX error: n
     19b:	72 6b 5f 73 69 67 6e 61 6c 5f 72 65 67 69 73 74     rk_signal_regist
     1ab:	65 72 0d 0a 00                                      er...

000001b0 <__c.2338>:
     1b0:	53 4c 49 50 20 52 58 20 65 72 72 6f 72 3a 20 47     SLIP RX error: G
     1c0:	65 74 20 53 69 67 6e 61 6c 0d 0a 00                 et Signal...

000001cc <__c.2309>:
     1cc:	53 4c 49 50 20 54 58 20 45 52 52 4f 52 3a 20 20     SLIP TX ERROR:  
     1dc:	52 65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70     Release of semap
     1ec:	68 6f 72 65 20 66 61 69 6c 65 64 0d 0a 00           hore failed...

000001fa <__c.2304>:
     1fa:	53 4c 49 50 20 54 58 20 45 52 52 4f 52 3a 20 20     SLIP TX ERROR:  
     20a:	41 63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68     Access to semaph
     21a:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

00000227 <__c.2736>:
     227:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 52     CC2420 ERROR:  R
     237:	65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70 68     elease of semaph
     247:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

00000254 <__c.2674>:
     254:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 41     CC2420 ERROR:  A
     264:	63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68 6f     ccess to semapho
     274:	72 65 20 66 61 69 6c 65 64 0d 0a 00                 re failed...

00000280 <__c.2384>:
     280:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000287 <__c.2381>:
     287:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     297:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000002a2 <__c.2378>:
     2a2:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2b2:	20 53 69 67 6e 61 6c 00                              Signal.

000002ba <__c.2375>:
     2ba:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     2ca:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

000002da <__c.2372>:
     2da:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     2ea:	72 6f 72 00                                         ror.

000002ee <__c.2369>:
     2ee:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

000002ff <__c.2366>:
     2ff:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000030e <__c.2363>:
     30e:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     31e:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000329 <__c.2360>:
     329:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000335 <__c.2357>:
     335:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     345:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     355:	20 6f 6b 3f 00                                       ok?.

0000035a <__c.2354>:
     35a:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     36a:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

00000378 <__c.2351>:
     378:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     388:	72 74 00                                            rt.

0000038b <__c.2348>:
     38b:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     39b:	49 44 00                                            ID.

0000039e <__c.2345>:
     39e:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     3ae:	20 57 61 6b 65 75 70 00                              Wakeup.

000003b6 <__c.2342>:
     3b6:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     3c6:	6c 61 74 65 64 00                                   lated.

000003cc <__c.2339>:
     3cc:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     3dc:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

000003e7 <__c.2336>:
     3e7:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     3f7:	69 6e 74 65 72 00                                   inter.

000003fd <__c.2333>:
     3fd:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     40d:	6c 6f 77 00                                         low.

00000411 <__c.2329>:
     411:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     421:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     431:	6e 6f 75 67 68 21 00                                nough!.

00000438 <__c.2326>:
     438:	29 3a 20 00                                         ): .

0000043c <__c.2324>:
     43c:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000448 <__c.2257>:
     448:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000457 <__c.2047>:
     457:	45 46 47 65 66 67 00                                EFGefg.

0000045e <__c.2041>:
     45e:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000046e <__ctors_end>:
     46e:	11 24       	eor	r1, r1
     470:	1f be       	out	0x3f, r1	; 63
     472:	cf ef       	ldi	r28, 0xFF	; 255
     474:	d1 e2       	ldi	r29, 0x21	; 33
     476:	de bf       	out	0x3e, r29	; 62
     478:	cd bf       	out	0x3d, r28	; 61

0000047a <__do_copy_data>:
     47a:	12 e0       	ldi	r17, 0x02	; 2
     47c:	a0 e0       	ldi	r26, 0x00	; 0
     47e:	b2 e0       	ldi	r27, 0x02	; 2
     480:	ea e8       	ldi	r30, 0x8A	; 138
     482:	f5 e7       	ldi	r31, 0x75	; 117
     484:	00 e0       	ldi	r16, 0x00	; 0
     486:	0b bf       	out	0x3b, r16	; 59
     488:	02 c0       	rjmp	.+4      	; 0x48e <__do_copy_data+0x14>
     48a:	07 90       	elpm	r0, Z+
     48c:	0d 92       	st	X+, r0
     48e:	a2 3d       	cpi	r26, 0xD2	; 210
     490:	b1 07       	cpc	r27, r17
     492:	d9 f7       	brne	.-10     	; 0x48a <__do_copy_data+0x10>

00000494 <__do_clear_bss>:
     494:	1a e0       	ldi	r17, 0x0A	; 10
     496:	a2 ed       	ldi	r26, 0xD2	; 210
     498:	b2 e0       	ldi	r27, 0x02	; 2
     49a:	01 c0       	rjmp	.+2      	; 0x49e <.do_clear_bss_start>

0000049c <.do_clear_bss_loop>:
     49c:	1d 92       	st	X+, r1

0000049e <.do_clear_bss_start>:
     49e:	a2 37       	cpi	r26, 0x72	; 114
     4a0:	b1 07       	cpc	r27, r17
     4a2:	e1 f7       	brne	.-8      	; 0x49c <.do_clear_bss_loop>
     4a4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <main>
     4a8:	0c 94 c4 3a 	jmp	0x7588	; 0x7588 <_exit>

000004ac <__bad_interrupt>:
     4ac:	0c 94 16 33 	jmp	0x662c	; 0x662c <__vector_default>

000004b0 <pkt_record_check>:
int8_t pkt_record_done_signal;



int8_t pkt_record_check()
{
     4b0:	80 91 d7 04 	lds	r24, 0x04D7
  return sendFlag;
}
     4b4:	99 27       	eor	r25, r25
     4b6:	87 fd       	sbrc	r24, 7
     4b8:	90 95       	com	r25
     4ba:	08 95       	ret

000004bc <packet_measurement_better>:

  nrk_kprintf( PSTR("Create Done\r\n") );
}

void packet_measurement_better(uint8_t * local_rx_buf)
{
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	ec 01       	movw	r28, r24
	uint8_t i,length;
	uint8_t next_pkt_offset;
	uint8_t temp;

	if(local_rx_buf[PKT_DATA_START]=='n'){
     4c4:	8b 81       	ldd	r24, Y+3	; 0x03
     4c6:	8e 36       	cpi	r24, 0x6E	; 110
     4c8:	09 f0       	breq	.+2      	; 0x4cc <packet_measurement_better+0x10>
     4ca:	7c c0       	rjmp	.+248    	; 0x5c4 <packet_measurement_better+0x108>
		current_node = local_rx_buf[PKT_DATA_START+5]-'0';  // node number
     4cc:	e8 85       	ldd	r30, Y+8	; 0x08
     4ce:	e0 53       	subi	r30, 0x30	; 48
     4d0:	e0 93 b8 06 	sts	0x06B8, r30
		received_pkt_index[current_node] = local_rx_buf[PKT_DATA_START+7]; 
     4d4:	ff 27       	eor	r31, r31
     4d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4d8:	df 01       	movw	r26, r30
     4da:	a0 50       	subi	r26, 0x00	; 0
     4dc:	bd 4f       	sbci	r27, 0xFD	; 253
     4de:	9c 93       	st	X, r25
		

		next_pkt_offset = received_pkt_index[current_node]-current_pkt_index[current_node];  // packet index difference
     4e0:	e1 59       	subi	r30, 0x91	; 145
     4e2:	f7 4f       	sbci	r31, 0xF7	; 247
     4e4:	80 81       	ld	r24, Z
     4e6:	19 2f       	mov	r17, r25
     4e8:	18 1b       	sub	r17, r24
		//printf("%d,%d\r\n",next_pkt_offset,current_node);

		//if(next_pkt_offset!=1){
//printf("%d,%d,%d,%d,%d\r\n", local_rx_buf[PKT_DATA_START+7],current_pkt_index[current_node],next_pkt_offset,current_node,isa_get_channel());
			if(next_pkt_offset>=20){
     4ea:	14 31       	cpi	r17, 0x14	; 20
     4ec:	48 f1       	brcs	.+82     	; 0x540 <packet_measurement_better+0x84>
				printf("HUGE LOSS\r\n");
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	0e 94 2e 38 	call	0x705c	; 0x705c <puts>
				printf("%d,%d,%d,%d,%d\r\n", local_rx_buf[PKT_DATA_START+7],current_pkt_index[current_node],next_pkt_offset,current_node,isa_get_channel());
     4f6:	0e 94 27 05 	call	0xa4e	; 0xa4e <isa_get_channel>
     4fa:	e0 91 b8 06 	lds	r30, 0x06B8
     4fe:	ff 27       	eor	r31, r31
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	ff 93       	push	r31
     506:	ef 93       	push	r30
     508:	81 2f       	mov	r24, r17
     50a:	99 27       	eor	r25, r25
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	e1 59       	subi	r30, 0x91	; 145
     512:	f7 4f       	sbci	r31, 0xF7	; 247
     514:	80 81       	ld	r24, Z
     516:	99 27       	eor	r25, r25
     518:	9f 93       	push	r25
     51a:	8f 93       	push	r24
     51c:	8a 85       	ldd	r24, Y+10	; 0x0a
     51e:	99 27       	eor	r25, r25
     520:	9f 93       	push	r25
     522:	8f 93       	push	r24
     524:	8b e0       	ldi	r24, 0x0B	; 11
     526:	92 e0       	ldi	r25, 0x02	; 2
     528:	9f 93       	push	r25
     52a:	8f 93       	push	r24
     52c:	0e 94 17 38 	call	0x702e	; 0x702e <printf>
     530:	8d b7       	in	r24, 0x3d	; 61
     532:	9e b7       	in	r25, 0x3e	; 62
     534:	0c 96       	adiw	r24, 0x0c	; 12
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	9e bf       	out	0x3e, r25	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	8d bf       	out	0x3d, r24	; 61
			}
		//}
		current_pkt_index[current_node] = local_rx_buf[PKT_DATA_START+7];  // update current pakcet index
     540:	90 91 b8 06 	lds	r25, 0x06B8
     544:	49 2f       	mov	r20, r25
     546:	55 27       	eor	r21, r21
     548:	8a 85       	ldd	r24, Y+10	; 0x0a
     54a:	fa 01       	movw	r30, r20
     54c:	e1 59       	subi	r30, 0x91	; 145
     54e:	f7 4f       	sbci	r31, 0xF7	; 247
     550:	80 83       	st	Z, r24
		
		pkt_cnt[current_node] += next_pkt_offset; // add the number of packet been measured
     552:	da 01       	movw	r26, r20
     554:	ac 52       	subi	r26, 0x2C	; 44
     556:	bc 4f       	sbci	r27, 0xFC	; 252
     558:	2c 91       	ld	r18, X
     55a:	21 0f       	add	r18, r17
     55c:	2c 93       	st	X, r18
		temp = current_pkt_index[current_node] % 8; // use 1 byte to record 8 packets
     55e:	38 2f       	mov	r19, r24
     560:	37 70       	andi	r19, 0x07	; 7
		//printf("%d,%d,%d\r\n",temp,frame_cnt[0],pkt_cnt[0]);

		if(pkt_cnt[current_node]>=8){
     562:	28 30       	cpi	r18, 0x08	; 8
     564:	50 f0       	brcs	.+20     	; 0x57a <packet_measurement_better+0xbe>
		   frame_cnt[current_node]+=pkt_cnt[current_node]/8;
     566:	fa 01       	movw	r30, r20
     568:	ee 5d       	subi	r30, 0xDE	; 222
     56a:	fa 4f       	sbci	r31, 0xFA	; 250
     56c:	26 95       	lsr	r18
     56e:	26 95       	lsr	r18
     570:	26 95       	lsr	r18
     572:	80 81       	ld	r24, Z
     574:	28 0f       	add	r18, r24
     576:	20 83       	st	Z, r18
		   pkt_cnt[current_node]=temp;
     578:	3c 93       	st	X, r19
		   //printf("current frame cnt: %d\r\n", frame_cnt[current_node]);		   
		}
		
		
		if(frame_cnt[current_node]<NUM_OF_TEST_SET){
     57a:	fa 01       	movw	r30, r20
     57c:	ee 5d       	subi	r30, 0xDE	; 222
     57e:	fa 4f       	sbci	r31, 0xFA	; 250
     580:	80 81       	ld	r24, Z
     582:	80 31       	cpi	r24, 0x10	; 16
     584:	a8 f4       	brcc	.+42     	; 0x5b0 <packet_measurement_better+0xf4>
		  //printf("%d,%d,%d\r\n",temp,frame_cnt[0],pkt_cnt[0]);
		  pkt_measure[current_node][frame_cnt[current_node]] |= ((uint8_t) 1) << temp;
     586:	fa 01       	movw	r30, r20
     588:	94 e0       	ldi	r25, 0x04	; 4
     58a:	ee 0f       	add	r30, r30
     58c:	ff 1f       	adc	r31, r31
     58e:	9a 95       	dec	r25
     590:	e1 f7       	brne	.-8      	; 0x58a <packet_measurement_better+0xce>
     592:	e8 0f       	add	r30, r24
     594:	f1 1d       	adc	r31, r1
     596:	e8 52       	subi	r30, 0x28	; 40
     598:	fb 4f       	sbci	r31, 0xFB	; 251
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <packet_measurement_better+0xe8>
     5a0:	88 0f       	add	r24, r24
     5a2:	99 1f       	adc	r25, r25
     5a4:	3a 95       	dec	r19
     5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <packet_measurement_better+0xe4>
     5a8:	20 81       	ld	r18, Z
     5aa:	28 2b       	or	r18, r24
     5ac:	20 83       	st	Z, r18
     5ae:	0a c0       	rjmp	.+20     	; 0x5c4 <packet_measurement_better+0x108>
		  /*for(i=0;i<NUM_OF_TEST_SET;i++){
		    printf("pkt: %x\r\n",pkt_measure[current_node][i]);
		  }
		  printf("KO %d\r\n",current_node);*/
		  // reboot buffer for further test
		  frame_cnt[current_node]=0;
     5b0:	10 82       	st	Z, r1
		  sendFlag=1;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	80 93 d7 04 	sts	0x04D7, r24
		  send_node=current_node;
     5b8:	90 93 d9 02 	sts	0x02D9, r25
		  nrk_event_signal (pkt_record_done_signal);
     5bc:	80 91 d0 03 	lds	r24, 0x03D0
     5c0:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <nrk_event_signal>
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	08 95       	ret

000005cc <nrk_create_taskset>:
}


void
nrk_create_taskset()
{
     5cc:	ef 92       	push	r14
     5ce:	ff 92       	push	r15
     5d0:	1f 93       	push	r17
  TaskOne.task = Task1;
     5d2:	8a e9       	ldi	r24, 0x9A	; 154
     5d4:	93 e0       	ldi	r25, 0x03	; 3
     5d6:	90 93 33 03 	sts	0x0333, r25
     5da:	80 93 32 03 	sts	0x0332, r24
  TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE-1];
     5de:	8b ea       	ldi	r24, 0xAB	; 171
     5e0:	96 e0       	ldi	r25, 0x06	; 6
     5e2:	90 93 2f 03 	sts	0x032F, r25
     5e6:	80 93 2e 03 	sts	0x032E, r24
  TaskOne.Pbos = (void *) &Stack1[0];
     5ea:	8c ea       	ldi	r24, 0xAC	; 172
     5ec:	95 e0       	ldi	r25, 0x05	; 5
     5ee:	90 93 31 03 	sts	0x0331, r25
     5f2:	80 93 30 03 	sts	0x0330, r24
  TaskOne.prio = 2;
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	80 93 35 03 	sts	0x0335, r24
  TaskOne.FirstActivation = TRUE;
     5fc:	11 e0       	ldi	r17, 0x01	; 1
     5fe:	10 93 34 03 	sts	0x0334, r17
  TaskOne.Type = BASIC_TASK;
     602:	10 93 36 03 	sts	0x0336, r17
  TaskOne.SchType = PREEMPTIVE;
     606:	10 93 37 03 	sts	0x0337, r17
  TaskOne.period.secs = 0;
     60a:	10 92 38 03 	sts	0x0338, r1
     60e:	10 92 39 03 	sts	0x0339, r1
     612:	10 92 3a 03 	sts	0x033A, r1
     616:	10 92 3b 03 	sts	0x033B, r1
  TaskOne.period.nano_secs = 500*NANOS_PER_MS;
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	95 e6       	ldi	r25, 0x65	; 101
     61e:	ad ec       	ldi	r26, 0xCD	; 205
     620:	bd e1       	ldi	r27, 0x1D	; 29
     622:	80 93 3c 03 	sts	0x033C, r24
     626:	90 93 3d 03 	sts	0x033D, r25
     62a:	a0 93 3e 03 	sts	0x033E, r26
     62e:	b0 93 3f 03 	sts	0x033F, r27
  TaskOne.cpu_reserve.secs = 0;
     632:	10 92 40 03 	sts	0x0340, r1
     636:	10 92 41 03 	sts	0x0341, r1
     63a:	10 92 42 03 	sts	0x0342, r1
     63e:	10 92 43 03 	sts	0x0343, r1
  TaskOne.cpu_reserve.nano_secs = 0;
  TaskOne.cpu_reserve.nano_secs = 500*NANOS_PER_MS;
     642:	80 93 44 03 	sts	0x0344, r24
     646:	90 93 45 03 	sts	0x0345, r25
     64a:	a0 93 46 03 	sts	0x0346, r26
     64e:	b0 93 47 03 	sts	0x0347, r27
  TaskOne.offset.secs = 0;
     652:	10 92 48 03 	sts	0x0348, r1
     656:	10 92 49 03 	sts	0x0349, r1
     65a:	10 92 4a 03 	sts	0x034A, r1
     65e:	10 92 4b 03 	sts	0x034B, r1
  TaskOne.offset.nano_secs= 0;
     662:	10 92 4c 03 	sts	0x034C, r1
     666:	10 92 4d 03 	sts	0x034D, r1
     66a:	10 92 4e 03 	sts	0x034E, r1
     66e:	10 92 4f 03 	sts	0x034F, r1
  nrk_activate_task (&TaskOne);
     672:	8d e2       	ldi	r24, 0x2D	; 45
     674:	93 e0       	ldi	r25, 0x03	; 3
     676:	0e 94 80 2b 	call	0x5700	; 0x5700 <nrk_activate_task>


  TaskTwo.task = Task2;
     67a:	8a ea       	ldi	r24, 0xAA	; 170
     67c:	94 e0       	ldi	r25, 0x04	; 4
     67e:	90 93 52 08 	sts	0x0852, r25
     682:	80 93 51 08 	sts	0x0851, r24
  nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
     686:	2c e4       	ldi	r18, 0x4C	; 76
     688:	e2 2e       	mov	r14, r18
     68a:	28 e0       	ldi	r18, 0x08	; 8
     68c:	f2 2e       	mov	r15, r18
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	51 e0       	ldi	r21, 0x01	; 1
     692:	67 ed       	ldi	r22, 0xD7	; 215
     694:	73 e0       	ldi	r23, 0x03	; 3
     696:	c7 01       	movw	r24, r14
     698:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <nrk_task_set_stk>
  TaskTwo.prio = 3;
     69c:	83 e0       	ldi	r24, 0x03	; 3
     69e:	80 93 54 08 	sts	0x0854, r24
  TaskTwo.FirstActivation = TRUE;
     6a2:	10 93 53 08 	sts	0x0853, r17
  TaskTwo.Type = BASIC_TASK;
     6a6:	10 93 55 08 	sts	0x0855, r17
  TaskTwo.SchType = PREEMPTIVE;
     6aa:	10 93 56 08 	sts	0x0856, r17
  TaskTwo.period.secs = 20;
     6ae:	84 e1       	ldi	r24, 0x14	; 20
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	a0 e0       	ldi	r26, 0x00	; 0
     6b4:	b0 e0       	ldi	r27, 0x00	; 0
     6b6:	80 93 57 08 	sts	0x0857, r24
     6ba:	90 93 58 08 	sts	0x0858, r25
     6be:	a0 93 59 08 	sts	0x0859, r26
     6c2:	b0 93 5a 08 	sts	0x085A, r27
  TaskTwo.period.nano_secs = 0;
     6c6:	10 92 5b 08 	sts	0x085B, r1
     6ca:	10 92 5c 08 	sts	0x085C, r1
     6ce:	10 92 5d 08 	sts	0x085D, r1
     6d2:	10 92 5e 08 	sts	0x085E, r1
  TaskTwo.cpu_reserve.secs = 0;
     6d6:	10 92 5f 08 	sts	0x085F, r1
     6da:	10 92 60 08 	sts	0x0860, r1
     6de:	10 92 61 08 	sts	0x0861, r1
     6e2:	10 92 62 08 	sts	0x0862, r1
  TaskTwo.cpu_reserve.nano_secs = 0;
     6e6:	10 92 63 08 	sts	0x0863, r1
     6ea:	10 92 64 08 	sts	0x0864, r1
     6ee:	10 92 65 08 	sts	0x0865, r1
     6f2:	10 92 66 08 	sts	0x0866, r1
  TaskTwo.offset.secs = 0;
     6f6:	10 92 67 08 	sts	0x0867, r1
     6fa:	10 92 68 08 	sts	0x0868, r1
     6fe:	10 92 69 08 	sts	0x0869, r1
     702:	10 92 6a 08 	sts	0x086A, r1
  TaskTwo.offset.nano_secs = 100*NANOS_PER_MS;
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	91 ee       	ldi	r25, 0xE1	; 225
     70a:	a5 ef       	ldi	r26, 0xF5	; 245
     70c:	b5 e0       	ldi	r27, 0x05	; 5
     70e:	80 93 6b 08 	sts	0x086B, r24
     712:	90 93 6c 08 	sts	0x086C, r25
     716:	a0 93 6d 08 	sts	0x086D, r26
     71a:	b0 93 6e 08 	sts	0x086E, r27
  nrk_activate_task (&TaskTwo);
     71e:	c7 01       	movw	r24, r14
     720:	0e 94 80 2b 	call	0x5700	; 0x5700 <nrk_activate_task>

  nrk_kprintf( PSTR("Create Done\r\n") );
     724:	80 ef       	ldi	r24, 0xF0	; 240
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_kprintf>
     72c:	1f 91       	pop	r17
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	08 95       	ret

00000734 <Task1>:
  
  return 0;
}

void Task1()
{
     734:	6f 92       	push	r6
     736:	7f 92       	push	r7
     738:	8f 92       	push	r8
     73a:	9f 92       	push	r9
     73c:	af 92       	push	r10
     73e:	bf 92       	push	r11
     740:	cf 92       	push	r12
     742:	df 92       	push	r13
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	22 97       	sbiw	r28, 0x02	; 2
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
    uint8_t *local_rx_buf;
    int8_t rssi;
    uint8_t cnt; 
    //uint8_t my_tx_slot[4];

    printf( "Task1 PID=%d\r\n",nrk_get_pid());
     760:	0e 94 82 29 	call	0x5304	; 0x5304 <nrk_get_pid>
     764:	99 27       	eor	r25, r25
     766:	9f 93       	push	r25
     768:	8f 93       	push	r24
     76a:	8c e1       	ldi	r24, 0x1C	; 28
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	9f 93       	push	r25
     770:	8f 93       	push	r24
     772:	0e 94 17 38 	call	0x702e	; 0x702e <printf>


    nrk_led_set(GREEN_LED); 
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <nrk_led_set>

    isa_set_channel_pattern(1);
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 2b 05 	call	0xa56	; 0xa56 <isa_set_channel_pattern>

    isa_init(ISA_RECIPIENT,MY_ID, MY_CLK_SRC_ID);
     786:	40 e0       	ldi	r20, 0x00	; 0
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <isa_init>
 
    isa_set_schedule(ISA_RECIPIENT,MY_CLK_SRC_ID);
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <isa_set_schedule>
  
    //isa_set_channel(MY_CHANNEL);

    isa_start();
     798:	0e 94 85 05 	call	0xb0a	; 0xb0a <isa_start>
 
    isa_rx_pkt_set_buffer(rx_buf, RF_MAX_PAYLOAD_SIZE);
     79c:	64 e7       	ldi	r22, 0x74	; 116
     79e:	87 e3       	ldi	r24, 0x37	; 55
     7a0:	95 e0       	ldi	r25, 0x05	; 5
     7a2:	0e 94 75 05 	call	0xaea	; 0xaea <isa_rx_pkt_set_buffer>
 
    while(!isa_ready())  nrk_wait_until_next_period(); 
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <Task1+0x80>
     7b0:	0e 94 42 2b 	call	0x5684	; 0x5684 <nrk_wait_until_next_period>
     7b4:	0e 94 6b 05 	call	0xad6	; 0xad6 <isa_ready>
     7b8:	88 23       	and	r24, r24
     7ba:	d1 f3       	breq	.-12     	; 0x7b0 <Task1+0x7c>
	    my_tx_slot[i]=tx_slot_from_join[i];
    }	   
    printf("MAIN_TX:%d\r\n",my_tx_slot[0]);*/


    pkt_record_done_signal=nrk_signal_create();
     7bc:	0e 94 75 25 	call	0x4aea	; 0x4aea <nrk_signal_create>
     7c0:	80 93 d0 03 	sts	0x03D0, r24
    if(pkt_record_done_signal==NRK_ERROR){
     7c4:	8f 3f       	cpi	r24, 0xFF	; 255
     7c6:	09 f4       	brne	.+2      	; 0x7ca <Task1+0x96>
     7c8:	56 c0       	rjmp	.+172    	; 0x876 <Task1+0x142>
    }  

    while(1) {

	//printf("check %d",isa_rx_pkt_check());
	nrk_gpio_set(NRK_DEBUG_3);
     7ca:	f0 90 66 02 	lds	r15, 0x0266
	if( isa_rx_pkt_check()!=0 ) {

	    local_rx_buf=isa_rx_pkt_get(&length, &rssi);
     7ce:	52 e0       	ldi	r21, 0x02	; 2
     7d0:	65 2e       	mov	r6, r21
     7d2:	71 2c       	mov	r7, r1
     7d4:	6c 0e       	add	r6, r28
     7d6:	7d 1e       	adc	r7, r29
     7d8:	4e 01       	movw	r8, r28
     7da:	08 94       	sec
     7dc:	81 1c       	adc	r8, r1
     7de:	91 1c       	adc	r9, r1
	if(isa_tx_pkt_check(MY_TX_SLOT)!=0){
	  //printf("Pending TX");
	}
	else{

	sprintf( &tx_buf[PKT_DATA_START],"node %d,%c",MY_ID,cnt++);
     7e0:	08 ed       	ldi	r16, 0xD8	; 216
     7e2:	16 e0       	ldi	r17, 0x06	; 6
     7e4:	4b e2       	ldi	r20, 0x2B	; 43
     7e6:	a4 2e       	mov	r10, r20
     7e8:	42 e0       	ldi	r20, 0x02	; 2
     7ea:	b4 2e       	mov	r11, r20
     7ec:	3d ef       	ldi	r19, 0xFD	; 253
     7ee:	c3 2e       	mov	r12, r19
     7f0:	3f ef       	ldi	r19, 0xFF	; 255
     7f2:	d3 2e       	mov	r13, r19
     7f4:	c0 0e       	add	r12, r16
     7f6:	d1 1e       	adc	r13, r17
    }  

    while(1) {

	//printf("check %d",isa_rx_pkt_check());
	nrk_gpio_set(NRK_DEBUG_3);
     7f8:	8f 2d       	mov	r24, r15
     7fa:	0e 94 2d 1c 	call	0x385a	; 0x385a <nrk_gpio_set>
	if( isa_rx_pkt_check()!=0 ) {
     7fe:	0e 94 d1 05 	call	0xba2	; 0xba2 <isa_rx_pkt_check>
     802:	88 23       	and	r24, r24
     804:	31 f0       	breq	.+12     	; 0x812 <Task1+0xde>

	    local_rx_buf=isa_rx_pkt_get(&length, &rssi);
     806:	b3 01       	movw	r22, r6
     808:	c4 01       	movw	r24, r8
     80a:	0e 94 42 0c 	call	0x1884	; 0x1884 <isa_rx_pkt_get>
	    //local_rx_buf[PKT_DATA_START+length-1]='\0';
	    //printf("length is %d, rssi is %d.\n\r",length,rssi);
	    //printf( "node %c,%d\r\n",local_rx_buf[PKT_DATA_START+5],local_rx_buf[PKT_DATA_START+7]);
	//    packet_measurement_better(local_rx_buf);
	    isa_rx_pkt_release();
     80e:	0e 94 d7 05 	call	0xbae	; 0xbae <isa_rx_pkt_release>
	    //printf("\r\n");
	}
	//printf("send message %d\r\n",cnt);

	if(isa_tx_pkt_check(MY_TX_SLOT)!=0){
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	0e 94 0e 06 	call	0xc1c	; 0xc1c <isa_tx_pkt_check>
     818:	88 23       	and	r24, r24
     81a:	39 f5       	brne	.+78     	; 0x86a <Task1+0x136>
	  //printf("Pending TX");
	}
	else{

	sprintf( &tx_buf[PKT_DATA_START],"node %d,%c",MY_ID,cnt++);
     81c:	8e 2d       	mov	r24, r14
     81e:	99 27       	eor	r25, r25
     820:	e3 94       	inc	r14
     822:	9f 93       	push	r25
     824:	8f 93       	push	r24
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	9f 93       	push	r25
     82c:	8f 93       	push	r24
     82e:	bf 92       	push	r11
     830:	af 92       	push	r10
     832:	1f 93       	push	r17
     834:	0f 93       	push	r16
     836:	0e 94 61 38 	call	0x70c2	; 0x70c2 <sprintf>
	//sprintf( &tx_buf[PKT_DATA_START],"3");
	length=strlen(&tx_buf[PKT_DATA_START])+PKT_DATA_START+1;
     83a:	f8 01       	movw	r30, r16
     83c:	01 90       	ld	r0, Z+
     83e:	00 20       	and	r0, r0
     840:	e9 f7       	brne	.-6      	; 0x83c <Task1+0x108>
     842:	e9 5d       	subi	r30, 0xD9	; 217
     844:	f6 40       	sbci	r31, 0x06	; 6
     846:	ec 5f       	subi	r30, 0xFC	; 252
     848:	e9 83       	std	Y+1, r30	; 0x01
	isa_tx_pkt(tx_buf,length,configDHDR(),MY_TX_SLOT);
     84a:	0e 94 89 05 	call	0xb12	; 0xb12 <configDHDR>
     84e:	21 e0       	ldi	r18, 0x01	; 1
     850:	48 2f       	mov	r20, r24
     852:	69 81       	ldd	r22, Y+1	; 0x01
     854:	c6 01       	movw	r24, r12
     856:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <isa_tx_pkt>
     85a:	8d b7       	in	r24, 0x3d	; 61
     85c:	9e b7       	in	r25, 0x3e	; 62
     85e:	08 96       	adiw	r24, 0x08	; 8
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	9e bf       	out	0x3e, r25	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	8d bf       	out	0x3d, r24	; 61

	}
	//isa_rx_pkt_release();	
	nrk_gpio_clr(NRK_DEBUG_3);
     86a:	8f 2d       	mov	r24, r15
     86c:	0e 94 b2 1c 	call	0x3964	; 0x3964 <nrk_gpio_clr>
	isa_wait_until_rx_or_tx();
     870:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <isa_wait_until_rx_or_tx>
     874:	c1 cf       	rjmp	.-126    	; 0x7f8 <Task1+0xc4>
    printf("MAIN_TX:%d\r\n",my_tx_slot[0]);*/


    pkt_record_done_signal=nrk_signal_create();
    if(pkt_record_done_signal==NRK_ERROR){
	nrk_kprintf(PSTR("ERROR: creating packet record signal failed\r\n"));
     876:	8e ef       	ldi	r24, 0xFE	; 254
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_kprintf>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
     87e:	e0 91 39 0a 	lds	r30, 0x0A39
     882:	f0 91 3a 0a 	lds	r31, 0x0A3A
     886:	60 85       	ldd	r22, Z+8	; 0x08
     888:	8e e0       	ldi	r24, 0x0E	; 14
     88a:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
     88e:	22 96       	adiw	r28, 0x02	; 2
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	de bf       	out	0x3e, r29	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	ef 90       	pop	r14
     8a6:	df 90       	pop	r13
     8a8:	cf 90       	pop	r12
     8aa:	bf 90       	pop	r11
     8ac:	af 90       	pop	r10
     8ae:	9f 90       	pop	r9
     8b0:	8f 90       	pop	r8
     8b2:	7f 90       	pop	r7
     8b4:	6f 90       	pop	r6
     8b6:	08 95       	ret

000008b8 <main>:
nrk_time_t timeout;


int
main ()
{
     8b8:	cf ef       	ldi	r28, 0xFF	; 255
     8ba:	d1 e2       	ldi	r29, 0x21	; 33
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	cd bf       	out	0x3d, r28	; 61

  nrk_setup_ports();
     8c0:	0e 94 26 1c 	call	0x384c	; 0x384c <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
     8c4:	87 e0       	ldi	r24, 0x07	; 7
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <nrk_setup_uart>
  

  nrk_kprintf( PSTR("Starting up...\r\n") );
     8cc:	8c e2       	ldi	r24, 0x2C	; 44
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_kprintf>
	
  nrk_init();
     8d4:	0e 94 19 23 	call	0x4632	; 0x4632 <nrk_init>

  nrk_led_clr(0);
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <nrk_led_clr>
  nrk_led_clr(1);
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <nrk_led_clr>
  nrk_led_clr(2);
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <nrk_led_clr>
  nrk_led_clr(3);
     8f0:	83 e0       	ldi	r24, 0x03	; 3
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <nrk_led_clr>
  
  nrk_time_set(0,0);
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <nrk_time_set>

  isa_task_config();
     90c:	0e 94 2b 06 	call	0xc56	; 0xc56 <isa_task_config>
  nrk_create_taskset ();
     910:	0e 94 e6 02 	call	0x5cc	; 0x5cc <nrk_create_taskset>

  nrk_start();
     914:	0e 94 b9 22 	call	0x4572	; 0x4572 <nrk_start>
  
  return 0;
}
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0c 94 c4 3a 	jmp	0x7588	; 0x7588 <_exit>

00000920 <wait_until_record_full>:
  return sendFlag;
}

int8_t wait_until_record_full()
{
    nrk_signal_register(pkt_record_done_signal);
     920:	80 91 d0 03 	lds	r24, 0x03D0
     924:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <nrk_signal_register>
    if (pkt_record_check() != 0)
     928:	80 91 d7 04 	lds	r24, 0x04D7
     92c:	88 23       	and	r24, r24
     92e:	79 f4       	brne	.+30     	; 0x94e <wait_until_record_full+0x2e>
        return NRK_OK;
    nrk_event_wait (SIG(pkt_record_done_signal));
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	00 90 d0 03 	lds	r0, 0x03D0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <wait_until_record_full+0x26>
     93e:	66 0f       	add	r22, r22
     940:	77 1f       	adc	r23, r23
     942:	88 1f       	adc	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	0a 94       	dec	r0
     948:	d2 f7       	brpl	.-12     	; 0x93e <wait_until_record_full+0x1e>
     94a:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <nrk_event_wait>
    return NRK_OK;
}
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	08 95       	ret

00000954 <Task2>:

    }
}

void Task2 ()
{
     954:	cf 92       	push	r12
     956:	df 92       	push	r13
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29

  uint8_t len,i;
  uint8_t zero_killer=0xaa;

  slip_init (stdin, stdout, 0, 0);
     962:	60 91 6a 0a 	lds	r22, 0x0A6A
     966:	70 91 6b 0a 	lds	r23, 0x0A6B
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	80 91 68 0a 	lds	r24, 0x0A68
     976:	90 91 69 0a 	lds	r25, 0x0A69
     97a:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <slip_init>

  wait_until_record_full(); //wait for first batch of packets
     97e:	0e 94 90 04 	call	0x920	; 0x920 <wait_until_record_full>
  while (1) {
    //nrk_led_set (ORANGE_LED);
    //sprintf (slip_tx_buf, pkt_measure);
	//if(sendFlag){
		//printf("")
		nrk_gpio_set(NRK_DEBUG_1);
     982:	f0 90 5b 02 	lds	r15, 0x025B
		//printf("CN:%d\r\n",send_node);
		slip_tx_buf[0]=send_node+1;
     986:	09 e0       	ldi	r16, 0x09	; 9
     988:	15 e0       	ldi	r17, 0x05	; 5

    }
}

void Task2 ()
{
     98a:	e8 01       	movw	r28, r16
     98c:	21 97       	sbiw	r28, 0x01	; 1
     98e:	6e 01       	movw	r12, r28
  while (1) {
    //nrk_led_set (ORANGE_LED);
    //sprintf (slip_tx_buf, pkt_measure);
	//if(sendFlag){
		//printf("")
		nrk_gpio_set(NRK_DEBUG_1);
     990:	8f 2d       	mov	r24, r15
     992:	0e 94 2d 1c 	call	0x385a	; 0x385a <nrk_gpio_set>
		//printf("CN:%d\r\n",send_node);
		slip_tx_buf[0]=send_node+1;
     996:	80 91 d9 02 	lds	r24, 0x02D9
     99a:	8f 5f       	subi	r24, 0xFF	; 255
     99c:	80 93 08 05 	sts	0x0508, r24
     9a0:	81 50       	subi	r24, 0x01	; 1
     9a2:	e8 2f       	mov	r30, r24
     9a4:	ff 27       	eor	r31, r31
     9a6:	74 e0       	ldi	r23, 0x04	; 4
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	7a 95       	dec	r23
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <Task2+0x54>
     9b0:	e8 52       	subi	r30, 0x28	; 40
     9b2:	fb 4f       	sbci	r31, 0xFB	; 251
     9b4:	d8 01       	movw	r26, r16
		for(uint8_t i=0;i<NUM_OF_TEST_SET;i++){
		   slip_tx_buf[i+1]=pkt_measure[send_node][i] ^ zero_killer;  //get rid of '\0'
     9b6:	81 91       	ld	r24, Z+
     9b8:	9a ea       	ldi	r25, 0xAA	; 170
     9ba:	89 27       	eor	r24, r25
     9bc:	8d 93       	st	X+, r24
	//if(sendFlag){
		//printf("")
		nrk_gpio_set(NRK_DEBUG_1);
		//printf("CN:%d\r\n",send_node);
		slip_tx_buf[0]=send_node+1;
		for(uint8_t i=0;i<NUM_OF_TEST_SET;i++){
     9be:	85 e0       	ldi	r24, 0x05	; 5
     9c0:	a9 31       	cpi	r26, 0x19	; 25
     9c2:	b8 07       	cpc	r27, r24
     9c4:	c1 f7       	brne	.-16     	; 0x9b6 <Task2+0x62>
		   slip_tx_buf[i+1]=pkt_measure[send_node][i] ^ zero_killer;  //get rid of '\0'
		}
		//slip_tx_buf[i+1]=0; // add '\0' at the end
    	len = strlen (slip_tx_buf);
     9c6:	f6 01       	movw	r30, r12
     9c8:	01 90       	ld	r0, Z+
     9ca:	00 20       	and	r0, r0
     9cc:	e9 f7       	brne	.-6      	; 0x9c8 <Task2+0x74>
     9ce:	31 97       	sbiw	r30, 0x01	; 1
     9d0:	e8 50       	subi	r30, 0x08	; 8
     9d2:	f5 40       	sbci	r31, 0x05	; 5
     9d4:	ff 27       	eor	r31, r31
     9d6:	bf 01       	movw	r22, r30
     9d8:	ce 01       	movw	r24, r28
     9da:	0e 94 98 10 	call	0x2130	; 0x2130 <slip_tx>
	
	//printf("%d\r\n",len);
    	slip_tx (slip_tx_buf, len);
		sendFlag=0;
     9de:	10 92 d7 04 	sts	0x04D7, r1
     9e2:	80 91 d9 02 	lds	r24, 0x02D9
     9e6:	e8 2f       	mov	r30, r24
     9e8:	ff 27       	eor	r31, r31
     9ea:	64 e0       	ldi	r22, 0x04	; 4
     9ec:	ee 0f       	add	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	6a 95       	dec	r22
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <Task2+0x98>
     9f4:	e8 52       	subi	r30, 0x28	; 40
     9f6:	fb 4f       	sbci	r31, 0xFB	; 251
     9f8:	80 e0       	ldi	r24, 0x00	; 0
		for(i=0;i<NUM_OF_TEST_SET;i++){
		    pkt_measure[send_node][i]=0;	    
     9fa:	11 92       	st	Z+, r1
    	len = strlen (slip_tx_buf);
	
	//printf("%d\r\n",len);
    	slip_tx (slip_tx_buf, len);
		sendFlag=0;
		for(i=0;i<NUM_OF_TEST_SET;i++){
     9fc:	8f 5f       	subi	r24, 0xFF	; 255
     9fe:	80 31       	cpi	r24, 0x10	; 16
     a00:	e1 f7       	brne	.-8      	; 0x9fa <Task2+0xa6>
		    pkt_measure[send_node][i]=0;	    
		}
//	printf("KO,%d,%d\r\n",send_node,resync_times);
    	//nrk_wait_until_next_period ();
		nrk_gpio_clr(NRK_DEBUG_1);
     a02:	8f 2d       	mov	r24, r15
     a04:	0e 94 b2 1c 	call	0x3964	; 0x3964 <nrk_gpio_clr>
	//}	
	wait_until_record_full();
     a08:	0e 94 90 04 	call	0x920	; 0x920 <wait_until_record_full>
     a0c:	c1 cf       	rjmp	.-126    	; 0x990 <Task2+0x3c>

00000a0e <config_child_list>:



void config_child_list (uint8_t node_id)
{
    child_list |= ((uint32_t) 1) << node_id;
     a0e:	21 e0       	ldi	r18, 0x01	; 1
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <config_child_list+0x12>
     a18:	22 0f       	add	r18, r18
     a1a:	33 1f       	adc	r19, r19
     a1c:	44 1f       	adc	r20, r20
     a1e:	55 1f       	adc	r21, r21
     a20:	8a 95       	dec	r24
     a22:	d2 f7       	brpl	.-12     	; 0xa18 <config_child_list+0xa>
     a24:	80 91 d4 02 	lds	r24, 0x02D4
     a28:	90 91 d5 02 	lds	r25, 0x02D5
     a2c:	a0 91 d6 02 	lds	r26, 0x02D6
     a30:	b0 91 d7 02 	lds	r27, 0x02D7
     a34:	82 2b       	or	r24, r18
     a36:	93 2b       	or	r25, r19
     a38:	a4 2b       	or	r26, r20
     a3a:	b5 2b       	or	r27, r21
     a3c:	80 93 d4 02 	sts	0x02D4, r24
     a40:	90 93 d5 02 	sts	0x02D5, r25
     a44:	a0 93 d6 02 	sts	0x02D6, r26
     a48:	b0 93 d7 02 	sts	0x02D7, r27
     a4c:	08 95       	ret

00000a4e <isa_get_channel>:
    isa_param.channel = chan;
    rf_set_channel (chan);
}

uint8_t isa_get_channel()
{
     a4e:	80 91 f5 02 	lds	r24, 0x02F5
    return isa_param.channel;
}
     a52:	99 27       	eor	r25, r25
     a54:	08 95       	ret

00000a56 <isa_set_channel_pattern>:

void isa_set_channel_pattern(uint8_t pattern)
{
    switch (pattern)
     a56:	81 30       	cpi	r24, 0x01	; 1
     a58:	19 f0       	breq	.+6      	; 0xa60 <isa_set_channel_pattern+0xa>
     a5a:	83 30       	cpi	r24, 0x03	; 3
     a5c:	d9 f5       	brne	.+118    	; 0xad4 <isa_set_channel_pattern+0x7e>
     a5e:	31 c0       	rjmp	.+98     	; 0xac2 <isa_set_channel_pattern+0x6c>
    {
	case 1:
	    slottedPattern[0] = 19;
     a60:	83 e1       	ldi	r24, 0x13	; 19
     a62:	80 93 b4 08 	sts	0x08B4, r24
	    slottedPattern[1] = 12;
     a66:	8c e0       	ldi	r24, 0x0C	; 12
     a68:	80 93 b5 08 	sts	0x08B5, r24
	    slottedPattern[2] = 20;
     a6c:	84 e1       	ldi	r24, 0x14	; 20
     a6e:	80 93 b6 08 	sts	0x08B6, r24
	    slottedPattern[3] = 24;
     a72:	88 e1       	ldi	r24, 0x18	; 24
     a74:	80 93 b7 08 	sts	0x08B7, r24
	    slottedPattern[4] = 16;
     a78:	80 e1       	ldi	r24, 0x10	; 16
     a7a:	80 93 b8 08 	sts	0x08B8, r24
	    slottedPattern[5] = 23;
     a7e:	87 e1       	ldi	r24, 0x17	; 23
     a80:	80 93 b9 08 	sts	0x08B9, r24
	    slottedPattern[6] = 18;
     a84:	82 e1       	ldi	r24, 0x12	; 18
     a86:	80 93 ba 08 	sts	0x08BA, r24
	    slottedPattern[7] = 25;
     a8a:	89 e1       	ldi	r24, 0x19	; 25
     a8c:	80 93 bb 08 	sts	0x08BB, r24
	    slottedPattern[8] = 14;
     a90:	8e e0       	ldi	r24, 0x0E	; 14
     a92:	80 93 bc 08 	sts	0x08BC, r24
	    slottedPattern[9] = 21;
     a96:	85 e1       	ldi	r24, 0x15	; 21
     a98:	80 93 bd 08 	sts	0x08BD, r24
	    slottedPattern[10] = 11;
     a9c:	8b e0       	ldi	r24, 0x0B	; 11
     a9e:	80 93 be 08 	sts	0x08BE, r24
	    slottedPattern[11] = 15;
     aa2:	8f e0       	ldi	r24, 0x0F	; 15
     aa4:	80 93 bf 08 	sts	0x08BF, r24
	    slottedPattern[12] = 22;
     aa8:	86 e1       	ldi	r24, 0x16	; 22
     aaa:	80 93 c0 08 	sts	0x08C0, r24
	    slottedPattern[13] = 17;
     aae:	81 e1       	ldi	r24, 0x11	; 17
     ab0:	80 93 c1 08 	sts	0x08C1, r24
	    slottedPattern[14] = 13;
     ab4:	8d e0       	ldi	r24, 0x0D	; 13
     ab6:	80 93 c2 08 	sts	0x08C2, r24
	    slottedPattern[15] = 26;
     aba:	8a e1       	ldi	r24, 0x1A	; 26
     abc:	80 93 c3 08 	sts	0x08C3, r24
     ac0:	08 95       	ret
	    break;
	case 3:
	    slowPattern[0]=15;
     ac2:	8f e0       	ldi	r24, 0x0F	; 15
     ac4:	80 93 af 08 	sts	0x08AF, r24
	    slowPattern[1]=20;
     ac8:	84 e1       	ldi	r24, 0x14	; 20
     aca:	80 93 b0 08 	sts	0x08B0, r24
	    slowPattern[2]=25;
     ace:	89 e1       	ldi	r24, 0x19	; 25
     ad0:	80 93 b1 08 	sts	0x08B1, r24
     ad4:	08 95       	ret

00000ad6 <isa_ready>:
    }
}

int8_t isa_ready()
{
    if (_isa_ready ==  1)
     ad6:	80 91 d4 06 	lds	r24, 0x06D4
     ada:	81 30       	cpi	r24, 0x01	; 1
     adc:	19 f4       	brne	.+6      	; 0xae4 <isa_ready+0xe>
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	08 95       	ret
     ae4:	8f ef       	ldi	r24, 0xFF	; 255
     ae6:	9f ef       	ldi	r25, 0xFF	; 255
        return NRK_OK;
    else
        return NRK_ERROR;
}
     ae8:	08 95       	ret

00000aea <isa_rx_pkt_set_buffer>:

int8_t isa_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
{

    if(size==0 || buf==NULL) return NRK_ERROR;
     aea:	66 23       	and	r22, r22
     aec:	59 f0       	breq	.+22     	; 0xb04 <isa_rx_pkt_set_buffer+0x1a>
     aee:	00 97       	sbiw	r24, 0x00	; 0
     af0:	49 f0       	breq	.+18     	; 0xb04 <isa_rx_pkt_set_buffer+0x1a>
    isa_rfRxInfo.pPayload = buf;
     af2:	90 93 e8 02 	sts	0x02E8, r25
     af6:	80 93 e7 02 	sts	0x02E7, r24
    isa_rfRxInfo.max_length = size;
     afa:	60 93 e6 02 	sts	0x02E6, r22
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	08 95       	ret

return NRK_OK;
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	9f ef       	ldi	r25, 0xFF	; 255
}
     b08:	08 95       	ret

00000b0a <isa_start>:
}

void isa_start ()
{
    //_isa_clear_sched_cache ();
    _isa_ready = 2;
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	80 93 d4 06 	sts	0x06D4, r24
     b10:	08 95       	ret

00000b12 <configDHDR>:
	DHDR |= 1<<4;
    }
    if(0){//include slow hopping offset
	DHDR |= 1<<3;
    }
    if(isa_node_mode == ISA_RECIPIENT){//is clock recipient
     b12:	80 91 36 05 	lds	r24, 0x0536
     b16:	88 23       	and	r24, r24
     b18:	11 f4       	brne	.+4      	; 0xb1e <configDHDR+0xc>
     b1a:	85 ee       	ldi	r24, 0xE5	; 229
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <configDHDR+0xe>
     b1e:	81 ee       	ldi	r24, 0xE1	; 225
	DHDR |= 1<<2;
    }
    return DHDR;
}
     b20:	99 27       	eor	r25, r25
     b22:	87 fd       	sbrc	r24, 7
     b24:	90 95       	com	r25
     b26:	08 95       	ret

00000b28 <configDHR>:
 *
 */
int8_t configDHR()
{
    int8_t DHR = 3;
    if(isa_node_mode != ISA_RECIPIENT){//include clock correction change
     b28:	80 91 36 05 	lds	r24, 0x0536
     b2c:	88 23       	and	r24, r24
     b2e:	11 f0       	breq	.+4      	; 0xb34 <configDHR+0xc>
     b30:	83 e8       	ldi	r24, 0x83	; 131
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <configDHR+0xe>
     b34:	83 e0       	ldi	r24, 0x03	; 3
    if(0){//include slow hopping offset
	DHR |= 1<<3;
    }
   
    return DHR;
}
     b36:	99 27       	eor	r25, r25
     b38:	87 fd       	sbrc	r24, 7
     b3a:	90 95       	com	r25
     b3c:	08 95       	ret

00000b3e <configAdvDAUX>:
 * Gateway could config the DAUX 
 * DAUX contains superframe and join information 
 *
 */
void configAdvDAUX(uint8_t chPattern, uint8_t chIndex, uint8_t sp_period, uint8_t tx_slot1, uint8_t tx_slot2, uint8_t tx_slot3, uint8_t tx_slot4, uint8_t rx_slot1, uint8_t rx_slot2, uint8_t rx_slot3, uint8_t rx_slot4)
{	
     b3e:	8f 92       	push	r8
     b40:	af 92       	push	r10
     b42:	cf 92       	push	r12
     b44:	ef 92       	push	r14
     b46:	0f 93       	push	r16
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
    /*ADVERTISEMENT SELECTION*/
    DAUX[0]=0; // Advertisement selection, 0 indicates advertisement DAUX
     b50:	10 92 92 08 	sts	0x0892, r1
    
    /*TIME SYNCHRONIZATION*/
    /* 1-6 bytes are reserved for time synchronization */ 
  
    /*SUPERFRAME INFORMATION*/
    DAUX[7]=10; // timeslot duration, currently not used.
     b54:	9a e0       	ldi	r25, 0x0A	; 10
     b56:	90 93 99 08 	sts	0x0899, r25
    DAUX[8]=0; // reserved for long timeslot duration
     b5a:	10 92 9a 08 	sts	0x089A, r1
    DAUX[9]=chPattern; // channel pattern selection
     b5e:	80 93 9b 08 	sts	0x089B, r24
    DAUX[10]=chIndex; // channel index selection
     b62:	60 93 9c 08 	sts	0x089C, r22
    DAUX[11]=sp_period; // superframe period
     b66:	40 93 9d 08 	sts	0x089D, r20
    DAUX[12]=0; // reserved for long period situation  
     b6a:	10 92 9e 08 	sts	0x089E, r1

    /*JOIN INFORMATION*/
    /* 17 reserved for Join backoff and timeout
       18 reserved for Indicates fields that are transmitted
    */
    DAUX[19]=tx_slot1;  //TX slot 1
     b6e:	20 93 a5 08 	sts	0x08A5, r18
    DAUX[20]=tx_slot2;  //TX slot 2
     b72:	00 93 a6 08 	sts	0x08A6, r16
    DAUX[21]=tx_slot3;  //TX slot 3
     b76:	e0 92 a7 08 	sts	0x08A7, r14
    DAUX[22]=tx_slot4;  //TX slot 4
     b7a:	c0 92 a8 08 	sts	0x08A8, r12
    DAUX[23]=rx_slot1;  //RX slot 1
     b7e:	a0 92 a9 08 	sts	0x08A9, r10
    DAUX[24]=rx_slot2;  //RX slot 2
     b82:	80 92 aa 08 	sts	0x08AA, r8
    DAUX[25]=rx_slot3;  //RX slot 3
     b86:	8a 85       	ldd	r24, Y+10	; 0x0a
     b88:	80 93 ab 08 	sts	0x08AB, r24
    DAUX[26]=rx_slot4;  //RX slot 4
     b8c:	8b 85       	ldd	r24, Y+11	; 0x0b
     b8e:	80 93 ac 08 	sts	0x08AC, r24
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	0f 91       	pop	r16
     b98:	ef 90       	pop	r14
     b9a:	cf 90       	pop	r12
     b9c:	af 90       	pop	r10
     b9e:	8f 90       	pop	r8
     ba0:	08 95       	ret

00000ba2 <isa_rx_pkt_check>:
 * rtl_release_rx_packet() then resets the value of rtl_check_rx_status()
 *
 * Returns: 1 if a new packet was received, 0 otherwise
 */
int8_t isa_rx_pkt_check()
{
     ba2:	80 91 be 07 	lds	r24, 0x07BE
    return isa_rx_data_ready;
}
     ba6:	99 27       	eor	r25, r25
     ba8:	87 fd       	sbrc	r24, 7
     baa:	90 95       	com	r25
     bac:	08 95       	ret

00000bae <isa_rx_pkt_release>:
 *
 */

void isa_rx_pkt_release()
{
    isa_rx_data_ready = 0;
     bae:	10 92 be 07 	sts	0x07BE, r1
     bb2:	10 92 bf 07 	sts	0x07BF, r1
     bb6:	10 92 c0 07 	sts	0x07C0, r1
     bba:	10 92 c1 07 	sts	0x07C1, r1
     bbe:	08 95       	ret

00000bc0 <isa_tx_pkt>:
 *
 * Return:  currently always returns 1
 */
int8_t isa_tx_pkt (uint8_t *tx_buf, uint8_t len, uint8_t DHDR, uint8_t slot)
{
    isa_tx_info[slot].pPayload = tx_buf; 
     bc0:	33 27       	eor	r19, r19
     bc2:	f9 01       	movw	r30, r18
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	ef 5a       	subi	r30, 0xAF	; 175
     bce:	f8 4f       	sbci	r31, 0xF8	; 248
     bd0:	93 83       	std	Z+3, r25	; 0x03
     bd2:	82 83       	std	Z+2, r24	; 0x02
    isa_tx_info[slot].length = len;    // pass le pointer
     bd4:	60 83       	st	Z, r22
    isa_tx_info[slot].DHDR = DHDR;
     bd6:	41 83       	std	Z+1, r20	; 0x01
    isa_tx_data_ready |= ((uint32_t) 1 << slot);        // set the flag
     bd8:	41 e0       	ldi	r20, 0x01	; 1
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	04 c0       	rjmp	.+8      	; 0xbea <isa_tx_pkt+0x2a>
     be2:	44 0f       	add	r20, r20
     be4:	55 1f       	adc	r21, r21
     be6:	66 1f       	adc	r22, r22
     be8:	77 1f       	adc	r23, r23
     bea:	2a 95       	dec	r18
     bec:	d2 f7       	brpl	.-12     	; 0xbe2 <isa_tx_pkt+0x22>
     bee:	80 91 fc 02 	lds	r24, 0x02FC
     bf2:	90 91 fd 02 	lds	r25, 0x02FD
     bf6:	a0 91 fe 02 	lds	r26, 0x02FE
     bfa:	b0 91 ff 02 	lds	r27, 0x02FF
     bfe:	84 2b       	or	r24, r20
     c00:	95 2b       	or	r25, r21
     c02:	a6 2b       	or	r26, r22
     c04:	b7 2b       	or	r27, r23
     c06:	80 93 fc 02 	sts	0x02FC, r24
     c0a:	90 93 fd 02 	sts	0x02FD, r25
     c0e:	a0 93 fe 02 	sts	0x02FE, r26
     c12:	b0 93 ff 02 	sts	0x02FF, r27
    return 1;
}
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	08 95       	ret

00000c1c <isa_tx_pkt_check>:
 * to see if the packet had been sent by the interrupt routine.
 *
 * Returns: 1 if the packet was sent, 0 otherwise
 */
int8_t isa_tx_pkt_check(uint8_t slot)
{
     c1c:	20 91 fc 02 	lds	r18, 0x02FC
     c20:	30 91 fd 02 	lds	r19, 0x02FD
     c24:	40 91 fe 02 	lds	r20, 0x02FE
     c28:	50 91 ff 02 	lds	r21, 0x02FF
     c2c:	04 c0       	rjmp	.+8      	; 0xc36 <isa_tx_pkt_check+0x1a>
     c2e:	56 95       	lsr	r21
     c30:	47 95       	ror	r20
     c32:	37 95       	ror	r19
     c34:	27 95       	ror	r18
     c36:	8a 95       	dec	r24
     c38:	d2 f7       	brpl	.-12     	; 0xc2e <isa_tx_pkt_check+0x12>
    if ((isa_tx_data_ready & ((uint32_t) 1 << slot)) != 0)
        return 1;
    return 0;
}
     c3a:	c9 01       	movw	r24, r18
     c3c:	81 70       	andi	r24, 0x01	; 1
     c3e:	90 70       	andi	r25, 0x00	; 0
     c40:	08 95       	ret

00000c42 <isa_join_ready>:
    return _isa_join_ok;
}

int8_t isa_join_ready()
{
    if (_isa_join_ok ==  1)
     c42:	80 91 19 05 	lds	r24, 0x0519
     c46:	81 30       	cpi	r24, 0x01	; 1
     c48:	19 f4       	brne	.+6      	; 0xc50 <isa_join_ready+0xe>
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	08 95       	ret
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	9f ef       	ldi	r25, 0xFF	; 255
        return NRK_OK;
    else
        return NRK_ERROR;
}
     c54:	08 95       	ret

00000c56 <isa_task_config>:
	}
    }
}

void isa_task_config ()
{
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
    isa_task.task = isa_nw_task;
     c5a:	88 e2       	ldi	r24, 0x28	; 40
     c5c:	9a e0       	ldi	r25, 0x0A	; 10
     c5e:	90 93 10 03 	sts	0x0310, r25
     c62:	80 93 0f 03 	sts	0x030F, r24
    nrk_task_set_stk( &isa_task, isa_task_stack, ISA_STACK_SIZE);
     c66:	0a e0       	ldi	r16, 0x0A	; 10
     c68:	13 e0       	ldi	r17, 0x03	; 3
     c6a:	40 e8       	ldi	r20, 0x80	; 128
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	60 e5       	ldi	r22, 0x50	; 80
     c70:	73 e0       	ldi	r23, 0x03	; 3
     c72:	c8 01       	movw	r24, r16
     c74:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <nrk_task_set_stk>
    isa_task.prio = 20;
     c78:	84 e1       	ldi	r24, 0x14	; 20
     c7a:	80 93 12 03 	sts	0x0312, r24
    isa_task.FirstActivation = TRUE;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	80 93 11 03 	sts	0x0311, r24
    isa_task.Type = BASIC_TASK;
     c84:	80 93 13 03 	sts	0x0313, r24
    isa_task.SchType = PREEMPTIVE;
     c88:	80 93 14 03 	sts	0x0314, r24
    isa_task.period.secs = 0;
     c8c:	10 92 15 03 	sts	0x0315, r1
     c90:	10 92 16 03 	sts	0x0316, r1
     c94:	10 92 17 03 	sts	0x0317, r1
     c98:	10 92 18 03 	sts	0x0318, r1
    isa_task.period.nano_secs = 10*NANOS_PER_MS;
     c9c:	80 e8       	ldi	r24, 0x80	; 128
     c9e:	96 e9       	ldi	r25, 0x96	; 150
     ca0:	a8 e9       	ldi	r26, 0x98	; 152
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	80 93 19 03 	sts	0x0319, r24
     ca8:	90 93 1a 03 	sts	0x031A, r25
     cac:	a0 93 1b 03 	sts	0x031B, r26
     cb0:	b0 93 1c 03 	sts	0x031C, r27
    isa_task.cpu_reserve.secs = 0;      
     cb4:	10 92 1d 03 	sts	0x031D, r1
     cb8:	10 92 1e 03 	sts	0x031E, r1
     cbc:	10 92 1f 03 	sts	0x031F, r1
     cc0:	10 92 20 03 	sts	0x0320, r1
    isa_task.cpu_reserve.nano_secs = 0;
     cc4:	10 92 21 03 	sts	0x0321, r1
     cc8:	10 92 22 03 	sts	0x0322, r1
     ccc:	10 92 23 03 	sts	0x0323, r1
     cd0:	10 92 24 03 	sts	0x0324, r1
    isa_task.offset.secs = 0;
     cd4:	10 92 25 03 	sts	0x0325, r1
     cd8:	10 92 26 03 	sts	0x0326, r1
     cdc:	10 92 27 03 	sts	0x0327, r1
     ce0:	10 92 28 03 	sts	0x0328, r1
    isa_task.offset.nano_secs = 0;
     ce4:	10 92 29 03 	sts	0x0329, r1
     ce8:	10 92 2a 03 	sts	0x032A, r1
     cec:	10 92 2b 03 	sts	0x032B, r1
     cf0:	10 92 2c 03 	sts	0x032C, r1
    nrk_activate_task (&isa_task);
     cf4:	c8 01       	movw	r24, r16
     cf6:	0e 94 80 2b 	call	0x5700	; 0x5700 <nrk_activate_task>
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	08 95       	ret

00000d00 <_isa_init_sync>:
 * and set up first sync.
 * 
 * Return: _isa_sync_ok.
 */
uint8_t _isa_init_sync ()
{
     d00:	af 92       	push	r10
     d02:	bf 92       	push	r11
     d04:	cf 92       	push	r12
     d06:	df 92       	push	r13
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	24 97       	sbiw	r28, 0x04	; 4
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	ee 24       	eor	r14, r14
     d26:	ff 24       	eor	r15, r15
     d28:	42 ee       	ldi	r20, 0xE2	; 226
     d2a:	c4 2e       	mov	r12, r20
     d2c:	42 e0       	ldi	r20, 0x02	; 2
     d2e:	d4 2e       	mov	r13, r20

    while(1)
    {

    	//printf("Init sync \r\n");
	isa_rfRxInfo.pPayload[DHDR_INDEX]=configDHDR();
     d30:	0e 94 89 05 	call	0xb12	; 0xb12 <configDHDR>
     d34:	e0 91 e7 02 	lds	r30, 0x02E7
     d38:	f0 91 e8 02 	lds	r31, 0x02E8
     d3c:	80 83       	st	Z, r24
	//isa_rfRxInfo.pPayload[SLOT_INDEX]=global_slot;
	
	#ifdef LED_DEBUG
	    nrk_led_set(1);
	#endif
	rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel 
     d3e:	60 91 f5 02 	lds	r22, 0x02F5
     d42:	c6 01       	movw	r24, r12
     d44:	0e 94 96 1a 	call	0x352c	; 0x352c <rf_set_rx>
	rf_polling_rx_on ();
     d48:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <rf_polling_rx_on>
	n = 0;
	_isa_sync_ok = 0;
     d4c:	10 92 8f 08 	sts	0x088F, r1
	last_nrk_tick=0;  // should be 0 going in
	//_nrk_prev_timer_val=250;
	_nrk_set_next_wakeup(250);
     d50:	8a ef       	ldi	r24, 0xFA	; 250
     d52:	0e 94 38 32 	call	0x6470	; 0x6470 <_nrk_set_next_wakeup>
	_nrk_os_timer_set(0);
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	0e 94 1d 32 	call	0x643a	; 0x643a <_nrk_os_timer_set>
     d5c:	10 e0       	ldi	r17, 0x00	; 0
     d5e:	12 c0       	rjmp	.+36     	; 0xd84 <_isa_init_sync+0x84>
	//timeout=200;
	while ((n = rf_rx_check_sfd()) == 0) {
	//	printf("2 \n");
	    // every OS tick 
	    if(last_nrk_tick!=_nrk_os_timer_get()) {
     d60:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
     d64:	18 17       	cp	r17, r24
     d66:	71 f0       	breq	.+28     	; 0xd84 <_isa_init_sync+0x84>
		last_nrk_tick=_nrk_os_timer_get();
     d68:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
     d6c:	18 2f       	mov	r17, r24
		timer++;
     d6e:	08 94       	sec
     d70:	e1 1c       	adc	r14, r1
     d72:	f1 1c       	adc	r15, r1
		if(timer>ISA_TOKEN_TIMEOUT){
     d74:	81 e1       	ldi	r24, 0x11	; 17
     d76:	e8 16       	cp	r14, r24
     d78:	87 e2       	ldi	r24, 0x27	; 39
     d7a:	f8 06       	cpc	r15, r24
     d7c:	18 f0       	brcs	.+6      	; 0xd84 <_isa_init_sync+0x84>
     d7e:	ee 24       	eor	r14, r14
     d80:	ff 24       	eor	r15, r15
     d82:	05 c0       	rjmp	.+10     	; 0xd8e <_isa_init_sync+0x8e>
	last_nrk_tick=0;  // should be 0 going in
	//_nrk_prev_timer_val=250;
	_nrk_set_next_wakeup(250);
	_nrk_os_timer_set(0);
	//timeout=200;
	while ((n = rf_rx_check_sfd()) == 0) {
     d84:	0e 94 47 12 	call	0x248e	; 0x248e <rf_rx_check_sfd>
     d88:	08 2f       	mov	r16, r24
     d8a:	88 23       	and	r24, r24
     d8c:	49 f3       	breq	.-46     	; 0xd60 <_isa_init_sync+0x60>
		    break;
		}
	    }
	}
	//printf("3 \n");
	_nrk_high_speed_timer_reset();
     d8e:	0e 94 ef 31 	call	0x63de	; 0x63de <_nrk_high_speed_timer_reset>
	// capture SFD transition with high speed timer
	//sfd_start_time=_nrk_high_speed_timer_get();
	tdma_start_tick=_nrk_os_timer_get();
     d92:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>

	timeout = tdma_start_tick+4;
     d96:	a8 2e       	mov	r10, r24
     d98:	bb 24       	eor	r11, r11
     d9a:	a4 e0       	ldi	r26, 0x04	; 4
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	aa 0e       	add	r10, r26
     da0:	bb 1e       	adc	r11, r27
	// an interrupt could happen in here and mess things up
	if (n != 0) {
     da2:	00 23       	and	r16, r16
     da4:	71 f0       	breq	.+28     	; 0xdc2 <_isa_init_sync+0xc2>
     da6:	06 c0       	rjmp	.+12     	; 0xdb4 <_isa_init_sync+0xb4>
	    n = 0;
	// Packet on its way
	    while ((n = rf_polling_rx_packet (false,128)) == 0) {
	  //  	printf("4 \n");
		if (_nrk_os_timer_get () > timeout)
     da8:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
     dac:	99 27       	eor	r25, r25
     dae:	a8 16       	cp	r10, r24
     db0:	b9 06       	cpc	r11, r25
     db2:	38 f0       	brcs	.+14     	; 0xdc2 <_isa_init_sync+0xc2>
	timeout = tdma_start_tick+4;
	// an interrupt could happen in here and mess things up
	if (n != 0) {
	    n = 0;
	// Packet on its way
	    while ((n = rf_polling_rx_packet (false,128)) == 0) {
     db4:	60 e8       	ldi	r22, 0x80	; 128
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	0e 94 2c 13 	call	0x2658	; 0x2658 <rf_polling_rx_packet>
     dbc:	08 2f       	mov	r16, r24
     dbe:	88 23       	and	r24, r24
     dc0:	99 f3       	breq	.-26     	; 0xda8 <_isa_init_sync+0xa8>
		    //nrk_kprintf( PSTR("Pkt timed out\r\n") );
		    break;          // huge timeout as failsafe
		}
	    }
	}
	rf_rx_off (); 
     dc2:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <rf_rx_off>
	//printf("5 \n");
	if (n == 1 /*&& isa_rfRxInfo.length>0*/) {
     dc6:	01 30       	cpi	r16, 0x01	; 1
     dc8:	09 f0       	breq	.+2      	; 0xdcc <_isa_init_sync+0xcc>
     dca:	b2 cf       	rjmp	.-156    	; 0xd30 <_isa_init_sync+0x30>
	    if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id){//change
     dcc:	20 91 e7 02 	lds	r18, 0x02E7
     dd0:	30 91 e8 02 	lds	r19, 0x02E8
     dd4:	f9 01       	movw	r30, r18
     dd6:	92 81       	ldd	r25, Z+2	; 0x02
     dd8:	80 91 d3 03 	lds	r24, 0x03D3
     ddc:	98 17       	cp	r25, r24
     dde:	09 f0       	breq	.+2      	; 0xde2 <_isa_init_sync+0xe2>
     de0:	a7 cf       	rjmp	.-178    	; 0xd30 <_isa_init_sync+0x30>
		// CRC and checksum passed
		isa_rx_data_ready = 1;
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	ab 83       	std	Y+3, r26	; 0x03
     df0:	bc 83       	std	Y+4, r27	; 0x04
     df2:	80 93 be 07 	sts	0x07BE, r24
     df6:	90 93 bf 07 	sts	0x07BF, r25
     dfa:	a0 93 c0 07 	sts	0x07C0, r26
     dfe:	b0 93 c1 07 	sts	0x07C1, r27
		//rtl_rx_slot = 0;
		//DHDR = (volatile)isa_rfRxInfo.pPayload[DHDR_INDEX];		
		global_slot += (volatile)isa_rfRxInfo.pPayload[SLOT_INDEX];
     e02:	80 91 82 08 	lds	r24, 0x0882
     e06:	90 91 83 08 	lds	r25, 0x0883
     e0a:	21 81       	ldd	r18, Z+1	; 0x01
     e0c:	82 0f       	add	r24, r18
     e0e:	91 1d       	adc	r25, r1
     e10:	90 93 83 08 	sts	0x0883, r25
     e14:	80 93 82 08 	sts	0x0882, r24
		nrk_led_toggle(GREEN_LED);
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <nrk_led_toggle>
		putchar ('i');
     e20:	60 91 6a 0a 	lds	r22, 0x0A6A
     e24:	70 91 6b 0a 	lds	r23, 0x0A6B
     e28:	89 e6       	ldi	r24, 0x69	; 105
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
		//printf("%d",global_slot);
		nrk_event_signal(SIG(isa_rx_pkt_signal));
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	ab 81       	ldd	r26, Y+3	; 0x03
     e36:	bc 81       	ldd	r27, Y+4	; 0x04
     e38:	00 90 72 08 	lds	r0, 0x0872
     e3c:	04 c0       	rjmp	.+8      	; 0xe46 <_isa_init_sync+0x146>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	aa 1f       	adc	r26, r26
     e44:	bb 1f       	adc	r27, r27
     e46:	0a 94       	dec	r0
     e48:	d2 f7       	brpl	.-12     	; 0xe3e <_isa_init_sync+0x13e>
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	9a 83       	std	Y+2, r25	; 0x02
     e4e:	ab 83       	std	Y+3, r26	; 0x03
     e50:	bc 83       	std	Y+4, r27	; 0x04
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <nrk_event_signal>
#endif
     //printf("os_timer=%d\r\n",_nrk_os_itimer_get());
     #ifdef INIT_SYNC
	nrk_gpio_set(NRK_DEBUG_1);
     #endif
    _isa_sync_ok = 1;
     e58:	00 93 8f 08 	sts	0x088F, r16
 *
 */

void isa_rx_pkt_release()
{
    isa_rx_data_ready = 0;
     e5c:	10 92 be 07 	sts	0x07BE, r1
     e60:	10 92 bf 07 	sts	0x07BF, r1
     e64:	10 92 c0 07 	sts	0x07C0, r1
     e68:	10 92 c1 07 	sts	0x07C1, r1
	nrk_gpio_set(NRK_DEBUG_1);
     #endif
    _isa_sync_ok = 1;
    isa_rx_pkt_release();
    tmp_nrk_prev_timer_val=_nrk_prev_timer_val;
    _nrk_os_timer_stop();
     e6c:	0e 94 12 32 	call	0x6424	; 0x6424 <_nrk_os_timer_stop>
    //_nrk_os_timer_reset();
    _nrk_set_next_wakeup(10);
     e70:	8a e0       	ldi	r24, 0x0A	; 10
     e72:	0e 94 38 32 	call	0x6470	; 0x6470 <_nrk_set_next_wakeup>
    _nrk_os_timer_set(7);
     e76:	87 e0       	ldi	r24, 0x07	; 7
     e78:	0e 94 1d 32 	call	0x643a	; 0x643a <_nrk_os_timer_set>
    nrk_high_speed_timer_wait(0,SFD_TO_NEXT_SLOT_TIME);
     e7c:	6c e9       	ldi	r22, 0x9C	; 156
     e7e:	77 ec       	ldi	r23, 0xC7	; 199
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 2c 33 	call	0x6658	; 0x6658 <nrk_high_speed_timer_wait>
    //_nrk_os_timer_reset();
    _nrk_os_timer_start();
     e88:	0e 94 20 32 	call	0x6440	; 0x6440 <_nrk_os_timer_start>
    //_nrk_prev_timer_val=9;
    //printf("%d\n\r", _nrk_os_timer_get());
nrk_cur_task_TCB->next_wakeup = 10;
     e8c:	e0 91 39 0a 	lds	r30, 0x0A39
     e90:	f0 91 3a 0a 	lds	r31, 0x0A3A
     e94:	8a e0       	ldi	r24, 0x0A	; 10
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	96 8b       	std	Z+22, r25	; 0x16
     e9a:	85 8b       	std	Z+21, r24	; 0x15
     e9c:	80 91 8f 08 	lds	r24, 0x088F
	nrk_gpio_clr(NRK_DEBUG_1);
     #endif

	return _isa_sync_ok;

}
     ea0:	99 27       	eor	r25, r25
     ea2:	24 96       	adiw	r28, 0x04	; 4
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	df 90       	pop	r13
     ebc:	cf 90       	pop	r12
     ebe:	bf 90       	pop	r11
     ec0:	af 90       	pop	r10
     ec2:	08 95       	ret

00000ec4 <_isa_rx>:
 *
 * Arguments: slot is the current slot that is actively in RX mode.
 */

void _isa_rx (uint8_t slot)
{
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	21 97       	sbiw	r28, 0x01	; 1
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
    volatile uint8_t timeout;

    #ifdef LED_DEBUG
	nrk_led_set(1);
    #endif
    rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel 
     ee0:	60 91 f5 02 	lds	r22, 0x02F5
     ee4:	82 ee       	ldi	r24, 0xE2	; 226
     ee6:	92 e0       	ldi	r25, 0x02	; 2
     ee8:	0e 94 96 1a 	call	0x352c	; 0x352c <rf_set_rx>
    rf_polling_rx_on ();
     eec:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <rf_polling_rx_on>
    
    // Timing for waiting for sfd
    timeout = _nrk_os_timer_get();
     ef0:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
     ef4:	89 83       	std	Y+1, r24	; 0x01
    timeout+=4;  // 4ms
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	8c 5f       	subi	r24, 0xFC	; 252
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	08 c0       	rjmp	.+16     	; 0xf0e <_isa_rx+0x4a>
    n = 0;
    //nrk_gpio_set(NRK_DEBUG_3);
    while ((n = rf_rx_check_sfd()) == 0) {
        if (_nrk_os_timer_get() > timeout) {
     efe:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
     f02:	99 81       	ldd	r25, Y+1	; 0x01
     f04:	98 17       	cp	r25, r24
     f06:	18 f4       	brcc	.+6      	; 0xf0e <_isa_rx+0x4a>
	    //spend too much time on waiting for a pkt's arrival
	    rf_rx_off ();
     f08:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <rf_rx_off>
     f0c:	a3 c0       	rjmp	.+326    	; 0x1054 <_isa_rx+0x190>
    // Timing for waiting for sfd
    timeout = _nrk_os_timer_get();
    timeout+=4;  // 4ms
    n = 0;
    //nrk_gpio_set(NRK_DEBUG_3);
    while ((n = rf_rx_check_sfd()) == 0) {
     f0e:	0e 94 47 12 	call	0x248e	; 0x248e <rf_rx_check_sfd>
     f12:	88 23       	and	r24, r24
     f14:	a1 f3       	breq	.-24     	; 0xefe <_isa_rx+0x3a>
	    return;
        }
    }
//printf("%d\n\r",_nrk_high_speed_timer_get());
    // sfd received, start receiving packet and record start time
    rx_start_time = _nrk_high_speed_timer_get();
     f16:	0e 94 f7 31 	call	0x63ee	; 0x63ee <_nrk_high_speed_timer_get>
     f1a:	90 93 91 08 	sts	0x0891, r25
     f1e:	80 93 90 08 	sts	0x0890, r24

    // Timing for waiting for finishing packet receiving
    timeout = _nrk_os_timer_get(); 
     f22:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
     f26:	89 83       	std	Y+1, r24	; 0x01
    timeout += 5;               // 5ms
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	8b 5f       	subi	r24, 0xFB	; 251
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	0e c0       	rjmp	.+28     	; 0xf4c <_isa_rx+0x88>
    if (n != 0) {
        n = 0;
       // printf("Packet on its way\n\r");
        while ((n = rf_polling_rx_packet (false,128)) == 0) {
	    //printf("%d\n\r",_nrk_os_timer_get());
            if (_nrk_os_timer_get () > timeout) {
     f30:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
     f34:	99 81       	ldd	r25, Y+1	; 0x01
     f36:	98 17       	cp	r25, r24
     f38:	48 f4       	brcc	.+18     	; 0xf4c <_isa_rx+0x88>
		#ifdef RX_DEBUG
		    printf("packet is too long, times out.\n\r");
     f3a:	86 e3       	ldi	r24, 0x36	; 54
     f3c:	92 e0       	ldi	r25, 0x02	; 2
     f3e:	9f 93       	push	r25
     f40:	8f 93       	push	r24
     f42:	0e 94 17 38 	call	0x702e	; 0x702e <printf>
		#endif
		// spend too much time on receiving pkt.
                return;          // huge timeout as fail safe
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	84 c0       	rjmp	.+264    	; 0x1054 <_isa_rx+0x190>
    timeout = _nrk_os_timer_get(); 
    timeout += 5;               // 5ms
    if (n != 0) {
        n = 0;
       // printf("Packet on its way\n\r");
        while ((n = rf_polling_rx_packet (false,128)) == 0) {
     f4c:	60 e8       	ldi	r22, 0x80	; 128
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	0e 94 2c 13 	call	0x2658	; 0x2658 <rf_polling_rx_packet>
     f54:	18 2f       	mov	r17, r24
     f56:	88 23       	and	r24, r24
     f58:	59 f3       	breq	.-42     	; 0xf30 <_isa_rx+0x6c>
		// spend too much time on receiving pkt.
                return;          // huge timeout as fail safe
            }
        }
    }
    rf_rx_off ();
     f5a:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <rf_rx_off>
    if (n == 1) {// successfully received packet
     f5e:	11 30       	cpi	r17, 0x01	; 1
     f60:	09 f0       	breq	.+2      	; 0xf64 <_isa_rx+0xa0>
     f62:	78 c0       	rjmp	.+240    	; 0x1054 <_isa_rx+0x190>
    	nrk_led_toggle(BLUE_LED);
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <nrk_led_toggle>
    	putchar ('r');
     f6c:	60 91 6a 0a 	lds	r22, 0x0A6A
     f70:	70 91 6b 0a 	lds	r23, 0x0A6B
     f74:	82 e7       	ldi	r24, 0x72	; 114
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
	isa_rx_data_ready = 1;
     f7c:	61 e0       	ldi	r22, 0x01	; 1
     f7e:	e6 2e       	mov	r14, r22
     f80:	f1 2c       	mov	r15, r1
     f82:	01 2d       	mov	r16, r1
     f84:	11 2d       	mov	r17, r1
     f86:	e0 92 be 07 	sts	0x07BE, r14
     f8a:	f0 92 bf 07 	sts	0x07BF, r15
     f8e:	00 93 c0 07 	sts	0x07C0, r16
     f92:	10 93 c1 07 	sts	0x07C1, r17
	/*if(isa_node_mode != ISA_GATEWAY)
	    DHDR = isa_rfRxInfo.pPayload[DHDR_INDEX];*/
	#ifdef RX_DEBUG
	   // printf("Repeater slot = %d, local slot is %d.\n\r", isa_rfRxInfo.pPayload[SLOT_INDEX],global_slot);
	#endif RX_DEBUG	
	nrk_event_signal(isa_rx_pkt_signal);	
     f96:	80 91 72 08 	lds	r24, 0x0872
     f9a:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <nrk_event_signal>
	//nrk_high_speed_timer_wait(0,CPU_PROCESS_TIME);
	//nrk_gpio_set(NRK_DEBUG_3);

	node_mask = ((uint32_t) 1) << isa_rfRxInfo.pPayload[SRC_INDEX];
	
	if( !(node_mask & child_list))
     f9e:	e0 91 e7 02 	lds	r30, 0x02E7
     fa2:	f0 91 e8 02 	lds	r31, 0x02E8
     fa6:	02 80       	ldd	r0, Z+2	; 0x02
     fa8:	04 c0       	rjmp	.+8      	; 0xfb2 <_isa_rx+0xee>
     faa:	ee 0c       	add	r14, r14
     fac:	ff 1c       	adc	r15, r15
     fae:	00 1f       	adc	r16, r16
     fb0:	11 1f       	adc	r17, r17
     fb2:	0a 94       	dec	r0
     fb4:	d2 f7       	brpl	.-12     	; 0xfaa <_isa_rx+0xe6>
     fb6:	80 91 d4 02 	lds	r24, 0x02D4
     fba:	90 91 d5 02 	lds	r25, 0x02D5
     fbe:	a0 91 d6 02 	lds	r26, 0x02D6
     fc2:	b0 91 d7 02 	lds	r27, 0x02D7
     fc6:	e8 22       	and	r14, r24
     fc8:	f9 22       	and	r15, r25
     fca:	0a 23       	and	r16, r26
     fcc:	1b 23       	and	r17, r27
     fce:	e1 14       	cp	r14, r1
     fd0:	f1 04       	cpc	r15, r1
     fd2:	01 05       	cpc	r16, r1
     fd4:	11 05       	cpc	r17, r1
     fd6:	f1 f1       	breq	.+124    	; 0x1054 <_isa_rx+0x190>
	   return;  //FIXME change

	// ACK required
	if(DHDR & (1<<7)){
     fd8:	20 91 ab 05 	lds	r18, 0x05AB
     fdc:	27 ff       	sbrs	r18, 7
     fde:	3a c0       	rjmp	.+116    	; 0x1054 <_isa_rx+0x190>
 *
 */
int8_t configDHR()
{
    int8_t DHR = 3;
    if(isa_node_mode != ISA_RECIPIENT){//include clock correction change
     fe0:	80 91 36 05 	lds	r24, 0x0536
     fe4:	88 23       	and	r24, r24
     fe6:	11 f0       	breq	.+4      	; 0xfec <_isa_rx+0x128>
     fe8:	83 e8       	ldi	r24, 0x83	; 131
     fea:	01 c0       	rjmp	.+2      	; 0xfee <_isa_rx+0x12a>
     fec:	83 e0       	ldi	r24, 0x03	; 3
	   return;  //FIXME change

	// ACK required
	if(DHDR & (1<<7)){
	    // Transmit ACK packet
	    DHR = configDHR();
     fee:	80 93 c5 08 	sts	0x08C5, r24
	    isa_ack_buf[DHR_INDEX]= DHR;
     ff2:	80 93 49 07 	sts	0x0749, r24
	    #ifdef ACK_DEBUG
		//printf("DHR is %d.\n\r",DHR);
	    #endif
	    isa_ack_tx.pPayload = isa_ack_buf;
     ff6:	89 e4       	ldi	r24, 0x49	; 73
     ff8:	97 e0       	ldi	r25, 0x07	; 7
     ffa:	90 93 07 03 	sts	0x0307, r25
     ffe:	80 93 06 03 	sts	0x0306, r24
	    if (DHDR & (1<<2)){ // recipient , only reply explicit ACK
    1002:	22 ff       	sbrs	r18, 2
    1004:	02 c0       	rjmp	.+4      	; 0x100a <_isa_rx+0x146>
	        //isa_ack_tx.length = PKT_DATA_START-1;
		isa_ack_tx.length = 2;
    1006:	82 e0       	ldi	r24, 0x02	; 2
    1008:	15 c0       	rjmp	.+42     	; 0x1034 <_isa_rx+0x170>
            }
	    else { //reply ACK with time offsetX
		offsetX = rx_start_time - slot_start_time;
    100a:	80 91 90 08 	lds	r24, 0x0890
    100e:	90 91 91 08 	lds	r25, 0x0891
    1012:	20 91 7e 08 	lds	r18, 0x087E
    1016:	30 91 7f 08 	lds	r19, 0x087F
    101a:	82 1b       	sub	r24, r18
    101c:	93 0b       	sbc	r25, r19
    101e:	90 93 7b 08 	sts	0x087B, r25
    1022:	80 93 7a 08 	sts	0x087A, r24
		//printf("slot_start_time is %d,rx_start_time is %d.\n\r",slot_start_time,rx_start_time);
		uint8_t temp1,temp2;
		temp1 = (offsetX & 0xFF00)>>8;
		isa_ack_buf[OFFSET_HIGH]=temp1;
    1026:	29 2f       	mov	r18, r25
    1028:	33 27       	eor	r19, r19
    102a:	20 93 4a 07 	sts	0x074A, r18
		temp2 = (offsetX & 0x00FF);
 		isa_ack_buf[OFFSET_LOW]=temp2;
    102e:	80 93 4b 07 	sts	0x074B, r24
		#ifdef ACK_DEBUG
		  //  printf("offsetX is %d\n\r", offsetX);
		#endif		
		//isa_ack_tx.length = PKT_DATA_START + 1;	
		isa_ack_tx.length = 4;
    1032:	84 e0       	ldi	r24, 0x04	; 4
    1034:	80 93 05 03 	sts	0x0305, r24
	    }
	    rf_tx_tdma_packet (&isa_ack_tx,slot_start_time,isa_param.tx_guard_time,&tx_start_time);	
    1038:	40 91 f7 02 	lds	r20, 0x02F7
    103c:	50 91 f8 02 	lds	r21, 0x02F8
    1040:	60 91 7e 08 	lds	r22, 0x087E
    1044:	70 91 7f 08 	lds	r23, 0x087F
    1048:	2b e8       	ldi	r18, 0x8B	; 139
    104a:	38 e0       	ldi	r19, 0x08	; 8
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	93 e0       	ldi	r25, 0x03	; 3
    1050:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <rf_tx_tdma_packet>
    1054:	21 96       	adiw	r28, 0x01	; 1
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	08 95       	ret

0000106e <_isa_tx>:
 * packets that were set for a particular slot by rtl_tx_packet().
 *
 * Arguments: slot is the active slot set by the interrupt timer.
 */
void _isa_tx (uint8_t slot)
{
    106e:	cf 92       	push	r12
    1070:	df 92       	push	r13
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	21 97       	sbiw	r28, 0x01	; 1
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	f8 2e       	mov	r15, r24
    uint8_t offsetSec, curSec;
    uint16_t offsetNanoSec;
    int16_t time_correction;
    uint8_t tmp_nrk_prev_timer_val;
    // load header
    isa_rfTxInfo.cca = true;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	80 93 f0 02 	sts	0x02F0, r24
    isa_rfTxInfo.pPayload=isa_tx_info[slot].pPayload;
    1096:	0f 2d       	mov	r16, r15
    1098:	11 27       	eor	r17, r17
    109a:	f8 01       	movw	r30, r16
    109c:	ee 0f       	add	r30, r30
    109e:	ff 1f       	adc	r31, r31
    10a0:	ee 0f       	add	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	ef 5a       	subi	r30, 0xAF	; 175
    10a6:	f8 4f       	sbci	r31, 0xF8	; 248
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	93 81       	ldd	r25, Z+3	; 0x03
    10ac:	90 93 ef 02 	sts	0x02EF, r25
    10b0:	80 93 ee 02 	sts	0x02EE, r24
    #ifdef TX_DEBUG
	//printf("TX Payload is: %s.\n\r", isa_rfTxInfo.pPayload);
    #endif
    isa_rfTxInfo.length=isa_tx_info[slot].length;
    10b4:	80 81       	ld	r24, Z
    10b6:	80 93 ed 02 	sts	0x02ED, r24

    isa_rfTxInfo.pPayload[DHDR_INDEX] = isa_tx_info[slot].DHDR;
    10ba:	a0 91 ee 02 	lds	r26, 0x02EE
    10be:	b0 91 ef 02 	lds	r27, 0x02EF
    10c2:	81 81       	ldd	r24, Z+1	; 0x01
    10c4:	8c 93       	st	X, r24
    isa_rfTxInfo.pPayload[SLOT_INDEX] = (global_slot & 0xFF); 
    10c6:	e0 91 ee 02 	lds	r30, 0x02EE
    10ca:	f0 91 ef 02 	lds	r31, 0x02EF
    10ce:	80 91 82 08 	lds	r24, 0x0882
    10d2:	90 91 83 08 	lds	r25, 0x0883
    10d6:	81 83       	std	Z+1, r24	; 0x01
    isa_rfTxInfo.pPayload[SRC_INDEX] = isa_id;//change
    10d8:	e0 91 ee 02 	lds	r30, 0x02EE
    10dc:	f0 91 ef 02 	lds	r31, 0x02EF
    10e0:	80 91 d8 02 	lds	r24, 0x02D8
    10e4:	82 83       	std	Z+2, r24	; 0x02
        }
    } 
    #endif
    // FIXME a small bug. should not happen and should be fixed in _isa_init_sync()
    //if(AFTER_FIRST_SYNC == 1){    
	_nrk_high_speed_timer_reset();
    10e6:	0e 94 ef 31 	call	0x63de	; 0x63de <_nrk_high_speed_timer_reset>
	nrk_high_speed_timer_wait(0,WAIT_TIME_BEFORE_TX);
    10ea:	60 e8       	ldi	r22, 0x80	; 128
    10ec:	75 e2       	ldi	r23, 0x25	; 37
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 2c 33 	call	0x6658	; 0x6658 <nrk_high_speed_timer_wait>
	    #ifdef TX_RX_DEBUG
		
		//nrk_gpio_set(NRK_DEBUG_1);
   		//printf("T\r\n");
	    #endif
    if(rf_tx_tdma_packet (&isa_rfTxInfo,slot_start_time,isa_param.tx_guard_time,&tx_start_time))
    10f6:	40 91 f7 02 	lds	r20, 0x02F7
    10fa:	50 91 f8 02 	lds	r21, 0x02F8
    10fe:	60 91 7e 08 	lds	r22, 0x087E
    1102:	70 91 7f 08 	lds	r23, 0x087F
    1106:	2b e8       	ldi	r18, 0x8B	; 139
    1108:	38 e0       	ldi	r19, 0x08	; 8
    110a:	8b ee       	ldi	r24, 0xEB	; 235
    110c:	92 e0       	ldi	r25, 0x02	; 2
    110e:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <rf_tx_tdma_packet>
    1112:	88 23       	and	r24, r24
    1114:	d1 f0       	breq	.+52     	; 0x114a <_isa_tx+0xdc>
    {
    	nrk_led_toggle(RED_LED);
    1116:	83 e0       	ldi	r24, 0x03	; 3
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <nrk_led_toggle>
    	putchar ('t');
    111e:	60 91 6a 0a 	lds	r22, 0x0A6A
    1122:	70 91 6b 0a 	lds	r23, 0x0A6B
    1126:	84 e7       	ldi	r24, 0x74	; 116
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
	//("rx_start_time is %d.\n\r",_nrk_high_speed_timer_get());
	offsetY = tx_start_time - slot_start_time;
    112e:	80 91 8b 08 	lds	r24, 0x088B
    1132:	90 91 8c 08 	lds	r25, 0x088C
    1136:	20 91 7e 08 	lds	r18, 0x087E
    113a:	30 91 7f 08 	lds	r19, 0x087F
    113e:	82 1b       	sub	r24, r18
    1140:	93 0b       	sbc	r25, r19
    1142:	90 93 79 08 	sts	0x0879, r25
    1146:	80 93 78 08 	sts	0x0878, r24
	//printf("offset Y is %d.\n\r",offsetY);
	#ifdef HIGH_TIMER_DEBUG
	    //printf("In isa.c _isa_tx(): offsetY is %d, tx_start_time is %d\n\r",offsetY,tx_start_time);
	#endif
    }
    nrk_event_signal (isa_tx_done_signal);
    114a:	80 91 80 08 	lds	r24, 0x0880
    114e:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <nrk_event_signal>
    isa_tx_data_ready &= ~((uint32_t) 1 << slot);       // clear the flag
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <_isa_tx+0xf6>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	aa 1f       	adc	r26, r26
    1162:	bb 1f       	adc	r27, r27
    1164:	0a 95       	dec	r16
    1166:	d2 f7       	brpl	.-12     	; 0x115c <_isa_tx+0xee>
    1168:	80 95       	com	r24
    116a:	90 95       	com	r25
    116c:	a0 95       	com	r26
    116e:	b0 95       	com	r27
    1170:	20 91 fc 02 	lds	r18, 0x02FC
    1174:	30 91 fd 02 	lds	r19, 0x02FD
    1178:	40 91 fe 02 	lds	r20, 0x02FE
    117c:	50 91 ff 02 	lds	r21, 0x02FF
    1180:	28 23       	and	r18, r24
    1182:	39 23       	and	r19, r25
    1184:	4a 23       	and	r20, r26
    1186:	5b 23       	and	r21, r27
    1188:	20 93 fc 02 	sts	0x02FC, r18
    118c:	30 93 fd 02 	sts	0x02FD, r19
    1190:	40 93 fe 02 	sts	0x02FE, r20
    1194:	50 93 ff 02 	sts	0x02FF, r21

    // ACK required
    if(DHDR & (1<<7) && isa_node_mode!=ISA_GATEWAY){
    1198:	80 91 ab 05 	lds	r24, 0x05AB
    119c:	87 ff       	sbrs	r24, 7
    119e:	1b c1       	rjmp	.+566    	; 0x13d6 <_isa_tx+0x368>
    11a0:	80 91 36 05 	lds	r24, 0x0536
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	09 f4       	brne	.+2      	; 0x11aa <_isa_tx+0x13c>
    11a8:	16 c1       	rjmp	.+556    	; 0x13d6 <_isa_tx+0x368>
	rf_polling_rx_on ();
    11aa:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <rf_polling_rx_on>
	
	_nrk_high_speed_timer_reset();
    11ae:	0e 94 ef 31 	call	0x63de	; 0x63de <_nrk_high_speed_timer_reset>
	nrk_high_speed_timer_wait(0,CPU_PROCESS_TIME);
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	70 e1       	ldi	r23, 0x10	; 16
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 2c 33 	call	0x6658	; 0x6658 <nrk_high_speed_timer_wait>
//nrk_gpio_set(NRK_DEBUG_1);
	// Timing for waiting for receiving ACK
	timeout = _nrk_os_timer_get();
    11be:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    11c2:	89 83       	std	Y+1, r24	; 0x01
	timeout+=2;  // 2ms
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	8e 5f       	subi	r24, 0xFE	; 254
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	29 c0       	rjmp	.+82     	; 0x121e <_isa_tx+0x1b0>
	n = 0;
	while ((n = rf_rx_check_sfd()) == 0) {
	    if (_nrk_os_timer_get() > timeout) {
    11cc:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    11d0:	99 81       	ldd	r25, Y+1	; 0x01
    11d2:	98 17       	cp	r25, r24
    11d4:	20 f5       	brcc	.+72     	; 0x121e <_isa_tx+0x1b0>
		tmp = slot - previous_tx_slot;
    11d6:	80 91 7d 08 	lds	r24, 0x087D
		if(slot == previous_tx_slot)
    11da:	f8 16       	cp	r15, r24
    11dc:	51 f4       	brne	.+20     	; 0x11f2 <_isa_tx+0x184>
		    slot_expired += 25;
    11de:	80 91 c6 08 	lds	r24, 0x08C6
    11e2:	90 91 c7 08 	lds	r25, 0x08C7
    11e6:	49 96       	adiw	r24, 0x19	; 25
    11e8:	90 93 c7 08 	sts	0x08C7, r25
    11ec:	80 93 c6 08 	sts	0x08C6, r24
    11f0:	13 c0       	rjmp	.+38     	; 0x1218 <_isa_tx+0x1aa>
	timeout = _nrk_os_timer_get();
	timeout+=2;  // 2ms
	n = 0;
	while ((n = rf_rx_check_sfd()) == 0) {
	    if (_nrk_os_timer_get() > timeout) {
		tmp = slot - previous_tx_slot;
    11f2:	f8 1a       	sub	r15, r24
    11f4:	20 91 c6 08 	lds	r18, 0x08C6
    11f8:	30 91 c7 08 	lds	r19, 0x08C7
    11fc:	4f 2d       	mov	r20, r15
    11fe:	55 27       	eor	r21, r21
    1200:	47 fd       	sbrc	r20, 7
    1202:	50 95       	com	r21
		if(slot == previous_tx_slot)
		    slot_expired += 25;
		else{
		    tmp = slot - previous_tx_slot;
		    if(tmp>0)
    1204:	1f 14       	cp	r1, r15
    1206:	14 f0       	brlt	.+4      	; 0x120c <_isa_tx+0x19e>
			slot_expired += tmp;
		    else
			slot_expired += 25+tmp;
    1208:	27 5e       	subi	r18, 0xE7	; 231
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	24 0f       	add	r18, r20
    120e:	35 1f       	adc	r19, r21
    1210:	30 93 c7 08 	sts	0x08C7, r19
    1214:	20 93 c6 08 	sts	0x08C6, r18
		}
		//printf("%d,%d,%d,%d,%d\n\r",slot_expired,tmp_curSec,tmp_offsetSec,tmp_offsetNanoSec,++tmp_count);
		//printf("%d,%d\n\r",slot_expired,isa_param.channel);
		//printf("%d,%d,%d\n\r",slot_expired,slot,previous_tx_slot);
	    //spend too much time on waiting for a pkt's arrival
		rf_rx_off ();
    1218:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <rf_rx_off>
    121c:	dc c0       	rjmp	.+440    	; 0x13d6 <_isa_tx+0x368>
//nrk_gpio_set(NRK_DEBUG_1);
	// Timing for waiting for receiving ACK
	timeout = _nrk_os_timer_get();
	timeout+=2;  // 2ms
	n = 0;
	while ((n = rf_rx_check_sfd()) == 0) {
    121e:	0e 94 47 12 	call	0x248e	; 0x248e <rf_rx_check_sfd>
    1222:	88 23       	and	r24, r24
    1224:	99 f2       	breq	.-90     	; 0x11cc <_isa_tx+0x15e>
		#endif
		//nrk_gpio_clr(NRK_DEBUG_1);
		return;
	    }
	}
	nrk_gpio_clr(NRK_DEBUG_1);
    1226:	80 91 5b 02 	lds	r24, 0x025B
    122a:	0e 94 b2 1c 	call	0x3964	; 0x3964 <nrk_gpio_clr>
	timeout = _nrk_os_timer_get(); 
    122e:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    1232:	89 83       	std	Y+1, r24	; 0x01
	timeout += 2;               // 5ms
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	8e 5f       	subi	r24, 0xFE	; 254
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	12 c0       	rjmp	.+36     	; 0x1260 <_isa_tx+0x1f2>
	if (n != 0) {
	    n = 0;
	    //printf("Packet on its way\n\r");
	    while ((n = rf_polling_rx_packet (true,4)) == 0) {
		//printf("%d\n\r",_nrk_os_timer_get());		
		if (_nrk_os_timer_get () > timeout) {
    123c:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    1240:	99 81       	ldd	r25, Y+1	; 0x01
    1242:	98 17       	cp	r25, r24
    1244:	68 f4       	brcc	.+26     	; 0x1260 <_isa_tx+0x1f2>
		#ifdef RX_DEBUG
		    printf("packet is too long, times out.\n\r");
    1246:	86 e3       	ldi	r24, 0x36	; 54
    1248:	92 e0       	ldi	r25, 0x02	; 2
    124a:	9f 93       	push	r25
    124c:	8f 93       	push	r24
    124e:	0e 94 17 38 	call	0x702e	; 0x702e <printf>
		#endif	
		    tmp_curSec = _nrk_os_timer_get();
    1252:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    1256:	80 93 73 08 	sts	0x0873, r24
		    // spend too much time on receiving pkt.
                    return;          // huge timeout as fail safe
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	bb c0       	rjmp	.+374    	; 0x13d6 <_isa_tx+0x368>
	timeout = _nrk_os_timer_get(); 
	timeout += 2;               // 5ms
	if (n != 0) {
	    n = 0;
	    //printf("Packet on its way\n\r");
	    while ((n = rf_polling_rx_packet (true,4)) == 0) {
    1260:	64 e0       	ldi	r22, 0x04	; 4
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	0e 94 2c 13 	call	0x2658	; 0x2658 <rf_polling_rx_packet>
    1268:	18 2f       	mov	r17, r24
    126a:	88 23       	and	r24, r24
    126c:	39 f3       	breq	.-50     	; 0x123c <_isa_tx+0x1ce>
		}
		//if(n==-6)		
		  //  printf("%d\n\r",_nrk_os_timer_get());	
	    }
	}
	rf_rx_off ();
    126e:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <rf_rx_off>
	if (n == 1) {// successfully received ACK
    1272:	11 30       	cpi	r17, 0x01	; 1
    1274:	09 f0       	breq	.+2      	; 0x1278 <_isa_tx+0x20a>
    1276:	af c0       	rjmp	.+350    	; 0x13d6 <_isa_tx+0x368>
	    slot_expired = 0;
    1278:	10 92 c7 08 	sts	0x08C7, r1
    127c:	10 92 c6 08 	sts	0x08C6, r1
	    //isa_rx_data_ready = 1;
	    DHR = isa_rfRxInfo.pPayload[DHR_INDEX];
    1280:	e0 91 e7 02 	lds	r30, 0x02E7
    1284:	f0 91 e8 02 	lds	r31, 0x02E8
    1288:	90 81       	ld	r25, Z
    128a:	90 93 c5 08 	sts	0x08C5, r25
	    #ifdef ACK_DEBUG
		//printf("DHR = %d.\n\r", isa_rfRxInfo.pPayload[DHR_INDEX]);
	    #endif ACK_DEBUG

	    if((DHDR & (1<<7))&&isa_node_mode!=ISA_GATEWAY){
    128e:	80 91 ab 05 	lds	r24, 0x05AB
    1292:	87 ff       	sbrs	r24, 7
    1294:	a0 c0       	rjmp	.+320    	; 0x13d6 <_isa_tx+0x368>
    1296:	80 91 36 05 	lds	r24, 0x0536
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	09 f4       	brne	.+2      	; 0x12a0 <_isa_tx+0x232>
    129e:	9b c0       	rjmp	.+310    	; 0x13d6 <_isa_tx+0x368>
		if(DHR & (1<<7)){
    12a0:	97 ff       	sbrs	r25, 7
    12a2:	99 c0       	rjmp	.+306    	; 0x13d6 <_isa_tx+0x368>
		    offsetX = ((0x0000|isa_rfRxInfo.pPayload[OFFSET_HIGH])<<8)&0xff00 + 0x0000|isa_rfRxInfo.pPayload[OFFSET_LOW];
    12a4:	81 81       	ldd	r24, Z+1	; 0x01
    12a6:	99 27       	eor	r25, r25
    12a8:	98 2f       	mov	r25, r24
    12aa:	88 27       	eor	r24, r24
    12ac:	22 81       	ldd	r18, Z+2	; 0x02
    12ae:	33 27       	eor	r19, r19
    12b0:	82 2b       	or	r24, r18
    12b2:	93 2b       	or	r25, r19
    12b4:	90 93 7b 08 	sts	0x087B, r25
    12b8:	80 93 7a 08 	sts	0x087A, r24
		    #ifdef ACK_DEBUG
		//	printf("offset X is %d.\n\r", offsetX);
			//printf("offset Y is %d.\n\r", offsetY);
		    nrk_led_toggle(ORANGE_LED);
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <nrk_led_toggle>
		    putchar('a');
    12c4:	60 91 6a 0a 	lds	r22, 0x0A6A
    12c8:	70 91 6b 0a 	lds	r23, 0x0A6B
    12cc:	81 e6       	ldi	r24, 0x61	; 97
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
		    #endif ACK_DEBUG
//printf("%d,%d\n\r",offsetX,offsetY);
		    time_correction = offsetX - offsetY;
    12d4:	00 91 7a 08 	lds	r16, 0x087A
    12d8:	10 91 7b 08 	lds	r17, 0x087B
    12dc:	80 91 78 08 	lds	r24, 0x0878
    12e0:	90 91 79 08 	lds	r25, 0x0879
    12e4:	08 1b       	sub	r16, r24
    12e6:	19 0b       	sbc	r17, r25
		    //printf("time correction is %d.\n\r", time_correction);
		    // SYNC as a by-product of communication.
		    //tmp_nrk_prev_timer_val = _nrk_prev_timer_val;
//printf("%d\n\r",time_correction);
//printf("%d\n\r",HIGH_TIMER_TICKES_PER_MILISEC-time_correction%HIGH_TIMER_TICKES_PER_MILISEC);
		    timeout=50;
    12e8:	82 e3       	ldi	r24, 0x32	; 50
    12ea:	89 83       	std	Y+1, r24	; 0x01
		    curSec = _nrk_os_timer_get();
    12ec:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    12f0:	d8 2e       	mov	r13, r24
		    if(time_correction >= 0&&curSec<7){
    12f2:	17 fd       	sbrc	r17, 7
    12f4:	3b c0       	rjmp	.+118    	; 0x136c <_isa_tx+0x2fe>
    12f6:	86 e0       	ldi	r24, 0x06	; 6
    12f8:	8d 15       	cp	r24, r13
    12fa:	c0 f1       	brcs	.+112    	; 0x136c <_isa_tx+0x2fe>
			tmp_curSec = curSec;
    12fc:	d0 92 73 08 	sts	0x0873, r13
			/*do{
			    curSec = _nrk_os_timer_get();
			}while(curSec<=7);*/
			_nrk_os_timer_stop();
    1300:	0e 94 12 32 	call	0x6424	; 0x6424 <_nrk_os_timer_stop>
			//_nrk_os_timer_reset();
			offsetSec = time_correction/HIGH_TIMER_TICKES_PER_MILISEC+1;
    1304:	74 e6       	ldi	r23, 0x64	; 100
    1306:	e7 2e       	mov	r14, r23
    1308:	79 e1       	ldi	r23, 0x19	; 25
    130a:	f7 2e       	mov	r15, r23
    130c:	c8 01       	movw	r24, r16
    130e:	64 e6       	ldi	r22, 0x64	; 100
    1310:	79 e1       	ldi	r23, 0x19	; 25
    1312:	0e 94 44 3a 	call	0x7488	; 0x7488 <__divmodhi4>
    1316:	c6 2e       	mov	r12, r22
    1318:	c3 94       	inc	r12
			tmp_offsetSec = offsetSec;
    131a:	c0 92 85 08 	sts	0x0885, r12
			offsetNanoSec = HIGH_TIMER_TICKES_PER_MILISEC-time_correction%HIGH_TIMER_TICKES_PER_MILISEC;
    131e:	c8 01       	movw	r24, r16
    1320:	64 e6       	ldi	r22, 0x64	; 100
    1322:	79 e1       	ldi	r23, 0x19	; 25
    1324:	0e 94 44 3a 	call	0x7488	; 0x7488 <__divmodhi4>
    1328:	e8 1a       	sub	r14, r24
    132a:	f9 0a       	sbc	r15, r25
			tmp_offsetNanoSec = offsetNanoSec;
    132c:	f0 92 8a 08 	sts	0x088A, r15
    1330:	e0 92 89 08 	sts	0x0889, r14
			    if(curSec+offsetSec>=10)
			    	printf("%d,%d\n\r",curSec,offsetSec);
			}
			else
			    _nrk_set_next_wakeup(10);*/
			_nrk_high_speed_timer_reset();
    1334:	0e 94 ef 31 	call	0x63de	; 0x63de <_nrk_high_speed_timer_reset>
			nrk_spin_wait_us(50);
    1338:	82 e3       	ldi	r24, 0x32	; 50
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
			//printf("%d,%d,%d\n\r",curSec,offsetSec,offsetNanoSec);
			nrk_gpio_set(NRK_DEBUG_2);
    1340:	10 91 65 02 	lds	r17, 0x0265
    1344:	81 2f       	mov	r24, r17
    1346:	0e 94 2d 1c 	call	0x385a	; 0x385a <nrk_gpio_set>
			do{}while(_nrk_high_speed_timer_get()<offsetNanoSec);
    134a:	0e 94 f7 31 	call	0x63ee	; 0x63ee <_nrk_high_speed_timer_get>
    134e:	8e 15       	cp	r24, r14
    1350:	9f 05       	cpc	r25, r15
    1352:	d8 f3       	brcs	.-10     	; 0x134a <_isa_tx+0x2dc>
			nrk_gpio_clr(NRK_DEBUG_2);
    1354:	81 2f       	mov	r24, r17
    1356:	0e 94 b2 1c 	call	0x3964	; 0x3964 <nrk_gpio_clr>
			//nrk_high_speed_timer_wait(0,offsetNanoSec);
			//nrk_high_speed_timer_wait(0,4912);
			_nrk_os_timer_set(curSec+offsetSec);
    135a:	8d 2d       	mov	r24, r13
    135c:	8c 0d       	add	r24, r12
    135e:	0e 94 1d 32 	call	0x643a	; 0x643a <_nrk_os_timer_set>
			nrk_spin_wait_us(100);
    1362:	84 e6       	ldi	r24, 0x64	; 100
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
    136a:	2d c0       	rjmp	.+90     	; 0x13c6 <_isa_tx+0x358>
			    nrk_gpio_set(NRK_DEBUG_1);
			    nrk_gpio_clr(NRK_DEBUG_1);
			#endif
//printf("p\n\r");	
			_nrk_os_timer_start();
		    }else if(-time_correction>8000&&curSec<7){
    136c:	10 95       	com	r17
    136e:	01 95       	neg	r16
    1370:	1f 4f       	sbci	r17, 0xFF	; 255
    1372:	8f e1       	ldi	r24, 0x1F	; 31
    1374:	01 34       	cpi	r16, 0x41	; 65
    1376:	18 07       	cpc	r17, r24
    1378:	0c f4       	brge	.+2      	; 0x137c <_isa_tx+0x30e>
    137a:	27 c0       	rjmp	.+78     	; 0x13ca <_isa_tx+0x35c>
    137c:	86 e0       	ldi	r24, 0x06	; 6
    137e:	8d 15       	cp	r24, r13
    1380:	20 f1       	brcs	.+72     	; 0x13ca <_isa_tx+0x35c>
			_nrk_os_timer_stop();
    1382:	0e 94 12 32 	call	0x6424	; 0x6424 <_nrk_os_timer_stop>
			//_nrk_os_timer_reset();
			_nrk_high_speed_timer_reset();
    1386:	0e 94 ef 31 	call	0x63de	; 0x63de <_nrk_high_speed_timer_reset>
	...
			do{
			    NOP();
			    NOP();
			    NOP();
			    NOP();
			}while(timeout--);
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	81 50       	subi	r24, 0x01	; 1
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	8f 3f       	cpi	r24, 0xFF	; 255
    139c:	b1 f7       	brne	.-20     	; 0x138a <_isa_tx+0x31c>
			nrk_gpio_set(NRK_DEBUG_2);
			//nrk_high_speed_timer_wait(0,22800); // for test
			nrk_gpio_clr(NRK_DEBUG_2);
			#endif
			//printf("%d\n\r",-time_correction);
			nrk_high_speed_timer_wait(0,-time_correction);
    139e:	b8 01       	movw	r22, r16
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 2c 33 	call	0x6658	; 0x6658 <nrk_high_speed_timer_wait>
			_nrk_os_timer_set(curSec);
    13a8:	8d 2d       	mov	r24, r13
    13aa:	0e 94 1d 32 	call	0x643a	; 0x643a <_nrk_os_timer_set>
			timeout = 100;
    13ae:	84 e6       	ldi	r24, 0x64	; 100
    13b0:	89 83       	std	Y+1, r24	; 0x01
	...
			do{
			    NOP();
			    NOP();
			    NOP();
			    NOP();
			}while(timeout--);
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	81 50       	subi	r24, 0x01	; 1
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	8f 3f       	cpi	r24, 0xFF	; 255
    13c4:	b1 f7       	brne	.-20     	; 0x13b2 <_isa_tx+0x344>
			_nrk_os_timer_start();
    13c6:	0e 94 20 32 	call	0x6440	; 0x6440 <_nrk_os_timer_start>
		    }
		    //_nrk_prev_timer_val=tmp_nrk_prev_timer_val;
//nrk_cur_task_TCB->next_wakeup = 10;
		    _nrk_high_speed_timer_reset();
    13ca:	0e 94 ef 31 	call	0x63de	; 0x63de <_nrk_high_speed_timer_reset>
		    nrk_spin_wait_us(50);
    13ce:	82 e3       	ldi	r24, 0x32	; 50
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
    13d6:	21 96       	adiw	r28, 0x01	; 1
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	ff 90       	pop	r15
    13ec:	ef 90       	pop	r14
    13ee:	df 90       	pop	r13
    13f0:	cf 90       	pop	r12
    13f2:	08 95       	ret

000013f4 <isa_wait_until_rx_or_tx>:
    return NRK_OK;
}

int8_t isa_wait_until_rx_or_tx ()
{
    nrk_signal_register(isa_rx_pkt_signal);
    13f4:	80 91 72 08 	lds	r24, 0x0872
    13f8:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <nrk_signal_register>
    nrk_signal_register(isa_tx_done_signal);
    13fc:	80 91 80 08 	lds	r24, 0x0880
    1400:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <nrk_signal_register>
    nrk_event_wait (SIG(isa_rx_pkt_signal) | SIG(isa_tx_done_signal));
    1404:	21 e0       	ldi	r18, 0x01	; 1
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	ca 01       	movw	r24, r20
    140e:	b9 01       	movw	r22, r18
    1410:	00 90 80 08 	lds	r0, 0x0880
    1414:	04 c0       	rjmp	.+8      	; 0x141e <isa_wait_until_rx_or_tx+0x2a>
    1416:	66 0f       	add	r22, r22
    1418:	77 1f       	adc	r23, r23
    141a:	88 1f       	adc	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	d2 f7       	brpl	.-12     	; 0x1416 <isa_wait_until_rx_or_tx+0x22>
    1422:	00 90 72 08 	lds	r0, 0x0872
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <isa_wait_until_rx_or_tx+0x3c>
    1428:	22 0f       	add	r18, r18
    142a:	33 1f       	adc	r19, r19
    142c:	44 1f       	adc	r20, r20
    142e:	55 1f       	adc	r21, r21
    1430:	0a 94       	dec	r0
    1432:	d2 f7       	brpl	.-12     	; 0x1428 <isa_wait_until_rx_or_tx+0x34>
    1434:	62 2b       	or	r22, r18
    1436:	73 2b       	or	r23, r19
    1438:	84 2b       	or	r24, r20
    143a:	95 2b       	or	r25, r21
    143c:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <nrk_event_wait>
    return NRK_OK;
}
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	08 95       	ret

00001446 <isa_set_channel>:
 * This function set channel and is used for channel hopping.
 *
 */
void isa_set_channel (uint8_t chan)
{
    isa_param.channel = chan;
    1446:	80 93 f5 02 	sts	0x02F5, r24
    rf_set_channel (chan);
    144a:	0e 94 c0 1a 	call	0x3580	; 0x3580 <rf_set_channel>
    144e:	08 95       	ret

00001450 <isa_nw_task>:

}


void isa_nw_task ()
{
    1450:	cf 92       	push	r12
    1452:	df 92       	push	r13
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    uint8_t slot;
    uint32_t slot_mask;
    uint16_t next_slot_offset = 0; 
    uint8_t FIRST = 1;
    _isa_ready = 0;
    145c:	10 92 d4 06 	sts	0x06D4, r1
    
    // wait for isa ready 
    do {
        nrk_wait_until_next_period ();
    1460:	0e 94 42 2b 	call	0x5684	; 0x5684 <nrk_wait_until_next_period>
    }while (_isa_ready == 0);
    1464:	80 91 d4 06 	lds	r24, 0x06D4
    1468:	88 23       	and	r24, r24
    146a:	d1 f3       	breq	.-12     	; 0x1460 <isa_nw_task+0x10>

    _isa_ready = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	80 93 d4 06 	sts	0x06D4, r24
    nrk_gpio_clr(NRK_DEBUG_0);
    1472:	c0 90 5a 02 	lds	r12, 0x025A
    1476:	8c 2d       	mov	r24, r12
    1478:	0e 94 b2 1c 	call	0x3964	; 0x3964 <nrk_gpio_clr>
    147c:	00 e0       	ldi	r16, 0x00	; 0
    147e:	10 e0       	ldi	r17, 0x00	; 0
    while (1) {

	//nrk_gpio_set(NRK_DEBUG_2);
	
	// reset high speed timer and then record the timer value used for calculating offsets
	_nrk_high_speed_timer_reset();
    1480:	0e 94 ef 31 	call	0x63de	; 0x63de <_nrk_high_speed_timer_reset>
        slot_start_time = _nrk_high_speed_timer_get();
    1484:	0e 94 f7 31 	call	0x63ee	; 0x63ee <_nrk_high_speed_timer_get>
    1488:	90 93 7f 08 	sts	0x087F, r25
    148c:	80 93 7e 08 	sts	0x087E, r24
	//nrk_time_get (&last_slot_time);// dont know if it is useful
        last_slot = global_slot; //global_slot has been initialized to MAX_ISA_GLOBAL_SLOTS in isa_init()
    1490:	80 91 82 08 	lds	r24, 0x0882
    1494:	90 91 83 08 	lds	r25, 0x0883
    1498:	90 93 c3 07 	sts	0x07C3, r25
    149c:	80 93 c2 07 	sts	0x07C2, r24
        if (last_slot > MAX_ISA_GLOBAL_SLOTS)
    14a0:	85 36       	cpi	r24, 0x65	; 101
    14a2:	91 05       	cpc	r25, r1
    14a4:	30 f0       	brcs	.+12     	; 0x14b2 <isa_nw_task+0x62>
            last_slot -= (MAX_ISA_GLOBAL_SLOTS+1);
    14a6:	85 56       	subi	r24, 0x65	; 101
    14a8:	90 40       	sbci	r25, 0x00	; 0
    14aa:	90 93 c3 07 	sts	0x07C3, r25
    14ae:	80 93 c2 07 	sts	0x07C2, r24
	
	current_global_slot = global_slot;
    14b2:	80 91 82 08 	lds	r24, 0x0882
    14b6:	90 91 83 08 	lds	r25, 0x0883
    14ba:	90 93 8e 08 	sts	0x088E, r25
    14be:	80 93 8d 08 	sts	0x088D, r24
	/* global_slot should be wrapped */
        if (global_slot > MAX_ISA_GLOBAL_SLOTS) {
    14c2:	80 91 82 08 	lds	r24, 0x0882
    14c6:	90 91 83 08 	lds	r25, 0x0883
    14ca:	85 36       	cpi	r24, 0x65	; 101
    14cc:	91 05       	cpc	r25, r1
    14ce:	98 f0       	brcs	.+38     	; 0x14f6 <isa_nw_task+0xa6>
            global_slot -= MAX_ISA_GLOBAL_SLOTS;
    14d0:	80 91 82 08 	lds	r24, 0x0882
    14d4:	90 91 83 08 	lds	r25, 0x0883
    14d8:	84 56       	subi	r24, 0x64	; 100
    14da:	90 40       	sbci	r25, 0x00	; 0
    14dc:	90 93 83 08 	sts	0x0883, r25
    14e0:	80 93 82 08 	sts	0x0882, r24
            global_cycle++;
    14e4:	80 91 76 08 	lds	r24, 0x0876
    14e8:	90 91 77 08 	lds	r25, 0x0877
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	90 93 77 08 	sts	0x0877, r25
    14f2:	80 93 76 08 	sts	0x0876, r24
        }
	
	slot = global_slot % ISA_SLOTS_PER_FRAME;
    14f6:	20 91 82 08 	lds	r18, 0x0882
    14fa:	30 91 83 08 	lds	r19, 0x0883
        slot_mask = ((uint32_t) 1) << slot;
	if(_isa_sync_ok == 1){
    14fe:	80 91 8f 08 	lds	r24, 0x088F
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	09 f0       	breq	.+2      	; 0x1508 <isa_nw_task+0xb8>
    1506:	8a c0       	rjmp	.+276    	; 0x161c <isa_nw_task+0x1cc>
        if (global_slot > MAX_ISA_GLOBAL_SLOTS) {
            global_slot -= MAX_ISA_GLOBAL_SLOTS;
            global_cycle++;
        }
	
	slot = global_slot % ISA_SLOTS_PER_FRAME;
    1508:	c9 01       	movw	r24, r18
    150a:	69 e1       	ldi	r22, 0x19	; 25
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	0e 94 30 3a 	call	0x7460	; 0x7460 <__udivmodhi4>
    1512:	d8 2e       	mov	r13, r24
        slot_mask = ((uint32_t) 1) << slot;
	if(_isa_sync_ok == 1){
	    #ifdef CHANNEL_HOPPING
		channelIndex += next_slot_offset;
    1514:	e0 91 81 08 	lds	r30, 0x0881
    1518:	e0 0f       	add	r30, r16
    151a:	e0 93 81 08 	sts	0x0881, r30
		currentChannel = slottedPattern[(channelIndex)&0x0F];
    151e:	ff 27       	eor	r31, r31
    1520:	ef 70       	andi	r30, 0x0F	; 15
    1522:	f0 70       	andi	r31, 0x00	; 0
    1524:	ec 54       	subi	r30, 0x4C	; 76
    1526:	f7 4f       	sbci	r31, 0xF7	; 247
    1528:	80 81       	ld	r24, Z
    152a:	80 93 b3 08 	sts	0x08B3, r24
		isa_set_channel(currentChannel);
    152e:	0e 94 23 0a 	call	0x1446	; 0x1446 <isa_set_channel>
		if(slot>=22 && isa_node_mode == ISA_GATEWAY){
    1532:	85 e1       	ldi	r24, 0x15	; 21
    1534:	8d 15       	cp	r24, r13
    1536:	e0 f4       	brcc	.+56     	; 0x1570 <isa_nw_task+0x120>
    1538:	80 91 36 05 	lds	r24, 0x0536
    153c:	82 30       	cpi	r24, 0x02	; 2
    153e:	c1 f4       	brne	.+48     	; 0x1570 <isa_nw_task+0x120>
		   slowIndex = slowIndex % 3;
    1540:	80 91 88 08 	lds	r24, 0x0888
    1544:	63 e0       	ldi	r22, 0x03	; 3
    1546:	0e 94 24 3a 	call	0x7448	; 0x7448 <__udivmodqi4>
    154a:	e9 2f       	mov	r30, r25
    154c:	90 93 88 08 	sts	0x0888, r25
		   currentChannel = slowPattern[slowIndex];
    1550:	ff 27       	eor	r31, r31
    1552:	e1 55       	subi	r30, 0x51	; 81
    1554:	f7 4f       	sbci	r31, 0xF7	; 247
    1556:	80 81       	ld	r24, Z
    1558:	80 93 b3 08 	sts	0x08B3, r24
		   isa_set_channel(currentChannel);
    155c:	0e 94 23 0a 	call	0x1446	; 0x1446 <isa_set_channel>
		   if(slot>=24)
    1560:	87 e1       	ldi	r24, 0x17	; 23
    1562:	8d 15       	cp	r24, r13
    1564:	28 f4       	brcc	.+10     	; 0x1570 <isa_nw_task+0x120>
		      slowIndex++;
    1566:	80 91 88 08 	lds	r24, 0x0888
    156a:	8f 5f       	subi	r24, 0xFF	; 255
    156c:	80 93 88 08 	sts	0x0888, r24
            global_slot -= MAX_ISA_GLOBAL_SLOTS;
            global_cycle++;
        }
	
	slot = global_slot % ISA_SLOTS_PER_FRAME;
        slot_mask = ((uint32_t) 1) << slot;
    1570:	11 e0       	ldi	r17, 0x01	; 1
    1572:	e1 2e       	mov	r14, r17
    1574:	f1 2c       	mov	r15, r1
    1576:	01 2d       	mov	r16, r1
    1578:	11 2d       	mov	r17, r1
    157a:	0d 2c       	mov	r0, r13
    157c:	04 c0       	rjmp	.+8      	; 0x1586 <isa_nw_task+0x136>
    157e:	ee 0c       	add	r14, r14
    1580:	ff 1c       	adc	r15, r15
    1582:	00 1f       	adc	r16, r16
    1584:	11 1f       	adc	r17, r17
    1586:	0a 94       	dec	r0
    1588:	d2 f7       	brpl	.-12     	; 0x157e <isa_nw_task+0x12e>
		if(slot>=22 && isa_node_mode == ISA_GATEWAY)
		   isa_tx_data_ready |= ((uint32_t) 1 << slot);
	    #endif
	    #ifdef TX_RX_DEBUG
		//printf("R\r\n");
		nrk_gpio_set(NRK_DEBUG_0);
    158a:	8c 2d       	mov	r24, r12
    158c:	0e 94 2d 1c 	call	0x385a	; 0x385a <nrk_gpio_set>
	    #endif
            if (slot_mask & isa_tx_data_ready & isa_tdma_tx_mask){
    1590:	80 91 b4 06 	lds	r24, 0x06B4
    1594:	90 91 b5 06 	lds	r25, 0x06B5
    1598:	a0 91 b6 06 	lds	r26, 0x06B6
    159c:	b0 91 b7 06 	lds	r27, 0x06B7
    15a0:	20 91 fc 02 	lds	r18, 0x02FC
    15a4:	30 91 fd 02 	lds	r19, 0x02FD
    15a8:	40 91 fe 02 	lds	r20, 0x02FE
    15ac:	50 91 ff 02 	lds	r21, 0x02FF
    15b0:	82 23       	and	r24, r18
    15b2:	93 23       	and	r25, r19
    15b4:	a4 23       	and	r26, r20
    15b6:	b5 23       	and	r27, r21
    15b8:	8e 21       	and	r24, r14
    15ba:	9f 21       	and	r25, r15
    15bc:	a0 23       	and	r26, r16
    15be:	b1 23       	and	r27, r17
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	a1 05       	cpc	r26, r1
    15c4:	b1 05       	cpc	r27, r1
    15c6:	31 f0       	breq	.+12     	; 0x15d4 <isa_nw_task+0x184>
		//printf("isa tx slot %d.\n\r",slot);
		//printf("TX %d,%d,%d\n\r",currentChannel,(channelIndex)&0x0F,slot);
		//printf("tx\n\r");
		_isa_tx (slot);
    15c8:	8d 2d       	mov	r24, r13
    15ca:	0e 94 37 08 	call	0x106e	; 0x106e <_isa_tx>
		previous_tx_slot = slot; 
    15ce:	d0 92 7d 08 	sts	0x087D, r13
    15d2:	20 c0       	rjmp	.+64     	; 0x1614 <isa_nw_task+0x1c4>
		#ifdef HIGH_TIMER_DEBUG
	    	    //printf("TX later, high speed timer value is %d.\n\r", _nrk_high_speed_timer_get());
		#endif		
	    } else if ((slot_mask & isa_tdma_rx_mask) && (isa_rx_data_ready == 0)){// if RX slot mask and rx not ready, send a packet
    15d4:	80 91 1e 05 	lds	r24, 0x051E
    15d8:	90 91 1f 05 	lds	r25, 0x051F
    15dc:	a0 91 20 05 	lds	r26, 0x0520
    15e0:	b0 91 21 05 	lds	r27, 0x0521
    15e4:	e8 22       	and	r14, r24
    15e6:	f9 22       	and	r15, r25
    15e8:	0a 23       	and	r16, r26
    15ea:	1b 23       	and	r17, r27
    15ec:	e1 14       	cp	r14, r1
    15ee:	f1 04       	cpc	r15, r1
    15f0:	01 05       	cpc	r16, r1
    15f2:	11 05       	cpc	r17, r1
    15f4:	79 f0       	breq	.+30     	; 0x1614 <isa_nw_task+0x1c4>
    15f6:	80 91 be 07 	lds	r24, 0x07BE
    15fa:	90 91 bf 07 	lds	r25, 0x07BF
    15fe:	a0 91 c0 07 	lds	r26, 0x07C0
    1602:	b0 91 c1 07 	lds	r27, 0x07C1
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	a1 05       	cpc	r26, r1
    160a:	b1 05       	cpc	r27, r1
    160c:	19 f4       	brne	.+6      	; 0x1614 <isa_nw_task+0x1c4>
		//nrk_gpio_set(NRK_DEBUG_0);
	    #endif
		//printf("isa rx slot %d.\n\r",slot);
	//	printf("RX %d,%d %d\n\r",currentChannel,(channelIndex)&0x0F, slot);
		//printf("rx\n\r");
		_isa_rx (slot);
    160e:	8d 2d       	mov	r24, r13
    1610:	0e 94 62 07 	call	0xec4	; 0xec4 <_isa_rx>
	    } 
	    #ifdef TX_RX_DEBUG
		    nrk_gpio_clr(NRK_DEBUG_0);
    1614:	8c 2d       	mov	r24, r12
    1616:	0e 94 b2 1c 	call	0x3964	; 0x3964 <nrk_gpio_clr>
    161a:	0e c0       	rjmp	.+28     	; 0x1638 <isa_nw_task+0x1e8>
		_rtl_rx (slot);
	    }*/ 
	} else	{

	    ///do joining or sync request here
	    DHDR = configDHDR();
    161c:	0e 94 89 05 	call	0xb12	; 0xb12 <configDHDR>
    1620:	80 93 ab 05 	sts	0x05AB, r24
	    if(isa_node_mode != ISA_GATEWAY){//change
    1624:	80 91 36 05 	lds	r24, 0x0536
    1628:	82 30       	cpi	r24, 0x02	; 2
    162a:	19 f0       	breq	.+6      	; 0x1632 <isa_nw_task+0x1e2>
		if(!_isa_join_ok){
		    _isa_join_process();
		}
		#endif

		_isa_sync_ok = _isa_init_sync();
    162c:	0e 94 80 06 	call	0xd00	; 0xd00 <_isa_init_sync>
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <isa_nw_task+0x1e4>

		//printf("waiting for sync...isa_sync_ok is %d.\n\r",_isa_sync_ok);
	    }else if (isa_node_mode == ISA_GATEWAY){
		_isa_sync_ok = 1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	80 93 8f 08 	sts	0x088F, r24
        /*if(FIRST){
		//printf("%d\n\r",_nrk_os_timer_get ());
		next_slot_offset = 1;
		FIRST = 0;
	}*/
	if(slot_expired >= EXPIRATION && isa_node_mode != ISA_GATEWAY){
    1638:	20 91 c6 08 	lds	r18, 0x08C6
    163c:	30 91 c7 08 	lds	r19, 0x08C7
    1640:	80 91 57 02 	lds	r24, 0x0257
    1644:	90 91 58 02 	lds	r25, 0x0258
    1648:	28 17       	cp	r18, r24
    164a:	39 07       	cpc	r19, r25
    164c:	88 f1       	brcs	.+98     	; 0x16b0 <isa_nw_task+0x260>
    164e:	80 91 36 05 	lds	r24, 0x0536
    1652:	82 30       	cpi	r24, 0x02	; 2
    1654:	69 f1       	breq	.+90     	; 0x16b0 <isa_nw_task+0x260>
	    //printf("re-sync\n\r");
	    _isa_sync_ok = 0;
    1656:	10 92 8f 08 	sts	0x088F, r1
	    slot_expired = 0;    
    165a:	10 92 c7 08 	sts	0x08C7, r1
    165e:	10 92 c6 08 	sts	0x08C6, r1
	    global_slot = 100;
    1662:	84 e6       	ldi	r24, 0x64	; 100
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	90 93 83 08 	sts	0x0883, r25
    166a:	80 93 82 08 	sts	0x0882, r24
	    next_slot_offset = 0;
	    resync_times++;
    166e:	80 91 d1 03 	lds	r24, 0x03D1
    1672:	90 91 d2 03 	lds	r25, 0x03D2
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	90 93 d2 03 	sts	0x03D2, r25
    167c:	80 93 d1 03 	sts	0x03D1, r24
	    if(isa_id!=0){
    1680:	80 91 d8 02 	lds	r24, 0x02D8
    1684:	88 23       	and	r24, r24
    1686:	49 f0       	breq	.+18     	; 0x169a <isa_nw_task+0x24a>
	        channelIndex = isa_clk_src_id;
    1688:	e0 91 d3 03 	lds	r30, 0x03D3
    168c:	e0 93 81 08 	sts	0x0881, r30
	        currentChannel = slottedPattern[channelIndex];    
    1690:	ff 27       	eor	r31, r31
    1692:	ec 54       	subi	r30, 0x4C	; 76
    1694:	f7 4f       	sbci	r31, 0xF7	; 247
    1696:	80 81       	ld	r24, Z
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <isa_nw_task+0x252>
	    }else{
	        channelIndex = 0;
    169a:	10 92 81 08 	sts	0x0881, r1
	        currentChannel = slottedPattern[channelIndex];
    169e:	80 91 b4 08 	lds	r24, 0x08B4
    16a2:	80 93 b3 08 	sts	0x08B3, r24
	    }
	    isa_set_channel(currentChannel);
    16a6:	80 91 b3 08 	lds	r24, 0x08B3
    16aa:	0e 94 23 0a 	call	0x1446	; 0x1446 <isa_set_channel>
    16ae:	e6 ce       	rjmp	.-564    	; 0x147c <isa_nw_task+0x2c>

	}else{
	    //printf("global_slot is %d. global cycle is %d.\n\r",global_slot,global_cycle);
	    next_slot_offset = isa_get_slots_until_next_wakeup (global_slot);
    16b0:	80 91 82 08 	lds	r24, 0x0882
    16b4:	90 91 83 08 	lds	r25, 0x0883
    16b8:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <isa_get_slots_until_next_wakeup>
    16bc:	8c 01       	movw	r16, r24
	    //printf("NOS:%d\n\r",next_slot_offset);
	    //printf("%d,%d,%d,%d\n\r",_nrk_os_timer_get (),_nrk_get_next_wakeup (),global_slot,next_slot_offset);
	    global_slot += next_slot_offset;
    16be:	80 91 82 08 	lds	r24, 0x0882
    16c2:	90 91 83 08 	lds	r25, 0x0883
    16c6:	80 0f       	add	r24, r16
    16c8:	91 1f       	adc	r25, r17
    16ca:	90 93 83 08 	sts	0x0883, r25
    16ce:	80 93 82 08 	sts	0x0882, r24
            //nrk_clr_led (1);
	    #ifdef LED_SLOT_DEBUG
	    nrk_led_clr(0);
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <nrk_led_clr>
	    #endif

	    offsetY = 0;
    16da:	10 92 79 08 	sts	0x0879, r1
    16de:	10 92 78 08 	sts	0x0878, r1
	    //printf("%d\n\r",next_slot_offset);

            nrk_wait_until_next_n_periods (next_slot_offset);
    16e2:	c8 01       	movw	r24, r16
    16e4:	0e 94 0f 2b 	call	0x561e	; 0x561e <nrk_wait_until_next_n_periods>


	    #ifdef LED_SLOT_DEBUG
	    nrk_led_set(0);
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <nrk_led_set>
    16f0:	c7 ce       	rjmp	.-626    	; 0x1480 <isa_nw_task+0x30>

000016f2 <isa_init>:
 * This should be called before ANY scheduling information is set
 * since it will clear some default values.
 *
 */
uint8_t isa_init (isa_node_mode_t mode, uint8_t id, uint8_t src_id)
{
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	08 2f       	mov	r16, r24
    16fa:	f6 2e       	mov	r15, r22
    16fc:	14 2f       	mov	r17, r20
    uint8_t i;

    /* Generate signals */
    isa_rx_pkt_signal=nrk_signal_create();
    16fe:	0e 94 75 25 	call	0x4aea	; 0x4aea <nrk_signal_create>
    1702:	80 93 72 08 	sts	0x0872, r24
    if(isa_rx_pkt_signal==NRK_ERROR){
    1706:	8f 3f       	cpi	r24, 0xFF	; 255
    1708:	19 f4       	brne	.+6      	; 0x1710 <isa_init+0x1e>
	nrk_kprintf(PSTR("ISA ERROR: creating rx signal failed\r\n"));
    170a:	84 e6       	ldi	r24, 0x64	; 100
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	08 c0       	rjmp	.+16     	; 0x1720 <isa_init+0x2e>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
    }
    isa_tx_done_signal=nrk_signal_create();
    1710:	0e 94 75 25 	call	0x4aea	; 0x4aea <nrk_signal_create>
    1714:	80 93 80 08 	sts	0x0880, r24
    if(isa_tx_done_signal==NRK_ERROR){
    1718:	8f 3f       	cpi	r24, 0xFF	; 255
    171a:	79 f4       	brne	.+30     	; 0x173a <isa_init+0x48>
	nrk_kprintf(PSTR("ISA ERROR: creating tx signal failed\r\n"));
    171c:	8d e3       	ldi	r24, 0x3D	; 61
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_kprintf>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
    1724:	e0 91 39 0a 	lds	r30, 0x0A39
    1728:	f0 91 3a 0a 	lds	r31, 0x0A3A
    172c:	60 85       	ldd	r22, Z+8	; 0x08
    172e:	8e e0       	ldi	r24, 0x0E	; 14
    1730:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
    1734:	8f ef       	ldi	r24, 0xFF	; 255
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	87 c0       	rjmp	.+270    	; 0x1848 <isa_init+0x156>
	return NRK_ERROR;
    }

    // No buffer to start with
    isa_rfRxInfo.pPayload = NULL;
    173a:	10 92 e8 02 	sts	0x02E8, r1
    173e:	10 92 e7 02 	sts	0x02E7, r1
    isa_rfRxInfo.max_length = 0;
    1742:	10 92 e6 02 	sts	0x02E6, r1

    /*FIXME Actually we dont need to always run the high speed timer */
    _nrk_high_speed_timer_start();  
    1746:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <_nrk_high_speed_timer_start>

    /* clear everything out */
    global_cycle = 0;
    174a:	10 92 77 08 	sts	0x0877, r1
    174e:	10 92 76 08 	sts	0x0876, r1
    global_slot = MAX_ISA_GLOBAL_SLOTS;
    1752:	84 e6       	ldi	r24, 0x64	; 100
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	90 93 83 08 	sts	0x0883, r25
    175a:	80 93 82 08 	sts	0x0882, r24
    _isa_sync_ok = 0;
    175e:	10 92 8f 08 	sts	0x088F, r1
    _isa_join_ok = 0;
    1762:	10 92 19 05 	sts	0x0519, r1
    slot_expired = 0;
    1766:	10 92 c7 08 	sts	0x08C7, r1
    176a:	10 92 c6 08 	sts	0x08C6, r1
    isa_node_mode = mode;
    176e:	00 93 36 05 	sts	0x0536, r16
    isa_id = id;//change
    1772:	f0 92 d8 02 	sts	0x02D8, r15
    isa_clk_src_id=src_id; //change
    1776:	10 93 d3 03 	sts	0x03D3, r17
    isa_rx_data_ready = 0;
    177a:	10 92 be 07 	sts	0x07BE, r1
    177e:	10 92 bf 07 	sts	0x07BF, r1
    1782:	10 92 c0 07 	sts	0x07C0, r1
    1786:	10 92 c1 07 	sts	0x07C1, r1
    isa_tx_data_ready = 0;
    178a:	10 92 fc 02 	sts	0x02FC, r1
    178e:	10 92 fd 02 	sts	0x02FD, r1
    1792:	10 92 fe 02 	sts	0x02FE, r1
    1796:	10 92 ff 02 	sts	0x02FF, r1


    isa_param.mobile_sync_timeout = 100;
    179a:	84 e6       	ldi	r24, 0x64	; 100
    179c:	80 93 fb 02 	sts	0x02FB, r24
    isa_param.rx_timeout = 8000;   // 8000 *.125us = 1ms
    17a0:	80 e4       	ldi	r24, 0x40	; 64
    17a2:	9f e1       	ldi	r25, 0x1F	; 31
    17a4:	90 93 fa 02 	sts	0x02FA, r25
    17a8:	80 93 f9 02 	sts	0x02F9, r24
    isa_param.tx_guard_time = TX_GUARD_TIME;
    17ac:	80 ea       	ldi	r24, 0xA0	; 160
    17ae:	9f e0       	ldi	r25, 0x0F	; 15
    17b0:	90 93 f8 02 	sts	0x02F8, r25
    17b4:	80 93 f7 02 	sts	0x02F7, r24
    isa_param.channel = 15;
    17b8:	8f e0       	ldi	r24, 0x0F	; 15
    17ba:	80 93 f5 02 	sts	0x02F5, r24
    isa_param.mac_addr = 0x1981;
    17be:	81 e8       	ldi	r24, 0x81	; 129
    17c0:	99 e1       	ldi	r25, 0x19	; 25
    17c2:	90 93 f4 02 	sts	0x02F4, r25
    17c6:	80 93 f3 02 	sts	0x02F3, r24
    17ca:	eb eb       	ldi	r30, 0xBB	; 187
    17cc:	f6 e0       	ldi	r31, 0x06	; 6

for (i = 0; i < ISA_SLOTS_PER_FRAME; i++) {
        isa_sched[i] = 0;
    17ce:	11 92       	st	Z+, r1
    isa_param.rx_timeout = 8000;   // 8000 *.125us = 1ms
    isa_param.tx_guard_time = TX_GUARD_TIME;
    isa_param.channel = 15;
    isa_param.mac_addr = 0x1981;

for (i = 0; i < ISA_SLOTS_PER_FRAME; i++) {
    17d0:	86 e0       	ldi	r24, 0x06	; 6
    17d2:	e4 3d       	cpi	r30, 0xD4	; 212
    17d4:	f8 07       	cpc	r31, r24
    17d6:	d9 f7       	brne	.-10     	; 0x17ce <isa_init+0xdc>
        isa_sched[i] = 0;
    }
    isa_tdma_rx_mask = 0;
    17d8:	10 92 1e 05 	sts	0x051E, r1
    17dc:	10 92 1f 05 	sts	0x051F, r1
    17e0:	10 92 20 05 	sts	0x0520, r1
    17e4:	10 92 21 05 	sts	0x0521, r1
    isa_tdma_tx_mask = 0;
    17e8:	10 92 b4 06 	sts	0x06B4, r1
    17ec:	10 92 b5 06 	sts	0x06B5, r1
    17f0:	10 92 b6 06 	sts	0x06B6, r1
    17f4:	10 92 b7 06 	sts	0x06B7, r1

    /* Setup the cc2420 chip */
    rf_init (&isa_rfRxInfo, isa_param.channel, 0x2421, isa_param.mac_addr);
    17f8:	21 e8       	ldi	r18, 0x81	; 129
    17fa:	39 e1       	ldi	r19, 0x19	; 25
    17fc:	41 e2       	ldi	r20, 0x21	; 33
    17fe:	54 e2       	ldi	r21, 0x24	; 36
    1800:	6f e0       	ldi	r22, 0x0F	; 15
    1802:	82 ee       	ldi	r24, 0xE2	; 226
    1804:	92 e0       	ldi	r25, 0x02	; 2
    1806:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <rf_init>

    AFTER_FIRST_SYNC = 1;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	80 93 7c 08 	sts	0x087C, r24

    /* Setup fisrt hopping channel */
    #ifdef CHANNEL_HOPPING
	slowIndex=0; 
    1810:	10 92 88 08 	sts	0x0888, r1
	if(id!=0){
    1814:	ff 20       	and	r15, r15
    1816:	41 f0       	breq	.+16     	; 0x1828 <isa_init+0x136>
	    channelIndex = src_id;
    1818:	10 93 81 08 	sts	0x0881, r17
	    currentChannel = slottedPattern[channelIndex];   
    181c:	e1 2f       	mov	r30, r17
    181e:	ff 27       	eor	r31, r31
    1820:	ec 54       	subi	r30, 0x4C	; 76
    1822:	f7 4f       	sbci	r31, 0xF7	; 247
    1824:	80 81       	ld	r24, Z
    1826:	04 c0       	rjmp	.+8      	; 0x1830 <isa_init+0x13e>
	}else{
	    channelIndex = 0;
    1828:	10 92 81 08 	sts	0x0881, r1
	    currentChannel = slottedPattern[channelIndex];
    182c:	80 91 b4 08 	lds	r24, 0x08B4
    1830:	80 93 b3 08 	sts	0x08B3, r24
	}
	isa_set_channel(currentChannel);
    1834:	80 91 b3 08 	lds	r24, 0x08B3
    1838:	0e 94 23 0a 	call	0x1446	; 0x1446 <isa_set_channel>
    		isa_tx_data_ready |= ((uint32_t) 1 << i);        // set the flag
	   }
        }
    #endif

    resync_times=0;
    183c:	10 92 d2 03 	sts	0x03D2, r1
    1840:	10 92 d1 03 	sts	0x03D1, r1
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	08 95       	ret

00001850 <isa_wait_until_rx_pkt>:
return NRK_OK;
}

int8_t isa_wait_until_rx_pkt()
{
    nrk_signal_register(isa_rx_pkt_signal);
    1850:	80 91 72 08 	lds	r24, 0x0872
    1854:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <nrk_signal_register>
    if (isa_rx_pkt_check() != 0)
    1858:	80 91 be 07 	lds	r24, 0x07BE
    185c:	88 23       	and	r24, r24
    185e:	79 f4       	brne	.+30     	; 0x187e <isa_wait_until_rx_pkt+0x2e>
        return NRK_OK;
    nrk_event_wait (SIG(isa_rx_pkt_signal));
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	00 90 72 08 	lds	r0, 0x0872
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <isa_wait_until_rx_pkt+0x26>
    186e:	66 0f       	add	r22, r22
    1870:	77 1f       	adc	r23, r23
    1872:	88 1f       	adc	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	d2 f7       	brpl	.-12     	; 0x186e <isa_wait_until_rx_pkt+0x1e>
    187a:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <nrk_event_wait>
    return NRK_OK;
}
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	08 95       	ret

00001884 <isa_rx_pkt_get>:
 * isa_release_rx_packet() then resets the value of isa_check_rx_status().
 * 
 * Returns: rx buffer point
 */
uint8_t* isa_rx_pkt_get (uint8_t *len, int8_t *rssi)
{
    1884:	fc 01       	movw	r30, r24
    1886:	db 01       	movw	r26, r22
    if(isa_rx_pkt_check()==0){
    1888:	80 91 be 07 	lds	r24, 0x07BE
    188c:	88 23       	and	r24, r24
    188e:	29 f4       	brne	.+10     	; 0x189a <isa_rx_pkt_get+0x16>
	*len=0;
    1890:	10 82       	st	Z, r1
	*rssi=0;
    1892:	1c 92       	st	X, r1
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	08 95       	ret
	return NULL;
    }
    *len=isa_rfRxInfo.length;
    189a:	80 91 e5 02 	lds	r24, 0x02E5
    189e:	80 83       	st	Z, r24
    *rssi=isa_rfRxInfo.rssi;
    18a0:	80 91 ea 02 	lds	r24, 0x02EA
    18a4:	8c 93       	st	X, r24

    return isa_rfRxInfo.pPayload;
    18a6:	80 91 e7 02 	lds	r24, 0x02E7
    18aa:	90 91 e8 02 	lds	r25, 0x02E8
}
    18ae:	08 95       	ret

000018b0 <_isa_join_process>:
    }//wait for ACK 
}


uint8_t _isa_join_process ()
{
    18b0:	cf 92       	push	r12
    18b2:	df 92       	push	r13
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	ee 24       	eor	r14, r14
    18c2:	ff 24       	eor	r15, r15
    18c4:	02 ee       	ldi	r16, 0xE2	; 226
    18c6:	c0 2e       	mov	r12, r16
    18c8:	02 e0       	ldi	r16, 0x02	; 2
    18ca:	d0 2e       	mov	r13, r16
    battery_save_cnt=0;

    while(1)
    {
	
	rf_set_rx (&isa_rfRxInfo, isa_param.channel);       // sets rx buffer and channel 
    18cc:	60 91 f5 02 	lds	r22, 0x02F5
    18d0:	c6 01       	movw	r24, r12
    18d2:	0e 94 96 1a 	call	0x352c	; 0x352c <rf_set_rx>
	rf_polling_rx_on ();
    18d6:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <rf_polling_rx_on>
	n = 0;
	_isa_sync_ok = 0;
    18da:	10 92 8f 08 	sts	0x088F, r1
    18de:	00 e0       	ldi	r16, 0x00	; 0
    18e0:	12 c0       	rjmp	.+36     	; 0x1906 <_isa_join_process+0x56>
	//_nrk_set_next_wakeup(250);
	//_nrk_os_timer_set(0);
	//timeout=200;
	while ((n = rf_rx_check_sfd()) == 0) {
	    // every OS tick 
	    if(last_nrk_tick!=_nrk_os_timer_get()) {
    18e2:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    18e6:	08 17       	cp	r16, r24
    18e8:	71 f0       	breq	.+28     	; 0x1906 <_isa_join_process+0x56>
		last_nrk_tick=_nrk_os_timer_get();
    18ea:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    18ee:	08 2f       	mov	r16, r24
		timer++;
    18f0:	08 94       	sec
    18f2:	e1 1c       	adc	r14, r1
    18f4:	f1 1c       	adc	r15, r1
		if(timer>ISA_TOKEN_TIMEOUT){
    18f6:	81 e1       	ldi	r24, 0x11	; 17
    18f8:	e8 16       	cp	r14, r24
    18fa:	87 e2       	ldi	r24, 0x27	; 39
    18fc:	f8 06       	cpc	r15, r24
    18fe:	18 f0       	brcs	.+6      	; 0x1906 <_isa_join_process+0x56>
    1900:	ee 24       	eor	r14, r14
    1902:	ff 24       	eor	r15, r15
    1904:	05 c0       	rjmp	.+10     	; 0x1910 <_isa_join_process+0x60>
	last_nrk_tick=0;  // should be 0 going in
	//_nrk_prev_timer_val=250;
	//_nrk_set_next_wakeup(250);
	//_nrk_os_timer_set(0);
	//timeout=200;
	while ((n = rf_rx_check_sfd()) == 0) {
    1906:	0e 94 47 12 	call	0x248e	; 0x248e <rf_rx_check_sfd>
    190a:	18 2f       	mov	r17, r24
    190c:	88 23       	and	r24, r24
    190e:	49 f3       	breq	.-46     	; 0x18e2 <_isa_join_process+0x32>
		}
	    }
	}
	//_nrk_high_speed_timer_reset();

	tdma_start_tick=_nrk_os_timer_get();
    1910:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
	timeout = tdma_start_tick+4;
    1914:	c8 2f       	mov	r28, r24
    1916:	dd 27       	eor	r29, r29
    1918:	24 96       	adiw	r28, 0x04	; 4
	// an interrupt could happen in here and mess things up
	if (n != 0) {
    191a:	11 23       	and	r17, r17
    191c:	71 f0       	breq	.+28     	; 0x193a <_isa_join_process+0x8a>
    191e:	06 c0       	rjmp	.+12     	; 0x192c <_isa_join_process+0x7c>
	    n = 0;
	// Packet on its way
	    while ((n = rf_polling_rx_packet (false,128)) == 0) {
		if (_nrk_os_timer_get () > timeout)
    1920:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    1924:	99 27       	eor	r25, r25
    1926:	c8 17       	cp	r28, r24
    1928:	d9 07       	cpc	r29, r25
    192a:	38 f0       	brcs	.+14     	; 0x193a <_isa_join_process+0x8a>
	timeout = tdma_start_tick+4;
	// an interrupt could happen in here and mess things up
	if (n != 0) {
	    n = 0;
	// Packet on its way
	    while ((n = rf_polling_rx_packet (false,128)) == 0) {
    192c:	60 e8       	ldi	r22, 0x80	; 128
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	0e 94 2c 13 	call	0x2658	; 0x2658 <rf_polling_rx_packet>
    1934:	18 2f       	mov	r17, r24
    1936:	88 23       	and	r24, r24
    1938:	99 f3       	breq	.-26     	; 0x1920 <_isa_join_process+0x70>
		    //nrk_kprintf( PSTR("Pkt timed out\r\n") );
		    break;          // huge timeout as failsafe
		}
	    }
	}
	rf_rx_off (); 
    193a:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <rf_rx_off>
	if (n == 1 /*&& isa_rfRxInfo.length>0*/) {
    193e:	11 30       	cpi	r17, 0x01	; 1
    1940:	29 f6       	brne	.-118    	; 0x18cc <_isa_join_process+0x1c>
	   // if(isa_rfRxInfo.pPayload[SRC_INDEX]==isa_clk_src_id){//change
		// CRC and checksum passed
		if(isa_rfRxInfo.pPayload[DAUX_INDEX+7]==10){ // DAUX packet
    1942:	e0 91 e7 02 	lds	r30, 0x02E7
    1946:	f0 91 e8 02 	lds	r31, 0x02E8
    194a:	84 85       	ldd	r24, Z+12	; 0x0c
    194c:	8a 30       	cpi	r24, 0x0A	; 10
    194e:	09 f0       	breq	.+2      	; 0x1952 <_isa_join_process+0xa2>
    1950:	bd cf       	rjmp	.-134    	; 0x18cc <_isa_join_process+0x1c>
			isa_rx_data_ready = 1;	
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	a0 e0       	ldi	r26, 0x00	; 0
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	80 93 be 07 	sts	0x07BE, r24
    195e:	90 93 bf 07 	sts	0x07BF, r25
    1962:	a0 93 c0 07 	sts	0x07C0, r26
    1966:	b0 93 c1 07 	sts	0x07C1, r27
			//global_slot = (volatile)isa_rfRxInfo.pPayload[SLOT_INDEX];

			isa_set_channel_pattern(isa_rfRxInfo.pPayload[DAUX_INDEX+9]); //set channel hopping pattern
    196a:	86 85       	ldd	r24, Z+14	; 0x0e
    196c:	0e 94 2b 05 	call	0xa56	; 0xa56 <isa_set_channel_pattern>
			channelIndex=isa_rfRxInfo.pPayload[DAUX_INDEX+10];
    1970:	e0 91 e7 02 	lds	r30, 0x02E7
    1974:	f0 91 e8 02 	lds	r31, 0x02E8
    1978:	e7 85       	ldd	r30, Z+15	; 0x0f
    197a:	e0 93 81 08 	sts	0x0881, r30
			currentChannel = slottedPattern[channelIndex];
    197e:	ff 27       	eor	r31, r31
    1980:	ec 54       	subi	r30, 0x4C	; 76
    1982:	f7 4f       	sbci	r31, 0xF7	; 247
    1984:	80 81       	ld	r24, Z
    1986:	80 93 b3 08 	sts	0x08B3, r24
			isa_set_channel(currentChannel);
    198a:	0e 94 23 0a 	call	0x1446	; 0x1446 <isa_set_channel>
			for(i=0;i<4;i++){  // set tx slots
			    if(isa_rfRxInfo.pPayload[DAUX_INDEX+19+i]==0)
    198e:	00 91 e7 02 	lds	r16, 0x02E7
    1992:	10 91 e8 02 	lds	r17, 0x02E8
    1996:	e8 01       	movw	r28, r16
    1998:	6d e4       	ldi	r22, 0x4D	; 77
    199a:	77 e0       	ldi	r23, 0x07	; 7
    199c:	88 8d       	ldd	r24, Y+24	; 0x18
    199e:	88 23       	and	r24, r24
    19a0:	71 f1       	breq	.+92     	; 0x19fe <_isa_join_process+0x14e>
				break;
			    else{
				isa_tdma_tx_mask |= ((uint32_t) 1) << isa_rfRxInfo.pPayload[DAUX_INDEX+19+i];
    19a2:	21 e0       	ldi	r18, 0x01	; 1
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	50 e0       	ldi	r21, 0x00	; 0
    19aa:	04 c0       	rjmp	.+8      	; 0x19b4 <_isa_join_process+0x104>
    19ac:	22 0f       	add	r18, r18
    19ae:	33 1f       	adc	r19, r19
    19b0:	44 1f       	adc	r20, r20
    19b2:	55 1f       	adc	r21, r21
    19b4:	8a 95       	dec	r24
    19b6:	d2 f7       	brpl	.-12     	; 0x19ac <_isa_join_process+0xfc>
    19b8:	80 91 b4 06 	lds	r24, 0x06B4
    19bc:	90 91 b5 06 	lds	r25, 0x06B5
    19c0:	a0 91 b6 06 	lds	r26, 0x06B6
    19c4:	b0 91 b7 06 	lds	r27, 0x06B7
    19c8:	82 2b       	or	r24, r18
    19ca:	93 2b       	or	r25, r19
    19cc:	a4 2b       	or	r26, r20
    19ce:	b5 2b       	or	r27, r21
    19d0:	80 93 b4 06 	sts	0x06B4, r24
    19d4:	90 93 b5 06 	sts	0x06B5, r25
    19d8:	a0 93 b6 06 	sts	0x06B6, r26
    19dc:	b0 93 b7 06 	sts	0x06B7, r27
				isa_sched[isa_rfRxInfo.pPayload[DAUX_INDEX+19+i]] = 1;
    19e0:	e8 8d       	ldd	r30, Y+24	; 0x18
    19e2:	ff 27       	eor	r31, r31
    19e4:	e5 54       	subi	r30, 0x45	; 69
    19e6:	f9 4f       	sbci	r31, 0xF9	; 249
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	80 83       	st	Z, r24
				tx_slot_from_join[i]=isa_rfRxInfo.pPayload[DAUX_INDEX+19+i];
    19ec:	88 8d       	ldd	r24, Y+24	; 0x18
    19ee:	fb 01       	movw	r30, r22
    19f0:	81 93       	st	Z+, r24
    19f2:	bf 01       	movw	r22, r30
    19f4:	21 96       	adiw	r28, 0x01	; 1

			isa_set_channel_pattern(isa_rfRxInfo.pPayload[DAUX_INDEX+9]); //set channel hopping pattern
			channelIndex=isa_rfRxInfo.pPayload[DAUX_INDEX+10];
			currentChannel = slottedPattern[channelIndex];
			isa_set_channel(currentChannel);
			for(i=0;i<4;i++){  // set tx slots
    19f6:	f7 e0       	ldi	r31, 0x07	; 7
    19f8:	61 35       	cpi	r22, 0x51	; 81
    19fa:	7f 07       	cpc	r23, r31
    19fc:	79 f6       	brne	.-98     	; 0x199c <_isa_join_process+0xec>
    19fe:	e8 01       	movw	r28, r16
    1a00:	60 e0       	ldi	r22, 0x00	; 0
			//	printf("TX:%d\r\n",tx_slot_from_join[i]);
                            }
			}			
			
			for(i=0;i<4;i++){  // set rx slots
			    if(isa_rfRxInfo.pPayload[DAUX_INDEX+23+i]==0)
    1a02:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a04:	88 23       	and	r24, r24
    1a06:	49 f1       	breq	.+82     	; 0x1a5a <_isa_join_process+0x1aa>
				break;
			    else{
				isa_tdma_rx_mask |= ((uint32_t) 1) << isa_rfRxInfo.pPayload[DAUX_INDEX+23+i];
    1a08:	21 e0       	ldi	r18, 0x01	; 1
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <_isa_join_process+0x16a>
    1a12:	22 0f       	add	r18, r18
    1a14:	33 1f       	adc	r19, r19
    1a16:	44 1f       	adc	r20, r20
    1a18:	55 1f       	adc	r21, r21
    1a1a:	8a 95       	dec	r24
    1a1c:	d2 f7       	brpl	.-12     	; 0x1a12 <_isa_join_process+0x162>
    1a1e:	80 91 1e 05 	lds	r24, 0x051E
    1a22:	90 91 1f 05 	lds	r25, 0x051F
    1a26:	a0 91 20 05 	lds	r26, 0x0520
    1a2a:	b0 91 21 05 	lds	r27, 0x0521
    1a2e:	82 2b       	or	r24, r18
    1a30:	93 2b       	or	r25, r19
    1a32:	a4 2b       	or	r26, r20
    1a34:	b5 2b       	or	r27, r21
    1a36:	80 93 1e 05 	sts	0x051E, r24
    1a3a:	90 93 1f 05 	sts	0x051F, r25
    1a3e:	a0 93 20 05 	sts	0x0520, r26
    1a42:	b0 93 21 05 	sts	0x0521, r27
				isa_sched[isa_rfRxInfo.pPayload[DAUX_INDEX+23+i]] = 1;
    1a46:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1a48:	ff 27       	eor	r31, r31
    1a4a:	e5 54       	subi	r30, 0x45	; 69
    1a4c:	f9 4f       	sbci	r31, 0xF9	; 249
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	80 83       	st	Z, r24
				tx_slot_from_join[i]=isa_rfRxInfo.pPayload[DAUX_INDEX+19+i];
			//	printf("TX:%d\r\n",tx_slot_from_join[i]);
                            }
			}			
			
			for(i=0;i<4;i++){  // set rx slots
    1a52:	6f 5f       	subi	r22, 0xFF	; 255
    1a54:	21 96       	adiw	r28, 0x01	; 1
    1a56:	64 30       	cpi	r22, 0x04	; 4
    1a58:	a1 f6       	brne	.-88     	; 0x1a02 <_isa_join_process+0x152>
			    else{
				isa_tdma_rx_mask |= ((uint32_t) 1) << isa_rfRxInfo.pPayload[DAUX_INDEX+23+i];
				isa_sched[isa_rfRxInfo.pPayload[DAUX_INDEX+23+i]] = 1;
			    }
			}
			nrk_event_signal(SIG(isa_rx_pkt_signal));
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a0 e0       	ldi	r26, 0x00	; 0
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	00 90 72 08 	lds	r0, 0x0872
    1a66:	04 c0       	rjmp	.+8      	; 0x1a70 <_isa_join_process+0x1c0>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	aa 1f       	adc	r26, r26
    1a6e:	bb 1f       	adc	r27, r27
    1a70:	0a 94       	dec	r0
    1a72:	d2 f7       	brpl	.-12     	; 0x1a68 <_isa_join_process+0x1b8>
    1a74:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <nrk_event_signal>
	}
    }



    _isa_join_ok=1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	80 93 19 05 	sts	0x0519, r24
 *
 */

void isa_rx_pkt_release()
{
    isa_rx_data_ready = 0;
    1a7e:	10 92 be 07 	sts	0x07BE, r1
    1a82:	10 92 bf 07 	sts	0x07BF, r1
    1a86:	10 92 c0 07 	sts	0x07C0, r1
    1a8a:	10 92 c1 07 	sts	0x07C1, r1


    _isa_join_ok=1;
    isa_rx_pkt_release();
    return _isa_join_ok;
}
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	ff 90       	pop	r15
    1a9c:	ef 90       	pop	r14
    1a9e:	df 90       	pop	r13
    1aa0:	cf 90       	pop	r12
    1aa2:	08 95       	ret

00001aa4 <isa_set_schedule>:
#include <nrk_error.h>

/* For ISA */
/* This method is only for demo 1. Need to be updated!! */
int8_t isa_set_schedule (isa_node_mode_t isa_node_mode, uint8_t clk_src_id)
{
    1aa4:	28 2f       	mov	r18, r24
    char i =0;
    isa_clk_src_id = clk_src_id;//change
    1aa6:	60 93 d3 03 	sts	0x03D3, r22
    if (isa_node_mode==ISA_GATEWAY){
    1aaa:	82 30       	cpi	r24, 0x02	; 2
    1aac:	41 f5       	brne	.+80     	; 0x1afe <isa_set_schedule+0x5a>
        isa_tdma_tx_mask |= ((uint32_t) 1) << 2;
    1aae:	80 91 b4 06 	lds	r24, 0x06B4
    1ab2:	90 91 b5 06 	lds	r25, 0x06B5
    1ab6:	a0 91 b6 06 	lds	r26, 0x06B6
    1aba:	b0 91 b7 06 	lds	r27, 0x06B7
    1abe:	84 60       	ori	r24, 0x04	; 4
    1ac0:	80 93 b4 06 	sts	0x06B4, r24
    1ac4:	90 93 b5 06 	sts	0x06B5, r25
    1ac8:	a0 93 b6 06 	sts	0x06B6, r26
    1acc:	b0 93 b7 06 	sts	0x06B7, r27
	isa_tdma_rx_mask |= ((uint32_t) 1) << 3;//change for test
    1ad0:	80 91 1e 05 	lds	r24, 0x051E
    1ad4:	90 91 1f 05 	lds	r25, 0x051F
    1ad8:	a0 91 20 05 	lds	r26, 0x0520
    1adc:	b0 91 21 05 	lds	r27, 0x0521
    1ae0:	88 60       	ori	r24, 0x08	; 8
    1ae2:	80 93 1e 05 	sts	0x051E, r24
    1ae6:	90 93 1f 05 	sts	0x051F, r25
    1aea:	a0 93 20 05 	sts	0x0520, r26
    1aee:	b0 93 21 05 	sts	0x0521, r27
	//isa_tdma_tx_mask |= ((uint32_t) 1) << 1;
	//isa_tdma_rx_mask |= ((uint32_t) 1) << 4;

	//isa_sched[1] = 1;
	isa_sched[2] = 1;//change for test
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	80 93 bd 06 	sts	0x06BD, r24
	isa_sched[3] = 1;
    1af8:	80 93 be 06 	sts	0x06BE, r24
    1afc:	52 c0       	rjmp	.+164    	; 0x1ba2 <isa_set_schedule+0xfe>
	//isa_sched[4] = 1;
    }
    else if (isa_node_mode==ISA_REPEATER){ //change
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	39 f5       	brne	.+78     	; 0x1b50 <isa_set_schedule+0xac>
        isa_tdma_rx_mask |= ((uint32_t) 1) << 2;
    1b02:	80 91 1e 05 	lds	r24, 0x051E
    1b06:	90 91 1f 05 	lds	r25, 0x051F
    1b0a:	a0 91 20 05 	lds	r26, 0x0520
    1b0e:	b0 91 21 05 	lds	r27, 0x0521
    1b12:	84 60       	ori	r24, 0x04	; 4
    1b14:	80 93 1e 05 	sts	0x051E, r24
    1b18:	90 93 1f 05 	sts	0x051F, r25
    1b1c:	a0 93 20 05 	sts	0x0520, r26
    1b20:	b0 93 21 05 	sts	0x0521, r27
	isa_tdma_tx_mask |= ((uint32_t) 1) << 3;//change for test
    1b24:	80 91 b4 06 	lds	r24, 0x06B4
    1b28:	90 91 b5 06 	lds	r25, 0x06B5
    1b2c:	a0 91 b6 06 	lds	r26, 0x06B6
    1b30:	b0 91 b7 06 	lds	r27, 0x06B7
    1b34:	88 60       	ori	r24, 0x08	; 8
    1b36:	80 93 b4 06 	sts	0x06B4, r24
    1b3a:	90 93 b5 06 	sts	0x06B5, r25
    1b3e:	a0 93 b6 06 	sts	0x06B6, r26
    1b42:	b0 93 b7 06 	sts	0x06B7, r27
	//isa_tdma_rx_mask |= ((uint32_t) 1) << 2;
	//isa_tdma_tx_mask |= ((uint32_t) 1) << 3;

	isa_sched[2] = 1;
    1b46:	20 93 bd 06 	sts	0x06BD, r18
	isa_sched[3] = 1;//change for test
    1b4a:	20 93 be 06 	sts	0x06BE, r18
    1b4e:	29 c0       	rjmp	.+82     	; 0x1ba2 <isa_set_schedule+0xfe>
	//isa_sched[2] = 1;
	//isa_sched[3] = 1;

    }
    else if(isa_node_mode==ISA_RECIPIENT){
    1b50:	88 23       	and	r24, r24
    1b52:	39 f5       	brne	.+78     	; 0x1ba2 <isa_set_schedule+0xfe>
	isa_tdma_tx_mask |= ((uint32_t) 1) << 1;
    1b54:	80 91 b4 06 	lds	r24, 0x06B4
    1b58:	90 91 b5 06 	lds	r25, 0x06B5
    1b5c:	a0 91 b6 06 	lds	r26, 0x06B6
    1b60:	b0 91 b7 06 	lds	r27, 0x06B7
    1b64:	82 60       	ori	r24, 0x02	; 2
    1b66:	80 93 b4 06 	sts	0x06B4, r24
    1b6a:	90 93 b5 06 	sts	0x06B5, r25
    1b6e:	a0 93 b6 06 	sts	0x06B6, r26
    1b72:	b0 93 b7 06 	sts	0x06B7, r27
	//isa_tdma_rx_mask |= ((uint32_t) 1) << 1;//change for test
	isa_tdma_rx_mask |= ((uint32_t) 1) << 4;
    1b76:	80 91 1e 05 	lds	r24, 0x051E
    1b7a:	90 91 1f 05 	lds	r25, 0x051F
    1b7e:	a0 91 20 05 	lds	r26, 0x0520
    1b82:	b0 91 21 05 	lds	r27, 0x0521
    1b86:	80 61       	ori	r24, 0x10	; 16
    1b88:	80 93 1e 05 	sts	0x051E, r24
    1b8c:	90 93 1f 05 	sts	0x051F, r25
    1b90:	a0 93 20 05 	sts	0x0520, r26
    1b94:	b0 93 21 05 	sts	0x0521, r27
	//isa_tdma_rx_mask |= ((uint32_t) 1) << 0;

//	isa_sched[0] = 1;
	//isa_sched[1] = 1;//change for test
	isa_sched[1] = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	80 93 bc 06 	sts	0x06BC, r24
	isa_sched[4] = 1;
    1b9e:	80 93 bf 06 	sts	0x06BF, r24
    for(i=0;i<25;i++)
	printf("%d,",isa_sched[i]);
    printf("\n\r");*/
    
return NRK_OK;
}
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	08 95       	ret

00001ba8 <isa_get_schedule>:
 * 
 * Return: schedule value
 */
int8_t isa_get_schedule (uint8_t slot)
{
    if (slot > ISA_SLOTS_PER_FRAME)
    1ba8:	8a 31       	cpi	r24, 0x1A	; 26
    1baa:	18 f0       	brcs	.+6      	; 0x1bb2 <isa_get_schedule+0xa>
    1bac:	8f ef       	ldi	r24, 0xFF	; 255
    1bae:	9f ef       	ldi	r25, 0xFF	; 255
    1bb0:	08 95       	ret
        return NRK_ERROR;

    return isa_sched[slot];
    1bb2:	e8 2f       	mov	r30, r24
    1bb4:	ff 27       	eor	r31, r31
    1bb6:	e5 54       	subi	r30, 0x45	; 69
    1bb8:	f9 4f       	sbci	r31, 0xF9	; 249
    1bba:	80 81       	ld	r24, Z
    1bbc:	99 27       	eor	r25, r25
    1bbe:	87 fd       	sbrc	r24, 7
    1bc0:	90 95       	com	r25
}
    1bc2:	08 95       	ret

00001bc4 <_isa_clear_sched_cache>:
 * This function is called by the timer interrupt at the
 * start of each ISA cycle to remove any cached scheduling
 * values.  Only call this if you are reseting the ISA frames.
 */
void _isa_clear_sched_cache ()
{
    1bc4:	eb eb       	ldi	r30, 0xBB	; 187
    1bc6:	f6 e0       	ldi	r31, 0x06	; 6
    uint8_t i;
// FIXME compress this shit later...
    for (i = 0; i < ISA_SLOTS_PER_FRAME; i++) {
        isa_sched[i] = 0;
    1bc8:	11 92       	st	Z+, r1
 */
void _isa_clear_sched_cache ()
{
    uint8_t i;
// FIXME compress this shit later...
    for (i = 0; i < ISA_SLOTS_PER_FRAME; i++) {
    1bca:	86 e0       	ldi	r24, 0x06	; 6
    1bcc:	e4 3d       	cpi	r30, 0xD4	; 212
    1bce:	f8 07       	cpc	r31, r24
    1bd0:	d9 f7       	brne	.-10     	; 0x1bc8 <_isa_clear_sched_cache+0x4>
    1bd2:	08 95       	ret

00001bd4 <isa_get_slots_until_next_wakeup>:
    uint8_t wrapped_slot;
    uint8_t current_local_slot;
    
//total_slot = (((uint16_t)current_frame)<<5) + current_slot; 
    min_slot = ISA_SLOTS_PER_FRAME + 1;
    current_local_slot = current_global_slot%25;
    1bd4:	69 e1       	ldi	r22, 0x19	; 25
    1bd6:	70 e0       	ldi	r23, 0x00	; 0
    1bd8:	0e 94 30 3a 	call	0x7460	; 0x7460 <__udivmodhi4>
    1bdc:	68 2f       	mov	r22, r24

    //scheduled slot follows current slot
    for (test_slot = current_local_slot+1; test_slot < ISA_SLOTS_PER_FRAME; test_slot++) {
    1bde:	48 2f       	mov	r20, r24
    1be0:	0c c0       	rjmp	.+24     	; 0x1bfa <isa_get_slots_until_next_wakeup+0x26>
	//printf("isa_sched[%d] is %d.\n\r",test_slot,isa_sched[test_slot]);
        if(isa_sched[test_slot]==0) //slot is not scheduled
    1be2:	24 2f       	mov	r18, r20
    1be4:	33 27       	eor	r19, r19
    1be6:	f9 01       	movw	r30, r18
    1be8:	e5 54       	subi	r30, 0x45	; 69
    1bea:	f9 4f       	sbci	r31, 0xF9	; 249
    1bec:	80 81       	ld	r24, Z
    1bee:	88 23       	and	r24, r24
    1bf0:	21 f0       	breq	.+8      	; 0x1bfa <isa_get_slots_until_next_wakeup+0x26>
            continue;
	min_slot = test_slot-current_local_slot;
    1bf2:	c9 01       	movw	r24, r18
    1bf4:	86 1b       	sub	r24, r22
    1bf6:	91 09       	sbc	r25, r1
    1bf8:	08 95       	ret
//total_slot = (((uint16_t)current_frame)<<5) + current_slot; 
    min_slot = ISA_SLOTS_PER_FRAME + 1;
    current_local_slot = current_global_slot%25;

    //scheduled slot follows current slot
    for (test_slot = current_local_slot+1; test_slot < ISA_SLOTS_PER_FRAME; test_slot++) {
    1bfa:	4f 5f       	subi	r20, 0xFF	; 255
    1bfc:	49 31       	cpi	r20, 0x19	; 25
    1bfe:	88 f3       	brcs	.-30     	; 0x1be2 <isa_get_slots_until_next_wakeup+0xe>
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
	return min_slot;
    }

    // scheduled slot wrapped back
    for (test_slot = 0; test_slot<=current_local_slot;test_slot++){ 
	if(isa_sched[test_slot]==0) //slot is not scheduled
    1c04:	42 2f       	mov	r20, r18
    1c06:	55 27       	eor	r21, r21
    1c08:	fa 01       	movw	r30, r20
    1c0a:	e5 54       	subi	r30, 0x45	; 69
    1c0c:	f9 4f       	sbci	r31, 0xF9	; 249
    1c0e:	80 81       	ld	r24, Z
    1c10:	88 23       	and	r24, r24
    1c12:	39 f0       	breq	.+14     	; 0x1c22 <isa_get_slots_until_next_wakeup+0x4e>
            continue;
	min_slot = (ISA_SLOTS_PER_FRAME - current_local_slot + test_slot);
    1c14:	89 e1       	ldi	r24, 0x19	; 25
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	86 1b       	sub	r24, r22
    1c1a:	91 09       	sbc	r25, r1
    1c1c:	84 0f       	add	r24, r20
    1c1e:	95 1f       	adc	r25, r21
    1c20:	08 95       	ret
	return min_slot;
    1c22:	2f 5f       	subi	r18, 0xFF	; 255
    1c24:	3f 4f       	sbci	r19, 0xFF	; 255
	min_slot = test_slot-current_local_slot;
	return min_slot;
    }

    // scheduled slot wrapped back
    for (test_slot = 0; test_slot<=current_local_slot;test_slot++){ 
    1c26:	62 17       	cp	r22, r18
    1c28:	68 f7       	brcc	.-38     	; 0x1c04 <isa_get_slots_until_next_wakeup+0x30>
	if(isa_sched[test_slot]==0) //slot is not scheduled
            continue;
	min_slot = (ISA_SLOTS_PER_FRAME - current_local_slot + test_slot);
	return min_slot;
    }
}
    1c2a:	08 95       	ret

00001c2c <init_adc>:


void init_adc()
{
// Initialize values here
  ADC_INIT ();
    1c2c:	ea e7       	ldi	r30, 0x7A	; 122
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	83 e0       	ldi	r24, 0x03	; 3
    1c32:	80 83       	st	Z, r24
    1c34:	ac e7       	ldi	r26, 0x7C	; 124
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	80 e4       	ldi	r24, 0x40	; 64
    1c3a:	8c 93       	st	X, r24
  ADC_ENABLE ();
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 68       	ori	r24, 0x80	; 128
    1c40:	80 83       	st	Z, r24
  channel=0;
    1c42:	10 92 c9 08 	sts	0x08C9, r1
  ADC_SET_CHANNEL (0);
    1c46:	8c 91       	ld	r24, X
    1c48:	80 7e       	andi	r24, 0xE0	; 224
    1c4a:	8c 93       	st	X, r24
    1c4c:	9c 91       	ld	r25, X
    1c4e:	8c 91       	ld	r24, X
    1c50:	80 7e       	andi	r24, 0xE0	; 224
    1c52:	89 2b       	or	r24, r25
    1c54:	8c 93       	st	X, r24
    1c56:	08 95       	ret

00001c58 <delay>:
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
    1c58:	88 ec       	ldi	r24, 0xC8	; 200
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
    1c60:	08 95       	ret

00001c62 <get_adc_val>:
}

uint16_t get_adc_val()
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
    1c62:	80 91 7a 00 	lds	r24, 0x007A
    1c66:	80 64       	ori	r24, 0x40	; 64
    1c68:	80 93 7a 00 	sts	0x007A, r24
    1c6c:	80 91 7a 00 	lds	r24, 0x007A
    1c70:	84 ff       	sbrs	r24, 4
    1c72:	fc cf       	rjmp	.-8      	; 0x1c6c <get_adc_val+0xa>
	delay();
    1c74:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <delay>
	ADC_GET_SAMPLE_10(adc_val);
    1c78:	20 91 78 00 	lds	r18, 0x0078
    1c7c:	33 27       	eor	r19, r19
    1c7e:	80 91 79 00 	lds	r24, 0x0079
    1c82:	99 27       	eor	r25, r25
    1c84:	98 2f       	mov	r25, r24
    1c86:	88 27       	eor	r24, r24
	return adc_val;
}
    1c88:	82 2b       	or	r24, r18
    1c8a:	93 2b       	or	r25, r19
    1c8c:	08 95       	ret

00001c8e <read_voltage_status>:
// the cc2420 chip to search for the voltage.
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
{
    1c8e:	ff 92       	push	r15
    1c90:	0f 93       	push	r16
    1c92:	1f 93       	push	r17
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	22 97       	sbiw	r28, 0x02	; 2
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
volatile uint16_t val;
uint8_t check,level;
nrk_sem_t *radio_sem;

radio_sem= rf_get_sem();
    1ca8:	0e 94 be 11 	call	0x237c	; 0x237c <rf_get_sem>
    1cac:	8c 01       	movw	r16, r24

// if semaphore not created, then assume you own the radio 
if(radio_sem!=NULL)
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	11 f0       	breq	.+4      	; 0x1cb6 <read_voltage_status+0x28>
 nrk_sem_pend (radio_sem);
    1cb2:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>

    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    1cb6:	15 9a       	sbi	0x02, 5	; 2
    1cb8:	ff 24       	eor	r15, r15
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
{
val=0x0020 | level;
    1cba:	8f 2d       	mov	r24, r15
    1cbc:	80 62       	ori	r24, 0x20	; 32
    1cbe:	99 27       	eor	r25, r25
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
FASTSPI_SETREG(CC2420_BATTMON, val);
    1cc4:	40 98       	cbi	0x08, 0	; 8
    1cc6:	8b e1       	ldi	r24, 0x1B	; 27
    1cc8:	8e bd       	out	0x2e, r24	; 46
    1cca:	0d b4       	in	r0, 0x2d	; 45
    1ccc:	07 fe       	sbrs	r0, 7
    1cce:	fd cf       	rjmp	.-6      	; 0x1cca <read_voltage_status+0x3c>
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd4:	89 2f       	mov	r24, r25
    1cd6:	99 27       	eor	r25, r25
    1cd8:	8e bd       	out	0x2e, r24	; 46
    1cda:	0d b4       	in	r0, 0x2d	; 45
    1cdc:	07 fe       	sbrs	r0, 7
    1cde:	fd cf       	rjmp	.-6      	; 0x1cda <read_voltage_status+0x4c>
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	8e bd       	out	0x2e, r24	; 46
    1ce6:	0d b4       	in	r0, 0x2d	; 45
    1ce8:	07 fe       	sbrs	r0, 7
    1cea:	fd cf       	rjmp	.-6      	; 0x1ce6 <read_voltage_status+0x58>
    1cec:	40 9a       	sbi	0x08, 0	; 8
nrk_spin_wait_us(2);
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
FASTSPI_GETREG(CC2420_BATTMON, val);
    1cf6:	40 98       	cbi	0x08, 0	; 8
    1cf8:	8b e5       	ldi	r24, 0x5B	; 91
    1cfa:	8e bd       	out	0x2e, r24	; 46
    1cfc:	0d b4       	in	r0, 0x2d	; 45
    1cfe:	07 fe       	sbrs	r0, 7
    1d00:	fd cf       	rjmp	.-6      	; 0x1cfc <read_voltage_status+0x6e>
    1d02:	1e bc       	out	0x2e, r1	; 46
    1d04:	0d b4       	in	r0, 0x2d	; 45
    1d06:	07 fe       	sbrs	r0, 7
    1d08:	fd cf       	rjmp	.-6      	; 0x1d04 <read_voltage_status+0x76>
    1d0a:	8e b5       	in	r24, 0x2e	; 46
    1d0c:	99 27       	eor	r25, r25
    1d0e:	98 2f       	mov	r25, r24
    1d10:	88 27       	eor	r24, r24
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	1e bc       	out	0x2e, r1	; 46
    1d18:	0d b4       	in	r0, 0x2d	; 45
    1d1a:	07 fe       	sbrs	r0, 7
    1d1c:	fd cf       	rjmp	.-6      	; 0x1d18 <read_voltage_status+0x8a>
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	2e b5       	in	r18, 0x2e	; 46
    1d24:	33 27       	eor	r19, r19
    1d26:	28 2b       	or	r18, r24
    1d28:	39 2b       	or	r19, r25
    1d2a:	3a 83       	std	Y+2, r19	; 0x02
    1d2c:	29 83       	std	Y+1, r18	; 0x01
    1d2e:	40 9a       	sbi	0x08, 0	; 8
if(val&0x0040) break; 
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	9a 81       	ldd	r25, Y+2	; 0x02
    1d34:	86 fd       	sbrc	r24, 6
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <read_voltage_status+0xb4>
level++;
    1d38:	f3 94       	inc	r15
    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
    1d3a:	2f e1       	ldi	r18, 0x1F	; 31
    1d3c:	f2 16       	cp	r15, r18
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <read_voltage_status+0xb4>
    1d40:	bc cf       	rjmp	.-136    	; 0x1cba <read_voltage_status+0x2c>
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
if(val&0x0040) break; 
level++;
}
if(radio_sem!=NULL)
    1d42:	01 15       	cp	r16, r1
    1d44:	11 05       	cpc	r17, r1
    1d46:	19 f0       	breq	.+6      	; 0x1d4e <read_voltage_status+0xc0>
 nrk_sem_post(radio_sem);
    1d48:	c8 01       	movw	r24, r16
    1d4a:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
if(level==0)
    1d4e:	ff 20       	and	r15, r15
    1d50:	c9 f4       	brne	.+50     	; 0x1d84 <read_voltage_status+0xf6>
  {
  val=get_adc_val();
    1d52:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <get_adc_val>
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	8f 3a       	cpi	r24, 0xAF	; 175
    1d60:	91 05       	cpc	r25, r1
    1d62:	30 f0       	brcs	.+12     	; 0x1d70 <read_voltage_status+0xe2>
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	9a 81       	ldd	r25, Y+2	; 0x02
    1d68:	8e 5a       	subi	r24, 0xAE	; 174
    1d6a:	90 40       	sbci	r25, 0x00	; 0
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	89 83       	std	Y+1, r24	; 0x01
  if(val<330) val=330;
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	9a 81       	ldd	r25, Y+2	; 0x02
    1d74:	8a 54       	subi	r24, 0x4A	; 74
    1d76:	91 40       	sbci	r25, 0x01	; 1
    1d78:	98 f4       	brcc	.+38     	; 0x1da0 <read_voltage_status+0x112>
    1d7a:	8a e4       	ldi	r24, 0x4A	; 74
    1d7c:	91 e0       	ldi	r25, 0x01	; 1
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	0e c0       	rjmp	.+28     	; 0x1da0 <read_voltage_status+0x112>
  }
else val=(9000-(level*125)) / 27;
    1d84:	2d e7       	ldi	r18, 0x7D	; 125
    1d86:	f2 9e       	mul	r15, r18
    1d88:	90 01       	movw	r18, r0
    1d8a:	11 24       	eor	r1, r1
    1d8c:	88 e2       	ldi	r24, 0x28	; 40
    1d8e:	93 e2       	ldi	r25, 0x23	; 35
    1d90:	82 1b       	sub	r24, r18
    1d92:	93 0b       	sbc	r25, r19
    1d94:	6b e1       	ldi	r22, 0x1B	; 27
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	0e 94 44 3a 	call	0x7488	; 0x7488 <__divmodhi4>
    1d9c:	7a 83       	std	Y+2, r23	; 0x02
    1d9e:	69 83       	std	Y+1, r22	; 0x01

return val;
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	9a 81       	ldd	r25, Y+2	; 0x02
    1da4:	22 96       	adiw	r28, 0x02	; 2
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	ff 90       	pop	r15
    1dba:	08 95       	ret

00001dbc <dev_manager_ff_sensors>:
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
    1dbc:	cf 92       	push	r12
    1dbe:	df 92       	push	r13
    1dc0:	ef 92       	push	r14
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	98 2f       	mov	r25, r24
    1dce:	ea 01       	movw	r28, r20
    1dd0:	12 2f       	mov	r17, r18
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

     switch(action)
    1dd2:	82 30       	cpi	r24, 0x02	; 2
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <dev_manager_ff_sensors+0x1c>
    1dd6:	81 c0       	rjmp	.+258    	; 0x1eda <dev_manager_ff_sensors+0x11e>
    1dd8:	83 30       	cpi	r24, 0x03	; 3
    1dda:	30 f4       	brcc	.+12     	; 0x1de8 <dev_manager_ff_sensors+0x2c>
    1ddc:	88 23       	and	r24, r24
    1dde:	71 f0       	breq	.+28     	; 0x1dfc <dev_manager_ff_sensors+0x40>
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <dev_manager_ff_sensors+0x2a>
    1de4:	d2 c0       	rjmp	.+420    	; 0x1f8a <dev_manager_ff_sensors+0x1ce>
    1de6:	10 c0       	rjmp	.+32     	; 0x1e08 <dev_manager_ff_sensors+0x4c>
    1de8:	84 30       	cpi	r24, 0x04	; 4
    1dea:	09 f4       	brne	.+2      	; 0x1dee <dev_manager_ff_sensors+0x32>
    1dec:	81 c0       	rjmp	.+258    	; 0x1ef0 <dev_manager_ff_sensors+0x134>
    1dee:	84 30       	cpi	r24, 0x04	; 4
    1df0:	08 f4       	brcc	.+2      	; 0x1df4 <dev_manager_ff_sensors+0x38>
    1df2:	77 c0       	rjmp	.+238    	; 0x1ee2 <dev_manager_ff_sensors+0x126>
    1df4:	85 30       	cpi	r24, 0x05	; 5
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <dev_manager_ff_sensors+0x3e>
    1df8:	c8 c0       	rjmp	.+400    	; 0x1f8a <dev_manager_ff_sensors+0x1ce>
    1dfa:	2d c0       	rjmp	.+90     	; 0x1e56 <dev_manager_ff_sensors+0x9a>
     {
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
    1dfc:	80 e8       	ldi	r24, 0x80	; 128
    1dfe:	80 bb       	out	0x10, r24	; 16
			PORTF |= PWR_CTRL_MASK;
    1e00:	8f 9a       	sbi	0x11, 7	; 17
	     		init_adc();  
    1e02:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <init_adc>
    1e06:	6a c0       	rjmp	.+212    	; 0x1edc <dev_manager_ff_sensors+0x120>
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    1e08:	80 91 c8 08 	lds	r24, 0x08C8
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <dev_manager_ff_sensors+0x56>
    1e10:	c3 c0       	rjmp	.+390    	; 0x1f98 <dev_manager_ff_sensors+0x1dc>
		    is_open=1; 
    1e12:	90 93 c8 08 	sts	0x08C8, r25
		    if(opt&READ_FLAG)
    1e16:	77 27       	eor	r23, r23
    1e18:	60 ff       	sbrs	r22, 0
    1e1a:	13 c0       	rjmp	.+38     	; 0x1e42 <dev_manager_ff_sensors+0x86>
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
    1e1c:	8f 98       	cbi	0x11, 7	; 17
  			channel=0;
    1e1e:	10 92 c9 08 	sts	0x08C9, r1
  			ADC_SET_CHANNEL (0);
    1e22:	80 91 7c 00 	lds	r24, 0x007C
    1e26:	80 7e       	andi	r24, 0xE0	; 224
    1e28:	80 93 7c 00 	sts	0x007C, r24
    1e2c:	90 91 7c 00 	lds	r25, 0x007C
    1e30:	80 91 7c 00 	lds	r24, 0x007C
    1e34:	80 7e       	andi	r24, 0xE0	; 224
    1e36:	89 2b       	or	r24, r25
    1e38:	80 93 7c 00 	sts	0x007C, r24
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    1e3c:	88 ee       	ldi	r24, 0xE8	; 232
    1e3e:	93 e0       	ldi	r25, 0x03	; 3
    1e40:	9f c0       	rjmp	.+318    	; 0x1f80 <dev_manager_ff_sensors+0x1c4>
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
    1e42:	61 fd       	sbrc	r22, 1
    1e44:	a9 c0       	rjmp	.+338    	; 0x1f98 <dev_manager_ff_sensors+0x1dc>
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
    1e46:	62 fd       	sbrc	r22, 2
    1e48:	a7 c0       	rjmp	.+334    	; 0x1f98 <dev_manager_ff_sensors+0x1dc>
		    {
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
    1e4a:	67 70       	andi	r22, 0x07	; 7
    1e4c:	70 70       	andi	r23, 0x00	; 0
    1e4e:	67 2b       	or	r22, r23
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <dev_manager_ff_sensors+0x98>
    1e52:	a2 c0       	rjmp	.+324    	; 0x1f98 <dev_manager_ff_sensors+0x1dc>
    1e54:	97 c0       	rjmp	.+302    	; 0x1f84 <dev_manager_ff_sensors+0x1c8>
		
	    

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
    1e56:	82 2f       	mov	r24, r18
    1e58:	81 50       	subi	r24, 0x01	; 1
    1e5a:	82 30       	cpi	r24, 0x02	; 2
    1e5c:	08 f0       	brcs	.+2      	; 0x1e60 <dev_manager_ff_sensors+0xa4>
    1e5e:	99 c0       	rjmp	.+306    	; 0x1f92 <dev_manager_ff_sensors+0x1d6>
			if(channel!=BAT && channel<7)
    1e60:	90 91 c9 08 	lds	r25, 0x08C9
    1e64:	89 2f       	mov	r24, r25
    1e66:	81 50       	subi	r24, 0x01	; 1
    1e68:	86 30       	cpi	r24, 0x06	; 6
    1e6a:	18 f4       	brcc	.+6      	; 0x1e72 <dev_manager_ff_sensors+0xb6>
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();
    1e6c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <get_adc_val>
    1e70:	22 c0       	rjmp	.+68     	; 0x1eb6 <dev_manager_ff_sensors+0xfa>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}


			} else if(channel==BAT)
    1e72:	99 23       	and	r25, r25
    1e74:	19 f4       	brne	.+6      	; 0x1e7c <dev_manager_ff_sensors+0xc0>
			{
			uint16_t tmp;
			tmp=read_voltage_status();
    1e76:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <read_voltage_status>
    1e7a:	1d c0       	rjmp	.+58     	; 0x1eb6 <dev_manager_ff_sensors+0xfa>
				}
			if(size==1)
				{
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
    1e7c:	97 30       	cpi	r25, 0x07	; 7
    1e7e:	51 f5       	brne	.+84     	; 0x1ed4 <dev_manager_ff_sensors+0x118>
    1e80:	f1 e0       	ldi	r31, 0x01	; 1
    1e82:	cf 2e       	mov	r12, r31
    1e84:	f4 e0       	ldi	r31, 0x04	; 4
    1e86:	df 2e       	mov	r13, r31
    1e88:	ee 24       	eor	r14, r14
    1e8a:	ff 24       	eor	r15, r15
    1e8c:	00 e0       	ldi	r16, 0x00	; 0
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
    1e8e:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <get_adc_val>
    1e92:	8c 15       	cp	r24, r12
    1e94:	9d 05       	cpc	r25, r13
    1e96:	08 f4       	brcc	.+2      	; 0x1e9a <dev_manager_ff_sensors+0xde>
    1e98:	6c 01       	movw	r12, r24
    1e9a:	e8 16       	cp	r14, r24
    1e9c:	f9 06       	cpc	r15, r25
    1e9e:	08 f4       	brcc	.+2      	; 0x1ea2 <dev_manager_ff_sensors+0xe6>
    1ea0:	7c 01       	movw	r14, r24
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
    1ea2:	8d e7       	ldi	r24, 0x7D	; 125
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
    1eaa:	0f 5f       	subi	r16, 0xFF	; 255
    1eac:	00 34       	cpi	r16, 0x40	; 64
    1eae:	79 f7       	brne	.-34     	; 0x1e8e <dev_manager_ff_sensors+0xd2>
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
				}
			 	val=max-min;	
    1eb0:	c7 01       	movw	r24, r14
    1eb2:	8c 19       	sub	r24, r12
    1eb4:	9d 09       	sbc	r25, r13
				if(size==2)
    1eb6:	12 30       	cpi	r17, 0x02	; 2
    1eb8:	31 f4       	brne	.+12     	; 0x1ec6 <dev_manager_ff_sensors+0x10a>
			      	{
					buffer[count]=val  & 0xFF;
    1eba:	88 83       	st	Y, r24
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    1ebc:	89 2f       	mov	r24, r25
    1ebe:	99 27       	eor	r25, r25
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	08 c0       	rjmp	.+16     	; 0x1ed6 <dev_manager_ff_sensors+0x11a>
				}

				if(size==1)
    1ec6:	11 30       	cpi	r17, 0x01	; 1
    1ec8:	29 f4       	brne	.+10     	; 0x1ed4 <dev_manager_ff_sensors+0x118>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
    1eca:	96 95       	lsr	r25
    1ecc:	87 95       	ror	r24
    1ece:	96 95       	lsr	r25
    1ed0:	87 95       	ror	r24
    1ed2:	88 83       	st	Y, r24
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
				}

			}
			
		      count++;
                      return count;
    1ed6:	8f 5f       	subi	r24, 0xFF	; 255
    1ed8:	09 c0       	rjmp	.+18     	; 0x1eec <dev_manager_ff_sensors+0x130>

             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
    1eda:	8f 9a       	sbi	0x11, 7	; 17
		    	is_open=0; 
    1edc:	10 92 c8 08 	sts	0x08C8, r1
    1ee0:	51 c0       	rjmp	.+162    	; 0x1f84 <dev_manager_ff_sensors+0x1c8>
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
    1ee2:	61 30       	cpi	r22, 0x01	; 1
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <dev_manager_ff_sensors+0x12c>
    1ee6:	58 c0       	rjmp	.+176    	; 0x1f98 <dev_manager_ff_sensors+0x1dc>
    1ee8:	80 91 c9 08 	lds	r24, 0x08C9
    1eec:	99 27       	eor	r25, r25
    1eee:	56 c0       	rjmp	.+172    	; 0x1f9c <dev_manager_ff_sensors+0x1e0>
	     		return NRK_ERROR;
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    1ef0:	61 30       	cpi	r22, 0x01	; 1
    1ef2:	09 f0       	breq	.+2      	; 0x1ef6 <dev_manager_ff_sensors+0x13a>
    1ef4:	51 c0       	rjmp	.+162    	; 0x1f98 <dev_manager_ff_sensors+0x1dc>
			{
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
    1ef6:	27 30       	cpi	r18, 0x07	; 7
    1ef8:	d9 f4       	brne	.+54     	; 0x1f30 <dev_manager_ff_sensors+0x174>
			  {
				channel=value;
    1efa:	20 93 c9 08 	sts	0x08C9, r18
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
    1efe:	80 91 7c 00 	lds	r24, 0x007C
    1f02:	8f 77       	andi	r24, 0x7F	; 127
    1f04:	80 93 7c 00 	sts	0x007C, r24
    1f08:	80 91 7c 00 	lds	r24, 0x007C
    1f0c:	80 64       	ori	r24, 0x40	; 64
    1f0e:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (AUDIO);
    1f12:	80 91 7c 00 	lds	r24, 0x007C
    1f16:	80 7e       	andi	r24, 0xE0	; 224
    1f18:	80 93 7c 00 	sts	0x007C, r24
    1f1c:	90 91 7c 00 	lds	r25, 0x007C
    1f20:	80 91 7c 00 	lds	r24, 0x007C
    1f24:	93 60       	ori	r25, 0x03	; 3
    1f26:	80 7e       	andi	r24, 0xE0	; 224
    1f28:	98 2b       	or	r25, r24
    1f2a:	90 93 7c 00 	sts	0x007C, r25
    1f2e:	26 c0       	rjmp	.+76     	; 0x1f7c <dev_manager_ff_sensors+0x1c0>
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;

			  } else
			  {
				if(value>7) 
    1f30:	28 30       	cpi	r18, 0x08	; 8
    1f32:	20 f0       	brcs	.+8      	; 0x1f3c <dev_manager_ff_sensors+0x180>
				{
					_nrk_errno_set(1);
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	0e 94 a9 23 	call	0x4752	; 0x4752 <_nrk_errno_set>
    1f3a:	2e c0       	rjmp	.+92     	; 0x1f98 <dev_manager_ff_sensors+0x1dc>
					return NRK_ERROR;
				}
				channel=value;
    1f3c:	20 93 c9 08 	sts	0x08C9, r18
				if(channel==LIGHT)
    1f40:	21 30       	cpi	r18, 0x01	; 1
    1f42:	49 f4       	brne	.+18     	; 0x1f56 <dev_manager_ff_sensors+0x19a>
				   ADC_VREF_VCC();	
    1f44:	80 91 7c 00 	lds	r24, 0x007C
    1f48:	8f 77       	andi	r24, 0x7F	; 127
    1f4a:	80 93 7c 00 	sts	0x007C, r24
    1f4e:	80 91 7c 00 	lds	r24, 0x007C
    1f52:	80 64       	ori	r24, 0x40	; 64
    1f54:	03 c0       	rjmp	.+6      	; 0x1f5c <dev_manager_ff_sensors+0x1a0>
				else
				   ADC_VREF_2_56();	
    1f56:	80 91 7c 00 	lds	r24, 0x007C
    1f5a:	80 6c       	ori	r24, 0xC0	; 192
    1f5c:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (channel);
    1f60:	80 91 7c 00 	lds	r24, 0x007C
    1f64:	80 7e       	andi	r24, 0xE0	; 224
    1f66:	80 93 7c 00 	sts	0x007C, r24
    1f6a:	90 91 7c 00 	lds	r25, 0x007C
    1f6e:	80 91 7c 00 	lds	r24, 0x007C
    1f72:	80 7e       	andi	r24, 0xE0	; 224
    1f74:	89 2b       	or	r24, r25
    1f76:	81 2b       	or	r24, r17
    1f78:	80 93 7c 00 	sts	0x007C, r24
				nrk_spin_wait_us(ADC_SETUP_DELAY);
    1f7c:	88 ec       	ldi	r24, 0xC8	; 200
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	09 c0       	rjmp	.+18     	; 0x1f9c <dev_manager_ff_sensors+0x1e0>
				return NRK_OK;
			  }
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	8c e0       	ldi	r24, 0x0C	; 12
    1f8e:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <dev_manager_ff_sensors+0x1e0>
		 return 0;
    1f98:	8f ef       	ldi	r24, 0xFF	; 255
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	ff 90       	pop	r15
    1fa6:	ef 90       	pop	r14
    1fa8:	df 90       	pop	r13
    1faa:	cf 90       	pop	r12
    1fac:	08 95       	ret

00001fae <slip_started>:
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    1fae:	80 91 59 02 	lds	r24, 0x0259
		    	return NRK_OK;
		    }
    1fb2:	99 27       	eor	r25, r25
    1fb4:	87 fd       	sbrc	r24, 7
    1fb6:	90 95       	com	r25
    1fb8:	08 95       	ret

00001fba <get_byte>:

#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

    1fba:	80 91 d0 08 	lds	r24, 0x08D0
    1fbe:	90 91 d1 08 	lds	r25, 0x08D1
    1fc2:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <fgetc>
#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)
    1fc6:	99 27       	eor	r25, r25
    1fc8:	08 95       	ret

00001fca <slip_rx>:
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
    1fca:	8f 92       	push	r8
    1fcc:	9f 92       	push	r9
    1fce:	af 92       	push	r10
    1fd0:	bf 92       	push	r11
    1fd2:	cf 92       	push	r12
    1fd4:	df 92       	push	r13
    1fd6:	ef 92       	push	r14
    1fd8:	ff 92       	push	r15
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	ec 01       	movw	r28, r24
    1fe4:	86 2e       	mov	r8, r22
		    {
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
		    else return NRK_OK;
    1fe6:	0e 94 84 20 	call	0x4108	; 0x4108 <nrk_uart_rx_signal_get>
    1fea:	d8 2e       	mov	r13, r24
		
	    
    1fec:	8f ef       	ldi	r24, 0xFF	; 255
    1fee:	d8 16       	cp	r13, r24
    1ff0:	21 f4       	brne	.+8      	; 0x1ffa <slip_rx+0x30>

    1ff2:	80 eb       	ldi	r24, 0xB0	; 176
    1ff4:	91 e0       	ldi	r25, 0x01	; 1
    1ff6:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_kprintf>
             case READ:
	     	      count=0;
    1ffa:	8d 2d       	mov	r24, r13
    1ffc:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <nrk_signal_register>
		      if(size!=1 && size!=2) return 0;
    2000:	8f 3f       	cpi	r24, 0xFF	; 255
    2002:	71 f4       	brne	.+28     	; 0x2020 <slip_rx+0x56>
    2004:	8b e8       	ldi	r24, 0x8B	; 139
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_kprintf>
    200c:	09 c0       	rjmp	.+18     	; 0x2020 <slip_rx+0x56>
			      uint16_t val=get_adc_val();

				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
    200e:	80 91 68 0a 	lds	r24, 0x0A68
    2012:	90 91 69 0a 	lds	r25, 0x0A69
    2016:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <fgetc>
			      		buffer[count]=(val>>8)  & 0xFF;
    201a:	81 3c       	cpi	r24, 0xC1	; 193
    201c:	91 f0       	breq	.+36     	; 0x2042 <slip_rx+0x78>
    201e:	0c c0       	rjmp	.+24     	; 0x2038 <slip_rx+0x6e>
				}

				if(size==1)
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	e8 2e       	mov	r14, r24
    2024:	f1 2c       	mov	r15, r1
    2026:	01 2d       	mov	r16, r1
    2028:	11 2d       	mov	r17, r1
    202a:	04 c0       	rjmp	.+8      	; 0x2034 <slip_rx+0x6a>
    202c:	ee 0c       	add	r14, r14
    202e:	ff 1c       	adc	r15, r15
    2030:	00 1f       	adc	r16, r16
    2032:	11 1f       	adc	r17, r17
    2034:	da 94       	dec	r13
    2036:	d2 f7       	brpl	.-12     	; 0x202c <slip_rx+0x62>
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();

				if(size==2)
			      	{
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <nrk_uart_data_ready>
    203e:	88 23       	and	r24, r24
    2040:	31 f7       	brne	.-52     	; 0x200e <slip_rx+0x44>
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}

				if(size==1)
    2042:	57 01       	movw	r10, r14
    2044:	68 01       	movw	r12, r16
    2046:	c8 01       	movw	r24, r16
    2048:	b7 01       	movw	r22, r14
    204a:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <nrk_event_wait>
			      	{
    204e:	80 91 68 0a 	lds	r24, 0x0A68
    2052:	90 91 69 0a 	lds	r25, 0x0A69
    2056:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <fgetc>
    205a:	98 2e       	mov	r9, r24
			      		buffer[count]=(val>>2)  & 0xFF;
    205c:	81 ec       	ldi	r24, 0xC1	; 193
    205e:	98 16       	cp	r9, r24
    2060:	59 f7       	brne	.-42     	; 0x2038 <slip_rx+0x6e>
				}


			} else if(channel==BAT)
    2062:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <get_byte>
    2066:	f8 2e       	mov	r15, r24
    2068:	10 e0       	ldi	r17, 0x00	; 0
    206a:	00 e0       	ldi	r16, 0x00	; 0
    206c:	2b c0       	rjmp	.+86     	; 0x20c4 <slip_rx+0xfa>
			{
			uint16_t tmp;
			tmp=read_voltage_status();
			if(size==2)
				{
    206e:	80 91 68 0a 	lds	r24, 0x0A68
    2072:	90 91 69 0a 	lds	r25, 0x0A69
    2076:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <fgetc>
					buffer[count]=tmp & 0xFF;
					count++;
					buffer[count]=(tmp>>8) & 0xFF;
    207a:	80 3c       	cpi	r24, 0xC0	; 192
    207c:	19 f0       	breq	.+6      	; 0x2084 <slip_rx+0xba>
    207e:	8b 3d       	cpi	r24, 0xDB	; 219
    2080:	59 f0       	breq	.+22     	; 0x2098 <slip_rx+0xce>
    2082:	15 c0       	rjmp	.+42     	; 0x20ae <slip_rx+0xe4>
			}else if(channel==AUDIO_P2P)
			{
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
    2084:	11 23       	and	r17, r17
    2086:	41 f1       	breq	.+80     	; 0x20d8 <slip_rx+0x10e>
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
    2088:	0f 77       	andi	r16, 0x7F	; 127
    208a:	90 16       	cp	r9, r16
    208c:	29 f5       	brne	.+74     	; 0x20d8 <slip_rx+0x10e>
				{
    208e:	81 2f       	mov	r24, r17
    2090:	99 27       	eor	r25, r25
    2092:	87 fd       	sbrc	r24, 7
    2094:	90 95       	com	r25
    2096:	22 c0       	rjmp	.+68     	; 0x20dc <slip_rx+0x112>
				}
			 	val=max-min;	
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <nrk_uart_data_ready>
    209e:	88 23       	and	r24, r24
    20a0:	21 f4       	brne	.+8      	; 0x20aa <slip_rx+0xe0>
			      		buffer[count]=(val>>8)  & 0xFF;
    20a2:	c6 01       	movw	r24, r12
    20a4:	b5 01       	movw	r22, r10
    20a6:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <nrk_event_wait>
				}
    20aa:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <get_byte>
    20ae:	98 2e       	mov	r9, r24
             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
		    	is_open=0; 
                        return NRK_OK;
             
    20b0:	18 15       	cp	r17, r8
    20b2:	40 f4       	brcc	.+16     	; 0x20c4 <slip_rx+0xfa>
    20b4:	1f 15       	cp	r17, r15
    20b6:	30 f4       	brcc	.+12     	; 0x20c4 <slip_rx+0xfa>
	     case GET_STATUS:
    20b8:	fe 01       	movw	r30, r28
    20ba:	e1 0f       	add	r30, r17
    20bc:	f1 1d       	adc	r31, r1
    20be:	80 83       	st	Z, r24
    20c0:	1f 5f       	subi	r17, 0xFF	; 255
	     		// use "key" here 
    20c2:	08 0f       	add	r16, r24


			} else if(channel==BAT)
			{
			uint16_t tmp;
			tmp=read_voltage_status();
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <nrk_uart_data_ready>
    20ca:	88 23       	and	r24, r24
    20cc:	81 f6       	brne	.-96     	; 0x206e <slip_rx+0xa4>
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
	     		return NRK_ERROR;
			
             case SET_STATUS:
    20ce:	c6 01       	movw	r24, r12
    20d0:	b5 01       	movw	r22, r10
    20d2:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <nrk_event_wait>
    20d6:	f6 cf       	rjmp	.-20     	; 0x20c4 <slip_rx+0xfa>
	     		// use "key" and "value" here
    20d8:	8f ef       	ldi	r24, 0xFF	; 255
    20da:	9f ef       	ldi	r25, 0xFF	; 255
    20dc:	df 91       	pop	r29
    20de:	cf 91       	pop	r28
    20e0:	1f 91       	pop	r17
    20e2:	0f 91       	pop	r16
    20e4:	ff 90       	pop	r15
    20e6:	ef 90       	pop	r14
    20e8:	df 90       	pop	r13
    20ea:	cf 90       	pop	r12
    20ec:	bf 90       	pop	r11
    20ee:	af 90       	pop	r10
    20f0:	9f 90       	pop	r9
    20f2:	8f 90       	pop	r8
    20f4:	08 95       	ret

000020f6 <put_byte>:
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)


#define ADC_VREF_1_1() \
    20f6:	1f 93       	push	r17
    20f8:	18 2f       	mov	r17, r24
   do { \
    20fa:	20 91 ca 08 	lds	r18, 0x08CA
    20fe:	22 23       	and	r18, r18
    2100:	69 f0       	breq	.+26     	; 0x211c <put_byte+0x26>
	ADMUX &= ~(BM(REFS0));  \
    2102:	33 27       	eor	r19, r19
    2104:	88 ee       	ldi	r24, 0xE8	; 232
    2106:	93 e0       	ldi	r25, 0x03	; 3
    2108:	ac 01       	movw	r20, r24
    210a:	24 9f       	mul	r18, r20
    210c:	c0 01       	movw	r24, r0
    210e:	25 9f       	mul	r18, r21
    2110:	90 0d       	add	r25, r0
    2112:	34 9f       	mul	r19, r20
    2114:	90 0d       	add	r25, r0
    2116:	11 24       	eor	r1, r1
    2118:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
	ADMUX |= BM(REFS1);  \
    211c:	60 91 cb 08 	lds	r22, 0x08CB
    2120:	70 91 cc 08 	lds	r23, 0x08CC
    2124:	81 2f       	mov	r24, r17
    2126:	99 27       	eor	r25, r25
    2128:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
    212c:	1f 91       	pop	r17
    212e:	08 95       	ret

00002130 <slip_tx>:
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
    2130:	ff 92       	push	r15
    2132:	0f 93       	push	r16
    2134:	1f 93       	push	r17
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	ec 01       	movw	r28, r24
    213c:	16 2f       	mov	r17, r22

#define ADC_SAMPLE_SINGLE() \
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
} while(0)
    213e:	61 38       	cpi	r22, 0x81	; 129
    2140:	10 f0       	brcs	.+4      	; 0x2146 <slip_tx+0x16>

    2142:	83 e0       	ldi	r24, 0x03	; 3
    2144:	3e c0       	rjmp	.+124    	; 0x21c2 <slip_tx+0x92>
// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
do { \
x =  ADCL; \
    2146:	80 91 cd 08 	lds	r24, 0x08CD
    214a:	90 91 ce 08 	lds	r25, 0x08CE
    214e:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
x |= ADCH << 8; \
    2152:	8f 3f       	cpi	r24, 0xFF	; 255
    2154:	31 f4       	brne	.+12     	; 0x2162 <slip_tx+0x32>
} while (0)
    2156:	8a ef       	ldi	r24, 0xFA	; 250
    2158:	91 e0       	ldi	r25, 0x01	; 1
    215a:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_kprintf>

    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	30 c0       	rjmp	.+96     	; 0x21c2 <slip_tx+0x92>
#define ADC_GET_SAMPLE_8(x) \
do { \
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
} while (0)
    2162:	81 ec       	ldi	r24, 0xC1	; 193
    2164:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <put_byte>

    2168:	81 2f       	mov	r24, r17
    216a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <put_byte>
    216e:	ff 24       	eor	r15, r15
    2170:	00 e0       	ldi	r16, 0x00	; 0
    2172:	0e c0       	rjmp	.+28     	; 0x2190 <slip_tx+0x60>
uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
    2174:	88 81       	ld	r24, Y
    2176:	80 3c       	cpi	r24, 0xC0	; 192
    2178:	11 f0       	breq	.+4      	; 0x217e <slip_tx+0x4e>
    217a:	8b 3d       	cpi	r24, 0xDB	; 219
    217c:	19 f4       	brne	.+6      	; 0x2184 <slip_tx+0x54>
uint8_t value=size;
    217e:	8b ed       	ldi	r24, 0xDB	; 219
    2180:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <put_byte>

    2184:	88 81       	ld	r24, Y
    2186:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <put_byte>
     switch(action)
    218a:	89 91       	ld	r24, Y+
    218c:	08 0f       	add	r16, r24

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
uint8_t count=0;
// key and value get passed as opt and size
    218e:	f3 94       	inc	r15
    2190:	f1 16       	cp	r15, r17
    2192:	81 f7       	brne	.-32     	; 0x2174 <slip_tx+0x44>
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
    2194:	80 2f       	mov	r24, r16
    2196:	8f 77       	andi	r24, 0x7F	; 127
    2198:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <put_byte>
		      return 1;
    219c:	80 ec       	ldi	r24, 0xC0	; 192
    219e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <put_byte>
	     
    21a2:	80 91 cd 08 	lds	r24, 0x08CD
    21a6:	90 91 ce 08 	lds	r25, 0x08CE
    21aa:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
	    case OPEN:  
    21ae:	8f 3f       	cpi	r24, 0xFF	; 255
    21b0:	19 f0       	breq	.+6      	; 0x21b8 <slip_tx+0x88>
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	09 c0       	rjmp	.+18     	; 0x21ca <slip_tx+0x9a>
		    if(is_open==1) return NRK_ERROR;
    21b8:	8c ec       	ldi	r24, 0xCC	; 204
    21ba:	91 e0       	ldi	r25, 0x01	; 1
    21bc:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_kprintf>
		    is_open=1; 
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	0e 94 a9 23 	call	0x4752	; 0x4752 <_nrk_errno_set>
    21c6:	8f ef       	ldi	r24, 0xFF	; 255
    21c8:	9f ef       	ldi	r25, 0xFF	; 255
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	1f 91       	pop	r17
    21d0:	0f 91       	pop	r16
    21d2:	ff 90       	pop	r15
    21d4:	08 95       	ret

000021d6 <slip_init>:
#include <basic_rf.h>
#include <nrk_timer.h>

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

    21d6:	90 93 d1 08 	sts	0x08D1, r25
    21da:	80 93 d0 08 	sts	0x08D0, r24
uint8_t channel;
    21de:	70 93 cc 08 	sts	0x08CC, r23
    21e2:	60 93 cb 08 	sts	0x08CB, r22
uint8_t is_open;
    21e6:	40 93 cf 08 	sts	0x08CF, r20

    21ea:	20 93 ca 08 	sts	0x08CA, r18
// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)
    21ee:	6f ef       	ldi	r22, 0xFF	; 255
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <nrk_sem_create>
    21f6:	90 93 ce 08 	sts	0x08CE, r25
    21fa:	80 93 cd 08 	sts	0x08CD, r24

    21fe:	8f 5f       	subi	r24, 0xFF	; 255
    2200:	9f 4f       	sbci	r25, 0xFF	; 255
    2202:	31 f4       	brne	.+12     	; 0x2210 <__stack+0x11>
#define ADC_VREF_VCC() \
    2204:	0e 94 82 29 	call	0x5304	; 0x5304 <nrk_get_pid>
    2208:	68 2f       	mov	r22, r24
    220a:	8f e0       	ldi	r24, 0x0F	; 15
    220c:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
   do { \
	ADMUX &= ~(BM(REFS1));  \
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	80 93 59 02 	sts	0x0259, r24
	ADMUX |= BM(REFS0);  \
} while(0)
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	08 95       	ret

0000221c <halRfSetChannel>:

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    221c:	99 27       	eor	r25, r25
    do { \
    221e:	9c 01       	movw	r18, r24
    2220:	26 5a       	subi	r18, 0xA6	; 166
    2222:	3e 4b       	sbci	r19, 0xBE	; 190
    2224:	0b 97       	sbiw	r24, 0x0b	; 11
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	28 0f       	add	r18, r24
    2230:	39 1f       	adc	r19, r25
	ADMUX = BM(REFS0);  \
} while (0)

    2232:	f8 94       	cli
#define ADC_VREF_VCC() \
    2234:	40 98       	cbi	0x08, 0	; 8
    2236:	88 e1       	ldi	r24, 0x18	; 24
    2238:	8e bd       	out	0x2e, r24	; 46
    223a:	0d b4       	in	r0, 0x2d	; 45
    223c:	07 fe       	sbrs	r0, 7
    223e:	fd cf       	rjmp	.-6      	; 0x223a <halRfSetChannel+0x1e>
    2240:	83 2f       	mov	r24, r19
    2242:	99 27       	eor	r25, r25
    2244:	8e bd       	out	0x2e, r24	; 46
    2246:	0d b4       	in	r0, 0x2d	; 45
    2248:	07 fe       	sbrs	r0, 7
    224a:	fd cf       	rjmp	.-6      	; 0x2246 <halRfSetChannel+0x2a>
    224c:	2e bd       	out	0x2e, r18	; 46
    224e:	0d b4       	in	r0, 0x2d	; 45
    2250:	07 fe       	sbrs	r0, 7
    2252:	fd cf       	rjmp	.-6      	; 0x224e <halRfSetChannel+0x32>
    2254:	40 9a       	sbi	0x08, 0	; 8
   do { \
    2256:	78 94       	sei
    2258:	08 95       	ret

0000225a <halRfWaitForCrystalOscillator>:

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;
    225a:	f8 94       	cli

    225c:	40 98       	cbi	0x08, 0	; 8
    225e:	1e bc       	out	0x2e, r1	; 46
    2260:	0d b4       	in	r0, 0x2d	; 45
    2262:	07 fe       	sbrs	r0, 7
    2264:	fd cf       	rjmp	.-6      	; 0x2260 <halRfWaitForCrystalOscillator+0x6>
    2266:	8e b5       	in	r24, 0x2e	; 46
    2268:	40 9a       	sbi	0x08, 0	; 8
// VREF is set to VCC by default
    226a:	78 94       	sei
#define ADC_INIT() \
    226c:	86 ff       	sbrs	r24, 6
    226e:	f5 cf       	rjmp	.-22     	; 0x225a <halRfWaitForCrystalOscillator>
    2270:	08 95       	ret

00002272 <rf_security_last_pkt_status>:
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)

#define ADC_VREF_VCC() \
    2272:	80 91 e7 08 	lds	r24, 0x08E7
   do { \
	ADMUX &= ~(BM(REFS1));  \
    2276:	99 27       	eor	r25, r25
    2278:	08 95       	ret

0000227a <rf_security_set_ctr_counter>:
	ADMUX |= BM(REFS0);  \
} while(0)


    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	dc 01       	movw	r26, r24
#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
    2280:	40 98       	cbi	0x08, 0	; 8
    2282:	89 ec       	ldi	r24, 0xC9	; 201
    2284:	8e bd       	out	0x2e, r24	; 46
    2286:	0d b4       	in	r0, 0x2d	; 45
    2288:	07 fe       	sbrs	r0, 7
    228a:	fd cf       	rjmp	.-6      	; 0x2286 <rf_security_set_ctr_counter+0xc>
    228c:	80 e8       	ldi	r24, 0x80	; 128
    228e:	8e bd       	out	0x2e, r24	; 46
    2290:	0d b4       	in	r0, 0x2d	; 45
    2292:	07 fe       	sbrs	r0, 7
    2294:	fd cf       	rjmp	.-6      	; 0x2290 <rf_security_set_ctr_counter+0x16>
    2296:	92 e0       	ldi	r25, 0x02	; 2
    2298:	91 50       	subi	r25, 0x01	; 1
    229a:	fd 01       	movw	r30, r26
    229c:	e9 0f       	add	r30, r25
    229e:	f1 1d       	adc	r31, r1
    22a0:	80 81       	ld	r24, Z
    22a2:	8e bd       	out	0x2e, r24	; 46
    22a4:	0d b4       	in	r0, 0x2d	; 45
    22a6:	07 fe       	sbrs	r0, 7
    22a8:	fd cf       	rjmp	.-6      	; 0x22a4 <rf_security_set_ctr_counter+0x2a>
    22aa:	99 23       	and	r25, r25
    22ac:	a9 f7       	brne	.-22     	; 0x2298 <rf_security_set_ctr_counter+0x1e>
    22ae:	40 9a       	sbi	0x08, 0	; 8
	ADMUX |= BM(REFS1);  \
    22b0:	40 98       	cbi	0x08, 0	; 8
    22b2:	8b ec       	ldi	r24, 0xCB	; 203
    22b4:	8e bd       	out	0x2e, r24	; 46
    22b6:	0d b4       	in	r0, 0x2d	; 45
    22b8:	07 fe       	sbrs	r0, 7
    22ba:	fd cf       	rjmp	.-6      	; 0x22b6 <rf_security_set_ctr_counter+0x3c>
    22bc:	80 e8       	ldi	r24, 0x80	; 128
    22be:	8e bd       	out	0x2e, r24	; 46
    22c0:	0d b4       	in	r0, 0x2d	; 45
    22c2:	07 fe       	sbrs	r0, 7
    22c4:	fd cf       	rjmp	.-6      	; 0x22c0 <rf_security_set_ctr_counter+0x46>
    22c6:	92 e0       	ldi	r25, 0x02	; 2
    22c8:	9d 01       	movw	r18, r26
    22ca:	2e 5f       	subi	r18, 0xFE	; 254
    22cc:	3f 4f       	sbci	r19, 0xFF	; 255
    22ce:	e9 01       	movw	r28, r18
    22d0:	91 50       	subi	r25, 0x01	; 1
    22d2:	f9 01       	movw	r30, r18
    22d4:	e9 0f       	add	r30, r25
    22d6:	f1 1d       	adc	r31, r1
    22d8:	80 81       	ld	r24, Z
    22da:	8e bd       	out	0x2e, r24	; 46
    22dc:	0d b4       	in	r0, 0x2d	; 45
    22de:	07 fe       	sbrs	r0, 7
    22e0:	fd cf       	rjmp	.-6      	; 0x22dc <rf_security_set_ctr_counter+0x62>
    22e2:	99 23       	and	r25, r25
    22e4:	a1 f7       	brne	.-24     	; 0x22ce <rf_security_set_ctr_counter+0x54>
    22e6:	40 9a       	sbi	0x08, 0	; 8
} while(0)
    22e8:	8c 91       	ld	r24, X
    22ea:	80 93 e8 08 	sts	0x08E8, r24

    22ee:	fd 01       	movw	r30, r26
    22f0:	81 81       	ldd	r24, Z+1	; 0x01
    22f2:	80 93 e9 08 	sts	0x08E9, r24

    22f6:	88 81       	ld	r24, Y
    22f8:	80 93 ea 08 	sts	0x08EA, r24
#define ADC_VREF_2_56() \
    22fc:	83 81       	ldd	r24, Z+3	; 0x03
    22fe:	80 93 eb 08 	sts	0x08EB, r24
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	08 95       	ret

00002308 <rf_security_enable>:

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
uint8_t count=0;
// key and value get passed as opt and size
    2308:	40 98       	cbi	0x08, 0	; 8
    230a:	89 e1       	ldi	r24, 0x19	; 25
    230c:	8e bd       	out	0x2e, r24	; 46
    230e:	0d b4       	in	r0, 0x2d	; 45
    2310:	07 fe       	sbrs	r0, 7
    2312:	fd cf       	rjmp	.-6      	; 0x230e <rf_security_enable+0x6>
    2314:	83 e0       	ldi	r24, 0x03	; 3
    2316:	8e bd       	out	0x2e, r24	; 46
    2318:	0d b4       	in	r0, 0x2d	; 45
    231a:	07 fe       	sbrs	r0, 7
    231c:	fd cf       	rjmp	.-6      	; 0x2318 <rf_security_enable+0x10>
    231e:	86 e0       	ldi	r24, 0x06	; 6
    2320:	8e bd       	out	0x2e, r24	; 46
    2322:	0d b4       	in	r0, 0x2d	; 45
    2324:	07 fe       	sbrs	r0, 7
    2326:	fd cf       	rjmp	.-6      	; 0x2322 <rf_security_enable+0x1a>
    2328:	40 9a       	sbi	0x08, 0	; 8
uint8_t key=opt;
    232a:	40 98       	cbi	0x08, 0	; 8
    232c:	8a e1       	ldi	r24, 0x1A	; 26
    232e:	8e bd       	out	0x2e, r24	; 46
    2330:	0d b4       	in	r0, 0x2d	; 45
    2332:	07 fe       	sbrs	r0, 7
    2334:	fd cf       	rjmp	.-6      	; 0x2330 <rf_security_enable+0x28>
    2336:	8e e0       	ldi	r24, 0x0E	; 14
    2338:	8e bd       	out	0x2e, r24	; 46
    233a:	0d b4       	in	r0, 0x2d	; 45
    233c:	07 fe       	sbrs	r0, 7
    233e:	fd cf       	rjmp	.-6      	; 0x233a <rf_security_enable+0x32>
    2340:	8e e0       	ldi	r24, 0x0E	; 14
    2342:	8e bd       	out	0x2e, r24	; 46
    2344:	0d b4       	in	r0, 0x2d	; 45
    2346:	07 fe       	sbrs	r0, 7
    2348:	fd cf       	rjmp	.-6      	; 0x2344 <rf_security_enable+0x3c>
    234a:	40 9a       	sbi	0x08, 0	; 8
uint8_t value=size;

    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	80 93 d8 08 	sts	0x08D8, r24
    2352:	08 95       	ret

00002354 <rf_security_disable>:
     {
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
    2354:	40 98       	cbi	0x08, 0	; 8
    2356:	89 e1       	ldi	r24, 0x19	; 25
    2358:	8e bd       	out	0x2e, r24	; 46
    235a:	0d b4       	in	r0, 0x2d	; 45
    235c:	07 fe       	sbrs	r0, 7
    235e:	fd cf       	rjmp	.-6      	; 0x235a <rf_security_disable+0x6>
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	8e bd       	out	0x2e, r24	; 46
    2364:	0d b4       	in	r0, 0x2d	; 45
    2366:	07 fe       	sbrs	r0, 7
    2368:	fd cf       	rjmp	.-6      	; 0x2364 <rf_security_disable+0x10>
    236a:	84 ec       	ldi	r24, 0xC4	; 196
    236c:	8e bd       	out	0x2e, r24	; 46
    236e:	0d b4       	in	r0, 0x2d	; 45
    2370:	07 fe       	sbrs	r0, 7
    2372:	fd cf       	rjmp	.-6      	; 0x236e <rf_security_disable+0x1a>
    2374:	40 9a       	sbi	0x08, 0	; 8
			is_open=0;
    2376:	10 92 d8 08 	sts	0x08D8, r1
    237a:	08 95       	ret

0000237c <rf_get_sem>:
		    if(opt&READ_FLAG)
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
    237c:	80 91 d6 08 	lds	r24, 0x08D6
    2380:	90 91 d7 08 	lds	r25, 0x08D7
    2384:	08 95       	ret

00002386 <rf_addr_decode_enable>:

				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    2386:	20 91 d9 08 	lds	r18, 0x08D9
    238a:	30 91 da 08 	lds	r19, 0x08DA
    238e:	38 60       	ori	r19, 0x08	; 8
    2390:	30 93 da 08 	sts	0x08DA, r19
    2394:	20 93 d9 08 	sts	0x08D9, r18
				}
    2398:	40 98       	cbi	0x08, 0	; 8
    239a:	81 e1       	ldi	r24, 0x11	; 17
    239c:	8e bd       	out	0x2e, r24	; 46
    239e:	0d b4       	in	r0, 0x2d	; 45
    23a0:	07 fe       	sbrs	r0, 7
    23a2:	fd cf       	rjmp	.-6      	; 0x239e <rf_addr_decode_enable+0x18>
    23a4:	83 2f       	mov	r24, r19
    23a6:	99 27       	eor	r25, r25
    23a8:	8e bd       	out	0x2e, r24	; 46
    23aa:	0d b4       	in	r0, 0x2d	; 45
    23ac:	07 fe       	sbrs	r0, 7
    23ae:	fd cf       	rjmp	.-6      	; 0x23aa <rf_addr_decode_enable+0x24>
    23b0:	2e bd       	out	0x2e, r18	; 46
    23b2:	0d b4       	in	r0, 0x2d	; 45
    23b4:	07 fe       	sbrs	r0, 7
    23b6:	fd cf       	rjmp	.-6      	; 0x23b2 <rf_addr_decode_enable+0x2c>
    23b8:	40 9a       	sbi	0x08, 0	; 8
    23ba:	08 95       	ret

000023bc <rf_addr_decode_disable>:

				if(size==1)
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}
    23bc:	20 91 d9 08 	lds	r18, 0x08D9
    23c0:	30 91 da 08 	lds	r19, 0x08DA
    23c4:	37 7f       	andi	r19, 0xF7	; 247
    23c6:	30 93 da 08 	sts	0x08DA, r19
    23ca:	20 93 d9 08 	sts	0x08D9, r18

    23ce:	40 98       	cbi	0x08, 0	; 8
    23d0:	81 e1       	ldi	r24, 0x11	; 17
    23d2:	8e bd       	out	0x2e, r24	; 46
    23d4:	0d b4       	in	r0, 0x2d	; 45
    23d6:	07 fe       	sbrs	r0, 7
    23d8:	fd cf       	rjmp	.-6      	; 0x23d4 <rf_addr_decode_disable+0x18>
    23da:	83 2f       	mov	r24, r19
    23dc:	99 27       	eor	r25, r25
    23de:	8e bd       	out	0x2e, r24	; 46
    23e0:	0d b4       	in	r0, 0x2d	; 45
    23e2:	07 fe       	sbrs	r0, 7
    23e4:	fd cf       	rjmp	.-6      	; 0x23e0 <rf_addr_decode_disable+0x24>
    23e6:	2e bd       	out	0x2e, r18	; 46
    23e8:	0d b4       	in	r0, 0x2d	; 45
    23ea:	07 fe       	sbrs	r0, 7
    23ec:	fd cf       	rjmp	.-6      	; 0x23e8 <rf_addr_decode_disable+0x2c>
    23ee:	40 9a       	sbi	0x08, 0	; 8
    23f0:	08 95       	ret

000023f2 <rf_auto_ack_enable>:

			} else if(channel==BAT)
			{
			uint16_t tmp;
			tmp=read_voltage_status();
			if(size==2)
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	80 93 e6 08 	sts	0x08E6, r24
				{
    23f8:	20 91 d9 08 	lds	r18, 0x08D9
    23fc:	30 91 da 08 	lds	r19, 0x08DA
    2400:	20 61       	ori	r18, 0x10	; 16
    2402:	30 93 da 08 	sts	0x08DA, r19
    2406:	20 93 d9 08 	sts	0x08D9, r18
					buffer[count]=tmp & 0xFF;
    240a:	40 98       	cbi	0x08, 0	; 8
    240c:	81 e1       	ldi	r24, 0x11	; 17
    240e:	8e bd       	out	0x2e, r24	; 46
    2410:	0d b4       	in	r0, 0x2d	; 45
    2412:	07 fe       	sbrs	r0, 7
    2414:	fd cf       	rjmp	.-6      	; 0x2410 <rf_auto_ack_enable+0x1e>
    2416:	83 2f       	mov	r24, r19
    2418:	99 27       	eor	r25, r25
    241a:	8e bd       	out	0x2e, r24	; 46
    241c:	0d b4       	in	r0, 0x2d	; 45
    241e:	07 fe       	sbrs	r0, 7
    2420:	fd cf       	rjmp	.-6      	; 0x241c <rf_auto_ack_enable+0x2a>
    2422:	2e bd       	out	0x2e, r18	; 46
    2424:	0d b4       	in	r0, 0x2d	; 45
    2426:	07 fe       	sbrs	r0, 7
    2428:	fd cf       	rjmp	.-6      	; 0x2424 <rf_auto_ack_enable+0x32>
    242a:	40 9a       	sbi	0x08, 0	; 8
    242c:	08 95       	ret

0000242e <rf_auto_ack_disable>:
					count++;
					buffer[count]=(tmp>>8) & 0xFF;
				}
			if(size==1)
				{
    242e:	10 92 e6 08 	sts	0x08E6, r1
					buffer[count]=(tmp>>2) & 0xFF;
    2432:	20 91 d9 08 	lds	r18, 0x08D9
    2436:	30 91 da 08 	lds	r19, 0x08DA
    243a:	2f 7e       	andi	r18, 0xEF	; 239
    243c:	30 93 da 08 	sts	0x08DA, r19
    2440:	20 93 d9 08 	sts	0x08D9, r18
				}
    2444:	40 98       	cbi	0x08, 0	; 8
    2446:	81 e1       	ldi	r24, 0x11	; 17
    2448:	8e bd       	out	0x2e, r24	; 46
    244a:	0d b4       	in	r0, 0x2d	; 45
    244c:	07 fe       	sbrs	r0, 7
    244e:	fd cf       	rjmp	.-6      	; 0x244a <rf_auto_ack_disable+0x1c>
    2450:	83 2f       	mov	r24, r19
    2452:	99 27       	eor	r25, r25
    2454:	8e bd       	out	0x2e, r24	; 46
    2456:	0d b4       	in	r0, 0x2d	; 45
    2458:	07 fe       	sbrs	r0, 7
    245a:	fd cf       	rjmp	.-6      	; 0x2456 <rf_auto_ack_disable+0x28>
    245c:	2e bd       	out	0x2e, r18	; 46
    245e:	0d b4       	in	r0, 0x2d	; 45
    2460:	07 fe       	sbrs	r0, 7
    2462:	fd cf       	rjmp	.-6      	; 0x245e <rf_auto_ack_disable+0x30>
    2464:	40 9a       	sbi	0x08, 0	; 8
    2466:	08 95       	ret

00002468 <rf_busy>:
    2468:	89 b1       	in	r24, 0x09	; 9
    246a:	99 27       	eor	r25, r25
    246c:	66 e0       	ldi	r22, 0x06	; 6
    246e:	96 95       	lsr	r25
    2470:	87 95       	ror	r24
    2472:	6a 95       	dec	r22
    2474:	e1 f7       	brne	.-8      	; 0x246e <rf_busy+0x6>
    2476:	81 70       	andi	r24, 0x01	; 1
    2478:	90 70       	andi	r25, 0x00	; 0
    247a:	08 95       	ret

0000247c <rf_rx_check_fifop>:
    247c:	8c b1       	in	r24, 0x0c	; 12
    247e:	99 27       	eor	r25, r25
    2480:	87 fd       	sbrc	r24, 7
    2482:	90 95       	com	r25
    2484:	88 27       	eor	r24, r24
    2486:	99 0f       	add	r25, r25
    2488:	88 1f       	adc	r24, r24
    248a:	99 27       	eor	r25, r25
    248c:	08 95       	ret

0000248e <rf_rx_check_sfd>:
    248e:	89 b1       	in	r24, 0x09	; 9
    2490:	99 27       	eor	r25, r25
    2492:	e6 e0       	ldi	r30, 0x06	; 6
    2494:	96 95       	lsr	r25
    2496:	87 95       	ror	r24
    2498:	ea 95       	dec	r30
    249a:	e1 f7       	brne	.-8      	; 0x2494 <rf_rx_check_sfd+0x6>
    249c:	81 70       	andi	r24, 0x01	; 1
    249e:	90 70       	andi	r25, 0x00	; 0
    24a0:	08 95       	ret

000024a2 <rf_rx_packet>:
    24a2:	80 91 ec 08 	lds	r24, 0x08EC
    24a6:	88 23       	and	r24, r24
    24a8:	19 f4       	brne	.+6      	; 0x24b0 <rf_rx_packet+0xe>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	08 95       	ret
    24b0:	80 91 ec 08 	lds	r24, 0x08EC
    24b4:	10 92 ec 08 	sts	0x08EC, r1
    24b8:	99 27       	eor	r25, r25
    24ba:	87 fd       	sbrc	r24, 7
    24bc:	90 95       	com	r25
    24be:	08 95       	ret

000024c0 <rf_flush_rx_fifo>:
    24c0:	40 98       	cbi	0x08, 0	; 8
    24c2:	88 e0       	ldi	r24, 0x08	; 8
    24c4:	8e bd       	out	0x2e, r24	; 46
    24c6:	0d b4       	in	r0, 0x2d	; 45
    24c8:	07 fe       	sbrs	r0, 7
    24ca:	fd cf       	rjmp	.-6      	; 0x24c6 <rf_flush_rx_fifo+0x6>
    24cc:	40 9a       	sbi	0x08, 0	; 8
    24ce:	40 98       	cbi	0x08, 0	; 8
    24d0:	88 e0       	ldi	r24, 0x08	; 8
    24d2:	8e bd       	out	0x2e, r24	; 46
    24d4:	0d b4       	in	r0, 0x2d	; 45
    24d6:	07 fe       	sbrs	r0, 7
    24d8:	fd cf       	rjmp	.-6      	; 0x24d4 <rf_flush_rx_fifo+0x14>
    24da:	40 9a       	sbi	0x08, 0	; 8
    24dc:	08 95       	ret

000024de <rf_carrier_off>:
    24de:	80 91 d6 08 	lds	r24, 0x08D6
    24e2:	90 91 d7 08 	lds	r25, 0x08D7
    24e6:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
    24ea:	40 98       	cbi	0x08, 0	; 8
    24ec:	86 e0       	ldi	r24, 0x06	; 6
    24ee:	8e bd       	out	0x2e, r24	; 46
    24f0:	0d b4       	in	r0, 0x2d	; 45
    24f2:	07 fe       	sbrs	r0, 7
    24f4:	fd cf       	rjmp	.-6      	; 0x24f0 <rf_carrier_off+0x12>
    24f6:	40 9a       	sbi	0x08, 0	; 8
    24f8:	80 91 d6 08 	lds	r24, 0x08D6
    24fc:	90 91 d7 08 	lds	r25, 0x08D7
    2500:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2504:	08 95       	ret

00002506 <rf_carrier_on>:
    2506:	80 91 d6 08 	lds	r24, 0x08D6
    250a:	90 91 d7 08 	lds	r25, 0x08D7
    250e:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
    2512:	40 98       	cbi	0x08, 0	; 8
    2514:	84 e0       	ldi	r24, 0x04	; 4
    2516:	8e bd       	out	0x2e, r24	; 46
    2518:	0d b4       	in	r0, 0x2d	; 45
    251a:	07 fe       	sbrs	r0, 7
    251c:	fd cf       	rjmp	.-6      	; 0x2518 <rf_carrier_on+0x12>
    251e:	40 9a       	sbi	0x08, 0	; 8
    2520:	80 91 d6 08 	lds	r24, 0x08D6
    2524:	90 91 d7 08 	lds	r25, 0x08D7
    2528:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    252c:	08 95       	ret

0000252e <rf_data_mode>:
    252e:	80 91 d6 08 	lds	r24, 0x08D6
    2532:	90 91 d7 08 	lds	r25, 0x08D7
    2536:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
    253a:	40 98       	cbi	0x08, 0	; 8
    253c:	86 e0       	ldi	r24, 0x06	; 6
    253e:	8e bd       	out	0x2e, r24	; 46
    2540:	0d b4       	in	r0, 0x2d	; 45
    2542:	07 fe       	sbrs	r0, 7
    2544:	fd cf       	rjmp	.-6      	; 0x2540 <rf_data_mode+0x12>
    2546:	40 9a       	sbi	0x08, 0	; 8
    2548:	40 98       	cbi	0x08, 0	; 8
    254a:	82 e1       	ldi	r24, 0x12	; 18
    254c:	8e bd       	out	0x2e, r24	; 46
    254e:	0d b4       	in	r0, 0x2d	; 45
    2550:	07 fe       	sbrs	r0, 7
    2552:	fd cf       	rjmp	.-6      	; 0x254e <rf_data_mode+0x20>
    2554:	85 e0       	ldi	r24, 0x05	; 5
    2556:	8e bd       	out	0x2e, r24	; 46
    2558:	0d b4       	in	r0, 0x2d	; 45
    255a:	07 fe       	sbrs	r0, 7
    255c:	fd cf       	rjmp	.-6      	; 0x2558 <rf_data_mode+0x2a>
    255e:	1e bc       	out	0x2e, r1	; 46
    2560:	0d b4       	in	r0, 0x2d	; 45
    2562:	07 fe       	sbrs	r0, 7
    2564:	fd cf       	rjmp	.-6      	; 0x2560 <rf_data_mode+0x32>
    2566:	40 9a       	sbi	0x08, 0	; 8
    2568:	40 98       	cbi	0x08, 0	; 8
    256a:	8e e2       	ldi	r24, 0x2E	; 46
    256c:	8e bd       	out	0x2e, r24	; 46
    256e:	0d b4       	in	r0, 0x2d	; 45
    2570:	07 fe       	sbrs	r0, 7
    2572:	fd cf       	rjmp	.-6      	; 0x256e <rf_data_mode+0x40>
    2574:	1e bc       	out	0x2e, r1	; 46
    2576:	0d b4       	in	r0, 0x2d	; 45
    2578:	07 fe       	sbrs	r0, 7
    257a:	fd cf       	rjmp	.-6      	; 0x2576 <rf_data_mode+0x48>
    257c:	1e bc       	out	0x2e, r1	; 46
    257e:	0d b4       	in	r0, 0x2d	; 45
    2580:	07 fe       	sbrs	r0, 7
    2582:	fd cf       	rjmp	.-6      	; 0x257e <rf_data_mode+0x50>
    2584:	40 9a       	sbi	0x08, 0	; 8
    2586:	0e 94 60 12 	call	0x24c0	; 0x24c0 <rf_flush_rx_fifo>
    258a:	80 91 d6 08 	lds	r24, 0x08D6
    258e:	90 91 d7 08 	lds	r25, 0x08D7
    2592:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2596:	08 95       	ret

00002598 <rf_test_mode>:
    2598:	80 91 d6 08 	lds	r24, 0x08D6
    259c:	90 91 d7 08 	lds	r25, 0x08D7
    25a0:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
    25a4:	40 98       	cbi	0x08, 0	; 8
    25a6:	86 e0       	ldi	r24, 0x06	; 6
    25a8:	8e bd       	out	0x2e, r24	; 46
    25aa:	0d b4       	in	r0, 0x2d	; 45
    25ac:	07 fe       	sbrs	r0, 7
    25ae:	fd cf       	rjmp	.-6      	; 0x25aa <rf_test_mode+0x12>
    25b0:	40 9a       	sbi	0x08, 0	; 8
    25b2:	40 98       	cbi	0x08, 0	; 8
    25b4:	82 e1       	ldi	r24, 0x12	; 18
    25b6:	8e bd       	out	0x2e, r24	; 46
    25b8:	0d b4       	in	r0, 0x2d	; 45
    25ba:	07 fe       	sbrs	r0, 7
    25bc:	fd cf       	rjmp	.-6      	; 0x25b8 <rf_test_mode+0x20>
    25be:	85 e0       	ldi	r24, 0x05	; 5
    25c0:	8e bd       	out	0x2e, r24	; 46
    25c2:	0d b4       	in	r0, 0x2d	; 45
    25c4:	07 fe       	sbrs	r0, 7
    25c6:	fd cf       	rjmp	.-6      	; 0x25c2 <rf_test_mode+0x2a>
    25c8:	88 e0       	ldi	r24, 0x08	; 8
    25ca:	8e bd       	out	0x2e, r24	; 46
    25cc:	0d b4       	in	r0, 0x2d	; 45
    25ce:	07 fe       	sbrs	r0, 7
    25d0:	fd cf       	rjmp	.-6      	; 0x25cc <rf_test_mode+0x34>
    25d2:	40 9a       	sbi	0x08, 0	; 8
    25d4:	40 98       	cbi	0x08, 0	; 8
    25d6:	8e e2       	ldi	r24, 0x2E	; 46
    25d8:	8e bd       	out	0x2e, r24	; 46
    25da:	0d b4       	in	r0, 0x2d	; 45
    25dc:	07 fe       	sbrs	r0, 7
    25de:	fd cf       	rjmp	.-6      	; 0x25da <rf_test_mode+0x42>
    25e0:	88 e1       	ldi	r24, 0x18	; 24
    25e2:	8e bd       	out	0x2e, r24	; 46
    25e4:	0d b4       	in	r0, 0x2d	; 45
    25e6:	07 fe       	sbrs	r0, 7
    25e8:	fd cf       	rjmp	.-6      	; 0x25e4 <rf_test_mode+0x4c>
    25ea:	1e bc       	out	0x2e, r1	; 46
    25ec:	0d b4       	in	r0, 0x2d	; 45
    25ee:	07 fe       	sbrs	r0, 7
    25f0:	fd cf       	rjmp	.-6      	; 0x25ec <rf_test_mode+0x54>
    25f2:	40 9a       	sbi	0x08, 0	; 8
    25f4:	0e 94 60 12 	call	0x24c0	; 0x24c0 <rf_flush_rx_fifo>
    25f8:	80 91 d6 08 	lds	r24, 0x08D6
    25fc:	90 91 d7 08 	lds	r25, 0x08D7
    2600:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2604:	08 95       	ret

00002606 <rf_set_cca_thresh>:
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	08 2f       	mov	r16, r24
    260c:	80 91 d6 08 	lds	r24, 0x08D6
    2610:	90 91 d7 08 	lds	r25, 0x08D7
    2614:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
    2618:	11 27       	eor	r17, r17
    261a:	07 fd       	sbrc	r16, 7
    261c:	10 95       	com	r17
    261e:	30 2f       	mov	r19, r16
    2620:	22 27       	eor	r18, r18
    2622:	20 68       	ori	r18, 0x80	; 128
    2624:	40 98       	cbi	0x08, 0	; 8
    2626:	83 e1       	ldi	r24, 0x13	; 19
    2628:	8e bd       	out	0x2e, r24	; 46
    262a:	0d b4       	in	r0, 0x2d	; 45
    262c:	07 fe       	sbrs	r0, 7
    262e:	fd cf       	rjmp	.-6      	; 0x262a <rf_set_cca_thresh+0x24>
    2630:	83 2f       	mov	r24, r19
    2632:	99 27       	eor	r25, r25
    2634:	8e bd       	out	0x2e, r24	; 46
    2636:	0d b4       	in	r0, 0x2d	; 45
    2638:	07 fe       	sbrs	r0, 7
    263a:	fd cf       	rjmp	.-6      	; 0x2636 <rf_set_cca_thresh+0x30>
    263c:	2e bd       	out	0x2e, r18	; 46
    263e:	0d b4       	in	r0, 0x2d	; 45
    2640:	07 fe       	sbrs	r0, 7
    2642:	fd cf       	rjmp	.-6      	; 0x263e <rf_set_cca_thresh+0x38>
    2644:	40 9a       	sbi	0x08, 0	; 8
    2646:	80 91 d6 08 	lds	r24, 0x08D6
    264a:	90 91 d7 08 	lds	r25, 0x08D7
    264e:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2652:	1f 91       	pop	r17
    2654:	0f 91       	pop	r16
    2656:	08 95       	ret

00002658 <rf_polling_rx_packet>:
    2658:	0f 93       	push	r16
    265a:	1f 93       	push	r17
    265c:	cf 93       	push	r28
    265e:	df 93       	push	r29
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	24 97       	sbiw	r28, 0x04	; 4
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	18 2f       	mov	r17, r24
    2672:	06 2f       	mov	r16, r22
    2674:	80 91 d6 08 	lds	r24, 0x08D6
    2678:	90 91 d7 08 	lds	r25, 0x08D7
    267c:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
    2680:	67 9b       	sbis	0x0c, 7	; 12
    2682:	4c c2       	rjmp	.+1176   	; 0x2b1c <rf_polling_rx_packet+0x4c4>
    2684:	10 92 e7 08 	sts	0x08E7, r1
    2688:	67 9b       	sbis	0x0c, 7	; 12
    268a:	25 c0       	rjmp	.+74     	; 0x26d6 <rf_polling_rx_packet+0x7e>
    268c:	31 99       	sbic	0x06, 1	; 6
    268e:	23 c0       	rjmp	.+70     	; 0x26d6 <rf_polling_rx_packet+0x7e>
    2690:	40 98       	cbi	0x08, 0	; 8
    2692:	8f e7       	ldi	r24, 0x7F	; 127
    2694:	8e bd       	out	0x2e, r24	; 46
    2696:	0d b4       	in	r0, 0x2d	; 45
    2698:	07 fe       	sbrs	r0, 7
    269a:	fd cf       	rjmp	.-6      	; 0x2696 <rf_polling_rx_packet+0x3e>
    269c:	1e bc       	out	0x2e, r1	; 46
    269e:	0d b4       	in	r0, 0x2d	; 45
    26a0:	07 fe       	sbrs	r0, 7
    26a2:	fd cf       	rjmp	.-6      	; 0x269e <rf_polling_rx_packet+0x46>
    26a4:	8e b5       	in	r24, 0x2e	; 46
    26a6:	40 9a       	sbi	0x08, 0	; 8
    26a8:	40 98       	cbi	0x08, 0	; 8
    26aa:	88 e0       	ldi	r24, 0x08	; 8
    26ac:	8e bd       	out	0x2e, r24	; 46
    26ae:	0d b4       	in	r0, 0x2d	; 45
    26b0:	07 fe       	sbrs	r0, 7
    26b2:	fd cf       	rjmp	.-6      	; 0x26ae <rf_polling_rx_packet+0x56>
    26b4:	40 9a       	sbi	0x08, 0	; 8
    26b6:	40 98       	cbi	0x08, 0	; 8
    26b8:	88 e0       	ldi	r24, 0x08	; 8
    26ba:	8e bd       	out	0x2e, r24	; 46
    26bc:	0d b4       	in	r0, 0x2d	; 45
    26be:	07 fe       	sbrs	r0, 7
    26c0:	fd cf       	rjmp	.-6      	; 0x26bc <rf_polling_rx_packet+0x64>
    26c2:	40 9a       	sbi	0x08, 0	; 8
    26c4:	80 91 d6 08 	lds	r24, 0x08D6
    26c8:	90 91 d7 08 	lds	r25, 0x08D7
    26cc:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    26d0:	8f ef       	ldi	r24, 0xFF	; 255
    26d2:	9f ef       	ldi	r25, 0xFF	; 255
    26d4:	2b c2       	rjmp	.+1110   	; 0x2b2c <rf_polling_rx_packet+0x4d4>
    26d6:	40 98       	cbi	0x08, 0	; 8
    26d8:	8f e7       	ldi	r24, 0x7F	; 127
    26da:	8e bd       	out	0x2e, r24	; 46
    26dc:	0d b4       	in	r0, 0x2d	; 45
    26de:	07 fe       	sbrs	r0, 7
    26e0:	fd cf       	rjmp	.-6      	; 0x26dc <rf_polling_rx_packet+0x84>
    26e2:	1e bc       	out	0x2e, r1	; 46
    26e4:	0d b4       	in	r0, 0x2d	; 45
    26e6:	07 fe       	sbrs	r0, 7
    26e8:	fd cf       	rjmp	.-6      	; 0x26e4 <rf_polling_rx_packet+0x8c>
    26ea:	4e b5       	in	r20, 0x2e	; 46
    26ec:	40 9a       	sbi	0x08, 0	; 8
    26ee:	4f 77       	andi	r20, 0x7F	; 127
    26f0:	19 f5       	brne	.+70     	; 0x2738 <rf_polling_rx_packet+0xe0>
    26f2:	40 98       	cbi	0x08, 0	; 8
    26f4:	8f e7       	ldi	r24, 0x7F	; 127
    26f6:	8e bd       	out	0x2e, r24	; 46
    26f8:	0d b4       	in	r0, 0x2d	; 45
    26fa:	07 fe       	sbrs	r0, 7
    26fc:	fd cf       	rjmp	.-6      	; 0x26f8 <rf_polling_rx_packet+0xa0>
    26fe:	1e bc       	out	0x2e, r1	; 46
    2700:	0d b4       	in	r0, 0x2d	; 45
    2702:	07 fe       	sbrs	r0, 7
    2704:	fd cf       	rjmp	.-6      	; 0x2700 <rf_polling_rx_packet+0xa8>
    2706:	8e b5       	in	r24, 0x2e	; 46
    2708:	40 9a       	sbi	0x08, 0	; 8
    270a:	40 98       	cbi	0x08, 0	; 8
    270c:	88 e0       	ldi	r24, 0x08	; 8
    270e:	8e bd       	out	0x2e, r24	; 46
    2710:	0d b4       	in	r0, 0x2d	; 45
    2712:	07 fe       	sbrs	r0, 7
    2714:	fd cf       	rjmp	.-6      	; 0x2710 <rf_polling_rx_packet+0xb8>
    2716:	40 9a       	sbi	0x08, 0	; 8
    2718:	40 98       	cbi	0x08, 0	; 8
    271a:	88 e0       	ldi	r24, 0x08	; 8
    271c:	8e bd       	out	0x2e, r24	; 46
    271e:	0d b4       	in	r0, 0x2d	; 45
    2720:	07 fe       	sbrs	r0, 7
    2722:	fd cf       	rjmp	.-6      	; 0x271e <rf_polling_rx_packet+0xc6>
    2724:	40 9a       	sbi	0x08, 0	; 8
    2726:	80 91 d6 08 	lds	r24, 0x08D6
    272a:	90 91 d7 08 	lds	r25, 0x08D7
    272e:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2732:	8e ef       	ldi	r24, 0xFE	; 254
    2734:	9f ef       	ldi	r25, 0xFF	; 255
    2736:	fa c1       	rjmp	.+1012   	; 0x2b2c <rf_polling_rx_packet+0x4d4>
    2738:	45 30       	cpi	r20, 0x05	; 5
    273a:	8c f0       	brlt	.+34     	; 0x275e <rf_polling_rx_packet+0x106>
    273c:	e0 91 db 08 	lds	r30, 0x08DB
    2740:	f0 91 dc 08 	lds	r31, 0x08DC
    2744:	24 2f       	mov	r18, r20
    2746:	33 27       	eor	r19, r19
    2748:	27 fd       	sbrc	r18, 7
    274a:	30 95       	com	r19
    274c:	2b 50       	subi	r18, 0x0B	; 11
    274e:	30 40       	sbci	r19, 0x00	; 0
    2750:	84 81       	ldd	r24, Z+4	; 0x04
    2752:	99 27       	eor	r25, r25
    2754:	87 fd       	sbrc	r24, 7
    2756:	90 95       	com	r25
    2758:	82 17       	cp	r24, r18
    275a:	93 07       	cpc	r25, r19
    275c:	f4 f5       	brge	.+124    	; 0x27da <rf_polling_rx_packet+0x182>
    275e:	40 98       	cbi	0x08, 0	; 8
    2760:	8f e7       	ldi	r24, 0x7F	; 127
    2762:	8e bd       	out	0x2e, r24	; 46
    2764:	0d b4       	in	r0, 0x2d	; 45
    2766:	07 fe       	sbrs	r0, 7
    2768:	fd cf       	rjmp	.-6      	; 0x2764 <rf_polling_rx_packet+0x10c>
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	24 2f       	mov	r18, r20
    2770:	33 27       	eor	r19, r19
    2772:	27 fd       	sbrc	r18, 7
    2774:	30 95       	com	r19
    2776:	06 c0       	rjmp	.+12     	; 0x2784 <rf_polling_rx_packet+0x12c>
    2778:	1e bc       	out	0x2e, r1	; 46
    277a:	0d b4       	in	r0, 0x2d	; 45
    277c:	07 fe       	sbrs	r0, 7
    277e:	fd cf       	rjmp	.-6      	; 0x277a <rf_polling_rx_packet+0x122>
    2780:	6f 5f       	subi	r22, 0xFF	; 255
    2782:	7f 4f       	sbci	r23, 0xFF	; 255
    2784:	86 2f       	mov	r24, r22
    2786:	99 27       	eor	r25, r25
    2788:	82 17       	cp	r24, r18
    278a:	93 07       	cpc	r25, r19
    278c:	14 f4       	brge	.+4      	; 0x2792 <rf_polling_rx_packet+0x13a>
    278e:	31 99       	sbic	0x06, 1	; 6
    2790:	f3 cf       	rjmp	.-26     	; 0x2778 <rf_polling_rx_packet+0x120>
    2792:	40 9a       	sbi	0x08, 0	; 8
    2794:	40 98       	cbi	0x08, 0	; 8
    2796:	8f e7       	ldi	r24, 0x7F	; 127
    2798:	8e bd       	out	0x2e, r24	; 46
    279a:	0d b4       	in	r0, 0x2d	; 45
    279c:	07 fe       	sbrs	r0, 7
    279e:	fd cf       	rjmp	.-6      	; 0x279a <rf_polling_rx_packet+0x142>
    27a0:	1e bc       	out	0x2e, r1	; 46
    27a2:	0d b4       	in	r0, 0x2d	; 45
    27a4:	07 fe       	sbrs	r0, 7
    27a6:	fd cf       	rjmp	.-6      	; 0x27a2 <rf_polling_rx_packet+0x14a>
    27a8:	8e b5       	in	r24, 0x2e	; 46
    27aa:	40 9a       	sbi	0x08, 0	; 8
    27ac:	40 98       	cbi	0x08, 0	; 8
    27ae:	88 e0       	ldi	r24, 0x08	; 8
    27b0:	8e bd       	out	0x2e, r24	; 46
    27b2:	0d b4       	in	r0, 0x2d	; 45
    27b4:	07 fe       	sbrs	r0, 7
    27b6:	fd cf       	rjmp	.-6      	; 0x27b2 <rf_polling_rx_packet+0x15a>
    27b8:	40 9a       	sbi	0x08, 0	; 8
    27ba:	40 98       	cbi	0x08, 0	; 8
    27bc:	88 e0       	ldi	r24, 0x08	; 8
    27be:	8e bd       	out	0x2e, r24	; 46
    27c0:	0d b4       	in	r0, 0x2d	; 45
    27c2:	07 fe       	sbrs	r0, 7
    27c4:	fd cf       	rjmp	.-6      	; 0x27c0 <rf_polling_rx_packet+0x168>
    27c6:	40 9a       	sbi	0x08, 0	; 8
    27c8:	80 91 d6 08 	lds	r24, 0x08D6
    27cc:	90 91 d7 08 	lds	r25, 0x08D7
    27d0:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    27d4:	8d ef       	ldi	r24, 0xFD	; 253
    27d6:	9f ef       	ldi	r25, 0xFF	; 255
    27d8:	a9 c1       	rjmp	.+850    	; 0x2b2c <rf_polling_rx_packet+0x4d4>
    27da:	e0 91 db 08 	lds	r30, 0x08DB
    27de:	f0 91 dc 08 	lds	r31, 0x08DC
    27e2:	4c 50       	subi	r20, 0x0C	; 12
    27e4:	43 83       	std	Z+3, r20	; 0x03
    27e6:	11 23       	and	r17, r17
    27e8:	b1 f0       	breq	.+44     	; 0x2816 <rf_polling_rx_packet+0x1be>
    27ea:	e0 91 db 08 	lds	r30, 0x08DB
    27ee:	f0 91 dc 08 	lds	r31, 0x08DC
    27f2:	83 81       	ldd	r24, Z+3	; 0x03
    27f4:	99 27       	eor	r25, r25
    27f6:	87 fd       	sbrc	r24, 7
    27f8:	90 95       	com	r25
    27fa:	20 2f       	mov	r18, r16
    27fc:	33 27       	eor	r19, r19
    27fe:	82 17       	cp	r24, r18
    2800:	93 07       	cpc	r25, r19
    2802:	49 f0       	breq	.+18     	; 0x2816 <rf_polling_rx_packet+0x1be>
    2804:	80 91 d6 08 	lds	r24, 0x08D6
    2808:	90 91 d7 08 	lds	r25, 0x08D7
    280c:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2810:	8a ef       	ldi	r24, 0xFA	; 250
    2812:	9f ef       	ldi	r25, 0xFF	; 255
    2814:	8b c1       	rjmp	.+790    	; 0x2b2c <rf_polling_rx_packet+0x4d4>
    2816:	40 98       	cbi	0x08, 0	; 8
    2818:	8f e7       	ldi	r24, 0x7F	; 127
    281a:	8e bd       	out	0x2e, r24	; 46
    281c:	0d b4       	in	r0, 0x2d	; 45
    281e:	07 fe       	sbrs	r0, 7
    2820:	fd cf       	rjmp	.-6      	; 0x281c <rf_polling_rx_packet+0x1c4>
    2822:	fe 01       	movw	r30, r28
    2824:	31 96       	adiw	r30, 0x01	; 1
    2826:	9e 01       	movw	r18, r28
    2828:	2d 5f       	subi	r18, 0xFD	; 253
    282a:	3f 4f       	sbci	r19, 0xFF	; 255
    282c:	1e bc       	out	0x2e, r1	; 46
    282e:	0d b4       	in	r0, 0x2d	; 45
    2830:	07 fe       	sbrs	r0, 7
    2832:	fd cf       	rjmp	.-6      	; 0x282e <rf_polling_rx_packet+0x1d6>
    2834:	8e b5       	in	r24, 0x2e	; 46
    2836:	81 93       	st	Z+, r24
    2838:	e2 17       	cp	r30, r18
    283a:	f3 07       	cpc	r31, r19
    283c:	b9 f7       	brne	.-18     	; 0x282c <rf_polling_rx_packet+0x1d4>
    283e:	40 9a       	sbi	0x08, 0	; 8
    2840:	e0 91 db 08 	lds	r30, 0x08DB
    2844:	f0 91 dc 08 	lds	r31, 0x08DC
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	b5 e0       	ldi	r27, 0x05	; 5
    284e:	96 95       	lsr	r25
    2850:	87 95       	ror	r24
    2852:	ba 95       	dec	r27
    2854:	e1 f7       	brne	.-8      	; 0x284e <rf_polling_rx_packet+0x1f6>
    2856:	81 70       	andi	r24, 0x01	; 1
    2858:	87 83       	std	Z+7, r24	; 0x07
    285a:	40 98       	cbi	0x08, 0	; 8
    285c:	8f e7       	ldi	r24, 0x7F	; 127
    285e:	8e bd       	out	0x2e, r24	; 46
    2860:	0d b4       	in	r0, 0x2d	; 45
    2862:	07 fe       	sbrs	r0, 7
    2864:	fd cf       	rjmp	.-6      	; 0x2860 <rf_polling_rx_packet+0x208>
    2866:	1e bc       	out	0x2e, r1	; 46
    2868:	0d b4       	in	r0, 0x2d	; 45
    286a:	07 fe       	sbrs	r0, 7
    286c:	fd cf       	rjmp	.-6      	; 0x2868 <rf_polling_rx_packet+0x210>
    286e:	e0 91 db 08 	lds	r30, 0x08DB
    2872:	f0 91 dc 08 	lds	r31, 0x08DC
    2876:	8e b5       	in	r24, 0x2e	; 46
    2878:	80 83       	st	Z, r24
    287a:	40 9a       	sbi	0x08, 0	; 8
    287c:	40 98       	cbi	0x08, 0	; 8
    287e:	8f e7       	ldi	r24, 0x7F	; 127
    2880:	8e bd       	out	0x2e, r24	; 46
    2882:	0d b4       	in	r0, 0x2d	; 45
    2884:	07 fe       	sbrs	r0, 7
    2886:	fd cf       	rjmp	.-6      	; 0x2882 <rf_polling_rx_packet+0x22a>
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	07 c0       	rjmp	.+14     	; 0x289a <rf_polling_rx_packet+0x242>
    288c:	1e bc       	out	0x2e, r1	; 46
    288e:	0d b4       	in	r0, 0x2d	; 45
    2890:	07 fe       	sbrs	r0, 7
    2892:	fd cf       	rjmp	.-6      	; 0x288e <rf_polling_rx_packet+0x236>
    2894:	8f 5f       	subi	r24, 0xFF	; 255
    2896:	84 30       	cpi	r24, 0x04	; 4
    2898:	11 f0       	breq	.+4      	; 0x289e <rf_polling_rx_packet+0x246>
    289a:	31 99       	sbic	0x06, 1	; 6
    289c:	f7 cf       	rjmp	.-18     	; 0x288c <rf_polling_rx_packet+0x234>
    289e:	40 9a       	sbi	0x08, 0	; 8
    28a0:	40 98       	cbi	0x08, 0	; 8
    28a2:	8f e7       	ldi	r24, 0x7F	; 127
    28a4:	8e bd       	out	0x2e, r24	; 46
    28a6:	0d b4       	in	r0, 0x2d	; 45
    28a8:	07 fe       	sbrs	r0, 7
    28aa:	fd cf       	rjmp	.-6      	; 0x28a6 <rf_polling_rx_packet+0x24e>
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	1e bc       	out	0x2e, r1	; 46
    28b2:	0d b4       	in	r0, 0x2d	; 45
    28b4:	07 fe       	sbrs	r0, 7
    28b6:	fd cf       	rjmp	.-6      	; 0x28b2 <rf_polling_rx_packet+0x25a>
    28b8:	e0 91 db 08 	lds	r30, 0x08DB
    28bc:	f0 91 dc 08 	lds	r31, 0x08DC
    28c0:	e2 0f       	add	r30, r18
    28c2:	f3 1f       	adc	r31, r19
    28c4:	8e b5       	in	r24, 0x2e	; 46
    28c6:	81 83       	std	Z+1, r24	; 0x01
    28c8:	2f 5f       	subi	r18, 0xFF	; 255
    28ca:	3f 4f       	sbci	r19, 0xFF	; 255
    28cc:	22 30       	cpi	r18, 0x02	; 2
    28ce:	31 05       	cpc	r19, r1
    28d0:	79 f7       	brne	.-34     	; 0x28b0 <rf_polling_rx_packet+0x258>
    28d2:	40 9a       	sbi	0x08, 0	; 8
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	83 ff       	sbrs	r24, 3
    28da:	56 c0       	rjmp	.+172    	; 0x2988 <rf_polling_rx_packet+0x330>
    28dc:	40 98       	cbi	0x08, 0	; 8
    28de:	8f e7       	ldi	r24, 0x7F	; 127
    28e0:	8e bd       	out	0x2e, r24	; 46
    28e2:	0d b4       	in	r0, 0x2d	; 45
    28e4:	07 fe       	sbrs	r0, 7
    28e6:	fd cf       	rjmp	.-6      	; 0x28e2 <rf_polling_rx_packet+0x28a>
    28e8:	e2 ed       	ldi	r30, 0xD2	; 210
    28ea:	f8 e0       	ldi	r31, 0x08	; 8
    28ec:	1e bc       	out	0x2e, r1	; 46
    28ee:	0d b4       	in	r0, 0x2d	; 45
    28f0:	07 fe       	sbrs	r0, 7
    28f2:	fd cf       	rjmp	.-6      	; 0x28ee <rf_polling_rx_packet+0x296>
    28f4:	8e b5       	in	r24, 0x2e	; 46
    28f6:	81 93       	st	Z+, r24
    28f8:	88 e0       	ldi	r24, 0x08	; 8
    28fa:	e6 3d       	cpi	r30, 0xD6	; 214
    28fc:	f8 07       	cpc	r31, r24
    28fe:	b1 f7       	brne	.-20     	; 0x28ec <rf_polling_rx_packet+0x294>
    2900:	40 9a       	sbi	0x08, 0	; 8
    2902:	40 98       	cbi	0x08, 0	; 8
    2904:	89 e9       	ldi	r24, 0x99	; 153
    2906:	8e bd       	out	0x2e, r24	; 46
    2908:	0d b4       	in	r0, 0x2d	; 45
    290a:	07 fe       	sbrs	r0, 7
    290c:	fd cf       	rjmp	.-6      	; 0x2908 <rf_polling_rx_packet+0x2b0>
    290e:	80 e8       	ldi	r24, 0x80	; 128
    2910:	8e bd       	out	0x2e, r24	; 46
    2912:	0d b4       	in	r0, 0x2d	; 45
    2914:	07 fe       	sbrs	r0, 7
    2916:	fd cf       	rjmp	.-6      	; 0x2912 <rf_polling_rx_packet+0x2ba>
    2918:	92 e0       	ldi	r25, 0x02	; 2
    291a:	91 50       	subi	r25, 0x01	; 1
    291c:	e9 2f       	mov	r30, r25
    291e:	ff 27       	eor	r31, r31
    2920:	ee 52       	subi	r30, 0x2E	; 46
    2922:	f7 4f       	sbci	r31, 0xF7	; 247
    2924:	80 81       	ld	r24, Z
    2926:	8e bd       	out	0x2e, r24	; 46
    2928:	0d b4       	in	r0, 0x2d	; 45
    292a:	07 fe       	sbrs	r0, 7
    292c:	fd cf       	rjmp	.-6      	; 0x2928 <rf_polling_rx_packet+0x2d0>
    292e:	99 23       	and	r25, r25
    2930:	a1 f7       	brne	.-24     	; 0x291a <rf_polling_rx_packet+0x2c2>
    2932:	40 9a       	sbi	0x08, 0	; 8
    2934:	40 98       	cbi	0x08, 0	; 8
    2936:	8b e9       	ldi	r24, 0x9B	; 155
    2938:	8e bd       	out	0x2e, r24	; 46
    293a:	0d b4       	in	r0, 0x2d	; 45
    293c:	07 fe       	sbrs	r0, 7
    293e:	fd cf       	rjmp	.-6      	; 0x293a <rf_polling_rx_packet+0x2e2>
    2940:	80 e8       	ldi	r24, 0x80	; 128
    2942:	8e bd       	out	0x2e, r24	; 46
    2944:	0d b4       	in	r0, 0x2d	; 45
    2946:	07 fe       	sbrs	r0, 7
    2948:	fd cf       	rjmp	.-6      	; 0x2944 <rf_polling_rx_packet+0x2ec>
    294a:	92 e0       	ldi	r25, 0x02	; 2
    294c:	91 50       	subi	r25, 0x01	; 1
    294e:	e9 2f       	mov	r30, r25
    2950:	ff 27       	eor	r31, r31
    2952:	ec 52       	subi	r30, 0x2C	; 44
    2954:	f7 4f       	sbci	r31, 0xF7	; 247
    2956:	80 81       	ld	r24, Z
    2958:	8e bd       	out	0x2e, r24	; 46
    295a:	0d b4       	in	r0, 0x2d	; 45
    295c:	07 fe       	sbrs	r0, 7
    295e:	fd cf       	rjmp	.-6      	; 0x295a <rf_polling_rx_packet+0x302>
    2960:	99 23       	and	r25, r25
    2962:	a1 f7       	brne	.-24     	; 0x294c <rf_polling_rx_packet+0x2f4>
    2964:	40 9a       	sbi	0x08, 0	; 8
    2966:	40 98       	cbi	0x08, 0	; 8
    2968:	8c e0       	ldi	r24, 0x0C	; 12
    296a:	8e bd       	out	0x2e, r24	; 46
    296c:	0d b4       	in	r0, 0x2d	; 45
    296e:	07 fe       	sbrs	r0, 7
    2970:	fd cf       	rjmp	.-6      	; 0x296c <rf_polling_rx_packet+0x314>
    2972:	40 9a       	sbi	0x08, 0	; 8
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	80 93 e7 08 	sts	0x08E7, r24
    297a:	e0 91 db 08 	lds	r30, 0x08DB
    297e:	f0 91 dc 08 	lds	r31, 0x08DC
    2982:	83 81       	ldd	r24, Z+3	; 0x03
    2984:	84 50       	subi	r24, 0x04	; 4
    2986:	83 83       	std	Z+3, r24	; 0x03
    2988:	40 98       	cbi	0x08, 0	; 8
    298a:	8f e7       	ldi	r24, 0x7F	; 127
    298c:	8e bd       	out	0x2e, r24	; 46
    298e:	0d b4       	in	r0, 0x2d	; 45
    2990:	07 fe       	sbrs	r0, 7
    2992:	fd cf       	rjmp	.-6      	; 0x298e <rf_polling_rx_packet+0x336>
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	11 c0       	rjmp	.+34     	; 0x29bc <rf_polling_rx_packet+0x364>
    299a:	1e bc       	out	0x2e, r1	; 46
    299c:	0d b4       	in	r0, 0x2d	; 45
    299e:	07 fe       	sbrs	r0, 7
    29a0:	fd cf       	rjmp	.-6      	; 0x299c <rf_polling_rx_packet+0x344>
    29a2:	e0 91 db 08 	lds	r30, 0x08DB
    29a6:	f0 91 dc 08 	lds	r31, 0x08DC
    29aa:	05 80       	ldd	r0, Z+5	; 0x05
    29ac:	f6 81       	ldd	r31, Z+6	; 0x06
    29ae:	e0 2d       	mov	r30, r0
    29b0:	e6 0f       	add	r30, r22
    29b2:	f1 1d       	adc	r31, r1
    29b4:	8e b5       	in	r24, 0x2e	; 46
    29b6:	80 83       	st	Z, r24
    29b8:	4f 5f       	subi	r20, 0xFF	; 255
    29ba:	5f 4f       	sbci	r21, 0xFF	; 255
    29bc:	64 2f       	mov	r22, r20
    29be:	e0 91 db 08 	lds	r30, 0x08DB
    29c2:	f0 91 dc 08 	lds	r31, 0x08DC
    29c6:	24 2f       	mov	r18, r20
    29c8:	33 27       	eor	r19, r19
    29ca:	83 81       	ldd	r24, Z+3	; 0x03
    29cc:	99 27       	eor	r25, r25
    29ce:	87 fd       	sbrc	r24, 7
    29d0:	90 95       	com	r25
    29d2:	28 17       	cp	r18, r24
    29d4:	39 07       	cpc	r19, r25
    29d6:	0c f3       	brlt	.-62     	; 0x299a <rf_polling_rx_packet+0x342>
    29d8:	40 9a       	sbi	0x08, 0	; 8
    29da:	40 98       	cbi	0x08, 0	; 8
    29dc:	8f e7       	ldi	r24, 0x7F	; 127
    29de:	8e bd       	out	0x2e, r24	; 46
    29e0:	0d b4       	in	r0, 0x2d	; 45
    29e2:	07 fc       	sbrc	r0, 7
    29e4:	0a c0       	rjmp	.+20     	; 0x29fa <rf_polling_rx_packet+0x3a2>
    29e6:	fc cf       	rjmp	.-8      	; 0x29e0 <rf_polling_rx_packet+0x388>
    29e8:	0d b4       	in	r0, 0x2d	; 45
    29ea:	07 fe       	sbrs	r0, 7
    29ec:	fd cf       	rjmp	.-6      	; 0x29e8 <rf_polling_rx_packet+0x390>
    29ee:	5e b5       	in	r21, 0x2e	; 46
    29f0:	40 9a       	sbi	0x08, 0	; 8
    29f2:	40 98       	cbi	0x08, 0	; 8
    29f4:	8f e7       	ldi	r24, 0x7F	; 127
    29f6:	8e bd       	out	0x2e, r24	; 46
    29f8:	02 c0       	rjmp	.+4      	; 0x29fe <rf_polling_rx_packet+0x3a6>
    29fa:	1e bc       	out	0x2e, r1	; 46
    29fc:	f5 cf       	rjmp	.-22     	; 0x29e8 <rf_polling_rx_packet+0x390>
    29fe:	0d b4       	in	r0, 0x2d	; 45
    2a00:	07 fe       	sbrs	r0, 7
    2a02:	fd cf       	rjmp	.-6      	; 0x29fe <rf_polling_rx_packet+0x3a6>
    2a04:	fe 01       	movw	r30, r28
    2a06:	33 96       	adiw	r30, 0x03	; 3
    2a08:	9e 01       	movw	r18, r28
    2a0a:	2b 5f       	subi	r18, 0xFB	; 251
    2a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0e:	1e bc       	out	0x2e, r1	; 46
    2a10:	0d b4       	in	r0, 0x2d	; 45
    2a12:	07 fe       	sbrs	r0, 7
    2a14:	fd cf       	rjmp	.-6      	; 0x2a10 <rf_polling_rx_packet+0x3b8>
    2a16:	8e b5       	in	r24, 0x2e	; 46
    2a18:	81 93       	st	Z+, r24
    2a1a:	e2 17       	cp	r30, r18
    2a1c:	f3 07       	cpc	r31, r19
    2a1e:	b9 f7       	brne	.-18     	; 0x2a0e <rf_polling_rx_packet+0x3b6>
    2a20:	40 9a       	sbi	0x08, 0	; 8
    2a22:	e0 91 db 08 	lds	r30, 0x08DB
    2a26:	f0 91 dc 08 	lds	r31, 0x08DC
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	80 87       	std	Z+8, r24	; 0x08
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	0a c0       	rjmp	.+20     	; 0x2a4a <rf_polling_rx_packet+0x3f2>
    2a36:	e0 91 db 08 	lds	r30, 0x08DB
    2a3a:	f0 91 dc 08 	lds	r31, 0x08DC
    2a3e:	85 81       	ldd	r24, Z+5	; 0x05
    2a40:	96 81       	ldd	r25, Z+6	; 0x06
    2a42:	a8 0f       	add	r26, r24
    2a44:	b9 1f       	adc	r27, r25
    2a46:	8c 91       	ld	r24, X
    2a48:	48 0f       	add	r20, r24
    2a4a:	82 2f       	mov	r24, r18
    2a4c:	e0 91 db 08 	lds	r30, 0x08DB
    2a50:	f0 91 dc 08 	lds	r31, 0x08DC
    2a54:	2f 5f       	subi	r18, 0xFF	; 255
    2a56:	3f 4f       	sbci	r19, 0xFF	; 255
    2a58:	a8 2f       	mov	r26, r24
    2a5a:	bb 27       	eor	r27, r27
    2a5c:	83 81       	ldd	r24, Z+3	; 0x03
    2a5e:	99 27       	eor	r25, r25
    2a60:	87 fd       	sbrc	r24, 7
    2a62:	90 95       	com	r25
    2a64:	a8 17       	cp	r26, r24
    2a66:	b9 07       	cpc	r27, r25
    2a68:	34 f3       	brlt	.-52     	; 0x2a36 <rf_polling_rx_packet+0x3de>
    2a6a:	45 17       	cp	r20, r21
    2a6c:	19 f1       	breq	.+70     	; 0x2ab4 <rf_polling_rx_packet+0x45c>
    2a6e:	40 98       	cbi	0x08, 0	; 8
    2a70:	8f e7       	ldi	r24, 0x7F	; 127
    2a72:	8e bd       	out	0x2e, r24	; 46
    2a74:	0d b4       	in	r0, 0x2d	; 45
    2a76:	07 fe       	sbrs	r0, 7
    2a78:	fd cf       	rjmp	.-6      	; 0x2a74 <rf_polling_rx_packet+0x41c>
    2a7a:	1e bc       	out	0x2e, r1	; 46
    2a7c:	0d b4       	in	r0, 0x2d	; 45
    2a7e:	07 fe       	sbrs	r0, 7
    2a80:	fd cf       	rjmp	.-6      	; 0x2a7c <rf_polling_rx_packet+0x424>
    2a82:	8e b5       	in	r24, 0x2e	; 46
    2a84:	40 9a       	sbi	0x08, 0	; 8
    2a86:	40 98       	cbi	0x08, 0	; 8
    2a88:	88 e0       	ldi	r24, 0x08	; 8
    2a8a:	8e bd       	out	0x2e, r24	; 46
    2a8c:	0d b4       	in	r0, 0x2d	; 45
    2a8e:	07 fe       	sbrs	r0, 7
    2a90:	fd cf       	rjmp	.-6      	; 0x2a8c <rf_polling_rx_packet+0x434>
    2a92:	40 9a       	sbi	0x08, 0	; 8
    2a94:	40 98       	cbi	0x08, 0	; 8
    2a96:	88 e0       	ldi	r24, 0x08	; 8
    2a98:	8e bd       	out	0x2e, r24	; 46
    2a9a:	0d b4       	in	r0, 0x2d	; 45
    2a9c:	07 fe       	sbrs	r0, 7
    2a9e:	fd cf       	rjmp	.-6      	; 0x2a9a <rf_polling_rx_packet+0x442>
    2aa0:	40 9a       	sbi	0x08, 0	; 8
    2aa2:	80 91 d6 08 	lds	r24, 0x08D6
    2aa6:	90 91 d7 08 	lds	r25, 0x08D7
    2aaa:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2aae:	8c ef       	ldi	r24, 0xFC	; 252
    2ab0:	9f ef       	ldi	r25, 0xFF	; 255
    2ab2:	3c c0       	rjmp	.+120    	; 0x2b2c <rf_polling_rx_packet+0x4d4>
    2ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab6:	87 ff       	sbrs	r24, 7
    2ab8:	0e c0       	rjmp	.+28     	; 0x2ad6 <rf_polling_rx_packet+0x47e>
    2aba:	80 91 ec 08 	lds	r24, 0x08EC
    2abe:	8f 5f       	subi	r24, 0xFF	; 255
    2ac0:	80 93 ec 08 	sts	0x08EC, r24
    2ac4:	80 91 d6 08 	lds	r24, 0x08D6
    2ac8:	90 91 d7 08 	lds	r25, 0x08D7
    2acc:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	2b c0       	rjmp	.+86     	; 0x2b2c <rf_polling_rx_packet+0x4d4>
    2ad6:	40 98       	cbi	0x08, 0	; 8
    2ad8:	8f e7       	ldi	r24, 0x7F	; 127
    2ada:	8e bd       	out	0x2e, r24	; 46
    2adc:	0d b4       	in	r0, 0x2d	; 45
    2ade:	07 fe       	sbrs	r0, 7
    2ae0:	fd cf       	rjmp	.-6      	; 0x2adc <rf_polling_rx_packet+0x484>
    2ae2:	1e bc       	out	0x2e, r1	; 46
    2ae4:	0d b4       	in	r0, 0x2d	; 45
    2ae6:	07 fe       	sbrs	r0, 7
    2ae8:	fd cf       	rjmp	.-6      	; 0x2ae4 <rf_polling_rx_packet+0x48c>
    2aea:	8e b5       	in	r24, 0x2e	; 46
    2aec:	40 9a       	sbi	0x08, 0	; 8
    2aee:	40 98       	cbi	0x08, 0	; 8
    2af0:	88 e0       	ldi	r24, 0x08	; 8
    2af2:	8e bd       	out	0x2e, r24	; 46
    2af4:	0d b4       	in	r0, 0x2d	; 45
    2af6:	07 fe       	sbrs	r0, 7
    2af8:	fd cf       	rjmp	.-6      	; 0x2af4 <rf_polling_rx_packet+0x49c>
    2afa:	40 9a       	sbi	0x08, 0	; 8
    2afc:	40 98       	cbi	0x08, 0	; 8
    2afe:	88 e0       	ldi	r24, 0x08	; 8
    2b00:	8e bd       	out	0x2e, r24	; 46
    2b02:	0d b4       	in	r0, 0x2d	; 45
    2b04:	07 fe       	sbrs	r0, 7
    2b06:	fd cf       	rjmp	.-6      	; 0x2b02 <rf_polling_rx_packet+0x4aa>
    2b08:	40 9a       	sbi	0x08, 0	; 8
    2b0a:	80 91 d6 08 	lds	r24, 0x08D6
    2b0e:	90 91 d7 08 	lds	r25, 0x08D7
    2b12:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2b16:	8b ef       	ldi	r24, 0xFB	; 251
    2b18:	9f ef       	ldi	r25, 0xFF	; 255
    2b1a:	08 c0       	rjmp	.+16     	; 0x2b2c <rf_polling_rx_packet+0x4d4>
    2b1c:	80 91 d6 08 	lds	r24, 0x08D6
    2b20:	90 91 d7 08 	lds	r25, 0x08D7
    2b24:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	24 96       	adiw	r28, 0x04	; 4
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	1f 91       	pop	r17
    2b3e:	0f 91       	pop	r16
    2b40:	08 95       	ret

00002b42 <rf_rx_off>:
    2b42:	80 91 d6 08 	lds	r24, 0x08D6
    2b46:	90 91 d7 08 	lds	r25, 0x08D7
    2b4a:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
    2b4e:	10 92 e3 08 	sts	0x08E3, r1
    2b52:	40 98       	cbi	0x08, 0	; 8
    2b54:	86 e0       	ldi	r24, 0x06	; 6
    2b56:	8e bd       	out	0x2e, r24	; 46
    2b58:	0d b4       	in	r0, 0x2d	; 45
    2b5a:	07 fe       	sbrs	r0, 7
    2b5c:	fd cf       	rjmp	.-6      	; 0x2b58 <rf_rx_off+0x16>
    2b5e:	40 9a       	sbi	0x08, 0	; 8
    2b60:	10 92 ec 08 	sts	0x08EC, r1
    2b64:	80 91 d6 08 	lds	r24, 0x08D6
    2b68:	90 91 d7 08 	lds	r25, 0x08D7
    2b6c:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2b70:	08 95       	ret

00002b72 <rf_polling_rx_on>:
    2b72:	80 91 d6 08 	lds	r24, 0x08D6
    2b76:	90 91 d7 08 	lds	r25, 0x08D7
    2b7a:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	80 93 e3 08 	sts	0x08E3, r24
    2b84:	40 98       	cbi	0x08, 0	; 8
    2b86:	83 e0       	ldi	r24, 0x03	; 3
    2b88:	8e bd       	out	0x2e, r24	; 46
    2b8a:	0d b4       	in	r0, 0x2d	; 45
    2b8c:	07 fe       	sbrs	r0, 7
    2b8e:	fd cf       	rjmp	.-6      	; 0x2b8a <rf_polling_rx_on+0x18>
    2b90:	40 9a       	sbi	0x08, 0	; 8
    2b92:	40 98       	cbi	0x08, 0	; 8
    2b94:	88 e0       	ldi	r24, 0x08	; 8
    2b96:	8e bd       	out	0x2e, r24	; 46
    2b98:	0d b4       	in	r0, 0x2d	; 45
    2b9a:	07 fe       	sbrs	r0, 7
    2b9c:	fd cf       	rjmp	.-6      	; 0x2b98 <rf_polling_rx_on+0x26>
    2b9e:	40 9a       	sbi	0x08, 0	; 8
    2ba0:	10 92 ec 08 	sts	0x08EC, r1
    2ba4:	80 91 d6 08 	lds	r24, 0x08D6
    2ba8:	90 91 d7 08 	lds	r25, 0x08D7
    2bac:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2bb0:	08 95       	ret

00002bb2 <rf_rx_on>:
    2bb2:	80 91 d6 08 	lds	r24, 0x08D6
    2bb6:	90 91 d7 08 	lds	r25, 0x08D7
    2bba:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	80 93 e3 08 	sts	0x08E3, r24
    2bc4:	40 98       	cbi	0x08, 0	; 8
    2bc6:	83 e0       	ldi	r24, 0x03	; 3
    2bc8:	8e bd       	out	0x2e, r24	; 46
    2bca:	0d b4       	in	r0, 0x2d	; 45
    2bcc:	07 fe       	sbrs	r0, 7
    2bce:	fd cf       	rjmp	.-6      	; 0x2bca <rf_rx_on+0x18>
    2bd0:	40 9a       	sbi	0x08, 0	; 8
    2bd2:	40 98       	cbi	0x08, 0	; 8
    2bd4:	88 e0       	ldi	r24, 0x08	; 8
    2bd6:	8e bd       	out	0x2e, r24	; 46
    2bd8:	0d b4       	in	r0, 0x2d	; 45
    2bda:	07 fe       	sbrs	r0, 7
    2bdc:	fd cf       	rjmp	.-6      	; 0x2bd8 <rf_rx_on+0x26>
    2bde:	40 9a       	sbi	0x08, 0	; 8
    2be0:	10 92 ec 08 	sts	0x08EC, r1
    2be4:	80 91 d6 08 	lds	r24, 0x08D6
    2be8:	90 91 d7 08 	lds	r25, 0x08D7
    2bec:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2bf0:	08 95       	ret

00002bf2 <rf_tx_power>:
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
		    }
    2bf2:	1f 93       	push	r17
    2bf4:	18 2f       	mov	r17, r24
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
		    }
    2bf6:	80 91 d6 08 	lds	r24, 0x08D6
    2bfa:	90 91 d7 08 	lds	r25, 0x08D7
    2bfe:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
		    if(opt&APPEND_FLAG)
		    {
		    	return NRK_ERROR;
    2c02:	21 2f       	mov	r18, r17
    2c04:	33 27       	eor	r19, r19
    2c06:	2f 71       	andi	r18, 0x1F	; 31
    2c08:	30 70       	andi	r19, 0x00	; 0
    2c0a:	20 6e       	ori	r18, 0xE0	; 224
    2c0c:	30 6a       	ori	r19, 0xA0	; 160
		    }
    2c0e:	40 98       	cbi	0x08, 0	; 8
    2c10:	85 e1       	ldi	r24, 0x15	; 21
    2c12:	8e bd       	out	0x2e, r24	; 46
    2c14:	0d b4       	in	r0, 0x2d	; 45
    2c16:	07 fe       	sbrs	r0, 7
    2c18:	fd cf       	rjmp	.-6      	; 0x2c14 <rf_tx_power+0x22>
    2c1a:	83 2f       	mov	r24, r19
    2c1c:	99 27       	eor	r25, r25
    2c1e:	8e bd       	out	0x2e, r24	; 46
    2c20:	0d b4       	in	r0, 0x2d	; 45
    2c22:	07 fe       	sbrs	r0, 7
    2c24:	fd cf       	rjmp	.-6      	; 0x2c20 <rf_tx_power+0x2e>
    2c26:	2e bd       	out	0x2e, r18	; 46
    2c28:	0d b4       	in	r0, 0x2d	; 45
    2c2a:	07 fe       	sbrs	r0, 7
    2c2c:	fd cf       	rjmp	.-6      	; 0x2c28 <rf_tx_power+0x36>
    2c2e:	40 9a       	sbi	0x08, 0	; 8
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
    2c30:	80 91 d6 08 	lds	r24, 0x08D6
    2c34:	90 91 d7 08 	lds	r25, 0x08D7
    2c38:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2c3c:	1f 91       	pop	r17
    2c3e:	08 95       	ret

00002c40 <rf_tx_packet>:
    2c40:	ef 92       	push	r14
    2c42:	ff 92       	push	r15
    2c44:	0f 93       	push	r16
    2c46:	1f 93       	push	r17
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	22 97       	sbiw	r28, 0x02	; 2
    2c52:	0f b6       	in	r0, 0x3f	; 63
    2c54:	f8 94       	cli
    2c56:	de bf       	out	0x3e, r29	; 62
    2c58:	0f be       	out	0x3f, r0	; 63
    2c5a:	cd bf       	out	0x3d, r28	; 61
    2c5c:	8c 01       	movw	r16, r24
    2c5e:	80 91 d6 08 	lds	r24, 0x08D6
    2c62:	90 91 d7 08 	lds	r25, 0x08D7
    2c66:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
    2c6a:	50 91 d8 08 	lds	r21, 0x08D8
    2c6e:	55 23       	and	r21, r21
    2c70:	39 f0       	breq	.+14     	; 0x2c80 <rf_tx_packet+0x40>
    2c72:	40 98       	cbi	0x08, 0	; 8
    2c74:	8d e0       	ldi	r24, 0x0D	; 13
    2c76:	8e bd       	out	0x2e, r24	; 46
    2c78:	0d b4       	in	r0, 0x2d	; 45
    2c7a:	07 fe       	sbrs	r0, 7
    2c7c:	fd cf       	rjmp	.-6      	; 0x2c78 <rf_tx_packet+0x38>
    2c7e:	40 9a       	sbi	0x08, 0	; 8
    2c80:	f8 01       	movw	r30, r16
    2c82:	42 81       	ldd	r20, Z+2	; 0x02
    2c84:	64 2f       	mov	r22, r20
    2c86:	77 27       	eor	r23, r23
    2c88:	67 fd       	sbrc	r22, 7
    2c8a:	70 95       	com	r23
    2c8c:	a0 e0       	ldi	r26, 0x00	; 0
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	08 c0       	rjmp	.+16     	; 0x2ca4 <rf_tx_packet+0x64>
    2c94:	f8 01       	movw	r30, r16
    2c96:	83 81       	ldd	r24, Z+3	; 0x03
    2c98:	94 81       	ldd	r25, Z+4	; 0x04
    2c9a:	e8 0e       	add	r14, r24
    2c9c:	f9 1e       	adc	r15, r25
    2c9e:	f7 01       	movw	r30, r14
    2ca0:	80 81       	ld	r24, Z
    2ca2:	a8 0f       	add	r26, r24
    2ca4:	82 2f       	mov	r24, r18
    2ca6:	2f 5f       	subi	r18, 0xFF	; 255
    2ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    2caa:	e8 2e       	mov	r14, r24
    2cac:	ff 24       	eor	r15, r15
    2cae:	e6 16       	cp	r14, r22
    2cb0:	f7 06       	cpc	r15, r23
    2cb2:	84 f3       	brlt	.-32     	; 0x2c94 <rf_tx_packet+0x54>
    2cb4:	94 2f       	mov	r25, r20
    2cb6:	94 5f       	subi	r25, 0xF4	; 244
    2cb8:	51 11       	cpse	r21, r1
    2cba:	9c 5f       	subi	r25, 0xFC	; 252
    2cbc:	67 99       	sbic	0x0c, 7	; 12
    2cbe:	fe cf       	rjmp	.-4      	; 0x2cbc <rf_tx_packet+0x7c>
    2cc0:	4e 99       	sbic	0x09, 6	; 9
    2cc2:	fc cf       	rjmp	.-8      	; 0x2cbc <rf_tx_packet+0x7c>
    2cc4:	f8 94       	cli
    2cc6:	40 98       	cbi	0x08, 0	; 8
    2cc8:	89 e0       	ldi	r24, 0x09	; 9
    2cca:	8e bd       	out	0x2e, r24	; 46
    2ccc:	0d b4       	in	r0, 0x2d	; 45
    2cce:	07 fe       	sbrs	r0, 7
    2cd0:	fd cf       	rjmp	.-6      	; 0x2ccc <rf_tx_packet+0x8c>
    2cd2:	40 9a       	sbi	0x08, 0	; 8
    2cd4:	40 98       	cbi	0x08, 0	; 8
    2cd6:	89 e0       	ldi	r24, 0x09	; 9
    2cd8:	8e bd       	out	0x2e, r24	; 46
    2cda:	0d b4       	in	r0, 0x2d	; 45
    2cdc:	07 fe       	sbrs	r0, 7
    2cde:	fd cf       	rjmp	.-6      	; 0x2cda <rf_tx_packet+0x9a>
    2ce0:	40 9a       	sbi	0x08, 0	; 8
    2ce2:	40 98       	cbi	0x08, 0	; 8
    2ce4:	8e e3       	ldi	r24, 0x3E	; 62
    2ce6:	8e bd       	out	0x2e, r24	; 46
    2ce8:	0d b4       	in	r0, 0x2d	; 45
    2cea:	07 fc       	sbrc	r0, 7
    2cec:	05 c0       	rjmp	.+10     	; 0x2cf8 <rf_tx_packet+0xb8>
    2cee:	fc cf       	rjmp	.-8      	; 0x2ce8 <rf_tx_packet+0xa8>
    2cf0:	0d b4       	in	r0, 0x2d	; 45
    2cf2:	07 fc       	sbrc	r0, 7
    2cf4:	30 c1       	rjmp	.+608    	; 0x2f56 <rf_tx_packet+0x316>
    2cf6:	fc cf       	rjmp	.-8      	; 0x2cf0 <rf_tx_packet+0xb0>
    2cf8:	9e bd       	out	0x2e, r25	; 46
    2cfa:	fa cf       	rjmp	.-12     	; 0x2cf0 <rf_tx_packet+0xb0>
    2cfc:	81 e6       	ldi	r24, 0x61	; 97
    2cfe:	98 e8       	ldi	r25, 0x88	; 136
    2d00:	9a 83       	std	Y+2, r25	; 0x02
    2d02:	89 83       	std	Y+1, r24	; 0x01
    2d04:	55 23       	and	r21, r21
    2d06:	29 f0       	breq	.+10     	; 0x2d12 <rf_tx_packet+0xd2>
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0c:	88 60       	ori	r24, 0x08	; 8
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
    2d10:	89 83       	std	Y+1, r24	; 0x01
    2d12:	40 98       	cbi	0x08, 0	; 8
    2d14:	8e e3       	ldi	r24, 0x3E	; 62
    2d16:	8e bd       	out	0x2e, r24	; 46
    2d18:	0d b4       	in	r0, 0x2d	; 45
    2d1a:	07 fe       	sbrs	r0, 7
    2d1c:	fd cf       	rjmp	.-6      	; 0x2d18 <rf_tx_packet+0xd8>
    2d1e:	fe 01       	movw	r30, r28
    2d20:	31 96       	adiw	r30, 0x01	; 1
    2d22:	9e 01       	movw	r18, r28
    2d24:	2d 5f       	subi	r18, 0xFD	; 253
    2d26:	3f 4f       	sbci	r19, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	8e bd       	out	0x2e, r24	; 46
    2d2c:	0d b4       	in	r0, 0x2d	; 45
    2d2e:	07 fe       	sbrs	r0, 7
    2d30:	fd cf       	rjmp	.-6      	; 0x2d2c <rf_tx_packet+0xec>
    2d32:	31 96       	adiw	r30, 0x01	; 1
    2d34:	e2 17       	cp	r30, r18
    2d36:	f3 07       	cpc	r31, r19
    2d38:	b9 f7       	brne	.-18     	; 0x2d28 <rf_tx_packet+0xe8>
    2d3a:	40 9a       	sbi	0x08, 0	; 8
    2d3c:	40 98       	cbi	0x08, 0	; 8
    2d3e:	8e e3       	ldi	r24, 0x3E	; 62
    2d40:	8e bd       	out	0x2e, r24	; 46
    2d42:	0d b4       	in	r0, 0x2d	; 45
    2d44:	07 fc       	sbrc	r0, 7
    2d46:	05 c0       	rjmp	.+10     	; 0x2d52 <rf_tx_packet+0x112>
    2d48:	fc cf       	rjmp	.-8      	; 0x2d42 <rf_tx_packet+0x102>
    2d4a:	0d b4       	in	r0, 0x2d	; 45
    2d4c:	07 fc       	sbrc	r0, 7
    2d4e:	0e c1       	rjmp	.+540    	; 0x2f6c <rf_tx_packet+0x32c>
    2d50:	fc cf       	rjmp	.-8      	; 0x2d4a <rf_tx_packet+0x10a>
    2d52:	80 91 dd 08 	lds	r24, 0x08DD
    2d56:	8e bd       	out	0x2e, r24	; 46
    2d58:	f8 cf       	rjmp	.-16     	; 0x2d4a <rf_tx_packet+0x10a>
    2d5a:	0d b4       	in	r0, 0x2d	; 45
    2d5c:	07 fe       	sbrs	r0, 7
    2d5e:	fd cf       	rjmp	.-6      	; 0x2d5a <rf_tx_packet+0x11a>
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	f9 01       	movw	r30, r18
    2d66:	e1 52       	subi	r30, 0x21	; 33
    2d68:	f7 4f       	sbci	r31, 0xF7	; 247
    2d6a:	80 81       	ld	r24, Z
    2d6c:	8e bd       	out	0x2e, r24	; 46
    2d6e:	0d b4       	in	r0, 0x2d	; 45
    2d70:	07 fe       	sbrs	r0, 7
    2d72:	fd cf       	rjmp	.-6      	; 0x2d6e <rf_tx_packet+0x12e>
    2d74:	2f 5f       	subi	r18, 0xFF	; 255
    2d76:	3f 4f       	sbci	r19, 0xFF	; 255
    2d78:	22 30       	cpi	r18, 0x02	; 2
    2d7a:	31 05       	cpc	r19, r1
    2d7c:	99 f7       	brne	.-26     	; 0x2d64 <rf_tx_packet+0x124>
    2d7e:	40 9a       	sbi	0x08, 0	; 8
    2d80:	40 98       	cbi	0x08, 0	; 8
    2d82:	8e e3       	ldi	r24, 0x3E	; 62
    2d84:	8e bd       	out	0x2e, r24	; 46
    2d86:	0d b4       	in	r0, 0x2d	; 45
    2d88:	07 fe       	sbrs	r0, 7
    2d8a:	fd cf       	rjmp	.-6      	; 0x2d86 <rf_tx_packet+0x146>
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	f8 01       	movw	r30, r16
    2d92:	e2 0f       	add	r30, r18
    2d94:	f3 1f       	adc	r31, r19
    2d96:	80 81       	ld	r24, Z
    2d98:	8e bd       	out	0x2e, r24	; 46
    2d9a:	0d b4       	in	r0, 0x2d	; 45
    2d9c:	07 fe       	sbrs	r0, 7
    2d9e:	fd cf       	rjmp	.-6      	; 0x2d9a <rf_tx_packet+0x15a>
    2da0:	2f 5f       	subi	r18, 0xFF	; 255
    2da2:	3f 4f       	sbci	r19, 0xFF	; 255
    2da4:	22 30       	cpi	r18, 0x02	; 2
    2da6:	31 05       	cpc	r19, r1
    2da8:	99 f7       	brne	.-26     	; 0x2d90 <rf_tx_packet+0x150>
    2daa:	40 9a       	sbi	0x08, 0	; 8
    2dac:	40 98       	cbi	0x08, 0	; 8
    2dae:	8e e3       	ldi	r24, 0x3E	; 62
    2db0:	8e bd       	out	0x2e, r24	; 46
    2db2:	0d b4       	in	r0, 0x2d	; 45
    2db4:	07 fe       	sbrs	r0, 7
    2db6:	fd cf       	rjmp	.-6      	; 0x2db2 <rf_tx_packet+0x172>
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	f9 01       	movw	r30, r18
    2dbe:	ef 51       	subi	r30, 0x1F	; 31
    2dc0:	f7 4f       	sbci	r31, 0xF7	; 247
    2dc2:	80 81       	ld	r24, Z
    2dc4:	8e bd       	out	0x2e, r24	; 46
    2dc6:	0d b4       	in	r0, 0x2d	; 45
    2dc8:	07 fe       	sbrs	r0, 7
    2dca:	fd cf       	rjmp	.-6      	; 0x2dc6 <rf_tx_packet+0x186>
    2dcc:	2f 5f       	subi	r18, 0xFF	; 255
    2dce:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd0:	22 30       	cpi	r18, 0x02	; 2
    2dd2:	31 05       	cpc	r19, r1
    2dd4:	99 f7       	brne	.-26     	; 0x2dbc <rf_tx_packet+0x17c>
    2dd6:	40 9a       	sbi	0x08, 0	; 8
    2dd8:	55 23       	and	r21, r21
    2dda:	99 f0       	breq	.+38     	; 0x2e02 <rf_tx_packet+0x1c2>
    2ddc:	40 98       	cbi	0x08, 0	; 8
    2dde:	8e e3       	ldi	r24, 0x3E	; 62
    2de0:	8e bd       	out	0x2e, r24	; 46
    2de2:	0d b4       	in	r0, 0x2d	; 45
    2de4:	07 fe       	sbrs	r0, 7
    2de6:	fd cf       	rjmp	.-6      	; 0x2de2 <rf_tx_packet+0x1a2>
    2de8:	e8 ee       	ldi	r30, 0xE8	; 232
    2dea:	f8 e0       	ldi	r31, 0x08	; 8
    2dec:	80 81       	ld	r24, Z
    2dee:	8e bd       	out	0x2e, r24	; 46
    2df0:	0d b4       	in	r0, 0x2d	; 45
    2df2:	07 fe       	sbrs	r0, 7
    2df4:	fd cf       	rjmp	.-6      	; 0x2df0 <rf_tx_packet+0x1b0>
    2df6:	31 96       	adiw	r30, 0x01	; 1
    2df8:	88 e0       	ldi	r24, 0x08	; 8
    2dfa:	ec 3e       	cpi	r30, 0xEC	; 236
    2dfc:	f8 07       	cpc	r31, r24
    2dfe:	b1 f7       	brne	.-20     	; 0x2dec <rf_tx_packet+0x1ac>
    2e00:	40 9a       	sbi	0x08, 0	; 8
    2e02:	40 98       	cbi	0x08, 0	; 8
    2e04:	8e e3       	ldi	r24, 0x3E	; 62
    2e06:	8e bd       	out	0x2e, r24	; 46
    2e08:	0d b4       	in	r0, 0x2d	; 45
    2e0a:	07 fe       	sbrs	r0, 7
    2e0c:	fd cf       	rjmp	.-6      	; 0x2e08 <rf_tx_packet+0x1c8>
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	0d c0       	rjmp	.+26     	; 0x2e2e <rf_tx_packet+0x1ee>
    2e14:	f8 01       	movw	r30, r16
    2e16:	83 81       	ldd	r24, Z+3	; 0x03
    2e18:	94 81       	ldd	r25, Z+4	; 0x04
    2e1a:	48 0f       	add	r20, r24
    2e1c:	59 1f       	adc	r21, r25
    2e1e:	fa 01       	movw	r30, r20
    2e20:	80 81       	ld	r24, Z
    2e22:	8e bd       	out	0x2e, r24	; 46
    2e24:	0d b4       	in	r0, 0x2d	; 45
    2e26:	07 fe       	sbrs	r0, 7
    2e28:	fd cf       	rjmp	.-6      	; 0x2e24 <rf_tx_packet+0x1e4>
    2e2a:	2f 5f       	subi	r18, 0xFF	; 255
    2e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2e:	42 2f       	mov	r20, r18
    2e30:	55 27       	eor	r21, r21
    2e32:	46 17       	cp	r20, r22
    2e34:	57 07       	cpc	r21, r23
    2e36:	74 f3       	brlt	.-36     	; 0x2e14 <rf_tx_packet+0x1d4>
    2e38:	40 9a       	sbi	0x08, 0	; 8
    2e3a:	40 98       	cbi	0x08, 0	; 8
    2e3c:	8e e3       	ldi	r24, 0x3E	; 62
    2e3e:	8e bd       	out	0x2e, r24	; 46
    2e40:	0d b4       	in	r0, 0x2d	; 45
    2e42:	07 fc       	sbrc	r0, 7
    2e44:	05 c0       	rjmp	.+10     	; 0x2e50 <rf_tx_packet+0x210>
    2e46:	fc cf       	rjmp	.-8      	; 0x2e40 <rf_tx_packet+0x200>
    2e48:	0d b4       	in	r0, 0x2d	; 45
    2e4a:	07 fc       	sbrc	r0, 7
    2e4c:	94 c0       	rjmp	.+296    	; 0x2f76 <rf_tx_packet+0x336>
    2e4e:	fc cf       	rjmp	.-8      	; 0x2e48 <rf_tx_packet+0x208>
    2e50:	ae bd       	out	0x2e, r26	; 46
    2e52:	fa cf       	rjmp	.-12     	; 0x2e48 <rf_tx_packet+0x208>
    2e54:	80 91 e3 08 	lds	r24, 0x08E3
    2e58:	88 23       	and	r24, r24
    2e5a:	39 f4       	brne	.+14     	; 0x2e6a <rf_tx_packet+0x22a>
    2e5c:	40 98       	cbi	0x08, 0	; 8
    2e5e:	83 e0       	ldi	r24, 0x03	; 3
    2e60:	8e bd       	out	0x2e, r24	; 46
    2e62:	0d b4       	in	r0, 0x2d	; 45
    2e64:	07 fe       	sbrs	r0, 7
    2e66:	fd cf       	rjmp	.-6      	; 0x2e62 <rf_tx_packet+0x222>
    2e68:	40 9a       	sbi	0x08, 0	; 8
    2e6a:	40 98       	cbi	0x08, 0	; 8
    2e6c:	1e bc       	out	0x2e, r1	; 46
    2e6e:	0d b4       	in	r0, 0x2d	; 45
    2e70:	07 fe       	sbrs	r0, 7
    2e72:	fd cf       	rjmp	.-6      	; 0x2e6e <rf_tx_packet+0x22e>
    2e74:	8e b5       	in	r24, 0x2e	; 46
    2e76:	40 9a       	sbi	0x08, 0	; 8
    2e78:	81 ff       	sbrs	r24, 1
    2e7a:	f7 cf       	rjmp	.-18     	; 0x2e6a <rf_tx_packet+0x22a>
    2e7c:	00 e0       	ldi	r16, 0x00	; 0
    2e7e:	40 98       	cbi	0x08, 0	; 8
    2e80:	85 e0       	ldi	r24, 0x05	; 5
    2e82:	8e bd       	out	0x2e, r24	; 46
    2e84:	0d b4       	in	r0, 0x2d	; 45
    2e86:	07 fe       	sbrs	r0, 7
    2e88:	fd cf       	rjmp	.-6      	; 0x2e84 <rf_tx_packet+0x244>
    2e8a:	40 9a       	sbi	0x08, 0	; 8
    2e8c:	40 98       	cbi	0x08, 0	; 8
    2e8e:	1e bc       	out	0x2e, r1	; 46
    2e90:	0d b4       	in	r0, 0x2d	; 45
    2e92:	07 fe       	sbrs	r0, 7
    2e94:	fd cf       	rjmp	.-6      	; 0x2e90 <rf_tx_packet+0x250>
    2e96:	1e b5       	in	r17, 0x2e	; 46
    2e98:	40 9a       	sbi	0x08, 0	; 8
    2e9a:	0f 5f       	subi	r16, 0xFF	; 255
    2e9c:	05 36       	cpi	r16, 0x65	; 101
    2e9e:	51 f4       	brne	.+20     	; 0x2eb4 <rf_tx_packet+0x274>
    2ea0:	78 94       	sei
    2ea2:	80 91 d6 08 	lds	r24, 0x08D6
    2ea6:	90 91 d7 08 	lds	r25, 0x08D7
    2eaa:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	68 c0       	rjmp	.+208    	; 0x2f84 <rf_tx_packet+0x344>
    2eb4:	84 e6       	ldi	r24, 0x64	; 100
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <halWait>
    2ebc:	13 fd       	sbrc	r17, 3
    2ebe:	08 c0       	rjmp	.+16     	; 0x2ed0 <rf_tx_packet+0x290>
    2ec0:	de cf       	rjmp	.-68     	; 0x2e7e <rf_tx_packet+0x23e>
    2ec2:	40 98       	cbi	0x08, 0	; 8
    2ec4:	84 e0       	ldi	r24, 0x04	; 4
    2ec6:	8e bd       	out	0x2e, r24	; 46
    2ec8:	0d b4       	in	r0, 0x2d	; 45
    2eca:	07 fe       	sbrs	r0, 7
    2ecc:	fd cf       	rjmp	.-6      	; 0x2ec8 <rf_tx_packet+0x288>
    2ece:	40 9a       	sbi	0x08, 0	; 8
    2ed0:	78 94       	sei
    2ed2:	4e 9b       	sbis	0x09, 6	; 9
    2ed4:	fe cf       	rjmp	.-4      	; 0x2ed2 <rf_tx_packet+0x292>
    2ed6:	4e 99       	sbic	0x09, 6	; 9
    2ed8:	fe cf       	rjmp	.-4      	; 0x2ed6 <rf_tx_packet+0x296>
    2eda:	80 91 e6 08 	lds	r24, 0x08E6
    2ede:	88 23       	and	r24, r24
    2ee0:	91 f0       	breq	.+36     	; 0x2f06 <rf_tx_packet+0x2c6>
    2ee2:	84 ea       	ldi	r24, 0xA4	; 164
    2ee4:	92 e0       	ldi	r25, 0x02	; 2
    2ee6:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <halWait>
    2eea:	31 9b       	sbis	0x06, 1	; 6
    2eec:	0e c0       	rjmp	.+28     	; 0x2f0a <rf_tx_packet+0x2ca>
    2eee:	40 98       	cbi	0x08, 0	; 8
    2ef0:	8f e7       	ldi	r24, 0x7F	; 127
    2ef2:	8e bd       	out	0x2e, r24	; 46
    2ef4:	0d b4       	in	r0, 0x2d	; 45
    2ef6:	07 fe       	sbrs	r0, 7
    2ef8:	fd cf       	rjmp	.-6      	; 0x2ef4 <rf_tx_packet+0x2b4>
    2efa:	1e bc       	out	0x2e, r1	; 46
    2efc:	0d b4       	in	r0, 0x2d	; 45
    2efe:	07 fe       	sbrs	r0, 7
    2f00:	fd cf       	rjmp	.-6      	; 0x2efc <rf_tx_packet+0x2bc>
    2f02:	8e b5       	in	r24, 0x2e	; 46
    2f04:	40 9a       	sbi	0x08, 0	; 8
    2f06:	11 e0       	ldi	r17, 0x01	; 1
    2f08:	0f c0       	rjmp	.+30     	; 0x2f28 <rf_tx_packet+0x2e8>
    2f0a:	40 98       	cbi	0x08, 0	; 8
    2f0c:	88 e0       	ldi	r24, 0x08	; 8
    2f0e:	8e bd       	out	0x2e, r24	; 46
    2f10:	0d b4       	in	r0, 0x2d	; 45
    2f12:	07 fe       	sbrs	r0, 7
    2f14:	fd cf       	rjmp	.-6      	; 0x2f10 <rf_tx_packet+0x2d0>
    2f16:	40 9a       	sbi	0x08, 0	; 8
    2f18:	40 98       	cbi	0x08, 0	; 8
    2f1a:	88 e0       	ldi	r24, 0x08	; 8
    2f1c:	8e bd       	out	0x2e, r24	; 46
    2f1e:	0d b4       	in	r0, 0x2d	; 45
    2f20:	07 fe       	sbrs	r0, 7
    2f22:	fd cf       	rjmp	.-6      	; 0x2f1e <rf_tx_packet+0x2de>
    2f24:	40 9a       	sbi	0x08, 0	; 8
    2f26:	10 e0       	ldi	r17, 0x00	; 0
    2f28:	f8 94       	cli
    2f2a:	40 98       	cbi	0x08, 0	; 8
    2f2c:	86 e0       	ldi	r24, 0x06	; 6
    2f2e:	8e bd       	out	0x2e, r24	; 46
    2f30:	0d b4       	in	r0, 0x2d	; 45
    2f32:	07 fe       	sbrs	r0, 7
    2f34:	fd cf       	rjmp	.-6      	; 0x2f30 <rf_tx_packet+0x2f0>
    2f36:	40 9a       	sbi	0x08, 0	; 8
    2f38:	78 94       	sei
    2f3a:	80 91 dd 08 	lds	r24, 0x08DD
    2f3e:	8f 5f       	subi	r24, 0xFF	; 255
    2f40:	80 93 dd 08 	sts	0x08DD, r24
    2f44:	80 91 d6 08 	lds	r24, 0x08D6
    2f48:	90 91 d7 08 	lds	r25, 0x08D7
    2f4c:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    2f50:	81 2f       	mov	r24, r17
    2f52:	99 27       	eor	r25, r25
    2f54:	17 c0       	rjmp	.+46     	; 0x2f84 <rf_tx_packet+0x344>
    2f56:	40 9a       	sbi	0x08, 0	; 8
    2f58:	81 e4       	ldi	r24, 0x41	; 65
    2f5a:	98 e8       	ldi	r25, 0x88	; 136
    2f5c:	9a 83       	std	Y+2, r25	; 0x02
    2f5e:	89 83       	std	Y+1, r24	; 0x01
    2f60:	80 91 e6 08 	lds	r24, 0x08E6
    2f64:	88 23       	and	r24, r24
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <rf_tx_packet+0x32a>
    2f68:	c9 ce       	rjmp	.-622    	; 0x2cfc <rf_tx_packet+0xbc>
    2f6a:	cc ce       	rjmp	.-616    	; 0x2d04 <rf_tx_packet+0xc4>
    2f6c:	40 9a       	sbi	0x08, 0	; 8
    2f6e:	40 98       	cbi	0x08, 0	; 8
    2f70:	8e e3       	ldi	r24, 0x3E	; 62
    2f72:	8e bd       	out	0x2e, r24	; 46
    2f74:	f2 ce       	rjmp	.-540    	; 0x2d5a <rf_tx_packet+0x11a>
    2f76:	40 9a       	sbi	0x08, 0	; 8
    2f78:	f8 01       	movw	r30, r16
    2f7a:	85 81       	ldd	r24, Z+5	; 0x05
    2f7c:	88 23       	and	r24, r24
    2f7e:	09 f0       	breq	.+2      	; 0x2f82 <rf_tx_packet+0x342>
    2f80:	69 cf       	rjmp	.-302    	; 0x2e54 <rf_tx_packet+0x214>
    2f82:	9f cf       	rjmp	.-194    	; 0x2ec2 <rf_tx_packet+0x282>
    2f84:	22 96       	adiw	r28, 0x02	; 2
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	de bf       	out	0x3e, r29	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	df 91       	pop	r29
    2f92:	cf 91       	pop	r28
    2f94:	1f 91       	pop	r17
    2f96:	0f 91       	pop	r16
    2f98:	ff 90       	pop	r15
    2f9a:	ef 90       	pop	r14
    2f9c:	08 95       	ret

00002f9e <rf_tx_tdma_packet>:
    2f9e:	8f 92       	push	r8
    2fa0:	9f 92       	push	r9
    2fa2:	bf 92       	push	r11
    2fa4:	cf 92       	push	r12
    2fa6:	df 92       	push	r13
    2fa8:	ef 92       	push	r14
    2faa:	ff 92       	push	r15
    2fac:	0f 93       	push	r16
    2fae:	1f 93       	push	r17
    2fb0:	cf 93       	push	r28
    2fb2:	df 93       	push	r29
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    2fb8:	22 97       	sbiw	r28, 0x02	; 2
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	f8 94       	cli
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	8c 01       	movw	r16, r24
    2fc6:	6b 01       	movw	r12, r22
    2fc8:	7a 01       	movw	r14, r20
    2fca:	49 01       	movw	r8, r18
    2fcc:	80 91 d6 08 	lds	r24, 0x08D6
    2fd0:	90 91 d7 08 	lds	r25, 0x08D7
    2fd4:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
    2fd8:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    2fdc:	40 98       	cbi	0x08, 0	; 8
    2fde:	88 e0       	ldi	r24, 0x08	; 8
    2fe0:	8e bd       	out	0x2e, r24	; 46
    2fe2:	0d b4       	in	r0, 0x2d	; 45
    2fe4:	07 fe       	sbrs	r0, 7
    2fe6:	fd cf       	rjmp	.-6      	; 0x2fe2 <rf_tx_tdma_packet+0x44>
    2fe8:	40 9a       	sbi	0x08, 0	; 8
    2fea:	40 98       	cbi	0x08, 0	; 8
    2fec:	88 e0       	ldi	r24, 0x08	; 8
    2fee:	8e bd       	out	0x2e, r24	; 46
    2ff0:	0d b4       	in	r0, 0x2d	; 45
    2ff2:	07 fe       	sbrs	r0, 7
    2ff4:	fd cf       	rjmp	.-6      	; 0x2ff0 <rf_tx_tdma_packet+0x52>
    2ff6:	40 9a       	sbi	0x08, 0	; 8
    2ff8:	67 99       	sbic	0x0c, 7	; 12
    2ffa:	fe cf       	rjmp	.-4      	; 0x2ff8 <rf_tx_tdma_packet+0x5a>
    2ffc:	4e 99       	sbic	0x09, 6	; 9
    2ffe:	fc cf       	rjmp	.-8      	; 0x2ff8 <rf_tx_tdma_packet+0x5a>
    3000:	f8 94       	cli
    3002:	40 98       	cbi	0x08, 0	; 8
    3004:	89 e0       	ldi	r24, 0x09	; 9
    3006:	8e bd       	out	0x2e, r24	; 46
    3008:	0d b4       	in	r0, 0x2d	; 45
    300a:	07 fe       	sbrs	r0, 7
    300c:	fd cf       	rjmp	.-6      	; 0x3008 <rf_tx_tdma_packet+0x6a>
    300e:	40 9a       	sbi	0x08, 0	; 8
    3010:	40 98       	cbi	0x08, 0	; 8
    3012:	89 e0       	ldi	r24, 0x09	; 9
    3014:	8e bd       	out	0x2e, r24	; 46
    3016:	0d b4       	in	r0, 0x2d	; 45
    3018:	07 fe       	sbrs	r0, 7
    301a:	fd cf       	rjmp	.-6      	; 0x3016 <rf_tx_tdma_packet+0x78>
    301c:	40 9a       	sbi	0x08, 0	; 8
    301e:	f8 01       	movw	r30, r16
    3020:	62 81       	ldd	r22, Z+2	; 0x02
    3022:	46 2f       	mov	r20, r22
    3024:	55 27       	eor	r21, r21
    3026:	47 fd       	sbrc	r20, 7
    3028:	50 95       	com	r21
    302a:	bb 24       	eor	r11, r11
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	07 c0       	rjmp	.+14     	; 0x3040 <rf_tx_tdma_packet+0xa2>
    3032:	f8 01       	movw	r30, r16
    3034:	83 81       	ldd	r24, Z+3	; 0x03
    3036:	94 81       	ldd	r25, Z+4	; 0x04
    3038:	a8 0f       	add	r26, r24
    303a:	b9 1f       	adc	r27, r25
    303c:	8c 91       	ld	r24, X
    303e:	b8 0e       	add	r11, r24
    3040:	82 2f       	mov	r24, r18
    3042:	2f 5f       	subi	r18, 0xFF	; 255
    3044:	3f 4f       	sbci	r19, 0xFF	; 255
    3046:	a8 2f       	mov	r26, r24
    3048:	bb 27       	eor	r27, r27
    304a:	a4 17       	cp	r26, r20
    304c:	b5 07       	cpc	r27, r21
    304e:	8c f3       	brlt	.-30     	; 0x3032 <rf_tx_tdma_packet+0x94>
    3050:	96 2f       	mov	r25, r22
    3052:	94 5f       	subi	r25, 0xF4	; 244
    3054:	40 98       	cbi	0x08, 0	; 8
    3056:	8e e3       	ldi	r24, 0x3E	; 62
    3058:	8e bd       	out	0x2e, r24	; 46
    305a:	0d b4       	in	r0, 0x2d	; 45
    305c:	07 fc       	sbrc	r0, 7
    305e:	05 c0       	rjmp	.+10     	; 0x306a <rf_tx_tdma_packet+0xcc>
    3060:	fc cf       	rjmp	.-8      	; 0x305a <rf_tx_tdma_packet+0xbc>
    3062:	0d b4       	in	r0, 0x2d	; 45
    3064:	07 fc       	sbrc	r0, 7
    3066:	18 c1       	rjmp	.+560    	; 0x3298 <rf_tx_tdma_packet+0x2fa>
    3068:	fc cf       	rjmp	.-8      	; 0x3062 <rf_tx_tdma_packet+0xc4>
    306a:	9e bd       	out	0x2e, r25	; 46
    306c:	fa cf       	rjmp	.-12     	; 0x3062 <rf_tx_tdma_packet+0xc4>
    306e:	81 e6       	ldi	r24, 0x61	; 97
    3070:	98 e8       	ldi	r25, 0x88	; 136
    3072:	9a 83       	std	Y+2, r25	; 0x02
    3074:	89 83       	std	Y+1, r24	; 0x01
    3076:	40 98       	cbi	0x08, 0	; 8
    3078:	8e e3       	ldi	r24, 0x3E	; 62
    307a:	8e bd       	out	0x2e, r24	; 46
    307c:	0d b4       	in	r0, 0x2d	; 45
    307e:	07 fe       	sbrs	r0, 7
    3080:	fd cf       	rjmp	.-6      	; 0x307c <rf_tx_tdma_packet+0xde>
    3082:	fe 01       	movw	r30, r28
    3084:	31 96       	adiw	r30, 0x01	; 1
    3086:	9e 01       	movw	r18, r28
    3088:	2d 5f       	subi	r18, 0xFD	; 253
    308a:	3f 4f       	sbci	r19, 0xFF	; 255
    308c:	80 81       	ld	r24, Z
    308e:	8e bd       	out	0x2e, r24	; 46
    3090:	0d b4       	in	r0, 0x2d	; 45
    3092:	07 fe       	sbrs	r0, 7
    3094:	fd cf       	rjmp	.-6      	; 0x3090 <rf_tx_tdma_packet+0xf2>
    3096:	31 96       	adiw	r30, 0x01	; 1
    3098:	e2 17       	cp	r30, r18
    309a:	f3 07       	cpc	r31, r19
    309c:	b9 f7       	brne	.-18     	; 0x308c <rf_tx_tdma_packet+0xee>
    309e:	40 9a       	sbi	0x08, 0	; 8
    30a0:	40 98       	cbi	0x08, 0	; 8
    30a2:	8e e3       	ldi	r24, 0x3E	; 62
    30a4:	8e bd       	out	0x2e, r24	; 46
    30a6:	0d b4       	in	r0, 0x2d	; 45
    30a8:	07 fc       	sbrc	r0, 7
    30aa:	05 c0       	rjmp	.+10     	; 0x30b6 <rf_tx_tdma_packet+0x118>
    30ac:	fc cf       	rjmp	.-8      	; 0x30a6 <rf_tx_tdma_packet+0x108>
    30ae:	0d b4       	in	r0, 0x2d	; 45
    30b0:	07 fc       	sbrc	r0, 7
    30b2:	fb c0       	rjmp	.+502    	; 0x32aa <rf_tx_tdma_packet+0x30c>
    30b4:	fc cf       	rjmp	.-8      	; 0x30ae <rf_tx_tdma_packet+0x110>
    30b6:	80 91 dd 08 	lds	r24, 0x08DD
    30ba:	8e bd       	out	0x2e, r24	; 46
    30bc:	f8 cf       	rjmp	.-16     	; 0x30ae <rf_tx_tdma_packet+0x110>
    30be:	0d b4       	in	r0, 0x2d	; 45
    30c0:	07 fe       	sbrs	r0, 7
    30c2:	fd cf       	rjmp	.-6      	; 0x30be <rf_tx_tdma_packet+0x120>
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	f9 01       	movw	r30, r18
    30ca:	e1 52       	subi	r30, 0x21	; 33
    30cc:	f7 4f       	sbci	r31, 0xF7	; 247
    30ce:	80 81       	ld	r24, Z
    30d0:	8e bd       	out	0x2e, r24	; 46
    30d2:	0d b4       	in	r0, 0x2d	; 45
    30d4:	07 fe       	sbrs	r0, 7
    30d6:	fd cf       	rjmp	.-6      	; 0x30d2 <rf_tx_tdma_packet+0x134>
    30d8:	2f 5f       	subi	r18, 0xFF	; 255
    30da:	3f 4f       	sbci	r19, 0xFF	; 255
    30dc:	22 30       	cpi	r18, 0x02	; 2
    30de:	31 05       	cpc	r19, r1
    30e0:	99 f7       	brne	.-26     	; 0x30c8 <rf_tx_tdma_packet+0x12a>
    30e2:	40 9a       	sbi	0x08, 0	; 8
    30e4:	40 98       	cbi	0x08, 0	; 8
    30e6:	8e e3       	ldi	r24, 0x3E	; 62
    30e8:	8e bd       	out	0x2e, r24	; 46
    30ea:	0d b4       	in	r0, 0x2d	; 45
    30ec:	07 fe       	sbrs	r0, 7
    30ee:	fd cf       	rjmp	.-6      	; 0x30ea <rf_tx_tdma_packet+0x14c>
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	f8 01       	movw	r30, r16
    30f6:	e2 0f       	add	r30, r18
    30f8:	f3 1f       	adc	r31, r19
    30fa:	80 81       	ld	r24, Z
    30fc:	8e bd       	out	0x2e, r24	; 46
    30fe:	0d b4       	in	r0, 0x2d	; 45
    3100:	07 fe       	sbrs	r0, 7
    3102:	fd cf       	rjmp	.-6      	; 0x30fe <rf_tx_tdma_packet+0x160>
    3104:	2f 5f       	subi	r18, 0xFF	; 255
    3106:	3f 4f       	sbci	r19, 0xFF	; 255
    3108:	22 30       	cpi	r18, 0x02	; 2
    310a:	31 05       	cpc	r19, r1
    310c:	99 f7       	brne	.-26     	; 0x30f4 <rf_tx_tdma_packet+0x156>
    310e:	40 9a       	sbi	0x08, 0	; 8
    3110:	40 98       	cbi	0x08, 0	; 8
    3112:	8e e3       	ldi	r24, 0x3E	; 62
    3114:	8e bd       	out	0x2e, r24	; 46
    3116:	0d b4       	in	r0, 0x2d	; 45
    3118:	07 fe       	sbrs	r0, 7
    311a:	fd cf       	rjmp	.-6      	; 0x3116 <rf_tx_tdma_packet+0x178>
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	f9 01       	movw	r30, r18
    3122:	ef 51       	subi	r30, 0x1F	; 31
    3124:	f7 4f       	sbci	r31, 0xF7	; 247
    3126:	80 81       	ld	r24, Z
    3128:	8e bd       	out	0x2e, r24	; 46
    312a:	0d b4       	in	r0, 0x2d	; 45
    312c:	07 fe       	sbrs	r0, 7
    312e:	fd cf       	rjmp	.-6      	; 0x312a <rf_tx_tdma_packet+0x18c>
    3130:	2f 5f       	subi	r18, 0xFF	; 255
    3132:	3f 4f       	sbci	r19, 0xFF	; 255
    3134:	22 30       	cpi	r18, 0x02	; 2
    3136:	31 05       	cpc	r19, r1
    3138:	99 f7       	brne	.-26     	; 0x3120 <rf_tx_tdma_packet+0x182>
    313a:	40 9a       	sbi	0x08, 0	; 8
    313c:	b7 01       	movw	r22, r14
    313e:	c6 01       	movw	r24, r12
    3140:	0e 94 2c 33 	call	0x6658	; 0x6658 <nrk_high_speed_timer_wait>
    3144:	f8 01       	movw	r30, r16
    3146:	85 81       	ldd	r24, Z+5	; 0x05
    3148:	88 23       	and	r24, r24
    314a:	79 f1       	breq	.+94     	; 0x31aa <rf_tx_tdma_packet+0x20c>
    314c:	80 91 e3 08 	lds	r24, 0x08E3
    3150:	88 23       	and	r24, r24
    3152:	39 f4       	brne	.+14     	; 0x3162 <rf_tx_tdma_packet+0x1c4>
    3154:	40 98       	cbi	0x08, 0	; 8
    3156:	83 e0       	ldi	r24, 0x03	; 3
    3158:	8e bd       	out	0x2e, r24	; 46
    315a:	0d b4       	in	r0, 0x2d	; 45
    315c:	07 fe       	sbrs	r0, 7
    315e:	fd cf       	rjmp	.-6      	; 0x315a <rf_tx_tdma_packet+0x1bc>
    3160:	40 9a       	sbi	0x08, 0	; 8
    3162:	ee 24       	eor	r14, r14
    3164:	40 98       	cbi	0x08, 0	; 8
    3166:	85 e0       	ldi	r24, 0x05	; 5
    3168:	8e bd       	out	0x2e, r24	; 46
    316a:	0d b4       	in	r0, 0x2d	; 45
    316c:	07 fe       	sbrs	r0, 7
    316e:	fd cf       	rjmp	.-6      	; 0x316a <rf_tx_tdma_packet+0x1cc>
    3170:	40 9a       	sbi	0x08, 0	; 8
    3172:	40 98       	cbi	0x08, 0	; 8
    3174:	1e bc       	out	0x2e, r1	; 46
    3176:	0d b4       	in	r0, 0x2d	; 45
    3178:	07 fe       	sbrs	r0, 7
    317a:	fd cf       	rjmp	.-6      	; 0x3176 <rf_tx_tdma_packet+0x1d8>
    317c:	fe b4       	in	r15, 0x2e	; 46
    317e:	40 9a       	sbi	0x08, 0	; 8
    3180:	e3 94       	inc	r14
    3182:	f5 e6       	ldi	r31, 0x65	; 101
    3184:	ef 16       	cp	r14, r31
    3186:	51 f4       	brne	.+20     	; 0x319c <rf_tx_tdma_packet+0x1fe>
    3188:	78 94       	sei
    318a:	80 91 d6 08 	lds	r24, 0x08D6
    318e:	90 91 d7 08 	lds	r25, 0x08D7
    3192:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	8e c0       	rjmp	.+284    	; 0x32b8 <rf_tx_tdma_packet+0x31a>
    319c:	84 e6       	ldi	r24, 0x64	; 100
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <halWait>
    31a4:	f3 fc       	sbrc	r15, 3
    31a6:	08 c0       	rjmp	.+16     	; 0x31b8 <rf_tx_tdma_packet+0x21a>
    31a8:	dd cf       	rjmp	.-70     	; 0x3164 <rf_tx_tdma_packet+0x1c6>
    31aa:	40 98       	cbi	0x08, 0	; 8
    31ac:	84 e0       	ldi	r24, 0x04	; 4
    31ae:	8e bd       	out	0x2e, r24	; 46
    31b0:	0d b4       	in	r0, 0x2d	; 45
    31b2:	07 fe       	sbrs	r0, 7
    31b4:	fd cf       	rjmp	.-6      	; 0x31b0 <rf_tx_tdma_packet+0x212>
    31b6:	40 9a       	sbi	0x08, 0	; 8
    31b8:	80 91 5a 02 	lds	r24, 0x025A
    31bc:	0e 94 2d 1c 	call	0x385a	; 0x385a <nrk_gpio_set>
    31c0:	80 91 84 00 	lds	r24, 0x0084
    31c4:	90 91 85 00 	lds	r25, 0x0085
    31c8:	f4 01       	movw	r30, r8
    31ca:	91 83       	std	Z+1, r25	; 0x01
    31cc:	80 83       	st	Z, r24
    31ce:	40 98       	cbi	0x08, 0	; 8
    31d0:	8e e3       	ldi	r24, 0x3E	; 62
    31d2:	8e bd       	out	0x2e, r24	; 46
    31d4:	0d b4       	in	r0, 0x2d	; 45
    31d6:	07 fe       	sbrs	r0, 7
    31d8:	fd cf       	rjmp	.-6      	; 0x31d4 <rf_tx_tdma_packet+0x236>
    31da:	f8 01       	movw	r30, r16
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	48 2f       	mov	r20, r24
    31e0:	55 27       	eor	r21, r21
    31e2:	47 fd       	sbrc	r20, 7
    31e4:	50 95       	com	r21
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	0c c0       	rjmp	.+24     	; 0x3204 <rf_tx_tdma_packet+0x266>
    31ec:	f8 01       	movw	r30, r16
    31ee:	83 81       	ldd	r24, Z+3	; 0x03
    31f0:	94 81       	ldd	r25, Z+4	; 0x04
    31f2:	a8 0f       	add	r26, r24
    31f4:	b9 1f       	adc	r27, r25
    31f6:	8c 91       	ld	r24, X
    31f8:	8e bd       	out	0x2e, r24	; 46
    31fa:	0d b4       	in	r0, 0x2d	; 45
    31fc:	07 fe       	sbrs	r0, 7
    31fe:	fd cf       	rjmp	.-6      	; 0x31fa <rf_tx_tdma_packet+0x25c>
    3200:	2f 5f       	subi	r18, 0xFF	; 255
    3202:	3f 4f       	sbci	r19, 0xFF	; 255
    3204:	a2 2f       	mov	r26, r18
    3206:	bb 27       	eor	r27, r27
    3208:	a4 17       	cp	r26, r20
    320a:	b5 07       	cpc	r27, r21
    320c:	7c f3       	brlt	.-34     	; 0x31ec <rf_tx_tdma_packet+0x24e>
    320e:	40 9a       	sbi	0x08, 0	; 8
    3210:	40 98       	cbi	0x08, 0	; 8
    3212:	8e e3       	ldi	r24, 0x3E	; 62
    3214:	8e bd       	out	0x2e, r24	; 46
    3216:	0d b4       	in	r0, 0x2d	; 45
    3218:	07 fc       	sbrc	r0, 7
    321a:	05 c0       	rjmp	.+10     	; 0x3226 <rf_tx_tdma_packet+0x288>
    321c:	fc cf       	rjmp	.-8      	; 0x3216 <rf_tx_tdma_packet+0x278>
    321e:	0d b4       	in	r0, 0x2d	; 45
    3220:	07 fc       	sbrc	r0, 7
    3222:	48 c0       	rjmp	.+144    	; 0x32b4 <rf_tx_tdma_packet+0x316>
    3224:	fc cf       	rjmp	.-8      	; 0x321e <rf_tx_tdma_packet+0x280>
    3226:	be bc       	out	0x2e, r11	; 46
    3228:	fa cf       	rjmp	.-12     	; 0x321e <rf_tx_tdma_packet+0x280>
    322a:	4e 9b       	sbis	0x09, 6	; 9
    322c:	fe cf       	rjmp	.-4      	; 0x322a <rf_tx_tdma_packet+0x28c>
    322e:	f8 94       	cli
    3230:	4e 99       	sbic	0x09, 6	; 9
    3232:	fe cf       	rjmp	.-4      	; 0x3230 <rf_tx_tdma_packet+0x292>
    3234:	40 98       	cbi	0x08, 0	; 8
    3236:	88 e0       	ldi	r24, 0x08	; 8
    3238:	8e bd       	out	0x2e, r24	; 46
    323a:	0d b4       	in	r0, 0x2d	; 45
    323c:	07 fe       	sbrs	r0, 7
    323e:	fd cf       	rjmp	.-6      	; 0x323a <rf_tx_tdma_packet+0x29c>
    3240:	40 9a       	sbi	0x08, 0	; 8
    3242:	40 98       	cbi	0x08, 0	; 8
    3244:	88 e0       	ldi	r24, 0x08	; 8
    3246:	8e bd       	out	0x2e, r24	; 46
    3248:	0d b4       	in	r0, 0x2d	; 45
    324a:	07 fe       	sbrs	r0, 7
    324c:	fd cf       	rjmp	.-6      	; 0x3248 <rf_tx_tdma_packet+0x2aa>
    324e:	40 9a       	sbi	0x08, 0	; 8
    3250:	40 98       	cbi	0x08, 0	; 8
    3252:	89 e0       	ldi	r24, 0x09	; 9
    3254:	8e bd       	out	0x2e, r24	; 46
    3256:	0d b4       	in	r0, 0x2d	; 45
    3258:	07 fe       	sbrs	r0, 7
    325a:	fd cf       	rjmp	.-6      	; 0x3256 <rf_tx_tdma_packet+0x2b8>
    325c:	40 9a       	sbi	0x08, 0	; 8
    325e:	40 98       	cbi	0x08, 0	; 8
    3260:	89 e0       	ldi	r24, 0x09	; 9
    3262:	8e bd       	out	0x2e, r24	; 46
    3264:	0d b4       	in	r0, 0x2d	; 45
    3266:	07 fe       	sbrs	r0, 7
    3268:	fd cf       	rjmp	.-6      	; 0x3264 <rf_tx_tdma_packet+0x2c6>
    326a:	40 9a       	sbi	0x08, 0	; 8
    326c:	40 98       	cbi	0x08, 0	; 8
    326e:	86 e0       	ldi	r24, 0x06	; 6
    3270:	8e bd       	out	0x2e, r24	; 46
    3272:	0d b4       	in	r0, 0x2d	; 45
    3274:	07 fe       	sbrs	r0, 7
    3276:	fd cf       	rjmp	.-6      	; 0x3272 <rf_tx_tdma_packet+0x2d4>
    3278:	40 9a       	sbi	0x08, 0	; 8
    327a:	78 94       	sei
    327c:	80 91 dd 08 	lds	r24, 0x08DD
    3280:	8f 5f       	subi	r24, 0xFF	; 255
    3282:	80 93 dd 08 	sts	0x08DD, r24
    3286:	80 91 d6 08 	lds	r24, 0x08D6
    328a:	90 91 d7 08 	lds	r25, 0x08D7
    328e:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	10 c0       	rjmp	.+32     	; 0x32b8 <rf_tx_tdma_packet+0x31a>
    3298:	40 9a       	sbi	0x08, 0	; 8
    329a:	f8 01       	movw	r30, r16
    329c:	86 81       	ldd	r24, Z+6	; 0x06
    329e:	88 23       	and	r24, r24
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <rf_tx_tdma_packet+0x306>
    32a2:	e5 ce       	rjmp	.-566    	; 0x306e <rf_tx_tdma_packet+0xd0>
    32a4:	81 e4       	ldi	r24, 0x41	; 65
    32a6:	98 e8       	ldi	r25, 0x88	; 136
    32a8:	e4 ce       	rjmp	.-568    	; 0x3072 <rf_tx_tdma_packet+0xd4>
    32aa:	40 9a       	sbi	0x08, 0	; 8
    32ac:	40 98       	cbi	0x08, 0	; 8
    32ae:	8e e3       	ldi	r24, 0x3E	; 62
    32b0:	8e bd       	out	0x2e, r24	; 46
    32b2:	05 cf       	rjmp	.-502    	; 0x30be <rf_tx_tdma_packet+0x120>
    32b4:	40 9a       	sbi	0x08, 0	; 8
    32b6:	b9 cf       	rjmp	.-142    	; 0x322a <rf_tx_tdma_packet+0x28c>
    32b8:	22 96       	adiw	r28, 0x02	; 2
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	1f 91       	pop	r17
    32ca:	0f 91       	pop	r16
    32cc:	ff 90       	pop	r15
    32ce:	ef 90       	pop	r14
    32d0:	df 90       	pop	r13
    32d2:	cf 90       	pop	r12
    32d4:	bf 90       	pop	r11
    32d6:	9f 90       	pop	r9
    32d8:	8f 90       	pop	r8
    32da:	08 95       	ret

000032dc <rf_addr_decode_set_my_mac>:
				}
			}else if(channel==AUDIO_P2P)
			{
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
    32dc:	cf 93       	push	r28
    32de:	df 93       	push	r29
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	22 97       	sbiw	r28, 0x02	; 2
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
    32f0:	9a 83       	std	Y+2, r25	; 0x02
    32f2:	89 83       	std	Y+1, r24	; 0x01
			      uint8_t i;
				max=0;
    32f4:	90 93 e2 08 	sts	0x08E2, r25
    32f8:	80 93 e1 08 	sts	0x08E1, r24
			        min=1025;
    32fc:	84 ef       	ldi	r24, 0xF4	; 244
    32fe:	91 e0       	ldi	r25, 0x01	; 1
    3300:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
			      for(i=0; i<64; i++ )
    3304:	40 98       	cbi	0x08, 0	; 8
    3306:	8a ee       	ldi	r24, 0xEA	; 234
    3308:	8e bd       	out	0x2e, r24	; 46
    330a:	0d b4       	in	r0, 0x2d	; 45
    330c:	07 fe       	sbrs	r0, 7
    330e:	fd cf       	rjmp	.-6      	; 0x330a <rf_addr_decode_set_my_mac+0x2e>
    3310:	80 e8       	ldi	r24, 0x80	; 128
    3312:	8e bd       	out	0x2e, r24	; 46
    3314:	0d b4       	in	r0, 0x2d	; 45
    3316:	07 fe       	sbrs	r0, 7
    3318:	fd cf       	rjmp	.-6      	; 0x3314 <rf_addr_decode_set_my_mac+0x38>
    331a:	fe 01       	movw	r30, r28
    331c:	31 96       	adiw	r30, 0x01	; 1
    331e:	9e 01       	movw	r18, r28
    3320:	2d 5f       	subi	r18, 0xFD	; 253
    3322:	3f 4f       	sbci	r19, 0xFF	; 255
    3324:	80 81       	ld	r24, Z
    3326:	8e bd       	out	0x2e, r24	; 46
    3328:	0d b4       	in	r0, 0x2d	; 45
    332a:	07 fe       	sbrs	r0, 7
    332c:	fd cf       	rjmp	.-6      	; 0x3328 <rf_addr_decode_set_my_mac+0x4c>
    332e:	31 96       	adiw	r30, 0x01	; 1
    3330:	e2 17       	cp	r30, r18
    3332:	f3 07       	cpc	r31, r19
    3334:	b9 f7       	brne	.-18     	; 0x3324 <rf_addr_decode_set_my_mac+0x48>
    3336:	40 9a       	sbi	0x08, 0	; 8
				{
    3338:	84 ef       	ldi	r24, 0xF4	; 244
    333a:	91 e0       	ldi	r25, 0x01	; 1
    333c:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
    3340:	22 96       	adiw	r28, 0x02	; 2
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	f8 94       	cli
    3346:	de bf       	out	0x3e, r29	; 62
    3348:	0f be       	out	0x3f, r0	; 63
    334a:	cd bf       	out	0x3d, r28	; 61
    334c:	df 91       	pop	r29
    334e:	cf 91       	pop	r28
    3350:	08 95       	ret

00003352 <rf_security_set_key>:
#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)
    3352:	6f 92       	push	r6
    3354:	7f 92       	push	r7
    3356:	8f 92       	push	r8
    3358:	9f 92       	push	r9
    335a:	af 92       	push	r10
    335c:	bf 92       	push	r11
    335e:	cf 92       	push	r12
    3360:	df 92       	push	r13
    3362:	ef 92       	push	r14
    3364:	ff 92       	push	r15
    3366:	0f 93       	push	r16
    3368:	1f 93       	push	r17
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	22 97       	sbiw	r28, 0x02	; 2
    3374:	0f b6       	in	r0, 0x3f	; 63
    3376:	f8 94       	cli
    3378:	de bf       	out	0x3e, r29	; 62
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	cd bf       	out	0x3d, r28	; 61
    337e:	8c 01       	movw	r16, r24

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

    3380:	84 e6       	ldi	r24, 0x64	; 100
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
    3388:	78 01       	movw	r14, r16
    338a:	c1 2c       	mov	r12, r1
    338c:	b1 e0       	ldi	r27, 0x01	; 1
    338e:	db 2e       	mov	r13, r27
#define ADC_SAMPLE_SINGLE() \
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
} while(0)
    3390:	3e 01       	movw	r6, r28
    3392:	08 94       	sec
    3394:	61 1c       	adc	r6, r1
    3396:	71 1c       	adc	r7, r1
    3398:	a3 e0       	ldi	r26, 0x03	; 3
    339a:	8a 2e       	mov	r8, r26
    339c:	91 2c       	mov	r9, r1
    339e:	8c 0e       	add	r8, r28
    33a0:	9d 1e       	adc	r9, r29
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    do { \
ADCSRA |= BM(ADSC); \
    33a2:	f7 01       	movw	r30, r14
    33a4:	80 81       	ld	r24, Z
    33a6:	21 81       	ldd	r18, Z+1	; 0x01
    33a8:	33 27       	eor	r19, r19
    33aa:	99 27       	eor	r25, r25
    33ac:	98 2f       	mov	r25, r24
    33ae:	88 27       	eor	r24, r24
    33b0:	28 2b       	or	r18, r24
    33b2:	39 2b       	or	r19, r25
    33b4:	3a 83       	std	Y+2, r19	; 0x02
    33b6:	29 83       	std	Y+1, r18	; 0x01
while (!(ADCSRA & 0x10)); \
    33b8:	84 e6       	ldi	r24, 0x64	; 100
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
} while(0)
    33c0:	40 98       	cbi	0x08, 0	; 8
    33c2:	8c 2d       	mov	r24, r12
    33c4:	80 68       	ori	r24, 0x80	; 128
    33c6:	8e bd       	out	0x2e, r24	; 46
    33c8:	0d b4       	in	r0, 0x2d	; 45
    33ca:	07 fe       	sbrs	r0, 7
    33cc:	fd cf       	rjmp	.-6      	; 0x33c8 <rf_security_set_key+0x76>
    33ce:	c6 01       	movw	r24, r12
    33d0:	95 95       	asr	r25
    33d2:	87 95       	ror	r24
    33d4:	80 7c       	andi	r24, 0xC0	; 192
    33d6:	8e bd       	out	0x2e, r24	; 46
    33d8:	0d b4       	in	r0, 0x2d	; 45
    33da:	07 fe       	sbrs	r0, 7
    33dc:	fd cf       	rjmp	.-6      	; 0x33d8 <rf_security_set_key+0x86>
    33de:	83 01       	movw	r16, r6
    33e0:	53 01       	movw	r10, r6
    33e2:	f5 01       	movw	r30, r10
    33e4:	80 81       	ld	r24, Z
    33e6:	8e bd       	out	0x2e, r24	; 46
    33e8:	0d b4       	in	r0, 0x2d	; 45
    33ea:	07 fe       	sbrs	r0, 7
    33ec:	fd cf       	rjmp	.-6      	; 0x33e8 <rf_security_set_key+0x96>
    33ee:	08 94       	sec
    33f0:	a1 1c       	adc	r10, r1
    33f2:	b1 1c       	adc	r11, r1
    33f4:	a8 14       	cp	r10, r8
    33f6:	b9 04       	cpc	r11, r9
    33f8:	a1 f7       	brne	.-24     	; 0x33e2 <rf_security_set_key+0x90>
    33fa:	40 9a       	sbi	0x08, 0	; 8
    33fc:	08 94       	sec
    33fe:	e1 1c       	adc	r14, r1
    3400:	f1 1c       	adc	r15, r1
    3402:	82 e0       	ldi	r24, 0x02	; 2
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	c8 0e       	add	r12, r24
    3408:	d9 1e       	adc	r13, r25

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    340a:	90 e1       	ldi	r25, 0x10	; 16
    340c:	c9 16       	cp	r12, r25
    340e:	91 e0       	ldi	r25, 0x01	; 1
    3410:	d9 06       	cpc	r13, r25
    3412:	39 f6       	brne	.-114    	; 0x33a2 <rf_security_set_key+0x50>
while (!(ADCSRA & 0x10)); \
} while(0)

// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
do { \
    3414:	84 e6       	ldi	r24, 0x64	; 100
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
    341c:	20 e1       	ldi	r18, 0x10	; 16
    341e:	31 e0       	ldi	r19, 0x01	; 1
    3420:	40 e4       	ldi	r20, 0x40	; 64
    3422:	51 e0       	ldi	r21, 0x01	; 1
x =  ADCL; \
x |= ADCH << 8; \
} while (0)
    3424:	1a 82       	std	Y+2, r1	; 0x02
    3426:	19 82       	std	Y+1, r1	; 0x01

    3428:	40 98       	cbi	0x08, 0	; 8
    342a:	84 2f       	mov	r24, r20
    342c:	80 68       	ori	r24, 0x80	; 128
    342e:	8e bd       	out	0x2e, r24	; 46
    3430:	0d b4       	in	r0, 0x2d	; 45
    3432:	07 fe       	sbrs	r0, 7
    3434:	fd cf       	rjmp	.-6      	; 0x3430 <rf_security_set_key+0xde>
    3436:	ca 01       	movw	r24, r20
    3438:	95 95       	asr	r25
    343a:	87 95       	ror	r24
    343c:	80 7c       	andi	r24, 0xC0	; 192
    343e:	8e bd       	out	0x2e, r24	; 46
    3440:	0d b4       	in	r0, 0x2d	; 45
    3442:	07 fe       	sbrs	r0, 7
    3444:	fd cf       	rjmp	.-6      	; 0x3440 <rf_security_set_key+0xee>
    3446:	f8 01       	movw	r30, r16
    3448:	80 81       	ld	r24, Z
    344a:	8e bd       	out	0x2e, r24	; 46
    344c:	0d b4       	in	r0, 0x2d	; 45
    344e:	07 fe       	sbrs	r0, 7
    3450:	fd cf       	rjmp	.-6      	; 0x344c <rf_security_set_key+0xfa>
    3452:	31 96       	adiw	r30, 0x01	; 1
    3454:	ea 15       	cp	r30, r10
    3456:	fb 05       	cpc	r31, r11
    3458:	b9 f7       	brne	.-18     	; 0x3448 <rf_security_set_key+0xf6>
    345a:	40 9a       	sbi	0x08, 0	; 8
#define ADC_GET_SAMPLE_8(x) \
    345c:	40 98       	cbi	0x08, 0	; 8
    345e:	82 2f       	mov	r24, r18
    3460:	80 68       	ori	r24, 0x80	; 128
    3462:	8e bd       	out	0x2e, r24	; 46
    3464:	0d b4       	in	r0, 0x2d	; 45
    3466:	07 fe       	sbrs	r0, 7
    3468:	fd cf       	rjmp	.-6      	; 0x3464 <rf_security_set_key+0x112>
    346a:	c9 01       	movw	r24, r18
    346c:	95 95       	asr	r25
    346e:	87 95       	ror	r24
    3470:	80 7c       	andi	r24, 0xC0	; 192
    3472:	8e bd       	out	0x2e, r24	; 46
    3474:	0d b4       	in	r0, 0x2d	; 45
    3476:	07 fe       	sbrs	r0, 7
    3478:	fd cf       	rjmp	.-6      	; 0x3474 <rf_security_set_key+0x122>
    347a:	f8 01       	movw	r30, r16
    347c:	80 81       	ld	r24, Z
    347e:	8e bd       	out	0x2e, r24	; 46
    3480:	0d b4       	in	r0, 0x2d	; 45
    3482:	07 fe       	sbrs	r0, 7
    3484:	fd cf       	rjmp	.-6      	; 0x3480 <rf_security_set_key+0x12e>
    3486:	31 96       	adiw	r30, 0x01	; 1
    3488:	ea 15       	cp	r30, r10
    348a:	fb 05       	cpc	r31, r11
    348c:	b9 f7       	brne	.-18     	; 0x347c <rf_security_set_key+0x12a>
    348e:	40 9a       	sbi	0x08, 0	; 8
    3490:	2e 5f       	subi	r18, 0xFE	; 254
    3492:	3f 4f       	sbci	r19, 0xFF	; 255
    3494:	4e 5f       	subi	r20, 0xFE	; 254
    3496:	5f 4f       	sbci	r21, 0xFF	; 255
} while(0)

// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
do { \
x =  ADCL; \
    3498:	e1 e0       	ldi	r30, 0x01	; 1
    349a:	2e 31       	cpi	r18, 0x1E	; 30
    349c:	3e 07       	cpc	r19, r30
    349e:	11 f6       	brne	.-124    	; 0x3424 <rf_security_set_key+0xd2>
} while (0)

#define ADC_GET_SAMPLE_8(x) \
do { \
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	9a 83       	std	Y+2, r25	; 0x02
    34a6:	89 83       	std	Y+1, r24	; 0x01
} while (0)
    34a8:	40 98       	cbi	0x08, 0	; 8
    34aa:	8e ec       	ldi	r24, 0xCE	; 206
    34ac:	8e bd       	out	0x2e, r24	; 46
    34ae:	0d b4       	in	r0, 0x2d	; 45
    34b0:	07 fe       	sbrs	r0, 7
    34b2:	fd cf       	rjmp	.-6      	; 0x34ae <rf_security_set_key+0x15c>
    34b4:	80 e8       	ldi	r24, 0x80	; 128
    34b6:	8e bd       	out	0x2e, r24	; 46
    34b8:	0d b4       	in	r0, 0x2d	; 45
    34ba:	07 fe       	sbrs	r0, 7
    34bc:	fd cf       	rjmp	.-6      	; 0x34b8 <rf_security_set_key+0x166>
    34be:	f8 01       	movw	r30, r16
    34c0:	80 81       	ld	r24, Z
    34c2:	8e bd       	out	0x2e, r24	; 46
    34c4:	0d b4       	in	r0, 0x2d	; 45
    34c6:	07 fe       	sbrs	r0, 7
    34c8:	fd cf       	rjmp	.-6      	; 0x34c4 <rf_security_set_key+0x172>
    34ca:	31 96       	adiw	r30, 0x01	; 1
    34cc:	ea 15       	cp	r30, r10
    34ce:	fb 05       	cpc	r31, r11
    34d0:	b9 f7       	brne	.-18     	; 0x34c0 <rf_security_set_key+0x16e>
    34d2:	40 9a       	sbi	0x08, 0	; 8

    34d4:	40 98       	cbi	0x08, 0	; 8
    34d6:	8e e9       	ldi	r24, 0x9E	; 158
    34d8:	8e bd       	out	0x2e, r24	; 46
    34da:	0d b4       	in	r0, 0x2d	; 45
    34dc:	07 fe       	sbrs	r0, 7
    34de:	fd cf       	rjmp	.-6      	; 0x34da <rf_security_set_key+0x188>
    34e0:	80 e8       	ldi	r24, 0x80	; 128
    34e2:	8e bd       	out	0x2e, r24	; 46
    34e4:	0d b4       	in	r0, 0x2d	; 45
    34e6:	07 fe       	sbrs	r0, 7
    34e8:	fd cf       	rjmp	.-6      	; 0x34e4 <rf_security_set_key+0x192>
    34ea:	f8 01       	movw	r30, r16
    34ec:	80 81       	ld	r24, Z
    34ee:	8e bd       	out	0x2e, r24	; 46
    34f0:	0d b4       	in	r0, 0x2d	; 45
    34f2:	07 fe       	sbrs	r0, 7
    34f4:	fd cf       	rjmp	.-6      	; 0x34f0 <rf_security_set_key+0x19e>
    34f6:	0f 5f       	subi	r16, 0xFF	; 255
    34f8:	1f 4f       	sbci	r17, 0xFF	; 255
    34fa:	0a 15       	cp	r16, r10
    34fc:	1b 05       	cpc	r17, r11
    34fe:	a9 f7       	brne	.-22     	; 0x34ea <rf_security_set_key+0x198>
    3500:	40 9a       	sbi	0x08, 0	; 8
    3502:	22 96       	adiw	r28, 0x02	; 2
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
    350e:	df 91       	pop	r29
    3510:	cf 91       	pop	r28
    3512:	1f 91       	pop	r17
    3514:	0f 91       	pop	r16
    3516:	ff 90       	pop	r15
    3518:	ef 90       	pop	r14
    351a:	df 90       	pop	r13
    351c:	cf 90       	pop	r12
    351e:	bf 90       	pop	r11
    3520:	af 90       	pop	r10
    3522:	9f 90       	pop	r9
    3524:	8f 90       	pop	r8
    3526:	7f 90       	pop	r7
    3528:	6f 90       	pop	r6
    352a:	08 95       	ret

0000352c <rf_set_rx>:
				val=get_adc_val();
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
				}
    352c:	1f 93       	push	r17
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	ec 01       	movw	r28, r24
    3534:	16 2f       	mov	r17, r22
			 	val=max-min;	
				if(size==2)
			      	{
    3536:	80 91 d6 08 	lds	r24, 0x08D6
    353a:	90 91 d7 08 	lds	r25, 0x08D7
    353e:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    3542:	40 98       	cbi	0x08, 0	; 8
    3544:	88 e0       	ldi	r24, 0x08	; 8
    3546:	8e bd       	out	0x2e, r24	; 46
    3548:	0d b4       	in	r0, 0x2d	; 45
    354a:	07 fe       	sbrs	r0, 7
    354c:	fd cf       	rjmp	.-6      	; 0x3548 <rf_set_rx+0x1c>
    354e:	40 9a       	sbi	0x08, 0	; 8
				}
    3550:	40 98       	cbi	0x08, 0	; 8
    3552:	88 e0       	ldi	r24, 0x08	; 8
    3554:	8e bd       	out	0x2e, r24	; 46
    3556:	0d b4       	in	r0, 0x2d	; 45
    3558:	07 fe       	sbrs	r0, 7
    355a:	fd cf       	rjmp	.-6      	; 0x3556 <rf_set_rx+0x2a>
    355c:	40 9a       	sbi	0x08, 0	; 8

    355e:	81 2f       	mov	r24, r17
    3560:	0e 94 0e 11 	call	0x221c	; 0x221c <halRfSetChannel>
				if(size==1)
    3564:	d0 93 dc 08 	sts	0x08DC, r29
    3568:	c0 93 db 08 	sts	0x08DB, r28
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}
    356c:	80 91 d6 08 	lds	r24, 0x08D6
    3570:	90 91 d7 08 	lds	r25, 0x08D7
    3574:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    3578:	df 91       	pop	r29
    357a:	cf 91       	pop	r28
    357c:	1f 91       	pop	r17
    357e:	08 95       	ret

00003580 <rf_set_channel>:
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
		    else return NRK_OK;
		
	    

    3580:	1f 93       	push	r17
    3582:	18 2f       	mov	r17, r24
             case READ:
	     	      count=0;
    3584:	80 91 d6 08 	lds	r24, 0x08D6
    3588:	90 91 d7 08 	lds	r25, 0x08D7
    358c:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
    3590:	81 2f       	mov	r24, r17
    3592:	0e 94 0e 11 	call	0x221c	; 0x221c <halRfSetChannel>
			{
			      /* Conversion to 8-bit value*/
    3596:	80 91 d6 08 	lds	r24, 0x08D6
    359a:	90 91 d7 08 	lds	r25, 0x08D7
    359e:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>
    35a2:	1f 91       	pop	r17
    35a4:	08 95       	ret

000035a6 <rf_init>:
  			if(key==SENSOR_SELECT) 
			{
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
			  {
				channel=value;
    35a6:	df 92       	push	r13
    35a8:	ef 92       	push	r14
    35aa:	ff 92       	push	r15
    35ac:	0f 93       	push	r16
    35ae:	1f 93       	push	r17
    35b0:	cf 93       	push	r28
    35b2:	df 93       	push	r29
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
    35b8:	22 97       	sbiw	r28, 0x02	; 2
    35ba:	0f b6       	in	r0, 0x3f	; 63
    35bc:	f8 94       	cli
    35be:	de bf       	out	0x3e, r29	; 62
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	cd bf       	out	0x3d, r28	; 61
    35c4:	8c 01       	movw	r16, r24
    35c6:	d6 2e       	mov	r13, r22
    35c8:	5a 83       	std	Y+2, r21	; 0x02
    35ca:	49 83       	std	Y+1, r20	; 0x01
    35cc:	79 01       	movw	r14, r18
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
				ADC_SET_CHANNEL (AUDIO);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;
    35ce:	64 e1       	ldi	r22, 0x14	; 20
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <nrk_sem_create>
    35d6:	90 93 d7 08 	sts	0x08D7, r25
    35da:	80 93 d6 08 	sts	0x08D6, r24

    35de:	89 2b       	or	r24, r25
    35e0:	31 f4       	brne	.+12     	; 0x35ee <rf_init+0x48>
			  } else
    35e2:	0e 94 82 29 	call	0x5304	; 0x5304 <nrk_get_pid>
    35e6:	68 2f       	mov	r22, r24
    35e8:	8f e0       	ldi	r24, 0x0F	; 15
    35ea:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
			  {
				if(value>7) 
    35ee:	80 91 d6 08 	lds	r24, 0x08D6
    35f2:	90 91 d7 08 	lds	r25, 0x08D7
    35f6:	0e 94 08 28 	call	0x5010	; 0x5010 <nrk_sem_pend>
				{
    35fa:	8f 3f       	cpi	r24, 0xFF	; 255
    35fc:	21 f4       	brne	.+8      	; 0x3606 <rf_init+0x60>
					_nrk_errno_set(1);
    35fe:	84 e5       	ldi	r24, 0x54	; 84
    3600:	92 e0       	ldi	r25, 0x02	; 2
    3602:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_kprintf>
					return NRK_ERROR;
				}
				channel=value;
				if(channel==LIGHT)
				   ADC_VREF_VCC();	
    3606:	15 9a       	sbi	0x02, 5	; 2
				else
    3608:	88 ee       	ldi	r24, 0xE8	; 232
    360a:	93 e0       	ldi	r25, 0x03	; 3
    360c:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <halWait>
				   ADC_VREF_2_56();	
    3610:	16 98       	cbi	0x02, 6	; 2
				ADC_SET_CHANNEL (channel);
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <halWait>
				nrk_spin_wait_us(ADC_SETUP_DELAY);
    361a:	16 9a       	sbi	0x02, 6	; 2
				return NRK_OK;
    361c:	84 e6       	ldi	r24, 0x64	; 100
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <halWait>
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
	}
    3624:	f8 94       	cli
}


    3626:	40 98       	cbi	0x08, 0	; 8
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	8e bd       	out	0x2e, r24	; 46
    362c:	0d b4       	in	r0, 0x2d	; 45
    362e:	07 fe       	sbrs	r0, 7
    3630:	fd cf       	rjmp	.-6      	; 0x362c <rf_init+0x86>
    3632:	40 9a       	sbi	0x08, 0	; 8
// read_voltage_status()
    3634:	82 ee       	ldi	r24, 0xE2	; 226
    3636:	92 e0       	ldi	r25, 0x02	; 2
    3638:	90 93 da 08 	sts	0x08DA, r25
    363c:	80 93 d9 08 	sts	0x08D9, r24
//
    3640:	40 98       	cbi	0x08, 0	; 8
    3642:	81 e1       	ldi	r24, 0x11	; 17
    3644:	8e bd       	out	0x2e, r24	; 46
    3646:	0d b4       	in	r0, 0x2d	; 45
    3648:	07 fe       	sbrs	r0, 7
    364a:	fd cf       	rjmp	.-6      	; 0x3646 <rf_init+0xa0>
    364c:	82 e0       	ldi	r24, 0x02	; 2
    364e:	8e bd       	out	0x2e, r24	; 46
    3650:	0d b4       	in	r0, 0x2d	; 45
    3652:	07 fe       	sbrs	r0, 7
    3654:	fd cf       	rjmp	.-6      	; 0x3650 <rf_init+0xaa>
    3656:	82 ee       	ldi	r24, 0xE2	; 226
    3658:	8e bd       	out	0x2e, r24	; 46
    365a:	0d b4       	in	r0, 0x2d	; 45
    365c:	07 fe       	sbrs	r0, 7
    365e:	fd cf       	rjmp	.-6      	; 0x365a <rf_init+0xb4>
    3660:	40 9a       	sbi	0x08, 0	; 8
// This function sets different voltage threshold levels on
// the cc2420 chip to search for the voltage.
// If the voltage is above 3.3 volts, then the ADC reads
    3662:	40 98       	cbi	0x08, 0	; 8
    3664:	82 e1       	ldi	r24, 0x12	; 18
    3666:	8e bd       	out	0x2e, r24	; 46
    3668:	0d b4       	in	r0, 0x2d	; 45
    366a:	07 fe       	sbrs	r0, 7
    366c:	fd cf       	rjmp	.-6      	; 0x3668 <rf_init+0xc2>
    366e:	85 e0       	ldi	r24, 0x05	; 5
    3670:	8e bd       	out	0x2e, r24	; 46
    3672:	0d b4       	in	r0, 0x2d	; 45
    3674:	07 fe       	sbrs	r0, 7
    3676:	fd cf       	rjmp	.-6      	; 0x3672 <rf_init+0xcc>
    3678:	1e bc       	out	0x2e, r1	; 46
    367a:	0d b4       	in	r0, 0x2d	; 45
    367c:	07 fe       	sbrs	r0, 7
    367e:	fd cf       	rjmp	.-6      	; 0x367a <rf_init+0xd4>
    3680:	40 9a       	sbi	0x08, 0	; 8
// the external voltage value going through a voltage divider.
    3682:	40 98       	cbi	0x08, 0	; 8
    3684:	8c e1       	ldi	r24, 0x1C	; 28
    3686:	8e bd       	out	0x2e, r24	; 46
    3688:	0d b4       	in	r0, 0x2d	; 45
    368a:	07 fe       	sbrs	r0, 7
    368c:	fd cf       	rjmp	.-6      	; 0x3688 <rf_init+0xe2>
    368e:	1e bc       	out	0x2e, r1	; 46
    3690:	0d b4       	in	r0, 0x2d	; 45
    3692:	07 fe       	sbrs	r0, 7
    3694:	fd cf       	rjmp	.-6      	; 0x3690 <rf_init+0xea>
    3696:	8f e7       	ldi	r24, 0x7F	; 127
    3698:	8e bd       	out	0x2e, r24	; 46
    369a:	0d b4       	in	r0, 0x2d	; 45
    369c:	07 fe       	sbrs	r0, 7
    369e:	fd cf       	rjmp	.-6      	; 0x369a <rf_init+0xf4>
    36a0:	40 9a       	sbi	0x08, 0	; 8
// This function will return VOLTS*100
    36a2:	40 98       	cbi	0x08, 0	; 8
    36a4:	89 e1       	ldi	r24, 0x19	; 25
    36a6:	8e bd       	out	0x2e, r24	; 46
    36a8:	0d b4       	in	r0, 0x2d	; 45
    36aa:	07 fe       	sbrs	r0, 7
    36ac:	fd cf       	rjmp	.-6      	; 0x36a8 <rf_init+0x102>
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	8e bd       	out	0x2e, r24	; 46
    36b2:	0d b4       	in	r0, 0x2d	; 45
    36b4:	07 fe       	sbrs	r0, 7
    36b6:	fd cf       	rjmp	.-6      	; 0x36b2 <rf_init+0x10c>
    36b8:	84 ec       	ldi	r24, 0xC4	; 196
    36ba:	8e bd       	out	0x2e, r24	; 46
    36bc:	0d b4       	in	r0, 0x2d	; 45
    36be:	07 fe       	sbrs	r0, 7
    36c0:	fd cf       	rjmp	.-6      	; 0x36bc <rf_init+0x116>
    36c2:	40 9a       	sbi	0x08, 0	; 8
uint16_t read_voltage_status()
    36c4:	40 98       	cbi	0x08, 0	; 8
    36c6:	87 e1       	ldi	r24, 0x17	; 23
    36c8:	8e bd       	out	0x2e, r24	; 46
    36ca:	0d b4       	in	r0, 0x2d	; 45
    36cc:	07 fe       	sbrs	r0, 7
    36ce:	fd cf       	rjmp	.-6      	; 0x36ca <rf_init+0x124>
    36d0:	8a e1       	ldi	r24, 0x1A	; 26
    36d2:	8e bd       	out	0x2e, r24	; 46
    36d4:	0d b4       	in	r0, 0x2d	; 45
    36d6:	07 fe       	sbrs	r0, 7
    36d8:	fd cf       	rjmp	.-6      	; 0x36d4 <rf_init+0x12e>
    36da:	86 e5       	ldi	r24, 0x56	; 86
    36dc:	8e bd       	out	0x2e, r24	; 46
    36de:	0d b4       	in	r0, 0x2d	; 45
    36e0:	07 fe       	sbrs	r0, 7
    36e2:	fd cf       	rjmp	.-6      	; 0x36de <rf_init+0x138>
    36e4:	40 9a       	sbi	0x08, 0	; 8

level=0;
while(level<0x1F)
{
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
    36e6:	84 ef       	ldi	r24, 0xF4	; 244
    36e8:	91 e0       	ldi	r25, 0x01	; 1
    36ea:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
nrk_spin_wait_us(2);
    36ee:	40 98       	cbi	0x08, 0	; 8
    36f0:	88 ee       	ldi	r24, 0xE8	; 232
    36f2:	8e bd       	out	0x2e, r24	; 46
    36f4:	0d b4       	in	r0, 0x2d	; 45
    36f6:	07 fe       	sbrs	r0, 7
    36f8:	fd cf       	rjmp	.-6      	; 0x36f4 <rf_init+0x14e>
    36fa:	80 e8       	ldi	r24, 0x80	; 128
    36fc:	8e bd       	out	0x2e, r24	; 46
    36fe:	0d b4       	in	r0, 0x2d	; 45
    3700:	07 fe       	sbrs	r0, 7
    3702:	fd cf       	rjmp	.-6      	; 0x36fe <rf_init+0x158>
    3704:	fe 01       	movw	r30, r28
    3706:	31 96       	adiw	r30, 0x01	; 1
    3708:	9e 01       	movw	r18, r28
    370a:	2d 5f       	subi	r18, 0xFD	; 253
    370c:	3f 4f       	sbci	r19, 0xFF	; 255
    370e:	80 81       	ld	r24, Z
    3710:	8e bd       	out	0x2e, r24	; 46
    3712:	0d b4       	in	r0, 0x2d	; 45
    3714:	07 fe       	sbrs	r0, 7
    3716:	fd cf       	rjmp	.-6      	; 0x3712 <rf_init+0x16c>
    3718:	31 96       	adiw	r30, 0x01	; 1
    371a:	e2 17       	cp	r30, r18
    371c:	f3 07       	cpc	r31, r19
    371e:	b9 f7       	brne	.-18     	; 0x370e <rf_init+0x168>
    3720:	40 9a       	sbi	0x08, 0	; 8
FASTSPI_GETREG(CC2420_BATTMON, val);
    3722:	84 ef       	ldi	r24, 0xF4	; 244
    3724:	91 e0       	ldi	r25, 0x01	; 1
    3726:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
if(val&0x0040) break; 
level++;
    372a:	78 94       	sei
}
if(radio_sem!=NULL)
 nrk_sem_post(radio_sem);
    372c:	8d 2d       	mov	r24, r13
    372e:	0e 94 0e 11 	call	0x221c	; 0x221c <halRfSetChannel>
if(level==0)
  {
  val=get_adc_val();
    3732:	78 94       	sei
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
  if(val<330) val=330;
    3734:	10 93 dc 08 	sts	0x08DC, r17
    3738:	00 93 db 08 	sts	0x08DB, r16
  }
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	9a 81       	ldd	r25, Y+2	; 0x02
    3740:	90 93 e0 08 	sts	0x08E0, r25
    3744:	80 93 df 08 	sts	0x08DF, r24
else val=(9000-(level*125)) / 27;
    3748:	f0 92 e2 08 	sts	0x08E2, r15
    374c:	e0 92 e1 08 	sts	0x08E1, r14

    3750:	10 92 dd 08 	sts	0x08DD, r1
return val;
    3754:	10 92 e3 08 	sts	0x08E3, r1
}


    3758:	0e 94 2d 11 	call	0x225a	; 0x225a <halRfWaitForCrystalOscillator>
// Initialize values here
  ADC_INIT ();
  ADC_ENABLE ();
  channel=0;
  ADC_SET_CHANNEL (0);
}
    375c:	80 91 d6 08 	lds	r24, 0x08D6
    3760:	90 91 d7 08 	lds	r25, 0x08D7
    3764:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_sem_post>

    3768:	8f 3f       	cpi	r24, 0xFF	; 255
    376a:	39 f4       	brne	.+14     	; 0x377a <rf_init+0x1d4>
uint16_t get_adc_val()
    376c:	87 e2       	ldi	r24, 0x27	; 39
    376e:	92 e0       	ldi	r25, 0x02	; 2
    3770:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_kprintf>
{                         
    3774:	82 e0       	ldi	r24, 0x02	; 2
    3776:	0e 94 a9 23 	call	0x4752	; 0x4752 <_nrk_errno_set>
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
	delay();
	ADC_GET_SAMPLE_10(adc_val);
    377a:	10 92 e6 08 	sts	0x08E6, r1
	return adc_val;
    377e:	10 92 d8 08 	sts	0x08D8, r1
}
    3782:	10 92 e7 08 	sts	0x08E7, r1
    3786:	22 96       	adiw	r28, 0x02	; 2
    3788:	0f b6       	in	r0, 0x3f	; 63
    378a:	f8 94       	cli
    378c:	de bf       	out	0x3e, r29	; 62
    378e:	0f be       	out	0x3f, r0	; 63
    3790:	cd bf       	out	0x3d, r28	; 61
    3792:	df 91       	pop	r29
    3794:	cf 91       	pop	r28
    3796:	1f 91       	pop	r17
    3798:	0f 91       	pop	r16
    379a:	ff 90       	pop	r15
    379c:	ef 90       	pop	r14
    379e:	df 90       	pop	r13
    37a0:	08 95       	ret

000037a2 <getc1>:
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
    37a2:	20 91 6f 09 	lds	r18, 0x096F
    37a6:	80 91 ed 08 	lds	r24, 0x08ED
    37aa:	28 17       	cp	r18, r24
    37ac:	81 f0       	breq	.+32     	; 0x37ce <getc1+0x2c>
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

    37ae:	e2 2f       	mov	r30, r18
    37b0:	ff 27       	eor	r31, r31
    37b2:	e2 51       	subi	r30, 0x12	; 18
    37b4:	f7 4f       	sbci	r31, 0xF7	; 247
    37b6:	e0 81       	ld	r30, Z
#define ADC_SAMPLE_SINGLE() \
    37b8:	82 2f       	mov	r24, r18
    37ba:	8f 5f       	subi	r24, 0xFF	; 255
    37bc:	80 93 6f 09 	sts	0x096F, r24
    do { \
    37c0:	80 38       	cpi	r24, 0x80	; 128
    37c2:	11 f4       	brne	.+4      	; 0x37c8 <getc1+0x26>
    37c4:	10 92 6f 09 	sts	0x096F, r1
ADCSRA |= BM(ADSC); \
    37c8:	8e 2f       	mov	r24, r30
    37ca:	99 27       	eor	r25, r25
    37cc:	08 95       	ret
while (!(ADCSRA & 0x10)); \
} while(0)

    37ce:	80 91 c8 00 	lds	r24, 0x00C8
    37d2:	87 ff       	sbrs	r24, 7
    37d4:	fc cf       	rjmp	.-8      	; 0x37ce <getc1+0x2c>
    37d6:	80 91 c8 00 	lds	r24, 0x00C8
    37da:	8f 77       	andi	r24, 0x7F	; 127
    37dc:	80 93 c8 00 	sts	0x00C8, r24
    37e0:	80 91 ce 00 	lds	r24, 0x00CE
// Macros for obtaining the latest sample value
    37e4:	99 27       	eor	r25, r25
#define ADC_GET_SAMPLE_10(x) \
    37e6:	08 95       	ret

000037e8 <nrk_uart_data_ready>:
do { \
x =  ADCL; \
x |= ADCH << 8; \
} while (0)
    37e8:	88 23       	and	r24, r24
    37ea:	51 f4       	brne	.+20     	; 0x3800 <nrk_uart_data_ready+0x18>

#define ADC_GET_SAMPLE_8(x) \
    37ec:	80 91 c0 00 	lds	r24, 0x00C0
    37f0:	99 27       	eor	r25, r25
    37f2:	87 fd       	sbrc	r24, 7
    37f4:	90 95       	com	r25
    37f6:	88 27       	eor	r24, r24
    37f8:	99 0f       	add	r25, r25
    37fa:	88 1f       	adc	r24, r24
    37fc:	99 27       	eor	r25, r25
    37fe:	08 95       	ret
do { \
x = ((uint8_t) ADCL) >> 2; \
    3800:	81 30       	cpi	r24, 0x01	; 1
    3802:	19 f0       	breq	.+6      	; 0x380a <nrk_uart_data_ready+0x22>
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	08 95       	ret
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	90 91 6f 09 	lds	r25, 0x096F
    3812:	80 91 ed 08 	lds	r24, 0x08ED
    3816:	98 17       	cp	r25, r24
    3818:	11 f0       	breq	.+4      	; 0x381e <nrk_uart_data_ready+0x36>
    381a:	21 e0       	ldi	r18, 0x01	; 1
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	c9 01       	movw	r24, r18
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
    3820:	08 95       	ret

00003822 <PORT_INIT>:
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}

			}
			
    3822:	85 b7       	in	r24, 0x35	; 53
    3824:	80 61       	ori	r24, 0x10	; 16
    3826:	85 bf       	out	0x35, r24	; 53
		      count++;
    3828:	86 e0       	ldi	r24, 0x06	; 6
    382a:	84 b9       	out	0x04, r24	; 4
                      return count;
    382c:	87 e0       	ldi	r24, 0x07	; 7
    382e:	85 b9       	out	0x05, r24	; 5

    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	87 b9       	out	0x07, r24	; 7
             case CLOSE:
    3834:	88 b9       	out	0x08, r24	; 8
			// Turn off sensor power
    3836:	8c e3       	ldi	r24, 0x3C	; 60
    3838:	8d b9       	out	0x0d, r24	; 13
			PORTF |= PWR_CTRL_MASK;
    383a:	8b e0       	ldi	r24, 0x0B	; 11
    383c:	8a b9       	out	0x0a, r24	; 10
		    	is_open=0; 
    383e:	8e e3       	ldi	r24, 0x3E	; 62
    3840:	8e b9       	out	0x0e, r24	; 14
                        return NRK_OK;
    3842:	88 e7       	ldi	r24, 0x78	; 120
    3844:	81 b9       	out	0x01, r24	; 1
             
    3846:	80 e4       	ldi	r24, 0x40	; 64
    3848:	82 b9       	out	0x02, r24	; 2
    384a:	08 95       	ret

0000384c <nrk_setup_ports>:
	    

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
    384c:	0e 94 11 1c 	call	0x3822	; 0x3822 <PORT_INIT>
			{
    3850:	80 e5       	ldi	r24, 0x50	; 80
    3852:	8c bd       	out	0x2c, r24	; 44
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	8d bd       	out	0x2d, r24	; 45
    3858:	08 95       	ret

0000385a <nrk_gpio_set>:
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
			{
			// Set to audio channel if it is an average value
    385a:	8f 3f       	cpi	r24, 0xFF	; 255
    385c:	09 f4       	brne	.+2      	; 0x3860 <nrk_gpio_set+0x6>
    385e:	7f c0       	rjmp	.+254    	; 0x395e <nrk_gpio_set+0x104>
			if(value==AUDIO_P2P) 
    3860:	48 2f       	mov	r20, r24
    3862:	55 27       	eor	r21, r21
    3864:	9a 01       	movw	r18, r20
    3866:	27 70       	andi	r18, 0x07	; 7
    3868:	30 70       	andi	r19, 0x00	; 0
    386a:	22 30       	cpi	r18, 0x02	; 2
    386c:	31 05       	cpc	r19, r1
    386e:	a9 f1       	breq	.+106    	; 0x38da <nrk_gpio_set+0x80>
    3870:	23 30       	cpi	r18, 0x03	; 3
    3872:	31 05       	cpc	r19, r1
    3874:	44 f4       	brge	.+16     	; 0x3886 <nrk_gpio_set+0x2c>
    3876:	21 15       	cp	r18, r1
    3878:	31 05       	cpc	r19, r1
    387a:	89 f0       	breq	.+34     	; 0x389e <nrk_gpio_set+0x44>
    387c:	21 30       	cpi	r18, 0x01	; 1
    387e:	31 05       	cpc	r19, r1
    3880:	09 f0       	breq	.+2      	; 0x3884 <nrk_gpio_set+0x2a>
    3882:	6d c0       	rjmp	.+218    	; 0x395e <nrk_gpio_set+0x104>
    3884:	1c c0       	rjmp	.+56     	; 0x38be <nrk_gpio_set+0x64>
    3886:	24 30       	cpi	r18, 0x04	; 4
    3888:	31 05       	cpc	r19, r1
    388a:	09 f4       	brne	.+2      	; 0x388e <nrk_gpio_set+0x34>
    388c:	46 c0       	rjmp	.+140    	; 0x391a <nrk_gpio_set+0xc0>
    388e:	24 30       	cpi	r18, 0x04	; 4
    3890:	31 05       	cpc	r19, r1
    3892:	9c f1       	brlt	.+102    	; 0x38fa <nrk_gpio_set+0xa0>
    3894:	25 30       	cpi	r18, 0x05	; 5
    3896:	31 05       	cpc	r19, r1
    3898:	09 f0       	breq	.+2      	; 0x389c <nrk_gpio_set+0x42>
    389a:	61 c0       	rjmp	.+194    	; 0x395e <nrk_gpio_set+0x104>
    389c:	4e c0       	rjmp	.+156    	; 0x393a <nrk_gpio_set+0xe0>
			  {
				channel=value;
    389e:	22 b1       	in	r18, 0x02	; 2
    38a0:	a3 e0       	ldi	r26, 0x03	; 3
    38a2:	56 95       	lsr	r21
    38a4:	47 95       	ror	r20
    38a6:	aa 95       	dec	r26
    38a8:	e1 f7       	brne	.-8      	; 0x38a2 <nrk_gpio_set+0x48>
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	02 c0       	rjmp	.+4      	; 0x38b4 <nrk_gpio_set+0x5a>
    38b0:	88 0f       	add	r24, r24
    38b2:	99 1f       	adc	r25, r25
    38b4:	4a 95       	dec	r20
    38b6:	e2 f7       	brpl	.-8      	; 0x38b0 <nrk_gpio_set+0x56>
    38b8:	28 2b       	or	r18, r24
    38ba:	22 b9       	out	0x02, r18	; 2
    38bc:	4d c0       	rjmp	.+154    	; 0x3958 <nrk_gpio_set+0xfe>
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
    38be:	85 b1       	in	r24, 0x05	; 5
    38c0:	f3 e0       	ldi	r31, 0x03	; 3
    38c2:	56 95       	lsr	r21
    38c4:	47 95       	ror	r20
    38c6:	fa 95       	dec	r31
    38c8:	e1 f7       	brne	.-8      	; 0x38c2 <nrk_gpio_set+0x68>
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <nrk_gpio_set+0x76>
    38cc:	22 0f       	add	r18, r18
    38ce:	33 1f       	adc	r19, r19
    38d0:	4a 95       	dec	r20
    38d2:	e2 f7       	brpl	.-8      	; 0x38cc <nrk_gpio_set+0x72>
    38d4:	82 2b       	or	r24, r18
    38d6:	85 b9       	out	0x05, r24	; 5
    38d8:	3f c0       	rjmp	.+126    	; 0x3958 <nrk_gpio_set+0xfe>
				ADC_SET_CHANNEL (AUDIO);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
    38da:	28 b1       	in	r18, 0x08	; 8
    38dc:	e3 e0       	ldi	r30, 0x03	; 3
    38de:	56 95       	lsr	r21
    38e0:	47 95       	ror	r20
    38e2:	ea 95       	dec	r30
    38e4:	e1 f7       	brne	.-8      	; 0x38de <nrk_gpio_set+0x84>
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	02 c0       	rjmp	.+4      	; 0x38f0 <nrk_gpio_set+0x96>
    38ec:	88 0f       	add	r24, r24
    38ee:	99 1f       	adc	r25, r25
    38f0:	4a 95       	dec	r20
    38f2:	e2 f7       	brpl	.-8      	; 0x38ec <nrk_gpio_set+0x92>
    38f4:	28 2b       	or	r18, r24
    38f6:	28 b9       	out	0x08, r18	; 8
    38f8:	2f c0       	rjmp	.+94     	; 0x3958 <nrk_gpio_set+0xfe>
				return NRK_OK;

    38fa:	2b b1       	in	r18, 0x0b	; 11
    38fc:	73 e0       	ldi	r23, 0x03	; 3
    38fe:	56 95       	lsr	r21
    3900:	47 95       	ror	r20
    3902:	7a 95       	dec	r23
    3904:	e1 f7       	brne	.-8      	; 0x38fe <nrk_gpio_set+0xa4>
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	02 c0       	rjmp	.+4      	; 0x3910 <nrk_gpio_set+0xb6>
    390c:	88 0f       	add	r24, r24
    390e:	99 1f       	adc	r25, r25
    3910:	4a 95       	dec	r20
    3912:	e2 f7       	brpl	.-8      	; 0x390c <nrk_gpio_set+0xb2>
    3914:	28 2b       	or	r18, r24
    3916:	2b b9       	out	0x0b, r18	; 11
    3918:	1f c0       	rjmp	.+62     	; 0x3958 <nrk_gpio_set+0xfe>
			  } else
			  {
    391a:	2e b1       	in	r18, 0x0e	; 14
    391c:	63 e0       	ldi	r22, 0x03	; 3
    391e:	56 95       	lsr	r21
    3920:	47 95       	ror	r20
    3922:	6a 95       	dec	r22
    3924:	e1 f7       	brne	.-8      	; 0x391e <nrk_gpio_set+0xc4>
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	02 c0       	rjmp	.+4      	; 0x3930 <nrk_gpio_set+0xd6>
    392c:	88 0f       	add	r24, r24
    392e:	99 1f       	adc	r25, r25
    3930:	4a 95       	dec	r20
    3932:	e2 f7       	brpl	.-8      	; 0x392c <nrk_gpio_set+0xd2>
    3934:	28 2b       	or	r18, r24
    3936:	2e b9       	out	0x0e, r18	; 14
    3938:	0f c0       	rjmp	.+30     	; 0x3958 <nrk_gpio_set+0xfe>
				if(value>7) 
				{
    393a:	21 b3       	in	r18, 0x11	; 17
    393c:	33 e0       	ldi	r19, 0x03	; 3
    393e:	56 95       	lsr	r21
    3940:	47 95       	ror	r20
    3942:	3a 95       	dec	r19
    3944:	e1 f7       	brne	.-8      	; 0x393e <nrk_gpio_set+0xe4>
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	02 c0       	rjmp	.+4      	; 0x3950 <nrk_gpio_set+0xf6>
    394c:	88 0f       	add	r24, r24
    394e:	99 1f       	adc	r25, r25
    3950:	4a 95       	dec	r20
    3952:	e2 f7       	brpl	.-8      	; 0x394c <nrk_gpio_set+0xf2>
    3954:	28 2b       	or	r18, r24
    3956:	21 bb       	out	0x11, r18	; 17
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	08 95       	ret
    395e:	8f ef       	ldi	r24, 0xFF	; 255
    3960:	9f ef       	ldi	r25, 0xFF	; 255
					_nrk_errno_set(1);
					return NRK_ERROR;
				}
				channel=value;
    3962:	08 95       	ret

00003964 <nrk_gpio_clr>:
				if(channel==LIGHT)
				   ADC_VREF_VCC();	
				else
				   ADC_VREF_2_56();	
    3964:	8f 3f       	cpi	r24, 0xFF	; 255
    3966:	09 f4       	brne	.+2      	; 0x396a <nrk_gpio_clr+0x6>
    3968:	86 c0       	rjmp	.+268    	; 0x3a76 <nrk_gpio_clr+0x112>
				ADC_SET_CHANNEL (channel);
    396a:	48 2f       	mov	r20, r24
    396c:	55 27       	eor	r21, r21
    396e:	9a 01       	movw	r18, r20
    3970:	27 70       	andi	r18, 0x07	; 7
    3972:	30 70       	andi	r19, 0x00	; 0
    3974:	22 30       	cpi	r18, 0x02	; 2
    3976:	31 05       	cpc	r19, r1
    3978:	c1 f1       	breq	.+112    	; 0x39ea <nrk_gpio_clr+0x86>
    397a:	23 30       	cpi	r18, 0x03	; 3
    397c:	31 05       	cpc	r19, r1
    397e:	44 f4       	brge	.+16     	; 0x3990 <nrk_gpio_clr+0x2c>
    3980:	21 15       	cp	r18, r1
    3982:	31 05       	cpc	r19, r1
    3984:	89 f0       	breq	.+34     	; 0x39a8 <nrk_gpio_clr+0x44>
    3986:	21 30       	cpi	r18, 0x01	; 1
    3988:	31 05       	cpc	r19, r1
    398a:	09 f0       	breq	.+2      	; 0x398e <nrk_gpio_clr+0x2a>
    398c:	74 c0       	rjmp	.+232    	; 0x3a76 <nrk_gpio_clr+0x112>
    398e:	1d c0       	rjmp	.+58     	; 0x39ca <nrk_gpio_clr+0x66>
    3990:	24 30       	cpi	r18, 0x04	; 4
    3992:	31 05       	cpc	r19, r1
    3994:	09 f4       	brne	.+2      	; 0x3998 <nrk_gpio_clr+0x34>
    3996:	4b c0       	rjmp	.+150    	; 0x3a2e <nrk_gpio_clr+0xca>
    3998:	24 30       	cpi	r18, 0x04	; 4
    399a:	31 05       	cpc	r19, r1
    399c:	bc f1       	brlt	.+110    	; 0x3a0c <nrk_gpio_clr+0xa8>
    399e:	25 30       	cpi	r18, 0x05	; 5
    39a0:	31 05       	cpc	r19, r1
    39a2:	09 f0       	breq	.+2      	; 0x39a6 <nrk_gpio_clr+0x42>
    39a4:	68 c0       	rjmp	.+208    	; 0x3a76 <nrk_gpio_clr+0x112>
    39a6:	54 c0       	rjmp	.+168    	; 0x3a50 <nrk_gpio_clr+0xec>
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;
    39a8:	22 b1       	in	r18, 0x02	; 2
    39aa:	73 e0       	ldi	r23, 0x03	; 3
    39ac:	56 95       	lsr	r21
    39ae:	47 95       	ror	r20
    39b0:	7a 95       	dec	r23
    39b2:	e1 f7       	brne	.-8      	; 0x39ac <nrk_gpio_clr+0x48>
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	02 c0       	rjmp	.+4      	; 0x39be <nrk_gpio_clr+0x5a>
    39ba:	88 0f       	add	r24, r24
    39bc:	99 1f       	adc	r25, r25
    39be:	4a 95       	dec	r20
    39c0:	e2 f7       	brpl	.-8      	; 0x39ba <nrk_gpio_clr+0x56>
    39c2:	80 95       	com	r24
    39c4:	82 23       	and	r24, r18
    39c6:	82 b9       	out	0x02, r24	; 2
    39c8:	53 c0       	rjmp	.+166    	; 0x3a70 <nrk_gpio_clr+0x10c>
			  }
			}
    39ca:	95 b1       	in	r25, 0x05	; 5
    39cc:	63 e0       	ldi	r22, 0x03	; 3
    39ce:	56 95       	lsr	r21
    39d0:	47 95       	ror	r20
    39d2:	6a 95       	dec	r22
    39d4:	e1 f7       	brne	.-8      	; 0x39ce <nrk_gpio_clr+0x6a>
    39d6:	02 c0       	rjmp	.+4      	; 0x39dc <nrk_gpio_clr+0x78>
    39d8:	22 0f       	add	r18, r18
    39da:	33 1f       	adc	r19, r19
    39dc:	4a 95       	dec	r20
    39de:	e2 f7       	brpl	.-8      	; 0x39d8 <nrk_gpio_clr+0x74>
    39e0:	82 2f       	mov	r24, r18
    39e2:	80 95       	com	r24
    39e4:	89 23       	and	r24, r25
    39e6:	85 b9       	out	0x05, r24	; 5
    39e8:	43 c0       	rjmp	.+134    	; 0x3a70 <nrk_gpio_clr+0x10c>
			return NRK_ERROR;
	     default:
    39ea:	28 b1       	in	r18, 0x08	; 8
    39ec:	33 e0       	ldi	r19, 0x03	; 3
    39ee:	56 95       	lsr	r21
    39f0:	47 95       	ror	r20
    39f2:	3a 95       	dec	r19
    39f4:	e1 f7       	brne	.-8      	; 0x39ee <nrk_gpio_clr+0x8a>
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	02 c0       	rjmp	.+4      	; 0x3a00 <nrk_gpio_clr+0x9c>
    39fc:	88 0f       	add	r24, r24
    39fe:	99 1f       	adc	r25, r25
    3a00:	4a 95       	dec	r20
    3a02:	e2 f7       	brpl	.-8      	; 0x39fc <nrk_gpio_clr+0x98>
    3a04:	80 95       	com	r24
    3a06:	82 23       	and	r24, r18
    3a08:	88 b9       	out	0x08, r24	; 8
    3a0a:	32 c0       	rjmp	.+100    	; 0x3a70 <nrk_gpio_clr+0x10c>
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
    3a0c:	2b b1       	in	r18, 0x0b	; 11
    3a0e:	93 e0       	ldi	r25, 0x03	; 3
    3a10:	56 95       	lsr	r21
    3a12:	47 95       	ror	r20
    3a14:	9a 95       	dec	r25
    3a16:	e1 f7       	brne	.-8      	; 0x3a10 <nrk_gpio_clr+0xac>
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	02 c0       	rjmp	.+4      	; 0x3a22 <nrk_gpio_clr+0xbe>
    3a1e:	88 0f       	add	r24, r24
    3a20:	99 1f       	adc	r25, r25
    3a22:	4a 95       	dec	r20
    3a24:	e2 f7       	brpl	.-8      	; 0x3a1e <nrk_gpio_clr+0xba>
    3a26:	80 95       	com	r24
    3a28:	82 23       	and	r24, r18
    3a2a:	8b b9       	out	0x0b, r24	; 11
    3a2c:	21 c0       	rjmp	.+66     	; 0x3a70 <nrk_gpio_clr+0x10c>
	}
}
    3a2e:	2e b1       	in	r18, 0x0e	; 14
    3a30:	83 e0       	ldi	r24, 0x03	; 3
    3a32:	56 95       	lsr	r21
    3a34:	47 95       	ror	r20
    3a36:	8a 95       	dec	r24
    3a38:	e1 f7       	brne	.-8      	; 0x3a32 <nrk_gpio_clr+0xce>
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	02 c0       	rjmp	.+4      	; 0x3a44 <nrk_gpio_clr+0xe0>
    3a40:	88 0f       	add	r24, r24
    3a42:	99 1f       	adc	r25, r25
    3a44:	4a 95       	dec	r20
    3a46:	e2 f7       	brpl	.-8      	; 0x3a40 <nrk_gpio_clr+0xdc>
    3a48:	80 95       	com	r24
    3a4a:	82 23       	and	r24, r18
    3a4c:	8e b9       	out	0x0e, r24	; 14
    3a4e:	10 c0       	rjmp	.+32     	; 0x3a70 <nrk_gpio_clr+0x10c>


    3a50:	21 b3       	in	r18, 0x11	; 17
    3a52:	b3 e0       	ldi	r27, 0x03	; 3
    3a54:	56 95       	lsr	r21
    3a56:	47 95       	ror	r20
    3a58:	ba 95       	dec	r27
    3a5a:	e1 f7       	brne	.-8      	; 0x3a54 <nrk_gpio_clr+0xf0>
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	02 c0       	rjmp	.+4      	; 0x3a66 <nrk_gpio_clr+0x102>
    3a62:	88 0f       	add	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	4a 95       	dec	r20
    3a68:	e2 f7       	brpl	.-8      	; 0x3a62 <nrk_gpio_clr+0xfe>
    3a6a:	80 95       	com	r24
    3a6c:	82 23       	and	r24, r18
    3a6e:	81 bb       	out	0x11, r24	; 17
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	08 95       	ret
    3a76:	8f ef       	ldi	r24, 0xFF	; 255
    3a78:	9f ef       	ldi	r25, 0xFF	; 255
// read_voltage_status()
//
// This function sets different voltage threshold levels on
// the cc2420 chip to search for the voltage.
    3a7a:	08 95       	ret

00003a7c <nrk_gpio_get>:
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
    3a7c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a7e:	a9 f1       	breq	.+106    	; 0x3aea <nrk_gpio_get+0x6e>
{
    3a80:	28 2f       	mov	r18, r24
    3a82:	33 27       	eor	r19, r19
    3a84:	c9 01       	movw	r24, r18
    3a86:	87 70       	andi	r24, 0x07	; 7
    3a88:	90 70       	andi	r25, 0x00	; 0
    3a8a:	82 30       	cpi	r24, 0x02	; 2
    3a8c:	91 05       	cpc	r25, r1
    3a8e:	a9 f0       	breq	.+42     	; 0x3aba <nrk_gpio_get+0x3e>
    3a90:	83 30       	cpi	r24, 0x03	; 3
    3a92:	91 05       	cpc	r25, r1
    3a94:	2c f4       	brge	.+10     	; 0x3aa0 <nrk_gpio_get+0x24>
    3a96:	00 97       	sbiw	r24, 0x00	; 0
    3a98:	61 f0       	breq	.+24     	; 0x3ab2 <nrk_gpio_get+0x36>
    3a9a:	01 97       	sbiw	r24, 0x01	; 1
    3a9c:	31 f5       	brne	.+76     	; 0x3aea <nrk_gpio_get+0x6e>
    3a9e:	0b c0       	rjmp	.+22     	; 0x3ab6 <nrk_gpio_get+0x3a>
    3aa0:	84 30       	cpi	r24, 0x04	; 4
    3aa2:	91 05       	cpc	r25, r1
    3aa4:	71 f0       	breq	.+28     	; 0x3ac2 <nrk_gpio_get+0x46>
    3aa6:	84 30       	cpi	r24, 0x04	; 4
    3aa8:	91 05       	cpc	r25, r1
    3aaa:	4c f0       	brlt	.+18     	; 0x3abe <nrk_gpio_get+0x42>
    3aac:	05 97       	sbiw	r24, 0x05	; 5
    3aae:	e9 f4       	brne	.+58     	; 0x3aea <nrk_gpio_get+0x6e>
    3ab0:	0a c0       	rjmp	.+20     	; 0x3ac6 <nrk_gpio_get+0x4a>
volatile uint16_t val;
uint8_t check,level;
    3ab2:	80 b1       	in	r24, 0x00	; 0
    3ab4:	09 c0       	rjmp	.+18     	; 0x3ac8 <nrk_gpio_get+0x4c>
nrk_sem_t *radio_sem;

    3ab6:	83 b1       	in	r24, 0x03	; 3
    3ab8:	07 c0       	rjmp	.+14     	; 0x3ac8 <nrk_gpio_get+0x4c>
radio_sem= rf_get_sem();

    3aba:	86 b1       	in	r24, 0x06	; 6
    3abc:	05 c0       	rjmp	.+10     	; 0x3ac8 <nrk_gpio_get+0x4c>
// if semaphore not created, then assume you own the radio 
if(radio_sem!=NULL)
    3abe:	89 b1       	in	r24, 0x09	; 9
    3ac0:	03 c0       	rjmp	.+6      	; 0x3ac8 <nrk_gpio_get+0x4c>
 nrk_sem_pend (radio_sem);

    3ac2:	8c b1       	in	r24, 0x0c	; 12
    3ac4:	01 c0       	rjmp	.+2      	; 0x3ac8 <nrk_gpio_get+0x4c>
    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    3ac6:	8f b1       	in	r24, 0x0f	; 15
    3ac8:	99 27       	eor	r25, r25
    3aca:	e3 e0       	ldi	r30, 0x03	; 3
    3acc:	36 95       	lsr	r19
    3ace:	27 95       	ror	r18
    3ad0:	ea 95       	dec	r30
    3ad2:	e1 f7       	brne	.-8      	; 0x3acc <nrk_gpio_get+0x50>
    3ad4:	02 c0       	rjmp	.+4      	; 0x3ada <nrk_gpio_get+0x5e>
    3ad6:	95 95       	asr	r25
    3ad8:	87 95       	ror	r24
    3ada:	2a 95       	dec	r18
    3adc:	e2 f7       	brpl	.-8      	; 0x3ad6 <nrk_gpio_get+0x5a>
    3ade:	99 27       	eor	r25, r25
    3ae0:	87 fd       	sbrc	r24, 7
    3ae2:	90 95       	com	r25
    3ae4:	81 70       	andi	r24, 0x01	; 1
    3ae6:	90 70       	andi	r25, 0x00	; 0
    3ae8:	08 95       	ret
    3aea:	8f ef       	ldi	r24, 0xFF	; 255
    3aec:	9f ef       	ldi	r25, 0xFF	; 255
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
    3aee:	08 95       	ret

00003af0 <nrk_gpio_toggle>:
{
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
nrk_spin_wait_us(2);
    3af0:	8f 3f       	cpi	r24, 0xFF	; 255
    3af2:	09 f4       	brne	.+2      	; 0x3af6 <nrk_gpio_toggle+0x6>
    3af4:	03 c1       	rjmp	.+518    	; 0x3cfc <nrk_gpio_toggle+0x20c>
FASTSPI_GETREG(CC2420_BATTMON, val);
    3af6:	28 2f       	mov	r18, r24
    3af8:	33 27       	eor	r19, r19
    3afa:	a9 01       	movw	r20, r18
    3afc:	47 70       	andi	r20, 0x07	; 7
    3afe:	50 70       	andi	r21, 0x00	; 0
    3b00:	42 30       	cpi	r20, 0x02	; 2
    3b02:	51 05       	cpc	r21, r1
    3b04:	09 f4       	brne	.+2      	; 0x3b08 <nrk_gpio_toggle+0x18>
    3b06:	5c c0       	rjmp	.+184    	; 0x3bc0 <nrk_gpio_toggle+0xd0>
    3b08:	43 30       	cpi	r20, 0x03	; 3
    3b0a:	51 05       	cpc	r21, r1
    3b0c:	44 f4       	brge	.+16     	; 0x3b1e <nrk_gpio_toggle+0x2e>
    3b0e:	41 15       	cp	r20, r1
    3b10:	51 05       	cpc	r21, r1
    3b12:	91 f0       	breq	.+36     	; 0x3b38 <nrk_gpio_toggle+0x48>
    3b14:	41 30       	cpi	r20, 0x01	; 1
    3b16:	51 05       	cpc	r21, r1
    3b18:	09 f0       	breq	.+2      	; 0x3b1c <nrk_gpio_toggle+0x2c>
    3b1a:	f0 c0       	rjmp	.+480    	; 0x3cfc <nrk_gpio_toggle+0x20c>
    3b1c:	34 c0       	rjmp	.+104    	; 0x3b86 <nrk_gpio_toggle+0x96>
    3b1e:	44 30       	cpi	r20, 0x04	; 4
    3b20:	51 05       	cpc	r21, r1
    3b22:	09 f4       	brne	.+2      	; 0x3b26 <nrk_gpio_toggle+0x36>
    3b24:	9b c0       	rjmp	.+310    	; 0x3c5c <nrk_gpio_toggle+0x16c>
    3b26:	44 30       	cpi	r20, 0x04	; 4
    3b28:	51 05       	cpc	r21, r1
    3b2a:	0c f4       	brge	.+2      	; 0x3b2e <nrk_gpio_toggle+0x3e>
    3b2c:	70 c0       	rjmp	.+224    	; 0x3c0e <nrk_gpio_toggle+0x11e>
    3b2e:	45 30       	cpi	r20, 0x05	; 5
    3b30:	51 05       	cpc	r21, r1
    3b32:	09 f0       	breq	.+2      	; 0x3b36 <nrk_gpio_toggle+0x46>
    3b34:	e3 c0       	rjmp	.+454    	; 0x3cfc <nrk_gpio_toggle+0x20c>
    3b36:	b9 c0       	rjmp	.+370    	; 0x3caa <nrk_gpio_toggle+0x1ba>
if(val&0x0040) break; 
level++;
    3b38:	80 b1       	in	r24, 0x00	; 0
    3b3a:	a9 01       	movw	r20, r18
    3b3c:	73 e0       	ldi	r23, 0x03	; 3
    3b3e:	56 95       	lsr	r21
    3b40:	47 95       	ror	r20
    3b42:	7a 95       	dec	r23
    3b44:	e1 f7       	brne	.-8      	; 0x3b3e <nrk_gpio_toggle+0x4e>
    3b46:	99 27       	eor	r25, r25
    3b48:	04 2e       	mov	r0, r20
    3b4a:	02 c0       	rjmp	.+4      	; 0x3b50 <nrk_gpio_toggle+0x60>
    3b4c:	95 95       	asr	r25
    3b4e:	87 95       	ror	r24
    3b50:	0a 94       	dec	r0
    3b52:	e2 f7       	brpl	.-8      	; 0x3b4c <nrk_gpio_toggle+0x5c>
    3b54:	80 fd       	sbrc	r24, 0
    3b56:	0b c0       	rjmp	.+22     	; 0x3b6e <nrk_gpio_toggle+0x7e>
}
    3b58:	22 b1       	in	r18, 0x02	; 2
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	02 c0       	rjmp	.+4      	; 0x3b64 <nrk_gpio_toggle+0x74>
    3b60:	88 0f       	add	r24, r24
    3b62:	99 1f       	adc	r25, r25
    3b64:	4a 95       	dec	r20
    3b66:	e2 f7       	brpl	.-8      	; 0x3b60 <nrk_gpio_toggle+0x70>
    3b68:	28 2b       	or	r18, r24
    3b6a:	22 b9       	out	0x02, r18	; 2
    3b6c:	c4 c0       	rjmp	.+392    	; 0x3cf6 <nrk_gpio_toggle+0x206>
if(radio_sem!=NULL)
 nrk_sem_post(radio_sem);
    3b6e:	22 b1       	in	r18, 0x02	; 2
    3b70:	81 e0       	ldi	r24, 0x01	; 1
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	02 c0       	rjmp	.+4      	; 0x3b7a <nrk_gpio_toggle+0x8a>
    3b76:	88 0f       	add	r24, r24
    3b78:	99 1f       	adc	r25, r25
    3b7a:	4a 95       	dec	r20
    3b7c:	e2 f7       	brpl	.-8      	; 0x3b76 <nrk_gpio_toggle+0x86>
    3b7e:	80 95       	com	r24
    3b80:	82 23       	and	r24, r18
    3b82:	82 b9       	out	0x02, r24	; 2
    3b84:	b8 c0       	rjmp	.+368    	; 0x3cf6 <nrk_gpio_toggle+0x206>
if(level==0)
  {
  val=get_adc_val();
  // FIXME:  This probably isn't correct...
    3b86:	83 b1       	in	r24, 0x03	; 3
    3b88:	63 e0       	ldi	r22, 0x03	; 3
    3b8a:	36 95       	lsr	r19
    3b8c:	27 95       	ror	r18
    3b8e:	6a 95       	dec	r22
    3b90:	e1 f7       	brne	.-8      	; 0x3b8a <nrk_gpio_toggle+0x9a>
    3b92:	99 27       	eor	r25, r25
    3b94:	02 2e       	mov	r0, r18
    3b96:	02 c0       	rjmp	.+4      	; 0x3b9c <nrk_gpio_toggle+0xac>
    3b98:	95 95       	asr	r25
    3b9a:	87 95       	ror	r24
    3b9c:	0a 94       	dec	r0
    3b9e:	e2 f7       	brpl	.-8      	; 0x3b98 <nrk_gpio_toggle+0xa8>
    3ba0:	02 c0       	rjmp	.+4      	; 0x3ba6 <nrk_gpio_toggle+0xb6>
    3ba2:	44 0f       	add	r20, r20
    3ba4:	55 1f       	adc	r21, r21
    3ba6:	2a 95       	dec	r18
    3ba8:	e2 f7       	brpl	.-8      	; 0x3ba2 <nrk_gpio_toggle+0xb2>
    3baa:	80 fd       	sbrc	r24, 0
    3bac:	03 c0       	rjmp	.+6      	; 0x3bb4 <nrk_gpio_toggle+0xc4>
  if(val>174) val-=174;
    3bae:	85 b1       	in	r24, 0x05	; 5
    3bb0:	84 2b       	or	r24, r20
    3bb2:	04 c0       	rjmp	.+8      	; 0x3bbc <nrk_gpio_toggle+0xcc>
  if(val<330) val=330;
  }
    3bb4:	95 b1       	in	r25, 0x05	; 5
    3bb6:	84 2f       	mov	r24, r20
    3bb8:	80 95       	com	r24
    3bba:	89 23       	and	r24, r25
    3bbc:	85 b9       	out	0x05, r24	; 5
    3bbe:	9b c0       	rjmp	.+310    	; 0x3cf6 <nrk_gpio_toggle+0x206>
else val=(9000-(level*125)) / 27;

return val;
}
    3bc0:	86 b1       	in	r24, 0x06	; 6
    3bc2:	a9 01       	movw	r20, r18
    3bc4:	93 e0       	ldi	r25, 0x03	; 3
    3bc6:	56 95       	lsr	r21
    3bc8:	47 95       	ror	r20
    3bca:	9a 95       	dec	r25
    3bcc:	e1 f7       	brne	.-8      	; 0x3bc6 <nrk_gpio_toggle+0xd6>
    3bce:	99 27       	eor	r25, r25
    3bd0:	04 2e       	mov	r0, r20
    3bd2:	02 c0       	rjmp	.+4      	; 0x3bd8 <nrk_gpio_toggle+0xe8>
    3bd4:	95 95       	asr	r25
    3bd6:	87 95       	ror	r24
    3bd8:	0a 94       	dec	r0
    3bda:	e2 f7       	brpl	.-8      	; 0x3bd4 <nrk_gpio_toggle+0xe4>
    3bdc:	80 fd       	sbrc	r24, 0
    3bde:	0b c0       	rjmp	.+22     	; 0x3bf6 <nrk_gpio_toggle+0x106>

    3be0:	28 b1       	in	r18, 0x08	; 8
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	02 c0       	rjmp	.+4      	; 0x3bec <nrk_gpio_toggle+0xfc>
    3be8:	88 0f       	add	r24, r24
    3bea:	99 1f       	adc	r25, r25
    3bec:	4a 95       	dec	r20
    3bee:	e2 f7       	brpl	.-8      	; 0x3be8 <nrk_gpio_toggle+0xf8>
    3bf0:	28 2b       	or	r18, r24
    3bf2:	28 b9       	out	0x08, r18	; 8
    3bf4:	80 c0       	rjmp	.+256    	; 0x3cf6 <nrk_gpio_toggle+0x206>


    3bf6:	28 b1       	in	r18, 0x08	; 8
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	02 c0       	rjmp	.+4      	; 0x3c02 <nrk_gpio_toggle+0x112>
    3bfe:	88 0f       	add	r24, r24
    3c00:	99 1f       	adc	r25, r25
    3c02:	4a 95       	dec	r20
    3c04:	e2 f7       	brpl	.-8      	; 0x3bfe <nrk_gpio_toggle+0x10e>
    3c06:	80 95       	com	r24
    3c08:	82 23       	and	r24, r18
    3c0a:	88 b9       	out	0x08, r24	; 8
    3c0c:	74 c0       	rjmp	.+232    	; 0x3cf6 <nrk_gpio_toggle+0x206>
void init_adc()
{
// Initialize values here
  ADC_INIT ();
    3c0e:	89 b1       	in	r24, 0x09	; 9
    3c10:	a9 01       	movw	r20, r18
    3c12:	b3 e0       	ldi	r27, 0x03	; 3
    3c14:	56 95       	lsr	r21
    3c16:	47 95       	ror	r20
    3c18:	ba 95       	dec	r27
    3c1a:	e1 f7       	brne	.-8      	; 0x3c14 <nrk_gpio_toggle+0x124>
    3c1c:	99 27       	eor	r25, r25
    3c1e:	04 2e       	mov	r0, r20
    3c20:	02 c0       	rjmp	.+4      	; 0x3c26 <nrk_gpio_toggle+0x136>
    3c22:	95 95       	asr	r25
    3c24:	87 95       	ror	r24
    3c26:	0a 94       	dec	r0
    3c28:	e2 f7       	brpl	.-8      	; 0x3c22 <nrk_gpio_toggle+0x132>
    3c2a:	80 fd       	sbrc	r24, 0
    3c2c:	0b c0       	rjmp	.+22     	; 0x3c44 <nrk_gpio_toggle+0x154>
  ADC_ENABLE ();
    3c2e:	2b b1       	in	r18, 0x0b	; 11
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	02 c0       	rjmp	.+4      	; 0x3c3a <nrk_gpio_toggle+0x14a>
    3c36:	88 0f       	add	r24, r24
    3c38:	99 1f       	adc	r25, r25
    3c3a:	4a 95       	dec	r20
    3c3c:	e2 f7       	brpl	.-8      	; 0x3c36 <nrk_gpio_toggle+0x146>
    3c3e:	28 2b       	or	r18, r24
    3c40:	2b b9       	out	0x0b, r18	; 11
    3c42:	59 c0       	rjmp	.+178    	; 0x3cf6 <nrk_gpio_toggle+0x206>
  channel=0;
  ADC_SET_CHANNEL (0);
    3c44:	2b b1       	in	r18, 0x0b	; 11
    3c46:	81 e0       	ldi	r24, 0x01	; 1
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	02 c0       	rjmp	.+4      	; 0x3c50 <nrk_gpio_toggle+0x160>
    3c4c:	88 0f       	add	r24, r24
    3c4e:	99 1f       	adc	r25, r25
    3c50:	4a 95       	dec	r20
    3c52:	e2 f7       	brpl	.-8      	; 0x3c4c <nrk_gpio_toggle+0x15c>
    3c54:	80 95       	com	r24
    3c56:	82 23       	and	r24, r18
    3c58:	8b b9       	out	0x0b, r24	; 11
    3c5a:	4d c0       	rjmp	.+154    	; 0x3cf6 <nrk_gpio_toggle+0x206>
}

uint16_t get_adc_val()
{                         
    3c5c:	8c b1       	in	r24, 0x0c	; 12
    3c5e:	a9 01       	movw	r20, r18
    3c60:	a3 e0       	ldi	r26, 0x03	; 3
    3c62:	56 95       	lsr	r21
    3c64:	47 95       	ror	r20
    3c66:	aa 95       	dec	r26
    3c68:	e1 f7       	brne	.-8      	; 0x3c62 <nrk_gpio_toggle+0x172>
    3c6a:	99 27       	eor	r25, r25
    3c6c:	04 2e       	mov	r0, r20
    3c6e:	02 c0       	rjmp	.+4      	; 0x3c74 <nrk_gpio_toggle+0x184>
    3c70:	95 95       	asr	r25
    3c72:	87 95       	ror	r24
    3c74:	0a 94       	dec	r0
    3c76:	e2 f7       	brpl	.-8      	; 0x3c70 <nrk_gpio_toggle+0x180>
    3c78:	80 fd       	sbrc	r24, 0
    3c7a:	0b c0       	rjmp	.+22     	; 0x3c92 <nrk_gpio_toggle+0x1a2>
	uint16_t adc_val;
    3c7c:	2e b1       	in	r18, 0x0e	; 14
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	02 c0       	rjmp	.+4      	; 0x3c88 <nrk_gpio_toggle+0x198>
    3c84:	88 0f       	add	r24, r24
    3c86:	99 1f       	adc	r25, r25
    3c88:	4a 95       	dec	r20
    3c8a:	e2 f7       	brpl	.-8      	; 0x3c84 <nrk_gpio_toggle+0x194>
    3c8c:	28 2b       	or	r18, r24
    3c8e:	2e b9       	out	0x0e, r18	; 14
    3c90:	32 c0       	rjmp	.+100    	; 0x3cf6 <nrk_gpio_toggle+0x206>
	ADC_SAMPLE_SINGLE();
	delay();
    3c92:	2e b1       	in	r18, 0x0e	; 14
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	02 c0       	rjmp	.+4      	; 0x3c9e <nrk_gpio_toggle+0x1ae>
    3c9a:	88 0f       	add	r24, r24
    3c9c:	99 1f       	adc	r25, r25
    3c9e:	4a 95       	dec	r20
    3ca0:	e2 f7       	brpl	.-8      	; 0x3c9a <nrk_gpio_toggle+0x1aa>
    3ca2:	80 95       	com	r24
    3ca4:	82 23       	and	r24, r18
    3ca6:	8e b9       	out	0x0e, r24	; 14
    3ca8:	26 c0       	rjmp	.+76     	; 0x3cf6 <nrk_gpio_toggle+0x206>
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
    3caa:	8f b1       	in	r24, 0x0f	; 15
    3cac:	a9 01       	movw	r20, r18
    3cae:	f3 e0       	ldi	r31, 0x03	; 3
    3cb0:	56 95       	lsr	r21
    3cb2:	47 95       	ror	r20
    3cb4:	fa 95       	dec	r31
    3cb6:	e1 f7       	brne	.-8      	; 0x3cb0 <nrk_gpio_toggle+0x1c0>
    3cb8:	99 27       	eor	r25, r25
    3cba:	04 2e       	mov	r0, r20
    3cbc:	02 c0       	rjmp	.+4      	; 0x3cc2 <nrk_gpio_toggle+0x1d2>
    3cbe:	95 95       	asr	r25
    3cc0:	87 95       	ror	r24
    3cc2:	0a 94       	dec	r0
    3cc4:	e2 f7       	brpl	.-8      	; 0x3cbe <nrk_gpio_toggle+0x1ce>
    3cc6:	80 fd       	sbrc	r24, 0
    3cc8:	0b c0       	rjmp	.+22     	; 0x3ce0 <nrk_gpio_toggle+0x1f0>
{
    3cca:	21 b3       	in	r18, 0x11	; 17
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	02 c0       	rjmp	.+4      	; 0x3cd6 <nrk_gpio_toggle+0x1e6>
    3cd2:	88 0f       	add	r24, r24
    3cd4:	99 1f       	adc	r25, r25
    3cd6:	4a 95       	dec	r20
    3cd8:	e2 f7       	brpl	.-8      	; 0x3cd2 <nrk_gpio_toggle+0x1e2>
    3cda:	28 2b       	or	r18, r24
    3cdc:	21 bb       	out	0x11, r18	; 17
    3cde:	0b c0       	rjmp	.+22     	; 0x3cf6 <nrk_gpio_toggle+0x206>
  nrk_spin_wait_us(ADC_SETUP_DELAY);
}
    3ce0:	21 b3       	in	r18, 0x11	; 17
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	02 c0       	rjmp	.+4      	; 0x3cec <nrk_gpio_toggle+0x1fc>
    3ce8:	88 0f       	add	r24, r24
    3cea:	99 1f       	adc	r25, r25
    3cec:	4a 95       	dec	r20
    3cee:	e2 f7       	brpl	.-8      	; 0x3ce8 <nrk_gpio_toggle+0x1f8>
    3cf0:	80 95       	com	r24
    3cf2:	82 23       	and	r24, r18
    3cf4:	81 bb       	out	0x11, r24	; 17
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	08 95       	ret
    3cfc:	8f ef       	ldi	r24, 0xFF	; 255
    3cfe:	9f ef       	ldi	r25, 0xFF	; 255
    3d00:	08 95       	ret

00003d02 <nrk_gpio_direction>:
    3d02:	8f 3f       	cpi	r24, 0xFF	; 255
    3d04:	09 f4       	brne	.+2      	; 0x3d08 <nrk_gpio_direction+0x6>
    3d06:	12 c1       	rjmp	.+548    	; 0x3f2c <nrk_gpio_direction+0x22a>
    3d08:	48 2f       	mov	r20, r24
    3d0a:	55 27       	eor	r21, r21
    3d0c:	66 23       	and	r22, r22
    3d0e:	09 f0       	breq	.+2      	; 0x3d12 <nrk_gpio_direction+0x10>
    3d10:	90 c0       	rjmp	.+288    	; 0x3e32 <nrk_gpio_direction+0x130>
    3d12:	ca 01       	movw	r24, r20
    3d14:	87 70       	andi	r24, 0x07	; 7
    3d16:	90 70       	andi	r25, 0x00	; 0
    3d18:	82 30       	cpi	r24, 0x02	; 2
    3d1a:	91 05       	cpc	r25, r1
    3d1c:	09 f4       	brne	.+2      	; 0x3d20 <nrk_gpio_direction+0x1e>
    3d1e:	3e c0       	rjmp	.+124    	; 0x3d9c <nrk_gpio_direction+0x9a>
    3d20:	83 30       	cpi	r24, 0x03	; 3
    3d22:	91 05       	cpc	r25, r1
    3d24:	3c f4       	brge	.+14     	; 0x3d34 <nrk_gpio_direction+0x32>
    3d26:	00 97       	sbiw	r24, 0x00	; 0
    3d28:	89 f0       	breq	.+34     	; 0x3d4c <nrk_gpio_direction+0x4a>
    3d2a:	81 30       	cpi	r24, 0x01	; 1
    3d2c:	91 05       	cpc	r25, r1
    3d2e:	09 f0       	breq	.+2      	; 0x3d32 <nrk_gpio_direction+0x30>
    3d30:	fd c0       	rjmp	.+506    	; 0x3f2c <nrk_gpio_direction+0x22a>
    3d32:	21 c0       	rjmp	.+66     	; 0x3d76 <nrk_gpio_direction+0x74>
    3d34:	84 30       	cpi	r24, 0x04	; 4
    3d36:	91 05       	cpc	r25, r1
    3d38:	09 f4       	brne	.+2      	; 0x3d3c <nrk_gpio_direction+0x3a>
    3d3a:	54 c0       	rjmp	.+168    	; 0x3de4 <nrk_gpio_direction+0xe2>
    3d3c:	84 30       	cpi	r24, 0x04	; 4
    3d3e:	91 05       	cpc	r25, r1
    3d40:	0c f4       	brge	.+2      	; 0x3d44 <nrk_gpio_direction+0x42>
    3d42:	3e c0       	rjmp	.+124    	; 0x3dc0 <nrk_gpio_direction+0xbe>
    3d44:	05 97       	sbiw	r24, 0x05	; 5
    3d46:	09 f0       	breq	.+2      	; 0x3d4a <nrk_gpio_direction+0x48>
    3d48:	f1 c0       	rjmp	.+482    	; 0x3f2c <nrk_gpio_direction+0x22a>
    3d4a:	5e c0       	rjmp	.+188    	; 0x3e08 <nrk_gpio_direction+0x106>
    3d4c:	31 b1       	in	r19, 0x01	; 1
    3d4e:	b3 e0       	ldi	r27, 0x03	; 3
    3d50:	56 95       	lsr	r21
    3d52:	47 95       	ror	r20
    3d54:	ba 95       	dec	r27
    3d56:	e1 f7       	brne	.-8      	; 0x3d50 <nrk_gpio_direction+0x4e>
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	02 c0       	rjmp	.+4      	; 0x3d62 <nrk_gpio_direction+0x60>
    3d5e:	88 0f       	add	r24, r24
    3d60:	99 1f       	adc	r25, r25
    3d62:	4a 95       	dec	r20
    3d64:	e2 f7       	brpl	.-8      	; 0x3d5e <nrk_gpio_direction+0x5c>
    3d66:	28 2f       	mov	r18, r24
    3d68:	20 95       	com	r18
    3d6a:	23 23       	and	r18, r19
    3d6c:	21 b9       	out	0x01, r18	; 1
    3d6e:	22 b1       	in	r18, 0x02	; 2
    3d70:	82 2b       	or	r24, r18
    3d72:	82 b9       	out	0x02, r24	; 2
    3d74:	d8 c0       	rjmp	.+432    	; 0x3f26 <nrk_gpio_direction+0x224>
    3d76:	24 b1       	in	r18, 0x04	; 4
    3d78:	a3 e0       	ldi	r26, 0x03	; 3
    3d7a:	56 95       	lsr	r21
    3d7c:	47 95       	ror	r20
    3d7e:	aa 95       	dec	r26
    3d80:	e1 f7       	brne	.-8      	; 0x3d7a <nrk_gpio_direction+0x78>
    3d82:	02 c0       	rjmp	.+4      	; 0x3d88 <nrk_gpio_direction+0x86>
    3d84:	88 0f       	add	r24, r24
    3d86:	99 1f       	adc	r25, r25
    3d88:	4a 95       	dec	r20
    3d8a:	e2 f7       	brpl	.-8      	; 0x3d84 <nrk_gpio_direction+0x82>
    3d8c:	98 2f       	mov	r25, r24
    3d8e:	80 95       	com	r24
    3d90:	82 23       	and	r24, r18
    3d92:	84 b9       	out	0x04, r24	; 4
    3d94:	85 b1       	in	r24, 0x05	; 5
    3d96:	98 2b       	or	r25, r24
    3d98:	95 b9       	out	0x05, r25	; 5
    3d9a:	c5 c0       	rjmp	.+394    	; 0x3f26 <nrk_gpio_direction+0x224>
    3d9c:	37 b1       	in	r19, 0x07	; 7
    3d9e:	f3 e0       	ldi	r31, 0x03	; 3
    3da0:	56 95       	lsr	r21
    3da2:	47 95       	ror	r20
    3da4:	fa 95       	dec	r31
    3da6:	e1 f7       	brne	.-8      	; 0x3da0 <nrk_gpio_direction+0x9e>
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	02 c0       	rjmp	.+4      	; 0x3db2 <nrk_gpio_direction+0xb0>
    3dae:	88 0f       	add	r24, r24
    3db0:	99 1f       	adc	r25, r25
    3db2:	4a 95       	dec	r20
    3db4:	e2 f7       	brpl	.-8      	; 0x3dae <nrk_gpio_direction+0xac>
    3db6:	28 2f       	mov	r18, r24
    3db8:	20 95       	com	r18
    3dba:	23 23       	and	r18, r19
    3dbc:	27 b9       	out	0x07, r18	; 7
    3dbe:	35 c0       	rjmp	.+106    	; 0x3e2a <nrk_gpio_direction+0x128>
    3dc0:	3a b1       	in	r19, 0x0a	; 10
    3dc2:	e3 e0       	ldi	r30, 0x03	; 3
    3dc4:	56 95       	lsr	r21
    3dc6:	47 95       	ror	r20
    3dc8:	ea 95       	dec	r30
    3dca:	e1 f7       	brne	.-8      	; 0x3dc4 <nrk_gpio_direction+0xc2>
    3dcc:	81 e0       	ldi	r24, 0x01	; 1
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	02 c0       	rjmp	.+4      	; 0x3dd6 <nrk_gpio_direction+0xd4>
    3dd2:	88 0f       	add	r24, r24
    3dd4:	99 1f       	adc	r25, r25
    3dd6:	4a 95       	dec	r20
    3dd8:	e2 f7       	brpl	.-8      	; 0x3dd2 <nrk_gpio_direction+0xd0>
    3dda:	28 2f       	mov	r18, r24
    3ddc:	20 95       	com	r18
    3dde:	23 23       	and	r18, r19
    3de0:	2a b9       	out	0x0a, r18	; 10
    3de2:	23 c0       	rjmp	.+70     	; 0x3e2a <nrk_gpio_direction+0x128>
    3de4:	3d b1       	in	r19, 0x0d	; 13
    3de6:	73 e0       	ldi	r23, 0x03	; 3
    3de8:	56 95       	lsr	r21
    3dea:	47 95       	ror	r20
    3dec:	7a 95       	dec	r23
    3dee:	e1 f7       	brne	.-8      	; 0x3de8 <nrk_gpio_direction+0xe6>
    3df0:	81 e0       	ldi	r24, 0x01	; 1
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	02 c0       	rjmp	.+4      	; 0x3dfa <nrk_gpio_direction+0xf8>
    3df6:	88 0f       	add	r24, r24
    3df8:	99 1f       	adc	r25, r25
    3dfa:	4a 95       	dec	r20
    3dfc:	e2 f7       	brpl	.-8      	; 0x3df6 <nrk_gpio_direction+0xf4>
    3dfe:	28 2f       	mov	r18, r24
    3e00:	20 95       	com	r18
    3e02:	23 23       	and	r18, r19
    3e04:	2d b9       	out	0x0d, r18	; 13
    3e06:	11 c0       	rjmp	.+34     	; 0x3e2a <nrk_gpio_direction+0x128>
    3e08:	30 b3       	in	r19, 0x10	; 16
    3e0a:	63 e0       	ldi	r22, 0x03	; 3
    3e0c:	56 95       	lsr	r21
    3e0e:	47 95       	ror	r20
    3e10:	6a 95       	dec	r22
    3e12:	e1 f7       	brne	.-8      	; 0x3e0c <nrk_gpio_direction+0x10a>
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	02 c0       	rjmp	.+4      	; 0x3e1e <nrk_gpio_direction+0x11c>
    3e1a:	88 0f       	add	r24, r24
    3e1c:	99 1f       	adc	r25, r25
    3e1e:	4a 95       	dec	r20
    3e20:	e2 f7       	brpl	.-8      	; 0x3e1a <nrk_gpio_direction+0x118>
    3e22:	28 2f       	mov	r18, r24
    3e24:	20 95       	com	r18
    3e26:	23 23       	and	r18, r19
    3e28:	20 bb       	out	0x10, r18	; 16
    3e2a:	25 b1       	in	r18, 0x05	; 5
    3e2c:	82 2b       	or	r24, r18
    3e2e:	85 b9       	out	0x05, r24	; 5
    3e30:	7a c0       	rjmp	.+244    	; 0x3f26 <nrk_gpio_direction+0x224>
    3e32:	9a 01       	movw	r18, r20
    3e34:	27 70       	andi	r18, 0x07	; 7
    3e36:	30 70       	andi	r19, 0x00	; 0
    3e38:	22 30       	cpi	r18, 0x02	; 2
    3e3a:	31 05       	cpc	r19, r1
    3e3c:	a9 f1       	breq	.+106    	; 0x3ea8 <nrk_gpio_direction+0x1a6>
    3e3e:	23 30       	cpi	r18, 0x03	; 3
    3e40:	31 05       	cpc	r19, r1
    3e42:	44 f4       	brge	.+16     	; 0x3e54 <nrk_gpio_direction+0x152>
    3e44:	21 15       	cp	r18, r1
    3e46:	31 05       	cpc	r19, r1
    3e48:	89 f0       	breq	.+34     	; 0x3e6c <nrk_gpio_direction+0x16a>
    3e4a:	21 30       	cpi	r18, 0x01	; 1
    3e4c:	31 05       	cpc	r19, r1
    3e4e:	09 f0       	breq	.+2      	; 0x3e52 <nrk_gpio_direction+0x150>
    3e50:	6d c0       	rjmp	.+218    	; 0x3f2c <nrk_gpio_direction+0x22a>
    3e52:	1c c0       	rjmp	.+56     	; 0x3e8c <nrk_gpio_direction+0x18a>
    3e54:	24 30       	cpi	r18, 0x04	; 4
    3e56:	31 05       	cpc	r19, r1
    3e58:	09 f4       	brne	.+2      	; 0x3e5c <nrk_gpio_direction+0x15a>
    3e5a:	46 c0       	rjmp	.+140    	; 0x3ee8 <nrk_gpio_direction+0x1e6>
    3e5c:	24 30       	cpi	r18, 0x04	; 4
    3e5e:	31 05       	cpc	r19, r1
    3e60:	9c f1       	brlt	.+102    	; 0x3ec8 <nrk_gpio_direction+0x1c6>
    3e62:	25 30       	cpi	r18, 0x05	; 5
    3e64:	31 05       	cpc	r19, r1
    3e66:	09 f0       	breq	.+2      	; 0x3e6a <nrk_gpio_direction+0x168>
    3e68:	61 c0       	rjmp	.+194    	; 0x3f2c <nrk_gpio_direction+0x22a>
    3e6a:	4e c0       	rjmp	.+156    	; 0x3f08 <nrk_gpio_direction+0x206>
    3e6c:	21 b1       	in	r18, 0x01	; 1
    3e6e:	33 e0       	ldi	r19, 0x03	; 3
    3e70:	56 95       	lsr	r21
    3e72:	47 95       	ror	r20
    3e74:	3a 95       	dec	r19
    3e76:	e1 f7       	brne	.-8      	; 0x3e70 <nrk_gpio_direction+0x16e>
    3e78:	81 e0       	ldi	r24, 0x01	; 1
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	02 c0       	rjmp	.+4      	; 0x3e82 <nrk_gpio_direction+0x180>
    3e7e:	88 0f       	add	r24, r24
    3e80:	99 1f       	adc	r25, r25
    3e82:	4a 95       	dec	r20
    3e84:	e2 f7       	brpl	.-8      	; 0x3e7e <nrk_gpio_direction+0x17c>
    3e86:	28 2b       	or	r18, r24
    3e88:	21 b9       	out	0x01, r18	; 1
    3e8a:	4d c0       	rjmp	.+154    	; 0x3f26 <nrk_gpio_direction+0x224>
    3e8c:	84 b1       	in	r24, 0x04	; 4
    3e8e:	93 e0       	ldi	r25, 0x03	; 3
    3e90:	56 95       	lsr	r21
    3e92:	47 95       	ror	r20
    3e94:	9a 95       	dec	r25
    3e96:	e1 f7       	brne	.-8      	; 0x3e90 <nrk_gpio_direction+0x18e>
    3e98:	02 c0       	rjmp	.+4      	; 0x3e9e <nrk_gpio_direction+0x19c>
    3e9a:	22 0f       	add	r18, r18
    3e9c:	33 1f       	adc	r19, r19
    3e9e:	4a 95       	dec	r20
    3ea0:	e2 f7       	brpl	.-8      	; 0x3e9a <nrk_gpio_direction+0x198>
    3ea2:	82 2b       	or	r24, r18
    3ea4:	84 b9       	out	0x04, r24	; 4
    3ea6:	3f c0       	rjmp	.+126    	; 0x3f26 <nrk_gpio_direction+0x224>
    3ea8:	27 b1       	in	r18, 0x07	; 7
    3eaa:	b3 e0       	ldi	r27, 0x03	; 3
    3eac:	56 95       	lsr	r21
    3eae:	47 95       	ror	r20
    3eb0:	ba 95       	dec	r27
    3eb2:	e1 f7       	brne	.-8      	; 0x3eac <nrk_gpio_direction+0x1aa>
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	02 c0       	rjmp	.+4      	; 0x3ebe <nrk_gpio_direction+0x1bc>
    3eba:	88 0f       	add	r24, r24
    3ebc:	99 1f       	adc	r25, r25
    3ebe:	4a 95       	dec	r20
    3ec0:	e2 f7       	brpl	.-8      	; 0x3eba <nrk_gpio_direction+0x1b8>
    3ec2:	28 2b       	or	r18, r24
    3ec4:	27 b9       	out	0x07, r18	; 7
    3ec6:	2f c0       	rjmp	.+94     	; 0x3f26 <nrk_gpio_direction+0x224>
    3ec8:	2a b1       	in	r18, 0x0a	; 10
    3eca:	a3 e0       	ldi	r26, 0x03	; 3
    3ecc:	56 95       	lsr	r21
    3ece:	47 95       	ror	r20
    3ed0:	aa 95       	dec	r26
    3ed2:	e1 f7       	brne	.-8      	; 0x3ecc <nrk_gpio_direction+0x1ca>
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	02 c0       	rjmp	.+4      	; 0x3ede <nrk_gpio_direction+0x1dc>
    3eda:	88 0f       	add	r24, r24
    3edc:	99 1f       	adc	r25, r25
    3ede:	4a 95       	dec	r20
    3ee0:	e2 f7       	brpl	.-8      	; 0x3eda <nrk_gpio_direction+0x1d8>
    3ee2:	28 2b       	or	r18, r24
    3ee4:	2a b9       	out	0x0a, r18	; 10
    3ee6:	1f c0       	rjmp	.+62     	; 0x3f26 <nrk_gpio_direction+0x224>
    3ee8:	2d b1       	in	r18, 0x0d	; 13
    3eea:	f3 e0       	ldi	r31, 0x03	; 3
    3eec:	56 95       	lsr	r21
    3eee:	47 95       	ror	r20
    3ef0:	fa 95       	dec	r31
    3ef2:	e1 f7       	brne	.-8      	; 0x3eec <nrk_gpio_direction+0x1ea>
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	02 c0       	rjmp	.+4      	; 0x3efe <nrk_gpio_direction+0x1fc>
    3efa:	88 0f       	add	r24, r24
    3efc:	99 1f       	adc	r25, r25
    3efe:	4a 95       	dec	r20
    3f00:	e2 f7       	brpl	.-8      	; 0x3efa <nrk_gpio_direction+0x1f8>
    3f02:	28 2b       	or	r18, r24
    3f04:	2d b9       	out	0x0d, r18	; 13
    3f06:	0f c0       	rjmp	.+30     	; 0x3f26 <nrk_gpio_direction+0x224>
    3f08:	20 b3       	in	r18, 0x10	; 16
    3f0a:	e3 e0       	ldi	r30, 0x03	; 3
    3f0c:	56 95       	lsr	r21
    3f0e:	47 95       	ror	r20
    3f10:	ea 95       	dec	r30
    3f12:	e1 f7       	brne	.-8      	; 0x3f0c <nrk_gpio_direction+0x20a>
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	02 c0       	rjmp	.+4      	; 0x3f1e <nrk_gpio_direction+0x21c>
    3f1a:	88 0f       	add	r24, r24
    3f1c:	99 1f       	adc	r25, r25
    3f1e:	4a 95       	dec	r20
    3f20:	e2 f7       	brpl	.-8      	; 0x3f1a <nrk_gpio_direction+0x218>
    3f22:	28 2b       	or	r18, r24
    3f24:	20 bb       	out	0x10, r18	; 16
    3f26:	81 e0       	ldi	r24, 0x01	; 1
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	08 95       	ret
    3f2c:	8f ef       	ldi	r24, 0xFF	; 255
    3f2e:	9f ef       	ldi	r25, 0xFF	; 255
    3f30:	08 95       	ret

00003f32 <nrk_get_button>:
    3f32:	88 23       	and	r24, r24
    3f34:	19 f0       	breq	.+6      	; 0x3f3c <nrk_get_button+0xa>
    3f36:	8f ef       	ldi	r24, 0xFF	; 255
    3f38:	9f ef       	ldi	r25, 0xFF	; 255
    3f3a:	08 95       	ret
    3f3c:	80 b1       	in	r24, 0x00	; 0
    3f3e:	99 27       	eor	r25, r25
    3f40:	87 fd       	sbrc	r24, 7
    3f42:	90 95       	com	r25
    3f44:	80 95       	com	r24
    3f46:	90 95       	com	r25
    3f48:	88 27       	eor	r24, r24
    3f4a:	99 0f       	add	r25, r25
    3f4c:	88 1f       	adc	r24, r24
    3f4e:	99 27       	eor	r25, r25
    3f50:	08 95       	ret

00003f52 <nrk_led_toggle>:
    3f52:	00 97       	sbiw	r24, 0x00	; 0
    3f54:	11 f4       	brne	.+4      	; 0x3f5a <nrk_led_toggle+0x8>
    3f56:	84 e1       	ldi	r24, 0x14	; 20
    3f58:	09 c0       	rjmp	.+18     	; 0x3f6c <nrk_led_toggle+0x1a>
    3f5a:	81 30       	cpi	r24, 0x01	; 1
    3f5c:	91 05       	cpc	r25, r1
    3f5e:	11 f4       	brne	.+4      	; 0x3f64 <nrk_led_toggle+0x12>
    3f60:	8c e1       	ldi	r24, 0x1C	; 28
    3f62:	04 c0       	rjmp	.+8      	; 0x3f6c <nrk_led_toggle+0x1a>
    3f64:	82 30       	cpi	r24, 0x02	; 2
    3f66:	91 05       	cpc	r25, r1
    3f68:	31 f4       	brne	.+12     	; 0x3f76 <nrk_led_toggle+0x24>
    3f6a:	84 e2       	ldi	r24, 0x24	; 36
    3f6c:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <nrk_gpio_toggle>
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	08 95       	ret
    3f76:	03 97       	sbiw	r24, 0x03	; 3
    3f78:	19 f0       	breq	.+6      	; 0x3f80 <nrk_led_toggle+0x2e>
    3f7a:	8f ef       	ldi	r24, 0xFF	; 255
    3f7c:	9f ef       	ldi	r25, 0xFF	; 255
    3f7e:	08 95       	ret
    3f80:	8c e2       	ldi	r24, 0x2C	; 44
    3f82:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <nrk_gpio_toggle>
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	08 95       	ret

00003f8c <nrk_led_clr>:
    3f8c:	00 97       	sbiw	r24, 0x00	; 0
    3f8e:	11 f4       	brne	.+4      	; 0x3f94 <nrk_led_clr+0x8>
    3f90:	84 e1       	ldi	r24, 0x14	; 20
    3f92:	09 c0       	rjmp	.+18     	; 0x3fa6 <nrk_led_clr+0x1a>
    3f94:	81 30       	cpi	r24, 0x01	; 1
    3f96:	91 05       	cpc	r25, r1
    3f98:	11 f4       	brne	.+4      	; 0x3f9e <nrk_led_clr+0x12>
    3f9a:	8c e1       	ldi	r24, 0x1C	; 28
    3f9c:	04 c0       	rjmp	.+8      	; 0x3fa6 <nrk_led_clr+0x1a>
    3f9e:	82 30       	cpi	r24, 0x02	; 2
    3fa0:	91 05       	cpc	r25, r1
    3fa2:	31 f4       	brne	.+12     	; 0x3fb0 <nrk_led_clr+0x24>
    3fa4:	84 e2       	ldi	r24, 0x24	; 36
    3fa6:	0e 94 2d 1c 	call	0x385a	; 0x385a <nrk_gpio_set>
    3faa:	81 e0       	ldi	r24, 0x01	; 1
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	08 95       	ret
    3fb0:	03 97       	sbiw	r24, 0x03	; 3
    3fb2:	19 f0       	breq	.+6      	; 0x3fba <nrk_led_clr+0x2e>
    3fb4:	8f ef       	ldi	r24, 0xFF	; 255
    3fb6:	9f ef       	ldi	r25, 0xFF	; 255
    3fb8:	08 95       	ret
    3fba:	8c e2       	ldi	r24, 0x2C	; 44
    3fbc:	0e 94 2d 1c 	call	0x385a	; 0x385a <nrk_gpio_set>
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	08 95       	ret

00003fc6 <nrk_led_set>:
    3fc6:	00 97       	sbiw	r24, 0x00	; 0
    3fc8:	11 f4       	brne	.+4      	; 0x3fce <nrk_led_set+0x8>
    3fca:	84 e1       	ldi	r24, 0x14	; 20
    3fcc:	09 c0       	rjmp	.+18     	; 0x3fe0 <nrk_led_set+0x1a>
    3fce:	81 30       	cpi	r24, 0x01	; 1
    3fd0:	91 05       	cpc	r25, r1
    3fd2:	11 f4       	brne	.+4      	; 0x3fd8 <nrk_led_set+0x12>
    3fd4:	8c e1       	ldi	r24, 0x1C	; 28
    3fd6:	04 c0       	rjmp	.+8      	; 0x3fe0 <nrk_led_set+0x1a>
    3fd8:	82 30       	cpi	r24, 0x02	; 2
    3fda:	91 05       	cpc	r25, r1
    3fdc:	31 f4       	brne	.+12     	; 0x3fea <nrk_led_set+0x24>
    3fde:	84 e2       	ldi	r24, 0x24	; 36
    3fe0:	0e 94 b2 1c 	call	0x3964	; 0x3964 <nrk_gpio_clr>
    3fe4:	81 e0       	ldi	r24, 0x01	; 1
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	08 95       	ret
    3fea:	03 97       	sbiw	r24, 0x03	; 3
    3fec:	19 f0       	breq	.+6      	; 0x3ff4 <nrk_led_set+0x2e>
    3fee:	8f ef       	ldi	r24, 0xFF	; 255
    3ff0:	9f ef       	ldi	r25, 0xFF	; 255
    3ff2:	08 95       	ret
    3ff4:	8c e2       	ldi	r24, 0x2C	; 44
    3ff6:	0e 94 b2 1c 	call	0x3964	; 0x3964 <nrk_gpio_clr>
    3ffa:	81 e0       	ldi	r24, 0x01	; 1
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	08 95       	ret

00004000 <nrk_gpio_pullups>:
    4000:	88 23       	and	r24, r24
    4002:	19 f0       	breq	.+6      	; 0x400a <nrk_gpio_pullups+0xa>
    4004:	85 b7       	in	r24, 0x35	; 53
    4006:	8f 7e       	andi	r24, 0xEF	; 239
    4008:	02 c0       	rjmp	.+4      	; 0x400e <nrk_gpio_pullups+0xe>
    400a:	85 b7       	in	r24, 0x35	; 53
    400c:	80 61       	ori	r24, 0x10	; 16
    400e:	85 bf       	out	0x35, r24	; 53
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	08 95       	ret

00004016 <putc0>:
    4016:	98 2f       	mov	r25, r24
    4018:	80 91 c0 00 	lds	r24, 0x00C0
    401c:	85 ff       	sbrs	r24, 5
    401e:	fc cf       	rjmp	.-8      	; 0x4018 <putc0+0x2>
    4020:	80 91 c0 00 	lds	r24, 0x00C0
    4024:	8f 7d       	andi	r24, 0xDF	; 223
    4026:	80 93 c0 00 	sts	0x00C0, r24
    402a:	90 93 c6 00 	sts	0x00C6, r25
    402e:	08 95       	ret

00004030 <putc1>:
    4030:	98 2f       	mov	r25, r24
    4032:	80 91 c8 00 	lds	r24, 0x00C8
    4036:	85 ff       	sbrs	r24, 5
    4038:	fc cf       	rjmp	.-8      	; 0x4032 <putc1+0x2>
    403a:	90 93 ce 00 	sts	0x00CE, r25
    403e:	08 95       	ret

00004040 <setup_uart0>:
    4040:	29 2f       	mov	r18, r25
    4042:	33 27       	eor	r19, r19
    4044:	20 93 c5 00 	sts	0x00C5, r18
    4048:	80 93 c4 00 	sts	0x00C4, r24
    404c:	86 e0       	ldi	r24, 0x06	; 6
    404e:	80 93 c2 00 	sts	0x00C2, r24
    4052:	e1 ec       	ldi	r30, 0xC1	; 193
    4054:	f0 e0       	ldi	r31, 0x00	; 0
    4056:	80 81       	ld	r24, Z
    4058:	8b 7f       	andi	r24, 0xFB	; 251
    405a:	80 83       	st	Z, r24
    405c:	a0 ec       	ldi	r26, 0xC0	; 192
    405e:	b0 e0       	ldi	r27, 0x00	; 0
    4060:	8c 91       	ld	r24, X
    4062:	82 60       	ori	r24, 0x02	; 2
    4064:	8c 93       	st	X, r24
    4066:	80 81       	ld	r24, Z
    4068:	88 61       	ori	r24, 0x18	; 24
    406a:	80 83       	st	Z, r24
    406c:	08 95       	ret

0000406e <setup_uart1>:
    406e:	29 2f       	mov	r18, r25
    4070:	33 27       	eor	r19, r19
    4072:	20 93 cd 00 	sts	0x00CD, r18
    4076:	80 93 cc 00 	sts	0x00CC, r24
    407a:	86 e0       	ldi	r24, 0x06	; 6
    407c:	80 93 ca 00 	sts	0x00CA, r24
    4080:	e9 ec       	ldi	r30, 0xC9	; 201
    4082:	f0 e0       	ldi	r31, 0x00	; 0
    4084:	80 81       	ld	r24, Z
    4086:	8b 7f       	andi	r24, 0xFB	; 251
    4088:	80 83       	st	Z, r24
    408a:	a8 ec       	ldi	r26, 0xC8	; 200
    408c:	b0 e0       	ldi	r27, 0x00	; 0
    408e:	8c 91       	ld	r24, X
    4090:	82 60       	ori	r24, 0x02	; 2
    4092:	8c 93       	st	X, r24
    4094:	80 81       	ld	r24, Z
    4096:	88 61       	ori	r24, 0x18	; 24
    4098:	80 83       	st	Z, r24
    409a:	08 95       	ret

0000409c <getc0>:
    409c:	80 91 c0 00 	lds	r24, 0x00C0
    40a0:	87 ff       	sbrs	r24, 7
    40a2:	fc cf       	rjmp	.-8      	; 0x409c <getc0>
    40a4:	80 91 c0 00 	lds	r24, 0x00C0
    40a8:	8f 77       	andi	r24, 0x7F	; 127
    40aa:	80 93 c0 00 	sts	0x00C0, r24
    40ae:	80 91 c6 00 	lds	r24, 0x00C6
    40b2:	99 27       	eor	r25, r25
    40b4:	08 95       	ret

000040b6 <nrk_setup_uart>:
    40b6:	0e 94 37 20 	call	0x406e	; 0x406e <setup_uart1>
    40ba:	61 ed       	ldi	r22, 0xD1	; 209
    40bc:	7b e1       	ldi	r23, 0x1B	; 27
    40be:	88 e1       	ldi	r24, 0x18	; 24
    40c0:	90 e2       	ldi	r25, 0x20	; 32
    40c2:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <fdevopen>
    40c6:	90 93 6b 0a 	sts	0x0A6B, r25
    40ca:	80 93 6a 0a 	sts	0x0A6A, r24
    40ce:	61 ed       	ldi	r22, 0xD1	; 209
    40d0:	7b e1       	ldi	r23, 0x1B	; 27
    40d2:	88 e1       	ldi	r24, 0x18	; 24
    40d4:	90 e2       	ldi	r25, 0x20	; 32
    40d6:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <fdevopen>
    40da:	90 93 69 0a 	sts	0x0A69, r25
    40de:	80 93 68 0a 	sts	0x0A68, r24
    40e2:	0e 94 75 25 	call	0x4aea	; 0x4aea <nrk_signal_create>
    40e6:	80 93 6e 09 	sts	0x096E, r24
    40ea:	8f 3f       	cpi	r24, 0xFF	; 255
    40ec:	19 f4       	brne	.+6      	; 0x40f4 <nrk_setup_uart+0x3e>
    40ee:	8e e0       	ldi	r24, 0x0E	; 14
    40f0:	0e 94 75 24 	call	0x48ea	; 0x48ea <nrk_error_add>
    40f4:	10 92 6f 09 	sts	0x096F, r1
    40f8:	10 92 ed 08 	sts	0x08ED, r1
    40fc:	80 91 c9 00 	lds	r24, 0x00C9
    4100:	80 68       	ori	r24, 0x80	; 128
    4102:	80 93 c9 00 	sts	0x00C9, r24
    4106:	08 95       	ret

00004108 <nrk_uart_rx_signal_get>:
uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
    4108:	80 91 6e 09 	lds	r24, 0x096E
    410c:	8f 3f       	cpi	r24, 0xFF	; 255
    410e:	19 f4       	brne	.+6      	; 0x4116 <nrk_uart_rx_signal_get+0xe>
    4110:	8e e0       	ldi	r24, 0x0E	; 14
    4112:	0e 94 75 24 	call	0x48ea	; 0x48ea <nrk_error_add>
    4116:	80 91 6e 09 	lds	r24, 0x096E
uint8_t value=size;

    411a:	99 27       	eor	r25, r25
    411c:	87 fd       	sbrc	r24, 7
    411e:	90 95       	com	r25
    4120:	08 95       	ret

00004122 <nrk_kprintf>:
		    if(opt&APPEND_FLAG)
		    {
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
    4122:	cf 93       	push	r28
    4124:	df 93       	push	r29
    4126:	ec 01       	movw	r28, r24
    4128:	07 c0       	rjmp	.+14     	; 0x4138 <nrk_kprintf+0x16>
		    else return NRK_OK;
		
	    
    412a:	60 91 6a 0a 	lds	r22, 0x0A6A
    412e:	70 91 6b 0a 	lds	r23, 0x0A6B
    4132:	99 27       	eor	r25, r25
    4134:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
    4138:	fe 01       	movw	r30, r28
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
		    else return NRK_OK;
		
    413a:	21 96       	adiw	r28, 0x01	; 1
    413c:	84 91       	lpm	r24, Z
    413e:	88 23       	and	r24, r24
    4140:	a1 f7       	brne	.-24     	; 0x412a <nrk_kprintf+0x8>
    4142:	df 91       	pop	r29
    4144:	cf 91       	pop	r28
    4146:	08 95       	ret

00004148 <__vector_36>:
	ADMUX = BM(REFS0);  \
} while (0)

#define ADC_VREF_VCC() \
   do { \
	ADMUX &= ~(BM(REFS1));  \
    4148:	1f 92       	push	r1
    414a:	0f 92       	push	r0
    414c:	0f b6       	in	r0, 0x3f	; 63
    414e:	0f 92       	push	r0
    4150:	11 24       	eor	r1, r1
    4152:	2f 93       	push	r18
    4154:	3f 93       	push	r19
    4156:	4f 93       	push	r20
    4158:	5f 93       	push	r21
    415a:	6f 93       	push	r22
    415c:	7f 93       	push	r23
    415e:	8f 93       	push	r24
    4160:	9f 93       	push	r25
    4162:	af 93       	push	r26
    4164:	bf 93       	push	r27
    4166:	ef 93       	push	r30
    4168:	ff 93       	push	r31
	ADMUX |= BM(REFS0);  \
} while(0)


    416a:	80 91 c9 00 	lds	r24, 0x00C9
    416e:	8f 77       	andi	r24, 0x7F	; 127
    4170:	80 93 c9 00 	sts	0x00C9, r24
#define ADC_VREF_1_1() \
    4174:	80 91 c8 00 	lds	r24, 0x00C8
    4178:	87 ff       	sbrs	r24, 7
    417a:	fc cf       	rjmp	.-8      	; 0x4174 <__vector_36+0x2c>
    417c:	80 91 c8 00 	lds	r24, 0x00C8
    4180:	8f 77       	andi	r24, 0x7F	; 127
    4182:	80 93 c8 00 	sts	0x00C8, r24
    4186:	90 91 ce 00 	lds	r25, 0x00CE
   do { \
    418a:	80 91 ed 08 	lds	r24, 0x08ED
    418e:	e8 2f       	mov	r30, r24
    4190:	ff 27       	eor	r31, r31
    4192:	e2 51       	subi	r30, 0x12	; 18
    4194:	f7 4f       	sbci	r31, 0xF7	; 247
    4196:	90 83       	st	Z, r25
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
    4198:	8f 5f       	subi	r24, 0xFF	; 255
    419a:	80 93 ed 08 	sts	0x08ED, r24
} while(0)
    419e:	80 38       	cpi	r24, 0x80	; 128
    41a0:	11 f4       	brne	.+4      	; 0x41a6 <__vector_36+0x5e>
    41a2:	10 92 ed 08 	sts	0x08ED, r1

    41a6:	80 91 6e 09 	lds	r24, 0x096E
    41aa:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <nrk_event_signal>

    41ae:	80 91 c8 00 	lds	r24, 0x00C8
    41b2:	8f 77       	andi	r24, 0x7F	; 127
    41b4:	80 93 c8 00 	sts	0x00C8, r24
#define ADC_VREF_2_56() \
    41b8:	80 91 c9 00 	lds	r24, 0x00C9
    41bc:	80 68       	ori	r24, 0x80	; 128
    41be:	80 93 c9 00 	sts	0x00C9, r24
    41c2:	ff 91       	pop	r31
    41c4:	ef 91       	pop	r30
    41c6:	bf 91       	pop	r27
    41c8:	af 91       	pop	r26
    41ca:	9f 91       	pop	r25
    41cc:	8f 91       	pop	r24
    41ce:	7f 91       	pop	r23
    41d0:	6f 91       	pop	r22
    41d2:	5f 91       	pop	r21
    41d4:	4f 91       	pop	r20
    41d6:	3f 91       	pop	r19
    41d8:	2f 91       	pop	r18
    41da:	0f 90       	pop	r0
    41dc:	0f be       	out	0x3f, r0	; 63
    41de:	0f 90       	pop	r0
    41e0:	1f 90       	pop	r1
    41e2:	18 95       	reti

000041e4 <halWait>:
	...
uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
    41ec:	01 97       	sbiw	r24, 0x01	; 1
    41ee:	d1 f7       	brne	.-12     	; 0x41e4 <halWait>
    41f0:	08 95       	ret

000041f2 <read_eeprom_current_image_checksum>:
#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)
    41f2:	fc 01       	movw	r30, r24

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    41f4:	a7 e0       	ldi	r26, 0x07	; 7
    41f6:	b0 e0       	ldi	r27, 0x00	; 0
    41f8:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__eeprom_read_byte_1F2021>
    41fc:	80 2d       	mov	r24, r0

    41fe:	80 83       	st	Z, r24
// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	08 95       	ret

00004206 <write_eeprom_current_image_checksum>:
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    4206:	fc 01       	movw	r30, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    4208:	80 81       	ld	r24, Z
    420a:	a7 e0       	ldi	r26, 0x07	; 7
    420c:	b0 e0       	ldi	r27, 0x00	; 0
    420e:	08 2e       	mov	r0, r24
    4210:	0e 94 b8 3a 	call	0x7570	; 0x7570 <__eeprom_write_byte_1F2021>
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	08 95       	ret

0000421a <nrk_eeprom_read_byte>:

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    421a:	dc 01       	movw	r26, r24
    421c:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__eeprom_read_byte_1F2021>
    4220:	80 2d       	mov	r24, r0
*
*  This is the Open Source Version of Nano-RK included as part of a Dual
*  Licensing Model. If you are unsure which license to use please refer to:
*  http://www.nanork.org/nano-RK/wiki/Licensing
*
*  This program is free software: you can redistribute it and/or modify
    4222:	99 27       	eor	r25, r25
    4224:	08 95       	ret

00004226 <read_eeprom_mac_address>:
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
    4226:	fc 01       	movw	r30, r24
    4228:	a0 e0       	ldi	r26, 0x00	; 0
    422a:	b0 e0       	ldi	r27, 0x00	; 0
    422c:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__eeprom_read_byte_1F2021>
    4230:	40 2d       	mov	r20, r0
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*  Contributing Authors (specific to this file):
*  Anthony Rowe
    4232:	43 83       	std	Z+3, r20	; 0x03
    4234:	a1 e0       	ldi	r26, 0x01	; 1
    4236:	b0 e0       	ldi	r27, 0x00	; 0
    4238:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__eeprom_read_byte_1F2021>
    423c:	80 2d       	mov	r24, r0
*  Zane Starr
    423e:	82 83       	std	Z+2, r24	; 0x02
    4240:	a2 e0       	ldi	r26, 0x02	; 2
    4242:	b0 e0       	ldi	r27, 0x00	; 0
    4244:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__eeprom_read_byte_1F2021>
    4248:	30 2d       	mov	r19, r0
*******************************************************************************/
    424a:	31 83       	std	Z+1, r19	; 0x01
    424c:	a3 e0       	ldi	r26, 0x03	; 3
    424e:	b0 e0       	ldi	r27, 0x00	; 0
    4250:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__eeprom_read_byte_1F2021>
    4254:	90 2d       	mov	r25, r0

    4256:	90 83       	st	Z, r25
    4258:	a4 e0       	ldi	r26, 0x04	; 4
    425a:	b0 e0       	ldi	r27, 0x00	; 0
    425c:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__eeprom_read_byte_1F2021>
    4260:	20 2d       	mov	r18, r0

#include <nrk_driver_list.h>
#include <nrk_driver.h>
    4262:	83 0f       	add	r24, r19
#include <ff_basic_sensor.h>
    4264:	84 0f       	add	r24, r20
#include <include.h>
#include <stdio.h>
    4266:	89 0f       	add	r24, r25
    4268:	28 17       	cp	r18, r24
    426a:	19 f4       	brne	.+6      	; 0x4272 <read_eeprom_mac_address+0x4c>
    426c:	81 e0       	ldi	r24, 0x01	; 1
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	08 95       	ret
    4272:	8f ef       	ldi	r24, 0xFF	; 255
    4274:	9f ef       	ldi	r25, 0xFF	; 255
#include <ulib.h>
#include <nrk_error.h>
#include <nrk.h>
    4276:	08 95       	ret

00004278 <read_eeprom_channel>:
#include <stdint.h>
#include <basic_rf.h>
#include <nrk_timer.h>
    4278:	fc 01       	movw	r30, r24
    427a:	a5 e0       	ldi	r26, 0x05	; 5
    427c:	b0 e0       	ldi	r27, 0x00	; 0
    427e:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__eeprom_read_byte_1F2021>
    4282:	80 2d       	mov	r24, r0

    4284:	80 83       	st	Z, r24
#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200
    4286:	81 e0       	ldi	r24, 0x01	; 1
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	08 95       	ret

0000428c <read_eeprom_load_img_pages>:

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
    428c:	fc 01       	movw	r30, r24
    428e:	a6 e0       	ldi	r26, 0x06	; 6
    4290:	b0 e0       	ldi	r27, 0x00	; 0
    4292:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__eeprom_read_byte_1F2021>
    4296:	80 2d       	mov	r24, r0
} while (0)
    4298:	80 83       	st	Z, r24

#define ADC_VREF_VCC() \
    429a:	81 e0       	ldi	r24, 0x01	; 1
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	08 95       	ret

000042a0 <read_eeprom_aes_key>:
   do { \
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
    42a0:	ac 01       	movw	r20, r24
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	d9 01       	movw	r26, r18
    42a8:	18 96       	adiw	r26, 0x08	; 8
    42aa:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__eeprom_read_byte_1F2021>
    42ae:	80 2d       	mov	r24, r0
} while(0)


    42b0:	fa 01       	movw	r30, r20
    42b2:	e2 0f       	add	r30, r18
    42b4:	f3 1f       	adc	r31, r19
    42b6:	80 83       	st	Z, r24
    42b8:	2f 5f       	subi	r18, 0xFF	; 255
    42ba:	3f 4f       	sbci	r19, 0xFF	; 255
#define ADC_VREF_VCC() \
   do { \
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)

    42bc:	20 31       	cpi	r18, 0x10	; 16
    42be:	31 05       	cpc	r19, r1
    42c0:	91 f7       	brne	.-28     	; 0x42a6 <read_eeprom_aes_key+0x6>

#define ADC_VREF_1_1() \
   do { \
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	08 95       	ret

000042c8 <nrk_eeprom_write_byte>:
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    42c8:	dc 01       	movw	r26, r24
    42ca:	06 2e       	mov	r0, r22
    42cc:	0e 94 b8 3a 	call	0x7570	; 0x7570 <__eeprom_write_byte_1F2021>
    42d0:	08 95       	ret

000042d2 <write_eeprom_load_img_pages>:

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;
    42d2:	fc 01       	movw	r30, r24
    42d4:	80 81       	ld	r24, Z
    42d6:	a6 e0       	ldi	r26, 0x06	; 6
    42d8:	b0 e0       	ldi	r27, 0x00	; 0
    42da:	08 2e       	mov	r0, r24
    42dc:	0e 94 b8 3a 	call	0x7570	; 0x7570 <__eeprom_write_byte_1F2021>

// VREF is set to VCC by default
#define ADC_INIT() \
    42e0:	81 e0       	ldi	r24, 0x01	; 1
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	08 95       	ret

000042e6 <write_eeprom_aes_key>:

#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)
    42e6:	ac 01       	movw	r20, r24
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	d9 01       	movw	r26, r18
    42ee:	18 96       	adiw	r26, 0x08	; 8
    42f0:	fa 01       	movw	r30, r20
    42f2:	e2 0f       	add	r30, r18
    42f4:	f3 1f       	adc	r31, r19
    42f6:	80 81       	ld	r24, Z
    42f8:	08 2e       	mov	r0, r24
    42fa:	0e 94 b8 3a 	call	0x7570	; 0x7570 <__eeprom_write_byte_1F2021>
    42fe:	2f 5f       	subi	r18, 0xFF	; 255
    4300:	3f 4f       	sbci	r19, 0xFF	; 255


    4302:	20 31       	cpi	r18, 0x10	; 16
    4304:	31 05       	cpc	r19, r1
    4306:	91 f7       	brne	.-28     	; 0x42ec <write_eeprom_aes_key+0x6>
#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	08 95       	ret

0000430e <nrk_int_disable>:

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    430e:	f8 94       	cli
    4310:	08 95       	ret

00004312 <nrk_int_enable>:
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)
    4312:	78 94       	sei
    4314:	08 95       	ret

00004316 <nrk_version>:
}



void init_adc()
{
    4316:	85 e6       	ldi	r24, 0x65	; 101
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	08 95       	ret

0000431c <_nrk_timer_tick>:
  {
  val=get_adc_val();
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
  if(val<330) val=330;
  }
    431c:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <_nrk_scheduler>
    4320:	08 95       	ret

00004322 <nrk_TCB_init>:
			  }
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
    4322:	ef 92       	push	r14
    4324:	ff 92       	push	r15
    4326:	0f 93       	push	r16
    4328:	1f 93       	push	r17
    432a:	cf 93       	push	r28
    432c:	df 93       	push	r29
    432e:	ec 01       	movw	r28, r24
    4330:	8b 01       	movw	r16, r22
    4332:	7a 01       	movw	r14, r20
	}
}

    4334:	89 85       	ldd	r24, Y+9	; 0x09
    4336:	82 30       	cpi	r24, 0x02	; 2
    4338:	21 f0       	breq	.+8      	; 0x4342 <nrk_TCB_init+0x20>

    433a:	80 91 28 0a 	lds	r24, 0x0A28
    433e:	88 83       	st	Y, r24
    4340:	01 c0       	rjmp	.+2      	; 0x4344 <nrk_TCB_init+0x22>
// read_voltage_status()
    4342:	18 82       	st	Y, r1
//
// This function sets different voltage threshold levels on
    4344:	80 91 28 0a 	lds	r24, 0x0A28
    4348:	85 30       	cpi	r24, 0x05	; 5
    434a:	20 f0       	brcs	.+8      	; 0x4354 <nrk_TCB_init+0x32>
    434c:	60 e0       	ldi	r22, 0x00	; 0
    434e:	87 e0       	ldi	r24, 0x07	; 7
    4350:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
// the cc2420 chip to search for the voltage.
    4354:	89 85       	ldd	r24, Y+9	; 0x09
    4356:	82 30       	cpi	r24, 0x02	; 2
    4358:	29 f0       	breq	.+10     	; 0x4364 <nrk_TCB_init+0x42>
    435a:	80 91 28 0a 	lds	r24, 0x0A28
    435e:	8f 5f       	subi	r24, 0xFF	; 255
    4360:	80 93 28 0a 	sts	0x0A28, r24
// If the voltage is above 3.3 volts, then the ADC reads
    4364:	80 91 28 0a 	lds	r24, 0x0A28
    4368:	88 23       	and	r24, r24
    436a:	19 f4       	brne	.+6      	; 0x4372 <nrk_TCB_init+0x50>
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	80 93 28 0a 	sts	0x0A28, r24
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
    4372:	88 81       	ld	r24, Y
    4374:	99 27       	eor	r25, r25
    4376:	87 fd       	sbrc	r24, 7
    4378:	90 95       	com	r25
    437a:	fc 01       	movw	r30, r24
    437c:	45 e0       	ldi	r20, 0x05	; 5
    437e:	ee 0f       	add	r30, r30
    4380:	ff 1f       	adc	r31, r31
    4382:	4a 95       	dec	r20
    4384:	e1 f7       	brne	.-8      	; 0x437e <nrk_TCB_init+0x5c>
    4386:	e8 0f       	add	r30, r24
    4388:	f9 1f       	adc	r31, r25
    438a:	ee 58       	subi	r30, 0x8E	; 142
    438c:	f6 4f       	sbci	r31, 0xF6	; 246
    438e:	11 83       	std	Z+1, r17	; 0x01
    4390:	00 83       	st	Z, r16
uint16_t read_voltage_status()
    4392:	88 81       	ld	r24, Y
    4394:	99 27       	eor	r25, r25
    4396:	87 fd       	sbrc	r24, 7
    4398:	90 95       	com	r25
    439a:	fc 01       	movw	r30, r24
    439c:	35 e0       	ldi	r19, 0x05	; 5
    439e:	ee 0f       	add	r30, r30
    43a0:	ff 1f       	adc	r31, r31
    43a2:	3a 95       	dec	r19
    43a4:	e1 f7       	brne	.-8      	; 0x439e <nrk_TCB_init+0x7c>
    43a6:	e8 0f       	add	r30, r24
    43a8:	f9 1f       	adc	r31, r25
    43aa:	ee 58       	subi	r30, 0x8E	; 142
    43ac:	f6 4f       	sbci	r31, 0xF6	; 246
    43ae:	88 85       	ldd	r24, Y+8	; 0x08
    43b0:	82 87       	std	Z+10, r24	; 0x0a
{
    43b2:	88 81       	ld	r24, Y
    43b4:	99 27       	eor	r25, r25
    43b6:	87 fd       	sbrc	r24, 7
    43b8:	90 95       	com	r25
    43ba:	fc 01       	movw	r30, r24
    43bc:	25 e0       	ldi	r18, 0x05	; 5
    43be:	ee 0f       	add	r30, r30
    43c0:	ff 1f       	adc	r31, r31
    43c2:	2a 95       	dec	r18
    43c4:	e1 f7       	brne	.-8      	; 0x43be <nrk_TCB_init+0x9c>
    43c6:	e8 0f       	add	r30, r24
    43c8:	f9 1f       	adc	r31, r25
    43ca:	ee 58       	subi	r30, 0x8E	; 142
    43cc:	f6 4f       	sbci	r31, 0xF6	; 246
    43ce:	83 e0       	ldi	r24, 0x03	; 3
    43d0:	81 87       	std	Z+9, r24	; 0x09
volatile uint16_t val;
uint8_t check,level;
    43d2:	28 81       	ld	r18, Y
    43d4:	82 2f       	mov	r24, r18
    43d6:	99 27       	eor	r25, r25
    43d8:	87 fd       	sbrc	r24, 7
    43da:	90 95       	com	r25
    43dc:	fc 01       	movw	r30, r24
    43de:	05 e0       	ldi	r16, 0x05	; 5
    43e0:	ee 0f       	add	r30, r30
    43e2:	ff 1f       	adc	r31, r31
    43e4:	0a 95       	dec	r16
    43e6:	e1 f7       	brne	.-8      	; 0x43e0 <nrk_TCB_init+0xbe>
    43e8:	e8 0f       	add	r30, r24
    43ea:	f9 1f       	adc	r31, r25
    43ec:	ee 58       	subi	r30, 0x8E	; 142
    43ee:	f6 4f       	sbci	r31, 0xF6	; 246
    43f0:	20 87       	std	Z+8, r18	; 0x08
nrk_sem_t *radio_sem;
    43f2:	88 81       	ld	r24, Y
    43f4:	99 27       	eor	r25, r25
    43f6:	87 fd       	sbrc	r24, 7
    43f8:	90 95       	com	r25
    43fa:	fc 01       	movw	r30, r24
    43fc:	15 e0       	ldi	r17, 0x05	; 5
    43fe:	ee 0f       	add	r30, r30
    4400:	ff 1f       	adc	r31, r31
    4402:	1a 95       	dec	r17
    4404:	e1 f7       	brne	.-8      	; 0x43fe <nrk_TCB_init+0xdc>
    4406:	e8 0f       	add	r30, r24
    4408:	f9 1f       	adc	r31, r25
    440a:	ee 58       	subi	r30, 0x8E	; 142
    440c:	f6 4f       	sbci	r31, 0xF6	; 246
    440e:	15 82       	std	Z+5, r1	; 0x05

    4410:	08 81       	ld	r16, Y
    4412:	11 27       	eor	r17, r17
    4414:	07 fd       	sbrc	r16, 7
    4416:	10 95       	com	r17
    4418:	2b 85       	ldd	r18, Y+11	; 0x0b
    441a:	3c 85       	ldd	r19, Y+12	; 0x0c
    441c:	4d 85       	ldd	r20, Y+13	; 0x0d
    441e:	5e 85       	ldd	r21, Y+14	; 0x0e
    4420:	6f 85       	ldd	r22, Y+15	; 0x0f
    4422:	78 89       	ldd	r23, Y+16	; 0x10
    4424:	89 89       	ldd	r24, Y+17	; 0x11
    4426:	9a 89       	ldd	r25, Y+18	; 0x12
    4428:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <_nrk_time_to_ticks>
    442c:	f8 01       	movw	r30, r16
    442e:	b5 e0       	ldi	r27, 0x05	; 5
    4430:	ee 0f       	add	r30, r30
    4432:	ff 1f       	adc	r31, r31
    4434:	ba 95       	dec	r27
    4436:	e1 f7       	brne	.-8      	; 0x4430 <nrk_TCB_init+0x10e>
    4438:	e0 0f       	add	r30, r16
    443a:	f1 1f       	adc	r31, r17
    443c:	ee 58       	subi	r30, 0x8E	; 142
    443e:	f6 4f       	sbci	r31, 0xF6	; 246
    4440:	94 8f       	std	Z+28, r25	; 0x1c
    4442:	83 8f       	std	Z+27, r24	; 0x1b
radio_sem= rf_get_sem();
    4444:	08 81       	ld	r16, Y
    4446:	11 27       	eor	r17, r17
    4448:	07 fd       	sbrc	r16, 7
    444a:	10 95       	com	r17
    444c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    444e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4450:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4452:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4454:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4456:	78 a1       	ldd	r23, Y+32	; 0x20
    4458:	89 a1       	ldd	r24, Y+33	; 0x21
    445a:	9a a1       	ldd	r25, Y+34	; 0x22
    445c:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <_nrk_time_to_ticks>
    4460:	f8 01       	movw	r30, r16
    4462:	a5 e0       	ldi	r26, 0x05	; 5
    4464:	ee 0f       	add	r30, r30
    4466:	ff 1f       	adc	r31, r31
    4468:	aa 95       	dec	r26
    446a:	e1 f7       	brne	.-8      	; 0x4464 <nrk_TCB_init+0x142>
    446c:	e0 0f       	add	r30, r16
    446e:	f1 1f       	adc	r31, r17
    4470:	ee 58       	subi	r30, 0x8E	; 142
    4472:	f6 4f       	sbci	r31, 0xF6	; 246
    4474:	96 8b       	std	Z+22, r25	; 0x16
    4476:	85 8b       	std	Z+21, r24	; 0x15

    4478:	88 81       	ld	r24, Y
    447a:	99 27       	eor	r25, r25
    447c:	87 fd       	sbrc	r24, 7
    447e:	90 95       	com	r25
    4480:	fc 01       	movw	r30, r24
    4482:	75 e0       	ldi	r23, 0x05	; 5
    4484:	ee 0f       	add	r30, r30
    4486:	ff 1f       	adc	r31, r31
    4488:	7a 95       	dec	r23
    448a:	e1 f7       	brne	.-8      	; 0x4484 <nrk_TCB_init+0x162>
    448c:	e8 0f       	add	r30, r24
    448e:	f9 1f       	adc	r31, r25
    4490:	ee 58       	subi	r30, 0x8E	; 142
    4492:	f6 4f       	sbci	r31, 0xF6	; 246
    4494:	85 89       	ldd	r24, Z+21	; 0x15
    4496:	96 89       	ldd	r25, Z+22	; 0x16
    4498:	23 8d       	ldd	r18, Z+27	; 0x1b
    449a:	34 8d       	ldd	r19, Z+28	; 0x1c
    449c:	82 0f       	add	r24, r18
    449e:	93 1f       	adc	r25, r19
    44a0:	90 8f       	std	Z+24, r25	; 0x18
    44a2:	87 8b       	std	Z+23, r24	; 0x17
// if semaphore not created, then assume you own the radio 
    44a4:	08 81       	ld	r16, Y
    44a6:	11 27       	eor	r17, r17
    44a8:	07 fd       	sbrc	r16, 7
    44aa:	10 95       	com	r17
    44ac:	2b 89       	ldd	r18, Y+19	; 0x13
    44ae:	3c 89       	ldd	r19, Y+20	; 0x14
    44b0:	4d 89       	ldd	r20, Y+21	; 0x15
    44b2:	5e 89       	ldd	r21, Y+22	; 0x16
    44b4:	6f 89       	ldd	r22, Y+23	; 0x17
    44b6:	78 8d       	ldd	r23, Y+24	; 0x18
    44b8:	89 8d       	ldd	r24, Y+25	; 0x19
    44ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    44bc:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <_nrk_time_to_ticks>
    44c0:	f8 01       	movw	r30, r16
    44c2:	65 e0       	ldi	r22, 0x05	; 5
    44c4:	ee 0f       	add	r30, r30
    44c6:	ff 1f       	adc	r31, r31
    44c8:	6a 95       	dec	r22
    44ca:	e1 f7       	brne	.-8      	; 0x44c4 <nrk_TCB_init+0x1a2>
    44cc:	e0 0f       	add	r30, r16
    44ce:	f1 1f       	adc	r31, r17
    44d0:	ee 58       	subi	r30, 0x8E	; 142
    44d2:	f6 4f       	sbci	r31, 0xF6	; 246
    44d4:	96 8f       	std	Z+30, r25	; 0x1e
    44d6:	85 8f       	std	Z+29, r24	; 0x1d
if(radio_sem!=NULL)
    44d8:	88 81       	ld	r24, Y
    44da:	99 27       	eor	r25, r25
    44dc:	87 fd       	sbrc	r24, 7
    44de:	90 95       	com	r25
    44e0:	fc 01       	movw	r30, r24
    44e2:	55 e0       	ldi	r21, 0x05	; 5
    44e4:	ee 0f       	add	r30, r30
    44e6:	ff 1f       	adc	r31, r31
    44e8:	5a 95       	dec	r21
    44ea:	e1 f7       	brne	.-8      	; 0x44e4 <nrk_TCB_init+0x1c2>
    44ec:	e8 0f       	add	r30, r24
    44ee:	f9 1f       	adc	r31, r25
    44f0:	ee 58       	subi	r30, 0x8E	; 142
    44f2:	f6 4f       	sbci	r31, 0xF6	; 246
    44f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    44f6:	96 8d       	ldd	r25, Z+30	; 0x1e
    44f8:	92 8f       	std	Z+26, r25	; 0x1a
    44fa:	81 8f       	std	Z+25, r24	; 0x19
 nrk_sem_pend (radio_sem);
    44fc:	88 81       	ld	r24, Y
    44fe:	99 27       	eor	r25, r25
    4500:	87 fd       	sbrc	r24, 7
    4502:	90 95       	com	r25
    4504:	fc 01       	movw	r30, r24
    4506:	45 e0       	ldi	r20, 0x05	; 5
    4508:	ee 0f       	add	r30, r30
    450a:	ff 1f       	adc	r31, r31
    450c:	4a 95       	dec	r20
    450e:	e1 f7       	brne	.-8      	; 0x4508 <nrk_TCB_init+0x1e6>
    4510:	e8 0f       	add	r30, r24
    4512:	f9 1f       	adc	r31, r25
    4514:	ee 58       	subi	r30, 0x8E	; 142
    4516:	f6 4f       	sbci	r31, 0xF6	; 246
    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	90 a3       	std	Z+32, r25	; 0x20
    451e:	87 8f       	std	Z+31, r24	; 0x1f

    4520:	88 81       	ld	r24, Y
    4522:	99 27       	eor	r25, r25
    4524:	87 fd       	sbrc	r24, 7
    4526:	90 95       	com	r25
    4528:	fc 01       	movw	r30, r24
    452a:	35 e0       	ldi	r19, 0x05	; 5
    452c:	ee 0f       	add	r30, r30
    452e:	ff 1f       	adc	r31, r31
    4530:	3a 95       	dec	r19
    4532:	e1 f7       	brne	.-8      	; 0x452c <nrk_TCB_init+0x20a>
    4534:	e8 0f       	add	r30, r24
    4536:	f9 1f       	adc	r31, r25
    4538:	ee 58       	subi	r30, 0x8E	; 142
    453a:	f6 4f       	sbci	r31, 0xF6	; 246
    453c:	f3 82       	std	Z+3, r15	; 0x03
    453e:	e2 82       	std	Z+2, r14	; 0x02
    // activate cc2420 vreg
    4540:	88 81       	ld	r24, Y
    4542:	99 27       	eor	r25, r25
    4544:	87 fd       	sbrc	r24, 7
    4546:	90 95       	com	r25
    4548:	fc 01       	movw	r30, r24
    454a:	25 e0       	ldi	r18, 0x05	; 5
    454c:	ee 0f       	add	r30, r30
    454e:	ff 1f       	adc	r31, r31
    4550:	2a 95       	dec	r18
    4552:	e1 f7       	brne	.-8      	; 0x454c <nrk_TCB_init+0x22a>
    4554:	e8 0f       	add	r30, r24
    4556:	f9 1f       	adc	r31, r25
    4558:	ee 58       	subi	r30, 0x8E	; 142
    455a:	f6 4f       	sbci	r31, 0xF6	; 246
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	84 87       	std	Z+12, r24	; 0x0c

level=0;
while(level<0x1F)
{
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	df 91       	pop	r29
    4566:	cf 91       	pop	r28
    4568:	1f 91       	pop	r17
    456a:	0f 91       	pop	r16
    456c:	ff 90       	pop	r15
    456e:	ef 90       	pop	r14
    4570:	08 95       	ret

00004572 <nrk_start>:
				}
			 	val=max-min;	
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
    4572:	8f 92       	push	r8
    4574:	9f 92       	push	r9
    4576:	af 92       	push	r10
    4578:	bf 92       	push	r11
    457a:	cf 92       	push	r12
    457c:	df 92       	push	r13
    457e:	ef 92       	push	r14
    4580:	ff 92       	push	r15
    4582:	0f 93       	push	r16
    4584:	1f 93       	push	r17
    4586:	cf 93       	push	r28
    4588:	df 93       	push	r29
    458a:	6a e7       	ldi	r22, 0x7A	; 122
    458c:	a6 2e       	mov	r10, r22
    458e:	69 e0       	ldi	r22, 0x09	; 9
    4590:	b6 2e       	mov	r11, r22
    4592:	cc 24       	eor	r12, r12
    4594:	dd 24       	eor	r13, r13
			
		      count++;
                      return count;

             case CLOSE:
			// Turn off sensor power
    4596:	45 01       	movw	r8, r10
				}
			 	val=max-min;	
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
    4598:	ec 2c       	mov	r14, r12

			}
			
		      count++;
                      return count;

    459a:	f5 01       	movw	r30, r10
    459c:	f0 80       	ld	r15, Z
             case CLOSE:
			// Turn off sensor power
    459e:	ff ef       	ldi	r31, 0xFF	; 255
    45a0:	ff 16       	cp	r15, r31
    45a2:	91 f0       	breq	.+36     	; 0x45c8 <nrk_start+0x56>
    45a4:	e4 01       	movw	r28, r8
    45a6:	00 e0       	ldi	r16, 0x00	; 0
    45a8:	10 e0       	ldi	r17, 0x00	; 0
			PORTF |= PWR_CTRL_MASK;
		    	is_open=0; 
                        return NRK_OK;
             
    45aa:	e0 16       	cp	r14, r16
    45ac:	39 f0       	breq	.+14     	; 0x45bc <nrk_start+0x4a>
    45ae:	88 81       	ld	r24, Y
    45b0:	f8 16       	cp	r15, r24
    45b2:	21 f4       	brne	.+8      	; 0x45bc <nrk_start+0x4a>
	     case GET_STATUS:
	     		// use "key" here 
    45b4:	6f 2d       	mov	r22, r15
    45b6:	85 e0       	ldi	r24, 0x05	; 5
    45b8:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
    45bc:	0f 5f       	subi	r16, 0xFF	; 255
    45be:	1f 4f       	sbci	r17, 0xFF	; 255
    45c0:	a1 96       	adiw	r28, 0x21	; 33
                      return count;

             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
		    	is_open=0; 
    45c2:	05 30       	cpi	r16, 0x05	; 5
    45c4:	11 05       	cpc	r17, r1
    45c6:	89 f7       	brne	.-30     	; 0x45aa <nrk_start+0x38>
    45c8:	08 94       	sec
    45ca:	c1 1c       	adc	r12, r1
    45cc:	d1 1c       	adc	r13, r1
    45ce:	81 e2       	ldi	r24, 0x21	; 33
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	a8 0e       	add	r10, r24
    45d4:	b9 1e       	adc	r11, r25
			      		buffer[count]=(val>>2)  & 0xFF;
				}

			}
			
		      count++;
    45d6:	95 e0       	ldi	r25, 0x05	; 5
    45d8:	c9 16       	cp	r12, r25
    45da:	d1 04       	cpc	r13, r1
    45dc:	e9 f6       	brne	.-70     	; 0x4598 <nrk_start+0x26>
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
			{
			// Set to audio channel if it is an average value
    45de:	0e 94 97 28 	call	0x512e	; 0x512e <nrk_get_high_ready_task_ID>
			if(value==AUDIO_P2P) 
    45e2:	28 2f       	mov	r18, r24
    45e4:	33 27       	eor	r19, r19
    45e6:	27 fd       	sbrc	r18, 7
    45e8:	30 95       	com	r19
    45ea:	f9 01       	movw	r30, r18
    45ec:	55 e0       	ldi	r21, 0x05	; 5
    45ee:	ee 0f       	add	r30, r30
    45f0:	ff 1f       	adc	r31, r31
    45f2:	5a 95       	dec	r21
    45f4:	e1 f7       	brne	.-8      	; 0x45ee <nrk_start+0x7c>
    45f6:	e2 0f       	add	r30, r18
    45f8:	f3 1f       	adc	r31, r19
    45fa:	ee 58       	subi	r30, 0x8E	; 142
    45fc:	f6 4f       	sbci	r31, 0xF6	; 246
    45fe:	32 85       	ldd	r19, Z+10	; 0x0a
    4600:	30 93 3b 0a 	sts	0x0A3B, r19
			  {
    4604:	21 e2       	ldi	r18, 0x21	; 33
    4606:	82 02       	muls	r24, r18
    4608:	c0 01       	movw	r24, r0
    460a:	11 24       	eor	r1, r1
    460c:	8e 58       	subi	r24, 0x8E	; 142
    460e:	96 4f       	sbci	r25, 0xF6	; 246
    4610:	90 93 3a 0a 	sts	0x0A3A, r25
    4614:	80 93 39 0a 	sts	0x0A39, r24
    4618:	90 93 2b 0a 	sts	0x0A2B, r25
    461c:	80 93 2a 0a 	sts	0x0A2A, r24
				channel=value;
    4620:	30 93 2c 0a 	sts	0x0A2C, r19
					return NRK_ERROR;
				}
				channel=value;
				if(channel==LIGHT)
				   ADC_VREF_VCC();	
				else
    4624:	0e 94 cf 35 	call	0x6b9e	; 0x6b9e <nrk_target_start>
				   ADC_VREF_2_56();	
    4628:	0e 94 b5 35 	call	0x6b6a	; 0x6b6a <nrk_stack_pointer_init>
				ADC_SET_CHANNEL (channel);
    462c:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <nrk_start_high_ready_task>
    4630:	ff cf       	rjmp	.-2      	; 0x4630 <nrk_start+0xbe>

00004632 <nrk_init>:

#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

    4632:	0f 93       	push	r16
    4634:	1f 93       	push	r17
    4636:	cf 93       	push	r28
    4638:	df 93       	push	r29
    463a:	cd b7       	in	r28, 0x3d	; 61
    463c:	de b7       	in	r29, 0x3e	; 62
    463e:	a3 97       	sbiw	r28, 0x23	; 35
    4640:	0f b6       	in	r0, 0x3f	; 63
    4642:	f8 94       	cli
    4644:	de bf       	out	0x3e, r29	; 62
    4646:	0f be       	out	0x3f, r0	; 63
    4648:	cd bf       	out	0x3d, r28	; 61
#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

    464a:	0e 94 75 25 	call	0x4aea	; 0x4aea <nrk_signal_create>
    464e:	80 93 29 0a 	sts	0x0A29, r24
#define ADC_SAMPLE_SINGLE() \
    4652:	8f 3f       	cpi	r24, 0xFF	; 255
    4654:	21 f4       	brne	.+8      	; 0x465e <nrk_init+0x2c>
    4656:	60 e0       	ldi	r22, 0x00	; 0
    4658:	8e e0       	ldi	r24, 0x0E	; 14
    465a:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
    465e:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <_nrk_startup_ok>
    4662:	88 23       	and	r24, r24
    4664:	21 f4       	brne	.+8      	; 0x466e <nrk_init+0x3c>
    4666:	60 e0       	ldi	r22, 0x00	; 0
    4668:	86 e0       	ldi	r24, 0x06	; 6
    466a:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
    466e:	10 92 2c 0a 	sts	0x0A2C, r1
		    }
    4672:	10 92 3a 0a 	sts	0x0A3A, r1
    4676:	10 92 39 0a 	sts	0x0A39, r1
		    if(opt&WRITE_FLAG)
		    {
    467a:	10 92 2b 0a 	sts	0x0A2B, r1
    467e:	10 92 2a 0a 	sts	0x0A2A, r1
		    	return NRK_ERROR;
    4682:	10 92 3b 0a 	sts	0x0A3B, r1
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
		    else return NRK_OK;
		
	    

    4686:	10 92 38 0a 	sts	0x0A38, r1
    468a:	e9 e1       	ldi	r30, 0x19	; 25
    468c:	fa e0       	ldi	r31, 0x0A	; 10
             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
    468e:	8f ef       	ldi	r24, 0xFF	; 255
    4690:	80 83       	st	Z, r24
			{
    4692:	82 83       	std	Z+2, r24	; 0x02
			      /* Conversion to 8-bit value*/
    4694:	81 83       	std	Z+1, r24	; 0x01
    4696:	33 96       	adiw	r30, 0x03	; 3
		    else return NRK_OK;
		
	    

             case READ:
	     	      count=0;
    4698:	2a e0       	ldi	r18, 0x0A	; 10
    469a:	e8 32       	cpi	r30, 0x28	; 40
    469c:	f2 07       	cpc	r31, r18
    469e:	b9 f7       	brne	.-18     	; 0x468e <nrk_init+0x5c>
    46a0:	e2 e7       	ldi	r30, 0x72	; 114
    46a2:	f9 e0       	ldi	r31, 0x09	; 9
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}
    46a4:	83 e6       	ldi	r24, 0x63	; 99
    46a6:	82 87       	std	Z+10, r24	; 0x0a

    46a8:	8f ef       	ldi	r24, 0xFF	; 255
    46aa:	80 87       	std	Z+8, r24	; 0x08
    46ac:	b1 96       	adiw	r30, 0x21	; 33
			      uint16_t val=get_adc_val();

				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
    46ae:	8a e0       	ldi	r24, 0x0A	; 10
    46b0:	e7 31       	cpi	r30, 0x17	; 23
    46b2:	f8 07       	cpc	r31, r24
    46b4:	b9 f7       	brne	.-18     	; 0x46a4 <nrk_init+0x72>
    46b6:	ec e3       	ldi	r30, 0x3C	; 60
    46b8:	fa e0       	ldi	r31, 0x0A	; 10
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}


			} else if(channel==BAT)
    46ba:	cf 01       	movw	r24, r30
    46bc:	05 96       	adiw	r24, 0x05	; 5
    46be:	94 83       	std	Z+4, r25	; 0x04
    46c0:	83 83       	std	Z+3, r24	; 0x03
			{
    46c2:	f7 83       	std	Z+7, r31	; 0x07
    46c4:	e6 83       	std	Z+6, r30	; 0x06
    46c6:	fc 01       	movw	r30, r24

				if(size==1)
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}

    46c8:	2a e0       	ldi	r18, 0x0A	; 10
    46ca:	85 35       	cpi	r24, 0x55	; 85
    46cc:	92 07       	cpc	r25, r18
    46ce:	a9 f7       	brne	.-22     	; 0x46ba <nrk_init+0x88>

			} else if(channel==BAT)
			{
			uint16_t tmp;
			tmp=read_voltage_status();
			if(size==2)
    46d0:	10 92 3e 0a 	sts	0x0A3E, r1
    46d4:	10 92 3d 0a 	sts	0x0A3D, r1
				{
    46d8:	10 92 59 0a 	sts	0x0A59, r1
    46dc:	10 92 58 0a 	sts	0x0A58, r1
					buffer[count]=tmp & 0xFF;
    46e0:	10 92 2f 0a 	sts	0x0A2F, r1
    46e4:	10 92 2e 0a 	sts	0x0A2E, r1
					count++;
    46e8:	49 97       	sbiw	r24, 0x19	; 25
    46ea:	90 93 71 09 	sts	0x0971, r25
    46ee:	80 93 70 09 	sts	0x0970, r24
					buffer[count]=(tmp>>8) & 0xFF;
				}
			if(size==1)
				{
					buffer[count]=(tmp>>2) & 0xFF;
    46f2:	66 eb       	ldi	r22, 0xB6	; 182
    46f4:	7e e2       	ldi	r23, 0x2E	; 46
    46f6:	8e 01       	movw	r16, r28
    46f8:	0f 5f       	subi	r16, 0xFF	; 255
    46fa:	1f 4f       	sbci	r17, 0xFF	; 255
    46fc:	c8 01       	movw	r24, r16
    46fe:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <nrk_task_set_entry_function>
				}
    4702:	40 e8       	ldi	r20, 0x80	; 128
    4704:	50 e0       	ldi	r21, 0x00	; 0
    4706:	6c ec       	ldi	r22, 0xCC	; 204
    4708:	77 e0       	ldi	r23, 0x07	; 7
    470a:	c8 01       	movw	r24, r16
    470c:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <nrk_task_set_stk>
			}else if(channel==AUDIO_P2P)
    4710:	85 e5       	ldi	r24, 0x55	; 85
    4712:	80 93 cc 07 	sts	0x07CC, r24
			{
  			/* Conversion to 8-bit value*/
    4716:	19 86       	std	Y+9, r1	; 0x09
			      //uint16_t val=get_adc_val();
    4718:	1c 8e       	std	Y+28, r1	; 0x1c
    471a:	1d 8e       	std	Y+29, r1	; 0x1d
    471c:	1e 8e       	std	Y+30, r1	; 0x1e
    471e:	1f 8e       	std	Y+31, r1	; 0x1f
			      uint16_t val,min, max;
    4720:	18 a2       	std	Y+32, r1	; 0x20
    4722:	19 a2       	std	Y+33, r1	; 0x21
    4724:	1a a2       	std	Y+34, r1	; 0x22
    4726:	1b a2       	std	Y+35, r1	; 0x23
			      uint8_t i;
    4728:	91 e0       	ldi	r25, 0x01	; 1
    472a:	98 87       	std	Y+8, r25	; 0x08
				max=0;
    472c:	82 e0       	ldi	r24, 0x02	; 2
    472e:	8a 87       	std	Y+10, r24	; 0x0a
			        min=1025;
    4730:	9b 87       	std	Y+11, r25	; 0x0b
			      for(i=0; i<64; i++ )
    4732:	c8 01       	movw	r24, r16
    4734:	0e 94 80 2b 	call	0x5700	; 0x5700 <nrk_activate_task>
    4738:	a3 96       	adiw	r28, 0x23	; 35
    473a:	0f b6       	in	r0, 0x3f	; 63
    473c:	f8 94       	cli
    473e:	de bf       	out	0x3e, r29	; 62
    4740:	0f be       	out	0x3f, r0	; 63
    4742:	cd bf       	out	0x3d, r28	; 61
    4744:	df 91       	pop	r29
    4746:	cf 91       	pop	r28
    4748:	1f 91       	pop	r17
    474a:	0f 91       	pop	r16
    474c:	08 95       	ret

0000474e <nrk_halt>:

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    474e:	f8 94       	cli
    4750:	ff cf       	rjmp	.-2      	; 0x4750 <nrk_halt+0x2>

00004752 <_nrk_errno_set>:
#include <stdio.h>
#include <ulib.h>
#include <nrk_error.h>
#include <nrk.h>
#include <stdint.h>
#include <basic_rf.h>
    4752:	e0 91 39 0a 	lds	r30, 0x0A39
    4756:	f0 91 3a 0a 	lds	r31, 0x0A3A
    475a:	84 87       	std	Z+12, r24	; 0x0c
    475c:	08 95       	ret

0000475e <nrk_errno_get>:
#include <nrk_timer.h>

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200
    475e:	e0 91 39 0a 	lds	r30, 0x0A39
    4762:	f0 91 3a 0a 	lds	r31, 0x0A3A
    4766:	84 85       	ldd	r24, Z+12	; 0x0c

uint8_t channel;
    4768:	99 27       	eor	r25, r25
    476a:	08 95       	ret

0000476c <nrk_error_get>:
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)


#define ADC_VREF_2_56() \
    476c:	dc 01       	movw	r26, r24
    476e:	fb 01       	movw	r30, r22
   do { \
    4770:	80 91 bd 07 	lds	r24, 0x07BD
    4774:	88 23       	and	r24, r24
    4776:	19 f4       	brne	.+6      	; 0x477e <nrk_error_get+0x12>
    4778:	80 e0       	ldi	r24, 0x00	; 0
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	08 95       	ret
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)
    477e:	80 83       	st	Z, r24

    4780:	80 91 f2 02 	lds	r24, 0x02F2
    4784:	8c 93       	st	X, r24
    4786:	81 e0       	ldi	r24, 0x01	; 1
    4788:	90 e0       	ldi	r25, 0x00	; 0
#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

    478a:	08 95       	ret

0000478c <nrk_error_print>:
// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)
    478c:	1f 93       	push	r17

#define ADC_SAMPLE_SINGLE() \
    478e:	80 91 bd 07 	lds	r24, 0x07BD
    4792:	88 23       	and	r24, r24
    4794:	09 f4       	brne	.+2      	; 0x4798 <nrk_error_print+0xc>
    4796:	9e c0       	rjmp	.+316    	; 0x48d4 <nrk_error_print+0x148>
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
} while(0)
    4798:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>
// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
do { \
x =  ADCL; \
x |= ADCH << 8; \
} while (0)
    479c:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>
{
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

    47a0:	8c e3       	ldi	r24, 0x3C	; 60
    47a2:	94 e0       	ldi	r25, 0x04	; 4
    47a4:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_kprintf>
     switch(action)
    47a8:	80 91 f2 02 	lds	r24, 0x02F2
    47ac:	99 27       	eor	r25, r25
    47ae:	9f 93       	push	r25
    47b0:	8f 93       	push	r24
    47b2:	8b e7       	ldi	r24, 0x7B	; 123
    47b4:	92 e0       	ldi	r25, 0x02	; 2
    47b6:	9f 93       	push	r25
    47b8:	8f 93       	push	r24
    47ba:	0e 94 17 38 	call	0x702e	; 0x702e <printf>
     {
    47be:	88 e3       	ldi	r24, 0x38	; 56
    47c0:	94 e0       	ldi	r25, 0x04	; 4
    47c2:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_kprintf>
            case INIT: 
    47c6:	0f 90       	pop	r0
    47c8:	0f 90       	pop	r0
    47ca:	0f 90       	pop	r0
    47cc:	0f 90       	pop	r0
    47ce:	80 91 bd 07 	lds	r24, 0x07BD
    47d2:	84 31       	cpi	r24, 0x14	; 20
    47d4:	10 f0       	brcs	.+4      	; 0x47da <nrk_error_print+0x4e>
			// Set the pwr ctrl pin as output
    47d6:	10 92 bd 07 	sts	0x07BD, r1
  			DDRF = PWR_CTRL_MASK;
    47da:	80 91 bd 07 	lds	r24, 0x07BD
    47de:	99 27       	eor	r25, r25
    47e0:	aa 27       	eor	r26, r26
    47e2:	bb 27       	eor	r27, r27
    47e4:	fc 01       	movw	r30, r24
    47e6:	31 97       	sbiw	r30, 0x01	; 1
    47e8:	e2 31       	cpi	r30, 0x12	; 18
    47ea:	f1 05       	cpc	r31, r1
    47ec:	f0 f5       	brcc	.+124    	; 0x486a <nrk_error_print+0xde>
    47ee:	ea 59       	subi	r30, 0x9A	; 154
    47f0:	ff 4f       	sbci	r31, 0xFF	; 255
    47f2:	ee 0f       	add	r30, r30
    47f4:	ff 1f       	adc	r31, r31
    47f6:	05 90       	lpm	r0, Z+
    47f8:	f4 91       	lpm	r31, Z
    47fa:	e0 2d       	mov	r30, r0
    47fc:	09 94       	ijmp
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
    47fe:	81 e1       	ldi	r24, 0x11	; 17
    4800:	94 e0       	ldi	r25, 0x04	; 4
    4802:	35 c0       	rjmp	.+106    	; 0x486e <nrk_error_print+0xe2>
		      return 1;
	     
	    case OPEN:  
    4804:	8d ef       	ldi	r24, 0xFD	; 253
    4806:	93 e0       	ldi	r25, 0x03	; 3
    4808:	32 c0       	rjmp	.+100    	; 0x486e <nrk_error_print+0xe2>
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
		    if(opt&READ_FLAG)
    480a:	87 ee       	ldi	r24, 0xE7	; 231
    480c:	93 e0       	ldi	r25, 0x03	; 3
    480e:	2f c0       	rjmp	.+94     	; 0x486e <nrk_error_print+0xe2>
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
    4810:	8c ec       	ldi	r24, 0xCC	; 204
    4812:	93 e0       	ldi	r25, 0x03	; 3
    4814:	2c c0       	rjmp	.+88     	; 0x486e <nrk_error_print+0xe2>
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    4816:	86 eb       	ldi	r24, 0xB6	; 182
    4818:	93 e0       	ldi	r25, 0x03	; 3
    481a:	29 c0       	rjmp	.+82     	; 0x486e <nrk_error_print+0xe2>
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
    481c:	8e e9       	ldi	r24, 0x9E	; 158
    481e:	93 e0       	ldi	r25, 0x03	; 3
    4820:	26 c0       	rjmp	.+76     	; 0x486e <nrk_error_print+0xe2>
		    {
		    	return NRK_ERROR;
		    }
    4822:	8b e8       	ldi	r24, 0x8B	; 139
    4824:	93 e0       	ldi	r25, 0x03	; 3
    4826:	23 c0       	rjmp	.+70     	; 0x486e <nrk_error_print+0xe2>
		    if(opt&APPEND_FLAG)
		    {
		    	return NRK_ERROR;
    4828:	88 e7       	ldi	r24, 0x78	; 120
    482a:	93 e0       	ldi	r25, 0x03	; 3
    482c:	20 c0       	rjmp	.+64     	; 0x486e <nrk_error_print+0xe2>
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
    482e:	8a e5       	ldi	r24, 0x5A	; 90
    4830:	93 e0       	ldi	r25, 0x03	; 3
    4832:	1d c0       	rjmp	.+58     	; 0x486e <nrk_error_print+0xe2>
		    else return NRK_OK;
		
	    
    4834:	85 e3       	ldi	r24, 0x35	; 53
    4836:	93 e0       	ldi	r25, 0x03	; 3
    4838:	1a c0       	rjmp	.+52     	; 0x486e <nrk_error_print+0xe2>

             case READ:
	     	      count=0;
    483a:	89 e2       	ldi	r24, 0x29	; 41
    483c:	93 e0       	ldi	r25, 0x03	; 3
    483e:	17 c0       	rjmp	.+46     	; 0x486e <nrk_error_print+0xe2>
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
			{
    4840:	8e e0       	ldi	r24, 0x0E	; 14
    4842:	93 e0       	ldi	r25, 0x03	; 3
    4844:	14 c0       	rjmp	.+40     	; 0x486e <nrk_error_print+0xe2>
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();

    4846:	8f ef       	ldi	r24, 0xFF	; 255
    4848:	92 e0       	ldi	r25, 0x02	; 2
    484a:	11 c0       	rjmp	.+34     	; 0x486e <nrk_error_print+0xe2>
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
    484c:	8e ee       	ldi	r24, 0xEE	; 238
    484e:	92 e0       	ldi	r25, 0x02	; 2
    4850:	0e c0       	rjmp	.+28     	; 0x486e <nrk_error_print+0xe2>
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}
    4852:	8a ed       	ldi	r24, 0xDA	; 218
    4854:	92 e0       	ldi	r25, 0x02	; 2
    4856:	0b c0       	rjmp	.+22     	; 0x486e <nrk_error_print+0xe2>

				if(size==1)
			      	{
    4858:	8a eb       	ldi	r24, 0xBA	; 186
    485a:	92 e0       	ldi	r25, 0x02	; 2
    485c:	08 c0       	rjmp	.+16     	; 0x486e <nrk_error_print+0xe2>
			      		buffer[count]=(val>>2)  & 0xFF;
				}

    485e:	82 ea       	ldi	r24, 0xA2	; 162
    4860:	92 e0       	ldi	r25, 0x02	; 2
    4862:	05 c0       	rjmp	.+10     	; 0x486e <nrk_error_print+0xe2>

			} else if(channel==BAT)
			{
    4864:	87 e8       	ldi	r24, 0x87	; 135
    4866:	92 e0       	ldi	r25, 0x02	; 2
    4868:	02 c0       	rjmp	.+4      	; 0x486e <nrk_error_print+0xe2>
			uint16_t tmp;
			tmp=read_voltage_status();
			if(size==2)
    486a:	80 e8       	ldi	r24, 0x80	; 128
    486c:	92 e0       	ldi	r25, 0x02	; 2
    486e:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_kprintf>
				{
					buffer[count]=tmp & 0xFF;
    4872:	60 91 6a 0a 	lds	r22, 0x0A6A
    4876:	70 91 6b 0a 	lds	r23, 0x0A6B
    487a:	8d e0       	ldi	r24, 0x0D	; 13
    487c:	90 e0       	ldi	r25, 0x00	; 0
    487e:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
					count++;
    4882:	60 91 6a 0a 	lds	r22, 0x0A6A
    4886:	70 91 6b 0a 	lds	r23, 0x0A6B
    488a:	8a e0       	ldi	r24, 0x0A	; 10
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}
    4892:	82 e0       	ldi	r24, 0x02	; 2
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <nrk_led_set>

    489a:	83 e0       	ldi	r24, 0x03	; 3
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <nrk_led_clr>
    48a2:	10 e0       	ldi	r17, 0x00	; 0
				if(size==1)
			      	{
    48a4:	88 ee       	ldi	r24, 0xE8	; 232
    48a6:	93 e0       	ldi	r25, 0x03	; 3
    48a8:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}

				if(size==1)
    48ac:	1f 5f       	subi	r17, 0xFF	; 255
    48ae:	14 36       	cpi	r17, 0x64	; 100
    48b0:	c9 f7       	brne	.-14     	; 0x48a4 <nrk_error_print+0x118>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
    48b2:	83 e0       	ldi	r24, 0x03	; 3
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <nrk_led_set>
				}
    48ba:	82 e0       	ldi	r24, 0x02	; 2
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <nrk_led_clr>
    48c2:	10 e0       	ldi	r17, 0x00	; 0

			}
    48c4:	88 ee       	ldi	r24, 0xE8	; 232
    48c6:	93 e0       	ldi	r25, 0x03	; 3
    48c8:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <nrk_spin_wait_us>

				if(size==1)
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}

    48cc:	1f 5f       	subi	r17, 0xFF	; 255
    48ce:	14 36       	cpi	r17, 0x64	; 100
    48d0:	c9 f7       	brne	.-14     	; 0x48c4 <nrk_error_print+0x138>
    48d2:	df cf       	rjmp	.-66     	; 0x4892 <nrk_error_print+0x106>
			
		      count++;
                      return count;

             case CLOSE:
			// Turn off sensor power
    48d4:	80 e0       	ldi	r24, 0x00	; 0
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	1f 91       	pop	r17
    48da:	08 95       	ret

000048dc <nrk_kernel_error_add>:
} while (0)

#define ADC_VREF_VCC() \
   do { \
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
    48dc:	80 93 bd 07 	sts	0x07BD, r24
} while(0)
    48e0:	60 93 f2 02 	sts	0x02F2, r22


#define ADC_VREF_1_1() \
    48e4:	0e 94 c6 23 	call	0x478c	; 0x478c <nrk_error_print>
    48e8:	08 95       	ret

000048ea <nrk_error_add>:

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    48ea:	80 93 bd 07 	sts	0x07BD, r24
    do { \
    48ee:	e0 91 39 0a 	lds	r30, 0x0A39
    48f2:	f0 91 3a 0a 	lds	r31, 0x0A3A
    48f6:	80 85       	ldd	r24, Z+8	; 0x08
    48f8:	80 93 f2 02 	sts	0x02F2, r24
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)
    48fc:	0e 94 c6 23 	call	0x478c	; 0x478c <nrk_error_print>
    4900:	08 95       	ret

00004902 <nrk_stack_check_pid>:
     {
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
    4902:	99 27       	eor	r25, r25
    4904:	87 fd       	sbrc	r24, 7
    4906:	90 95       	com	r25
    4908:	fc 01       	movw	r30, r24
    490a:	25 e0       	ldi	r18, 0x05	; 5
    490c:	ee 0f       	add	r30, r30
    490e:	ff 1f       	adc	r31, r31
    4910:	2a 95       	dec	r18
    4912:	e1 f7       	brne	.-8      	; 0x490c <nrk_stack_check_pid+0xa>
    4914:	e8 0f       	add	r30, r24
    4916:	f9 1f       	adc	r31, r25
    4918:	ee 58       	subi	r30, 0x8E	; 142
    491a:	f6 4f       	sbci	r31, 0xF6	; 246
    491c:	a2 81       	ldd	r26, Z+2	; 0x02
    491e:	b3 81       	ldd	r27, Z+3	; 0x03
			is_open=0;
		      return 1;
    4920:	8c 91       	ld	r24, X
    4922:	85 35       	cpi	r24, 0x55	; 85
    4924:	29 f0       	breq	.+10     	; 0x4930 <nrk_stack_check_pid+0x2e>
	     
    4926:	85 e5       	ldi	r24, 0x55	; 85
    4928:	8c 93       	st	X, r24
    492a:	8f ef       	ldi	r24, 0xFF	; 255
    492c:	9f ef       	ldi	r25, 0xFF	; 255
    492e:	08 95       	ret
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
		    if(opt&READ_FLAG)
		    {
    4930:	80 81       	ld	r24, Z
    4932:	91 81       	ldd	r25, Z+1	; 0x01
    4934:	80 50       	subi	r24, 0x00	; 0
    4936:	92 42       	sbci	r25, 0x22	; 34
    4938:	18 f4       	brcc	.+6      	; 0x4940 <nrk_stack_check_pid+0x3e>
    493a:	81 e0       	ldi	r24, 0x01	; 1
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	08 95       	ret
		   	// Turn on Sensor Node Power
    4940:	82 e1       	ldi	r24, 0x12	; 18
    4942:	0e 94 75 24 	call	0x48ea	; 0x48ea <nrk_error_add>
    4946:	8f ef       	ldi	r24, 0xFF	; 255
    4948:	9f ef       	ldi	r25, 0xFF	; 255
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
    494a:	08 95       	ret

0000494c <dump_stack_info>:
#include <nrk_driver_list.h>
#include <nrk_driver.h>
#include <ff_basic_sensor.h>
#include <include.h>
#include <stdio.h>
#include <ulib.h>
    494c:	6f 92       	push	r6
    494e:	7f 92       	push	r7
    4950:	8f 92       	push	r8
    4952:	9f 92       	push	r9
    4954:	af 92       	push	r10
    4956:	bf 92       	push	r11
    4958:	cf 92       	push	r12
    495a:	df 92       	push	r13
    495c:	ef 92       	push	r14
    495e:	ff 92       	push	r15
    4960:	0f 93       	push	r16
    4962:	1f 93       	push	r17
    4964:	cf 93       	push	r28
    4966:	df 93       	push	r29
#include <nrk_error.h>
#include <nrk.h>
#include <stdint.h>
#include <basic_rf.h>
#include <nrk_timer.h>
    4968:	88 e4       	ldi	r24, 0x48	; 72
    496a:	94 e0       	ldi	r25, 0x04	; 4
    496c:	0e 94 91 20 	call	0x4122	; 0x4122 <nrk_kprintf>

#define ADC_STARTUP_DELAY  1000
    4970:	e0 91 39 0a 	lds	r30, 0x0A39
    4974:	f0 91 3a 0a 	lds	r31, 0x0A3A
    4978:	80 85       	ldd	r24, Z+8	; 0x08
    497a:	99 27       	eor	r25, r25
    497c:	87 fd       	sbrc	r24, 7
    497e:	90 95       	com	r25
    4980:	9f 93       	push	r25
    4982:	8f 93       	push	r24
    4984:	8e e7       	ldi	r24, 0x7E	; 126
    4986:	92 e0       	ldi	r25, 0x02	; 2
    4988:	9f 93       	push	r25
    498a:	8f 93       	push	r24
    498c:	0e 94 17 38 	call	0x702e	; 0x702e <printf>
#define ADC_SETUP_DELAY  200
    4990:	e0 91 39 0a 	lds	r30, 0x0A39
    4994:	f0 91 3a 0a 	lds	r31, 0x0A3A
    4998:	02 81       	ldd	r16, Z+2	; 0x02
    499a:	13 81       	ldd	r17, Z+3	; 0x03

uint8_t channel;
    499c:	1f 93       	push	r17
    499e:	0f 93       	push	r16
    49a0:	87 e8       	ldi	r24, 0x87	; 135
    49a2:	92 e0       	ldi	r25, 0x02	; 2
    49a4:	9f 93       	push	r25
    49a6:	8f 93       	push	r24
    49a8:	0e 94 17 38 	call	0x702e	; 0x702e <printf>
uint8_t is_open;
    49ac:	f8 01       	movw	r30, r16
    49ae:	80 81       	ld	r24, Z
    49b0:	99 27       	eor	r25, r25
    49b2:	9f 93       	push	r25
    49b4:	8f 93       	push	r24
    49b6:	54 e9       	ldi	r21, 0x94	; 148
    49b8:	c5 2e       	mov	r12, r21
    49ba:	52 e0       	ldi	r21, 0x02	; 2
    49bc:	d5 2e       	mov	r13, r21
    49be:	df 92       	push	r13
    49c0:	cf 92       	push	r12
    49c2:	0e 94 17 38 	call	0x702e	; 0x702e <printf>

// VREF is set to VCC by default
#define ADC_INIT() \
    49c6:	e0 91 39 0a 	lds	r30, 0x0A39
    49ca:	f0 91 3a 0a 	lds	r31, 0x0A3A
    49ce:	80 81       	ld	r24, Z
    49d0:	91 81       	ldd	r25, Z+1	; 0x01
    49d2:	9f 93       	push	r25
    49d4:	8f 93       	push	r24
    49d6:	41 ea       	ldi	r20, 0xA1	; 161
    49d8:	e4 2e       	mov	r14, r20
    49da:	42 e0       	ldi	r20, 0x02	; 2
    49dc:	f4 2e       	mov	r15, r20
    49de:	ff 92       	push	r15
    49e0:	ef 92       	push	r14
    49e2:	0e 94 17 38 	call	0x702e	; 0x702e <printf>
    do { \
    49e6:	80 91 39 0a 	lds	r24, 0x0A39
    49ea:	90 91 3a 0a 	lds	r25, 0x0A3A
    49ee:	9f 93       	push	r25
    49f0:	8f 93       	push	r24
    49f2:	0b ea       	ldi	r16, 0xAB	; 171
    49f4:	12 e0       	ldi	r17, 0x02	; 2
    49f6:	1f 93       	push	r17
    49f8:	0f 93       	push	r16
    49fa:	0e 94 17 38 	call	0x702e	; 0x702e <printf>
    49fe:	c2 e7       	ldi	r28, 0x72	; 114
    4a00:	d9 e0       	ldi	r29, 0x09	; 9
    4a02:	aa 24       	eor	r10, r10
    4a04:	bb 24       	eor	r11, r11
    4a06:	8d b7       	in	r24, 0x3d	; 61
    4a08:	9e b7       	in	r25, 0x3e	; 62
    4a0a:	44 96       	adiw	r24, 0x14	; 20
    4a0c:	0f b6       	in	r0, 0x3f	; 63
    4a0e:	f8 94       	cli
    4a10:	9e bf       	out	0x3e, r25	; 62
    4a12:	0f be       	out	0x3f, r0	; 63
    4a14:	8d bf       	out	0x3d, r24	; 61
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)

#define ADC_VREF_VCC() \
   do { \
    4a16:	3b eb       	ldi	r19, 0xBB	; 187
    4a18:	63 2e       	mov	r6, r19
    4a1a:	32 e0       	ldi	r19, 0x02	; 2
    4a1c:	73 2e       	mov	r7, r19
	ADMUX &= ~(BM(REFS1));  \
    4a1e:	46 01       	movw	r8, r12
	ADMUX |= BM(REFS0);  \
} while(0)

    4a20:	67 01       	movw	r12, r14

    4a22:	78 01       	movw	r14, r16
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)

    4a24:	0a 81       	ldd	r16, Y+2	; 0x02
    4a26:	1b 81       	ldd	r17, Y+3	; 0x03
#define ADC_VREF_VCC() \
   do { \
    4a28:	1f 93       	push	r17
    4a2a:	0f 93       	push	r16
    4a2c:	bf 92       	push	r11
    4a2e:	af 92       	push	r10
    4a30:	7f 92       	push	r7
    4a32:	6f 92       	push	r6
    4a34:	0e 94 17 38 	call	0x702e	; 0x702e <printf>
	ADMUX &= ~(BM(REFS1));  \
    4a38:	f8 01       	movw	r30, r16
    4a3a:	80 81       	ld	r24, Z
    4a3c:	99 27       	eor	r25, r25
    4a3e:	9f 93       	push	r25
    4a40:	8f 93       	push	r24
    4a42:	9f 92       	push	r9
    4a44:	8f 92       	push	r8
    4a46:	0e 94 17 38 	call	0x702e	; 0x702e <printf>
	ADMUX |= BM(REFS0);  \
} while(0)

    4a4a:	88 81       	ld	r24, Y
    4a4c:	99 81       	ldd	r25, Y+1	; 0x01
    4a4e:	9f 93       	push	r25
    4a50:	8f 93       	push	r24
    4a52:	df 92       	push	r13
    4a54:	cf 92       	push	r12
    4a56:	0e 94 17 38 	call	0x702e	; 0x702e <printf>

    4a5a:	df 93       	push	r29
    4a5c:	cf 93       	push	r28
    4a5e:	ff 92       	push	r15
    4a60:	ef 92       	push	r14
    4a62:	0e 94 17 38 	call	0x702e	; 0x702e <printf>
    4a66:	08 94       	sec
    4a68:	a1 1c       	adc	r10, r1
    4a6a:	b1 1c       	adc	r11, r1
    4a6c:	a1 96       	adiw	r28, 0x21	; 33

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
    4a6e:	8d b7       	in	r24, 0x3d	; 61
    4a70:	9e b7       	in	r25, 0x3e	; 62
    4a72:	42 96       	adiw	r24, 0x12	; 18
    4a74:	0f b6       	in	r0, 0x3f	; 63
    4a76:	f8 94       	cli
    4a78:	9e bf       	out	0x3e, r25	; 62
    4a7a:	0f be       	out	0x3f, r0	; 63
    4a7c:	8d bf       	out	0x3d, r24	; 61
    4a7e:	95 e0       	ldi	r25, 0x05	; 5
    4a80:	a9 16       	cp	r10, r25
    4a82:	b1 04       	cpc	r11, r1
    4a84:	79 f6       	brne	.-98     	; 0x4a24 <dump_stack_info+0xd8>
    4a86:	df 91       	pop	r29
    4a88:	cf 91       	pop	r28
    4a8a:	1f 91       	pop	r17
    4a8c:	0f 91       	pop	r16
    4a8e:	ff 90       	pop	r15
    4a90:	ef 90       	pop	r14
    4a92:	df 90       	pop	r13
    4a94:	cf 90       	pop	r12
    4a96:	bf 90       	pop	r11
    4a98:	af 90       	pop	r10
    4a9a:	9f 90       	pop	r9
    4a9c:	8f 90       	pop	r8
    4a9e:	7f 90       	pop	r7
    4aa0:	6f 90       	pop	r6
    4aa2:	08 95       	ret

00004aa4 <nrk_stack_check>:
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

    4aa4:	cf 93       	push	r28
    4aa6:	df 93       	push	r29
// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    do { \
    4aa8:	e0 91 39 0a 	lds	r30, 0x0A39
    4aac:	f0 91 3a 0a 	lds	r31, 0x0A3A
    4ab0:	c2 81       	ldd	r28, Z+2	; 0x02
    4ab2:	d3 81       	ldd	r29, Z+3	; 0x03
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
    4ab4:	88 81       	ld	r24, Y
    4ab6:	85 35       	cpi	r24, 0x55	; 85
    4ab8:	39 f0       	breq	.+14     	; 0x4ac8 <nrk_stack_check+0x24>
} while(0)

    4aba:	0e 94 a6 24 	call	0x494c	; 0x494c <dump_stack_info>
// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
    4abe:	81 e0       	ldi	r24, 0x01	; 1
    4ac0:	0e 94 75 24 	call	0x48ea	; 0x48ea <nrk_error_add>
do { \
    4ac4:	85 e5       	ldi	r24, 0x55	; 85
    4ac6:	88 83       	st	Y, r24
x =  ADCL; \
x |= ADCH << 8; \
} while (0)

#define ADC_GET_SAMPLE_8(x) \
    4ac8:	e0 91 39 0a 	lds	r30, 0x0A39
    4acc:	f0 91 3a 0a 	lds	r31, 0x0A3A
    4ad0:	80 81       	ld	r24, Z
    4ad2:	91 81       	ldd	r25, Z+1	; 0x01
    4ad4:	80 50       	subi	r24, 0x00	; 0
    4ad6:	92 42       	sbci	r25, 0x22	; 34
    4ad8:	28 f0       	brcs	.+10     	; 0x4ae4 <nrk_stack_check+0x40>
do { \
x = ((uint8_t) ADCL) >> 2; \
    4ada:	0e 94 a6 24 	call	0x494c	; 0x494c <dump_stack_info>
x |= ((int8_t) ADCH) << 6; \
} while (0)
    4ade:	82 e1       	ldi	r24, 0x12	; 18
    4ae0:	0e 94 75 24 	call	0x48ea	; 0x48ea <nrk_error_add>
    4ae4:	df 91       	pop	r29
    4ae6:	cf 91       	pop	r28
    4ae8:	08 95       	ret

00004aea <nrk_signal_create>:
#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;

    4aea:	40 91 1a 05 	lds	r20, 0x051A
    4aee:	50 91 1b 05 	lds	r21, 0x051B
    4af2:	60 91 1c 05 	lds	r22, 0x051C
    4af6:	70 91 1d 05 	lds	r23, 0x051D
    4afa:	20 e0       	ldi	r18, 0x00	; 0
    4afc:	30 e0       	ldi	r19, 0x00	; 0
    4afe:	db 01       	movw	r26, r22
    4b00:	ca 01       	movw	r24, r20
    4b02:	02 2e       	mov	r0, r18
    4b04:	04 c0       	rjmp	.+8      	; 0x4b0e <nrk_signal_create+0x24>
    4b06:	b6 95       	lsr	r27
    4b08:	a7 95       	ror	r26
    4b0a:	97 95       	ror	r25
    4b0c:	87 95       	ror	r24
    4b0e:	0a 94       	dec	r0
    4b10:	d2 f7       	brpl	.-12     	; 0x4b06 <nrk_signal_create+0x1c>
    4b12:	81 70       	andi	r24, 0x01	; 1
    4b14:	90 70       	andi	r25, 0x00	; 0
    4b16:	89 2b       	or	r24, r25
    4b18:	e9 f4       	brne	.+58     	; 0x4b54 <nrk_signal_create+0x6a>
// VREF is set to VCC by default
#define ADC_INIT() \
    4b1a:	81 e0       	ldi	r24, 0x01	; 1
    4b1c:	90 e0       	ldi	r25, 0x00	; 0
    4b1e:	a0 e0       	ldi	r26, 0x00	; 0
    4b20:	b0 e0       	ldi	r27, 0x00	; 0
    4b22:	02 2e       	mov	r0, r18
    4b24:	04 c0       	rjmp	.+8      	; 0x4b2e <nrk_signal_create+0x44>
    4b26:	88 0f       	add	r24, r24
    4b28:	99 1f       	adc	r25, r25
    4b2a:	aa 1f       	adc	r26, r26
    4b2c:	bb 1f       	adc	r27, r27
    4b2e:	0a 94       	dec	r0
    4b30:	d2 f7       	brpl	.-12     	; 0x4b26 <nrk_signal_create+0x3c>
    4b32:	84 2b       	or	r24, r20
    4b34:	95 2b       	or	r25, r21
    4b36:	a6 2b       	or	r26, r22
    4b38:	b7 2b       	or	r27, r23
    4b3a:	80 93 1a 05 	sts	0x051A, r24
    4b3e:	90 93 1b 05 	sts	0x051B, r25
    4b42:	a0 93 1c 05 	sts	0x051C, r26
    4b46:	b0 93 1d 05 	sts	0x051D, r27
    do { \
    4b4a:	82 2f       	mov	r24, r18
    4b4c:	99 27       	eor	r25, r25
    4b4e:	87 fd       	sbrc	r24, 7
    4b50:	90 95       	com	r25
    4b52:	08 95       	ret
    4b54:	2f 5f       	subi	r18, 0xFF	; 255
    4b56:	3f 4f       	sbci	r19, 0xFF	; 255
#include <nrk_timer.h>

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

uint8_t channel;
    4b58:	20 32       	cpi	r18, 0x20	; 32
    4b5a:	31 05       	cpc	r19, r1
    4b5c:	81 f6       	brne	.-96     	; 0x4afe <nrk_signal_create+0x14>
    4b5e:	8f ef       	ldi	r24, 0xFF	; 255
    4b60:	9f ef       	ldi	r25, 0xFF	; 255
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)

#define ADC_VREF_VCC() \
   do { \
    4b62:	08 95       	ret

00004b64 <nrk_signal_get_registered_mask>:
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)
    4b64:	e0 91 39 0a 	lds	r30, 0x0A39
    4b68:	f0 91 3a 0a 	lds	r31, 0x0A3A
    4b6c:	65 85       	ldd	r22, Z+13	; 0x0d
    4b6e:	76 85       	ldd	r23, Z+14	; 0x0e
    4b70:	87 85       	ldd	r24, Z+15	; 0x0f
    4b72:	90 89       	ldd	r25, Z+16	; 0x10
    4b74:	08 95       	ret

00004b76 <nrk_signal_unregister>:
do { \
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
    4b76:	ef 92       	push	r14
    4b78:	ff 92       	push	r15
    4b7a:	0f 93       	push	r16
    4b7c:	1f 93       	push	r17
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
uint8_t count=0;
    4b7e:	21 e0       	ldi	r18, 0x01	; 1
    4b80:	30 e0       	ldi	r19, 0x00	; 0
    4b82:	40 e0       	ldi	r20, 0x00	; 0
    4b84:	50 e0       	ldi	r21, 0x00	; 0
    4b86:	04 c0       	rjmp	.+8      	; 0x4b90 <nrk_signal_unregister+0x1a>
    4b88:	22 0f       	add	r18, r18
    4b8a:	33 1f       	adc	r19, r19
    4b8c:	44 1f       	adc	r20, r20
    4b8e:	55 1f       	adc	r21, r21
    4b90:	8a 95       	dec	r24
    4b92:	d2 f7       	brpl	.-12     	; 0x4b88 <nrk_signal_unregister+0x12>
// key and value get passed as opt and size
uint8_t key=opt;
    4b94:	e0 91 39 0a 	lds	r30, 0x0A39
    4b98:	f0 91 3a 0a 	lds	r31, 0x0A3A
    4b9c:	e5 84       	ldd	r14, Z+13	; 0x0d
    4b9e:	f6 84       	ldd	r15, Z+14	; 0x0e
    4ba0:	07 85       	ldd	r16, Z+15	; 0x0f
    4ba2:	10 89       	ldd	r17, Z+16	; 0x10
    4ba4:	da 01       	movw	r26, r20
    4ba6:	c9 01       	movw	r24, r18
    4ba8:	8e 21       	and	r24, r14
    4baa:	9f 21       	and	r25, r15
    4bac:	a0 23       	and	r26, r16
    4bae:	b1 23       	and	r27, r17
    4bb0:	00 97       	sbiw	r24, 0x00	; 0
    4bb2:	a1 05       	cpc	r26, r1
    4bb4:	b1 05       	cpc	r27, r1
    4bb6:	19 f4       	brne	.+6      	; 0x4bbe <nrk_signal_unregister+0x48>
    4bb8:	8f ef       	ldi	r24, 0xFF	; 255
    4bba:	9f ef       	ldi	r25, 0xFF	; 255
    4bbc:	1a c0       	rjmp	.+52     	; 0x4bf2 <nrk_signal_unregister+0x7c>
uint8_t value=size;

    4bbe:	20 95       	com	r18
    4bc0:	30 95       	com	r19
    4bc2:	40 95       	com	r20
    4bc4:	50 95       	com	r21
    4bc6:	e2 22       	and	r14, r18
    4bc8:	f3 22       	and	r15, r19
    4bca:	04 23       	and	r16, r20
    4bcc:	15 23       	and	r17, r21
    4bce:	e5 86       	std	Z+13, r14	; 0x0d
    4bd0:	f6 86       	std	Z+14, r15	; 0x0e
    4bd2:	07 87       	std	Z+15, r16	; 0x0f
    4bd4:	10 8b       	std	Z+16, r17	; 0x10
     switch(action)
    4bd6:	81 89       	ldd	r24, Z+17	; 0x11
    4bd8:	92 89       	ldd	r25, Z+18	; 0x12
    4bda:	a3 89       	ldd	r26, Z+19	; 0x13
    4bdc:	b4 89       	ldd	r27, Z+20	; 0x14
    4bde:	82 23       	and	r24, r18
    4be0:	93 23       	and	r25, r19
    4be2:	a4 23       	and	r26, r20
    4be4:	b5 23       	and	r27, r21
    4be6:	81 8b       	std	Z+17, r24	; 0x11
    4be8:	92 8b       	std	Z+18, r25	; 0x12
    4bea:	a3 8b       	std	Z+19, r26	; 0x13
    4bec:	b4 8b       	std	Z+20, r27	; 0x14
    4bee:	81 e0       	ldi	r24, 0x01	; 1
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	1f 91       	pop	r17
    4bf4:	0f 91       	pop	r16
    4bf6:	ff 90       	pop	r15
    4bf8:	ef 90       	pop	r14
    4bfa:	08 95       	ret

00004bfc <nrk_signal_register>:
	     		init_adc();  
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    4bfc:	68 2f       	mov	r22, r24
    4bfe:	77 27       	eor	r23, r23
    4c00:	67 fd       	sbrc	r22, 7
    4c02:	70 95       	com	r23
    4c04:	80 91 1a 05 	lds	r24, 0x051A
    4c08:	90 91 1b 05 	lds	r25, 0x051B
    4c0c:	a0 91 1c 05 	lds	r26, 0x051C
    4c10:	b0 91 1d 05 	lds	r27, 0x051D
    4c14:	06 2e       	mov	r0, r22
    4c16:	04 c0       	rjmp	.+8      	; 0x4c20 <nrk_signal_register+0x24>
    4c18:	b6 95       	lsr	r27
    4c1a:	a7 95       	ror	r26
    4c1c:	97 95       	ror	r25
    4c1e:	87 95       	ror	r24
    4c20:	0a 94       	dec	r0
    4c22:	d2 f7       	brpl	.-12     	; 0x4c18 <nrk_signal_register+0x1c>
    4c24:	81 70       	andi	r24, 0x01	; 1
    4c26:	90 70       	andi	r25, 0x00	; 0
    4c28:	89 2b       	or	r24, r25
    4c2a:	19 f4       	brne	.+6      	; 0x4c32 <nrk_signal_register+0x36>
    4c2c:	8f ef       	ldi	r24, 0xFF	; 255
    4c2e:	9f ef       	ldi	r25, 0xFF	; 255
    4c30:	08 95       	ret
		    is_open=1; 
		    if(opt&READ_FLAG)
    4c32:	e0 91 39 0a 	lds	r30, 0x0A39
    4c36:	f0 91 3a 0a 	lds	r31, 0x0A3A
    4c3a:	21 e0       	ldi	r18, 0x01	; 1
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	40 e0       	ldi	r20, 0x00	; 0
    4c40:	50 e0       	ldi	r21, 0x00	; 0
    4c42:	04 c0       	rjmp	.+8      	; 0x4c4c <nrk_signal_register+0x50>
    4c44:	22 0f       	add	r18, r18
    4c46:	33 1f       	adc	r19, r19
    4c48:	44 1f       	adc	r20, r20
    4c4a:	55 1f       	adc	r21, r21
    4c4c:	6a 95       	dec	r22
    4c4e:	d2 f7       	brpl	.-12     	; 0x4c44 <nrk_signal_register+0x48>
    4c50:	85 85       	ldd	r24, Z+13	; 0x0d
    4c52:	96 85       	ldd	r25, Z+14	; 0x0e
    4c54:	a7 85       	ldd	r26, Z+15	; 0x0f
    4c56:	b0 89       	ldd	r27, Z+16	; 0x10
    4c58:	82 2b       	or	r24, r18
    4c5a:	93 2b       	or	r25, r19
    4c5c:	a4 2b       	or	r26, r20
    4c5e:	b5 2b       	or	r27, r21
    4c60:	85 87       	std	Z+13, r24	; 0x0d
    4c62:	96 87       	std	Z+14, r25	; 0x0e
    4c64:	a7 87       	std	Z+15, r26	; 0x0f
    4c66:	b0 8b       	std	Z+16, r27	; 0x10
    4c68:	81 e0       	ldi	r24, 0x01	; 1
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
    4c6c:	08 95       	ret

00004c6e <nrk_sem_create>:
{
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
if(val&0x0040) break; 
    4c6e:	48 2f       	mov	r20, r24
level++;
}
    4c70:	20 91 38 0a 	lds	r18, 0x0A38
    4c74:	24 30       	cpi	r18, 0x04	; 4
    4c76:	18 f0       	brcs	.+6      	; 0x4c7e <nrk_sem_create+0x10>
    4c78:	80 e0       	ldi	r24, 0x00	; 0
    4c7a:	90 e0       	ldi	r25, 0x00	; 0
    4c7c:	08 95       	ret
    4c7e:	e9 e1       	ldi	r30, 0x19	; 25
    4c80:	fa e0       	ldi	r31, 0x0A	; 10
    4c82:	30 e0       	ldi	r19, 0x00	; 0
if(radio_sem!=NULL)
 nrk_sem_post(radio_sem);
if(level==0)
  {
    4c84:	80 81       	ld	r24, Z
    4c86:	8f 3f       	cpi	r24, 0xFF	; 255
    4c88:	21 f0       	breq	.+8      	; 0x4c92 <nrk_sem_create+0x24>
FASTSPI_GETREG(CC2420_BATTMON, val);
if(val&0x0040) break; 
level++;
}
if(radio_sem!=NULL)
 nrk_sem_post(radio_sem);
    4c8a:	3f 5f       	subi	r19, 0xFF	; 255
    4c8c:	33 96       	adiw	r30, 0x03	; 3
    4c8e:	35 30       	cpi	r19, 0x05	; 5
    4c90:	c9 f7       	brne	.-14     	; 0x4c84 <nrk_sem_create+0x16>
if(level==0)
  {
  val=get_adc_val();
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
    4c92:	83 2f       	mov	r24, r19
    4c94:	99 27       	eor	r25, r25
    4c96:	fc 01       	movw	r30, r24
    4c98:	ee 0f       	add	r30, r30
    4c9a:	ff 1f       	adc	r31, r31
    4c9c:	e8 0f       	add	r30, r24
    4c9e:	f9 1f       	adc	r31, r25
    4ca0:	e7 5e       	subi	r30, 0xE7	; 231
    4ca2:	f5 4f       	sbci	r31, 0xF5	; 245
    4ca4:	42 83       	std	Z+2, r20	; 0x02
  if(val<330) val=330;
    4ca6:	40 83       	st	Z, r20
  }
    4ca8:	61 83       	std	Z+1, r22	; 0x01
else val=(9000-(level*125)) / 27;
    4caa:	2f 5f       	subi	r18, 0xFF	; 255
    4cac:	20 93 38 0a 	sts	0x0A38, r18

    4cb0:	83 e0       	ldi	r24, 0x03	; 3
    4cb2:	38 9f       	mul	r19, r24
    4cb4:	c0 01       	movw	r24, r0
    4cb6:	11 24       	eor	r1, r1
    4cb8:	87 5e       	subi	r24, 0xE7	; 231
    4cba:	95 4f       	sbci	r25, 0xF5	; 245
return val;
    4cbc:	08 95       	ret

00004cbe <nrk_get_resource_index>:
}


    4cbe:	49 e1       	ldi	r20, 0x19	; 25
    4cc0:	5a e0       	ldi	r21, 0x0A	; 10
    4cc2:	20 e0       	ldi	r18, 0x00	; 0
    4cc4:	30 e0       	ldi	r19, 0x00	; 0

void init_adc()
{
    4cc6:	48 17       	cp	r20, r24
    4cc8:	59 07       	cpc	r21, r25
    4cca:	29 f4       	brne	.+10     	; 0x4cd6 <nrk_get_resource_index+0x18>
// Initialize values here
    4ccc:	82 2f       	mov	r24, r18
    4cce:	99 27       	eor	r25, r25
    4cd0:	87 fd       	sbrc	r24, 7
    4cd2:	90 95       	com	r25
    4cd4:	08 95       	ret
    4cd6:	2f 5f       	subi	r18, 0xFF	; 255
    4cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    4cda:	4d 5f       	subi	r20, 0xFD	; 253
    4cdc:	5f 4f       	sbci	r21, 0xFF	; 255
return val;
}



void init_adc()
    4cde:	25 30       	cpi	r18, 0x05	; 5
    4ce0:	31 05       	cpc	r19, r1
    4ce2:	89 f7       	brne	.-30     	; 0x4cc6 <nrk_get_resource_index+0x8>
    4ce4:	8f ef       	ldi	r24, 0xFF	; 255
    4ce6:	9f ef       	ldi	r25, 0xFF	; 255
{
// Initialize values here
  ADC_INIT ();
  ADC_ENABLE ();
    4ce8:	08 95       	ret

00004cea <nrk_sem_delete>:

radio_sem= rf_get_sem();

// if semaphore not created, then assume you own the radio 
if(radio_sem!=NULL)
 nrk_sem_pend (radio_sem);
    4cea:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <nrk_get_resource_index>

    // activate cc2420 vreg
    4cee:	8f 3f       	cpi	r24, 0xFF	; 255
    4cf0:	11 f4       	brne	.+4      	; 0x4cf6 <nrk_sem_delete+0xc>
    4cf2:	81 e0       	ldi	r24, 0x01	; 1
    4cf4:	03 c0       	rjmp	.+6      	; 0x4cfc <nrk_sem_delete+0x12>
    SET_VREG_ACTIVE();
    4cf6:	85 30       	cpi	r24, 0x05	; 5
    4cf8:	31 f4       	brne	.+12     	; 0x4d06 <nrk_sem_delete+0x1c>
    4cfa:	82 e0       	ldi	r24, 0x02	; 2
    4cfc:	0e 94 a9 23 	call	0x4752	; 0x4752 <_nrk_errno_set>
    4d00:	8f ef       	ldi	r24, 0xFF	; 255
    4d02:	9f ef       	ldi	r25, 0xFF	; 255
    4d04:	08 95       	ret
    // FIXME: Check at end if VREG needs to be disabled again...

    4d06:	99 27       	eor	r25, r25
    4d08:	87 fd       	sbrc	r24, 7
    4d0a:	90 95       	com	r25
    4d0c:	fc 01       	movw	r30, r24
    4d0e:	ee 0f       	add	r30, r30
    4d10:	ff 1f       	adc	r31, r31
    4d12:	e8 0f       	add	r30, r24
    4d14:	f9 1f       	adc	r31, r25
    4d16:	e7 5e       	subi	r30, 0xE7	; 231
    4d18:	f5 4f       	sbci	r31, 0xF5	; 245
    4d1a:	8f ef       	ldi	r24, 0xFF	; 255
    4d1c:	80 83       	st	Z, r24
level=0;
    4d1e:	82 83       	std	Z+2, r24	; 0x02
while(level<0x1F)
    4d20:	81 83       	std	Z+1, r24	; 0x01
{
    4d22:	80 91 38 0a 	lds	r24, 0x0A38
    4d26:	81 50       	subi	r24, 0x01	; 1
    4d28:	80 93 38 0a 	sts	0x0A38, r24
    4d2c:	81 e0       	ldi	r24, 0x01	; 1
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
    4d30:	08 95       	ret

00004d32 <nrk_sem_query>:
			      		buffer[count]=(val>>2)  & 0xFF;
				}

			}
			
		      count++;
    4d32:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <nrk_get_resource_index>
                      return count;
    4d36:	8f 3f       	cpi	r24, 0xFF	; 255
    4d38:	11 f4       	brne	.+4      	; 0x4d3e <nrk_sem_query+0xc>
    4d3a:	81 e0       	ldi	r24, 0x01	; 1
    4d3c:	03 c0       	rjmp	.+6      	; 0x4d44 <nrk_sem_query+0x12>

    4d3e:	85 30       	cpi	r24, 0x05	; 5
    4d40:	31 f4       	brne	.+12     	; 0x4d4e <nrk_sem_query+0x1c>
    4d42:	82 e0       	ldi	r24, 0x02	; 2
    4d44:	0e 94 a9 23 	call	0x4752	; 0x4752 <_nrk_errno_set>
    4d48:	8f ef       	ldi	r24, 0xFF	; 255
    4d4a:	9f ef       	ldi	r25, 0xFF	; 255
    4d4c:	08 95       	ret
             case CLOSE:
			// Turn off sensor power
    4d4e:	99 27       	eor	r25, r25
    4d50:	87 fd       	sbrc	r24, 7
    4d52:	90 95       	com	r25
    4d54:	fc 01       	movw	r30, r24
    4d56:	ee 0f       	add	r30, r30
    4d58:	ff 1f       	adc	r31, r31
    4d5a:	e8 0f       	add	r30, r24
    4d5c:	f9 1f       	adc	r31, r25
    4d5e:	e7 5e       	subi	r30, 0xE7	; 231
    4d60:	f5 4f       	sbci	r31, 0xF5	; 245
    4d62:	82 81       	ldd	r24, Z+2	; 0x02
    4d64:	99 27       	eor	r25, r25
    4d66:	87 fd       	sbrc	r24, 7
    4d68:	90 95       	com	r25
			PORTF |= PWR_CTRL_MASK;
    4d6a:	08 95       	ret

00004d6c <nrk_sem_post>:
					_nrk_errno_set(1);
					return NRK_ERROR;
				}
				channel=value;
				if(channel==LIGHT)
				   ADC_VREF_VCC();	
    4d6c:	1f 93       	push	r17
    4d6e:	cf 93       	push	r28
    4d70:	df 93       	push	r29
				else
    4d72:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <nrk_get_resource_index>
    4d76:	18 2f       	mov	r17, r24
				   ADC_VREF_2_56();	
				ADC_SET_CHANNEL (channel);
    4d78:	8f 3f       	cpi	r24, 0xFF	; 255
    4d7a:	11 f4       	brne	.+4      	; 0x4d80 <nrk_sem_post+0x14>
    4d7c:	81 e0       	ldi	r24, 0x01	; 1
    4d7e:	03 c0       	rjmp	.+6      	; 0x4d86 <nrk_sem_post+0x1a>
				nrk_spin_wait_us(ADC_SETUP_DELAY);
    4d80:	85 30       	cpi	r24, 0x05	; 5
    4d82:	31 f4       	brne	.+12     	; 0x4d90 <nrk_sem_post+0x24>
    4d84:	82 e0       	ldi	r24, 0x02	; 2
    4d86:	0e 94 a9 23 	call	0x4752	; 0x4752 <_nrk_errno_set>
    4d8a:	8f ef       	ldi	r24, 0xFF	; 255
    4d8c:	9f ef       	ldi	r25, 0xFF	; 255
    4d8e:	3e c0       	rjmp	.+124    	; 0x4e0c <nrk_sem_post+0xa0>
				return NRK_OK;
			  }
    4d90:	99 27       	eor	r25, r25
    4d92:	87 fd       	sbrc	r24, 7
    4d94:	90 95       	com	r25
    4d96:	ec 01       	movw	r28, r24
    4d98:	cc 0f       	add	r28, r28
    4d9a:	dd 1f       	adc	r29, r29
    4d9c:	c8 0f       	add	r28, r24
    4d9e:	d9 1f       	adc	r29, r25
    4da0:	c7 5e       	subi	r28, 0xE7	; 231
    4da2:	d5 4f       	sbci	r29, 0xF5	; 245
    4da4:	9a 81       	ldd	r25, Y+2	; 0x02
    4da6:	88 81       	ld	r24, Y
    4da8:	98 17       	cp	r25, r24
    4daa:	74 f5       	brge	.+92     	; 0x4e08 <nrk_sem_post+0x9c>
			}
			return NRK_ERROR;
	     default:
    4dac:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
    4db0:	8a 81       	ldd	r24, Y+2	; 0x02
    4db2:	8f 5f       	subi	r24, 0xFF	; 255
    4db4:	8a 83       	std	Y+2, r24	; 0x02
	}
    4db6:	e0 91 39 0a 	lds	r30, 0x0A39
    4dba:	f0 91 3a 0a 	lds	r31, 0x0A3A
    4dbe:	14 82       	std	Z+4, r1	; 0x04
    4dc0:	e9 e7       	ldi	r30, 0x79	; 121
    4dc2:	f9 e0       	ldi	r31, 0x09	; 9
}


// read_voltage_status()
    4dc4:	21 2f       	mov	r18, r17
    4dc6:	33 27       	eor	r19, r19
    4dc8:	27 fd       	sbrc	r18, 7
    4dca:	30 95       	com	r19
    4dcc:	43 2f       	mov	r20, r19
    4dce:	53 2f       	mov	r21, r19
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
	}
}


    4dd0:	80 81       	ld	r24, Z
    4dd2:	82 30       	cpi	r24, 0x02	; 2
    4dd4:	91 f4       	brne	.+36     	; 0x4dfa <nrk_sem_post+0x8e>
// read_voltage_status()
    4dd6:	82 85       	ldd	r24, Z+10	; 0x0a
    4dd8:	93 85       	ldd	r25, Z+11	; 0x0b
    4dda:	a4 85       	ldd	r26, Z+12	; 0x0c
    4ddc:	b5 85       	ldd	r27, Z+13	; 0x0d
    4dde:	82 17       	cp	r24, r18
    4de0:	93 07       	cpc	r25, r19
    4de2:	a4 07       	cpc	r26, r20
    4de4:	b5 07       	cpc	r27, r21
    4de6:	49 f4       	brne	.+18     	; 0x4dfa <nrk_sem_post+0x8e>
//
// This function sets different voltage threshold levels on
    4de8:	83 e0       	ldi	r24, 0x03	; 3
    4dea:	82 83       	std	Z+2, r24	; 0x02
// the cc2420 chip to search for the voltage.
    4dec:	17 86       	std	Z+15, r1	; 0x0f
    4dee:	16 86       	std	Z+14, r1	; 0x0e
// If the voltage is above 3.3 volts, then the ADC reads
    4df0:	10 82       	st	Z, r1
// the external voltage value going through a voltage divider.
    4df2:	12 86       	std	Z+10, r1	; 0x0a
    4df4:	13 86       	std	Z+11, r1	; 0x0b
    4df6:	14 86       	std	Z+12, r1	; 0x0c
    4df8:	15 86       	std	Z+13, r1	; 0x0d
    4dfa:	b1 96       	adiw	r30, 0x21	; 33
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
	}
}

    4dfc:	8a e0       	ldi	r24, 0x0A	; 10
    4dfe:	ee 31       	cpi	r30, 0x1E	; 30
    4e00:	f8 07       	cpc	r31, r24
    4e02:	31 f7       	brne	.-52     	; 0x4dd0 <nrk_sem_post+0x64>
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
{
volatile uint16_t val;
    4e04:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
    4e08:	81 e0       	ldi	r24, 0x01	; 1
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	df 91       	pop	r29
    4e0e:	cf 91       	pop	r28
    4e10:	1f 91       	pop	r17
    4e12:	08 95       	ret

00004e14 <nrk_event_signal>:
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
		    }
    4e14:	df 92       	push	r13
    4e16:	ef 92       	push	r14
    4e18:	ff 92       	push	r15
    4e1a:	0f 93       	push	r16
    4e1c:	1f 93       	push	r17
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
		    {
    4e1e:	f1 e0       	ldi	r31, 0x01	; 1
    4e20:	ef 2e       	mov	r14, r31
    4e22:	f1 2c       	mov	r15, r1
    4e24:	01 2d       	mov	r16, r1
    4e26:	11 2d       	mov	r17, r1
    4e28:	04 c0       	rjmp	.+8      	; 0x4e32 <nrk_event_signal+0x1e>
    4e2a:	ee 0c       	add	r14, r14
    4e2c:	ff 1c       	adc	r15, r15
    4e2e:	00 1f       	adc	r16, r16
    4e30:	11 1f       	adc	r17, r17
    4e32:	8a 95       	dec	r24
    4e34:	d2 f7       	brpl	.-12     	; 0x4e2a <nrk_event_signal+0x16>
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
    4e36:	80 91 1a 05 	lds	r24, 0x051A
    4e3a:	90 91 1b 05 	lds	r25, 0x051B
    4e3e:	a0 91 1c 05 	lds	r26, 0x051C
    4e42:	b0 91 1d 05 	lds	r27, 0x051D
    4e46:	8e 21       	and	r24, r14
    4e48:	9f 21       	and	r25, r15
    4e4a:	a0 23       	and	r26, r16
    4e4c:	b1 23       	and	r27, r17
    4e4e:	00 97       	sbiw	r24, 0x00	; 0
    4e50:	a1 05       	cpc	r26, r1
    4e52:	b1 05       	cpc	r27, r1
    4e54:	11 f4       	brne	.+4      	; 0x4e5a <nrk_event_signal+0x46>
    4e56:	81 e0       	ldi	r24, 0x01	; 1
    4e58:	43 c0       	rjmp	.+134    	; 0x4ee0 <nrk_event_signal+0xcc>
		    	return NRK_ERROR;
		    else return NRK_OK;
		
    4e5a:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>
    4e5e:	e9 e7       	ldi	r30, 0x79	; 121
    4e60:	f9 e0       	ldi	r31, 0x09	; 9
    4e62:	dd 24       	eor	r13, r13

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
			{
    4e64:	80 81       	ld	r24, Z
    4e66:	81 30       	cpi	r24, 0x01	; 1
    4e68:	b9 f4       	brne	.+46     	; 0x4e98 <nrk_event_signal+0x84>
			      /* Conversion to 8-bit value*/
    4e6a:	82 85       	ldd	r24, Z+10	; 0x0a
    4e6c:	93 85       	ldd	r25, Z+11	; 0x0b
    4e6e:	a4 85       	ldd	r26, Z+12	; 0x0c
    4e70:	b5 85       	ldd	r27, Z+13	; 0x0d
    4e72:	8e 21       	and	r24, r14
    4e74:	9f 21       	and	r25, r15
    4e76:	a0 23       	and	r26, r16
    4e78:	b1 23       	and	r27, r17
    4e7a:	00 97       	sbiw	r24, 0x00	; 0
    4e7c:	a1 05       	cpc	r26, r1
    4e7e:	b1 05       	cpc	r27, r1
    4e80:	59 f0       	breq	.+22     	; 0x4e98 <nrk_event_signal+0x84>
			      uint16_t val=get_adc_val();

    4e82:	83 e0       	ldi	r24, 0x03	; 3
    4e84:	82 83       	std	Z+2, r24	; 0x02
				if(size==2)
    4e86:	17 86       	std	Z+15, r1	; 0x0f
    4e88:	16 86       	std	Z+14, r1	; 0x0e
			      	{
    4e8a:	10 82       	st	Z, r1
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    4e8c:	e2 86       	std	Z+10, r14	; 0x0a
    4e8e:	f3 86       	std	Z+11, r15	; 0x0b
    4e90:	04 87       	std	Z+12, r16	; 0x0c
    4e92:	15 87       	std	Z+13, r17	; 0x0d
    4e94:	dd 24       	eor	r13, r13
    4e96:	d3 94       	inc	r13
				}

				if(size==1)
			      	{
    4e98:	80 81       	ld	r24, Z
    4e9a:	82 30       	cpi	r24, 0x02	; 2
    4e9c:	a1 f4       	brne	.+40     	; 0x4ec6 <nrk_event_signal+0xb2>
			      		buffer[count]=(val>>2)  & 0xFF;
    4e9e:	82 85       	ldd	r24, Z+10	; 0x0a
    4ea0:	93 85       	ldd	r25, Z+11	; 0x0b
    4ea2:	a4 85       	ldd	r26, Z+12	; 0x0c
    4ea4:	b5 85       	ldd	r27, Z+13	; 0x0d
    4ea6:	8e 15       	cp	r24, r14
    4ea8:	9f 05       	cpc	r25, r15
    4eaa:	a0 07       	cpc	r26, r16
    4eac:	b1 07       	cpc	r27, r17
    4eae:	59 f4       	brne	.+22     	; 0x4ec6 <nrk_event_signal+0xb2>
				}

    4eb0:	83 e0       	ldi	r24, 0x03	; 3
    4eb2:	82 83       	std	Z+2, r24	; 0x02

    4eb4:	17 86       	std	Z+15, r1	; 0x0f
    4eb6:	16 86       	std	Z+14, r1	; 0x0e
			} else if(channel==BAT)
    4eb8:	10 82       	st	Z, r1
			{
			uint16_t tmp;
			tmp=read_voltage_status();
    4eba:	12 86       	std	Z+10, r1	; 0x0a
    4ebc:	13 86       	std	Z+11, r1	; 0x0b
    4ebe:	14 86       	std	Z+12, r1	; 0x0c
    4ec0:	15 86       	std	Z+13, r1	; 0x0d
    4ec2:	dd 24       	eor	r13, r13
    4ec4:	d3 94       	inc	r13
    4ec6:	b1 96       	adiw	r30, 0x21	; 33
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
		    else return NRK_OK;
		
	    
    4ec8:	8a e0       	ldi	r24, 0x0A	; 10
    4eca:	ee 31       	cpi	r30, 0x1E	; 30
    4ecc:	f8 07       	cpc	r31, r24
    4ece:	51 f6       	brne	.-108    	; 0x4e64 <nrk_event_signal+0x50>
			if(size==2)
				{
					buffer[count]=tmp & 0xFF;
					count++;
					buffer[count]=(tmp>>8) & 0xFF;
				}
    4ed0:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
			if(size==1)
    4ed4:	dd 20       	and	r13, r13
    4ed6:	19 f0       	breq	.+6      	; 0x4ede <nrk_event_signal+0xca>
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    4edc:	05 c0       	rjmp	.+10     	; 0x4ee8 <nrk_event_signal+0xd4>
				{
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
			{
    4ede:	82 e0       	ldi	r24, 0x02	; 2
    4ee0:	0e 94 a9 23 	call	0x4752	; 0x4752 <_nrk_errno_set>
    4ee4:	8f ef       	ldi	r24, 0xFF	; 255
    4ee6:	9f ef       	ldi	r25, 0xFF	; 255
    4ee8:	1f 91       	pop	r17
    4eea:	0f 91       	pop	r16
    4eec:	ff 90       	pop	r15
    4eee:	ef 90       	pop	r14
    4ef0:	df 90       	pop	r13
    4ef2:	08 95       	ret

00004ef4 <nrk_signal_delete>:


#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
    4ef4:	ef 92       	push	r14
    4ef6:	ff 92       	push	r15
    4ef8:	0f 93       	push	r16
    4efa:	1f 93       	push	r17
    4efc:	cf 93       	push	r28
    4efe:	df 93       	push	r29
} while(0)


#define ADC_VREF_2_56() \
    4f00:	c8 2f       	mov	r28, r24
    4f02:	dd 27       	eor	r29, r29
    4f04:	c7 fd       	sbrc	r28, 7
    4f06:	d0 95       	com	r29
    4f08:	a1 e0       	ldi	r26, 0x01	; 1
    4f0a:	ea 2e       	mov	r14, r26
    4f0c:	f1 2c       	mov	r15, r1
    4f0e:	01 2d       	mov	r16, r1
    4f10:	11 2d       	mov	r17, r1
    4f12:	0c 2e       	mov	r0, r28
    4f14:	04 c0       	rjmp	.+8      	; 0x4f1e <nrk_signal_delete+0x2a>
    4f16:	ee 0c       	add	r14, r14
    4f18:	ff 1c       	adc	r15, r15
    4f1a:	00 1f       	adc	r16, r16
    4f1c:	11 1f       	adc	r17, r17
    4f1e:	0a 94       	dec	r0
    4f20:	d2 f7       	brpl	.-12     	; 0x4f16 <nrk_signal_delete+0x22>
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
    4f22:	80 91 1a 05 	lds	r24, 0x051A
    4f26:	90 91 1b 05 	lds	r25, 0x051B
    4f2a:	a0 91 1c 05 	lds	r26, 0x051C
    4f2e:	b0 91 1d 05 	lds	r27, 0x051D
    4f32:	8e 21       	and	r24, r14
    4f34:	9f 21       	and	r25, r15
    4f36:	a0 23       	and	r26, r16
    4f38:	b1 23       	and	r27, r17
    4f3a:	00 97       	sbiw	r24, 0x00	; 0
    4f3c:	a1 05       	cpc	r26, r1
    4f3e:	b1 05       	cpc	r27, r1
    4f40:	19 f4       	brne	.+6      	; 0x4f48 <nrk_signal_delete+0x54>
    4f42:	8f ef       	ldi	r24, 0xFF	; 255
    4f44:	9f ef       	ldi	r25, 0xFF	; 255
    4f46:	5d c0       	rjmp	.+186    	; 0x5002 <nrk_signal_delete+0x10e>
} while(0)

    4f48:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>
    4f4c:	e2 e7       	ldi	r30, 0x72	; 114
    4f4e:	f9 e0       	ldi	r31, 0x09	; 9
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
} while(0)

// Macros for obtaining the latest sample value
    4f50:	a8 01       	movw	r20, r16
    4f52:	97 01       	movw	r18, r14
    4f54:	20 95       	com	r18
    4f56:	30 95       	com	r19
    4f58:	40 95       	com	r20
    4f5a:	50 95       	com	r21
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

    4f5c:	80 85       	ldd	r24, Z+8	; 0x08
    4f5e:	8f 3f       	cpi	r24, 0xFF	; 255
    4f60:	41 f1       	breq	.+80     	; 0x4fb2 <nrk_signal_delete+0xbe>
// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

    4f62:	85 85       	ldd	r24, Z+13	; 0x0d
    4f64:	96 85       	ldd	r25, Z+14	; 0x0e
    4f66:	a7 85       	ldd	r26, Z+15	; 0x0f
    4f68:	b0 89       	ldd	r27, Z+16	; 0x10
    4f6a:	8e 15       	cp	r24, r14
    4f6c:	9f 05       	cpc	r25, r15
    4f6e:	a0 07       	cpc	r26, r16
    4f70:	b1 07       	cpc	r27, r17
    4f72:	39 f4       	brne	.+14     	; 0x4f82 <nrk_signal_delete+0x8e>
#define ADC_SAMPLE_SINGLE() \
    do { \
ADCSRA |= BM(ADSC); \
    4f74:	11 8a       	std	Z+17, r1	; 0x11
    4f76:	12 8a       	std	Z+18, r1	; 0x12
    4f78:	13 8a       	std	Z+19, r1	; 0x13
    4f7a:	14 8a       	std	Z+20, r1	; 0x14
while (!(ADCSRA & 0x10)); \
    4f7c:	17 82       	std	Z+7, r1	; 0x07
} while(0)
    4f7e:	83 e0       	ldi	r24, 0x03	; 3
    4f80:	81 87       	std	Z+9, r24	; 0x09

// Macros for obtaining the latest sample value
    4f82:	85 85       	ldd	r24, Z+13	; 0x0d
    4f84:	96 85       	ldd	r25, Z+14	; 0x0e
    4f86:	a7 85       	ldd	r26, Z+15	; 0x0f
    4f88:	b0 89       	ldd	r27, Z+16	; 0x10
    4f8a:	82 23       	and	r24, r18
    4f8c:	93 23       	and	r25, r19
    4f8e:	a4 23       	and	r26, r20
    4f90:	b5 23       	and	r27, r21
    4f92:	85 87       	std	Z+13, r24	; 0x0d
    4f94:	96 87       	std	Z+14, r25	; 0x0e
    4f96:	a7 87       	std	Z+15, r26	; 0x0f
    4f98:	b0 8b       	std	Z+16, r27	; 0x10
#define ADC_GET_SAMPLE_10(x) \
    4f9a:	81 89       	ldd	r24, Z+17	; 0x11
    4f9c:	92 89       	ldd	r25, Z+18	; 0x12
    4f9e:	a3 89       	ldd	r26, Z+19	; 0x13
    4fa0:	b4 89       	ldd	r27, Z+20	; 0x14
    4fa2:	82 23       	and	r24, r18
    4fa4:	93 23       	and	r25, r19
    4fa6:	a4 23       	and	r26, r20
    4fa8:	b5 23       	and	r27, r21
    4faa:	81 8b       	std	Z+17, r24	; 0x11
    4fac:	92 8b       	std	Z+18, r25	; 0x12
    4fae:	a3 8b       	std	Z+19, r26	; 0x13
    4fb0:	b4 8b       	std	Z+20, r27	; 0x14
    4fb2:	b1 96       	adiw	r30, 0x21	; 33
#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)
    4fb4:	8a e0       	ldi	r24, 0x0A	; 10
    4fb6:	e7 31       	cpi	r30, 0x17	; 23
    4fb8:	f8 07       	cpc	r31, r24
    4fba:	81 f6       	brne	.-96     	; 0x4f5c <nrk_signal_delete+0x68>
// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
do { \
x =  ADCL; \
x |= ADCH << 8; \
} while (0)
    4fbc:	2e ef       	ldi	r18, 0xFE	; 254
    4fbe:	3f ef       	ldi	r19, 0xFF	; 255
    4fc0:	4f ef       	ldi	r20, 0xFF	; 255
    4fc2:	5f ef       	ldi	r21, 0xFF	; 255
    4fc4:	04 c0       	rjmp	.+8      	; 0x4fce <nrk_signal_delete+0xda>
    4fc6:	22 0f       	add	r18, r18
    4fc8:	33 1f       	adc	r19, r19
    4fca:	44 1f       	adc	r20, r20
    4fcc:	55 1f       	adc	r21, r21
    4fce:	ca 95       	dec	r28
    4fd0:	d2 f7       	brpl	.-12     	; 0x4fc6 <nrk_signal_delete+0xd2>
    4fd2:	80 91 1a 05 	lds	r24, 0x051A
    4fd6:	90 91 1b 05 	lds	r25, 0x051B
    4fda:	a0 91 1c 05 	lds	r26, 0x051C
    4fde:	b0 91 1d 05 	lds	r27, 0x051D
    4fe2:	82 23       	and	r24, r18
    4fe4:	93 23       	and	r25, r19
    4fe6:	a4 23       	and	r26, r20
    4fe8:	b5 23       	and	r27, r21
    4fea:	80 93 1a 05 	sts	0x051A, r24
    4fee:	90 93 1b 05 	sts	0x051B, r25
    4ff2:	a0 93 1c 05 	sts	0x051C, r26
    4ff6:	b0 93 1d 05 	sts	0x051D, r27

    4ffa:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
    4ffe:	81 e0       	ldi	r24, 0x01	; 1
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	df 91       	pop	r29
    5004:	cf 91       	pop	r28
    5006:	1f 91       	pop	r17
    5008:	0f 91       	pop	r16
    500a:	ff 90       	pop	r15
    500c:	ef 90       	pop	r14
    500e:	08 95       	ret

00005010 <nrk_sem_pend>:
			PORTF |= PWR_CTRL_MASK;
		    	is_open=0; 
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
    5010:	1f 93       	push	r17
    5012:	cf 93       	push	r28
    5014:	df 93       	push	r29
			if(key==SENSOR_SELECT) return channel;
	     		return NRK_ERROR;
    5016:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <nrk_get_resource_index>
    501a:	18 2f       	mov	r17, r24
			
    501c:	8f 3f       	cpi	r24, 0xFF	; 255
    501e:	11 f4       	brne	.+4      	; 0x5024 <nrk_sem_pend+0x14>
    5020:	81 e0       	ldi	r24, 0x01	; 1
    5022:	03 c0       	rjmp	.+6      	; 0x502a <nrk_sem_pend+0x1a>
             case SET_STATUS:
    5024:	85 30       	cpi	r24, 0x05	; 5
    5026:	31 f4       	brne	.+12     	; 0x5034 <nrk_sem_pend+0x24>
    5028:	82 e0       	ldi	r24, 0x02	; 2
    502a:	0e 94 a9 23 	call	0x4752	; 0x4752 <_nrk_errno_set>
    502e:	8f ef       	ldi	r24, 0xFF	; 255
    5030:	9f ef       	ldi	r25, 0xFF	; 255
    5032:	3e c0       	rjmp	.+124    	; 0x50b0 <nrk_sem_pend+0xa0>
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    5034:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>
			{
    5038:	81 2f       	mov	r24, r17
    503a:	99 27       	eor	r25, r25
    503c:	87 fd       	sbrc	r24, 7
    503e:	90 95       	com	r25
    5040:	ec 01       	movw	r28, r24
    5042:	cc 0f       	add	r28, r28
    5044:	dd 1f       	adc	r29, r29
    5046:	c8 0f       	add	r28, r24
    5048:	d9 1f       	adc	r29, r25
    504a:	c7 5e       	subi	r28, 0xE7	; 231
    504c:	d5 4f       	sbci	r29, 0xF5	; 245
    504e:	8a 81       	ldd	r24, Y+2	; 0x02
    5050:	88 23       	and	r24, r24
    5052:	d9 f4       	brne	.+54     	; 0x508a <nrk_sem_pend+0x7a>
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
    5054:	e0 91 39 0a 	lds	r30, 0x0A39
    5058:	f0 91 3a 0a 	lds	r31, 0x0A3A
    505c:	87 81       	ldd	r24, Z+7	; 0x07
    505e:	82 60       	ori	r24, 0x02	; 2
    5060:	87 83       	std	Z+7, r24	; 0x07
			  {
    5062:	e0 91 39 0a 	lds	r30, 0x0A39
    5066:	f0 91 3a 0a 	lds	r31, 0x0A3A
    506a:	81 2f       	mov	r24, r17
    506c:	99 27       	eor	r25, r25
    506e:	87 fd       	sbrc	r24, 7
    5070:	90 95       	com	r25
    5072:	a9 2f       	mov	r26, r25
    5074:	b9 2f       	mov	r27, r25
    5076:	81 8b       	std	Z+17, r24	; 0x11
    5078:	92 8b       	std	Z+18, r25	; 0x12
    507a:	a3 8b       	std	Z+19, r26	; 0x13
    507c:	b4 8b       	std	Z+20, r27	; 0x14
				channel=value;
				   //ADC_VREF_2_56();	
    507e:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
				ADC_VREF_VCC();	
    5082:	80 e0       	ldi	r24, 0x00	; 0
    5084:	90 e0       	ldi	r25, 0x00	; 0
    5086:	0e 94 ad 2a 	call	0x555a	; 0x555a <nrk_wait_until_ticks>
				ADC_SET_CHANNEL (AUDIO);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;
    508a:	8a 81       	ldd	r24, Y+2	; 0x02
    508c:	81 50       	subi	r24, 0x01	; 1
    508e:	8a 83       	std	Y+2, r24	; 0x02

    5090:	e0 91 39 0a 	lds	r30, 0x0A39
    5094:	f0 91 3a 0a 	lds	r31, 0x0A3A
    5098:	89 81       	ldd	r24, Y+1	; 0x01
    509a:	83 87       	std	Z+11, r24	; 0x0b
			  } else
    509c:	e0 91 39 0a 	lds	r30, 0x0A39
    50a0:	f0 91 3a 0a 	lds	r31, 0x0A3A
    50a4:	81 e0       	ldi	r24, 0x01	; 1
    50a6:	84 83       	std	Z+4, r24	; 0x04
			  {
    50a8:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
    50ac:	81 e0       	ldi	r24, 0x01	; 1
    50ae:	90 e0       	ldi	r25, 0x00	; 0
    50b0:	df 91       	pop	r29
    50b2:	cf 91       	pop	r28
    50b4:	1f 91       	pop	r17
    50b6:	08 95       	ret

000050b8 <nrk_event_wait>:
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
    50b8:	9b 01       	movw	r18, r22
    50ba:	ac 01       	movw	r20, r24
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
    50bc:	e0 91 39 0a 	lds	r30, 0x0A39
    50c0:	f0 91 3a 0a 	lds	r31, 0x0A3A
    50c4:	85 85       	ldd	r24, Z+13	; 0x0d
    50c6:	96 85       	ldd	r25, Z+14	; 0x0e
    50c8:	a7 85       	ldd	r26, Z+15	; 0x0f
    50ca:	b0 89       	ldd	r27, Z+16	; 0x10
    50cc:	82 23       	and	r24, r18
    50ce:	93 23       	and	r25, r19
    50d0:	a4 23       	and	r26, r20
    50d2:	b5 23       	and	r27, r21
    50d4:	00 97       	sbiw	r24, 0x00	; 0
    50d6:	a1 05       	cpc	r26, r1
    50d8:	b1 05       	cpc	r27, r1
    50da:	29 f4       	brne	.+10     	; 0x50e6 <nrk_event_wait+0x2e>
    50dc:	60 e0       	ldi	r22, 0x00	; 0
    50de:	70 e0       	ldi	r23, 0x00	; 0
    50e0:	80 e0       	ldi	r24, 0x00	; 0
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	08 95       	ret
				if(val<min)min=val;
				if(val>max)max=val;
    50e6:	21 8b       	std	Z+17, r18	; 0x11
    50e8:	32 8b       	std	Z+18, r19	; 0x12
    50ea:	43 8b       	std	Z+19, r20	; 0x13
    50ec:	54 8b       	std	Z+20, r21	; 0x14
				// 8 Khz
    50ee:	81 e0       	ldi	r24, 0x01	; 1
    50f0:	87 83       	std	Z+7, r24	; 0x07
				}
			 	val=max-min;	
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
    50f2:	00 90 29 0a 	lds	r0, 0x0A29
    50f6:	04 c0       	rjmp	.+8      	; 0x5100 <nrk_event_wait+0x48>
    50f8:	56 95       	lsr	r21
    50fa:	47 95       	ror	r20
    50fc:	37 95       	ror	r19
    50fe:	27 95       	ror	r18
    5100:	0a 94       	dec	r0
    5102:	d2 f7       	brpl	.-12     	; 0x50f8 <nrk_event_wait+0x40>
    5104:	c9 01       	movw	r24, r18
    5106:	81 70       	andi	r24, 0x01	; 1
    5108:	90 70       	andi	r25, 0x00	; 0
    510a:	89 2b       	or	r24, r25
    510c:	19 f0       	breq	.+6      	; 0x5114 <nrk_event_wait+0x5c>
			      		buffer[count]=(val>>8)  & 0xFF;
    510e:	0e 94 48 2a 	call	0x5490	; 0x5490 <nrk_wait_until_nw>
    5112:	04 c0       	rjmp	.+8      	; 0x511c <nrk_event_wait+0x64>
				}

    5114:	80 e0       	ldi	r24, 0x00	; 0
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	0e 94 ad 2a 	call	0x555a	; 0x555a <nrk_wait_until_ticks>
				if(size==1)
			      	{
    511c:	e0 91 39 0a 	lds	r30, 0x0A39
    5120:	f0 91 3a 0a 	lds	r31, 0x0A3A
    5124:	61 89       	ldd	r22, Z+17	; 0x11
    5126:	72 89       	ldd	r23, Z+18	; 0x12
    5128:	83 89       	ldd	r24, Z+19	; 0x13
    512a:	94 89       	ldd	r25, Z+20	; 0x14
			      		buffer[count]=(val>>2)  & 0xFF;
    512c:	08 95       	ret

0000512e <nrk_get_high_ready_task_ID>:
#include <basic_rf.h>
#include <nrk_timer.h>

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

    512e:	e0 91 2e 0a 	lds	r30, 0x0A2E
    5132:	f0 91 2f 0a 	lds	r31, 0x0A2F
    5136:	80 81       	ld	r24, Z
uint8_t channel;
uint8_t is_open;
    5138:	99 27       	eor	r25, r25
    513a:	08 95       	ret

0000513c <nrk_print_readyQ>:

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
    513c:	e0 91 2e 0a 	lds	r30, 0x0A2E
    5140:	f0 91 2f 0a 	lds	r31, 0x0A2F
    5144:	03 c0       	rjmp	.+6      	; 0x514c <nrk_print_readyQ+0x10>
	ADMUX = BM(REFS0);  \
} while (0)

#define ADC_VREF_VCC() \
    5146:	03 80       	ldd	r0, Z+3	; 0x03
    5148:	f4 81       	ldd	r31, Z+4	; 0x04
    514a:	e0 2d       	mov	r30, r0
// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)
    514c:	30 97       	sbiw	r30, 0x00	; 0
    514e:	d9 f7       	brne	.-10     	; 0x5146 <nrk_print_readyQ+0xa>
    5150:	08 95       	ret

00005152 <nrk_add_to_readyQ>:
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)


#define ADC_VREF_1_1() \
    5152:	cf 93       	push	r28
    5154:	df 93       	push	r29
    5156:	48 2f       	mov	r20, r24
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)


    5158:	c0 91 70 09 	lds	r28, 0x0970
    515c:	d0 91 71 09 	lds	r29, 0x0971
    5160:	20 97       	sbiw	r28, 0x00	; 0
    5162:	09 f4       	brne	.+2      	; 0x5166 <nrk_add_to_readyQ+0x14>
    5164:	7a c0       	rjmp	.+244    	; 0x525a <nrk_add_to_readyQ+0x108>
#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

    5166:	a0 91 2e 0a 	lds	r26, 0x0A2E
    516a:	b0 91 2f 0a 	lds	r27, 0x0A2F
#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
    516e:	10 97       	sbiw	r26, 0x00	; 0
    5170:	b9 f1       	breq	.+110    	; 0x51e0 <nrk_add_to_readyQ+0x8e>
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    5172:	99 27       	eor	r25, r25
    5174:	87 fd       	sbrc	r24, 7
    5176:	90 95       	com	r25
    5178:	9c 01       	movw	r18, r24
    517a:	65 e0       	ldi	r22, 0x05	; 5
    517c:	22 0f       	add	r18, r18
    517e:	33 1f       	adc	r19, r19
    5180:	6a 95       	dec	r22
    5182:	e1 f7       	brne	.-8      	; 0x517c <nrk_add_to_readyQ+0x2a>
    5184:	28 0f       	add	r18, r24
    5186:	39 1f       	adc	r19, r25
    5188:	2e 58       	subi	r18, 0x8E	; 142
    518a:	36 4f       	sbci	r19, 0xF6	; 246
#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

    518c:	8c 91       	ld	r24, X
    518e:	99 27       	eor	r25, r25
    5190:	bc 01       	movw	r22, r24
    5192:	55 e0       	ldi	r21, 0x05	; 5
    5194:	66 0f       	add	r22, r22
    5196:	77 1f       	adc	r23, r23
    5198:	5a 95       	dec	r21
    519a:	e1 f7       	brne	.-8      	; 0x5194 <nrk_add_to_readyQ+0x42>
    519c:	68 0f       	add	r22, r24
    519e:	79 1f       	adc	r23, r25
    51a0:	6e 58       	subi	r22, 0x8E	; 142
    51a2:	76 4f       	sbci	r23, 0xF6	; 246
    51a4:	fb 01       	movw	r30, r22
    51a6:	84 81       	ldd	r24, Z+4	; 0x04
    51a8:	88 23       	and	r24, r24
    51aa:	29 f0       	breq	.+10     	; 0x51b6 <nrk_add_to_readyQ+0x64>
#define ADC_SAMPLE_SINGLE() \
    51ac:	93 85       	ldd	r25, Z+11	; 0x0b
    51ae:	f9 01       	movw	r30, r18
    51b0:	82 85       	ldd	r24, Z+10	; 0x0a
    51b2:	98 17       	cp	r25, r24
    51b4:	a8 f0       	brcs	.+42     	; 0x51e0 <nrk_add_to_readyQ+0x8e>
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
    51b6:	f9 01       	movw	r30, r18
    51b8:	84 81       	ldd	r24, Z+4	; 0x04
    51ba:	88 23       	and	r24, r24
    51bc:	31 f0       	breq	.+12     	; 0x51ca <nrk_add_to_readyQ+0x78>
} while(0)
    51be:	fb 01       	movw	r30, r22
    51c0:	92 85       	ldd	r25, Z+10	; 0x0a
    51c2:	f9 01       	movw	r30, r18
    51c4:	83 85       	ldd	r24, Z+11	; 0x0b
    51c6:	98 17       	cp	r25, r24
    51c8:	58 f0       	brcs	.+22     	; 0x51e0 <nrk_add_to_readyQ+0x8e>

// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
    51ca:	fb 01       	movw	r30, r22
    51cc:	92 85       	ldd	r25, Z+10	; 0x0a
    51ce:	f9 01       	movw	r30, r18
    51d0:	82 85       	ldd	r24, Z+10	; 0x0a
    51d2:	98 17       	cp	r25, r24
    51d4:	28 f0       	brcs	.+10     	; 0x51e0 <nrk_add_to_readyQ+0x8e>
do { \
x =  ADCL; \
x |= ADCH << 8; \
} while (0)
    51d6:	fd 01       	movw	r30, r26
    51d8:	a3 81       	ldd	r26, Z+3	; 0x03
    51da:	b4 81       	ldd	r27, Z+4	; 0x04

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)
    51dc:	10 97       	sbiw	r26, 0x00	; 0
    51de:	b1 f6       	brne	.-84     	; 0x518c <nrk_add_to_readyQ+0x3a>

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
uint8_t count=0;
// key and value get passed as opt and size
    51e0:	48 83       	st	Y, r20
uint8_t key=opt;
    51e2:	e0 91 70 09 	lds	r30, 0x0970
    51e6:	f0 91 71 09 	lds	r31, 0x0971
    51ea:	23 81       	ldd	r18, Z+3	; 0x03
    51ec:	34 81       	ldd	r19, Z+4	; 0x04
    51ee:	30 93 71 09 	sts	0x0971, r19
    51f2:	20 93 70 09 	sts	0x0970, r18
uint8_t value=size;

    51f6:	80 91 2e 0a 	lds	r24, 0x0A2E
    51fa:	90 91 2f 0a 	lds	r25, 0x0A2F
    51fe:	a8 17       	cp	r26, r24
    5200:	b9 07       	cpc	r27, r25
    5202:	a1 f4       	brne	.+40     	; 0x522c <nrk_add_to_readyQ+0xda>
     switch(action)
     {
    5204:	10 97       	sbiw	r26, 0x00	; 0
    5206:	31 f0       	breq	.+12     	; 0x5214 <nrk_add_to_readyQ+0xc2>
            case INIT: 
    5208:	bc 83       	std	Y+4, r27	; 0x04
    520a:	ab 83       	std	Y+3, r26	; 0x03
			// Set the pwr ctrl pin as output
    520c:	1a 82       	std	Y+2, r1	; 0x02
    520e:	19 82       	std	Y+1, r1	; 0x01
  			DDRF = PWR_CTRL_MASK;
    5210:	fd 01       	movw	r30, r26
    5212:	05 c0       	rjmp	.+10     	; 0x521e <nrk_add_to_readyQ+0xcc>
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
    5214:	1c 82       	std	Y+4, r1	; 0x04
    5216:	1b 82       	std	Y+3, r1	; 0x03
		      return 1;
    5218:	1a 82       	std	Y+2, r1	; 0x02
    521a:	19 82       	std	Y+1, r1	; 0x01
	     
    521c:	f9 01       	movw	r30, r18
    521e:	d2 83       	std	Z+2, r29	; 0x02
    5220:	c1 83       	std	Z+1, r28	; 0x01
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    5222:	d0 93 2f 0a 	sts	0x0A2F, r29
    5226:	c0 93 2e 0a 	sts	0x0A2E, r28
    522a:	17 c0       	rjmp	.+46     	; 0x525a <nrk_add_to_readyQ+0x108>
    522c:	fd 01       	movw	r30, r26
    522e:	81 81       	ldd	r24, Z+1	; 0x01
    5230:	92 81       	ldd	r25, Z+2	; 0x02
		    is_open=1; 
		    if(opt&READ_FLAG)
		    {
		   	// Turn on Sensor Node Power
    5232:	a2 17       	cp	r26, r18
    5234:	b3 07       	cpc	r27, r19
    5236:	51 f0       	breq	.+20     	; 0x524c <nrk_add_to_readyQ+0xfa>
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
    5238:	9a 83       	std	Y+2, r25	; 0x02
    523a:	89 83       	std	Y+1, r24	; 0x01
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    523c:	bc 83       	std	Y+4, r27	; 0x04
    523e:	ab 83       	std	Y+3, r26	; 0x03
		    	return NRK_OK;
    5240:	81 81       	ldd	r24, Z+1	; 0x01
    5242:	92 81       	ldd	r25, Z+2	; 0x02
    5244:	fc 01       	movw	r30, r24
    5246:	d4 83       	std	Z+4, r29	; 0x04
    5248:	c3 83       	std	Z+3, r28	; 0x03
    524a:	04 c0       	rjmp	.+8      	; 0x5254 <nrk_add_to_readyQ+0x102>
		    }
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
		    }
    524c:	1c 82       	std	Y+4, r1	; 0x04
    524e:	1b 82       	std	Y+3, r1	; 0x03
		    if(opt&APPEND_FLAG)
    5250:	9a 83       	std	Y+2, r25	; 0x02
    5252:	89 83       	std	Y+1, r24	; 0x01
		    {
    5254:	fd 01       	movw	r30, r26
    5256:	d2 83       	std	Z+2, r29	; 0x02
    5258:	c1 83       	std	Z+1, r28	; 0x01
    525a:	df 91       	pop	r29
    525c:	cf 91       	pop	r28
    525e:	08 95       	ret

00005260 <nrk_rem_from_readyQ>:
		    	return NRK_ERROR;
		    else return NRK_OK;
		
	    

             case READ:
    5260:	cf 93       	push	r28
    5262:	df 93       	push	r29
				{
					buffer[count]=tmp & 0xFF;
					count++;
					buffer[count]=(tmp>>8) & 0xFF;
				}
			if(size==1)
    5264:	a0 91 2e 0a 	lds	r26, 0x0A2E
    5268:	b0 91 2f 0a 	lds	r27, 0x0A2F
    526c:	10 97       	sbiw	r26, 0x00	; 0
    526e:	09 f4       	brne	.+2      	; 0x5272 <nrk_rem_from_readyQ+0x12>
    5270:	46 c0       	rjmp	.+140    	; 0x52fe <nrk_rem_from_readyQ+0x9e>
				{
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
			{
    5272:	48 2f       	mov	r20, r24
    5274:	55 27       	eor	r21, r21
    5276:	47 fd       	sbrc	r20, 7
    5278:	50 95       	com	r21
    527a:	8c 91       	ld	r24, X
    527c:	99 27       	eor	r25, r25
    527e:	84 17       	cp	r24, r20
    5280:	95 07       	cpc	r25, r21
    5282:	69 f4       	brne	.+26     	; 0x529e <nrk_rem_from_readyQ+0x3e>
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
    5284:	ed 01       	movw	r28, r26
    5286:	eb 81       	ldd	r30, Y+3	; 0x03
    5288:	fc 81       	ldd	r31, Y+4	; 0x04
    528a:	f0 93 2f 0a 	sts	0x0A2F, r31
    528e:	e0 93 2e 0a 	sts	0x0A2E, r30
			      uint16_t val,min, max;
    5292:	12 82       	std	Z+2, r1	; 0x02
    5294:	11 82       	std	Z+1, r1	; 0x01
    5296:	16 c0       	rjmp	.+44     	; 0x52c4 <nrk_rem_from_readyQ+0x64>
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
    5298:	d9 01       	movw	r26, r18
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
    529a:	23 2b       	or	r18, r19
    529c:	81 f1       	breq	.+96     	; 0x52fe <nrk_rem_from_readyQ+0x9e>
    529e:	8c 91       	ld	r24, X
    52a0:	99 27       	eor	r25, r25
    52a2:	fd 01       	movw	r30, r26
    52a4:	23 81       	ldd	r18, Z+3	; 0x03
    52a6:	34 81       	ldd	r19, Z+4	; 0x04
    52a8:	84 17       	cp	r24, r20
    52aa:	95 07       	cpc	r25, r21
    52ac:	a9 f7       	brne	.-22     	; 0x5298 <nrk_rem_from_readyQ+0x38>
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
    52ae:	c1 81       	ldd	r28, Z+1	; 0x01
    52b0:	d2 81       	ldd	r29, Z+2	; 0x02
    52b2:	3c 83       	std	Y+4, r19	; 0x04
    52b4:	2b 83       	std	Y+3, r18	; 0x03
				nrk_spin_wait_us(125);	
    52b6:	83 81       	ldd	r24, Z+3	; 0x03
    52b8:	94 81       	ldd	r25, Z+4	; 0x04
    52ba:	00 97       	sbiw	r24, 0x00	; 0
    52bc:	19 f0       	breq	.+6      	; 0x52c4 <nrk_rem_from_readyQ+0x64>
				}
    52be:	fc 01       	movw	r30, r24
    52c0:	d2 83       	std	Z+2, r29	; 0x02
    52c2:	c1 83       	std	Z+1, r28	; 0x01
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}
    52c4:	e0 91 70 09 	lds	r30, 0x0970
    52c8:	f0 91 71 09 	lds	r31, 0x0971
    52cc:	30 97       	sbiw	r30, 0x00	; 0
    52ce:	41 f4       	brne	.+16     	; 0x52e0 <nrk_rem_from_readyQ+0x80>

    52d0:	b0 93 71 09 	sts	0x0971, r27
    52d4:	a0 93 70 09 	sts	0x0970, r26
				if(size==1)
    52d8:	ed 01       	movw	r28, r26
    52da:	1c 82       	std	Y+4, r1	; 0x04
    52dc:	1b 82       	std	Y+3, r1	; 0x03
    52de:	09 c0       	rjmp	.+18     	; 0x52f2 <nrk_rem_from_readyQ+0x92>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}
    52e0:	ed 01       	movw	r28, r26
    52e2:	fc 83       	std	Y+4, r31	; 0x04
    52e4:	eb 83       	std	Y+3, r30	; 0x03

    52e6:	b2 83       	std	Z+2, r27	; 0x02
    52e8:	a1 83       	std	Z+1, r26	; 0x01
			}
    52ea:	b0 93 71 09 	sts	0x0971, r27
    52ee:	a0 93 70 09 	sts	0x0970, r26
			
		      count++;
    52f2:	e0 91 70 09 	lds	r30, 0x0970
    52f6:	f0 91 71 09 	lds	r31, 0x0971
    52fa:	12 82       	std	Z+2, r1	; 0x02
    52fc:	11 82       	std	Z+1, r1	; 0x01
    52fe:	df 91       	pop	r29
    5300:	cf 91       	pop	r28
    5302:	08 95       	ret

00005304 <nrk_get_pid>:
    5304:	e0 91 39 0a 	lds	r30, 0x0A39
    5308:	f0 91 3a 0a 	lds	r31, 0x0A3A
    530c:	80 85       	ldd	r24, Z+8	; 0x08
    530e:	99 27       	eor	r25, r25
    5310:	08 95       	ret

00005312 <_nrk_wait_for_scheduler>:
    5312:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <nrk_idle>
    5316:	e0 91 39 0a 	lds	r30, 0x0A39
    531a:	f0 91 3a 0a 	lds	r31, 0x0A3A
    531e:	85 81       	ldd	r24, Z+5	; 0x05
    5320:	88 23       	and	r24, r24
    5322:	b9 f7       	brne	.-18     	; 0x5312 <_nrk_wait_for_scheduler>
    5324:	08 95       	ret

00005326 <nrk_wait>:
    5326:	ff 92       	push	r15
    5328:	0f 93       	push	r16
    532a:	1f 93       	push	r17
    532c:	cf 93       	push	r28
    532e:	df 93       	push	r29
    5330:	cd b7       	in	r28, 0x3d	; 61
    5332:	de b7       	in	r29, 0x3e	; 62
    5334:	28 97       	sbiw	r28, 0x08	; 8
    5336:	0f b6       	in	r0, 0x3f	; 63
    5338:	f8 94       	cli
    533a:	de bf       	out	0x3e, r29	; 62
    533c:	0f be       	out	0x3f, r0	; 63
    533e:	cd bf       	out	0x3d, r28	; 61
    5340:	29 83       	std	Y+1, r18	; 0x01
    5342:	3a 83       	std	Y+2, r19	; 0x02
    5344:	4b 83       	std	Y+3, r20	; 0x03
    5346:	5c 83       	std	Y+4, r21	; 0x04
    5348:	6d 83       	std	Y+5, r22	; 0x05
    534a:	7e 83       	std	Y+6, r23	; 0x06
    534c:	8f 83       	std	Y+7, r24	; 0x07
    534e:	98 87       	std	Y+8, r25	; 0x08
    5350:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <nrk_stack_check>
    5354:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>
    5358:	e0 91 39 0a 	lds	r30, 0x0A39
    535c:	f0 91 3a 0a 	lds	r31, 0x0A3A
    5360:	81 e0       	ldi	r24, 0x01	; 1
    5362:	85 83       	std	Z+5, r24	; 0x05
    5364:	81 e0       	ldi	r24, 0x01	; 1
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	90 a3       	std	Z+32, r25	; 0x20
    536a:	87 8f       	std	Z+31, r24	; 0x1f
    536c:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    5370:	f8 2e       	mov	r15, r24
    5372:	29 81       	ldd	r18, Y+1	; 0x01
    5374:	3a 81       	ldd	r19, Y+2	; 0x02
    5376:	4b 81       	ldd	r20, Y+3	; 0x03
    5378:	5c 81       	ldd	r21, Y+4	; 0x04
    537a:	6d 81       	ldd	r22, Y+5	; 0x05
    537c:	7e 81       	ldd	r23, Y+6	; 0x06
    537e:	8f 81       	ldd	r24, Y+7	; 0x07
    5380:	98 85       	ldd	r25, Y+8	; 0x08
    5382:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <_nrk_time_to_ticks>
    5386:	e0 91 39 0a 	lds	r30, 0x0A39
    538a:	f0 91 3a 0a 	lds	r31, 0x0A3A
    538e:	0f 2d       	mov	r16, r15
    5390:	11 27       	eor	r17, r17
    5392:	80 0f       	add	r24, r16
    5394:	91 1f       	adc	r25, r17
    5396:	96 8b       	std	Z+22, r25	; 0x16
    5398:	85 8b       	std	Z+21, r24	; 0x15
    539a:	87 ef       	ldi	r24, 0xF7	; 247
    539c:	8f 15       	cp	r24, r15
    539e:	70 f0       	brcs	.+28     	; 0x53bc <nrk_wait+0x96>
    53a0:	0e 94 33 32 	call	0x6466	; 0x6466 <_nrk_get_next_wakeup>
    53a4:	0e 5f       	subi	r16, 0xFE	; 254
    53a6:	1f 4f       	sbci	r17, 0xFF	; 255
    53a8:	99 27       	eor	r25, r25
    53aa:	80 17       	cp	r24, r16
    53ac:	91 07       	cpc	r25, r17
    53ae:	34 f0       	brlt	.+12     	; 0x53bc <nrk_wait+0x96>
    53b0:	8f 2d       	mov	r24, r15
    53b2:	8e 5f       	subi	r24, 0xFE	; 254
    53b4:	80 93 c4 08 	sts	0x08C4, r24
    53b8:	0e 94 38 32 	call	0x6470	; 0x6470 <_nrk_set_next_wakeup>
    53bc:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
    53c0:	0e 94 89 29 	call	0x5312	; 0x5312 <_nrk_wait_for_scheduler>
    53c4:	81 e0       	ldi	r24, 0x01	; 1
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	28 96       	adiw	r28, 0x08	; 8
    53ca:	0f b6       	in	r0, 0x3f	; 63
    53cc:	f8 94       	cli
    53ce:	de bf       	out	0x3e, r29	; 62
    53d0:	0f be       	out	0x3f, r0	; 63
    53d2:	cd bf       	out	0x3d, r28	; 61
    53d4:	df 91       	pop	r29
    53d6:	cf 91       	pop	r28
    53d8:	1f 91       	pop	r17
    53da:	0f 91       	pop	r16
    53dc:	ff 90       	pop	r15
    53de:	08 95       	ret

000053e0 <nrk_wait_until>:
    53e0:	8f 92       	push	r8
    53e2:	9f 92       	push	r9
    53e4:	af 92       	push	r10
    53e6:	bf 92       	push	r11
    53e8:	cf 92       	push	r12
    53ea:	df 92       	push	r13
    53ec:	ef 92       	push	r14
    53ee:	ff 92       	push	r15
    53f0:	0f 93       	push	r16
    53f2:	1f 93       	push	r17
    53f4:	cf 93       	push	r28
    53f6:	df 93       	push	r29
    53f8:	cd b7       	in	r28, 0x3d	; 61
    53fa:	de b7       	in	r29, 0x3e	; 62
    53fc:	60 97       	sbiw	r28, 0x10	; 16
    53fe:	0f b6       	in	r0, 0x3f	; 63
    5400:	f8 94       	cli
    5402:	de bf       	out	0x3e, r29	; 62
    5404:	0f be       	out	0x3f, r0	; 63
    5406:	cd bf       	out	0x3d, r28	; 61
    5408:	29 87       	std	Y+9, r18	; 0x09
    540a:	3a 87       	std	Y+10, r19	; 0x0a
    540c:	4b 87       	std	Y+11, r20	; 0x0b
    540e:	5c 87       	std	Y+12, r21	; 0x0c
    5410:	6d 87       	std	Y+13, r22	; 0x0d
    5412:	7e 87       	std	Y+14, r23	; 0x0e
    5414:	8f 87       	std	Y+15, r24	; 0x0f
    5416:	98 8b       	std	Y+16, r25	; 0x10
    5418:	ce 01       	movw	r24, r28
    541a:	01 96       	adiw	r24, 0x01	; 1
    541c:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <nrk_time_get>
    5420:	89 80       	ldd	r8, Y+1	; 0x01
    5422:	9a 80       	ldd	r9, Y+2	; 0x02
    5424:	ab 80       	ldd	r10, Y+3	; 0x03
    5426:	bc 80       	ldd	r11, Y+4	; 0x04
    5428:	cd 80       	ldd	r12, Y+5	; 0x05
    542a:	de 80       	ldd	r13, Y+6	; 0x06
    542c:	ef 80       	ldd	r14, Y+7	; 0x07
    542e:	f8 84       	ldd	r15, Y+8	; 0x08
    5430:	09 85       	ldd	r16, Y+9	; 0x09
    5432:	1a 85       	ldd	r17, Y+10	; 0x0a
    5434:	2b 85       	ldd	r18, Y+11	; 0x0b
    5436:	3c 85       	ldd	r19, Y+12	; 0x0c
    5438:	4d 85       	ldd	r20, Y+13	; 0x0d
    543a:	5e 85       	ldd	r21, Y+14	; 0x0e
    543c:	6f 85       	ldd	r22, Y+15	; 0x0f
    543e:	78 89       	ldd	r23, Y+16	; 0x10
    5440:	ce 01       	movw	r24, r28
    5442:	09 96       	adiw	r24, 0x09	; 9
    5444:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <nrk_time_sub>
    5448:	88 23       	and	r24, r24
    544a:	19 f4       	brne	.+6      	; 0x5452 <nrk_wait_until+0x72>
    544c:	8f ef       	ldi	r24, 0xFF	; 255
    544e:	9f ef       	ldi	r25, 0xFF	; 255
    5450:	0c c0       	rjmp	.+24     	; 0x546a <nrk_wait_until+0x8a>
    5452:	29 85       	ldd	r18, Y+9	; 0x09
    5454:	3a 85       	ldd	r19, Y+10	; 0x0a
    5456:	4b 85       	ldd	r20, Y+11	; 0x0b
    5458:	5c 85       	ldd	r21, Y+12	; 0x0c
    545a:	6d 85       	ldd	r22, Y+13	; 0x0d
    545c:	7e 85       	ldd	r23, Y+14	; 0x0e
    545e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5460:	98 89       	ldd	r25, Y+16	; 0x10
    5462:	0e 94 93 29 	call	0x5326	; 0x5326 <nrk_wait>
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	90 e0       	ldi	r25, 0x00	; 0
    546a:	60 96       	adiw	r28, 0x10	; 16
    546c:	0f b6       	in	r0, 0x3f	; 63
    546e:	f8 94       	cli
    5470:	de bf       	out	0x3e, r29	; 62
    5472:	0f be       	out	0x3f, r0	; 63
    5474:	cd bf       	out	0x3d, r28	; 61
    5476:	df 91       	pop	r29
    5478:	cf 91       	pop	r28
    547a:	1f 91       	pop	r17
    547c:	0f 91       	pop	r16
    547e:	ff 90       	pop	r15
    5480:	ef 90       	pop	r14
    5482:	df 90       	pop	r13
    5484:	cf 90       	pop	r12
    5486:	bf 90       	pop	r11
    5488:	af 90       	pop	r10
    548a:	9f 90       	pop	r9
    548c:	8f 90       	pop	r8
    548e:	08 95       	ret

00005490 <nrk_wait_until_nw>:
    5490:	1f 93       	push	r17
    5492:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>
    5496:	e0 91 39 0a 	lds	r30, 0x0A39
    549a:	f0 91 3a 0a 	lds	r31, 0x0A3A
    549e:	81 e0       	ldi	r24, 0x01	; 1
    54a0:	85 83       	std	Z+5, r24	; 0x05
    54a2:	86 83       	std	Z+6, r24	; 0x06
    54a4:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    54a8:	18 2f       	mov	r17, r24
    54aa:	88 3f       	cpi	r24, 0xF8	; 248
    54ac:	80 f4       	brcc	.+32     	; 0x54ce <nrk_wait_until_nw+0x3e>
    54ae:	0e 94 33 32 	call	0x6466	; 0x6466 <_nrk_get_next_wakeup>
    54b2:	21 2f       	mov	r18, r17
    54b4:	33 27       	eor	r19, r19
    54b6:	2e 5f       	subi	r18, 0xFE	; 254
    54b8:	3f 4f       	sbci	r19, 0xFF	; 255
    54ba:	99 27       	eor	r25, r25
    54bc:	82 17       	cp	r24, r18
    54be:	93 07       	cpc	r25, r19
    54c0:	34 f0       	brlt	.+12     	; 0x54ce <nrk_wait_until_nw+0x3e>
    54c2:	81 2f       	mov	r24, r17
    54c4:	8e 5f       	subi	r24, 0xFE	; 254
    54c6:	80 93 c4 08 	sts	0x08C4, r24
    54ca:	0e 94 38 32 	call	0x6470	; 0x6470 <_nrk_set_next_wakeup>
    54ce:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
    54d2:	0e 94 89 29 	call	0x5312	; 0x5312 <_nrk_wait_for_scheduler>
    54d6:	81 e0       	ldi	r24, 0x01	; 1
    54d8:	90 e0       	ldi	r25, 0x00	; 0
    54da:	1f 91       	pop	r17
    54dc:	08 95       	ret

000054de <nrk_set_next_wakeup>:
    54de:	1f 93       	push	r17
    54e0:	cf 93       	push	r28
    54e2:	df 93       	push	r29
    54e4:	cd b7       	in	r28, 0x3d	; 61
    54e6:	de b7       	in	r29, 0x3e	; 62
    54e8:	28 97       	sbiw	r28, 0x08	; 8
    54ea:	0f b6       	in	r0, 0x3f	; 63
    54ec:	f8 94       	cli
    54ee:	de bf       	out	0x3e, r29	; 62
    54f0:	0f be       	out	0x3f, r0	; 63
    54f2:	cd bf       	out	0x3d, r28	; 61
    54f4:	29 83       	std	Y+1, r18	; 0x01
    54f6:	3a 83       	std	Y+2, r19	; 0x02
    54f8:	4b 83       	std	Y+3, r20	; 0x03
    54fa:	5c 83       	std	Y+4, r21	; 0x04
    54fc:	6d 83       	std	Y+5, r22	; 0x05
    54fe:	7e 83       	std	Y+6, r23	; 0x06
    5500:	8f 83       	std	Y+7, r24	; 0x07
    5502:	98 87       	std	Y+8, r25	; 0x08
    5504:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>
    5508:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    550c:	18 2f       	mov	r17, r24
    550e:	29 81       	ldd	r18, Y+1	; 0x01
    5510:	3a 81       	ldd	r19, Y+2	; 0x02
    5512:	4b 81       	ldd	r20, Y+3	; 0x03
    5514:	5c 81       	ldd	r21, Y+4	; 0x04
    5516:	6d 81       	ldd	r22, Y+5	; 0x05
    5518:	7e 81       	ldd	r23, Y+6	; 0x06
    551a:	8f 81       	ldd	r24, Y+7	; 0x07
    551c:	98 85       	ldd	r25, Y+8	; 0x08
    551e:	0e 94 f5 2c 	call	0x59ea	; 0x59ea <_nrk_time_to_ticks>
    5522:	83 30       	cpi	r24, 0x03	; 3
    5524:	91 05       	cpc	r25, r1
    5526:	18 f4       	brcc	.+6      	; 0x552e <nrk_set_next_wakeup+0x50>
    5528:	8f ef       	ldi	r24, 0xFF	; 255
    552a:	9f ef       	ldi	r25, 0xFF	; 255
    552c:	0c c0       	rjmp	.+24     	; 0x5546 <nrk_set_next_wakeup+0x68>
    552e:	e0 91 39 0a 	lds	r30, 0x0A39
    5532:	f0 91 3a 0a 	lds	r31, 0x0A3A
    5536:	81 0f       	add	r24, r17
    5538:	91 1d       	adc	r25, r1
    553a:	96 8b       	std	Z+22, r25	; 0x16
    553c:	85 8b       	std	Z+21, r24	; 0x15
    553e:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
    5542:	81 e0       	ldi	r24, 0x01	; 1
    5544:	90 e0       	ldi	r25, 0x00	; 0
    5546:	28 96       	adiw	r28, 0x08	; 8
    5548:	0f b6       	in	r0, 0x3f	; 63
    554a:	f8 94       	cli
    554c:	de bf       	out	0x3e, r29	; 62
    554e:	0f be       	out	0x3f, r0	; 63
    5550:	cd bf       	out	0x3d, r28	; 61
    5552:	df 91       	pop	r29
    5554:	cf 91       	pop	r28
    5556:	1f 91       	pop	r17
    5558:	08 95       	ret

0000555a <nrk_wait_until_ticks>:
    555a:	0f 93       	push	r16
    555c:	1f 93       	push	r17
    555e:	8c 01       	movw	r16, r24
    5560:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>
    5564:	e0 91 39 0a 	lds	r30, 0x0A39
    5568:	f0 91 3a 0a 	lds	r31, 0x0A3A
    556c:	81 e0       	ldi	r24, 0x01	; 1
    556e:	85 83       	std	Z+5, r24	; 0x05
    5570:	16 8b       	std	Z+22, r17	; 0x16
    5572:	05 8b       	std	Z+21, r16	; 0x15
    5574:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    5578:	08 2f       	mov	r16, r24
    557a:	88 3f       	cpi	r24, 0xF8	; 248
    557c:	80 f4       	brcc	.+32     	; 0x559e <nrk_wait_until_ticks+0x44>
    557e:	0e 94 33 32 	call	0x6466	; 0x6466 <_nrk_get_next_wakeup>
    5582:	20 2f       	mov	r18, r16
    5584:	33 27       	eor	r19, r19
    5586:	2e 5f       	subi	r18, 0xFE	; 254
    5588:	3f 4f       	sbci	r19, 0xFF	; 255
    558a:	99 27       	eor	r25, r25
    558c:	82 17       	cp	r24, r18
    558e:	93 07       	cpc	r25, r19
    5590:	34 f0       	brlt	.+12     	; 0x559e <nrk_wait_until_ticks+0x44>
    5592:	80 2f       	mov	r24, r16
    5594:	8e 5f       	subi	r24, 0xFE	; 254
    5596:	80 93 c4 08 	sts	0x08C4, r24
    559a:	0e 94 38 32 	call	0x6470	; 0x6470 <_nrk_set_next_wakeup>
    559e:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
    55a2:	0e 94 89 29 	call	0x5312	; 0x5312 <_nrk_wait_for_scheduler>
    55a6:	81 e0       	ldi	r24, 0x01	; 1
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	1f 91       	pop	r17
    55ac:	0f 91       	pop	r16
    55ae:	08 95       	ret

000055b0 <nrk_wait_ticks>:
    55b0:	ff 92       	push	r15
    55b2:	0f 93       	push	r16
    55b4:	1f 93       	push	r17
    55b6:	cf 93       	push	r28
    55b8:	df 93       	push	r29
    55ba:	8c 01       	movw	r16, r24
    55bc:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>
    55c0:	e0 91 39 0a 	lds	r30, 0x0A39
    55c4:	f0 91 3a 0a 	lds	r31, 0x0A3A
    55c8:	81 e0       	ldi	r24, 0x01	; 1
    55ca:	85 83       	std	Z+5, r24	; 0x05
    55cc:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    55d0:	f8 2e       	mov	r15, r24
    55d2:	e0 91 39 0a 	lds	r30, 0x0A39
    55d6:	f0 91 3a 0a 	lds	r31, 0x0A3A
    55da:	c8 2f       	mov	r28, r24
    55dc:	dd 27       	eor	r29, r29
    55de:	0c 0f       	add	r16, r28
    55e0:	1d 1f       	adc	r17, r29
    55e2:	16 8b       	std	Z+22, r17	; 0x16
    55e4:	05 8b       	std	Z+21, r16	; 0x15
    55e6:	87 ef       	ldi	r24, 0xF7	; 247
    55e8:	8f 15       	cp	r24, r15
    55ea:	68 f0       	brcs	.+26     	; 0x5606 <nrk_wait_ticks+0x56>
    55ec:	0e 94 33 32 	call	0x6466	; 0x6466 <_nrk_get_next_wakeup>
    55f0:	22 96       	adiw	r28, 0x02	; 2
    55f2:	99 27       	eor	r25, r25
    55f4:	8c 17       	cp	r24, r28
    55f6:	9d 07       	cpc	r25, r29
    55f8:	34 f0       	brlt	.+12     	; 0x5606 <nrk_wait_ticks+0x56>
    55fa:	8f 2d       	mov	r24, r15
    55fc:	8e 5f       	subi	r24, 0xFE	; 254
    55fe:	80 93 c4 08 	sts	0x08C4, r24
    5602:	0e 94 38 32 	call	0x6470	; 0x6470 <_nrk_set_next_wakeup>
    5606:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
    560a:	0e 94 89 29 	call	0x5312	; 0x5312 <_nrk_wait_for_scheduler>
    560e:	81 e0       	ldi	r24, 0x01	; 1
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	df 91       	pop	r29
    5614:	cf 91       	pop	r28
    5616:	1f 91       	pop	r17
    5618:	0f 91       	pop	r16
    561a:	ff 90       	pop	r15
    561c:	08 95       	ret

0000561e <nrk_wait_until_next_n_periods>:
if(radio_sem!=NULL)
 nrk_sem_post(radio_sem);
if(level==0)
  {
  val=get_adc_val();
  // FIXME:  This probably isn't correct...
    561e:	1f 93       	push	r17
    5620:	cf 93       	push	r28
    5622:	df 93       	push	r29
    5624:	ec 01       	movw	r28, r24
  if(val>174) val-=174;
  if(val<330) val=330;
  }
    5626:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <nrk_stack_check>
else val=(9000-(level*125)) / 27;

    562a:	20 97       	sbiw	r28, 0x00	; 0
    562c:	11 f4       	brne	.+4      	; 0x5632 <nrk_wait_until_next_n_periods+0x14>
    562e:	c1 e0       	ldi	r28, 0x01	; 1
    5630:	d0 e0       	ldi	r29, 0x00	; 0
return val;
}

    5632:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>

    5636:	e0 91 39 0a 	lds	r30, 0x0A39
    563a:	f0 91 3a 0a 	lds	r31, 0x0A3A
    563e:	81 e0       	ldi	r24, 0x01	; 1
    5640:	85 83       	std	Z+5, r24	; 0x05

    5642:	d0 a3       	std	Z+32, r29	; 0x20
    5644:	c7 8f       	std	Z+31, r28	; 0x1f
void init_adc()
    5646:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    564a:	18 2f       	mov	r17, r24
{
// Initialize values here
  ADC_INIT ();
  ADC_ENABLE ();
  channel=0;
    564c:	88 3f       	cpi	r24, 0xF8	; 248
    564e:	80 f4       	brcc	.+32     	; 0x5670 <nrk_wait_until_next_n_periods+0x52>
  ADC_SET_CHANNEL (0);
    5650:	0e 94 33 32 	call	0x6466	; 0x6466 <_nrk_get_next_wakeup>
    5654:	21 2f       	mov	r18, r17
    5656:	33 27       	eor	r19, r19
    5658:	2e 5f       	subi	r18, 0xFE	; 254
    565a:	3f 4f       	sbci	r19, 0xFF	; 255
    565c:	99 27       	eor	r25, r25
    565e:	82 17       	cp	r24, r18
    5660:	93 07       	cpc	r25, r19
    5662:	34 f0       	brlt	.+12     	; 0x5670 <nrk_wait_until_next_n_periods+0x52>
}
    5664:	81 2f       	mov	r24, r17
    5666:	8e 5f       	subi	r24, 0xFE	; 254

    5668:	80 93 c4 08 	sts	0x08C4, r24
uint16_t get_adc_val()
    566c:	0e 94 38 32 	call	0x6470	; 0x6470 <_nrk_set_next_wakeup>
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
    5670:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
	delay();
	ADC_GET_SAMPLE_10(adc_val);
    5674:	0e 94 89 29 	call	0x5312	; 0x5312 <_nrk_wait_for_scheduler>
	return adc_val;
}
void delay()
    5678:	81 e0       	ldi	r24, 0x01	; 1
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	df 91       	pop	r29
    567e:	cf 91       	pop	r28
    5680:	1f 91       	pop	r17
    5682:	08 95       	ret

00005684 <nrk_wait_until_next_period>:
uint16_t read_voltage_status()
{
volatile uint16_t val;
uint8_t check,level;
nrk_sem_t *radio_sem;

    5684:	1f 93       	push	r17
radio_sem= rf_get_sem();

// if semaphore not created, then assume you own the radio 
    5686:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <nrk_stack_check>
if(radio_sem!=NULL)
 nrk_sem_pend (radio_sem);
    568a:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>

    568e:	e0 91 39 0a 	lds	r30, 0x0A39
    5692:	f0 91 3a 0a 	lds	r31, 0x0A3A
    5696:	81 e0       	ldi	r24, 0x01	; 1
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	90 a3       	std	Z+32, r25	; 0x20
    569c:	87 8f       	std	Z+31, r24	; 0x1f
    // activate cc2420 vreg
    569e:	81 e0       	ldi	r24, 0x01	; 1
    56a0:	85 83       	std	Z+5, r24	; 0x05
    SET_VREG_ACTIVE();
    56a2:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    56a6:	18 2f       	mov	r17, r24
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
    56a8:	88 3f       	cpi	r24, 0xF8	; 248
    56aa:	80 f4       	brcc	.+32     	; 0x56cc <nrk_wait_until_next_period+0x48>
{
    56ac:	0e 94 33 32 	call	0x6466	; 0x6466 <_nrk_get_next_wakeup>
    56b0:	21 2f       	mov	r18, r17
    56b2:	33 27       	eor	r19, r19
    56b4:	2e 5f       	subi	r18, 0xFE	; 254
    56b6:	3f 4f       	sbci	r19, 0xFF	; 255
    56b8:	99 27       	eor	r25, r25
    56ba:	82 17       	cp	r24, r18
    56bc:	93 07       	cpc	r25, r19
    56be:	34 f0       	brlt	.+12     	; 0x56cc <nrk_wait_until_next_period+0x48>
val=0x0020 | level;
    56c0:	81 2f       	mov	r24, r17
    56c2:	8e 5f       	subi	r24, 0xFE	; 254
FASTSPI_SETREG(CC2420_BATTMON, val);
    56c4:	80 93 c4 08 	sts	0x08C4, r24
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
    56c8:	0e 94 38 32 	call	0x6470	; 0x6470 <_nrk_set_next_wakeup>
if(val&0x0040) break; 
level++;
}
    56cc:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
if(radio_sem!=NULL)
    56d0:	0e 94 89 29 	call	0x5312	; 0x5312 <_nrk_wait_for_scheduler>
 nrk_sem_post(radio_sem);
if(level==0)
    56d4:	81 e0       	ldi	r24, 0x01	; 1
    56d6:	90 e0       	ldi	r25, 0x00	; 0
    56d8:	1f 91       	pop	r17
    56da:	08 95       	ret

000056dc <nrk_terminate_task>:


// read_voltage_status()
//
// This function sets different voltage threshold levels on
// the cc2420 chip to search for the voltage.
    56dc:	e0 91 39 0a 	lds	r30, 0x0A39
    56e0:	f0 91 3a 0a 	lds	r31, 0x0A3A
    56e4:	80 85       	ldd	r24, Z+8	; 0x08
    56e6:	0e 94 30 29 	call	0x5260	; 0x5260 <nrk_rem_from_readyQ>
// If the voltage is above 3.3 volts, then the ADC reads
    56ea:	e0 91 39 0a 	lds	r30, 0x0A39
    56ee:	f0 91 3a 0a 	lds	r31, 0x0A3A
    56f2:	84 e0       	ldi	r24, 0x04	; 4
    56f4:	81 87       	std	Z+9, r24	; 0x09
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
    56f6:	0e 94 42 2b 	call	0x5684	; 0x5684 <nrk_wait_until_next_period>
{
volatile uint16_t val;
    56fa:	81 e0       	ldi	r24, 0x01	; 1
    56fc:	90 e0       	ldi	r25, 0x00	; 0
    56fe:	08 95       	ret

00005700 <nrk_activate_task>:
             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
		    	is_open=0; 
                        return NRK_OK;
             
    5700:	ef 92       	push	r14
    5702:	ff 92       	push	r15
    5704:	0f 93       	push	r16
    5706:	1f 93       	push	r17
    5708:	cf 93       	push	r28
    570a:	df 93       	push	r29
    570c:	ec 01       	movw	r28, r24
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
	     		return NRK_ERROR;
    570e:	4b 81       	ldd	r20, Y+3	; 0x03
    5710:	5c 81       	ldd	r21, Y+4	; 0x04
    5712:	69 81       	ldd	r22, Y+1	; 0x01
    5714:	7a 81       	ldd	r23, Y+2	; 0x02
    5716:	8d 81       	ldd	r24, Y+5	; 0x05
    5718:	9e 81       	ldd	r25, Y+6	; 0x06
    571a:	0e 94 77 35 	call	0x6aee	; 0x6aee <nrk_task_stk_init>
    571e:	bc 01       	movw	r22, r24
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    5720:	8f 81       	ldd	r24, Y+7	; 0x07
    5722:	88 23       	and	r24, r24
    5724:	69 f0       	breq	.+26     	; 0x5740 <nrk_activate_task+0x40>
			{
    5726:	4b 81       	ldd	r20, Y+3	; 0x03
    5728:	5c 81       	ldd	r21, Y+4	; 0x04
    572a:	ee 24       	eor	r14, r14
    572c:	ff 24       	eor	r15, r15
    572e:	00 e0       	ldi	r16, 0x00	; 0
    5730:	10 e0       	ldi	r17, 0x00	; 0
    5732:	20 e0       	ldi	r18, 0x00	; 0
    5734:	30 e0       	ldi	r19, 0x00	; 0
    5736:	ce 01       	movw	r24, r28
    5738:	0e 94 91 21 	call	0x4322	; 0x4322 <nrk_TCB_init>
			// Set to audio channel if it is an average value
    573c:	1f 82       	std	Y+7, r1	; 0x07
    573e:	16 c0       	rjmp	.+44     	; 0x576c <nrk_activate_task+0x6c>
			if(value==AUDIO_P2P) 
			  {
				channel=value;
				   //ADC_VREF_2_56();	
    5740:	88 81       	ld	r24, Y
    5742:	99 27       	eor	r25, r25
    5744:	87 fd       	sbrc	r24, 7
    5746:	90 95       	com	r25
    5748:	fc 01       	movw	r30, r24
    574a:	a5 e0       	ldi	r26, 0x05	; 5
    574c:	ee 0f       	add	r30, r30
    574e:	ff 1f       	adc	r31, r31
    5750:	aa 95       	dec	r26
    5752:	e1 f7       	brne	.-8      	; 0x574c <nrk_activate_task+0x4c>
    5754:	e8 0f       	add	r30, r24
    5756:	f9 1f       	adc	r31, r25
    5758:	ee 58       	subi	r30, 0x8E	; 142
    575a:	f6 4f       	sbci	r31, 0xF6	; 246
    575c:	81 85       	ldd	r24, Z+9	; 0x09
    575e:	83 30       	cpi	r24, 0x03	; 3
    5760:	19 f0       	breq	.+6      	; 0x5768 <nrk_activate_task+0x68>
    5762:	8f ef       	ldi	r24, 0xFF	; 255
    5764:	9f ef       	ldi	r25, 0xFF	; 255
    5766:	1b c0       	rjmp	.+54     	; 0x579e <nrk_activate_task+0x9e>
				ADC_VREF_VCC();	
				ADC_SET_CHANNEL (AUDIO);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;
    5768:	71 83       	std	Z+1, r23	; 0x01
    576a:	60 83       	st	Z, r22
				   ADC_VREF_2_56();	
				ADC_SET_CHANNEL (channel);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;
			  }
			}
    576c:	88 81       	ld	r24, Y
    576e:	99 27       	eor	r25, r25
    5770:	87 fd       	sbrc	r24, 7
    5772:	90 95       	com	r25
    5774:	fc 01       	movw	r30, r24
    5776:	75 e0       	ldi	r23, 0x05	; 5
    5778:	ee 0f       	add	r30, r30
    577a:	ff 1f       	adc	r31, r31
    577c:	7a 95       	dec	r23
    577e:	e1 f7       	brne	.-8      	; 0x5778 <nrk_activate_task+0x78>
    5780:	e8 0f       	add	r30, r24
    5782:	f9 1f       	adc	r31, r25
    5784:	ee 58       	subi	r30, 0x8E	; 142
    5786:	f6 4f       	sbci	r31, 0xF6	; 246
    5788:	85 89       	ldd	r24, Z+21	; 0x15
    578a:	96 89       	ldd	r25, Z+22	; 0x16
    578c:	89 2b       	or	r24, r25
    578e:	29 f4       	brne	.+10     	; 0x579a <nrk_activate_task+0x9a>
			return NRK_ERROR;
    5790:	82 e0       	ldi	r24, 0x02	; 2
    5792:	81 87       	std	Z+9, r24	; 0x09
	     default:
    5794:	88 81       	ld	r24, Y
    5796:	0e 94 a9 28 	call	0x5152	; 0x5152 <nrk_add_to_readyQ>
    579a:	81 e0       	ldi	r24, 0x01	; 1
    579c:	90 e0       	ldi	r25, 0x00	; 0
    579e:	df 91       	pop	r29
    57a0:	cf 91       	pop	r28
    57a2:	1f 91       	pop	r17
    57a4:	0f 91       	pop	r16
    57a6:	ff 90       	pop	r15
    57a8:	ef 90       	pop	r14
    57aa:	08 95       	ret

000057ac <nrk_time_sub>:
	ADMUX |= BM(REFS0);  \
} while(0)


#define ADC_VREF_1_1() \
   do { \
    57ac:	8f 92       	push	r8
    57ae:	9f 92       	push	r9
    57b0:	af 92       	push	r10
    57b2:	bf 92       	push	r11
    57b4:	cf 92       	push	r12
    57b6:	df 92       	push	r13
    57b8:	ef 92       	push	r14
    57ba:	ff 92       	push	r15
    57bc:	0f 93       	push	r16
    57be:	1f 93       	push	r17
    57c0:	cf 93       	push	r28
    57c2:	df 93       	push	r29
    57c4:	cd b7       	in	r28, 0x3d	; 61
    57c6:	de b7       	in	r29, 0x3e	; 62
    57c8:	60 97       	sbiw	r28, 0x10	; 16
    57ca:	0f b6       	in	r0, 0x3f	; 63
    57cc:	f8 94       	cli
    57ce:	de bf       	out	0x3e, r29	; 62
    57d0:	0f be       	out	0x3f, r0	; 63
    57d2:	cd bf       	out	0x3d, r28	; 61
    57d4:	fc 01       	movw	r30, r24
    57d6:	09 83       	std	Y+1, r16	; 0x01
    57d8:	1a 83       	std	Y+2, r17	; 0x02
    57da:	2b 83       	std	Y+3, r18	; 0x03
    57dc:	3c 83       	std	Y+4, r19	; 0x04
    57de:	4d 83       	std	Y+5, r20	; 0x05
    57e0:	5e 83       	std	Y+6, r21	; 0x06
    57e2:	6f 83       	std	Y+7, r22	; 0x07
    57e4:	78 87       	std	Y+8, r23	; 0x08
    57e6:	89 86       	std	Y+9, r8	; 0x09
    57e8:	9a 86       	std	Y+10, r9	; 0x0a
    57ea:	ab 86       	std	Y+11, r10	; 0x0b
    57ec:	bc 86       	std	Y+12, r11	; 0x0c
    57ee:	cd 86       	std	Y+13, r12	; 0x0d
    57f0:	de 86       	std	Y+14, r13	; 0x0e
    57f2:	ef 86       	std	Y+15, r14	; 0x0f
    57f4:	f8 8a       	std	Y+16, r15	; 0x10
    57f6:	2d 81       	ldd	r18, Y+5	; 0x05
    57f8:	3e 81       	ldd	r19, Y+6	; 0x06
    57fa:	4f 81       	ldd	r20, Y+7	; 0x07
    57fc:	58 85       	ldd	r21, Y+8	; 0x08
    57fe:	89 81       	ldd	r24, Y+1	; 0x01
    5800:	9a 81       	ldd	r25, Y+2	; 0x02
    5802:	ab 81       	ldd	r26, Y+3	; 0x03
    5804:	bc 81       	ldd	r27, Y+4	; 0x04
    5806:	ad 84       	ldd	r10, Y+13	; 0x0d
    5808:	be 84       	ldd	r11, Y+14	; 0x0e
    580a:	cf 84       	ldd	r12, Y+15	; 0x0f
    580c:	d8 88       	ldd	r13, Y+16	; 0x10
    580e:	e9 84       	ldd	r14, Y+9	; 0x09
    5810:	fa 84       	ldd	r15, Y+10	; 0x0a
    5812:	0b 85       	ldd	r16, Y+11	; 0x0b
    5814:	1c 85       	ldd	r17, Y+12	; 0x0c
	ADMUX &= ~(BM(REFS0));  \
    5816:	8e 15       	cp	r24, r14
    5818:	9f 05       	cpc	r25, r15
    581a:	a0 07       	cpc	r26, r16
    581c:	b1 07       	cpc	r27, r17
    581e:	08 f4       	brcc	.+2      	; 0x5822 <nrk_time_sub+0x76>
    5820:	3f c0       	rjmp	.+126    	; 0x58a0 <nrk_time_sub+0xf4>
	ADMUX |= BM(REFS1);  \
    5822:	e8 16       	cp	r14, r24
    5824:	f9 06       	cpc	r15, r25
    5826:	0a 07       	cpc	r16, r26
    5828:	1b 07       	cpc	r17, r27
    582a:	91 f4       	brne	.+36     	; 0x5850 <nrk_time_sub+0xa4>
} while(0)

    582c:	2a 15       	cp	r18, r10
    582e:	3b 05       	cpc	r19, r11
    5830:	4c 05       	cpc	r20, r12
    5832:	5d 05       	cpc	r21, r13
    5834:	a8 f1       	brcs	.+106    	; 0x58a0 <nrk_time_sub+0xf4>

    5836:	2a 19       	sub	r18, r10
    5838:	3b 09       	sbc	r19, r11
    583a:	4c 09       	sbc	r20, r12
    583c:	5d 09       	sbc	r21, r13
    583e:	24 83       	std	Z+4, r18	; 0x04
    5840:	35 83       	std	Z+5, r19	; 0x05
    5842:	46 83       	std	Z+6, r20	; 0x06
    5844:	57 83       	std	Z+7, r21	; 0x07
#define ADC_VREF_2_56() \
    5846:	10 82       	st	Z, r1
    5848:	11 82       	std	Z+1, r1	; 0x01
    584a:	12 82       	std	Z+2, r1	; 0x02
    584c:	13 82       	std	Z+3, r1	; 0x03
    584e:	1c c0       	rjmp	.+56     	; 0x5888 <nrk_time_sub+0xdc>
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)
    5850:	2a 15       	cp	r18, r10
    5852:	3b 05       	cpc	r19, r11
    5854:	4c 05       	cpc	r20, r12
    5856:	5d 05       	cpc	r21, r13
    5858:	d0 f4       	brcc	.+52     	; 0x588e <nrk_time_sub+0xe2>

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
    585a:	01 97       	sbiw	r24, 0x01	; 1
    585c:	a1 09       	sbc	r26, r1
    585e:	b1 09       	sbc	r27, r1
    5860:	8e 19       	sub	r24, r14
    5862:	9f 09       	sbc	r25, r15
    5864:	a0 0b       	sbc	r26, r16
    5866:	b1 0b       	sbc	r27, r17
    5868:	80 83       	st	Z, r24
    586a:	91 83       	std	Z+1, r25	; 0x01
    586c:	a2 83       	std	Z+2, r26	; 0x02
    586e:	b3 83       	std	Z+3, r27	; 0x03
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
    5870:	20 50       	subi	r18, 0x00	; 0
    5872:	36 43       	sbci	r19, 0x36	; 54
    5874:	45 46       	sbci	r20, 0x65	; 101
    5876:	54 4c       	sbci	r21, 0xC4	; 196
    5878:	2a 19       	sub	r18, r10
    587a:	3b 09       	sbc	r19, r11
    587c:	4c 09       	sbc	r20, r12
    587e:	5d 09       	sbc	r21, r13
    5880:	24 83       	std	Z+4, r18	; 0x04
    5882:	35 83       	std	Z+5, r19	; 0x05
    5884:	46 83       	std	Z+6, r20	; 0x06
    5886:	57 83       	std	Z+7, r21	; 0x07
    5888:	81 e0       	ldi	r24, 0x01	; 1
    588a:	90 e0       	ldi	r25, 0x00	; 0
    588c:	0b c0       	rjmp	.+22     	; 0x58a4 <nrk_time_sub+0xf8>
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    do { \
    588e:	8e 19       	sub	r24, r14
    5890:	9f 09       	sbc	r25, r15
    5892:	a0 0b       	sbc	r26, r16
    5894:	b1 0b       	sbc	r27, r17
    5896:	80 83       	st	Z, r24
    5898:	91 83       	std	Z+1, r25	; 0x01
    589a:	a2 83       	std	Z+2, r26	; 0x02
    589c:	b3 83       	std	Z+3, r27	; 0x03
    589e:	ec cf       	rjmp	.-40     	; 0x5878 <nrk_time_sub+0xcc>
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
    58a0:	80 e0       	ldi	r24, 0x00	; 0
    58a2:	90 e0       	ldi	r25, 0x00	; 0
    58a4:	60 96       	adiw	r28, 0x10	; 16
    58a6:	0f b6       	in	r0, 0x3f	; 63
    58a8:	f8 94       	cli
    58aa:	de bf       	out	0x3e, r29	; 62
    58ac:	0f be       	out	0x3f, r0	; 63
    58ae:	cd bf       	out	0x3d, r28	; 61
    58b0:	df 91       	pop	r29
    58b2:	cf 91       	pop	r28
    58b4:	1f 91       	pop	r17
    58b6:	0f 91       	pop	r16
    58b8:	ff 90       	pop	r15
    58ba:	ef 90       	pop	r14
    58bc:	df 90       	pop	r13
    58be:	cf 90       	pop	r12
    58c0:	bf 90       	pop	r11
    58c2:	af 90       	pop	r10
    58c4:	9f 90       	pop	r9
    58c6:	8f 90       	pop	r8
    58c8:	08 95       	ret

000058ca <nrk_time_compact_nanos>:
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

     switch(action)
     {
    58ca:	fc 01       	movw	r30, r24
    58cc:	13 c0       	rjmp	.+38     	; 0x58f4 <nrk_time_compact_nanos+0x2a>
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
    58ce:	80 50       	subi	r24, 0x00	; 0
    58d0:	9a 4c       	sbci	r25, 0xCA	; 202
    58d2:	aa 49       	sbci	r26, 0x9A	; 154
    58d4:	bb 43       	sbci	r27, 0x3B	; 59
    58d6:	84 83       	std	Z+4, r24	; 0x04
    58d8:	95 83       	std	Z+5, r25	; 0x05
    58da:	a6 83       	std	Z+6, r26	; 0x06
    58dc:	b7 83       	std	Z+7, r27	; 0x07
			PORTF |= PWR_CTRL_MASK;
    58de:	80 81       	ld	r24, Z
    58e0:	91 81       	ldd	r25, Z+1	; 0x01
    58e2:	a2 81       	ldd	r26, Z+2	; 0x02
    58e4:	b3 81       	ldd	r27, Z+3	; 0x03
    58e6:	01 96       	adiw	r24, 0x01	; 1
    58e8:	a1 1d       	adc	r26, r1
    58ea:	b1 1d       	adc	r27, r1
    58ec:	80 83       	st	Z, r24
    58ee:	91 83       	std	Z+1, r25	; 0x01
    58f0:	a2 83       	std	Z+2, r26	; 0x02
    58f2:	b3 83       	std	Z+3, r27	; 0x03
uint8_t key=opt;
uint8_t value=size;

     switch(action)
     {
            case INIT: 
    58f4:	84 81       	ldd	r24, Z+4	; 0x04
    58f6:	95 81       	ldd	r25, Z+5	; 0x05
    58f8:	a6 81       	ldd	r26, Z+6	; 0x06
    58fa:	b7 81       	ldd	r27, Z+7	; 0x07
    58fc:	80 30       	cpi	r24, 0x00	; 0
    58fe:	2a ec       	ldi	r18, 0xCA	; 202
    5900:	92 07       	cpc	r25, r18
    5902:	2a e9       	ldi	r18, 0x9A	; 154
    5904:	a2 07       	cpc	r26, r18
    5906:	2b e3       	ldi	r18, 0x3B	; 59
    5908:	b2 07       	cpc	r27, r18
    590a:	08 f7       	brcc	.-62     	; 0x58ce <nrk_time_compact_nanos+0x4>
    590c:	08 95       	ret

0000590e <nrk_time_add>:
#define ADC_GET_SAMPLE_10(x) \
do { \
x =  ADCL; \
x |= ADCH << 8; \
} while (0)

    590e:	8f 92       	push	r8
    5910:	9f 92       	push	r9
    5912:	af 92       	push	r10
    5914:	bf 92       	push	r11
    5916:	cf 92       	push	r12
    5918:	df 92       	push	r13
    591a:	ef 92       	push	r14
    591c:	ff 92       	push	r15
    591e:	0f 93       	push	r16
    5920:	1f 93       	push	r17
    5922:	cf 93       	push	r28
    5924:	df 93       	push	r29
    5926:	cd b7       	in	r28, 0x3d	; 61
    5928:	de b7       	in	r29, 0x3e	; 62
    592a:	60 97       	sbiw	r28, 0x10	; 16
    592c:	0f b6       	in	r0, 0x3f	; 63
    592e:	f8 94       	cli
    5930:	de bf       	out	0x3e, r29	; 62
    5932:	0f be       	out	0x3f, r0	; 63
    5934:	cd bf       	out	0x3d, r28	; 61
    5936:	fc 01       	movw	r30, r24
    5938:	09 83       	std	Y+1, r16	; 0x01
    593a:	1a 83       	std	Y+2, r17	; 0x02
    593c:	2b 83       	std	Y+3, r18	; 0x03
    593e:	3c 83       	std	Y+4, r19	; 0x04
    5940:	4d 83       	std	Y+5, r20	; 0x05
    5942:	5e 83       	std	Y+6, r21	; 0x06
    5944:	6f 83       	std	Y+7, r22	; 0x07
    5946:	78 87       	std	Y+8, r23	; 0x08
    5948:	89 86       	std	Y+9, r8	; 0x09
    594a:	9a 86       	std	Y+10, r9	; 0x0a
    594c:	ab 86       	std	Y+11, r10	; 0x0b
    594e:	bc 86       	std	Y+12, r11	; 0x0c
    5950:	cd 86       	std	Y+13, r12	; 0x0d
    5952:	de 86       	std	Y+14, r13	; 0x0e
    5954:	ef 86       	std	Y+15, r14	; 0x0f
    5956:	f8 8a       	std	Y+16, r15	; 0x10
    5958:	ad 80       	ldd	r10, Y+5	; 0x05
    595a:	be 80       	ldd	r11, Y+6	; 0x06
    595c:	cf 80       	ldd	r12, Y+7	; 0x07
    595e:	d8 84       	ldd	r13, Y+8	; 0x08
    5960:	ed 84       	ldd	r14, Y+13	; 0x0d
    5962:	fe 84       	ldd	r15, Y+14	; 0x0e
    5964:	0f 85       	ldd	r16, Y+15	; 0x0f
    5966:	18 89       	ldd	r17, Y+16	; 0x10
#define ADC_GET_SAMPLE_8(x) \
    5968:	89 85       	ldd	r24, Y+9	; 0x09
    596a:	9a 85       	ldd	r25, Y+10	; 0x0a
    596c:	ab 85       	ldd	r26, Y+11	; 0x0b
    596e:	bc 85       	ldd	r27, Y+12	; 0x0c
    5970:	29 81       	ldd	r18, Y+1	; 0x01
    5972:	3a 81       	ldd	r19, Y+2	; 0x02
    5974:	4b 81       	ldd	r20, Y+3	; 0x03
    5976:	5c 81       	ldd	r21, Y+4	; 0x04
    5978:	82 0f       	add	r24, r18
    597a:	93 1f       	adc	r25, r19
    597c:	a4 1f       	adc	r26, r20
    597e:	b5 1f       	adc	r27, r21
    5980:	80 83       	st	Z, r24
    5982:	91 83       	std	Z+1, r25	; 0x01
    5984:	a2 83       	std	Z+2, r26	; 0x02
    5986:	b3 83       	std	Z+3, r27	; 0x03
do { \
    5988:	ea 0c       	add	r14, r10
    598a:	fb 1c       	adc	r15, r11
    598c:	0c 1d       	adc	r16, r12
    598e:	1d 1d       	adc	r17, r13
    5990:	e4 82       	std	Z+4, r14	; 0x04
    5992:	f5 82       	std	Z+5, r15	; 0x05
    5994:	06 83       	std	Z+6, r16	; 0x06
    5996:	17 83       	std	Z+7, r17	; 0x07
x = ((uint8_t) ADCL) >> 2; \
    5998:	cf 01       	movw	r24, r30
    599a:	0e 94 65 2c 	call	0x58ca	; 0x58ca <nrk_time_compact_nanos>
x |= ((int8_t) ADCH) << 6; \
} while (0)
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	60 96       	adiw	r28, 0x10	; 16
    59a4:	0f b6       	in	r0, 0x3f	; 63
    59a6:	f8 94       	cli
    59a8:	de bf       	out	0x3e, r29	; 62
    59aa:	0f be       	out	0x3f, r0	; 63
    59ac:	cd bf       	out	0x3d, r28	; 61
    59ae:	df 91       	pop	r29
    59b0:	cf 91       	pop	r28
    59b2:	1f 91       	pop	r17
    59b4:	0f 91       	pop	r16
    59b6:	ff 90       	pop	r15
    59b8:	ef 90       	pop	r14
    59ba:	df 90       	pop	r13
    59bc:	cf 90       	pop	r12
    59be:	bf 90       	pop	r11
    59c0:	af 90       	pop	r10
    59c2:	9f 90       	pop	r9
    59c4:	8f 90       	pop	r8
    59c6:	08 95       	ret

000059c8 <nrk_time_set>:
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
		    if(opt&READ_FLAG)
    59c8:	60 93 30 0a 	sts	0x0A30, r22
    59cc:	70 93 31 0a 	sts	0x0A31, r23
    59d0:	80 93 32 0a 	sts	0x0A32, r24
    59d4:	90 93 33 0a 	sts	0x0A33, r25
		    {
    59d8:	20 93 34 0a 	sts	0x0A34, r18
    59dc:	30 93 35 0a 	sts	0x0A35, r19
    59e0:	40 93 36 0a 	sts	0x0A36, r20
    59e4:	50 93 37 0a 	sts	0x0A37, r21
    59e8:	08 95       	ret

000059ea <_nrk_time_to_ticks>:
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
    59ea:	8f 92       	push	r8
    59ec:	9f 92       	push	r9
    59ee:	af 92       	push	r10
    59f0:	bf 92       	push	r11
    59f2:	cf 92       	push	r12
    59f4:	df 92       	push	r13
    59f6:	ef 92       	push	r14
    59f8:	ff 92       	push	r15
    59fa:	0f 93       	push	r16
    59fc:	1f 93       	push	r17
    59fe:	cf 93       	push	r28
    5a00:	df 93       	push	r29
    5a02:	cd b7       	in	r28, 0x3d	; 61
    5a04:	de b7       	in	r29, 0x3e	; 62
    5a06:	28 97       	sbiw	r28, 0x08	; 8
    5a08:	0f b6       	in	r0, 0x3f	; 63
    5a0a:	f8 94       	cli
    5a0c:	de bf       	out	0x3e, r29	; 62
    5a0e:	0f be       	out	0x3f, r0	; 63
    5a10:	cd bf       	out	0x3d, r28	; 61
    5a12:	29 83       	std	Y+1, r18	; 0x01
    5a14:	3a 83       	std	Y+2, r19	; 0x02
    5a16:	4b 83       	std	Y+3, r20	; 0x03
    5a18:	5c 83       	std	Y+4, r21	; 0x04
    5a1a:	6d 83       	std	Y+5, r22	; 0x05
    5a1c:	7e 83       	std	Y+6, r23	; 0x06
    5a1e:	8f 83       	std	Y+7, r24	; 0x07
    5a20:	98 87       	std	Y+8, r25	; 0x08
    5a22:	8d 80       	ldd	r8, Y+5	; 0x05
    5a24:	9e 80       	ldd	r9, Y+6	; 0x06
    5a26:	af 80       	ldd	r10, Y+7	; 0x07
    5a28:	b8 84       	ldd	r11, Y+8	; 0x08
    5a2a:	e9 80       	ldd	r14, Y+1	; 0x01
    5a2c:	fa 80       	ldd	r15, Y+2	; 0x02
    5a2e:	0b 81       	ldd	r16, Y+3	; 0x03
    5a30:	1c 81       	ldd	r17, Y+4	; 0x04
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
		    {
    5a32:	e1 14       	cp	r14, r1
    5a34:	f1 04       	cpc	r15, r1
    5a36:	01 05       	cpc	r16, r1
    5a38:	11 05       	cpc	r17, r1
    5a3a:	01 f1       	breq	.+64     	; 0x5a7c <_nrk_time_to_ticks+0x92>
		    	return NRK_ERROR;
		    }
    5a3c:	80 e0       	ldi	r24, 0x00	; 0
    5a3e:	9a ec       	ldi	r25, 0xCA	; 202
    5a40:	aa e9       	ldi	r26, 0x9A	; 154
    5a42:	bb e3       	ldi	r27, 0x3B	; 59
    5a44:	88 0e       	add	r8, r24
    5a46:	99 1e       	adc	r9, r25
    5a48:	aa 1e       	adc	r10, r26
    5a4a:	bb 1e       	adc	r11, r27
		    if(opt&APPEND_FLAG)
		    {
    5a4c:	c5 01       	movw	r24, r10
    5a4e:	b4 01       	movw	r22, r8
    5a50:	23 eb       	ldi	r18, 0xB3	; 179
    5a52:	36 ee       	ldi	r19, 0xE6	; 230
    5a54:	4e e0       	ldi	r20, 0x0E	; 14
    5a56:	50 e0       	ldi	r21, 0x00	; 0
    5a58:	0e 94 57 3a 	call	0x74ae	; 0x74ae <__udivmodsi4>
    5a5c:	69 01       	movw	r12, r18
		    	return NRK_ERROR;
    5a5e:	08 94       	sec
    5a60:	e1 08       	sbc	r14, r1
    5a62:	f1 08       	sbc	r15, r1
    5a64:	01 09       	sbc	r16, r1
    5a66:	11 09       	sbc	r17, r1
    5a68:	8a e0       	ldi	r24, 0x0A	; 10
    5a6a:	ee 0c       	add	r14, r14
    5a6c:	ff 1c       	adc	r15, r15
    5a6e:	00 1f       	adc	r16, r16
    5a70:	11 1f       	adc	r17, r17
    5a72:	8a 95       	dec	r24
    5a74:	d1 f7       	brne	.-12     	; 0x5a6a <_nrk_time_to_ticks+0x80>
    5a76:	ce 0c       	add	r12, r14
    5a78:	df 1c       	adc	r13, r15
    5a7a:	09 c0       	rjmp	.+18     	; 0x5a8e <_nrk_time_to_ticks+0xa4>
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
    5a7c:	c5 01       	movw	r24, r10
    5a7e:	b4 01       	movw	r22, r8
    5a80:	23 eb       	ldi	r18, 0xB3	; 179
    5a82:	36 ee       	ldi	r19, 0xE6	; 230
    5a84:	4e e0       	ldi	r20, 0x0E	; 14
    5a86:	50 e0       	ldi	r21, 0x00	; 0
    5a88:	0e 94 57 3a 	call	0x74ae	; 0x74ae <__udivmodsi4>
    5a8c:	69 01       	movw	r12, r18
    5a8e:	b6 01       	movw	r22, r12
    5a90:	02 c0       	rjmp	.+4      	; 0x5a96 <_nrk_time_to_ticks+0xac>
		    else return NRK_OK;
		
	    

    5a92:	60 50       	subi	r22, 0x00	; 0
    5a94:	74 40       	sbci	r23, 0x04	; 4
    5a96:	94 e0       	ldi	r25, 0x04	; 4
    5a98:	61 30       	cpi	r22, 0x01	; 1
    5a9a:	79 07       	cpc	r23, r25
    5a9c:	d0 f7       	brcc	.-12     	; 0x5a92 <_nrk_time_to_ticks+0xa8>
             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
    5a9e:	88 27       	eor	r24, r24
    5aa0:	99 27       	eor	r25, r25
    5aa2:	23 eb       	ldi	r18, 0xB3	; 179
    5aa4:	36 ee       	ldi	r19, 0xE6	; 230
    5aa6:	4e e0       	ldi	r20, 0x0E	; 14
    5aa8:	50 e0       	ldi	r21, 0x00	; 0
    5aaa:	0e 94 05 3a 	call	0x740a	; 0x740a <__mulsi3>
    5aae:	67 5a       	subi	r22, 0xA7	; 167
    5ab0:	7c 48       	sbci	r23, 0x8C	; 140
    5ab2:	88 4f       	sbci	r24, 0xF8	; 248
    5ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab6:	68 15       	cp	r22, r8
    5ab8:	79 05       	cpc	r23, r9
    5aba:	8a 05       	cpc	r24, r10
    5abc:	9b 05       	cpc	r25, r11
    5abe:	18 f4       	brcc	.+6      	; 0x5ac6 <_nrk_time_to_ticks+0xdc>
    5ac0:	08 94       	sec
    5ac2:	c1 1c       	adc	r12, r1
    5ac4:	d1 1c       	adc	r13, r1
			if(channel!=BAT && channel<7)
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();

    5ac6:	c6 01       	movw	r24, r12
    5ac8:	28 96       	adiw	r28, 0x08	; 8
    5aca:	0f b6       	in	r0, 0x3f	; 63
    5acc:	f8 94       	cli
    5ace:	de bf       	out	0x3e, r29	; 62
    5ad0:	0f be       	out	0x3f, r0	; 63
    5ad2:	cd bf       	out	0x3d, r28	; 61
    5ad4:	df 91       	pop	r29
    5ad6:	cf 91       	pop	r28
    5ad8:	1f 91       	pop	r17
    5ada:	0f 91       	pop	r16
    5adc:	ff 90       	pop	r15
    5ade:	ef 90       	pop	r14
    5ae0:	df 90       	pop	r13
    5ae2:	cf 90       	pop	r12
    5ae4:	bf 90       	pop	r11
    5ae6:	af 90       	pop	r10
    5ae8:	9f 90       	pop	r9
    5aea:	8f 90       	pop	r8
    5aec:	08 95       	ret

00005aee <_nrk_ticks_to_time>:
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
    5aee:	2f 92       	push	r2
    5af0:	3f 92       	push	r3
    5af2:	4f 92       	push	r4
    5af4:	5f 92       	push	r5
    5af6:	6f 92       	push	r6
    5af8:	7f 92       	push	r7
    5afa:	8f 92       	push	r8
    5afc:	9f 92       	push	r9
    5afe:	af 92       	push	r10
    5b00:	bf 92       	push	r11
    5b02:	cf 92       	push	r12
    5b04:	df 92       	push	r13
    5b06:	ef 92       	push	r14
    5b08:	ff 92       	push	r15
    5b0a:	0f 93       	push	r16
    5b0c:	1f 93       	push	r17
    5b0e:	cf 93       	push	r28
    5b10:	df 93       	push	r29
    5b12:	cd b7       	in	r28, 0x3d	; 61
    5b14:	de b7       	in	r29, 0x3e	; 62
    5b16:	28 97       	sbiw	r28, 0x08	; 8
    5b18:	0f b6       	in	r0, 0x3f	; 63
    5b1a:	f8 94       	cli
    5b1c:	de bf       	out	0x3e, r29	; 62
    5b1e:	0f be       	out	0x3f, r0	; 63
    5b20:	cd bf       	out	0x3d, r28	; 61
    5b22:	7b 01       	movw	r14, r22
    5b24:	8c 01       	movw	r16, r24
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}

				if(size==1)
			      	{
    5b26:	73 70       	andi	r23, 0x03	; 3
    5b28:	80 70       	andi	r24, 0x00	; 0
    5b2a:	90 70       	andi	r25, 0x00	; 0
    5b2c:	23 eb       	ldi	r18, 0xB3	; 179
    5b2e:	36 ee       	ldi	r19, 0xE6	; 230
    5b30:	4e e0       	ldi	r20, 0x0E	; 14
    5b32:	50 e0       	ldi	r21, 0x00	; 0
    5b34:	0e 94 05 3a 	call	0x740a	; 0x740a <__mulsi3>
    5b38:	6d 83       	std	Y+5, r22	; 0x05
    5b3a:	7e 83       	std	Y+6, r23	; 0x06
    5b3c:	8f 83       	std	Y+7, r24	; 0x07
    5b3e:	98 87       	std	Y+8, r25	; 0x08
    5b40:	9a e0       	ldi	r25, 0x0A	; 10
    5b42:	16 95       	lsr	r17
    5b44:	07 95       	ror	r16
    5b46:	f7 94       	ror	r15
    5b48:	e7 94       	ror	r14
    5b4a:	9a 95       	dec	r25
    5b4c:	d1 f7       	brne	.-12     	; 0x5b42 <_nrk_ticks_to_time+0x54>
    5b4e:	e9 82       	std	Y+1, r14	; 0x01
    5b50:	fa 82       	std	Y+2, r15	; 0x02
    5b52:	0b 83       	std	Y+3, r16	; 0x03
    5b54:	1c 83       	std	Y+4, r17	; 0x04
    5b56:	98 85       	ldd	r25, Y+8	; 0x08
    5b58:	29 80       	ldd	r2, Y+1	; 0x01
    5b5a:	3a 80       	ldd	r3, Y+2	; 0x02
    5b5c:	4b 80       	ldd	r4, Y+3	; 0x03
    5b5e:	5c 80       	ldd	r5, Y+4	; 0x04
    5b60:	6d 80       	ldd	r6, Y+5	; 0x05
    5b62:	7e 80       	ldd	r7, Y+6	; 0x06
    5b64:	8f 80       	ldd	r8, Y+7	; 0x07
			      		buffer[count]=(val>>2)  & 0xFF;
    5b66:	22 2d       	mov	r18, r2
    5b68:	33 2d       	mov	r19, r3
    5b6a:	44 2d       	mov	r20, r4
    5b6c:	55 2d       	mov	r21, r5
    5b6e:	66 2d       	mov	r22, r6
    5b70:	77 2d       	mov	r23, r7
    5b72:	88 2d       	mov	r24, r8
    5b74:	28 96       	adiw	r28, 0x08	; 8
    5b76:	0f b6       	in	r0, 0x3f	; 63
    5b78:	f8 94       	cli
    5b7a:	de bf       	out	0x3e, r29	; 62
    5b7c:	0f be       	out	0x3f, r0	; 63
    5b7e:	cd bf       	out	0x3d, r28	; 61
    5b80:	df 91       	pop	r29
    5b82:	cf 91       	pop	r28
    5b84:	1f 91       	pop	r17
    5b86:	0f 91       	pop	r16
    5b88:	ff 90       	pop	r15
    5b8a:	ef 90       	pop	r14
    5b8c:	df 90       	pop	r13
    5b8e:	cf 90       	pop	r12
    5b90:	bf 90       	pop	r11
    5b92:	af 90       	pop	r10
    5b94:	9f 90       	pop	r9
    5b96:	8f 90       	pop	r8
    5b98:	7f 90       	pop	r7
    5b9a:	6f 90       	pop	r6
    5b9c:	5f 90       	pop	r5
    5b9e:	4f 90       	pop	r4
    5ba0:	3f 90       	pop	r3
    5ba2:	2f 90       	pop	r2
    5ba4:	08 95       	ret

00005ba6 <_nrk_time_to_ticks_long>:
				}


    5ba6:	af 92       	push	r10
    5ba8:	bf 92       	push	r11
    5baa:	cf 92       	push	r12
    5bac:	df 92       	push	r13
    5bae:	ef 92       	push	r14
    5bb0:	ff 92       	push	r15
    5bb2:	0f 93       	push	r16
    5bb4:	1f 93       	push	r17
    5bb6:	cf 93       	push	r28
    5bb8:	df 93       	push	r29
    5bba:	cd b7       	in	r28, 0x3d	; 61
    5bbc:	de b7       	in	r29, 0x3e	; 62
    5bbe:	28 97       	sbiw	r28, 0x08	; 8
    5bc0:	0f b6       	in	r0, 0x3f	; 63
    5bc2:	f8 94       	cli
    5bc4:	de bf       	out	0x3e, r29	; 62
    5bc6:	0f be       	out	0x3f, r0	; 63
    5bc8:	cd bf       	out	0x3d, r28	; 61
    5bca:	29 83       	std	Y+1, r18	; 0x01
    5bcc:	3a 83       	std	Y+2, r19	; 0x02
    5bce:	4b 83       	std	Y+3, r20	; 0x03
    5bd0:	5c 83       	std	Y+4, r21	; 0x04
    5bd2:	6d 83       	std	Y+5, r22	; 0x05
    5bd4:	7e 83       	std	Y+6, r23	; 0x06
    5bd6:	8f 83       	std	Y+7, r24	; 0x07
    5bd8:	98 87       	std	Y+8, r25	; 0x08
    5bda:	ad 80       	ldd	r10, Y+5	; 0x05
    5bdc:	be 80       	ldd	r11, Y+6	; 0x06
    5bde:	cf 80       	ldd	r12, Y+7	; 0x07
    5be0:	d8 84       	ldd	r13, Y+8	; 0x08
    5be2:	e9 80       	ldd	r14, Y+1	; 0x01
    5be4:	fa 80       	ldd	r15, Y+2	; 0x02
    5be6:	0b 81       	ldd	r16, Y+3	; 0x03
    5be8:	1c 81       	ldd	r17, Y+4	; 0x04
			} else if(channel==BAT)
			{
			uint16_t tmp;
			tmp=read_voltage_status();
    5bea:	e1 14       	cp	r14, r1
    5bec:	f1 04       	cpc	r15, r1
    5bee:	01 05       	cpc	r16, r1
    5bf0:	11 05       	cpc	r17, r1
    5bf2:	09 f1       	breq	.+66     	; 0x5c36 <_nrk_time_to_ticks_long+0x90>
			if(size==2)
				{
    5bf4:	80 e0       	ldi	r24, 0x00	; 0
    5bf6:	9a ec       	ldi	r25, 0xCA	; 202
    5bf8:	aa e9       	ldi	r26, 0x9A	; 154
    5bfa:	bb e3       	ldi	r27, 0x3B	; 59
    5bfc:	a8 0e       	add	r10, r24
    5bfe:	b9 1e       	adc	r11, r25
    5c00:	ca 1e       	adc	r12, r26
    5c02:	db 1e       	adc	r13, r27
					buffer[count]=tmp & 0xFF;
					count++;
    5c04:	c6 01       	movw	r24, r12
    5c06:	b5 01       	movw	r22, r10
    5c08:	23 eb       	ldi	r18, 0xB3	; 179
    5c0a:	36 ee       	ldi	r19, 0xE6	; 230
    5c0c:	4e e0       	ldi	r20, 0x0E	; 14
    5c0e:	50 e0       	ldi	r21, 0x00	; 0
    5c10:	0e 94 57 3a 	call	0x74ae	; 0x74ae <__udivmodsi4>
					buffer[count]=(tmp>>8) & 0xFF;
    5c14:	08 94       	sec
    5c16:	e1 08       	sbc	r14, r1
    5c18:	f1 08       	sbc	r15, r1
    5c1a:	01 09       	sbc	r16, r1
    5c1c:	11 09       	sbc	r17, r1
    5c1e:	6a e0       	ldi	r22, 0x0A	; 10
    5c20:	ee 0c       	add	r14, r14
    5c22:	ff 1c       	adc	r15, r15
    5c24:	00 1f       	adc	r16, r16
    5c26:	11 1f       	adc	r17, r17
    5c28:	6a 95       	dec	r22
    5c2a:	d1 f7       	brne	.-12     	; 0x5c20 <_nrk_time_to_ticks_long+0x7a>
    5c2c:	e2 0e       	add	r14, r18
    5c2e:	f3 1e       	adc	r15, r19
    5c30:	04 1f       	adc	r16, r20
    5c32:	15 1f       	adc	r17, r21
    5c34:	0a c0       	rjmp	.+20     	; 0x5c4a <_nrk_time_to_ticks_long+0xa4>
				}
			if(size==1)
				{
    5c36:	c6 01       	movw	r24, r12
    5c38:	b5 01       	movw	r22, r10
    5c3a:	23 eb       	ldi	r18, 0xB3	; 179
    5c3c:	36 ee       	ldi	r19, 0xE6	; 230
    5c3e:	4e e0       	ldi	r20, 0x0E	; 14
    5c40:	50 e0       	ldi	r21, 0x00	; 0
    5c42:	0e 94 57 3a 	call	0x74ae	; 0x74ae <__udivmodsi4>
    5c46:	79 01       	movw	r14, r18
    5c48:	8a 01       	movw	r16, r20
    5c4a:	c8 01       	movw	r24, r16
    5c4c:	b7 01       	movw	r22, r14
    5c4e:	04 c0       	rjmp	.+8      	; 0x5c58 <_nrk_time_to_ticks_long+0xb2>
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
			{
    5c50:	60 50       	subi	r22, 0x00	; 0
    5c52:	74 40       	sbci	r23, 0x04	; 4
    5c54:	80 40       	sbci	r24, 0x00	; 0
    5c56:	90 40       	sbci	r25, 0x00	; 0
    5c58:	61 30       	cpi	r22, 0x01	; 1
    5c5a:	a4 e0       	ldi	r26, 0x04	; 4
    5c5c:	7a 07       	cpc	r23, r26
    5c5e:	a0 e0       	ldi	r26, 0x00	; 0
    5c60:	8a 07       	cpc	r24, r26
    5c62:	a0 e0       	ldi	r26, 0x00	; 0
    5c64:	9a 07       	cpc	r25, r26
    5c66:	a0 f7       	brcc	.-24     	; 0x5c50 <_nrk_time_to_ticks_long+0xaa>
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
    5c68:	23 eb       	ldi	r18, 0xB3	; 179
    5c6a:	36 ee       	ldi	r19, 0xE6	; 230
    5c6c:	4e e0       	ldi	r20, 0x0E	; 14
    5c6e:	50 e0       	ldi	r21, 0x00	; 0
    5c70:	0e 94 05 3a 	call	0x740a	; 0x740a <__mulsi3>
    5c74:	67 5a       	subi	r22, 0xA7	; 167
    5c76:	7c 48       	sbci	r23, 0x8C	; 140
    5c78:	88 4f       	sbci	r24, 0xF8	; 248
    5c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c7c:	6a 15       	cp	r22, r10
    5c7e:	7b 05       	cpc	r23, r11
    5c80:	8c 05       	cpc	r24, r12
    5c82:	9d 05       	cpc	r25, r13
    5c84:	28 f4       	brcc	.+10     	; 0x5c90 <_nrk_time_to_ticks_long+0xea>
    5c86:	08 94       	sec
    5c88:	e1 1c       	adc	r14, r1
    5c8a:	f1 1c       	adc	r15, r1
    5c8c:	01 1d       	adc	r16, r1
    5c8e:	11 1d       	adc	r17, r1
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
    5c90:	c8 01       	movw	r24, r16
    5c92:	b7 01       	movw	r22, r14
    5c94:	28 96       	adiw	r28, 0x08	; 8
    5c96:	0f b6       	in	r0, 0x3f	; 63
    5c98:	f8 94       	cli
    5c9a:	de bf       	out	0x3e, r29	; 62
    5c9c:	0f be       	out	0x3f, r0	; 63
    5c9e:	cd bf       	out	0x3d, r28	; 61
    5ca0:	df 91       	pop	r29
    5ca2:	cf 91       	pop	r28
    5ca4:	1f 91       	pop	r17
    5ca6:	0f 91       	pop	r16
    5ca8:	ff 90       	pop	r15
    5caa:	ef 90       	pop	r14
    5cac:	df 90       	pop	r13
    5cae:	cf 90       	pop	r12
    5cb0:	bf 90       	pop	r11
    5cb2:	af 90       	pop	r10
    5cb4:	08 95       	ret

00005cb6 <nrk_time_get>:

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;
    5cb6:	ef 92       	push	r14
    5cb8:	ff 92       	push	r15
    5cba:	0f 93       	push	r16
    5cbc:	1f 93       	push	r17
    5cbe:	cf 93       	push	r28
    5cc0:	df 93       	push	r29
    5cc2:	ec 01       	movw	r28, r24

    5cc4:	80 91 30 0a 	lds	r24, 0x0A30
    5cc8:	90 91 31 0a 	lds	r25, 0x0A31
    5ccc:	a0 91 32 0a 	lds	r26, 0x0A32
    5cd0:	b0 91 33 0a 	lds	r27, 0x0A33
    5cd4:	88 83       	st	Y, r24
    5cd6:	99 83       	std	Y+1, r25	; 0x01
    5cd8:	aa 83       	std	Y+2, r26	; 0x02
    5cda:	bb 83       	std	Y+3, r27	; 0x03
// VREF is set to VCC by default
    5cdc:	e0 90 34 0a 	lds	r14, 0x0A34
    5ce0:	f0 90 35 0a 	lds	r15, 0x0A35
    5ce4:	00 91 36 0a 	lds	r16, 0x0A36
    5ce8:	10 91 37 0a 	lds	r17, 0x0A37
    5cec:	ec 82       	std	Y+4, r14	; 0x04
    5cee:	fd 82       	std	Y+5, r15	; 0x05
    5cf0:	0e 83       	std	Y+6, r16	; 0x06
    5cf2:	1f 83       	std	Y+7, r17	; 0x07
#define ADC_INIT() \
    do { \
    5cf4:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    5cf8:	99 27       	eor	r25, r25
    5cfa:	aa 27       	eor	r26, r26
    5cfc:	bb 27       	eor	r27, r27
    5cfe:	bc 01       	movw	r22, r24
    5d00:	cd 01       	movw	r24, r26
    5d02:	23 eb       	ldi	r18, 0xB3	; 179
    5d04:	36 ee       	ldi	r19, 0xE6	; 230
    5d06:	4e e0       	ldi	r20, 0x0E	; 14
    5d08:	50 e0       	ldi	r21, 0x00	; 0
    5d0a:	0e 94 05 3a 	call	0x740a	; 0x740a <__mulsi3>
    5d0e:	e6 0e       	add	r14, r22
    5d10:	f7 1e       	adc	r15, r23
    5d12:	08 1f       	adc	r16, r24
    5d14:	19 1f       	adc	r17, r25
    5d16:	ec 82       	std	Y+4, r14	; 0x04
    5d18:	fd 82       	std	Y+5, r15	; 0x05
    5d1a:	0e 83       	std	Y+6, r16	; 0x06
    5d1c:	1f 83       	std	Y+7, r17	; 0x07
    5d1e:	13 c0       	rjmp	.+38     	; 0x5d46 <nrk_time_get+0x90>
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)
    5d20:	80 50       	subi	r24, 0x00	; 0
    5d22:	9a 4c       	sbci	r25, 0xCA	; 202
    5d24:	aa 49       	sbci	r26, 0x9A	; 154
    5d26:	bb 43       	sbci	r27, 0x3B	; 59
    5d28:	8c 83       	std	Y+4, r24	; 0x04
    5d2a:	9d 83       	std	Y+5, r25	; 0x05
    5d2c:	ae 83       	std	Y+6, r26	; 0x06
    5d2e:	bf 83       	std	Y+7, r27	; 0x07

    5d30:	88 81       	ld	r24, Y
    5d32:	99 81       	ldd	r25, Y+1	; 0x01
    5d34:	aa 81       	ldd	r26, Y+2	; 0x02
    5d36:	bb 81       	ldd	r27, Y+3	; 0x03
    5d38:	01 96       	adiw	r24, 0x01	; 1
    5d3a:	a1 1d       	adc	r26, r1
    5d3c:	b1 1d       	adc	r27, r1
    5d3e:	88 83       	st	Y, r24
    5d40:	99 83       	std	Y+1, r25	; 0x01
    5d42:	aa 83       	std	Y+2, r26	; 0x02
    5d44:	bb 83       	std	Y+3, r27	; 0x03
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
    5d46:	8c 81       	ldd	r24, Y+4	; 0x04
    5d48:	9d 81       	ldd	r25, Y+5	; 0x05
    5d4a:	ae 81       	ldd	r26, Y+6	; 0x06
    5d4c:	bf 81       	ldd	r27, Y+7	; 0x07
    5d4e:	80 30       	cpi	r24, 0x00	; 0
    5d50:	2a ec       	ldi	r18, 0xCA	; 202
    5d52:	92 07       	cpc	r25, r18
    5d54:	2a e9       	ldi	r18, 0x9A	; 154
    5d56:	a2 07       	cpc	r26, r18
    5d58:	2b e3       	ldi	r18, 0x3B	; 59
    5d5a:	b2 07       	cpc	r27, r18
    5d5c:	08 f7       	brcc	.-62     	; 0x5d20 <nrk_time_get+0x6a>
    5d5e:	df 91       	pop	r29
    5d60:	cf 91       	pop	r28
    5d62:	1f 91       	pop	r17
    5d64:	0f 91       	pop	r16
    5d66:	ff 90       	pop	r15
    5d68:	ef 90       	pop	r14
    5d6a:	08 95       	ret

00005d6c <nrk_idle_task>:

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;
    5d6c:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <nrk_stack_check>

// VREF is set to VCC by default
    5d70:	0e 94 33 32 	call	0x6466	; 0x6466 <_nrk_get_next_wakeup>
    5d74:	8b 30       	cpi	r24, 0x0B	; 11
    5d76:	18 f4       	brcc	.+6      	; 0x5d7e <nrk_idle_task+0x12>
#define ADC_INIT() \
    do { \
    5d78:	81 e0       	ldi	r24, 0x01	; 1
    5d7a:	80 93 2d 0a 	sts	0x0A2D, r24
#define ADC_VREF_VCC() \
   do { \
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)

    5d7e:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <nrk_idle>

#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
    5d82:	80 91 cc 07 	lds	r24, 0x07CC
    5d86:	85 35       	cpi	r24, 0x55	; 85
    5d88:	19 f0       	breq	.+6      	; 0x5d90 <nrk_idle_task+0x24>
    5d8a:	88 e0       	ldi	r24, 0x08	; 8
    5d8c:	0e 94 75 24 	call	0x48ea	; 0x48ea <nrk_error_add>
} while(0)


#define ADC_VREF_2_56() \
   do { \
    5d90:	80 91 7e 21 	lds	r24, 0x217E
    5d94:	85 35       	cpi	r24, 0x55	; 85
    5d96:	51 f3       	breq	.-44     	; 0x5d6c <nrk_idle_task>
    5d98:	88 e0       	ldi	r24, 0x08	; 8
    5d9a:	0e 94 75 24 	call	0x48ea	; 0x48ea <nrk_error_add>
    5d9e:	e6 cf       	rjmp	.-52     	; 0x5d6c <nrk_idle_task>

00005da0 <_nrk_scheduler>:
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
    5da0:	8f 92       	push	r8
    5da2:	9f 92       	push	r9
    5da4:	af 92       	push	r10
    5da6:	bf 92       	push	r11
    5da8:	cf 92       	push	r12
    5daa:	df 92       	push	r13
    5dac:	ef 92       	push	r14
    5dae:	ff 92       	push	r15
    5db0:	0f 93       	push	r16
    5db2:	1f 93       	push	r17
    5db4:	cf 93       	push	r28
    5db6:	df 93       	push	r29
	ADMUX = BM(REFS0);  \
} while (0)

#define ADC_VREF_VCC() \
   do { \
    5db8:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)

    5dbc:	0e 94 ef 31 	call	0x63de	; 0x63de <_nrk_high_speed_timer_reset>

    5dc0:	0e 94 f7 31 	call	0x63ee	; 0x63ee <_nrk_high_speed_timer_get>
    5dc4:	4c 01       	movw	r8, r24
#define ADC_VREF_1_1() \
   do { \
    5dc6:	8a ef       	ldi	r24, 0xFA	; 250
    5dc8:	0e 94 38 32 	call	0x6470	; 0x6470 <_nrk_set_next_wakeup>

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)
    5dcc:	60 91 c4 08 	lds	r22, 0x08C4
    5dd0:	77 27       	eor	r23, r23
    5dd2:	88 27       	eor	r24, r24
    5dd4:	99 27       	eor	r25, r25
    5dd6:	23 eb       	ldi	r18, 0xB3	; 179
    5dd8:	36 ee       	ldi	r19, 0xE6	; 230
    5dda:	4e e0       	ldi	r20, 0x0E	; 14
    5ddc:	50 e0       	ldi	r21, 0x00	; 0
    5dde:	0e 94 05 3a 	call	0x740a	; 0x740a <__mulsi3>
    5de2:	7b 01       	movw	r14, r22
    5de4:	8c 01       	movw	r16, r24
    5de6:	80 91 34 0a 	lds	r24, 0x0A34
    5dea:	90 91 35 0a 	lds	r25, 0x0A35
    5dee:	a0 91 36 0a 	lds	r26, 0x0A36
    5df2:	b0 91 37 0a 	lds	r27, 0x0A37
    5df6:	e8 0e       	add	r14, r24
    5df8:	f9 1e       	adc	r15, r25
    5dfa:	0a 1f       	adc	r16, r26
    5dfc:	1b 1f       	adc	r17, r27

    5dfe:	c8 01       	movw	r24, r16
    5e00:	b7 01       	movw	r22, r14
    5e02:	0e 94 57 3a 	call	0x74ae	; 0x74ae <__udivmodsi4>
    5e06:	a8 01       	movw	r20, r16
    5e08:	97 01       	movw	r18, r14
    5e0a:	26 1b       	sub	r18, r22
    5e0c:	37 0b       	sbc	r19, r23
    5e0e:	48 0b       	sbc	r20, r24
    5e10:	59 0b       	sbc	r21, r25
    5e12:	80 91 30 0a 	lds	r24, 0x0A30
    5e16:	90 91 31 0a 	lds	r25, 0x0A31
    5e1a:	a0 91 32 0a 	lds	r26, 0x0A32
    5e1e:	b0 91 33 0a 	lds	r27, 0x0A33
    5e22:	1b c0       	rjmp	.+54     	; 0x5e5a <_nrk_scheduler+0xba>
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
    5e24:	e1 2c       	mov	r14, r1
    5e26:	66 e3       	ldi	r22, 0x36	; 54
    5e28:	f6 2e       	mov	r15, r22
    5e2a:	65 e6       	ldi	r22, 0x65	; 101
    5e2c:	06 2f       	mov	r16, r22
    5e2e:	64 ec       	ldi	r22, 0xC4	; 196
    5e30:	16 2f       	mov	r17, r22
    5e32:	e2 0e       	add	r14, r18
    5e34:	f3 1e       	adc	r15, r19
    5e36:	04 1f       	adc	r16, r20
    5e38:	15 1f       	adc	r17, r21
{
uint8_t count=0;
    5e3a:	c8 01       	movw	r24, r16
    5e3c:	b7 01       	movw	r22, r14
    5e3e:	23 eb       	ldi	r18, 0xB3	; 179
    5e40:	36 ee       	ldi	r19, 0xE6	; 230
    5e42:	4e e0       	ldi	r20, 0x0E	; 14
    5e44:	50 e0       	ldi	r21, 0x00	; 0
    5e46:	0e 94 57 3a 	call	0x74ae	; 0x74ae <__udivmodsi4>
    5e4a:	a8 01       	movw	r20, r16
    5e4c:	97 01       	movw	r18, r14
    5e4e:	26 1b       	sub	r18, r22
    5e50:	37 0b       	sbc	r19, r23
    5e52:	48 0b       	sbc	r20, r24
    5e54:	59 0b       	sbc	r21, r25
    5e56:	d6 01       	movw	r26, r12
    5e58:	c5 01       	movw	r24, r10
    5e5a:	5c 01       	movw	r10, r24
    5e5c:	6d 01       	movw	r12, r26
    5e5e:	08 94       	sec
    5e60:	a1 1c       	adc	r10, r1
    5e62:	b1 1c       	adc	r11, r1
    5e64:	c1 1c       	adc	r12, r1
    5e66:	d1 1c       	adc	r13, r1
#define ADC_GET_SAMPLE_8(x) \
do { \
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
} while (0)

    5e68:	20 30       	cpi	r18, 0x00	; 0
    5e6a:	6a ec       	ldi	r22, 0xCA	; 202
    5e6c:	36 07       	cpc	r19, r22
    5e6e:	6a e9       	ldi	r22, 0x9A	; 154
    5e70:	46 07       	cpc	r20, r22
    5e72:	6b e3       	ldi	r22, 0x3B	; 59
    5e74:	56 07       	cpc	r21, r22
    5e76:	b0 f6       	brcc	.-84     	; 0x5e24 <_nrk_scheduler+0x84>
    5e78:	80 93 30 0a 	sts	0x0A30, r24
    5e7c:	90 93 31 0a 	sts	0x0A31, r25
    5e80:	a0 93 32 0a 	sts	0x0A32, r26
    5e84:	b0 93 33 0a 	sts	0x0A33, r27
    5e88:	20 93 34 0a 	sts	0x0A34, r18
    5e8c:	30 93 35 0a 	sts	0x0A35, r19
    5e90:	40 93 36 0a 	sts	0x0A36, r20
    5e94:	50 93 37 0a 	sts	0x0A37, r21
{
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

    5e98:	e0 91 39 0a 	lds	r30, 0x0A39
    5e9c:	f0 91 3a 0a 	lds	r31, 0x0A3A
    5ea0:	85 81       	ldd	r24, Z+5	; 0x05
    5ea2:	88 23       	and	r24, r24
    5ea4:	19 f1       	breq	.+70     	; 0x5eec <_nrk_scheduler+0x14c>
    5ea6:	81 85       	ldd	r24, Z+9	; 0x09
    5ea8:	84 30       	cpi	r24, 0x04	; 4
    5eaa:	01 f1       	breq	.+64     	; 0x5eec <_nrk_scheduler+0x14c>
     switch(action)
     {
            case INIT: 
			// Set the pwr ctrl pin as output
    5eac:	87 81       	ldd	r24, Z+7	; 0x07
    5eae:	82 30       	cpi	r24, 0x02	; 2
    5eb0:	29 f0       	breq	.+10     	; 0x5ebc <_nrk_scheduler+0x11c>
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
    5eb2:	88 23       	and	r24, r24
    5eb4:	41 f0       	breq	.+16     	; 0x5ec6 <_nrk_scheduler+0x126>
    5eb6:	86 81       	ldd	r24, Z+6	; 0x06
    5eb8:	88 23       	and	r24, r24
    5eba:	11 f4       	brne	.+4      	; 0x5ec0 <_nrk_scheduler+0x120>
	     		init_adc();  
    5ebc:	85 e0       	ldi	r24, 0x05	; 5
    5ebe:	01 c0       	rjmp	.+2      	; 0x5ec2 <_nrk_scheduler+0x122>
			is_open=0;
		      return 1;
    5ec0:	83 e0       	ldi	r24, 0x03	; 3
    5ec2:	81 87       	std	Z+9, r24	; 0x09
    5ec4:	0c c0       	rjmp	.+24     	; 0x5ede <_nrk_scheduler+0x13e>
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    5ec6:	83 e0       	ldi	r24, 0x03	; 3
    5ec8:	81 87       	std	Z+9, r24	; 0x09
		    is_open=1; 
    5eca:	e0 91 39 0a 	lds	r30, 0x0A39
    5ece:	f0 91 3a 0a 	lds	r31, 0x0A3A
    5ed2:	17 82       	std	Z+7, r1	; 0x07
		    if(opt&READ_FLAG)
    5ed4:	e0 91 39 0a 	lds	r30, 0x0A39
    5ed8:	f0 91 3a 0a 	lds	r31, 0x0A3A
    5edc:	16 82       	std	Z+6, r1	; 0x06
		    {
		   	// Turn on Sensor Node Power
    5ede:	e0 91 39 0a 	lds	r30, 0x0A39
    5ee2:	f0 91 3a 0a 	lds	r31, 0x0A3A
    5ee6:	80 85       	ldd	r24, Z+8	; 0x08
    5ee8:	0e 94 30 29 	call	0x5260	; 0x5260 <nrk_rem_from_readyQ>
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
		    {
    5eec:	e0 91 39 0a 	lds	r30, 0x0A39
    5ef0:	f0 91 3a 0a 	lds	r31, 0x0A3A
    5ef4:	85 8d       	ldd	r24, Z+29	; 0x1d
    5ef6:	96 8d       	ldd	r25, Z+30	; 0x1e
    5ef8:	89 2b       	or	r24, r25
    5efa:	91 f1       	breq	.+100    	; 0x5f60 <_nrk_scheduler+0x1c0>
    5efc:	60 85       	ldd	r22, Z+8	; 0x08
    5efe:	66 23       	and	r22, r22
    5f00:	79 f1       	breq	.+94     	; 0x5f60 <_nrk_scheduler+0x1c0>
    5f02:	81 85       	ldd	r24, Z+9	; 0x09
    5f04:	84 30       	cpi	r24, 0x04	; 4
    5f06:	61 f1       	breq	.+88     	; 0x5f60 <_nrk_scheduler+0x1c0>
		    	return NRK_ERROR;
		    }
    5f08:	21 8d       	ldd	r18, Z+25	; 0x19
    5f0a:	32 8d       	ldd	r19, Z+26	; 0x1a
    5f0c:	80 91 c4 08 	lds	r24, 0x08C4
    5f10:	99 27       	eor	r25, r25
    5f12:	28 17       	cp	r18, r24
    5f14:	39 07       	cpc	r19, r25
    5f16:	50 f4       	brcc	.+20     	; 0x5f2c <_nrk_scheduler+0x18c>
		    if(opt&APPEND_FLAG)
		    {
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
    5f18:	82 e0       	ldi	r24, 0x02	; 2
    5f1a:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
		    	return NRK_ERROR;
    5f1e:	e0 91 39 0a 	lds	r30, 0x0A39
    5f22:	f0 91 3a 0a 	lds	r31, 0x0A3A
    5f26:	12 8e       	std	Z+26, r1	; 0x1a
    5f28:	11 8e       	std	Z+25, r1	; 0x19
    5f2a:	04 c0       	rjmp	.+8      	; 0x5f34 <_nrk_scheduler+0x194>
		    else return NRK_OK;
		
    5f2c:	28 1b       	sub	r18, r24
    5f2e:	39 0b       	sbc	r19, r25
    5f30:	32 8f       	std	Z+26, r19	; 0x1a
    5f32:	21 8f       	std	Z+25, r18	; 0x19
	    

    5f34:	e0 91 39 0a 	lds	r30, 0x0A39
    5f38:	f0 91 3a 0a 	lds	r31, 0x0A3A
    5f3c:	10 85       	ldd	r17, Z+8	; 0x08
             case READ:
	     	      count=0;
    5f3e:	81 8d       	ldd	r24, Z+25	; 0x19
    5f40:	92 8d       	ldd	r25, Z+26	; 0x1a
    5f42:	89 2b       	or	r24, r25
    5f44:	69 f4       	brne	.+26     	; 0x5f60 <_nrk_scheduler+0x1c0>
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
			{
			      /* Conversion to 8-bit value*/
    5f46:	61 2f       	mov	r22, r17
    5f48:	83 e0       	ldi	r24, 0x03	; 3
    5f4a:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
			      uint16_t val=get_adc_val();
    5f4e:	e0 91 39 0a 	lds	r30, 0x0A39
    5f52:	f0 91 3a 0a 	lds	r31, 0x0A3A
    5f56:	83 e0       	ldi	r24, 0x03	; 3
    5f58:	81 87       	std	Z+9, r24	; 0x09

    5f5a:	81 2f       	mov	r24, r17
    5f5c:	0e 94 30 29 	call	0x5260	; 0x5260 <nrk_rem_from_readyQ>
    5f60:	c2 e7       	ldi	r28, 0x72	; 114
    5f62:	d9 e0       	ldi	r29, 0x09	; 9
    5f64:	00 e6       	ldi	r16, 0x60	; 96
    5f66:	1a ee       	ldi	r17, 0xEA	; 234
    5f68:	cc 24       	eor	r12, r12
    5f6a:	dd 24       	eor	r13, r13
    5f6c:	4c 2d       	mov	r20, r12
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}

				if(size==1)
			      	{
    5f6e:	88 85       	ldd	r24, Y+8	; 0x08
    5f70:	8f 3f       	cpi	r24, 0xFF	; 255
    5f72:	09 f4       	brne	.+2      	; 0x5f76 <_nrk_scheduler+0x1d6>
    5f74:	89 c0       	rjmp	.+274    	; 0x6088 <_nrk_scheduler+0x2e8>
			      		buffer[count]=(val>>2)  & 0xFF;
    5f76:	1d 82       	std	Y+5, r1	; 0x05
				}
    5f78:	88 23       	and	r24, r24
    5f7a:	91 f1       	breq	.+100    	; 0x5fe0 <_nrk_scheduler+0x240>
    5f7c:	89 85       	ldd	r24, Y+9	; 0x09
    5f7e:	84 30       	cpi	r24, 0x04	; 4
    5f80:	79 f1       	breq	.+94     	; 0x5fe0 <_nrk_scheduler+0x240>


    5f82:	2d 89       	ldd	r18, Y+21	; 0x15
    5f84:	3e 89       	ldd	r19, Y+22	; 0x16
    5f86:	80 91 c4 08 	lds	r24, 0x08C4
    5f8a:	99 27       	eor	r25, r25
    5f8c:	28 17       	cp	r18, r24
    5f8e:	39 07       	cpc	r19, r25
    5f90:	28 f0       	brcs	.+10     	; 0x5f9c <_nrk_scheduler+0x1fc>
			} else if(channel==BAT)
    5f92:	28 1b       	sub	r18, r24
    5f94:	39 0b       	sbc	r19, r25
    5f96:	3e 8b       	std	Y+22, r19	; 0x16
    5f98:	2d 8b       	std	Y+21, r18	; 0x15
    5f9a:	02 c0       	rjmp	.+4      	; 0x5fa0 <_nrk_scheduler+0x200>
			{
			uint16_t tmp;
    5f9c:	1e 8a       	std	Y+22, r1	; 0x16
    5f9e:	1d 8a       	std	Y+21, r1	; 0x15
			tmp=read_voltage_status();
			if(size==2)
				{
					buffer[count]=tmp & 0xFF;
					count++;
    5fa0:	2f 89       	ldd	r18, Y+23	; 0x17
    5fa2:	38 8d       	ldd	r19, Y+24	; 0x18
    5fa4:	28 17       	cp	r18, r24
    5fa6:	39 07       	cpc	r19, r25
    5fa8:	28 f0       	brcs	.+10     	; 0x5fb4 <_nrk_scheduler+0x214>
					buffer[count]=(tmp>>8) & 0xFF;
    5faa:	28 1b       	sub	r18, r24
    5fac:	39 0b       	sbc	r19, r25
    5fae:	38 8f       	std	Y+24, r19	; 0x18
    5fb0:	2f 8b       	std	Y+23, r18	; 0x17
    5fb2:	0e c0       	rjmp	.+28     	; 0x5fd0 <_nrk_scheduler+0x230>
				}
			if(size==1)
    5fb4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5fb6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5fb8:	86 17       	cp	r24, r22
    5fba:	97 07       	cpc	r25, r23
    5fbc:	28 f4       	brcc	.+10     	; 0x5fc8 <_nrk_scheduler+0x228>
				{
    5fbe:	68 1b       	sub	r22, r24
    5fc0:	79 0b       	sbc	r23, r25
    5fc2:	78 8f       	std	Y+24, r23	; 0x18
    5fc4:	6f 8b       	std	Y+23, r22	; 0x17
    5fc6:	04 c0       	rjmp	.+8      	; 0x5fd0 <_nrk_scheduler+0x230>
					buffer[count]=(tmp>>2) & 0xFF;
				}
    5fc8:	0e 94 30 3a 	call	0x7460	; 0x7460 <__udivmodhi4>
    5fcc:	98 8f       	std	Y+24, r25	; 0x18
    5fce:	8f 8b       	std	Y+23, r24	; 0x17
			}else if(channel==AUDIO_P2P)
			{
    5fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    5fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    5fd4:	89 2b       	or	r24, r25
    5fd6:	21 f4       	brne	.+8      	; 0x5fe0 <_nrk_scheduler+0x240>
    5fd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5fda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5fdc:	98 8f       	std	Y+24, r25	; 0x18
    5fde:	8f 8b       	std	Y+23, r24	; 0x17
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
    5fe0:	89 85       	ldd	r24, Y+9	; 0x09
    5fe2:	83 30       	cpi	r24, 0x03	; 3
    5fe4:	09 f0       	breq	.+2      	; 0x5fe8 <_nrk_scheduler+0x248>
    5fe6:	50 c0       	rjmp	.+160    	; 0x6088 <_nrk_scheduler+0x2e8>
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
    5fe8:	8d 89       	ldd	r24, Y+21	; 0x15
    5fea:	9e 89       	ldd	r25, Y+22	; 0x16
    5fec:	89 2b       	or	r24, r25
    5fee:	09 f0       	breq	.+2      	; 0x5ff2 <_nrk_scheduler+0x252>
    5ff0:	43 c0       	rjmp	.+134    	; 0x6078 <_nrk_scheduler+0x2d8>
				if(val<min)min=val;
				if(val>max)max=val;
    5ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    5ff4:	88 23       	and	r24, r24
    5ff6:	a1 f0       	breq	.+40     	; 0x6020 <_nrk_scheduler+0x280>
    5ff8:	8e 81       	ldd	r24, Y+6	; 0x06
    5ffa:	88 23       	and	r24, r24
    5ffc:	89 f0       	breq	.+34     	; 0x6020 <_nrk_scheduler+0x280>
    5ffe:	81 e0       	ldi	r24, 0x01	; 1
    6000:	90 e0       	ldi	r25, 0x00	; 0
    6002:	a0 e0       	ldi	r26, 0x00	; 0
    6004:	b0 e0       	ldi	r27, 0x00	; 0
    6006:	00 90 29 0a 	lds	r0, 0x0A29
    600a:	04 c0       	rjmp	.+8      	; 0x6014 <_nrk_scheduler+0x274>
    600c:	88 0f       	add	r24, r24
    600e:	99 1f       	adc	r25, r25
    6010:	aa 1f       	adc	r26, r26
    6012:	bb 1f       	adc	r27, r27
    6014:	0a 94       	dec	r0
    6016:	d2 f7       	brpl	.-12     	; 0x600c <_nrk_scheduler+0x26c>
    6018:	89 8b       	std	Y+17, r24	; 0x11
    601a:	9a 8b       	std	Y+18, r25	; 0x12
    601c:	ab 8b       	std	Y+19, r26	; 0x13
    601e:	bc 8b       	std	Y+20, r27	; 0x14
				// 8 Khz
				nrk_spin_wait_us(125);	
    6020:	1f 82       	std	Y+7, r1	; 0x07
				}
    6022:	1e 82       	std	Y+6, r1	; 0x06
			 	val=max-min;	
    6024:	1d 82       	std	Y+5, r1	; 0x05
				if(size==2)
    6026:	2f 8d       	ldd	r18, Y+31	; 0x1f
    6028:	38 a1       	ldd	r19, Y+32	; 0x20
    602a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    602c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    602e:	21 30       	cpi	r18, 0x01	; 1
    6030:	31 05       	cpc	r19, r1
    6032:	61 f4       	brne	.+24     	; 0x604c <_nrk_scheduler+0x2ac>
			      	{
					buffer[count]=val  & 0xFF;
    6034:	9a 8f       	std	Y+26, r25	; 0x1a
    6036:	89 8f       	std	Y+25, r24	; 0x19
			      		count++;
    6038:	82 e0       	ldi	r24, 0x02	; 2
    603a:	89 87       	std	Y+9, r24	; 0x09
			      		buffer[count]=(val>>8)  & 0xFF;
    603c:	8f 89       	ldd	r24, Y+23	; 0x17
    603e:	98 8d       	ldd	r25, Y+24	; 0x18
    6040:	9e 8b       	std	Y+22, r25	; 0x16
    6042:	8d 8b       	std	Y+21, r24	; 0x15
				}
    6044:	84 2f       	mov	r24, r20
    6046:	0e 94 a9 28 	call	0x5152	; 0x5152 <nrk_add_to_readyQ>
    604a:	16 c0       	rjmp	.+44     	; 0x6078 <_nrk_scheduler+0x2d8>

				if(size==1)
			      	{
    604c:	9a 8f       	std	Y+26, r25	; 0x1a
    604e:	89 8f       	std	Y+25, r24	; 0x19
			      		buffer[count]=(val>>2)  & 0xFF;
				}

    6050:	21 50       	subi	r18, 0x01	; 1
    6052:	30 40       	sbci	r19, 0x00	; 0
    6054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6058:	ac 01       	movw	r20, r24
    605a:	24 9f       	mul	r18, r20
    605c:	c0 01       	movw	r24, r0
    605e:	25 9f       	mul	r18, r21
    6060:	90 0d       	add	r25, r0
    6062:	34 9f       	mul	r19, r20
    6064:	90 0d       	add	r25, r0
    6066:	11 24       	eor	r1, r1
    6068:	9e 8b       	std	Y+22, r25	; 0x16
    606a:	8d 8b       	std	Y+21, r24	; 0x15
			}
    606c:	98 8f       	std	Y+24, r25	; 0x18
    606e:	8f 8b       	std	Y+23, r24	; 0x17
			
    6070:	81 e0       	ldi	r24, 0x01	; 1
    6072:	90 e0       	ldi	r25, 0x00	; 0
    6074:	98 a3       	std	Y+32, r25	; 0x20
    6076:	8f 8f       	std	Y+31, r24	; 0x1f
		      count++;
                      return count;

             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
    6078:	8d 89       	ldd	r24, Y+21	; 0x15
    607a:	9e 89       	ldd	r25, Y+22	; 0x16
    607c:	00 97       	sbiw	r24, 0x00	; 0
    607e:	21 f0       	breq	.+8      	; 0x6088 <_nrk_scheduler+0x2e8>
    6080:	80 17       	cp	r24, r16
    6082:	91 07       	cpc	r25, r17
    6084:	08 f4       	brcc	.+2      	; 0x6088 <_nrk_scheduler+0x2e8>
    6086:	8c 01       	movw	r16, r24
    6088:	08 94       	sec
    608a:	c1 1c       	adc	r12, r1
    608c:	d1 1c       	adc	r13, r1
    608e:	a1 96       	adiw	r28, 0x21	; 33
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
				}

				if(size==1)
    6090:	55 e0       	ldi	r21, 0x05	; 5
    6092:	c5 16       	cp	r12, r21
    6094:	d1 04       	cpc	r13, r1
    6096:	09 f0       	breq	.+2      	; 0x609a <_nrk_scheduler+0x2fa>
    6098:	69 cf       	rjmp	.-302    	; 0x5f6c <_nrk_scheduler+0x1cc>
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
			{
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
    609a:	0e 94 97 28 	call	0x512e	; 0x512e <nrk_get_high_ready_task_ID>
    609e:	e8 2e       	mov	r14, r24
			  {
    60a0:	99 27       	eor	r25, r25
    60a2:	87 fd       	sbrc	r24, 7
    60a4:	90 95       	com	r25
    60a6:	fc 01       	movw	r30, r24
    60a8:	25 e0       	ldi	r18, 0x05	; 5
    60aa:	ee 0f       	add	r30, r30
    60ac:	ff 1f       	adc	r31, r31
    60ae:	2a 95       	dec	r18
    60b0:	e1 f7       	brne	.-8      	; 0x60aa <_nrk_scheduler+0x30a>
    60b2:	e8 0f       	add	r30, r24
    60b4:	f9 1f       	adc	r31, r25
    60b6:	ee 58       	subi	r30, 0x8E	; 142
    60b8:	f6 4f       	sbci	r31, 0xF6	; 246
    60ba:	42 85       	ldd	r20, Z+10	; 0x0a
    60bc:	40 93 3b 0a 	sts	0x0A3B, r20
				channel=value;
    60c0:	81 e2       	ldi	r24, 0x21	; 33
    60c2:	6e 2d       	mov	r22, r14
    60c4:	68 02       	muls	r22, r24
    60c6:	90 01       	movw	r18, r0
    60c8:	11 24       	eor	r1, r1
    60ca:	2e 58       	subi	r18, 0x8E	; 142
    60cc:	36 4f       	sbci	r19, 0xF6	; 246
    60ce:	30 93 2b 0a 	sts	0x0A2B, r19
    60d2:	20 93 2a 0a 	sts	0x0A2A, r18
				ADC_SET_CHANNEL (AUDIO);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;

			  } else
			  {
    60d6:	ee 20       	and	r14, r14
    60d8:	91 f0       	breq	.+36     	; 0x60fe <_nrk_scheduler+0x35e>
				if(value>7) 
				{
					_nrk_errno_set(1);
    60da:	85 8d       	ldd	r24, Z+29	; 0x1d
    60dc:	96 8d       	ldd	r25, Z+30	; 0x1e
    60de:	89 2b       	or	r24, r25
    60e0:	51 f0       	breq	.+20     	; 0x60f6 <_nrk_scheduler+0x356>
    60e2:	81 8d       	ldd	r24, Z+25	; 0x19
    60e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    60e6:	8a 3f       	cpi	r24, 0xFA	; 250
    60e8:	91 05       	cpc	r25, r1
    60ea:	28 f4       	brcc	.+10     	; 0x60f6 <_nrk_scheduler+0x356>
    60ec:	80 17       	cp	r24, r16
    60ee:	91 07       	cpc	r25, r17
    60f0:	e0 f4       	brcc	.+56     	; 0x612a <_nrk_scheduler+0x38a>
    60f2:	8c 01       	movw	r16, r24
    60f4:	1a c0       	rjmp	.+52     	; 0x612a <_nrk_scheduler+0x38a>
    60f6:	0b 3f       	cpi	r16, 0xFB	; 251
    60f8:	11 05       	cpc	r17, r1
    60fa:	b8 f0       	brcs	.+46     	; 0x612a <_nrk_scheduler+0x38a>
    60fc:	14 c0       	rjmp	.+40     	; 0x6126 <_nrk_scheduler+0x386>
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
	}
    60fe:	0b 30       	cpi	r16, 0x0B	; 11
    6100:	11 05       	cpc	r17, r1
    6102:	98 f0       	brcs	.+38     	; 0x612a <_nrk_scheduler+0x38a>
}

    6104:	c8 01       	movw	r24, r16
    6106:	0a 97       	sbiw	r24, 0x0a	; 10
    6108:	8a 3f       	cpi	r24, 0xFA	; 250
    610a:	91 05       	cpc	r25, r1
    610c:	30 f4       	brcc	.+12     	; 0x611a <_nrk_scheduler+0x37a>
    610e:	8c 01       	movw	r16, r24
    6110:	09 97       	sbiw	r24, 0x09	; 9
    6112:	58 f4       	brcc	.+22     	; 0x612a <_nrk_scheduler+0x38a>
    6114:	09 e0       	ldi	r16, 0x09	; 9
    6116:	10 e0       	ldi	r17, 0x00	; 0
    6118:	08 c0       	rjmp	.+16     	; 0x612a <_nrk_scheduler+0x38a>
//
// This function sets different voltage threshold levels on
// the cc2420 chip to search for the voltage.
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
    611a:	05 50       	subi	r16, 0x05	; 5
    611c:	11 40       	sbci	r17, 0x01	; 1
    611e:	18 f4       	brcc	.+6      	; 0x6126 <_nrk_scheduler+0x386>
    6120:	00 ef       	ldi	r16, 0xF0	; 240
    6122:	10 e0       	ldi	r17, 0x00	; 0
    6124:	02 c0       	rjmp	.+4      	; 0x612a <_nrk_scheduler+0x38a>
    6126:	0a ef       	ldi	r16, 0xFA	; 250
    6128:	10 e0       	ldi	r17, 0x00	; 0
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
if(val&0x0040) break; 
level++;
    612a:	40 93 2c 0a 	sts	0x0A2C, r20
}
    612e:	30 93 3a 0a 	sts	0x0A3A, r19
    6132:	20 93 39 0a 	sts	0x0A39, r18
if(level==0)
  {
  val=get_adc_val();
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
  if(val<330) val=330;
    6136:	00 93 c4 08 	sts	0x08C4, r16
  }
else val=(9000-(level*125)) / 27;

    613a:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    613e:	99 27       	eor	r25, r25
    6140:	80 17       	cp	r24, r16
    6142:	91 07       	cpc	r25, r17
    6144:	40 f0       	brcs	.+16     	; 0x6156 <_nrk_scheduler+0x3b6>
// Initialize values here
  ADC_INIT ();
  ADC_ENABLE ();
  channel=0;
  ADC_SET_CHANNEL (0);
}
    6146:	0e 94 a7 32 	call	0x654e	; 0x654e <_nrk_os_timer_get>
    614a:	08 2f       	mov	r16, r24
    614c:	11 27       	eor	r17, r17
    614e:	0e 5f       	subi	r16, 0xFE	; 254
    6150:	1f 4f       	sbci	r17, 0xFF	; 255

    6152:	00 93 c4 08 	sts	0x08C4, r16
uint16_t get_adc_val()
{                         
	uint16_t adc_val;
    6156:	ee 20       	and	r14, r14
    6158:	11 f0       	breq	.+4      	; 0x615e <_nrk_scheduler+0x3be>
    615a:	10 92 2d 0a 	sts	0x0A2D, r1
	ADC_SAMPLE_SINGLE();
	delay();
    615e:	80 2f       	mov	r24, r16
    6160:	0e 94 38 32 	call	0x6470	; 0x6470 <_nrk_set_next_wakeup>
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
    6164:	6e ee       	ldi	r22, 0xEE	; 238
    6166:	72 e0       	ldi	r23, 0x02	; 2
    6168:	c4 01       	movw	r24, r8
    616a:	0e 94 2c 33 	call	0x6658	; 0x6658 <nrk_high_speed_timer_wait>
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
    616e:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <nrk_stack_pointer_restore>
}
    6172:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <nrk_start_high_ready_task>
    6176:	df 91       	pop	r29
    6178:	cf 91       	pop	r28
    617a:	1f 91       	pop	r17
    617c:	0f 91       	pop	r16
    617e:	ff 90       	pop	r15
    6180:	ef 90       	pop	r14
    6182:	df 90       	pop	r13
    6184:	cf 90       	pop	r12
    6186:	bf 90       	pop	r11
    6188:	af 90       	pop	r10
    618a:	9f 90       	pop	r9
    618c:	8f 90       	pop	r8
    618e:	08 95       	ret

00006190 <nrk_register_driver>:
	ADMUX |= BM(REFS0);  \
} while(0)


#define ADC_VREF_1_1() \
   do { \
    6190:	20 91 5a 0a 	lds	r18, 0x0A5A
    6194:	12 16       	cp	r1, r18
    6196:	1c f4       	brge	.+6      	; 0x619e <nrk_register_driver+0xe>
    6198:	8f ef       	ldi	r24, 0xFF	; 255
    619a:	9f ef       	ldi	r25, 0xFF	; 255
    619c:	08 95       	ret
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
    619e:	e2 2f       	mov	r30, r18
    61a0:	ff 27       	eor	r31, r31
    61a2:	e7 fd       	sbrc	r30, 7
    61a4:	f0 95       	com	r31
    61a6:	ee 0f       	add	r30, r30
    61a8:	ff 1f       	adc	r31, r31
    61aa:	ee 0f       	add	r30, r30
    61ac:	ff 1f       	adc	r31, r31
    61ae:	df 01       	movw	r26, r30
    61b0:	a5 5a       	subi	r26, 0xA5	; 165
    61b2:	b5 4f       	sbci	r27, 0xF5	; 245
    61b4:	6c 93       	st	X, r22
} while(0)
    61b6:	e3 5a       	subi	r30, 0xA3	; 163
    61b8:	f5 4f       	sbci	r31, 0xF5	; 245
    61ba:	91 83       	std	Z+1, r25	; 0x01
    61bc:	80 83       	st	Z, r24

    61be:	2f 5f       	subi	r18, 0xFF	; 255
    61c0:	20 93 5a 0a 	sts	0x0A5A, r18
    61c4:	81 e0       	ldi	r24, 0x01	; 1
    61c6:	90 e0       	ldi	r25, 0x00	; 0

#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)
    61c8:	08 95       	ret

000061ca <nrk_open>:

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
    61ca:	0f 93       	push	r16
    61cc:	1f 93       	push	r17
    61ce:	cf 93       	push	r28
    61d0:	df 93       	push	r29
    61d2:	06 2f       	mov	r16, r22
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    61d4:	90 91 5a 0a 	lds	r25, 0x0A5A
    61d8:	a9 2f       	mov	r26, r25
    61da:	bb 27       	eor	r27, r27
    61dc:	a7 fd       	sbrc	r26, 7
    61de:	b0 95       	com	r27
    61e0:	40 e0       	ldi	r20, 0x00	; 0
    61e2:	50 e0       	ldi	r21, 0x00	; 0
    do { \
ADCSRA |= BM(ADSC); \
    61e4:	68 2f       	mov	r22, r24
    61e6:	77 27       	eor	r23, r23
    61e8:	34 c0       	rjmp	.+104    	; 0x6252 <nrk_open+0x88>

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    61ea:	4f 5f       	subi	r20, 0xFF	; 255
    61ec:	5f 4f       	sbci	r21, 0xFF	; 255
    do { \
ADCSRA |= BM(ADSC); \
    61ee:	e9 01       	movw	r28, r18
    61f0:	cc 0f       	add	r28, r28
    61f2:	dd 1f       	adc	r29, r29
    61f4:	cc 0f       	add	r28, r28
    61f6:	dd 1f       	adc	r29, r29
    61f8:	fe 01       	movw	r30, r28
    61fa:	e5 5a       	subi	r30, 0xA5	; 165
    61fc:	f5 4f       	sbci	r31, 0xF5	; 245
    61fe:	80 81       	ld	r24, Z
    6200:	99 27       	eor	r25, r25
    6202:	87 fd       	sbrc	r24, 7
    6204:	90 95       	com	r25
    6206:	86 17       	cp	r24, r22
    6208:	97 07       	cpc	r25, r23
    620a:	19 f5       	brne	.+70     	; 0x6252 <nrk_open+0x88>
while (!(ADCSRA & 0x10)); \
} while(0)
    620c:	f9 01       	movw	r30, r18
    620e:	e1 5a       	subi	r30, 0xA1	; 161
    6210:	f5 4f       	sbci	r31, 0xF5	; 245
    6212:	80 81       	ld	r24, Z
    6214:	88 23       	and	r24, r24
    6216:	71 f4       	brne	.+28     	; 0x6234 <nrk_open+0x6a>

// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
    6218:	81 e0       	ldi	r24, 0x01	; 1
    621a:	80 83       	st	Z, r24
do { \
    621c:	fe 01       	movw	r30, r28
    621e:	e3 5a       	subi	r30, 0xA3	; 163
    6220:	f5 4f       	sbci	r31, 0xF5	; 245
    6222:	01 90       	ld	r0, Z+
    6224:	f0 81       	ld	r31, Z
    6226:	e0 2d       	mov	r30, r0
    6228:	20 e0       	ldi	r18, 0x00	; 0
    622a:	40 e0       	ldi	r20, 0x00	; 0
    622c:	50 e0       	ldi	r21, 0x00	; 0
    622e:	60 2f       	mov	r22, r16
    6230:	80 e0       	ldi	r24, 0x00	; 0
    6232:	09 95       	icall
x =  ADCL; \
x |= ADCH << 8; \
    6234:	c3 5a       	subi	r28, 0xA3	; 163
    6236:	d5 4f       	sbci	r29, 0xF5	; 245
    6238:	e8 81       	ld	r30, Y
    623a:	f9 81       	ldd	r31, Y+1	; 0x01
    623c:	20 e0       	ldi	r18, 0x00	; 0
    623e:	40 e0       	ldi	r20, 0x00	; 0
    6240:	50 e0       	ldi	r21, 0x00	; 0
    6242:	60 2f       	mov	r22, r16
    6244:	81 e0       	ldi	r24, 0x01	; 1
    6246:	09 95       	icall
} while (0)
    6248:	81 2f       	mov	r24, r17
    624a:	99 27       	eor	r25, r25
    624c:	87 fd       	sbrc	r24, 7
    624e:	90 95       	com	r25
    6250:	08 c0       	rjmp	.+16     	; 0x6262 <nrk_open+0x98>
    6252:	14 2f       	mov	r17, r20

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    6254:	24 2f       	mov	r18, r20
    6256:	33 27       	eor	r19, r19
    6258:	2a 17       	cp	r18, r26
    625a:	3b 07       	cpc	r19, r27
    625c:	34 f2       	brlt	.-116    	; 0x61ea <nrk_open+0x20>
    625e:	8f ef       	ldi	r24, 0xFF	; 255
    6260:	9f ef       	ldi	r25, 0xFF	; 255
    6262:	df 91       	pop	r29
    6264:	cf 91       	pop	r28
    6266:	1f 91       	pop	r17
    6268:	0f 91       	pop	r16
    626a:	08 95       	ret

0000626c <nrk_get_status>:
			      uint16_t val=get_adc_val();

				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
    626c:	e8 2f       	mov	r30, r24
    626e:	ff 27       	eor	r31, r31
    6270:	80 91 5a 0a 	lds	r24, 0x0A5A
    6274:	99 27       	eor	r25, r25
    6276:	87 fd       	sbrc	r24, 7
    6278:	90 95       	com	r25
    627a:	8e 17       	cp	r24, r30
    627c:	9f 07       	cpc	r25, r31
    627e:	34 f4       	brge	.+12     	; 0x628c <nrk_get_status+0x20>
			      		buffer[count]=(val>>8)  & 0xFF;
				}
    6280:	81 e0       	ldi	r24, 0x01	; 1
    6282:	0e 94 a9 23 	call	0x4752	; 0x4752 <_nrk_errno_set>
    6286:	8f ef       	ldi	r24, 0xFF	; 255
    6288:	9f ef       	ldi	r25, 0xFF	; 255
    628a:	08 95       	ret

				if(size==1)
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
    628c:	ee 0f       	add	r30, r30
    628e:	ff 1f       	adc	r31, r31
    6290:	ee 0f       	add	r30, r30
    6292:	ff 1f       	adc	r31, r31
    6294:	e3 5a       	subi	r30, 0xA3	; 163
    6296:	f5 4f       	sbci	r31, 0xF5	; 245
    6298:	01 90       	ld	r0, Z+
    629a:	f0 81       	ld	r31, Z
    629c:	e0 2d       	mov	r30, r0
    629e:	20 e0       	ldi	r18, 0x00	; 0
    62a0:	40 e0       	ldi	r20, 0x00	; 0
    62a2:	50 e0       	ldi	r21, 0x00	; 0
    62a4:	83 e0       	ldi	r24, 0x03	; 3
    62a6:	09 95       	icall
    62a8:	99 27       	eor	r25, r25
    62aa:	87 fd       	sbrc	r24, 7
    62ac:	90 95       	com	r25
				}
    62ae:	08 95       	ret

000062b0 <nrk_set_status>:
		    	return NRK_ERROR;
		    else return NRK_OK;
		
	    

             case READ:
    62b0:	24 2f       	mov	r18, r20
	     	      count=0;
    62b2:	e8 2f       	mov	r30, r24
    62b4:	ff 27       	eor	r31, r31
    62b6:	80 91 5a 0a 	lds	r24, 0x0A5A
    62ba:	99 27       	eor	r25, r25
    62bc:	87 fd       	sbrc	r24, 7
    62be:	90 95       	com	r25
    62c0:	8e 17       	cp	r24, r30
    62c2:	9f 07       	cpc	r25, r31
    62c4:	34 f4       	brge	.+12     	; 0x62d2 <nrk_set_status+0x22>
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
    62c6:	81 e0       	ldi	r24, 0x01	; 1
    62c8:	0e 94 a9 23 	call	0x4752	; 0x4752 <_nrk_errno_set>
    62cc:	8f ef       	ldi	r24, 0xFF	; 255
    62ce:	9f ef       	ldi	r25, 0xFF	; 255
    62d0:	08 95       	ret
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();
    62d2:	ee 0f       	add	r30, r30
    62d4:	ff 1f       	adc	r31, r31
    62d6:	ee 0f       	add	r30, r30
    62d8:	ff 1f       	adc	r31, r31
    62da:	e3 5a       	subi	r30, 0xA3	; 163
    62dc:	f5 4f       	sbci	r31, 0xF5	; 245
    62de:	01 90       	ld	r0, Z+
    62e0:	f0 81       	ld	r31, Z
    62e2:	e0 2d       	mov	r30, r0
    62e4:	40 e0       	ldi	r20, 0x00	; 0
    62e6:	50 e0       	ldi	r21, 0x00	; 0
    62e8:	84 e0       	ldi	r24, 0x04	; 4
    62ea:	09 95       	icall
    62ec:	99 27       	eor	r25, r25
    62ee:	87 fd       	sbrc	r24, 7
    62f0:	90 95       	com	r25

    62f2:	08 95       	ret

000062f4 <nrk_read>:
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
    62f4:	24 2f       	mov	r18, r20
		    }
    62f6:	e8 2f       	mov	r30, r24
    62f8:	ff 27       	eor	r31, r31
    62fa:	80 91 5a 0a 	lds	r24, 0x0A5A
    62fe:	99 27       	eor	r25, r25
    6300:	87 fd       	sbrc	r24, 7
    6302:	90 95       	com	r25
    6304:	8e 17       	cp	r24, r30
    6306:	9f 07       	cpc	r25, r31
    6308:	34 f4       	brge	.+12     	; 0x6316 <nrk_read+0x22>
		    if(opt&APPEND_FLAG)
		    {
    630a:	81 e0       	ldi	r24, 0x01	; 1
    630c:	0e 94 a9 23 	call	0x4752	; 0x4752 <_nrk_errno_set>
    6310:	8f ef       	ldi	r24, 0xFF	; 255
    6312:	9f ef       	ldi	r25, 0xFF	; 255
    6314:	08 95       	ret
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
    6316:	ee 0f       	add	r30, r30
    6318:	ff 1f       	adc	r31, r31
    631a:	ee 0f       	add	r30, r30
    631c:	ff 1f       	adc	r31, r31
    631e:	e3 5a       	subi	r30, 0xA3	; 163
    6320:	f5 4f       	sbci	r31, 0xF5	; 245
    6322:	01 90       	ld	r0, Z+
    6324:	f0 81       	ld	r31, Z
    6326:	e0 2d       	mov	r30, r0
    6328:	ab 01       	movw	r20, r22
    632a:	60 e0       	ldi	r22, 0x00	; 0
    632c:	85 e0       	ldi	r24, 0x05	; 5
    632e:	09 95       	icall
    6330:	99 27       	eor	r25, r25
    6332:	87 fd       	sbrc	r24, 7
    6334:	90 95       	com	r25
		    else return NRK_OK;
		
    6336:	08 95       	ret

00006338 <nrk_write>:
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
    6338:	24 2f       	mov	r18, r20
		    if(opt&READ_FLAG)
    633a:	e8 2f       	mov	r30, r24
    633c:	ff 27       	eor	r31, r31
    633e:	80 91 5a 0a 	lds	r24, 0x0A5A
    6342:	99 27       	eor	r25, r25
    6344:	87 fd       	sbrc	r24, 7
    6346:	90 95       	com	r25
    6348:	8e 17       	cp	r24, r30
    634a:	9f 07       	cpc	r25, r31
    634c:	34 f4       	brge	.+12     	; 0x635a <nrk_write+0x22>
		    {
		   	// Turn on Sensor Node Power
    634e:	81 e0       	ldi	r24, 0x01	; 1
    6350:	0e 94 a9 23 	call	0x4752	; 0x4752 <_nrk_errno_set>
    6354:	8f ef       	ldi	r24, 0xFF	; 255
    6356:	9f ef       	ldi	r25, 0xFF	; 255
    6358:	08 95       	ret
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    635a:	ee 0f       	add	r30, r30
    635c:	ff 1f       	adc	r31, r31
    635e:	ee 0f       	add	r30, r30
    6360:	ff 1f       	adc	r31, r31
    6362:	e3 5a       	subi	r30, 0xA3	; 163
    6364:	f5 4f       	sbci	r31, 0xF5	; 245
    6366:	01 90       	ld	r0, Z+
    6368:	f0 81       	ld	r31, Z
    636a:	e0 2d       	mov	r30, r0
    636c:	ab 01       	movw	r20, r22
    636e:	60 e0       	ldi	r22, 0x00	; 0
    6370:	86 e0       	ldi	r24, 0x06	; 6
    6372:	09 95       	icall
    6374:	99 27       	eor	r25, r25
    6376:	87 fd       	sbrc	r24, 7
    6378:	90 95       	com	r25
		    	return NRK_OK;
		    }
    637a:	08 95       	ret

0000637c <nrk_close>:
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
uint8_t count=0;
    637c:	e8 2f       	mov	r30, r24
    637e:	ff 27       	eor	r31, r31
    6380:	80 91 5a 0a 	lds	r24, 0x0A5A
    6384:	99 27       	eor	r25, r25
    6386:	87 fd       	sbrc	r24, 7
    6388:	90 95       	com	r25
    638a:	8e 17       	cp	r24, r30
    638c:	9f 07       	cpc	r25, r31
    638e:	34 f4       	brge	.+12     	; 0x639c <nrk_close+0x20>
// key and value get passed as opt and size
uint8_t key=opt;
    6390:	81 e0       	ldi	r24, 0x01	; 1
    6392:	0e 94 a9 23 	call	0x4752	; 0x4752 <_nrk_errno_set>
    6396:	8f ef       	ldi	r24, 0xFF	; 255
    6398:	9f ef       	ldi	r25, 0xFF	; 255
    639a:	08 95       	ret
uint8_t value=size;

     switch(action)
     {
    639c:	ee 0f       	add	r30, r30
    639e:	ff 1f       	adc	r31, r31
    63a0:	ee 0f       	add	r30, r30
    63a2:	ff 1f       	adc	r31, r31
    63a4:	e3 5a       	subi	r30, 0xA3	; 163
    63a6:	f5 4f       	sbci	r31, 0xF5	; 245
    63a8:	01 90       	ld	r0, Z+
    63aa:	f0 81       	ld	r31, Z
    63ac:	e0 2d       	mov	r30, r0
    63ae:	20 e0       	ldi	r18, 0x00	; 0
    63b0:	40 e0       	ldi	r20, 0x00	; 0
    63b2:	50 e0       	ldi	r21, 0x00	; 0
    63b4:	60 e0       	ldi	r22, 0x00	; 0
    63b6:	82 e0       	ldi	r24, 0x02	; 2
    63b8:	09 95       	icall
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
    63ba:	99 27       	eor	r25, r25
    63bc:	87 fd       	sbrc	r24, 7
    63be:	90 95       	com	r25
		      return 1;
    63c0:	08 95       	ret

000063c2 <nrk_spin_wait_us>:
	...
#include <basic_rf.h>
#include <nrk_timer.h>

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

    63ca:	01 97       	sbiw	r24, 0x01	; 1
    63cc:	d1 f7       	brne	.-12     	; 0x63c2 <nrk_spin_wait_us>
    63ce:	08 95       	ret

000063d0 <_nrk_high_speed_timer_stop>:
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    do { \
ADCSRA |= BM(ADSC); \
    63d0:	10 92 81 00 	sts	0x0081, r1
    63d4:	08 95       	ret

000063d6 <_nrk_high_speed_timer_start>:
while (!(ADCSRA & 0x10)); \
} while(0)

// Macros for obtaining the latest sample value
#define ADC_GET_SAMPLE_10(x) \
    63d6:	81 e0       	ldi	r24, 0x01	; 1
    63d8:	80 93 81 00 	sts	0x0081, r24
    63dc:	08 95       	ret

000063de <_nrk_high_speed_timer_reset>:
x |= ADCH << 8; \
} while (0)

#define ADC_GET_SAMPLE_8(x) \
do { \
x = ((uint8_t) ADCL) >> 2; \
    63de:	83 b5       	in	r24, 0x23	; 35
    63e0:	81 60       	ori	r24, 0x01	; 1
    63e2:	83 bd       	out	0x23, r24	; 35
x |= ((int8_t) ADCH) << 6; \
    63e4:	10 92 85 00 	sts	0x0085, r1
    63e8:	10 92 84 00 	sts	0x0084, r1
    63ec:	08 95       	ret

000063ee <_nrk_high_speed_timer_get>:
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
		    if(opt&READ_FLAG)
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
    63ee:	cf 93       	push	r28
    63f0:	df 93       	push	r29
    63f2:	cd b7       	in	r28, 0x3d	; 61
    63f4:	de b7       	in	r29, 0x3e	; 62
    63f6:	22 97       	sbiw	r28, 0x02	; 2
    63f8:	0f b6       	in	r0, 0x3f	; 63
    63fa:	f8 94       	cli
    63fc:	de bf       	out	0x3e, r29	; 62
    63fe:	0f be       	out	0x3f, r0	; 63
    6400:	cd bf       	out	0x3d, r28	; 61
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    6402:	80 91 84 00 	lds	r24, 0x0084
    6406:	90 91 85 00 	lds	r25, 0x0085
    640a:	9a 83       	std	Y+2, r25	; 0x02
    640c:	89 83       	std	Y+1, r24	; 0x01
		    	return NRK_OK;
		    }
    640e:	89 81       	ldd	r24, Y+1	; 0x01
    6410:	9a 81       	ldd	r25, Y+2	; 0x02
    6412:	22 96       	adiw	r28, 0x02	; 2
    6414:	0f b6       	in	r0, 0x3f	; 63
    6416:	f8 94       	cli
    6418:	de bf       	out	0x3e, r29	; 62
    641a:	0f be       	out	0x3f, r0	; 63
    641c:	cd bf       	out	0x3d, r28	; 61
    641e:	df 91       	pop	r29
    6420:	cf 91       	pop	r28
    6422:	08 95       	ret

00006424 <_nrk_os_timer_stop>:
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
    6424:	10 92 b1 00 	sts	0x00B1, r1
		    {
    6428:	e0 e7       	ldi	r30, 0x70	; 112
    642a:	f0 e0       	ldi	r31, 0x00	; 0
    642c:	80 81       	ld	r24, Z
    642e:	8d 7f       	andi	r24, 0xFD	; 253
    6430:	80 83       	st	Z, r24
		    	return NRK_ERROR;
    6432:	80 81       	ld	r24, Z
    6434:	8e 7f       	andi	r24, 0xFE	; 254
    6436:	80 83       	st	Z, r24
    6438:	08 95       	ret

0000643a <_nrk_os_timer_set>:
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
		    else return NRK_OK;
		
    643a:	80 93 b2 00 	sts	0x00B2, r24
    643e:	08 95       	ret

00006440 <_nrk_os_timer_start>:

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
			{
    6440:	e0 e7       	ldi	r30, 0x70	; 112
    6442:	f0 e0       	ldi	r31, 0x00	; 0
    6444:	80 81       	ld	r24, Z
    6446:	83 60       	ori	r24, 0x03	; 3
    6448:	80 83       	st	Z, r24
			      /* Conversion to 8-bit value*/
    644a:	83 e0       	ldi	r24, 0x03	; 3
    644c:	80 93 b1 00 	sts	0x00B1, r24
    6450:	08 95       	ret

00006452 <_nrk_os_timer_reset>:
			      uint16_t val=get_adc_val();

				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
    6452:	83 b5       	in	r24, 0x23	; 35
    6454:	82 60       	ori	r24, 0x02	; 2
    6456:	83 bd       	out	0x23, r24	; 35
			      		buffer[count]=(val>>8)  & 0xFF;
    6458:	10 92 b2 00 	sts	0x00B2, r1
				}
    645c:	10 92 84 08 	sts	0x0884, r1

    6460:	10 92 c4 08 	sts	0x08C4, r1
    6464:	08 95       	ret

00006466 <_nrk_get_next_wakeup>:
				if(size==1)
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}


    6466:	80 91 b3 00 	lds	r24, 0x00B3
    646a:	8f 5f       	subi	r24, 0xFF	; 255
			} else if(channel==BAT)
    646c:	99 27       	eor	r25, r25
    646e:	08 95       	ret

00006470 <_nrk_set_next_wakeup>:
			{
			uint16_t tmp;
			tmp=read_voltage_status();
			if(size==2)
    6470:	81 50       	subi	r24, 0x01	; 1
    6472:	80 93 b3 00 	sts	0x00B3, r24
    6476:	08 95       	ret

00006478 <nrk_timer_int_stop>:
				{
					buffer[count]=tmp & 0xFF;
					count++;
					buffer[count]=(tmp>>8) & 0xFF;
				}
			if(size==1)
    6478:	88 23       	and	r24, r24
    647a:	11 f4       	brne	.+4      	; 0x6480 <nrk_timer_int_stop+0x8>
				{
					buffer[count]=(tmp>>2) & 0xFF;
    647c:	10 92 71 00 	sts	0x0071, r1
				}
			}else if(channel==AUDIO_P2P)
			{
    6480:	8f ef       	ldi	r24, 0xFF	; 255
    6482:	9f ef       	ldi	r25, 0xFF	; 255
    6484:	08 95       	ret

00006486 <nrk_timer_int_reset>:
  			/* Conversion to 8-bit value*/
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
    6486:	88 23       	and	r24, r24
    6488:	19 f0       	breq	.+6      	; 0x6490 <nrk_timer_int_reset+0xa>
    648a:	8f ef       	ldi	r24, 0xFF	; 255
    648c:	9f ef       	ldi	r25, 0xFF	; 255
    648e:	08 95       	ret
				max=0;
			        min=1025;
    6490:	10 92 95 00 	sts	0x0095, r1
    6494:	10 92 94 00 	sts	0x0094, r1
    6498:	81 e0       	ldi	r24, 0x01	; 1
    649a:	90 e0       	ldi	r25, 0x00	; 0
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
				if(val<min)min=val;
    649c:	08 95       	ret

0000649e <nrk_timer_int_read>:
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
				}
    649e:	88 23       	and	r24, r24
    64a0:	19 f0       	breq	.+6      	; 0x64a8 <nrk_timer_int_read+0xa>
    64a2:	80 e0       	ldi	r24, 0x00	; 0
    64a4:	90 e0       	ldi	r25, 0x00	; 0
    64a6:	08 95       	ret
			 	val=max-min;	
				if(size==2)
    64a8:	80 91 94 00 	lds	r24, 0x0094
    64ac:	90 91 95 00 	lds	r25, 0x0095
			      	{
					buffer[count]=val  & 0xFF;
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    64b0:	08 95       	ret

000064b2 <nrk_timer_int_start>:
				}

				if(size==1)
			      	{
    64b2:	88 23       	and	r24, r24
    64b4:	19 f0       	breq	.+6      	; 0x64bc <nrk_timer_int_start+0xa>
    64b6:	8f ef       	ldi	r24, 0xFF	; 255
    64b8:	9f ef       	ldi	r25, 0xFF	; 255
    64ba:	08 95       	ret
			      		buffer[count]=(val>>2)  & 0xFF;
				}
    64bc:	82 e0       	ldi	r24, 0x02	; 2
    64be:	80 93 71 00 	sts	0x0071, r24
    64c2:	81 e0       	ldi	r24, 0x01	; 1
    64c4:	90 e0       	ldi	r25, 0x00	; 0

			}
			
		      count++;
    64c6:	08 95       	ret

000064c8 <nrk_timer_int_configure>:
                      return count;

             case CLOSE:
			// Turn off sensor power
    64c8:	88 23       	and	r24, r24
    64ca:	19 f0       	breq	.+6      	; 0x64d2 <nrk_timer_int_configure+0xa>
    64cc:	8f ef       	ldi	r24, 0xFF	; 255
    64ce:	9f ef       	ldi	r25, 0xFF	; 255
    64d0:	08 95       	ret
			PORTF |= PWR_CTRL_MASK;
		    	is_open=0; 
    64d2:	cb 01       	movw	r24, r22
    64d4:	01 97       	sbiw	r24, 0x01	; 1
    64d6:	05 97       	sbiw	r24, 0x05	; 5
    64d8:	10 f4       	brcc	.+4      	; 0x64de <nrk_timer_int_configure+0x16>
    64da:	60 93 b2 08 	sts	0x08B2, r22
                        return NRK_OK;
    64de:	10 92 90 00 	sts	0x0090, r1
             
    64e2:	88 e0       	ldi	r24, 0x08	; 8
    64e4:	80 93 91 00 	sts	0x0091, r24
	     case GET_STATUS:
    64e8:	85 2f       	mov	r24, r21
    64ea:	99 27       	eor	r25, r25
    64ec:	80 93 99 00 	sts	0x0099, r24
	     		// use "key" here 
    64f0:	40 93 98 00 	sts	0x0098, r20
			if(key==SENSOR_SELECT) return channel;
    64f4:	30 93 75 08 	sts	0x0875, r19
    64f8:	20 93 74 08 	sts	0x0874, r18
	     		return NRK_ERROR;
    64fc:	80 91 b2 08 	lds	r24, 0x08B2
    6500:	81 30       	cpi	r24, 0x01	; 1
    6502:	21 f4       	brne	.+8      	; 0x650c <nrk_timer_int_configure+0x44>
    6504:	80 91 91 00 	lds	r24, 0x0091
    6508:	81 60       	ori	r24, 0x01	; 1
    650a:	0b c0       	rjmp	.+22     	; 0x6522 <nrk_timer_int_configure+0x5a>
			
             case SET_STATUS:
    650c:	82 30       	cpi	r24, 0x02	; 2
    650e:	21 f4       	brne	.+8      	; 0x6518 <nrk_timer_int_configure+0x50>
    6510:	80 91 91 00 	lds	r24, 0x0091
    6514:	82 60       	ori	r24, 0x02	; 2
    6516:	05 c0       	rjmp	.+10     	; 0x6522 <nrk_timer_int_configure+0x5a>
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    6518:	83 30       	cpi	r24, 0x03	; 3
    651a:	31 f4       	brne	.+12     	; 0x6528 <nrk_timer_int_configure+0x60>
    651c:	80 91 91 00 	lds	r24, 0x0091
    6520:	83 60       	ori	r24, 0x03	; 3
    6522:	80 93 91 00 	sts	0x0091, r24
    6526:	08 c0       	rjmp	.+16     	; 0x6538 <nrk_timer_int_configure+0x70>
			{
			// Set to audio channel if it is an average value
    6528:	84 30       	cpi	r24, 0x04	; 4
    652a:	21 f4       	brne	.+8      	; 0x6534 <nrk_timer_int_configure+0x6c>
    652c:	80 91 91 00 	lds	r24, 0x0091
    6530:	84 60       	ori	r24, 0x04	; 4
    6532:	f7 cf       	rjmp	.-18     	; 0x6522 <nrk_timer_int_configure+0x5a>
			if(value==AUDIO_P2P) 
			  {
    6534:	85 30       	cpi	r24, 0x05	; 5
    6536:	19 f0       	breq	.+6      	; 0x653e <nrk_timer_int_configure+0x76>
    6538:	81 e0       	ldi	r24, 0x01	; 1
    653a:	90 e0       	ldi	r25, 0x00	; 0
    653c:	08 95       	ret
    653e:	80 91 91 00 	lds	r24, 0x0091
    6542:	85 60       	ori	r24, 0x05	; 5
    6544:	80 93 91 00 	sts	0x0091, r24
    6548:	81 e0       	ldi	r24, 0x01	; 1
    654a:	90 e0       	ldi	r25, 0x00	; 0
				channel=value;
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
				ADC_SET_CHANNEL (AUDIO);
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;
    654c:	08 95       	ret

0000654e <_nrk_os_timer_get>:

			  } else
			  {
				if(value>7) 
				{
    654e:	80 91 b2 00 	lds	r24, 0x00B2
					_nrk_errno_set(1);
    6552:	99 27       	eor	r25, r25
    6554:	08 95       	ret

00006556 <__vector_13>:
}


// read_voltage_status()
//
// This function sets different voltage threshold levels on
    6556:	0f 92       	push	r0
    6558:	0f b6       	in	r0, 0x3f	; 63
    655a:	0f 92       	push	r0
    655c:	1f 92       	push	r1
    655e:	2f 92       	push	r2
    6560:	3f 92       	push	r3
    6562:	4f 92       	push	r4
    6564:	5f 92       	push	r5
    6566:	6f 92       	push	r6
    6568:	7f 92       	push	r7
    656a:	8f 92       	push	r8
    656c:	9f 92       	push	r9
    656e:	af 92       	push	r10
    6570:	bf 92       	push	r11
    6572:	cf 92       	push	r12
    6574:	df 92       	push	r13
    6576:	ef 92       	push	r14
    6578:	ff 92       	push	r15
    657a:	0f 93       	push	r16
    657c:	1f 93       	push	r17
    657e:	2f 93       	push	r18
    6580:	3f 93       	push	r19
    6582:	4f 93       	push	r20
    6584:	5f 93       	push	r21
    6586:	6f 93       	push	r22
    6588:	7f 93       	push	r23
    658a:	8f 93       	push	r24
    658c:	9f 93       	push	r25
    658e:	af 93       	push	r26
    6590:	bf 93       	push	r27
    6592:	cf 93       	push	r28
    6594:	df 93       	push	r29
    6596:	ef 93       	push	r30
    6598:	ff 93       	push	r31
    659a:	a0 91 39 0a 	lds	r26, 0x0A39
    659e:	b0 91 3a 0a 	lds	r27, 0x0A3A
    65a2:	0d b6       	in	r0, 0x3d	; 61
    65a4:	0d 92       	st	X+, r0
    65a6:	0e b6       	in	r0, 0x3e	; 62
    65a8:	0d 92       	st	X+, r0
    65aa:	1f 92       	push	r1
    65ac:	a0 91 b9 06 	lds	r26, 0x06B9
    65b0:	b0 91 ba 06 	lds	r27, 0x06BA
    65b4:	1e 90       	ld	r1, -X
    65b6:	be bf       	out	0x3e, r27	; 62
    65b8:	ad bf       	out	0x3d, r26	; 61
    65ba:	08 95       	ret

000065bc <__vector_17>:
	ADC_SAMPLE_SINGLE();
	delay();
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
    65bc:	1f 92       	push	r1
    65be:	0f 92       	push	r0
    65c0:	0f b6       	in	r0, 0x3f	; 63
    65c2:	0f 92       	push	r0
    65c4:	11 24       	eor	r1, r1
    65c6:	0f 90       	pop	r0
    65c8:	0f be       	out	0x3f, r0	; 63
    65ca:	0f 90       	pop	r0
    65cc:	1f 90       	pop	r1
    65ce:	18 95       	reti

000065d0 <__vector_32>:
{
// Initialize values here
  ADC_INIT ();
  ADC_ENABLE ();
  channel=0;
  ADC_SET_CHANNEL (0);
    65d0:	1f 92       	push	r1
    65d2:	0f 92       	push	r0
    65d4:	0f b6       	in	r0, 0x3f	; 63
    65d6:	0f 92       	push	r0
    65d8:	11 24       	eor	r1, r1
    65da:	2f 93       	push	r18
    65dc:	3f 93       	push	r19
    65de:	4f 93       	push	r20
    65e0:	5f 93       	push	r21
    65e2:	6f 93       	push	r22
    65e4:	7f 93       	push	r23
    65e6:	8f 93       	push	r24
    65e8:	9f 93       	push	r25
    65ea:	af 93       	push	r26
    65ec:	bf 93       	push	r27
    65ee:	ef 93       	push	r30
    65f0:	ff 93       	push	r31
}
    65f2:	e0 91 74 08 	lds	r30, 0x0874
    65f6:	f0 91 75 08 	lds	r31, 0x0875
    65fa:	30 97       	sbiw	r30, 0x00	; 0
    65fc:	11 f0       	breq	.+4      	; 0x6602 <__vector_32+0x32>
    65fe:	09 95       	icall
    6600:	04 c0       	rjmp	.+8      	; 0x660a <__vector_32+0x3a>

uint16_t get_adc_val()
    6602:	60 e0       	ldi	r22, 0x00	; 0
    6604:	8a e0       	ldi	r24, 0x0A	; 10
    6606:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
    660a:	ff 91       	pop	r31
    660c:	ef 91       	pop	r30
    660e:	bf 91       	pop	r27
    6610:	af 91       	pop	r26
    6612:	9f 91       	pop	r25
    6614:	8f 91       	pop	r24
    6616:	7f 91       	pop	r23
    6618:	6f 91       	pop	r22
    661a:	5f 91       	pop	r21
    661c:	4f 91       	pop	r20
    661e:	3f 91       	pop	r19
    6620:	2f 91       	pop	r18
    6622:	0f 90       	pop	r0
    6624:	0f be       	out	0x3f, r0	; 63
    6626:	0f 90       	pop	r0
    6628:	1f 90       	pop	r1
    662a:	18 95       	reti

0000662c <__vector_default>:
					_nrk_errno_set(1);
					return NRK_ERROR;
				}
				channel=value;
				if(channel==LIGHT)
				   ADC_VREF_VCC();	
    662c:	1f 92       	push	r1
    662e:	0f 92       	push	r0
    6630:	0f b6       	in	r0, 0x3f	; 63
    6632:	0f 92       	push	r0
    6634:	11 24       	eor	r1, r1
    6636:	2f 93       	push	r18
    6638:	3f 93       	push	r19
    663a:	4f 93       	push	r20
    663c:	5f 93       	push	r21
    663e:	6f 93       	push	r22
    6640:	7f 93       	push	r23
    6642:	8f 93       	push	r24
    6644:	9f 93       	push	r25
    6646:	af 93       	push	r26
    6648:	bf 93       	push	r27
    664a:	ef 93       	push	r30
    664c:	ff 93       	push	r31
				else
    664e:	60 e0       	ldi	r22, 0x00	; 0
    6650:	8a e0       	ldi	r24, 0x0A	; 10
    6652:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
    6656:	ff cf       	rjmp	.-2      	; 0x6656 <__vector_default+0x2a>

00006658 <nrk_high_speed_timer_wait>:
{
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

    6658:	cf 93       	push	r28
    665a:	df 93       	push	r29
    665c:	cd b7       	in	r28, 0x3d	; 61
    665e:	de b7       	in	r29, 0x3e	; 62
    6660:	22 97       	sbiw	r28, 0x02	; 2
    6662:	0f b6       	in	r0, 0x3f	; 63
    6664:	f8 94       	cli
    6666:	de bf       	out	0x3e, r29	; 62
    6668:	0f be       	out	0x3f, r0	; 63
    666a:	cd bf       	out	0x3d, r28	; 61
    666c:	fc 01       	movw	r30, r24
     switch(action)
     {
    666e:	8f ef       	ldi	r24, 0xFF	; 255
    6670:	e9 37       	cpi	r30, 0x79	; 121
    6672:	f8 07       	cpc	r31, r24
    6674:	10 f0       	brcs	.+4      	; 0x667a <nrk_high_speed_timer_wait+0x22>
    6676:	e0 e0       	ldi	r30, 0x00	; 0
    6678:	f0 e0       	ldi	r31, 0x00	; 0
            case INIT: 
    667a:	9f 01       	movw	r18, r30
    667c:	44 27       	eor	r20, r20
    667e:	55 27       	eor	r21, r21
    6680:	cb 01       	movw	r24, r22
    6682:	aa 27       	eor	r26, r26
    6684:	bb 27       	eor	r27, r27
    6686:	28 0f       	add	r18, r24
    6688:	39 1f       	adc	r19, r25
    668a:	4a 1f       	adc	r20, r26
    668c:	5b 1f       	adc	r21, r27
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
    668e:	21 30       	cpi	r18, 0x01	; 1
    6690:	80 e0       	ldi	r24, 0x00	; 0
    6692:	38 07       	cpc	r19, r24
    6694:	81 e0       	ldi	r24, 0x01	; 1
    6696:	48 07       	cpc	r20, r24
    6698:	80 e0       	ldi	r24, 0x00	; 0
    669a:	58 07       	cpc	r21, r24
    669c:	78 f0       	brcs	.+30     	; 0x66bc <nrk_high_speed_timer_wait+0x64>
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    669e:	80 91 84 00 	lds	r24, 0x0084
    66a2:	90 91 85 00 	lds	r25, 0x0085
    66a6:	9a 83       	std	Y+2, r25	; 0x02
    66a8:	89 83       	std	Y+1, r24	; 0x01
		    	return NRK_OK;
		    }
    66aa:	89 81       	ldd	r24, Y+1	; 0x01
    66ac:	9a 81       	ldd	r25, Y+2	; 0x02
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
		      return 1;
    66ae:	e8 17       	cp	r30, r24
    66b0:	f9 07       	cpc	r31, r25
    66b2:	a8 f3       	brcs	.-22     	; 0x669e <nrk_high_speed_timer_wait+0x46>
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
    66b4:	20 50       	subi	r18, 0x00	; 0
    66b6:	30 40       	sbci	r19, 0x00	; 0
    66b8:	41 40       	sbci	r20, 0x01	; 1
    66ba:	50 40       	sbci	r21, 0x00	; 0
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    66bc:	80 91 84 00 	lds	r24, 0x0084
    66c0:	90 91 85 00 	lds	r25, 0x0085
    66c4:	9a 83       	std	Y+2, r25	; 0x02
    66c6:	89 83       	std	Y+1, r24	; 0x01
		    	return NRK_OK;
		    }
    66c8:	89 81       	ldd	r24, Y+1	; 0x01
    66ca:	9a 81       	ldd	r25, Y+2	; 0x02
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
    66cc:	82 17       	cp	r24, r18
    66ce:	93 07       	cpc	r25, r19
    66d0:	a8 f3       	brcs	.-22     	; 0x66bc <nrk_high_speed_timer_wait+0x64>
    66d2:	22 96       	adiw	r28, 0x02	; 2
    66d4:	0f b6       	in	r0, 0x3f	; 63
    66d6:	f8 94       	cli
    66d8:	de bf       	out	0x3e, r29	; 62
    66da:	0f be       	out	0x3f, r0	; 63
    66dc:	cd bf       	out	0x3d, r28	; 61
    66de:	df 91       	pop	r29
    66e0:	cf 91       	pop	r28
    66e2:	08 95       	ret

000066e4 <_nrk_setup_timer>:

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    66e4:	ef 92       	push	r14
    66e6:	ff 92       	push	r15
    66e8:	1f 93       	push	r17
    do { \
    66ea:	9e ef       	ldi	r25, 0xFE	; 254
    66ec:	90 93 c4 08 	sts	0x08C4, r25
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)
    66f0:	80 e2       	ldi	r24, 0x20	; 32
    66f2:	80 93 b6 00 	sts	0x00B6, r24

    66f6:	90 93 b3 00 	sts	0x00B3, r25
#define ADC_VREF_VCC() \
    66fa:	13 e0       	ldi	r17, 0x03	; 3
    66fc:	17 bb       	out	0x17, r17	; 23
   do { \
    66fe:	82 e0       	ldi	r24, 0x02	; 2
    6700:	80 93 b0 00 	sts	0x00B0, r24
	ADMUX &= ~(BM(REFS1));  \
    6704:	91 eb       	ldi	r25, 0xB1	; 177
    6706:	e9 2e       	mov	r14, r25
    6708:	f1 2c       	mov	r15, r1
    670a:	f7 01       	movw	r30, r14
    670c:	10 83       	st	Z, r17
	ADMUX |= BM(REFS0);  \
    670e:	83 b5       	in	r24, 0x23	; 35
    6710:	82 60       	ori	r24, 0x02	; 2
    6712:	83 bd       	out	0x23, r24	; 35
} while(0)

    6714:	17 bb       	out	0x17, r17	; 23

#define ADC_VREF_1_1() \
    6716:	14 bd       	out	0x24, r17	; 36
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
    6718:	83 b5       	in	r24, 0x23	; 35
    671a:	82 60       	ori	r24, 0x02	; 2
    671c:	83 bd       	out	0x23, r24	; 35
} while(0)


#define ADC_VREF_2_56() \
    671e:	10 92 80 00 	sts	0x0080, r1
   do { \
    6722:	81 e0       	ldi	r24, 0x01	; 1
    6724:	80 93 81 00 	sts	0x0081, r24
	ADMUX |= BM(REFS1) | BM(REFS0);  \
    6728:	10 92 85 00 	sts	0x0085, r1
    672c:	10 92 84 00 	sts	0x0084, r1
} while(0)
    6730:	83 b5       	in	r24, 0x23	; 35
    6732:	82 60       	ori	r24, 0x02	; 2
    6734:	83 bd       	out	0x23, r24	; 35

    6736:	83 b5       	in	r24, 0x23	; 35
    6738:	81 60       	ori	r24, 0x01	; 1
    673a:	83 bd       	out	0x23, r24	; 35
#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

    673c:	0e 94 29 32 	call	0x6452	; 0x6452 <_nrk_os_timer_reset>

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
			if(channel!=BAT && channel<7)
			{
    6740:	e0 e7       	ldi	r30, 0x70	; 112
    6742:	f0 e0       	ldi	r31, 0x00	; 0
    6744:	80 81       	ld	r24, Z
    6746:	83 60       	ori	r24, 0x03	; 3
    6748:	80 83       	st	Z, r24
			      /* Conversion to 8-bit value*/
    674a:	f7 01       	movw	r30, r14
    674c:	10 83       	st	Z, r17
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
    674e:	10 92 84 08 	sts	0x0884, r1
    6752:	1f 91       	pop	r17
    6754:	ff 90       	pop	r15
    6756:	ef 90       	pop	r14
    6758:	08 95       	ret

0000675a <nrk_ext_int_enable>:
#include <include.h>
#include <stdio.h>
#include <ulib.h>
#include <nrk_error.h>
#include <nrk.h>
#include <stdint.h>
    675a:	88 23       	and	r24, r24
    675c:	11 f4       	brne	.+4      	; 0x6762 <nrk_ext_int_enable+0x8>
    675e:	e8 9a       	sbi	0x1d, 0	; 29
    6760:	33 c0       	rjmp	.+102    	; 0x67c8 <nrk_ext_int_enable+0x6e>
#include <basic_rf.h>
    6762:	81 30       	cpi	r24, 0x01	; 1
    6764:	11 f4       	brne	.+4      	; 0x676a <nrk_ext_int_enable+0x10>
    6766:	e9 9a       	sbi	0x1d, 1	; 29
    6768:	2f c0       	rjmp	.+94     	; 0x67c8 <nrk_ext_int_enable+0x6e>
#include <nrk_timer.h>
    676a:	82 30       	cpi	r24, 0x02	; 2
    676c:	11 f4       	brne	.+4      	; 0x6772 <nrk_ext_int_enable+0x18>
    676e:	ea 9a       	sbi	0x1d, 2	; 29
    6770:	2b c0       	rjmp	.+86     	; 0x67c8 <nrk_ext_int_enable+0x6e>

    6772:	83 30       	cpi	r24, 0x03	; 3
    6774:	21 f4       	brne	.+8      	; 0x677e <nrk_ext_int_enable+0x24>
    6776:	80 91 6b 00 	lds	r24, 0x006B
    677a:	81 60       	ori	r24, 0x01	; 1
    677c:	23 c0       	rjmp	.+70     	; 0x67c4 <nrk_ext_int_enable+0x6a>
#define ADC_STARTUP_DELAY  1000
    677e:	84 30       	cpi	r24, 0x04	; 4
    6780:	21 f4       	brne	.+8      	; 0x678a <nrk_ext_int_enable+0x30>
    6782:	80 91 6b 00 	lds	r24, 0x006B
    6786:	82 60       	ori	r24, 0x02	; 2
    6788:	1d c0       	rjmp	.+58     	; 0x67c4 <nrk_ext_int_enable+0x6a>
#define ADC_SETUP_DELAY  200
    678a:	85 30       	cpi	r24, 0x05	; 5
    678c:	21 f4       	brne	.+8      	; 0x6796 <nrk_ext_int_enable+0x3c>
    678e:	80 91 6b 00 	lds	r24, 0x006B
    6792:	84 60       	ori	r24, 0x04	; 4
    6794:	17 c0       	rjmp	.+46     	; 0x67c4 <nrk_ext_int_enable+0x6a>

    6796:	86 30       	cpi	r24, 0x06	; 6
    6798:	21 f4       	brne	.+8      	; 0x67a2 <nrk_ext_int_enable+0x48>
    679a:	80 91 6b 00 	lds	r24, 0x006B
    679e:	88 60       	ori	r24, 0x08	; 8
    67a0:	11 c0       	rjmp	.+34     	; 0x67c4 <nrk_ext_int_enable+0x6a>
uint8_t channel;
    67a2:	87 30       	cpi	r24, 0x07	; 7
    67a4:	21 f4       	brne	.+8      	; 0x67ae <nrk_ext_int_enable+0x54>
    67a6:	80 91 6b 00 	lds	r24, 0x006B
    67aa:	80 61       	ori	r24, 0x10	; 16
    67ac:	0b c0       	rjmp	.+22     	; 0x67c4 <nrk_ext_int_enable+0x6a>
uint8_t is_open;
    67ae:	88 30       	cpi	r24, 0x08	; 8
    67b0:	21 f4       	brne	.+8      	; 0x67ba <nrk_ext_int_enable+0x60>
    67b2:	80 91 6b 00 	lds	r24, 0x006B
    67b6:	80 62       	ori	r24, 0x20	; 32
    67b8:	05 c0       	rjmp	.+10     	; 0x67c4 <nrk_ext_int_enable+0x6a>

    67ba:	89 30       	cpi	r24, 0x09	; 9
    67bc:	41 f4       	brne	.+16     	; 0x67ce <nrk_ext_int_enable+0x74>
    67be:	80 91 6b 00 	lds	r24, 0x006B
    67c2:	80 64       	ori	r24, 0x40	; 64
    67c4:	80 93 6b 00 	sts	0x006B, r24
    67c8:	81 e0       	ldi	r24, 0x01	; 1
    67ca:	90 e0       	ldi	r25, 0x00	; 0
    67cc:	08 95       	ret
// VREF is set to VCC by default
    67ce:	8a 30       	cpi	r24, 0x0A	; 10
    67d0:	19 f0       	breq	.+6      	; 0x67d8 <nrk_ext_int_enable+0x7e>
    67d2:	8f ef       	ldi	r24, 0xFF	; 255
    67d4:	9f ef       	ldi	r25, 0xFF	; 255
    67d6:	08 95       	ret
    67d8:	80 91 6b 00 	lds	r24, 0x006B
    67dc:	80 68       	ori	r24, 0x80	; 128
    67de:	80 93 6b 00 	sts	0x006B, r24
    67e2:	81 e0       	ldi	r24, 0x01	; 1
    67e4:	90 e0       	ldi	r25, 0x00	; 0
#define ADC_INIT() \
    do { \
    67e6:	08 95       	ret

000067e8 <nrk_ext_int_disable>:
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)

    67e8:	88 23       	and	r24, r24
    67ea:	11 f4       	brne	.+4      	; 0x67f0 <nrk_ext_int_disable+0x8>
    67ec:	e8 98       	cbi	0x1d, 0	; 29
    67ee:	31 c0       	rjmp	.+98     	; 0x6852 <nrk_ext_int_disable+0x6a>
#define ADC_VREF_VCC() \
    67f0:	81 30       	cpi	r24, 0x01	; 1
    67f2:	11 f0       	breq	.+4      	; 0x67f8 <nrk_ext_int_disable+0x10>
   do { \
    67f4:	82 30       	cpi	r24, 0x02	; 2
    67f6:	11 f4       	brne	.+4      	; 0x67fc <nrk_ext_int_disable+0x14>
    67f8:	e9 98       	cbi	0x1d, 1	; 29
    67fa:	2b c0       	rjmp	.+86     	; 0x6852 <nrk_ext_int_disable+0x6a>
	ADMUX &= ~(BM(REFS1));  \
    67fc:	83 30       	cpi	r24, 0x03	; 3
    67fe:	21 f4       	brne	.+8      	; 0x6808 <nrk_ext_int_disable+0x20>
    6800:	80 91 6b 00 	lds	r24, 0x006B
    6804:	8e 7f       	andi	r24, 0xFE	; 254
    6806:	23 c0       	rjmp	.+70     	; 0x684e <nrk_ext_int_disable+0x66>
	ADMUX |= BM(REFS0);  \
    6808:	84 30       	cpi	r24, 0x04	; 4
    680a:	21 f4       	brne	.+8      	; 0x6814 <nrk_ext_int_disable+0x2c>
    680c:	80 91 6b 00 	lds	r24, 0x006B
    6810:	8d 7f       	andi	r24, 0xFD	; 253
    6812:	1d c0       	rjmp	.+58     	; 0x684e <nrk_ext_int_disable+0x66>
} while(0)
    6814:	85 30       	cpi	r24, 0x05	; 5
    6816:	21 f4       	brne	.+8      	; 0x6820 <nrk_ext_int_disable+0x38>
    6818:	80 91 6b 00 	lds	r24, 0x006B
    681c:	8b 7f       	andi	r24, 0xFB	; 251
    681e:	17 c0       	rjmp	.+46     	; 0x684e <nrk_ext_int_disable+0x66>

    6820:	86 30       	cpi	r24, 0x06	; 6
    6822:	21 f4       	brne	.+8      	; 0x682c <nrk_ext_int_disable+0x44>
    6824:	80 91 6b 00 	lds	r24, 0x006B
    6828:	87 7f       	andi	r24, 0xF7	; 247
    682a:	11 c0       	rjmp	.+34     	; 0x684e <nrk_ext_int_disable+0x66>

    682c:	87 30       	cpi	r24, 0x07	; 7
    682e:	21 f4       	brne	.+8      	; 0x6838 <nrk_ext_int_disable+0x50>
    6830:	80 91 6b 00 	lds	r24, 0x006B
    6834:	8f 7e       	andi	r24, 0xEF	; 239
    6836:	0b c0       	rjmp	.+22     	; 0x684e <nrk_ext_int_disable+0x66>
#define ADC_VREF_1_1() \
    6838:	88 30       	cpi	r24, 0x08	; 8
    683a:	21 f4       	brne	.+8      	; 0x6844 <nrk_ext_int_disable+0x5c>
    683c:	80 91 6b 00 	lds	r24, 0x006B
    6840:	8f 7d       	andi	r24, 0xDF	; 223
    6842:	05 c0       	rjmp	.+10     	; 0x684e <nrk_ext_int_disable+0x66>
   do { \
    6844:	89 30       	cpi	r24, 0x09	; 9
    6846:	41 f4       	brne	.+16     	; 0x6858 <nrk_ext_int_disable+0x70>
    6848:	80 91 6b 00 	lds	r24, 0x006B
    684c:	8f 7b       	andi	r24, 0xBF	; 191
    684e:	80 93 6b 00 	sts	0x006B, r24
    6852:	81 e0       	ldi	r24, 0x01	; 1
    6854:	90 e0       	ldi	r25, 0x00	; 0
    6856:	08 95       	ret
	ADMUX &= ~(BM(REFS0));  \
    6858:	8a 30       	cpi	r24, 0x0A	; 10
    685a:	19 f0       	breq	.+6      	; 0x6862 <nrk_ext_int_disable+0x7a>
    685c:	8f ef       	ldi	r24, 0xFF	; 255
    685e:	9f ef       	ldi	r25, 0xFF	; 255
    6860:	08 95       	ret
    6862:	80 91 6b 00 	lds	r24, 0x006B
    6866:	8f 77       	andi	r24, 0x7F	; 127
    6868:	80 93 6b 00 	sts	0x006B, r24
    686c:	81 e0       	ldi	r24, 0x01	; 1
    686e:	90 e0       	ldi	r25, 0x00	; 0
	ADMUX |= BM(REFS1);  \
} while(0)
    6870:	08 95       	ret

00006872 <nrk_ext_int_configure>:


#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)
    6872:	88 23       	and	r24, r24
    6874:	39 f5       	brne	.+78     	; 0x68c4 <nrk_ext_int_configure+0x52>

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)
    6876:	50 93 63 0a 	sts	0x0A63, r21
    687a:	40 93 62 0a 	sts	0x0A62, r20

    687e:	66 23       	and	r22, r22
    6880:	21 f4       	brne	.+8      	; 0x688a <nrk_ext_int_configure+0x18>
    6882:	80 91 69 00 	lds	r24, 0x0069
    6886:	8c 7f       	andi	r24, 0xFC	; 252
    6888:	45 c0       	rjmp	.+138    	; 0x6914 <nrk_ext_int_configure+0xa2>
// Enables/disables the ADC
    688a:	61 30       	cpi	r22, 0x01	; 1
    688c:	49 f4       	brne	.+18     	; 0x68a0 <nrk_ext_int_configure+0x2e>
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
    688e:	80 91 69 00 	lds	r24, 0x0069
    6892:	8d 7f       	andi	r24, 0xFD	; 253
    6894:	80 93 69 00 	sts	0x0069, r24
    6898:	80 91 69 00 	lds	r24, 0x0069
    689c:	81 60       	ori	r24, 0x01	; 1
    689e:	3a c0       	rjmp	.+116    	; 0x6914 <nrk_ext_int_configure+0xa2>
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)
    68a0:	62 30       	cpi	r22, 0x02	; 2
    68a2:	49 f4       	brne	.+18     	; 0x68b6 <nrk_ext_int_configure+0x44>

    68a4:	80 91 69 00 	lds	r24, 0x0069
    68a8:	82 60       	ori	r24, 0x02	; 2
    68aa:	80 93 69 00 	sts	0x0069, r24
    68ae:	80 91 69 00 	lds	r24, 0x0069
    68b2:	8e 7f       	andi	r24, 0xFE	; 254
    68b4:	2f c0       	rjmp	.+94     	; 0x6914 <nrk_ext_int_configure+0xa2>
#define ADC_SAMPLE_SINGLE() \
    68b6:	63 30       	cpi	r22, 0x03	; 3
    68b8:	09 f0       	breq	.+2      	; 0x68bc <nrk_ext_int_configure+0x4a>
    68ba:	69 c0       	rjmp	.+210    	; 0x698e <nrk_ext_int_configure+0x11c>
    68bc:	80 91 69 00 	lds	r24, 0x0069
    68c0:	83 60       	ori	r24, 0x03	; 3
    68c2:	28 c0       	rjmp	.+80     	; 0x6914 <nrk_ext_int_configure+0xa2>
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
    68c4:	81 30       	cpi	r24, 0x01	; 1
    68c6:	49 f5       	brne	.+82     	; 0x691a <nrk_ext_int_configure+0xa8>
} while(0)

    68c8:	50 93 61 0a 	sts	0x0A61, r21
    68cc:	40 93 60 0a 	sts	0x0A60, r20
// Macros for obtaining the latest sample value
    68d0:	66 23       	and	r22, r22
    68d2:	21 f4       	brne	.+8      	; 0x68dc <nrk_ext_int_configure+0x6a>
    68d4:	80 91 69 00 	lds	r24, 0x0069
    68d8:	83 7f       	andi	r24, 0xF3	; 243
    68da:	1c c0       	rjmp	.+56     	; 0x6914 <nrk_ext_int_configure+0xa2>
#define ADC_GET_SAMPLE_10(x) \
    68dc:	61 30       	cpi	r22, 0x01	; 1
    68de:	49 f4       	brne	.+18     	; 0x68f2 <nrk_ext_int_configure+0x80>
do { \
    68e0:	80 91 69 00 	lds	r24, 0x0069
    68e4:	87 7f       	andi	r24, 0xF7	; 247
    68e6:	80 93 69 00 	sts	0x0069, r24
    68ea:	80 91 69 00 	lds	r24, 0x0069
    68ee:	84 60       	ori	r24, 0x04	; 4
    68f0:	11 c0       	rjmp	.+34     	; 0x6914 <nrk_ext_int_configure+0xa2>
x =  ADCL; \
    68f2:	62 30       	cpi	r22, 0x02	; 2
    68f4:	49 f4       	brne	.+18     	; 0x6908 <nrk_ext_int_configure+0x96>
x |= ADCH << 8; \
    68f6:	80 91 69 00 	lds	r24, 0x0069
    68fa:	88 60       	ori	r24, 0x08	; 8
    68fc:	80 93 69 00 	sts	0x0069, r24
    6900:	80 91 69 00 	lds	r24, 0x0069
    6904:	8b 7f       	andi	r24, 0xFB	; 251
    6906:	06 c0       	rjmp	.+12     	; 0x6914 <nrk_ext_int_configure+0xa2>
} while (0)
    6908:	63 30       	cpi	r22, 0x03	; 3
    690a:	09 f0       	breq	.+2      	; 0x690e <nrk_ext_int_configure+0x9c>
    690c:	40 c0       	rjmp	.+128    	; 0x698e <nrk_ext_int_configure+0x11c>
    690e:	80 91 69 00 	lds	r24, 0x0069
    6912:	8c 60       	ori	r24, 0x0C	; 12
    6914:	80 93 69 00 	sts	0x0069, r24
    6918:	37 c0       	rjmp	.+110    	; 0x6988 <nrk_ext_int_configure+0x116>

#define ADC_GET_SAMPLE_8(x) \
do { \
    691a:	82 30       	cpi	r24, 0x02	; 2
    691c:	31 f5       	brne	.+76     	; 0x696a <nrk_ext_int_configure+0xf8>
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
    691e:	50 93 61 0a 	sts	0x0A61, r21
    6922:	40 93 60 0a 	sts	0x0A60, r20
} while (0)
    6926:	66 23       	and	r22, r22
    6928:	21 f4       	brne	.+8      	; 0x6932 <nrk_ext_int_configure+0xc0>
    692a:	80 91 69 00 	lds	r24, 0x0069
    692e:	8f 7c       	andi	r24, 0xCF	; 207
    6930:	f1 cf       	rjmp	.-30     	; 0x6914 <nrk_ext_int_configure+0xa2>

    6932:	61 30       	cpi	r22, 0x01	; 1
    6934:	49 f4       	brne	.+18     	; 0x6948 <nrk_ext_int_configure+0xd6>
uint16_t read_voltage_status();
    6936:	80 91 69 00 	lds	r24, 0x0069
    693a:	8f 7d       	andi	r24, 0xDF	; 223
    693c:	80 93 69 00 	sts	0x0069, r24
    6940:	80 91 69 00 	lds	r24, 0x0069
    6944:	80 61       	ori	r24, 0x10	; 16
    6946:	e6 cf       	rjmp	.-52     	; 0x6914 <nrk_ext_int_configure+0xa2>
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
    6948:	62 30       	cpi	r22, 0x02	; 2
    694a:	49 f4       	brne	.+18     	; 0x695e <nrk_ext_int_configure+0xec>
{
    694c:	80 91 69 00 	lds	r24, 0x0069
    6950:	80 62       	ori	r24, 0x20	; 32
    6952:	80 93 69 00 	sts	0x0069, r24
    6956:	80 91 69 00 	lds	r24, 0x0069
    695a:	8f 7e       	andi	r24, 0xEF	; 239
    695c:	db cf       	rjmp	.-74     	; 0x6914 <nrk_ext_int_configure+0xa2>
uint8_t count=0;
    695e:	63 30       	cpi	r22, 0x03	; 3
    6960:	b1 f4       	brne	.+44     	; 0x698e <nrk_ext_int_configure+0x11c>
    6962:	80 91 69 00 	lds	r24, 0x0069
    6966:	80 63       	ori	r24, 0x30	; 48
    6968:	d5 cf       	rjmp	.-86     	; 0x6914 <nrk_ext_int_configure+0xa2>
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

     switch(action)
     {
    696a:	83 50       	subi	r24, 0x03	; 3
    696c:	88 30       	cpi	r24, 0x08	; 8
    696e:	18 f0       	brcs	.+6      	; 0x6976 <nrk_ext_int_configure+0x104>
    6970:	8f ef       	ldi	r24, 0xFF	; 255
    6972:	9f ef       	ldi	r25, 0xFF	; 255
    6974:	08 95       	ret
            case INIT: 
    6976:	80 91 68 00 	lds	r24, 0x0068
    697a:	81 60       	ori	r24, 0x01	; 1
    697c:	80 93 68 00 	sts	0x0068, r24
			// Set the pwr ctrl pin as output
    6980:	50 93 67 0a 	sts	0x0A67, r21
    6984:	40 93 66 0a 	sts	0x0A66, r20
    6988:	81 e0       	ldi	r24, 0x01	; 1
    698a:	90 e0       	ldi	r25, 0x00	; 0
    698c:	08 95       	ret
  			DDRF = PWR_CTRL_MASK;
    698e:	81 e0       	ldi	r24, 0x01	; 1
    6990:	90 e0       	ldi	r25, 0x00	; 0
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
    6992:	08 95       	ret

00006994 <__vector_1>:
		    if(opt&READ_FLAG)
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
    6994:	1f 92       	push	r1
    6996:	0f 92       	push	r0
    6998:	0f b6       	in	r0, 0x3f	; 63
    699a:	0f 92       	push	r0
    699c:	11 24       	eor	r1, r1
    699e:	2f 93       	push	r18
    69a0:	3f 93       	push	r19
    69a2:	4f 93       	push	r20
    69a4:	5f 93       	push	r21
    69a6:	6f 93       	push	r22
    69a8:	7f 93       	push	r23
    69aa:	8f 93       	push	r24
    69ac:	9f 93       	push	r25
    69ae:	af 93       	push	r26
    69b0:	bf 93       	push	r27
    69b2:	ef 93       	push	r30
    69b4:	ff 93       	push	r31
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    69b6:	e0 91 62 0a 	lds	r30, 0x0A62
    69ba:	f0 91 63 0a 	lds	r31, 0x0A63
    69be:	30 97       	sbiw	r30, 0x00	; 0
    69c0:	11 f0       	breq	.+4      	; 0x69c6 <__vector_1+0x32>
    69c2:	09 95       	icall
    69c4:	04 c0       	rjmp	.+8      	; 0x69ce <__vector_1+0x3a>
		    	return NRK_OK;
		    }
    69c6:	60 e0       	ldi	r22, 0x00	; 0
    69c8:	8a e0       	ldi	r24, 0x0A	; 10
    69ca:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
    69ce:	ff 91       	pop	r31
    69d0:	ef 91       	pop	r30
    69d2:	bf 91       	pop	r27
    69d4:	af 91       	pop	r26
    69d6:	9f 91       	pop	r25
    69d8:	8f 91       	pop	r24
    69da:	7f 91       	pop	r23
    69dc:	6f 91       	pop	r22
    69de:	5f 91       	pop	r21
    69e0:	4f 91       	pop	r20
    69e2:	3f 91       	pop	r19
    69e4:	2f 91       	pop	r18
    69e6:	0f 90       	pop	r0
    69e8:	0f be       	out	0x3f, r0	; 63
    69ea:	0f 90       	pop	r0
    69ec:	1f 90       	pop	r1
    69ee:	18 95       	reti

000069f0 <__vector_9>:
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
		      return 1;
	     
	    case OPEN:  
    69f0:	1f 92       	push	r1
    69f2:	0f 92       	push	r0
    69f4:	0f b6       	in	r0, 0x3f	; 63
    69f6:	0f 92       	push	r0
    69f8:	11 24       	eor	r1, r1
    69fa:	2f 93       	push	r18
    69fc:	3f 93       	push	r19
    69fe:	4f 93       	push	r20
    6a00:	5f 93       	push	r21
    6a02:	6f 93       	push	r22
    6a04:	7f 93       	push	r23
    6a06:	8f 93       	push	r24
    6a08:	9f 93       	push	r25
    6a0a:	af 93       	push	r26
    6a0c:	bf 93       	push	r27
    6a0e:	ef 93       	push	r30
    6a10:	ff 93       	push	r31
		    if(is_open==1) return NRK_ERROR;
    6a12:	e0 91 66 0a 	lds	r30, 0x0A66
    6a16:	f0 91 67 0a 	lds	r31, 0x0A67
    6a1a:	30 97       	sbiw	r30, 0x00	; 0
    6a1c:	11 f0       	breq	.+4      	; 0x6a22 <__vector_9+0x32>
    6a1e:	09 95       	icall
    6a20:	04 c0       	rjmp	.+8      	; 0x6a2a <__vector_9+0x3a>
		    is_open=1; 
		    if(opt&READ_FLAG)
    6a22:	60 e0       	ldi	r22, 0x00	; 0
    6a24:	8a e0       	ldi	r24, 0x0A	; 10
    6a26:	0e 94 6e 24 	call	0x48dc	; 0x48dc <nrk_kernel_error_add>
    6a2a:	ff 91       	pop	r31
    6a2c:	ef 91       	pop	r30
    6a2e:	bf 91       	pop	r27
    6a30:	af 91       	pop	r26
    6a32:	9f 91       	pop	r25
    6a34:	8f 91       	pop	r24
    6a36:	7f 91       	pop	r23
    6a38:	6f 91       	pop	r22
    6a3a:	5f 91       	pop	r21
    6a3c:	4f 91       	pop	r20
    6a3e:	3f 91       	pop	r19
    6a40:	2f 91       	pop	r18
    6a42:	0f 90       	pop	r0
    6a44:	0f be       	out	0x3f, r0	; 63
    6a46:	0f 90       	pop	r0
    6a48:	1f 90       	pop	r1
    6a4a:	18 95       	reti

00006a4c <_nrk_startup_ok>:
#include <nrk_driver.h>
#include <ff_basic_sensor.h>
#include <include.h>
#include <stdio.h>
#include <ulib.h>
#include <nrk_error.h>
    6a4c:	80 91 b0 00 	lds	r24, 0x00B0
    6a50:	90 e0       	ldi	r25, 0x00	; 0
    6a52:	81 11       	cpse	r24, r1
    6a54:	91 e0       	ldi	r25, 0x01	; 1
    6a56:	81 e0       	ldi	r24, 0x01	; 1
    6a58:	98 27       	eor	r25, r24
#include <nrk.h>
#include <stdint.h>
    6a5a:	89 2f       	mov	r24, r25
    6a5c:	99 27       	eor	r25, r25
    6a5e:	08 95       	ret

00006a60 <update_watchdog>:
#include <basic_rf.h>
#include <nrk_timer.h>

    6a60:	08 95       	ret

00006a62 <nrk_watchdog_check>:
#define ADC_VREF_VCC() \
   do { \
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)

    6a62:	04 b6       	in	r0, 0x34	; 52
    6a64:	03 fc       	sbrc	r0, 3
    6a66:	03 c0       	rjmp	.+6      	; 0x6a6e <nrk_watchdog_check+0xc>
    6a68:	81 e0       	ldi	r24, 0x01	; 1
    6a6a:	90 e0       	ldi	r25, 0x00	; 0
    6a6c:	08 95       	ret
    6a6e:	8f ef       	ldi	r24, 0xFF	; 255
    6a70:	9f ef       	ldi	r25, 0xFF	; 255

#define ADC_VREF_1_1() \
    6a72:	08 95       	ret

00006a74 <nrk_watchdog_reset>:
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)
    6a74:	a8 95       	wdr
    6a76:	08 95       	ret

00006a78 <nrk_watchdog_disable>:
#include <nrk_driver.h>
#include <ff_basic_sensor.h>
#include <include.h>
#include <stdio.h>
#include <ulib.h>
#include <nrk_error.h>
    6a78:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>

#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)
    6a7c:	a8 95       	wdr
#include <include.h>
#include <stdio.h>
#include <ulib.h>
#include <nrk_error.h>
#include <nrk.h>
#include <stdint.h>
    6a7e:	84 b7       	in	r24, 0x34	; 52
    6a80:	87 7f       	andi	r24, 0xF7	; 247
    6a82:	84 bf       	out	0x34, r24	; 52
#include <basic_rf.h>
    6a84:	e0 e6       	ldi	r30, 0x60	; 96
    6a86:	f0 e0       	ldi	r31, 0x00	; 0
    6a88:	80 81       	ld	r24, Z
    6a8a:	88 61       	ori	r24, 0x18	; 24
    6a8c:	80 83       	st	Z, r24
#include <nrk_timer.h>
    6a8e:	10 82       	st	Z, r1

    6a90:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
    6a94:	08 95       	ret

00006a96 <nrk_watchdog_enable>:
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
    6a96:	0e 94 87 21 	call	0x430e	; 0x430e <nrk_int_disable>
#define ADC_INIT() \
    6a9a:	84 b7       	in	r24, 0x34	; 52
    6a9c:	87 7f       	andi	r24, 0xF7	; 247
    6a9e:	84 bf       	out	0x34, r24	; 52

#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)
    6aa0:	a8 95       	wdr
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
    6aa2:	e0 e6       	ldi	r30, 0x60	; 96
    6aa4:	f0 e0       	ldi	r31, 0x00	; 0
    6aa6:	80 81       	ld	r24, Z
    6aa8:	88 61       	ori	r24, 0x18	; 24
    6aaa:	80 83       	st	Z, r24
	ADMUX = BM(REFS0);  \
    6aac:	8d e0       	ldi	r24, 0x0D	; 13
    6aae:	80 83       	st	Z, r24
} while (0)
    6ab0:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
    6ab4:	08 95       	ret

00006ab6 <nrk_battery_save>:
	ADMUX |= BM(REFS1);  \
} while(0)


#define ADC_VREF_2_56() \
   do { \
    6ab6:	08 95       	ret

00006ab8 <nrk_sleep>:
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
} while(0)

// Macros for obtaining the latest sample value
    6ab8:	83 b7       	in	r24, 0x33	; 51
    6aba:	81 7f       	andi	r24, 0xF1	; 241
    6abc:	86 60       	ori	r24, 0x06	; 6
    6abe:	83 bf       	out	0x33, r24	; 51
#define ADC_GET_SAMPLE_10(x) \
    6ac0:	83 b7       	in	r24, 0x33	; 51
    6ac2:	81 60       	ori	r24, 0x01	; 1
    6ac4:	83 bf       	out	0x33, r24	; 51
    6ac6:	88 95       	sleep
    6ac8:	83 b7       	in	r24, 0x33	; 51
    6aca:	8e 7f       	andi	r24, 0xFE	; 254
    6acc:	83 bf       	out	0x33, r24	; 51
    6ace:	08 95       	ret

00006ad0 <nrk_idle>:
x =  ADCL; \
x |= ADCH << 8; \
} while (0)

#define ADC_GET_SAMPLE_8(x) \
do { \
    6ad0:	83 b7       	in	r24, 0x33	; 51
    6ad2:	81 7f       	andi	r24, 0xF1	; 241
    6ad4:	83 bf       	out	0x33, r24	; 51
x = ((uint8_t) ADCL) >> 2; \
    6ad6:	83 b7       	in	r24, 0x33	; 51
    6ad8:	81 60       	ori	r24, 0x01	; 1
    6ada:	83 bf       	out	0x33, r24	; 51
    6adc:	88 95       	sleep
    6ade:	83 b7       	in	r24, 0x33	; 51
    6ae0:	8e 7f       	andi	r24, 0xFE	; 254
    6ae2:	83 bf       	out	0x33, r24	; 51
    6ae4:	08 95       	ret

00006ae6 <nrk_task_set_entry_function>:
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
    6ae6:	fc 01       	movw	r30, r24
    6ae8:	76 83       	std	Z+6, r23	; 0x06
    6aea:	65 83       	std	Z+5, r22	; 0x05
    6aec:	08 95       	ret

00006aee <nrk_task_stk_init>:
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
    6aee:	fb 01       	movw	r30, r22
    6af0:	da 01       	movw	r26, r20
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
		    is_open=1; 
		    if(opt&READ_FLAG)
    6af2:	25 e5       	ldi	r18, 0x55	; 85
    6af4:	2c 93       	st	X, r18
		    }
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
    6af6:	32 97       	sbiw	r30, 0x02	; 2
		    {
		    	return NRK_ERROR;
    6af8:	29 2f       	mov	r18, r25
    6afa:	33 27       	eor	r19, r19
    6afc:	20 83       	st	Z, r18
		    }
    6afe:	81 83       	std	Z+1, r24	; 0x01
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
		    	return NRK_ERROR;
    6b00:	32 97       	sbiw	r30, 0x02	; 2
    6b02:	11 82       	std	Z+1, r1	; 0x01
    6b04:	10 82       	st	Z, r1
		    else return NRK_OK;
    6b06:	32 97       	sbiw	r30, 0x02	; 2
    6b08:	11 82       	std	Z+1, r1	; 0x01
    6b0a:	10 82       	st	Z, r1
		
    6b0c:	32 97       	sbiw	r30, 0x02	; 2
    6b0e:	11 82       	std	Z+1, r1	; 0x01
    6b10:	10 82       	st	Z, r1
	    
    6b12:	32 97       	sbiw	r30, 0x02	; 2
    6b14:	11 82       	std	Z+1, r1	; 0x01
    6b16:	10 82       	st	Z, r1

    6b18:	32 97       	sbiw	r30, 0x02	; 2
    6b1a:	11 82       	std	Z+1, r1	; 0x01
    6b1c:	10 82       	st	Z, r1
             case READ:
    6b1e:	32 97       	sbiw	r30, 0x02	; 2
    6b20:	11 82       	std	Z+1, r1	; 0x01
    6b22:	10 82       	st	Z, r1
	     	      count=0;
    6b24:	32 97       	sbiw	r30, 0x02	; 2
    6b26:	11 82       	std	Z+1, r1	; 0x01
    6b28:	10 82       	st	Z, r1
		      if(size!=1 && size!=2) return 0;
    6b2a:	32 97       	sbiw	r30, 0x02	; 2
    6b2c:	11 82       	std	Z+1, r1	; 0x01
    6b2e:	10 82       	st	Z, r1
			if(channel!=BAT && channel<7)
			{
    6b30:	32 97       	sbiw	r30, 0x02	; 2
    6b32:	11 82       	std	Z+1, r1	; 0x01
    6b34:	10 82       	st	Z, r1
			      /* Conversion to 8-bit value*/
    6b36:	32 97       	sbiw	r30, 0x02	; 2
    6b38:	11 82       	std	Z+1, r1	; 0x01
    6b3a:	10 82       	st	Z, r1
			      uint16_t val=get_adc_val();
    6b3c:	32 97       	sbiw	r30, 0x02	; 2
    6b3e:	11 82       	std	Z+1, r1	; 0x01
    6b40:	10 82       	st	Z, r1

    6b42:	32 97       	sbiw	r30, 0x02	; 2
    6b44:	11 82       	std	Z+1, r1	; 0x01
    6b46:	10 82       	st	Z, r1
				if(size==2)
    6b48:	32 97       	sbiw	r30, 0x02	; 2
    6b4a:	11 82       	std	Z+1, r1	; 0x01
    6b4c:	10 82       	st	Z, r1
			      	{
    6b4e:	32 97       	sbiw	r30, 0x02	; 2
    6b50:	11 82       	std	Z+1, r1	; 0x01
    6b52:	10 82       	st	Z, r1
					buffer[count]=val  & 0xFF;
    6b54:	32 97       	sbiw	r30, 0x02	; 2
    6b56:	11 82       	std	Z+1, r1	; 0x01
    6b58:	10 82       	st	Z, r1
			      		count++;
    6b5a:	32 97       	sbiw	r30, 0x02	; 2
    6b5c:	11 82       	std	Z+1, r1	; 0x01
    6b5e:	10 82       	st	Z, r1
			      		buffer[count]=(val>>8)  & 0xFF;
    6b60:	32 97       	sbiw	r30, 0x02	; 2
    6b62:	11 82       	std	Z+1, r1	; 0x01
    6b64:	10 82       	st	Z, r1
				}

				if(size==1)
			      	{
    6b66:	cf 01       	movw	r24, r30
    6b68:	08 95       	ret

00006b6a <nrk_stack_pointer_init>:
			{
			uint16_t tmp;
			tmp=read_voltage_status();
			if(size==2)
				{
					buffer[count]=tmp & 0xFF;
    6b6a:	85 e5       	ldi	r24, 0x55	; 85
    6b6c:	80 93 7e 21 	sts	0x217E, r24
					count++;
					buffer[count]=(tmp>>8) & 0xFF;
    6b70:	ee ef       	ldi	r30, 0xFE	; 254
    6b72:	f1 e2       	ldi	r31, 0x21	; 33
    6b74:	f0 93 ba 06 	sts	0x06BA, r31
    6b78:	e0 93 b9 06 	sts	0x06B9, r30
				}
			if(size==1)
    6b7c:	2e e8       	ldi	r18, 0x8E	; 142
    6b7e:	31 e2       	ldi	r19, 0x21	; 33
    6b80:	83 2f       	mov	r24, r19
    6b82:	99 27       	eor	r25, r25
    6b84:	80 83       	st	Z, r24
				{
    6b86:	20 93 ff 21 	sts	0x21FF, r18
    6b8a:	08 95       	ret

00006b8c <nrk_stack_pointer_restore>:
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
				if(val<min)min=val;
    6b8c:	2e e8       	ldi	r18, 0x8E	; 142
    6b8e:	31 e2       	ldi	r19, 0x21	; 33
    6b90:	83 2f       	mov	r24, r19
    6b92:	99 27       	eor	r25, r25
    6b94:	80 93 fe 21 	sts	0x21FE, r24
				if(val>max)max=val;
    6b98:	20 93 ff 21 	sts	0x21FF, r18
    6b9c:	08 95       	ret

00006b9e <nrk_target_start>:
				nrk_spin_wait_us(125);	
				}
			 	val=max-min;	
				if(size==2)
			      	{
					buffer[count]=val  & 0xFF;
    6b9e:	0e 94 72 33 	call	0x66e4	; 0x66e4 <_nrk_setup_timer>
			      		count++;
    6ba2:	0e 94 89 21 	call	0x4312	; 0x4312 <nrk_int_enable>
    6ba6:	08 95       	ret

00006ba8 <nrk_task_set_stk>:
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;
    6ba8:	ef 92       	push	r14
    6baa:	ff 92       	push	r15
    6bac:	0f 93       	push	r16
    6bae:	1f 93       	push	r17
    6bb0:	cf 93       	push	r28
    6bb2:	df 93       	push	r29
    6bb4:	7c 01       	movw	r14, r24
    6bb6:	8b 01       	movw	r16, r22
    6bb8:	ea 01       	movw	r28, r20

     switch(action)
    6bba:	40 32       	cpi	r20, 0x20	; 32
    6bbc:	51 05       	cpc	r21, r1
    6bbe:	18 f4       	brcc	.+6      	; 0x6bc6 <nrk_task_set_stk+0x1e>
    6bc0:	81 e1       	ldi	r24, 0x11	; 17
    6bc2:	0e 94 75 24 	call	0x48ea	; 0x48ea <nrk_error_add>
     {
    6bc6:	c8 01       	movw	r24, r16
    6bc8:	01 97       	sbiw	r24, 0x01	; 1
    6bca:	8c 0f       	add	r24, r28
    6bcc:	9d 1f       	adc	r25, r29
    6bce:	f7 01       	movw	r30, r14
    6bd0:	92 83       	std	Z+2, r25	; 0x02
    6bd2:	81 83       	std	Z+1, r24	; 0x01
            case INIT: 
    6bd4:	14 83       	std	Z+4, r17	; 0x04
    6bd6:	03 83       	std	Z+3, r16	; 0x03
    6bd8:	df 91       	pop	r29
    6bda:	cf 91       	pop	r28
    6bdc:	1f 91       	pop	r17
    6bde:	0f 91       	pop	r16
    6be0:	ff 90       	pop	r15
    6be2:	ef 90       	pop	r14
    6be4:	08 95       	ret

00006be6 <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    6be6:	a0 91 2a 0a 	lds	r26, 0x0A2A
	lds r27,nrk_high_ready_TCB+1
    6bea:	b0 91 2b 0a 	lds	r27, 0x0A2B

    	;x points to &OSTCB[x]
    
	ld r28,x+
    6bee:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    6bf0:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    6bf2:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    6bf4:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    6bf6:	ff 91       	pop	r31
	pop r30
    6bf8:	ef 91       	pop	r30
	pop r29
    6bfa:	df 91       	pop	r29
	pop r28
    6bfc:	cf 91       	pop	r28
	pop r27
    6bfe:	bf 91       	pop	r27
	pop r26
    6c00:	af 91       	pop	r26
	pop r25
    6c02:	9f 91       	pop	r25
	pop r24			
    6c04:	8f 91       	pop	r24
	pop r23
    6c06:	7f 91       	pop	r23
	pop r22
    6c08:	6f 91       	pop	r22
	pop r21
    6c0a:	5f 91       	pop	r21
	pop r20	
    6c0c:	4f 91       	pop	r20
	pop r19
    6c0e:	3f 91       	pop	r19
	pop r18	
    6c10:	2f 91       	pop	r18
	pop r17
    6c12:	1f 91       	pop	r17
	pop r16
    6c14:	0f 91       	pop	r16
	pop r15
    6c16:	ff 90       	pop	r15
	pop r14
    6c18:	ef 90       	pop	r14
	pop r13
    6c1a:	df 90       	pop	r13
	pop r12
    6c1c:	cf 90       	pop	r12
	pop r11
    6c1e:	bf 90       	pop	r11
	pop r10
    6c20:	af 90       	pop	r10
	pop r9
    6c22:	9f 90       	pop	r9
	pop r8
    6c24:	8f 90       	pop	r8
	pop r7
    6c26:	7f 90       	pop	r7
	pop r6
    6c28:	6f 90       	pop	r6
	pop r5
    6c2a:	5f 90       	pop	r5
	pop r4
    6c2c:	4f 90       	pop	r4
	pop r3
    6c2e:	3f 90       	pop	r3
	pop r2
    6c30:	2f 90       	pop	r2
	pop r1
    6c32:	1f 90       	pop	r1
	pop r0
    6c34:	0f 90       	pop	r0
	out __SREG__, r0
    6c36:	0f be       	out	0x3f, r0	; 63
	pop r0	
    6c38:	0f 90       	pop	r0
	   
    	reti 
    6c3a:	18 95       	reti

00006c3c <vfprintf>:
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
#define FL_LONG 	0x80

int vfprintf (FILE * stream, const char *fmt, va_list ap)
{
    6c3c:	ab e0       	ldi	r26, 0x0B	; 11
    6c3e:	b0 e0       	ldi	r27, 0x00	; 0
    6c40:	e4 e2       	ldi	r30, 0x24	; 36
    6c42:	f6 e3       	ldi	r31, 0x36	; 54
    6c44:	0c 94 79 3a 	jmp	0x74f2	; 0x74f2 <__prologue_saves__>
    6c48:	4c 01       	movw	r8, r24
    6c4a:	6b 01       	movw	r12, r22
    6c4c:	7a 01       	movw	r14, r20
    unsigned char c;		/* holds a char from the format string */
    unsigned char flags;
    unsigned char buf[11];	/* size for -1 in octal, without '\0'	*/

    stream->len = 0;
    6c4e:	fc 01       	movw	r30, r24
    6c50:	17 82       	std	Z+7, r1	; 0x07
    6c52:	16 82       	std	Z+6, r1	; 0x06

    if ((stream->flags & __SWR) == 0)
    6c54:	83 81       	ldd	r24, Z+3	; 0x03
    6c56:	81 fd       	sbrc	r24, 1
    6c58:	08 c0       	rjmp	.+16     	; 0x6c6a <vfprintf+0x2e>
    6c5a:	8f ef       	ldi	r24, 0xFF	; 255
    6c5c:	9f ef       	ldi	r25, 0xFF	; 255
    6c5e:	1a c1       	rjmp	.+564    	; 0x6e94 <vfprintf+0x258>
	      case 'S':
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
    6c60:	22 e0       	ldi	r18, 0x02	; 2
    6c62:	30 e0       	ldi	r19, 0x00	; 0
    6c64:	e2 0e       	add	r14, r18
    6c66:	f3 1e       	adc	r15, r19
    6c68:	0c c0       	rjmp	.+24     	; 0x6c82 <vfprintf+0x46>
	for (;;) {
	    c = GETBYTE (stream->flags, __SPGM, fmt);
	    if (!c) goto ret;
	    if (c == '%') {
		c = GETBYTE (stream->flags, __SPGM, fmt);
		if (c != '%') break;
    6c6a:	9e e5       	ldi	r25, 0x5E	; 94
    6c6c:	29 2e       	mov	r2, r25
    6c6e:	94 e0       	ldi	r25, 0x04	; 4
    6c70:	39 2e       	mov	r3, r25
# error
#endif
		putc ('X' + (flags & FL_ALTLWR), stream);
	}
	do {
	    putc (buf[--c], stream);
    6c72:	3e 01       	movw	r6, r28
    6c74:	08 94       	sec
    6c76:	61 1c       	adc	r6, r1
    6c78:	71 1c       	adc	r7, r1
    6c7a:	87 e5       	ldi	r24, 0x57	; 87
    6c7c:	48 2e       	mov	r4, r24
    6c7e:	84 e0       	ldi	r24, 0x04	; 4
    6c80:	58 2e       	mov	r5, r24
	return EOF;

    for (;;) {

	for (;;) {
	    c = GETBYTE (stream->flags, __SPGM, fmt);
    6c82:	f4 01       	movw	r30, r8
    6c84:	03 81       	ldd	r16, Z+3	; 0x03
    6c86:	f6 01       	movw	r30, r12
    6c88:	03 fd       	sbrc	r16, 3
    6c8a:	85 91       	lpm	r24, Z+
    6c8c:	03 ff       	sbrs	r16, 3
    6c8e:	81 91       	ld	r24, Z+
    6c90:	6f 01       	movw	r12, r30
	    if (!c) goto ret;
    6c92:	88 23       	and	r24, r24
    6c94:	09 f4       	brne	.+2      	; 0x6c98 <vfprintf+0x5c>
    6c96:	fb c0       	rjmp	.+502    	; 0x6e8e <vfprintf+0x252>
	    if (c == '%') {
    6c98:	85 32       	cpi	r24, 0x25	; 37
    6c9a:	59 f4       	brne	.+22     	; 0x6cb2 <vfprintf+0x76>
		c = GETBYTE (stream->flags, __SPGM, fmt);
    6c9c:	03 fd       	sbrc	r16, 3
    6c9e:	65 91       	lpm	r22, Z+
    6ca0:	03 ff       	sbrs	r16, 3
    6ca2:	61 91       	ld	r22, Z+
    6ca4:	6f 01       	movw	r12, r30
		if (c != '%') break;
    6ca6:	65 32       	cpi	r22, 0x25	; 37
    6ca8:	19 f0       	breq	.+6      	; 0x6cb0 <vfprintf+0x74>
    6caa:	16 2f       	mov	r17, r22
    6cac:	bb 24       	eor	r11, r11
    6cae:	1c c0       	rjmp	.+56     	; 0x6ce8 <vfprintf+0xac>
    6cb0:	85 e2       	ldi	r24, 0x25	; 37
	    }
	    putc (c, stream);
    6cb2:	b4 01       	movw	r22, r8
    6cb4:	99 27       	eor	r25, r25
    6cb6:	2a c0       	rjmp	.+84     	; 0x6d0c <vfprintf+0xd0>

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
	{
	    if (c && strchr_P (PSTR(" +-.0123456789h"), c))
    6cb8:	11 23       	and	r17, r17
    6cba:	59 f1       	breq	.+86     	; 0x6d12 <vfprintf+0xd6>
    6cbc:	61 2f       	mov	r22, r17
    6cbe:	77 27       	eor	r23, r23
    6cc0:	c1 01       	movw	r24, r2
    6cc2:	0e 94 4e 37 	call	0x6e9c	; 0x6e9c <strchr_P>
    6cc6:	89 2b       	or	r24, r25
    6cc8:	49 f4       	brne	.+18     	; 0x6cdc <vfprintf+0xa0>
		continue;
	    if (c == '#') {
    6cca:	13 32       	cpi	r17, 0x23	; 35
    6ccc:	19 f4       	brne	.+6      	; 0x6cd4 <vfprintf+0x98>
		flags |= FL_ALT;
    6cce:	f0 e1       	ldi	r31, 0x10	; 16
    6cd0:	bf 2a       	or	r11, r31
    6cd2:	04 c0       	rjmp	.+8      	; 0x6cdc <vfprintf+0xa0>
		continue;
	    }
	    if (c == 'l') {
    6cd4:	1c 36       	cpi	r17, 0x6C	; 108
    6cd6:	61 f4       	brne	.+24     	; 0x6cf0 <vfprintf+0xb4>
		flags |= FL_LONG;
    6cd8:	20 e8       	ldi	r18, 0x80	; 128
    6cda:	b2 2a       	or	r11, r18
	    putc (c, stream);
	}

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
    6cdc:	f6 01       	movw	r30, r12
    6cde:	03 fd       	sbrc	r16, 3
    6ce0:	15 91       	lpm	r17, Z+
    6ce2:	03 ff       	sbrs	r16, 3
    6ce4:	11 91       	ld	r17, Z+
    6ce6:	6f 01       	movw	r12, r30
	    }
	    putc (c, stream);
	}

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
    6ce8:	b7 fe       	sbrs	r11, 7
    6cea:	e6 cf       	rjmp	.-52     	; 0x6cb8 <vfprintf+0x7c>
	    break;
	}

	/* Only a format character is valid.	*/

	if (c && strchr_P (PSTR("EFGefg"), c)) {
    6cec:	11 23       	and	r17, r17
    6cee:	89 f0       	breq	.+34     	; 0x6d12 <vfprintf+0xd6>
    6cf0:	61 2f       	mov	r22, r17
    6cf2:	77 27       	eor	r23, r23
    6cf4:	c2 01       	movw	r24, r4
    6cf6:	0e 94 4e 37 	call	0x6e9c	; 0x6e9c <strchr_P>
    6cfa:	89 2b       	or	r24, r25
    6cfc:	51 f0       	breq	.+20     	; 0x6d12 <vfprintf+0xd6>
	    (void) va_arg (ap, double);
    6cfe:	24 e0       	ldi	r18, 0x04	; 4
    6d00:	30 e0       	ldi	r19, 0x00	; 0
    6d02:	e2 0e       	add	r14, r18
    6d04:	f3 1e       	adc	r15, r19
	    putc ('?', stream);
    6d06:	b4 01       	movw	r22, r8
    6d08:	8f e3       	ldi	r24, 0x3F	; 63
    6d0a:	90 e0       	ldi	r25, 0x00	; 0
    6d0c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
    6d10:	b8 cf       	rjmp	.-144    	; 0x6c82 <vfprintf+0x46>
	}

	{
	    const char * pnt;

	    switch (c) {
    6d12:	13 36       	cpi	r17, 0x63	; 99
    6d14:	29 f0       	breq	.+10     	; 0x6d20 <vfprintf+0xe4>
    6d16:	13 37       	cpi	r17, 0x73	; 115
    6d18:	81 f0       	breq	.+32     	; 0x6d3a <vfprintf+0xfe>
    6d1a:	13 35       	cpi	r17, 0x53	; 83
    6d1c:	f9 f4       	brne	.+62     	; 0x6d5c <vfprintf+0x120>
    6d1e:	0b c0       	rjmp	.+22     	; 0x6d36 <vfprintf+0xfa>

	      case 'c':
		putc (va_arg (ap, int), stream);
    6d20:	87 01       	movw	r16, r14
    6d22:	0e 5f       	subi	r16, 0xFE	; 254
    6d24:	1f 4f       	sbci	r17, 0xFF	; 255
    6d26:	b4 01       	movw	r22, r8
    6d28:	f7 01       	movw	r30, r14
    6d2a:	80 81       	ld	r24, Z
    6d2c:	91 81       	ldd	r25, Z+1	; 0x01
    6d2e:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
    6d32:	78 01       	movw	r14, r16
    6d34:	a6 cf       	rjmp	.-180    	; 0x6c82 <vfprintf+0x46>
		continue;

	      case 'S':
		flags |= FL_PGMSTRING;
    6d36:	f1 e0       	ldi	r31, 0x01	; 1
    6d38:	bf 2a       	or	r11, r31
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
    6d3a:	f7 01       	movw	r30, r14
    6d3c:	00 81       	ld	r16, Z
    6d3e:	11 81       	ldd	r17, Z+1	; 0x01
    6d40:	04 c0       	rjmp	.+8      	; 0x6d4a <vfprintf+0x10e>
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
		    putc (c, stream);
    6d42:	b4 01       	movw	r22, r8
    6d44:	99 27       	eor	r25, r25
    6d46:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
    6d4a:	f8 01       	movw	r30, r16
    6d4c:	b0 fc       	sbrc	r11, 0
    6d4e:	85 91       	lpm	r24, Z+
    6d50:	b0 fe       	sbrs	r11, 0
    6d52:	81 91       	ld	r24, Z+
    6d54:	8f 01       	movw	r16, r30
    6d56:	88 23       	and	r24, r24
    6d58:	a1 f7       	brne	.-24     	; 0x6d42 <vfprintf+0x106>
    6d5a:	82 cf       	rjmp	.-252    	; 0x6c60 <vfprintf+0x24>
		    putc (c, stream);
		continue;
	    }
	}

	if (c == 'd' || c == 'i') {
    6d5c:	14 36       	cpi	r17, 0x64	; 100
    6d5e:	11 f0       	breq	.+4      	; 0x6d64 <vfprintf+0x128>
    6d60:	19 36       	cpi	r17, 0x69	; 105
    6d62:	49 f5       	brne	.+82     	; 0x6db6 <vfprintf+0x17a>
	    long x = (flags & FL_LONG) ? va_arg(ap,long) : va_arg(ap,int);
    6d64:	b7 fe       	sbrs	r11, 7
    6d66:	0a c0       	rjmp	.+20     	; 0x6d7c <vfprintf+0x140>
    6d68:	f7 01       	movw	r30, r14
    6d6a:	60 81       	ld	r22, Z
    6d6c:	71 81       	ldd	r23, Z+1	; 0x01
    6d6e:	82 81       	ldd	r24, Z+2	; 0x02
    6d70:	93 81       	ldd	r25, Z+3	; 0x03
    6d72:	24 e0       	ldi	r18, 0x04	; 4
    6d74:	30 e0       	ldi	r19, 0x00	; 0
    6d76:	e2 0e       	add	r14, r18
    6d78:	f3 1e       	adc	r15, r19
    6d7a:	0d c0       	rjmp	.+26     	; 0x6d96 <vfprintf+0x15a>
    6d7c:	f7 01       	movw	r30, r14
    6d7e:	80 81       	ld	r24, Z
    6d80:	91 81       	ldd	r25, Z+1	; 0x01
    6d82:	9c 01       	movw	r18, r24
    6d84:	b9 01       	movw	r22, r18
    6d86:	88 27       	eor	r24, r24
    6d88:	77 fd       	sbrc	r23, 7
    6d8a:	80 95       	com	r24
    6d8c:	98 2f       	mov	r25, r24
    6d8e:	42 e0       	ldi	r20, 0x02	; 2
    6d90:	50 e0       	ldi	r21, 0x00	; 0
    6d92:	e4 0e       	add	r14, r20
    6d94:	f5 1e       	adc	r15, r21
	    flags &= ~FL_ALT;
    6d96:	5f ee       	ldi	r21, 0xEF	; 239
    6d98:	b5 22       	and	r11, r21
	    if (x < 0) {
    6d9a:	97 ff       	sbrs	r25, 7
    6d9c:	09 c0       	rjmp	.+18     	; 0x6db0 <vfprintf+0x174>
		x = -x;
    6d9e:	90 95       	com	r25
    6da0:	80 95       	com	r24
    6da2:	70 95       	com	r23
    6da4:	61 95       	neg	r22
    6da6:	7f 4f       	sbci	r23, 0xFF	; 255
    6da8:	8f 4f       	sbci	r24, 0xFF	; 255
    6daa:	9f 4f       	sbci	r25, 0xFF	; 255
		/* `putc ('-', stream)' will considarably inlarge stack size.
		   So flag is used.	*/
		flags |= FL_NEGATIVE;
    6dac:	e0 e4       	ldi	r30, 0x40	; 64
    6dae:	be 2a       	or	r11, r30
	    }
	    c = __ultoa_invert (x, (char *)buf, 10) - (char *)buf;
    6db0:	2a e0       	ldi	r18, 0x0A	; 10
    6db2:	30 e0       	ldi	r19, 0x00	; 0
    6db4:	3a c0       	rjmp	.+116    	; 0x6e2a <vfprintf+0x1ee>

	} else {
	    int base;

	    switch (c) {
    6db6:	10 37       	cpi	r17, 0x70	; 112
    6db8:	b1 f0       	breq	.+44     	; 0x6de6 <vfprintf+0x1aa>
    6dba:	11 37       	cpi	r17, 0x71	; 113
    6dbc:	30 f4       	brcc	.+12     	; 0x6dca <vfprintf+0x18e>
    6dbe:	18 35       	cpi	r17, 0x58	; 88
    6dc0:	c9 f0       	breq	.+50     	; 0x6df4 <vfprintf+0x1b8>
    6dc2:	1f 36       	cpi	r17, 0x6F	; 111
    6dc4:	09 f0       	breq	.+2      	; 0x6dc8 <vfprintf+0x18c>
    6dc6:	63 c0       	rjmp	.+198    	; 0x6e8e <vfprintf+0x252>
    6dc8:	06 c0       	rjmp	.+12     	; 0x6dd6 <vfprintf+0x19a>
    6dca:	15 37       	cpi	r17, 0x75	; 117
    6dcc:	39 f0       	breq	.+14     	; 0x6ddc <vfprintf+0x1a0>
    6dce:	18 37       	cpi	r17, 0x78	; 120
    6dd0:	09 f0       	breq	.+2      	; 0x6dd4 <vfprintf+0x198>
    6dd2:	5d c0       	rjmp	.+186    	; 0x6e8e <vfprintf+0x252>
    6dd4:	0a c0       	rjmp	.+20     	; 0x6dea <vfprintf+0x1ae>
    6dd6:	28 e0       	ldi	r18, 0x08	; 8
    6dd8:	30 e0       	ldi	r19, 0x00	; 0
    6dda:	10 c0       	rjmp	.+32     	; 0x6dfc <vfprintf+0x1c0>
	      case 'u':
		flags &= ~FL_ALT;
    6ddc:	ff ee       	ldi	r31, 0xEF	; 239
    6dde:	bf 22       	and	r11, r31
    6de0:	2a e0       	ldi	r18, 0x0A	; 10
    6de2:	30 e0       	ldi	r19, 0x00	; 0
    6de4:	0b c0       	rjmp	.+22     	; 0x6dfc <vfprintf+0x1c0>
		goto ultoa;
	      case 'o':
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
    6de6:	20 e1       	ldi	r18, 0x10	; 16
    6de8:	b2 2a       	or	r11, r18
		/* no break */
	      case 'x':
		flags |= (FL_ALTHEX | FL_ALTLWR);
    6dea:	34 e2       	ldi	r19, 0x24	; 36
    6dec:	b3 2a       	or	r11, r19
    6dee:	20 e1       	ldi	r18, 0x10	; 16
    6df0:	30 e0       	ldi	r19, 0x00	; 0
    6df2:	04 c0       	rjmp	.+8      	; 0x6dfc <vfprintf+0x1c0>
	        base = 16;
		goto ultoa;
	      case 'X':
		flags |= FL_ALTHEX;
    6df4:	44 e0       	ldi	r20, 0x04	; 4
    6df6:	b4 2a       	or	r11, r20
    6df8:	20 e1       	ldi	r18, 0x10	; 16
    6dfa:	32 e0       	ldi	r19, 0x02	; 2
	        base = 16 | XTOA_UPPER;
	      ultoa:
		c = __ultoa_invert ((flags & FL_LONG)
    6dfc:	b7 fe       	sbrs	r11, 7
    6dfe:	0a c0       	rjmp	.+20     	; 0x6e14 <vfprintf+0x1d8>
    6e00:	f7 01       	movw	r30, r14
    6e02:	60 81       	ld	r22, Z
    6e04:	71 81       	ldd	r23, Z+1	; 0x01
    6e06:	82 81       	ldd	r24, Z+2	; 0x02
    6e08:	93 81       	ldd	r25, Z+3	; 0x03
    6e0a:	44 e0       	ldi	r20, 0x04	; 4
    6e0c:	50 e0       	ldi	r21, 0x00	; 0
    6e0e:	e4 0e       	add	r14, r20
    6e10:	f5 1e       	adc	r15, r21
    6e12:	0b c0       	rjmp	.+22     	; 0x6e2a <vfprintf+0x1ee>
    6e14:	f7 01       	movw	r30, r14
    6e16:	80 81       	ld	r24, Z
    6e18:	91 81       	ldd	r25, Z+1	; 0x01
    6e1a:	ac 01       	movw	r20, r24
    6e1c:	ba 01       	movw	r22, r20
    6e1e:	88 27       	eor	r24, r24
    6e20:	99 27       	eor	r25, r25
    6e22:	e2 e0       	ldi	r30, 0x02	; 2
    6e24:	f0 e0       	ldi	r31, 0x00	; 0
    6e26:	ee 0e       	add	r14, r30
    6e28:	ff 1e       	adc	r15, r31
    6e2a:	a3 01       	movw	r20, r6
    6e2c:	0e 94 86 38 	call	0x710c	; 0x710c <__ultoa_invert>
    6e30:	a8 2e       	mov	r10, r24
    6e32:	a6 18       	sub	r10, r6
	        goto ret;
	    }
	}

	/* Integer number output.	*/
	if (flags & FL_NEGATIVE)
    6e34:	0b 2d       	mov	r16, r11
    6e36:	11 27       	eor	r17, r17
    6e38:	06 ff       	sbrs	r16, 6
    6e3a:	05 c0       	rjmp	.+10     	; 0x6e46 <vfprintf+0x20a>
	    putc ('-', stream);
    6e3c:	b4 01       	movw	r22, r8
    6e3e:	8d e2       	ldi	r24, 0x2D	; 45
    6e40:	90 e0       	ldi	r25, 0x00	; 0
    6e42:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
	if ((flags & FL_ALT) && (buf[c-1] != '0')) {
    6e46:	04 ff       	sbrs	r16, 4
    6e48:	15 c0       	rjmp	.+42     	; 0x6e74 <vfprintf+0x238>
    6e4a:	fe 01       	movw	r30, r28
    6e4c:	ea 0d       	add	r30, r10
    6e4e:	f1 1d       	adc	r31, r1
    6e50:	80 81       	ld	r24, Z
    6e52:	80 33       	cpi	r24, 0x30	; 48
    6e54:	79 f0       	breq	.+30     	; 0x6e74 <vfprintf+0x238>
	    putc ('0', stream);
    6e56:	b4 01       	movw	r22, r8
    6e58:	80 e3       	ldi	r24, 0x30	; 48
    6e5a:	90 e0       	ldi	r25, 0x00	; 0
    6e5c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
	    if (flags & FL_ALTHEX)
    6e60:	02 ff       	sbrs	r16, 2
    6e62:	08 c0       	rjmp	.+16     	; 0x6e74 <vfprintf+0x238>
#if  FL_ALTLWR != 'x' - 'X'
# error
#endif
		putc ('X' + (flags & FL_ALTLWR), stream);
    6e64:	00 72       	andi	r16, 0x20	; 32
    6e66:	10 70       	andi	r17, 0x00	; 0
    6e68:	b4 01       	movw	r22, r8
    6e6a:	c8 01       	movw	r24, r16
    6e6c:	88 5a       	subi	r24, 0xA8	; 168
    6e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    6e70:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
	}
	do {
	    putc (buf[--c], stream);
    6e74:	aa 94       	dec	r10
    6e76:	f3 01       	movw	r30, r6
    6e78:	ea 0d       	add	r30, r10
    6e7a:	f1 1d       	adc	r31, r1
    6e7c:	80 81       	ld	r24, Z
    6e7e:	b4 01       	movw	r22, r8
    6e80:	99 27       	eor	r25, r25
    6e82:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <fputc>
	} while (c);
    6e86:	aa 20       	and	r10, r10
    6e88:	09 f4       	brne	.+2      	; 0x6e8c <vfprintf+0x250>
    6e8a:	fb ce       	rjmp	.-522    	; 0x6c82 <vfprintf+0x46>
    6e8c:	f3 cf       	rjmp	.-26     	; 0x6e74 <vfprintf+0x238>

    } /* for (;;) */

  ret:
    return stream->len;
    6e8e:	f4 01       	movw	r30, r8
    6e90:	86 81       	ldd	r24, Z+6	; 0x06
    6e92:	97 81       	ldd	r25, Z+7	; 0x07
    6e94:	e2 e1       	ldi	r30, 0x12	; 18
    6e96:	2b 96       	adiw	r28, 0x0b	; 11
    6e98:	0c 94 95 3a 	jmp	0x752a	; 0x752a <__epilogue_restores__>

00006e9c <strchr_P>:
    6e9c:	fc 01       	movw	r30, r24
    6e9e:	05 90       	lpm	r0, Z+
    6ea0:	06 16       	cp	r0, r22
    6ea2:	21 f0       	breq	.+8      	; 0x6eac <strchr_P+0x10>
    6ea4:	00 20       	and	r0, r0
    6ea6:	d9 f7       	brne	.-10     	; 0x6e9e <strchr_P+0x2>
    6ea8:	c0 01       	movw	r24, r0
    6eaa:	08 95       	ret
    6eac:	31 97       	sbiw	r30, 0x01	; 1
    6eae:	cf 01       	movw	r24, r30
    6eb0:	08 95       	ret

00006eb2 <fdevopen>:
	: "r" (flag),				\
	  "I" (ntz(mask))			\
    );						\
    __c;					\
})
#elif	1
    6eb2:	ef 92       	push	r14
    6eb4:	ff 92       	push	r15
    6eb6:	0f 93       	push	r16
    6eb8:	1f 93       	push	r17
    6eba:	cf 93       	push	r28
    6ebc:	df 93       	push	r29
    6ebe:	8c 01       	movw	r16, r24
    6ec0:	7b 01       	movw	r14, r22
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
    6ec2:	89 2b       	or	r24, r25
    6ec4:	11 f4       	brne	.+4      	; 0x6eca <fdevopen+0x18>
    6ec6:	67 2b       	or	r22, r23
    6ec8:	d1 f1       	breq	.+116    	; 0x6f3e <fdevopen+0x8c>
	"sbrc	%2,%3	\n\t"			\
	"lpm		\n\t"			\
	"sbrs	%2,%3	\n\t"			\
    6eca:	6e e0       	ldi	r22, 0x0E	; 14
    6ecc:	70 e0       	ldi	r23, 0x00	; 0
    6ece:	81 e0       	ldi	r24, 0x01	; 1
    6ed0:	90 e0       	ldi	r25, 0x00	; 0
    6ed2:	0e 94 e4 38 	call	0x71c8	; 0x71c8 <calloc>
    6ed6:	fc 01       	movw	r30, r24
    6ed8:	00 97       	sbiw	r24, 0x00	; 0
    6eda:	89 f1       	breq	.+98     	; 0x6f3e <fdevopen+0x8c>
    6edc:	dc 01       	movw	r26, r24
	"ld	r0,Z	\n\t"			\
	"adiw	r30,1	\n\t"			\
	"mov	%0,r0	"			\
    6ede:	80 e8       	ldi	r24, 0x80	; 128
    6ee0:	83 83       	std	Z+3, r24	; 0x03
	: "=r" (__c),				\
	  "+z" (pnt)				\
    6ee2:	e1 14       	cp	r14, r1
    6ee4:	f1 04       	cpc	r15, r1
    6ee6:	71 f0       	breq	.+28     	; 0x6f04 <fdevopen+0x52>
	: "r" (flag),				\
    6ee8:	f3 86       	std	Z+11, r15	; 0x0b
    6eea:	e2 86       	std	Z+10, r14	; 0x0a
	  "I" (ntz(mask))			\
    6eec:	81 e8       	ldi	r24, 0x81	; 129
    6eee:	83 83       	std	Z+3, r24	; 0x03
	: "r0"					\
    6ef0:	80 91 68 0a 	lds	r24, 0x0A68
    6ef4:	90 91 69 0a 	lds	r25, 0x0A69
    6ef8:	89 2b       	or	r24, r25
    6efa:	21 f4       	brne	.+8      	; 0x6f04 <fdevopen+0x52>
    );						\
    6efc:	f0 93 69 0a 	sts	0x0A69, r31
    6f00:	e0 93 68 0a 	sts	0x0A68, r30
    __c;					\
})
#else
    6f04:	01 15       	cp	r16, r1
    6f06:	11 05       	cpc	r17, r1
    6f08:	e1 f0       	breq	.+56     	; 0x6f42 <fdevopen+0x90>
# define GETBYTE(flag, mask, pnt)	({	\
    6f0a:	11 87       	std	Z+9, r17	; 0x09
    6f0c:	00 87       	std	Z+8, r16	; 0x08
    unsigned char __c;				\
    6f0e:	83 81       	ldd	r24, Z+3	; 0x03
    6f10:	82 60       	ori	r24, 0x02	; 2
    6f12:	83 83       	std	Z+3, r24	; 0x03
    __c = ((flag) & (mask))			\
    6f14:	80 91 6a 0a 	lds	r24, 0x0A6A
    6f18:	90 91 6b 0a 	lds	r25, 0x0A6B
    6f1c:	89 2b       	or	r24, r25
    6f1e:	89 f4       	brne	.+34     	; 0x6f42 <fdevopen+0x90>
	  ? pgm_read_byte(pnt) : *pnt;		\
    6f20:	f0 93 6b 0a 	sts	0x0A6B, r31
    6f24:	e0 93 6a 0a 	sts	0x0A6A, r30
    pnt++;					\
    6f28:	80 91 6c 0a 	lds	r24, 0x0A6C
    6f2c:	90 91 6d 0a 	lds	r25, 0x0A6D
    6f30:	89 2b       	or	r24, r25
    6f32:	39 f4       	brne	.+14     	; 0x6f42 <fdevopen+0x90>
    __c;					\
    6f34:	f0 93 6d 0a 	sts	0x0A6D, r31
    6f38:	e0 93 6c 0a 	sts	0x0A6C, r30
    6f3c:	02 c0       	rjmp	.+4      	; 0x6f42 <fdevopen+0x90>
    6f3e:	a0 e0       	ldi	r26, 0x00	; 0
    6f40:	b0 e0       	ldi	r27, 0x00	; 0
})
#endif

/* --------------------------------------------------------------------	*/
#if  PRINTF_LEVEL <= PRINTF_MIN
    6f42:	cd 01       	movw	r24, r26
    6f44:	e6 e0       	ldi	r30, 0x06	; 6
    6f46:	cd b7       	in	r28, 0x3d	; 61
    6f48:	de b7       	in	r29, 0x3e	; 62
    6f4a:	0c 94 a1 3a 	jmp	0x7542	; 0x7542 <__epilogue_restores__+0x18>

00006f4e <fgetc>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    6f4e:	cf 93       	push	r28
    6f50:	df 93       	push	r29
    6f52:	ec 01       	movw	r28, r24
#include <stdlib.h>
#include <string.h>

    6f54:	2b 81       	ldd	r18, Y+3	; 0x03
    6f56:	82 2f       	mov	r24, r18
    6f58:	99 27       	eor	r25, r25
    6f5a:	80 ff       	sbrs	r24, 0
    6f5c:	15 c0       	rjmp	.+42     	; 0x6f88 <fgetc+0x3a>
#include "stdio_private.h"
#include "ftoa_engine.h"
#include "ntz.h"
    6f5e:	86 ff       	sbrs	r24, 6
    6f60:	0a c0       	rjmp	.+20     	; 0x6f76 <fgetc+0x28>
#include "xtoa_fast.h"
    6f62:	2f 7b       	andi	r18, 0xBF	; 191
    6f64:	2b 83       	std	Y+3, r18	; 0x03

    6f66:	8e 81       	ldd	r24, Y+6	; 0x06
    6f68:	9f 81       	ldd	r25, Y+7	; 0x07
    6f6a:	01 96       	adiw	r24, 0x01	; 1
    6f6c:	9f 83       	std	Y+7, r25	; 0x07
    6f6e:	8e 83       	std	Y+6, r24	; 0x06
/*
    6f70:	8a 81       	ldd	r24, Y+2	; 0x02
    6f72:	99 27       	eor	r25, r25
    6f74:	2c c0       	rjmp	.+88     	; 0x6fce <fgetc+0x80>
 * This file can be compiled into more than one flavour.  The default
 * is to offer the usual modifiers and integer formatting support
 * (level 2).  Level 1 maintains a minimal version that just offers
    6f76:	82 ff       	sbrs	r24, 2
    6f78:	12 c0       	rjmp	.+36     	; 0x6f9e <fgetc+0x50>
 * integer formatting, but no modifier support whatsoever.  Level 3 is
    6f7a:	e8 81       	ld	r30, Y
    6f7c:	f9 81       	ldd	r31, Y+1	; 0x01
    6f7e:	80 81       	ld	r24, Z
 * intented for floating point support.
    6f80:	88 23       	and	r24, r24
    6f82:	29 f4       	brne	.+10     	; 0x6f8e <fgetc+0x40>
 */
    6f84:	20 62       	ori	r18, 0x20	; 32
    6f86:	2b 83       	std	Y+3, r18	; 0x03
    6f88:	8f ef       	ldi	r24, 0xFF	; 255
    6f8a:	9f ef       	ldi	r25, 0xFF	; 255
    6f8c:	20 c0       	rjmp	.+64     	; 0x6fce <fgetc+0x80>

/*
 * This file can be compiled into more than one flavour.  The default
 * is to offer the usual modifiers and integer formatting support
 * (level 2).  Level 1 maintains a minimal version that just offers
 * integer formatting, but no modifier support whatsoever.  Level 3 is
    6f8e:	28 2f       	mov	r18, r24
    6f90:	33 27       	eor	r19, r19
    6f92:	27 fd       	sbrc	r18, 7
    6f94:	30 95       	com	r19
 * intented for floating point support.
 */

#ifndef PRINTF_LEVEL
# define PRINTF_LEVEL PRINTF_STD
    6f96:	31 96       	adiw	r30, 0x01	; 1
    6f98:	f9 83       	std	Y+1, r31	; 0x01
    6f9a:	e8 83       	st	Y, r30
    6f9c:	11 c0       	rjmp	.+34     	; 0x6fc0 <fgetc+0x72>
#endif

#if PRINTF_LEVEL == PRINTF_MIN || PRINTF_LEVEL == PRINTF_STD \
    6f9e:	ea 85       	ldd	r30, Y+10	; 0x0a
    6fa0:	fb 85       	ldd	r31, Y+11	; 0x0b
    6fa2:	ce 01       	movw	r24, r28
    6fa4:	09 95       	icall
    6fa6:	9c 01       	movw	r18, r24
    || PRINTF_LEVEL == PRINTF_FLT
    6fa8:	97 ff       	sbrs	r25, 7
    6faa:	0a c0       	rjmp	.+20     	; 0x6fc0 <fgetc+0x72>
/* OK */
#else
    6fac:	9b 81       	ldd	r25, Y+3	; 0x03
    6fae:	2f 5f       	subi	r18, 0xFF	; 255
    6fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    6fb2:	11 f4       	brne	.+4      	; 0x6fb8 <fgetc+0x6a>
    6fb4:	80 e1       	ldi	r24, 0x10	; 16
    6fb6:	01 c0       	rjmp	.+2      	; 0x6fba <fgetc+0x6c>
    6fb8:	80 e2       	ldi	r24, 0x20	; 32
    6fba:	89 2b       	or	r24, r25
    6fbc:	8b 83       	std	Y+3, r24	; 0x03
    6fbe:	e4 cf       	rjmp	.-56     	; 0x6f88 <fgetc+0x3a>
# error "Not a known printf level."
#endif

#ifndef	__AVR_HAVE_LPMX__
# if  defined(__AVR_ENHANCED__) && __AVR_ENHANCED__
    6fc0:	8e 81       	ldd	r24, Y+6	; 0x06
    6fc2:	9f 81       	ldd	r25, Y+7	; 0x07
    6fc4:	01 96       	adiw	r24, 0x01	; 1
    6fc6:	9f 83       	std	Y+7, r25	; 0x07
    6fc8:	8e 83       	std	Y+6, r24	; 0x06
#  define __AVR_HAVE_LPMX__	1
    6fca:	82 2f       	mov	r24, r18
    6fcc:	99 27       	eor	r25, r25
    6fce:	df 91       	pop	r29
    6fd0:	cf 91       	pop	r28
    6fd2:	08 95       	ret

00006fd4 <fputc>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    6fd4:	0f 93       	push	r16
    6fd6:	1f 93       	push	r17
    6fd8:	cf 93       	push	r28
    6fda:	df 93       	push	r29
    6fdc:	8c 01       	movw	r16, r24
    6fde:	eb 01       	movw	r28, r22
#include <stdlib.h>
#include <string.h>
    6fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    6fe2:	99 27       	eor	r25, r25
    6fe4:	81 ff       	sbrs	r24, 1
    6fe6:	1b c0       	rjmp	.+54     	; 0x701e <fputc+0x4a>

#include "stdio_private.h"
#include "ftoa_engine.h"
    6fe8:	82 ff       	sbrs	r24, 2
    6fea:	0d c0       	rjmp	.+26     	; 0x7006 <fputc+0x32>
#include "ntz.h"
    6fec:	2e 81       	ldd	r18, Y+6	; 0x06
    6fee:	3f 81       	ldd	r19, Y+7	; 0x07
    6ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    6ff2:	9d 81       	ldd	r25, Y+5	; 0x05
    6ff4:	28 17       	cp	r18, r24
    6ff6:	39 07       	cpc	r19, r25
    6ff8:	64 f4       	brge	.+24     	; 0x7012 <fputc+0x3e>
#include "xtoa_fast.h"
    6ffa:	e8 81       	ld	r30, Y
    6ffc:	f9 81       	ldd	r31, Y+1	; 0x01
    6ffe:	01 93       	st	Z+, r16
    7000:	f9 83       	std	Y+1, r31	; 0x01
    7002:	e8 83       	st	Y, r30
    7004:	06 c0       	rjmp	.+12     	; 0x7012 <fputc+0x3e>

/*
 * This file can be compiled into more than one flavour.  The default
 * is to offer the usual modifiers and integer formatting support
    7006:	e8 85       	ldd	r30, Y+8	; 0x08
    7008:	f9 85       	ldd	r31, Y+9	; 0x09
    700a:	80 2f       	mov	r24, r16
    700c:	09 95       	icall
    700e:	89 2b       	or	r24, r25
    7010:	31 f4       	brne	.+12     	; 0x701e <fputc+0x4a>
 * (level 2).  Level 1 maintains a minimal version that just offers
    7012:	8e 81       	ldd	r24, Y+6	; 0x06
    7014:	9f 81       	ldd	r25, Y+7	; 0x07
    7016:	01 96       	adiw	r24, 0x01	; 1
    7018:	9f 83       	std	Y+7, r25	; 0x07
    701a:	8e 83       	std	Y+6, r24	; 0x06
    701c:	02 c0       	rjmp	.+4      	; 0x7022 <fputc+0x4e>
 * integer formatting, but no modifier support whatsoever.  Level 3 is
    701e:	0f ef       	ldi	r16, 0xFF	; 255
    7020:	1f ef       	ldi	r17, 0xFF	; 255
 * intented for floating point support.
 */

#ifndef PRINTF_LEVEL
    7022:	c8 01       	movw	r24, r16
    7024:	df 91       	pop	r29
    7026:	cf 91       	pop	r28
    7028:	1f 91       	pop	r17
    702a:	0f 91       	pop	r16
    702c:	08 95       	ret

0000702e <printf>:

/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
    702e:	a2 e0       	ldi	r26, 0x02	; 2
    7030:	b0 e0       	ldi	r27, 0x00	; 0
    7032:	ed e1       	ldi	r30, 0x1D	; 29
    7034:	f8 e3       	ldi	r31, 0x38	; 56
    7036:	0c 94 89 3a 	jmp	0x7512	; 0x7512 <__prologue_saves__+0x20>
    703a:	fe 01       	movw	r30, r28
    703c:	37 96       	adiw	r30, 0x07	; 7
    703e:	61 91       	ld	r22, Z+
    7040:	71 91       	ld	r23, Z+
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

    7042:	fa 83       	std	Y+2, r31	; 0x02
    7044:	e9 83       	std	Y+1, r30	; 0x01
#include "stdio_private.h"
    7046:	af 01       	movw	r20, r30
    7048:	80 91 6a 0a 	lds	r24, 0x0A6A
    704c:	90 91 6b 0a 	lds	r25, 0x0A6B
    7050:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <vfprintf>
    7054:	e2 e0       	ldi	r30, 0x02	; 2
    7056:	22 96       	adiw	r28, 0x02	; 2
    7058:	0c 94 a5 3a 	jmp	0x754a	; 0x754a <__epilogue_restores__+0x20>

0000705c <puts>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    705c:	0f 93       	push	r16
    705e:	1f 93       	push	r17
    7060:	cf 93       	push	r28
    7062:	df 93       	push	r29
    7064:	8c 01       	movw	r16, r24
#include <stdlib.h>
#include <string.h>

#include "stdio_private.h"
    7066:	e0 91 6a 0a 	lds	r30, 0x0A6A
    706a:	f0 91 6b 0a 	lds	r31, 0x0A6B
    706e:	83 81       	ldd	r24, Z+3	; 0x03
    7070:	81 ff       	sbrs	r24, 1
    7072:	1f c0       	rjmp	.+62     	; 0x70b2 <puts+0x56>
    7074:	c0 e0       	ldi	r28, 0x00	; 0
    7076:	d0 e0       	ldi	r29, 0x00	; 0
    7078:	0a c0       	rjmp	.+20     	; 0x708e <puts+0x32>
#include "ftoa_engine.h"
#include "ntz.h"
#include "xtoa_fast.h"

    707a:	fd 01       	movw	r30, r26
    707c:	20 85       	ldd	r18, Z+8	; 0x08
    707e:	31 85       	ldd	r19, Z+9	; 0x09
    7080:	bd 01       	movw	r22, r26
    7082:	f9 01       	movw	r30, r18
    7084:	09 95       	icall
    7086:	89 2b       	or	r24, r25
    7088:	11 f0       	breq	.+4      	; 0x708e <puts+0x32>
    708a:	cf ef       	ldi	r28, 0xFF	; 255
    708c:	df ef       	ldi	r29, 0xFF	; 255
#include <string.h>

#include "stdio_private.h"
#include "ftoa_engine.h"
#include "ntz.h"
#include "xtoa_fast.h"
    708e:	f8 01       	movw	r30, r16
    7090:	81 91       	ld	r24, Z+
    7092:	8f 01       	movw	r16, r30
    7094:	a0 91 6a 0a 	lds	r26, 0x0A6A
    7098:	b0 91 6b 0a 	lds	r27, 0x0A6B
    709c:	88 23       	and	r24, r24
    709e:	69 f7       	brne	.-38     	; 0x707a <puts+0x1e>

/*
 * This file can be compiled into more than one flavour.  The default
    70a0:	fd 01       	movw	r30, r26
    70a2:	20 85       	ldd	r18, Z+8	; 0x08
    70a4:	31 85       	ldd	r19, Z+9	; 0x09
    70a6:	bd 01       	movw	r22, r26
    70a8:	8a e0       	ldi	r24, 0x0A	; 10
    70aa:	f9 01       	movw	r30, r18
    70ac:	09 95       	icall
    70ae:	89 2b       	or	r24, r25
    70b0:	11 f0       	breq	.+4      	; 0x70b6 <puts+0x5a>
    70b2:	cf ef       	ldi	r28, 0xFF	; 255
    70b4:	df ef       	ldi	r29, 0xFF	; 255
 * is to offer the usual modifiers and integer formatting support
 * (level 2).  Level 1 maintains a minimal version that just offers
 * integer formatting, but no modifier support whatsoever.  Level 3 is
 * intented for floating point support.
    70b6:	ce 01       	movw	r24, r28
    70b8:	df 91       	pop	r29
    70ba:	cf 91       	pop	r28
    70bc:	1f 91       	pop	r17
    70be:	0f 91       	pop	r16
    70c0:	08 95       	ret

000070c2 <sprintf>:

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
    70c2:	a0 e1       	ldi	r26, 0x10	; 16
    70c4:	b0 e0       	ldi	r27, 0x00	; 0
    70c6:	e7 e6       	ldi	r30, 0x67	; 103
    70c8:	f8 e3       	ldi	r31, 0x38	; 56
    70ca:	0c 94 87 3a 	jmp	0x750e	; 0x750e <__prologue_saves__+0x1c>
    70ce:	0f 89       	ldd	r16, Y+23	; 0x17
    70d0:	18 8d       	ldd	r17, Y+24	; 0x18

#include "stdio_private.h"
#include "ftoa_engine.h"
#include "ntz.h"
#include "xtoa_fast.h"
    70d2:	86 e0       	ldi	r24, 0x06	; 6
    70d4:	8e 83       	std	Y+6, r24	; 0x06

    70d6:	1c 83       	std	Y+4, r17	; 0x04
    70d8:	0b 83       	std	Y+3, r16	; 0x03
/*
    70da:	8f ef       	ldi	r24, 0xFF	; 255
    70dc:	9f e7       	ldi	r25, 0x7F	; 127
    70de:	98 87       	std	Y+8, r25	; 0x08
    70e0:	8f 83       	std	Y+7, r24	; 0x07
 * This file can be compiled into more than one flavour.  The default
    70e2:	ae 01       	movw	r20, r28
    70e4:	45 5e       	subi	r20, 0xE5	; 229
    70e6:	5f 4f       	sbci	r21, 0xFF	; 255
    70e8:	5a 83       	std	Y+2, r21	; 0x02
    70ea:	49 83       	std	Y+1, r20	; 0x01
 * is to offer the usual modifiers and integer formatting support
    70ec:	69 8d       	ldd	r22, Y+25	; 0x19
    70ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    70f0:	ce 01       	movw	r24, r28
    70f2:	03 96       	adiw	r24, 0x03	; 3
    70f4:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <vfprintf>
 * (level 2).  Level 1 maintains a minimal version that just offers
 * integer formatting, but no modifier support whatsoever.  Level 3 is
    70f8:	29 85       	ldd	r18, Y+9	; 0x09
    70fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    70fc:	02 0f       	add	r16, r18
    70fe:	13 1f       	adc	r17, r19
    7100:	f8 01       	movw	r30, r16
    7102:	10 82       	st	Z, r1
    7104:	e4 e0       	ldi	r30, 0x04	; 4
    7106:	60 96       	adiw	r28, 0x10	; 16
    7108:	0c 94 a3 3a 	jmp	0x7546	; 0x7546 <__epilogue_restores__+0x1c>

0000710c <__ultoa_invert>:
    710c:	fa 01       	movw	r30, r20
    710e:	aa 27       	eor	r26, r26
    7110:	28 30       	cpi	r18, 0x08	; 8
    7112:	51 f1       	breq	.+84     	; 0x7168 <__ultoa_invert+0x5c>
    7114:	20 31       	cpi	r18, 0x10	; 16
    7116:	81 f1       	breq	.+96     	; 0x7178 <__ultoa_invert+0x6c>
    7118:	e8 94       	clt
    711a:	6f 93       	push	r22
    711c:	6e 7f       	andi	r22, 0xFE	; 254
    711e:	6e 5f       	subi	r22, 0xFE	; 254
    7120:	7f 4f       	sbci	r23, 0xFF	; 255
    7122:	8f 4f       	sbci	r24, 0xFF	; 255
    7124:	9f 4f       	sbci	r25, 0xFF	; 255
    7126:	af 4f       	sbci	r26, 0xFF	; 255
    7128:	b1 e0       	ldi	r27, 0x01	; 1
    712a:	3e d0       	rcall	.+124    	; 0x71a8 <__ultoa_invert+0x9c>
    712c:	b4 e0       	ldi	r27, 0x04	; 4
    712e:	3c d0       	rcall	.+120    	; 0x71a8 <__ultoa_invert+0x9c>
    7130:	67 0f       	add	r22, r23
    7132:	78 1f       	adc	r23, r24
    7134:	89 1f       	adc	r24, r25
    7136:	9a 1f       	adc	r25, r26
    7138:	a1 1d       	adc	r26, r1
    713a:	68 0f       	add	r22, r24
    713c:	79 1f       	adc	r23, r25
    713e:	8a 1f       	adc	r24, r26
    7140:	91 1d       	adc	r25, r1
    7142:	a1 1d       	adc	r26, r1
    7144:	6a 0f       	add	r22, r26
    7146:	71 1d       	adc	r23, r1
    7148:	81 1d       	adc	r24, r1
    714a:	91 1d       	adc	r25, r1
    714c:	a1 1d       	adc	r26, r1
    714e:	20 d0       	rcall	.+64     	; 0x7190 <__ultoa_invert+0x84>
    7150:	09 f4       	brne	.+2      	; 0x7154 <__ultoa_invert+0x48>
    7152:	68 94       	set
    7154:	3f 91       	pop	r19
    7156:	2a e0       	ldi	r18, 0x0A	; 10
    7158:	26 9f       	mul	r18, r22
    715a:	11 24       	eor	r1, r1
    715c:	30 19       	sub	r19, r0
    715e:	30 5d       	subi	r19, 0xD0	; 208
    7160:	31 93       	st	Z+, r19
    7162:	de f6       	brtc	.-74     	; 0x711a <__ultoa_invert+0xe>
    7164:	cf 01       	movw	r24, r30
    7166:	08 95       	ret
    7168:	46 2f       	mov	r20, r22
    716a:	47 70       	andi	r20, 0x07	; 7
    716c:	40 5d       	subi	r20, 0xD0	; 208
    716e:	41 93       	st	Z+, r20
    7170:	b3 e0       	ldi	r27, 0x03	; 3
    7172:	0f d0       	rcall	.+30     	; 0x7192 <__ultoa_invert+0x86>
    7174:	c9 f7       	brne	.-14     	; 0x7168 <__ultoa_invert+0x5c>
    7176:	f6 cf       	rjmp	.-20     	; 0x7164 <__ultoa_invert+0x58>
    7178:	46 2f       	mov	r20, r22
    717a:	4f 70       	andi	r20, 0x0F	; 15
    717c:	40 5d       	subi	r20, 0xD0	; 208
    717e:	4a 33       	cpi	r20, 0x3A	; 58
    7180:	18 f0       	brcs	.+6      	; 0x7188 <__ultoa_invert+0x7c>
    7182:	49 5d       	subi	r20, 0xD9	; 217
    7184:	31 fd       	sbrc	r19, 1
    7186:	40 52       	subi	r20, 0x20	; 32
    7188:	41 93       	st	Z+, r20
    718a:	02 d0       	rcall	.+4      	; 0x7190 <__ultoa_invert+0x84>
    718c:	a9 f7       	brne	.-22     	; 0x7178 <__ultoa_invert+0x6c>
    718e:	ea cf       	rjmp	.-44     	; 0x7164 <__ultoa_invert+0x58>
    7190:	b4 e0       	ldi	r27, 0x04	; 4
    7192:	a6 95       	lsr	r26
    7194:	97 95       	ror	r25
    7196:	87 95       	ror	r24
    7198:	77 95       	ror	r23
    719a:	67 95       	ror	r22
    719c:	ba 95       	dec	r27
    719e:	c9 f7       	brne	.-14     	; 0x7192 <__ultoa_invert+0x86>
    71a0:	00 97       	sbiw	r24, 0x00	; 0
    71a2:	61 05       	cpc	r22, r1
    71a4:	71 05       	cpc	r23, r1
    71a6:	08 95       	ret
    71a8:	9b 01       	movw	r18, r22
    71aa:	ac 01       	movw	r20, r24
    71ac:	0a 2e       	mov	r0, r26
    71ae:	06 94       	lsr	r0
    71b0:	57 95       	ror	r21
    71b2:	47 95       	ror	r20
    71b4:	37 95       	ror	r19
    71b6:	27 95       	ror	r18
    71b8:	ba 95       	dec	r27
    71ba:	c9 f7       	brne	.-14     	; 0x71ae <__ultoa_invert+0xa2>
    71bc:	62 0f       	add	r22, r18
    71be:	73 1f       	adc	r23, r19
    71c0:	84 1f       	adc	r24, r20
    71c2:	95 1f       	adc	r25, r21
    71c4:	a0 1d       	adc	r26, r0
    71c6:	08 95       	ret

000071c8 <calloc>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    71c8:	0f 93       	push	r16
    71ca:	1f 93       	push	r17
    71cc:	cf 93       	push	r28
    71ce:	df 93       	push	r29
#include <stdlib.h>
#include <string.h>

    71d0:	68 9f       	mul	r22, r24
    71d2:	80 01       	movw	r16, r0
    71d4:	69 9f       	mul	r22, r25
    71d6:	10 0d       	add	r17, r0
    71d8:	78 9f       	mul	r23, r24
    71da:	10 0d       	add	r17, r0
    71dc:	11 24       	eor	r1, r1
    71de:	c8 01       	movw	r24, r16
    71e0:	0e 94 00 39 	call	0x7200	; 0x7200 <malloc>
    71e4:	ec 01       	movw	r28, r24
    71e6:	00 97       	sbiw	r24, 0x00	; 0
    71e8:	29 f0       	breq	.+10     	; 0x71f4 <calloc+0x2c>
#include "stdio_private.h"
#include "ftoa_engine.h"
    71ea:	a8 01       	movw	r20, r16
    71ec:	60 e0       	ldi	r22, 0x00	; 0
    71ee:	70 e0       	ldi	r23, 0x00	; 0
    71f0:	0e 94 fe 39 	call	0x73fc	; 0x73fc <memset>
#include "ntz.h"
#include "xtoa_fast.h"
    71f4:	ce 01       	movw	r24, r28
    71f6:	df 91       	pop	r29
    71f8:	cf 91       	pop	r28
    71fa:	1f 91       	pop	r17
    71fc:	0f 91       	pop	r16
    71fe:	08 95       	ret

00007200 <malloc>:
#else
# error "Not a known printf level."
#endif

#ifndef	__AVR_HAVE_LPMX__
# if  defined(__AVR_ENHANCED__) && __AVR_ENHANCED__
    7200:	cf 93       	push	r28
    7202:	df 93       	push	r29
    7204:	ac 01       	movw	r20, r24
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
	"sbrc	%2,%3	\n\t"			\
	"lpm	%0,Z+	\n\t"			\
	"sbrs	%2,%3	\n\t"			\
    7206:	02 97       	sbiw	r24, 0x02	; 2
    7208:	10 f4       	brcc	.+4      	; 0x720e <malloc+0xe>
    720a:	42 e0       	ldi	r20, 0x02	; 2
    720c:	50 e0       	ldi	r21, 0x00	; 0
	  "I" (ntz(mask))			\
    );						\
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    720e:	a0 91 70 0a 	lds	r26, 0x0A70
    7212:	b0 91 71 0a 	lds	r27, 0x0A71
    7216:	fd 01       	movw	r30, r26
    7218:	c0 e0       	ldi	r28, 0x00	; 0
    721a:	d0 e0       	ldi	r29, 0x00	; 0
    721c:	20 e0       	ldi	r18, 0x00	; 0
    721e:	30 e0       	ldi	r19, 0x00	; 0
    7220:	20 c0       	rjmp	.+64     	; 0x7262 <malloc+0x62>
    unsigned char __c;				\
    asm (					\
	"sbrc	%2,%3	\n\t"			\
    7222:	80 81       	ld	r24, Z
    7224:	91 81       	ldd	r25, Z+1	; 0x01
    7226:	84 17       	cp	r24, r20
    7228:	95 07       	cpc	r25, r21
    722a:	69 f4       	brne	.+26     	; 0x7246 <malloc+0x46>
    722c:	82 81       	ldd	r24, Z+2	; 0x02
    722e:	93 81       	ldd	r25, Z+3	; 0x03
	"lpm		\n\t"			\
	"sbrs	%2,%3	\n\t"			\
	"ld	r0,Z	\n\t"			\
	"adiw	r30,1	\n\t"			\
	"mov	%0,r0	"			\
    7230:	20 97       	sbiw	r28, 0x00	; 0
    7232:	19 f0       	breq	.+6      	; 0x723a <malloc+0x3a>
	: "=r" (__c),				\
    7234:	9b 83       	std	Y+3, r25	; 0x03
    7236:	8a 83       	std	Y+2, r24	; 0x02
    7238:	04 c0       	rjmp	.+8      	; 0x7242 <malloc+0x42>
	  "+z" (pnt)				\
	: "r" (flag),				\
    723a:	90 93 71 0a 	sts	0x0A71, r25
    723e:	80 93 70 0a 	sts	0x0A70, r24
	  "I" (ntz(mask))			\
    7242:	9f 01       	movw	r18, r30
    7244:	32 c0       	rjmp	.+100    	; 0x72aa <malloc+0xaa>
	: "r0"					\
    );						\
    7246:	48 17       	cp	r20, r24
    7248:	59 07       	cpc	r21, r25
    724a:	38 f4       	brcc	.+14     	; 0x725a <malloc+0x5a>
    __c;					\
    724c:	21 15       	cp	r18, r1
    724e:	31 05       	cpc	r19, r1
    7250:	19 f0       	breq	.+6      	; 0x7258 <malloc+0x58>
    7252:	82 17       	cp	r24, r18
    7254:	93 07       	cpc	r25, r19
    7256:	08 f4       	brcc	.+2      	; 0x725a <malloc+0x5a>
    7258:	9c 01       	movw	r18, r24
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
    725a:	ef 01       	movw	r28, r30
    725c:	02 80       	ldd	r0, Z+2	; 0x02
    725e:	f3 81       	ldd	r31, Z+3	; 0x03
    7260:	e0 2d       	mov	r30, r0
    );						\
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    7262:	30 97       	sbiw	r30, 0x00	; 0
    7264:	f1 f6       	brne	.-68     	; 0x7222 <malloc+0x22>
})
#endif

/* --------------------------------------------------------------------	*/
#if  PRINTF_LEVEL <= PRINTF_MIN

    7266:	21 15       	cp	r18, r1
    7268:	31 05       	cpc	r19, r1
    726a:	99 f1       	breq	.+102    	; 0x72d2 <malloc+0xd2>
#define FL_PGMSTRING	0x01
    726c:	c9 01       	movw	r24, r18
    726e:	84 1b       	sub	r24, r20
    7270:	95 0b       	sbc	r25, r21
    7272:	04 97       	sbiw	r24, 0x04	; 4
    7274:	08 f4       	brcc	.+2      	; 0x7278 <malloc+0x78>
    7276:	a9 01       	movw	r20, r18
    7278:	e0 e0       	ldi	r30, 0x00	; 0
    727a:	f0 e0       	ldi	r31, 0x00	; 0
    727c:	28 c0       	rjmp	.+80     	; 0x72ce <malloc+0xce>
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
#define FL_LONG 	0x80
    727e:	8d 91       	ld	r24, X+
    7280:	9c 91       	ld	r25, X
    7282:	11 97       	sbiw	r26, 0x01	; 1
    7284:	82 17       	cp	r24, r18
    7286:	93 07       	cpc	r25, r19
    7288:	f9 f4       	brne	.+62     	; 0x72c8 <malloc+0xc8>

    728a:	48 17       	cp	r20, r24
    728c:	59 07       	cpc	r21, r25
    728e:	81 f4       	brne	.+32     	; 0x72b0 <malloc+0xb0>
    7290:	ed 01       	movw	r28, r26
    7292:	8a 81       	ldd	r24, Y+2	; 0x02
    7294:	9b 81       	ldd	r25, Y+3	; 0x03
int vfprintf (FILE * stream, const char *fmt, va_list ap)
{
    unsigned char c;		/* holds a char from the format string */
    unsigned char flags;
    unsigned char buf[11];	/* size for -1 in octal, without '\0'	*/
    7296:	30 97       	sbiw	r30, 0x00	; 0
    7298:	19 f0       	breq	.+6      	; 0x72a0 <malloc+0xa0>

    729a:	93 83       	std	Z+3, r25	; 0x03
    729c:	82 83       	std	Z+2, r24	; 0x02
    729e:	04 c0       	rjmp	.+8      	; 0x72a8 <malloc+0xa8>
    stream->len = 0;

    72a0:	90 93 71 0a 	sts	0x0A71, r25
    72a4:	80 93 70 0a 	sts	0x0A70, r24
    if ((stream->flags & __SWR) == 0)
    72a8:	9d 01       	movw	r18, r26
    72aa:	2e 5f       	subi	r18, 0xFE	; 254
    72ac:	3f 4f       	sbci	r19, 0xFF	; 255
    72ae:	4c c0       	rjmp	.+152    	; 0x7348 <malloc+0x148>
		if (c != '%') break;
	    }
	    putc (c, stream);
	}

	for (flags = 0;
    72b0:	84 1b       	sub	r24, r20
    72b2:	95 0b       	sbc	r25, r21
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
    72b4:	fd 01       	movw	r30, r26
    72b6:	e8 0f       	add	r30, r24
    72b8:	f9 1f       	adc	r31, r25
	{
    72ba:	41 93       	st	Z+, r20
    72bc:	51 93       	st	Z+, r21
	    if (c && strchr_P (PSTR(" +-.0123456789h"), c))
    72be:	02 97       	sbiw	r24, 0x02	; 2
    72c0:	8d 93       	st	X+, r24
    72c2:	9c 93       	st	X, r25
		continue;
    72c4:	9f 01       	movw	r18, r30
    72c6:	40 c0       	rjmp	.+128    	; 0x7348 <malloc+0x148>

#define FL_PGMSTRING	0x01
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
    72c8:	fd 01       	movw	r30, r26
    72ca:	a2 81       	ldd	r26, Z+2	; 0x02
    72cc:	b3 81       	ldd	r27, Z+3	; 0x03
#if  PRINTF_LEVEL <= PRINTF_MIN

#define FL_PGMSTRING	0x01
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
    72ce:	10 97       	sbiw	r26, 0x00	; 0
    72d0:	b1 f6       	brne	.-84     	; 0x727e <malloc+0x7e>
	    break;
	}

	/* Only a format character is valid.	*/

	if (c && strchr_P (PSTR("EFGefg"), c)) {
    72d2:	80 91 6e 0a 	lds	r24, 0x0A6E
    72d6:	90 91 6f 0a 	lds	r25, 0x0A6F
    72da:	89 2b       	or	r24, r25
    72dc:	41 f4       	brne	.+16     	; 0x72ee <malloc+0xee>
	    (void) va_arg (ap, double);
    72de:	80 91 ce 02 	lds	r24, 0x02CE
    72e2:	90 91 cf 02 	lds	r25, 0x02CF
    72e6:	90 93 6f 0a 	sts	0x0A6F, r25
    72ea:	80 93 6e 0a 	sts	0x0A6E, r24
	    putc ('?', stream);
    72ee:	20 91 d0 02 	lds	r18, 0x02D0
    72f2:	30 91 d1 02 	lds	r19, 0x02D1
	    continue;
    72f6:	21 15       	cp	r18, r1
    72f8:	31 05       	cpc	r19, r1
    72fa:	49 f4       	brne	.+18     	; 0x730e <malloc+0x10e>
	}
    72fc:	8d b7       	in	r24, 0x3d	; 61
    72fe:	28 2f       	mov	r18, r24
    7300:	33 27       	eor	r19, r19
    7302:	80 91 cc 02 	lds	r24, 0x02CC
    7306:	90 91 cd 02 	lds	r25, 0x02CD
    730a:	28 1b       	sub	r18, r24
    730c:	39 0b       	sbc	r19, r25

    730e:	a0 91 6e 0a 	lds	r26, 0x0A6E
    7312:	b0 91 6f 0a 	lds	r27, 0x0A6F
    7316:	2a 1b       	sub	r18, r26
    7318:	3b 0b       	sbc	r19, r27
	{
	    const char * pnt;

	    switch (c) {
    731a:	24 17       	cp	r18, r20
    731c:	35 07       	cpc	r19, r21
    731e:	90 f0       	brcs	.+36     	; 0x7344 <malloc+0x144>
    7320:	ca 01       	movw	r24, r20
    7322:	02 96       	adiw	r24, 0x02	; 2
    7324:	28 17       	cp	r18, r24
    7326:	39 07       	cpc	r19, r25
    7328:	68 f0       	brcs	.+26     	; 0x7344 <malloc+0x144>

	      case 'c':
    732a:	9d 01       	movw	r18, r26
    732c:	2e 5f       	subi	r18, 0xFE	; 254
    732e:	3f 4f       	sbci	r19, 0xFF	; 255
    7330:	c9 01       	movw	r24, r18
    7332:	84 0f       	add	r24, r20
    7334:	95 1f       	adc	r25, r21
    7336:	90 93 6f 0a 	sts	0x0A6F, r25
    733a:	80 93 6e 0a 	sts	0x0A6E, r24
		putc (va_arg (ap, int), stream);
    733e:	4d 93       	st	X+, r20
    7340:	5c 93       	st	X, r21
    7342:	02 c0       	rjmp	.+4      	; 0x7348 <malloc+0x148>
		continue;
    7344:	20 e0       	ldi	r18, 0x00	; 0
    7346:	30 e0       	ldi	r19, 0x00	; 0

	      case 'S':
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
    7348:	c9 01       	movw	r24, r18
    734a:	df 91       	pop	r29
    734c:	cf 91       	pop	r28
    734e:	08 95       	ret

00007350 <free>:
		pnt = va_arg (ap, char *);
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
		    putc (c, stream);
		continue;
    7350:	cf 93       	push	r28
    7352:	df 93       	push	r29
	    }
	}

	if (c == 'd' || c == 'i') {
	    long x = (flags & FL_LONG) ? va_arg(ap,long) : va_arg(ap,int);
    7354:	00 97       	sbiw	r24, 0x00	; 0
    7356:	09 f4       	brne	.+2      	; 0x735a <free+0xa>
    7358:	4e c0       	rjmp	.+156    	; 0x73f6 <free+0xa6>
	    flags &= ~FL_ALT;
	    if (x < 0) {
		x = -x;
		/* `putc ('-', stream)' will considarably inlarge stack size.
    735a:	ec 01       	movw	r28, r24
    735c:	22 97       	sbiw	r28, 0x02	; 2
		   So flag is used.	*/
		flags |= FL_NEGATIVE;
    735e:	1b 82       	std	Y+3, r1	; 0x03
    7360:	1a 82       	std	Y+2, r1	; 0x02
	    }
	    c = __ultoa_invert (x, (char *)buf, 10) - (char *)buf;

	} else {
	    int base;

    7362:	a0 91 70 0a 	lds	r26, 0x0A70
    7366:	b0 91 71 0a 	lds	r27, 0x0A71
    736a:	10 97       	sbiw	r26, 0x00	; 0
    736c:	11 f1       	breq	.+68     	; 0x73b2 <free+0x62>
    736e:	40 e0       	ldi	r20, 0x00	; 0
    7370:	50 e0       	ldi	r21, 0x00	; 0
    7372:	01 c0       	rjmp	.+2      	; 0x7376 <free+0x26>
	    switch (c) {
	      case 'u':
    7374:	dc 01       	movw	r26, r24
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
	      case 'x':
		flags |= (FL_ALTHEX | FL_ALTLWR);
    7376:	ac 17       	cp	r26, r28
    7378:	bd 07       	cpc	r27, r29
    737a:	00 f1       	brcs	.+64     	; 0x73bc <free+0x6c>
	        base = 16;
		goto ultoa;
	      case 'X':
    737c:	bb 83       	std	Y+3, r27	; 0x03
    737e:	aa 83       	std	Y+2, r26	; 0x02
		flags |= FL_ALTHEX;
    7380:	fe 01       	movw	r30, r28
    7382:	21 91       	ld	r18, Z+
    7384:	31 91       	ld	r19, Z+
    7386:	e2 0f       	add	r30, r18
    7388:	f3 1f       	adc	r31, r19
    738a:	ea 17       	cp	r30, r26
    738c:	fb 07       	cpc	r31, r27
    738e:	71 f4       	brne	.+28     	; 0x73ac <free+0x5c>
	        base = 16 | XTOA_UPPER;
	      ultoa:
    7390:	8d 91       	ld	r24, X+
    7392:	9c 91       	ld	r25, X
    7394:	11 97       	sbiw	r26, 0x01	; 1
    7396:	28 0f       	add	r18, r24
    7398:	39 1f       	adc	r19, r25
    739a:	2e 5f       	subi	r18, 0xFE	; 254
    739c:	3f 4f       	sbci	r19, 0xFF	; 255
    739e:	39 83       	std	Y+1, r19	; 0x01
    73a0:	28 83       	st	Y, r18
		c = __ultoa_invert ((flags & FL_LONG)
    73a2:	fd 01       	movw	r30, r26
    73a4:	82 81       	ldd	r24, Z+2	; 0x02
    73a6:	93 81       	ldd	r25, Z+3	; 0x03
    73a8:	9b 83       	std	Y+3, r25	; 0x03
    73aa:	8a 83       	std	Y+2, r24	; 0x02
				    ? va_arg(ap, unsigned long)
				    : va_arg(ap, unsigned int),
    73ac:	41 15       	cp	r20, r1
    73ae:	51 05       	cpc	r21, r1
    73b0:	59 f4       	brne	.+22     	; 0x73c8 <free+0x78>
				    (char *)buf, base)  -  (char *)buf;
		break;
    73b2:	d0 93 71 0a 	sts	0x0A71, r29
    73b6:	c0 93 70 0a 	sts	0x0A70, r28
    73ba:	1d c0       	rjmp	.+58     	; 0x73f6 <free+0xa6>
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
	      case 'x':
    73bc:	fd 01       	movw	r30, r26
    73be:	82 81       	ldd	r24, Z+2	; 0x02
    73c0:	93 81       	ldd	r25, Z+3	; 0x03
    73c2:	ad 01       	movw	r20, r26
	      case 'o':
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
    73c4:	00 97       	sbiw	r24, 0x00	; 0
    73c6:	b1 f6       	brne	.-84     	; 0x7374 <free+0x24>

	/* Integer number output.	*/
	if (flags & FL_NEGATIVE)
	    putc ('-', stream);
	if ((flags & FL_ALT) && (buf[c-1] != '0')) {
	    putc ('0', stream);
    73c8:	fa 01       	movw	r30, r20
    73ca:	d3 83       	std	Z+3, r29	; 0x03
    73cc:	c2 83       	std	Z+2, r28	; 0x02
	    if (flags & FL_ALTHEX)
#if  FL_ALTLWR != 'x' - 'X'
    73ce:	21 91       	ld	r18, Z+
    73d0:	31 91       	ld	r19, Z+
    73d2:	e2 0f       	add	r30, r18
    73d4:	f3 1f       	adc	r31, r19
    73d6:	ec 17       	cp	r30, r28
    73d8:	fd 07       	cpc	r31, r29
    73da:	69 f4       	brne	.+26     	; 0x73f6 <free+0xa6>
# error
#endif
    73dc:	88 81       	ld	r24, Y
    73de:	99 81       	ldd	r25, Y+1	; 0x01
    73e0:	28 0f       	add	r18, r24
    73e2:	39 1f       	adc	r19, r25
    73e4:	2e 5f       	subi	r18, 0xFE	; 254
    73e6:	3f 4f       	sbci	r19, 0xFF	; 255
    73e8:	fa 01       	movw	r30, r20
    73ea:	31 83       	std	Z+1, r19	; 0x01
    73ec:	20 83       	st	Z, r18
		putc ('X' + (flags & FL_ALTLWR), stream);
    73ee:	8a 81       	ldd	r24, Y+2	; 0x02
    73f0:	9b 81       	ldd	r25, Y+3	; 0x03
    73f2:	93 83       	std	Z+3, r25	; 0x03
    73f4:	82 83       	std	Z+2, r24	; 0x02
    73f6:	df 91       	pop	r29
    73f8:	cf 91       	pop	r28
    73fa:	08 95       	ret

000073fc <memset>:
    73fc:	dc 01       	movw	r26, r24
    73fe:	01 c0       	rjmp	.+2      	; 0x7402 <memset+0x6>
    7400:	6d 93       	st	X+, r22
    7402:	41 50       	subi	r20, 0x01	; 1
    7404:	50 40       	sbci	r21, 0x00	; 0
    7406:	e0 f7       	brcc	.-8      	; 0x7400 <memset+0x4>
    7408:	08 95       	ret

0000740a <__mulsi3>:
    740a:	62 9f       	mul	r22, r18
    740c:	d0 01       	movw	r26, r0
    740e:	73 9f       	mul	r23, r19
    7410:	f0 01       	movw	r30, r0
    7412:	82 9f       	mul	r24, r18
    7414:	e0 0d       	add	r30, r0
    7416:	f1 1d       	adc	r31, r1
    7418:	64 9f       	mul	r22, r20
    741a:	e0 0d       	add	r30, r0
    741c:	f1 1d       	adc	r31, r1
    741e:	92 9f       	mul	r25, r18
    7420:	f0 0d       	add	r31, r0
    7422:	83 9f       	mul	r24, r19
    7424:	f0 0d       	add	r31, r0
    7426:	74 9f       	mul	r23, r20
    7428:	f0 0d       	add	r31, r0
    742a:	65 9f       	mul	r22, r21
    742c:	f0 0d       	add	r31, r0
    742e:	99 27       	eor	r25, r25
    7430:	72 9f       	mul	r23, r18
    7432:	b0 0d       	add	r27, r0
    7434:	e1 1d       	adc	r30, r1
    7436:	f9 1f       	adc	r31, r25
    7438:	63 9f       	mul	r22, r19
    743a:	b0 0d       	add	r27, r0
    743c:	e1 1d       	adc	r30, r1
    743e:	f9 1f       	adc	r31, r25
    7440:	bd 01       	movw	r22, r26
    7442:	cf 01       	movw	r24, r30
    7444:	11 24       	eor	r1, r1
    7446:	08 95       	ret

00007448 <__udivmodqi4>:
    7448:	99 1b       	sub	r25, r25
    744a:	79 e0       	ldi	r23, 0x09	; 9
    744c:	04 c0       	rjmp	.+8      	; 0x7456 <__udivmodqi4_ep>

0000744e <__udivmodqi4_loop>:
    744e:	99 1f       	adc	r25, r25
    7450:	96 17       	cp	r25, r22
    7452:	08 f0       	brcs	.+2      	; 0x7456 <__udivmodqi4_ep>
    7454:	96 1b       	sub	r25, r22

00007456 <__udivmodqi4_ep>:
    7456:	88 1f       	adc	r24, r24
    7458:	7a 95       	dec	r23
    745a:	c9 f7       	brne	.-14     	; 0x744e <__udivmodqi4_loop>
    745c:	80 95       	com	r24
    745e:	08 95       	ret

00007460 <__udivmodhi4>:
    7460:	aa 1b       	sub	r26, r26
    7462:	bb 1b       	sub	r27, r27
    7464:	51 e1       	ldi	r21, 0x11	; 17
    7466:	07 c0       	rjmp	.+14     	; 0x7476 <__udivmodhi4_ep>

00007468 <__udivmodhi4_loop>:
    7468:	aa 1f       	adc	r26, r26
    746a:	bb 1f       	adc	r27, r27
    746c:	a6 17       	cp	r26, r22
    746e:	b7 07       	cpc	r27, r23
    7470:	10 f0       	brcs	.+4      	; 0x7476 <__udivmodhi4_ep>
    7472:	a6 1b       	sub	r26, r22
    7474:	b7 0b       	sbc	r27, r23

00007476 <__udivmodhi4_ep>:
    7476:	88 1f       	adc	r24, r24
    7478:	99 1f       	adc	r25, r25
    747a:	5a 95       	dec	r21
    747c:	a9 f7       	brne	.-22     	; 0x7468 <__udivmodhi4_loop>
    747e:	80 95       	com	r24
    7480:	90 95       	com	r25
    7482:	bc 01       	movw	r22, r24
    7484:	cd 01       	movw	r24, r26
    7486:	08 95       	ret

00007488 <__divmodhi4>:
    7488:	97 fb       	bst	r25, 7
    748a:	09 2e       	mov	r0, r25
    748c:	07 26       	eor	r0, r23
    748e:	0a d0       	rcall	.+20     	; 0x74a4 <__divmodhi4_neg1>
    7490:	77 fd       	sbrc	r23, 7
    7492:	04 d0       	rcall	.+8      	; 0x749c <__divmodhi4_neg2>
    7494:	e5 df       	rcall	.-54     	; 0x7460 <__udivmodhi4>
    7496:	06 d0       	rcall	.+12     	; 0x74a4 <__divmodhi4_neg1>
    7498:	00 20       	and	r0, r0
    749a:	1a f4       	brpl	.+6      	; 0x74a2 <__divmodhi4_exit>

0000749c <__divmodhi4_neg2>:
    749c:	70 95       	com	r23
    749e:	61 95       	neg	r22
    74a0:	7f 4f       	sbci	r23, 0xFF	; 255

000074a2 <__divmodhi4_exit>:
    74a2:	08 95       	ret

000074a4 <__divmodhi4_neg1>:
    74a4:	f6 f7       	brtc	.-4      	; 0x74a2 <__divmodhi4_exit>
    74a6:	90 95       	com	r25
    74a8:	81 95       	neg	r24
    74aa:	9f 4f       	sbci	r25, 0xFF	; 255
    74ac:	08 95       	ret

000074ae <__udivmodsi4>:
    74ae:	a1 e2       	ldi	r26, 0x21	; 33
    74b0:	1a 2e       	mov	r1, r26
    74b2:	aa 1b       	sub	r26, r26
    74b4:	bb 1b       	sub	r27, r27
    74b6:	fd 01       	movw	r30, r26
    74b8:	0d c0       	rjmp	.+26     	; 0x74d4 <__udivmodsi4_ep>

000074ba <__udivmodsi4_loop>:
    74ba:	aa 1f       	adc	r26, r26
    74bc:	bb 1f       	adc	r27, r27
    74be:	ee 1f       	adc	r30, r30
    74c0:	ff 1f       	adc	r31, r31
    74c2:	a2 17       	cp	r26, r18
    74c4:	b3 07       	cpc	r27, r19
    74c6:	e4 07       	cpc	r30, r20
    74c8:	f5 07       	cpc	r31, r21
    74ca:	20 f0       	brcs	.+8      	; 0x74d4 <__udivmodsi4_ep>
    74cc:	a2 1b       	sub	r26, r18
    74ce:	b3 0b       	sbc	r27, r19
    74d0:	e4 0b       	sbc	r30, r20
    74d2:	f5 0b       	sbc	r31, r21

000074d4 <__udivmodsi4_ep>:
    74d4:	66 1f       	adc	r22, r22
    74d6:	77 1f       	adc	r23, r23
    74d8:	88 1f       	adc	r24, r24
    74da:	99 1f       	adc	r25, r25
    74dc:	1a 94       	dec	r1
    74de:	69 f7       	brne	.-38     	; 0x74ba <__udivmodsi4_loop>
    74e0:	60 95       	com	r22
    74e2:	70 95       	com	r23
    74e4:	80 95       	com	r24
    74e6:	90 95       	com	r25
    74e8:	9b 01       	movw	r18, r22
    74ea:	ac 01       	movw	r20, r24
    74ec:	bd 01       	movw	r22, r26
    74ee:	cf 01       	movw	r24, r30
    74f0:	08 95       	ret

000074f2 <__prologue_saves__>:
    74f2:	2f 92       	push	r2
    74f4:	3f 92       	push	r3
    74f6:	4f 92       	push	r4
    74f8:	5f 92       	push	r5
    74fa:	6f 92       	push	r6
    74fc:	7f 92       	push	r7
    74fe:	8f 92       	push	r8
    7500:	9f 92       	push	r9
    7502:	af 92       	push	r10
    7504:	bf 92       	push	r11
    7506:	cf 92       	push	r12
    7508:	df 92       	push	r13
    750a:	ef 92       	push	r14
    750c:	ff 92       	push	r15
    750e:	0f 93       	push	r16
    7510:	1f 93       	push	r17
    7512:	cf 93       	push	r28
    7514:	df 93       	push	r29
    7516:	cd b7       	in	r28, 0x3d	; 61
    7518:	de b7       	in	r29, 0x3e	; 62
    751a:	ca 1b       	sub	r28, r26
    751c:	db 0b       	sbc	r29, r27
    751e:	0f b6       	in	r0, 0x3f	; 63
    7520:	f8 94       	cli
    7522:	de bf       	out	0x3e, r29	; 62
    7524:	0f be       	out	0x3f, r0	; 63
    7526:	cd bf       	out	0x3d, r28	; 61
    7528:	09 94       	ijmp

0000752a <__epilogue_restores__>:
    752a:	2a 88       	ldd	r2, Y+18	; 0x12
    752c:	39 88       	ldd	r3, Y+17	; 0x11
    752e:	48 88       	ldd	r4, Y+16	; 0x10
    7530:	5f 84       	ldd	r5, Y+15	; 0x0f
    7532:	6e 84       	ldd	r6, Y+14	; 0x0e
    7534:	7d 84       	ldd	r7, Y+13	; 0x0d
    7536:	8c 84       	ldd	r8, Y+12	; 0x0c
    7538:	9b 84       	ldd	r9, Y+11	; 0x0b
    753a:	aa 84       	ldd	r10, Y+10	; 0x0a
    753c:	b9 84       	ldd	r11, Y+9	; 0x09
    753e:	c8 84       	ldd	r12, Y+8	; 0x08
    7540:	df 80       	ldd	r13, Y+7	; 0x07
    7542:	ee 80       	ldd	r14, Y+6	; 0x06
    7544:	fd 80       	ldd	r15, Y+5	; 0x05
    7546:	0c 81       	ldd	r16, Y+4	; 0x04
    7548:	1b 81       	ldd	r17, Y+3	; 0x03
    754a:	aa 81       	ldd	r26, Y+2	; 0x02
    754c:	b9 81       	ldd	r27, Y+1	; 0x01
    754e:	ce 0f       	add	r28, r30
    7550:	d1 1d       	adc	r29, r1
    7552:	0f b6       	in	r0, 0x3f	; 63
    7554:	f8 94       	cli
    7556:	de bf       	out	0x3e, r29	; 62
    7558:	0f be       	out	0x3f, r0	; 63
    755a:	cd bf       	out	0x3d, r28	; 61
    755c:	ed 01       	movw	r28, r26
    755e:	08 95       	ret

00007560 <__eeprom_read_byte_1F2021>:
    7560:	f9 99       	sbic	0x1f, 1	; 31
    7562:	fe cf       	rjmp	.-4      	; 0x7560 <__eeprom_read_byte_1F2021>
    7564:	b2 bd       	out	0x22, r27	; 34
    7566:	a1 bd       	out	0x21, r26	; 33
    7568:	f8 9a       	sbi	0x1f, 0	; 31
    756a:	11 96       	adiw	r26, 0x01	; 1
    756c:	00 b4       	in	r0, 0x20	; 32
    756e:	08 95       	ret

00007570 <__eeprom_write_byte_1F2021>:
    7570:	f9 99       	sbic	0x1f, 1	; 31
    7572:	fe cf       	rjmp	.-4      	; 0x7570 <__eeprom_write_byte_1F2021>
    7574:	b2 bd       	out	0x22, r27	; 34
    7576:	a1 bd       	out	0x21, r26	; 33
    7578:	00 bc       	out	0x20, r0	; 32
    757a:	11 96       	adiw	r26, 0x01	; 1
    757c:	0f b6       	in	r0, 0x3f	; 63
    757e:	f8 94       	cli
    7580:	fa 9a       	sbi	0x1f, 2	; 31
    7582:	f9 9a       	sbi	0x1f, 1	; 31
    7584:	0f be       	out	0x3f, r0	; 63
    7586:	08 95       	ret

00007588 <_exit>:
    7588:	ff cf       	rjmp	.-2      	; 0x7588 <_exit>
