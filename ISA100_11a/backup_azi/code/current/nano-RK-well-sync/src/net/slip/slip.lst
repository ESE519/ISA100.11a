   1               		.file	"slip.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 130               	.global	slip_started
 132               	slip_started:
 133               		.stabd	46,0,0
   1:../../../src/net/slip/slip.c **** /******************************************************************************
   2:../../../src/net/slip/slip.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/net/slip/slip.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/net/slip/slip.c **** *  All rights reserved.
   5:../../../src/net/slip/slip.c **** *
   6:../../../src/net/slip/slip.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/net/slip/slip.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/net/slip/slip.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/net/slip/slip.c **** *
  10:../../../src/net/slip/slip.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/net/slip/slip.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/net/slip/slip.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/net/slip/slip.c **** *
  14:../../../src/net/slip/slip.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/net/slip/slip.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/net/slip/slip.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/net/slip/slip.c **** *  GNU General Public License for more details.
  18:../../../src/net/slip/slip.c **** *
  19:../../../src/net/slip/slip.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/net/slip/slip.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/net/slip/slip.c **** *
  22:../../../src/net/slip/slip.c **** *  Contributing Authors (specific to this file):
  23:../../../src/net/slip/slip.c **** *  Anthony Rowe
  24:../../../src/net/slip/slip.c **** *******************************************************************************/
  25:../../../src/net/slip/slip.c **** 
  26:../../../src/net/slip/slip.c **** 
  27:../../../src/net/slip/slip.c **** #include "slip.h"
  28:../../../src/net/slip/slip.c **** #include <nrk_events.h>
  29:../../../src/net/slip/slip.c **** #include <nrk_error.h>
  30:../../../src/net/slip/slip.c **** #include <nrk_cfg.h>
  31:../../../src/net/slip/slip.c **** 
  32:../../../src/net/slip/slip.c **** 
  33:../../../src/net/slip/slip.c **** FILE *g_dv_in, *g_dv_out;
  34:../../../src/net/slip/slip.c **** bool g_echo;
  35:../../../src/net/slip/slip.c **** uint8_t g_delay;
  36:../../../src/net/slip/slip.c **** int8_t _slip_started = NRK_ERROR;
  37:../../../src/net/slip/slip.c **** nrk_sem_t *slip_tx_sem;
  38:../../../src/net/slip/slip.c **** 
  39:../../../src/net/slip/slip.c **** int8_t slip_init (FILE * device_in, FILE * device_out, bool echo,
  40:../../../src/net/slip/slip.c ****                   uint8_t delay)
  41:../../../src/net/slip/slip.c **** {
  42:../../../src/net/slip/slip.c ****   g_dv_in = device_in;
  43:../../../src/net/slip/slip.c ****   g_dv_out = device_out;
  44:../../../src/net/slip/slip.c ****   g_echo = echo;
  45:../../../src/net/slip/slip.c ****   g_delay = delay;
  46:../../../src/net/slip/slip.c **** 
  47:../../../src/net/slip/slip.c **** 
  48:../../../src/net/slip/slip.c **** #ifndef UART_PCP_CEILING
  49:../../../src/net/slip/slip.c **** #define UART_PCP_CEILING       255
  50:../../../src/net/slip/slip.c **** #endif
  51:../../../src/net/slip/slip.c ****   slip_tx_sem = nrk_sem_create (1, UART_PCP_CEILING);
  52:../../../src/net/slip/slip.c ****   if (slip_tx_sem == NRK_ERROR)
  53:../../../src/net/slip/slip.c ****     nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());
  54:../../../src/net/slip/slip.c **** 
  55:../../../src/net/slip/slip.c ****   _slip_started = NRK_OK;
  56:../../../src/net/slip/slip.c ****   return NRK_OK;
  57:../../../src/net/slip/slip.c **** }
  58:../../../src/net/slip/slip.c **** 
  59:../../../src/net/slip/slip.c **** void put_byte (uint8_t c)
  60:../../../src/net/slip/slip.c **** {
  61:../../../src/net/slip/slip.c ****   if (g_delay > 0)
  62:../../../src/net/slip/slip.c ****     nrk_spin_wait_us (g_delay * 1000);
  63:../../../src/net/slip/slip.c ****   fputc (c, g_dv_out);
  64:../../../src/net/slip/slip.c ****   if (g_echo) {
  65:../../../src/net/slip/slip.c ****     // Not IMPLEMENTED
  66:../../../src/net/slip/slip.c ****   }
  67:../../../src/net/slip/slip.c **** }
  68:../../../src/net/slip/slip.c **** 
  69:../../../src/net/slip/slip.c **** uint8_t get_byte (void)
  70:../../../src/net/slip/slip.c **** {
  71:../../../src/net/slip/slip.c ****   return fgetc (g_dv_in);
  72:../../../src/net/slip/slip.c **** }
  73:../../../src/net/slip/slip.c **** 
  74:../../../src/net/slip/slip.c **** int8_t slip_tx (uint8_t * buf, uint8_t size)
  75:../../../src/net/slip/slip.c **** {
  76:../../../src/net/slip/slip.c ****   uint8_t i;
  77:../../../src/net/slip/slip.c ****   int8_t v;
  78:../../../src/net/slip/slip.c ****   uint8_t checksum;
  79:../../../src/net/slip/slip.c **** 
  80:../../../src/net/slip/slip.c **** // Make sure size is less than 128 so it doesn't act as a control
  81:../../../src/net/slip/slip.c **** // message
  82:../../../src/net/slip/slip.c ****   if (size > 128) {
  83:../../../src/net/slip/slip.c ****     _nrk_errno_set (3);
  84:../../../src/net/slip/slip.c ****     return NRK_ERROR;
  85:../../../src/net/slip/slip.c ****   }
  86:../../../src/net/slip/slip.c **** 
  87:../../../src/net/slip/slip.c ****   v = nrk_sem_pend (slip_tx_sem);
  88:../../../src/net/slip/slip.c ****   if (v == NRK_ERROR) {
  89:../../../src/net/slip/slip.c ****     nrk_kprintf (PSTR ("SLIP TX ERROR:  Access to semaphore failed\r\n"));
  90:../../../src/net/slip/slip.c ****     _nrk_errno_set (1);
  91:../../../src/net/slip/slip.c ****     return NRK_ERROR;
  92:../../../src/net/slip/slip.c ****   }
  93:../../../src/net/slip/slip.c **** 
  94:../../../src/net/slip/slip.c **** // Send the start byte
  95:../../../src/net/slip/slip.c ****   put_byte (START);
  96:../../../src/net/slip/slip.c ****   put_byte (size);
  97:../../../src/net/slip/slip.c **** 
  98:../../../src/net/slip/slip.c ****   checksum = 0;
  99:../../../src/net/slip/slip.c **** 
 100:../../../src/net/slip/slip.c **** // Send payload and stuff bytes as needed
 101:../../../src/net/slip/slip.c ****   for (i = 0; i < size; i++) {
 102:../../../src/net/slip/slip.c ****     if (buf[i] == END || buf[i] == ESC)
 103:../../../src/net/slip/slip.c ****       put_byte (ESC);
 104:../../../src/net/slip/slip.c ****     put_byte (buf[i]);
 105:../../../src/net/slip/slip.c ****     checksum += buf[i];
 106:../../../src/net/slip/slip.c ****   }
 107:../../../src/net/slip/slip.c **** 
 108:../../../src/net/slip/slip.c **** // Make sure checksum is less than 128 so it doesn't act as a control
 109:../../../src/net/slip/slip.c **** // message
 110:../../../src/net/slip/slip.c ****   checksum &= 0x7F;
 111:../../../src/net/slip/slip.c ****   // Send the end byte
 112:../../../src/net/slip/slip.c ****   put_byte (checksum);
 113:../../../src/net/slip/slip.c ****   put_byte (END);
 114:../../../src/net/slip/slip.c ****   v = nrk_sem_post (slip_tx_sem);
 115:../../../src/net/slip/slip.c ****   if (v == NRK_ERROR) {
 116:../../../src/net/slip/slip.c ****     nrk_kprintf (PSTR ("SLIP TX ERROR:  Release of semaphore failed\r\n"));
 117:../../../src/net/slip/slip.c ****     _nrk_errno_set (2);
 118:../../../src/net/slip/slip.c ****     return NRK_ERROR;
 119:../../../src/net/slip/slip.c ****   }
 120:../../../src/net/slip/slip.c ****   return NRK_OK;
 121:../../../src/net/slip/slip.c **** }
 122:../../../src/net/slip/slip.c **** 
 123:../../../src/net/slip/slip.c **** int8_t slip_started ()
 124:../../../src/net/slip/slip.c **** {
 135               	.LM0:
 136               	.LFBB1:
 137               	/* prologue: frame size=0 */
 138               	/* prologue end (size=0) */
 139 0000 8091 0000 		lds r24,_slip_started
 125:../../../src/net/slip/slip.c ****   return _slip_started;
 126:../../../src/net/slip/slip.c **** }
 141               	.LM1:
 142 0004 9927      		clr r25
 143 0006 87FD      		sbrc r24,7
 144 0008 9095      		com r25
 145               	/* epilogue: frame size=0 */
 146 000a 0895      		ret
 147               	/* epilogue end (size=1) */
 148               	/* function slip_started size 6 (5) */
 150               	.Lscope1:
 152               		.stabd	78,0,0
 154               	.global	get_byte
 156               	get_byte:
 157               		.stabd	46,0,0
 159               	.LM2:
 160               	.LFBB2:
 161               	/* prologue: frame size=0 */
 162               	/* prologue end (size=0) */
 164               	.LM3:
 165 000c 8091 0000 		lds r24,g_dv_in
 166 0010 9091 0000 		lds r25,(g_dv_in)+1
 167 0014 0E94 0000 		call fgetc
 169               	.LM4:
 170 0018 9927      		clr r25
 171               	/* epilogue: frame size=0 */
 172 001a 0895      		ret
 173               	/* epilogue end (size=1) */
 174               	/* function get_byte size 8 (7) */
 176               	.Lscope2:
 178               		.stabd	78,0,0
 182               	.global	slip_rx
 184               	slip_rx:
 185               		.stabd	46,0,0
 127:../../../src/net/slip/slip.c **** 
 128:../../../src/net/slip/slip.c **** int8_t slip_rx (uint8_t * buf, uint8_t max_len)
 129:../../../src/net/slip/slip.c **** {
 187               	.LM5:
 188               	.LFBB3:
 189               	/* prologue: frame size=0 */
 190 001c 8F92      		push r8
 191 001e 9F92      		push r9
 192 0020 AF92      		push r10
 193 0022 BF92      		push r11
 194 0024 CF92      		push r12
 195 0026 DF92      		push r13
 196 0028 EF92      		push r14
 197 002a FF92      		push r15
 198 002c 0F93      		push r16
 199 002e 1F93      		push r17
 200 0030 CF93      		push r28
 201 0032 DF93      		push r29
 202               	/* prologue end (size=12) */
 203 0034 EC01      		movw r28,r24
 204 0036 862E      		mov r8,r22
 130:../../../src/net/slip/slip.c ****   uint8_t c;
 131:../../../src/net/slip/slip.c ****   uint8_t index, last_c;
 132:../../../src/net/slip/slip.c ****   uint8_t received, checksum, size;
 133:../../../src/net/slip/slip.c ****   int8_t v;
 134:../../../src/net/slip/slip.c ****   nrk_sig_t my_uart_rx_signal;
 135:../../../src/net/slip/slip.c ****   nrk_sig_mask_t sm;
 136:../../../src/net/slip/slip.c **** 
 137:../../../src/net/slip/slip.c **** my_uart_rx_signal=nrk_uart_rx_signal_get();
 206               	.LM6:
 207 0038 0E94 0000 		call nrk_uart_rx_signal_get
 208 003c D82E      		mov r13,r24
 138:../../../src/net/slip/slip.c **** // Register your task to wakeup on RX Data
 139:../../../src/net/slip/slip.c ****   if (my_uart_rx_signal == NRK_ERROR)
 210               	.LM7:
 211 003e 8FEF      		ldi r24,lo8(-1)
 212 0040 D816      		cp r13,r24
 213 0042 01F4      		brne .L6
 140:../../../src/net/slip/slip.c ****     nrk_kprintf (PSTR ("SLIP RX error: Get Signal\r\n"));
 215               	.LM8:
 216 0044 80E0      		ldi r24,lo8(__c.2338)
 217 0046 90E0      		ldi r25,hi8(__c.2338)
 218 0048 0E94 0000 		call nrk_kprintf
 219               	.L6:
 141:../../../src/net/slip/slip.c ****   
 142:../../../src/net/slip/slip.c ****    v=nrk_signal_register (my_uart_rx_signal);
 221               	.LM9:
 222 004c 8D2D      		mov r24,r13
 223 004e 0E94 0000 		call nrk_signal_register
 143:../../../src/net/slip/slip.c ****    if(v==NRK_ERROR) nrk_kprintf( PSTR( "SLIP RX error: nrk_signal_register\r\n" ));
 225               	.LM10:
 226 0052 8F3F      		cpi r24,lo8(-1)
 227 0054 01F4      		brne .L31
 228 0056 80E0      		ldi r24,lo8(__c.2340)
 229 0058 90E0      		ldi r25,hi8(__c.2340)
 230 005a 0E94 0000 		call nrk_kprintf
 231 005e 00C0      		rjmp .L31
 232               	.L10:
 144:../../../src/net/slip/slip.c **** 
 145:../../../src/net/slip/slip.c ****   received = 0;
 146:../../../src/net/slip/slip.c **** 
 147:../../../src/net/slip/slip.c **** // Wait until you receive the packet start (START) command
 148:../../../src/net/slip/slip.c ****   while (1) {
 149:../../../src/net/slip/slip.c ****     // Wait for UART signal
 150:../../../src/net/slip/slip.c ****     while (nrk_uart_data_ready (NRK_DEFAULT_UART) != 0) {
 151:../../../src/net/slip/slip.c ****       // Read Character
 152:../../../src/net/slip/slip.c ****       c = getchar ();
 234               	.LM11:
 235 0060 8091 0000 		lds r24,__iob
 236 0064 9091 0000 		lds r25,(__iob)+1
 237 0068 0E94 0000 		call fgetc
 153:../../../src/net/slip/slip.c ****       if (c == START)
 239               	.LM12:
 240 006c 813C      		cpi r24,lo8(-63)
 241 006e 01F0      		breq .L11
 242 0070 00C0      		rjmp .L37
 243               	.L31:
 154:../../../src/net/slip/slip.c ****         break;
 155:../../../src/net/slip/slip.c ****     }
 156:../../../src/net/slip/slip.c ****     sm = nrk_event_wait (SIG (my_uart_rx_signal));
 245               	.LM13:
 246 0072 81E0      		ldi r24,lo8(1)
 247 0074 E82E      		mov r14,r24
 248 0076 F12C      		mov r15,__zero_reg__
 249 0078 012D      		mov r16,__zero_reg__
 250 007a 112D      		mov r17,__zero_reg__
 251 007c 00C0      		rjmp 2f
 252 007e EE0C      	1:	lsl r14
 253 0080 FF1C      		rol r15
 254 0082 001F      		rol r16
 255 0084 111F      		rol r17
 256 0086 DA94      	2:	dec r13
 257 0088 02F4      		brpl 1b
 258               	.L37:
 260               	.LM14:
 261 008a 81E0      		ldi r24,lo8(1)
 262 008c 0E94 0000 		call nrk_uart_data_ready
 263 0090 8823      		tst r24
 264 0092 01F4      		brne .L10
 265               	.L11:
 267               	.LM15:
 268 0094 5701      		movw r10,r14
 269 0096 6801      		movw r12,r16
 270 0098 C801      		movw r24,r16
 271 009a B701      		movw r22,r14
 272 009c 0E94 0000 		call nrk_event_wait
 157:../../../src/net/slip/slip.c ****     c = getchar ();
 274               	.LM16:
 275 00a0 8091 0000 		lds r24,__iob
 276 00a4 9091 0000 		lds r25,(__iob)+1
 277 00a8 0E94 0000 		call fgetc
 278 00ac 982E      		mov r9,r24
 158:../../../src/net/slip/slip.c ****     if (c == START)
 280               	.LM17:
 281 00ae 81EC      		ldi r24,lo8(-63)
 282 00b0 9816      		cp r9,r24
 283 00b2 01F4      		brne .L37
 159:../../../src/net/slip/slip.c ****       break;
 160:../../../src/net/slip/slip.c ****   }
 161:../../../src/net/slip/slip.c **** 
 162:../../../src/net/slip/slip.c ****   size = get_byte ();
 285               	.LM18:
 286 00b4 0E94 0000 		call get_byte
 287 00b8 F82E      		mov r15,r24
 288 00ba 10E0      		ldi r17,lo8(0)
 289 00bc 00E0      		ldi r16,lo8(0)
 290 00be 00C0      		rjmp .L38
 291               	.L14:
 163:../../../src/net/slip/slip.c ****   checksum = 0;
 164:../../../src/net/slip/slip.c ****   while (1) {
 165:../../../src/net/slip/slip.c ****     while (nrk_uart_data_ready (NRK_DEFAULT_UART) != 0) {
 166:../../../src/net/slip/slip.c ****       last_c = c;
 167:../../../src/net/slip/slip.c ****       c = getchar ();
 293               	.LM19:
 294 00c0 8091 0000 		lds r24,__iob
 295 00c4 9091 0000 		lds r25,(__iob)+1
 296 00c8 0E94 0000 		call fgetc
 168:../../../src/net/slip/slip.c **** 
 169:../../../src/net/slip/slip.c ****       // handle bytestuffing if necessary
 170:../../../src/net/slip/slip.c ****       switch (c) {
 298               	.LM20:
 299 00cc 803C      		cpi r24,lo8(-64)
 300 00ce 01F0      		breq .L16
 301 00d0 8B3D      		cpi r24,lo8(-37)
 302 00d2 01F0      		breq .L17
 303 00d4 00C0      		rjmp .L36
 304               	.L16:
 171:../../../src/net/slip/slip.c **** 
 172:../../../src/net/slip/slip.c ****         // if it's an END character then we're done with
 173:../../../src/net/slip/slip.c ****         // the packet
 174:../../../src/net/slip/slip.c ****       case END:
 175:../../../src/net/slip/slip.c ****         // a minor optimization: if there is no
 176:../../../src/net/slip/slip.c ****         // data in the packet, ignore it. This is
 177:../../../src/net/slip/slip.c ****         // meant to avoid bothering IP with all
 178:../../../src/net/slip/slip.c ****         // the empty packets generated by the
 179:../../../src/net/slip/slip.c ****         // duplicate END characters which are in
 180:../../../src/net/slip/slip.c ****         // turn sent to try to detect line noise.
 181:../../../src/net/slip/slip.c ****         if (received) {
 306               	.LM21:
 307 00d6 1123      		tst r17
 308 00d8 01F0      		breq .L19
 182:../../../src/net/slip/slip.c **** 	
 183:../../../src/net/slip/slip.c ****           checksum &= 0x7f;
 184:../../../src/net/slip/slip.c ****           if (last_c == checksum)
 310               	.LM22:
 311 00da 0F77      		andi r16,lo8(127)
 312 00dc 9016      		cp r9,r16
 313 00de 01F4      		brne .L19
 185:../../../src/net/slip/slip.c ****             return received;
 315               	.LM23:
 316 00e0 812F      		mov r24,r17
 317 00e2 9927      		clr r25
 318 00e4 87FD      		sbrc r24,7
 319 00e6 9095      		com r25
 320 00e8 00C0      		rjmp .L22
 321               	.L17:
 186:../../../src/net/slip/slip.c ****         }
 187:../../../src/net/slip/slip.c ****         return NRK_ERROR;
 188:../../../src/net/slip/slip.c ****         break;
 189:../../../src/net/slip/slip.c **** 
 190:../../../src/net/slip/slip.c ****         // if it's the same code as an ESC character, wait
 191:../../../src/net/slip/slip.c ****         // and get another character and then figure out
 192:../../../src/net/slip/slip.c ****         // what to store in the packet based on that.
 193:../../../src/net/slip/slip.c ****       case ESC:
 194:../../../src/net/slip/slip.c ****         // FIXME: Need to sleep here
 195:../../../src/net/slip/slip.c ****         last_c = c;
 196:../../../src/net/slip/slip.c ****     	if( nrk_uart_data_ready (NRK_DEFAULT_UART)==0 )	
 323               	.LM24:
 324 00ea 81E0      		ldi r24,lo8(1)
 325 00ec 0E94 0000 		call nrk_uart_data_ready
 326 00f0 8823      		tst r24
 327 00f2 01F4      		brne .L23
 197:../../../src/net/slip/slip.c **** 		sm = nrk_event_wait (SIG (my_uart_rx_signal));
 329               	.LM25:
 330 00f4 C601      		movw r24,r12
 331 00f6 B501      		movw r22,r10
 332 00f8 0E94 0000 		call nrk_event_wait
 333               	.L23:
 198:../../../src/net/slip/slip.c ****         c = get_byte ();
 335               	.LM26:
 336 00fc 0E94 0000 		call get_byte
 337               	.L36:
 338 0100 982E      		mov r9,r24
 199:../../../src/net/slip/slip.c ****         // if "c" is not one of these two, then we
 200:../../../src/net/slip/slip.c ****         // have a protocol violation.  The best bet
 201:../../../src/net/slip/slip.c ****         // seems to be to leave the byte alone and
 202:../../../src/net/slip/slip.c ****         // just stuff it into the packet
 203:../../../src/net/slip/slip.c ****         switch (c) {
 204:../../../src/net/slip/slip.c ****         case END:
 205:../../../src/net/slip/slip.c ****           c = END;
 206:../../../src/net/slip/slip.c ****           break;
 207:../../../src/net/slip/slip.c ****         case ESC:
 208:../../../src/net/slip/slip.c ****           c = ESC;
 209:../../../src/net/slip/slip.c ****           break;
 210:../../../src/net/slip/slip.c ****         }
 211:../../../src/net/slip/slip.c **** 
 212:../../../src/net/slip/slip.c ****         // here we fall into the default handler and let
 213:../../../src/net/slip/slip.c ****         // it store the character for us
 214:../../../src/net/slip/slip.c ****       default:
 215:../../../src/net/slip/slip.c ****         if (received < max_len && received < size) {
 340               	.LM27:
 341 0102 1815      		cp r17,r8
 342 0104 00F4      		brsh .L38
 343 0106 1F15      		cp r17,r15
 344 0108 00F4      		brsh .L38
 216:../../../src/net/slip/slip.c ****           buf[received++] = c;
 346               	.LM28:
 347 010a FE01      		movw r30,r28
 348 010c E10F      		add r30,r17
 349 010e F11D      		adc r31,__zero_reg__
 350 0110 8083      		st Z,r24
 351 0112 1F5F      		subi r17,lo8(-(1))
 217:../../../src/net/slip/slip.c ****           checksum += c;
 353               	.LM29:
 354 0114 080F      		add r16,r24
 355               	.L38:
 357               	.LM30:
 358 0116 81E0      		ldi r24,lo8(1)
 359 0118 0E94 0000 		call nrk_uart_data_ready
 360 011c 8823      		tst r24
 361 011e 01F4      		brne .L14
 218:../../../src/net/slip/slip.c ****         }
 219:../../../src/net/slip/slip.c ****       }
 220:../../../src/net/slip/slip.c ****     }
 221:../../../src/net/slip/slip.c ****     sm = nrk_event_wait (SIG (my_uart_rx_signal));
 363               	.LM31:
 364 0120 C601      		movw r24,r12
 365 0122 B501      		movw r22,r10
 366 0124 0E94 0000 		call nrk_event_wait
 367 0128 00C0      		rjmp .L38
 368               	.L19:
 222:../../../src/net/slip/slip.c ****   }
 370               	.LM32:
 371 012a 8FEF      		ldi r24,lo8(-1)
 372 012c 9FEF      		ldi r25,hi8(-1)
 373               	.L22:
 374               	/* epilogue: frame size=0 */
 375 012e DF91      		pop r29
 376 0130 CF91      		pop r28
 377 0132 1F91      		pop r17
 378 0134 0F91      		pop r16
 379 0136 FF90      		pop r15
 380 0138 EF90      		pop r14
 381 013a DF90      		pop r13
 382 013c CF90      		pop r12
 383 013e BF90      		pop r11
 384 0140 AF90      		pop r10
 385 0142 9F90      		pop r9
 386 0144 8F90      		pop r8
 387 0146 0895      		ret
 388               	/* epilogue end (size=13) */
 389               	/* function slip_rx size 151 (126) */
 398               	.Lscope3:
 400               		.stabd	78,0,0
 403               	.global	put_byte
 405               	put_byte:
 406               		.stabd	46,0,0
 408               	.LM33:
 409               	.LFBB4:
 410               	/* prologue: frame size=0 */
 411 0148 1F93      		push r17
 412               	/* prologue end (size=1) */
 413 014a 182F      		mov r17,r24
 415               	.LM34:
 416 014c 2091 0000 		lds r18,g_delay
 417 0150 2223      		tst r18
 418 0152 01F0      		breq .L40
 420               	.LM35:
 421 0154 3327      		clr r19
 422 0156 88EE      		ldi r24,lo8(1000)
 423 0158 93E0      		ldi r25,hi8(1000)
 424 015a AC01      		movw r20,r24
 425 015c 249F      		mul r18,r20
 426 015e C001      		movw r24,r0
 427 0160 259F      		mul r18,r21
 428 0162 900D      		add r25,r0
 429 0164 349F      		mul r19,r20
 430 0166 900D      		add r25,r0
 431 0168 1124      		clr r1
 432 016a 0E94 0000 		call nrk_spin_wait_us
 433               	.L40:
 435               	.LM36:
 436 016e 6091 0000 		lds r22,g_dv_out
 437 0172 7091 0000 		lds r23,(g_dv_out)+1
 438 0176 812F      		mov r24,r17
 439 0178 9927      		clr r25
 440 017a 0E94 0000 		call fputc
 441               	/* epilogue: frame size=0 */
 442 017e 1F91      		pop r17
 443 0180 0895      		ret
 444               	/* epilogue end (size=2) */
 445               	/* function put_byte size 29 (26) */
 447               	.Lscope4:
 449               		.stabd	78,0,0
 453               	.global	slip_tx
 455               	slip_tx:
 456               		.stabd	46,0,0
 458               	.LM37:
 459               	.LFBB5:
 460               	/* prologue: frame size=0 */
 461 0182 FF92      		push r15
 462 0184 0F93      		push r16
 463 0186 1F93      		push r17
 464 0188 CF93      		push r28
 465 018a DF93      		push r29
 466               	/* prologue end (size=5) */
 467 018c EC01      		movw r28,r24
 468 018e 162F      		mov r17,r22
 470               	.LM38:
 471 0190 6138      		cpi r22,lo8(-127)
 472 0192 00F0      		brlo .L44
 474               	.LM39:
 475 0194 83E0      		ldi r24,lo8(3)
 476 0196 00C0      		rjmp .L58
 477               	.L44:
 479               	.LM40:
 480 0198 8091 0000 		lds r24,slip_tx_sem
 481 019c 9091 0000 		lds r25,(slip_tx_sem)+1
 482 01a0 0E94 0000 		call nrk_sem_pend
 484               	.LM41:
 485 01a4 8F3F      		cpi r24,lo8(-1)
 486 01a6 01F4      		brne .L47
 488               	.LM42:
 489 01a8 80E0      		ldi r24,lo8(__c.2304)
 490 01aa 90E0      		ldi r25,hi8(__c.2304)
 491 01ac 0E94 0000 		call nrk_kprintf
 493               	.LM43:
 494 01b0 81E0      		ldi r24,lo8(1)
 495 01b2 00C0      		rjmp .L58
 496               	.L47:
 498               	.LM44:
 499 01b4 81EC      		ldi r24,lo8(-63)
 500 01b6 0E94 0000 		call put_byte
 502               	.LM45:
 503 01ba 812F      		mov r24,r17
 504 01bc 0E94 0000 		call put_byte
 505 01c0 FF24      		clr r15
 506 01c2 00E0      		ldi r16,lo8(0)
 507 01c4 00C0      		rjmp .L49
 508               	.L50:
 510               	.LM46:
 511 01c6 8881      		ld r24,Y
 512 01c8 803C      		cpi r24,lo8(-64)
 513 01ca 01F0      		breq .L51
 514 01cc 8B3D      		cpi r24,lo8(-37)
 515 01ce 01F4      		brne .L53
 516               	.L51:
 518               	.LM47:
 519 01d0 8BED      		ldi r24,lo8(-37)
 520 01d2 0E94 0000 		call put_byte
 521               	.L53:
 523               	.LM48:
 524 01d6 8881      		ld r24,Y
 525 01d8 0E94 0000 		call put_byte
 527               	.LM49:
 528 01dc 8991      		ld r24,Y+
 529 01de 080F      		add r16,r24
 531               	.LM50:
 532 01e0 F394      		inc r15
 533               	.L49:
 534 01e2 F116      		cp r15,r17
 535 01e4 01F4      		brne .L50
 537               	.LM51:
 538 01e6 802F      		mov r24,r16
 539 01e8 8F77      		andi r24,lo8(127)
 540 01ea 0E94 0000 		call put_byte
 542               	.LM52:
 543 01ee 80EC      		ldi r24,lo8(-64)
 544 01f0 0E94 0000 		call put_byte
 546               	.LM53:
 547 01f4 8091 0000 		lds r24,slip_tx_sem
 548 01f8 9091 0000 		lds r25,(slip_tx_sem)+1
 549 01fc 0E94 0000 		call nrk_sem_post
 551               	.LM54:
 552 0200 8F3F      		cpi r24,lo8(-1)
 553 0202 01F0      		breq .L55
 554 0204 81E0      		ldi r24,lo8(1)
 555 0206 90E0      		ldi r25,hi8(1)
 556 0208 00C0      		rjmp .L46
 557               	.L55:
 559               	.LM55:
 560 020a 80E0      		ldi r24,lo8(__c.2309)
 561 020c 90E0      		ldi r25,hi8(__c.2309)
 562 020e 0E94 0000 		call nrk_kprintf
 564               	.LM56:
 565 0212 82E0      		ldi r24,lo8(2)
 566               	.L58:
 567 0214 0E94 0000 		call _nrk_errno_set
 568 0218 8FEF      		ldi r24,lo8(-1)
 569 021a 9FEF      		ldi r25,hi8(-1)
 570               	.L46:
 571               	/* epilogue: frame size=0 */
 572 021c DF91      		pop r29
 573 021e CF91      		pop r28
 574 0220 1F91      		pop r17
 575 0222 0F91      		pop r16
 576 0224 FF90      		pop r15
 577 0226 0895      		ret
 578               	/* epilogue end (size=6) */
 579               	/* function slip_tx size 83 (72) */
 585               	.Lscope5:
 587               		.stabd	78,0,0
 593               	.global	slip_init
 595               	slip_init:
 596               		.stabd	46,0,0
 598               	.LM57:
 599               	.LFBB6:
 600               	/* prologue: frame size=0 */
 601               	/* prologue end (size=0) */
 603               	.LM58:
 604 0228 9093 0000 		sts (g_dv_in)+1,r25
 605 022c 8093 0000 		sts g_dv_in,r24
 607               	.LM59:
 608 0230 7093 0000 		sts (g_dv_out)+1,r23
 609 0234 6093 0000 		sts g_dv_out,r22
 611               	.LM60:
 612 0238 4093 0000 		sts g_echo,r20
 614               	.LM61:
 615 023c 2093 0000 		sts g_delay,r18
 617               	.LM62:
 618 0240 6FEF      		ldi r22,lo8(-1)
 619 0242 81E0      		ldi r24,lo8(1)
 620 0244 0E94 0000 		call nrk_sem_create
 621 0248 9093 0000 		sts (slip_tx_sem)+1,r25
 622 024c 8093 0000 		sts slip_tx_sem,r24
 624               	.LM63:
 625 0250 8F5F      		subi r24,lo8(-1)
 626 0252 9F4F      		sbci r25,hi8(-1)
 627 0254 01F4      		brne .L60
 629               	.LM64:
 630 0256 0E94 0000 		call nrk_get_pid
 631 025a 682F      		mov r22,r24
 632 025c 8FE0      		ldi r24,lo8(15)
 633 025e 0E94 0000 		call nrk_kernel_error_add
 634               	.L60:
 636               	.LM65:
 637 0262 81E0      		ldi r24,lo8(1)
 638 0264 8093 0000 		sts _slip_started,r24
 640               	.LM66:
 641 0268 81E0      		ldi r24,lo8(1)
 642 026a 90E0      		ldi r25,hi8(1)
 643               	/* epilogue: frame size=0 */
 644 026c 0895      		ret
 645               	/* epilogue end (size=1) */
 646               	/* function slip_init size 36 (35) */
 648               	.Lscope6:
 650               		.stabd	78,0,0
 651               	.global	_slip_started
 652               		.data
 655               	_slip_started:
 656 0000 FF        		.byte	-1
 657               		.section	.progmem.data,"a",@progbits
 660               	__c.2340:
 661 0000 534C 4950 		.string	"SLIP RX error: nrk_signal_register\r\n"
 661      2052 5820 
 661      6572 726F 
 661      723A 206E 
 661      726B 5F73 
 664               	__c.2338:
 665 0025 534C 4950 		.string	"SLIP RX error: Get Signal\r\n"
 665      2052 5820 
 665      6572 726F 
 665      723A 2047 
 665      6574 2053 
 668               	__c.2309:
 669 0041 534C 4950 		.string	"SLIP TX ERROR:  Release of semaphore failed\r\n"
 669      2054 5820 
 669      4552 524F 
 669      523A 2020 
 669      5265 6C65 
 672               	__c.2304:
 673 006f 534C 4950 		.string	"SLIP TX ERROR:  Access to semaphore failed\r\n"
 673      2054 5820 
 673      4552 524F 
 673      523A 2020 
 673      4163 6365 
 674               		.comm _nrk_signal_list,4,1
 675               		.comm nrk_idle_task_stk,128,1
 676               		.comm nrk_kernel_stk_ptr,2,1
 677               		.comm error_task,1,1
 678               		.comm error_num,1,1
 679               		.comm g_dv_in,2,1
 680               		.comm g_dv_out,2,1
 681               		.comm g_echo,1,1
 682               		.comm g_delay,1,1
 683               		.comm slip_tx_sem,2,1
 699               		.text
 701               	.Letext0:
 702               	/* File "../../../src/net/slip/slip.c": code  313 = 0x0139 ( 271), prologues  18, epilogues  24 */
DEFINED SYMBOLS
                            *ABS*:00000000 slip.c
     /tmp/cc54LQ80.s:2      *ABS*:0000003f __SREG__
     /tmp/cc54LQ80.s:3      *ABS*:0000003e __SP_H__
     /tmp/cc54LQ80.s:4      *ABS*:0000003d __SP_L__
     /tmp/cc54LQ80.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cc54LQ80.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cc54LQ80.s:132    .text:00000000 slip_started
     /tmp/cc54LQ80.s:655    .data:00000000 _slip_started
     /tmp/cc54LQ80.s:156    .text:0000000c get_byte
                            *COM*:00000002 g_dv_in
     /tmp/cc54LQ80.s:184    .text:0000001c slip_rx
     /tmp/cc54LQ80.s:664    .progmem.data:00000025 __c.2338
     /tmp/cc54LQ80.s:660    .progmem.data:00000000 __c.2340
     /tmp/cc54LQ80.s:405    .text:00000148 put_byte
                            *COM*:00000001 g_delay
                            *COM*:00000002 g_dv_out
     /tmp/cc54LQ80.s:455    .text:00000182 slip_tx
                            *COM*:00000002 slip_tx_sem
     /tmp/cc54LQ80.s:672    .progmem.data:0000006f __c.2304
     /tmp/cc54LQ80.s:668    .progmem.data:00000041 __c.2309
     /tmp/cc54LQ80.s:595    .text:00000228 slip_init
                            *COM*:00000001 g_echo
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
fgetc
nrk_uart_rx_signal_get
nrk_kprintf
nrk_signal_register
__iob
nrk_uart_data_ready
nrk_event_wait
nrk_spin_wait_us
fputc
nrk_sem_pend
nrk_sem_post
_nrk_errno_set
nrk_sem_create
nrk_get_pid
nrk_kernel_error_add
